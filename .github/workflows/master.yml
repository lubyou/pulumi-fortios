env:
  PROVIDER: fortios

  AWS_ACCESS_KEY_ID: ${{ secrets.AWS_ACCESS_KEY_ID }}
  AWS_SECRET_ACCESS_KEY: ${{ secrets.AWS_SECRET_ACCESS_KEY }}
  AWS_DEFAULT_REGION: ${{ secrets.AWS_DEFAULT_REGION }}

  GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
  NODE_AUTH_TOKEN: ${{ secrets.NPM_TOKEN }}
  NPM_TOKEN: ${{ secrets.NPM_TOKEN }}
  PYPI_PASSWORD: ${{ secrets.PYPI_PASSWORD }}
  # NUGET_PUBLISH_KEY: ${{ secrets.NUGET_PUBLISH_KEY }}

  TRAVIS_OS_NAME: linux

  DOTNETVERSION: 3.1.301
  GOVERSION: 1.19.x
  JAVAVERSION: 11
  NODEVERSION: 16.x
  PYTHONVERSION: 3.9

name: master
on: workflow_dispatch
#   push:
#     branches:
#       - master
#     paths-ignore:
#       - CHANGELOG.md
#     tags-ignore:
#       - v*
#       - sdk/*
#       - "**"

jobs:
  prerequisites:
    name: prerequisites
    runs-on: ubuntu-latest
    steps:
      - name: Checkout Repo
        uses: actions/checkout@v3
        with:
          submodules: true
      - name: Checkout Scripts Repo
        uses: actions/checkout@v3
        with:
          path: ci-scripts
          repository: pulumi/scripts
      - name: Unshallow clone for tags
        if: ${{ !env.ACT }}
        run: git fetch --prune --unshallow --tags
      - name: Install Go
        uses: actions/setup-go@v2
        with:
          go-version: ${{ env.GOVERSION }}
      - name: Install pulumictl
        uses: jaxxstorm/action-install-gh-release@v1.2.0
        with:
          repo: pulumi/pulumictl
      - name: Install Pulumi CLI
        uses: pulumi/setup-pulumi@v2
      - if: github.event_name == 'pull_request'
        name: Install Schema Tools
        uses: jaxxstorm/action-install-gh-release@v1.2.0
        with:
          repo: mikhailshilkov/schema-tools
      - name: Build tfgen & provider binaries
        run: make provider
      - if: github.event_name == 'pull_request'
        name: Check Schema is Valid
        run: |-
          echo 'SCHEMA_CHANGES<<EOF' >> $GITHUB_ENV
          schema-tools compare ${{ env.PROVIDER }} master --local-path=provider/cmd/pulumi-resource-${{ env.PROVIDER }}/schema.json >> $GITHUB_ENV
          echo 'EOF' >> $GITHUB_ENV
      - if: github.event_name == 'pull_request'
        name: Comment on PR with Details of Schema Check
        uses: thollander/actions-comment-pull-request@1.0.1
        with:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
          message: |
            ### Does the PR have any schema changes?

            ${{ env.SCHEMA_CHANGES }}
      - name: Tar provider binaries
        run: tar -zcf ${{ github.workspace }}/bin/provider.tar.gz -C ${{ github.workspace }}/bin/ pulumi-resource-${{ env.PROVIDER }} pulumi-tfgen-${{ env.PROVIDER }}
      - name: Upload artifacts
#        if: ${{ !env.ACT }}
        uses: actions/upload-artifact@v2
        with:
          name: ${{ env.PROVIDER }}-provider.tar.gz
          path: ${{ github.workspace }}/bin/provider.tar.gz

  build_sdk:
    name: build_sdk
    needs: prerequisites
    runs-on: ubuntu-latest
    steps:
      - name: Checkout Repo
        uses: actions/checkout@v3
        with:
          submodules: true
      - name: Checkout Scripts Repo
        uses: actions/checkout@v3
        with:
          path: ci-scripts
          repository: pulumi/scripts
      - name: Unshallow clone for tags
        if: ${{ !env.ACT }}
        run: git fetch --prune --unshallow --tags
      # go is always needed
      - name: Install Go
        uses: actions/setup-go@v2
        with:
          go-version: ${{ env.GOVERSION }}
      - name: Install pulumictl
        uses: jaxxstorm/action-install-gh-release@v1.2.0
        with:
          repo: pulumi/pulumictl
      - name: Install Pulumi CLI
        uses: pulumi/setup-pulumi@v2
      - name: Setup Node
        if: matrix.language == 'nodejs'
        uses: actions/setup-node@v2
        with:
          node-version: ${{ env.NODEVERSION }}
          registry-url: https://registry.npmjs.org
      - name: Setup DotNet
        if: matrix.language == 'dotnet'
        uses: actions/setup-dotnet@v1
        with:
          dotnet-version: ${{ env.DOTNETVERSION }}
      - name: Setup Python
        if: matrix.language == 'python'
        uses: actions/setup-python@v2
        with:
          python-version: ${{ env.PYTHONVERSION }}
      - name: Download provider + tfgen binaries
        # if: ${{ !env.ACT }}
        uses: actions/download-artifact@v2
        with:
          name: ${{ env.PROVIDER }}-provider.tar.gz
          path: ${{ github.workspace }}/bin
      - name: Untar provider binaries
        run: |-
          tar -zxf ${{ github.workspace }}/bin/provider.tar.gz -C ${{ github.workspace }}/bin
          find ${{ github.workspace }} -name "pulumi-*-${{ env.PROVIDER }}" -print -exec chmod +x {} \;
      - name: Build SDK
        run: make build_${{ matrix.language }}
      - name: Check worktree clean
        # if: ${{ !env.ACT }}
        run: ./ci-scripts/ci/check-worktree-is-clean
      - name: Compress SDK folder
        run:
          tar -zcf sdk/${{ matrix.language }}.tar.gz -C sdk/${{ matrix.language }}
          .
      - name: Upload artifacts
        # if: ${{ !env.ACT }}
        uses: actions/upload-artifact@v2
        with:
          name: ${{ matrix.language  }}-sdk.tar.gz
          path: ${{ github.workspace }}/sdk/${{ matrix.language }}.tar.gz

    strategy:
      fail-fast: true
      matrix:
        language:
          - nodejs
          - python
          # - dotnet
          - go

  # lint:
  #   container: golangci/golangci-lint:latest
  #   name: lint
  #   runs-on: ubuntu-latest
  #   steps:
  #   - name: Checkout Repo
  #     uses: actions/checkout@v3
  #     with:
  #       submodules: true
  #   - name: Checkout Scripts Repo
  #     uses: actions/checkout@v3
  #     with:
  #       path: ci-scripts
  #       repository: pulumi/scripts
  #   - name: Unshallow clone for tags
  #     run: git fetch --prune --unshallow --tags
  #   - name: Install Go
  #     uses: actions/setup-go@v2
  #     with:
  #       go-version: ${{ env.GOVERSION }}
  #   - name: Install pulumictl
  #     uses: jaxxstorm/action-install-gh-release@v1.2.0
  #     with:
  #       repo: pulumi/pulumictl
  #   - name: Install Pulumi CLI
  #     uses: pulumi/setup-pulumi@v2
  #   - run: make lint_provider
  #   strategy:
  #     fail-fast: true
  #     matrix:
  #       goversion:
  #       - ${{ env.NODEVERSION }}

  # lint_sdk:
  #   container: golangci/golangci-lint:latest
  #   name: lint-sdk
  #   needs: build_sdk
  #   runs-on: ubuntu-latest
  #   steps:
  #   - name: Checkout Repo
  #     uses: actions/checkout@v3
  #       with:
  #       submodules: true
  #   - name: Checkout Scripts Repo
  #     uses: actions/checkout@v3
  #     with:
  #       path: ci-scripts
  #       repository: pulumi/scripts
  #   - name: Unshallow clone for tags
  #     run: git fetch --prune --unshallow --tags
  #   - name: Install Go
  #     uses: actions/setup-go@v2
  #     with:
  #       go-version: ${{ env.GOVERSION }}
  #   - name: Install pulumictl
  #     uses: jaxxstorm/action-install-gh-release@v1.2.0
  #     with:
  #       repo: pulumi/pulumictl
  #   - name: Install Pulumi CLI
  #     uses: pulumi/setup-pulumi@v2
  #   - run: cd sdk/go/${{ env.PROVIDER }} && golangci-lint run -c ../../../.golangci.yml
  #   strategy:
  #     fail-fast: true
  #     matrix:
  #       goversion:
  #       - ${{ env.NODEVERSION }}

  publish:
    name: publish
    if: ${{ !env.ACT }}
    #needs: test
    needs: build_sdk
    runs-on: ubuntu-latest
    steps:
      - name: Checkout Repo
        uses: actions/checkout@v3
        with:
          submodules: true
      - name: Unshallow clone for tags
        run: git fetch --prune --unshallow --tags
      - name: Install Go
        uses: actions/setup-go@v2
        with:
          go-version: ${{ env.GOVERSION }}
      - name: Install pulumictl
        uses: jaxxstorm/action-install-gh-release@v1.2.0
        with:
          repo: pulumi/pulumictl
      - name: Install Pulumi CLI
        uses: pulumi/setup-pulumi@v2
      - name: Set PreRelease Version
        run: echo "GORELEASER_CURRENT_TAG=v$(pulumictl get version --language generic)" >> $GITHUB_ENV; echo v$(pulumictl get version --language generic)
      - name: Run GoReleaser
        uses: goreleaser/goreleaser-action@v2
        with:
          args: -p 1 -f .goreleaser.prerelease.yml --rm-dist --skip-validate --timeout 60m0s
          version: latest


  publish_sdk:
    name: publish_sdk
    if: ${{ !env.ACT }}
    needs:
      - build_sdk
      - publish
    runs-on: ubuntu-latest
    steps:
      - name: Checkout Repo
        uses: actions/checkout@v3
        with:
          submodules: true
      - name: Checkout Scripts Repo
        uses: actions/checkout@v3
        with:
          path: ci-scripts
          repository: pulumi/scripts
          ref: cd87b45d3187e45b5b9a7d99e885c9bcc436990a
      - name: Unshallow clone for tags
        run: git fetch --prune --unshallow --tags
      - name: Install Go
        uses: actions/setup-go@v2
        with:
          go-version: ${{ env.GOVERSION }}
      - name: Install pulumictl
        uses: jaxxstorm/action-install-gh-release@v1.2.0
        with:
          repo: pulumi/pulumictl
      - name: Install Pulumi CLI
        uses: pulumi/setup-pulumi@v2
      - name: Setup Node
        uses: actions/setup-node@v2
        with:
          node-version: ${{ env.NODEVERSION }}
          always-auth: true
          registry-url: https://registry.npmjs.org
      - name: Setup DotNet
        uses: actions/setup-dotnet@v1
        with:
          dotnet-version: ${{ env.DOTNETVERSION }}
      - name: Setup Python
        uses: actions/setup-python@v2
        with:
          python-version: ${{ env.PYTHONVERSION }}
      - name: Download Python SDK
        uses: actions/download-artifact@v2
        with:
          name: python-sdk.tar.gz
          path: ${{ github.workspace }}/sdk
      - name: Unzip Python SDK
        run: tar -zxf ${{ github.workspace }}/sdk/python.tar.gz -C ${{ github.workspace }}/sdk/python
      - name: Install Twine
        run: python -m pip install pip twine
      - name: Download NodeJS SDK
        uses: actions/download-artifact@v2
        with:
          name: nodejs-sdk.tar.gz
          path: ${{ github.workspace }}/sdk
      - name: Unzip NodeJS SDK
        run: tar -zxf ${{ github.workspace }}/sdk/nodejs.tar.gz -C ${{ github.workspace }}/sdk/nodejs
      # - name: Download DotNet SDK
      #   uses: actions/download-artifact@v2
      #   with:
      #     name: dotnet-sdk.tar.gz
      #     path: ${{ github.workspace }}/sdk
      # - name: Unzip DotNet SDK
      #   run: tar -zxf ${{ github.workspace }}/sdk/dotnet.tar.gz -C ${{ github.workspace }}/sdk/dotnet
      - name: Publish package to PyPI
        uses: pypa/gh-action-pypi-publish@release/v1
        with:
          user: __token__
          password: ${{ secrets.PYPI_PASSWORD }}
          packages_dir: ${{ github.workspace }}/sdk/python/bin/dist
      - uses: JS-DevTools/npm-publish@v1
        with:
          access: "public"
          token: ${{ secrets.NPM_TOKEN }}
          package: ${{ github.workspace }}/sdk/nodejs/bin/package.json

  # test:
  #   name: test
  #   needs: build_sdk
  #   runs-on: ubuntu-latest
  #   steps:
  #   - name: Checkout Repo
  #     uses: actions/checkout@v3
  #     with:
  #       submodules: true
  #   - name: Checkout Scripts Repo
  #     uses: actions/checkout@v3
  #     with:
  #       path: ci-scripts
  #       repository: pulumi/scripts
  #   - name: Unshallow clone for tags
  #     run: git fetch --prune --unshallow --tags
  #   - name: Install Go
  #     uses: actions/setup-go@v2
  #     with:
  #       go-version: ${{ env.GOVERSION }}
  #   - name: Install pulumictl
  #     uses: jaxxstorm/action-install-gh-release@v1.2.0
  #     with:
  #       repo: pulumi/pulumictl
  #   - name: Install Pulumi CLI
  #     uses: pulumi/setup-pulumi@v2
  #   - name: Setup Node
  #     uses: actions/setup-node@v2
  #     with:
  #       node-version: ${{ env.NODEVERSION }}
  #       registry-url: https://registry.npmjs.org
  #   - name: Setup DotNet
  #     uses: actions/setup-dotnet@v1
  #     with:
  #       dotnet-version: ${{ env.DOTNETVERSION }}
  #   - name: Setup Python
  #     uses: actions/setup-python@v2
  #     with:
  #       python-version: ${{ env.PYTHONVERSION }}
  #   - name: Download provider + tfgen binaries
  #     uses: actions/download-artifact@v2
  #     with:
  #       name: ${{ env.PROVIDER }}-provider.tar.gz
  #       path: ${{ github.workspace }}/bin
  #   - name: Untar provider binaries
  #     run: |-
  #       tar -zxf ${{ github.workspace }}/bin/provider.tar.gz -C ${{ github.workspace }}/bin
  #       find ${{ github.workspace }} -name "pulumi-*-${{ env.PROVIDER }}" -print -exec chmod +x {} \;
  #   - run: dotnet nuget add source ${{ github.workspace }}/nuget
  #   - name: Download SDK
  #     uses: actions/download-artifact@v2
  #     with:
  #       name: ${{ matrix.language }}-sdk.tar.gz
  #       path: ${{ github.workspace }}/sdk/
  #   - name: Uncompress SDK folder
  #     run: tar -zxf ${{ github.workspace }}/sdk/${{ matrix.language }}.tar.gz -C ${{
  #       github.workspace }}/sdk/${{ matrix.language }}
  #   - name: Update path
  #     run: echo "${{ github.workspace }}/bin" >> $GITHUB_PATH
  #   - name: Install Python deps
  #     run: |-
  #       pip3 install virtualenv==20.0.23
  #       pip3 install pipenv
  #   - name: Install dependencies
  #     run: make install_${{ matrix.language}}_sdk
  #   - name: Run tests
  #     run: cd examples && go test -v -count=1 -cover -timeout 2h -tags=${{ matrix.language
  #       }} -parallel 4 .
  #   - if: failure() && github.event_name == 'push'
  #     name: Notify Slack
  #     uses: 8398a7/action-slack@v3
  #     with:
  #       author_name: Failure in running ${{ matrix.language }} tests
  #       fields: repo,commit,author,action
  #       status: ${{ job.status }}
  #   strategy:
  #     fail-fast: true
  #     matrix:
  #       dotnetversion:
  #       - ${{ env.DOTNETVERSION }}
  #       goversion:
  #       - ${{ env.NODEVERSION }}
  #       language:
  # - nodejs
  #       - python
  #       # - dotnet
  #       - go
  #       nodeversion:
  #       - ${{ env.NODEVERSION }}
  #       pythonversion:
  #       - ${{ env.PYTHONVERSION }}
