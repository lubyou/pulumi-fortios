// Code generated by the Pulumi Terraform Bridge (tfgen) Tool DO NOT EDIT.
// *** WARNING: Do not edit by hand unless you're certain you know what you are doing! ***

package fortios

import (
	"context"
	"reflect"

	"github.com/pulumi/pulumi/sdk/v3/go/pulumi"
)

type UserPeer struct {
	pulumi.CustomResourceState

	Ca                 pulumi.StringOutput    `pulumi:"ca"`
	Cn                 pulumi.StringOutput    `pulumi:"cn"`
	CnType             pulumi.StringOutput    `pulumi:"cnType"`
	LdapMode           pulumi.StringOutput    `pulumi:"ldapMode"`
	LdapPassword       pulumi.StringPtrOutput `pulumi:"ldapPassword"`
	LdapServer         pulumi.StringOutput    `pulumi:"ldapServer"`
	LdapUsername       pulumi.StringOutput    `pulumi:"ldapUsername"`
	MandatoryCaVerify  pulumi.StringOutput    `pulumi:"mandatoryCaVerify"`
	Name               pulumi.StringOutput    `pulumi:"name"`
	OcspOverrideServer pulumi.StringOutput    `pulumi:"ocspOverrideServer"`
	Passwd             pulumi.StringPtrOutput `pulumi:"passwd"`
	Subject            pulumi.StringOutput    `pulumi:"subject"`
	TwoFactor          pulumi.StringOutput    `pulumi:"twoFactor"`
	Vdomparam          pulumi.StringPtrOutput `pulumi:"vdomparam"`
}

// NewUserPeer registers a new resource with the given unique name, arguments, and options.
func NewUserPeer(ctx *pulumi.Context,
	name string, args *UserPeerArgs, opts ...pulumi.ResourceOption) (*UserPeer, error) {
	if args == nil {
		args = &UserPeerArgs{}
	}

	if args.LdapPassword != nil {
		args.LdapPassword = pulumi.ToSecret(args.LdapPassword).(pulumi.StringPtrInput)
	}
	if args.Passwd != nil {
		args.Passwd = pulumi.ToSecret(args.Passwd).(pulumi.StringPtrInput)
	}
	secrets := pulumi.AdditionalSecretOutputs([]string{
		"ldapPassword",
		"passwd",
	})
	opts = append(opts, secrets)
	opts = pkgResourceDefaultOpts(opts)
	var resource UserPeer
	err := ctx.RegisterResource("fortios:index/userPeer:UserPeer", name, args, &resource, opts...)
	if err != nil {
		return nil, err
	}
	return &resource, nil
}

// GetUserPeer gets an existing UserPeer resource's state with the given name, ID, and optional
// state properties that are used to uniquely qualify the lookup (nil if not required).
func GetUserPeer(ctx *pulumi.Context,
	name string, id pulumi.IDInput, state *UserPeerState, opts ...pulumi.ResourceOption) (*UserPeer, error) {
	var resource UserPeer
	err := ctx.ReadResource("fortios:index/userPeer:UserPeer", name, id, state, &resource, opts...)
	if err != nil {
		return nil, err
	}
	return &resource, nil
}

// Input properties used for looking up and filtering UserPeer resources.
type userPeerState struct {
	Ca                 *string `pulumi:"ca"`
	Cn                 *string `pulumi:"cn"`
	CnType             *string `pulumi:"cnType"`
	LdapMode           *string `pulumi:"ldapMode"`
	LdapPassword       *string `pulumi:"ldapPassword"`
	LdapServer         *string `pulumi:"ldapServer"`
	LdapUsername       *string `pulumi:"ldapUsername"`
	MandatoryCaVerify  *string `pulumi:"mandatoryCaVerify"`
	Name               *string `pulumi:"name"`
	OcspOverrideServer *string `pulumi:"ocspOverrideServer"`
	Passwd             *string `pulumi:"passwd"`
	Subject            *string `pulumi:"subject"`
	TwoFactor          *string `pulumi:"twoFactor"`
	Vdomparam          *string `pulumi:"vdomparam"`
}

type UserPeerState struct {
	Ca                 pulumi.StringPtrInput
	Cn                 pulumi.StringPtrInput
	CnType             pulumi.StringPtrInput
	LdapMode           pulumi.StringPtrInput
	LdapPassword       pulumi.StringPtrInput
	LdapServer         pulumi.StringPtrInput
	LdapUsername       pulumi.StringPtrInput
	MandatoryCaVerify  pulumi.StringPtrInput
	Name               pulumi.StringPtrInput
	OcspOverrideServer pulumi.StringPtrInput
	Passwd             pulumi.StringPtrInput
	Subject            pulumi.StringPtrInput
	TwoFactor          pulumi.StringPtrInput
	Vdomparam          pulumi.StringPtrInput
}

func (UserPeerState) ElementType() reflect.Type {
	return reflect.TypeOf((*userPeerState)(nil)).Elem()
}

type userPeerArgs struct {
	Ca                 *string `pulumi:"ca"`
	Cn                 *string `pulumi:"cn"`
	CnType             *string `pulumi:"cnType"`
	LdapMode           *string `pulumi:"ldapMode"`
	LdapPassword       *string `pulumi:"ldapPassword"`
	LdapServer         *string `pulumi:"ldapServer"`
	LdapUsername       *string `pulumi:"ldapUsername"`
	MandatoryCaVerify  *string `pulumi:"mandatoryCaVerify"`
	Name               *string `pulumi:"name"`
	OcspOverrideServer *string `pulumi:"ocspOverrideServer"`
	Passwd             *string `pulumi:"passwd"`
	Subject            *string `pulumi:"subject"`
	TwoFactor          *string `pulumi:"twoFactor"`
	Vdomparam          *string `pulumi:"vdomparam"`
}

// The set of arguments for constructing a UserPeer resource.
type UserPeerArgs struct {
	Ca                 pulumi.StringPtrInput
	Cn                 pulumi.StringPtrInput
	CnType             pulumi.StringPtrInput
	LdapMode           pulumi.StringPtrInput
	LdapPassword       pulumi.StringPtrInput
	LdapServer         pulumi.StringPtrInput
	LdapUsername       pulumi.StringPtrInput
	MandatoryCaVerify  pulumi.StringPtrInput
	Name               pulumi.StringPtrInput
	OcspOverrideServer pulumi.StringPtrInput
	Passwd             pulumi.StringPtrInput
	Subject            pulumi.StringPtrInput
	TwoFactor          pulumi.StringPtrInput
	Vdomparam          pulumi.StringPtrInput
}

func (UserPeerArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*userPeerArgs)(nil)).Elem()
}

type UserPeerInput interface {
	pulumi.Input

	ToUserPeerOutput() UserPeerOutput
	ToUserPeerOutputWithContext(ctx context.Context) UserPeerOutput
}

func (*UserPeer) ElementType() reflect.Type {
	return reflect.TypeOf((**UserPeer)(nil)).Elem()
}

func (i *UserPeer) ToUserPeerOutput() UserPeerOutput {
	return i.ToUserPeerOutputWithContext(context.Background())
}

func (i *UserPeer) ToUserPeerOutputWithContext(ctx context.Context) UserPeerOutput {
	return pulumi.ToOutputWithContext(ctx, i).(UserPeerOutput)
}

// UserPeerArrayInput is an input type that accepts UserPeerArray and UserPeerArrayOutput values.
// You can construct a concrete instance of `UserPeerArrayInput` via:
//
//	UserPeerArray{ UserPeerArgs{...} }
type UserPeerArrayInput interface {
	pulumi.Input

	ToUserPeerArrayOutput() UserPeerArrayOutput
	ToUserPeerArrayOutputWithContext(context.Context) UserPeerArrayOutput
}

type UserPeerArray []UserPeerInput

func (UserPeerArray) ElementType() reflect.Type {
	return reflect.TypeOf((*[]*UserPeer)(nil)).Elem()
}

func (i UserPeerArray) ToUserPeerArrayOutput() UserPeerArrayOutput {
	return i.ToUserPeerArrayOutputWithContext(context.Background())
}

func (i UserPeerArray) ToUserPeerArrayOutputWithContext(ctx context.Context) UserPeerArrayOutput {
	return pulumi.ToOutputWithContext(ctx, i).(UserPeerArrayOutput)
}

// UserPeerMapInput is an input type that accepts UserPeerMap and UserPeerMapOutput values.
// You can construct a concrete instance of `UserPeerMapInput` via:
//
//	UserPeerMap{ "key": UserPeerArgs{...} }
type UserPeerMapInput interface {
	pulumi.Input

	ToUserPeerMapOutput() UserPeerMapOutput
	ToUserPeerMapOutputWithContext(context.Context) UserPeerMapOutput
}

type UserPeerMap map[string]UserPeerInput

func (UserPeerMap) ElementType() reflect.Type {
	return reflect.TypeOf((*map[string]*UserPeer)(nil)).Elem()
}

func (i UserPeerMap) ToUserPeerMapOutput() UserPeerMapOutput {
	return i.ToUserPeerMapOutputWithContext(context.Background())
}

func (i UserPeerMap) ToUserPeerMapOutputWithContext(ctx context.Context) UserPeerMapOutput {
	return pulumi.ToOutputWithContext(ctx, i).(UserPeerMapOutput)
}

type UserPeerOutput struct{ *pulumi.OutputState }

func (UserPeerOutput) ElementType() reflect.Type {
	return reflect.TypeOf((**UserPeer)(nil)).Elem()
}

func (o UserPeerOutput) ToUserPeerOutput() UserPeerOutput {
	return o
}

func (o UserPeerOutput) ToUserPeerOutputWithContext(ctx context.Context) UserPeerOutput {
	return o
}

func (o UserPeerOutput) Ca() pulumi.StringOutput {
	return o.ApplyT(func(v *UserPeer) pulumi.StringOutput { return v.Ca }).(pulumi.StringOutput)
}

func (o UserPeerOutput) Cn() pulumi.StringOutput {
	return o.ApplyT(func(v *UserPeer) pulumi.StringOutput { return v.Cn }).(pulumi.StringOutput)
}

func (o UserPeerOutput) CnType() pulumi.StringOutput {
	return o.ApplyT(func(v *UserPeer) pulumi.StringOutput { return v.CnType }).(pulumi.StringOutput)
}

func (o UserPeerOutput) LdapMode() pulumi.StringOutput {
	return o.ApplyT(func(v *UserPeer) pulumi.StringOutput { return v.LdapMode }).(pulumi.StringOutput)
}

func (o UserPeerOutput) LdapPassword() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *UserPeer) pulumi.StringPtrOutput { return v.LdapPassword }).(pulumi.StringPtrOutput)
}

func (o UserPeerOutput) LdapServer() pulumi.StringOutput {
	return o.ApplyT(func(v *UserPeer) pulumi.StringOutput { return v.LdapServer }).(pulumi.StringOutput)
}

func (o UserPeerOutput) LdapUsername() pulumi.StringOutput {
	return o.ApplyT(func(v *UserPeer) pulumi.StringOutput { return v.LdapUsername }).(pulumi.StringOutput)
}

func (o UserPeerOutput) MandatoryCaVerify() pulumi.StringOutput {
	return o.ApplyT(func(v *UserPeer) pulumi.StringOutput { return v.MandatoryCaVerify }).(pulumi.StringOutput)
}

func (o UserPeerOutput) Name() pulumi.StringOutput {
	return o.ApplyT(func(v *UserPeer) pulumi.StringOutput { return v.Name }).(pulumi.StringOutput)
}

func (o UserPeerOutput) OcspOverrideServer() pulumi.StringOutput {
	return o.ApplyT(func(v *UserPeer) pulumi.StringOutput { return v.OcspOverrideServer }).(pulumi.StringOutput)
}

func (o UserPeerOutput) Passwd() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *UserPeer) pulumi.StringPtrOutput { return v.Passwd }).(pulumi.StringPtrOutput)
}

func (o UserPeerOutput) Subject() pulumi.StringOutput {
	return o.ApplyT(func(v *UserPeer) pulumi.StringOutput { return v.Subject }).(pulumi.StringOutput)
}

func (o UserPeerOutput) TwoFactor() pulumi.StringOutput {
	return o.ApplyT(func(v *UserPeer) pulumi.StringOutput { return v.TwoFactor }).(pulumi.StringOutput)
}

func (o UserPeerOutput) Vdomparam() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *UserPeer) pulumi.StringPtrOutput { return v.Vdomparam }).(pulumi.StringPtrOutput)
}

type UserPeerArrayOutput struct{ *pulumi.OutputState }

func (UserPeerArrayOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*[]*UserPeer)(nil)).Elem()
}

func (o UserPeerArrayOutput) ToUserPeerArrayOutput() UserPeerArrayOutput {
	return o
}

func (o UserPeerArrayOutput) ToUserPeerArrayOutputWithContext(ctx context.Context) UserPeerArrayOutput {
	return o
}

func (o UserPeerArrayOutput) Index(i pulumi.IntInput) UserPeerOutput {
	return pulumi.All(o, i).ApplyT(func(vs []interface{}) *UserPeer {
		return vs[0].([]*UserPeer)[vs[1].(int)]
	}).(UserPeerOutput)
}

type UserPeerMapOutput struct{ *pulumi.OutputState }

func (UserPeerMapOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*map[string]*UserPeer)(nil)).Elem()
}

func (o UserPeerMapOutput) ToUserPeerMapOutput() UserPeerMapOutput {
	return o
}

func (o UserPeerMapOutput) ToUserPeerMapOutputWithContext(ctx context.Context) UserPeerMapOutput {
	return o
}

func (o UserPeerMapOutput) MapIndex(k pulumi.StringInput) UserPeerOutput {
	return pulumi.All(o, k).ApplyT(func(vs []interface{}) *UserPeer {
		return vs[0].(map[string]*UserPeer)[vs[1].(string)]
	}).(UserPeerOutput)
}

func init() {
	pulumi.RegisterInputType(reflect.TypeOf((*UserPeerInput)(nil)).Elem(), &UserPeer{})
	pulumi.RegisterInputType(reflect.TypeOf((*UserPeerArrayInput)(nil)).Elem(), UserPeerArray{})
	pulumi.RegisterInputType(reflect.TypeOf((*UserPeerMapInput)(nil)).Elem(), UserPeerMap{})
	pulumi.RegisterOutputType(UserPeerOutput{})
	pulumi.RegisterOutputType(UserPeerArrayOutput{})
	pulumi.RegisterOutputType(UserPeerMapOutput{})
}
