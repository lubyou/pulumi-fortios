// *** WARNING: this file was generated by the Pulumi Terraform Bridge (tfgen) Tool. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

package fortios

import (
	"context"
	"reflect"

	"github.com/pulumi/pulumi/sdk/v3/go/pulumi"
)

// Configure peer groups.
//
// ## Example Usage
//
// ```go
// package main
//
// import (
// 	"github.com/pulumi/pulumi-fortios/sdk/go/fortios"
// 	"github.com/pulumi/pulumi/sdk/v3/go/pulumi"
// )
//
// func main() {
// 	pulumi.Run(func(ctx *pulumi.Context) error {
// 		trname2, err := fortios.NewUserPeer(ctx, "trname2", &fortios.UserPeerArgs{
// 			Ca:                pulumi.String("EC-ACC"),
// 			CnType:            pulumi.String("string"),
// 			LdapMode:          pulumi.String("password"),
// 			MandatoryCaVerify: pulumi.String("enable"),
// 			TwoFactor:         pulumi.String("disable"),
// 		})
// 		if err != nil {
// 			return err
// 		}
// 		_, err = fortios.NewUserPeergrp(ctx, "trname", &fortios.UserPeergrpArgs{
// 			Members: UserPeergrpMemberArray{
// 				&UserPeergrpMemberArgs{
// 					Name: trname2.Name,
// 				},
// 			},
// 		})
// 		if err != nil {
// 			return err
// 		}
// 		return nil
// 	})
// }
// ```
//
// ## Import
//
// User Peergrp can be imported using any of these accepted formats
//
// ```sh
//  $ pulumi import fortios:index/userPeergrp:UserPeergrp labelname {{name}}
// ```
//
//  If you do not want to import arguments of block$ export "FORTIOS_IMPORT_TABLE"="false"
//
// ```sh
//  $ pulumi import fortios:index/userPeergrp:UserPeergrp labelname {{name}}
// ```
//
//  $ unset "FORTIOS_IMPORT_TABLE"
type UserPeergrp struct {
	pulumi.CustomResourceState

	// true or false, set this parameter to true when using dynamic forEach + toset to configure and sort sub-tables, please do not set this parameter when configuring static sub-tables.
	DynamicSortSubtable pulumi.StringPtrOutput `pulumi:"dynamicSortSubtable"`
	// Peer group members. The structure of `member` block is documented below.
	Members UserPeergrpMemberArrayOutput `pulumi:"members"`
	// Peer group member name.
	Name pulumi.StringOutput `pulumi:"name"`
	// Specifies the vdom to which the resource will be applied when the FortiGate unit is running in VDOM mode. Only one vdom can be specified. If you want to inherit the vdom configuration of the provider, please do not set this parameter.
	Vdomparam pulumi.StringPtrOutput `pulumi:"vdomparam"`
}

// NewUserPeergrp registers a new resource with the given unique name, arguments, and options.
func NewUserPeergrp(ctx *pulumi.Context,
	name string, args *UserPeergrpArgs, opts ...pulumi.ResourceOption) (*UserPeergrp, error) {
	if args == nil {
		args = &UserPeergrpArgs{}
	}

	opts = pkgResourceDefaultOpts(opts)
	var resource UserPeergrp
	err := ctx.RegisterResource("fortios:index/userPeergrp:UserPeergrp", name, args, &resource, opts...)
	if err != nil {
		return nil, err
	}
	return &resource, nil
}

// GetUserPeergrp gets an existing UserPeergrp resource's state with the given name, ID, and optional
// state properties that are used to uniquely qualify the lookup (nil if not required).
func GetUserPeergrp(ctx *pulumi.Context,
	name string, id pulumi.IDInput, state *UserPeergrpState, opts ...pulumi.ResourceOption) (*UserPeergrp, error) {
	var resource UserPeergrp
	err := ctx.ReadResource("fortios:index/userPeergrp:UserPeergrp", name, id, state, &resource, opts...)
	if err != nil {
		return nil, err
	}
	return &resource, nil
}

// Input properties used for looking up and filtering UserPeergrp resources.
type userPeergrpState struct {
	// true or false, set this parameter to true when using dynamic forEach + toset to configure and sort sub-tables, please do not set this parameter when configuring static sub-tables.
	DynamicSortSubtable *string `pulumi:"dynamicSortSubtable"`
	// Peer group members. The structure of `member` block is documented below.
	Members []UserPeergrpMember `pulumi:"members"`
	// Peer group member name.
	Name *string `pulumi:"name"`
	// Specifies the vdom to which the resource will be applied when the FortiGate unit is running in VDOM mode. Only one vdom can be specified. If you want to inherit the vdom configuration of the provider, please do not set this parameter.
	Vdomparam *string `pulumi:"vdomparam"`
}

type UserPeergrpState struct {
	// true or false, set this parameter to true when using dynamic forEach + toset to configure and sort sub-tables, please do not set this parameter when configuring static sub-tables.
	DynamicSortSubtable pulumi.StringPtrInput
	// Peer group members. The structure of `member` block is documented below.
	Members UserPeergrpMemberArrayInput
	// Peer group member name.
	Name pulumi.StringPtrInput
	// Specifies the vdom to which the resource will be applied when the FortiGate unit is running in VDOM mode. Only one vdom can be specified. If you want to inherit the vdom configuration of the provider, please do not set this parameter.
	Vdomparam pulumi.StringPtrInput
}

func (UserPeergrpState) ElementType() reflect.Type {
	return reflect.TypeOf((*userPeergrpState)(nil)).Elem()
}

type userPeergrpArgs struct {
	// true or false, set this parameter to true when using dynamic forEach + toset to configure and sort sub-tables, please do not set this parameter when configuring static sub-tables.
	DynamicSortSubtable *string `pulumi:"dynamicSortSubtable"`
	// Peer group members. The structure of `member` block is documented below.
	Members []UserPeergrpMember `pulumi:"members"`
	// Peer group member name.
	Name *string `pulumi:"name"`
	// Specifies the vdom to which the resource will be applied when the FortiGate unit is running in VDOM mode. Only one vdom can be specified. If you want to inherit the vdom configuration of the provider, please do not set this parameter.
	Vdomparam *string `pulumi:"vdomparam"`
}

// The set of arguments for constructing a UserPeergrp resource.
type UserPeergrpArgs struct {
	// true or false, set this parameter to true when using dynamic forEach + toset to configure and sort sub-tables, please do not set this parameter when configuring static sub-tables.
	DynamicSortSubtable pulumi.StringPtrInput
	// Peer group members. The structure of `member` block is documented below.
	Members UserPeergrpMemberArrayInput
	// Peer group member name.
	Name pulumi.StringPtrInput
	// Specifies the vdom to which the resource will be applied when the FortiGate unit is running in VDOM mode. Only one vdom can be specified. If you want to inherit the vdom configuration of the provider, please do not set this parameter.
	Vdomparam pulumi.StringPtrInput
}

func (UserPeergrpArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*userPeergrpArgs)(nil)).Elem()
}

type UserPeergrpInput interface {
	pulumi.Input

	ToUserPeergrpOutput() UserPeergrpOutput
	ToUserPeergrpOutputWithContext(ctx context.Context) UserPeergrpOutput
}

func (*UserPeergrp) ElementType() reflect.Type {
	return reflect.TypeOf((**UserPeergrp)(nil)).Elem()
}

func (i *UserPeergrp) ToUserPeergrpOutput() UserPeergrpOutput {
	return i.ToUserPeergrpOutputWithContext(context.Background())
}

func (i *UserPeergrp) ToUserPeergrpOutputWithContext(ctx context.Context) UserPeergrpOutput {
	return pulumi.ToOutputWithContext(ctx, i).(UserPeergrpOutput)
}

// UserPeergrpArrayInput is an input type that accepts UserPeergrpArray and UserPeergrpArrayOutput values.
// You can construct a concrete instance of `UserPeergrpArrayInput` via:
//
//          UserPeergrpArray{ UserPeergrpArgs{...} }
type UserPeergrpArrayInput interface {
	pulumi.Input

	ToUserPeergrpArrayOutput() UserPeergrpArrayOutput
	ToUserPeergrpArrayOutputWithContext(context.Context) UserPeergrpArrayOutput
}

type UserPeergrpArray []UserPeergrpInput

func (UserPeergrpArray) ElementType() reflect.Type {
	return reflect.TypeOf((*[]*UserPeergrp)(nil)).Elem()
}

func (i UserPeergrpArray) ToUserPeergrpArrayOutput() UserPeergrpArrayOutput {
	return i.ToUserPeergrpArrayOutputWithContext(context.Background())
}

func (i UserPeergrpArray) ToUserPeergrpArrayOutputWithContext(ctx context.Context) UserPeergrpArrayOutput {
	return pulumi.ToOutputWithContext(ctx, i).(UserPeergrpArrayOutput)
}

// UserPeergrpMapInput is an input type that accepts UserPeergrpMap and UserPeergrpMapOutput values.
// You can construct a concrete instance of `UserPeergrpMapInput` via:
//
//          UserPeergrpMap{ "key": UserPeergrpArgs{...} }
type UserPeergrpMapInput interface {
	pulumi.Input

	ToUserPeergrpMapOutput() UserPeergrpMapOutput
	ToUserPeergrpMapOutputWithContext(context.Context) UserPeergrpMapOutput
}

type UserPeergrpMap map[string]UserPeergrpInput

func (UserPeergrpMap) ElementType() reflect.Type {
	return reflect.TypeOf((*map[string]*UserPeergrp)(nil)).Elem()
}

func (i UserPeergrpMap) ToUserPeergrpMapOutput() UserPeergrpMapOutput {
	return i.ToUserPeergrpMapOutputWithContext(context.Background())
}

func (i UserPeergrpMap) ToUserPeergrpMapOutputWithContext(ctx context.Context) UserPeergrpMapOutput {
	return pulumi.ToOutputWithContext(ctx, i).(UserPeergrpMapOutput)
}

type UserPeergrpOutput struct{ *pulumi.OutputState }

func (UserPeergrpOutput) ElementType() reflect.Type {
	return reflect.TypeOf((**UserPeergrp)(nil)).Elem()
}

func (o UserPeergrpOutput) ToUserPeergrpOutput() UserPeergrpOutput {
	return o
}

func (o UserPeergrpOutput) ToUserPeergrpOutputWithContext(ctx context.Context) UserPeergrpOutput {
	return o
}

type UserPeergrpArrayOutput struct{ *pulumi.OutputState }

func (UserPeergrpArrayOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*[]*UserPeergrp)(nil)).Elem()
}

func (o UserPeergrpArrayOutput) ToUserPeergrpArrayOutput() UserPeergrpArrayOutput {
	return o
}

func (o UserPeergrpArrayOutput) ToUserPeergrpArrayOutputWithContext(ctx context.Context) UserPeergrpArrayOutput {
	return o
}

func (o UserPeergrpArrayOutput) Index(i pulumi.IntInput) UserPeergrpOutput {
	return pulumi.All(o, i).ApplyT(func(vs []interface{}) *UserPeergrp {
		return vs[0].([]*UserPeergrp)[vs[1].(int)]
	}).(UserPeergrpOutput)
}

type UserPeergrpMapOutput struct{ *pulumi.OutputState }

func (UserPeergrpMapOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*map[string]*UserPeergrp)(nil)).Elem()
}

func (o UserPeergrpMapOutput) ToUserPeergrpMapOutput() UserPeergrpMapOutput {
	return o
}

func (o UserPeergrpMapOutput) ToUserPeergrpMapOutputWithContext(ctx context.Context) UserPeergrpMapOutput {
	return o
}

func (o UserPeergrpMapOutput) MapIndex(k pulumi.StringInput) UserPeergrpOutput {
	return pulumi.All(o, k).ApplyT(func(vs []interface{}) *UserPeergrp {
		return vs[0].(map[string]*UserPeergrp)[vs[1].(string)]
	}).(UserPeergrpOutput)
}

func init() {
	pulumi.RegisterInputType(reflect.TypeOf((*UserPeergrpInput)(nil)).Elem(), &UserPeergrp{})
	pulumi.RegisterInputType(reflect.TypeOf((*UserPeergrpArrayInput)(nil)).Elem(), UserPeergrpArray{})
	pulumi.RegisterInputType(reflect.TypeOf((*UserPeergrpMapInput)(nil)).Elem(), UserPeergrpMap{})
	pulumi.RegisterOutputType(UserPeergrpOutput{})
	pulumi.RegisterOutputType(UserPeergrpArrayOutput{})
	pulumi.RegisterOutputType(UserPeergrpMapOutput{})
}
