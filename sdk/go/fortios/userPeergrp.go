// Code generated by the Pulumi Terraform Bridge (tfgen) Tool DO NOT EDIT.
// *** WARNING: Do not edit by hand unless you're certain you know what you are doing! ***

package fortios

import (
	"context"
	"reflect"

	"github.com/lubyou/pulumi-fortios/sdk/go/fortios/internal"
	"github.com/pulumi/pulumi/sdk/v3/go/pulumi"
	"github.com/pulumi/pulumi/sdk/v3/go/pulumix"
)

type UserPeergrp struct {
	pulumi.CustomResourceState

	DynamicSortSubtable pulumi.StringPtrOutput       `pulumi:"dynamicSortSubtable"`
	GetAllTables        pulumi.StringPtrOutput       `pulumi:"getAllTables"`
	Members             UserPeergrpMemberArrayOutput `pulumi:"members"`
	Name                pulumi.StringOutput          `pulumi:"name"`
	Vdomparam           pulumi.StringPtrOutput       `pulumi:"vdomparam"`
}

// NewUserPeergrp registers a new resource with the given unique name, arguments, and options.
func NewUserPeergrp(ctx *pulumi.Context,
	name string, args *UserPeergrpArgs, opts ...pulumi.ResourceOption) (*UserPeergrp, error) {
	if args == nil {
		args = &UserPeergrpArgs{}
	}

	opts = internal.PkgResourceDefaultOpts(opts)
	var resource UserPeergrp
	err := ctx.RegisterResource("fortios:index/userPeergrp:UserPeergrp", name, args, &resource, opts...)
	if err != nil {
		return nil, err
	}
	return &resource, nil
}

// GetUserPeergrp gets an existing UserPeergrp resource's state with the given name, ID, and optional
// state properties that are used to uniquely qualify the lookup (nil if not required).
func GetUserPeergrp(ctx *pulumi.Context,
	name string, id pulumi.IDInput, state *UserPeergrpState, opts ...pulumi.ResourceOption) (*UserPeergrp, error) {
	var resource UserPeergrp
	err := ctx.ReadResource("fortios:index/userPeergrp:UserPeergrp", name, id, state, &resource, opts...)
	if err != nil {
		return nil, err
	}
	return &resource, nil
}

// Input properties used for looking up and filtering UserPeergrp resources.
type userPeergrpState struct {
	DynamicSortSubtable *string             `pulumi:"dynamicSortSubtable"`
	GetAllTables        *string             `pulumi:"getAllTables"`
	Members             []UserPeergrpMember `pulumi:"members"`
	Name                *string             `pulumi:"name"`
	Vdomparam           *string             `pulumi:"vdomparam"`
}

type UserPeergrpState struct {
	DynamicSortSubtable pulumi.StringPtrInput
	GetAllTables        pulumi.StringPtrInput
	Members             UserPeergrpMemberArrayInput
	Name                pulumi.StringPtrInput
	Vdomparam           pulumi.StringPtrInput
}

func (UserPeergrpState) ElementType() reflect.Type {
	return reflect.TypeOf((*userPeergrpState)(nil)).Elem()
}

type userPeergrpArgs struct {
	DynamicSortSubtable *string             `pulumi:"dynamicSortSubtable"`
	GetAllTables        *string             `pulumi:"getAllTables"`
	Members             []UserPeergrpMember `pulumi:"members"`
	Name                *string             `pulumi:"name"`
	Vdomparam           *string             `pulumi:"vdomparam"`
}

// The set of arguments for constructing a UserPeergrp resource.
type UserPeergrpArgs struct {
	DynamicSortSubtable pulumi.StringPtrInput
	GetAllTables        pulumi.StringPtrInput
	Members             UserPeergrpMemberArrayInput
	Name                pulumi.StringPtrInput
	Vdomparam           pulumi.StringPtrInput
}

func (UserPeergrpArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*userPeergrpArgs)(nil)).Elem()
}

type UserPeergrpInput interface {
	pulumi.Input

	ToUserPeergrpOutput() UserPeergrpOutput
	ToUserPeergrpOutputWithContext(ctx context.Context) UserPeergrpOutput
}

func (*UserPeergrp) ElementType() reflect.Type {
	return reflect.TypeOf((**UserPeergrp)(nil)).Elem()
}

func (i *UserPeergrp) ToUserPeergrpOutput() UserPeergrpOutput {
	return i.ToUserPeergrpOutputWithContext(context.Background())
}

func (i *UserPeergrp) ToUserPeergrpOutputWithContext(ctx context.Context) UserPeergrpOutput {
	return pulumi.ToOutputWithContext(ctx, i).(UserPeergrpOutput)
}

func (i *UserPeergrp) ToOutput(ctx context.Context) pulumix.Output[*UserPeergrp] {
	return pulumix.Output[*UserPeergrp]{
		OutputState: i.ToUserPeergrpOutputWithContext(ctx).OutputState,
	}
}

// UserPeergrpArrayInput is an input type that accepts UserPeergrpArray and UserPeergrpArrayOutput values.
// You can construct a concrete instance of `UserPeergrpArrayInput` via:
//
//	UserPeergrpArray{ UserPeergrpArgs{...} }
type UserPeergrpArrayInput interface {
	pulumi.Input

	ToUserPeergrpArrayOutput() UserPeergrpArrayOutput
	ToUserPeergrpArrayOutputWithContext(context.Context) UserPeergrpArrayOutput
}

type UserPeergrpArray []UserPeergrpInput

func (UserPeergrpArray) ElementType() reflect.Type {
	return reflect.TypeOf((*[]*UserPeergrp)(nil)).Elem()
}

func (i UserPeergrpArray) ToUserPeergrpArrayOutput() UserPeergrpArrayOutput {
	return i.ToUserPeergrpArrayOutputWithContext(context.Background())
}

func (i UserPeergrpArray) ToUserPeergrpArrayOutputWithContext(ctx context.Context) UserPeergrpArrayOutput {
	return pulumi.ToOutputWithContext(ctx, i).(UserPeergrpArrayOutput)
}

func (i UserPeergrpArray) ToOutput(ctx context.Context) pulumix.Output[[]*UserPeergrp] {
	return pulumix.Output[[]*UserPeergrp]{
		OutputState: i.ToUserPeergrpArrayOutputWithContext(ctx).OutputState,
	}
}

// UserPeergrpMapInput is an input type that accepts UserPeergrpMap and UserPeergrpMapOutput values.
// You can construct a concrete instance of `UserPeergrpMapInput` via:
//
//	UserPeergrpMap{ "key": UserPeergrpArgs{...} }
type UserPeergrpMapInput interface {
	pulumi.Input

	ToUserPeergrpMapOutput() UserPeergrpMapOutput
	ToUserPeergrpMapOutputWithContext(context.Context) UserPeergrpMapOutput
}

type UserPeergrpMap map[string]UserPeergrpInput

func (UserPeergrpMap) ElementType() reflect.Type {
	return reflect.TypeOf((*map[string]*UserPeergrp)(nil)).Elem()
}

func (i UserPeergrpMap) ToUserPeergrpMapOutput() UserPeergrpMapOutput {
	return i.ToUserPeergrpMapOutputWithContext(context.Background())
}

func (i UserPeergrpMap) ToUserPeergrpMapOutputWithContext(ctx context.Context) UserPeergrpMapOutput {
	return pulumi.ToOutputWithContext(ctx, i).(UserPeergrpMapOutput)
}

func (i UserPeergrpMap) ToOutput(ctx context.Context) pulumix.Output[map[string]*UserPeergrp] {
	return pulumix.Output[map[string]*UserPeergrp]{
		OutputState: i.ToUserPeergrpMapOutputWithContext(ctx).OutputState,
	}
}

type UserPeergrpOutput struct{ *pulumi.OutputState }

func (UserPeergrpOutput) ElementType() reflect.Type {
	return reflect.TypeOf((**UserPeergrp)(nil)).Elem()
}

func (o UserPeergrpOutput) ToUserPeergrpOutput() UserPeergrpOutput {
	return o
}

func (o UserPeergrpOutput) ToUserPeergrpOutputWithContext(ctx context.Context) UserPeergrpOutput {
	return o
}

func (o UserPeergrpOutput) ToOutput(ctx context.Context) pulumix.Output[*UserPeergrp] {
	return pulumix.Output[*UserPeergrp]{
		OutputState: o.OutputState,
	}
}

func (o UserPeergrpOutput) DynamicSortSubtable() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *UserPeergrp) pulumi.StringPtrOutput { return v.DynamicSortSubtable }).(pulumi.StringPtrOutput)
}

func (o UserPeergrpOutput) GetAllTables() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *UserPeergrp) pulumi.StringPtrOutput { return v.GetAllTables }).(pulumi.StringPtrOutput)
}

func (o UserPeergrpOutput) Members() UserPeergrpMemberArrayOutput {
	return o.ApplyT(func(v *UserPeergrp) UserPeergrpMemberArrayOutput { return v.Members }).(UserPeergrpMemberArrayOutput)
}

func (o UserPeergrpOutput) Name() pulumi.StringOutput {
	return o.ApplyT(func(v *UserPeergrp) pulumi.StringOutput { return v.Name }).(pulumi.StringOutput)
}

func (o UserPeergrpOutput) Vdomparam() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *UserPeergrp) pulumi.StringPtrOutput { return v.Vdomparam }).(pulumi.StringPtrOutput)
}

type UserPeergrpArrayOutput struct{ *pulumi.OutputState }

func (UserPeergrpArrayOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*[]*UserPeergrp)(nil)).Elem()
}

func (o UserPeergrpArrayOutput) ToUserPeergrpArrayOutput() UserPeergrpArrayOutput {
	return o
}

func (o UserPeergrpArrayOutput) ToUserPeergrpArrayOutputWithContext(ctx context.Context) UserPeergrpArrayOutput {
	return o
}

func (o UserPeergrpArrayOutput) ToOutput(ctx context.Context) pulumix.Output[[]*UserPeergrp] {
	return pulumix.Output[[]*UserPeergrp]{
		OutputState: o.OutputState,
	}
}

func (o UserPeergrpArrayOutput) Index(i pulumi.IntInput) UserPeergrpOutput {
	return pulumi.All(o, i).ApplyT(func(vs []interface{}) *UserPeergrp {
		return vs[0].([]*UserPeergrp)[vs[1].(int)]
	}).(UserPeergrpOutput)
}

type UserPeergrpMapOutput struct{ *pulumi.OutputState }

func (UserPeergrpMapOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*map[string]*UserPeergrp)(nil)).Elem()
}

func (o UserPeergrpMapOutput) ToUserPeergrpMapOutput() UserPeergrpMapOutput {
	return o
}

func (o UserPeergrpMapOutput) ToUserPeergrpMapOutputWithContext(ctx context.Context) UserPeergrpMapOutput {
	return o
}

func (o UserPeergrpMapOutput) ToOutput(ctx context.Context) pulumix.Output[map[string]*UserPeergrp] {
	return pulumix.Output[map[string]*UserPeergrp]{
		OutputState: o.OutputState,
	}
}

func (o UserPeergrpMapOutput) MapIndex(k pulumi.StringInput) UserPeergrpOutput {
	return pulumi.All(o, k).ApplyT(func(vs []interface{}) *UserPeergrp {
		return vs[0].(map[string]*UserPeergrp)[vs[1].(string)]
	}).(UserPeergrpOutput)
}

func init() {
	pulumi.RegisterInputType(reflect.TypeOf((*UserPeergrpInput)(nil)).Elem(), &UserPeergrp{})
	pulumi.RegisterInputType(reflect.TypeOf((*UserPeergrpArrayInput)(nil)).Elem(), UserPeergrpArray{})
	pulumi.RegisterInputType(reflect.TypeOf((*UserPeergrpMapInput)(nil)).Elem(), UserPeergrpMap{})
	pulumi.RegisterOutputType(UserPeergrpOutput{})
	pulumi.RegisterOutputType(UserPeergrpArrayOutput{})
	pulumi.RegisterOutputType(UserPeergrpMapOutput{})
}
