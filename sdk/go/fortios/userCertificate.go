// Code generated by the Pulumi Terraform Bridge (tfgen) Tool DO NOT EDIT.
// *** WARNING: Do not edit by hand unless you're certain you know what you are doing! ***

package fortios

import (
	"context"
	"reflect"

	"github.com/pulumi/pulumi/sdk/v3/go/pulumi"
)

// Configure certificate users. Applies to FortiOS Version `>= 7.0.1`.
//
// ## Import
//
// User Certificate can be imported using any of these accepted formats
//
// ```sh
//  $ pulumi import fortios:index/userCertificate:UserCertificate labelname {{name}}
// ```
//
//  If you do not want to import arguments of block$ export "FORTIOS_IMPORT_TABLE"="false"
//
// ```sh
//  $ pulumi import fortios:index/userCertificate:UserCertificate labelname {{name}}
// ```
//
//  $ unset "FORTIOS_IMPORT_TABLE"
type UserCertificate struct {
	pulumi.CustomResourceState

	// Certificate common name.
	CommonName pulumi.StringOutput `pulumi:"commonName"`
	// User ID.
	Fosid pulumi.IntOutput `pulumi:"fosid"`
	// CA certificate used for client certificate verification.
	Issuer pulumi.StringOutput `pulumi:"issuer"`
	// User name.
	Name pulumi.StringOutput `pulumi:"name"`
	// Enable/disable allowing the certificate user to authenticate with the FortiGate unit. Valid values: `enable`, `disable`.
	Status pulumi.StringOutput `pulumi:"status"`
	// Type of certificate authentication method. Valid values: `single-certificate`, `trusted-issuer`.
	Type pulumi.StringOutput `pulumi:"type"`
	// Specifies the vdom to which the resource will be applied when the FortiGate unit is running in VDOM mode. Only one vdom can be specified. If you want to inherit the vdom configuration of the provider, please do not set this parameter.
	Vdomparam pulumi.StringPtrOutput `pulumi:"vdomparam"`
}

// NewUserCertificate registers a new resource with the given unique name, arguments, and options.
func NewUserCertificate(ctx *pulumi.Context,
	name string, args *UserCertificateArgs, opts ...pulumi.ResourceOption) (*UserCertificate, error) {
	if args == nil {
		args = &UserCertificateArgs{}
	}

	opts = pkgResourceDefaultOpts(opts)
	var resource UserCertificate
	err := ctx.RegisterResource("fortios:index/userCertificate:UserCertificate", name, args, &resource, opts...)
	if err != nil {
		return nil, err
	}
	return &resource, nil
}

// GetUserCertificate gets an existing UserCertificate resource's state with the given name, ID, and optional
// state properties that are used to uniquely qualify the lookup (nil if not required).
func GetUserCertificate(ctx *pulumi.Context,
	name string, id pulumi.IDInput, state *UserCertificateState, opts ...pulumi.ResourceOption) (*UserCertificate, error) {
	var resource UserCertificate
	err := ctx.ReadResource("fortios:index/userCertificate:UserCertificate", name, id, state, &resource, opts...)
	if err != nil {
		return nil, err
	}
	return &resource, nil
}

// Input properties used for looking up and filtering UserCertificate resources.
type userCertificateState struct {
	// Certificate common name.
	CommonName *string `pulumi:"commonName"`
	// User ID.
	Fosid *int `pulumi:"fosid"`
	// CA certificate used for client certificate verification.
	Issuer *string `pulumi:"issuer"`
	// User name.
	Name *string `pulumi:"name"`
	// Enable/disable allowing the certificate user to authenticate with the FortiGate unit. Valid values: `enable`, `disable`.
	Status *string `pulumi:"status"`
	// Type of certificate authentication method. Valid values: `single-certificate`, `trusted-issuer`.
	Type *string `pulumi:"type"`
	// Specifies the vdom to which the resource will be applied when the FortiGate unit is running in VDOM mode. Only one vdom can be specified. If you want to inherit the vdom configuration of the provider, please do not set this parameter.
	Vdomparam *string `pulumi:"vdomparam"`
}

type UserCertificateState struct {
	// Certificate common name.
	CommonName pulumi.StringPtrInput
	// User ID.
	Fosid pulumi.IntPtrInput
	// CA certificate used for client certificate verification.
	Issuer pulumi.StringPtrInput
	// User name.
	Name pulumi.StringPtrInput
	// Enable/disable allowing the certificate user to authenticate with the FortiGate unit. Valid values: `enable`, `disable`.
	Status pulumi.StringPtrInput
	// Type of certificate authentication method. Valid values: `single-certificate`, `trusted-issuer`.
	Type pulumi.StringPtrInput
	// Specifies the vdom to which the resource will be applied when the FortiGate unit is running in VDOM mode. Only one vdom can be specified. If you want to inherit the vdom configuration of the provider, please do not set this parameter.
	Vdomparam pulumi.StringPtrInput
}

func (UserCertificateState) ElementType() reflect.Type {
	return reflect.TypeOf((*userCertificateState)(nil)).Elem()
}

type userCertificateArgs struct {
	// Certificate common name.
	CommonName *string `pulumi:"commonName"`
	// User ID.
	Fosid *int `pulumi:"fosid"`
	// CA certificate used for client certificate verification.
	Issuer *string `pulumi:"issuer"`
	// User name.
	Name *string `pulumi:"name"`
	// Enable/disable allowing the certificate user to authenticate with the FortiGate unit. Valid values: `enable`, `disable`.
	Status *string `pulumi:"status"`
	// Type of certificate authentication method. Valid values: `single-certificate`, `trusted-issuer`.
	Type *string `pulumi:"type"`
	// Specifies the vdom to which the resource will be applied when the FortiGate unit is running in VDOM mode. Only one vdom can be specified. If you want to inherit the vdom configuration of the provider, please do not set this parameter.
	Vdomparam *string `pulumi:"vdomparam"`
}

// The set of arguments for constructing a UserCertificate resource.
type UserCertificateArgs struct {
	// Certificate common name.
	CommonName pulumi.StringPtrInput
	// User ID.
	Fosid pulumi.IntPtrInput
	// CA certificate used for client certificate verification.
	Issuer pulumi.StringPtrInput
	// User name.
	Name pulumi.StringPtrInput
	// Enable/disable allowing the certificate user to authenticate with the FortiGate unit. Valid values: `enable`, `disable`.
	Status pulumi.StringPtrInput
	// Type of certificate authentication method. Valid values: `single-certificate`, `trusted-issuer`.
	Type pulumi.StringPtrInput
	// Specifies the vdom to which the resource will be applied when the FortiGate unit is running in VDOM mode. Only one vdom can be specified. If you want to inherit the vdom configuration of the provider, please do not set this parameter.
	Vdomparam pulumi.StringPtrInput
}

func (UserCertificateArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*userCertificateArgs)(nil)).Elem()
}

type UserCertificateInput interface {
	pulumi.Input

	ToUserCertificateOutput() UserCertificateOutput
	ToUserCertificateOutputWithContext(ctx context.Context) UserCertificateOutput
}

func (*UserCertificate) ElementType() reflect.Type {
	return reflect.TypeOf((**UserCertificate)(nil)).Elem()
}

func (i *UserCertificate) ToUserCertificateOutput() UserCertificateOutput {
	return i.ToUserCertificateOutputWithContext(context.Background())
}

func (i *UserCertificate) ToUserCertificateOutputWithContext(ctx context.Context) UserCertificateOutput {
	return pulumi.ToOutputWithContext(ctx, i).(UserCertificateOutput)
}

// UserCertificateArrayInput is an input type that accepts UserCertificateArray and UserCertificateArrayOutput values.
// You can construct a concrete instance of `UserCertificateArrayInput` via:
//
//          UserCertificateArray{ UserCertificateArgs{...} }
type UserCertificateArrayInput interface {
	pulumi.Input

	ToUserCertificateArrayOutput() UserCertificateArrayOutput
	ToUserCertificateArrayOutputWithContext(context.Context) UserCertificateArrayOutput
}

type UserCertificateArray []UserCertificateInput

func (UserCertificateArray) ElementType() reflect.Type {
	return reflect.TypeOf((*[]*UserCertificate)(nil)).Elem()
}

func (i UserCertificateArray) ToUserCertificateArrayOutput() UserCertificateArrayOutput {
	return i.ToUserCertificateArrayOutputWithContext(context.Background())
}

func (i UserCertificateArray) ToUserCertificateArrayOutputWithContext(ctx context.Context) UserCertificateArrayOutput {
	return pulumi.ToOutputWithContext(ctx, i).(UserCertificateArrayOutput)
}

// UserCertificateMapInput is an input type that accepts UserCertificateMap and UserCertificateMapOutput values.
// You can construct a concrete instance of `UserCertificateMapInput` via:
//
//          UserCertificateMap{ "key": UserCertificateArgs{...} }
type UserCertificateMapInput interface {
	pulumi.Input

	ToUserCertificateMapOutput() UserCertificateMapOutput
	ToUserCertificateMapOutputWithContext(context.Context) UserCertificateMapOutput
}

type UserCertificateMap map[string]UserCertificateInput

func (UserCertificateMap) ElementType() reflect.Type {
	return reflect.TypeOf((*map[string]*UserCertificate)(nil)).Elem()
}

func (i UserCertificateMap) ToUserCertificateMapOutput() UserCertificateMapOutput {
	return i.ToUserCertificateMapOutputWithContext(context.Background())
}

func (i UserCertificateMap) ToUserCertificateMapOutputWithContext(ctx context.Context) UserCertificateMapOutput {
	return pulumi.ToOutputWithContext(ctx, i).(UserCertificateMapOutput)
}

type UserCertificateOutput struct{ *pulumi.OutputState }

func (UserCertificateOutput) ElementType() reflect.Type {
	return reflect.TypeOf((**UserCertificate)(nil)).Elem()
}

func (o UserCertificateOutput) ToUserCertificateOutput() UserCertificateOutput {
	return o
}

func (o UserCertificateOutput) ToUserCertificateOutputWithContext(ctx context.Context) UserCertificateOutput {
	return o
}

type UserCertificateArrayOutput struct{ *pulumi.OutputState }

func (UserCertificateArrayOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*[]*UserCertificate)(nil)).Elem()
}

func (o UserCertificateArrayOutput) ToUserCertificateArrayOutput() UserCertificateArrayOutput {
	return o
}

func (o UserCertificateArrayOutput) ToUserCertificateArrayOutputWithContext(ctx context.Context) UserCertificateArrayOutput {
	return o
}

func (o UserCertificateArrayOutput) Index(i pulumi.IntInput) UserCertificateOutput {
	return pulumi.All(o, i).ApplyT(func(vs []interface{}) *UserCertificate {
		return vs[0].([]*UserCertificate)[vs[1].(int)]
	}).(UserCertificateOutput)
}

type UserCertificateMapOutput struct{ *pulumi.OutputState }

func (UserCertificateMapOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*map[string]*UserCertificate)(nil)).Elem()
}

func (o UserCertificateMapOutput) ToUserCertificateMapOutput() UserCertificateMapOutput {
	return o
}

func (o UserCertificateMapOutput) ToUserCertificateMapOutputWithContext(ctx context.Context) UserCertificateMapOutput {
	return o
}

func (o UserCertificateMapOutput) MapIndex(k pulumi.StringInput) UserCertificateOutput {
	return pulumi.All(o, k).ApplyT(func(vs []interface{}) *UserCertificate {
		return vs[0].(map[string]*UserCertificate)[vs[1].(string)]
	}).(UserCertificateOutput)
}

func init() {
	pulumi.RegisterInputType(reflect.TypeOf((*UserCertificateInput)(nil)).Elem(), &UserCertificate{})
	pulumi.RegisterInputType(reflect.TypeOf((*UserCertificateArrayInput)(nil)).Elem(), UserCertificateArray{})
	pulumi.RegisterInputType(reflect.TypeOf((*UserCertificateMapInput)(nil)).Elem(), UserCertificateMap{})
	pulumi.RegisterOutputType(UserCertificateOutput{})
	pulumi.RegisterOutputType(UserCertificateArrayOutput{})
	pulumi.RegisterOutputType(UserCertificateMapOutput{})
}
