// Code generated by the Pulumi Terraform Bridge (tfgen) Tool DO NOT EDIT.
// *** WARNING: Do not edit by hand unless you're certain you know what you are doing! ***

package fortios

import (
	"context"
	"reflect"

	"github.com/lubyou/pulumi-fortios/sdk/go/fortios/internal"
	"github.com/pulumi/pulumi/sdk/v3/go/pulumi"
	"github.com/pulumi/pulumi/sdk/v3/go/pulumix"
)

type UserCertificate struct {
	pulumi.CustomResourceState

	CommonName pulumi.StringOutput    `pulumi:"commonName"`
	Fosid      pulumi.IntOutput       `pulumi:"fosid"`
	Issuer     pulumi.StringOutput    `pulumi:"issuer"`
	Name       pulumi.StringOutput    `pulumi:"name"`
	Status     pulumi.StringOutput    `pulumi:"status"`
	Type       pulumi.StringOutput    `pulumi:"type"`
	Vdomparam  pulumi.StringPtrOutput `pulumi:"vdomparam"`
}

// NewUserCertificate registers a new resource with the given unique name, arguments, and options.
func NewUserCertificate(ctx *pulumi.Context,
	name string, args *UserCertificateArgs, opts ...pulumi.ResourceOption) (*UserCertificate, error) {
	if args == nil {
		args = &UserCertificateArgs{}
	}

	opts = internal.PkgResourceDefaultOpts(opts)
	var resource UserCertificate
	err := ctx.RegisterResource("fortios:index/userCertificate:UserCertificate", name, args, &resource, opts...)
	if err != nil {
		return nil, err
	}
	return &resource, nil
}

// GetUserCertificate gets an existing UserCertificate resource's state with the given name, ID, and optional
// state properties that are used to uniquely qualify the lookup (nil if not required).
func GetUserCertificate(ctx *pulumi.Context,
	name string, id pulumi.IDInput, state *UserCertificateState, opts ...pulumi.ResourceOption) (*UserCertificate, error) {
	var resource UserCertificate
	err := ctx.ReadResource("fortios:index/userCertificate:UserCertificate", name, id, state, &resource, opts...)
	if err != nil {
		return nil, err
	}
	return &resource, nil
}

// Input properties used for looking up and filtering UserCertificate resources.
type userCertificateState struct {
	CommonName *string `pulumi:"commonName"`
	Fosid      *int    `pulumi:"fosid"`
	Issuer     *string `pulumi:"issuer"`
	Name       *string `pulumi:"name"`
	Status     *string `pulumi:"status"`
	Type       *string `pulumi:"type"`
	Vdomparam  *string `pulumi:"vdomparam"`
}

type UserCertificateState struct {
	CommonName pulumi.StringPtrInput
	Fosid      pulumi.IntPtrInput
	Issuer     pulumi.StringPtrInput
	Name       pulumi.StringPtrInput
	Status     pulumi.StringPtrInput
	Type       pulumi.StringPtrInput
	Vdomparam  pulumi.StringPtrInput
}

func (UserCertificateState) ElementType() reflect.Type {
	return reflect.TypeOf((*userCertificateState)(nil)).Elem()
}

type userCertificateArgs struct {
	CommonName *string `pulumi:"commonName"`
	Fosid      *int    `pulumi:"fosid"`
	Issuer     *string `pulumi:"issuer"`
	Name       *string `pulumi:"name"`
	Status     *string `pulumi:"status"`
	Type       *string `pulumi:"type"`
	Vdomparam  *string `pulumi:"vdomparam"`
}

// The set of arguments for constructing a UserCertificate resource.
type UserCertificateArgs struct {
	CommonName pulumi.StringPtrInput
	Fosid      pulumi.IntPtrInput
	Issuer     pulumi.StringPtrInput
	Name       pulumi.StringPtrInput
	Status     pulumi.StringPtrInput
	Type       pulumi.StringPtrInput
	Vdomparam  pulumi.StringPtrInput
}

func (UserCertificateArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*userCertificateArgs)(nil)).Elem()
}

type UserCertificateInput interface {
	pulumi.Input

	ToUserCertificateOutput() UserCertificateOutput
	ToUserCertificateOutputWithContext(ctx context.Context) UserCertificateOutput
}

func (*UserCertificate) ElementType() reflect.Type {
	return reflect.TypeOf((**UserCertificate)(nil)).Elem()
}

func (i *UserCertificate) ToUserCertificateOutput() UserCertificateOutput {
	return i.ToUserCertificateOutputWithContext(context.Background())
}

func (i *UserCertificate) ToUserCertificateOutputWithContext(ctx context.Context) UserCertificateOutput {
	return pulumi.ToOutputWithContext(ctx, i).(UserCertificateOutput)
}

func (i *UserCertificate) ToOutput(ctx context.Context) pulumix.Output[*UserCertificate] {
	return pulumix.Output[*UserCertificate]{
		OutputState: i.ToUserCertificateOutputWithContext(ctx).OutputState,
	}
}

// UserCertificateArrayInput is an input type that accepts UserCertificateArray and UserCertificateArrayOutput values.
// You can construct a concrete instance of `UserCertificateArrayInput` via:
//
//	UserCertificateArray{ UserCertificateArgs{...} }
type UserCertificateArrayInput interface {
	pulumi.Input

	ToUserCertificateArrayOutput() UserCertificateArrayOutput
	ToUserCertificateArrayOutputWithContext(context.Context) UserCertificateArrayOutput
}

type UserCertificateArray []UserCertificateInput

func (UserCertificateArray) ElementType() reflect.Type {
	return reflect.TypeOf((*[]*UserCertificate)(nil)).Elem()
}

func (i UserCertificateArray) ToUserCertificateArrayOutput() UserCertificateArrayOutput {
	return i.ToUserCertificateArrayOutputWithContext(context.Background())
}

func (i UserCertificateArray) ToUserCertificateArrayOutputWithContext(ctx context.Context) UserCertificateArrayOutput {
	return pulumi.ToOutputWithContext(ctx, i).(UserCertificateArrayOutput)
}

func (i UserCertificateArray) ToOutput(ctx context.Context) pulumix.Output[[]*UserCertificate] {
	return pulumix.Output[[]*UserCertificate]{
		OutputState: i.ToUserCertificateArrayOutputWithContext(ctx).OutputState,
	}
}

// UserCertificateMapInput is an input type that accepts UserCertificateMap and UserCertificateMapOutput values.
// You can construct a concrete instance of `UserCertificateMapInput` via:
//
//	UserCertificateMap{ "key": UserCertificateArgs{...} }
type UserCertificateMapInput interface {
	pulumi.Input

	ToUserCertificateMapOutput() UserCertificateMapOutput
	ToUserCertificateMapOutputWithContext(context.Context) UserCertificateMapOutput
}

type UserCertificateMap map[string]UserCertificateInput

func (UserCertificateMap) ElementType() reflect.Type {
	return reflect.TypeOf((*map[string]*UserCertificate)(nil)).Elem()
}

func (i UserCertificateMap) ToUserCertificateMapOutput() UserCertificateMapOutput {
	return i.ToUserCertificateMapOutputWithContext(context.Background())
}

func (i UserCertificateMap) ToUserCertificateMapOutputWithContext(ctx context.Context) UserCertificateMapOutput {
	return pulumi.ToOutputWithContext(ctx, i).(UserCertificateMapOutput)
}

func (i UserCertificateMap) ToOutput(ctx context.Context) pulumix.Output[map[string]*UserCertificate] {
	return pulumix.Output[map[string]*UserCertificate]{
		OutputState: i.ToUserCertificateMapOutputWithContext(ctx).OutputState,
	}
}

type UserCertificateOutput struct{ *pulumi.OutputState }

func (UserCertificateOutput) ElementType() reflect.Type {
	return reflect.TypeOf((**UserCertificate)(nil)).Elem()
}

func (o UserCertificateOutput) ToUserCertificateOutput() UserCertificateOutput {
	return o
}

func (o UserCertificateOutput) ToUserCertificateOutputWithContext(ctx context.Context) UserCertificateOutput {
	return o
}

func (o UserCertificateOutput) ToOutput(ctx context.Context) pulumix.Output[*UserCertificate] {
	return pulumix.Output[*UserCertificate]{
		OutputState: o.OutputState,
	}
}

func (o UserCertificateOutput) CommonName() pulumi.StringOutput {
	return o.ApplyT(func(v *UserCertificate) pulumi.StringOutput { return v.CommonName }).(pulumi.StringOutput)
}

func (o UserCertificateOutput) Fosid() pulumi.IntOutput {
	return o.ApplyT(func(v *UserCertificate) pulumi.IntOutput { return v.Fosid }).(pulumi.IntOutput)
}

func (o UserCertificateOutput) Issuer() pulumi.StringOutput {
	return o.ApplyT(func(v *UserCertificate) pulumi.StringOutput { return v.Issuer }).(pulumi.StringOutput)
}

func (o UserCertificateOutput) Name() pulumi.StringOutput {
	return o.ApplyT(func(v *UserCertificate) pulumi.StringOutput { return v.Name }).(pulumi.StringOutput)
}

func (o UserCertificateOutput) Status() pulumi.StringOutput {
	return o.ApplyT(func(v *UserCertificate) pulumi.StringOutput { return v.Status }).(pulumi.StringOutput)
}

func (o UserCertificateOutput) Type() pulumi.StringOutput {
	return o.ApplyT(func(v *UserCertificate) pulumi.StringOutput { return v.Type }).(pulumi.StringOutput)
}

func (o UserCertificateOutput) Vdomparam() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *UserCertificate) pulumi.StringPtrOutput { return v.Vdomparam }).(pulumi.StringPtrOutput)
}

type UserCertificateArrayOutput struct{ *pulumi.OutputState }

func (UserCertificateArrayOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*[]*UserCertificate)(nil)).Elem()
}

func (o UserCertificateArrayOutput) ToUserCertificateArrayOutput() UserCertificateArrayOutput {
	return o
}

func (o UserCertificateArrayOutput) ToUserCertificateArrayOutputWithContext(ctx context.Context) UserCertificateArrayOutput {
	return o
}

func (o UserCertificateArrayOutput) ToOutput(ctx context.Context) pulumix.Output[[]*UserCertificate] {
	return pulumix.Output[[]*UserCertificate]{
		OutputState: o.OutputState,
	}
}

func (o UserCertificateArrayOutput) Index(i pulumi.IntInput) UserCertificateOutput {
	return pulumi.All(o, i).ApplyT(func(vs []interface{}) *UserCertificate {
		return vs[0].([]*UserCertificate)[vs[1].(int)]
	}).(UserCertificateOutput)
}

type UserCertificateMapOutput struct{ *pulumi.OutputState }

func (UserCertificateMapOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*map[string]*UserCertificate)(nil)).Elem()
}

func (o UserCertificateMapOutput) ToUserCertificateMapOutput() UserCertificateMapOutput {
	return o
}

func (o UserCertificateMapOutput) ToUserCertificateMapOutputWithContext(ctx context.Context) UserCertificateMapOutput {
	return o
}

func (o UserCertificateMapOutput) ToOutput(ctx context.Context) pulumix.Output[map[string]*UserCertificate] {
	return pulumix.Output[map[string]*UserCertificate]{
		OutputState: o.OutputState,
	}
}

func (o UserCertificateMapOutput) MapIndex(k pulumi.StringInput) UserCertificateOutput {
	return pulumi.All(o, k).ApplyT(func(vs []interface{}) *UserCertificate {
		return vs[0].(map[string]*UserCertificate)[vs[1].(string)]
	}).(UserCertificateOutput)
}

func init() {
	pulumi.RegisterInputType(reflect.TypeOf((*UserCertificateInput)(nil)).Elem(), &UserCertificate{})
	pulumi.RegisterInputType(reflect.TypeOf((*UserCertificateArrayInput)(nil)).Elem(), UserCertificateArray{})
	pulumi.RegisterInputType(reflect.TypeOf((*UserCertificateMapInput)(nil)).Elem(), UserCertificateMap{})
	pulumi.RegisterOutputType(UserCertificateOutput{})
	pulumi.RegisterOutputType(UserCertificateArrayOutput{})
	pulumi.RegisterOutputType(UserCertificateMapOutput{})
}
