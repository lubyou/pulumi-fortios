// Code generated by the Pulumi Terraform Bridge (tfgen) Tool DO NOT EDIT.
// *** WARNING: Do not edit by hand unless you're certain you know what you are doing! ***

package fortios

import (
	"context"
	"reflect"

	"github.com/pulumi/pulumi/sdk/v3/go/pulumi"
)

// Configure FortiSwitch location services. Applies to FortiOS Version `>= 6.2.4`.
//
// ## Import
//
// SwitchController Location can be imported using any of these accepted formats
//
// ```sh
//  $ pulumi import fortios:index/switchControllerLocation:SwitchControllerLocation labelname {{name}}
// ```
//
//  If you do not want to import arguments of block$ export "FORTIOS_IMPORT_TABLE"="false"
//
// ```sh
//  $ pulumi import fortios:index/switchControllerLocation:SwitchControllerLocation labelname {{name}}
// ```
//
//  $ unset "FORTIOS_IMPORT_TABLE"
type SwitchControllerLocation struct {
	pulumi.CustomResourceState

	// Configure location civic address. The structure of `addressCivic` block is documented below.
	AddressCivic SwitchControllerLocationAddressCivicPtrOutput `pulumi:"addressCivic"`
	// Configure location GPS coordinates. The structure of `coordinates` block is documented below.
	Coordinates SwitchControllerLocationCoordinatesPtrOutput `pulumi:"coordinates"`
	// Configure location ELIN number. The structure of `elinNumber` block is documented below.
	ElinNumber SwitchControllerLocationElinNumberPtrOutput `pulumi:"elinNumber"`
	// Name (residence and office occupant).
	Name pulumi.StringOutput `pulumi:"name"`
	// Specifies the vdom to which the resource will be applied when the FortiGate unit is running in VDOM mode. Only one vdom can be specified. If you want to inherit the vdom configuration of the provider, please do not set this parameter.
	Vdomparam pulumi.StringPtrOutput `pulumi:"vdomparam"`
}

// NewSwitchControllerLocation registers a new resource with the given unique name, arguments, and options.
func NewSwitchControllerLocation(ctx *pulumi.Context,
	name string, args *SwitchControllerLocationArgs, opts ...pulumi.ResourceOption) (*SwitchControllerLocation, error) {
	if args == nil {
		args = &SwitchControllerLocationArgs{}
	}

	opts = pkgResourceDefaultOpts(opts)
	var resource SwitchControllerLocation
	err := ctx.RegisterResource("fortios:index/switchControllerLocation:SwitchControllerLocation", name, args, &resource, opts...)
	if err != nil {
		return nil, err
	}
	return &resource, nil
}

// GetSwitchControllerLocation gets an existing SwitchControllerLocation resource's state with the given name, ID, and optional
// state properties that are used to uniquely qualify the lookup (nil if not required).
func GetSwitchControllerLocation(ctx *pulumi.Context,
	name string, id pulumi.IDInput, state *SwitchControllerLocationState, opts ...pulumi.ResourceOption) (*SwitchControllerLocation, error) {
	var resource SwitchControllerLocation
	err := ctx.ReadResource("fortios:index/switchControllerLocation:SwitchControllerLocation", name, id, state, &resource, opts...)
	if err != nil {
		return nil, err
	}
	return &resource, nil
}

// Input properties used for looking up and filtering SwitchControllerLocation resources.
type switchControllerLocationState struct {
	// Configure location civic address. The structure of `addressCivic` block is documented below.
	AddressCivic *SwitchControllerLocationAddressCivic `pulumi:"addressCivic"`
	// Configure location GPS coordinates. The structure of `coordinates` block is documented below.
	Coordinates *SwitchControllerLocationCoordinates `pulumi:"coordinates"`
	// Configure location ELIN number. The structure of `elinNumber` block is documented below.
	ElinNumber *SwitchControllerLocationElinNumber `pulumi:"elinNumber"`
	// Name (residence and office occupant).
	Name *string `pulumi:"name"`
	// Specifies the vdom to which the resource will be applied when the FortiGate unit is running in VDOM mode. Only one vdom can be specified. If you want to inherit the vdom configuration of the provider, please do not set this parameter.
	Vdomparam *string `pulumi:"vdomparam"`
}

type SwitchControllerLocationState struct {
	// Configure location civic address. The structure of `addressCivic` block is documented below.
	AddressCivic SwitchControllerLocationAddressCivicPtrInput
	// Configure location GPS coordinates. The structure of `coordinates` block is documented below.
	Coordinates SwitchControllerLocationCoordinatesPtrInput
	// Configure location ELIN number. The structure of `elinNumber` block is documented below.
	ElinNumber SwitchControllerLocationElinNumberPtrInput
	// Name (residence and office occupant).
	Name pulumi.StringPtrInput
	// Specifies the vdom to which the resource will be applied when the FortiGate unit is running in VDOM mode. Only one vdom can be specified. If you want to inherit the vdom configuration of the provider, please do not set this parameter.
	Vdomparam pulumi.StringPtrInput
}

func (SwitchControllerLocationState) ElementType() reflect.Type {
	return reflect.TypeOf((*switchControllerLocationState)(nil)).Elem()
}

type switchControllerLocationArgs struct {
	// Configure location civic address. The structure of `addressCivic` block is documented below.
	AddressCivic *SwitchControllerLocationAddressCivic `pulumi:"addressCivic"`
	// Configure location GPS coordinates. The structure of `coordinates` block is documented below.
	Coordinates *SwitchControllerLocationCoordinates `pulumi:"coordinates"`
	// Configure location ELIN number. The structure of `elinNumber` block is documented below.
	ElinNumber *SwitchControllerLocationElinNumber `pulumi:"elinNumber"`
	// Name (residence and office occupant).
	Name *string `pulumi:"name"`
	// Specifies the vdom to which the resource will be applied when the FortiGate unit is running in VDOM mode. Only one vdom can be specified. If you want to inherit the vdom configuration of the provider, please do not set this parameter.
	Vdomparam *string `pulumi:"vdomparam"`
}

// The set of arguments for constructing a SwitchControllerLocation resource.
type SwitchControllerLocationArgs struct {
	// Configure location civic address. The structure of `addressCivic` block is documented below.
	AddressCivic SwitchControllerLocationAddressCivicPtrInput
	// Configure location GPS coordinates. The structure of `coordinates` block is documented below.
	Coordinates SwitchControllerLocationCoordinatesPtrInput
	// Configure location ELIN number. The structure of `elinNumber` block is documented below.
	ElinNumber SwitchControllerLocationElinNumberPtrInput
	// Name (residence and office occupant).
	Name pulumi.StringPtrInput
	// Specifies the vdom to which the resource will be applied when the FortiGate unit is running in VDOM mode. Only one vdom can be specified. If you want to inherit the vdom configuration of the provider, please do not set this parameter.
	Vdomparam pulumi.StringPtrInput
}

func (SwitchControllerLocationArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*switchControllerLocationArgs)(nil)).Elem()
}

type SwitchControllerLocationInput interface {
	pulumi.Input

	ToSwitchControllerLocationOutput() SwitchControllerLocationOutput
	ToSwitchControllerLocationOutputWithContext(ctx context.Context) SwitchControllerLocationOutput
}

func (*SwitchControllerLocation) ElementType() reflect.Type {
	return reflect.TypeOf((**SwitchControllerLocation)(nil)).Elem()
}

func (i *SwitchControllerLocation) ToSwitchControllerLocationOutput() SwitchControllerLocationOutput {
	return i.ToSwitchControllerLocationOutputWithContext(context.Background())
}

func (i *SwitchControllerLocation) ToSwitchControllerLocationOutputWithContext(ctx context.Context) SwitchControllerLocationOutput {
	return pulumi.ToOutputWithContext(ctx, i).(SwitchControllerLocationOutput)
}

// SwitchControllerLocationArrayInput is an input type that accepts SwitchControllerLocationArray and SwitchControllerLocationArrayOutput values.
// You can construct a concrete instance of `SwitchControllerLocationArrayInput` via:
//
//          SwitchControllerLocationArray{ SwitchControllerLocationArgs{...} }
type SwitchControllerLocationArrayInput interface {
	pulumi.Input

	ToSwitchControllerLocationArrayOutput() SwitchControllerLocationArrayOutput
	ToSwitchControllerLocationArrayOutputWithContext(context.Context) SwitchControllerLocationArrayOutput
}

type SwitchControllerLocationArray []SwitchControllerLocationInput

func (SwitchControllerLocationArray) ElementType() reflect.Type {
	return reflect.TypeOf((*[]*SwitchControllerLocation)(nil)).Elem()
}

func (i SwitchControllerLocationArray) ToSwitchControllerLocationArrayOutput() SwitchControllerLocationArrayOutput {
	return i.ToSwitchControllerLocationArrayOutputWithContext(context.Background())
}

func (i SwitchControllerLocationArray) ToSwitchControllerLocationArrayOutputWithContext(ctx context.Context) SwitchControllerLocationArrayOutput {
	return pulumi.ToOutputWithContext(ctx, i).(SwitchControllerLocationArrayOutput)
}

// SwitchControllerLocationMapInput is an input type that accepts SwitchControllerLocationMap and SwitchControllerLocationMapOutput values.
// You can construct a concrete instance of `SwitchControllerLocationMapInput` via:
//
//          SwitchControllerLocationMap{ "key": SwitchControllerLocationArgs{...} }
type SwitchControllerLocationMapInput interface {
	pulumi.Input

	ToSwitchControllerLocationMapOutput() SwitchControllerLocationMapOutput
	ToSwitchControllerLocationMapOutputWithContext(context.Context) SwitchControllerLocationMapOutput
}

type SwitchControllerLocationMap map[string]SwitchControllerLocationInput

func (SwitchControllerLocationMap) ElementType() reflect.Type {
	return reflect.TypeOf((*map[string]*SwitchControllerLocation)(nil)).Elem()
}

func (i SwitchControllerLocationMap) ToSwitchControllerLocationMapOutput() SwitchControllerLocationMapOutput {
	return i.ToSwitchControllerLocationMapOutputWithContext(context.Background())
}

func (i SwitchControllerLocationMap) ToSwitchControllerLocationMapOutputWithContext(ctx context.Context) SwitchControllerLocationMapOutput {
	return pulumi.ToOutputWithContext(ctx, i).(SwitchControllerLocationMapOutput)
}

type SwitchControllerLocationOutput struct{ *pulumi.OutputState }

func (SwitchControllerLocationOutput) ElementType() reflect.Type {
	return reflect.TypeOf((**SwitchControllerLocation)(nil)).Elem()
}

func (o SwitchControllerLocationOutput) ToSwitchControllerLocationOutput() SwitchControllerLocationOutput {
	return o
}

func (o SwitchControllerLocationOutput) ToSwitchControllerLocationOutputWithContext(ctx context.Context) SwitchControllerLocationOutput {
	return o
}

type SwitchControllerLocationArrayOutput struct{ *pulumi.OutputState }

func (SwitchControllerLocationArrayOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*[]*SwitchControllerLocation)(nil)).Elem()
}

func (o SwitchControllerLocationArrayOutput) ToSwitchControllerLocationArrayOutput() SwitchControllerLocationArrayOutput {
	return o
}

func (o SwitchControllerLocationArrayOutput) ToSwitchControllerLocationArrayOutputWithContext(ctx context.Context) SwitchControllerLocationArrayOutput {
	return o
}

func (o SwitchControllerLocationArrayOutput) Index(i pulumi.IntInput) SwitchControllerLocationOutput {
	return pulumi.All(o, i).ApplyT(func(vs []interface{}) *SwitchControllerLocation {
		return vs[0].([]*SwitchControllerLocation)[vs[1].(int)]
	}).(SwitchControllerLocationOutput)
}

type SwitchControllerLocationMapOutput struct{ *pulumi.OutputState }

func (SwitchControllerLocationMapOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*map[string]*SwitchControllerLocation)(nil)).Elem()
}

func (o SwitchControllerLocationMapOutput) ToSwitchControllerLocationMapOutput() SwitchControllerLocationMapOutput {
	return o
}

func (o SwitchControllerLocationMapOutput) ToSwitchControllerLocationMapOutputWithContext(ctx context.Context) SwitchControllerLocationMapOutput {
	return o
}

func (o SwitchControllerLocationMapOutput) MapIndex(k pulumi.StringInput) SwitchControllerLocationOutput {
	return pulumi.All(o, k).ApplyT(func(vs []interface{}) *SwitchControllerLocation {
		return vs[0].(map[string]*SwitchControllerLocation)[vs[1].(string)]
	}).(SwitchControllerLocationOutput)
}

func init() {
	pulumi.RegisterInputType(reflect.TypeOf((*SwitchControllerLocationInput)(nil)).Elem(), &SwitchControllerLocation{})
	pulumi.RegisterInputType(reflect.TypeOf((*SwitchControllerLocationArrayInput)(nil)).Elem(), SwitchControllerLocationArray{})
	pulumi.RegisterInputType(reflect.TypeOf((*SwitchControllerLocationMapInput)(nil)).Elem(), SwitchControllerLocationMap{})
	pulumi.RegisterOutputType(SwitchControllerLocationOutput{})
	pulumi.RegisterOutputType(SwitchControllerLocationArrayOutput{})
	pulumi.RegisterOutputType(SwitchControllerLocationMapOutput{})
}
