// Code generated by the Pulumi Terraform Bridge (tfgen) Tool DO NOT EDIT.
// *** WARNING: Do not edit by hand unless you're certain you know what you are doing! ***

package fortios

import (
	"context"
	"reflect"

	"github.com/lubyou/pulumi-fortios/sdk/go/fortios/internal"
	"github.com/pulumi/pulumi/sdk/v3/go/pulumi"
)

type SwitchControllerLocation struct {
	pulumi.CustomResourceState

	AddressCivic SwitchControllerLocationAddressCivicOutput `pulumi:"addressCivic"`
	Coordinates  SwitchControllerLocationCoordinatesOutput  `pulumi:"coordinates"`
	ElinNumber   SwitchControllerLocationElinNumberOutput   `pulumi:"elinNumber"`
	GetAllTables pulumi.StringPtrOutput                     `pulumi:"getAllTables"`
	Name         pulumi.StringOutput                        `pulumi:"name"`
	Vdomparam    pulumi.StringPtrOutput                     `pulumi:"vdomparam"`
}

// NewSwitchControllerLocation registers a new resource with the given unique name, arguments, and options.
func NewSwitchControllerLocation(ctx *pulumi.Context,
	name string, args *SwitchControllerLocationArgs, opts ...pulumi.ResourceOption) (*SwitchControllerLocation, error) {
	if args == nil {
		args = &SwitchControllerLocationArgs{}
	}

	opts = internal.PkgResourceDefaultOpts(opts)
	var resource SwitchControllerLocation
	err := ctx.RegisterResource("fortios:index/switchControllerLocation:SwitchControllerLocation", name, args, &resource, opts...)
	if err != nil {
		return nil, err
	}
	return &resource, nil
}

// GetSwitchControllerLocation gets an existing SwitchControllerLocation resource's state with the given name, ID, and optional
// state properties that are used to uniquely qualify the lookup (nil if not required).
func GetSwitchControllerLocation(ctx *pulumi.Context,
	name string, id pulumi.IDInput, state *SwitchControllerLocationState, opts ...pulumi.ResourceOption) (*SwitchControllerLocation, error) {
	var resource SwitchControllerLocation
	err := ctx.ReadResource("fortios:index/switchControllerLocation:SwitchControllerLocation", name, id, state, &resource, opts...)
	if err != nil {
		return nil, err
	}
	return &resource, nil
}

// Input properties used for looking up and filtering SwitchControllerLocation resources.
type switchControllerLocationState struct {
	AddressCivic *SwitchControllerLocationAddressCivic `pulumi:"addressCivic"`
	Coordinates  *SwitchControllerLocationCoordinates  `pulumi:"coordinates"`
	ElinNumber   *SwitchControllerLocationElinNumber   `pulumi:"elinNumber"`
	GetAllTables *string                               `pulumi:"getAllTables"`
	Name         *string                               `pulumi:"name"`
	Vdomparam    *string                               `pulumi:"vdomparam"`
}

type SwitchControllerLocationState struct {
	AddressCivic SwitchControllerLocationAddressCivicPtrInput
	Coordinates  SwitchControllerLocationCoordinatesPtrInput
	ElinNumber   SwitchControllerLocationElinNumberPtrInput
	GetAllTables pulumi.StringPtrInput
	Name         pulumi.StringPtrInput
	Vdomparam    pulumi.StringPtrInput
}

func (SwitchControllerLocationState) ElementType() reflect.Type {
	return reflect.TypeOf((*switchControllerLocationState)(nil)).Elem()
}

type switchControllerLocationArgs struct {
	AddressCivic *SwitchControllerLocationAddressCivic `pulumi:"addressCivic"`
	Coordinates  *SwitchControllerLocationCoordinates  `pulumi:"coordinates"`
	ElinNumber   *SwitchControllerLocationElinNumber   `pulumi:"elinNumber"`
	GetAllTables *string                               `pulumi:"getAllTables"`
	Name         *string                               `pulumi:"name"`
	Vdomparam    *string                               `pulumi:"vdomparam"`
}

// The set of arguments for constructing a SwitchControllerLocation resource.
type SwitchControllerLocationArgs struct {
	AddressCivic SwitchControllerLocationAddressCivicPtrInput
	Coordinates  SwitchControllerLocationCoordinatesPtrInput
	ElinNumber   SwitchControllerLocationElinNumberPtrInput
	GetAllTables pulumi.StringPtrInput
	Name         pulumi.StringPtrInput
	Vdomparam    pulumi.StringPtrInput
}

func (SwitchControllerLocationArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*switchControllerLocationArgs)(nil)).Elem()
}

type SwitchControllerLocationInput interface {
	pulumi.Input

	ToSwitchControllerLocationOutput() SwitchControllerLocationOutput
	ToSwitchControllerLocationOutputWithContext(ctx context.Context) SwitchControllerLocationOutput
}

func (*SwitchControllerLocation) ElementType() reflect.Type {
	return reflect.TypeOf((**SwitchControllerLocation)(nil)).Elem()
}

func (i *SwitchControllerLocation) ToSwitchControllerLocationOutput() SwitchControllerLocationOutput {
	return i.ToSwitchControllerLocationOutputWithContext(context.Background())
}

func (i *SwitchControllerLocation) ToSwitchControllerLocationOutputWithContext(ctx context.Context) SwitchControllerLocationOutput {
	return pulumi.ToOutputWithContext(ctx, i).(SwitchControllerLocationOutput)
}

// SwitchControllerLocationArrayInput is an input type that accepts SwitchControllerLocationArray and SwitchControllerLocationArrayOutput values.
// You can construct a concrete instance of `SwitchControllerLocationArrayInput` via:
//
//	SwitchControllerLocationArray{ SwitchControllerLocationArgs{...} }
type SwitchControllerLocationArrayInput interface {
	pulumi.Input

	ToSwitchControllerLocationArrayOutput() SwitchControllerLocationArrayOutput
	ToSwitchControllerLocationArrayOutputWithContext(context.Context) SwitchControllerLocationArrayOutput
}

type SwitchControllerLocationArray []SwitchControllerLocationInput

func (SwitchControllerLocationArray) ElementType() reflect.Type {
	return reflect.TypeOf((*[]*SwitchControllerLocation)(nil)).Elem()
}

func (i SwitchControllerLocationArray) ToSwitchControllerLocationArrayOutput() SwitchControllerLocationArrayOutput {
	return i.ToSwitchControllerLocationArrayOutputWithContext(context.Background())
}

func (i SwitchControllerLocationArray) ToSwitchControllerLocationArrayOutputWithContext(ctx context.Context) SwitchControllerLocationArrayOutput {
	return pulumi.ToOutputWithContext(ctx, i).(SwitchControllerLocationArrayOutput)
}

// SwitchControllerLocationMapInput is an input type that accepts SwitchControllerLocationMap and SwitchControllerLocationMapOutput values.
// You can construct a concrete instance of `SwitchControllerLocationMapInput` via:
//
//	SwitchControllerLocationMap{ "key": SwitchControllerLocationArgs{...} }
type SwitchControllerLocationMapInput interface {
	pulumi.Input

	ToSwitchControllerLocationMapOutput() SwitchControllerLocationMapOutput
	ToSwitchControllerLocationMapOutputWithContext(context.Context) SwitchControllerLocationMapOutput
}

type SwitchControllerLocationMap map[string]SwitchControllerLocationInput

func (SwitchControllerLocationMap) ElementType() reflect.Type {
	return reflect.TypeOf((*map[string]*SwitchControllerLocation)(nil)).Elem()
}

func (i SwitchControllerLocationMap) ToSwitchControllerLocationMapOutput() SwitchControllerLocationMapOutput {
	return i.ToSwitchControllerLocationMapOutputWithContext(context.Background())
}

func (i SwitchControllerLocationMap) ToSwitchControllerLocationMapOutputWithContext(ctx context.Context) SwitchControllerLocationMapOutput {
	return pulumi.ToOutputWithContext(ctx, i).(SwitchControllerLocationMapOutput)
}

type SwitchControllerLocationOutput struct{ *pulumi.OutputState }

func (SwitchControllerLocationOutput) ElementType() reflect.Type {
	return reflect.TypeOf((**SwitchControllerLocation)(nil)).Elem()
}

func (o SwitchControllerLocationOutput) ToSwitchControllerLocationOutput() SwitchControllerLocationOutput {
	return o
}

func (o SwitchControllerLocationOutput) ToSwitchControllerLocationOutputWithContext(ctx context.Context) SwitchControllerLocationOutput {
	return o
}

func (o SwitchControllerLocationOutput) AddressCivic() SwitchControllerLocationAddressCivicOutput {
	return o.ApplyT(func(v *SwitchControllerLocation) SwitchControllerLocationAddressCivicOutput { return v.AddressCivic }).(SwitchControllerLocationAddressCivicOutput)
}

func (o SwitchControllerLocationOutput) Coordinates() SwitchControllerLocationCoordinatesOutput {
	return o.ApplyT(func(v *SwitchControllerLocation) SwitchControllerLocationCoordinatesOutput { return v.Coordinates }).(SwitchControllerLocationCoordinatesOutput)
}

func (o SwitchControllerLocationOutput) ElinNumber() SwitchControllerLocationElinNumberOutput {
	return o.ApplyT(func(v *SwitchControllerLocation) SwitchControllerLocationElinNumberOutput { return v.ElinNumber }).(SwitchControllerLocationElinNumberOutput)
}

func (o SwitchControllerLocationOutput) GetAllTables() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *SwitchControllerLocation) pulumi.StringPtrOutput { return v.GetAllTables }).(pulumi.StringPtrOutput)
}

func (o SwitchControllerLocationOutput) Name() pulumi.StringOutput {
	return o.ApplyT(func(v *SwitchControllerLocation) pulumi.StringOutput { return v.Name }).(pulumi.StringOutput)
}

func (o SwitchControllerLocationOutput) Vdomparam() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *SwitchControllerLocation) pulumi.StringPtrOutput { return v.Vdomparam }).(pulumi.StringPtrOutput)
}

type SwitchControllerLocationArrayOutput struct{ *pulumi.OutputState }

func (SwitchControllerLocationArrayOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*[]*SwitchControllerLocation)(nil)).Elem()
}

func (o SwitchControllerLocationArrayOutput) ToSwitchControllerLocationArrayOutput() SwitchControllerLocationArrayOutput {
	return o
}

func (o SwitchControllerLocationArrayOutput) ToSwitchControllerLocationArrayOutputWithContext(ctx context.Context) SwitchControllerLocationArrayOutput {
	return o
}

func (o SwitchControllerLocationArrayOutput) Index(i pulumi.IntInput) SwitchControllerLocationOutput {
	return pulumi.All(o, i).ApplyT(func(vs []interface{}) *SwitchControllerLocation {
		return vs[0].([]*SwitchControllerLocation)[vs[1].(int)]
	}).(SwitchControllerLocationOutput)
}

type SwitchControllerLocationMapOutput struct{ *pulumi.OutputState }

func (SwitchControllerLocationMapOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*map[string]*SwitchControllerLocation)(nil)).Elem()
}

func (o SwitchControllerLocationMapOutput) ToSwitchControllerLocationMapOutput() SwitchControllerLocationMapOutput {
	return o
}

func (o SwitchControllerLocationMapOutput) ToSwitchControllerLocationMapOutputWithContext(ctx context.Context) SwitchControllerLocationMapOutput {
	return o
}

func (o SwitchControllerLocationMapOutput) MapIndex(k pulumi.StringInput) SwitchControllerLocationOutput {
	return pulumi.All(o, k).ApplyT(func(vs []interface{}) *SwitchControllerLocation {
		return vs[0].(map[string]*SwitchControllerLocation)[vs[1].(string)]
	}).(SwitchControllerLocationOutput)
}

func init() {
	pulumi.RegisterInputType(reflect.TypeOf((*SwitchControllerLocationInput)(nil)).Elem(), &SwitchControllerLocation{})
	pulumi.RegisterInputType(reflect.TypeOf((*SwitchControllerLocationArrayInput)(nil)).Elem(), SwitchControllerLocationArray{})
	pulumi.RegisterInputType(reflect.TypeOf((*SwitchControllerLocationMapInput)(nil)).Elem(), SwitchControllerLocationMap{})
	pulumi.RegisterOutputType(SwitchControllerLocationOutput{})
	pulumi.RegisterOutputType(SwitchControllerLocationArrayOutput{})
	pulumi.RegisterOutputType(SwitchControllerLocationMapOutput{})
}
