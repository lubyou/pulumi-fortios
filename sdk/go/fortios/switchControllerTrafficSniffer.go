// Code generated by the Pulumi Terraform Bridge (tfgen) Tool DO NOT EDIT.
// *** WARNING: Do not edit by hand unless you're certain you know what you are doing! ***

package fortios

import (
	"context"
	"reflect"

	"github.com/lubyou/pulumi-fortios/sdk/go/fortios/internal"
	"github.com/pulumi/pulumi/sdk/v3/go/pulumi"
)

type SwitchControllerTrafficSniffer struct {
	pulumi.CustomResourceState

	DynamicSortSubtable pulumi.StringPtrOutput                              `pulumi:"dynamicSortSubtable"`
	ErspanIp            pulumi.StringOutput                                 `pulumi:"erspanIp"`
	GetAllTables        pulumi.StringPtrOutput                              `pulumi:"getAllTables"`
	Mode                pulumi.StringOutput                                 `pulumi:"mode"`
	TargetIps           SwitchControllerTrafficSnifferTargetIpArrayOutput   `pulumi:"targetIps"`
	TargetMacs          SwitchControllerTrafficSnifferTargetMacArrayOutput  `pulumi:"targetMacs"`
	TargetPorts         SwitchControllerTrafficSnifferTargetPortArrayOutput `pulumi:"targetPorts"`
	Vdomparam           pulumi.StringPtrOutput                              `pulumi:"vdomparam"`
}

// NewSwitchControllerTrafficSniffer registers a new resource with the given unique name, arguments, and options.
func NewSwitchControllerTrafficSniffer(ctx *pulumi.Context,
	name string, args *SwitchControllerTrafficSnifferArgs, opts ...pulumi.ResourceOption) (*SwitchControllerTrafficSniffer, error) {
	if args == nil {
		args = &SwitchControllerTrafficSnifferArgs{}
	}

	opts = internal.PkgResourceDefaultOpts(opts)
	var resource SwitchControllerTrafficSniffer
	err := ctx.RegisterResource("fortios:index/switchControllerTrafficSniffer:SwitchControllerTrafficSniffer", name, args, &resource, opts...)
	if err != nil {
		return nil, err
	}
	return &resource, nil
}

// GetSwitchControllerTrafficSniffer gets an existing SwitchControllerTrafficSniffer resource's state with the given name, ID, and optional
// state properties that are used to uniquely qualify the lookup (nil if not required).
func GetSwitchControllerTrafficSniffer(ctx *pulumi.Context,
	name string, id pulumi.IDInput, state *SwitchControllerTrafficSnifferState, opts ...pulumi.ResourceOption) (*SwitchControllerTrafficSniffer, error) {
	var resource SwitchControllerTrafficSniffer
	err := ctx.ReadResource("fortios:index/switchControllerTrafficSniffer:SwitchControllerTrafficSniffer", name, id, state, &resource, opts...)
	if err != nil {
		return nil, err
	}
	return &resource, nil
}

// Input properties used for looking up and filtering SwitchControllerTrafficSniffer resources.
type switchControllerTrafficSnifferState struct {
	DynamicSortSubtable *string                                    `pulumi:"dynamicSortSubtable"`
	ErspanIp            *string                                    `pulumi:"erspanIp"`
	GetAllTables        *string                                    `pulumi:"getAllTables"`
	Mode                *string                                    `pulumi:"mode"`
	TargetIps           []SwitchControllerTrafficSnifferTargetIp   `pulumi:"targetIps"`
	TargetMacs          []SwitchControllerTrafficSnifferTargetMac  `pulumi:"targetMacs"`
	TargetPorts         []SwitchControllerTrafficSnifferTargetPort `pulumi:"targetPorts"`
	Vdomparam           *string                                    `pulumi:"vdomparam"`
}

type SwitchControllerTrafficSnifferState struct {
	DynamicSortSubtable pulumi.StringPtrInput
	ErspanIp            pulumi.StringPtrInput
	GetAllTables        pulumi.StringPtrInput
	Mode                pulumi.StringPtrInput
	TargetIps           SwitchControllerTrafficSnifferTargetIpArrayInput
	TargetMacs          SwitchControllerTrafficSnifferTargetMacArrayInput
	TargetPorts         SwitchControllerTrafficSnifferTargetPortArrayInput
	Vdomparam           pulumi.StringPtrInput
}

func (SwitchControllerTrafficSnifferState) ElementType() reflect.Type {
	return reflect.TypeOf((*switchControllerTrafficSnifferState)(nil)).Elem()
}

type switchControllerTrafficSnifferArgs struct {
	DynamicSortSubtable *string                                    `pulumi:"dynamicSortSubtable"`
	ErspanIp            *string                                    `pulumi:"erspanIp"`
	GetAllTables        *string                                    `pulumi:"getAllTables"`
	Mode                *string                                    `pulumi:"mode"`
	TargetIps           []SwitchControllerTrafficSnifferTargetIp   `pulumi:"targetIps"`
	TargetMacs          []SwitchControllerTrafficSnifferTargetMac  `pulumi:"targetMacs"`
	TargetPorts         []SwitchControllerTrafficSnifferTargetPort `pulumi:"targetPorts"`
	Vdomparam           *string                                    `pulumi:"vdomparam"`
}

// The set of arguments for constructing a SwitchControllerTrafficSniffer resource.
type SwitchControllerTrafficSnifferArgs struct {
	DynamicSortSubtable pulumi.StringPtrInput
	ErspanIp            pulumi.StringPtrInput
	GetAllTables        pulumi.StringPtrInput
	Mode                pulumi.StringPtrInput
	TargetIps           SwitchControllerTrafficSnifferTargetIpArrayInput
	TargetMacs          SwitchControllerTrafficSnifferTargetMacArrayInput
	TargetPorts         SwitchControllerTrafficSnifferTargetPortArrayInput
	Vdomparam           pulumi.StringPtrInput
}

func (SwitchControllerTrafficSnifferArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*switchControllerTrafficSnifferArgs)(nil)).Elem()
}

type SwitchControllerTrafficSnifferInput interface {
	pulumi.Input

	ToSwitchControllerTrafficSnifferOutput() SwitchControllerTrafficSnifferOutput
	ToSwitchControllerTrafficSnifferOutputWithContext(ctx context.Context) SwitchControllerTrafficSnifferOutput
}

func (*SwitchControllerTrafficSniffer) ElementType() reflect.Type {
	return reflect.TypeOf((**SwitchControllerTrafficSniffer)(nil)).Elem()
}

func (i *SwitchControllerTrafficSniffer) ToSwitchControllerTrafficSnifferOutput() SwitchControllerTrafficSnifferOutput {
	return i.ToSwitchControllerTrafficSnifferOutputWithContext(context.Background())
}

func (i *SwitchControllerTrafficSniffer) ToSwitchControllerTrafficSnifferOutputWithContext(ctx context.Context) SwitchControllerTrafficSnifferOutput {
	return pulumi.ToOutputWithContext(ctx, i).(SwitchControllerTrafficSnifferOutput)
}

// SwitchControllerTrafficSnifferArrayInput is an input type that accepts SwitchControllerTrafficSnifferArray and SwitchControllerTrafficSnifferArrayOutput values.
// You can construct a concrete instance of `SwitchControllerTrafficSnifferArrayInput` via:
//
//	SwitchControllerTrafficSnifferArray{ SwitchControllerTrafficSnifferArgs{...} }
type SwitchControllerTrafficSnifferArrayInput interface {
	pulumi.Input

	ToSwitchControllerTrafficSnifferArrayOutput() SwitchControllerTrafficSnifferArrayOutput
	ToSwitchControllerTrafficSnifferArrayOutputWithContext(context.Context) SwitchControllerTrafficSnifferArrayOutput
}

type SwitchControllerTrafficSnifferArray []SwitchControllerTrafficSnifferInput

func (SwitchControllerTrafficSnifferArray) ElementType() reflect.Type {
	return reflect.TypeOf((*[]*SwitchControllerTrafficSniffer)(nil)).Elem()
}

func (i SwitchControllerTrafficSnifferArray) ToSwitchControllerTrafficSnifferArrayOutput() SwitchControllerTrafficSnifferArrayOutput {
	return i.ToSwitchControllerTrafficSnifferArrayOutputWithContext(context.Background())
}

func (i SwitchControllerTrafficSnifferArray) ToSwitchControllerTrafficSnifferArrayOutputWithContext(ctx context.Context) SwitchControllerTrafficSnifferArrayOutput {
	return pulumi.ToOutputWithContext(ctx, i).(SwitchControllerTrafficSnifferArrayOutput)
}

// SwitchControllerTrafficSnifferMapInput is an input type that accepts SwitchControllerTrafficSnifferMap and SwitchControllerTrafficSnifferMapOutput values.
// You can construct a concrete instance of `SwitchControllerTrafficSnifferMapInput` via:
//
//	SwitchControllerTrafficSnifferMap{ "key": SwitchControllerTrafficSnifferArgs{...} }
type SwitchControllerTrafficSnifferMapInput interface {
	pulumi.Input

	ToSwitchControllerTrafficSnifferMapOutput() SwitchControllerTrafficSnifferMapOutput
	ToSwitchControllerTrafficSnifferMapOutputWithContext(context.Context) SwitchControllerTrafficSnifferMapOutput
}

type SwitchControllerTrafficSnifferMap map[string]SwitchControllerTrafficSnifferInput

func (SwitchControllerTrafficSnifferMap) ElementType() reflect.Type {
	return reflect.TypeOf((*map[string]*SwitchControllerTrafficSniffer)(nil)).Elem()
}

func (i SwitchControllerTrafficSnifferMap) ToSwitchControllerTrafficSnifferMapOutput() SwitchControllerTrafficSnifferMapOutput {
	return i.ToSwitchControllerTrafficSnifferMapOutputWithContext(context.Background())
}

func (i SwitchControllerTrafficSnifferMap) ToSwitchControllerTrafficSnifferMapOutputWithContext(ctx context.Context) SwitchControllerTrafficSnifferMapOutput {
	return pulumi.ToOutputWithContext(ctx, i).(SwitchControllerTrafficSnifferMapOutput)
}

type SwitchControllerTrafficSnifferOutput struct{ *pulumi.OutputState }

func (SwitchControllerTrafficSnifferOutput) ElementType() reflect.Type {
	return reflect.TypeOf((**SwitchControllerTrafficSniffer)(nil)).Elem()
}

func (o SwitchControllerTrafficSnifferOutput) ToSwitchControllerTrafficSnifferOutput() SwitchControllerTrafficSnifferOutput {
	return o
}

func (o SwitchControllerTrafficSnifferOutput) ToSwitchControllerTrafficSnifferOutputWithContext(ctx context.Context) SwitchControllerTrafficSnifferOutput {
	return o
}

func (o SwitchControllerTrafficSnifferOutput) DynamicSortSubtable() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *SwitchControllerTrafficSniffer) pulumi.StringPtrOutput { return v.DynamicSortSubtable }).(pulumi.StringPtrOutput)
}

func (o SwitchControllerTrafficSnifferOutput) ErspanIp() pulumi.StringOutput {
	return o.ApplyT(func(v *SwitchControllerTrafficSniffer) pulumi.StringOutput { return v.ErspanIp }).(pulumi.StringOutput)
}

func (o SwitchControllerTrafficSnifferOutput) GetAllTables() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *SwitchControllerTrafficSniffer) pulumi.StringPtrOutput { return v.GetAllTables }).(pulumi.StringPtrOutput)
}

func (o SwitchControllerTrafficSnifferOutput) Mode() pulumi.StringOutput {
	return o.ApplyT(func(v *SwitchControllerTrafficSniffer) pulumi.StringOutput { return v.Mode }).(pulumi.StringOutput)
}

func (o SwitchControllerTrafficSnifferOutput) TargetIps() SwitchControllerTrafficSnifferTargetIpArrayOutput {
	return o.ApplyT(func(v *SwitchControllerTrafficSniffer) SwitchControllerTrafficSnifferTargetIpArrayOutput {
		return v.TargetIps
	}).(SwitchControllerTrafficSnifferTargetIpArrayOutput)
}

func (o SwitchControllerTrafficSnifferOutput) TargetMacs() SwitchControllerTrafficSnifferTargetMacArrayOutput {
	return o.ApplyT(func(v *SwitchControllerTrafficSniffer) SwitchControllerTrafficSnifferTargetMacArrayOutput {
		return v.TargetMacs
	}).(SwitchControllerTrafficSnifferTargetMacArrayOutput)
}

func (o SwitchControllerTrafficSnifferOutput) TargetPorts() SwitchControllerTrafficSnifferTargetPortArrayOutput {
	return o.ApplyT(func(v *SwitchControllerTrafficSniffer) SwitchControllerTrafficSnifferTargetPortArrayOutput {
		return v.TargetPorts
	}).(SwitchControllerTrafficSnifferTargetPortArrayOutput)
}

func (o SwitchControllerTrafficSnifferOutput) Vdomparam() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *SwitchControllerTrafficSniffer) pulumi.StringPtrOutput { return v.Vdomparam }).(pulumi.StringPtrOutput)
}

type SwitchControllerTrafficSnifferArrayOutput struct{ *pulumi.OutputState }

func (SwitchControllerTrafficSnifferArrayOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*[]*SwitchControllerTrafficSniffer)(nil)).Elem()
}

func (o SwitchControllerTrafficSnifferArrayOutput) ToSwitchControllerTrafficSnifferArrayOutput() SwitchControllerTrafficSnifferArrayOutput {
	return o
}

func (o SwitchControllerTrafficSnifferArrayOutput) ToSwitchControllerTrafficSnifferArrayOutputWithContext(ctx context.Context) SwitchControllerTrafficSnifferArrayOutput {
	return o
}

func (o SwitchControllerTrafficSnifferArrayOutput) Index(i pulumi.IntInput) SwitchControllerTrafficSnifferOutput {
	return pulumi.All(o, i).ApplyT(func(vs []interface{}) *SwitchControllerTrafficSniffer {
		return vs[0].([]*SwitchControllerTrafficSniffer)[vs[1].(int)]
	}).(SwitchControllerTrafficSnifferOutput)
}

type SwitchControllerTrafficSnifferMapOutput struct{ *pulumi.OutputState }

func (SwitchControllerTrafficSnifferMapOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*map[string]*SwitchControllerTrafficSniffer)(nil)).Elem()
}

func (o SwitchControllerTrafficSnifferMapOutput) ToSwitchControllerTrafficSnifferMapOutput() SwitchControllerTrafficSnifferMapOutput {
	return o
}

func (o SwitchControllerTrafficSnifferMapOutput) ToSwitchControllerTrafficSnifferMapOutputWithContext(ctx context.Context) SwitchControllerTrafficSnifferMapOutput {
	return o
}

func (o SwitchControllerTrafficSnifferMapOutput) MapIndex(k pulumi.StringInput) SwitchControllerTrafficSnifferOutput {
	return pulumi.All(o, k).ApplyT(func(vs []interface{}) *SwitchControllerTrafficSniffer {
		return vs[0].(map[string]*SwitchControllerTrafficSniffer)[vs[1].(string)]
	}).(SwitchControllerTrafficSnifferOutput)
}

func init() {
	pulumi.RegisterInputType(reflect.TypeOf((*SwitchControllerTrafficSnifferInput)(nil)).Elem(), &SwitchControllerTrafficSniffer{})
	pulumi.RegisterInputType(reflect.TypeOf((*SwitchControllerTrafficSnifferArrayInput)(nil)).Elem(), SwitchControllerTrafficSnifferArray{})
	pulumi.RegisterInputType(reflect.TypeOf((*SwitchControllerTrafficSnifferMapInput)(nil)).Elem(), SwitchControllerTrafficSnifferMap{})
	pulumi.RegisterOutputType(SwitchControllerTrafficSnifferOutput{})
	pulumi.RegisterOutputType(SwitchControllerTrafficSnifferArrayOutput{})
	pulumi.RegisterOutputType(SwitchControllerTrafficSnifferMapOutput{})
}
