// Code generated by the Pulumi Terraform Bridge (tfgen) Tool DO NOT EDIT.
// *** WARNING: Do not edit by hand unless you're certain you know what you are doing! ***

package fortios

import (
	"context"
	"reflect"

	"github.com/lubyou/pulumi-fortios/sdk/go/fortios/internal"
	"github.com/pulumi/pulumi/sdk/v3/go/pulumi"
)

type LogEventfilter struct {
	pulumi.CustomResourceState

	Cifs             pulumi.StringOutput    `pulumi:"cifs"`
	ComplianceCheck  pulumi.StringOutput    `pulumi:"complianceCheck"`
	Connector        pulumi.StringOutput    `pulumi:"connector"`
	Endpoint         pulumi.StringOutput    `pulumi:"endpoint"`
	Event            pulumi.StringOutput    `pulumi:"event"`
	Fortiextender    pulumi.StringOutput    `pulumi:"fortiextender"`
	Ha               pulumi.StringOutput    `pulumi:"ha"`
	RestApi          pulumi.StringOutput    `pulumi:"restApi"`
	Router           pulumi.StringOutput    `pulumi:"router"`
	Sdwan            pulumi.StringOutput    `pulumi:"sdwan"`
	SecurityRating   pulumi.StringOutput    `pulumi:"securityRating"`
	SwitchController pulumi.StringOutput    `pulumi:"switchController"`
	System           pulumi.StringOutput    `pulumi:"system"`
	User             pulumi.StringOutput    `pulumi:"user"`
	Vdomparam        pulumi.StringPtrOutput `pulumi:"vdomparam"`
	Vpn              pulumi.StringOutput    `pulumi:"vpn"`
	WanOpt           pulumi.StringOutput    `pulumi:"wanOpt"`
	Webproxy         pulumi.StringOutput    `pulumi:"webproxy"`
	WirelessActivity pulumi.StringOutput    `pulumi:"wirelessActivity"`
}

// NewLogEventfilter registers a new resource with the given unique name, arguments, and options.
func NewLogEventfilter(ctx *pulumi.Context,
	name string, args *LogEventfilterArgs, opts ...pulumi.ResourceOption) (*LogEventfilter, error) {
	if args == nil {
		args = &LogEventfilterArgs{}
	}

	opts = internal.PkgResourceDefaultOpts(opts)
	var resource LogEventfilter
	err := ctx.RegisterResource("fortios:index/logEventfilter:LogEventfilter", name, args, &resource, opts...)
	if err != nil {
		return nil, err
	}
	return &resource, nil
}

// GetLogEventfilter gets an existing LogEventfilter resource's state with the given name, ID, and optional
// state properties that are used to uniquely qualify the lookup (nil if not required).
func GetLogEventfilter(ctx *pulumi.Context,
	name string, id pulumi.IDInput, state *LogEventfilterState, opts ...pulumi.ResourceOption) (*LogEventfilter, error) {
	var resource LogEventfilter
	err := ctx.ReadResource("fortios:index/logEventfilter:LogEventfilter", name, id, state, &resource, opts...)
	if err != nil {
		return nil, err
	}
	return &resource, nil
}

// Input properties used for looking up and filtering LogEventfilter resources.
type logEventfilterState struct {
	Cifs             *string `pulumi:"cifs"`
	ComplianceCheck  *string `pulumi:"complianceCheck"`
	Connector        *string `pulumi:"connector"`
	Endpoint         *string `pulumi:"endpoint"`
	Event            *string `pulumi:"event"`
	Fortiextender    *string `pulumi:"fortiextender"`
	Ha               *string `pulumi:"ha"`
	RestApi          *string `pulumi:"restApi"`
	Router           *string `pulumi:"router"`
	Sdwan            *string `pulumi:"sdwan"`
	SecurityRating   *string `pulumi:"securityRating"`
	SwitchController *string `pulumi:"switchController"`
	System           *string `pulumi:"system"`
	User             *string `pulumi:"user"`
	Vdomparam        *string `pulumi:"vdomparam"`
	Vpn              *string `pulumi:"vpn"`
	WanOpt           *string `pulumi:"wanOpt"`
	Webproxy         *string `pulumi:"webproxy"`
	WirelessActivity *string `pulumi:"wirelessActivity"`
}

type LogEventfilterState struct {
	Cifs             pulumi.StringPtrInput
	ComplianceCheck  pulumi.StringPtrInput
	Connector        pulumi.StringPtrInput
	Endpoint         pulumi.StringPtrInput
	Event            pulumi.StringPtrInput
	Fortiextender    pulumi.StringPtrInput
	Ha               pulumi.StringPtrInput
	RestApi          pulumi.StringPtrInput
	Router           pulumi.StringPtrInput
	Sdwan            pulumi.StringPtrInput
	SecurityRating   pulumi.StringPtrInput
	SwitchController pulumi.StringPtrInput
	System           pulumi.StringPtrInput
	User             pulumi.StringPtrInput
	Vdomparam        pulumi.StringPtrInput
	Vpn              pulumi.StringPtrInput
	WanOpt           pulumi.StringPtrInput
	Webproxy         pulumi.StringPtrInput
	WirelessActivity pulumi.StringPtrInput
}

func (LogEventfilterState) ElementType() reflect.Type {
	return reflect.TypeOf((*logEventfilterState)(nil)).Elem()
}

type logEventfilterArgs struct {
	Cifs             *string `pulumi:"cifs"`
	ComplianceCheck  *string `pulumi:"complianceCheck"`
	Connector        *string `pulumi:"connector"`
	Endpoint         *string `pulumi:"endpoint"`
	Event            *string `pulumi:"event"`
	Fortiextender    *string `pulumi:"fortiextender"`
	Ha               *string `pulumi:"ha"`
	RestApi          *string `pulumi:"restApi"`
	Router           *string `pulumi:"router"`
	Sdwan            *string `pulumi:"sdwan"`
	SecurityRating   *string `pulumi:"securityRating"`
	SwitchController *string `pulumi:"switchController"`
	System           *string `pulumi:"system"`
	User             *string `pulumi:"user"`
	Vdomparam        *string `pulumi:"vdomparam"`
	Vpn              *string `pulumi:"vpn"`
	WanOpt           *string `pulumi:"wanOpt"`
	Webproxy         *string `pulumi:"webproxy"`
	WirelessActivity *string `pulumi:"wirelessActivity"`
}

// The set of arguments for constructing a LogEventfilter resource.
type LogEventfilterArgs struct {
	Cifs             pulumi.StringPtrInput
	ComplianceCheck  pulumi.StringPtrInput
	Connector        pulumi.StringPtrInput
	Endpoint         pulumi.StringPtrInput
	Event            pulumi.StringPtrInput
	Fortiextender    pulumi.StringPtrInput
	Ha               pulumi.StringPtrInput
	RestApi          pulumi.StringPtrInput
	Router           pulumi.StringPtrInput
	Sdwan            pulumi.StringPtrInput
	SecurityRating   pulumi.StringPtrInput
	SwitchController pulumi.StringPtrInput
	System           pulumi.StringPtrInput
	User             pulumi.StringPtrInput
	Vdomparam        pulumi.StringPtrInput
	Vpn              pulumi.StringPtrInput
	WanOpt           pulumi.StringPtrInput
	Webproxy         pulumi.StringPtrInput
	WirelessActivity pulumi.StringPtrInput
}

func (LogEventfilterArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*logEventfilterArgs)(nil)).Elem()
}

type LogEventfilterInput interface {
	pulumi.Input

	ToLogEventfilterOutput() LogEventfilterOutput
	ToLogEventfilterOutputWithContext(ctx context.Context) LogEventfilterOutput
}

func (*LogEventfilter) ElementType() reflect.Type {
	return reflect.TypeOf((**LogEventfilter)(nil)).Elem()
}

func (i *LogEventfilter) ToLogEventfilterOutput() LogEventfilterOutput {
	return i.ToLogEventfilterOutputWithContext(context.Background())
}

func (i *LogEventfilter) ToLogEventfilterOutputWithContext(ctx context.Context) LogEventfilterOutput {
	return pulumi.ToOutputWithContext(ctx, i).(LogEventfilterOutput)
}

// LogEventfilterArrayInput is an input type that accepts LogEventfilterArray and LogEventfilterArrayOutput values.
// You can construct a concrete instance of `LogEventfilterArrayInput` via:
//
//	LogEventfilterArray{ LogEventfilterArgs{...} }
type LogEventfilterArrayInput interface {
	pulumi.Input

	ToLogEventfilterArrayOutput() LogEventfilterArrayOutput
	ToLogEventfilterArrayOutputWithContext(context.Context) LogEventfilterArrayOutput
}

type LogEventfilterArray []LogEventfilterInput

func (LogEventfilterArray) ElementType() reflect.Type {
	return reflect.TypeOf((*[]*LogEventfilter)(nil)).Elem()
}

func (i LogEventfilterArray) ToLogEventfilterArrayOutput() LogEventfilterArrayOutput {
	return i.ToLogEventfilterArrayOutputWithContext(context.Background())
}

func (i LogEventfilterArray) ToLogEventfilterArrayOutputWithContext(ctx context.Context) LogEventfilterArrayOutput {
	return pulumi.ToOutputWithContext(ctx, i).(LogEventfilterArrayOutput)
}

// LogEventfilterMapInput is an input type that accepts LogEventfilterMap and LogEventfilterMapOutput values.
// You can construct a concrete instance of `LogEventfilterMapInput` via:
//
//	LogEventfilterMap{ "key": LogEventfilterArgs{...} }
type LogEventfilterMapInput interface {
	pulumi.Input

	ToLogEventfilterMapOutput() LogEventfilterMapOutput
	ToLogEventfilterMapOutputWithContext(context.Context) LogEventfilterMapOutput
}

type LogEventfilterMap map[string]LogEventfilterInput

func (LogEventfilterMap) ElementType() reflect.Type {
	return reflect.TypeOf((*map[string]*LogEventfilter)(nil)).Elem()
}

func (i LogEventfilterMap) ToLogEventfilterMapOutput() LogEventfilterMapOutput {
	return i.ToLogEventfilterMapOutputWithContext(context.Background())
}

func (i LogEventfilterMap) ToLogEventfilterMapOutputWithContext(ctx context.Context) LogEventfilterMapOutput {
	return pulumi.ToOutputWithContext(ctx, i).(LogEventfilterMapOutput)
}

type LogEventfilterOutput struct{ *pulumi.OutputState }

func (LogEventfilterOutput) ElementType() reflect.Type {
	return reflect.TypeOf((**LogEventfilter)(nil)).Elem()
}

func (o LogEventfilterOutput) ToLogEventfilterOutput() LogEventfilterOutput {
	return o
}

func (o LogEventfilterOutput) ToLogEventfilterOutputWithContext(ctx context.Context) LogEventfilterOutput {
	return o
}

func (o LogEventfilterOutput) Cifs() pulumi.StringOutput {
	return o.ApplyT(func(v *LogEventfilter) pulumi.StringOutput { return v.Cifs }).(pulumi.StringOutput)
}

func (o LogEventfilterOutput) ComplianceCheck() pulumi.StringOutput {
	return o.ApplyT(func(v *LogEventfilter) pulumi.StringOutput { return v.ComplianceCheck }).(pulumi.StringOutput)
}

func (o LogEventfilterOutput) Connector() pulumi.StringOutput {
	return o.ApplyT(func(v *LogEventfilter) pulumi.StringOutput { return v.Connector }).(pulumi.StringOutput)
}

func (o LogEventfilterOutput) Endpoint() pulumi.StringOutput {
	return o.ApplyT(func(v *LogEventfilter) pulumi.StringOutput { return v.Endpoint }).(pulumi.StringOutput)
}

func (o LogEventfilterOutput) Event() pulumi.StringOutput {
	return o.ApplyT(func(v *LogEventfilter) pulumi.StringOutput { return v.Event }).(pulumi.StringOutput)
}

func (o LogEventfilterOutput) Fortiextender() pulumi.StringOutput {
	return o.ApplyT(func(v *LogEventfilter) pulumi.StringOutput { return v.Fortiextender }).(pulumi.StringOutput)
}

func (o LogEventfilterOutput) Ha() pulumi.StringOutput {
	return o.ApplyT(func(v *LogEventfilter) pulumi.StringOutput { return v.Ha }).(pulumi.StringOutput)
}

func (o LogEventfilterOutput) RestApi() pulumi.StringOutput {
	return o.ApplyT(func(v *LogEventfilter) pulumi.StringOutput { return v.RestApi }).(pulumi.StringOutput)
}

func (o LogEventfilterOutput) Router() pulumi.StringOutput {
	return o.ApplyT(func(v *LogEventfilter) pulumi.StringOutput { return v.Router }).(pulumi.StringOutput)
}

func (o LogEventfilterOutput) Sdwan() pulumi.StringOutput {
	return o.ApplyT(func(v *LogEventfilter) pulumi.StringOutput { return v.Sdwan }).(pulumi.StringOutput)
}

func (o LogEventfilterOutput) SecurityRating() pulumi.StringOutput {
	return o.ApplyT(func(v *LogEventfilter) pulumi.StringOutput { return v.SecurityRating }).(pulumi.StringOutput)
}

func (o LogEventfilterOutput) SwitchController() pulumi.StringOutput {
	return o.ApplyT(func(v *LogEventfilter) pulumi.StringOutput { return v.SwitchController }).(pulumi.StringOutput)
}

func (o LogEventfilterOutput) System() pulumi.StringOutput {
	return o.ApplyT(func(v *LogEventfilter) pulumi.StringOutput { return v.System }).(pulumi.StringOutput)
}

func (o LogEventfilterOutput) User() pulumi.StringOutput {
	return o.ApplyT(func(v *LogEventfilter) pulumi.StringOutput { return v.User }).(pulumi.StringOutput)
}

func (o LogEventfilterOutput) Vdomparam() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *LogEventfilter) pulumi.StringPtrOutput { return v.Vdomparam }).(pulumi.StringPtrOutput)
}

func (o LogEventfilterOutput) Vpn() pulumi.StringOutput {
	return o.ApplyT(func(v *LogEventfilter) pulumi.StringOutput { return v.Vpn }).(pulumi.StringOutput)
}

func (o LogEventfilterOutput) WanOpt() pulumi.StringOutput {
	return o.ApplyT(func(v *LogEventfilter) pulumi.StringOutput { return v.WanOpt }).(pulumi.StringOutput)
}

func (o LogEventfilterOutput) Webproxy() pulumi.StringOutput {
	return o.ApplyT(func(v *LogEventfilter) pulumi.StringOutput { return v.Webproxy }).(pulumi.StringOutput)
}

func (o LogEventfilterOutput) WirelessActivity() pulumi.StringOutput {
	return o.ApplyT(func(v *LogEventfilter) pulumi.StringOutput { return v.WirelessActivity }).(pulumi.StringOutput)
}

type LogEventfilterArrayOutput struct{ *pulumi.OutputState }

func (LogEventfilterArrayOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*[]*LogEventfilter)(nil)).Elem()
}

func (o LogEventfilterArrayOutput) ToLogEventfilterArrayOutput() LogEventfilterArrayOutput {
	return o
}

func (o LogEventfilterArrayOutput) ToLogEventfilterArrayOutputWithContext(ctx context.Context) LogEventfilterArrayOutput {
	return o
}

func (o LogEventfilterArrayOutput) Index(i pulumi.IntInput) LogEventfilterOutput {
	return pulumi.All(o, i).ApplyT(func(vs []interface{}) *LogEventfilter {
		return vs[0].([]*LogEventfilter)[vs[1].(int)]
	}).(LogEventfilterOutput)
}

type LogEventfilterMapOutput struct{ *pulumi.OutputState }

func (LogEventfilterMapOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*map[string]*LogEventfilter)(nil)).Elem()
}

func (o LogEventfilterMapOutput) ToLogEventfilterMapOutput() LogEventfilterMapOutput {
	return o
}

func (o LogEventfilterMapOutput) ToLogEventfilterMapOutputWithContext(ctx context.Context) LogEventfilterMapOutput {
	return o
}

func (o LogEventfilterMapOutput) MapIndex(k pulumi.StringInput) LogEventfilterOutput {
	return pulumi.All(o, k).ApplyT(func(vs []interface{}) *LogEventfilter {
		return vs[0].(map[string]*LogEventfilter)[vs[1].(string)]
	}).(LogEventfilterOutput)
}

func init() {
	pulumi.RegisterInputType(reflect.TypeOf((*LogEventfilterInput)(nil)).Elem(), &LogEventfilter{})
	pulumi.RegisterInputType(reflect.TypeOf((*LogEventfilterArrayInput)(nil)).Elem(), LogEventfilterArray{})
	pulumi.RegisterInputType(reflect.TypeOf((*LogEventfilterMapInput)(nil)).Elem(), LogEventfilterMap{})
	pulumi.RegisterOutputType(LogEventfilterOutput{})
	pulumi.RegisterOutputType(LogEventfilterArrayOutput{})
	pulumi.RegisterOutputType(LogEventfilterMapOutput{})
}
