// Code generated by the Pulumi Terraform Bridge (tfgen) Tool DO NOT EDIT.
// *** WARNING: Do not edit by hand unless you're certain you know what you are doing! ***

package fortios

import (
	"context"
	"reflect"

	"errors"
	"github.com/lubyou/pulumi-fortios/sdk/go/fortios/internal"
	"github.com/pulumi/pulumi/sdk/v3/go/pulumi"
	"github.com/pulumi/pulumi/sdk/v3/go/pulumix"
)

type DlpFpDocSource struct {
	pulumi.CustomResourceState

	Date               pulumi.IntOutput       `pulumi:"date"`
	FilePath           pulumi.StringOutput    `pulumi:"filePath"`
	FilePattern        pulumi.StringOutput    `pulumi:"filePattern"`
	KeepModified       pulumi.StringOutput    `pulumi:"keepModified"`
	Name               pulumi.StringOutput    `pulumi:"name"`
	Password           pulumi.StringPtrOutput `pulumi:"password"`
	Period             pulumi.StringOutput    `pulumi:"period"`
	RemoveDeleted      pulumi.StringOutput    `pulumi:"removeDeleted"`
	ScanOnCreation     pulumi.StringOutput    `pulumi:"scanOnCreation"`
	ScanSubdirectories pulumi.StringOutput    `pulumi:"scanSubdirectories"`
	Sensitivity        pulumi.StringOutput    `pulumi:"sensitivity"`
	Server             pulumi.StringOutput    `pulumi:"server"`
	ServerType         pulumi.StringOutput    `pulumi:"serverType"`
	TodHour            pulumi.IntOutput       `pulumi:"todHour"`
	TodMin             pulumi.IntOutput       `pulumi:"todMin"`
	Username           pulumi.StringOutput    `pulumi:"username"`
	Vdom               pulumi.StringOutput    `pulumi:"vdom"`
	Vdomparam          pulumi.StringPtrOutput `pulumi:"vdomparam"`
	Weekday            pulumi.StringOutput    `pulumi:"weekday"`
}

// NewDlpFpDocSource registers a new resource with the given unique name, arguments, and options.
func NewDlpFpDocSource(ctx *pulumi.Context,
	name string, args *DlpFpDocSourceArgs, opts ...pulumi.ResourceOption) (*DlpFpDocSource, error) {
	if args == nil {
		return nil, errors.New("missing one or more required arguments")
	}

	if args.Server == nil {
		return nil, errors.New("invalid value for required argument 'Server'")
	}
	if args.ServerType == nil {
		return nil, errors.New("invalid value for required argument 'ServerType'")
	}
	if args.Username == nil {
		return nil, errors.New("invalid value for required argument 'Username'")
	}
	if args.Password != nil {
		args.Password = pulumi.ToSecret(args.Password).(pulumi.StringPtrInput)
	}
	secrets := pulumi.AdditionalSecretOutputs([]string{
		"password",
	})
	opts = append(opts, secrets)
	opts = internal.PkgResourceDefaultOpts(opts)
	var resource DlpFpDocSource
	err := ctx.RegisterResource("fortios:index/dlpFpDocSource:DlpFpDocSource", name, args, &resource, opts...)
	if err != nil {
		return nil, err
	}
	return &resource, nil
}

// GetDlpFpDocSource gets an existing DlpFpDocSource resource's state with the given name, ID, and optional
// state properties that are used to uniquely qualify the lookup (nil if not required).
func GetDlpFpDocSource(ctx *pulumi.Context,
	name string, id pulumi.IDInput, state *DlpFpDocSourceState, opts ...pulumi.ResourceOption) (*DlpFpDocSource, error) {
	var resource DlpFpDocSource
	err := ctx.ReadResource("fortios:index/dlpFpDocSource:DlpFpDocSource", name, id, state, &resource, opts...)
	if err != nil {
		return nil, err
	}
	return &resource, nil
}

// Input properties used for looking up and filtering DlpFpDocSource resources.
type dlpFpDocSourceState struct {
	Date               *int    `pulumi:"date"`
	FilePath           *string `pulumi:"filePath"`
	FilePattern        *string `pulumi:"filePattern"`
	KeepModified       *string `pulumi:"keepModified"`
	Name               *string `pulumi:"name"`
	Password           *string `pulumi:"password"`
	Period             *string `pulumi:"period"`
	RemoveDeleted      *string `pulumi:"removeDeleted"`
	ScanOnCreation     *string `pulumi:"scanOnCreation"`
	ScanSubdirectories *string `pulumi:"scanSubdirectories"`
	Sensitivity        *string `pulumi:"sensitivity"`
	Server             *string `pulumi:"server"`
	ServerType         *string `pulumi:"serverType"`
	TodHour            *int    `pulumi:"todHour"`
	TodMin             *int    `pulumi:"todMin"`
	Username           *string `pulumi:"username"`
	Vdom               *string `pulumi:"vdom"`
	Vdomparam          *string `pulumi:"vdomparam"`
	Weekday            *string `pulumi:"weekday"`
}

type DlpFpDocSourceState struct {
	Date               pulumi.IntPtrInput
	FilePath           pulumi.StringPtrInput
	FilePattern        pulumi.StringPtrInput
	KeepModified       pulumi.StringPtrInput
	Name               pulumi.StringPtrInput
	Password           pulumi.StringPtrInput
	Period             pulumi.StringPtrInput
	RemoveDeleted      pulumi.StringPtrInput
	ScanOnCreation     pulumi.StringPtrInput
	ScanSubdirectories pulumi.StringPtrInput
	Sensitivity        pulumi.StringPtrInput
	Server             pulumi.StringPtrInput
	ServerType         pulumi.StringPtrInput
	TodHour            pulumi.IntPtrInput
	TodMin             pulumi.IntPtrInput
	Username           pulumi.StringPtrInput
	Vdom               pulumi.StringPtrInput
	Vdomparam          pulumi.StringPtrInput
	Weekday            pulumi.StringPtrInput
}

func (DlpFpDocSourceState) ElementType() reflect.Type {
	return reflect.TypeOf((*dlpFpDocSourceState)(nil)).Elem()
}

type dlpFpDocSourceArgs struct {
	Date               *int    `pulumi:"date"`
	FilePath           *string `pulumi:"filePath"`
	FilePattern        *string `pulumi:"filePattern"`
	KeepModified       *string `pulumi:"keepModified"`
	Name               *string `pulumi:"name"`
	Password           *string `pulumi:"password"`
	Period             *string `pulumi:"period"`
	RemoveDeleted      *string `pulumi:"removeDeleted"`
	ScanOnCreation     *string `pulumi:"scanOnCreation"`
	ScanSubdirectories *string `pulumi:"scanSubdirectories"`
	Sensitivity        *string `pulumi:"sensitivity"`
	Server             string  `pulumi:"server"`
	ServerType         string  `pulumi:"serverType"`
	TodHour            *int    `pulumi:"todHour"`
	TodMin             *int    `pulumi:"todMin"`
	Username           string  `pulumi:"username"`
	Vdom               *string `pulumi:"vdom"`
	Vdomparam          *string `pulumi:"vdomparam"`
	Weekday            *string `pulumi:"weekday"`
}

// The set of arguments for constructing a DlpFpDocSource resource.
type DlpFpDocSourceArgs struct {
	Date               pulumi.IntPtrInput
	FilePath           pulumi.StringPtrInput
	FilePattern        pulumi.StringPtrInput
	KeepModified       pulumi.StringPtrInput
	Name               pulumi.StringPtrInput
	Password           pulumi.StringPtrInput
	Period             pulumi.StringPtrInput
	RemoveDeleted      pulumi.StringPtrInput
	ScanOnCreation     pulumi.StringPtrInput
	ScanSubdirectories pulumi.StringPtrInput
	Sensitivity        pulumi.StringPtrInput
	Server             pulumi.StringInput
	ServerType         pulumi.StringInput
	TodHour            pulumi.IntPtrInput
	TodMin             pulumi.IntPtrInput
	Username           pulumi.StringInput
	Vdom               pulumi.StringPtrInput
	Vdomparam          pulumi.StringPtrInput
	Weekday            pulumi.StringPtrInput
}

func (DlpFpDocSourceArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*dlpFpDocSourceArgs)(nil)).Elem()
}

type DlpFpDocSourceInput interface {
	pulumi.Input

	ToDlpFpDocSourceOutput() DlpFpDocSourceOutput
	ToDlpFpDocSourceOutputWithContext(ctx context.Context) DlpFpDocSourceOutput
}

func (*DlpFpDocSource) ElementType() reflect.Type {
	return reflect.TypeOf((**DlpFpDocSource)(nil)).Elem()
}

func (i *DlpFpDocSource) ToDlpFpDocSourceOutput() DlpFpDocSourceOutput {
	return i.ToDlpFpDocSourceOutputWithContext(context.Background())
}

func (i *DlpFpDocSource) ToDlpFpDocSourceOutputWithContext(ctx context.Context) DlpFpDocSourceOutput {
	return pulumi.ToOutputWithContext(ctx, i).(DlpFpDocSourceOutput)
}

func (i *DlpFpDocSource) ToOutput(ctx context.Context) pulumix.Output[*DlpFpDocSource] {
	return pulumix.Output[*DlpFpDocSource]{
		OutputState: i.ToDlpFpDocSourceOutputWithContext(ctx).OutputState,
	}
}

// DlpFpDocSourceArrayInput is an input type that accepts DlpFpDocSourceArray and DlpFpDocSourceArrayOutput values.
// You can construct a concrete instance of `DlpFpDocSourceArrayInput` via:
//
//	DlpFpDocSourceArray{ DlpFpDocSourceArgs{...} }
type DlpFpDocSourceArrayInput interface {
	pulumi.Input

	ToDlpFpDocSourceArrayOutput() DlpFpDocSourceArrayOutput
	ToDlpFpDocSourceArrayOutputWithContext(context.Context) DlpFpDocSourceArrayOutput
}

type DlpFpDocSourceArray []DlpFpDocSourceInput

func (DlpFpDocSourceArray) ElementType() reflect.Type {
	return reflect.TypeOf((*[]*DlpFpDocSource)(nil)).Elem()
}

func (i DlpFpDocSourceArray) ToDlpFpDocSourceArrayOutput() DlpFpDocSourceArrayOutput {
	return i.ToDlpFpDocSourceArrayOutputWithContext(context.Background())
}

func (i DlpFpDocSourceArray) ToDlpFpDocSourceArrayOutputWithContext(ctx context.Context) DlpFpDocSourceArrayOutput {
	return pulumi.ToOutputWithContext(ctx, i).(DlpFpDocSourceArrayOutput)
}

func (i DlpFpDocSourceArray) ToOutput(ctx context.Context) pulumix.Output[[]*DlpFpDocSource] {
	return pulumix.Output[[]*DlpFpDocSource]{
		OutputState: i.ToDlpFpDocSourceArrayOutputWithContext(ctx).OutputState,
	}
}

// DlpFpDocSourceMapInput is an input type that accepts DlpFpDocSourceMap and DlpFpDocSourceMapOutput values.
// You can construct a concrete instance of `DlpFpDocSourceMapInput` via:
//
//	DlpFpDocSourceMap{ "key": DlpFpDocSourceArgs{...} }
type DlpFpDocSourceMapInput interface {
	pulumi.Input

	ToDlpFpDocSourceMapOutput() DlpFpDocSourceMapOutput
	ToDlpFpDocSourceMapOutputWithContext(context.Context) DlpFpDocSourceMapOutput
}

type DlpFpDocSourceMap map[string]DlpFpDocSourceInput

func (DlpFpDocSourceMap) ElementType() reflect.Type {
	return reflect.TypeOf((*map[string]*DlpFpDocSource)(nil)).Elem()
}

func (i DlpFpDocSourceMap) ToDlpFpDocSourceMapOutput() DlpFpDocSourceMapOutput {
	return i.ToDlpFpDocSourceMapOutputWithContext(context.Background())
}

func (i DlpFpDocSourceMap) ToDlpFpDocSourceMapOutputWithContext(ctx context.Context) DlpFpDocSourceMapOutput {
	return pulumi.ToOutputWithContext(ctx, i).(DlpFpDocSourceMapOutput)
}

func (i DlpFpDocSourceMap) ToOutput(ctx context.Context) pulumix.Output[map[string]*DlpFpDocSource] {
	return pulumix.Output[map[string]*DlpFpDocSource]{
		OutputState: i.ToDlpFpDocSourceMapOutputWithContext(ctx).OutputState,
	}
}

type DlpFpDocSourceOutput struct{ *pulumi.OutputState }

func (DlpFpDocSourceOutput) ElementType() reflect.Type {
	return reflect.TypeOf((**DlpFpDocSource)(nil)).Elem()
}

func (o DlpFpDocSourceOutput) ToDlpFpDocSourceOutput() DlpFpDocSourceOutput {
	return o
}

func (o DlpFpDocSourceOutput) ToDlpFpDocSourceOutputWithContext(ctx context.Context) DlpFpDocSourceOutput {
	return o
}

func (o DlpFpDocSourceOutput) ToOutput(ctx context.Context) pulumix.Output[*DlpFpDocSource] {
	return pulumix.Output[*DlpFpDocSource]{
		OutputState: o.OutputState,
	}
}

func (o DlpFpDocSourceOutput) Date() pulumi.IntOutput {
	return o.ApplyT(func(v *DlpFpDocSource) pulumi.IntOutput { return v.Date }).(pulumi.IntOutput)
}

func (o DlpFpDocSourceOutput) FilePath() pulumi.StringOutput {
	return o.ApplyT(func(v *DlpFpDocSource) pulumi.StringOutput { return v.FilePath }).(pulumi.StringOutput)
}

func (o DlpFpDocSourceOutput) FilePattern() pulumi.StringOutput {
	return o.ApplyT(func(v *DlpFpDocSource) pulumi.StringOutput { return v.FilePattern }).(pulumi.StringOutput)
}

func (o DlpFpDocSourceOutput) KeepModified() pulumi.StringOutput {
	return o.ApplyT(func(v *DlpFpDocSource) pulumi.StringOutput { return v.KeepModified }).(pulumi.StringOutput)
}

func (o DlpFpDocSourceOutput) Name() pulumi.StringOutput {
	return o.ApplyT(func(v *DlpFpDocSource) pulumi.StringOutput { return v.Name }).(pulumi.StringOutput)
}

func (o DlpFpDocSourceOutput) Password() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *DlpFpDocSource) pulumi.StringPtrOutput { return v.Password }).(pulumi.StringPtrOutput)
}

func (o DlpFpDocSourceOutput) Period() pulumi.StringOutput {
	return o.ApplyT(func(v *DlpFpDocSource) pulumi.StringOutput { return v.Period }).(pulumi.StringOutput)
}

func (o DlpFpDocSourceOutput) RemoveDeleted() pulumi.StringOutput {
	return o.ApplyT(func(v *DlpFpDocSource) pulumi.StringOutput { return v.RemoveDeleted }).(pulumi.StringOutput)
}

func (o DlpFpDocSourceOutput) ScanOnCreation() pulumi.StringOutput {
	return o.ApplyT(func(v *DlpFpDocSource) pulumi.StringOutput { return v.ScanOnCreation }).(pulumi.StringOutput)
}

func (o DlpFpDocSourceOutput) ScanSubdirectories() pulumi.StringOutput {
	return o.ApplyT(func(v *DlpFpDocSource) pulumi.StringOutput { return v.ScanSubdirectories }).(pulumi.StringOutput)
}

func (o DlpFpDocSourceOutput) Sensitivity() pulumi.StringOutput {
	return o.ApplyT(func(v *DlpFpDocSource) pulumi.StringOutput { return v.Sensitivity }).(pulumi.StringOutput)
}

func (o DlpFpDocSourceOutput) Server() pulumi.StringOutput {
	return o.ApplyT(func(v *DlpFpDocSource) pulumi.StringOutput { return v.Server }).(pulumi.StringOutput)
}

func (o DlpFpDocSourceOutput) ServerType() pulumi.StringOutput {
	return o.ApplyT(func(v *DlpFpDocSource) pulumi.StringOutput { return v.ServerType }).(pulumi.StringOutput)
}

func (o DlpFpDocSourceOutput) TodHour() pulumi.IntOutput {
	return o.ApplyT(func(v *DlpFpDocSource) pulumi.IntOutput { return v.TodHour }).(pulumi.IntOutput)
}

func (o DlpFpDocSourceOutput) TodMin() pulumi.IntOutput {
	return o.ApplyT(func(v *DlpFpDocSource) pulumi.IntOutput { return v.TodMin }).(pulumi.IntOutput)
}

func (o DlpFpDocSourceOutput) Username() pulumi.StringOutput {
	return o.ApplyT(func(v *DlpFpDocSource) pulumi.StringOutput { return v.Username }).(pulumi.StringOutput)
}

func (o DlpFpDocSourceOutput) Vdom() pulumi.StringOutput {
	return o.ApplyT(func(v *DlpFpDocSource) pulumi.StringOutput { return v.Vdom }).(pulumi.StringOutput)
}

func (o DlpFpDocSourceOutput) Vdomparam() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *DlpFpDocSource) pulumi.StringPtrOutput { return v.Vdomparam }).(pulumi.StringPtrOutput)
}

func (o DlpFpDocSourceOutput) Weekday() pulumi.StringOutput {
	return o.ApplyT(func(v *DlpFpDocSource) pulumi.StringOutput { return v.Weekday }).(pulumi.StringOutput)
}

type DlpFpDocSourceArrayOutput struct{ *pulumi.OutputState }

func (DlpFpDocSourceArrayOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*[]*DlpFpDocSource)(nil)).Elem()
}

func (o DlpFpDocSourceArrayOutput) ToDlpFpDocSourceArrayOutput() DlpFpDocSourceArrayOutput {
	return o
}

func (o DlpFpDocSourceArrayOutput) ToDlpFpDocSourceArrayOutputWithContext(ctx context.Context) DlpFpDocSourceArrayOutput {
	return o
}

func (o DlpFpDocSourceArrayOutput) ToOutput(ctx context.Context) pulumix.Output[[]*DlpFpDocSource] {
	return pulumix.Output[[]*DlpFpDocSource]{
		OutputState: o.OutputState,
	}
}

func (o DlpFpDocSourceArrayOutput) Index(i pulumi.IntInput) DlpFpDocSourceOutput {
	return pulumi.All(o, i).ApplyT(func(vs []interface{}) *DlpFpDocSource {
		return vs[0].([]*DlpFpDocSource)[vs[1].(int)]
	}).(DlpFpDocSourceOutput)
}

type DlpFpDocSourceMapOutput struct{ *pulumi.OutputState }

func (DlpFpDocSourceMapOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*map[string]*DlpFpDocSource)(nil)).Elem()
}

func (o DlpFpDocSourceMapOutput) ToDlpFpDocSourceMapOutput() DlpFpDocSourceMapOutput {
	return o
}

func (o DlpFpDocSourceMapOutput) ToDlpFpDocSourceMapOutputWithContext(ctx context.Context) DlpFpDocSourceMapOutput {
	return o
}

func (o DlpFpDocSourceMapOutput) ToOutput(ctx context.Context) pulumix.Output[map[string]*DlpFpDocSource] {
	return pulumix.Output[map[string]*DlpFpDocSource]{
		OutputState: o.OutputState,
	}
}

func (o DlpFpDocSourceMapOutput) MapIndex(k pulumi.StringInput) DlpFpDocSourceOutput {
	return pulumi.All(o, k).ApplyT(func(vs []interface{}) *DlpFpDocSource {
		return vs[0].(map[string]*DlpFpDocSource)[vs[1].(string)]
	}).(DlpFpDocSourceOutput)
}

func init() {
	pulumi.RegisterInputType(reflect.TypeOf((*DlpFpDocSourceInput)(nil)).Elem(), &DlpFpDocSource{})
	pulumi.RegisterInputType(reflect.TypeOf((*DlpFpDocSourceArrayInput)(nil)).Elem(), DlpFpDocSourceArray{})
	pulumi.RegisterInputType(reflect.TypeOf((*DlpFpDocSourceMapInput)(nil)).Elem(), DlpFpDocSourceMap{})
	pulumi.RegisterOutputType(DlpFpDocSourceOutput{})
	pulumi.RegisterOutputType(DlpFpDocSourceArrayOutput{})
	pulumi.RegisterOutputType(DlpFpDocSourceMapOutput{})
}
