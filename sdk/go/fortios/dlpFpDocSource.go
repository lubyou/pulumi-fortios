// *** WARNING: this file was generated by the Pulumi Terraform Bridge (tfgen) Tool. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

package fortios

import (
	"context"
	"reflect"

	"github.com/pkg/errors"
	"github.com/pulumi/pulumi/sdk/v3/go/pulumi"
)

// Create a DLP fingerprint database by allowing the FortiGate to access a file server containing files from which to create fingerprints.
//
// ## Example Usage
//
// ```go
// package main
//
// import (
// 	"github.com/pulumi/pulumi-fortios/sdk/go/fortios"
// 	"github.com/pulumi/pulumi/sdk/v3/go/pulumi"
// )
//
// func main() {
// 	pulumi.Run(func(ctx *pulumi.Context) error {
// 		_, err := fortios.NewDlpFpDocSource(ctx, "trname", &fortios.DlpFpDocSourceArgs{
// 			Date:               pulumi.Int(1),
// 			FilePath:           pulumi.String("/"),
// 			FilePattern:        pulumi.String("*"),
// 			KeepModified:       pulumi.String("enable"),
// 			Period:             pulumi.String("none"),
// 			RemoveDeleted:      pulumi.String("enable"),
// 			ScanOnCreation:     pulumi.String("enable"),
// 			ScanSubdirectories: pulumi.String("enable"),
// 			Server:             pulumi.String("1.1.1.1"),
// 			ServerType:         pulumi.String("samba"),
// 			TodHour:            pulumi.Int(1),
// 			TodMin:             pulumi.Int(0),
// 			Username:           pulumi.String("sgh"),
// 			Vdom:               pulumi.String("mgmt"),
// 			Weekday:            pulumi.String("sunday"),
// 		})
// 		if err != nil {
// 			return err
// 		}
// 		return nil
// 	})
// }
// ```
//
// ## Import
//
// Dlp FpDocSource can be imported using any of these accepted formats$ export "FORTIOS_IMPORT_TABLE"="true"
//
// ```sh
//  $ pulumi import fortios:index/dlpFpDocSource:DlpFpDocSource labelname {{name}}
// ```
//
//  $ unset "FORTIOS_IMPORT_TABLE"
type DlpFpDocSource struct {
	pulumi.CustomResourceState

	// Day of the month on which to scan the server (1 - 31).
	Date pulumi.IntOutput `pulumi:"date"`
	// Path on the server to the fingerprint files (max 119 characters).
	FilePath pulumi.StringOutput `pulumi:"filePath"`
	// Files matching this pattern on the server are fingerprinted. Optionally use the * and ? wildcards.
	FilePattern pulumi.StringOutput `pulumi:"filePattern"`
	// Enable so that when a file is changed on the server the FortiGate keeps the old fingerprint and adds a new fingerprint to the database. Valid values: `enable`, `disable`.
	KeepModified pulumi.StringOutput `pulumi:"keepModified"`
	// Name of the DLP fingerprint database.
	Name pulumi.StringOutput `pulumi:"name"`
	// Password required to log into the file server.
	Password pulumi.StringPtrOutput `pulumi:"password"`
	// Frequency for which the FortiGate checks the server for new or changed files. Valid values: `none`, `daily`, `weekly`, `monthly`.
	Period pulumi.StringOutput `pulumi:"period"`
	// Enable to keep the fingerprint database up to date when a file is deleted from the server. Valid values: `enable`, `disable`.
	RemoveDeleted pulumi.StringOutput `pulumi:"removeDeleted"`
	// Enable to keep the fingerprint database up to date when a file is added or changed on the server. Valid values: `enable`, `disable`.
	ScanOnCreation pulumi.StringOutput `pulumi:"scanOnCreation"`
	// Enable/disable scanning subdirectories to find files to create fingerprints from. Valid values: `enable`, `disable`.
	ScanSubdirectories pulumi.StringOutput `pulumi:"scanSubdirectories"`
	// Select a sensitivity or threat level for matches with this fingerprint database. Add sensitivities using fp-sensitivity.
	Sensitivity pulumi.StringOutput `pulumi:"sensitivity"`
	// IPv4 or IPv6 address of the server.
	Server pulumi.StringOutput `pulumi:"server"`
	// Protocol used to communicate with the file server. Currently only Samba (SMB) servers are supported. Valid values: `samba`.
	ServerType pulumi.StringOutput `pulumi:"serverType"`
	// Hour of the day on which to scan the server (0 - 23, default = 1).
	TodHour pulumi.IntOutput `pulumi:"todHour"`
	// Minute of the hour on which to scan the server (0 - 59).
	TodMin pulumi.IntOutput `pulumi:"todMin"`
	// User name required to log into the file server.
	Username pulumi.StringOutput `pulumi:"username"`
	// Select the VDOM that can communicate with the file server. Valid values: `mgmt`, `current`.
	Vdom pulumi.StringOutput `pulumi:"vdom"`
	// Specifies the vdom to which the resource will be applied when the FortiGate unit is running in VDOM mode. Only one vdom can be specified. If you want to inherit the vdom configuration of the provider, please do not set this parameter.
	Vdomparam pulumi.StringPtrOutput `pulumi:"vdomparam"`
	// Day of the week on which to scan the server. Valid values: `sunday`, `monday`, `tuesday`, `wednesday`, `thursday`, `friday`, `saturday`.
	Weekday pulumi.StringOutput `pulumi:"weekday"`
}

// NewDlpFpDocSource registers a new resource with the given unique name, arguments, and options.
func NewDlpFpDocSource(ctx *pulumi.Context,
	name string, args *DlpFpDocSourceArgs, opts ...pulumi.ResourceOption) (*DlpFpDocSource, error) {
	if args == nil {
		return nil, errors.New("missing one or more required arguments")
	}

	if args.Server == nil {
		return nil, errors.New("invalid value for required argument 'Server'")
	}
	if args.ServerType == nil {
		return nil, errors.New("invalid value for required argument 'ServerType'")
	}
	if args.Username == nil {
		return nil, errors.New("invalid value for required argument 'Username'")
	}
	var resource DlpFpDocSource
	err := ctx.RegisterResource("fortios:index/dlpFpDocSource:DlpFpDocSource", name, args, &resource, opts...)
	if err != nil {
		return nil, err
	}
	return &resource, nil
}

// GetDlpFpDocSource gets an existing DlpFpDocSource resource's state with the given name, ID, and optional
// state properties that are used to uniquely qualify the lookup (nil if not required).
func GetDlpFpDocSource(ctx *pulumi.Context,
	name string, id pulumi.IDInput, state *DlpFpDocSourceState, opts ...pulumi.ResourceOption) (*DlpFpDocSource, error) {
	var resource DlpFpDocSource
	err := ctx.ReadResource("fortios:index/dlpFpDocSource:DlpFpDocSource", name, id, state, &resource, opts...)
	if err != nil {
		return nil, err
	}
	return &resource, nil
}

// Input properties used for looking up and filtering DlpFpDocSource resources.
type dlpFpDocSourceState struct {
	// Day of the month on which to scan the server (1 - 31).
	Date *int `pulumi:"date"`
	// Path on the server to the fingerprint files (max 119 characters).
	FilePath *string `pulumi:"filePath"`
	// Files matching this pattern on the server are fingerprinted. Optionally use the * and ? wildcards.
	FilePattern *string `pulumi:"filePattern"`
	// Enable so that when a file is changed on the server the FortiGate keeps the old fingerprint and adds a new fingerprint to the database. Valid values: `enable`, `disable`.
	KeepModified *string `pulumi:"keepModified"`
	// Name of the DLP fingerprint database.
	Name *string `pulumi:"name"`
	// Password required to log into the file server.
	Password *string `pulumi:"password"`
	// Frequency for which the FortiGate checks the server for new or changed files. Valid values: `none`, `daily`, `weekly`, `monthly`.
	Period *string `pulumi:"period"`
	// Enable to keep the fingerprint database up to date when a file is deleted from the server. Valid values: `enable`, `disable`.
	RemoveDeleted *string `pulumi:"removeDeleted"`
	// Enable to keep the fingerprint database up to date when a file is added or changed on the server. Valid values: `enable`, `disable`.
	ScanOnCreation *string `pulumi:"scanOnCreation"`
	// Enable/disable scanning subdirectories to find files to create fingerprints from. Valid values: `enable`, `disable`.
	ScanSubdirectories *string `pulumi:"scanSubdirectories"`
	// Select a sensitivity or threat level for matches with this fingerprint database. Add sensitivities using fp-sensitivity.
	Sensitivity *string `pulumi:"sensitivity"`
	// IPv4 or IPv6 address of the server.
	Server *string `pulumi:"server"`
	// Protocol used to communicate with the file server. Currently only Samba (SMB) servers are supported. Valid values: `samba`.
	ServerType *string `pulumi:"serverType"`
	// Hour of the day on which to scan the server (0 - 23, default = 1).
	TodHour *int `pulumi:"todHour"`
	// Minute of the hour on which to scan the server (0 - 59).
	TodMin *int `pulumi:"todMin"`
	// User name required to log into the file server.
	Username *string `pulumi:"username"`
	// Select the VDOM that can communicate with the file server. Valid values: `mgmt`, `current`.
	Vdom *string `pulumi:"vdom"`
	// Specifies the vdom to which the resource will be applied when the FortiGate unit is running in VDOM mode. Only one vdom can be specified. If you want to inherit the vdom configuration of the provider, please do not set this parameter.
	Vdomparam *string `pulumi:"vdomparam"`
	// Day of the week on which to scan the server. Valid values: `sunday`, `monday`, `tuesday`, `wednesday`, `thursday`, `friday`, `saturday`.
	Weekday *string `pulumi:"weekday"`
}

type DlpFpDocSourceState struct {
	// Day of the month on which to scan the server (1 - 31).
	Date pulumi.IntPtrInput
	// Path on the server to the fingerprint files (max 119 characters).
	FilePath pulumi.StringPtrInput
	// Files matching this pattern on the server are fingerprinted. Optionally use the * and ? wildcards.
	FilePattern pulumi.StringPtrInput
	// Enable so that when a file is changed on the server the FortiGate keeps the old fingerprint and adds a new fingerprint to the database. Valid values: `enable`, `disable`.
	KeepModified pulumi.StringPtrInput
	// Name of the DLP fingerprint database.
	Name pulumi.StringPtrInput
	// Password required to log into the file server.
	Password pulumi.StringPtrInput
	// Frequency for which the FortiGate checks the server for new or changed files. Valid values: `none`, `daily`, `weekly`, `monthly`.
	Period pulumi.StringPtrInput
	// Enable to keep the fingerprint database up to date when a file is deleted from the server. Valid values: `enable`, `disable`.
	RemoveDeleted pulumi.StringPtrInput
	// Enable to keep the fingerprint database up to date when a file is added or changed on the server. Valid values: `enable`, `disable`.
	ScanOnCreation pulumi.StringPtrInput
	// Enable/disable scanning subdirectories to find files to create fingerprints from. Valid values: `enable`, `disable`.
	ScanSubdirectories pulumi.StringPtrInput
	// Select a sensitivity or threat level for matches with this fingerprint database. Add sensitivities using fp-sensitivity.
	Sensitivity pulumi.StringPtrInput
	// IPv4 or IPv6 address of the server.
	Server pulumi.StringPtrInput
	// Protocol used to communicate with the file server. Currently only Samba (SMB) servers are supported. Valid values: `samba`.
	ServerType pulumi.StringPtrInput
	// Hour of the day on which to scan the server (0 - 23, default = 1).
	TodHour pulumi.IntPtrInput
	// Minute of the hour on which to scan the server (0 - 59).
	TodMin pulumi.IntPtrInput
	// User name required to log into the file server.
	Username pulumi.StringPtrInput
	// Select the VDOM that can communicate with the file server. Valid values: `mgmt`, `current`.
	Vdom pulumi.StringPtrInput
	// Specifies the vdom to which the resource will be applied when the FortiGate unit is running in VDOM mode. Only one vdom can be specified. If you want to inherit the vdom configuration of the provider, please do not set this parameter.
	Vdomparam pulumi.StringPtrInput
	// Day of the week on which to scan the server. Valid values: `sunday`, `monday`, `tuesday`, `wednesday`, `thursday`, `friday`, `saturday`.
	Weekday pulumi.StringPtrInput
}

func (DlpFpDocSourceState) ElementType() reflect.Type {
	return reflect.TypeOf((*dlpFpDocSourceState)(nil)).Elem()
}

type dlpFpDocSourceArgs struct {
	// Day of the month on which to scan the server (1 - 31).
	Date *int `pulumi:"date"`
	// Path on the server to the fingerprint files (max 119 characters).
	FilePath *string `pulumi:"filePath"`
	// Files matching this pattern on the server are fingerprinted. Optionally use the * and ? wildcards.
	FilePattern *string `pulumi:"filePattern"`
	// Enable so that when a file is changed on the server the FortiGate keeps the old fingerprint and adds a new fingerprint to the database. Valid values: `enable`, `disable`.
	KeepModified *string `pulumi:"keepModified"`
	// Name of the DLP fingerprint database.
	Name *string `pulumi:"name"`
	// Password required to log into the file server.
	Password *string `pulumi:"password"`
	// Frequency for which the FortiGate checks the server for new or changed files. Valid values: `none`, `daily`, `weekly`, `monthly`.
	Period *string `pulumi:"period"`
	// Enable to keep the fingerprint database up to date when a file is deleted from the server. Valid values: `enable`, `disable`.
	RemoveDeleted *string `pulumi:"removeDeleted"`
	// Enable to keep the fingerprint database up to date when a file is added or changed on the server. Valid values: `enable`, `disable`.
	ScanOnCreation *string `pulumi:"scanOnCreation"`
	// Enable/disable scanning subdirectories to find files to create fingerprints from. Valid values: `enable`, `disable`.
	ScanSubdirectories *string `pulumi:"scanSubdirectories"`
	// Select a sensitivity or threat level for matches with this fingerprint database. Add sensitivities using fp-sensitivity.
	Sensitivity *string `pulumi:"sensitivity"`
	// IPv4 or IPv6 address of the server.
	Server string `pulumi:"server"`
	// Protocol used to communicate with the file server. Currently only Samba (SMB) servers are supported. Valid values: `samba`.
	ServerType string `pulumi:"serverType"`
	// Hour of the day on which to scan the server (0 - 23, default = 1).
	TodHour *int `pulumi:"todHour"`
	// Minute of the hour on which to scan the server (0 - 59).
	TodMin *int `pulumi:"todMin"`
	// User name required to log into the file server.
	Username string `pulumi:"username"`
	// Select the VDOM that can communicate with the file server. Valid values: `mgmt`, `current`.
	Vdom *string `pulumi:"vdom"`
	// Specifies the vdom to which the resource will be applied when the FortiGate unit is running in VDOM mode. Only one vdom can be specified. If you want to inherit the vdom configuration of the provider, please do not set this parameter.
	Vdomparam *string `pulumi:"vdomparam"`
	// Day of the week on which to scan the server. Valid values: `sunday`, `monday`, `tuesday`, `wednesday`, `thursday`, `friday`, `saturday`.
	Weekday *string `pulumi:"weekday"`
}

// The set of arguments for constructing a DlpFpDocSource resource.
type DlpFpDocSourceArgs struct {
	// Day of the month on which to scan the server (1 - 31).
	Date pulumi.IntPtrInput
	// Path on the server to the fingerprint files (max 119 characters).
	FilePath pulumi.StringPtrInput
	// Files matching this pattern on the server are fingerprinted. Optionally use the * and ? wildcards.
	FilePattern pulumi.StringPtrInput
	// Enable so that when a file is changed on the server the FortiGate keeps the old fingerprint and adds a new fingerprint to the database. Valid values: `enable`, `disable`.
	KeepModified pulumi.StringPtrInput
	// Name of the DLP fingerprint database.
	Name pulumi.StringPtrInput
	// Password required to log into the file server.
	Password pulumi.StringPtrInput
	// Frequency for which the FortiGate checks the server for new or changed files. Valid values: `none`, `daily`, `weekly`, `monthly`.
	Period pulumi.StringPtrInput
	// Enable to keep the fingerprint database up to date when a file is deleted from the server. Valid values: `enable`, `disable`.
	RemoveDeleted pulumi.StringPtrInput
	// Enable to keep the fingerprint database up to date when a file is added or changed on the server. Valid values: `enable`, `disable`.
	ScanOnCreation pulumi.StringPtrInput
	// Enable/disable scanning subdirectories to find files to create fingerprints from. Valid values: `enable`, `disable`.
	ScanSubdirectories pulumi.StringPtrInput
	// Select a sensitivity or threat level for matches with this fingerprint database. Add sensitivities using fp-sensitivity.
	Sensitivity pulumi.StringPtrInput
	// IPv4 or IPv6 address of the server.
	Server pulumi.StringInput
	// Protocol used to communicate with the file server. Currently only Samba (SMB) servers are supported. Valid values: `samba`.
	ServerType pulumi.StringInput
	// Hour of the day on which to scan the server (0 - 23, default = 1).
	TodHour pulumi.IntPtrInput
	// Minute of the hour on which to scan the server (0 - 59).
	TodMin pulumi.IntPtrInput
	// User name required to log into the file server.
	Username pulumi.StringInput
	// Select the VDOM that can communicate with the file server. Valid values: `mgmt`, `current`.
	Vdom pulumi.StringPtrInput
	// Specifies the vdom to which the resource will be applied when the FortiGate unit is running in VDOM mode. Only one vdom can be specified. If you want to inherit the vdom configuration of the provider, please do not set this parameter.
	Vdomparam pulumi.StringPtrInput
	// Day of the week on which to scan the server. Valid values: `sunday`, `monday`, `tuesday`, `wednesday`, `thursday`, `friday`, `saturday`.
	Weekday pulumi.StringPtrInput
}

func (DlpFpDocSourceArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*dlpFpDocSourceArgs)(nil)).Elem()
}

type DlpFpDocSourceInput interface {
	pulumi.Input

	ToDlpFpDocSourceOutput() DlpFpDocSourceOutput
	ToDlpFpDocSourceOutputWithContext(ctx context.Context) DlpFpDocSourceOutput
}

func (*DlpFpDocSource) ElementType() reflect.Type {
	return reflect.TypeOf((*DlpFpDocSource)(nil))
}

func (i *DlpFpDocSource) ToDlpFpDocSourceOutput() DlpFpDocSourceOutput {
	return i.ToDlpFpDocSourceOutputWithContext(context.Background())
}

func (i *DlpFpDocSource) ToDlpFpDocSourceOutputWithContext(ctx context.Context) DlpFpDocSourceOutput {
	return pulumi.ToOutputWithContext(ctx, i).(DlpFpDocSourceOutput)
}

func (i *DlpFpDocSource) ToDlpFpDocSourcePtrOutput() DlpFpDocSourcePtrOutput {
	return i.ToDlpFpDocSourcePtrOutputWithContext(context.Background())
}

func (i *DlpFpDocSource) ToDlpFpDocSourcePtrOutputWithContext(ctx context.Context) DlpFpDocSourcePtrOutput {
	return pulumi.ToOutputWithContext(ctx, i).(DlpFpDocSourcePtrOutput)
}

type DlpFpDocSourcePtrInput interface {
	pulumi.Input

	ToDlpFpDocSourcePtrOutput() DlpFpDocSourcePtrOutput
	ToDlpFpDocSourcePtrOutputWithContext(ctx context.Context) DlpFpDocSourcePtrOutput
}

type dlpFpDocSourcePtrType DlpFpDocSourceArgs

func (*dlpFpDocSourcePtrType) ElementType() reflect.Type {
	return reflect.TypeOf((**DlpFpDocSource)(nil))
}

func (i *dlpFpDocSourcePtrType) ToDlpFpDocSourcePtrOutput() DlpFpDocSourcePtrOutput {
	return i.ToDlpFpDocSourcePtrOutputWithContext(context.Background())
}

func (i *dlpFpDocSourcePtrType) ToDlpFpDocSourcePtrOutputWithContext(ctx context.Context) DlpFpDocSourcePtrOutput {
	return pulumi.ToOutputWithContext(ctx, i).(DlpFpDocSourcePtrOutput)
}

// DlpFpDocSourceArrayInput is an input type that accepts DlpFpDocSourceArray and DlpFpDocSourceArrayOutput values.
// You can construct a concrete instance of `DlpFpDocSourceArrayInput` via:
//
//          DlpFpDocSourceArray{ DlpFpDocSourceArgs{...} }
type DlpFpDocSourceArrayInput interface {
	pulumi.Input

	ToDlpFpDocSourceArrayOutput() DlpFpDocSourceArrayOutput
	ToDlpFpDocSourceArrayOutputWithContext(context.Context) DlpFpDocSourceArrayOutput
}

type DlpFpDocSourceArray []DlpFpDocSourceInput

func (DlpFpDocSourceArray) ElementType() reflect.Type {
	return reflect.TypeOf(([]*DlpFpDocSource)(nil))
}

func (i DlpFpDocSourceArray) ToDlpFpDocSourceArrayOutput() DlpFpDocSourceArrayOutput {
	return i.ToDlpFpDocSourceArrayOutputWithContext(context.Background())
}

func (i DlpFpDocSourceArray) ToDlpFpDocSourceArrayOutputWithContext(ctx context.Context) DlpFpDocSourceArrayOutput {
	return pulumi.ToOutputWithContext(ctx, i).(DlpFpDocSourceArrayOutput)
}

// DlpFpDocSourceMapInput is an input type that accepts DlpFpDocSourceMap and DlpFpDocSourceMapOutput values.
// You can construct a concrete instance of `DlpFpDocSourceMapInput` via:
//
//          DlpFpDocSourceMap{ "key": DlpFpDocSourceArgs{...} }
type DlpFpDocSourceMapInput interface {
	pulumi.Input

	ToDlpFpDocSourceMapOutput() DlpFpDocSourceMapOutput
	ToDlpFpDocSourceMapOutputWithContext(context.Context) DlpFpDocSourceMapOutput
}

type DlpFpDocSourceMap map[string]DlpFpDocSourceInput

func (DlpFpDocSourceMap) ElementType() reflect.Type {
	return reflect.TypeOf((map[string]*DlpFpDocSource)(nil))
}

func (i DlpFpDocSourceMap) ToDlpFpDocSourceMapOutput() DlpFpDocSourceMapOutput {
	return i.ToDlpFpDocSourceMapOutputWithContext(context.Background())
}

func (i DlpFpDocSourceMap) ToDlpFpDocSourceMapOutputWithContext(ctx context.Context) DlpFpDocSourceMapOutput {
	return pulumi.ToOutputWithContext(ctx, i).(DlpFpDocSourceMapOutput)
}

type DlpFpDocSourceOutput struct {
	*pulumi.OutputState
}

func (DlpFpDocSourceOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*DlpFpDocSource)(nil))
}

func (o DlpFpDocSourceOutput) ToDlpFpDocSourceOutput() DlpFpDocSourceOutput {
	return o
}

func (o DlpFpDocSourceOutput) ToDlpFpDocSourceOutputWithContext(ctx context.Context) DlpFpDocSourceOutput {
	return o
}

func (o DlpFpDocSourceOutput) ToDlpFpDocSourcePtrOutput() DlpFpDocSourcePtrOutput {
	return o.ToDlpFpDocSourcePtrOutputWithContext(context.Background())
}

func (o DlpFpDocSourceOutput) ToDlpFpDocSourcePtrOutputWithContext(ctx context.Context) DlpFpDocSourcePtrOutput {
	return o.ApplyT(func(v DlpFpDocSource) *DlpFpDocSource {
		return &v
	}).(DlpFpDocSourcePtrOutput)
}

type DlpFpDocSourcePtrOutput struct {
	*pulumi.OutputState
}

func (DlpFpDocSourcePtrOutput) ElementType() reflect.Type {
	return reflect.TypeOf((**DlpFpDocSource)(nil))
}

func (o DlpFpDocSourcePtrOutput) ToDlpFpDocSourcePtrOutput() DlpFpDocSourcePtrOutput {
	return o
}

func (o DlpFpDocSourcePtrOutput) ToDlpFpDocSourcePtrOutputWithContext(ctx context.Context) DlpFpDocSourcePtrOutput {
	return o
}

type DlpFpDocSourceArrayOutput struct{ *pulumi.OutputState }

func (DlpFpDocSourceArrayOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*[]DlpFpDocSource)(nil))
}

func (o DlpFpDocSourceArrayOutput) ToDlpFpDocSourceArrayOutput() DlpFpDocSourceArrayOutput {
	return o
}

func (o DlpFpDocSourceArrayOutput) ToDlpFpDocSourceArrayOutputWithContext(ctx context.Context) DlpFpDocSourceArrayOutput {
	return o
}

func (o DlpFpDocSourceArrayOutput) Index(i pulumi.IntInput) DlpFpDocSourceOutput {
	return pulumi.All(o, i).ApplyT(func(vs []interface{}) DlpFpDocSource {
		return vs[0].([]DlpFpDocSource)[vs[1].(int)]
	}).(DlpFpDocSourceOutput)
}

type DlpFpDocSourceMapOutput struct{ *pulumi.OutputState }

func (DlpFpDocSourceMapOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*map[string]DlpFpDocSource)(nil))
}

func (o DlpFpDocSourceMapOutput) ToDlpFpDocSourceMapOutput() DlpFpDocSourceMapOutput {
	return o
}

func (o DlpFpDocSourceMapOutput) ToDlpFpDocSourceMapOutputWithContext(ctx context.Context) DlpFpDocSourceMapOutput {
	return o
}

func (o DlpFpDocSourceMapOutput) MapIndex(k pulumi.StringInput) DlpFpDocSourceOutput {
	return pulumi.All(o, k).ApplyT(func(vs []interface{}) DlpFpDocSource {
		return vs[0].(map[string]DlpFpDocSource)[vs[1].(string)]
	}).(DlpFpDocSourceOutput)
}

func init() {
	pulumi.RegisterOutputType(DlpFpDocSourceOutput{})
	pulumi.RegisterOutputType(DlpFpDocSourcePtrOutput{})
	pulumi.RegisterOutputType(DlpFpDocSourceArrayOutput{})
	pulumi.RegisterOutputType(DlpFpDocSourceMapOutput{})
}
