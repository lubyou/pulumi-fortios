// *** WARNING: this file was generated by the Pulumi Terraform Bridge (tfgen) Tool. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

package fortios

import (
	"context"
	"reflect"

	"github.com/pulumi/pulumi/sdk/v3/go/pulumi"
)

// Configure replacement message images.
//
// ## Example Usage
//
// ```go
// package main
//
// import (
// 	"github.com/pulumi/pulumi-fortios/sdk/go/fortios"
// 	"github.com/pulumi/pulumi/sdk/v3/go/pulumi"
// )
//
// func main() {
// 	pulumi.Run(func(ctx *pulumi.Context) error {
// 		_, err := fortios.NewSystemReplacemsgImage(ctx, "trname", &fortios.SystemReplacemsgImageArgs{
// 			ImageBase64: pulumi.String("iVBORw0KGgoAAAANSUhEUgAAAAEAAAABCAIAAACQd1PeAAAAAXNSR0IArs4c6QAAAARnQU1BAACxjwv8YQUAAAAJcEhZcwAAEWAAABFgAVshLGQAAAAMSURBVBhXY/j//z8ABf4C/qc1gYQAAAAASUVORK5CYII="),
// 			ImageType:   pulumi.String("png"),
// 		})
// 		if err != nil {
// 			return err
// 		}
// 		return nil
// 	})
// }
// ```
//
// ## Import
//
// System ReplacemsgImage can be imported using any of these accepted formats
//
// ```sh
//  $ pulumi import fortios:index/systemReplacemsgImage:SystemReplacemsgImage labelname {{name}}
// ```
//
//  If you do not want to import arguments of block$ export "FORTIOS_IMPORT_TABLE"="false"
//
// ```sh
//  $ pulumi import fortios:index/systemReplacemsgImage:SystemReplacemsgImage labelname {{name}}
// ```
//
//  $ unset "FORTIOS_IMPORT_TABLE"
type SystemReplacemsgImage struct {
	pulumi.CustomResourceState

	// Image data.
	ImageBase64 pulumi.StringPtrOutput `pulumi:"imageBase64"`
	// Image type. Valid values: `gif`, `jpg`, `tiff`, `png`.
	ImageType pulumi.StringOutput `pulumi:"imageType"`
	// Image name.
	Name pulumi.StringOutput `pulumi:"name"`
	// Specifies the vdom to which the resource will be applied when the FortiGate unit is running in VDOM mode. Only one vdom can be specified. If you want to inherit the vdom configuration of the provider, please do not set this parameter.
	Vdomparam pulumi.StringPtrOutput `pulumi:"vdomparam"`
}

// NewSystemReplacemsgImage registers a new resource with the given unique name, arguments, and options.
func NewSystemReplacemsgImage(ctx *pulumi.Context,
	name string, args *SystemReplacemsgImageArgs, opts ...pulumi.ResourceOption) (*SystemReplacemsgImage, error) {
	if args == nil {
		args = &SystemReplacemsgImageArgs{}
	}

	opts = pkgResourceDefaultOpts(opts)
	var resource SystemReplacemsgImage
	err := ctx.RegisterResource("fortios:index/systemReplacemsgImage:SystemReplacemsgImage", name, args, &resource, opts...)
	if err != nil {
		return nil, err
	}
	return &resource, nil
}

// GetSystemReplacemsgImage gets an existing SystemReplacemsgImage resource's state with the given name, ID, and optional
// state properties that are used to uniquely qualify the lookup (nil if not required).
func GetSystemReplacemsgImage(ctx *pulumi.Context,
	name string, id pulumi.IDInput, state *SystemReplacemsgImageState, opts ...pulumi.ResourceOption) (*SystemReplacemsgImage, error) {
	var resource SystemReplacemsgImage
	err := ctx.ReadResource("fortios:index/systemReplacemsgImage:SystemReplacemsgImage", name, id, state, &resource, opts...)
	if err != nil {
		return nil, err
	}
	return &resource, nil
}

// Input properties used for looking up and filtering SystemReplacemsgImage resources.
type systemReplacemsgImageState struct {
	// Image data.
	ImageBase64 *string `pulumi:"imageBase64"`
	// Image type. Valid values: `gif`, `jpg`, `tiff`, `png`.
	ImageType *string `pulumi:"imageType"`
	// Image name.
	Name *string `pulumi:"name"`
	// Specifies the vdom to which the resource will be applied when the FortiGate unit is running in VDOM mode. Only one vdom can be specified. If you want to inherit the vdom configuration of the provider, please do not set this parameter.
	Vdomparam *string `pulumi:"vdomparam"`
}

type SystemReplacemsgImageState struct {
	// Image data.
	ImageBase64 pulumi.StringPtrInput
	// Image type. Valid values: `gif`, `jpg`, `tiff`, `png`.
	ImageType pulumi.StringPtrInput
	// Image name.
	Name pulumi.StringPtrInput
	// Specifies the vdom to which the resource will be applied when the FortiGate unit is running in VDOM mode. Only one vdom can be specified. If you want to inherit the vdom configuration of the provider, please do not set this parameter.
	Vdomparam pulumi.StringPtrInput
}

func (SystemReplacemsgImageState) ElementType() reflect.Type {
	return reflect.TypeOf((*systemReplacemsgImageState)(nil)).Elem()
}

type systemReplacemsgImageArgs struct {
	// Image data.
	ImageBase64 *string `pulumi:"imageBase64"`
	// Image type. Valid values: `gif`, `jpg`, `tiff`, `png`.
	ImageType *string `pulumi:"imageType"`
	// Image name.
	Name *string `pulumi:"name"`
	// Specifies the vdom to which the resource will be applied when the FortiGate unit is running in VDOM mode. Only one vdom can be specified. If you want to inherit the vdom configuration of the provider, please do not set this parameter.
	Vdomparam *string `pulumi:"vdomparam"`
}

// The set of arguments for constructing a SystemReplacemsgImage resource.
type SystemReplacemsgImageArgs struct {
	// Image data.
	ImageBase64 pulumi.StringPtrInput
	// Image type. Valid values: `gif`, `jpg`, `tiff`, `png`.
	ImageType pulumi.StringPtrInput
	// Image name.
	Name pulumi.StringPtrInput
	// Specifies the vdom to which the resource will be applied when the FortiGate unit is running in VDOM mode. Only one vdom can be specified. If you want to inherit the vdom configuration of the provider, please do not set this parameter.
	Vdomparam pulumi.StringPtrInput
}

func (SystemReplacemsgImageArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*systemReplacemsgImageArgs)(nil)).Elem()
}

type SystemReplacemsgImageInput interface {
	pulumi.Input

	ToSystemReplacemsgImageOutput() SystemReplacemsgImageOutput
	ToSystemReplacemsgImageOutputWithContext(ctx context.Context) SystemReplacemsgImageOutput
}

func (*SystemReplacemsgImage) ElementType() reflect.Type {
	return reflect.TypeOf((**SystemReplacemsgImage)(nil)).Elem()
}

func (i *SystemReplacemsgImage) ToSystemReplacemsgImageOutput() SystemReplacemsgImageOutput {
	return i.ToSystemReplacemsgImageOutputWithContext(context.Background())
}

func (i *SystemReplacemsgImage) ToSystemReplacemsgImageOutputWithContext(ctx context.Context) SystemReplacemsgImageOutput {
	return pulumi.ToOutputWithContext(ctx, i).(SystemReplacemsgImageOutput)
}

// SystemReplacemsgImageArrayInput is an input type that accepts SystemReplacemsgImageArray and SystemReplacemsgImageArrayOutput values.
// You can construct a concrete instance of `SystemReplacemsgImageArrayInput` via:
//
//          SystemReplacemsgImageArray{ SystemReplacemsgImageArgs{...} }
type SystemReplacemsgImageArrayInput interface {
	pulumi.Input

	ToSystemReplacemsgImageArrayOutput() SystemReplacemsgImageArrayOutput
	ToSystemReplacemsgImageArrayOutputWithContext(context.Context) SystemReplacemsgImageArrayOutput
}

type SystemReplacemsgImageArray []SystemReplacemsgImageInput

func (SystemReplacemsgImageArray) ElementType() reflect.Type {
	return reflect.TypeOf((*[]*SystemReplacemsgImage)(nil)).Elem()
}

func (i SystemReplacemsgImageArray) ToSystemReplacemsgImageArrayOutput() SystemReplacemsgImageArrayOutput {
	return i.ToSystemReplacemsgImageArrayOutputWithContext(context.Background())
}

func (i SystemReplacemsgImageArray) ToSystemReplacemsgImageArrayOutputWithContext(ctx context.Context) SystemReplacemsgImageArrayOutput {
	return pulumi.ToOutputWithContext(ctx, i).(SystemReplacemsgImageArrayOutput)
}

// SystemReplacemsgImageMapInput is an input type that accepts SystemReplacemsgImageMap and SystemReplacemsgImageMapOutput values.
// You can construct a concrete instance of `SystemReplacemsgImageMapInput` via:
//
//          SystemReplacemsgImageMap{ "key": SystemReplacemsgImageArgs{...} }
type SystemReplacemsgImageMapInput interface {
	pulumi.Input

	ToSystemReplacemsgImageMapOutput() SystemReplacemsgImageMapOutput
	ToSystemReplacemsgImageMapOutputWithContext(context.Context) SystemReplacemsgImageMapOutput
}

type SystemReplacemsgImageMap map[string]SystemReplacemsgImageInput

func (SystemReplacemsgImageMap) ElementType() reflect.Type {
	return reflect.TypeOf((*map[string]*SystemReplacemsgImage)(nil)).Elem()
}

func (i SystemReplacemsgImageMap) ToSystemReplacemsgImageMapOutput() SystemReplacemsgImageMapOutput {
	return i.ToSystemReplacemsgImageMapOutputWithContext(context.Background())
}

func (i SystemReplacemsgImageMap) ToSystemReplacemsgImageMapOutputWithContext(ctx context.Context) SystemReplacemsgImageMapOutput {
	return pulumi.ToOutputWithContext(ctx, i).(SystemReplacemsgImageMapOutput)
}

type SystemReplacemsgImageOutput struct{ *pulumi.OutputState }

func (SystemReplacemsgImageOutput) ElementType() reflect.Type {
	return reflect.TypeOf((**SystemReplacemsgImage)(nil)).Elem()
}

func (o SystemReplacemsgImageOutput) ToSystemReplacemsgImageOutput() SystemReplacemsgImageOutput {
	return o
}

func (o SystemReplacemsgImageOutput) ToSystemReplacemsgImageOutputWithContext(ctx context.Context) SystemReplacemsgImageOutput {
	return o
}

type SystemReplacemsgImageArrayOutput struct{ *pulumi.OutputState }

func (SystemReplacemsgImageArrayOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*[]*SystemReplacemsgImage)(nil)).Elem()
}

func (o SystemReplacemsgImageArrayOutput) ToSystemReplacemsgImageArrayOutput() SystemReplacemsgImageArrayOutput {
	return o
}

func (o SystemReplacemsgImageArrayOutput) ToSystemReplacemsgImageArrayOutputWithContext(ctx context.Context) SystemReplacemsgImageArrayOutput {
	return o
}

func (o SystemReplacemsgImageArrayOutput) Index(i pulumi.IntInput) SystemReplacemsgImageOutput {
	return pulumi.All(o, i).ApplyT(func(vs []interface{}) *SystemReplacemsgImage {
		return vs[0].([]*SystemReplacemsgImage)[vs[1].(int)]
	}).(SystemReplacemsgImageOutput)
}

type SystemReplacemsgImageMapOutput struct{ *pulumi.OutputState }

func (SystemReplacemsgImageMapOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*map[string]*SystemReplacemsgImage)(nil)).Elem()
}

func (o SystemReplacemsgImageMapOutput) ToSystemReplacemsgImageMapOutput() SystemReplacemsgImageMapOutput {
	return o
}

func (o SystemReplacemsgImageMapOutput) ToSystemReplacemsgImageMapOutputWithContext(ctx context.Context) SystemReplacemsgImageMapOutput {
	return o
}

func (o SystemReplacemsgImageMapOutput) MapIndex(k pulumi.StringInput) SystemReplacemsgImageOutput {
	return pulumi.All(o, k).ApplyT(func(vs []interface{}) *SystemReplacemsgImage {
		return vs[0].(map[string]*SystemReplacemsgImage)[vs[1].(string)]
	}).(SystemReplacemsgImageOutput)
}

func init() {
	pulumi.RegisterInputType(reflect.TypeOf((*SystemReplacemsgImageInput)(nil)).Elem(), &SystemReplacemsgImage{})
	pulumi.RegisterInputType(reflect.TypeOf((*SystemReplacemsgImageArrayInput)(nil)).Elem(), SystemReplacemsgImageArray{})
	pulumi.RegisterInputType(reflect.TypeOf((*SystemReplacemsgImageMapInput)(nil)).Elem(), SystemReplacemsgImageMap{})
	pulumi.RegisterOutputType(SystemReplacemsgImageOutput{})
	pulumi.RegisterOutputType(SystemReplacemsgImageArrayOutput{})
	pulumi.RegisterOutputType(SystemReplacemsgImageMapOutput{})
}
