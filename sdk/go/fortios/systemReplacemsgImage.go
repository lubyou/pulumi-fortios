// Code generated by the Pulumi Terraform Bridge (tfgen) Tool DO NOT EDIT.
// *** WARNING: Do not edit by hand unless you're certain you know what you are doing! ***

package fortios

import (
	"context"
	"reflect"

	"github.com/lubyou/pulumi-fortios/sdk/go/fortios/internal"
	"github.com/pulumi/pulumi/sdk/v3/go/pulumi"
)

type SystemReplacemsgImage struct {
	pulumi.CustomResourceState

	ImageBase64 pulumi.StringPtrOutput `pulumi:"imageBase64"`
	ImageType   pulumi.StringOutput    `pulumi:"imageType"`
	Name        pulumi.StringOutput    `pulumi:"name"`
	Vdomparam   pulumi.StringPtrOutput `pulumi:"vdomparam"`
}

// NewSystemReplacemsgImage registers a new resource with the given unique name, arguments, and options.
func NewSystemReplacemsgImage(ctx *pulumi.Context,
	name string, args *SystemReplacemsgImageArgs, opts ...pulumi.ResourceOption) (*SystemReplacemsgImage, error) {
	if args == nil {
		args = &SystemReplacemsgImageArgs{}
	}

	opts = internal.PkgResourceDefaultOpts(opts)
	var resource SystemReplacemsgImage
	err := ctx.RegisterResource("fortios:index/systemReplacemsgImage:SystemReplacemsgImage", name, args, &resource, opts...)
	if err != nil {
		return nil, err
	}
	return &resource, nil
}

// GetSystemReplacemsgImage gets an existing SystemReplacemsgImage resource's state with the given name, ID, and optional
// state properties that are used to uniquely qualify the lookup (nil if not required).
func GetSystemReplacemsgImage(ctx *pulumi.Context,
	name string, id pulumi.IDInput, state *SystemReplacemsgImageState, opts ...pulumi.ResourceOption) (*SystemReplacemsgImage, error) {
	var resource SystemReplacemsgImage
	err := ctx.ReadResource("fortios:index/systemReplacemsgImage:SystemReplacemsgImage", name, id, state, &resource, opts...)
	if err != nil {
		return nil, err
	}
	return &resource, nil
}

// Input properties used for looking up and filtering SystemReplacemsgImage resources.
type systemReplacemsgImageState struct {
	ImageBase64 *string `pulumi:"imageBase64"`
	ImageType   *string `pulumi:"imageType"`
	Name        *string `pulumi:"name"`
	Vdomparam   *string `pulumi:"vdomparam"`
}

type SystemReplacemsgImageState struct {
	ImageBase64 pulumi.StringPtrInput
	ImageType   pulumi.StringPtrInput
	Name        pulumi.StringPtrInput
	Vdomparam   pulumi.StringPtrInput
}

func (SystemReplacemsgImageState) ElementType() reflect.Type {
	return reflect.TypeOf((*systemReplacemsgImageState)(nil)).Elem()
}

type systemReplacemsgImageArgs struct {
	ImageBase64 *string `pulumi:"imageBase64"`
	ImageType   *string `pulumi:"imageType"`
	Name        *string `pulumi:"name"`
	Vdomparam   *string `pulumi:"vdomparam"`
}

// The set of arguments for constructing a SystemReplacemsgImage resource.
type SystemReplacemsgImageArgs struct {
	ImageBase64 pulumi.StringPtrInput
	ImageType   pulumi.StringPtrInput
	Name        pulumi.StringPtrInput
	Vdomparam   pulumi.StringPtrInput
}

func (SystemReplacemsgImageArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*systemReplacemsgImageArgs)(nil)).Elem()
}

type SystemReplacemsgImageInput interface {
	pulumi.Input

	ToSystemReplacemsgImageOutput() SystemReplacemsgImageOutput
	ToSystemReplacemsgImageOutputWithContext(ctx context.Context) SystemReplacemsgImageOutput
}

func (*SystemReplacemsgImage) ElementType() reflect.Type {
	return reflect.TypeOf((**SystemReplacemsgImage)(nil)).Elem()
}

func (i *SystemReplacemsgImage) ToSystemReplacemsgImageOutput() SystemReplacemsgImageOutput {
	return i.ToSystemReplacemsgImageOutputWithContext(context.Background())
}

func (i *SystemReplacemsgImage) ToSystemReplacemsgImageOutputWithContext(ctx context.Context) SystemReplacemsgImageOutput {
	return pulumi.ToOutputWithContext(ctx, i).(SystemReplacemsgImageOutput)
}

// SystemReplacemsgImageArrayInput is an input type that accepts SystemReplacemsgImageArray and SystemReplacemsgImageArrayOutput values.
// You can construct a concrete instance of `SystemReplacemsgImageArrayInput` via:
//
//	SystemReplacemsgImageArray{ SystemReplacemsgImageArgs{...} }
type SystemReplacemsgImageArrayInput interface {
	pulumi.Input

	ToSystemReplacemsgImageArrayOutput() SystemReplacemsgImageArrayOutput
	ToSystemReplacemsgImageArrayOutputWithContext(context.Context) SystemReplacemsgImageArrayOutput
}

type SystemReplacemsgImageArray []SystemReplacemsgImageInput

func (SystemReplacemsgImageArray) ElementType() reflect.Type {
	return reflect.TypeOf((*[]*SystemReplacemsgImage)(nil)).Elem()
}

func (i SystemReplacemsgImageArray) ToSystemReplacemsgImageArrayOutput() SystemReplacemsgImageArrayOutput {
	return i.ToSystemReplacemsgImageArrayOutputWithContext(context.Background())
}

func (i SystemReplacemsgImageArray) ToSystemReplacemsgImageArrayOutputWithContext(ctx context.Context) SystemReplacemsgImageArrayOutput {
	return pulumi.ToOutputWithContext(ctx, i).(SystemReplacemsgImageArrayOutput)
}

// SystemReplacemsgImageMapInput is an input type that accepts SystemReplacemsgImageMap and SystemReplacemsgImageMapOutput values.
// You can construct a concrete instance of `SystemReplacemsgImageMapInput` via:
//
//	SystemReplacemsgImageMap{ "key": SystemReplacemsgImageArgs{...} }
type SystemReplacemsgImageMapInput interface {
	pulumi.Input

	ToSystemReplacemsgImageMapOutput() SystemReplacemsgImageMapOutput
	ToSystemReplacemsgImageMapOutputWithContext(context.Context) SystemReplacemsgImageMapOutput
}

type SystemReplacemsgImageMap map[string]SystemReplacemsgImageInput

func (SystemReplacemsgImageMap) ElementType() reflect.Type {
	return reflect.TypeOf((*map[string]*SystemReplacemsgImage)(nil)).Elem()
}

func (i SystemReplacemsgImageMap) ToSystemReplacemsgImageMapOutput() SystemReplacemsgImageMapOutput {
	return i.ToSystemReplacemsgImageMapOutputWithContext(context.Background())
}

func (i SystemReplacemsgImageMap) ToSystemReplacemsgImageMapOutputWithContext(ctx context.Context) SystemReplacemsgImageMapOutput {
	return pulumi.ToOutputWithContext(ctx, i).(SystemReplacemsgImageMapOutput)
}

type SystemReplacemsgImageOutput struct{ *pulumi.OutputState }

func (SystemReplacemsgImageOutput) ElementType() reflect.Type {
	return reflect.TypeOf((**SystemReplacemsgImage)(nil)).Elem()
}

func (o SystemReplacemsgImageOutput) ToSystemReplacemsgImageOutput() SystemReplacemsgImageOutput {
	return o
}

func (o SystemReplacemsgImageOutput) ToSystemReplacemsgImageOutputWithContext(ctx context.Context) SystemReplacemsgImageOutput {
	return o
}

func (o SystemReplacemsgImageOutput) ImageBase64() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *SystemReplacemsgImage) pulumi.StringPtrOutput { return v.ImageBase64 }).(pulumi.StringPtrOutput)
}

func (o SystemReplacemsgImageOutput) ImageType() pulumi.StringOutput {
	return o.ApplyT(func(v *SystemReplacemsgImage) pulumi.StringOutput { return v.ImageType }).(pulumi.StringOutput)
}

func (o SystemReplacemsgImageOutput) Name() pulumi.StringOutput {
	return o.ApplyT(func(v *SystemReplacemsgImage) pulumi.StringOutput { return v.Name }).(pulumi.StringOutput)
}

func (o SystemReplacemsgImageOutput) Vdomparam() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *SystemReplacemsgImage) pulumi.StringPtrOutput { return v.Vdomparam }).(pulumi.StringPtrOutput)
}

type SystemReplacemsgImageArrayOutput struct{ *pulumi.OutputState }

func (SystemReplacemsgImageArrayOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*[]*SystemReplacemsgImage)(nil)).Elem()
}

func (o SystemReplacemsgImageArrayOutput) ToSystemReplacemsgImageArrayOutput() SystemReplacemsgImageArrayOutput {
	return o
}

func (o SystemReplacemsgImageArrayOutput) ToSystemReplacemsgImageArrayOutputWithContext(ctx context.Context) SystemReplacemsgImageArrayOutput {
	return o
}

func (o SystemReplacemsgImageArrayOutput) Index(i pulumi.IntInput) SystemReplacemsgImageOutput {
	return pulumi.All(o, i).ApplyT(func(vs []interface{}) *SystemReplacemsgImage {
		return vs[0].([]*SystemReplacemsgImage)[vs[1].(int)]
	}).(SystemReplacemsgImageOutput)
}

type SystemReplacemsgImageMapOutput struct{ *pulumi.OutputState }

func (SystemReplacemsgImageMapOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*map[string]*SystemReplacemsgImage)(nil)).Elem()
}

func (o SystemReplacemsgImageMapOutput) ToSystemReplacemsgImageMapOutput() SystemReplacemsgImageMapOutput {
	return o
}

func (o SystemReplacemsgImageMapOutput) ToSystemReplacemsgImageMapOutputWithContext(ctx context.Context) SystemReplacemsgImageMapOutput {
	return o
}

func (o SystemReplacemsgImageMapOutput) MapIndex(k pulumi.StringInput) SystemReplacemsgImageOutput {
	return pulumi.All(o, k).ApplyT(func(vs []interface{}) *SystemReplacemsgImage {
		return vs[0].(map[string]*SystemReplacemsgImage)[vs[1].(string)]
	}).(SystemReplacemsgImageOutput)
}

func init() {
	pulumi.RegisterInputType(reflect.TypeOf((*SystemReplacemsgImageInput)(nil)).Elem(), &SystemReplacemsgImage{})
	pulumi.RegisterInputType(reflect.TypeOf((*SystemReplacemsgImageArrayInput)(nil)).Elem(), SystemReplacemsgImageArray{})
	pulumi.RegisterInputType(reflect.TypeOf((*SystemReplacemsgImageMapInput)(nil)).Elem(), SystemReplacemsgImageMap{})
	pulumi.RegisterOutputType(SystemReplacemsgImageOutput{})
	pulumi.RegisterOutputType(SystemReplacemsgImageArrayOutput{})
	pulumi.RegisterOutputType(SystemReplacemsgImageMapOutput{})
}
