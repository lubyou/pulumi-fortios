// Code generated by the Pulumi Terraform Bridge (tfgen) Tool DO NOT EDIT.
// *** WARNING: Do not edit by hand unless you're certain you know what you are doing! ***

package fortios

import (
	"context"
	"reflect"

	"github.com/lubyou/pulumi-fortios/sdk/go/fortios/internal"
	"github.com/pulumi/pulumi/sdk/v3/go/pulumi"
)

type WafSignature struct {
	pulumi.CustomResourceState

	Desc      pulumi.StringOutput    `pulumi:"desc"`
	Fosid     pulumi.IntOutput       `pulumi:"fosid"`
	Vdomparam pulumi.StringPtrOutput `pulumi:"vdomparam"`
}

// NewWafSignature registers a new resource with the given unique name, arguments, and options.
func NewWafSignature(ctx *pulumi.Context,
	name string, args *WafSignatureArgs, opts ...pulumi.ResourceOption) (*WafSignature, error) {
	if args == nil {
		args = &WafSignatureArgs{}
	}

	opts = internal.PkgResourceDefaultOpts(opts)
	var resource WafSignature
	err := ctx.RegisterResource("fortios:index/wafSignature:WafSignature", name, args, &resource, opts...)
	if err != nil {
		return nil, err
	}
	return &resource, nil
}

// GetWafSignature gets an existing WafSignature resource's state with the given name, ID, and optional
// state properties that are used to uniquely qualify the lookup (nil if not required).
func GetWafSignature(ctx *pulumi.Context,
	name string, id pulumi.IDInput, state *WafSignatureState, opts ...pulumi.ResourceOption) (*WafSignature, error) {
	var resource WafSignature
	err := ctx.ReadResource("fortios:index/wafSignature:WafSignature", name, id, state, &resource, opts...)
	if err != nil {
		return nil, err
	}
	return &resource, nil
}

// Input properties used for looking up and filtering WafSignature resources.
type wafSignatureState struct {
	Desc      *string `pulumi:"desc"`
	Fosid     *int    `pulumi:"fosid"`
	Vdomparam *string `pulumi:"vdomparam"`
}

type WafSignatureState struct {
	Desc      pulumi.StringPtrInput
	Fosid     pulumi.IntPtrInput
	Vdomparam pulumi.StringPtrInput
}

func (WafSignatureState) ElementType() reflect.Type {
	return reflect.TypeOf((*wafSignatureState)(nil)).Elem()
}

type wafSignatureArgs struct {
	Desc      *string `pulumi:"desc"`
	Fosid     *int    `pulumi:"fosid"`
	Vdomparam *string `pulumi:"vdomparam"`
}

// The set of arguments for constructing a WafSignature resource.
type WafSignatureArgs struct {
	Desc      pulumi.StringPtrInput
	Fosid     pulumi.IntPtrInput
	Vdomparam pulumi.StringPtrInput
}

func (WafSignatureArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*wafSignatureArgs)(nil)).Elem()
}

type WafSignatureInput interface {
	pulumi.Input

	ToWafSignatureOutput() WafSignatureOutput
	ToWafSignatureOutputWithContext(ctx context.Context) WafSignatureOutput
}

func (*WafSignature) ElementType() reflect.Type {
	return reflect.TypeOf((**WafSignature)(nil)).Elem()
}

func (i *WafSignature) ToWafSignatureOutput() WafSignatureOutput {
	return i.ToWafSignatureOutputWithContext(context.Background())
}

func (i *WafSignature) ToWafSignatureOutputWithContext(ctx context.Context) WafSignatureOutput {
	return pulumi.ToOutputWithContext(ctx, i).(WafSignatureOutput)
}

// WafSignatureArrayInput is an input type that accepts WafSignatureArray and WafSignatureArrayOutput values.
// You can construct a concrete instance of `WafSignatureArrayInput` via:
//
//	WafSignatureArray{ WafSignatureArgs{...} }
type WafSignatureArrayInput interface {
	pulumi.Input

	ToWafSignatureArrayOutput() WafSignatureArrayOutput
	ToWafSignatureArrayOutputWithContext(context.Context) WafSignatureArrayOutput
}

type WafSignatureArray []WafSignatureInput

func (WafSignatureArray) ElementType() reflect.Type {
	return reflect.TypeOf((*[]*WafSignature)(nil)).Elem()
}

func (i WafSignatureArray) ToWafSignatureArrayOutput() WafSignatureArrayOutput {
	return i.ToWafSignatureArrayOutputWithContext(context.Background())
}

func (i WafSignatureArray) ToWafSignatureArrayOutputWithContext(ctx context.Context) WafSignatureArrayOutput {
	return pulumi.ToOutputWithContext(ctx, i).(WafSignatureArrayOutput)
}

// WafSignatureMapInput is an input type that accepts WafSignatureMap and WafSignatureMapOutput values.
// You can construct a concrete instance of `WafSignatureMapInput` via:
//
//	WafSignatureMap{ "key": WafSignatureArgs{...} }
type WafSignatureMapInput interface {
	pulumi.Input

	ToWafSignatureMapOutput() WafSignatureMapOutput
	ToWafSignatureMapOutputWithContext(context.Context) WafSignatureMapOutput
}

type WafSignatureMap map[string]WafSignatureInput

func (WafSignatureMap) ElementType() reflect.Type {
	return reflect.TypeOf((*map[string]*WafSignature)(nil)).Elem()
}

func (i WafSignatureMap) ToWafSignatureMapOutput() WafSignatureMapOutput {
	return i.ToWafSignatureMapOutputWithContext(context.Background())
}

func (i WafSignatureMap) ToWafSignatureMapOutputWithContext(ctx context.Context) WafSignatureMapOutput {
	return pulumi.ToOutputWithContext(ctx, i).(WafSignatureMapOutput)
}

type WafSignatureOutput struct{ *pulumi.OutputState }

func (WafSignatureOutput) ElementType() reflect.Type {
	return reflect.TypeOf((**WafSignature)(nil)).Elem()
}

func (o WafSignatureOutput) ToWafSignatureOutput() WafSignatureOutput {
	return o
}

func (o WafSignatureOutput) ToWafSignatureOutputWithContext(ctx context.Context) WafSignatureOutput {
	return o
}

func (o WafSignatureOutput) Desc() pulumi.StringOutput {
	return o.ApplyT(func(v *WafSignature) pulumi.StringOutput { return v.Desc }).(pulumi.StringOutput)
}

func (o WafSignatureOutput) Fosid() pulumi.IntOutput {
	return o.ApplyT(func(v *WafSignature) pulumi.IntOutput { return v.Fosid }).(pulumi.IntOutput)
}

func (o WafSignatureOutput) Vdomparam() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *WafSignature) pulumi.StringPtrOutput { return v.Vdomparam }).(pulumi.StringPtrOutput)
}

type WafSignatureArrayOutput struct{ *pulumi.OutputState }

func (WafSignatureArrayOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*[]*WafSignature)(nil)).Elem()
}

func (o WafSignatureArrayOutput) ToWafSignatureArrayOutput() WafSignatureArrayOutput {
	return o
}

func (o WafSignatureArrayOutput) ToWafSignatureArrayOutputWithContext(ctx context.Context) WafSignatureArrayOutput {
	return o
}

func (o WafSignatureArrayOutput) Index(i pulumi.IntInput) WafSignatureOutput {
	return pulumi.All(o, i).ApplyT(func(vs []interface{}) *WafSignature {
		return vs[0].([]*WafSignature)[vs[1].(int)]
	}).(WafSignatureOutput)
}

type WafSignatureMapOutput struct{ *pulumi.OutputState }

func (WafSignatureMapOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*map[string]*WafSignature)(nil)).Elem()
}

func (o WafSignatureMapOutput) ToWafSignatureMapOutput() WafSignatureMapOutput {
	return o
}

func (o WafSignatureMapOutput) ToWafSignatureMapOutputWithContext(ctx context.Context) WafSignatureMapOutput {
	return o
}

func (o WafSignatureMapOutput) MapIndex(k pulumi.StringInput) WafSignatureOutput {
	return pulumi.All(o, k).ApplyT(func(vs []interface{}) *WafSignature {
		return vs[0].(map[string]*WafSignature)[vs[1].(string)]
	}).(WafSignatureOutput)
}

func init() {
	pulumi.RegisterInputType(reflect.TypeOf((*WafSignatureInput)(nil)).Elem(), &WafSignature{})
	pulumi.RegisterInputType(reflect.TypeOf((*WafSignatureArrayInput)(nil)).Elem(), WafSignatureArray{})
	pulumi.RegisterInputType(reflect.TypeOf((*WafSignatureMapInput)(nil)).Elem(), WafSignatureMap{})
	pulumi.RegisterOutputType(WafSignatureOutput{})
	pulumi.RegisterOutputType(WafSignatureArrayOutput{})
	pulumi.RegisterOutputType(WafSignatureMapOutput{})
}
