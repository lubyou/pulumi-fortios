// *** WARNING: this file was generated by the Pulumi Terraform Bridge (tfgen) Tool. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

package fortios

import (
	"context"
	"reflect"

	"github.com/pulumi/pulumi/sdk/v3/go/pulumi"
)

// Hidden table for datasource.
//
// ## Import
//
// Waf Signature can be imported using any of these accepted formats$ export "FORTIOS_IMPORT_TABLE"="true"
//
// ```sh
//  $ pulumi import fortios:index/wafSignature:WafSignature labelname {{fosid}}
// ```
//
//  $ unset "FORTIOS_IMPORT_TABLE"
type WafSignature struct {
	pulumi.CustomResourceState

	// Signature description.
	Desc pulumi.StringOutput `pulumi:"desc"`
	// Signature ID.
	Fosid pulumi.IntOutput `pulumi:"fosid"`
	// Specifies the vdom to which the resource will be applied when the FortiGate unit is running in VDOM mode. Only one vdom can be specified. If you want to inherit the vdom configuration of the provider, please do not set this parameter.
	Vdomparam pulumi.StringPtrOutput `pulumi:"vdomparam"`
}

// NewWafSignature registers a new resource with the given unique name, arguments, and options.
func NewWafSignature(ctx *pulumi.Context,
	name string, args *WafSignatureArgs, opts ...pulumi.ResourceOption) (*WafSignature, error) {
	if args == nil {
		args = &WafSignatureArgs{}
	}

	var resource WafSignature
	err := ctx.RegisterResource("fortios:index/wafSignature:WafSignature", name, args, &resource, opts...)
	if err != nil {
		return nil, err
	}
	return &resource, nil
}

// GetWafSignature gets an existing WafSignature resource's state with the given name, ID, and optional
// state properties that are used to uniquely qualify the lookup (nil if not required).
func GetWafSignature(ctx *pulumi.Context,
	name string, id pulumi.IDInput, state *WafSignatureState, opts ...pulumi.ResourceOption) (*WafSignature, error) {
	var resource WafSignature
	err := ctx.ReadResource("fortios:index/wafSignature:WafSignature", name, id, state, &resource, opts...)
	if err != nil {
		return nil, err
	}
	return &resource, nil
}

// Input properties used for looking up and filtering WafSignature resources.
type wafSignatureState struct {
	// Signature description.
	Desc *string `pulumi:"desc"`
	// Signature ID.
	Fosid *int `pulumi:"fosid"`
	// Specifies the vdom to which the resource will be applied when the FortiGate unit is running in VDOM mode. Only one vdom can be specified. If you want to inherit the vdom configuration of the provider, please do not set this parameter.
	Vdomparam *string `pulumi:"vdomparam"`
}

type WafSignatureState struct {
	// Signature description.
	Desc pulumi.StringPtrInput
	// Signature ID.
	Fosid pulumi.IntPtrInput
	// Specifies the vdom to which the resource will be applied when the FortiGate unit is running in VDOM mode. Only one vdom can be specified. If you want to inherit the vdom configuration of the provider, please do not set this parameter.
	Vdomparam pulumi.StringPtrInput
}

func (WafSignatureState) ElementType() reflect.Type {
	return reflect.TypeOf((*wafSignatureState)(nil)).Elem()
}

type wafSignatureArgs struct {
	// Signature description.
	Desc *string `pulumi:"desc"`
	// Signature ID.
	Fosid *int `pulumi:"fosid"`
	// Specifies the vdom to which the resource will be applied when the FortiGate unit is running in VDOM mode. Only one vdom can be specified. If you want to inherit the vdom configuration of the provider, please do not set this parameter.
	Vdomparam *string `pulumi:"vdomparam"`
}

// The set of arguments for constructing a WafSignature resource.
type WafSignatureArgs struct {
	// Signature description.
	Desc pulumi.StringPtrInput
	// Signature ID.
	Fosid pulumi.IntPtrInput
	// Specifies the vdom to which the resource will be applied when the FortiGate unit is running in VDOM mode. Only one vdom can be specified. If you want to inherit the vdom configuration of the provider, please do not set this parameter.
	Vdomparam pulumi.StringPtrInput
}

func (WafSignatureArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*wafSignatureArgs)(nil)).Elem()
}

type WafSignatureInput interface {
	pulumi.Input

	ToWafSignatureOutput() WafSignatureOutput
	ToWafSignatureOutputWithContext(ctx context.Context) WafSignatureOutput
}

func (*WafSignature) ElementType() reflect.Type {
	return reflect.TypeOf((*WafSignature)(nil))
}

func (i *WafSignature) ToWafSignatureOutput() WafSignatureOutput {
	return i.ToWafSignatureOutputWithContext(context.Background())
}

func (i *WafSignature) ToWafSignatureOutputWithContext(ctx context.Context) WafSignatureOutput {
	return pulumi.ToOutputWithContext(ctx, i).(WafSignatureOutput)
}

func (i *WafSignature) ToWafSignaturePtrOutput() WafSignaturePtrOutput {
	return i.ToWafSignaturePtrOutputWithContext(context.Background())
}

func (i *WafSignature) ToWafSignaturePtrOutputWithContext(ctx context.Context) WafSignaturePtrOutput {
	return pulumi.ToOutputWithContext(ctx, i).(WafSignaturePtrOutput)
}

type WafSignaturePtrInput interface {
	pulumi.Input

	ToWafSignaturePtrOutput() WafSignaturePtrOutput
	ToWafSignaturePtrOutputWithContext(ctx context.Context) WafSignaturePtrOutput
}

type wafSignaturePtrType WafSignatureArgs

func (*wafSignaturePtrType) ElementType() reflect.Type {
	return reflect.TypeOf((**WafSignature)(nil))
}

func (i *wafSignaturePtrType) ToWafSignaturePtrOutput() WafSignaturePtrOutput {
	return i.ToWafSignaturePtrOutputWithContext(context.Background())
}

func (i *wafSignaturePtrType) ToWafSignaturePtrOutputWithContext(ctx context.Context) WafSignaturePtrOutput {
	return pulumi.ToOutputWithContext(ctx, i).(WafSignaturePtrOutput)
}

// WafSignatureArrayInput is an input type that accepts WafSignatureArray and WafSignatureArrayOutput values.
// You can construct a concrete instance of `WafSignatureArrayInput` via:
//
//          WafSignatureArray{ WafSignatureArgs{...} }
type WafSignatureArrayInput interface {
	pulumi.Input

	ToWafSignatureArrayOutput() WafSignatureArrayOutput
	ToWafSignatureArrayOutputWithContext(context.Context) WafSignatureArrayOutput
}

type WafSignatureArray []WafSignatureInput

func (WafSignatureArray) ElementType() reflect.Type {
	return reflect.TypeOf(([]*WafSignature)(nil))
}

func (i WafSignatureArray) ToWafSignatureArrayOutput() WafSignatureArrayOutput {
	return i.ToWafSignatureArrayOutputWithContext(context.Background())
}

func (i WafSignatureArray) ToWafSignatureArrayOutputWithContext(ctx context.Context) WafSignatureArrayOutput {
	return pulumi.ToOutputWithContext(ctx, i).(WafSignatureArrayOutput)
}

// WafSignatureMapInput is an input type that accepts WafSignatureMap and WafSignatureMapOutput values.
// You can construct a concrete instance of `WafSignatureMapInput` via:
//
//          WafSignatureMap{ "key": WafSignatureArgs{...} }
type WafSignatureMapInput interface {
	pulumi.Input

	ToWafSignatureMapOutput() WafSignatureMapOutput
	ToWafSignatureMapOutputWithContext(context.Context) WafSignatureMapOutput
}

type WafSignatureMap map[string]WafSignatureInput

func (WafSignatureMap) ElementType() reflect.Type {
	return reflect.TypeOf((map[string]*WafSignature)(nil))
}

func (i WafSignatureMap) ToWafSignatureMapOutput() WafSignatureMapOutput {
	return i.ToWafSignatureMapOutputWithContext(context.Background())
}

func (i WafSignatureMap) ToWafSignatureMapOutputWithContext(ctx context.Context) WafSignatureMapOutput {
	return pulumi.ToOutputWithContext(ctx, i).(WafSignatureMapOutput)
}

type WafSignatureOutput struct {
	*pulumi.OutputState
}

func (WafSignatureOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*WafSignature)(nil))
}

func (o WafSignatureOutput) ToWafSignatureOutput() WafSignatureOutput {
	return o
}

func (o WafSignatureOutput) ToWafSignatureOutputWithContext(ctx context.Context) WafSignatureOutput {
	return o
}

func (o WafSignatureOutput) ToWafSignaturePtrOutput() WafSignaturePtrOutput {
	return o.ToWafSignaturePtrOutputWithContext(context.Background())
}

func (o WafSignatureOutput) ToWafSignaturePtrOutputWithContext(ctx context.Context) WafSignaturePtrOutput {
	return o.ApplyT(func(v WafSignature) *WafSignature {
		return &v
	}).(WafSignaturePtrOutput)
}

type WafSignaturePtrOutput struct {
	*pulumi.OutputState
}

func (WafSignaturePtrOutput) ElementType() reflect.Type {
	return reflect.TypeOf((**WafSignature)(nil))
}

func (o WafSignaturePtrOutput) ToWafSignaturePtrOutput() WafSignaturePtrOutput {
	return o
}

func (o WafSignaturePtrOutput) ToWafSignaturePtrOutputWithContext(ctx context.Context) WafSignaturePtrOutput {
	return o
}

type WafSignatureArrayOutput struct{ *pulumi.OutputState }

func (WafSignatureArrayOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*[]WafSignature)(nil))
}

func (o WafSignatureArrayOutput) ToWafSignatureArrayOutput() WafSignatureArrayOutput {
	return o
}

func (o WafSignatureArrayOutput) ToWafSignatureArrayOutputWithContext(ctx context.Context) WafSignatureArrayOutput {
	return o
}

func (o WafSignatureArrayOutput) Index(i pulumi.IntInput) WafSignatureOutput {
	return pulumi.All(o, i).ApplyT(func(vs []interface{}) WafSignature {
		return vs[0].([]WafSignature)[vs[1].(int)]
	}).(WafSignatureOutput)
}

type WafSignatureMapOutput struct{ *pulumi.OutputState }

func (WafSignatureMapOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*map[string]WafSignature)(nil))
}

func (o WafSignatureMapOutput) ToWafSignatureMapOutput() WafSignatureMapOutput {
	return o
}

func (o WafSignatureMapOutput) ToWafSignatureMapOutputWithContext(ctx context.Context) WafSignatureMapOutput {
	return o
}

func (o WafSignatureMapOutput) MapIndex(k pulumi.StringInput) WafSignatureOutput {
	return pulumi.All(o, k).ApplyT(func(vs []interface{}) WafSignature {
		return vs[0].(map[string]WafSignature)[vs[1].(string)]
	}).(WafSignatureOutput)
}

func init() {
	pulumi.RegisterOutputType(WafSignatureOutput{})
	pulumi.RegisterOutputType(WafSignaturePtrOutput{})
	pulumi.RegisterOutputType(WafSignatureArrayOutput{})
	pulumi.RegisterOutputType(WafSignatureMapOutput{})
}
