// Code generated by the Pulumi Terraform Bridge (tfgen) Tool DO NOT EDIT.
// *** WARNING: Do not edit by hand unless you're certain you know what you are doing! ***

package fortios

import (
	"context"
	"reflect"

	"errors"
	"github.com/lubyou/pulumi-fortios/sdk/go/fortios/internal"
	"github.com/pulumi/pulumi/sdk/v3/go/pulumi"
	"github.com/pulumi/pulumi/sdk/v3/go/pulumix"
)

type SystemArpTable struct {
	pulumi.CustomResourceState

	Fosid     pulumi.IntOutput       `pulumi:"fosid"`
	Interface pulumi.StringOutput    `pulumi:"interface"`
	Ip        pulumi.StringOutput    `pulumi:"ip"`
	Mac       pulumi.StringOutput    `pulumi:"mac"`
	Vdomparam pulumi.StringPtrOutput `pulumi:"vdomparam"`
}

// NewSystemArpTable registers a new resource with the given unique name, arguments, and options.
func NewSystemArpTable(ctx *pulumi.Context,
	name string, args *SystemArpTableArgs, opts ...pulumi.ResourceOption) (*SystemArpTable, error) {
	if args == nil {
		return nil, errors.New("missing one or more required arguments")
	}

	if args.Fosid == nil {
		return nil, errors.New("invalid value for required argument 'Fosid'")
	}
	if args.Interface == nil {
		return nil, errors.New("invalid value for required argument 'Interface'")
	}
	if args.Ip == nil {
		return nil, errors.New("invalid value for required argument 'Ip'")
	}
	if args.Mac == nil {
		return nil, errors.New("invalid value for required argument 'Mac'")
	}
	opts = internal.PkgResourceDefaultOpts(opts)
	var resource SystemArpTable
	err := ctx.RegisterResource("fortios:index/systemArpTable:SystemArpTable", name, args, &resource, opts...)
	if err != nil {
		return nil, err
	}
	return &resource, nil
}

// GetSystemArpTable gets an existing SystemArpTable resource's state with the given name, ID, and optional
// state properties that are used to uniquely qualify the lookup (nil if not required).
func GetSystemArpTable(ctx *pulumi.Context,
	name string, id pulumi.IDInput, state *SystemArpTableState, opts ...pulumi.ResourceOption) (*SystemArpTable, error) {
	var resource SystemArpTable
	err := ctx.ReadResource("fortios:index/systemArpTable:SystemArpTable", name, id, state, &resource, opts...)
	if err != nil {
		return nil, err
	}
	return &resource, nil
}

// Input properties used for looking up and filtering SystemArpTable resources.
type systemArpTableState struct {
	Fosid     *int    `pulumi:"fosid"`
	Interface *string `pulumi:"interface"`
	Ip        *string `pulumi:"ip"`
	Mac       *string `pulumi:"mac"`
	Vdomparam *string `pulumi:"vdomparam"`
}

type SystemArpTableState struct {
	Fosid     pulumi.IntPtrInput
	Interface pulumi.StringPtrInput
	Ip        pulumi.StringPtrInput
	Mac       pulumi.StringPtrInput
	Vdomparam pulumi.StringPtrInput
}

func (SystemArpTableState) ElementType() reflect.Type {
	return reflect.TypeOf((*systemArpTableState)(nil)).Elem()
}

type systemArpTableArgs struct {
	Fosid     int     `pulumi:"fosid"`
	Interface string  `pulumi:"interface"`
	Ip        string  `pulumi:"ip"`
	Mac       string  `pulumi:"mac"`
	Vdomparam *string `pulumi:"vdomparam"`
}

// The set of arguments for constructing a SystemArpTable resource.
type SystemArpTableArgs struct {
	Fosid     pulumi.IntInput
	Interface pulumi.StringInput
	Ip        pulumi.StringInput
	Mac       pulumi.StringInput
	Vdomparam pulumi.StringPtrInput
}

func (SystemArpTableArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*systemArpTableArgs)(nil)).Elem()
}

type SystemArpTableInput interface {
	pulumi.Input

	ToSystemArpTableOutput() SystemArpTableOutput
	ToSystemArpTableOutputWithContext(ctx context.Context) SystemArpTableOutput
}

func (*SystemArpTable) ElementType() reflect.Type {
	return reflect.TypeOf((**SystemArpTable)(nil)).Elem()
}

func (i *SystemArpTable) ToSystemArpTableOutput() SystemArpTableOutput {
	return i.ToSystemArpTableOutputWithContext(context.Background())
}

func (i *SystemArpTable) ToSystemArpTableOutputWithContext(ctx context.Context) SystemArpTableOutput {
	return pulumi.ToOutputWithContext(ctx, i).(SystemArpTableOutput)
}

func (i *SystemArpTable) ToOutput(ctx context.Context) pulumix.Output[*SystemArpTable] {
	return pulumix.Output[*SystemArpTable]{
		OutputState: i.ToSystemArpTableOutputWithContext(ctx).OutputState,
	}
}

// SystemArpTableArrayInput is an input type that accepts SystemArpTableArray and SystemArpTableArrayOutput values.
// You can construct a concrete instance of `SystemArpTableArrayInput` via:
//
//	SystemArpTableArray{ SystemArpTableArgs{...} }
type SystemArpTableArrayInput interface {
	pulumi.Input

	ToSystemArpTableArrayOutput() SystemArpTableArrayOutput
	ToSystemArpTableArrayOutputWithContext(context.Context) SystemArpTableArrayOutput
}

type SystemArpTableArray []SystemArpTableInput

func (SystemArpTableArray) ElementType() reflect.Type {
	return reflect.TypeOf((*[]*SystemArpTable)(nil)).Elem()
}

func (i SystemArpTableArray) ToSystemArpTableArrayOutput() SystemArpTableArrayOutput {
	return i.ToSystemArpTableArrayOutputWithContext(context.Background())
}

func (i SystemArpTableArray) ToSystemArpTableArrayOutputWithContext(ctx context.Context) SystemArpTableArrayOutput {
	return pulumi.ToOutputWithContext(ctx, i).(SystemArpTableArrayOutput)
}

func (i SystemArpTableArray) ToOutput(ctx context.Context) pulumix.Output[[]*SystemArpTable] {
	return pulumix.Output[[]*SystemArpTable]{
		OutputState: i.ToSystemArpTableArrayOutputWithContext(ctx).OutputState,
	}
}

// SystemArpTableMapInput is an input type that accepts SystemArpTableMap and SystemArpTableMapOutput values.
// You can construct a concrete instance of `SystemArpTableMapInput` via:
//
//	SystemArpTableMap{ "key": SystemArpTableArgs{...} }
type SystemArpTableMapInput interface {
	pulumi.Input

	ToSystemArpTableMapOutput() SystemArpTableMapOutput
	ToSystemArpTableMapOutputWithContext(context.Context) SystemArpTableMapOutput
}

type SystemArpTableMap map[string]SystemArpTableInput

func (SystemArpTableMap) ElementType() reflect.Type {
	return reflect.TypeOf((*map[string]*SystemArpTable)(nil)).Elem()
}

func (i SystemArpTableMap) ToSystemArpTableMapOutput() SystemArpTableMapOutput {
	return i.ToSystemArpTableMapOutputWithContext(context.Background())
}

func (i SystemArpTableMap) ToSystemArpTableMapOutputWithContext(ctx context.Context) SystemArpTableMapOutput {
	return pulumi.ToOutputWithContext(ctx, i).(SystemArpTableMapOutput)
}

func (i SystemArpTableMap) ToOutput(ctx context.Context) pulumix.Output[map[string]*SystemArpTable] {
	return pulumix.Output[map[string]*SystemArpTable]{
		OutputState: i.ToSystemArpTableMapOutputWithContext(ctx).OutputState,
	}
}

type SystemArpTableOutput struct{ *pulumi.OutputState }

func (SystemArpTableOutput) ElementType() reflect.Type {
	return reflect.TypeOf((**SystemArpTable)(nil)).Elem()
}

func (o SystemArpTableOutput) ToSystemArpTableOutput() SystemArpTableOutput {
	return o
}

func (o SystemArpTableOutput) ToSystemArpTableOutputWithContext(ctx context.Context) SystemArpTableOutput {
	return o
}

func (o SystemArpTableOutput) ToOutput(ctx context.Context) pulumix.Output[*SystemArpTable] {
	return pulumix.Output[*SystemArpTable]{
		OutputState: o.OutputState,
	}
}

func (o SystemArpTableOutput) Fosid() pulumi.IntOutput {
	return o.ApplyT(func(v *SystemArpTable) pulumi.IntOutput { return v.Fosid }).(pulumi.IntOutput)
}

func (o SystemArpTableOutput) Interface() pulumi.StringOutput {
	return o.ApplyT(func(v *SystemArpTable) pulumi.StringOutput { return v.Interface }).(pulumi.StringOutput)
}

func (o SystemArpTableOutput) Ip() pulumi.StringOutput {
	return o.ApplyT(func(v *SystemArpTable) pulumi.StringOutput { return v.Ip }).(pulumi.StringOutput)
}

func (o SystemArpTableOutput) Mac() pulumi.StringOutput {
	return o.ApplyT(func(v *SystemArpTable) pulumi.StringOutput { return v.Mac }).(pulumi.StringOutput)
}

func (o SystemArpTableOutput) Vdomparam() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *SystemArpTable) pulumi.StringPtrOutput { return v.Vdomparam }).(pulumi.StringPtrOutput)
}

type SystemArpTableArrayOutput struct{ *pulumi.OutputState }

func (SystemArpTableArrayOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*[]*SystemArpTable)(nil)).Elem()
}

func (o SystemArpTableArrayOutput) ToSystemArpTableArrayOutput() SystemArpTableArrayOutput {
	return o
}

func (o SystemArpTableArrayOutput) ToSystemArpTableArrayOutputWithContext(ctx context.Context) SystemArpTableArrayOutput {
	return o
}

func (o SystemArpTableArrayOutput) ToOutput(ctx context.Context) pulumix.Output[[]*SystemArpTable] {
	return pulumix.Output[[]*SystemArpTable]{
		OutputState: o.OutputState,
	}
}

func (o SystemArpTableArrayOutput) Index(i pulumi.IntInput) SystemArpTableOutput {
	return pulumi.All(o, i).ApplyT(func(vs []interface{}) *SystemArpTable {
		return vs[0].([]*SystemArpTable)[vs[1].(int)]
	}).(SystemArpTableOutput)
}

type SystemArpTableMapOutput struct{ *pulumi.OutputState }

func (SystemArpTableMapOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*map[string]*SystemArpTable)(nil)).Elem()
}

func (o SystemArpTableMapOutput) ToSystemArpTableMapOutput() SystemArpTableMapOutput {
	return o
}

func (o SystemArpTableMapOutput) ToSystemArpTableMapOutputWithContext(ctx context.Context) SystemArpTableMapOutput {
	return o
}

func (o SystemArpTableMapOutput) ToOutput(ctx context.Context) pulumix.Output[map[string]*SystemArpTable] {
	return pulumix.Output[map[string]*SystemArpTable]{
		OutputState: o.OutputState,
	}
}

func (o SystemArpTableMapOutput) MapIndex(k pulumi.StringInput) SystemArpTableOutput {
	return pulumi.All(o, k).ApplyT(func(vs []interface{}) *SystemArpTable {
		return vs[0].(map[string]*SystemArpTable)[vs[1].(string)]
	}).(SystemArpTableOutput)
}

func init() {
	pulumi.RegisterInputType(reflect.TypeOf((*SystemArpTableInput)(nil)).Elem(), &SystemArpTable{})
	pulumi.RegisterInputType(reflect.TypeOf((*SystemArpTableArrayInput)(nil)).Elem(), SystemArpTableArray{})
	pulumi.RegisterInputType(reflect.TypeOf((*SystemArpTableMapInput)(nil)).Elem(), SystemArpTableMap{})
	pulumi.RegisterOutputType(SystemArpTableOutput{})
	pulumi.RegisterOutputType(SystemArpTableArrayOutput{})
	pulumi.RegisterOutputType(SystemArpTableMapOutput{})
}
