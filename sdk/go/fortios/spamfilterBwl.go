// Code generated by the Pulumi Terraform Bridge (tfgen) Tool DO NOT EDIT.
// *** WARNING: Do not edit by hand unless you're certain you know what you are doing! ***

package fortios

import (
	"context"
	"reflect"

	"errors"
	"github.com/lubyou/pulumi-fortios/sdk/go/fortios/internal"
	"github.com/pulumi/pulumi/sdk/v3/go/pulumi"
	"github.com/pulumi/pulumi/sdk/v3/go/pulumix"
)

type SpamfilterBwl struct {
	pulumi.CustomResourceState

	Comment             pulumi.StringPtrOutput        `pulumi:"comment"`
	DynamicSortSubtable pulumi.StringPtrOutput        `pulumi:"dynamicSortSubtable"`
	Entries             SpamfilterBwlEntryArrayOutput `pulumi:"entries"`
	Fosid               pulumi.IntOutput              `pulumi:"fosid"`
	GetAllTables        pulumi.StringPtrOutput        `pulumi:"getAllTables"`
	Name                pulumi.StringOutput           `pulumi:"name"`
	Vdomparam           pulumi.StringPtrOutput        `pulumi:"vdomparam"`
}

// NewSpamfilterBwl registers a new resource with the given unique name, arguments, and options.
func NewSpamfilterBwl(ctx *pulumi.Context,
	name string, args *SpamfilterBwlArgs, opts ...pulumi.ResourceOption) (*SpamfilterBwl, error) {
	if args == nil {
		return nil, errors.New("missing one or more required arguments")
	}

	if args.Fosid == nil {
		return nil, errors.New("invalid value for required argument 'Fosid'")
	}
	opts = internal.PkgResourceDefaultOpts(opts)
	var resource SpamfilterBwl
	err := ctx.RegisterResource("fortios:index/spamfilterBwl:SpamfilterBwl", name, args, &resource, opts...)
	if err != nil {
		return nil, err
	}
	return &resource, nil
}

// GetSpamfilterBwl gets an existing SpamfilterBwl resource's state with the given name, ID, and optional
// state properties that are used to uniquely qualify the lookup (nil if not required).
func GetSpamfilterBwl(ctx *pulumi.Context,
	name string, id pulumi.IDInput, state *SpamfilterBwlState, opts ...pulumi.ResourceOption) (*SpamfilterBwl, error) {
	var resource SpamfilterBwl
	err := ctx.ReadResource("fortios:index/spamfilterBwl:SpamfilterBwl", name, id, state, &resource, opts...)
	if err != nil {
		return nil, err
	}
	return &resource, nil
}

// Input properties used for looking up and filtering SpamfilterBwl resources.
type spamfilterBwlState struct {
	Comment             *string              `pulumi:"comment"`
	DynamicSortSubtable *string              `pulumi:"dynamicSortSubtable"`
	Entries             []SpamfilterBwlEntry `pulumi:"entries"`
	Fosid               *int                 `pulumi:"fosid"`
	GetAllTables        *string              `pulumi:"getAllTables"`
	Name                *string              `pulumi:"name"`
	Vdomparam           *string              `pulumi:"vdomparam"`
}

type SpamfilterBwlState struct {
	Comment             pulumi.StringPtrInput
	DynamicSortSubtable pulumi.StringPtrInput
	Entries             SpamfilterBwlEntryArrayInput
	Fosid               pulumi.IntPtrInput
	GetAllTables        pulumi.StringPtrInput
	Name                pulumi.StringPtrInput
	Vdomparam           pulumi.StringPtrInput
}

func (SpamfilterBwlState) ElementType() reflect.Type {
	return reflect.TypeOf((*spamfilterBwlState)(nil)).Elem()
}

type spamfilterBwlArgs struct {
	Comment             *string              `pulumi:"comment"`
	DynamicSortSubtable *string              `pulumi:"dynamicSortSubtable"`
	Entries             []SpamfilterBwlEntry `pulumi:"entries"`
	Fosid               int                  `pulumi:"fosid"`
	GetAllTables        *string              `pulumi:"getAllTables"`
	Name                *string              `pulumi:"name"`
	Vdomparam           *string              `pulumi:"vdomparam"`
}

// The set of arguments for constructing a SpamfilterBwl resource.
type SpamfilterBwlArgs struct {
	Comment             pulumi.StringPtrInput
	DynamicSortSubtable pulumi.StringPtrInput
	Entries             SpamfilterBwlEntryArrayInput
	Fosid               pulumi.IntInput
	GetAllTables        pulumi.StringPtrInput
	Name                pulumi.StringPtrInput
	Vdomparam           pulumi.StringPtrInput
}

func (SpamfilterBwlArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*spamfilterBwlArgs)(nil)).Elem()
}

type SpamfilterBwlInput interface {
	pulumi.Input

	ToSpamfilterBwlOutput() SpamfilterBwlOutput
	ToSpamfilterBwlOutputWithContext(ctx context.Context) SpamfilterBwlOutput
}

func (*SpamfilterBwl) ElementType() reflect.Type {
	return reflect.TypeOf((**SpamfilterBwl)(nil)).Elem()
}

func (i *SpamfilterBwl) ToSpamfilterBwlOutput() SpamfilterBwlOutput {
	return i.ToSpamfilterBwlOutputWithContext(context.Background())
}

func (i *SpamfilterBwl) ToSpamfilterBwlOutputWithContext(ctx context.Context) SpamfilterBwlOutput {
	return pulumi.ToOutputWithContext(ctx, i).(SpamfilterBwlOutput)
}

func (i *SpamfilterBwl) ToOutput(ctx context.Context) pulumix.Output[*SpamfilterBwl] {
	return pulumix.Output[*SpamfilterBwl]{
		OutputState: i.ToSpamfilterBwlOutputWithContext(ctx).OutputState,
	}
}

// SpamfilterBwlArrayInput is an input type that accepts SpamfilterBwlArray and SpamfilterBwlArrayOutput values.
// You can construct a concrete instance of `SpamfilterBwlArrayInput` via:
//
//	SpamfilterBwlArray{ SpamfilterBwlArgs{...} }
type SpamfilterBwlArrayInput interface {
	pulumi.Input

	ToSpamfilterBwlArrayOutput() SpamfilterBwlArrayOutput
	ToSpamfilterBwlArrayOutputWithContext(context.Context) SpamfilterBwlArrayOutput
}

type SpamfilterBwlArray []SpamfilterBwlInput

func (SpamfilterBwlArray) ElementType() reflect.Type {
	return reflect.TypeOf((*[]*SpamfilterBwl)(nil)).Elem()
}

func (i SpamfilterBwlArray) ToSpamfilterBwlArrayOutput() SpamfilterBwlArrayOutput {
	return i.ToSpamfilterBwlArrayOutputWithContext(context.Background())
}

func (i SpamfilterBwlArray) ToSpamfilterBwlArrayOutputWithContext(ctx context.Context) SpamfilterBwlArrayOutput {
	return pulumi.ToOutputWithContext(ctx, i).(SpamfilterBwlArrayOutput)
}

func (i SpamfilterBwlArray) ToOutput(ctx context.Context) pulumix.Output[[]*SpamfilterBwl] {
	return pulumix.Output[[]*SpamfilterBwl]{
		OutputState: i.ToSpamfilterBwlArrayOutputWithContext(ctx).OutputState,
	}
}

// SpamfilterBwlMapInput is an input type that accepts SpamfilterBwlMap and SpamfilterBwlMapOutput values.
// You can construct a concrete instance of `SpamfilterBwlMapInput` via:
//
//	SpamfilterBwlMap{ "key": SpamfilterBwlArgs{...} }
type SpamfilterBwlMapInput interface {
	pulumi.Input

	ToSpamfilterBwlMapOutput() SpamfilterBwlMapOutput
	ToSpamfilterBwlMapOutputWithContext(context.Context) SpamfilterBwlMapOutput
}

type SpamfilterBwlMap map[string]SpamfilterBwlInput

func (SpamfilterBwlMap) ElementType() reflect.Type {
	return reflect.TypeOf((*map[string]*SpamfilterBwl)(nil)).Elem()
}

func (i SpamfilterBwlMap) ToSpamfilterBwlMapOutput() SpamfilterBwlMapOutput {
	return i.ToSpamfilterBwlMapOutputWithContext(context.Background())
}

func (i SpamfilterBwlMap) ToSpamfilterBwlMapOutputWithContext(ctx context.Context) SpamfilterBwlMapOutput {
	return pulumi.ToOutputWithContext(ctx, i).(SpamfilterBwlMapOutput)
}

func (i SpamfilterBwlMap) ToOutput(ctx context.Context) pulumix.Output[map[string]*SpamfilterBwl] {
	return pulumix.Output[map[string]*SpamfilterBwl]{
		OutputState: i.ToSpamfilterBwlMapOutputWithContext(ctx).OutputState,
	}
}

type SpamfilterBwlOutput struct{ *pulumi.OutputState }

func (SpamfilterBwlOutput) ElementType() reflect.Type {
	return reflect.TypeOf((**SpamfilterBwl)(nil)).Elem()
}

func (o SpamfilterBwlOutput) ToSpamfilterBwlOutput() SpamfilterBwlOutput {
	return o
}

func (o SpamfilterBwlOutput) ToSpamfilterBwlOutputWithContext(ctx context.Context) SpamfilterBwlOutput {
	return o
}

func (o SpamfilterBwlOutput) ToOutput(ctx context.Context) pulumix.Output[*SpamfilterBwl] {
	return pulumix.Output[*SpamfilterBwl]{
		OutputState: o.OutputState,
	}
}

func (o SpamfilterBwlOutput) Comment() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *SpamfilterBwl) pulumi.StringPtrOutput { return v.Comment }).(pulumi.StringPtrOutput)
}

func (o SpamfilterBwlOutput) DynamicSortSubtable() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *SpamfilterBwl) pulumi.StringPtrOutput { return v.DynamicSortSubtable }).(pulumi.StringPtrOutput)
}

func (o SpamfilterBwlOutput) Entries() SpamfilterBwlEntryArrayOutput {
	return o.ApplyT(func(v *SpamfilterBwl) SpamfilterBwlEntryArrayOutput { return v.Entries }).(SpamfilterBwlEntryArrayOutput)
}

func (o SpamfilterBwlOutput) Fosid() pulumi.IntOutput {
	return o.ApplyT(func(v *SpamfilterBwl) pulumi.IntOutput { return v.Fosid }).(pulumi.IntOutput)
}

func (o SpamfilterBwlOutput) GetAllTables() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *SpamfilterBwl) pulumi.StringPtrOutput { return v.GetAllTables }).(pulumi.StringPtrOutput)
}

func (o SpamfilterBwlOutput) Name() pulumi.StringOutput {
	return o.ApplyT(func(v *SpamfilterBwl) pulumi.StringOutput { return v.Name }).(pulumi.StringOutput)
}

func (o SpamfilterBwlOutput) Vdomparam() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *SpamfilterBwl) pulumi.StringPtrOutput { return v.Vdomparam }).(pulumi.StringPtrOutput)
}

type SpamfilterBwlArrayOutput struct{ *pulumi.OutputState }

func (SpamfilterBwlArrayOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*[]*SpamfilterBwl)(nil)).Elem()
}

func (o SpamfilterBwlArrayOutput) ToSpamfilterBwlArrayOutput() SpamfilterBwlArrayOutput {
	return o
}

func (o SpamfilterBwlArrayOutput) ToSpamfilterBwlArrayOutputWithContext(ctx context.Context) SpamfilterBwlArrayOutput {
	return o
}

func (o SpamfilterBwlArrayOutput) ToOutput(ctx context.Context) pulumix.Output[[]*SpamfilterBwl] {
	return pulumix.Output[[]*SpamfilterBwl]{
		OutputState: o.OutputState,
	}
}

func (o SpamfilterBwlArrayOutput) Index(i pulumi.IntInput) SpamfilterBwlOutput {
	return pulumi.All(o, i).ApplyT(func(vs []interface{}) *SpamfilterBwl {
		return vs[0].([]*SpamfilterBwl)[vs[1].(int)]
	}).(SpamfilterBwlOutput)
}

type SpamfilterBwlMapOutput struct{ *pulumi.OutputState }

func (SpamfilterBwlMapOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*map[string]*SpamfilterBwl)(nil)).Elem()
}

func (o SpamfilterBwlMapOutput) ToSpamfilterBwlMapOutput() SpamfilterBwlMapOutput {
	return o
}

func (o SpamfilterBwlMapOutput) ToSpamfilterBwlMapOutputWithContext(ctx context.Context) SpamfilterBwlMapOutput {
	return o
}

func (o SpamfilterBwlMapOutput) ToOutput(ctx context.Context) pulumix.Output[map[string]*SpamfilterBwl] {
	return pulumix.Output[map[string]*SpamfilterBwl]{
		OutputState: o.OutputState,
	}
}

func (o SpamfilterBwlMapOutput) MapIndex(k pulumi.StringInput) SpamfilterBwlOutput {
	return pulumi.All(o, k).ApplyT(func(vs []interface{}) *SpamfilterBwl {
		return vs[0].(map[string]*SpamfilterBwl)[vs[1].(string)]
	}).(SpamfilterBwlOutput)
}

func init() {
	pulumi.RegisterInputType(reflect.TypeOf((*SpamfilterBwlInput)(nil)).Elem(), &SpamfilterBwl{})
	pulumi.RegisterInputType(reflect.TypeOf((*SpamfilterBwlArrayInput)(nil)).Elem(), SpamfilterBwlArray{})
	pulumi.RegisterInputType(reflect.TypeOf((*SpamfilterBwlMapInput)(nil)).Elem(), SpamfilterBwlMap{})
	pulumi.RegisterOutputType(SpamfilterBwlOutput{})
	pulumi.RegisterOutputType(SpamfilterBwlArrayOutput{})
	pulumi.RegisterOutputType(SpamfilterBwlMapOutput{})
}
