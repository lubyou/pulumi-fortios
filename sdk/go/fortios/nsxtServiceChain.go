// Code generated by the Pulumi Terraform Bridge (tfgen) Tool DO NOT EDIT.
// *** WARNING: Do not edit by hand unless you're certain you know what you are doing! ***

package fortios

import (
	"context"
	"reflect"

	"github.com/lubyou/pulumi-fortios/sdk/go/fortios/internal"
	"github.com/pulumi/pulumi/sdk/v3/go/pulumi"
	"github.com/pulumi/pulumi/sdk/v3/go/pulumix"
)

type NsxtServiceChain struct {
	pulumi.CustomResourceState

	DynamicSortSubtable pulumi.StringPtrOutput                  `pulumi:"dynamicSortSubtable"`
	Fosid               pulumi.IntOutput                        `pulumi:"fosid"`
	GetAllTables        pulumi.StringPtrOutput                  `pulumi:"getAllTables"`
	Name                pulumi.StringOutput                     `pulumi:"name"`
	ServiceIndices      NsxtServiceChainServiceIndexArrayOutput `pulumi:"serviceIndices"`
	Vdomparam           pulumi.StringPtrOutput                  `pulumi:"vdomparam"`
}

// NewNsxtServiceChain registers a new resource with the given unique name, arguments, and options.
func NewNsxtServiceChain(ctx *pulumi.Context,
	name string, args *NsxtServiceChainArgs, opts ...pulumi.ResourceOption) (*NsxtServiceChain, error) {
	if args == nil {
		args = &NsxtServiceChainArgs{}
	}

	opts = internal.PkgResourceDefaultOpts(opts)
	var resource NsxtServiceChain
	err := ctx.RegisterResource("fortios:index/nsxtServiceChain:NsxtServiceChain", name, args, &resource, opts...)
	if err != nil {
		return nil, err
	}
	return &resource, nil
}

// GetNsxtServiceChain gets an existing NsxtServiceChain resource's state with the given name, ID, and optional
// state properties that are used to uniquely qualify the lookup (nil if not required).
func GetNsxtServiceChain(ctx *pulumi.Context,
	name string, id pulumi.IDInput, state *NsxtServiceChainState, opts ...pulumi.ResourceOption) (*NsxtServiceChain, error) {
	var resource NsxtServiceChain
	err := ctx.ReadResource("fortios:index/nsxtServiceChain:NsxtServiceChain", name, id, state, &resource, opts...)
	if err != nil {
		return nil, err
	}
	return &resource, nil
}

// Input properties used for looking up and filtering NsxtServiceChain resources.
type nsxtServiceChainState struct {
	DynamicSortSubtable *string                        `pulumi:"dynamicSortSubtable"`
	Fosid               *int                           `pulumi:"fosid"`
	GetAllTables        *string                        `pulumi:"getAllTables"`
	Name                *string                        `pulumi:"name"`
	ServiceIndices      []NsxtServiceChainServiceIndex `pulumi:"serviceIndices"`
	Vdomparam           *string                        `pulumi:"vdomparam"`
}

type NsxtServiceChainState struct {
	DynamicSortSubtable pulumi.StringPtrInput
	Fosid               pulumi.IntPtrInput
	GetAllTables        pulumi.StringPtrInput
	Name                pulumi.StringPtrInput
	ServiceIndices      NsxtServiceChainServiceIndexArrayInput
	Vdomparam           pulumi.StringPtrInput
}

func (NsxtServiceChainState) ElementType() reflect.Type {
	return reflect.TypeOf((*nsxtServiceChainState)(nil)).Elem()
}

type nsxtServiceChainArgs struct {
	DynamicSortSubtable *string                        `pulumi:"dynamicSortSubtable"`
	Fosid               *int                           `pulumi:"fosid"`
	GetAllTables        *string                        `pulumi:"getAllTables"`
	Name                *string                        `pulumi:"name"`
	ServiceIndices      []NsxtServiceChainServiceIndex `pulumi:"serviceIndices"`
	Vdomparam           *string                        `pulumi:"vdomparam"`
}

// The set of arguments for constructing a NsxtServiceChain resource.
type NsxtServiceChainArgs struct {
	DynamicSortSubtable pulumi.StringPtrInput
	Fosid               pulumi.IntPtrInput
	GetAllTables        pulumi.StringPtrInput
	Name                pulumi.StringPtrInput
	ServiceIndices      NsxtServiceChainServiceIndexArrayInput
	Vdomparam           pulumi.StringPtrInput
}

func (NsxtServiceChainArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*nsxtServiceChainArgs)(nil)).Elem()
}

type NsxtServiceChainInput interface {
	pulumi.Input

	ToNsxtServiceChainOutput() NsxtServiceChainOutput
	ToNsxtServiceChainOutputWithContext(ctx context.Context) NsxtServiceChainOutput
}

func (*NsxtServiceChain) ElementType() reflect.Type {
	return reflect.TypeOf((**NsxtServiceChain)(nil)).Elem()
}

func (i *NsxtServiceChain) ToNsxtServiceChainOutput() NsxtServiceChainOutput {
	return i.ToNsxtServiceChainOutputWithContext(context.Background())
}

func (i *NsxtServiceChain) ToNsxtServiceChainOutputWithContext(ctx context.Context) NsxtServiceChainOutput {
	return pulumi.ToOutputWithContext(ctx, i).(NsxtServiceChainOutput)
}

func (i *NsxtServiceChain) ToOutput(ctx context.Context) pulumix.Output[*NsxtServiceChain] {
	return pulumix.Output[*NsxtServiceChain]{
		OutputState: i.ToNsxtServiceChainOutputWithContext(ctx).OutputState,
	}
}

// NsxtServiceChainArrayInput is an input type that accepts NsxtServiceChainArray and NsxtServiceChainArrayOutput values.
// You can construct a concrete instance of `NsxtServiceChainArrayInput` via:
//
//	NsxtServiceChainArray{ NsxtServiceChainArgs{...} }
type NsxtServiceChainArrayInput interface {
	pulumi.Input

	ToNsxtServiceChainArrayOutput() NsxtServiceChainArrayOutput
	ToNsxtServiceChainArrayOutputWithContext(context.Context) NsxtServiceChainArrayOutput
}

type NsxtServiceChainArray []NsxtServiceChainInput

func (NsxtServiceChainArray) ElementType() reflect.Type {
	return reflect.TypeOf((*[]*NsxtServiceChain)(nil)).Elem()
}

func (i NsxtServiceChainArray) ToNsxtServiceChainArrayOutput() NsxtServiceChainArrayOutput {
	return i.ToNsxtServiceChainArrayOutputWithContext(context.Background())
}

func (i NsxtServiceChainArray) ToNsxtServiceChainArrayOutputWithContext(ctx context.Context) NsxtServiceChainArrayOutput {
	return pulumi.ToOutputWithContext(ctx, i).(NsxtServiceChainArrayOutput)
}

func (i NsxtServiceChainArray) ToOutput(ctx context.Context) pulumix.Output[[]*NsxtServiceChain] {
	return pulumix.Output[[]*NsxtServiceChain]{
		OutputState: i.ToNsxtServiceChainArrayOutputWithContext(ctx).OutputState,
	}
}

// NsxtServiceChainMapInput is an input type that accepts NsxtServiceChainMap and NsxtServiceChainMapOutput values.
// You can construct a concrete instance of `NsxtServiceChainMapInput` via:
//
//	NsxtServiceChainMap{ "key": NsxtServiceChainArgs{...} }
type NsxtServiceChainMapInput interface {
	pulumi.Input

	ToNsxtServiceChainMapOutput() NsxtServiceChainMapOutput
	ToNsxtServiceChainMapOutputWithContext(context.Context) NsxtServiceChainMapOutput
}

type NsxtServiceChainMap map[string]NsxtServiceChainInput

func (NsxtServiceChainMap) ElementType() reflect.Type {
	return reflect.TypeOf((*map[string]*NsxtServiceChain)(nil)).Elem()
}

func (i NsxtServiceChainMap) ToNsxtServiceChainMapOutput() NsxtServiceChainMapOutput {
	return i.ToNsxtServiceChainMapOutputWithContext(context.Background())
}

func (i NsxtServiceChainMap) ToNsxtServiceChainMapOutputWithContext(ctx context.Context) NsxtServiceChainMapOutput {
	return pulumi.ToOutputWithContext(ctx, i).(NsxtServiceChainMapOutput)
}

func (i NsxtServiceChainMap) ToOutput(ctx context.Context) pulumix.Output[map[string]*NsxtServiceChain] {
	return pulumix.Output[map[string]*NsxtServiceChain]{
		OutputState: i.ToNsxtServiceChainMapOutputWithContext(ctx).OutputState,
	}
}

type NsxtServiceChainOutput struct{ *pulumi.OutputState }

func (NsxtServiceChainOutput) ElementType() reflect.Type {
	return reflect.TypeOf((**NsxtServiceChain)(nil)).Elem()
}

func (o NsxtServiceChainOutput) ToNsxtServiceChainOutput() NsxtServiceChainOutput {
	return o
}

func (o NsxtServiceChainOutput) ToNsxtServiceChainOutputWithContext(ctx context.Context) NsxtServiceChainOutput {
	return o
}

func (o NsxtServiceChainOutput) ToOutput(ctx context.Context) pulumix.Output[*NsxtServiceChain] {
	return pulumix.Output[*NsxtServiceChain]{
		OutputState: o.OutputState,
	}
}

func (o NsxtServiceChainOutput) DynamicSortSubtable() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *NsxtServiceChain) pulumi.StringPtrOutput { return v.DynamicSortSubtable }).(pulumi.StringPtrOutput)
}

func (o NsxtServiceChainOutput) Fosid() pulumi.IntOutput {
	return o.ApplyT(func(v *NsxtServiceChain) pulumi.IntOutput { return v.Fosid }).(pulumi.IntOutput)
}

func (o NsxtServiceChainOutput) GetAllTables() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *NsxtServiceChain) pulumi.StringPtrOutput { return v.GetAllTables }).(pulumi.StringPtrOutput)
}

func (o NsxtServiceChainOutput) Name() pulumi.StringOutput {
	return o.ApplyT(func(v *NsxtServiceChain) pulumi.StringOutput { return v.Name }).(pulumi.StringOutput)
}

func (o NsxtServiceChainOutput) ServiceIndices() NsxtServiceChainServiceIndexArrayOutput {
	return o.ApplyT(func(v *NsxtServiceChain) NsxtServiceChainServiceIndexArrayOutput { return v.ServiceIndices }).(NsxtServiceChainServiceIndexArrayOutput)
}

func (o NsxtServiceChainOutput) Vdomparam() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *NsxtServiceChain) pulumi.StringPtrOutput { return v.Vdomparam }).(pulumi.StringPtrOutput)
}

type NsxtServiceChainArrayOutput struct{ *pulumi.OutputState }

func (NsxtServiceChainArrayOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*[]*NsxtServiceChain)(nil)).Elem()
}

func (o NsxtServiceChainArrayOutput) ToNsxtServiceChainArrayOutput() NsxtServiceChainArrayOutput {
	return o
}

func (o NsxtServiceChainArrayOutput) ToNsxtServiceChainArrayOutputWithContext(ctx context.Context) NsxtServiceChainArrayOutput {
	return o
}

func (o NsxtServiceChainArrayOutput) ToOutput(ctx context.Context) pulumix.Output[[]*NsxtServiceChain] {
	return pulumix.Output[[]*NsxtServiceChain]{
		OutputState: o.OutputState,
	}
}

func (o NsxtServiceChainArrayOutput) Index(i pulumi.IntInput) NsxtServiceChainOutput {
	return pulumi.All(o, i).ApplyT(func(vs []interface{}) *NsxtServiceChain {
		return vs[0].([]*NsxtServiceChain)[vs[1].(int)]
	}).(NsxtServiceChainOutput)
}

type NsxtServiceChainMapOutput struct{ *pulumi.OutputState }

func (NsxtServiceChainMapOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*map[string]*NsxtServiceChain)(nil)).Elem()
}

func (o NsxtServiceChainMapOutput) ToNsxtServiceChainMapOutput() NsxtServiceChainMapOutput {
	return o
}

func (o NsxtServiceChainMapOutput) ToNsxtServiceChainMapOutputWithContext(ctx context.Context) NsxtServiceChainMapOutput {
	return o
}

func (o NsxtServiceChainMapOutput) ToOutput(ctx context.Context) pulumix.Output[map[string]*NsxtServiceChain] {
	return pulumix.Output[map[string]*NsxtServiceChain]{
		OutputState: o.OutputState,
	}
}

func (o NsxtServiceChainMapOutput) MapIndex(k pulumi.StringInput) NsxtServiceChainOutput {
	return pulumi.All(o, k).ApplyT(func(vs []interface{}) *NsxtServiceChain {
		return vs[0].(map[string]*NsxtServiceChain)[vs[1].(string)]
	}).(NsxtServiceChainOutput)
}

func init() {
	pulumi.RegisterInputType(reflect.TypeOf((*NsxtServiceChainInput)(nil)).Elem(), &NsxtServiceChain{})
	pulumi.RegisterInputType(reflect.TypeOf((*NsxtServiceChainArrayInput)(nil)).Elem(), NsxtServiceChainArray{})
	pulumi.RegisterInputType(reflect.TypeOf((*NsxtServiceChainMapInput)(nil)).Elem(), NsxtServiceChainMap{})
	pulumi.RegisterOutputType(NsxtServiceChainOutput{})
	pulumi.RegisterOutputType(NsxtServiceChainArrayOutput{})
	pulumi.RegisterOutputType(NsxtServiceChainMapOutput{})
}
