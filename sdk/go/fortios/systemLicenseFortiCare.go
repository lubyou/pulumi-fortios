// *** WARNING: this file was generated by the Pulumi Terraform Bridge (tfgen) Tool. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

package fortios

import (
	"context"
	"reflect"

	"github.com/pkg/errors"
	"github.com/pulumi/pulumi/sdk/v3/go/pulumi"
)

// Provides a resource to add a FortiCare license for FortiOS.
//
// ## Example Usage
//
// ```go
// package main
//
// import (
// 	"github.com/pulumi/pulumi-fortios/sdk/go/fortios"
// 	"github.com/pulumi/pulumi/sdk/v3/go/pulumi"
// )
//
// func main() {
// 	pulumi.Run(func(ctx *pulumi.Context) error {
// 		_, err := fortios.NewSystemLicenseFortiCare(ctx, "test2", &fortios.SystemLicenseFortiCareArgs{
// 			RegistrationCode: pulumi.String("license"),
// 		})
// 		if err != nil {
// 			return err
// 		}
// 		return nil
// 	})
// }
// ```
type SystemLicenseFortiCare struct {
	pulumi.CustomResourceState

	// Registration code.
	RegistrationCode pulumi.StringOutput `pulumi:"registrationCode"`
}

// NewSystemLicenseFortiCare registers a new resource with the given unique name, arguments, and options.
func NewSystemLicenseFortiCare(ctx *pulumi.Context,
	name string, args *SystemLicenseFortiCareArgs, opts ...pulumi.ResourceOption) (*SystemLicenseFortiCare, error) {
	if args == nil {
		return nil, errors.New("missing one or more required arguments")
	}

	if args.RegistrationCode == nil {
		return nil, errors.New("invalid value for required argument 'RegistrationCode'")
	}
	opts = pkgResourceDefaultOpts(opts)
	var resource SystemLicenseFortiCare
	err := ctx.RegisterResource("fortios:index/systemLicenseFortiCare:SystemLicenseFortiCare", name, args, &resource, opts...)
	if err != nil {
		return nil, err
	}
	return &resource, nil
}

// GetSystemLicenseFortiCare gets an existing SystemLicenseFortiCare resource's state with the given name, ID, and optional
// state properties that are used to uniquely qualify the lookup (nil if not required).
func GetSystemLicenseFortiCare(ctx *pulumi.Context,
	name string, id pulumi.IDInput, state *SystemLicenseFortiCareState, opts ...pulumi.ResourceOption) (*SystemLicenseFortiCare, error) {
	var resource SystemLicenseFortiCare
	err := ctx.ReadResource("fortios:index/systemLicenseFortiCare:SystemLicenseFortiCare", name, id, state, &resource, opts...)
	if err != nil {
		return nil, err
	}
	return &resource, nil
}

// Input properties used for looking up and filtering SystemLicenseFortiCare resources.
type systemLicenseFortiCareState struct {
	// Registration code.
	RegistrationCode *string `pulumi:"registrationCode"`
}

type SystemLicenseFortiCareState struct {
	// Registration code.
	RegistrationCode pulumi.StringPtrInput
}

func (SystemLicenseFortiCareState) ElementType() reflect.Type {
	return reflect.TypeOf((*systemLicenseFortiCareState)(nil)).Elem()
}

type systemLicenseFortiCareArgs struct {
	// Registration code.
	RegistrationCode string `pulumi:"registrationCode"`
}

// The set of arguments for constructing a SystemLicenseFortiCare resource.
type SystemLicenseFortiCareArgs struct {
	// Registration code.
	RegistrationCode pulumi.StringInput
}

func (SystemLicenseFortiCareArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*systemLicenseFortiCareArgs)(nil)).Elem()
}

type SystemLicenseFortiCareInput interface {
	pulumi.Input

	ToSystemLicenseFortiCareOutput() SystemLicenseFortiCareOutput
	ToSystemLicenseFortiCareOutputWithContext(ctx context.Context) SystemLicenseFortiCareOutput
}

func (*SystemLicenseFortiCare) ElementType() reflect.Type {
	return reflect.TypeOf((**SystemLicenseFortiCare)(nil)).Elem()
}

func (i *SystemLicenseFortiCare) ToSystemLicenseFortiCareOutput() SystemLicenseFortiCareOutput {
	return i.ToSystemLicenseFortiCareOutputWithContext(context.Background())
}

func (i *SystemLicenseFortiCare) ToSystemLicenseFortiCareOutputWithContext(ctx context.Context) SystemLicenseFortiCareOutput {
	return pulumi.ToOutputWithContext(ctx, i).(SystemLicenseFortiCareOutput)
}

// SystemLicenseFortiCareArrayInput is an input type that accepts SystemLicenseFortiCareArray and SystemLicenseFortiCareArrayOutput values.
// You can construct a concrete instance of `SystemLicenseFortiCareArrayInput` via:
//
//          SystemLicenseFortiCareArray{ SystemLicenseFortiCareArgs{...} }
type SystemLicenseFortiCareArrayInput interface {
	pulumi.Input

	ToSystemLicenseFortiCareArrayOutput() SystemLicenseFortiCareArrayOutput
	ToSystemLicenseFortiCareArrayOutputWithContext(context.Context) SystemLicenseFortiCareArrayOutput
}

type SystemLicenseFortiCareArray []SystemLicenseFortiCareInput

func (SystemLicenseFortiCareArray) ElementType() reflect.Type {
	return reflect.TypeOf((*[]*SystemLicenseFortiCare)(nil)).Elem()
}

func (i SystemLicenseFortiCareArray) ToSystemLicenseFortiCareArrayOutput() SystemLicenseFortiCareArrayOutput {
	return i.ToSystemLicenseFortiCareArrayOutputWithContext(context.Background())
}

func (i SystemLicenseFortiCareArray) ToSystemLicenseFortiCareArrayOutputWithContext(ctx context.Context) SystemLicenseFortiCareArrayOutput {
	return pulumi.ToOutputWithContext(ctx, i).(SystemLicenseFortiCareArrayOutput)
}

// SystemLicenseFortiCareMapInput is an input type that accepts SystemLicenseFortiCareMap and SystemLicenseFortiCareMapOutput values.
// You can construct a concrete instance of `SystemLicenseFortiCareMapInput` via:
//
//          SystemLicenseFortiCareMap{ "key": SystemLicenseFortiCareArgs{...} }
type SystemLicenseFortiCareMapInput interface {
	pulumi.Input

	ToSystemLicenseFortiCareMapOutput() SystemLicenseFortiCareMapOutput
	ToSystemLicenseFortiCareMapOutputWithContext(context.Context) SystemLicenseFortiCareMapOutput
}

type SystemLicenseFortiCareMap map[string]SystemLicenseFortiCareInput

func (SystemLicenseFortiCareMap) ElementType() reflect.Type {
	return reflect.TypeOf((*map[string]*SystemLicenseFortiCare)(nil)).Elem()
}

func (i SystemLicenseFortiCareMap) ToSystemLicenseFortiCareMapOutput() SystemLicenseFortiCareMapOutput {
	return i.ToSystemLicenseFortiCareMapOutputWithContext(context.Background())
}

func (i SystemLicenseFortiCareMap) ToSystemLicenseFortiCareMapOutputWithContext(ctx context.Context) SystemLicenseFortiCareMapOutput {
	return pulumi.ToOutputWithContext(ctx, i).(SystemLicenseFortiCareMapOutput)
}

type SystemLicenseFortiCareOutput struct{ *pulumi.OutputState }

func (SystemLicenseFortiCareOutput) ElementType() reflect.Type {
	return reflect.TypeOf((**SystemLicenseFortiCare)(nil)).Elem()
}

func (o SystemLicenseFortiCareOutput) ToSystemLicenseFortiCareOutput() SystemLicenseFortiCareOutput {
	return o
}

func (o SystemLicenseFortiCareOutput) ToSystemLicenseFortiCareOutputWithContext(ctx context.Context) SystemLicenseFortiCareOutput {
	return o
}

type SystemLicenseFortiCareArrayOutput struct{ *pulumi.OutputState }

func (SystemLicenseFortiCareArrayOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*[]*SystemLicenseFortiCare)(nil)).Elem()
}

func (o SystemLicenseFortiCareArrayOutput) ToSystemLicenseFortiCareArrayOutput() SystemLicenseFortiCareArrayOutput {
	return o
}

func (o SystemLicenseFortiCareArrayOutput) ToSystemLicenseFortiCareArrayOutputWithContext(ctx context.Context) SystemLicenseFortiCareArrayOutput {
	return o
}

func (o SystemLicenseFortiCareArrayOutput) Index(i pulumi.IntInput) SystemLicenseFortiCareOutput {
	return pulumi.All(o, i).ApplyT(func(vs []interface{}) *SystemLicenseFortiCare {
		return vs[0].([]*SystemLicenseFortiCare)[vs[1].(int)]
	}).(SystemLicenseFortiCareOutput)
}

type SystemLicenseFortiCareMapOutput struct{ *pulumi.OutputState }

func (SystemLicenseFortiCareMapOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*map[string]*SystemLicenseFortiCare)(nil)).Elem()
}

func (o SystemLicenseFortiCareMapOutput) ToSystemLicenseFortiCareMapOutput() SystemLicenseFortiCareMapOutput {
	return o
}

func (o SystemLicenseFortiCareMapOutput) ToSystemLicenseFortiCareMapOutputWithContext(ctx context.Context) SystemLicenseFortiCareMapOutput {
	return o
}

func (o SystemLicenseFortiCareMapOutput) MapIndex(k pulumi.StringInput) SystemLicenseFortiCareOutput {
	return pulumi.All(o, k).ApplyT(func(vs []interface{}) *SystemLicenseFortiCare {
		return vs[0].(map[string]*SystemLicenseFortiCare)[vs[1].(string)]
	}).(SystemLicenseFortiCareOutput)
}

func init() {
	pulumi.RegisterInputType(reflect.TypeOf((*SystemLicenseFortiCareInput)(nil)).Elem(), &SystemLicenseFortiCare{})
	pulumi.RegisterInputType(reflect.TypeOf((*SystemLicenseFortiCareArrayInput)(nil)).Elem(), SystemLicenseFortiCareArray{})
	pulumi.RegisterInputType(reflect.TypeOf((*SystemLicenseFortiCareMapInput)(nil)).Elem(), SystemLicenseFortiCareMap{})
	pulumi.RegisterOutputType(SystemLicenseFortiCareOutput{})
	pulumi.RegisterOutputType(SystemLicenseFortiCareArrayOutput{})
	pulumi.RegisterOutputType(SystemLicenseFortiCareMapOutput{})
}
