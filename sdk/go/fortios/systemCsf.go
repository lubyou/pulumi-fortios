// *** WARNING: this file was generated by the Pulumi Terraform Bridge (tfgen) Tool. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

package fortios

import (
	"context"
	"reflect"

	"github.com/pkg/errors"
	"github.com/pulumi/pulumi/sdk/v3/go/pulumi"
)

// Add this FortiGate to a Security Fabric or set up a new Security Fabric on this FortiGate.
//
// ## Example Usage
//
// ```go
// package main
//
// import (
// 	"github.com/pulumi/pulumi-fortios/sdk/go/fortios"
// 	"github.com/pulumi/pulumi/sdk/v3/go/pulumi"
// )
//
// func main() {
// 	pulumi.Run(func(ctx *pulumi.Context) error {
// 		_, err := fortios.NewSystemCsf(ctx, "trname", &fortios.SystemCsfArgs{
// 			ConfigurationSync: pulumi.String("default"),
// 			GroupPassword:     pulumi.String("tmp"),
// 			ManagementIp:      pulumi.String("0.0.0.0"),
// 			ManagementPort:    pulumi.Int(33),
// 			Status:            pulumi.String("disable"),
// 			UpstreamIp:        pulumi.String("0.0.0.0"),
// 			UpstreamPort:      pulumi.Int(8013),
// 		})
// 		if err != nil {
// 			return err
// 		}
// 		return nil
// 	})
// }
// ```
//
// ## Import
//
// System Csf can be imported using any of these accepted formats$ export "FORTIOS_IMPORT_TABLE"="true"
//
// ```sh
//  $ pulumi import fortios:index/systemCsf:SystemCsf labelname SystemCsf
// ```
//
//  $ unset "FORTIOS_IMPORT_TABLE"
type SystemCsf struct {
	pulumi.CustomResourceState

	// Accept connections with unknown certificates and ask admin for approval. Valid values: `disable`, `enable`.
	AcceptAuthByCert pulumi.StringOutput `pulumi:"acceptAuthByCert"`
	// Authorization request type. Valid values: `serial`, `certificate`.
	AuthorizationRequestType pulumi.StringOutput `pulumi:"authorizationRequestType"`
	// Certificate.
	Certificate pulumi.StringOutput `pulumi:"certificate"`
	// Configuration sync mode. Valid values: `default`, `local`.
	ConfigurationSync pulumi.StringOutput `pulumi:"configurationSync"`
	// Enable/disable downstream device access to this device's configuration and data. Valid values: `enable`, `disable`.
	DownstreamAccess pulumi.StringOutput `pulumi:"downstreamAccess"`
	// Default access profile for requests from downstream devices.
	DownstreamAccprofile pulumi.StringOutput `pulumi:"downstreamAccprofile"`
	// true or false, set this parameter to true when using dynamic forEach + toset to configure and sort sub-tables, please do not set this parameter when configuring static sub-tables.
	DynamicSortSubtable pulumi.StringPtrOutput `pulumi:"dynamicSortSubtable"`
	// Fabric connector configuration. The structure of `fabricConnector` block is documented below.
	FabricConnectors SystemCsfFabricConnectorArrayOutput `pulumi:"fabricConnectors"`
	// Fabric device configuration. The structure of `fabricDevice` block is documented below.
	FabricDevices SystemCsfFabricDeviceArrayOutput `pulumi:"fabricDevices"`
	// Fabric CMDB Object Unification Valid values: `default`, `local`.
	FabricObjectUnification pulumi.StringOutput `pulumi:"fabricObjectUnification"`
	// Number of worker processes for Security Fabric daemon.
	FabricWorkers pulumi.IntOutput `pulumi:"fabricWorkers"`
	// Auto-generated fixed key used when this device is the root. (Will automatically be generated if not set.)
	FixedKey pulumi.StringPtrOutput `pulumi:"fixedKey"`
	// Fabric FortiCloud account unification. Valid values: `enable`, `disable`.
	ForticloudAccountEnforcement pulumi.StringOutput `pulumi:"forticloudAccountEnforcement"`
	// Security Fabric group name. All FortiGates in a Security Fabric must have the same group name.
	GroupName pulumi.StringOutput `pulumi:"groupName"`
	// Security Fabric group password. All FortiGates in a Security Fabric must have the same group password.
	GroupPassword pulumi.StringPtrOutput `pulumi:"groupPassword"`
	// Enable/disable broadcast of discovery messages for log unification. Valid values: `disable`, `enable`.
	LogUnification pulumi.StringOutput `pulumi:"logUnification"`
	// Management IP address of this FortiGate. Used to log into this FortiGate from another FortiGate in the Security Fabric.
	ManagementIp pulumi.StringOutput `pulumi:"managementIp"`
	// Overriding port for management connection (Overrides admin port).
	ManagementPort pulumi.IntOutput `pulumi:"managementPort"`
	// SAML setting configuration synchronization. Valid values: `default`, `local`.
	SamlConfigurationSync pulumi.StringOutput `pulumi:"samlConfigurationSync"`
	// Enable/disable Security Fabric. Valid values: `enable`, `disable`.
	Status pulumi.StringOutput `pulumi:"status"`
	// Pre-authorized and blocked security fabric nodes. The structure of `trustedList` block is documented below.
	TrustedLists SystemCsfTrustedListArrayOutput `pulumi:"trustedLists"`
	// IP/FQDN of the FortiGate upstream from this FortiGate in the Security Fabric.
	Upstream pulumi.StringOutput `pulumi:"upstream"`
	// IP address of the FortiGate upstream from this FortiGate in the Security Fabric.
	UpstreamIp pulumi.StringOutput `pulumi:"upstreamIp"`
	// The port number to use to communicate with the FortiGate upstream from this FortiGate in the Security Fabric (default = 8013).
	UpstreamPort pulumi.IntOutput `pulumi:"upstreamPort"`
	// Specifies the vdom to which the resource will be applied when the FortiGate unit is running in VDOM mode. Only one vdom can be specified. If you want to inherit the vdom configuration of the provider, please do not set this parameter.
	Vdomparam pulumi.StringPtrOutput `pulumi:"vdomparam"`
}

// NewSystemCsf registers a new resource with the given unique name, arguments, and options.
func NewSystemCsf(ctx *pulumi.Context,
	name string, args *SystemCsfArgs, opts ...pulumi.ResourceOption) (*SystemCsf, error) {
	if args == nil {
		return nil, errors.New("missing one or more required arguments")
	}

	if args.Status == nil {
		return nil, errors.New("invalid value for required argument 'Status'")
	}
	opts = pkgResourceDefaultOpts(opts)
	var resource SystemCsf
	err := ctx.RegisterResource("fortios:index/systemCsf:SystemCsf", name, args, &resource, opts...)
	if err != nil {
		return nil, err
	}
	return &resource, nil
}

// GetSystemCsf gets an existing SystemCsf resource's state with the given name, ID, and optional
// state properties that are used to uniquely qualify the lookup (nil if not required).
func GetSystemCsf(ctx *pulumi.Context,
	name string, id pulumi.IDInput, state *SystemCsfState, opts ...pulumi.ResourceOption) (*SystemCsf, error) {
	var resource SystemCsf
	err := ctx.ReadResource("fortios:index/systemCsf:SystemCsf", name, id, state, &resource, opts...)
	if err != nil {
		return nil, err
	}
	return &resource, nil
}

// Input properties used for looking up and filtering SystemCsf resources.
type systemCsfState struct {
	// Accept connections with unknown certificates and ask admin for approval. Valid values: `disable`, `enable`.
	AcceptAuthByCert *string `pulumi:"acceptAuthByCert"`
	// Authorization request type. Valid values: `serial`, `certificate`.
	AuthorizationRequestType *string `pulumi:"authorizationRequestType"`
	// Certificate.
	Certificate *string `pulumi:"certificate"`
	// Configuration sync mode. Valid values: `default`, `local`.
	ConfigurationSync *string `pulumi:"configurationSync"`
	// Enable/disable downstream device access to this device's configuration and data. Valid values: `enable`, `disable`.
	DownstreamAccess *string `pulumi:"downstreamAccess"`
	// Default access profile for requests from downstream devices.
	DownstreamAccprofile *string `pulumi:"downstreamAccprofile"`
	// true or false, set this parameter to true when using dynamic forEach + toset to configure and sort sub-tables, please do not set this parameter when configuring static sub-tables.
	DynamicSortSubtable *string `pulumi:"dynamicSortSubtable"`
	// Fabric connector configuration. The structure of `fabricConnector` block is documented below.
	FabricConnectors []SystemCsfFabricConnector `pulumi:"fabricConnectors"`
	// Fabric device configuration. The structure of `fabricDevice` block is documented below.
	FabricDevices []SystemCsfFabricDevice `pulumi:"fabricDevices"`
	// Fabric CMDB Object Unification Valid values: `default`, `local`.
	FabricObjectUnification *string `pulumi:"fabricObjectUnification"`
	// Number of worker processes for Security Fabric daemon.
	FabricWorkers *int `pulumi:"fabricWorkers"`
	// Auto-generated fixed key used when this device is the root. (Will automatically be generated if not set.)
	FixedKey *string `pulumi:"fixedKey"`
	// Fabric FortiCloud account unification. Valid values: `enable`, `disable`.
	ForticloudAccountEnforcement *string `pulumi:"forticloudAccountEnforcement"`
	// Security Fabric group name. All FortiGates in a Security Fabric must have the same group name.
	GroupName *string `pulumi:"groupName"`
	// Security Fabric group password. All FortiGates in a Security Fabric must have the same group password.
	GroupPassword *string `pulumi:"groupPassword"`
	// Enable/disable broadcast of discovery messages for log unification. Valid values: `disable`, `enable`.
	LogUnification *string `pulumi:"logUnification"`
	// Management IP address of this FortiGate. Used to log into this FortiGate from another FortiGate in the Security Fabric.
	ManagementIp *string `pulumi:"managementIp"`
	// Overriding port for management connection (Overrides admin port).
	ManagementPort *int `pulumi:"managementPort"`
	// SAML setting configuration synchronization. Valid values: `default`, `local`.
	SamlConfigurationSync *string `pulumi:"samlConfigurationSync"`
	// Enable/disable Security Fabric. Valid values: `enable`, `disable`.
	Status *string `pulumi:"status"`
	// Pre-authorized and blocked security fabric nodes. The structure of `trustedList` block is documented below.
	TrustedLists []SystemCsfTrustedList `pulumi:"trustedLists"`
	// IP/FQDN of the FortiGate upstream from this FortiGate in the Security Fabric.
	Upstream *string `pulumi:"upstream"`
	// IP address of the FortiGate upstream from this FortiGate in the Security Fabric.
	UpstreamIp *string `pulumi:"upstreamIp"`
	// The port number to use to communicate with the FortiGate upstream from this FortiGate in the Security Fabric (default = 8013).
	UpstreamPort *int `pulumi:"upstreamPort"`
	// Specifies the vdom to which the resource will be applied when the FortiGate unit is running in VDOM mode. Only one vdom can be specified. If you want to inherit the vdom configuration of the provider, please do not set this parameter.
	Vdomparam *string `pulumi:"vdomparam"`
}

type SystemCsfState struct {
	// Accept connections with unknown certificates and ask admin for approval. Valid values: `disable`, `enable`.
	AcceptAuthByCert pulumi.StringPtrInput
	// Authorization request type. Valid values: `serial`, `certificate`.
	AuthorizationRequestType pulumi.StringPtrInput
	// Certificate.
	Certificate pulumi.StringPtrInput
	// Configuration sync mode. Valid values: `default`, `local`.
	ConfigurationSync pulumi.StringPtrInput
	// Enable/disable downstream device access to this device's configuration and data. Valid values: `enable`, `disable`.
	DownstreamAccess pulumi.StringPtrInput
	// Default access profile for requests from downstream devices.
	DownstreamAccprofile pulumi.StringPtrInput
	// true or false, set this parameter to true when using dynamic forEach + toset to configure and sort sub-tables, please do not set this parameter when configuring static sub-tables.
	DynamicSortSubtable pulumi.StringPtrInput
	// Fabric connector configuration. The structure of `fabricConnector` block is documented below.
	FabricConnectors SystemCsfFabricConnectorArrayInput
	// Fabric device configuration. The structure of `fabricDevice` block is documented below.
	FabricDevices SystemCsfFabricDeviceArrayInput
	// Fabric CMDB Object Unification Valid values: `default`, `local`.
	FabricObjectUnification pulumi.StringPtrInput
	// Number of worker processes for Security Fabric daemon.
	FabricWorkers pulumi.IntPtrInput
	// Auto-generated fixed key used when this device is the root. (Will automatically be generated if not set.)
	FixedKey pulumi.StringPtrInput
	// Fabric FortiCloud account unification. Valid values: `enable`, `disable`.
	ForticloudAccountEnforcement pulumi.StringPtrInput
	// Security Fabric group name. All FortiGates in a Security Fabric must have the same group name.
	GroupName pulumi.StringPtrInput
	// Security Fabric group password. All FortiGates in a Security Fabric must have the same group password.
	GroupPassword pulumi.StringPtrInput
	// Enable/disable broadcast of discovery messages for log unification. Valid values: `disable`, `enable`.
	LogUnification pulumi.StringPtrInput
	// Management IP address of this FortiGate. Used to log into this FortiGate from another FortiGate in the Security Fabric.
	ManagementIp pulumi.StringPtrInput
	// Overriding port for management connection (Overrides admin port).
	ManagementPort pulumi.IntPtrInput
	// SAML setting configuration synchronization. Valid values: `default`, `local`.
	SamlConfigurationSync pulumi.StringPtrInput
	// Enable/disable Security Fabric. Valid values: `enable`, `disable`.
	Status pulumi.StringPtrInput
	// Pre-authorized and blocked security fabric nodes. The structure of `trustedList` block is documented below.
	TrustedLists SystemCsfTrustedListArrayInput
	// IP/FQDN of the FortiGate upstream from this FortiGate in the Security Fabric.
	Upstream pulumi.StringPtrInput
	// IP address of the FortiGate upstream from this FortiGate in the Security Fabric.
	UpstreamIp pulumi.StringPtrInput
	// The port number to use to communicate with the FortiGate upstream from this FortiGate in the Security Fabric (default = 8013).
	UpstreamPort pulumi.IntPtrInput
	// Specifies the vdom to which the resource will be applied when the FortiGate unit is running in VDOM mode. Only one vdom can be specified. If you want to inherit the vdom configuration of the provider, please do not set this parameter.
	Vdomparam pulumi.StringPtrInput
}

func (SystemCsfState) ElementType() reflect.Type {
	return reflect.TypeOf((*systemCsfState)(nil)).Elem()
}

type systemCsfArgs struct {
	// Accept connections with unknown certificates and ask admin for approval. Valid values: `disable`, `enable`.
	AcceptAuthByCert *string `pulumi:"acceptAuthByCert"`
	// Authorization request type. Valid values: `serial`, `certificate`.
	AuthorizationRequestType *string `pulumi:"authorizationRequestType"`
	// Certificate.
	Certificate *string `pulumi:"certificate"`
	// Configuration sync mode. Valid values: `default`, `local`.
	ConfigurationSync *string `pulumi:"configurationSync"`
	// Enable/disable downstream device access to this device's configuration and data. Valid values: `enable`, `disable`.
	DownstreamAccess *string `pulumi:"downstreamAccess"`
	// Default access profile for requests from downstream devices.
	DownstreamAccprofile *string `pulumi:"downstreamAccprofile"`
	// true or false, set this parameter to true when using dynamic forEach + toset to configure and sort sub-tables, please do not set this parameter when configuring static sub-tables.
	DynamicSortSubtable *string `pulumi:"dynamicSortSubtable"`
	// Fabric connector configuration. The structure of `fabricConnector` block is documented below.
	FabricConnectors []SystemCsfFabricConnector `pulumi:"fabricConnectors"`
	// Fabric device configuration. The structure of `fabricDevice` block is documented below.
	FabricDevices []SystemCsfFabricDevice `pulumi:"fabricDevices"`
	// Fabric CMDB Object Unification Valid values: `default`, `local`.
	FabricObjectUnification *string `pulumi:"fabricObjectUnification"`
	// Number of worker processes for Security Fabric daemon.
	FabricWorkers *int `pulumi:"fabricWorkers"`
	// Auto-generated fixed key used when this device is the root. (Will automatically be generated if not set.)
	FixedKey *string `pulumi:"fixedKey"`
	// Fabric FortiCloud account unification. Valid values: `enable`, `disable`.
	ForticloudAccountEnforcement *string `pulumi:"forticloudAccountEnforcement"`
	// Security Fabric group name. All FortiGates in a Security Fabric must have the same group name.
	GroupName *string `pulumi:"groupName"`
	// Security Fabric group password. All FortiGates in a Security Fabric must have the same group password.
	GroupPassword *string `pulumi:"groupPassword"`
	// Enable/disable broadcast of discovery messages for log unification. Valid values: `disable`, `enable`.
	LogUnification *string `pulumi:"logUnification"`
	// Management IP address of this FortiGate. Used to log into this FortiGate from another FortiGate in the Security Fabric.
	ManagementIp *string `pulumi:"managementIp"`
	// Overriding port for management connection (Overrides admin port).
	ManagementPort *int `pulumi:"managementPort"`
	// SAML setting configuration synchronization. Valid values: `default`, `local`.
	SamlConfigurationSync *string `pulumi:"samlConfigurationSync"`
	// Enable/disable Security Fabric. Valid values: `enable`, `disable`.
	Status string `pulumi:"status"`
	// Pre-authorized and blocked security fabric nodes. The structure of `trustedList` block is documented below.
	TrustedLists []SystemCsfTrustedList `pulumi:"trustedLists"`
	// IP/FQDN of the FortiGate upstream from this FortiGate in the Security Fabric.
	Upstream *string `pulumi:"upstream"`
	// IP address of the FortiGate upstream from this FortiGate in the Security Fabric.
	UpstreamIp *string `pulumi:"upstreamIp"`
	// The port number to use to communicate with the FortiGate upstream from this FortiGate in the Security Fabric (default = 8013).
	UpstreamPort *int `pulumi:"upstreamPort"`
	// Specifies the vdom to which the resource will be applied when the FortiGate unit is running in VDOM mode. Only one vdom can be specified. If you want to inherit the vdom configuration of the provider, please do not set this parameter.
	Vdomparam *string `pulumi:"vdomparam"`
}

// The set of arguments for constructing a SystemCsf resource.
type SystemCsfArgs struct {
	// Accept connections with unknown certificates and ask admin for approval. Valid values: `disable`, `enable`.
	AcceptAuthByCert pulumi.StringPtrInput
	// Authorization request type. Valid values: `serial`, `certificate`.
	AuthorizationRequestType pulumi.StringPtrInput
	// Certificate.
	Certificate pulumi.StringPtrInput
	// Configuration sync mode. Valid values: `default`, `local`.
	ConfigurationSync pulumi.StringPtrInput
	// Enable/disable downstream device access to this device's configuration and data. Valid values: `enable`, `disable`.
	DownstreamAccess pulumi.StringPtrInput
	// Default access profile for requests from downstream devices.
	DownstreamAccprofile pulumi.StringPtrInput
	// true or false, set this parameter to true when using dynamic forEach + toset to configure and sort sub-tables, please do not set this parameter when configuring static sub-tables.
	DynamicSortSubtable pulumi.StringPtrInput
	// Fabric connector configuration. The structure of `fabricConnector` block is documented below.
	FabricConnectors SystemCsfFabricConnectorArrayInput
	// Fabric device configuration. The structure of `fabricDevice` block is documented below.
	FabricDevices SystemCsfFabricDeviceArrayInput
	// Fabric CMDB Object Unification Valid values: `default`, `local`.
	FabricObjectUnification pulumi.StringPtrInput
	// Number of worker processes for Security Fabric daemon.
	FabricWorkers pulumi.IntPtrInput
	// Auto-generated fixed key used when this device is the root. (Will automatically be generated if not set.)
	FixedKey pulumi.StringPtrInput
	// Fabric FortiCloud account unification. Valid values: `enable`, `disable`.
	ForticloudAccountEnforcement pulumi.StringPtrInput
	// Security Fabric group name. All FortiGates in a Security Fabric must have the same group name.
	GroupName pulumi.StringPtrInput
	// Security Fabric group password. All FortiGates in a Security Fabric must have the same group password.
	GroupPassword pulumi.StringPtrInput
	// Enable/disable broadcast of discovery messages for log unification. Valid values: `disable`, `enable`.
	LogUnification pulumi.StringPtrInput
	// Management IP address of this FortiGate. Used to log into this FortiGate from another FortiGate in the Security Fabric.
	ManagementIp pulumi.StringPtrInput
	// Overriding port for management connection (Overrides admin port).
	ManagementPort pulumi.IntPtrInput
	// SAML setting configuration synchronization. Valid values: `default`, `local`.
	SamlConfigurationSync pulumi.StringPtrInput
	// Enable/disable Security Fabric. Valid values: `enable`, `disable`.
	Status pulumi.StringInput
	// Pre-authorized and blocked security fabric nodes. The structure of `trustedList` block is documented below.
	TrustedLists SystemCsfTrustedListArrayInput
	// IP/FQDN of the FortiGate upstream from this FortiGate in the Security Fabric.
	Upstream pulumi.StringPtrInput
	// IP address of the FortiGate upstream from this FortiGate in the Security Fabric.
	UpstreamIp pulumi.StringPtrInput
	// The port number to use to communicate with the FortiGate upstream from this FortiGate in the Security Fabric (default = 8013).
	UpstreamPort pulumi.IntPtrInput
	// Specifies the vdom to which the resource will be applied when the FortiGate unit is running in VDOM mode. Only one vdom can be specified. If you want to inherit the vdom configuration of the provider, please do not set this parameter.
	Vdomparam pulumi.StringPtrInput
}

func (SystemCsfArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*systemCsfArgs)(nil)).Elem()
}

type SystemCsfInput interface {
	pulumi.Input

	ToSystemCsfOutput() SystemCsfOutput
	ToSystemCsfOutputWithContext(ctx context.Context) SystemCsfOutput
}

func (*SystemCsf) ElementType() reflect.Type {
	return reflect.TypeOf((**SystemCsf)(nil)).Elem()
}

func (i *SystemCsf) ToSystemCsfOutput() SystemCsfOutput {
	return i.ToSystemCsfOutputWithContext(context.Background())
}

func (i *SystemCsf) ToSystemCsfOutputWithContext(ctx context.Context) SystemCsfOutput {
	return pulumi.ToOutputWithContext(ctx, i).(SystemCsfOutput)
}

// SystemCsfArrayInput is an input type that accepts SystemCsfArray and SystemCsfArrayOutput values.
// You can construct a concrete instance of `SystemCsfArrayInput` via:
//
//          SystemCsfArray{ SystemCsfArgs{...} }
type SystemCsfArrayInput interface {
	pulumi.Input

	ToSystemCsfArrayOutput() SystemCsfArrayOutput
	ToSystemCsfArrayOutputWithContext(context.Context) SystemCsfArrayOutput
}

type SystemCsfArray []SystemCsfInput

func (SystemCsfArray) ElementType() reflect.Type {
	return reflect.TypeOf((*[]*SystemCsf)(nil)).Elem()
}

func (i SystemCsfArray) ToSystemCsfArrayOutput() SystemCsfArrayOutput {
	return i.ToSystemCsfArrayOutputWithContext(context.Background())
}

func (i SystemCsfArray) ToSystemCsfArrayOutputWithContext(ctx context.Context) SystemCsfArrayOutput {
	return pulumi.ToOutputWithContext(ctx, i).(SystemCsfArrayOutput)
}

// SystemCsfMapInput is an input type that accepts SystemCsfMap and SystemCsfMapOutput values.
// You can construct a concrete instance of `SystemCsfMapInput` via:
//
//          SystemCsfMap{ "key": SystemCsfArgs{...} }
type SystemCsfMapInput interface {
	pulumi.Input

	ToSystemCsfMapOutput() SystemCsfMapOutput
	ToSystemCsfMapOutputWithContext(context.Context) SystemCsfMapOutput
}

type SystemCsfMap map[string]SystemCsfInput

func (SystemCsfMap) ElementType() reflect.Type {
	return reflect.TypeOf((*map[string]*SystemCsf)(nil)).Elem()
}

func (i SystemCsfMap) ToSystemCsfMapOutput() SystemCsfMapOutput {
	return i.ToSystemCsfMapOutputWithContext(context.Background())
}

func (i SystemCsfMap) ToSystemCsfMapOutputWithContext(ctx context.Context) SystemCsfMapOutput {
	return pulumi.ToOutputWithContext(ctx, i).(SystemCsfMapOutput)
}

type SystemCsfOutput struct{ *pulumi.OutputState }

func (SystemCsfOutput) ElementType() reflect.Type {
	return reflect.TypeOf((**SystemCsf)(nil)).Elem()
}

func (o SystemCsfOutput) ToSystemCsfOutput() SystemCsfOutput {
	return o
}

func (o SystemCsfOutput) ToSystemCsfOutputWithContext(ctx context.Context) SystemCsfOutput {
	return o
}

type SystemCsfArrayOutput struct{ *pulumi.OutputState }

func (SystemCsfArrayOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*[]*SystemCsf)(nil)).Elem()
}

func (o SystemCsfArrayOutput) ToSystemCsfArrayOutput() SystemCsfArrayOutput {
	return o
}

func (o SystemCsfArrayOutput) ToSystemCsfArrayOutputWithContext(ctx context.Context) SystemCsfArrayOutput {
	return o
}

func (o SystemCsfArrayOutput) Index(i pulumi.IntInput) SystemCsfOutput {
	return pulumi.All(o, i).ApplyT(func(vs []interface{}) *SystemCsf {
		return vs[0].([]*SystemCsf)[vs[1].(int)]
	}).(SystemCsfOutput)
}

type SystemCsfMapOutput struct{ *pulumi.OutputState }

func (SystemCsfMapOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*map[string]*SystemCsf)(nil)).Elem()
}

func (o SystemCsfMapOutput) ToSystemCsfMapOutput() SystemCsfMapOutput {
	return o
}

func (o SystemCsfMapOutput) ToSystemCsfMapOutputWithContext(ctx context.Context) SystemCsfMapOutput {
	return o
}

func (o SystemCsfMapOutput) MapIndex(k pulumi.StringInput) SystemCsfOutput {
	return pulumi.All(o, k).ApplyT(func(vs []interface{}) *SystemCsf {
		return vs[0].(map[string]*SystemCsf)[vs[1].(string)]
	}).(SystemCsfOutput)
}

func init() {
	pulumi.RegisterInputType(reflect.TypeOf((*SystemCsfInput)(nil)).Elem(), &SystemCsf{})
	pulumi.RegisterInputType(reflect.TypeOf((*SystemCsfArrayInput)(nil)).Elem(), SystemCsfArray{})
	pulumi.RegisterInputType(reflect.TypeOf((*SystemCsfMapInput)(nil)).Elem(), SystemCsfMap{})
	pulumi.RegisterOutputType(SystemCsfOutput{})
	pulumi.RegisterOutputType(SystemCsfArrayOutput{})
	pulumi.RegisterOutputType(SystemCsfMapOutput{})
}
