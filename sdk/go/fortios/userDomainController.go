// *** WARNING: this file was generated by the Pulumi Terraform Bridge (tfgen) Tool. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

package fortios

import (
	"context"
	"reflect"

	"github.com/pkg/errors"
	"github.com/pulumi/pulumi/sdk/v3/go/pulumi"
)

// Configure domain controller entries.
//
// ## Example Usage
//
// ```go
// package main
//
// import (
// 	"fmt"
//
// 	"github.com/pulumi/pulumi-fortios/sdk/go/fortios"
// 	"github.com/pulumi/pulumi/sdk/v3/go/pulumi"
// )
//
// func main() {
// 	pulumi.Run(func(ctx *pulumi.Context) error {
// 		trname1, err := fortios.NewUserLdap(ctx, "trname1", &fortios.UserLdapArgs{
// 			AccountKeyFilter:      pulumi.String(fmt.Sprintf("%v%v%v", "(&(userPrincipalName=", "%", "s)(!(UserAccountControl:1.2.840.113556.1.4.803:=2)))")),
// 			AccountKeyProcessing:  pulumi.String("same"),
// 			Cnid:                  pulumi.String("cn"),
// 			Dn:                    pulumi.String("EIWNCIEW"),
// 			GroupMemberCheck:      pulumi.String("user-attr"),
// 			GroupObjectFilter:     pulumi.String("(&(objectcategory=group)(member=*))"),
// 			MemberAttr:            pulumi.String("memberOf"),
// 			PasswordExpiryWarning: pulumi.String("disable"),
// 			PasswordRenewal:       pulumi.String("disable"),
// 			Port:                  pulumi.Int(389),
// 			Secure:                pulumi.String("disable"),
// 			Server:                pulumi.String("1.1.1.1"),
// 			ServerIdentityCheck:   pulumi.String("disable"),
// 			SourceIp:              pulumi.String("0.0.0.0"),
// 			SslMinProtoVersion:    pulumi.String("default"),
// 			Type:                  pulumi.String("simple"),
// 		})
// 		if err != nil {
// 			return err
// 		}
// 		_, err = fortios.NewUserDomainController(ctx, "trname", &fortios.UserDomainControllerArgs{
// 			DomainName: pulumi.String("s.com"),
// 			IpAddress:  pulumi.String("1.1.1.1"),
// 			LdapServer: trname1.Name,
// 			Port:       pulumi.Int(445),
// 		})
// 		if err != nil {
// 			return err
// 		}
// 		return nil
// 	})
// }
// ```
//
// ## Import
//
// User DomainController can be imported using any of these accepted formats$ export "FORTIOS_IMPORT_TABLE"="true"
//
// ```sh
//  $ pulumi import fortios:index/userDomainController:UserDomainController labelname {{name}}
// ```
//
//  $ unset "FORTIOS_IMPORT_TABLE"
type UserDomainController struct {
	pulumi.CustomResourceState

	// Domain DNS name.
	DomainName pulumi.StringOutput `pulumi:"domainName"`
	// true or false, set this parameter to true when using dynamic forEach + toset to configure and sort sub-tables, please do not set this parameter when configuring static sub-tables.
	DynamicSortSubtable pulumi.StringPtrOutput `pulumi:"dynamicSortSubtable"`
	// extra servers. The structure of `extraServer` block is documented below.
	ExtraServers UserDomainControllerExtraServerArrayOutput `pulumi:"extraServers"`
	// Domain controller IP address.
	IpAddress pulumi.StringOutput `pulumi:"ipAddress"`
	// LDAP server name.
	LdapServer pulumi.StringOutput `pulumi:"ldapServer"`
	// Domain controller entry name.
	Name pulumi.StringOutput `pulumi:"name"`
	// Port to be used for communication with the domain controller (default = 445).
	Port pulumi.IntOutput `pulumi:"port"`
	// Specifies the vdom to which the resource will be applied when the FortiGate unit is running in VDOM mode. Only one vdom can be specified. If you want to inherit the vdom configuration of the provider, please do not set this parameter.
	Vdomparam pulumi.StringPtrOutput `pulumi:"vdomparam"`
}

// NewUserDomainController registers a new resource with the given unique name, arguments, and options.
func NewUserDomainController(ctx *pulumi.Context,
	name string, args *UserDomainControllerArgs, opts ...pulumi.ResourceOption) (*UserDomainController, error) {
	if args == nil {
		return nil, errors.New("missing one or more required arguments")
	}

	if args.IpAddress == nil {
		return nil, errors.New("invalid value for required argument 'IpAddress'")
	}
	if args.LdapServer == nil {
		return nil, errors.New("invalid value for required argument 'LdapServer'")
	}
	var resource UserDomainController
	err := ctx.RegisterResource("fortios:index/userDomainController:UserDomainController", name, args, &resource, opts...)
	if err != nil {
		return nil, err
	}
	return &resource, nil
}

// GetUserDomainController gets an existing UserDomainController resource's state with the given name, ID, and optional
// state properties that are used to uniquely qualify the lookup (nil if not required).
func GetUserDomainController(ctx *pulumi.Context,
	name string, id pulumi.IDInput, state *UserDomainControllerState, opts ...pulumi.ResourceOption) (*UserDomainController, error) {
	var resource UserDomainController
	err := ctx.ReadResource("fortios:index/userDomainController:UserDomainController", name, id, state, &resource, opts...)
	if err != nil {
		return nil, err
	}
	return &resource, nil
}

// Input properties used for looking up and filtering UserDomainController resources.
type userDomainControllerState struct {
	// Domain DNS name.
	DomainName *string `pulumi:"domainName"`
	// true or false, set this parameter to true when using dynamic forEach + toset to configure and sort sub-tables, please do not set this parameter when configuring static sub-tables.
	DynamicSortSubtable *string `pulumi:"dynamicSortSubtable"`
	// extra servers. The structure of `extraServer` block is documented below.
	ExtraServers []UserDomainControllerExtraServer `pulumi:"extraServers"`
	// Domain controller IP address.
	IpAddress *string `pulumi:"ipAddress"`
	// LDAP server name.
	LdapServer *string `pulumi:"ldapServer"`
	// Domain controller entry name.
	Name *string `pulumi:"name"`
	// Port to be used for communication with the domain controller (default = 445).
	Port *int `pulumi:"port"`
	// Specifies the vdom to which the resource will be applied when the FortiGate unit is running in VDOM mode. Only one vdom can be specified. If you want to inherit the vdom configuration of the provider, please do not set this parameter.
	Vdomparam *string `pulumi:"vdomparam"`
}

type UserDomainControllerState struct {
	// Domain DNS name.
	DomainName pulumi.StringPtrInput
	// true or false, set this parameter to true when using dynamic forEach + toset to configure and sort sub-tables, please do not set this parameter when configuring static sub-tables.
	DynamicSortSubtable pulumi.StringPtrInput
	// extra servers. The structure of `extraServer` block is documented below.
	ExtraServers UserDomainControllerExtraServerArrayInput
	// Domain controller IP address.
	IpAddress pulumi.StringPtrInput
	// LDAP server name.
	LdapServer pulumi.StringPtrInput
	// Domain controller entry name.
	Name pulumi.StringPtrInput
	// Port to be used for communication with the domain controller (default = 445).
	Port pulumi.IntPtrInput
	// Specifies the vdom to which the resource will be applied when the FortiGate unit is running in VDOM mode. Only one vdom can be specified. If you want to inherit the vdom configuration of the provider, please do not set this parameter.
	Vdomparam pulumi.StringPtrInput
}

func (UserDomainControllerState) ElementType() reflect.Type {
	return reflect.TypeOf((*userDomainControllerState)(nil)).Elem()
}

type userDomainControllerArgs struct {
	// Domain DNS name.
	DomainName *string `pulumi:"domainName"`
	// true or false, set this parameter to true when using dynamic forEach + toset to configure and sort sub-tables, please do not set this parameter when configuring static sub-tables.
	DynamicSortSubtable *string `pulumi:"dynamicSortSubtable"`
	// extra servers. The structure of `extraServer` block is documented below.
	ExtraServers []UserDomainControllerExtraServer `pulumi:"extraServers"`
	// Domain controller IP address.
	IpAddress string `pulumi:"ipAddress"`
	// LDAP server name.
	LdapServer string `pulumi:"ldapServer"`
	// Domain controller entry name.
	Name *string `pulumi:"name"`
	// Port to be used for communication with the domain controller (default = 445).
	Port *int `pulumi:"port"`
	// Specifies the vdom to which the resource will be applied when the FortiGate unit is running in VDOM mode. Only one vdom can be specified. If you want to inherit the vdom configuration of the provider, please do not set this parameter.
	Vdomparam *string `pulumi:"vdomparam"`
}

// The set of arguments for constructing a UserDomainController resource.
type UserDomainControllerArgs struct {
	// Domain DNS name.
	DomainName pulumi.StringPtrInput
	// true or false, set this parameter to true when using dynamic forEach + toset to configure and sort sub-tables, please do not set this parameter when configuring static sub-tables.
	DynamicSortSubtable pulumi.StringPtrInput
	// extra servers. The structure of `extraServer` block is documented below.
	ExtraServers UserDomainControllerExtraServerArrayInput
	// Domain controller IP address.
	IpAddress pulumi.StringInput
	// LDAP server name.
	LdapServer pulumi.StringInput
	// Domain controller entry name.
	Name pulumi.StringPtrInput
	// Port to be used for communication with the domain controller (default = 445).
	Port pulumi.IntPtrInput
	// Specifies the vdom to which the resource will be applied when the FortiGate unit is running in VDOM mode. Only one vdom can be specified. If you want to inherit the vdom configuration of the provider, please do not set this parameter.
	Vdomparam pulumi.StringPtrInput
}

func (UserDomainControllerArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*userDomainControllerArgs)(nil)).Elem()
}

type UserDomainControllerInput interface {
	pulumi.Input

	ToUserDomainControllerOutput() UserDomainControllerOutput
	ToUserDomainControllerOutputWithContext(ctx context.Context) UserDomainControllerOutput
}

func (*UserDomainController) ElementType() reflect.Type {
	return reflect.TypeOf((*UserDomainController)(nil))
}

func (i *UserDomainController) ToUserDomainControllerOutput() UserDomainControllerOutput {
	return i.ToUserDomainControllerOutputWithContext(context.Background())
}

func (i *UserDomainController) ToUserDomainControllerOutputWithContext(ctx context.Context) UserDomainControllerOutput {
	return pulumi.ToOutputWithContext(ctx, i).(UserDomainControllerOutput)
}

func (i *UserDomainController) ToUserDomainControllerPtrOutput() UserDomainControllerPtrOutput {
	return i.ToUserDomainControllerPtrOutputWithContext(context.Background())
}

func (i *UserDomainController) ToUserDomainControllerPtrOutputWithContext(ctx context.Context) UserDomainControllerPtrOutput {
	return pulumi.ToOutputWithContext(ctx, i).(UserDomainControllerPtrOutput)
}

type UserDomainControllerPtrInput interface {
	pulumi.Input

	ToUserDomainControllerPtrOutput() UserDomainControllerPtrOutput
	ToUserDomainControllerPtrOutputWithContext(ctx context.Context) UserDomainControllerPtrOutput
}

type userDomainControllerPtrType UserDomainControllerArgs

func (*userDomainControllerPtrType) ElementType() reflect.Type {
	return reflect.TypeOf((**UserDomainController)(nil))
}

func (i *userDomainControllerPtrType) ToUserDomainControllerPtrOutput() UserDomainControllerPtrOutput {
	return i.ToUserDomainControllerPtrOutputWithContext(context.Background())
}

func (i *userDomainControllerPtrType) ToUserDomainControllerPtrOutputWithContext(ctx context.Context) UserDomainControllerPtrOutput {
	return pulumi.ToOutputWithContext(ctx, i).(UserDomainControllerPtrOutput)
}

// UserDomainControllerArrayInput is an input type that accepts UserDomainControllerArray and UserDomainControllerArrayOutput values.
// You can construct a concrete instance of `UserDomainControllerArrayInput` via:
//
//          UserDomainControllerArray{ UserDomainControllerArgs{...} }
type UserDomainControllerArrayInput interface {
	pulumi.Input

	ToUserDomainControllerArrayOutput() UserDomainControllerArrayOutput
	ToUserDomainControllerArrayOutputWithContext(context.Context) UserDomainControllerArrayOutput
}

type UserDomainControllerArray []UserDomainControllerInput

func (UserDomainControllerArray) ElementType() reflect.Type {
	return reflect.TypeOf(([]*UserDomainController)(nil))
}

func (i UserDomainControllerArray) ToUserDomainControllerArrayOutput() UserDomainControllerArrayOutput {
	return i.ToUserDomainControllerArrayOutputWithContext(context.Background())
}

func (i UserDomainControllerArray) ToUserDomainControllerArrayOutputWithContext(ctx context.Context) UserDomainControllerArrayOutput {
	return pulumi.ToOutputWithContext(ctx, i).(UserDomainControllerArrayOutput)
}

// UserDomainControllerMapInput is an input type that accepts UserDomainControllerMap and UserDomainControllerMapOutput values.
// You can construct a concrete instance of `UserDomainControllerMapInput` via:
//
//          UserDomainControllerMap{ "key": UserDomainControllerArgs{...} }
type UserDomainControllerMapInput interface {
	pulumi.Input

	ToUserDomainControllerMapOutput() UserDomainControllerMapOutput
	ToUserDomainControllerMapOutputWithContext(context.Context) UserDomainControllerMapOutput
}

type UserDomainControllerMap map[string]UserDomainControllerInput

func (UserDomainControllerMap) ElementType() reflect.Type {
	return reflect.TypeOf((map[string]*UserDomainController)(nil))
}

func (i UserDomainControllerMap) ToUserDomainControllerMapOutput() UserDomainControllerMapOutput {
	return i.ToUserDomainControllerMapOutputWithContext(context.Background())
}

func (i UserDomainControllerMap) ToUserDomainControllerMapOutputWithContext(ctx context.Context) UserDomainControllerMapOutput {
	return pulumi.ToOutputWithContext(ctx, i).(UserDomainControllerMapOutput)
}

type UserDomainControllerOutput struct {
	*pulumi.OutputState
}

func (UserDomainControllerOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*UserDomainController)(nil))
}

func (o UserDomainControllerOutput) ToUserDomainControllerOutput() UserDomainControllerOutput {
	return o
}

func (o UserDomainControllerOutput) ToUserDomainControllerOutputWithContext(ctx context.Context) UserDomainControllerOutput {
	return o
}

func (o UserDomainControllerOutput) ToUserDomainControllerPtrOutput() UserDomainControllerPtrOutput {
	return o.ToUserDomainControllerPtrOutputWithContext(context.Background())
}

func (o UserDomainControllerOutput) ToUserDomainControllerPtrOutputWithContext(ctx context.Context) UserDomainControllerPtrOutput {
	return o.ApplyT(func(v UserDomainController) *UserDomainController {
		return &v
	}).(UserDomainControllerPtrOutput)
}

type UserDomainControllerPtrOutput struct {
	*pulumi.OutputState
}

func (UserDomainControllerPtrOutput) ElementType() reflect.Type {
	return reflect.TypeOf((**UserDomainController)(nil))
}

func (o UserDomainControllerPtrOutput) ToUserDomainControllerPtrOutput() UserDomainControllerPtrOutput {
	return o
}

func (o UserDomainControllerPtrOutput) ToUserDomainControllerPtrOutputWithContext(ctx context.Context) UserDomainControllerPtrOutput {
	return o
}

type UserDomainControllerArrayOutput struct{ *pulumi.OutputState }

func (UserDomainControllerArrayOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*[]UserDomainController)(nil))
}

func (o UserDomainControllerArrayOutput) ToUserDomainControllerArrayOutput() UserDomainControllerArrayOutput {
	return o
}

func (o UserDomainControllerArrayOutput) ToUserDomainControllerArrayOutputWithContext(ctx context.Context) UserDomainControllerArrayOutput {
	return o
}

func (o UserDomainControllerArrayOutput) Index(i pulumi.IntInput) UserDomainControllerOutput {
	return pulumi.All(o, i).ApplyT(func(vs []interface{}) UserDomainController {
		return vs[0].([]UserDomainController)[vs[1].(int)]
	}).(UserDomainControllerOutput)
}

type UserDomainControllerMapOutput struct{ *pulumi.OutputState }

func (UserDomainControllerMapOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*map[string]UserDomainController)(nil))
}

func (o UserDomainControllerMapOutput) ToUserDomainControllerMapOutput() UserDomainControllerMapOutput {
	return o
}

func (o UserDomainControllerMapOutput) ToUserDomainControllerMapOutputWithContext(ctx context.Context) UserDomainControllerMapOutput {
	return o
}

func (o UserDomainControllerMapOutput) MapIndex(k pulumi.StringInput) UserDomainControllerOutput {
	return pulumi.All(o, k).ApplyT(func(vs []interface{}) UserDomainController {
		return vs[0].(map[string]UserDomainController)[vs[1].(string)]
	}).(UserDomainControllerOutput)
}

func init() {
	pulumi.RegisterOutputType(UserDomainControllerOutput{})
	pulumi.RegisterOutputType(UserDomainControllerPtrOutput{})
	pulumi.RegisterOutputType(UserDomainControllerArrayOutput{})
	pulumi.RegisterOutputType(UserDomainControllerMapOutput{})
}
