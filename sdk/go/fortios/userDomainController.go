// *** WARNING: this file was generated by the Pulumi Terraform Bridge (tfgen) Tool. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

package fortios

import (
	"context"
	"reflect"

	"github.com/pkg/errors"
	"github.com/pulumi/pulumi/sdk/v3/go/pulumi"
)

// Configure domain controller entries.
//
// ## Example Usage
//
// ```go
// package main
//
// import (
// 	"fmt"
//
// 	"github.com/lubyou/pulumi-fortios/sdk/go/fortios"
// 	"github.com/pulumi/pulumi/sdk/v3/go/pulumi"
// )
//
// func main() {
// 	pulumi.Run(func(ctx *pulumi.Context) error {
// 		trname1, err := fortios.NewUserLdap(ctx, "trname1", &fortios.UserLdapArgs{
// 			AccountKeyFilter:      pulumi.String(fmt.Sprintf("%v%v%v", "(&(userPrincipalName=", "%", "s)(!(UserAccountControl:1.2.840.113556.1.4.803:=2)))")),
// 			AccountKeyProcessing:  pulumi.String("same"),
// 			Cnid:                  pulumi.String("cn"),
// 			Dn:                    pulumi.String("EIWNCIEW"),
// 			GroupMemberCheck:      pulumi.String("user-attr"),
// 			GroupObjectFilter:     pulumi.String("(&(objectcategory=group)(member=*))"),
// 			MemberAttr:            pulumi.String("memberOf"),
// 			PasswordExpiryWarning: pulumi.String("disable"),
// 			PasswordRenewal:       pulumi.String("disable"),
// 			Port:                  pulumi.Int(389),
// 			Secure:                pulumi.String("disable"),
// 			Server:                pulumi.String("1.1.1.1"),
// 			ServerIdentityCheck:   pulumi.String("disable"),
// 			SourceIp:              pulumi.String("0.0.0.0"),
// 			SslMinProtoVersion:    pulumi.String("default"),
// 			Type:                  pulumi.String("simple"),
// 		})
// 		if err != nil {
// 			return err
// 		}
// 		_, err = fortios.NewUserDomainController(ctx, "trname", &fortios.UserDomainControllerArgs{
// 			DomainName: pulumi.String("s.com"),
// 			IpAddress:  pulumi.String("1.1.1.1"),
// 			LdapServer: trname1.Name,
// 			Port:       pulumi.Int(445),
// 		})
// 		if err != nil {
// 			return err
// 		}
// 		return nil
// 	})
// }
// ```
//
// ## Import
//
// User DomainController can be imported using any of these accepted formats$ export "FORTIOS_IMPORT_TABLE"="true"
//
// ```sh
//  $ pulumi import fortios:index/userDomainController:UserDomainController labelname {{name}}
// ```
//
//  $ unset "FORTIOS_IMPORT_TABLE"
type UserDomainController struct {
	pulumi.CustomResourceState

	// Set Active Directory mode. Valid values: `none`, `ds`, `lds`.
	AdMode pulumi.StringOutput `pulumi:"adMode"`
	// AD LDS distinguished name.
	AdldsDn pulumi.StringOutput `pulumi:"adldsDn"`
	// AD LDS IPv6 address.
	AdldsIp6 pulumi.StringOutput `pulumi:"adldsIp6"`
	// AD LDS IPv4 address.
	AdldsIpAddress pulumi.StringOutput `pulumi:"adldsIpAddress"`
	// Port number of AD LDS service (default = 389).
	AdldsPort pulumi.IntOutput `pulumi:"adldsPort"`
	// Enable/disable DNS service lookup. Valid values: `enable`, `disable`.
	DnsSrvLookup pulumi.StringOutput `pulumi:"dnsSrvLookup"`
	// Domain DNS name.
	DomainName pulumi.StringOutput `pulumi:"domainName"`
	// true or false, set this parameter to true when using dynamic forEach + toset to configure and sort sub-tables, please do not set this parameter when configuring static sub-tables.
	DynamicSortSubtable pulumi.StringPtrOutput `pulumi:"dynamicSortSubtable"`
	// extra servers. The structure of `extraServer` block is documented below.
	ExtraServers UserDomainControllerExtraServerArrayOutput `pulumi:"extraServers"`
	// Hostname of the server to connect to.
	Hostname pulumi.StringOutput `pulumi:"hostname"`
	// Specify outgoing interface to reach server.
	Interface pulumi.StringOutput `pulumi:"interface"`
	// Specify how to select outgoing interface to reach server. Valid values: `auto`, `sdwan`, `specify`.
	InterfaceSelectMethod pulumi.StringOutput `pulumi:"interfaceSelectMethod"`
	// Domain controller IPv6 address.
	Ip6 pulumi.StringOutput `pulumi:"ip6"`
	// Domain controller IP address.
	IpAddress pulumi.StringOutput `pulumi:"ipAddress"`
	// LDAP server name.
	LdapServer pulumi.StringOutput `pulumi:"ldapServer"`
	// Domain controller entry name.
	Name pulumi.StringOutput `pulumi:"name"`
	// Password for specified username.
	Password pulumi.StringPtrOutput `pulumi:"password"`
	// Port to be used for communication with the domain controller (default = 445).
	Port pulumi.IntOutput `pulumi:"port"`
	// Port to be used for communication with the domain controller for replication service. Port number 0 indicates automatic discovery.
	ReplicationPort pulumi.IntOutput `pulumi:"replicationPort"`
	// FortiGate IPv6 address to be used for communication with the domain controller.
	SourceIp6 pulumi.StringOutput `pulumi:"sourceIp6"`
	// FortiGate IPv4 address to be used for communication with the domain controller.
	SourceIpAddress pulumi.StringOutput `pulumi:"sourceIpAddress"`
	// Source port to be used for communication with the domain controller.
	SourcePort pulumi.IntOutput `pulumi:"sourcePort"`
	// User name to sign in with. Must have proper permissions for service.
	Username pulumi.StringOutput `pulumi:"username"`
	// Specifies the vdom to which the resource will be applied when the FortiGate unit is running in VDOM mode. Only one vdom can be specified. If you want to inherit the vdom configuration of the provider, please do not set this parameter.
	Vdomparam pulumi.StringPtrOutput `pulumi:"vdomparam"`
}

// NewUserDomainController registers a new resource with the given unique name, arguments, and options.
func NewUserDomainController(ctx *pulumi.Context,
	name string, args *UserDomainControllerArgs, opts ...pulumi.ResourceOption) (*UserDomainController, error) {
	if args == nil {
		return nil, errors.New("missing one or more required arguments")
	}

	if args.IpAddress == nil {
		return nil, errors.New("invalid value for required argument 'IpAddress'")
	}
	if args.LdapServer == nil {
		return nil, errors.New("invalid value for required argument 'LdapServer'")
	}
	opts = pkgResourceDefaultOpts(opts)
	var resource UserDomainController
	err := ctx.RegisterResource("fortios:index/userDomainController:UserDomainController", name, args, &resource, opts...)
	if err != nil {
		return nil, err
	}
	return &resource, nil
}

// GetUserDomainController gets an existing UserDomainController resource's state with the given name, ID, and optional
// state properties that are used to uniquely qualify the lookup (nil if not required).
func GetUserDomainController(ctx *pulumi.Context,
	name string, id pulumi.IDInput, state *UserDomainControllerState, opts ...pulumi.ResourceOption) (*UserDomainController, error) {
	var resource UserDomainController
	err := ctx.ReadResource("fortios:index/userDomainController:UserDomainController", name, id, state, &resource, opts...)
	if err != nil {
		return nil, err
	}
	return &resource, nil
}

// Input properties used for looking up and filtering UserDomainController resources.
type userDomainControllerState struct {
	// Set Active Directory mode. Valid values: `none`, `ds`, `lds`.
	AdMode *string `pulumi:"adMode"`
	// AD LDS distinguished name.
	AdldsDn *string `pulumi:"adldsDn"`
	// AD LDS IPv6 address.
	AdldsIp6 *string `pulumi:"adldsIp6"`
	// AD LDS IPv4 address.
	AdldsIpAddress *string `pulumi:"adldsIpAddress"`
	// Port number of AD LDS service (default = 389).
	AdldsPort *int `pulumi:"adldsPort"`
	// Enable/disable DNS service lookup. Valid values: `enable`, `disable`.
	DnsSrvLookup *string `pulumi:"dnsSrvLookup"`
	// Domain DNS name.
	DomainName *string `pulumi:"domainName"`
	// true or false, set this parameter to true when using dynamic forEach + toset to configure and sort sub-tables, please do not set this parameter when configuring static sub-tables.
	DynamicSortSubtable *string `pulumi:"dynamicSortSubtable"`
	// extra servers. The structure of `extraServer` block is documented below.
	ExtraServers []UserDomainControllerExtraServer `pulumi:"extraServers"`
	// Hostname of the server to connect to.
	Hostname *string `pulumi:"hostname"`
	// Specify outgoing interface to reach server.
	Interface *string `pulumi:"interface"`
	// Specify how to select outgoing interface to reach server. Valid values: `auto`, `sdwan`, `specify`.
	InterfaceSelectMethod *string `pulumi:"interfaceSelectMethod"`
	// Domain controller IPv6 address.
	Ip6 *string `pulumi:"ip6"`
	// Domain controller IP address.
	IpAddress *string `pulumi:"ipAddress"`
	// LDAP server name.
	LdapServer *string `pulumi:"ldapServer"`
	// Domain controller entry name.
	Name *string `pulumi:"name"`
	// Password for specified username.
	Password *string `pulumi:"password"`
	// Port to be used for communication with the domain controller (default = 445).
	Port *int `pulumi:"port"`
	// Port to be used for communication with the domain controller for replication service. Port number 0 indicates automatic discovery.
	ReplicationPort *int `pulumi:"replicationPort"`
	// FortiGate IPv6 address to be used for communication with the domain controller.
	SourceIp6 *string `pulumi:"sourceIp6"`
	// FortiGate IPv4 address to be used for communication with the domain controller.
	SourceIpAddress *string `pulumi:"sourceIpAddress"`
	// Source port to be used for communication with the domain controller.
	SourcePort *int `pulumi:"sourcePort"`
	// User name to sign in with. Must have proper permissions for service.
	Username *string `pulumi:"username"`
	// Specifies the vdom to which the resource will be applied when the FortiGate unit is running in VDOM mode. Only one vdom can be specified. If you want to inherit the vdom configuration of the provider, please do not set this parameter.
	Vdomparam *string `pulumi:"vdomparam"`
}

type UserDomainControllerState struct {
	// Set Active Directory mode. Valid values: `none`, `ds`, `lds`.
	AdMode pulumi.StringPtrInput
	// AD LDS distinguished name.
	AdldsDn pulumi.StringPtrInput
	// AD LDS IPv6 address.
	AdldsIp6 pulumi.StringPtrInput
	// AD LDS IPv4 address.
	AdldsIpAddress pulumi.StringPtrInput
	// Port number of AD LDS service (default = 389).
	AdldsPort pulumi.IntPtrInput
	// Enable/disable DNS service lookup. Valid values: `enable`, `disable`.
	DnsSrvLookup pulumi.StringPtrInput
	// Domain DNS name.
	DomainName pulumi.StringPtrInput
	// true or false, set this parameter to true when using dynamic forEach + toset to configure and sort sub-tables, please do not set this parameter when configuring static sub-tables.
	DynamicSortSubtable pulumi.StringPtrInput
	// extra servers. The structure of `extraServer` block is documented below.
	ExtraServers UserDomainControllerExtraServerArrayInput
	// Hostname of the server to connect to.
	Hostname pulumi.StringPtrInput
	// Specify outgoing interface to reach server.
	Interface pulumi.StringPtrInput
	// Specify how to select outgoing interface to reach server. Valid values: `auto`, `sdwan`, `specify`.
	InterfaceSelectMethod pulumi.StringPtrInput
	// Domain controller IPv6 address.
	Ip6 pulumi.StringPtrInput
	// Domain controller IP address.
	IpAddress pulumi.StringPtrInput
	// LDAP server name.
	LdapServer pulumi.StringPtrInput
	// Domain controller entry name.
	Name pulumi.StringPtrInput
	// Password for specified username.
	Password pulumi.StringPtrInput
	// Port to be used for communication with the domain controller (default = 445).
	Port pulumi.IntPtrInput
	// Port to be used for communication with the domain controller for replication service. Port number 0 indicates automatic discovery.
	ReplicationPort pulumi.IntPtrInput
	// FortiGate IPv6 address to be used for communication with the domain controller.
	SourceIp6 pulumi.StringPtrInput
	// FortiGate IPv4 address to be used for communication with the domain controller.
	SourceIpAddress pulumi.StringPtrInput
	// Source port to be used for communication with the domain controller.
	SourcePort pulumi.IntPtrInput
	// User name to sign in with. Must have proper permissions for service.
	Username pulumi.StringPtrInput
	// Specifies the vdom to which the resource will be applied when the FortiGate unit is running in VDOM mode. Only one vdom can be specified. If you want to inherit the vdom configuration of the provider, please do not set this parameter.
	Vdomparam pulumi.StringPtrInput
}

func (UserDomainControllerState) ElementType() reflect.Type {
	return reflect.TypeOf((*userDomainControllerState)(nil)).Elem()
}

type userDomainControllerArgs struct {
	// Set Active Directory mode. Valid values: `none`, `ds`, `lds`.
	AdMode *string `pulumi:"adMode"`
	// AD LDS distinguished name.
	AdldsDn *string `pulumi:"adldsDn"`
	// AD LDS IPv6 address.
	AdldsIp6 *string `pulumi:"adldsIp6"`
	// AD LDS IPv4 address.
	AdldsIpAddress *string `pulumi:"adldsIpAddress"`
	// Port number of AD LDS service (default = 389).
	AdldsPort *int `pulumi:"adldsPort"`
	// Enable/disable DNS service lookup. Valid values: `enable`, `disable`.
	DnsSrvLookup *string `pulumi:"dnsSrvLookup"`
	// Domain DNS name.
	DomainName *string `pulumi:"domainName"`
	// true or false, set this parameter to true when using dynamic forEach + toset to configure and sort sub-tables, please do not set this parameter when configuring static sub-tables.
	DynamicSortSubtable *string `pulumi:"dynamicSortSubtable"`
	// extra servers. The structure of `extraServer` block is documented below.
	ExtraServers []UserDomainControllerExtraServer `pulumi:"extraServers"`
	// Hostname of the server to connect to.
	Hostname *string `pulumi:"hostname"`
	// Specify outgoing interface to reach server.
	Interface *string `pulumi:"interface"`
	// Specify how to select outgoing interface to reach server. Valid values: `auto`, `sdwan`, `specify`.
	InterfaceSelectMethod *string `pulumi:"interfaceSelectMethod"`
	// Domain controller IPv6 address.
	Ip6 *string `pulumi:"ip6"`
	// Domain controller IP address.
	IpAddress string `pulumi:"ipAddress"`
	// LDAP server name.
	LdapServer string `pulumi:"ldapServer"`
	// Domain controller entry name.
	Name *string `pulumi:"name"`
	// Password for specified username.
	Password *string `pulumi:"password"`
	// Port to be used for communication with the domain controller (default = 445).
	Port *int `pulumi:"port"`
	// Port to be used for communication with the domain controller for replication service. Port number 0 indicates automatic discovery.
	ReplicationPort *int `pulumi:"replicationPort"`
	// FortiGate IPv6 address to be used for communication with the domain controller.
	SourceIp6 *string `pulumi:"sourceIp6"`
	// FortiGate IPv4 address to be used for communication with the domain controller.
	SourceIpAddress *string `pulumi:"sourceIpAddress"`
	// Source port to be used for communication with the domain controller.
	SourcePort *int `pulumi:"sourcePort"`
	// User name to sign in with. Must have proper permissions for service.
	Username *string `pulumi:"username"`
	// Specifies the vdom to which the resource will be applied when the FortiGate unit is running in VDOM mode. Only one vdom can be specified. If you want to inherit the vdom configuration of the provider, please do not set this parameter.
	Vdomparam *string `pulumi:"vdomparam"`
}

// The set of arguments for constructing a UserDomainController resource.
type UserDomainControllerArgs struct {
	// Set Active Directory mode. Valid values: `none`, `ds`, `lds`.
	AdMode pulumi.StringPtrInput
	// AD LDS distinguished name.
	AdldsDn pulumi.StringPtrInput
	// AD LDS IPv6 address.
	AdldsIp6 pulumi.StringPtrInput
	// AD LDS IPv4 address.
	AdldsIpAddress pulumi.StringPtrInput
	// Port number of AD LDS service (default = 389).
	AdldsPort pulumi.IntPtrInput
	// Enable/disable DNS service lookup. Valid values: `enable`, `disable`.
	DnsSrvLookup pulumi.StringPtrInput
	// Domain DNS name.
	DomainName pulumi.StringPtrInput
	// true or false, set this parameter to true when using dynamic forEach + toset to configure and sort sub-tables, please do not set this parameter when configuring static sub-tables.
	DynamicSortSubtable pulumi.StringPtrInput
	// extra servers. The structure of `extraServer` block is documented below.
	ExtraServers UserDomainControllerExtraServerArrayInput
	// Hostname of the server to connect to.
	Hostname pulumi.StringPtrInput
	// Specify outgoing interface to reach server.
	Interface pulumi.StringPtrInput
	// Specify how to select outgoing interface to reach server. Valid values: `auto`, `sdwan`, `specify`.
	InterfaceSelectMethod pulumi.StringPtrInput
	// Domain controller IPv6 address.
	Ip6 pulumi.StringPtrInput
	// Domain controller IP address.
	IpAddress pulumi.StringInput
	// LDAP server name.
	LdapServer pulumi.StringInput
	// Domain controller entry name.
	Name pulumi.StringPtrInput
	// Password for specified username.
	Password pulumi.StringPtrInput
	// Port to be used for communication with the domain controller (default = 445).
	Port pulumi.IntPtrInput
	// Port to be used for communication with the domain controller for replication service. Port number 0 indicates automatic discovery.
	ReplicationPort pulumi.IntPtrInput
	// FortiGate IPv6 address to be used for communication with the domain controller.
	SourceIp6 pulumi.StringPtrInput
	// FortiGate IPv4 address to be used for communication with the domain controller.
	SourceIpAddress pulumi.StringPtrInput
	// Source port to be used for communication with the domain controller.
	SourcePort pulumi.IntPtrInput
	// User name to sign in with. Must have proper permissions for service.
	Username pulumi.StringPtrInput
	// Specifies the vdom to which the resource will be applied when the FortiGate unit is running in VDOM mode. Only one vdom can be specified. If you want to inherit the vdom configuration of the provider, please do not set this parameter.
	Vdomparam pulumi.StringPtrInput
}

func (UserDomainControllerArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*userDomainControllerArgs)(nil)).Elem()
}

type UserDomainControllerInput interface {
	pulumi.Input

	ToUserDomainControllerOutput() UserDomainControllerOutput
	ToUserDomainControllerOutputWithContext(ctx context.Context) UserDomainControllerOutput
}

func (*UserDomainController) ElementType() reflect.Type {
	return reflect.TypeOf((**UserDomainController)(nil)).Elem()
}

func (i *UserDomainController) ToUserDomainControllerOutput() UserDomainControllerOutput {
	return i.ToUserDomainControllerOutputWithContext(context.Background())
}

func (i *UserDomainController) ToUserDomainControllerOutputWithContext(ctx context.Context) UserDomainControllerOutput {
	return pulumi.ToOutputWithContext(ctx, i).(UserDomainControllerOutput)
}

// UserDomainControllerArrayInput is an input type that accepts UserDomainControllerArray and UserDomainControllerArrayOutput values.
// You can construct a concrete instance of `UserDomainControllerArrayInput` via:
//
//          UserDomainControllerArray{ UserDomainControllerArgs{...} }
type UserDomainControllerArrayInput interface {
	pulumi.Input

	ToUserDomainControllerArrayOutput() UserDomainControllerArrayOutput
	ToUserDomainControllerArrayOutputWithContext(context.Context) UserDomainControllerArrayOutput
}

type UserDomainControllerArray []UserDomainControllerInput

func (UserDomainControllerArray) ElementType() reflect.Type {
	return reflect.TypeOf((*[]*UserDomainController)(nil)).Elem()
}

func (i UserDomainControllerArray) ToUserDomainControllerArrayOutput() UserDomainControllerArrayOutput {
	return i.ToUserDomainControllerArrayOutputWithContext(context.Background())
}

func (i UserDomainControllerArray) ToUserDomainControllerArrayOutputWithContext(ctx context.Context) UserDomainControllerArrayOutput {
	return pulumi.ToOutputWithContext(ctx, i).(UserDomainControllerArrayOutput)
}

// UserDomainControllerMapInput is an input type that accepts UserDomainControllerMap and UserDomainControllerMapOutput values.
// You can construct a concrete instance of `UserDomainControllerMapInput` via:
//
//          UserDomainControllerMap{ "key": UserDomainControllerArgs{...} }
type UserDomainControllerMapInput interface {
	pulumi.Input

	ToUserDomainControllerMapOutput() UserDomainControllerMapOutput
	ToUserDomainControllerMapOutputWithContext(context.Context) UserDomainControllerMapOutput
}

type UserDomainControllerMap map[string]UserDomainControllerInput

func (UserDomainControllerMap) ElementType() reflect.Type {
	return reflect.TypeOf((*map[string]*UserDomainController)(nil)).Elem()
}

func (i UserDomainControllerMap) ToUserDomainControllerMapOutput() UserDomainControllerMapOutput {
	return i.ToUserDomainControllerMapOutputWithContext(context.Background())
}

func (i UserDomainControllerMap) ToUserDomainControllerMapOutputWithContext(ctx context.Context) UserDomainControllerMapOutput {
	return pulumi.ToOutputWithContext(ctx, i).(UserDomainControllerMapOutput)
}

type UserDomainControllerOutput struct{ *pulumi.OutputState }

func (UserDomainControllerOutput) ElementType() reflect.Type {
	return reflect.TypeOf((**UserDomainController)(nil)).Elem()
}

func (o UserDomainControllerOutput) ToUserDomainControllerOutput() UserDomainControllerOutput {
	return o
}

func (o UserDomainControllerOutput) ToUserDomainControllerOutputWithContext(ctx context.Context) UserDomainControllerOutput {
	return o
}

type UserDomainControllerArrayOutput struct{ *pulumi.OutputState }

func (UserDomainControllerArrayOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*[]*UserDomainController)(nil)).Elem()
}

func (o UserDomainControllerArrayOutput) ToUserDomainControllerArrayOutput() UserDomainControllerArrayOutput {
	return o
}

func (o UserDomainControllerArrayOutput) ToUserDomainControllerArrayOutputWithContext(ctx context.Context) UserDomainControllerArrayOutput {
	return o
}

func (o UserDomainControllerArrayOutput) Index(i pulumi.IntInput) UserDomainControllerOutput {
	return pulumi.All(o, i).ApplyT(func(vs []interface{}) *UserDomainController {
		return vs[0].([]*UserDomainController)[vs[1].(int)]
	}).(UserDomainControllerOutput)
}

type UserDomainControllerMapOutput struct{ *pulumi.OutputState }

func (UserDomainControllerMapOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*map[string]*UserDomainController)(nil)).Elem()
}

func (o UserDomainControllerMapOutput) ToUserDomainControllerMapOutput() UserDomainControllerMapOutput {
	return o
}

func (o UserDomainControllerMapOutput) ToUserDomainControllerMapOutputWithContext(ctx context.Context) UserDomainControllerMapOutput {
	return o
}

func (o UserDomainControllerMapOutput) MapIndex(k pulumi.StringInput) UserDomainControllerOutput {
	return pulumi.All(o, k).ApplyT(func(vs []interface{}) *UserDomainController {
		return vs[0].(map[string]*UserDomainController)[vs[1].(string)]
	}).(UserDomainControllerOutput)
}

func init() {
	pulumi.RegisterInputType(reflect.TypeOf((*UserDomainControllerInput)(nil)).Elem(), &UserDomainController{})
	pulumi.RegisterInputType(reflect.TypeOf((*UserDomainControllerArrayInput)(nil)).Elem(), UserDomainControllerArray{})
	pulumi.RegisterInputType(reflect.TypeOf((*UserDomainControllerMapInput)(nil)).Elem(), UserDomainControllerMap{})
	pulumi.RegisterOutputType(UserDomainControllerOutput{})
	pulumi.RegisterOutputType(UserDomainControllerArrayOutput{})
	pulumi.RegisterOutputType(UserDomainControllerMapOutput{})
}
