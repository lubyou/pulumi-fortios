// Code generated by the Pulumi Terraform Bridge (tfgen) Tool DO NOT EDIT.
// *** WARNING: Do not edit by hand unless you're certain you know what you are doing! ***

package fortios

import (
	"context"
	"reflect"

	"github.com/lubyou/pulumi-fortios/sdk/go/fortios/internal"
	"github.com/pulumi/pulumi/sdk/v3/go/pulumi"
	"github.com/pulumi/pulumi/sdk/v3/go/pulumix"
)

type VirtualPatchProfile struct {
	pulumi.CustomResourceState

	Action              pulumi.StringOutput                     `pulumi:"action"`
	Comment             pulumi.StringPtrOutput                  `pulumi:"comment"`
	DynamicSortSubtable pulumi.StringPtrOutput                  `pulumi:"dynamicSortSubtable"`
	Exemptions          VirtualPatchProfileExemptionArrayOutput `pulumi:"exemptions"`
	GetAllTables        pulumi.StringPtrOutput                  `pulumi:"getAllTables"`
	Log                 pulumi.StringOutput                     `pulumi:"log"`
	Name                pulumi.StringOutput                     `pulumi:"name"`
	Severity            pulumi.StringOutput                     `pulumi:"severity"`
	Vdomparam           pulumi.StringPtrOutput                  `pulumi:"vdomparam"`
}

// NewVirtualPatchProfile registers a new resource with the given unique name, arguments, and options.
func NewVirtualPatchProfile(ctx *pulumi.Context,
	name string, args *VirtualPatchProfileArgs, opts ...pulumi.ResourceOption) (*VirtualPatchProfile, error) {
	if args == nil {
		args = &VirtualPatchProfileArgs{}
	}

	opts = internal.PkgResourceDefaultOpts(opts)
	var resource VirtualPatchProfile
	err := ctx.RegisterResource("fortios:index/virtualPatchProfile:VirtualPatchProfile", name, args, &resource, opts...)
	if err != nil {
		return nil, err
	}
	return &resource, nil
}

// GetVirtualPatchProfile gets an existing VirtualPatchProfile resource's state with the given name, ID, and optional
// state properties that are used to uniquely qualify the lookup (nil if not required).
func GetVirtualPatchProfile(ctx *pulumi.Context,
	name string, id pulumi.IDInput, state *VirtualPatchProfileState, opts ...pulumi.ResourceOption) (*VirtualPatchProfile, error) {
	var resource VirtualPatchProfile
	err := ctx.ReadResource("fortios:index/virtualPatchProfile:VirtualPatchProfile", name, id, state, &resource, opts...)
	if err != nil {
		return nil, err
	}
	return &resource, nil
}

// Input properties used for looking up and filtering VirtualPatchProfile resources.
type virtualPatchProfileState struct {
	Action              *string                        `pulumi:"action"`
	Comment             *string                        `pulumi:"comment"`
	DynamicSortSubtable *string                        `pulumi:"dynamicSortSubtable"`
	Exemptions          []VirtualPatchProfileExemption `pulumi:"exemptions"`
	GetAllTables        *string                        `pulumi:"getAllTables"`
	Log                 *string                        `pulumi:"log"`
	Name                *string                        `pulumi:"name"`
	Severity            *string                        `pulumi:"severity"`
	Vdomparam           *string                        `pulumi:"vdomparam"`
}

type VirtualPatchProfileState struct {
	Action              pulumi.StringPtrInput
	Comment             pulumi.StringPtrInput
	DynamicSortSubtable pulumi.StringPtrInput
	Exemptions          VirtualPatchProfileExemptionArrayInput
	GetAllTables        pulumi.StringPtrInput
	Log                 pulumi.StringPtrInput
	Name                pulumi.StringPtrInput
	Severity            pulumi.StringPtrInput
	Vdomparam           pulumi.StringPtrInput
}

func (VirtualPatchProfileState) ElementType() reflect.Type {
	return reflect.TypeOf((*virtualPatchProfileState)(nil)).Elem()
}

type virtualPatchProfileArgs struct {
	Action              *string                        `pulumi:"action"`
	Comment             *string                        `pulumi:"comment"`
	DynamicSortSubtable *string                        `pulumi:"dynamicSortSubtable"`
	Exemptions          []VirtualPatchProfileExemption `pulumi:"exemptions"`
	GetAllTables        *string                        `pulumi:"getAllTables"`
	Log                 *string                        `pulumi:"log"`
	Name                *string                        `pulumi:"name"`
	Severity            *string                        `pulumi:"severity"`
	Vdomparam           *string                        `pulumi:"vdomparam"`
}

// The set of arguments for constructing a VirtualPatchProfile resource.
type VirtualPatchProfileArgs struct {
	Action              pulumi.StringPtrInput
	Comment             pulumi.StringPtrInput
	DynamicSortSubtable pulumi.StringPtrInput
	Exemptions          VirtualPatchProfileExemptionArrayInput
	GetAllTables        pulumi.StringPtrInput
	Log                 pulumi.StringPtrInput
	Name                pulumi.StringPtrInput
	Severity            pulumi.StringPtrInput
	Vdomparam           pulumi.StringPtrInput
}

func (VirtualPatchProfileArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*virtualPatchProfileArgs)(nil)).Elem()
}

type VirtualPatchProfileInput interface {
	pulumi.Input

	ToVirtualPatchProfileOutput() VirtualPatchProfileOutput
	ToVirtualPatchProfileOutputWithContext(ctx context.Context) VirtualPatchProfileOutput
}

func (*VirtualPatchProfile) ElementType() reflect.Type {
	return reflect.TypeOf((**VirtualPatchProfile)(nil)).Elem()
}

func (i *VirtualPatchProfile) ToVirtualPatchProfileOutput() VirtualPatchProfileOutput {
	return i.ToVirtualPatchProfileOutputWithContext(context.Background())
}

func (i *VirtualPatchProfile) ToVirtualPatchProfileOutputWithContext(ctx context.Context) VirtualPatchProfileOutput {
	return pulumi.ToOutputWithContext(ctx, i).(VirtualPatchProfileOutput)
}

func (i *VirtualPatchProfile) ToOutput(ctx context.Context) pulumix.Output[*VirtualPatchProfile] {
	return pulumix.Output[*VirtualPatchProfile]{
		OutputState: i.ToVirtualPatchProfileOutputWithContext(ctx).OutputState,
	}
}

// VirtualPatchProfileArrayInput is an input type that accepts VirtualPatchProfileArray and VirtualPatchProfileArrayOutput values.
// You can construct a concrete instance of `VirtualPatchProfileArrayInput` via:
//
//	VirtualPatchProfileArray{ VirtualPatchProfileArgs{...} }
type VirtualPatchProfileArrayInput interface {
	pulumi.Input

	ToVirtualPatchProfileArrayOutput() VirtualPatchProfileArrayOutput
	ToVirtualPatchProfileArrayOutputWithContext(context.Context) VirtualPatchProfileArrayOutput
}

type VirtualPatchProfileArray []VirtualPatchProfileInput

func (VirtualPatchProfileArray) ElementType() reflect.Type {
	return reflect.TypeOf((*[]*VirtualPatchProfile)(nil)).Elem()
}

func (i VirtualPatchProfileArray) ToVirtualPatchProfileArrayOutput() VirtualPatchProfileArrayOutput {
	return i.ToVirtualPatchProfileArrayOutputWithContext(context.Background())
}

func (i VirtualPatchProfileArray) ToVirtualPatchProfileArrayOutputWithContext(ctx context.Context) VirtualPatchProfileArrayOutput {
	return pulumi.ToOutputWithContext(ctx, i).(VirtualPatchProfileArrayOutput)
}

func (i VirtualPatchProfileArray) ToOutput(ctx context.Context) pulumix.Output[[]*VirtualPatchProfile] {
	return pulumix.Output[[]*VirtualPatchProfile]{
		OutputState: i.ToVirtualPatchProfileArrayOutputWithContext(ctx).OutputState,
	}
}

// VirtualPatchProfileMapInput is an input type that accepts VirtualPatchProfileMap and VirtualPatchProfileMapOutput values.
// You can construct a concrete instance of `VirtualPatchProfileMapInput` via:
//
//	VirtualPatchProfileMap{ "key": VirtualPatchProfileArgs{...} }
type VirtualPatchProfileMapInput interface {
	pulumi.Input

	ToVirtualPatchProfileMapOutput() VirtualPatchProfileMapOutput
	ToVirtualPatchProfileMapOutputWithContext(context.Context) VirtualPatchProfileMapOutput
}

type VirtualPatchProfileMap map[string]VirtualPatchProfileInput

func (VirtualPatchProfileMap) ElementType() reflect.Type {
	return reflect.TypeOf((*map[string]*VirtualPatchProfile)(nil)).Elem()
}

func (i VirtualPatchProfileMap) ToVirtualPatchProfileMapOutput() VirtualPatchProfileMapOutput {
	return i.ToVirtualPatchProfileMapOutputWithContext(context.Background())
}

func (i VirtualPatchProfileMap) ToVirtualPatchProfileMapOutputWithContext(ctx context.Context) VirtualPatchProfileMapOutput {
	return pulumi.ToOutputWithContext(ctx, i).(VirtualPatchProfileMapOutput)
}

func (i VirtualPatchProfileMap) ToOutput(ctx context.Context) pulumix.Output[map[string]*VirtualPatchProfile] {
	return pulumix.Output[map[string]*VirtualPatchProfile]{
		OutputState: i.ToVirtualPatchProfileMapOutputWithContext(ctx).OutputState,
	}
}

type VirtualPatchProfileOutput struct{ *pulumi.OutputState }

func (VirtualPatchProfileOutput) ElementType() reflect.Type {
	return reflect.TypeOf((**VirtualPatchProfile)(nil)).Elem()
}

func (o VirtualPatchProfileOutput) ToVirtualPatchProfileOutput() VirtualPatchProfileOutput {
	return o
}

func (o VirtualPatchProfileOutput) ToVirtualPatchProfileOutputWithContext(ctx context.Context) VirtualPatchProfileOutput {
	return o
}

func (o VirtualPatchProfileOutput) ToOutput(ctx context.Context) pulumix.Output[*VirtualPatchProfile] {
	return pulumix.Output[*VirtualPatchProfile]{
		OutputState: o.OutputState,
	}
}

func (o VirtualPatchProfileOutput) Action() pulumi.StringOutput {
	return o.ApplyT(func(v *VirtualPatchProfile) pulumi.StringOutput { return v.Action }).(pulumi.StringOutput)
}

func (o VirtualPatchProfileOutput) Comment() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *VirtualPatchProfile) pulumi.StringPtrOutput { return v.Comment }).(pulumi.StringPtrOutput)
}

func (o VirtualPatchProfileOutput) DynamicSortSubtable() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *VirtualPatchProfile) pulumi.StringPtrOutput { return v.DynamicSortSubtable }).(pulumi.StringPtrOutput)
}

func (o VirtualPatchProfileOutput) Exemptions() VirtualPatchProfileExemptionArrayOutput {
	return o.ApplyT(func(v *VirtualPatchProfile) VirtualPatchProfileExemptionArrayOutput { return v.Exemptions }).(VirtualPatchProfileExemptionArrayOutput)
}

func (o VirtualPatchProfileOutput) GetAllTables() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *VirtualPatchProfile) pulumi.StringPtrOutput { return v.GetAllTables }).(pulumi.StringPtrOutput)
}

func (o VirtualPatchProfileOutput) Log() pulumi.StringOutput {
	return o.ApplyT(func(v *VirtualPatchProfile) pulumi.StringOutput { return v.Log }).(pulumi.StringOutput)
}

func (o VirtualPatchProfileOutput) Name() pulumi.StringOutput {
	return o.ApplyT(func(v *VirtualPatchProfile) pulumi.StringOutput { return v.Name }).(pulumi.StringOutput)
}

func (o VirtualPatchProfileOutput) Severity() pulumi.StringOutput {
	return o.ApplyT(func(v *VirtualPatchProfile) pulumi.StringOutput { return v.Severity }).(pulumi.StringOutput)
}

func (o VirtualPatchProfileOutput) Vdomparam() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *VirtualPatchProfile) pulumi.StringPtrOutput { return v.Vdomparam }).(pulumi.StringPtrOutput)
}

type VirtualPatchProfileArrayOutput struct{ *pulumi.OutputState }

func (VirtualPatchProfileArrayOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*[]*VirtualPatchProfile)(nil)).Elem()
}

func (o VirtualPatchProfileArrayOutput) ToVirtualPatchProfileArrayOutput() VirtualPatchProfileArrayOutput {
	return o
}

func (o VirtualPatchProfileArrayOutput) ToVirtualPatchProfileArrayOutputWithContext(ctx context.Context) VirtualPatchProfileArrayOutput {
	return o
}

func (o VirtualPatchProfileArrayOutput) ToOutput(ctx context.Context) pulumix.Output[[]*VirtualPatchProfile] {
	return pulumix.Output[[]*VirtualPatchProfile]{
		OutputState: o.OutputState,
	}
}

func (o VirtualPatchProfileArrayOutput) Index(i pulumi.IntInput) VirtualPatchProfileOutput {
	return pulumi.All(o, i).ApplyT(func(vs []interface{}) *VirtualPatchProfile {
		return vs[0].([]*VirtualPatchProfile)[vs[1].(int)]
	}).(VirtualPatchProfileOutput)
}

type VirtualPatchProfileMapOutput struct{ *pulumi.OutputState }

func (VirtualPatchProfileMapOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*map[string]*VirtualPatchProfile)(nil)).Elem()
}

func (o VirtualPatchProfileMapOutput) ToVirtualPatchProfileMapOutput() VirtualPatchProfileMapOutput {
	return o
}

func (o VirtualPatchProfileMapOutput) ToVirtualPatchProfileMapOutputWithContext(ctx context.Context) VirtualPatchProfileMapOutput {
	return o
}

func (o VirtualPatchProfileMapOutput) ToOutput(ctx context.Context) pulumix.Output[map[string]*VirtualPatchProfile] {
	return pulumix.Output[map[string]*VirtualPatchProfile]{
		OutputState: o.OutputState,
	}
}

func (o VirtualPatchProfileMapOutput) MapIndex(k pulumi.StringInput) VirtualPatchProfileOutput {
	return pulumi.All(o, k).ApplyT(func(vs []interface{}) *VirtualPatchProfile {
		return vs[0].(map[string]*VirtualPatchProfile)[vs[1].(string)]
	}).(VirtualPatchProfileOutput)
}

func init() {
	pulumi.RegisterInputType(reflect.TypeOf((*VirtualPatchProfileInput)(nil)).Elem(), &VirtualPatchProfile{})
	pulumi.RegisterInputType(reflect.TypeOf((*VirtualPatchProfileArrayInput)(nil)).Elem(), VirtualPatchProfileArray{})
	pulumi.RegisterInputType(reflect.TypeOf((*VirtualPatchProfileMapInput)(nil)).Elem(), VirtualPatchProfileMap{})
	pulumi.RegisterOutputType(VirtualPatchProfileOutput{})
	pulumi.RegisterOutputType(VirtualPatchProfileArrayOutput{})
	pulumi.RegisterOutputType(VirtualPatchProfileMapOutput{})
}
