// *** WARNING: this file was generated by the Pulumi Terraform Bridge (tfgen) Tool. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

package fortios

import (
	"context"
	"reflect"

	"github.com/pkg/errors"
	"github.com/pulumi/pulumi/sdk/v3/go/pulumi"
)

// Configure URL filter lists.
//
// ## Example Usage
//
// ```go
// package main
//
// import (
// 	"github.com/pulumi/pulumi-fortios/sdk/go/fortios"
// 	"github.com/pulumi/pulumi/sdk/v3/go/pulumi"
// )
//
// func main() {
// 	pulumi.Run(func(ctx *pulumi.Context) error {
// 		_, err := fortios.NewWebfilterUrlfilter(ctx, "trname", &fortios.WebfilterUrlfilterArgs{
// 			Fosid:              pulumi.Int(1),
// 			IpAddrBlock:        pulumi.String("enable"),
// 			OneArmIpsUrlfilter: pulumi.String("enable"),
// 		})
// 		if err != nil {
// 			return err
// 		}
// 		return nil
// 	})
// }
// ```
//
// ## Import
//
// Webfilter Urlfilter can be imported using any of these accepted formats$ export "FORTIOS_IMPORT_TABLE"="true"
//
// ```sh
//  $ pulumi import fortios:index/webfilterUrlfilter:WebfilterUrlfilter labelname {{fosid}}
// ```
//
//  $ unset "FORTIOS_IMPORT_TABLE"
type WebfilterUrlfilter struct {
	pulumi.CustomResourceState

	// Optional comments.
	Comment pulumi.StringPtrOutput `pulumi:"comment"`
	// true or false, set this parameter to true when using dynamic forEach + toset to configure and sort sub-tables, please do not set this parameter when configuring static sub-tables.
	DynamicSortSubtable pulumi.StringPtrOutput `pulumi:"dynamicSortSubtable"`
	// URL filter entries. The structure of `entries` block is documented below.
	Entries WebfilterUrlfilterEntryArrayOutput `pulumi:"entries"`
	// ID.
	Fosid pulumi.IntOutput `pulumi:"fosid"`
	// Enable/disable blocking URLs when the hostname appears as an IP address. Valid values: `enable`, `disable`.
	IpAddrBlock pulumi.StringOutput `pulumi:"ipAddrBlock"`
	// Name of URL filter list.
	Name pulumi.StringOutput `pulumi:"name"`
	// Enable/disable DNS resolver for one-arm IPS URL filter operation. Valid values: `enable`, `disable`.
	OneArmIpsUrlfilter pulumi.StringOutput `pulumi:"oneArmIpsUrlfilter"`
	// Specifies the vdom to which the resource will be applied when the FortiGate unit is running in VDOM mode. Only one vdom can be specified. If you want to inherit the vdom configuration of the provider, please do not set this parameter.
	Vdomparam pulumi.StringPtrOutput `pulumi:"vdomparam"`
}

// NewWebfilterUrlfilter registers a new resource with the given unique name, arguments, and options.
func NewWebfilterUrlfilter(ctx *pulumi.Context,
	name string, args *WebfilterUrlfilterArgs, opts ...pulumi.ResourceOption) (*WebfilterUrlfilter, error) {
	if args == nil {
		return nil, errors.New("missing one or more required arguments")
	}

	if args.Fosid == nil {
		return nil, errors.New("invalid value for required argument 'Fosid'")
	}
	opts = pkgResourceDefaultOpts(opts)
	var resource WebfilterUrlfilter
	err := ctx.RegisterResource("fortios:index/webfilterUrlfilter:WebfilterUrlfilter", name, args, &resource, opts...)
	if err != nil {
		return nil, err
	}
	return &resource, nil
}

// GetWebfilterUrlfilter gets an existing WebfilterUrlfilter resource's state with the given name, ID, and optional
// state properties that are used to uniquely qualify the lookup (nil if not required).
func GetWebfilterUrlfilter(ctx *pulumi.Context,
	name string, id pulumi.IDInput, state *WebfilterUrlfilterState, opts ...pulumi.ResourceOption) (*WebfilterUrlfilter, error) {
	var resource WebfilterUrlfilter
	err := ctx.ReadResource("fortios:index/webfilterUrlfilter:WebfilterUrlfilter", name, id, state, &resource, opts...)
	if err != nil {
		return nil, err
	}
	return &resource, nil
}

// Input properties used for looking up and filtering WebfilterUrlfilter resources.
type webfilterUrlfilterState struct {
	// Optional comments.
	Comment *string `pulumi:"comment"`
	// true or false, set this parameter to true when using dynamic forEach + toset to configure and sort sub-tables, please do not set this parameter when configuring static sub-tables.
	DynamicSortSubtable *string `pulumi:"dynamicSortSubtable"`
	// URL filter entries. The structure of `entries` block is documented below.
	Entries []WebfilterUrlfilterEntry `pulumi:"entries"`
	// ID.
	Fosid *int `pulumi:"fosid"`
	// Enable/disable blocking URLs when the hostname appears as an IP address. Valid values: `enable`, `disable`.
	IpAddrBlock *string `pulumi:"ipAddrBlock"`
	// Name of URL filter list.
	Name *string `pulumi:"name"`
	// Enable/disable DNS resolver for one-arm IPS URL filter operation. Valid values: `enable`, `disable`.
	OneArmIpsUrlfilter *string `pulumi:"oneArmIpsUrlfilter"`
	// Specifies the vdom to which the resource will be applied when the FortiGate unit is running in VDOM mode. Only one vdom can be specified. If you want to inherit the vdom configuration of the provider, please do not set this parameter.
	Vdomparam *string `pulumi:"vdomparam"`
}

type WebfilterUrlfilterState struct {
	// Optional comments.
	Comment pulumi.StringPtrInput
	// true or false, set this parameter to true when using dynamic forEach + toset to configure and sort sub-tables, please do not set this parameter when configuring static sub-tables.
	DynamicSortSubtable pulumi.StringPtrInput
	// URL filter entries. The structure of `entries` block is documented below.
	Entries WebfilterUrlfilterEntryArrayInput
	// ID.
	Fosid pulumi.IntPtrInput
	// Enable/disable blocking URLs when the hostname appears as an IP address. Valid values: `enable`, `disable`.
	IpAddrBlock pulumi.StringPtrInput
	// Name of URL filter list.
	Name pulumi.StringPtrInput
	// Enable/disable DNS resolver for one-arm IPS URL filter operation. Valid values: `enable`, `disable`.
	OneArmIpsUrlfilter pulumi.StringPtrInput
	// Specifies the vdom to which the resource will be applied when the FortiGate unit is running in VDOM mode. Only one vdom can be specified. If you want to inherit the vdom configuration of the provider, please do not set this parameter.
	Vdomparam pulumi.StringPtrInput
}

func (WebfilterUrlfilterState) ElementType() reflect.Type {
	return reflect.TypeOf((*webfilterUrlfilterState)(nil)).Elem()
}

type webfilterUrlfilterArgs struct {
	// Optional comments.
	Comment *string `pulumi:"comment"`
	// true or false, set this parameter to true when using dynamic forEach + toset to configure and sort sub-tables, please do not set this parameter when configuring static sub-tables.
	DynamicSortSubtable *string `pulumi:"dynamicSortSubtable"`
	// URL filter entries. The structure of `entries` block is documented below.
	Entries []WebfilterUrlfilterEntry `pulumi:"entries"`
	// ID.
	Fosid int `pulumi:"fosid"`
	// Enable/disable blocking URLs when the hostname appears as an IP address. Valid values: `enable`, `disable`.
	IpAddrBlock *string `pulumi:"ipAddrBlock"`
	// Name of URL filter list.
	Name *string `pulumi:"name"`
	// Enable/disable DNS resolver for one-arm IPS URL filter operation. Valid values: `enable`, `disable`.
	OneArmIpsUrlfilter *string `pulumi:"oneArmIpsUrlfilter"`
	// Specifies the vdom to which the resource will be applied when the FortiGate unit is running in VDOM mode. Only one vdom can be specified. If you want to inherit the vdom configuration of the provider, please do not set this parameter.
	Vdomparam *string `pulumi:"vdomparam"`
}

// The set of arguments for constructing a WebfilterUrlfilter resource.
type WebfilterUrlfilterArgs struct {
	// Optional comments.
	Comment pulumi.StringPtrInput
	// true or false, set this parameter to true when using dynamic forEach + toset to configure and sort sub-tables, please do not set this parameter when configuring static sub-tables.
	DynamicSortSubtable pulumi.StringPtrInput
	// URL filter entries. The structure of `entries` block is documented below.
	Entries WebfilterUrlfilterEntryArrayInput
	// ID.
	Fosid pulumi.IntInput
	// Enable/disable blocking URLs when the hostname appears as an IP address. Valid values: `enable`, `disable`.
	IpAddrBlock pulumi.StringPtrInput
	// Name of URL filter list.
	Name pulumi.StringPtrInput
	// Enable/disable DNS resolver for one-arm IPS URL filter operation. Valid values: `enable`, `disable`.
	OneArmIpsUrlfilter pulumi.StringPtrInput
	// Specifies the vdom to which the resource will be applied when the FortiGate unit is running in VDOM mode. Only one vdom can be specified. If you want to inherit the vdom configuration of the provider, please do not set this parameter.
	Vdomparam pulumi.StringPtrInput
}

func (WebfilterUrlfilterArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*webfilterUrlfilterArgs)(nil)).Elem()
}

type WebfilterUrlfilterInput interface {
	pulumi.Input

	ToWebfilterUrlfilterOutput() WebfilterUrlfilterOutput
	ToWebfilterUrlfilterOutputWithContext(ctx context.Context) WebfilterUrlfilterOutput
}

func (*WebfilterUrlfilter) ElementType() reflect.Type {
	return reflect.TypeOf((**WebfilterUrlfilter)(nil)).Elem()
}

func (i *WebfilterUrlfilter) ToWebfilterUrlfilterOutput() WebfilterUrlfilterOutput {
	return i.ToWebfilterUrlfilterOutputWithContext(context.Background())
}

func (i *WebfilterUrlfilter) ToWebfilterUrlfilterOutputWithContext(ctx context.Context) WebfilterUrlfilterOutput {
	return pulumi.ToOutputWithContext(ctx, i).(WebfilterUrlfilterOutput)
}

// WebfilterUrlfilterArrayInput is an input type that accepts WebfilterUrlfilterArray and WebfilterUrlfilterArrayOutput values.
// You can construct a concrete instance of `WebfilterUrlfilterArrayInput` via:
//
//          WebfilterUrlfilterArray{ WebfilterUrlfilterArgs{...} }
type WebfilterUrlfilterArrayInput interface {
	pulumi.Input

	ToWebfilterUrlfilterArrayOutput() WebfilterUrlfilterArrayOutput
	ToWebfilterUrlfilterArrayOutputWithContext(context.Context) WebfilterUrlfilterArrayOutput
}

type WebfilterUrlfilterArray []WebfilterUrlfilterInput

func (WebfilterUrlfilterArray) ElementType() reflect.Type {
	return reflect.TypeOf((*[]*WebfilterUrlfilter)(nil)).Elem()
}

func (i WebfilterUrlfilterArray) ToWebfilterUrlfilterArrayOutput() WebfilterUrlfilterArrayOutput {
	return i.ToWebfilterUrlfilterArrayOutputWithContext(context.Background())
}

func (i WebfilterUrlfilterArray) ToWebfilterUrlfilterArrayOutputWithContext(ctx context.Context) WebfilterUrlfilterArrayOutput {
	return pulumi.ToOutputWithContext(ctx, i).(WebfilterUrlfilterArrayOutput)
}

// WebfilterUrlfilterMapInput is an input type that accepts WebfilterUrlfilterMap and WebfilterUrlfilterMapOutput values.
// You can construct a concrete instance of `WebfilterUrlfilterMapInput` via:
//
//          WebfilterUrlfilterMap{ "key": WebfilterUrlfilterArgs{...} }
type WebfilterUrlfilterMapInput interface {
	pulumi.Input

	ToWebfilterUrlfilterMapOutput() WebfilterUrlfilterMapOutput
	ToWebfilterUrlfilterMapOutputWithContext(context.Context) WebfilterUrlfilterMapOutput
}

type WebfilterUrlfilterMap map[string]WebfilterUrlfilterInput

func (WebfilterUrlfilterMap) ElementType() reflect.Type {
	return reflect.TypeOf((*map[string]*WebfilterUrlfilter)(nil)).Elem()
}

func (i WebfilterUrlfilterMap) ToWebfilterUrlfilterMapOutput() WebfilterUrlfilterMapOutput {
	return i.ToWebfilterUrlfilterMapOutputWithContext(context.Background())
}

func (i WebfilterUrlfilterMap) ToWebfilterUrlfilterMapOutputWithContext(ctx context.Context) WebfilterUrlfilterMapOutput {
	return pulumi.ToOutputWithContext(ctx, i).(WebfilterUrlfilterMapOutput)
}

type WebfilterUrlfilterOutput struct{ *pulumi.OutputState }

func (WebfilterUrlfilterOutput) ElementType() reflect.Type {
	return reflect.TypeOf((**WebfilterUrlfilter)(nil)).Elem()
}

func (o WebfilterUrlfilterOutput) ToWebfilterUrlfilterOutput() WebfilterUrlfilterOutput {
	return o
}

func (o WebfilterUrlfilterOutput) ToWebfilterUrlfilterOutputWithContext(ctx context.Context) WebfilterUrlfilterOutput {
	return o
}

type WebfilterUrlfilterArrayOutput struct{ *pulumi.OutputState }

func (WebfilterUrlfilterArrayOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*[]*WebfilterUrlfilter)(nil)).Elem()
}

func (o WebfilterUrlfilterArrayOutput) ToWebfilterUrlfilterArrayOutput() WebfilterUrlfilterArrayOutput {
	return o
}

func (o WebfilterUrlfilterArrayOutput) ToWebfilterUrlfilterArrayOutputWithContext(ctx context.Context) WebfilterUrlfilterArrayOutput {
	return o
}

func (o WebfilterUrlfilterArrayOutput) Index(i pulumi.IntInput) WebfilterUrlfilterOutput {
	return pulumi.All(o, i).ApplyT(func(vs []interface{}) *WebfilterUrlfilter {
		return vs[0].([]*WebfilterUrlfilter)[vs[1].(int)]
	}).(WebfilterUrlfilterOutput)
}

type WebfilterUrlfilterMapOutput struct{ *pulumi.OutputState }

func (WebfilterUrlfilterMapOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*map[string]*WebfilterUrlfilter)(nil)).Elem()
}

func (o WebfilterUrlfilterMapOutput) ToWebfilterUrlfilterMapOutput() WebfilterUrlfilterMapOutput {
	return o
}

func (o WebfilterUrlfilterMapOutput) ToWebfilterUrlfilterMapOutputWithContext(ctx context.Context) WebfilterUrlfilterMapOutput {
	return o
}

func (o WebfilterUrlfilterMapOutput) MapIndex(k pulumi.StringInput) WebfilterUrlfilterOutput {
	return pulumi.All(o, k).ApplyT(func(vs []interface{}) *WebfilterUrlfilter {
		return vs[0].(map[string]*WebfilterUrlfilter)[vs[1].(string)]
	}).(WebfilterUrlfilterOutput)
}

func init() {
	pulumi.RegisterInputType(reflect.TypeOf((*WebfilterUrlfilterInput)(nil)).Elem(), &WebfilterUrlfilter{})
	pulumi.RegisterInputType(reflect.TypeOf((*WebfilterUrlfilterArrayInput)(nil)).Elem(), WebfilterUrlfilterArray{})
	pulumi.RegisterInputType(reflect.TypeOf((*WebfilterUrlfilterMapInput)(nil)).Elem(), WebfilterUrlfilterMap{})
	pulumi.RegisterOutputType(WebfilterUrlfilterOutput{})
	pulumi.RegisterOutputType(WebfilterUrlfilterArrayOutput{})
	pulumi.RegisterOutputType(WebfilterUrlfilterMapOutput{})
}
