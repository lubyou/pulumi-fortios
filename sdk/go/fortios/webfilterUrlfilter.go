// Code generated by the Pulumi Terraform Bridge (tfgen) Tool DO NOT EDIT.
// *** WARNING: Do not edit by hand unless you're certain you know what you are doing! ***

package fortios

import (
	"context"
	"reflect"

	"errors"
	"github.com/pulumi/pulumi/sdk/v3/go/pulumi"
)

type WebfilterUrlfilter struct {
	pulumi.CustomResourceState

	Comment             pulumi.StringPtrOutput             `pulumi:"comment"`
	DynamicSortSubtable pulumi.StringPtrOutput             `pulumi:"dynamicSortSubtable"`
	Entries             WebfilterUrlfilterEntryArrayOutput `pulumi:"entries"`
	Fosid               pulumi.IntOutput                   `pulumi:"fosid"`
	IpAddrBlock         pulumi.StringOutput                `pulumi:"ipAddrBlock"`
	Name                pulumi.StringOutput                `pulumi:"name"`
	OneArmIpsUrlfilter  pulumi.StringOutput                `pulumi:"oneArmIpsUrlfilter"`
	Vdomparam           pulumi.StringPtrOutput             `pulumi:"vdomparam"`
}

// NewWebfilterUrlfilter registers a new resource with the given unique name, arguments, and options.
func NewWebfilterUrlfilter(ctx *pulumi.Context,
	name string, args *WebfilterUrlfilterArgs, opts ...pulumi.ResourceOption) (*WebfilterUrlfilter, error) {
	if args == nil {
		return nil, errors.New("missing one or more required arguments")
	}

	if args.Fosid == nil {
		return nil, errors.New("invalid value for required argument 'Fosid'")
	}
	opts = pkgResourceDefaultOpts(opts)
	var resource WebfilterUrlfilter
	err := ctx.RegisterResource("fortios:index/webfilterUrlfilter:WebfilterUrlfilter", name, args, &resource, opts...)
	if err != nil {
		return nil, err
	}
	return &resource, nil
}

// GetWebfilterUrlfilter gets an existing WebfilterUrlfilter resource's state with the given name, ID, and optional
// state properties that are used to uniquely qualify the lookup (nil if not required).
func GetWebfilterUrlfilter(ctx *pulumi.Context,
	name string, id pulumi.IDInput, state *WebfilterUrlfilterState, opts ...pulumi.ResourceOption) (*WebfilterUrlfilter, error) {
	var resource WebfilterUrlfilter
	err := ctx.ReadResource("fortios:index/webfilterUrlfilter:WebfilterUrlfilter", name, id, state, &resource, opts...)
	if err != nil {
		return nil, err
	}
	return &resource, nil
}

// Input properties used for looking up and filtering WebfilterUrlfilter resources.
type webfilterUrlfilterState struct {
	Comment             *string                   `pulumi:"comment"`
	DynamicSortSubtable *string                   `pulumi:"dynamicSortSubtable"`
	Entries             []WebfilterUrlfilterEntry `pulumi:"entries"`
	Fosid               *int                      `pulumi:"fosid"`
	IpAddrBlock         *string                   `pulumi:"ipAddrBlock"`
	Name                *string                   `pulumi:"name"`
	OneArmIpsUrlfilter  *string                   `pulumi:"oneArmIpsUrlfilter"`
	Vdomparam           *string                   `pulumi:"vdomparam"`
}

type WebfilterUrlfilterState struct {
	Comment             pulumi.StringPtrInput
	DynamicSortSubtable pulumi.StringPtrInput
	Entries             WebfilterUrlfilterEntryArrayInput
	Fosid               pulumi.IntPtrInput
	IpAddrBlock         pulumi.StringPtrInput
	Name                pulumi.StringPtrInput
	OneArmIpsUrlfilter  pulumi.StringPtrInput
	Vdomparam           pulumi.StringPtrInput
}

func (WebfilterUrlfilterState) ElementType() reflect.Type {
	return reflect.TypeOf((*webfilterUrlfilterState)(nil)).Elem()
}

type webfilterUrlfilterArgs struct {
	Comment             *string                   `pulumi:"comment"`
	DynamicSortSubtable *string                   `pulumi:"dynamicSortSubtable"`
	Entries             []WebfilterUrlfilterEntry `pulumi:"entries"`
	Fosid               int                       `pulumi:"fosid"`
	IpAddrBlock         *string                   `pulumi:"ipAddrBlock"`
	Name                *string                   `pulumi:"name"`
	OneArmIpsUrlfilter  *string                   `pulumi:"oneArmIpsUrlfilter"`
	Vdomparam           *string                   `pulumi:"vdomparam"`
}

// The set of arguments for constructing a WebfilterUrlfilter resource.
type WebfilterUrlfilterArgs struct {
	Comment             pulumi.StringPtrInput
	DynamicSortSubtable pulumi.StringPtrInput
	Entries             WebfilterUrlfilterEntryArrayInput
	Fosid               pulumi.IntInput
	IpAddrBlock         pulumi.StringPtrInput
	Name                pulumi.StringPtrInput
	OneArmIpsUrlfilter  pulumi.StringPtrInput
	Vdomparam           pulumi.StringPtrInput
}

func (WebfilterUrlfilterArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*webfilterUrlfilterArgs)(nil)).Elem()
}

type WebfilterUrlfilterInput interface {
	pulumi.Input

	ToWebfilterUrlfilterOutput() WebfilterUrlfilterOutput
	ToWebfilterUrlfilterOutputWithContext(ctx context.Context) WebfilterUrlfilterOutput
}

func (*WebfilterUrlfilter) ElementType() reflect.Type {
	return reflect.TypeOf((**WebfilterUrlfilter)(nil)).Elem()
}

func (i *WebfilterUrlfilter) ToWebfilterUrlfilterOutput() WebfilterUrlfilterOutput {
	return i.ToWebfilterUrlfilterOutputWithContext(context.Background())
}

func (i *WebfilterUrlfilter) ToWebfilterUrlfilterOutputWithContext(ctx context.Context) WebfilterUrlfilterOutput {
	return pulumi.ToOutputWithContext(ctx, i).(WebfilterUrlfilterOutput)
}

// WebfilterUrlfilterArrayInput is an input type that accepts WebfilterUrlfilterArray and WebfilterUrlfilterArrayOutput values.
// You can construct a concrete instance of `WebfilterUrlfilterArrayInput` via:
//
//	WebfilterUrlfilterArray{ WebfilterUrlfilterArgs{...} }
type WebfilterUrlfilterArrayInput interface {
	pulumi.Input

	ToWebfilterUrlfilterArrayOutput() WebfilterUrlfilterArrayOutput
	ToWebfilterUrlfilterArrayOutputWithContext(context.Context) WebfilterUrlfilterArrayOutput
}

type WebfilterUrlfilterArray []WebfilterUrlfilterInput

func (WebfilterUrlfilterArray) ElementType() reflect.Type {
	return reflect.TypeOf((*[]*WebfilterUrlfilter)(nil)).Elem()
}

func (i WebfilterUrlfilterArray) ToWebfilterUrlfilterArrayOutput() WebfilterUrlfilterArrayOutput {
	return i.ToWebfilterUrlfilterArrayOutputWithContext(context.Background())
}

func (i WebfilterUrlfilterArray) ToWebfilterUrlfilterArrayOutputWithContext(ctx context.Context) WebfilterUrlfilterArrayOutput {
	return pulumi.ToOutputWithContext(ctx, i).(WebfilterUrlfilterArrayOutput)
}

// WebfilterUrlfilterMapInput is an input type that accepts WebfilterUrlfilterMap and WebfilterUrlfilterMapOutput values.
// You can construct a concrete instance of `WebfilterUrlfilterMapInput` via:
//
//	WebfilterUrlfilterMap{ "key": WebfilterUrlfilterArgs{...} }
type WebfilterUrlfilterMapInput interface {
	pulumi.Input

	ToWebfilterUrlfilterMapOutput() WebfilterUrlfilterMapOutput
	ToWebfilterUrlfilterMapOutputWithContext(context.Context) WebfilterUrlfilterMapOutput
}

type WebfilterUrlfilterMap map[string]WebfilterUrlfilterInput

func (WebfilterUrlfilterMap) ElementType() reflect.Type {
	return reflect.TypeOf((*map[string]*WebfilterUrlfilter)(nil)).Elem()
}

func (i WebfilterUrlfilterMap) ToWebfilterUrlfilterMapOutput() WebfilterUrlfilterMapOutput {
	return i.ToWebfilterUrlfilterMapOutputWithContext(context.Background())
}

func (i WebfilterUrlfilterMap) ToWebfilterUrlfilterMapOutputWithContext(ctx context.Context) WebfilterUrlfilterMapOutput {
	return pulumi.ToOutputWithContext(ctx, i).(WebfilterUrlfilterMapOutput)
}

type WebfilterUrlfilterOutput struct{ *pulumi.OutputState }

func (WebfilterUrlfilterOutput) ElementType() reflect.Type {
	return reflect.TypeOf((**WebfilterUrlfilter)(nil)).Elem()
}

func (o WebfilterUrlfilterOutput) ToWebfilterUrlfilterOutput() WebfilterUrlfilterOutput {
	return o
}

func (o WebfilterUrlfilterOutput) ToWebfilterUrlfilterOutputWithContext(ctx context.Context) WebfilterUrlfilterOutput {
	return o
}

func (o WebfilterUrlfilterOutput) Comment() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *WebfilterUrlfilter) pulumi.StringPtrOutput { return v.Comment }).(pulumi.StringPtrOutput)
}

func (o WebfilterUrlfilterOutput) DynamicSortSubtable() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *WebfilterUrlfilter) pulumi.StringPtrOutput { return v.DynamicSortSubtable }).(pulumi.StringPtrOutput)
}

func (o WebfilterUrlfilterOutput) Entries() WebfilterUrlfilterEntryArrayOutput {
	return o.ApplyT(func(v *WebfilterUrlfilter) WebfilterUrlfilterEntryArrayOutput { return v.Entries }).(WebfilterUrlfilterEntryArrayOutput)
}

func (o WebfilterUrlfilterOutput) Fosid() pulumi.IntOutput {
	return o.ApplyT(func(v *WebfilterUrlfilter) pulumi.IntOutput { return v.Fosid }).(pulumi.IntOutput)
}

func (o WebfilterUrlfilterOutput) IpAddrBlock() pulumi.StringOutput {
	return o.ApplyT(func(v *WebfilterUrlfilter) pulumi.StringOutput { return v.IpAddrBlock }).(pulumi.StringOutput)
}

func (o WebfilterUrlfilterOutput) Name() pulumi.StringOutput {
	return o.ApplyT(func(v *WebfilterUrlfilter) pulumi.StringOutput { return v.Name }).(pulumi.StringOutput)
}

func (o WebfilterUrlfilterOutput) OneArmIpsUrlfilter() pulumi.StringOutput {
	return o.ApplyT(func(v *WebfilterUrlfilter) pulumi.StringOutput { return v.OneArmIpsUrlfilter }).(pulumi.StringOutput)
}

func (o WebfilterUrlfilterOutput) Vdomparam() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *WebfilterUrlfilter) pulumi.StringPtrOutput { return v.Vdomparam }).(pulumi.StringPtrOutput)
}

type WebfilterUrlfilterArrayOutput struct{ *pulumi.OutputState }

func (WebfilterUrlfilterArrayOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*[]*WebfilterUrlfilter)(nil)).Elem()
}

func (o WebfilterUrlfilterArrayOutput) ToWebfilterUrlfilterArrayOutput() WebfilterUrlfilterArrayOutput {
	return o
}

func (o WebfilterUrlfilterArrayOutput) ToWebfilterUrlfilterArrayOutputWithContext(ctx context.Context) WebfilterUrlfilterArrayOutput {
	return o
}

func (o WebfilterUrlfilterArrayOutput) Index(i pulumi.IntInput) WebfilterUrlfilterOutput {
	return pulumi.All(o, i).ApplyT(func(vs []interface{}) *WebfilterUrlfilter {
		return vs[0].([]*WebfilterUrlfilter)[vs[1].(int)]
	}).(WebfilterUrlfilterOutput)
}

type WebfilterUrlfilterMapOutput struct{ *pulumi.OutputState }

func (WebfilterUrlfilterMapOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*map[string]*WebfilterUrlfilter)(nil)).Elem()
}

func (o WebfilterUrlfilterMapOutput) ToWebfilterUrlfilterMapOutput() WebfilterUrlfilterMapOutput {
	return o
}

func (o WebfilterUrlfilterMapOutput) ToWebfilterUrlfilterMapOutputWithContext(ctx context.Context) WebfilterUrlfilterMapOutput {
	return o
}

func (o WebfilterUrlfilterMapOutput) MapIndex(k pulumi.StringInput) WebfilterUrlfilterOutput {
	return pulumi.All(o, k).ApplyT(func(vs []interface{}) *WebfilterUrlfilter {
		return vs[0].(map[string]*WebfilterUrlfilter)[vs[1].(string)]
	}).(WebfilterUrlfilterOutput)
}

func init() {
	pulumi.RegisterInputType(reflect.TypeOf((*WebfilterUrlfilterInput)(nil)).Elem(), &WebfilterUrlfilter{})
	pulumi.RegisterInputType(reflect.TypeOf((*WebfilterUrlfilterArrayInput)(nil)).Elem(), WebfilterUrlfilterArray{})
	pulumi.RegisterInputType(reflect.TypeOf((*WebfilterUrlfilterMapInput)(nil)).Elem(), WebfilterUrlfilterMap{})
	pulumi.RegisterOutputType(WebfilterUrlfilterOutput{})
	pulumi.RegisterOutputType(WebfilterUrlfilterArrayOutput{})
	pulumi.RegisterOutputType(WebfilterUrlfilterMapOutput{})
}
