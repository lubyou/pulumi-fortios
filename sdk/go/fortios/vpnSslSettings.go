// *** WARNING: this file was generated by the Pulumi Terraform Bridge (tfgen) Tool. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

package fortios

import (
	"context"
	"reflect"

	"github.com/pulumi/pulumi/sdk/v3/go/pulumi"
)

// Configure SSL VPN.
//
// ## Example Usage
//
// ```go
// package main
//
// import (
// 	"github.com/pulumi/pulumi-fortios/sdk/go/fortios"
// 	"github.com/pulumi/pulumi/sdk/v3/go/pulumi"
// )
//
// func main() {
// 	pulumi.Run(func(ctx *pulumi.Context) error {
// 		_, err := fortios.NewVpnSslSettings(ctx, "trname", &fortios.VpnSslSettingsArgs{
// 			LoginAttemptLimit: pulumi.Int(2),
// 			LoginBlockTime:    pulumi.Int(60),
// 			LoginTimeout:      pulumi.Int(30),
// 			Port:              pulumi.Int(443),
// 			Servercert:        pulumi.String("self-sign"),
// 		})
// 		if err != nil {
// 			return err
// 		}
// 		return nil
// 	})
// }
// ```
//
// ## Import
//
// VpnSsl Settings can be imported using any of these accepted formats$ export "FORTIOS_IMPORT_TABLE"="true"
//
// ```sh
//  $ pulumi import fortios:index/vpnSslSettings:VpnSslSettings labelname VpnSslSettings
// ```
//
//  $ unset "FORTIOS_IMPORT_TABLE"
type VpnSslSettings struct {
	pulumi.CustomResourceState

	// Force the SSL-VPN security level. High allows only high. Medium allows medium and high. Low allows any. Valid values: `high`, `medium`, `default`, `low`.
	Algorithm pulumi.StringOutput `pulumi:"algorithm"`
	// Enable/disable checking of source IP for authentication session. Valid values: `enable`, `disable`.
	AuthSessionCheckSourceIp pulumi.StringOutput `pulumi:"authSessionCheckSourceIp"`
	// SSL-VPN authentication timeout (1 - 259200 sec (3 days), 0 for no timeout).
	AuthTimeout pulumi.IntOutput `pulumi:"authTimeout"`
	// Authentication rule for SSL VPN. The structure of `authenticationRule` block is documented below.
	AuthenticationRules VpnSslSettingsAuthenticationRuleArrayOutput `pulumi:"authenticationRules"`
	// Enable to auto-create static routes for the SSL-VPN tunnel IP addresses. Valid values: `enable`, `disable`.
	AutoTunnelStaticRoute pulumi.StringOutput `pulumi:"autoTunnelStaticRoute"`
	// Select one or more cipher technologies that cannot be used in SSL-VPN negotiations.
	BannedCipher pulumi.StringOutput `pulumi:"bannedCipher"`
	// Enable/disable verification of referer field in HTTP request header. Valid values: `enable`, `disable`.
	CheckReferer pulumi.StringOutput `pulumi:"checkReferer"`
	// Select one or more TLS 1.3 ciphersuites to enable. Does not affect ciphers in TLS 1.2 and below. At least one must be enabled. To disable all, set ssl-max-proto-ver to tls1-2 or below. Valid values: `TLS-AES-128-GCM-SHA256`, `TLS-AES-256-GCM-SHA384`, `TLS-CHACHA20-POLY1305-SHA256`, `TLS-AES-128-CCM-SHA256`, `TLS-AES-128-CCM-8-SHA256`.
	Ciphersuite pulumi.StringOutput `pulumi:"ciphersuite"`
	// Set signature algorithms related to client authentication. Affects TLS version <= 1.2 only. Valid values: `no-rsa-pss`, `all`.
	ClientSigalgs pulumi.StringOutput `pulumi:"clientSigalgs"`
	// Default SSL VPN portal.
	DefaultPortal pulumi.StringOutput `pulumi:"defaultPortal"`
	// Compression level (0~9).
	DeflateCompressionLevel pulumi.IntOutput `pulumi:"deflateCompressionLevel"`
	// Minimum amount of data that triggers compression (200 - 65535 bytes).
	DeflateMinDataSize pulumi.IntOutput `pulumi:"deflateMinDataSize"`
	// DNS server 1.
	DnsServer1 pulumi.StringOutput `pulumi:"dnsServer1"`
	// DNS server 2.
	DnsServer2 pulumi.StringOutput `pulumi:"dnsServer2"`
	// DNS suffix used for SSL-VPN clients.
	DnsSuffix pulumi.StringPtrOutput `pulumi:"dnsSuffix"`
	// SSLVPN maximum DTLS hello timeout (10 - 60 sec, default = 10).
	DtlsHelloTimeout pulumi.IntOutput `pulumi:"dtlsHelloTimeout"`
	// DTLS maximum protocol version. Valid values: `dtls1-0`, `dtls1-2`.
	DtlsMaxProtoVer pulumi.StringOutput `pulumi:"dtlsMaxProtoVer"`
	// DTLS minimum protocol version. Valid values: `dtls1-0`, `dtls1-2`.
	DtlsMinProtoVer pulumi.StringOutput `pulumi:"dtlsMinProtoVer"`
	// Enable DTLS to prevent eavesdropping, tampering, or message forgery. Valid values: `enable`, `disable`.
	DtlsTunnel pulumi.StringOutput `pulumi:"dtlsTunnel"`
	// Tunnel mode: enable parallel IPv4 and IPv6 tunnel. Web mode: support IPv4 and IPv6 bookmarks in the portal. Valid values: `enable`, `disable`.
	DualStackMode pulumi.StringOutput `pulumi:"dualStackMode"`
	// true or false, set this parameter to true when using dynamic forEach + toset to configure and sort sub-tables, please do not set this parameter when configuring static sub-tables.
	DynamicSortSubtable pulumi.StringPtrOutput `pulumi:"dynamicSortSubtable"`
	// Encode \2F sequence to forward slash in URLs. Valid values: `enable`, `disable`.
	Encode2fSequence pulumi.StringOutput `pulumi:"encode2fSequence"`
	// Encrypt and store user passwords for SSL-VPN web sessions. Valid values: `enable`, `disable`.
	EncryptAndStorePassword pulumi.StringOutput `pulumi:"encryptAndStorePassword"`
	// Enable to force two-factor authentication for all SSL-VPNs. Valid values: `enable`, `disable`.
	ForceTwoFactorAuth pulumi.StringOutput `pulumi:"forceTwoFactorAuth"`
	// Forward the same, add, or remove HTTP header. Valid values: `pass`, `add`, `remove`.
	HeaderXForwardedFor pulumi.StringOutput `pulumi:"headerXForwardedFor"`
	// Add HSTS includeSubDomains response header. Valid values: `enable`, `disable`.
	HstsIncludeSubdomains pulumi.StringOutput `pulumi:"hstsIncludeSubdomains"`
	// Enable to allow HTTP compression over SSL-VPN tunnels. Valid values: `enable`, `disable`.
	HttpCompression pulumi.StringOutput `pulumi:"httpCompression"`
	// Enable/disable SSL-VPN support for HttpOnly cookies. Valid values: `enable`, `disable`.
	HttpOnlyCookie pulumi.StringOutput `pulumi:"httpOnlyCookie"`
	// SSL-VPN session is disconnected if an HTTP request body is not received within this time (1 - 60 sec, default = 20).
	HttpRequestBodyTimeout pulumi.IntOutput `pulumi:"httpRequestBodyTimeout"`
	// SSL-VPN session is disconnected if an HTTP request header is not received within this time (1 - 60 sec, default = 20).
	HttpRequestHeaderTimeout pulumi.IntOutput `pulumi:"httpRequestHeaderTimeout"`
	// Enable/disable redirect of port 80 to SSL-VPN port. Valid values: `enable`, `disable`.
	HttpsRedirect pulumi.StringOutput `pulumi:"httpsRedirect"`
	// SSL VPN disconnects if idle for specified time in seconds.
	IdleTimeout pulumi.IntOutput `pulumi:"idleTimeout"`
	// IPv6 DNS server 1.
	Ipv6DnsServer1 pulumi.StringOutput `pulumi:"ipv6DnsServer1"`
	// IPv6 DNS server 2.
	Ipv6DnsServer2 pulumi.StringOutput `pulumi:"ipv6DnsServer2"`
	// IPv6 WINS server 1.
	Ipv6WinsServer1 pulumi.StringOutput `pulumi:"ipv6WinsServer1"`
	// IPv6 WINS server 2.
	Ipv6WinsServer2 pulumi.StringOutput `pulumi:"ipv6WinsServer2"`
	// SSL VPN maximum login attempt times before block (0 - 10, default = 2, 0 = no limit).
	LoginAttemptLimit pulumi.IntOutput `pulumi:"loginAttemptLimit"`
	// Time for which a user is blocked from logging in after too many failed login attempts (0 - 86400 sec, default = 60).
	LoginBlockTime pulumi.IntOutput `pulumi:"loginBlockTime"`
	// SSLVPN maximum login timeout (10 - 180 sec, default = 30).
	LoginTimeout pulumi.IntOutput `pulumi:"loginTimeout"`
	// SSL-VPN access port (1 - 65535).
	Port pulumi.IntOutput `pulumi:"port"`
	// Enable means that if SSL-VPN connections are allowed on an interface admin GUI connections are blocked on that interface. Valid values: `enable`, `disable`.
	PortPrecedence pulumi.StringOutput `pulumi:"portPrecedence"`
	// Enable to require client certificates for all SSL-VPN users. Valid values: `enable`, `disable`.
	Reqclientcert pulumi.StringOutput `pulumi:"reqclientcert"`
	// Enable to allow SSL-VPN sessions to bypass routing and bind to the incoming interface. Valid values: `enable`, `disable`.
	RouteSourceInterface pulumi.StringOutput `pulumi:"routeSourceInterface"`
	// SAML local redirect port in the machine running FCT (0 - 65535). 0 is to disable redirection on FGT side.
	SamlRedirectPort pulumi.IntOutput `pulumi:"samlRedirectPort"`
	// Name of the server certificate to be used for SSL-VPNs.
	Servercert pulumi.StringOutput `pulumi:"servercert"`
	// Enable/disable negated source IPv6 address match. Valid values: `enable`, `disable`.
	SourceAddress6Negate pulumi.StringOutput `pulumi:"sourceAddress6Negate"`
	// IPv6 source address of incoming traffic. The structure of `sourceAddress6` block is documented below.
	SourceAddress6s VpnSslSettingsSourceAddress6ArrayOutput `pulumi:"sourceAddress6s"`
	// Enable/disable negated source address match. Valid values: `enable`, `disable`.
	SourceAddressNegate pulumi.StringOutput `pulumi:"sourceAddressNegate"`
	// Source address of incoming traffic. The structure of `sourceAddress` block is documented below.
	SourceAddresses VpnSslSettingsSourceAddressArrayOutput `pulumi:"sourceAddresses"`
	// SSL VPN source interface of incoming traffic. The structure of `sourceInterface` block is documented below.
	SourceInterfaces VpnSslSettingsSourceInterfaceArrayOutput `pulumi:"sourceInterfaces"`
	// Enable to allow client renegotiation by the server if the tunnel goes down. Valid values: `disable`, `enable`.
	SslClientRenegotiation pulumi.StringOutput `pulumi:"sslClientRenegotiation"`
	// Enable/disable insertion of empty fragment. Valid values: `enable`, `disable`.
	SslInsertEmptyFragment pulumi.StringOutput `pulumi:"sslInsertEmptyFragment"`
	// SSL maximum protocol version. Valid values: `tls1-0`, `tls1-1`, `tls1-2`, `tls1-3`.
	SslMaxProtoVer pulumi.StringOutput `pulumi:"sslMaxProtoVer"`
	// SSL minimum protocol version. Valid values: `tls1-0`, `tls1-1`, `tls1-2`, `tls1-3`.
	SslMinProtoVer pulumi.StringOutput `pulumi:"sslMinProtoVer"`
	// Enable/disable SSL-VPN. Valid values: `enable`, `disable`.
	Status pulumi.StringOutput `pulumi:"status"`
	// Enable/disable TLSv1.0. Valid values: `enable`, `disable`.
	Tlsv10 pulumi.StringOutput `pulumi:"tlsv10"`
	// Enable/disable TLSv1.1. Valid values: `enable`, `disable`.
	Tlsv11 pulumi.StringOutput `pulumi:"tlsv11"`
	// Enable/disable TLSv1.2. Valid values: `enable`, `disable`.
	Tlsv12 pulumi.StringOutput `pulumi:"tlsv12"`
	// Enable/disable TLSv1.3. Valid values: `enable`, `disable`.
	Tlsv13 pulumi.StringOutput `pulumi:"tlsv13"`
	// Transform backward slashes to forward slashes in URLs. Valid values: `enable`, `disable`.
	TransformBackwardSlashes pulumi.StringOutput `pulumi:"transformBackwardSlashes"`
	// Method used for assigning address for tunnel. Valid values: `first-available`, `round-robin`.
	TunnelAddrAssignedMethod pulumi.StringOutput `pulumi:"tunnelAddrAssignedMethod"`
	// Enable/disable tunnel connection without re-authorization if previous connection dropped. Valid values: `enable`, `disable`.
	TunnelConnectWithoutReauth pulumi.StringOutput `pulumi:"tunnelConnectWithoutReauth"`
	// Names of the IPv4 IP Pool firewall objects that define the IP addresses reserved for remote clients. The structure of `tunnelIpPools` block is documented below.
	TunnelIpPools VpnSslSettingsTunnelIpPoolArrayOutput `pulumi:"tunnelIpPools"`
	// Names of the IPv6 IP Pool firewall objects that define the IP addresses reserved for remote clients. The structure of `tunnelIpv6Pools` block is documented below.
	TunnelIpv6Pools VpnSslSettingsTunnelIpv6PoolArrayOutput `pulumi:"tunnelIpv6Pools"`
	// Time out value to clean up user session after tunnel connection is dropped (1 - 255 sec, default=30).
	TunnelUserSessionTimeout pulumi.IntOutput `pulumi:"tunnelUserSessionTimeout"`
	// Enable/disable unsafe legacy re-negotiation. Valid values: `enable`, `disable`.
	UnsafeLegacyRenegotiation pulumi.StringOutput `pulumi:"unsafeLegacyRenegotiation"`
	// Enable to obscure the host name of the URL of the web browser display. Valid values: `enable`, `disable`.
	UrlObscuration pulumi.StringOutput `pulumi:"urlObscuration"`
	// Name of user peer.
	UserPeer pulumi.StringOutput `pulumi:"userPeer"`
	// Specifies the vdom to which the resource will be applied when the FortiGate unit is running in VDOM mode. Only one vdom can be specified. If you want to inherit the vdom configuration of the provider, please do not set this parameter.
	Vdomparam pulumi.StringPtrOutput `pulumi:"vdomparam"`
	// WINS server 1.
	WinsServer1 pulumi.StringOutput `pulumi:"winsServer1"`
	// WINS server 2.
	WinsServer2 pulumi.StringOutput `pulumi:"winsServer2"`
	// Add HTTP X-Content-Type-Options header. Valid values: `enable`, `disable`.
	XContentTypeOptions pulumi.StringOutput `pulumi:"xContentTypeOptions"`
}

// NewVpnSslSettings registers a new resource with the given unique name, arguments, and options.
func NewVpnSslSettings(ctx *pulumi.Context,
	name string, args *VpnSslSettingsArgs, opts ...pulumi.ResourceOption) (*VpnSslSettings, error) {
	if args == nil {
		args = &VpnSslSettingsArgs{}
	}

	opts = pkgResourceDefaultOpts(opts)
	var resource VpnSslSettings
	err := ctx.RegisterResource("fortios:index/vpnSslSettings:VpnSslSettings", name, args, &resource, opts...)
	if err != nil {
		return nil, err
	}
	return &resource, nil
}

// GetVpnSslSettings gets an existing VpnSslSettings resource's state with the given name, ID, and optional
// state properties that are used to uniquely qualify the lookup (nil if not required).
func GetVpnSslSettings(ctx *pulumi.Context,
	name string, id pulumi.IDInput, state *VpnSslSettingsState, opts ...pulumi.ResourceOption) (*VpnSslSettings, error) {
	var resource VpnSslSettings
	err := ctx.ReadResource("fortios:index/vpnSslSettings:VpnSslSettings", name, id, state, &resource, opts...)
	if err != nil {
		return nil, err
	}
	return &resource, nil
}

// Input properties used for looking up and filtering VpnSslSettings resources.
type vpnSslSettingsState struct {
	// Force the SSL-VPN security level. High allows only high. Medium allows medium and high. Low allows any. Valid values: `high`, `medium`, `default`, `low`.
	Algorithm *string `pulumi:"algorithm"`
	// Enable/disable checking of source IP for authentication session. Valid values: `enable`, `disable`.
	AuthSessionCheckSourceIp *string `pulumi:"authSessionCheckSourceIp"`
	// SSL-VPN authentication timeout (1 - 259200 sec (3 days), 0 for no timeout).
	AuthTimeout *int `pulumi:"authTimeout"`
	// Authentication rule for SSL VPN. The structure of `authenticationRule` block is documented below.
	AuthenticationRules []VpnSslSettingsAuthenticationRule `pulumi:"authenticationRules"`
	// Enable to auto-create static routes for the SSL-VPN tunnel IP addresses. Valid values: `enable`, `disable`.
	AutoTunnelStaticRoute *string `pulumi:"autoTunnelStaticRoute"`
	// Select one or more cipher technologies that cannot be used in SSL-VPN negotiations.
	BannedCipher *string `pulumi:"bannedCipher"`
	// Enable/disable verification of referer field in HTTP request header. Valid values: `enable`, `disable`.
	CheckReferer *string `pulumi:"checkReferer"`
	// Select one or more TLS 1.3 ciphersuites to enable. Does not affect ciphers in TLS 1.2 and below. At least one must be enabled. To disable all, set ssl-max-proto-ver to tls1-2 or below. Valid values: `TLS-AES-128-GCM-SHA256`, `TLS-AES-256-GCM-SHA384`, `TLS-CHACHA20-POLY1305-SHA256`, `TLS-AES-128-CCM-SHA256`, `TLS-AES-128-CCM-8-SHA256`.
	Ciphersuite *string `pulumi:"ciphersuite"`
	// Set signature algorithms related to client authentication. Affects TLS version <= 1.2 only. Valid values: `no-rsa-pss`, `all`.
	ClientSigalgs *string `pulumi:"clientSigalgs"`
	// Default SSL VPN portal.
	DefaultPortal *string `pulumi:"defaultPortal"`
	// Compression level (0~9).
	DeflateCompressionLevel *int `pulumi:"deflateCompressionLevel"`
	// Minimum amount of data that triggers compression (200 - 65535 bytes).
	DeflateMinDataSize *int `pulumi:"deflateMinDataSize"`
	// DNS server 1.
	DnsServer1 *string `pulumi:"dnsServer1"`
	// DNS server 2.
	DnsServer2 *string `pulumi:"dnsServer2"`
	// DNS suffix used for SSL-VPN clients.
	DnsSuffix *string `pulumi:"dnsSuffix"`
	// SSLVPN maximum DTLS hello timeout (10 - 60 sec, default = 10).
	DtlsHelloTimeout *int `pulumi:"dtlsHelloTimeout"`
	// DTLS maximum protocol version. Valid values: `dtls1-0`, `dtls1-2`.
	DtlsMaxProtoVer *string `pulumi:"dtlsMaxProtoVer"`
	// DTLS minimum protocol version. Valid values: `dtls1-0`, `dtls1-2`.
	DtlsMinProtoVer *string `pulumi:"dtlsMinProtoVer"`
	// Enable DTLS to prevent eavesdropping, tampering, or message forgery. Valid values: `enable`, `disable`.
	DtlsTunnel *string `pulumi:"dtlsTunnel"`
	// Tunnel mode: enable parallel IPv4 and IPv6 tunnel. Web mode: support IPv4 and IPv6 bookmarks in the portal. Valid values: `enable`, `disable`.
	DualStackMode *string `pulumi:"dualStackMode"`
	// true or false, set this parameter to true when using dynamic forEach + toset to configure and sort sub-tables, please do not set this parameter when configuring static sub-tables.
	DynamicSortSubtable *string `pulumi:"dynamicSortSubtable"`
	// Encode \2F sequence to forward slash in URLs. Valid values: `enable`, `disable`.
	Encode2fSequence *string `pulumi:"encode2fSequence"`
	// Encrypt and store user passwords for SSL-VPN web sessions. Valid values: `enable`, `disable`.
	EncryptAndStorePassword *string `pulumi:"encryptAndStorePassword"`
	// Enable to force two-factor authentication for all SSL-VPNs. Valid values: `enable`, `disable`.
	ForceTwoFactorAuth *string `pulumi:"forceTwoFactorAuth"`
	// Forward the same, add, or remove HTTP header. Valid values: `pass`, `add`, `remove`.
	HeaderXForwardedFor *string `pulumi:"headerXForwardedFor"`
	// Add HSTS includeSubDomains response header. Valid values: `enable`, `disable`.
	HstsIncludeSubdomains *string `pulumi:"hstsIncludeSubdomains"`
	// Enable to allow HTTP compression over SSL-VPN tunnels. Valid values: `enable`, `disable`.
	HttpCompression *string `pulumi:"httpCompression"`
	// Enable/disable SSL-VPN support for HttpOnly cookies. Valid values: `enable`, `disable`.
	HttpOnlyCookie *string `pulumi:"httpOnlyCookie"`
	// SSL-VPN session is disconnected if an HTTP request body is not received within this time (1 - 60 sec, default = 20).
	HttpRequestBodyTimeout *int `pulumi:"httpRequestBodyTimeout"`
	// SSL-VPN session is disconnected if an HTTP request header is not received within this time (1 - 60 sec, default = 20).
	HttpRequestHeaderTimeout *int `pulumi:"httpRequestHeaderTimeout"`
	// Enable/disable redirect of port 80 to SSL-VPN port. Valid values: `enable`, `disable`.
	HttpsRedirect *string `pulumi:"httpsRedirect"`
	// SSL VPN disconnects if idle for specified time in seconds.
	IdleTimeout *int `pulumi:"idleTimeout"`
	// IPv6 DNS server 1.
	Ipv6DnsServer1 *string `pulumi:"ipv6DnsServer1"`
	// IPv6 DNS server 2.
	Ipv6DnsServer2 *string `pulumi:"ipv6DnsServer2"`
	// IPv6 WINS server 1.
	Ipv6WinsServer1 *string `pulumi:"ipv6WinsServer1"`
	// IPv6 WINS server 2.
	Ipv6WinsServer2 *string `pulumi:"ipv6WinsServer2"`
	// SSL VPN maximum login attempt times before block (0 - 10, default = 2, 0 = no limit).
	LoginAttemptLimit *int `pulumi:"loginAttemptLimit"`
	// Time for which a user is blocked from logging in after too many failed login attempts (0 - 86400 sec, default = 60).
	LoginBlockTime *int `pulumi:"loginBlockTime"`
	// SSLVPN maximum login timeout (10 - 180 sec, default = 30).
	LoginTimeout *int `pulumi:"loginTimeout"`
	// SSL-VPN access port (1 - 65535).
	Port *int `pulumi:"port"`
	// Enable means that if SSL-VPN connections are allowed on an interface admin GUI connections are blocked on that interface. Valid values: `enable`, `disable`.
	PortPrecedence *string `pulumi:"portPrecedence"`
	// Enable to require client certificates for all SSL-VPN users. Valid values: `enable`, `disable`.
	Reqclientcert *string `pulumi:"reqclientcert"`
	// Enable to allow SSL-VPN sessions to bypass routing and bind to the incoming interface. Valid values: `enable`, `disable`.
	RouteSourceInterface *string `pulumi:"routeSourceInterface"`
	// SAML local redirect port in the machine running FCT (0 - 65535). 0 is to disable redirection on FGT side.
	SamlRedirectPort *int `pulumi:"samlRedirectPort"`
	// Name of the server certificate to be used for SSL-VPNs.
	Servercert *string `pulumi:"servercert"`
	// Enable/disable negated source IPv6 address match. Valid values: `enable`, `disable`.
	SourceAddress6Negate *string `pulumi:"sourceAddress6Negate"`
	// IPv6 source address of incoming traffic. The structure of `sourceAddress6` block is documented below.
	SourceAddress6s []VpnSslSettingsSourceAddress6 `pulumi:"sourceAddress6s"`
	// Enable/disable negated source address match. Valid values: `enable`, `disable`.
	SourceAddressNegate *string `pulumi:"sourceAddressNegate"`
	// Source address of incoming traffic. The structure of `sourceAddress` block is documented below.
	SourceAddresses []VpnSslSettingsSourceAddress `pulumi:"sourceAddresses"`
	// SSL VPN source interface of incoming traffic. The structure of `sourceInterface` block is documented below.
	SourceInterfaces []VpnSslSettingsSourceInterface `pulumi:"sourceInterfaces"`
	// Enable to allow client renegotiation by the server if the tunnel goes down. Valid values: `disable`, `enable`.
	SslClientRenegotiation *string `pulumi:"sslClientRenegotiation"`
	// Enable/disable insertion of empty fragment. Valid values: `enable`, `disable`.
	SslInsertEmptyFragment *string `pulumi:"sslInsertEmptyFragment"`
	// SSL maximum protocol version. Valid values: `tls1-0`, `tls1-1`, `tls1-2`, `tls1-3`.
	SslMaxProtoVer *string `pulumi:"sslMaxProtoVer"`
	// SSL minimum protocol version. Valid values: `tls1-0`, `tls1-1`, `tls1-2`, `tls1-3`.
	SslMinProtoVer *string `pulumi:"sslMinProtoVer"`
	// Enable/disable SSL-VPN. Valid values: `enable`, `disable`.
	Status *string `pulumi:"status"`
	// Enable/disable TLSv1.0. Valid values: `enable`, `disable`.
	Tlsv10 *string `pulumi:"tlsv10"`
	// Enable/disable TLSv1.1. Valid values: `enable`, `disable`.
	Tlsv11 *string `pulumi:"tlsv11"`
	// Enable/disable TLSv1.2. Valid values: `enable`, `disable`.
	Tlsv12 *string `pulumi:"tlsv12"`
	// Enable/disable TLSv1.3. Valid values: `enable`, `disable`.
	Tlsv13 *string `pulumi:"tlsv13"`
	// Transform backward slashes to forward slashes in URLs. Valid values: `enable`, `disable`.
	TransformBackwardSlashes *string `pulumi:"transformBackwardSlashes"`
	// Method used for assigning address for tunnel. Valid values: `first-available`, `round-robin`.
	TunnelAddrAssignedMethod *string `pulumi:"tunnelAddrAssignedMethod"`
	// Enable/disable tunnel connection without re-authorization if previous connection dropped. Valid values: `enable`, `disable`.
	TunnelConnectWithoutReauth *string `pulumi:"tunnelConnectWithoutReauth"`
	// Names of the IPv4 IP Pool firewall objects that define the IP addresses reserved for remote clients. The structure of `tunnelIpPools` block is documented below.
	TunnelIpPools []VpnSslSettingsTunnelIpPool `pulumi:"tunnelIpPools"`
	// Names of the IPv6 IP Pool firewall objects that define the IP addresses reserved for remote clients. The structure of `tunnelIpv6Pools` block is documented below.
	TunnelIpv6Pools []VpnSslSettingsTunnelIpv6Pool `pulumi:"tunnelIpv6Pools"`
	// Time out value to clean up user session after tunnel connection is dropped (1 - 255 sec, default=30).
	TunnelUserSessionTimeout *int `pulumi:"tunnelUserSessionTimeout"`
	// Enable/disable unsafe legacy re-negotiation. Valid values: `enable`, `disable`.
	UnsafeLegacyRenegotiation *string `pulumi:"unsafeLegacyRenegotiation"`
	// Enable to obscure the host name of the URL of the web browser display. Valid values: `enable`, `disable`.
	UrlObscuration *string `pulumi:"urlObscuration"`
	// Name of user peer.
	UserPeer *string `pulumi:"userPeer"`
	// Specifies the vdom to which the resource will be applied when the FortiGate unit is running in VDOM mode. Only one vdom can be specified. If you want to inherit the vdom configuration of the provider, please do not set this parameter.
	Vdomparam *string `pulumi:"vdomparam"`
	// WINS server 1.
	WinsServer1 *string `pulumi:"winsServer1"`
	// WINS server 2.
	WinsServer2 *string `pulumi:"winsServer2"`
	// Add HTTP X-Content-Type-Options header. Valid values: `enable`, `disable`.
	XContentTypeOptions *string `pulumi:"xContentTypeOptions"`
}

type VpnSslSettingsState struct {
	// Force the SSL-VPN security level. High allows only high. Medium allows medium and high. Low allows any. Valid values: `high`, `medium`, `default`, `low`.
	Algorithm pulumi.StringPtrInput
	// Enable/disable checking of source IP for authentication session. Valid values: `enable`, `disable`.
	AuthSessionCheckSourceIp pulumi.StringPtrInput
	// SSL-VPN authentication timeout (1 - 259200 sec (3 days), 0 for no timeout).
	AuthTimeout pulumi.IntPtrInput
	// Authentication rule for SSL VPN. The structure of `authenticationRule` block is documented below.
	AuthenticationRules VpnSslSettingsAuthenticationRuleArrayInput
	// Enable to auto-create static routes for the SSL-VPN tunnel IP addresses. Valid values: `enable`, `disable`.
	AutoTunnelStaticRoute pulumi.StringPtrInput
	// Select one or more cipher technologies that cannot be used in SSL-VPN negotiations.
	BannedCipher pulumi.StringPtrInput
	// Enable/disable verification of referer field in HTTP request header. Valid values: `enable`, `disable`.
	CheckReferer pulumi.StringPtrInput
	// Select one or more TLS 1.3 ciphersuites to enable. Does not affect ciphers in TLS 1.2 and below. At least one must be enabled. To disable all, set ssl-max-proto-ver to tls1-2 or below. Valid values: `TLS-AES-128-GCM-SHA256`, `TLS-AES-256-GCM-SHA384`, `TLS-CHACHA20-POLY1305-SHA256`, `TLS-AES-128-CCM-SHA256`, `TLS-AES-128-CCM-8-SHA256`.
	Ciphersuite pulumi.StringPtrInput
	// Set signature algorithms related to client authentication. Affects TLS version <= 1.2 only. Valid values: `no-rsa-pss`, `all`.
	ClientSigalgs pulumi.StringPtrInput
	// Default SSL VPN portal.
	DefaultPortal pulumi.StringPtrInput
	// Compression level (0~9).
	DeflateCompressionLevel pulumi.IntPtrInput
	// Minimum amount of data that triggers compression (200 - 65535 bytes).
	DeflateMinDataSize pulumi.IntPtrInput
	// DNS server 1.
	DnsServer1 pulumi.StringPtrInput
	// DNS server 2.
	DnsServer2 pulumi.StringPtrInput
	// DNS suffix used for SSL-VPN clients.
	DnsSuffix pulumi.StringPtrInput
	// SSLVPN maximum DTLS hello timeout (10 - 60 sec, default = 10).
	DtlsHelloTimeout pulumi.IntPtrInput
	// DTLS maximum protocol version. Valid values: `dtls1-0`, `dtls1-2`.
	DtlsMaxProtoVer pulumi.StringPtrInput
	// DTLS minimum protocol version. Valid values: `dtls1-0`, `dtls1-2`.
	DtlsMinProtoVer pulumi.StringPtrInput
	// Enable DTLS to prevent eavesdropping, tampering, or message forgery. Valid values: `enable`, `disable`.
	DtlsTunnel pulumi.StringPtrInput
	// Tunnel mode: enable parallel IPv4 and IPv6 tunnel. Web mode: support IPv4 and IPv6 bookmarks in the portal. Valid values: `enable`, `disable`.
	DualStackMode pulumi.StringPtrInput
	// true or false, set this parameter to true when using dynamic forEach + toset to configure and sort sub-tables, please do not set this parameter when configuring static sub-tables.
	DynamicSortSubtable pulumi.StringPtrInput
	// Encode \2F sequence to forward slash in URLs. Valid values: `enable`, `disable`.
	Encode2fSequence pulumi.StringPtrInput
	// Encrypt and store user passwords for SSL-VPN web sessions. Valid values: `enable`, `disable`.
	EncryptAndStorePassword pulumi.StringPtrInput
	// Enable to force two-factor authentication for all SSL-VPNs. Valid values: `enable`, `disable`.
	ForceTwoFactorAuth pulumi.StringPtrInput
	// Forward the same, add, or remove HTTP header. Valid values: `pass`, `add`, `remove`.
	HeaderXForwardedFor pulumi.StringPtrInput
	// Add HSTS includeSubDomains response header. Valid values: `enable`, `disable`.
	HstsIncludeSubdomains pulumi.StringPtrInput
	// Enable to allow HTTP compression over SSL-VPN tunnels. Valid values: `enable`, `disable`.
	HttpCompression pulumi.StringPtrInput
	// Enable/disable SSL-VPN support for HttpOnly cookies. Valid values: `enable`, `disable`.
	HttpOnlyCookie pulumi.StringPtrInput
	// SSL-VPN session is disconnected if an HTTP request body is not received within this time (1 - 60 sec, default = 20).
	HttpRequestBodyTimeout pulumi.IntPtrInput
	// SSL-VPN session is disconnected if an HTTP request header is not received within this time (1 - 60 sec, default = 20).
	HttpRequestHeaderTimeout pulumi.IntPtrInput
	// Enable/disable redirect of port 80 to SSL-VPN port. Valid values: `enable`, `disable`.
	HttpsRedirect pulumi.StringPtrInput
	// SSL VPN disconnects if idle for specified time in seconds.
	IdleTimeout pulumi.IntPtrInput
	// IPv6 DNS server 1.
	Ipv6DnsServer1 pulumi.StringPtrInput
	// IPv6 DNS server 2.
	Ipv6DnsServer2 pulumi.StringPtrInput
	// IPv6 WINS server 1.
	Ipv6WinsServer1 pulumi.StringPtrInput
	// IPv6 WINS server 2.
	Ipv6WinsServer2 pulumi.StringPtrInput
	// SSL VPN maximum login attempt times before block (0 - 10, default = 2, 0 = no limit).
	LoginAttemptLimit pulumi.IntPtrInput
	// Time for which a user is blocked from logging in after too many failed login attempts (0 - 86400 sec, default = 60).
	LoginBlockTime pulumi.IntPtrInput
	// SSLVPN maximum login timeout (10 - 180 sec, default = 30).
	LoginTimeout pulumi.IntPtrInput
	// SSL-VPN access port (1 - 65535).
	Port pulumi.IntPtrInput
	// Enable means that if SSL-VPN connections are allowed on an interface admin GUI connections are blocked on that interface. Valid values: `enable`, `disable`.
	PortPrecedence pulumi.StringPtrInput
	// Enable to require client certificates for all SSL-VPN users. Valid values: `enable`, `disable`.
	Reqclientcert pulumi.StringPtrInput
	// Enable to allow SSL-VPN sessions to bypass routing and bind to the incoming interface. Valid values: `enable`, `disable`.
	RouteSourceInterface pulumi.StringPtrInput
	// SAML local redirect port in the machine running FCT (0 - 65535). 0 is to disable redirection on FGT side.
	SamlRedirectPort pulumi.IntPtrInput
	// Name of the server certificate to be used for SSL-VPNs.
	Servercert pulumi.StringPtrInput
	// Enable/disable negated source IPv6 address match. Valid values: `enable`, `disable`.
	SourceAddress6Negate pulumi.StringPtrInput
	// IPv6 source address of incoming traffic. The structure of `sourceAddress6` block is documented below.
	SourceAddress6s VpnSslSettingsSourceAddress6ArrayInput
	// Enable/disable negated source address match. Valid values: `enable`, `disable`.
	SourceAddressNegate pulumi.StringPtrInput
	// Source address of incoming traffic. The structure of `sourceAddress` block is documented below.
	SourceAddresses VpnSslSettingsSourceAddressArrayInput
	// SSL VPN source interface of incoming traffic. The structure of `sourceInterface` block is documented below.
	SourceInterfaces VpnSslSettingsSourceInterfaceArrayInput
	// Enable to allow client renegotiation by the server if the tunnel goes down. Valid values: `disable`, `enable`.
	SslClientRenegotiation pulumi.StringPtrInput
	// Enable/disable insertion of empty fragment. Valid values: `enable`, `disable`.
	SslInsertEmptyFragment pulumi.StringPtrInput
	// SSL maximum protocol version. Valid values: `tls1-0`, `tls1-1`, `tls1-2`, `tls1-3`.
	SslMaxProtoVer pulumi.StringPtrInput
	// SSL minimum protocol version. Valid values: `tls1-0`, `tls1-1`, `tls1-2`, `tls1-3`.
	SslMinProtoVer pulumi.StringPtrInput
	// Enable/disable SSL-VPN. Valid values: `enable`, `disable`.
	Status pulumi.StringPtrInput
	// Enable/disable TLSv1.0. Valid values: `enable`, `disable`.
	Tlsv10 pulumi.StringPtrInput
	// Enable/disable TLSv1.1. Valid values: `enable`, `disable`.
	Tlsv11 pulumi.StringPtrInput
	// Enable/disable TLSv1.2. Valid values: `enable`, `disable`.
	Tlsv12 pulumi.StringPtrInput
	// Enable/disable TLSv1.3. Valid values: `enable`, `disable`.
	Tlsv13 pulumi.StringPtrInput
	// Transform backward slashes to forward slashes in URLs. Valid values: `enable`, `disable`.
	TransformBackwardSlashes pulumi.StringPtrInput
	// Method used for assigning address for tunnel. Valid values: `first-available`, `round-robin`.
	TunnelAddrAssignedMethod pulumi.StringPtrInput
	// Enable/disable tunnel connection without re-authorization if previous connection dropped. Valid values: `enable`, `disable`.
	TunnelConnectWithoutReauth pulumi.StringPtrInput
	// Names of the IPv4 IP Pool firewall objects that define the IP addresses reserved for remote clients. The structure of `tunnelIpPools` block is documented below.
	TunnelIpPools VpnSslSettingsTunnelIpPoolArrayInput
	// Names of the IPv6 IP Pool firewall objects that define the IP addresses reserved for remote clients. The structure of `tunnelIpv6Pools` block is documented below.
	TunnelIpv6Pools VpnSslSettingsTunnelIpv6PoolArrayInput
	// Time out value to clean up user session after tunnel connection is dropped (1 - 255 sec, default=30).
	TunnelUserSessionTimeout pulumi.IntPtrInput
	// Enable/disable unsafe legacy re-negotiation. Valid values: `enable`, `disable`.
	UnsafeLegacyRenegotiation pulumi.StringPtrInput
	// Enable to obscure the host name of the URL of the web browser display. Valid values: `enable`, `disable`.
	UrlObscuration pulumi.StringPtrInput
	// Name of user peer.
	UserPeer pulumi.StringPtrInput
	// Specifies the vdom to which the resource will be applied when the FortiGate unit is running in VDOM mode. Only one vdom can be specified. If you want to inherit the vdom configuration of the provider, please do not set this parameter.
	Vdomparam pulumi.StringPtrInput
	// WINS server 1.
	WinsServer1 pulumi.StringPtrInput
	// WINS server 2.
	WinsServer2 pulumi.StringPtrInput
	// Add HTTP X-Content-Type-Options header. Valid values: `enable`, `disable`.
	XContentTypeOptions pulumi.StringPtrInput
}

func (VpnSslSettingsState) ElementType() reflect.Type {
	return reflect.TypeOf((*vpnSslSettingsState)(nil)).Elem()
}

type vpnSslSettingsArgs struct {
	// Force the SSL-VPN security level. High allows only high. Medium allows medium and high. Low allows any. Valid values: `high`, `medium`, `default`, `low`.
	Algorithm *string `pulumi:"algorithm"`
	// Enable/disable checking of source IP for authentication session. Valid values: `enable`, `disable`.
	AuthSessionCheckSourceIp *string `pulumi:"authSessionCheckSourceIp"`
	// SSL-VPN authentication timeout (1 - 259200 sec (3 days), 0 for no timeout).
	AuthTimeout *int `pulumi:"authTimeout"`
	// Authentication rule for SSL VPN. The structure of `authenticationRule` block is documented below.
	AuthenticationRules []VpnSslSettingsAuthenticationRule `pulumi:"authenticationRules"`
	// Enable to auto-create static routes for the SSL-VPN tunnel IP addresses. Valid values: `enable`, `disable`.
	AutoTunnelStaticRoute *string `pulumi:"autoTunnelStaticRoute"`
	// Select one or more cipher technologies that cannot be used in SSL-VPN negotiations.
	BannedCipher *string `pulumi:"bannedCipher"`
	// Enable/disable verification of referer field in HTTP request header. Valid values: `enable`, `disable`.
	CheckReferer *string `pulumi:"checkReferer"`
	// Select one or more TLS 1.3 ciphersuites to enable. Does not affect ciphers in TLS 1.2 and below. At least one must be enabled. To disable all, set ssl-max-proto-ver to tls1-2 or below. Valid values: `TLS-AES-128-GCM-SHA256`, `TLS-AES-256-GCM-SHA384`, `TLS-CHACHA20-POLY1305-SHA256`, `TLS-AES-128-CCM-SHA256`, `TLS-AES-128-CCM-8-SHA256`.
	Ciphersuite *string `pulumi:"ciphersuite"`
	// Set signature algorithms related to client authentication. Affects TLS version <= 1.2 only. Valid values: `no-rsa-pss`, `all`.
	ClientSigalgs *string `pulumi:"clientSigalgs"`
	// Default SSL VPN portal.
	DefaultPortal *string `pulumi:"defaultPortal"`
	// Compression level (0~9).
	DeflateCompressionLevel *int `pulumi:"deflateCompressionLevel"`
	// Minimum amount of data that triggers compression (200 - 65535 bytes).
	DeflateMinDataSize *int `pulumi:"deflateMinDataSize"`
	// DNS server 1.
	DnsServer1 *string `pulumi:"dnsServer1"`
	// DNS server 2.
	DnsServer2 *string `pulumi:"dnsServer2"`
	// DNS suffix used for SSL-VPN clients.
	DnsSuffix *string `pulumi:"dnsSuffix"`
	// SSLVPN maximum DTLS hello timeout (10 - 60 sec, default = 10).
	DtlsHelloTimeout *int `pulumi:"dtlsHelloTimeout"`
	// DTLS maximum protocol version. Valid values: `dtls1-0`, `dtls1-2`.
	DtlsMaxProtoVer *string `pulumi:"dtlsMaxProtoVer"`
	// DTLS minimum protocol version. Valid values: `dtls1-0`, `dtls1-2`.
	DtlsMinProtoVer *string `pulumi:"dtlsMinProtoVer"`
	// Enable DTLS to prevent eavesdropping, tampering, or message forgery. Valid values: `enable`, `disable`.
	DtlsTunnel *string `pulumi:"dtlsTunnel"`
	// Tunnel mode: enable parallel IPv4 and IPv6 tunnel. Web mode: support IPv4 and IPv6 bookmarks in the portal. Valid values: `enable`, `disable`.
	DualStackMode *string `pulumi:"dualStackMode"`
	// true or false, set this parameter to true when using dynamic forEach + toset to configure and sort sub-tables, please do not set this parameter when configuring static sub-tables.
	DynamicSortSubtable *string `pulumi:"dynamicSortSubtable"`
	// Encode \2F sequence to forward slash in URLs. Valid values: `enable`, `disable`.
	Encode2fSequence *string `pulumi:"encode2fSequence"`
	// Encrypt and store user passwords for SSL-VPN web sessions. Valid values: `enable`, `disable`.
	EncryptAndStorePassword *string `pulumi:"encryptAndStorePassword"`
	// Enable to force two-factor authentication for all SSL-VPNs. Valid values: `enable`, `disable`.
	ForceTwoFactorAuth *string `pulumi:"forceTwoFactorAuth"`
	// Forward the same, add, or remove HTTP header. Valid values: `pass`, `add`, `remove`.
	HeaderXForwardedFor *string `pulumi:"headerXForwardedFor"`
	// Add HSTS includeSubDomains response header. Valid values: `enable`, `disable`.
	HstsIncludeSubdomains *string `pulumi:"hstsIncludeSubdomains"`
	// Enable to allow HTTP compression over SSL-VPN tunnels. Valid values: `enable`, `disable`.
	HttpCompression *string `pulumi:"httpCompression"`
	// Enable/disable SSL-VPN support for HttpOnly cookies. Valid values: `enable`, `disable`.
	HttpOnlyCookie *string `pulumi:"httpOnlyCookie"`
	// SSL-VPN session is disconnected if an HTTP request body is not received within this time (1 - 60 sec, default = 20).
	HttpRequestBodyTimeout *int `pulumi:"httpRequestBodyTimeout"`
	// SSL-VPN session is disconnected if an HTTP request header is not received within this time (1 - 60 sec, default = 20).
	HttpRequestHeaderTimeout *int `pulumi:"httpRequestHeaderTimeout"`
	// Enable/disable redirect of port 80 to SSL-VPN port. Valid values: `enable`, `disable`.
	HttpsRedirect *string `pulumi:"httpsRedirect"`
	// SSL VPN disconnects if idle for specified time in seconds.
	IdleTimeout *int `pulumi:"idleTimeout"`
	// IPv6 DNS server 1.
	Ipv6DnsServer1 *string `pulumi:"ipv6DnsServer1"`
	// IPv6 DNS server 2.
	Ipv6DnsServer2 *string `pulumi:"ipv6DnsServer2"`
	// IPv6 WINS server 1.
	Ipv6WinsServer1 *string `pulumi:"ipv6WinsServer1"`
	// IPv6 WINS server 2.
	Ipv6WinsServer2 *string `pulumi:"ipv6WinsServer2"`
	// SSL VPN maximum login attempt times before block (0 - 10, default = 2, 0 = no limit).
	LoginAttemptLimit *int `pulumi:"loginAttemptLimit"`
	// Time for which a user is blocked from logging in after too many failed login attempts (0 - 86400 sec, default = 60).
	LoginBlockTime *int `pulumi:"loginBlockTime"`
	// SSLVPN maximum login timeout (10 - 180 sec, default = 30).
	LoginTimeout *int `pulumi:"loginTimeout"`
	// SSL-VPN access port (1 - 65535).
	Port *int `pulumi:"port"`
	// Enable means that if SSL-VPN connections are allowed on an interface admin GUI connections are blocked on that interface. Valid values: `enable`, `disable`.
	PortPrecedence *string `pulumi:"portPrecedence"`
	// Enable to require client certificates for all SSL-VPN users. Valid values: `enable`, `disable`.
	Reqclientcert *string `pulumi:"reqclientcert"`
	// Enable to allow SSL-VPN sessions to bypass routing and bind to the incoming interface. Valid values: `enable`, `disable`.
	RouteSourceInterface *string `pulumi:"routeSourceInterface"`
	// SAML local redirect port in the machine running FCT (0 - 65535). 0 is to disable redirection on FGT side.
	SamlRedirectPort *int `pulumi:"samlRedirectPort"`
	// Name of the server certificate to be used for SSL-VPNs.
	Servercert *string `pulumi:"servercert"`
	// Enable/disable negated source IPv6 address match. Valid values: `enable`, `disable`.
	SourceAddress6Negate *string `pulumi:"sourceAddress6Negate"`
	// IPv6 source address of incoming traffic. The structure of `sourceAddress6` block is documented below.
	SourceAddress6s []VpnSslSettingsSourceAddress6 `pulumi:"sourceAddress6s"`
	// Enable/disable negated source address match. Valid values: `enable`, `disable`.
	SourceAddressNegate *string `pulumi:"sourceAddressNegate"`
	// Source address of incoming traffic. The structure of `sourceAddress` block is documented below.
	SourceAddresses []VpnSslSettingsSourceAddress `pulumi:"sourceAddresses"`
	// SSL VPN source interface of incoming traffic. The structure of `sourceInterface` block is documented below.
	SourceInterfaces []VpnSslSettingsSourceInterface `pulumi:"sourceInterfaces"`
	// Enable to allow client renegotiation by the server if the tunnel goes down. Valid values: `disable`, `enable`.
	SslClientRenegotiation *string `pulumi:"sslClientRenegotiation"`
	// Enable/disable insertion of empty fragment. Valid values: `enable`, `disable`.
	SslInsertEmptyFragment *string `pulumi:"sslInsertEmptyFragment"`
	// SSL maximum protocol version. Valid values: `tls1-0`, `tls1-1`, `tls1-2`, `tls1-3`.
	SslMaxProtoVer *string `pulumi:"sslMaxProtoVer"`
	// SSL minimum protocol version. Valid values: `tls1-0`, `tls1-1`, `tls1-2`, `tls1-3`.
	SslMinProtoVer *string `pulumi:"sslMinProtoVer"`
	// Enable/disable SSL-VPN. Valid values: `enable`, `disable`.
	Status *string `pulumi:"status"`
	// Enable/disable TLSv1.0. Valid values: `enable`, `disable`.
	Tlsv10 *string `pulumi:"tlsv10"`
	// Enable/disable TLSv1.1. Valid values: `enable`, `disable`.
	Tlsv11 *string `pulumi:"tlsv11"`
	// Enable/disable TLSv1.2. Valid values: `enable`, `disable`.
	Tlsv12 *string `pulumi:"tlsv12"`
	// Enable/disable TLSv1.3. Valid values: `enable`, `disable`.
	Tlsv13 *string `pulumi:"tlsv13"`
	// Transform backward slashes to forward slashes in URLs. Valid values: `enable`, `disable`.
	TransformBackwardSlashes *string `pulumi:"transformBackwardSlashes"`
	// Method used for assigning address for tunnel. Valid values: `first-available`, `round-robin`.
	TunnelAddrAssignedMethod *string `pulumi:"tunnelAddrAssignedMethod"`
	// Enable/disable tunnel connection without re-authorization if previous connection dropped. Valid values: `enable`, `disable`.
	TunnelConnectWithoutReauth *string `pulumi:"tunnelConnectWithoutReauth"`
	// Names of the IPv4 IP Pool firewall objects that define the IP addresses reserved for remote clients. The structure of `tunnelIpPools` block is documented below.
	TunnelIpPools []VpnSslSettingsTunnelIpPool `pulumi:"tunnelIpPools"`
	// Names of the IPv6 IP Pool firewall objects that define the IP addresses reserved for remote clients. The structure of `tunnelIpv6Pools` block is documented below.
	TunnelIpv6Pools []VpnSslSettingsTunnelIpv6Pool `pulumi:"tunnelIpv6Pools"`
	// Time out value to clean up user session after tunnel connection is dropped (1 - 255 sec, default=30).
	TunnelUserSessionTimeout *int `pulumi:"tunnelUserSessionTimeout"`
	// Enable/disable unsafe legacy re-negotiation. Valid values: `enable`, `disable`.
	UnsafeLegacyRenegotiation *string `pulumi:"unsafeLegacyRenegotiation"`
	// Enable to obscure the host name of the URL of the web browser display. Valid values: `enable`, `disable`.
	UrlObscuration *string `pulumi:"urlObscuration"`
	// Name of user peer.
	UserPeer *string `pulumi:"userPeer"`
	// Specifies the vdom to which the resource will be applied when the FortiGate unit is running in VDOM mode. Only one vdom can be specified. If you want to inherit the vdom configuration of the provider, please do not set this parameter.
	Vdomparam *string `pulumi:"vdomparam"`
	// WINS server 1.
	WinsServer1 *string `pulumi:"winsServer1"`
	// WINS server 2.
	WinsServer2 *string `pulumi:"winsServer2"`
	// Add HTTP X-Content-Type-Options header. Valid values: `enable`, `disable`.
	XContentTypeOptions *string `pulumi:"xContentTypeOptions"`
}

// The set of arguments for constructing a VpnSslSettings resource.
type VpnSslSettingsArgs struct {
	// Force the SSL-VPN security level. High allows only high. Medium allows medium and high. Low allows any. Valid values: `high`, `medium`, `default`, `low`.
	Algorithm pulumi.StringPtrInput
	// Enable/disable checking of source IP for authentication session. Valid values: `enable`, `disable`.
	AuthSessionCheckSourceIp pulumi.StringPtrInput
	// SSL-VPN authentication timeout (1 - 259200 sec (3 days), 0 for no timeout).
	AuthTimeout pulumi.IntPtrInput
	// Authentication rule for SSL VPN. The structure of `authenticationRule` block is documented below.
	AuthenticationRules VpnSslSettingsAuthenticationRuleArrayInput
	// Enable to auto-create static routes for the SSL-VPN tunnel IP addresses. Valid values: `enable`, `disable`.
	AutoTunnelStaticRoute pulumi.StringPtrInput
	// Select one or more cipher technologies that cannot be used in SSL-VPN negotiations.
	BannedCipher pulumi.StringPtrInput
	// Enable/disable verification of referer field in HTTP request header. Valid values: `enable`, `disable`.
	CheckReferer pulumi.StringPtrInput
	// Select one or more TLS 1.3 ciphersuites to enable. Does not affect ciphers in TLS 1.2 and below. At least one must be enabled. To disable all, set ssl-max-proto-ver to tls1-2 or below. Valid values: `TLS-AES-128-GCM-SHA256`, `TLS-AES-256-GCM-SHA384`, `TLS-CHACHA20-POLY1305-SHA256`, `TLS-AES-128-CCM-SHA256`, `TLS-AES-128-CCM-8-SHA256`.
	Ciphersuite pulumi.StringPtrInput
	// Set signature algorithms related to client authentication. Affects TLS version <= 1.2 only. Valid values: `no-rsa-pss`, `all`.
	ClientSigalgs pulumi.StringPtrInput
	// Default SSL VPN portal.
	DefaultPortal pulumi.StringPtrInput
	// Compression level (0~9).
	DeflateCompressionLevel pulumi.IntPtrInput
	// Minimum amount of data that triggers compression (200 - 65535 bytes).
	DeflateMinDataSize pulumi.IntPtrInput
	// DNS server 1.
	DnsServer1 pulumi.StringPtrInput
	// DNS server 2.
	DnsServer2 pulumi.StringPtrInput
	// DNS suffix used for SSL-VPN clients.
	DnsSuffix pulumi.StringPtrInput
	// SSLVPN maximum DTLS hello timeout (10 - 60 sec, default = 10).
	DtlsHelloTimeout pulumi.IntPtrInput
	// DTLS maximum protocol version. Valid values: `dtls1-0`, `dtls1-2`.
	DtlsMaxProtoVer pulumi.StringPtrInput
	// DTLS minimum protocol version. Valid values: `dtls1-0`, `dtls1-2`.
	DtlsMinProtoVer pulumi.StringPtrInput
	// Enable DTLS to prevent eavesdropping, tampering, or message forgery. Valid values: `enable`, `disable`.
	DtlsTunnel pulumi.StringPtrInput
	// Tunnel mode: enable parallel IPv4 and IPv6 tunnel. Web mode: support IPv4 and IPv6 bookmarks in the portal. Valid values: `enable`, `disable`.
	DualStackMode pulumi.StringPtrInput
	// true or false, set this parameter to true when using dynamic forEach + toset to configure and sort sub-tables, please do not set this parameter when configuring static sub-tables.
	DynamicSortSubtable pulumi.StringPtrInput
	// Encode \2F sequence to forward slash in URLs. Valid values: `enable`, `disable`.
	Encode2fSequence pulumi.StringPtrInput
	// Encrypt and store user passwords for SSL-VPN web sessions. Valid values: `enable`, `disable`.
	EncryptAndStorePassword pulumi.StringPtrInput
	// Enable to force two-factor authentication for all SSL-VPNs. Valid values: `enable`, `disable`.
	ForceTwoFactorAuth pulumi.StringPtrInput
	// Forward the same, add, or remove HTTP header. Valid values: `pass`, `add`, `remove`.
	HeaderXForwardedFor pulumi.StringPtrInput
	// Add HSTS includeSubDomains response header. Valid values: `enable`, `disable`.
	HstsIncludeSubdomains pulumi.StringPtrInput
	// Enable to allow HTTP compression over SSL-VPN tunnels. Valid values: `enable`, `disable`.
	HttpCompression pulumi.StringPtrInput
	// Enable/disable SSL-VPN support for HttpOnly cookies. Valid values: `enable`, `disable`.
	HttpOnlyCookie pulumi.StringPtrInput
	// SSL-VPN session is disconnected if an HTTP request body is not received within this time (1 - 60 sec, default = 20).
	HttpRequestBodyTimeout pulumi.IntPtrInput
	// SSL-VPN session is disconnected if an HTTP request header is not received within this time (1 - 60 sec, default = 20).
	HttpRequestHeaderTimeout pulumi.IntPtrInput
	// Enable/disable redirect of port 80 to SSL-VPN port. Valid values: `enable`, `disable`.
	HttpsRedirect pulumi.StringPtrInput
	// SSL VPN disconnects if idle for specified time in seconds.
	IdleTimeout pulumi.IntPtrInput
	// IPv6 DNS server 1.
	Ipv6DnsServer1 pulumi.StringPtrInput
	// IPv6 DNS server 2.
	Ipv6DnsServer2 pulumi.StringPtrInput
	// IPv6 WINS server 1.
	Ipv6WinsServer1 pulumi.StringPtrInput
	// IPv6 WINS server 2.
	Ipv6WinsServer2 pulumi.StringPtrInput
	// SSL VPN maximum login attempt times before block (0 - 10, default = 2, 0 = no limit).
	LoginAttemptLimit pulumi.IntPtrInput
	// Time for which a user is blocked from logging in after too many failed login attempts (0 - 86400 sec, default = 60).
	LoginBlockTime pulumi.IntPtrInput
	// SSLVPN maximum login timeout (10 - 180 sec, default = 30).
	LoginTimeout pulumi.IntPtrInput
	// SSL-VPN access port (1 - 65535).
	Port pulumi.IntPtrInput
	// Enable means that if SSL-VPN connections are allowed on an interface admin GUI connections are blocked on that interface. Valid values: `enable`, `disable`.
	PortPrecedence pulumi.StringPtrInput
	// Enable to require client certificates for all SSL-VPN users. Valid values: `enable`, `disable`.
	Reqclientcert pulumi.StringPtrInput
	// Enable to allow SSL-VPN sessions to bypass routing and bind to the incoming interface. Valid values: `enable`, `disable`.
	RouteSourceInterface pulumi.StringPtrInput
	// SAML local redirect port in the machine running FCT (0 - 65535). 0 is to disable redirection on FGT side.
	SamlRedirectPort pulumi.IntPtrInput
	// Name of the server certificate to be used for SSL-VPNs.
	Servercert pulumi.StringPtrInput
	// Enable/disable negated source IPv6 address match. Valid values: `enable`, `disable`.
	SourceAddress6Negate pulumi.StringPtrInput
	// IPv6 source address of incoming traffic. The structure of `sourceAddress6` block is documented below.
	SourceAddress6s VpnSslSettingsSourceAddress6ArrayInput
	// Enable/disable negated source address match. Valid values: `enable`, `disable`.
	SourceAddressNegate pulumi.StringPtrInput
	// Source address of incoming traffic. The structure of `sourceAddress` block is documented below.
	SourceAddresses VpnSslSettingsSourceAddressArrayInput
	// SSL VPN source interface of incoming traffic. The structure of `sourceInterface` block is documented below.
	SourceInterfaces VpnSslSettingsSourceInterfaceArrayInput
	// Enable to allow client renegotiation by the server if the tunnel goes down. Valid values: `disable`, `enable`.
	SslClientRenegotiation pulumi.StringPtrInput
	// Enable/disable insertion of empty fragment. Valid values: `enable`, `disable`.
	SslInsertEmptyFragment pulumi.StringPtrInput
	// SSL maximum protocol version. Valid values: `tls1-0`, `tls1-1`, `tls1-2`, `tls1-3`.
	SslMaxProtoVer pulumi.StringPtrInput
	// SSL minimum protocol version. Valid values: `tls1-0`, `tls1-1`, `tls1-2`, `tls1-3`.
	SslMinProtoVer pulumi.StringPtrInput
	// Enable/disable SSL-VPN. Valid values: `enable`, `disable`.
	Status pulumi.StringPtrInput
	// Enable/disable TLSv1.0. Valid values: `enable`, `disable`.
	Tlsv10 pulumi.StringPtrInput
	// Enable/disable TLSv1.1. Valid values: `enable`, `disable`.
	Tlsv11 pulumi.StringPtrInput
	// Enable/disable TLSv1.2. Valid values: `enable`, `disable`.
	Tlsv12 pulumi.StringPtrInput
	// Enable/disable TLSv1.3. Valid values: `enable`, `disable`.
	Tlsv13 pulumi.StringPtrInput
	// Transform backward slashes to forward slashes in URLs. Valid values: `enable`, `disable`.
	TransformBackwardSlashes pulumi.StringPtrInput
	// Method used for assigning address for tunnel. Valid values: `first-available`, `round-robin`.
	TunnelAddrAssignedMethod pulumi.StringPtrInput
	// Enable/disable tunnel connection without re-authorization if previous connection dropped. Valid values: `enable`, `disable`.
	TunnelConnectWithoutReauth pulumi.StringPtrInput
	// Names of the IPv4 IP Pool firewall objects that define the IP addresses reserved for remote clients. The structure of `tunnelIpPools` block is documented below.
	TunnelIpPools VpnSslSettingsTunnelIpPoolArrayInput
	// Names of the IPv6 IP Pool firewall objects that define the IP addresses reserved for remote clients. The structure of `tunnelIpv6Pools` block is documented below.
	TunnelIpv6Pools VpnSslSettingsTunnelIpv6PoolArrayInput
	// Time out value to clean up user session after tunnel connection is dropped (1 - 255 sec, default=30).
	TunnelUserSessionTimeout pulumi.IntPtrInput
	// Enable/disable unsafe legacy re-negotiation. Valid values: `enable`, `disable`.
	UnsafeLegacyRenegotiation pulumi.StringPtrInput
	// Enable to obscure the host name of the URL of the web browser display. Valid values: `enable`, `disable`.
	UrlObscuration pulumi.StringPtrInput
	// Name of user peer.
	UserPeer pulumi.StringPtrInput
	// Specifies the vdom to which the resource will be applied when the FortiGate unit is running in VDOM mode. Only one vdom can be specified. If you want to inherit the vdom configuration of the provider, please do not set this parameter.
	Vdomparam pulumi.StringPtrInput
	// WINS server 1.
	WinsServer1 pulumi.StringPtrInput
	// WINS server 2.
	WinsServer2 pulumi.StringPtrInput
	// Add HTTP X-Content-Type-Options header. Valid values: `enable`, `disable`.
	XContentTypeOptions pulumi.StringPtrInput
}

func (VpnSslSettingsArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*vpnSslSettingsArgs)(nil)).Elem()
}

type VpnSslSettingsInput interface {
	pulumi.Input

	ToVpnSslSettingsOutput() VpnSslSettingsOutput
	ToVpnSslSettingsOutputWithContext(ctx context.Context) VpnSslSettingsOutput
}

func (*VpnSslSettings) ElementType() reflect.Type {
	return reflect.TypeOf((**VpnSslSettings)(nil)).Elem()
}

func (i *VpnSslSettings) ToVpnSslSettingsOutput() VpnSslSettingsOutput {
	return i.ToVpnSslSettingsOutputWithContext(context.Background())
}

func (i *VpnSslSettings) ToVpnSslSettingsOutputWithContext(ctx context.Context) VpnSslSettingsOutput {
	return pulumi.ToOutputWithContext(ctx, i).(VpnSslSettingsOutput)
}

// VpnSslSettingsArrayInput is an input type that accepts VpnSslSettingsArray and VpnSslSettingsArrayOutput values.
// You can construct a concrete instance of `VpnSslSettingsArrayInput` via:
//
//          VpnSslSettingsArray{ VpnSslSettingsArgs{...} }
type VpnSslSettingsArrayInput interface {
	pulumi.Input

	ToVpnSslSettingsArrayOutput() VpnSslSettingsArrayOutput
	ToVpnSslSettingsArrayOutputWithContext(context.Context) VpnSslSettingsArrayOutput
}

type VpnSslSettingsArray []VpnSslSettingsInput

func (VpnSslSettingsArray) ElementType() reflect.Type {
	return reflect.TypeOf((*[]*VpnSslSettings)(nil)).Elem()
}

func (i VpnSslSettingsArray) ToVpnSslSettingsArrayOutput() VpnSslSettingsArrayOutput {
	return i.ToVpnSslSettingsArrayOutputWithContext(context.Background())
}

func (i VpnSslSettingsArray) ToVpnSslSettingsArrayOutputWithContext(ctx context.Context) VpnSslSettingsArrayOutput {
	return pulumi.ToOutputWithContext(ctx, i).(VpnSslSettingsArrayOutput)
}

// VpnSslSettingsMapInput is an input type that accepts VpnSslSettingsMap and VpnSslSettingsMapOutput values.
// You can construct a concrete instance of `VpnSslSettingsMapInput` via:
//
//          VpnSslSettingsMap{ "key": VpnSslSettingsArgs{...} }
type VpnSslSettingsMapInput interface {
	pulumi.Input

	ToVpnSslSettingsMapOutput() VpnSslSettingsMapOutput
	ToVpnSslSettingsMapOutputWithContext(context.Context) VpnSslSettingsMapOutput
}

type VpnSslSettingsMap map[string]VpnSslSettingsInput

func (VpnSslSettingsMap) ElementType() reflect.Type {
	return reflect.TypeOf((*map[string]*VpnSslSettings)(nil)).Elem()
}

func (i VpnSslSettingsMap) ToVpnSslSettingsMapOutput() VpnSslSettingsMapOutput {
	return i.ToVpnSslSettingsMapOutputWithContext(context.Background())
}

func (i VpnSslSettingsMap) ToVpnSslSettingsMapOutputWithContext(ctx context.Context) VpnSslSettingsMapOutput {
	return pulumi.ToOutputWithContext(ctx, i).(VpnSslSettingsMapOutput)
}

type VpnSslSettingsOutput struct{ *pulumi.OutputState }

func (VpnSslSettingsOutput) ElementType() reflect.Type {
	return reflect.TypeOf((**VpnSslSettings)(nil)).Elem()
}

func (o VpnSslSettingsOutput) ToVpnSslSettingsOutput() VpnSslSettingsOutput {
	return o
}

func (o VpnSslSettingsOutput) ToVpnSslSettingsOutputWithContext(ctx context.Context) VpnSslSettingsOutput {
	return o
}

type VpnSslSettingsArrayOutput struct{ *pulumi.OutputState }

func (VpnSslSettingsArrayOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*[]*VpnSslSettings)(nil)).Elem()
}

func (o VpnSslSettingsArrayOutput) ToVpnSslSettingsArrayOutput() VpnSslSettingsArrayOutput {
	return o
}

func (o VpnSslSettingsArrayOutput) ToVpnSslSettingsArrayOutputWithContext(ctx context.Context) VpnSslSettingsArrayOutput {
	return o
}

func (o VpnSslSettingsArrayOutput) Index(i pulumi.IntInput) VpnSslSettingsOutput {
	return pulumi.All(o, i).ApplyT(func(vs []interface{}) *VpnSslSettings {
		return vs[0].([]*VpnSslSettings)[vs[1].(int)]
	}).(VpnSslSettingsOutput)
}

type VpnSslSettingsMapOutput struct{ *pulumi.OutputState }

func (VpnSslSettingsMapOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*map[string]*VpnSslSettings)(nil)).Elem()
}

func (o VpnSslSettingsMapOutput) ToVpnSslSettingsMapOutput() VpnSslSettingsMapOutput {
	return o
}

func (o VpnSslSettingsMapOutput) ToVpnSslSettingsMapOutputWithContext(ctx context.Context) VpnSslSettingsMapOutput {
	return o
}

func (o VpnSslSettingsMapOutput) MapIndex(k pulumi.StringInput) VpnSslSettingsOutput {
	return pulumi.All(o, k).ApplyT(func(vs []interface{}) *VpnSslSettings {
		return vs[0].(map[string]*VpnSslSettings)[vs[1].(string)]
	}).(VpnSslSettingsOutput)
}

func init() {
	pulumi.RegisterInputType(reflect.TypeOf((*VpnSslSettingsInput)(nil)).Elem(), &VpnSslSettings{})
	pulumi.RegisterInputType(reflect.TypeOf((*VpnSslSettingsArrayInput)(nil)).Elem(), VpnSslSettingsArray{})
	pulumi.RegisterInputType(reflect.TypeOf((*VpnSslSettingsMapInput)(nil)).Elem(), VpnSslSettingsMap{})
	pulumi.RegisterOutputType(VpnSslSettingsOutput{})
	pulumi.RegisterOutputType(VpnSslSettingsArrayOutput{})
	pulumi.RegisterOutputType(VpnSslSettingsMapOutput{})
}
