// Code generated by the Pulumi Terraform Bridge (tfgen) Tool DO NOT EDIT.
// *** WARNING: Do not edit by hand unless you're certain you know what you are doing! ***

package fortios

import (
	"context"
	"reflect"

	"github.com/pulumi/pulumi/sdk/v3/go/pulumi"
)

type DlpFpSensitivity struct {
	pulumi.CustomResourceState

	Name      pulumi.StringOutput    `pulumi:"name"`
	Vdomparam pulumi.StringPtrOutput `pulumi:"vdomparam"`
}

// NewDlpFpSensitivity registers a new resource with the given unique name, arguments, and options.
func NewDlpFpSensitivity(ctx *pulumi.Context,
	name string, args *DlpFpSensitivityArgs, opts ...pulumi.ResourceOption) (*DlpFpSensitivity, error) {
	if args == nil {
		args = &DlpFpSensitivityArgs{}
	}

	opts = pkgResourceDefaultOpts(opts)
	var resource DlpFpSensitivity
	err := ctx.RegisterResource("fortios:index/dlpFpSensitivity:DlpFpSensitivity", name, args, &resource, opts...)
	if err != nil {
		return nil, err
	}
	return &resource, nil
}

// GetDlpFpSensitivity gets an existing DlpFpSensitivity resource's state with the given name, ID, and optional
// state properties that are used to uniquely qualify the lookup (nil if not required).
func GetDlpFpSensitivity(ctx *pulumi.Context,
	name string, id pulumi.IDInput, state *DlpFpSensitivityState, opts ...pulumi.ResourceOption) (*DlpFpSensitivity, error) {
	var resource DlpFpSensitivity
	err := ctx.ReadResource("fortios:index/dlpFpSensitivity:DlpFpSensitivity", name, id, state, &resource, opts...)
	if err != nil {
		return nil, err
	}
	return &resource, nil
}

// Input properties used for looking up and filtering DlpFpSensitivity resources.
type dlpFpSensitivityState struct {
	Name      *string `pulumi:"name"`
	Vdomparam *string `pulumi:"vdomparam"`
}

type DlpFpSensitivityState struct {
	Name      pulumi.StringPtrInput
	Vdomparam pulumi.StringPtrInput
}

func (DlpFpSensitivityState) ElementType() reflect.Type {
	return reflect.TypeOf((*dlpFpSensitivityState)(nil)).Elem()
}

type dlpFpSensitivityArgs struct {
	Name      *string `pulumi:"name"`
	Vdomparam *string `pulumi:"vdomparam"`
}

// The set of arguments for constructing a DlpFpSensitivity resource.
type DlpFpSensitivityArgs struct {
	Name      pulumi.StringPtrInput
	Vdomparam pulumi.StringPtrInput
}

func (DlpFpSensitivityArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*dlpFpSensitivityArgs)(nil)).Elem()
}

type DlpFpSensitivityInput interface {
	pulumi.Input

	ToDlpFpSensitivityOutput() DlpFpSensitivityOutput
	ToDlpFpSensitivityOutputWithContext(ctx context.Context) DlpFpSensitivityOutput
}

func (*DlpFpSensitivity) ElementType() reflect.Type {
	return reflect.TypeOf((**DlpFpSensitivity)(nil)).Elem()
}

func (i *DlpFpSensitivity) ToDlpFpSensitivityOutput() DlpFpSensitivityOutput {
	return i.ToDlpFpSensitivityOutputWithContext(context.Background())
}

func (i *DlpFpSensitivity) ToDlpFpSensitivityOutputWithContext(ctx context.Context) DlpFpSensitivityOutput {
	return pulumi.ToOutputWithContext(ctx, i).(DlpFpSensitivityOutput)
}

// DlpFpSensitivityArrayInput is an input type that accepts DlpFpSensitivityArray and DlpFpSensitivityArrayOutput values.
// You can construct a concrete instance of `DlpFpSensitivityArrayInput` via:
//
//	DlpFpSensitivityArray{ DlpFpSensitivityArgs{...} }
type DlpFpSensitivityArrayInput interface {
	pulumi.Input

	ToDlpFpSensitivityArrayOutput() DlpFpSensitivityArrayOutput
	ToDlpFpSensitivityArrayOutputWithContext(context.Context) DlpFpSensitivityArrayOutput
}

type DlpFpSensitivityArray []DlpFpSensitivityInput

func (DlpFpSensitivityArray) ElementType() reflect.Type {
	return reflect.TypeOf((*[]*DlpFpSensitivity)(nil)).Elem()
}

func (i DlpFpSensitivityArray) ToDlpFpSensitivityArrayOutput() DlpFpSensitivityArrayOutput {
	return i.ToDlpFpSensitivityArrayOutputWithContext(context.Background())
}

func (i DlpFpSensitivityArray) ToDlpFpSensitivityArrayOutputWithContext(ctx context.Context) DlpFpSensitivityArrayOutput {
	return pulumi.ToOutputWithContext(ctx, i).(DlpFpSensitivityArrayOutput)
}

// DlpFpSensitivityMapInput is an input type that accepts DlpFpSensitivityMap and DlpFpSensitivityMapOutput values.
// You can construct a concrete instance of `DlpFpSensitivityMapInput` via:
//
//	DlpFpSensitivityMap{ "key": DlpFpSensitivityArgs{...} }
type DlpFpSensitivityMapInput interface {
	pulumi.Input

	ToDlpFpSensitivityMapOutput() DlpFpSensitivityMapOutput
	ToDlpFpSensitivityMapOutputWithContext(context.Context) DlpFpSensitivityMapOutput
}

type DlpFpSensitivityMap map[string]DlpFpSensitivityInput

func (DlpFpSensitivityMap) ElementType() reflect.Type {
	return reflect.TypeOf((*map[string]*DlpFpSensitivity)(nil)).Elem()
}

func (i DlpFpSensitivityMap) ToDlpFpSensitivityMapOutput() DlpFpSensitivityMapOutput {
	return i.ToDlpFpSensitivityMapOutputWithContext(context.Background())
}

func (i DlpFpSensitivityMap) ToDlpFpSensitivityMapOutputWithContext(ctx context.Context) DlpFpSensitivityMapOutput {
	return pulumi.ToOutputWithContext(ctx, i).(DlpFpSensitivityMapOutput)
}

type DlpFpSensitivityOutput struct{ *pulumi.OutputState }

func (DlpFpSensitivityOutput) ElementType() reflect.Type {
	return reflect.TypeOf((**DlpFpSensitivity)(nil)).Elem()
}

func (o DlpFpSensitivityOutput) ToDlpFpSensitivityOutput() DlpFpSensitivityOutput {
	return o
}

func (o DlpFpSensitivityOutput) ToDlpFpSensitivityOutputWithContext(ctx context.Context) DlpFpSensitivityOutput {
	return o
}

func (o DlpFpSensitivityOutput) Name() pulumi.StringOutput {
	return o.ApplyT(func(v *DlpFpSensitivity) pulumi.StringOutput { return v.Name }).(pulumi.StringOutput)
}

func (o DlpFpSensitivityOutput) Vdomparam() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *DlpFpSensitivity) pulumi.StringPtrOutput { return v.Vdomparam }).(pulumi.StringPtrOutput)
}

type DlpFpSensitivityArrayOutput struct{ *pulumi.OutputState }

func (DlpFpSensitivityArrayOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*[]*DlpFpSensitivity)(nil)).Elem()
}

func (o DlpFpSensitivityArrayOutput) ToDlpFpSensitivityArrayOutput() DlpFpSensitivityArrayOutput {
	return o
}

func (o DlpFpSensitivityArrayOutput) ToDlpFpSensitivityArrayOutputWithContext(ctx context.Context) DlpFpSensitivityArrayOutput {
	return o
}

func (o DlpFpSensitivityArrayOutput) Index(i pulumi.IntInput) DlpFpSensitivityOutput {
	return pulumi.All(o, i).ApplyT(func(vs []interface{}) *DlpFpSensitivity {
		return vs[0].([]*DlpFpSensitivity)[vs[1].(int)]
	}).(DlpFpSensitivityOutput)
}

type DlpFpSensitivityMapOutput struct{ *pulumi.OutputState }

func (DlpFpSensitivityMapOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*map[string]*DlpFpSensitivity)(nil)).Elem()
}

func (o DlpFpSensitivityMapOutput) ToDlpFpSensitivityMapOutput() DlpFpSensitivityMapOutput {
	return o
}

func (o DlpFpSensitivityMapOutput) ToDlpFpSensitivityMapOutputWithContext(ctx context.Context) DlpFpSensitivityMapOutput {
	return o
}

func (o DlpFpSensitivityMapOutput) MapIndex(k pulumi.StringInput) DlpFpSensitivityOutput {
	return pulumi.All(o, k).ApplyT(func(vs []interface{}) *DlpFpSensitivity {
		return vs[0].(map[string]*DlpFpSensitivity)[vs[1].(string)]
	}).(DlpFpSensitivityOutput)
}

func init() {
	pulumi.RegisterInputType(reflect.TypeOf((*DlpFpSensitivityInput)(nil)).Elem(), &DlpFpSensitivity{})
	pulumi.RegisterInputType(reflect.TypeOf((*DlpFpSensitivityArrayInput)(nil)).Elem(), DlpFpSensitivityArray{})
	pulumi.RegisterInputType(reflect.TypeOf((*DlpFpSensitivityMapInput)(nil)).Elem(), DlpFpSensitivityMap{})
	pulumi.RegisterOutputType(DlpFpSensitivityOutput{})
	pulumi.RegisterOutputType(DlpFpSensitivityArrayOutput{})
	pulumi.RegisterOutputType(DlpFpSensitivityMapOutput{})
}
