// Code generated by the Pulumi Terraform Bridge (tfgen) Tool DO NOT EDIT.
// *** WARNING: Do not edit by hand unless you're certain you know what you are doing! ***

package fortios

import (
	"context"
	"reflect"

	"github.com/pulumi/pulumi/sdk/v3/go/pulumi"
)

type UserDeviceCategory struct {
	pulumi.CustomResourceState

	Comment   pulumi.StringPtrOutput `pulumi:"comment"`
	Desc      pulumi.StringPtrOutput `pulumi:"desc"`
	Name      pulumi.StringOutput    `pulumi:"name"`
	Vdomparam pulumi.StringPtrOutput `pulumi:"vdomparam"`
}

// NewUserDeviceCategory registers a new resource with the given unique name, arguments, and options.
func NewUserDeviceCategory(ctx *pulumi.Context,
	name string, args *UserDeviceCategoryArgs, opts ...pulumi.ResourceOption) (*UserDeviceCategory, error) {
	if args == nil {
		args = &UserDeviceCategoryArgs{}
	}

	opts = pkgResourceDefaultOpts(opts)
	var resource UserDeviceCategory
	err := ctx.RegisterResource("fortios:index/userDeviceCategory:UserDeviceCategory", name, args, &resource, opts...)
	if err != nil {
		return nil, err
	}
	return &resource, nil
}

// GetUserDeviceCategory gets an existing UserDeviceCategory resource's state with the given name, ID, and optional
// state properties that are used to uniquely qualify the lookup (nil if not required).
func GetUserDeviceCategory(ctx *pulumi.Context,
	name string, id pulumi.IDInput, state *UserDeviceCategoryState, opts ...pulumi.ResourceOption) (*UserDeviceCategory, error) {
	var resource UserDeviceCategory
	err := ctx.ReadResource("fortios:index/userDeviceCategory:UserDeviceCategory", name, id, state, &resource, opts...)
	if err != nil {
		return nil, err
	}
	return &resource, nil
}

// Input properties used for looking up and filtering UserDeviceCategory resources.
type userDeviceCategoryState struct {
	Comment   *string `pulumi:"comment"`
	Desc      *string `pulumi:"desc"`
	Name      *string `pulumi:"name"`
	Vdomparam *string `pulumi:"vdomparam"`
}

type UserDeviceCategoryState struct {
	Comment   pulumi.StringPtrInput
	Desc      pulumi.StringPtrInput
	Name      pulumi.StringPtrInput
	Vdomparam pulumi.StringPtrInput
}

func (UserDeviceCategoryState) ElementType() reflect.Type {
	return reflect.TypeOf((*userDeviceCategoryState)(nil)).Elem()
}

type userDeviceCategoryArgs struct {
	Comment   *string `pulumi:"comment"`
	Desc      *string `pulumi:"desc"`
	Name      *string `pulumi:"name"`
	Vdomparam *string `pulumi:"vdomparam"`
}

// The set of arguments for constructing a UserDeviceCategory resource.
type UserDeviceCategoryArgs struct {
	Comment   pulumi.StringPtrInput
	Desc      pulumi.StringPtrInput
	Name      pulumi.StringPtrInput
	Vdomparam pulumi.StringPtrInput
}

func (UserDeviceCategoryArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*userDeviceCategoryArgs)(nil)).Elem()
}

type UserDeviceCategoryInput interface {
	pulumi.Input

	ToUserDeviceCategoryOutput() UserDeviceCategoryOutput
	ToUserDeviceCategoryOutputWithContext(ctx context.Context) UserDeviceCategoryOutput
}

func (*UserDeviceCategory) ElementType() reflect.Type {
	return reflect.TypeOf((**UserDeviceCategory)(nil)).Elem()
}

func (i *UserDeviceCategory) ToUserDeviceCategoryOutput() UserDeviceCategoryOutput {
	return i.ToUserDeviceCategoryOutputWithContext(context.Background())
}

func (i *UserDeviceCategory) ToUserDeviceCategoryOutputWithContext(ctx context.Context) UserDeviceCategoryOutput {
	return pulumi.ToOutputWithContext(ctx, i).(UserDeviceCategoryOutput)
}

// UserDeviceCategoryArrayInput is an input type that accepts UserDeviceCategoryArray and UserDeviceCategoryArrayOutput values.
// You can construct a concrete instance of `UserDeviceCategoryArrayInput` via:
//
//	UserDeviceCategoryArray{ UserDeviceCategoryArgs{...} }
type UserDeviceCategoryArrayInput interface {
	pulumi.Input

	ToUserDeviceCategoryArrayOutput() UserDeviceCategoryArrayOutput
	ToUserDeviceCategoryArrayOutputWithContext(context.Context) UserDeviceCategoryArrayOutput
}

type UserDeviceCategoryArray []UserDeviceCategoryInput

func (UserDeviceCategoryArray) ElementType() reflect.Type {
	return reflect.TypeOf((*[]*UserDeviceCategory)(nil)).Elem()
}

func (i UserDeviceCategoryArray) ToUserDeviceCategoryArrayOutput() UserDeviceCategoryArrayOutput {
	return i.ToUserDeviceCategoryArrayOutputWithContext(context.Background())
}

func (i UserDeviceCategoryArray) ToUserDeviceCategoryArrayOutputWithContext(ctx context.Context) UserDeviceCategoryArrayOutput {
	return pulumi.ToOutputWithContext(ctx, i).(UserDeviceCategoryArrayOutput)
}

// UserDeviceCategoryMapInput is an input type that accepts UserDeviceCategoryMap and UserDeviceCategoryMapOutput values.
// You can construct a concrete instance of `UserDeviceCategoryMapInput` via:
//
//	UserDeviceCategoryMap{ "key": UserDeviceCategoryArgs{...} }
type UserDeviceCategoryMapInput interface {
	pulumi.Input

	ToUserDeviceCategoryMapOutput() UserDeviceCategoryMapOutput
	ToUserDeviceCategoryMapOutputWithContext(context.Context) UserDeviceCategoryMapOutput
}

type UserDeviceCategoryMap map[string]UserDeviceCategoryInput

func (UserDeviceCategoryMap) ElementType() reflect.Type {
	return reflect.TypeOf((*map[string]*UserDeviceCategory)(nil)).Elem()
}

func (i UserDeviceCategoryMap) ToUserDeviceCategoryMapOutput() UserDeviceCategoryMapOutput {
	return i.ToUserDeviceCategoryMapOutputWithContext(context.Background())
}

func (i UserDeviceCategoryMap) ToUserDeviceCategoryMapOutputWithContext(ctx context.Context) UserDeviceCategoryMapOutput {
	return pulumi.ToOutputWithContext(ctx, i).(UserDeviceCategoryMapOutput)
}

type UserDeviceCategoryOutput struct{ *pulumi.OutputState }

func (UserDeviceCategoryOutput) ElementType() reflect.Type {
	return reflect.TypeOf((**UserDeviceCategory)(nil)).Elem()
}

func (o UserDeviceCategoryOutput) ToUserDeviceCategoryOutput() UserDeviceCategoryOutput {
	return o
}

func (o UserDeviceCategoryOutput) ToUserDeviceCategoryOutputWithContext(ctx context.Context) UserDeviceCategoryOutput {
	return o
}

func (o UserDeviceCategoryOutput) Comment() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *UserDeviceCategory) pulumi.StringPtrOutput { return v.Comment }).(pulumi.StringPtrOutput)
}

func (o UserDeviceCategoryOutput) Desc() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *UserDeviceCategory) pulumi.StringPtrOutput { return v.Desc }).(pulumi.StringPtrOutput)
}

func (o UserDeviceCategoryOutput) Name() pulumi.StringOutput {
	return o.ApplyT(func(v *UserDeviceCategory) pulumi.StringOutput { return v.Name }).(pulumi.StringOutput)
}

func (o UserDeviceCategoryOutput) Vdomparam() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *UserDeviceCategory) pulumi.StringPtrOutput { return v.Vdomparam }).(pulumi.StringPtrOutput)
}

type UserDeviceCategoryArrayOutput struct{ *pulumi.OutputState }

func (UserDeviceCategoryArrayOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*[]*UserDeviceCategory)(nil)).Elem()
}

func (o UserDeviceCategoryArrayOutput) ToUserDeviceCategoryArrayOutput() UserDeviceCategoryArrayOutput {
	return o
}

func (o UserDeviceCategoryArrayOutput) ToUserDeviceCategoryArrayOutputWithContext(ctx context.Context) UserDeviceCategoryArrayOutput {
	return o
}

func (o UserDeviceCategoryArrayOutput) Index(i pulumi.IntInput) UserDeviceCategoryOutput {
	return pulumi.All(o, i).ApplyT(func(vs []interface{}) *UserDeviceCategory {
		return vs[0].([]*UserDeviceCategory)[vs[1].(int)]
	}).(UserDeviceCategoryOutput)
}

type UserDeviceCategoryMapOutput struct{ *pulumi.OutputState }

func (UserDeviceCategoryMapOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*map[string]*UserDeviceCategory)(nil)).Elem()
}

func (o UserDeviceCategoryMapOutput) ToUserDeviceCategoryMapOutput() UserDeviceCategoryMapOutput {
	return o
}

func (o UserDeviceCategoryMapOutput) ToUserDeviceCategoryMapOutputWithContext(ctx context.Context) UserDeviceCategoryMapOutput {
	return o
}

func (o UserDeviceCategoryMapOutput) MapIndex(k pulumi.StringInput) UserDeviceCategoryOutput {
	return pulumi.All(o, k).ApplyT(func(vs []interface{}) *UserDeviceCategory {
		return vs[0].(map[string]*UserDeviceCategory)[vs[1].(string)]
	}).(UserDeviceCategoryOutput)
}

func init() {
	pulumi.RegisterInputType(reflect.TypeOf((*UserDeviceCategoryInput)(nil)).Elem(), &UserDeviceCategory{})
	pulumi.RegisterInputType(reflect.TypeOf((*UserDeviceCategoryArrayInput)(nil)).Elem(), UserDeviceCategoryArray{})
	pulumi.RegisterInputType(reflect.TypeOf((*UserDeviceCategoryMapInput)(nil)).Elem(), UserDeviceCategoryMap{})
	pulumi.RegisterOutputType(UserDeviceCategoryOutput{})
	pulumi.RegisterOutputType(UserDeviceCategoryArrayOutput{})
	pulumi.RegisterOutputType(UserDeviceCategoryMapOutput{})
}
