// Code generated by the Pulumi Terraform Bridge (tfgen) Tool DO NOT EDIT.
// *** WARNING: Do not edit by hand unless you're certain you know what you are doing! ***

package fortios

import (
	"context"
	"reflect"

	"github.com/lubyou/pulumi-fortios/sdk/go/fortios/internal"
	"github.com/pulumi/pulumi/sdk/v3/go/pulumi"
	"github.com/pulumi/pulumi/sdk/v3/go/pulumix"
)

type SwitchControllerPtpProfile struct {
	pulumi.CustomResourceState

	Description       pulumi.StringOutput    `pulumi:"description"`
	Domain            pulumi.IntOutput       `pulumi:"domain"`
	Mode              pulumi.StringOutput    `pulumi:"mode"`
	Name              pulumi.StringOutput    `pulumi:"name"`
	PdelayReqInterval pulumi.StringOutput    `pulumi:"pdelayReqInterval"`
	PtpProfile        pulumi.StringOutput    `pulumi:"ptpProfile"`
	Transport         pulumi.StringOutput    `pulumi:"transport"`
	Vdomparam         pulumi.StringPtrOutput `pulumi:"vdomparam"`
}

// NewSwitchControllerPtpProfile registers a new resource with the given unique name, arguments, and options.
func NewSwitchControllerPtpProfile(ctx *pulumi.Context,
	name string, args *SwitchControllerPtpProfileArgs, opts ...pulumi.ResourceOption) (*SwitchControllerPtpProfile, error) {
	if args == nil {
		args = &SwitchControllerPtpProfileArgs{}
	}

	opts = internal.PkgResourceDefaultOpts(opts)
	var resource SwitchControllerPtpProfile
	err := ctx.RegisterResource("fortios:index/switchControllerPtpProfile:SwitchControllerPtpProfile", name, args, &resource, opts...)
	if err != nil {
		return nil, err
	}
	return &resource, nil
}

// GetSwitchControllerPtpProfile gets an existing SwitchControllerPtpProfile resource's state with the given name, ID, and optional
// state properties that are used to uniquely qualify the lookup (nil if not required).
func GetSwitchControllerPtpProfile(ctx *pulumi.Context,
	name string, id pulumi.IDInput, state *SwitchControllerPtpProfileState, opts ...pulumi.ResourceOption) (*SwitchControllerPtpProfile, error) {
	var resource SwitchControllerPtpProfile
	err := ctx.ReadResource("fortios:index/switchControllerPtpProfile:SwitchControllerPtpProfile", name, id, state, &resource, opts...)
	if err != nil {
		return nil, err
	}
	return &resource, nil
}

// Input properties used for looking up and filtering SwitchControllerPtpProfile resources.
type switchControllerPtpProfileState struct {
	Description       *string `pulumi:"description"`
	Domain            *int    `pulumi:"domain"`
	Mode              *string `pulumi:"mode"`
	Name              *string `pulumi:"name"`
	PdelayReqInterval *string `pulumi:"pdelayReqInterval"`
	PtpProfile        *string `pulumi:"ptpProfile"`
	Transport         *string `pulumi:"transport"`
	Vdomparam         *string `pulumi:"vdomparam"`
}

type SwitchControllerPtpProfileState struct {
	Description       pulumi.StringPtrInput
	Domain            pulumi.IntPtrInput
	Mode              pulumi.StringPtrInput
	Name              pulumi.StringPtrInput
	PdelayReqInterval pulumi.StringPtrInput
	PtpProfile        pulumi.StringPtrInput
	Transport         pulumi.StringPtrInput
	Vdomparam         pulumi.StringPtrInput
}

func (SwitchControllerPtpProfileState) ElementType() reflect.Type {
	return reflect.TypeOf((*switchControllerPtpProfileState)(nil)).Elem()
}

type switchControllerPtpProfileArgs struct {
	Description       *string `pulumi:"description"`
	Domain            *int    `pulumi:"domain"`
	Mode              *string `pulumi:"mode"`
	Name              *string `pulumi:"name"`
	PdelayReqInterval *string `pulumi:"pdelayReqInterval"`
	PtpProfile        *string `pulumi:"ptpProfile"`
	Transport         *string `pulumi:"transport"`
	Vdomparam         *string `pulumi:"vdomparam"`
}

// The set of arguments for constructing a SwitchControllerPtpProfile resource.
type SwitchControllerPtpProfileArgs struct {
	Description       pulumi.StringPtrInput
	Domain            pulumi.IntPtrInput
	Mode              pulumi.StringPtrInput
	Name              pulumi.StringPtrInput
	PdelayReqInterval pulumi.StringPtrInput
	PtpProfile        pulumi.StringPtrInput
	Transport         pulumi.StringPtrInput
	Vdomparam         pulumi.StringPtrInput
}

func (SwitchControllerPtpProfileArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*switchControllerPtpProfileArgs)(nil)).Elem()
}

type SwitchControllerPtpProfileInput interface {
	pulumi.Input

	ToSwitchControllerPtpProfileOutput() SwitchControllerPtpProfileOutput
	ToSwitchControllerPtpProfileOutputWithContext(ctx context.Context) SwitchControllerPtpProfileOutput
}

func (*SwitchControllerPtpProfile) ElementType() reflect.Type {
	return reflect.TypeOf((**SwitchControllerPtpProfile)(nil)).Elem()
}

func (i *SwitchControllerPtpProfile) ToSwitchControllerPtpProfileOutput() SwitchControllerPtpProfileOutput {
	return i.ToSwitchControllerPtpProfileOutputWithContext(context.Background())
}

func (i *SwitchControllerPtpProfile) ToSwitchControllerPtpProfileOutputWithContext(ctx context.Context) SwitchControllerPtpProfileOutput {
	return pulumi.ToOutputWithContext(ctx, i).(SwitchControllerPtpProfileOutput)
}

func (i *SwitchControllerPtpProfile) ToOutput(ctx context.Context) pulumix.Output[*SwitchControllerPtpProfile] {
	return pulumix.Output[*SwitchControllerPtpProfile]{
		OutputState: i.ToSwitchControllerPtpProfileOutputWithContext(ctx).OutputState,
	}
}

// SwitchControllerPtpProfileArrayInput is an input type that accepts SwitchControllerPtpProfileArray and SwitchControllerPtpProfileArrayOutput values.
// You can construct a concrete instance of `SwitchControllerPtpProfileArrayInput` via:
//
//	SwitchControllerPtpProfileArray{ SwitchControllerPtpProfileArgs{...} }
type SwitchControllerPtpProfileArrayInput interface {
	pulumi.Input

	ToSwitchControllerPtpProfileArrayOutput() SwitchControllerPtpProfileArrayOutput
	ToSwitchControllerPtpProfileArrayOutputWithContext(context.Context) SwitchControllerPtpProfileArrayOutput
}

type SwitchControllerPtpProfileArray []SwitchControllerPtpProfileInput

func (SwitchControllerPtpProfileArray) ElementType() reflect.Type {
	return reflect.TypeOf((*[]*SwitchControllerPtpProfile)(nil)).Elem()
}

func (i SwitchControllerPtpProfileArray) ToSwitchControllerPtpProfileArrayOutput() SwitchControllerPtpProfileArrayOutput {
	return i.ToSwitchControllerPtpProfileArrayOutputWithContext(context.Background())
}

func (i SwitchControllerPtpProfileArray) ToSwitchControllerPtpProfileArrayOutputWithContext(ctx context.Context) SwitchControllerPtpProfileArrayOutput {
	return pulumi.ToOutputWithContext(ctx, i).(SwitchControllerPtpProfileArrayOutput)
}

func (i SwitchControllerPtpProfileArray) ToOutput(ctx context.Context) pulumix.Output[[]*SwitchControllerPtpProfile] {
	return pulumix.Output[[]*SwitchControllerPtpProfile]{
		OutputState: i.ToSwitchControllerPtpProfileArrayOutputWithContext(ctx).OutputState,
	}
}

// SwitchControllerPtpProfileMapInput is an input type that accepts SwitchControllerPtpProfileMap and SwitchControllerPtpProfileMapOutput values.
// You can construct a concrete instance of `SwitchControllerPtpProfileMapInput` via:
//
//	SwitchControllerPtpProfileMap{ "key": SwitchControllerPtpProfileArgs{...} }
type SwitchControllerPtpProfileMapInput interface {
	pulumi.Input

	ToSwitchControllerPtpProfileMapOutput() SwitchControllerPtpProfileMapOutput
	ToSwitchControllerPtpProfileMapOutputWithContext(context.Context) SwitchControllerPtpProfileMapOutput
}

type SwitchControllerPtpProfileMap map[string]SwitchControllerPtpProfileInput

func (SwitchControllerPtpProfileMap) ElementType() reflect.Type {
	return reflect.TypeOf((*map[string]*SwitchControllerPtpProfile)(nil)).Elem()
}

func (i SwitchControllerPtpProfileMap) ToSwitchControllerPtpProfileMapOutput() SwitchControllerPtpProfileMapOutput {
	return i.ToSwitchControllerPtpProfileMapOutputWithContext(context.Background())
}

func (i SwitchControllerPtpProfileMap) ToSwitchControllerPtpProfileMapOutputWithContext(ctx context.Context) SwitchControllerPtpProfileMapOutput {
	return pulumi.ToOutputWithContext(ctx, i).(SwitchControllerPtpProfileMapOutput)
}

func (i SwitchControllerPtpProfileMap) ToOutput(ctx context.Context) pulumix.Output[map[string]*SwitchControllerPtpProfile] {
	return pulumix.Output[map[string]*SwitchControllerPtpProfile]{
		OutputState: i.ToSwitchControllerPtpProfileMapOutputWithContext(ctx).OutputState,
	}
}

type SwitchControllerPtpProfileOutput struct{ *pulumi.OutputState }

func (SwitchControllerPtpProfileOutput) ElementType() reflect.Type {
	return reflect.TypeOf((**SwitchControllerPtpProfile)(nil)).Elem()
}

func (o SwitchControllerPtpProfileOutput) ToSwitchControllerPtpProfileOutput() SwitchControllerPtpProfileOutput {
	return o
}

func (o SwitchControllerPtpProfileOutput) ToSwitchControllerPtpProfileOutputWithContext(ctx context.Context) SwitchControllerPtpProfileOutput {
	return o
}

func (o SwitchControllerPtpProfileOutput) ToOutput(ctx context.Context) pulumix.Output[*SwitchControllerPtpProfile] {
	return pulumix.Output[*SwitchControllerPtpProfile]{
		OutputState: o.OutputState,
	}
}

func (o SwitchControllerPtpProfileOutput) Description() pulumi.StringOutput {
	return o.ApplyT(func(v *SwitchControllerPtpProfile) pulumi.StringOutput { return v.Description }).(pulumi.StringOutput)
}

func (o SwitchControllerPtpProfileOutput) Domain() pulumi.IntOutput {
	return o.ApplyT(func(v *SwitchControllerPtpProfile) pulumi.IntOutput { return v.Domain }).(pulumi.IntOutput)
}

func (o SwitchControllerPtpProfileOutput) Mode() pulumi.StringOutput {
	return o.ApplyT(func(v *SwitchControllerPtpProfile) pulumi.StringOutput { return v.Mode }).(pulumi.StringOutput)
}

func (o SwitchControllerPtpProfileOutput) Name() pulumi.StringOutput {
	return o.ApplyT(func(v *SwitchControllerPtpProfile) pulumi.StringOutput { return v.Name }).(pulumi.StringOutput)
}

func (o SwitchControllerPtpProfileOutput) PdelayReqInterval() pulumi.StringOutput {
	return o.ApplyT(func(v *SwitchControllerPtpProfile) pulumi.StringOutput { return v.PdelayReqInterval }).(pulumi.StringOutput)
}

func (o SwitchControllerPtpProfileOutput) PtpProfile() pulumi.StringOutput {
	return o.ApplyT(func(v *SwitchControllerPtpProfile) pulumi.StringOutput { return v.PtpProfile }).(pulumi.StringOutput)
}

func (o SwitchControllerPtpProfileOutput) Transport() pulumi.StringOutput {
	return o.ApplyT(func(v *SwitchControllerPtpProfile) pulumi.StringOutput { return v.Transport }).(pulumi.StringOutput)
}

func (o SwitchControllerPtpProfileOutput) Vdomparam() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *SwitchControllerPtpProfile) pulumi.StringPtrOutput { return v.Vdomparam }).(pulumi.StringPtrOutput)
}

type SwitchControllerPtpProfileArrayOutput struct{ *pulumi.OutputState }

func (SwitchControllerPtpProfileArrayOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*[]*SwitchControllerPtpProfile)(nil)).Elem()
}

func (o SwitchControllerPtpProfileArrayOutput) ToSwitchControllerPtpProfileArrayOutput() SwitchControllerPtpProfileArrayOutput {
	return o
}

func (o SwitchControllerPtpProfileArrayOutput) ToSwitchControllerPtpProfileArrayOutputWithContext(ctx context.Context) SwitchControllerPtpProfileArrayOutput {
	return o
}

func (o SwitchControllerPtpProfileArrayOutput) ToOutput(ctx context.Context) pulumix.Output[[]*SwitchControllerPtpProfile] {
	return pulumix.Output[[]*SwitchControllerPtpProfile]{
		OutputState: o.OutputState,
	}
}

func (o SwitchControllerPtpProfileArrayOutput) Index(i pulumi.IntInput) SwitchControllerPtpProfileOutput {
	return pulumi.All(o, i).ApplyT(func(vs []interface{}) *SwitchControllerPtpProfile {
		return vs[0].([]*SwitchControllerPtpProfile)[vs[1].(int)]
	}).(SwitchControllerPtpProfileOutput)
}

type SwitchControllerPtpProfileMapOutput struct{ *pulumi.OutputState }

func (SwitchControllerPtpProfileMapOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*map[string]*SwitchControllerPtpProfile)(nil)).Elem()
}

func (o SwitchControllerPtpProfileMapOutput) ToSwitchControllerPtpProfileMapOutput() SwitchControllerPtpProfileMapOutput {
	return o
}

func (o SwitchControllerPtpProfileMapOutput) ToSwitchControllerPtpProfileMapOutputWithContext(ctx context.Context) SwitchControllerPtpProfileMapOutput {
	return o
}

func (o SwitchControllerPtpProfileMapOutput) ToOutput(ctx context.Context) pulumix.Output[map[string]*SwitchControllerPtpProfile] {
	return pulumix.Output[map[string]*SwitchControllerPtpProfile]{
		OutputState: o.OutputState,
	}
}

func (o SwitchControllerPtpProfileMapOutput) MapIndex(k pulumi.StringInput) SwitchControllerPtpProfileOutput {
	return pulumi.All(o, k).ApplyT(func(vs []interface{}) *SwitchControllerPtpProfile {
		return vs[0].(map[string]*SwitchControllerPtpProfile)[vs[1].(string)]
	}).(SwitchControllerPtpProfileOutput)
}

func init() {
	pulumi.RegisterInputType(reflect.TypeOf((*SwitchControllerPtpProfileInput)(nil)).Elem(), &SwitchControllerPtpProfile{})
	pulumi.RegisterInputType(reflect.TypeOf((*SwitchControllerPtpProfileArrayInput)(nil)).Elem(), SwitchControllerPtpProfileArray{})
	pulumi.RegisterInputType(reflect.TypeOf((*SwitchControllerPtpProfileMapInput)(nil)).Elem(), SwitchControllerPtpProfileMap{})
	pulumi.RegisterOutputType(SwitchControllerPtpProfileOutput{})
	pulumi.RegisterOutputType(SwitchControllerPtpProfileArrayOutput{})
	pulumi.RegisterOutputType(SwitchControllerPtpProfileMapOutput{})
}
