// Code generated by the Pulumi Terraform Bridge (tfgen) Tool DO NOT EDIT.
// *** WARNING: Do not edit by hand unless you're certain you know what you are doing! ***

package fortios

import (
	"context"
	"reflect"

	"github.com/lubyou/pulumi-fortios/sdk/go/fortios/internal"
	"github.com/pulumi/pulumi/sdk/v3/go/pulumi"
)

type SystemNetflow struct {
	pulumi.CustomResourceState

	ActiveFlowTimeout     pulumi.IntOutput       `pulumi:"activeFlowTimeout"`
	CollectorIp           pulumi.StringOutput    `pulumi:"collectorIp"`
	CollectorPort         pulumi.IntOutput       `pulumi:"collectorPort"`
	InactiveFlowTimeout   pulumi.IntOutput       `pulumi:"inactiveFlowTimeout"`
	Interface             pulumi.StringOutput    `pulumi:"interface"`
	InterfaceSelectMethod pulumi.StringOutput    `pulumi:"interfaceSelectMethod"`
	SourceIp              pulumi.StringOutput    `pulumi:"sourceIp"`
	TemplateTxCounter     pulumi.IntOutput       `pulumi:"templateTxCounter"`
	TemplateTxTimeout     pulumi.IntOutput       `pulumi:"templateTxTimeout"`
	Vdomparam             pulumi.StringPtrOutput `pulumi:"vdomparam"`
}

// NewSystemNetflow registers a new resource with the given unique name, arguments, and options.
func NewSystemNetflow(ctx *pulumi.Context,
	name string, args *SystemNetflowArgs, opts ...pulumi.ResourceOption) (*SystemNetflow, error) {
	if args == nil {
		args = &SystemNetflowArgs{}
	}

	opts = internal.PkgResourceDefaultOpts(opts)
	var resource SystemNetflow
	err := ctx.RegisterResource("fortios:index/systemNetflow:SystemNetflow", name, args, &resource, opts...)
	if err != nil {
		return nil, err
	}
	return &resource, nil
}

// GetSystemNetflow gets an existing SystemNetflow resource's state with the given name, ID, and optional
// state properties that are used to uniquely qualify the lookup (nil if not required).
func GetSystemNetflow(ctx *pulumi.Context,
	name string, id pulumi.IDInput, state *SystemNetflowState, opts ...pulumi.ResourceOption) (*SystemNetflow, error) {
	var resource SystemNetflow
	err := ctx.ReadResource("fortios:index/systemNetflow:SystemNetflow", name, id, state, &resource, opts...)
	if err != nil {
		return nil, err
	}
	return &resource, nil
}

// Input properties used for looking up and filtering SystemNetflow resources.
type systemNetflowState struct {
	ActiveFlowTimeout     *int    `pulumi:"activeFlowTimeout"`
	CollectorIp           *string `pulumi:"collectorIp"`
	CollectorPort         *int    `pulumi:"collectorPort"`
	InactiveFlowTimeout   *int    `pulumi:"inactiveFlowTimeout"`
	Interface             *string `pulumi:"interface"`
	InterfaceSelectMethod *string `pulumi:"interfaceSelectMethod"`
	SourceIp              *string `pulumi:"sourceIp"`
	TemplateTxCounter     *int    `pulumi:"templateTxCounter"`
	TemplateTxTimeout     *int    `pulumi:"templateTxTimeout"`
	Vdomparam             *string `pulumi:"vdomparam"`
}

type SystemNetflowState struct {
	ActiveFlowTimeout     pulumi.IntPtrInput
	CollectorIp           pulumi.StringPtrInput
	CollectorPort         pulumi.IntPtrInput
	InactiveFlowTimeout   pulumi.IntPtrInput
	Interface             pulumi.StringPtrInput
	InterfaceSelectMethod pulumi.StringPtrInput
	SourceIp              pulumi.StringPtrInput
	TemplateTxCounter     pulumi.IntPtrInput
	TemplateTxTimeout     pulumi.IntPtrInput
	Vdomparam             pulumi.StringPtrInput
}

func (SystemNetflowState) ElementType() reflect.Type {
	return reflect.TypeOf((*systemNetflowState)(nil)).Elem()
}

type systemNetflowArgs struct {
	ActiveFlowTimeout     *int    `pulumi:"activeFlowTimeout"`
	CollectorIp           *string `pulumi:"collectorIp"`
	CollectorPort         *int    `pulumi:"collectorPort"`
	InactiveFlowTimeout   *int    `pulumi:"inactiveFlowTimeout"`
	Interface             *string `pulumi:"interface"`
	InterfaceSelectMethod *string `pulumi:"interfaceSelectMethod"`
	SourceIp              *string `pulumi:"sourceIp"`
	TemplateTxCounter     *int    `pulumi:"templateTxCounter"`
	TemplateTxTimeout     *int    `pulumi:"templateTxTimeout"`
	Vdomparam             *string `pulumi:"vdomparam"`
}

// The set of arguments for constructing a SystemNetflow resource.
type SystemNetflowArgs struct {
	ActiveFlowTimeout     pulumi.IntPtrInput
	CollectorIp           pulumi.StringPtrInput
	CollectorPort         pulumi.IntPtrInput
	InactiveFlowTimeout   pulumi.IntPtrInput
	Interface             pulumi.StringPtrInput
	InterfaceSelectMethod pulumi.StringPtrInput
	SourceIp              pulumi.StringPtrInput
	TemplateTxCounter     pulumi.IntPtrInput
	TemplateTxTimeout     pulumi.IntPtrInput
	Vdomparam             pulumi.StringPtrInput
}

func (SystemNetflowArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*systemNetflowArgs)(nil)).Elem()
}

type SystemNetflowInput interface {
	pulumi.Input

	ToSystemNetflowOutput() SystemNetflowOutput
	ToSystemNetflowOutputWithContext(ctx context.Context) SystemNetflowOutput
}

func (*SystemNetflow) ElementType() reflect.Type {
	return reflect.TypeOf((**SystemNetflow)(nil)).Elem()
}

func (i *SystemNetflow) ToSystemNetflowOutput() SystemNetflowOutput {
	return i.ToSystemNetflowOutputWithContext(context.Background())
}

func (i *SystemNetflow) ToSystemNetflowOutputWithContext(ctx context.Context) SystemNetflowOutput {
	return pulumi.ToOutputWithContext(ctx, i).(SystemNetflowOutput)
}

// SystemNetflowArrayInput is an input type that accepts SystemNetflowArray and SystemNetflowArrayOutput values.
// You can construct a concrete instance of `SystemNetflowArrayInput` via:
//
//	SystemNetflowArray{ SystemNetflowArgs{...} }
type SystemNetflowArrayInput interface {
	pulumi.Input

	ToSystemNetflowArrayOutput() SystemNetflowArrayOutput
	ToSystemNetflowArrayOutputWithContext(context.Context) SystemNetflowArrayOutput
}

type SystemNetflowArray []SystemNetflowInput

func (SystemNetflowArray) ElementType() reflect.Type {
	return reflect.TypeOf((*[]*SystemNetflow)(nil)).Elem()
}

func (i SystemNetflowArray) ToSystemNetflowArrayOutput() SystemNetflowArrayOutput {
	return i.ToSystemNetflowArrayOutputWithContext(context.Background())
}

func (i SystemNetflowArray) ToSystemNetflowArrayOutputWithContext(ctx context.Context) SystemNetflowArrayOutput {
	return pulumi.ToOutputWithContext(ctx, i).(SystemNetflowArrayOutput)
}

// SystemNetflowMapInput is an input type that accepts SystemNetflowMap and SystemNetflowMapOutput values.
// You can construct a concrete instance of `SystemNetflowMapInput` via:
//
//	SystemNetflowMap{ "key": SystemNetflowArgs{...} }
type SystemNetflowMapInput interface {
	pulumi.Input

	ToSystemNetflowMapOutput() SystemNetflowMapOutput
	ToSystemNetflowMapOutputWithContext(context.Context) SystemNetflowMapOutput
}

type SystemNetflowMap map[string]SystemNetflowInput

func (SystemNetflowMap) ElementType() reflect.Type {
	return reflect.TypeOf((*map[string]*SystemNetflow)(nil)).Elem()
}

func (i SystemNetflowMap) ToSystemNetflowMapOutput() SystemNetflowMapOutput {
	return i.ToSystemNetflowMapOutputWithContext(context.Background())
}

func (i SystemNetflowMap) ToSystemNetflowMapOutputWithContext(ctx context.Context) SystemNetflowMapOutput {
	return pulumi.ToOutputWithContext(ctx, i).(SystemNetflowMapOutput)
}

type SystemNetflowOutput struct{ *pulumi.OutputState }

func (SystemNetflowOutput) ElementType() reflect.Type {
	return reflect.TypeOf((**SystemNetflow)(nil)).Elem()
}

func (o SystemNetflowOutput) ToSystemNetflowOutput() SystemNetflowOutput {
	return o
}

func (o SystemNetflowOutput) ToSystemNetflowOutputWithContext(ctx context.Context) SystemNetflowOutput {
	return o
}

func (o SystemNetflowOutput) ActiveFlowTimeout() pulumi.IntOutput {
	return o.ApplyT(func(v *SystemNetflow) pulumi.IntOutput { return v.ActiveFlowTimeout }).(pulumi.IntOutput)
}

func (o SystemNetflowOutput) CollectorIp() pulumi.StringOutput {
	return o.ApplyT(func(v *SystemNetflow) pulumi.StringOutput { return v.CollectorIp }).(pulumi.StringOutput)
}

func (o SystemNetflowOutput) CollectorPort() pulumi.IntOutput {
	return o.ApplyT(func(v *SystemNetflow) pulumi.IntOutput { return v.CollectorPort }).(pulumi.IntOutput)
}

func (o SystemNetflowOutput) InactiveFlowTimeout() pulumi.IntOutput {
	return o.ApplyT(func(v *SystemNetflow) pulumi.IntOutput { return v.InactiveFlowTimeout }).(pulumi.IntOutput)
}

func (o SystemNetflowOutput) Interface() pulumi.StringOutput {
	return o.ApplyT(func(v *SystemNetflow) pulumi.StringOutput { return v.Interface }).(pulumi.StringOutput)
}

func (o SystemNetflowOutput) InterfaceSelectMethod() pulumi.StringOutput {
	return o.ApplyT(func(v *SystemNetflow) pulumi.StringOutput { return v.InterfaceSelectMethod }).(pulumi.StringOutput)
}

func (o SystemNetflowOutput) SourceIp() pulumi.StringOutput {
	return o.ApplyT(func(v *SystemNetflow) pulumi.StringOutput { return v.SourceIp }).(pulumi.StringOutput)
}

func (o SystemNetflowOutput) TemplateTxCounter() pulumi.IntOutput {
	return o.ApplyT(func(v *SystemNetflow) pulumi.IntOutput { return v.TemplateTxCounter }).(pulumi.IntOutput)
}

func (o SystemNetflowOutput) TemplateTxTimeout() pulumi.IntOutput {
	return o.ApplyT(func(v *SystemNetflow) pulumi.IntOutput { return v.TemplateTxTimeout }).(pulumi.IntOutput)
}

func (o SystemNetflowOutput) Vdomparam() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *SystemNetflow) pulumi.StringPtrOutput { return v.Vdomparam }).(pulumi.StringPtrOutput)
}

type SystemNetflowArrayOutput struct{ *pulumi.OutputState }

func (SystemNetflowArrayOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*[]*SystemNetflow)(nil)).Elem()
}

func (o SystemNetflowArrayOutput) ToSystemNetflowArrayOutput() SystemNetflowArrayOutput {
	return o
}

func (o SystemNetflowArrayOutput) ToSystemNetflowArrayOutputWithContext(ctx context.Context) SystemNetflowArrayOutput {
	return o
}

func (o SystemNetflowArrayOutput) Index(i pulumi.IntInput) SystemNetflowOutput {
	return pulumi.All(o, i).ApplyT(func(vs []interface{}) *SystemNetflow {
		return vs[0].([]*SystemNetflow)[vs[1].(int)]
	}).(SystemNetflowOutput)
}

type SystemNetflowMapOutput struct{ *pulumi.OutputState }

func (SystemNetflowMapOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*map[string]*SystemNetflow)(nil)).Elem()
}

func (o SystemNetflowMapOutput) ToSystemNetflowMapOutput() SystemNetflowMapOutput {
	return o
}

func (o SystemNetflowMapOutput) ToSystemNetflowMapOutputWithContext(ctx context.Context) SystemNetflowMapOutput {
	return o
}

func (o SystemNetflowMapOutput) MapIndex(k pulumi.StringInput) SystemNetflowOutput {
	return pulumi.All(o, k).ApplyT(func(vs []interface{}) *SystemNetflow {
		return vs[0].(map[string]*SystemNetflow)[vs[1].(string)]
	}).(SystemNetflowOutput)
}

func init() {
	pulumi.RegisterInputType(reflect.TypeOf((*SystemNetflowInput)(nil)).Elem(), &SystemNetflow{})
	pulumi.RegisterInputType(reflect.TypeOf((*SystemNetflowArrayInput)(nil)).Elem(), SystemNetflowArray{})
	pulumi.RegisterInputType(reflect.TypeOf((*SystemNetflowMapInput)(nil)).Elem(), SystemNetflowMap{})
	pulumi.RegisterOutputType(SystemNetflowOutput{})
	pulumi.RegisterOutputType(SystemNetflowArrayOutput{})
	pulumi.RegisterOutputType(SystemNetflowMapOutput{})
}
