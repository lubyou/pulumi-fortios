// Code generated by the Pulumi Terraform Bridge (tfgen) Tool DO NOT EDIT.
// *** WARNING: Do not edit by hand unless you're certain you know what you are doing! ***

package fortios

import (
	"context"
	"reflect"

	"errors"
	"github.com/lubyou/pulumi-fortios/sdk/go/fortios/internal"
	"github.com/pulumi/pulumi/sdk/v3/go/pulumi"
	"github.com/pulumi/pulumi/sdk/v3/go/pulumix"
)

type FortimanagerDVMScriptExecute struct {
	pulumi.CustomResourceState

	Adom          pulumi.StringPtrOutput `pulumi:"adom"`
	Package       pulumi.StringPtrOutput `pulumi:"package"`
	ScriptName    pulumi.StringOutput    `pulumi:"scriptName"`
	TargetDevname pulumi.StringPtrOutput `pulumi:"targetDevname"`
	Timeout       pulumi.IntPtrOutput    `pulumi:"timeout"`
	Vdom          pulumi.StringPtrOutput `pulumi:"vdom"`
}

// NewFortimanagerDVMScriptExecute registers a new resource with the given unique name, arguments, and options.
func NewFortimanagerDVMScriptExecute(ctx *pulumi.Context,
	name string, args *FortimanagerDVMScriptExecuteArgs, opts ...pulumi.ResourceOption) (*FortimanagerDVMScriptExecute, error) {
	if args == nil {
		return nil, errors.New("missing one or more required arguments")
	}

	if args.ScriptName == nil {
		return nil, errors.New("invalid value for required argument 'ScriptName'")
	}
	opts = internal.PkgResourceDefaultOpts(opts)
	var resource FortimanagerDVMScriptExecute
	err := ctx.RegisterResource("fortios:index/fortimanagerDVMScriptExecute:FortimanagerDVMScriptExecute", name, args, &resource, opts...)
	if err != nil {
		return nil, err
	}
	return &resource, nil
}

// GetFortimanagerDVMScriptExecute gets an existing FortimanagerDVMScriptExecute resource's state with the given name, ID, and optional
// state properties that are used to uniquely qualify the lookup (nil if not required).
func GetFortimanagerDVMScriptExecute(ctx *pulumi.Context,
	name string, id pulumi.IDInput, state *FortimanagerDVMScriptExecuteState, opts ...pulumi.ResourceOption) (*FortimanagerDVMScriptExecute, error) {
	var resource FortimanagerDVMScriptExecute
	err := ctx.ReadResource("fortios:index/fortimanagerDVMScriptExecute:FortimanagerDVMScriptExecute", name, id, state, &resource, opts...)
	if err != nil {
		return nil, err
	}
	return &resource, nil
}

// Input properties used for looking up and filtering FortimanagerDVMScriptExecute resources.
type fortimanagerDVMScriptExecuteState struct {
	Adom          *string `pulumi:"adom"`
	Package       *string `pulumi:"package"`
	ScriptName    *string `pulumi:"scriptName"`
	TargetDevname *string `pulumi:"targetDevname"`
	Timeout       *int    `pulumi:"timeout"`
	Vdom          *string `pulumi:"vdom"`
}

type FortimanagerDVMScriptExecuteState struct {
	Adom          pulumi.StringPtrInput
	Package       pulumi.StringPtrInput
	ScriptName    pulumi.StringPtrInput
	TargetDevname pulumi.StringPtrInput
	Timeout       pulumi.IntPtrInput
	Vdom          pulumi.StringPtrInput
}

func (FortimanagerDVMScriptExecuteState) ElementType() reflect.Type {
	return reflect.TypeOf((*fortimanagerDVMScriptExecuteState)(nil)).Elem()
}

type fortimanagerDVMScriptExecuteArgs struct {
	Adom          *string `pulumi:"adom"`
	Package       *string `pulumi:"package"`
	ScriptName    string  `pulumi:"scriptName"`
	TargetDevname *string `pulumi:"targetDevname"`
	Timeout       *int    `pulumi:"timeout"`
	Vdom          *string `pulumi:"vdom"`
}

// The set of arguments for constructing a FortimanagerDVMScriptExecute resource.
type FortimanagerDVMScriptExecuteArgs struct {
	Adom          pulumi.StringPtrInput
	Package       pulumi.StringPtrInput
	ScriptName    pulumi.StringInput
	TargetDevname pulumi.StringPtrInput
	Timeout       pulumi.IntPtrInput
	Vdom          pulumi.StringPtrInput
}

func (FortimanagerDVMScriptExecuteArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*fortimanagerDVMScriptExecuteArgs)(nil)).Elem()
}

type FortimanagerDVMScriptExecuteInput interface {
	pulumi.Input

	ToFortimanagerDVMScriptExecuteOutput() FortimanagerDVMScriptExecuteOutput
	ToFortimanagerDVMScriptExecuteOutputWithContext(ctx context.Context) FortimanagerDVMScriptExecuteOutput
}

func (*FortimanagerDVMScriptExecute) ElementType() reflect.Type {
	return reflect.TypeOf((**FortimanagerDVMScriptExecute)(nil)).Elem()
}

func (i *FortimanagerDVMScriptExecute) ToFortimanagerDVMScriptExecuteOutput() FortimanagerDVMScriptExecuteOutput {
	return i.ToFortimanagerDVMScriptExecuteOutputWithContext(context.Background())
}

func (i *FortimanagerDVMScriptExecute) ToFortimanagerDVMScriptExecuteOutputWithContext(ctx context.Context) FortimanagerDVMScriptExecuteOutput {
	return pulumi.ToOutputWithContext(ctx, i).(FortimanagerDVMScriptExecuteOutput)
}

func (i *FortimanagerDVMScriptExecute) ToOutput(ctx context.Context) pulumix.Output[*FortimanagerDVMScriptExecute] {
	return pulumix.Output[*FortimanagerDVMScriptExecute]{
		OutputState: i.ToFortimanagerDVMScriptExecuteOutputWithContext(ctx).OutputState,
	}
}

// FortimanagerDVMScriptExecuteArrayInput is an input type that accepts FortimanagerDVMScriptExecuteArray and FortimanagerDVMScriptExecuteArrayOutput values.
// You can construct a concrete instance of `FortimanagerDVMScriptExecuteArrayInput` via:
//
//	FortimanagerDVMScriptExecuteArray{ FortimanagerDVMScriptExecuteArgs{...} }
type FortimanagerDVMScriptExecuteArrayInput interface {
	pulumi.Input

	ToFortimanagerDVMScriptExecuteArrayOutput() FortimanagerDVMScriptExecuteArrayOutput
	ToFortimanagerDVMScriptExecuteArrayOutputWithContext(context.Context) FortimanagerDVMScriptExecuteArrayOutput
}

type FortimanagerDVMScriptExecuteArray []FortimanagerDVMScriptExecuteInput

func (FortimanagerDVMScriptExecuteArray) ElementType() reflect.Type {
	return reflect.TypeOf((*[]*FortimanagerDVMScriptExecute)(nil)).Elem()
}

func (i FortimanagerDVMScriptExecuteArray) ToFortimanagerDVMScriptExecuteArrayOutput() FortimanagerDVMScriptExecuteArrayOutput {
	return i.ToFortimanagerDVMScriptExecuteArrayOutputWithContext(context.Background())
}

func (i FortimanagerDVMScriptExecuteArray) ToFortimanagerDVMScriptExecuteArrayOutputWithContext(ctx context.Context) FortimanagerDVMScriptExecuteArrayOutput {
	return pulumi.ToOutputWithContext(ctx, i).(FortimanagerDVMScriptExecuteArrayOutput)
}

func (i FortimanagerDVMScriptExecuteArray) ToOutput(ctx context.Context) pulumix.Output[[]*FortimanagerDVMScriptExecute] {
	return pulumix.Output[[]*FortimanagerDVMScriptExecute]{
		OutputState: i.ToFortimanagerDVMScriptExecuteArrayOutputWithContext(ctx).OutputState,
	}
}

// FortimanagerDVMScriptExecuteMapInput is an input type that accepts FortimanagerDVMScriptExecuteMap and FortimanagerDVMScriptExecuteMapOutput values.
// You can construct a concrete instance of `FortimanagerDVMScriptExecuteMapInput` via:
//
//	FortimanagerDVMScriptExecuteMap{ "key": FortimanagerDVMScriptExecuteArgs{...} }
type FortimanagerDVMScriptExecuteMapInput interface {
	pulumi.Input

	ToFortimanagerDVMScriptExecuteMapOutput() FortimanagerDVMScriptExecuteMapOutput
	ToFortimanagerDVMScriptExecuteMapOutputWithContext(context.Context) FortimanagerDVMScriptExecuteMapOutput
}

type FortimanagerDVMScriptExecuteMap map[string]FortimanagerDVMScriptExecuteInput

func (FortimanagerDVMScriptExecuteMap) ElementType() reflect.Type {
	return reflect.TypeOf((*map[string]*FortimanagerDVMScriptExecute)(nil)).Elem()
}

func (i FortimanagerDVMScriptExecuteMap) ToFortimanagerDVMScriptExecuteMapOutput() FortimanagerDVMScriptExecuteMapOutput {
	return i.ToFortimanagerDVMScriptExecuteMapOutputWithContext(context.Background())
}

func (i FortimanagerDVMScriptExecuteMap) ToFortimanagerDVMScriptExecuteMapOutputWithContext(ctx context.Context) FortimanagerDVMScriptExecuteMapOutput {
	return pulumi.ToOutputWithContext(ctx, i).(FortimanagerDVMScriptExecuteMapOutput)
}

func (i FortimanagerDVMScriptExecuteMap) ToOutput(ctx context.Context) pulumix.Output[map[string]*FortimanagerDVMScriptExecute] {
	return pulumix.Output[map[string]*FortimanagerDVMScriptExecute]{
		OutputState: i.ToFortimanagerDVMScriptExecuteMapOutputWithContext(ctx).OutputState,
	}
}

type FortimanagerDVMScriptExecuteOutput struct{ *pulumi.OutputState }

func (FortimanagerDVMScriptExecuteOutput) ElementType() reflect.Type {
	return reflect.TypeOf((**FortimanagerDVMScriptExecute)(nil)).Elem()
}

func (o FortimanagerDVMScriptExecuteOutput) ToFortimanagerDVMScriptExecuteOutput() FortimanagerDVMScriptExecuteOutput {
	return o
}

func (o FortimanagerDVMScriptExecuteOutput) ToFortimanagerDVMScriptExecuteOutputWithContext(ctx context.Context) FortimanagerDVMScriptExecuteOutput {
	return o
}

func (o FortimanagerDVMScriptExecuteOutput) ToOutput(ctx context.Context) pulumix.Output[*FortimanagerDVMScriptExecute] {
	return pulumix.Output[*FortimanagerDVMScriptExecute]{
		OutputState: o.OutputState,
	}
}

func (o FortimanagerDVMScriptExecuteOutput) Adom() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *FortimanagerDVMScriptExecute) pulumi.StringPtrOutput { return v.Adom }).(pulumi.StringPtrOutput)
}

func (o FortimanagerDVMScriptExecuteOutput) Package() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *FortimanagerDVMScriptExecute) pulumi.StringPtrOutput { return v.Package }).(pulumi.StringPtrOutput)
}

func (o FortimanagerDVMScriptExecuteOutput) ScriptName() pulumi.StringOutput {
	return o.ApplyT(func(v *FortimanagerDVMScriptExecute) pulumi.StringOutput { return v.ScriptName }).(pulumi.StringOutput)
}

func (o FortimanagerDVMScriptExecuteOutput) TargetDevname() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *FortimanagerDVMScriptExecute) pulumi.StringPtrOutput { return v.TargetDevname }).(pulumi.StringPtrOutput)
}

func (o FortimanagerDVMScriptExecuteOutput) Timeout() pulumi.IntPtrOutput {
	return o.ApplyT(func(v *FortimanagerDVMScriptExecute) pulumi.IntPtrOutput { return v.Timeout }).(pulumi.IntPtrOutput)
}

func (o FortimanagerDVMScriptExecuteOutput) Vdom() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *FortimanagerDVMScriptExecute) pulumi.StringPtrOutput { return v.Vdom }).(pulumi.StringPtrOutput)
}

type FortimanagerDVMScriptExecuteArrayOutput struct{ *pulumi.OutputState }

func (FortimanagerDVMScriptExecuteArrayOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*[]*FortimanagerDVMScriptExecute)(nil)).Elem()
}

func (o FortimanagerDVMScriptExecuteArrayOutput) ToFortimanagerDVMScriptExecuteArrayOutput() FortimanagerDVMScriptExecuteArrayOutput {
	return o
}

func (o FortimanagerDVMScriptExecuteArrayOutput) ToFortimanagerDVMScriptExecuteArrayOutputWithContext(ctx context.Context) FortimanagerDVMScriptExecuteArrayOutput {
	return o
}

func (o FortimanagerDVMScriptExecuteArrayOutput) ToOutput(ctx context.Context) pulumix.Output[[]*FortimanagerDVMScriptExecute] {
	return pulumix.Output[[]*FortimanagerDVMScriptExecute]{
		OutputState: o.OutputState,
	}
}

func (o FortimanagerDVMScriptExecuteArrayOutput) Index(i pulumi.IntInput) FortimanagerDVMScriptExecuteOutput {
	return pulumi.All(o, i).ApplyT(func(vs []interface{}) *FortimanagerDVMScriptExecute {
		return vs[0].([]*FortimanagerDVMScriptExecute)[vs[1].(int)]
	}).(FortimanagerDVMScriptExecuteOutput)
}

type FortimanagerDVMScriptExecuteMapOutput struct{ *pulumi.OutputState }

func (FortimanagerDVMScriptExecuteMapOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*map[string]*FortimanagerDVMScriptExecute)(nil)).Elem()
}

func (o FortimanagerDVMScriptExecuteMapOutput) ToFortimanagerDVMScriptExecuteMapOutput() FortimanagerDVMScriptExecuteMapOutput {
	return o
}

func (o FortimanagerDVMScriptExecuteMapOutput) ToFortimanagerDVMScriptExecuteMapOutputWithContext(ctx context.Context) FortimanagerDVMScriptExecuteMapOutput {
	return o
}

func (o FortimanagerDVMScriptExecuteMapOutput) ToOutput(ctx context.Context) pulumix.Output[map[string]*FortimanagerDVMScriptExecute] {
	return pulumix.Output[map[string]*FortimanagerDVMScriptExecute]{
		OutputState: o.OutputState,
	}
}

func (o FortimanagerDVMScriptExecuteMapOutput) MapIndex(k pulumi.StringInput) FortimanagerDVMScriptExecuteOutput {
	return pulumi.All(o, k).ApplyT(func(vs []interface{}) *FortimanagerDVMScriptExecute {
		return vs[0].(map[string]*FortimanagerDVMScriptExecute)[vs[1].(string)]
	}).(FortimanagerDVMScriptExecuteOutput)
}

func init() {
	pulumi.RegisterInputType(reflect.TypeOf((*FortimanagerDVMScriptExecuteInput)(nil)).Elem(), &FortimanagerDVMScriptExecute{})
	pulumi.RegisterInputType(reflect.TypeOf((*FortimanagerDVMScriptExecuteArrayInput)(nil)).Elem(), FortimanagerDVMScriptExecuteArray{})
	pulumi.RegisterInputType(reflect.TypeOf((*FortimanagerDVMScriptExecuteMapInput)(nil)).Elem(), FortimanagerDVMScriptExecuteMap{})
	pulumi.RegisterOutputType(FortimanagerDVMScriptExecuteOutput{})
	pulumi.RegisterOutputType(FortimanagerDVMScriptExecuteArrayOutput{})
	pulumi.RegisterOutputType(FortimanagerDVMScriptExecuteMapOutput{})
}
