// *** WARNING: this file was generated by the Pulumi Terraform Bridge (tfgen) Tool. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

package fortios

import (
	"context"
	"reflect"

	"github.com/pkg/errors"
	"github.com/pulumi/pulumi/sdk/v3/go/pulumi"
)

// This resource supports executing devicemanager script on Fortimanager.
//
// ## Example Usage
//
// ```go
// package main
//
// import (
// 	"github.com/pulumi/pulumi-fortios/sdk/go/fortios"
// 	"github.com/pulumi/pulumi/sdk/v3/go/pulumi"
// )
//
// func main() {
// 	pulumi.Run(func(ctx *pulumi.Context) error {
// 		_, err := fortios.NewFortimanagerDVMScriptExecute(ctx, "test3", &fortios.FortimanagerDVMScriptExecuteArgs{
// 			ScriptName:    pulumi.String("config-intf3"),
// 			TargetDevname: pulumi.String("devname"),
// 			Timeout:       pulumi.Int(5),
// 		})
// 		if err != nil {
// 			return err
// 		}
// 		return nil
// 	})
// }
// ```
type FortimanagerDVMScriptExecute struct {
	pulumi.CustomResourceState

	// Source ADOM name. default is 'root'
	Adom pulumi.StringPtrOutput `pulumi:"adom"`
	// Policy package.
	Package pulumi.StringPtrOutput `pulumi:"package"`
	// Script name.
	ScriptName pulumi.StringOutput `pulumi:"scriptName"`
	// Target device name, which the script will be installed.
	TargetDevname pulumi.StringPtrOutput `pulumi:"targetDevname"`
	// Timeout(minute) for executing the script, default is 3 minutes.
	Timeout pulumi.IntPtrOutput `pulumi:"timeout"`
	// Vdom of managed device. default is 'root'
	Vdom pulumi.StringPtrOutput `pulumi:"vdom"`
}

// NewFortimanagerDVMScriptExecute registers a new resource with the given unique name, arguments, and options.
func NewFortimanagerDVMScriptExecute(ctx *pulumi.Context,
	name string, args *FortimanagerDVMScriptExecuteArgs, opts ...pulumi.ResourceOption) (*FortimanagerDVMScriptExecute, error) {
	if args == nil {
		return nil, errors.New("missing one or more required arguments")
	}

	if args.ScriptName == nil {
		return nil, errors.New("invalid value for required argument 'ScriptName'")
	}
	var resource FortimanagerDVMScriptExecute
	err := ctx.RegisterResource("fortios:index/fortimanagerDVMScriptExecute:FortimanagerDVMScriptExecute", name, args, &resource, opts...)
	if err != nil {
		return nil, err
	}
	return &resource, nil
}

// GetFortimanagerDVMScriptExecute gets an existing FortimanagerDVMScriptExecute resource's state with the given name, ID, and optional
// state properties that are used to uniquely qualify the lookup (nil if not required).
func GetFortimanagerDVMScriptExecute(ctx *pulumi.Context,
	name string, id pulumi.IDInput, state *FortimanagerDVMScriptExecuteState, opts ...pulumi.ResourceOption) (*FortimanagerDVMScriptExecute, error) {
	var resource FortimanagerDVMScriptExecute
	err := ctx.ReadResource("fortios:index/fortimanagerDVMScriptExecute:FortimanagerDVMScriptExecute", name, id, state, &resource, opts...)
	if err != nil {
		return nil, err
	}
	return &resource, nil
}

// Input properties used for looking up and filtering FortimanagerDVMScriptExecute resources.
type fortimanagerDVMScriptExecuteState struct {
	// Source ADOM name. default is 'root'
	Adom *string `pulumi:"adom"`
	// Policy package.
	Package *string `pulumi:"package"`
	// Script name.
	ScriptName *string `pulumi:"scriptName"`
	// Target device name, which the script will be installed.
	TargetDevname *string `pulumi:"targetDevname"`
	// Timeout(minute) for executing the script, default is 3 minutes.
	Timeout *int `pulumi:"timeout"`
	// Vdom of managed device. default is 'root'
	Vdom *string `pulumi:"vdom"`
}

type FortimanagerDVMScriptExecuteState struct {
	// Source ADOM name. default is 'root'
	Adom pulumi.StringPtrInput
	// Policy package.
	Package pulumi.StringPtrInput
	// Script name.
	ScriptName pulumi.StringPtrInput
	// Target device name, which the script will be installed.
	TargetDevname pulumi.StringPtrInput
	// Timeout(minute) for executing the script, default is 3 minutes.
	Timeout pulumi.IntPtrInput
	// Vdom of managed device. default is 'root'
	Vdom pulumi.StringPtrInput
}

func (FortimanagerDVMScriptExecuteState) ElementType() reflect.Type {
	return reflect.TypeOf((*fortimanagerDVMScriptExecuteState)(nil)).Elem()
}

type fortimanagerDVMScriptExecuteArgs struct {
	// Source ADOM name. default is 'root'
	Adom *string `pulumi:"adom"`
	// Policy package.
	Package *string `pulumi:"package"`
	// Script name.
	ScriptName string `pulumi:"scriptName"`
	// Target device name, which the script will be installed.
	TargetDevname *string `pulumi:"targetDevname"`
	// Timeout(minute) for executing the script, default is 3 minutes.
	Timeout *int `pulumi:"timeout"`
	// Vdom of managed device. default is 'root'
	Vdom *string `pulumi:"vdom"`
}

// The set of arguments for constructing a FortimanagerDVMScriptExecute resource.
type FortimanagerDVMScriptExecuteArgs struct {
	// Source ADOM name. default is 'root'
	Adom pulumi.StringPtrInput
	// Policy package.
	Package pulumi.StringPtrInput
	// Script name.
	ScriptName pulumi.StringInput
	// Target device name, which the script will be installed.
	TargetDevname pulumi.StringPtrInput
	// Timeout(minute) for executing the script, default is 3 minutes.
	Timeout pulumi.IntPtrInput
	// Vdom of managed device. default is 'root'
	Vdom pulumi.StringPtrInput
}

func (FortimanagerDVMScriptExecuteArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*fortimanagerDVMScriptExecuteArgs)(nil)).Elem()
}

type FortimanagerDVMScriptExecuteInput interface {
	pulumi.Input

	ToFortimanagerDVMScriptExecuteOutput() FortimanagerDVMScriptExecuteOutput
	ToFortimanagerDVMScriptExecuteOutputWithContext(ctx context.Context) FortimanagerDVMScriptExecuteOutput
}

func (*FortimanagerDVMScriptExecute) ElementType() reflect.Type {
	return reflect.TypeOf((*FortimanagerDVMScriptExecute)(nil))
}

func (i *FortimanagerDVMScriptExecute) ToFortimanagerDVMScriptExecuteOutput() FortimanagerDVMScriptExecuteOutput {
	return i.ToFortimanagerDVMScriptExecuteOutputWithContext(context.Background())
}

func (i *FortimanagerDVMScriptExecute) ToFortimanagerDVMScriptExecuteOutputWithContext(ctx context.Context) FortimanagerDVMScriptExecuteOutput {
	return pulumi.ToOutputWithContext(ctx, i).(FortimanagerDVMScriptExecuteOutput)
}

func (i *FortimanagerDVMScriptExecute) ToFortimanagerDVMScriptExecutePtrOutput() FortimanagerDVMScriptExecutePtrOutput {
	return i.ToFortimanagerDVMScriptExecutePtrOutputWithContext(context.Background())
}

func (i *FortimanagerDVMScriptExecute) ToFortimanagerDVMScriptExecutePtrOutputWithContext(ctx context.Context) FortimanagerDVMScriptExecutePtrOutput {
	return pulumi.ToOutputWithContext(ctx, i).(FortimanagerDVMScriptExecutePtrOutput)
}

type FortimanagerDVMScriptExecutePtrInput interface {
	pulumi.Input

	ToFortimanagerDVMScriptExecutePtrOutput() FortimanagerDVMScriptExecutePtrOutput
	ToFortimanagerDVMScriptExecutePtrOutputWithContext(ctx context.Context) FortimanagerDVMScriptExecutePtrOutput
}

type fortimanagerDVMScriptExecutePtrType FortimanagerDVMScriptExecuteArgs

func (*fortimanagerDVMScriptExecutePtrType) ElementType() reflect.Type {
	return reflect.TypeOf((**FortimanagerDVMScriptExecute)(nil))
}

func (i *fortimanagerDVMScriptExecutePtrType) ToFortimanagerDVMScriptExecutePtrOutput() FortimanagerDVMScriptExecutePtrOutput {
	return i.ToFortimanagerDVMScriptExecutePtrOutputWithContext(context.Background())
}

func (i *fortimanagerDVMScriptExecutePtrType) ToFortimanagerDVMScriptExecutePtrOutputWithContext(ctx context.Context) FortimanagerDVMScriptExecutePtrOutput {
	return pulumi.ToOutputWithContext(ctx, i).(FortimanagerDVMScriptExecutePtrOutput)
}

// FortimanagerDVMScriptExecuteArrayInput is an input type that accepts FortimanagerDVMScriptExecuteArray and FortimanagerDVMScriptExecuteArrayOutput values.
// You can construct a concrete instance of `FortimanagerDVMScriptExecuteArrayInput` via:
//
//          FortimanagerDVMScriptExecuteArray{ FortimanagerDVMScriptExecuteArgs{...} }
type FortimanagerDVMScriptExecuteArrayInput interface {
	pulumi.Input

	ToFortimanagerDVMScriptExecuteArrayOutput() FortimanagerDVMScriptExecuteArrayOutput
	ToFortimanagerDVMScriptExecuteArrayOutputWithContext(context.Context) FortimanagerDVMScriptExecuteArrayOutput
}

type FortimanagerDVMScriptExecuteArray []FortimanagerDVMScriptExecuteInput

func (FortimanagerDVMScriptExecuteArray) ElementType() reflect.Type {
	return reflect.TypeOf(([]*FortimanagerDVMScriptExecute)(nil))
}

func (i FortimanagerDVMScriptExecuteArray) ToFortimanagerDVMScriptExecuteArrayOutput() FortimanagerDVMScriptExecuteArrayOutput {
	return i.ToFortimanagerDVMScriptExecuteArrayOutputWithContext(context.Background())
}

func (i FortimanagerDVMScriptExecuteArray) ToFortimanagerDVMScriptExecuteArrayOutputWithContext(ctx context.Context) FortimanagerDVMScriptExecuteArrayOutput {
	return pulumi.ToOutputWithContext(ctx, i).(FortimanagerDVMScriptExecuteArrayOutput)
}

// FortimanagerDVMScriptExecuteMapInput is an input type that accepts FortimanagerDVMScriptExecuteMap and FortimanagerDVMScriptExecuteMapOutput values.
// You can construct a concrete instance of `FortimanagerDVMScriptExecuteMapInput` via:
//
//          FortimanagerDVMScriptExecuteMap{ "key": FortimanagerDVMScriptExecuteArgs{...} }
type FortimanagerDVMScriptExecuteMapInput interface {
	pulumi.Input

	ToFortimanagerDVMScriptExecuteMapOutput() FortimanagerDVMScriptExecuteMapOutput
	ToFortimanagerDVMScriptExecuteMapOutputWithContext(context.Context) FortimanagerDVMScriptExecuteMapOutput
}

type FortimanagerDVMScriptExecuteMap map[string]FortimanagerDVMScriptExecuteInput

func (FortimanagerDVMScriptExecuteMap) ElementType() reflect.Type {
	return reflect.TypeOf((map[string]*FortimanagerDVMScriptExecute)(nil))
}

func (i FortimanagerDVMScriptExecuteMap) ToFortimanagerDVMScriptExecuteMapOutput() FortimanagerDVMScriptExecuteMapOutput {
	return i.ToFortimanagerDVMScriptExecuteMapOutputWithContext(context.Background())
}

func (i FortimanagerDVMScriptExecuteMap) ToFortimanagerDVMScriptExecuteMapOutputWithContext(ctx context.Context) FortimanagerDVMScriptExecuteMapOutput {
	return pulumi.ToOutputWithContext(ctx, i).(FortimanagerDVMScriptExecuteMapOutput)
}

type FortimanagerDVMScriptExecuteOutput struct {
	*pulumi.OutputState
}

func (FortimanagerDVMScriptExecuteOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*FortimanagerDVMScriptExecute)(nil))
}

func (o FortimanagerDVMScriptExecuteOutput) ToFortimanagerDVMScriptExecuteOutput() FortimanagerDVMScriptExecuteOutput {
	return o
}

func (o FortimanagerDVMScriptExecuteOutput) ToFortimanagerDVMScriptExecuteOutputWithContext(ctx context.Context) FortimanagerDVMScriptExecuteOutput {
	return o
}

func (o FortimanagerDVMScriptExecuteOutput) ToFortimanagerDVMScriptExecutePtrOutput() FortimanagerDVMScriptExecutePtrOutput {
	return o.ToFortimanagerDVMScriptExecutePtrOutputWithContext(context.Background())
}

func (o FortimanagerDVMScriptExecuteOutput) ToFortimanagerDVMScriptExecutePtrOutputWithContext(ctx context.Context) FortimanagerDVMScriptExecutePtrOutput {
	return o.ApplyT(func(v FortimanagerDVMScriptExecute) *FortimanagerDVMScriptExecute {
		return &v
	}).(FortimanagerDVMScriptExecutePtrOutput)
}

type FortimanagerDVMScriptExecutePtrOutput struct {
	*pulumi.OutputState
}

func (FortimanagerDVMScriptExecutePtrOutput) ElementType() reflect.Type {
	return reflect.TypeOf((**FortimanagerDVMScriptExecute)(nil))
}

func (o FortimanagerDVMScriptExecutePtrOutput) ToFortimanagerDVMScriptExecutePtrOutput() FortimanagerDVMScriptExecutePtrOutput {
	return o
}

func (o FortimanagerDVMScriptExecutePtrOutput) ToFortimanagerDVMScriptExecutePtrOutputWithContext(ctx context.Context) FortimanagerDVMScriptExecutePtrOutput {
	return o
}

type FortimanagerDVMScriptExecuteArrayOutput struct{ *pulumi.OutputState }

func (FortimanagerDVMScriptExecuteArrayOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*[]FortimanagerDVMScriptExecute)(nil))
}

func (o FortimanagerDVMScriptExecuteArrayOutput) ToFortimanagerDVMScriptExecuteArrayOutput() FortimanagerDVMScriptExecuteArrayOutput {
	return o
}

func (o FortimanagerDVMScriptExecuteArrayOutput) ToFortimanagerDVMScriptExecuteArrayOutputWithContext(ctx context.Context) FortimanagerDVMScriptExecuteArrayOutput {
	return o
}

func (o FortimanagerDVMScriptExecuteArrayOutput) Index(i pulumi.IntInput) FortimanagerDVMScriptExecuteOutput {
	return pulumi.All(o, i).ApplyT(func(vs []interface{}) FortimanagerDVMScriptExecute {
		return vs[0].([]FortimanagerDVMScriptExecute)[vs[1].(int)]
	}).(FortimanagerDVMScriptExecuteOutput)
}

type FortimanagerDVMScriptExecuteMapOutput struct{ *pulumi.OutputState }

func (FortimanagerDVMScriptExecuteMapOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*map[string]FortimanagerDVMScriptExecute)(nil))
}

func (o FortimanagerDVMScriptExecuteMapOutput) ToFortimanagerDVMScriptExecuteMapOutput() FortimanagerDVMScriptExecuteMapOutput {
	return o
}

func (o FortimanagerDVMScriptExecuteMapOutput) ToFortimanagerDVMScriptExecuteMapOutputWithContext(ctx context.Context) FortimanagerDVMScriptExecuteMapOutput {
	return o
}

func (o FortimanagerDVMScriptExecuteMapOutput) MapIndex(k pulumi.StringInput) FortimanagerDVMScriptExecuteOutput {
	return pulumi.All(o, k).ApplyT(func(vs []interface{}) FortimanagerDVMScriptExecute {
		return vs[0].(map[string]FortimanagerDVMScriptExecute)[vs[1].(string)]
	}).(FortimanagerDVMScriptExecuteOutput)
}

func init() {
	pulumi.RegisterOutputType(FortimanagerDVMScriptExecuteOutput{})
	pulumi.RegisterOutputType(FortimanagerDVMScriptExecutePtrOutput{})
	pulumi.RegisterOutputType(FortimanagerDVMScriptExecuteArrayOutput{})
	pulumi.RegisterOutputType(FortimanagerDVMScriptExecuteMapOutput{})
}
