// *** WARNING: this file was generated by the Pulumi Terraform Bridge (tfgen) Tool. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

package fortios

import (
	"context"
	"reflect"

	"github.com/pkg/errors"
	"github.com/pulumi/pulumi/sdk/v3/go/pulumi"
)

// This resource supports adding/deleting online FortiGate to/from FortiManager
//
// ## Example Usage
//
// ```go
// package main
//
// import (
// 	"github.com/lubyou/pulumi-fortios/sdk/go/fortios"
// 	"github.com/pulumi/pulumi/sdk/v3/go/pulumi"
// )
//
// func main() {
// 	pulumi.Run(func(ctx *pulumi.Context) error {
// 		_, err := fortios.NewFortimanagerDVMDevice(ctx, "test1", &fortios.FortimanagerDVMDeviceArgs{
// 			DeviceName: pulumi.String("FGVM64-test"),
// 			Ipaddr:     pulumi.String("192.168.88.101"),
// 			Password:   pulumi.String(""),
// 			Userid:     pulumi.String("admin"),
// 		})
// 		if err != nil {
// 			return err
// 		}
// 		return nil
// 	})
// }
// ```
type FortimanagerDVMDevice struct {
	pulumi.CustomResourceState

	// Name or ID of the ADOM where the command is to be executed on.
	Adom pulumi.StringPtrOutput `pulumi:"adom"`
	// Fortigate's device name.
	DeviceName pulumi.StringOutput `pulumi:"deviceName"`
	// Fortigate's ipaddress.
	Ipaddr pulumi.StringOutput `pulumi:"ipaddr"`
	// Password.
	Password pulumi.StringPtrOutput `pulumi:"password"`
	// User name.
	Userid pulumi.StringOutput `pulumi:"userid"`
}

// NewFortimanagerDVMDevice registers a new resource with the given unique name, arguments, and options.
func NewFortimanagerDVMDevice(ctx *pulumi.Context,
	name string, args *FortimanagerDVMDeviceArgs, opts ...pulumi.ResourceOption) (*FortimanagerDVMDevice, error) {
	if args == nil {
		return nil, errors.New("missing one or more required arguments")
	}

	if args.DeviceName == nil {
		return nil, errors.New("invalid value for required argument 'DeviceName'")
	}
	if args.Ipaddr == nil {
		return nil, errors.New("invalid value for required argument 'Ipaddr'")
	}
	if args.Userid == nil {
		return nil, errors.New("invalid value for required argument 'Userid'")
	}
	opts = pkgResourceDefaultOpts(opts)
	var resource FortimanagerDVMDevice
	err := ctx.RegisterResource("fortios:index/fortimanagerDVMDevice:FortimanagerDVMDevice", name, args, &resource, opts...)
	if err != nil {
		return nil, err
	}
	return &resource, nil
}

// GetFortimanagerDVMDevice gets an existing FortimanagerDVMDevice resource's state with the given name, ID, and optional
// state properties that are used to uniquely qualify the lookup (nil if not required).
func GetFortimanagerDVMDevice(ctx *pulumi.Context,
	name string, id pulumi.IDInput, state *FortimanagerDVMDeviceState, opts ...pulumi.ResourceOption) (*FortimanagerDVMDevice, error) {
	var resource FortimanagerDVMDevice
	err := ctx.ReadResource("fortios:index/fortimanagerDVMDevice:FortimanagerDVMDevice", name, id, state, &resource, opts...)
	if err != nil {
		return nil, err
	}
	return &resource, nil
}

// Input properties used for looking up and filtering FortimanagerDVMDevice resources.
type fortimanagerDVMDeviceState struct {
	// Name or ID of the ADOM where the command is to be executed on.
	Adom *string `pulumi:"adom"`
	// Fortigate's device name.
	DeviceName *string `pulumi:"deviceName"`
	// Fortigate's ipaddress.
	Ipaddr *string `pulumi:"ipaddr"`
	// Password.
	Password *string `pulumi:"password"`
	// User name.
	Userid *string `pulumi:"userid"`
}

type FortimanagerDVMDeviceState struct {
	// Name or ID of the ADOM where the command is to be executed on.
	Adom pulumi.StringPtrInput
	// Fortigate's device name.
	DeviceName pulumi.StringPtrInput
	// Fortigate's ipaddress.
	Ipaddr pulumi.StringPtrInput
	// Password.
	Password pulumi.StringPtrInput
	// User name.
	Userid pulumi.StringPtrInput
}

func (FortimanagerDVMDeviceState) ElementType() reflect.Type {
	return reflect.TypeOf((*fortimanagerDVMDeviceState)(nil)).Elem()
}

type fortimanagerDVMDeviceArgs struct {
	// Name or ID of the ADOM where the command is to be executed on.
	Adom *string `pulumi:"adom"`
	// Fortigate's device name.
	DeviceName string `pulumi:"deviceName"`
	// Fortigate's ipaddress.
	Ipaddr string `pulumi:"ipaddr"`
	// Password.
	Password *string `pulumi:"password"`
	// User name.
	Userid string `pulumi:"userid"`
}

// The set of arguments for constructing a FortimanagerDVMDevice resource.
type FortimanagerDVMDeviceArgs struct {
	// Name or ID of the ADOM where the command is to be executed on.
	Adom pulumi.StringPtrInput
	// Fortigate's device name.
	DeviceName pulumi.StringInput
	// Fortigate's ipaddress.
	Ipaddr pulumi.StringInput
	// Password.
	Password pulumi.StringPtrInput
	// User name.
	Userid pulumi.StringInput
}

func (FortimanagerDVMDeviceArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*fortimanagerDVMDeviceArgs)(nil)).Elem()
}

type FortimanagerDVMDeviceInput interface {
	pulumi.Input

	ToFortimanagerDVMDeviceOutput() FortimanagerDVMDeviceOutput
	ToFortimanagerDVMDeviceOutputWithContext(ctx context.Context) FortimanagerDVMDeviceOutput
}

func (*FortimanagerDVMDevice) ElementType() reflect.Type {
	return reflect.TypeOf((**FortimanagerDVMDevice)(nil)).Elem()
}

func (i *FortimanagerDVMDevice) ToFortimanagerDVMDeviceOutput() FortimanagerDVMDeviceOutput {
	return i.ToFortimanagerDVMDeviceOutputWithContext(context.Background())
}

func (i *FortimanagerDVMDevice) ToFortimanagerDVMDeviceOutputWithContext(ctx context.Context) FortimanagerDVMDeviceOutput {
	return pulumi.ToOutputWithContext(ctx, i).(FortimanagerDVMDeviceOutput)
}

// FortimanagerDVMDeviceArrayInput is an input type that accepts FortimanagerDVMDeviceArray and FortimanagerDVMDeviceArrayOutput values.
// You can construct a concrete instance of `FortimanagerDVMDeviceArrayInput` via:
//
//          FortimanagerDVMDeviceArray{ FortimanagerDVMDeviceArgs{...} }
type FortimanagerDVMDeviceArrayInput interface {
	pulumi.Input

	ToFortimanagerDVMDeviceArrayOutput() FortimanagerDVMDeviceArrayOutput
	ToFortimanagerDVMDeviceArrayOutputWithContext(context.Context) FortimanagerDVMDeviceArrayOutput
}

type FortimanagerDVMDeviceArray []FortimanagerDVMDeviceInput

func (FortimanagerDVMDeviceArray) ElementType() reflect.Type {
	return reflect.TypeOf((*[]*FortimanagerDVMDevice)(nil)).Elem()
}

func (i FortimanagerDVMDeviceArray) ToFortimanagerDVMDeviceArrayOutput() FortimanagerDVMDeviceArrayOutput {
	return i.ToFortimanagerDVMDeviceArrayOutputWithContext(context.Background())
}

func (i FortimanagerDVMDeviceArray) ToFortimanagerDVMDeviceArrayOutputWithContext(ctx context.Context) FortimanagerDVMDeviceArrayOutput {
	return pulumi.ToOutputWithContext(ctx, i).(FortimanagerDVMDeviceArrayOutput)
}

// FortimanagerDVMDeviceMapInput is an input type that accepts FortimanagerDVMDeviceMap and FortimanagerDVMDeviceMapOutput values.
// You can construct a concrete instance of `FortimanagerDVMDeviceMapInput` via:
//
//          FortimanagerDVMDeviceMap{ "key": FortimanagerDVMDeviceArgs{...} }
type FortimanagerDVMDeviceMapInput interface {
	pulumi.Input

	ToFortimanagerDVMDeviceMapOutput() FortimanagerDVMDeviceMapOutput
	ToFortimanagerDVMDeviceMapOutputWithContext(context.Context) FortimanagerDVMDeviceMapOutput
}

type FortimanagerDVMDeviceMap map[string]FortimanagerDVMDeviceInput

func (FortimanagerDVMDeviceMap) ElementType() reflect.Type {
	return reflect.TypeOf((*map[string]*FortimanagerDVMDevice)(nil)).Elem()
}

func (i FortimanagerDVMDeviceMap) ToFortimanagerDVMDeviceMapOutput() FortimanagerDVMDeviceMapOutput {
	return i.ToFortimanagerDVMDeviceMapOutputWithContext(context.Background())
}

func (i FortimanagerDVMDeviceMap) ToFortimanagerDVMDeviceMapOutputWithContext(ctx context.Context) FortimanagerDVMDeviceMapOutput {
	return pulumi.ToOutputWithContext(ctx, i).(FortimanagerDVMDeviceMapOutput)
}

type FortimanagerDVMDeviceOutput struct{ *pulumi.OutputState }

func (FortimanagerDVMDeviceOutput) ElementType() reflect.Type {
	return reflect.TypeOf((**FortimanagerDVMDevice)(nil)).Elem()
}

func (o FortimanagerDVMDeviceOutput) ToFortimanagerDVMDeviceOutput() FortimanagerDVMDeviceOutput {
	return o
}

func (o FortimanagerDVMDeviceOutput) ToFortimanagerDVMDeviceOutputWithContext(ctx context.Context) FortimanagerDVMDeviceOutput {
	return o
}

type FortimanagerDVMDeviceArrayOutput struct{ *pulumi.OutputState }

func (FortimanagerDVMDeviceArrayOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*[]*FortimanagerDVMDevice)(nil)).Elem()
}

func (o FortimanagerDVMDeviceArrayOutput) ToFortimanagerDVMDeviceArrayOutput() FortimanagerDVMDeviceArrayOutput {
	return o
}

func (o FortimanagerDVMDeviceArrayOutput) ToFortimanagerDVMDeviceArrayOutputWithContext(ctx context.Context) FortimanagerDVMDeviceArrayOutput {
	return o
}

func (o FortimanagerDVMDeviceArrayOutput) Index(i pulumi.IntInput) FortimanagerDVMDeviceOutput {
	return pulumi.All(o, i).ApplyT(func(vs []interface{}) *FortimanagerDVMDevice {
		return vs[0].([]*FortimanagerDVMDevice)[vs[1].(int)]
	}).(FortimanagerDVMDeviceOutput)
}

type FortimanagerDVMDeviceMapOutput struct{ *pulumi.OutputState }

func (FortimanagerDVMDeviceMapOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*map[string]*FortimanagerDVMDevice)(nil)).Elem()
}

func (o FortimanagerDVMDeviceMapOutput) ToFortimanagerDVMDeviceMapOutput() FortimanagerDVMDeviceMapOutput {
	return o
}

func (o FortimanagerDVMDeviceMapOutput) ToFortimanagerDVMDeviceMapOutputWithContext(ctx context.Context) FortimanagerDVMDeviceMapOutput {
	return o
}

func (o FortimanagerDVMDeviceMapOutput) MapIndex(k pulumi.StringInput) FortimanagerDVMDeviceOutput {
	return pulumi.All(o, k).ApplyT(func(vs []interface{}) *FortimanagerDVMDevice {
		return vs[0].(map[string]*FortimanagerDVMDevice)[vs[1].(string)]
	}).(FortimanagerDVMDeviceOutput)
}

func init() {
	pulumi.RegisterInputType(reflect.TypeOf((*FortimanagerDVMDeviceInput)(nil)).Elem(), &FortimanagerDVMDevice{})
	pulumi.RegisterInputType(reflect.TypeOf((*FortimanagerDVMDeviceArrayInput)(nil)).Elem(), FortimanagerDVMDeviceArray{})
	pulumi.RegisterInputType(reflect.TypeOf((*FortimanagerDVMDeviceMapInput)(nil)).Elem(), FortimanagerDVMDeviceMap{})
	pulumi.RegisterOutputType(FortimanagerDVMDeviceOutput{})
	pulumi.RegisterOutputType(FortimanagerDVMDeviceArrayOutput{})
	pulumi.RegisterOutputType(FortimanagerDVMDeviceMapOutput{})
}
