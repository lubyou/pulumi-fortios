// Code generated by the Pulumi Terraform Bridge (tfgen) Tool DO NOT EDIT.
// *** WARNING: Do not edit by hand unless you're certain you know what you are doing! ***

package fortios

import (
	"context"
	"reflect"

	"github.com/lubyou/pulumi-fortios/sdk/go/fortios/internal"
	"github.com/pulumi/pulumi/sdk/v3/go/pulumi"
	"github.com/pulumi/pulumi/sdk/v3/go/pulumix"
)

type RouterRouteMap struct {
	pulumi.CustomResourceState

	Comments            pulumi.StringOutput           `pulumi:"comments"`
	DynamicSortSubtable pulumi.StringPtrOutput        `pulumi:"dynamicSortSubtable"`
	GetAllTables        pulumi.StringPtrOutput        `pulumi:"getAllTables"`
	Name                pulumi.StringOutput           `pulumi:"name"`
	Rules               RouterRouteMapRuleArrayOutput `pulumi:"rules"`
	Vdomparam           pulumi.StringPtrOutput        `pulumi:"vdomparam"`
}

// NewRouterRouteMap registers a new resource with the given unique name, arguments, and options.
func NewRouterRouteMap(ctx *pulumi.Context,
	name string, args *RouterRouteMapArgs, opts ...pulumi.ResourceOption) (*RouterRouteMap, error) {
	if args == nil {
		args = &RouterRouteMapArgs{}
	}

	opts = internal.PkgResourceDefaultOpts(opts)
	var resource RouterRouteMap
	err := ctx.RegisterResource("fortios:index/routerRouteMap:RouterRouteMap", name, args, &resource, opts...)
	if err != nil {
		return nil, err
	}
	return &resource, nil
}

// GetRouterRouteMap gets an existing RouterRouteMap resource's state with the given name, ID, and optional
// state properties that are used to uniquely qualify the lookup (nil if not required).
func GetRouterRouteMap(ctx *pulumi.Context,
	name string, id pulumi.IDInput, state *RouterRouteMapState, opts ...pulumi.ResourceOption) (*RouterRouteMap, error) {
	var resource RouterRouteMap
	err := ctx.ReadResource("fortios:index/routerRouteMap:RouterRouteMap", name, id, state, &resource, opts...)
	if err != nil {
		return nil, err
	}
	return &resource, nil
}

// Input properties used for looking up and filtering RouterRouteMap resources.
type routerRouteMapState struct {
	Comments            *string              `pulumi:"comments"`
	DynamicSortSubtable *string              `pulumi:"dynamicSortSubtable"`
	GetAllTables        *string              `pulumi:"getAllTables"`
	Name                *string              `pulumi:"name"`
	Rules               []RouterRouteMapRule `pulumi:"rules"`
	Vdomparam           *string              `pulumi:"vdomparam"`
}

type RouterRouteMapState struct {
	Comments            pulumi.StringPtrInput
	DynamicSortSubtable pulumi.StringPtrInput
	GetAllTables        pulumi.StringPtrInput
	Name                pulumi.StringPtrInput
	Rules               RouterRouteMapRuleArrayInput
	Vdomparam           pulumi.StringPtrInput
}

func (RouterRouteMapState) ElementType() reflect.Type {
	return reflect.TypeOf((*routerRouteMapState)(nil)).Elem()
}

type routerRouteMapArgs struct {
	Comments            *string              `pulumi:"comments"`
	DynamicSortSubtable *string              `pulumi:"dynamicSortSubtable"`
	GetAllTables        *string              `pulumi:"getAllTables"`
	Name                *string              `pulumi:"name"`
	Rules               []RouterRouteMapRule `pulumi:"rules"`
	Vdomparam           *string              `pulumi:"vdomparam"`
}

// The set of arguments for constructing a RouterRouteMap resource.
type RouterRouteMapArgs struct {
	Comments            pulumi.StringPtrInput
	DynamicSortSubtable pulumi.StringPtrInput
	GetAllTables        pulumi.StringPtrInput
	Name                pulumi.StringPtrInput
	Rules               RouterRouteMapRuleArrayInput
	Vdomparam           pulumi.StringPtrInput
}

func (RouterRouteMapArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*routerRouteMapArgs)(nil)).Elem()
}

type RouterRouteMapInput interface {
	pulumi.Input

	ToRouterRouteMapOutput() RouterRouteMapOutput
	ToRouterRouteMapOutputWithContext(ctx context.Context) RouterRouteMapOutput
}

func (*RouterRouteMap) ElementType() reflect.Type {
	return reflect.TypeOf((**RouterRouteMap)(nil)).Elem()
}

func (i *RouterRouteMap) ToRouterRouteMapOutput() RouterRouteMapOutput {
	return i.ToRouterRouteMapOutputWithContext(context.Background())
}

func (i *RouterRouteMap) ToRouterRouteMapOutputWithContext(ctx context.Context) RouterRouteMapOutput {
	return pulumi.ToOutputWithContext(ctx, i).(RouterRouteMapOutput)
}

func (i *RouterRouteMap) ToOutput(ctx context.Context) pulumix.Output[*RouterRouteMap] {
	return pulumix.Output[*RouterRouteMap]{
		OutputState: i.ToRouterRouteMapOutputWithContext(ctx).OutputState,
	}
}

// RouterRouteMapArrayInput is an input type that accepts RouterRouteMapArray and RouterRouteMapArrayOutput values.
// You can construct a concrete instance of `RouterRouteMapArrayInput` via:
//
//	RouterRouteMapArray{ RouterRouteMapArgs{...} }
type RouterRouteMapArrayInput interface {
	pulumi.Input

	ToRouterRouteMapArrayOutput() RouterRouteMapArrayOutput
	ToRouterRouteMapArrayOutputWithContext(context.Context) RouterRouteMapArrayOutput
}

type RouterRouteMapArray []RouterRouteMapInput

func (RouterRouteMapArray) ElementType() reflect.Type {
	return reflect.TypeOf((*[]*RouterRouteMap)(nil)).Elem()
}

func (i RouterRouteMapArray) ToRouterRouteMapArrayOutput() RouterRouteMapArrayOutput {
	return i.ToRouterRouteMapArrayOutputWithContext(context.Background())
}

func (i RouterRouteMapArray) ToRouterRouteMapArrayOutputWithContext(ctx context.Context) RouterRouteMapArrayOutput {
	return pulumi.ToOutputWithContext(ctx, i).(RouterRouteMapArrayOutput)
}

func (i RouterRouteMapArray) ToOutput(ctx context.Context) pulumix.Output[[]*RouterRouteMap] {
	return pulumix.Output[[]*RouterRouteMap]{
		OutputState: i.ToRouterRouteMapArrayOutputWithContext(ctx).OutputState,
	}
}

// RouterRouteMapMapInput is an input type that accepts RouterRouteMapMap and RouterRouteMapMapOutput values.
// You can construct a concrete instance of `RouterRouteMapMapInput` via:
//
//	RouterRouteMapMap{ "key": RouterRouteMapArgs{...} }
type RouterRouteMapMapInput interface {
	pulumi.Input

	ToRouterRouteMapMapOutput() RouterRouteMapMapOutput
	ToRouterRouteMapMapOutputWithContext(context.Context) RouterRouteMapMapOutput
}

type RouterRouteMapMap map[string]RouterRouteMapInput

func (RouterRouteMapMap) ElementType() reflect.Type {
	return reflect.TypeOf((*map[string]*RouterRouteMap)(nil)).Elem()
}

func (i RouterRouteMapMap) ToRouterRouteMapMapOutput() RouterRouteMapMapOutput {
	return i.ToRouterRouteMapMapOutputWithContext(context.Background())
}

func (i RouterRouteMapMap) ToRouterRouteMapMapOutputWithContext(ctx context.Context) RouterRouteMapMapOutput {
	return pulumi.ToOutputWithContext(ctx, i).(RouterRouteMapMapOutput)
}

func (i RouterRouteMapMap) ToOutput(ctx context.Context) pulumix.Output[map[string]*RouterRouteMap] {
	return pulumix.Output[map[string]*RouterRouteMap]{
		OutputState: i.ToRouterRouteMapMapOutputWithContext(ctx).OutputState,
	}
}

type RouterRouteMapOutput struct{ *pulumi.OutputState }

func (RouterRouteMapOutput) ElementType() reflect.Type {
	return reflect.TypeOf((**RouterRouteMap)(nil)).Elem()
}

func (o RouterRouteMapOutput) ToRouterRouteMapOutput() RouterRouteMapOutput {
	return o
}

func (o RouterRouteMapOutput) ToRouterRouteMapOutputWithContext(ctx context.Context) RouterRouteMapOutput {
	return o
}

func (o RouterRouteMapOutput) ToOutput(ctx context.Context) pulumix.Output[*RouterRouteMap] {
	return pulumix.Output[*RouterRouteMap]{
		OutputState: o.OutputState,
	}
}

func (o RouterRouteMapOutput) Comments() pulumi.StringOutput {
	return o.ApplyT(func(v *RouterRouteMap) pulumi.StringOutput { return v.Comments }).(pulumi.StringOutput)
}

func (o RouterRouteMapOutput) DynamicSortSubtable() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *RouterRouteMap) pulumi.StringPtrOutput { return v.DynamicSortSubtable }).(pulumi.StringPtrOutput)
}

func (o RouterRouteMapOutput) GetAllTables() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *RouterRouteMap) pulumi.StringPtrOutput { return v.GetAllTables }).(pulumi.StringPtrOutput)
}

func (o RouterRouteMapOutput) Name() pulumi.StringOutput {
	return o.ApplyT(func(v *RouterRouteMap) pulumi.StringOutput { return v.Name }).(pulumi.StringOutput)
}

func (o RouterRouteMapOutput) Rules() RouterRouteMapRuleArrayOutput {
	return o.ApplyT(func(v *RouterRouteMap) RouterRouteMapRuleArrayOutput { return v.Rules }).(RouterRouteMapRuleArrayOutput)
}

func (o RouterRouteMapOutput) Vdomparam() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *RouterRouteMap) pulumi.StringPtrOutput { return v.Vdomparam }).(pulumi.StringPtrOutput)
}

type RouterRouteMapArrayOutput struct{ *pulumi.OutputState }

func (RouterRouteMapArrayOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*[]*RouterRouteMap)(nil)).Elem()
}

func (o RouterRouteMapArrayOutput) ToRouterRouteMapArrayOutput() RouterRouteMapArrayOutput {
	return o
}

func (o RouterRouteMapArrayOutput) ToRouterRouteMapArrayOutputWithContext(ctx context.Context) RouterRouteMapArrayOutput {
	return o
}

func (o RouterRouteMapArrayOutput) ToOutput(ctx context.Context) pulumix.Output[[]*RouterRouteMap] {
	return pulumix.Output[[]*RouterRouteMap]{
		OutputState: o.OutputState,
	}
}

func (o RouterRouteMapArrayOutput) Index(i pulumi.IntInput) RouterRouteMapOutput {
	return pulumi.All(o, i).ApplyT(func(vs []interface{}) *RouterRouteMap {
		return vs[0].([]*RouterRouteMap)[vs[1].(int)]
	}).(RouterRouteMapOutput)
}

type RouterRouteMapMapOutput struct{ *pulumi.OutputState }

func (RouterRouteMapMapOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*map[string]*RouterRouteMap)(nil)).Elem()
}

func (o RouterRouteMapMapOutput) ToRouterRouteMapMapOutput() RouterRouteMapMapOutput {
	return o
}

func (o RouterRouteMapMapOutput) ToRouterRouteMapMapOutputWithContext(ctx context.Context) RouterRouteMapMapOutput {
	return o
}

func (o RouterRouteMapMapOutput) ToOutput(ctx context.Context) pulumix.Output[map[string]*RouterRouteMap] {
	return pulumix.Output[map[string]*RouterRouteMap]{
		OutputState: o.OutputState,
	}
}

func (o RouterRouteMapMapOutput) MapIndex(k pulumi.StringInput) RouterRouteMapOutput {
	return pulumi.All(o, k).ApplyT(func(vs []interface{}) *RouterRouteMap {
		return vs[0].(map[string]*RouterRouteMap)[vs[1].(string)]
	}).(RouterRouteMapOutput)
}

func init() {
	pulumi.RegisterInputType(reflect.TypeOf((*RouterRouteMapInput)(nil)).Elem(), &RouterRouteMap{})
	pulumi.RegisterInputType(reflect.TypeOf((*RouterRouteMapArrayInput)(nil)).Elem(), RouterRouteMapArray{})
	pulumi.RegisterInputType(reflect.TypeOf((*RouterRouteMapMapInput)(nil)).Elem(), RouterRouteMapMap{})
	pulumi.RegisterOutputType(RouterRouteMapOutput{})
	pulumi.RegisterOutputType(RouterRouteMapArrayOutput{})
	pulumi.RegisterOutputType(RouterRouteMapMapOutput{})
}
