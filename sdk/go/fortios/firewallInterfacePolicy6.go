// *** WARNING: this file was generated by the Pulumi Terraform Bridge (tfgen) Tool. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

package fortios

import (
	"context"
	"reflect"

	"github.com/pkg/errors"
	"github.com/pulumi/pulumi/sdk/v3/go/pulumi"
)

// Configure IPv6 interface policies.
//
// ## Example Usage
//
// ```go
// package main
//
// import (
// 	"github.com/pulumi/pulumi-fortios/sdk/go/fortios"
// 	"github.com/pulumi/pulumi/sdk/v3/go/pulumi"
// )
//
// func main() {
// 	pulumi.Run(func(ctx *pulumi.Context) error {
// 		_, err := fortios.NewFirewallInterfacePolicy6(ctx, "trname", &fortios.FirewallInterfacePolicy6Args{
// 			AddressType:           pulumi.String("ipv6"),
// 			ApplicationListStatus: pulumi.String("disable"),
// 			AvProfileStatus:       pulumi.String("disable"),
// 			DlpSensorStatus:       pulumi.String("disable"),
// 			Dsri:                  pulumi.String("disable"),
// 			Dstaddr6s: FirewallInterfacePolicy6Dstaddr6Array{
// 				&FirewallInterfacePolicy6Dstaddr6Args{
// 					Name: pulumi.String("all"),
// 				},
// 			},
// 			Interface:             pulumi.String("port4"),
// 			IpsSensorStatus:       pulumi.String("disable"),
// 			Logtraffic:            pulumi.String("all"),
// 			Policyid:              pulumi.Int(1),
// 			ScanBotnetConnections: pulumi.String("block"),
// 			Service6s: FirewallInterfacePolicy6Service6Array{
// 				&FirewallInterfacePolicy6Service6Args{
// 					Name: pulumi.String("ALL"),
// 				},
// 			},
// 			SpamfilterProfileStatus: pulumi.String("disable"),
// 			Srcaddr6s: FirewallInterfacePolicy6Srcaddr6Array{
// 				&FirewallInterfacePolicy6Srcaddr6Args{
// 					Name: pulumi.String("all"),
// 				},
// 			},
// 			Status:                 pulumi.String("enable"),
// 			WebfilterProfileStatus: pulumi.String("disable"),
// 		})
// 		if err != nil {
// 			return err
// 		}
// 		return nil
// 	})
// }
// ```
//
// ## Import
//
// Firewall InterfacePolicy6 can be imported using any of these accepted formats
//
// ```sh
//  $ pulumi import fortios:index/firewallInterfacePolicy6:FirewallInterfacePolicy6 labelname {{policyid}}
// ```
//
//  If you do not want to import arguments of block$ export "FORTIOS_IMPORT_TABLE"="false"
//
// ```sh
//  $ pulumi import fortios:index/firewallInterfacePolicy6:FirewallInterfacePolicy6 labelname {{policyid}}
// ```
//
//  $ unset "FORTIOS_IMPORT_TABLE"
type FirewallInterfacePolicy6 struct {
	pulumi.CustomResourceState

	// Policy address type (IPv4 or IPv6). Valid values: `ipv4`, `ipv6`.
	AddressType pulumi.StringOutput `pulumi:"addressType"`
	// Application list name.
	ApplicationList pulumi.StringOutput `pulumi:"applicationList"`
	// Enable/disable application control. Valid values: `enable`, `disable`.
	ApplicationListStatus pulumi.StringOutput `pulumi:"applicationListStatus"`
	// Antivirus profile.
	AvProfile pulumi.StringOutput `pulumi:"avProfile"`
	// Enable/disable antivirus. Valid values: `enable`, `disable`.
	AvProfileStatus pulumi.StringOutput `pulumi:"avProfileStatus"`
	// Comments.
	Comments pulumi.StringPtrOutput `pulumi:"comments"`
	// DLP sensor name.
	DlpSensor pulumi.StringOutput `pulumi:"dlpSensor"`
	// Enable/disable DLP. Valid values: `enable`, `disable`.
	DlpSensorStatus pulumi.StringOutput `pulumi:"dlpSensorStatus"`
	// Enable/disable DSRI. Valid values: `enable`, `disable`.
	Dsri pulumi.StringOutput `pulumi:"dsri"`
	// IPv6 address object to limit traffic monitoring to network traffic sent to the specified address or range. The structure of `dstaddr6` block is documented below.
	Dstaddr6s FirewallInterfacePolicy6Dstaddr6ArrayOutput `pulumi:"dstaddr6s"`
	// true or false, set this parameter to true when using dynamic forEach + toset to configure and sort sub-tables, please do not set this parameter when configuring static sub-tables.
	DynamicSortSubtable pulumi.StringPtrOutput `pulumi:"dynamicSortSubtable"`
	// Email filter profile.
	EmailfilterProfile pulumi.StringOutput `pulumi:"emailfilterProfile"`
	// Enable/disable email filter. Valid values: `enable`, `disable`.
	EmailfilterProfileStatus pulumi.StringOutput `pulumi:"emailfilterProfileStatus"`
	// Monitored interface name from available interfaces.
	Interface pulumi.StringOutput `pulumi:"interface"`
	// IPS sensor name.
	IpsSensor pulumi.StringOutput `pulumi:"ipsSensor"`
	// Enable/disable IPS. Valid values: `enable`, `disable`.
	IpsSensorStatus pulumi.StringOutput `pulumi:"ipsSensorStatus"`
	// Label.
	Label pulumi.StringOutput `pulumi:"label"`
	// Logging type to be used in this policy (Options: all | utm | disable, Default: utm). Valid values: `all`, `utm`, `disable`.
	Logtraffic pulumi.StringOutput `pulumi:"logtraffic"`
	// Policy ID.
	Policyid pulumi.IntOutput `pulumi:"policyid"`
	// Enable/disable scanning for connections to Botnet servers. Valid values: `disable`, `block`, `monitor`.
	ScanBotnetConnections pulumi.StringOutput `pulumi:"scanBotnetConnections"`
	// Service name. The structure of `service6` block is documented below.
	Service6s FirewallInterfacePolicy6Service6ArrayOutput `pulumi:"service6s"`
	// Antispam profile.
	SpamfilterProfile pulumi.StringOutput `pulumi:"spamfilterProfile"`
	// Enable/disable antispam. Valid values: `enable`, `disable`.
	SpamfilterProfileStatus pulumi.StringOutput `pulumi:"spamfilterProfileStatus"`
	// IPv6 address object to limit traffic monitoring to network traffic sent from the specified address or range. The structure of `srcaddr6` block is documented below.
	Srcaddr6s FirewallInterfacePolicy6Srcaddr6ArrayOutput `pulumi:"srcaddr6s"`
	// Enable/disable this policy. Valid values: `enable`, `disable`.
	Status pulumi.StringOutput `pulumi:"status"`
	// Specifies the vdom to which the resource will be applied when the FortiGate unit is running in VDOM mode. Only one vdom can be specified. If you want to inherit the vdom configuration of the provider, please do not set this parameter.
	Vdomparam pulumi.StringPtrOutput `pulumi:"vdomparam"`
	// Web filter profile.
	WebfilterProfile pulumi.StringOutput `pulumi:"webfilterProfile"`
	// Enable/disable web filtering. Valid values: `enable`, `disable`.
	WebfilterProfileStatus pulumi.StringOutput `pulumi:"webfilterProfileStatus"`
}

// NewFirewallInterfacePolicy6 registers a new resource with the given unique name, arguments, and options.
func NewFirewallInterfacePolicy6(ctx *pulumi.Context,
	name string, args *FirewallInterfacePolicy6Args, opts ...pulumi.ResourceOption) (*FirewallInterfacePolicy6, error) {
	if args == nil {
		return nil, errors.New("missing one or more required arguments")
	}

	if args.Dstaddr6s == nil {
		return nil, errors.New("invalid value for required argument 'Dstaddr6s'")
	}
	if args.Interface == nil {
		return nil, errors.New("invalid value for required argument 'Interface'")
	}
	if args.Srcaddr6s == nil {
		return nil, errors.New("invalid value for required argument 'Srcaddr6s'")
	}
	opts = pkgResourceDefaultOpts(opts)
	var resource FirewallInterfacePolicy6
	err := ctx.RegisterResource("fortios:index/firewallInterfacePolicy6:FirewallInterfacePolicy6", name, args, &resource, opts...)
	if err != nil {
		return nil, err
	}
	return &resource, nil
}

// GetFirewallInterfacePolicy6 gets an existing FirewallInterfacePolicy6 resource's state with the given name, ID, and optional
// state properties that are used to uniquely qualify the lookup (nil if not required).
func GetFirewallInterfacePolicy6(ctx *pulumi.Context,
	name string, id pulumi.IDInput, state *FirewallInterfacePolicy6State, opts ...pulumi.ResourceOption) (*FirewallInterfacePolicy6, error) {
	var resource FirewallInterfacePolicy6
	err := ctx.ReadResource("fortios:index/firewallInterfacePolicy6:FirewallInterfacePolicy6", name, id, state, &resource, opts...)
	if err != nil {
		return nil, err
	}
	return &resource, nil
}

// Input properties used for looking up and filtering FirewallInterfacePolicy6 resources.
type firewallInterfacePolicy6State struct {
	// Policy address type (IPv4 or IPv6). Valid values: `ipv4`, `ipv6`.
	AddressType *string `pulumi:"addressType"`
	// Application list name.
	ApplicationList *string `pulumi:"applicationList"`
	// Enable/disable application control. Valid values: `enable`, `disable`.
	ApplicationListStatus *string `pulumi:"applicationListStatus"`
	// Antivirus profile.
	AvProfile *string `pulumi:"avProfile"`
	// Enable/disable antivirus. Valid values: `enable`, `disable`.
	AvProfileStatus *string `pulumi:"avProfileStatus"`
	// Comments.
	Comments *string `pulumi:"comments"`
	// DLP sensor name.
	DlpSensor *string `pulumi:"dlpSensor"`
	// Enable/disable DLP. Valid values: `enable`, `disable`.
	DlpSensorStatus *string `pulumi:"dlpSensorStatus"`
	// Enable/disable DSRI. Valid values: `enable`, `disable`.
	Dsri *string `pulumi:"dsri"`
	// IPv6 address object to limit traffic monitoring to network traffic sent to the specified address or range. The structure of `dstaddr6` block is documented below.
	Dstaddr6s []FirewallInterfacePolicy6Dstaddr6 `pulumi:"dstaddr6s"`
	// true or false, set this parameter to true when using dynamic forEach + toset to configure and sort sub-tables, please do not set this parameter when configuring static sub-tables.
	DynamicSortSubtable *string `pulumi:"dynamicSortSubtable"`
	// Email filter profile.
	EmailfilterProfile *string `pulumi:"emailfilterProfile"`
	// Enable/disable email filter. Valid values: `enable`, `disable`.
	EmailfilterProfileStatus *string `pulumi:"emailfilterProfileStatus"`
	// Monitored interface name from available interfaces.
	Interface *string `pulumi:"interface"`
	// IPS sensor name.
	IpsSensor *string `pulumi:"ipsSensor"`
	// Enable/disable IPS. Valid values: `enable`, `disable`.
	IpsSensorStatus *string `pulumi:"ipsSensorStatus"`
	// Label.
	Label *string `pulumi:"label"`
	// Logging type to be used in this policy (Options: all | utm | disable, Default: utm). Valid values: `all`, `utm`, `disable`.
	Logtraffic *string `pulumi:"logtraffic"`
	// Policy ID.
	Policyid *int `pulumi:"policyid"`
	// Enable/disable scanning for connections to Botnet servers. Valid values: `disable`, `block`, `monitor`.
	ScanBotnetConnections *string `pulumi:"scanBotnetConnections"`
	// Service name. The structure of `service6` block is documented below.
	Service6s []FirewallInterfacePolicy6Service6 `pulumi:"service6s"`
	// Antispam profile.
	SpamfilterProfile *string `pulumi:"spamfilterProfile"`
	// Enable/disable antispam. Valid values: `enable`, `disable`.
	SpamfilterProfileStatus *string `pulumi:"spamfilterProfileStatus"`
	// IPv6 address object to limit traffic monitoring to network traffic sent from the specified address or range. The structure of `srcaddr6` block is documented below.
	Srcaddr6s []FirewallInterfacePolicy6Srcaddr6 `pulumi:"srcaddr6s"`
	// Enable/disable this policy. Valid values: `enable`, `disable`.
	Status *string `pulumi:"status"`
	// Specifies the vdom to which the resource will be applied when the FortiGate unit is running in VDOM mode. Only one vdom can be specified. If you want to inherit the vdom configuration of the provider, please do not set this parameter.
	Vdomparam *string `pulumi:"vdomparam"`
	// Web filter profile.
	WebfilterProfile *string `pulumi:"webfilterProfile"`
	// Enable/disable web filtering. Valid values: `enable`, `disable`.
	WebfilterProfileStatus *string `pulumi:"webfilterProfileStatus"`
}

type FirewallInterfacePolicy6State struct {
	// Policy address type (IPv4 or IPv6). Valid values: `ipv4`, `ipv6`.
	AddressType pulumi.StringPtrInput
	// Application list name.
	ApplicationList pulumi.StringPtrInput
	// Enable/disable application control. Valid values: `enable`, `disable`.
	ApplicationListStatus pulumi.StringPtrInput
	// Antivirus profile.
	AvProfile pulumi.StringPtrInput
	// Enable/disable antivirus. Valid values: `enable`, `disable`.
	AvProfileStatus pulumi.StringPtrInput
	// Comments.
	Comments pulumi.StringPtrInput
	// DLP sensor name.
	DlpSensor pulumi.StringPtrInput
	// Enable/disable DLP. Valid values: `enable`, `disable`.
	DlpSensorStatus pulumi.StringPtrInput
	// Enable/disable DSRI. Valid values: `enable`, `disable`.
	Dsri pulumi.StringPtrInput
	// IPv6 address object to limit traffic monitoring to network traffic sent to the specified address or range. The structure of `dstaddr6` block is documented below.
	Dstaddr6s FirewallInterfacePolicy6Dstaddr6ArrayInput
	// true or false, set this parameter to true when using dynamic forEach + toset to configure and sort sub-tables, please do not set this parameter when configuring static sub-tables.
	DynamicSortSubtable pulumi.StringPtrInput
	// Email filter profile.
	EmailfilterProfile pulumi.StringPtrInput
	// Enable/disable email filter. Valid values: `enable`, `disable`.
	EmailfilterProfileStatus pulumi.StringPtrInput
	// Monitored interface name from available interfaces.
	Interface pulumi.StringPtrInput
	// IPS sensor name.
	IpsSensor pulumi.StringPtrInput
	// Enable/disable IPS. Valid values: `enable`, `disable`.
	IpsSensorStatus pulumi.StringPtrInput
	// Label.
	Label pulumi.StringPtrInput
	// Logging type to be used in this policy (Options: all | utm | disable, Default: utm). Valid values: `all`, `utm`, `disable`.
	Logtraffic pulumi.StringPtrInput
	// Policy ID.
	Policyid pulumi.IntPtrInput
	// Enable/disable scanning for connections to Botnet servers. Valid values: `disable`, `block`, `monitor`.
	ScanBotnetConnections pulumi.StringPtrInput
	// Service name. The structure of `service6` block is documented below.
	Service6s FirewallInterfacePolicy6Service6ArrayInput
	// Antispam profile.
	SpamfilterProfile pulumi.StringPtrInput
	// Enable/disable antispam. Valid values: `enable`, `disable`.
	SpamfilterProfileStatus pulumi.StringPtrInput
	// IPv6 address object to limit traffic monitoring to network traffic sent from the specified address or range. The structure of `srcaddr6` block is documented below.
	Srcaddr6s FirewallInterfacePolicy6Srcaddr6ArrayInput
	// Enable/disable this policy. Valid values: `enable`, `disable`.
	Status pulumi.StringPtrInput
	// Specifies the vdom to which the resource will be applied when the FortiGate unit is running in VDOM mode. Only one vdom can be specified. If you want to inherit the vdom configuration of the provider, please do not set this parameter.
	Vdomparam pulumi.StringPtrInput
	// Web filter profile.
	WebfilterProfile pulumi.StringPtrInput
	// Enable/disable web filtering. Valid values: `enable`, `disable`.
	WebfilterProfileStatus pulumi.StringPtrInput
}

func (FirewallInterfacePolicy6State) ElementType() reflect.Type {
	return reflect.TypeOf((*firewallInterfacePolicy6State)(nil)).Elem()
}

type firewallInterfacePolicy6Args struct {
	// Policy address type (IPv4 or IPv6). Valid values: `ipv4`, `ipv6`.
	AddressType *string `pulumi:"addressType"`
	// Application list name.
	ApplicationList *string `pulumi:"applicationList"`
	// Enable/disable application control. Valid values: `enable`, `disable`.
	ApplicationListStatus *string `pulumi:"applicationListStatus"`
	// Antivirus profile.
	AvProfile *string `pulumi:"avProfile"`
	// Enable/disable antivirus. Valid values: `enable`, `disable`.
	AvProfileStatus *string `pulumi:"avProfileStatus"`
	// Comments.
	Comments *string `pulumi:"comments"`
	// DLP sensor name.
	DlpSensor *string `pulumi:"dlpSensor"`
	// Enable/disable DLP. Valid values: `enable`, `disable`.
	DlpSensorStatus *string `pulumi:"dlpSensorStatus"`
	// Enable/disable DSRI. Valid values: `enable`, `disable`.
	Dsri *string `pulumi:"dsri"`
	// IPv6 address object to limit traffic monitoring to network traffic sent to the specified address or range. The structure of `dstaddr6` block is documented below.
	Dstaddr6s []FirewallInterfacePolicy6Dstaddr6 `pulumi:"dstaddr6s"`
	// true or false, set this parameter to true when using dynamic forEach + toset to configure and sort sub-tables, please do not set this parameter when configuring static sub-tables.
	DynamicSortSubtable *string `pulumi:"dynamicSortSubtable"`
	// Email filter profile.
	EmailfilterProfile *string `pulumi:"emailfilterProfile"`
	// Enable/disable email filter. Valid values: `enable`, `disable`.
	EmailfilterProfileStatus *string `pulumi:"emailfilterProfileStatus"`
	// Monitored interface name from available interfaces.
	Interface string `pulumi:"interface"`
	// IPS sensor name.
	IpsSensor *string `pulumi:"ipsSensor"`
	// Enable/disable IPS. Valid values: `enable`, `disable`.
	IpsSensorStatus *string `pulumi:"ipsSensorStatus"`
	// Label.
	Label *string `pulumi:"label"`
	// Logging type to be used in this policy (Options: all | utm | disable, Default: utm). Valid values: `all`, `utm`, `disable`.
	Logtraffic *string `pulumi:"logtraffic"`
	// Policy ID.
	Policyid *int `pulumi:"policyid"`
	// Enable/disable scanning for connections to Botnet servers. Valid values: `disable`, `block`, `monitor`.
	ScanBotnetConnections *string `pulumi:"scanBotnetConnections"`
	// Service name. The structure of `service6` block is documented below.
	Service6s []FirewallInterfacePolicy6Service6 `pulumi:"service6s"`
	// Antispam profile.
	SpamfilterProfile *string `pulumi:"spamfilterProfile"`
	// Enable/disable antispam. Valid values: `enable`, `disable`.
	SpamfilterProfileStatus *string `pulumi:"spamfilterProfileStatus"`
	// IPv6 address object to limit traffic monitoring to network traffic sent from the specified address or range. The structure of `srcaddr6` block is documented below.
	Srcaddr6s []FirewallInterfacePolicy6Srcaddr6 `pulumi:"srcaddr6s"`
	// Enable/disable this policy. Valid values: `enable`, `disable`.
	Status *string `pulumi:"status"`
	// Specifies the vdom to which the resource will be applied when the FortiGate unit is running in VDOM mode. Only one vdom can be specified. If you want to inherit the vdom configuration of the provider, please do not set this parameter.
	Vdomparam *string `pulumi:"vdomparam"`
	// Web filter profile.
	WebfilterProfile *string `pulumi:"webfilterProfile"`
	// Enable/disable web filtering. Valid values: `enable`, `disable`.
	WebfilterProfileStatus *string `pulumi:"webfilterProfileStatus"`
}

// The set of arguments for constructing a FirewallInterfacePolicy6 resource.
type FirewallInterfacePolicy6Args struct {
	// Policy address type (IPv4 or IPv6). Valid values: `ipv4`, `ipv6`.
	AddressType pulumi.StringPtrInput
	// Application list name.
	ApplicationList pulumi.StringPtrInput
	// Enable/disable application control. Valid values: `enable`, `disable`.
	ApplicationListStatus pulumi.StringPtrInput
	// Antivirus profile.
	AvProfile pulumi.StringPtrInput
	// Enable/disable antivirus. Valid values: `enable`, `disable`.
	AvProfileStatus pulumi.StringPtrInput
	// Comments.
	Comments pulumi.StringPtrInput
	// DLP sensor name.
	DlpSensor pulumi.StringPtrInput
	// Enable/disable DLP. Valid values: `enable`, `disable`.
	DlpSensorStatus pulumi.StringPtrInput
	// Enable/disable DSRI. Valid values: `enable`, `disable`.
	Dsri pulumi.StringPtrInput
	// IPv6 address object to limit traffic monitoring to network traffic sent to the specified address or range. The structure of `dstaddr6` block is documented below.
	Dstaddr6s FirewallInterfacePolicy6Dstaddr6ArrayInput
	// true or false, set this parameter to true when using dynamic forEach + toset to configure and sort sub-tables, please do not set this parameter when configuring static sub-tables.
	DynamicSortSubtable pulumi.StringPtrInput
	// Email filter profile.
	EmailfilterProfile pulumi.StringPtrInput
	// Enable/disable email filter. Valid values: `enable`, `disable`.
	EmailfilterProfileStatus pulumi.StringPtrInput
	// Monitored interface name from available interfaces.
	Interface pulumi.StringInput
	// IPS sensor name.
	IpsSensor pulumi.StringPtrInput
	// Enable/disable IPS. Valid values: `enable`, `disable`.
	IpsSensorStatus pulumi.StringPtrInput
	// Label.
	Label pulumi.StringPtrInput
	// Logging type to be used in this policy (Options: all | utm | disable, Default: utm). Valid values: `all`, `utm`, `disable`.
	Logtraffic pulumi.StringPtrInput
	// Policy ID.
	Policyid pulumi.IntPtrInput
	// Enable/disable scanning for connections to Botnet servers. Valid values: `disable`, `block`, `monitor`.
	ScanBotnetConnections pulumi.StringPtrInput
	// Service name. The structure of `service6` block is documented below.
	Service6s FirewallInterfacePolicy6Service6ArrayInput
	// Antispam profile.
	SpamfilterProfile pulumi.StringPtrInput
	// Enable/disable antispam. Valid values: `enable`, `disable`.
	SpamfilterProfileStatus pulumi.StringPtrInput
	// IPv6 address object to limit traffic monitoring to network traffic sent from the specified address or range. The structure of `srcaddr6` block is documented below.
	Srcaddr6s FirewallInterfacePolicy6Srcaddr6ArrayInput
	// Enable/disable this policy. Valid values: `enable`, `disable`.
	Status pulumi.StringPtrInput
	// Specifies the vdom to which the resource will be applied when the FortiGate unit is running in VDOM mode. Only one vdom can be specified. If you want to inherit the vdom configuration of the provider, please do not set this parameter.
	Vdomparam pulumi.StringPtrInput
	// Web filter profile.
	WebfilterProfile pulumi.StringPtrInput
	// Enable/disable web filtering. Valid values: `enable`, `disable`.
	WebfilterProfileStatus pulumi.StringPtrInput
}

func (FirewallInterfacePolicy6Args) ElementType() reflect.Type {
	return reflect.TypeOf((*firewallInterfacePolicy6Args)(nil)).Elem()
}

type FirewallInterfacePolicy6Input interface {
	pulumi.Input

	ToFirewallInterfacePolicy6Output() FirewallInterfacePolicy6Output
	ToFirewallInterfacePolicy6OutputWithContext(ctx context.Context) FirewallInterfacePolicy6Output
}

func (*FirewallInterfacePolicy6) ElementType() reflect.Type {
	return reflect.TypeOf((**FirewallInterfacePolicy6)(nil)).Elem()
}

func (i *FirewallInterfacePolicy6) ToFirewallInterfacePolicy6Output() FirewallInterfacePolicy6Output {
	return i.ToFirewallInterfacePolicy6OutputWithContext(context.Background())
}

func (i *FirewallInterfacePolicy6) ToFirewallInterfacePolicy6OutputWithContext(ctx context.Context) FirewallInterfacePolicy6Output {
	return pulumi.ToOutputWithContext(ctx, i).(FirewallInterfacePolicy6Output)
}

// FirewallInterfacePolicy6ArrayInput is an input type that accepts FirewallInterfacePolicy6Array and FirewallInterfacePolicy6ArrayOutput values.
// You can construct a concrete instance of `FirewallInterfacePolicy6ArrayInput` via:
//
//          FirewallInterfacePolicy6Array{ FirewallInterfacePolicy6Args{...} }
type FirewallInterfacePolicy6ArrayInput interface {
	pulumi.Input

	ToFirewallInterfacePolicy6ArrayOutput() FirewallInterfacePolicy6ArrayOutput
	ToFirewallInterfacePolicy6ArrayOutputWithContext(context.Context) FirewallInterfacePolicy6ArrayOutput
}

type FirewallInterfacePolicy6Array []FirewallInterfacePolicy6Input

func (FirewallInterfacePolicy6Array) ElementType() reflect.Type {
	return reflect.TypeOf((*[]*FirewallInterfacePolicy6)(nil)).Elem()
}

func (i FirewallInterfacePolicy6Array) ToFirewallInterfacePolicy6ArrayOutput() FirewallInterfacePolicy6ArrayOutput {
	return i.ToFirewallInterfacePolicy6ArrayOutputWithContext(context.Background())
}

func (i FirewallInterfacePolicy6Array) ToFirewallInterfacePolicy6ArrayOutputWithContext(ctx context.Context) FirewallInterfacePolicy6ArrayOutput {
	return pulumi.ToOutputWithContext(ctx, i).(FirewallInterfacePolicy6ArrayOutput)
}

// FirewallInterfacePolicy6MapInput is an input type that accepts FirewallInterfacePolicy6Map and FirewallInterfacePolicy6MapOutput values.
// You can construct a concrete instance of `FirewallInterfacePolicy6MapInput` via:
//
//          FirewallInterfacePolicy6Map{ "key": FirewallInterfacePolicy6Args{...} }
type FirewallInterfacePolicy6MapInput interface {
	pulumi.Input

	ToFirewallInterfacePolicy6MapOutput() FirewallInterfacePolicy6MapOutput
	ToFirewallInterfacePolicy6MapOutputWithContext(context.Context) FirewallInterfacePolicy6MapOutput
}

type FirewallInterfacePolicy6Map map[string]FirewallInterfacePolicy6Input

func (FirewallInterfacePolicy6Map) ElementType() reflect.Type {
	return reflect.TypeOf((*map[string]*FirewallInterfacePolicy6)(nil)).Elem()
}

func (i FirewallInterfacePolicy6Map) ToFirewallInterfacePolicy6MapOutput() FirewallInterfacePolicy6MapOutput {
	return i.ToFirewallInterfacePolicy6MapOutputWithContext(context.Background())
}

func (i FirewallInterfacePolicy6Map) ToFirewallInterfacePolicy6MapOutputWithContext(ctx context.Context) FirewallInterfacePolicy6MapOutput {
	return pulumi.ToOutputWithContext(ctx, i).(FirewallInterfacePolicy6MapOutput)
}

type FirewallInterfacePolicy6Output struct{ *pulumi.OutputState }

func (FirewallInterfacePolicy6Output) ElementType() reflect.Type {
	return reflect.TypeOf((**FirewallInterfacePolicy6)(nil)).Elem()
}

func (o FirewallInterfacePolicy6Output) ToFirewallInterfacePolicy6Output() FirewallInterfacePolicy6Output {
	return o
}

func (o FirewallInterfacePolicy6Output) ToFirewallInterfacePolicy6OutputWithContext(ctx context.Context) FirewallInterfacePolicy6Output {
	return o
}

type FirewallInterfacePolicy6ArrayOutput struct{ *pulumi.OutputState }

func (FirewallInterfacePolicy6ArrayOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*[]*FirewallInterfacePolicy6)(nil)).Elem()
}

func (o FirewallInterfacePolicy6ArrayOutput) ToFirewallInterfacePolicy6ArrayOutput() FirewallInterfacePolicy6ArrayOutput {
	return o
}

func (o FirewallInterfacePolicy6ArrayOutput) ToFirewallInterfacePolicy6ArrayOutputWithContext(ctx context.Context) FirewallInterfacePolicy6ArrayOutput {
	return o
}

func (o FirewallInterfacePolicy6ArrayOutput) Index(i pulumi.IntInput) FirewallInterfacePolicy6Output {
	return pulumi.All(o, i).ApplyT(func(vs []interface{}) *FirewallInterfacePolicy6 {
		return vs[0].([]*FirewallInterfacePolicy6)[vs[1].(int)]
	}).(FirewallInterfacePolicy6Output)
}

type FirewallInterfacePolicy6MapOutput struct{ *pulumi.OutputState }

func (FirewallInterfacePolicy6MapOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*map[string]*FirewallInterfacePolicy6)(nil)).Elem()
}

func (o FirewallInterfacePolicy6MapOutput) ToFirewallInterfacePolicy6MapOutput() FirewallInterfacePolicy6MapOutput {
	return o
}

func (o FirewallInterfacePolicy6MapOutput) ToFirewallInterfacePolicy6MapOutputWithContext(ctx context.Context) FirewallInterfacePolicy6MapOutput {
	return o
}

func (o FirewallInterfacePolicy6MapOutput) MapIndex(k pulumi.StringInput) FirewallInterfacePolicy6Output {
	return pulumi.All(o, k).ApplyT(func(vs []interface{}) *FirewallInterfacePolicy6 {
		return vs[0].(map[string]*FirewallInterfacePolicy6)[vs[1].(string)]
	}).(FirewallInterfacePolicy6Output)
}

func init() {
	pulumi.RegisterInputType(reflect.TypeOf((*FirewallInterfacePolicy6Input)(nil)).Elem(), &FirewallInterfacePolicy6{})
	pulumi.RegisterInputType(reflect.TypeOf((*FirewallInterfacePolicy6ArrayInput)(nil)).Elem(), FirewallInterfacePolicy6Array{})
	pulumi.RegisterInputType(reflect.TypeOf((*FirewallInterfacePolicy6MapInput)(nil)).Elem(), FirewallInterfacePolicy6Map{})
	pulumi.RegisterOutputType(FirewallInterfacePolicy6Output{})
	pulumi.RegisterOutputType(FirewallInterfacePolicy6ArrayOutput{})
	pulumi.RegisterOutputType(FirewallInterfacePolicy6MapOutput{})
}
