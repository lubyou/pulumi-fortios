// Code generated by the Pulumi Terraform Bridge (tfgen) Tool DO NOT EDIT.
// *** WARNING: Do not edit by hand unless you're certain you know what you are doing! ***

package fortios

import (
	"context"
	"reflect"

	"github.com/lubyou/pulumi-fortios/sdk/go/fortios/internal"
	"github.com/pulumi/pulumi/sdk/v3/go/pulumi"
	"github.com/pulumi/pulumi/sdk/v3/go/pulumix"
)

type VpnKmipServer struct {
	pulumi.CustomResourceState

	DynamicSortSubtable   pulumi.StringPtrOutput             `pulumi:"dynamicSortSubtable"`
	GetAllTables          pulumi.StringPtrOutput             `pulumi:"getAllTables"`
	Interface             pulumi.StringOutput                `pulumi:"interface"`
	InterfaceSelectMethod pulumi.StringOutput                `pulumi:"interfaceSelectMethod"`
	Name                  pulumi.StringOutput                `pulumi:"name"`
	Password              pulumi.StringPtrOutput             `pulumi:"password"`
	ServerIdentityCheck   pulumi.StringOutput                `pulumi:"serverIdentityCheck"`
	ServerLists           VpnKmipServerServerListArrayOutput `pulumi:"serverLists"`
	SourceIp              pulumi.StringOutput                `pulumi:"sourceIp"`
	SslMinProtoVersion    pulumi.StringOutput                `pulumi:"sslMinProtoVersion"`
	Username              pulumi.StringOutput                `pulumi:"username"`
	Vdomparam             pulumi.StringPtrOutput             `pulumi:"vdomparam"`
}

// NewVpnKmipServer registers a new resource with the given unique name, arguments, and options.
func NewVpnKmipServer(ctx *pulumi.Context,
	name string, args *VpnKmipServerArgs, opts ...pulumi.ResourceOption) (*VpnKmipServer, error) {
	if args == nil {
		args = &VpnKmipServerArgs{}
	}

	opts = internal.PkgResourceDefaultOpts(opts)
	var resource VpnKmipServer
	err := ctx.RegisterResource("fortios:index/vpnKmipServer:VpnKmipServer", name, args, &resource, opts...)
	if err != nil {
		return nil, err
	}
	return &resource, nil
}

// GetVpnKmipServer gets an existing VpnKmipServer resource's state with the given name, ID, and optional
// state properties that are used to uniquely qualify the lookup (nil if not required).
func GetVpnKmipServer(ctx *pulumi.Context,
	name string, id pulumi.IDInput, state *VpnKmipServerState, opts ...pulumi.ResourceOption) (*VpnKmipServer, error) {
	var resource VpnKmipServer
	err := ctx.ReadResource("fortios:index/vpnKmipServer:VpnKmipServer", name, id, state, &resource, opts...)
	if err != nil {
		return nil, err
	}
	return &resource, nil
}

// Input properties used for looking up and filtering VpnKmipServer resources.
type vpnKmipServerState struct {
	DynamicSortSubtable   *string                   `pulumi:"dynamicSortSubtable"`
	GetAllTables          *string                   `pulumi:"getAllTables"`
	Interface             *string                   `pulumi:"interface"`
	InterfaceSelectMethod *string                   `pulumi:"interfaceSelectMethod"`
	Name                  *string                   `pulumi:"name"`
	Password              *string                   `pulumi:"password"`
	ServerIdentityCheck   *string                   `pulumi:"serverIdentityCheck"`
	ServerLists           []VpnKmipServerServerList `pulumi:"serverLists"`
	SourceIp              *string                   `pulumi:"sourceIp"`
	SslMinProtoVersion    *string                   `pulumi:"sslMinProtoVersion"`
	Username              *string                   `pulumi:"username"`
	Vdomparam             *string                   `pulumi:"vdomparam"`
}

type VpnKmipServerState struct {
	DynamicSortSubtable   pulumi.StringPtrInput
	GetAllTables          pulumi.StringPtrInput
	Interface             pulumi.StringPtrInput
	InterfaceSelectMethod pulumi.StringPtrInput
	Name                  pulumi.StringPtrInput
	Password              pulumi.StringPtrInput
	ServerIdentityCheck   pulumi.StringPtrInput
	ServerLists           VpnKmipServerServerListArrayInput
	SourceIp              pulumi.StringPtrInput
	SslMinProtoVersion    pulumi.StringPtrInput
	Username              pulumi.StringPtrInput
	Vdomparam             pulumi.StringPtrInput
}

func (VpnKmipServerState) ElementType() reflect.Type {
	return reflect.TypeOf((*vpnKmipServerState)(nil)).Elem()
}

type vpnKmipServerArgs struct {
	DynamicSortSubtable   *string                   `pulumi:"dynamicSortSubtable"`
	GetAllTables          *string                   `pulumi:"getAllTables"`
	Interface             *string                   `pulumi:"interface"`
	InterfaceSelectMethod *string                   `pulumi:"interfaceSelectMethod"`
	Name                  *string                   `pulumi:"name"`
	Password              *string                   `pulumi:"password"`
	ServerIdentityCheck   *string                   `pulumi:"serverIdentityCheck"`
	ServerLists           []VpnKmipServerServerList `pulumi:"serverLists"`
	SourceIp              *string                   `pulumi:"sourceIp"`
	SslMinProtoVersion    *string                   `pulumi:"sslMinProtoVersion"`
	Username              *string                   `pulumi:"username"`
	Vdomparam             *string                   `pulumi:"vdomparam"`
}

// The set of arguments for constructing a VpnKmipServer resource.
type VpnKmipServerArgs struct {
	DynamicSortSubtable   pulumi.StringPtrInput
	GetAllTables          pulumi.StringPtrInput
	Interface             pulumi.StringPtrInput
	InterfaceSelectMethod pulumi.StringPtrInput
	Name                  pulumi.StringPtrInput
	Password              pulumi.StringPtrInput
	ServerIdentityCheck   pulumi.StringPtrInput
	ServerLists           VpnKmipServerServerListArrayInput
	SourceIp              pulumi.StringPtrInput
	SslMinProtoVersion    pulumi.StringPtrInput
	Username              pulumi.StringPtrInput
	Vdomparam             pulumi.StringPtrInput
}

func (VpnKmipServerArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*vpnKmipServerArgs)(nil)).Elem()
}

type VpnKmipServerInput interface {
	pulumi.Input

	ToVpnKmipServerOutput() VpnKmipServerOutput
	ToVpnKmipServerOutputWithContext(ctx context.Context) VpnKmipServerOutput
}

func (*VpnKmipServer) ElementType() reflect.Type {
	return reflect.TypeOf((**VpnKmipServer)(nil)).Elem()
}

func (i *VpnKmipServer) ToVpnKmipServerOutput() VpnKmipServerOutput {
	return i.ToVpnKmipServerOutputWithContext(context.Background())
}

func (i *VpnKmipServer) ToVpnKmipServerOutputWithContext(ctx context.Context) VpnKmipServerOutput {
	return pulumi.ToOutputWithContext(ctx, i).(VpnKmipServerOutput)
}

func (i *VpnKmipServer) ToOutput(ctx context.Context) pulumix.Output[*VpnKmipServer] {
	return pulumix.Output[*VpnKmipServer]{
		OutputState: i.ToVpnKmipServerOutputWithContext(ctx).OutputState,
	}
}

// VpnKmipServerArrayInput is an input type that accepts VpnKmipServerArray and VpnKmipServerArrayOutput values.
// You can construct a concrete instance of `VpnKmipServerArrayInput` via:
//
//	VpnKmipServerArray{ VpnKmipServerArgs{...} }
type VpnKmipServerArrayInput interface {
	pulumi.Input

	ToVpnKmipServerArrayOutput() VpnKmipServerArrayOutput
	ToVpnKmipServerArrayOutputWithContext(context.Context) VpnKmipServerArrayOutput
}

type VpnKmipServerArray []VpnKmipServerInput

func (VpnKmipServerArray) ElementType() reflect.Type {
	return reflect.TypeOf((*[]*VpnKmipServer)(nil)).Elem()
}

func (i VpnKmipServerArray) ToVpnKmipServerArrayOutput() VpnKmipServerArrayOutput {
	return i.ToVpnKmipServerArrayOutputWithContext(context.Background())
}

func (i VpnKmipServerArray) ToVpnKmipServerArrayOutputWithContext(ctx context.Context) VpnKmipServerArrayOutput {
	return pulumi.ToOutputWithContext(ctx, i).(VpnKmipServerArrayOutput)
}

func (i VpnKmipServerArray) ToOutput(ctx context.Context) pulumix.Output[[]*VpnKmipServer] {
	return pulumix.Output[[]*VpnKmipServer]{
		OutputState: i.ToVpnKmipServerArrayOutputWithContext(ctx).OutputState,
	}
}

// VpnKmipServerMapInput is an input type that accepts VpnKmipServerMap and VpnKmipServerMapOutput values.
// You can construct a concrete instance of `VpnKmipServerMapInput` via:
//
//	VpnKmipServerMap{ "key": VpnKmipServerArgs{...} }
type VpnKmipServerMapInput interface {
	pulumi.Input

	ToVpnKmipServerMapOutput() VpnKmipServerMapOutput
	ToVpnKmipServerMapOutputWithContext(context.Context) VpnKmipServerMapOutput
}

type VpnKmipServerMap map[string]VpnKmipServerInput

func (VpnKmipServerMap) ElementType() reflect.Type {
	return reflect.TypeOf((*map[string]*VpnKmipServer)(nil)).Elem()
}

func (i VpnKmipServerMap) ToVpnKmipServerMapOutput() VpnKmipServerMapOutput {
	return i.ToVpnKmipServerMapOutputWithContext(context.Background())
}

func (i VpnKmipServerMap) ToVpnKmipServerMapOutputWithContext(ctx context.Context) VpnKmipServerMapOutput {
	return pulumi.ToOutputWithContext(ctx, i).(VpnKmipServerMapOutput)
}

func (i VpnKmipServerMap) ToOutput(ctx context.Context) pulumix.Output[map[string]*VpnKmipServer] {
	return pulumix.Output[map[string]*VpnKmipServer]{
		OutputState: i.ToVpnKmipServerMapOutputWithContext(ctx).OutputState,
	}
}

type VpnKmipServerOutput struct{ *pulumi.OutputState }

func (VpnKmipServerOutput) ElementType() reflect.Type {
	return reflect.TypeOf((**VpnKmipServer)(nil)).Elem()
}

func (o VpnKmipServerOutput) ToVpnKmipServerOutput() VpnKmipServerOutput {
	return o
}

func (o VpnKmipServerOutput) ToVpnKmipServerOutputWithContext(ctx context.Context) VpnKmipServerOutput {
	return o
}

func (o VpnKmipServerOutput) ToOutput(ctx context.Context) pulumix.Output[*VpnKmipServer] {
	return pulumix.Output[*VpnKmipServer]{
		OutputState: o.OutputState,
	}
}

func (o VpnKmipServerOutput) DynamicSortSubtable() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *VpnKmipServer) pulumi.StringPtrOutput { return v.DynamicSortSubtable }).(pulumi.StringPtrOutput)
}

func (o VpnKmipServerOutput) GetAllTables() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *VpnKmipServer) pulumi.StringPtrOutput { return v.GetAllTables }).(pulumi.StringPtrOutput)
}

func (o VpnKmipServerOutput) Interface() pulumi.StringOutput {
	return o.ApplyT(func(v *VpnKmipServer) pulumi.StringOutput { return v.Interface }).(pulumi.StringOutput)
}

func (o VpnKmipServerOutput) InterfaceSelectMethod() pulumi.StringOutput {
	return o.ApplyT(func(v *VpnKmipServer) pulumi.StringOutput { return v.InterfaceSelectMethod }).(pulumi.StringOutput)
}

func (o VpnKmipServerOutput) Name() pulumi.StringOutput {
	return o.ApplyT(func(v *VpnKmipServer) pulumi.StringOutput { return v.Name }).(pulumi.StringOutput)
}

func (o VpnKmipServerOutput) Password() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *VpnKmipServer) pulumi.StringPtrOutput { return v.Password }).(pulumi.StringPtrOutput)
}

func (o VpnKmipServerOutput) ServerIdentityCheck() pulumi.StringOutput {
	return o.ApplyT(func(v *VpnKmipServer) pulumi.StringOutput { return v.ServerIdentityCheck }).(pulumi.StringOutput)
}

func (o VpnKmipServerOutput) ServerLists() VpnKmipServerServerListArrayOutput {
	return o.ApplyT(func(v *VpnKmipServer) VpnKmipServerServerListArrayOutput { return v.ServerLists }).(VpnKmipServerServerListArrayOutput)
}

func (o VpnKmipServerOutput) SourceIp() pulumi.StringOutput {
	return o.ApplyT(func(v *VpnKmipServer) pulumi.StringOutput { return v.SourceIp }).(pulumi.StringOutput)
}

func (o VpnKmipServerOutput) SslMinProtoVersion() pulumi.StringOutput {
	return o.ApplyT(func(v *VpnKmipServer) pulumi.StringOutput { return v.SslMinProtoVersion }).(pulumi.StringOutput)
}

func (o VpnKmipServerOutput) Username() pulumi.StringOutput {
	return o.ApplyT(func(v *VpnKmipServer) pulumi.StringOutput { return v.Username }).(pulumi.StringOutput)
}

func (o VpnKmipServerOutput) Vdomparam() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *VpnKmipServer) pulumi.StringPtrOutput { return v.Vdomparam }).(pulumi.StringPtrOutput)
}

type VpnKmipServerArrayOutput struct{ *pulumi.OutputState }

func (VpnKmipServerArrayOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*[]*VpnKmipServer)(nil)).Elem()
}

func (o VpnKmipServerArrayOutput) ToVpnKmipServerArrayOutput() VpnKmipServerArrayOutput {
	return o
}

func (o VpnKmipServerArrayOutput) ToVpnKmipServerArrayOutputWithContext(ctx context.Context) VpnKmipServerArrayOutput {
	return o
}

func (o VpnKmipServerArrayOutput) ToOutput(ctx context.Context) pulumix.Output[[]*VpnKmipServer] {
	return pulumix.Output[[]*VpnKmipServer]{
		OutputState: o.OutputState,
	}
}

func (o VpnKmipServerArrayOutput) Index(i pulumi.IntInput) VpnKmipServerOutput {
	return pulumi.All(o, i).ApplyT(func(vs []interface{}) *VpnKmipServer {
		return vs[0].([]*VpnKmipServer)[vs[1].(int)]
	}).(VpnKmipServerOutput)
}

type VpnKmipServerMapOutput struct{ *pulumi.OutputState }

func (VpnKmipServerMapOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*map[string]*VpnKmipServer)(nil)).Elem()
}

func (o VpnKmipServerMapOutput) ToVpnKmipServerMapOutput() VpnKmipServerMapOutput {
	return o
}

func (o VpnKmipServerMapOutput) ToVpnKmipServerMapOutputWithContext(ctx context.Context) VpnKmipServerMapOutput {
	return o
}

func (o VpnKmipServerMapOutput) ToOutput(ctx context.Context) pulumix.Output[map[string]*VpnKmipServer] {
	return pulumix.Output[map[string]*VpnKmipServer]{
		OutputState: o.OutputState,
	}
}

func (o VpnKmipServerMapOutput) MapIndex(k pulumi.StringInput) VpnKmipServerOutput {
	return pulumi.All(o, k).ApplyT(func(vs []interface{}) *VpnKmipServer {
		return vs[0].(map[string]*VpnKmipServer)[vs[1].(string)]
	}).(VpnKmipServerOutput)
}

func init() {
	pulumi.RegisterInputType(reflect.TypeOf((*VpnKmipServerInput)(nil)).Elem(), &VpnKmipServer{})
	pulumi.RegisterInputType(reflect.TypeOf((*VpnKmipServerArrayInput)(nil)).Elem(), VpnKmipServerArray{})
	pulumi.RegisterInputType(reflect.TypeOf((*VpnKmipServerMapInput)(nil)).Elem(), VpnKmipServerMap{})
	pulumi.RegisterOutputType(VpnKmipServerOutput{})
	pulumi.RegisterOutputType(VpnKmipServerArrayOutput{})
	pulumi.RegisterOutputType(VpnKmipServerMapOutput{})
}
