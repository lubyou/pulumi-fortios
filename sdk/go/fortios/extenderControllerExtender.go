// *** WARNING: this file was generated by the Pulumi Terraform Bridge (tfgen) Tool. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

package fortios

import (
	"context"
	"reflect"

	"github.com/pkg/errors"
	"github.com/pulumi/pulumi/sdk/v3/go/pulumi"
)

// Extender controller configuration.
//
// > The resource applies to FortiOS Version < 6.4.2. For FortiOS Version >= 6.4.2, see `ExtenderControllerExtender1`.
//
// ## Example Usage
//
// ```go
// package main
//
// import (
// 	"github.com/pulumi/pulumi-fortios/sdk/go/fortios"
// 	"github.com/pulumi/pulumi/sdk/v3/go/pulumi"
// )
//
// func main() {
// 	pulumi.Run(func(ctx *pulumi.Context) error {
// 		_, err := fortios.NewExtenderControllerExtender(ctx, "trname", &fortios.ExtenderControllerExtenderArgs{
// 			Admin:             pulumi.String("disable"),
// 			BillingStartDay:   pulumi.Int(1),
// 			ConnStatus:        pulumi.Int(0),
// 			DialMode:          pulumi.String("always-connect"),
// 			DialStatus:        pulumi.Int(0),
// 			ExtName:           pulumi.String("332"),
// 			Fosid:             pulumi.String("1"),
// 			InitiatedUpdate:   pulumi.String("disable"),
// 			Mode:              pulumi.String("standalone"),
// 			ModemType:         pulumi.String("gsm/lte"),
// 			MultiMode:         pulumi.String("auto"),
// 			PppAuthProtocol:   pulumi.String("auto"),
// 			PppEchoRequest:    pulumi.String("disable"),
// 			QuotaLimitMb:      pulumi.Int(0),
// 			Redial:            pulumi.String("none"),
// 			Roaming:           pulumi.String("disable"),
// 			Role:              pulumi.String("primary"),
// 			Vdom:              pulumi.Int(0),
// 			WimaxAuthProtocol: pulumi.String("tls"),
// 		})
// 		if err != nil {
// 			return err
// 		}
// 		return nil
// 	})
// }
// ```
//
// ## Import
//
// ExtenderController Extender can be imported using any of these accepted formats$ export "FORTIOS_IMPORT_TABLE"="true"
//
// ```sh
//  $ pulumi import fortios:index/extenderControllerExtender:ExtenderControllerExtender labelname {{fosid}}
// ```
//
//  $ unset "FORTIOS_IMPORT_TABLE"
type ExtenderControllerExtender struct {
	pulumi.CustomResourceState

	// AAA shared secret.
	AaaSharedSecret pulumi.StringPtrOutput `pulumi:"aaaSharedSecret"`
	// Access point name(APN).
	AccessPointName pulumi.StringOutput `pulumi:"accessPointName"`
	// FortiExtender Administration (enable or disable). Valid values: `disable`, `discovered`, `enable`.
	Admin pulumi.StringOutput `pulumi:"admin"`
	// Initialization AT commands specific to the MODEM.
	AtDialScript pulumi.StringOutput `pulumi:"atDialScript"`
	// Billing start day.
	BillingStartDay pulumi.IntOutput `pulumi:"billingStartDay"`
	// CDMA AAA SPI.
	CdmaAaaSpi pulumi.StringOutput `pulumi:"cdmaAaaSpi"`
	// CDMA HA SPI.
	CdmaHaSpi pulumi.StringOutput `pulumi:"cdmaHaSpi"`
	// NAI for CDMA MODEMS.
	CdmaNai pulumi.StringOutput `pulumi:"cdmaNai"`
	// Connection status.
	ConnStatus pulumi.IntOutput `pulumi:"connStatus"`
	// Description.
	Description pulumi.StringOutput `pulumi:"description"`
	// Dial mode (dial-on-demand or always-connect). Valid values: `dial-on-demand`, `always-connect`.
	DialMode pulumi.StringOutput `pulumi:"dialMode"`
	// Dial status.
	DialStatus pulumi.IntOutput `pulumi:"dialStatus"`
	// FortiExtender name.
	ExtName pulumi.StringOutput `pulumi:"extName"`
	// FortiExtender serial number.
	Fosid pulumi.StringOutput `pulumi:"fosid"`
	// HA shared secret.
	HaSharedSecret pulumi.StringPtrOutput `pulumi:"haSharedSecret"`
	// FortiExtender interface name.
	Ifname pulumi.StringOutput `pulumi:"ifname"`
	// Allow/disallow network initiated updates to the MODEM. Valid values: `enable`, `disable`.
	InitiatedUpdate pulumi.StringOutput `pulumi:"initiatedUpdate"`
	// FortiExtender mode. Valid values: `standalone`, `redundant`.
	Mode pulumi.StringOutput `pulumi:"mode"`
	// MODEM password.
	ModemPasswd pulumi.StringPtrOutput `pulumi:"modemPasswd"`
	// MODEM type (CDMA, GSM/LTE or WIMAX). Valid values: `cdma`, `gsm/lte`, `wimax`.
	ModemType pulumi.StringOutput `pulumi:"modemType"`
	// MODEM mode of operation(3G,LTE,etc). Valid values: `auto`, `auto-3g`, `force-lte`, `force-3g`, `force-2g`.
	MultiMode pulumi.StringOutput `pulumi:"multiMode"`
	// PPP authentication protocol (PAP,CHAP or auto). Valid values: `auto`, `pap`, `chap`.
	PppAuthProtocol pulumi.StringOutput `pulumi:"pppAuthProtocol"`
	// Enable/disable PPP echo request. Valid values: `enable`, `disable`.
	PppEchoRequest pulumi.StringOutput `pulumi:"pppEchoRequest"`
	// PPP password.
	PppPassword pulumi.StringPtrOutput `pulumi:"pppPassword"`
	// PPP username.
	PppUsername pulumi.StringOutput `pulumi:"pppUsername"`
	// Primary HA.
	PrimaryHa pulumi.StringOutput `pulumi:"primaryHa"`
	// Monthly quota limit (MB).
	QuotaLimitMb pulumi.IntOutput `pulumi:"quotaLimitMb"`
	// Number of redials allowed based on failed attempts. Valid values: `none`, `1`, `2`, `3`, `4`, `5`, `6`, `7`, `8`, `9`, `10`.
	Redial pulumi.StringOutput `pulumi:"redial"`
	// Redundant interface.
	RedundantIntf pulumi.StringOutput `pulumi:"redundantIntf"`
	// Enable/disable MODEM roaming. Valid values: `enable`, `disable`.
	Roaming pulumi.StringOutput `pulumi:"roaming"`
	// FortiExtender work role(Primary, Secondary, None). Valid values: `none`, `primary`, `secondary`.
	Role pulumi.StringOutput `pulumi:"role"`
	// Secondary HA.
	SecondaryHa pulumi.StringOutput `pulumi:"secondaryHa"`
	// SIM PIN.
	SimPin pulumi.StringPtrOutput `pulumi:"simPin"`
	// VDOM
	Vdom pulumi.IntOutput `pulumi:"vdom"`
	// Specifies the vdom to which the resource will be applied when the FortiGate unit is running in VDOM mode. Only one vdom can be specified. If you want to inherit the vdom configuration of the provider, please do not set this parameter.
	Vdomparam pulumi.StringPtrOutput `pulumi:"vdomparam"`
	// WiMax authentication protocol(TLS or TTLS). Valid values: `tls`, `ttls`.
	WimaxAuthProtocol pulumi.StringOutput `pulumi:"wimaxAuthProtocol"`
	// WiMax carrier.
	WimaxCarrier pulumi.StringOutput `pulumi:"wimaxCarrier"`
	// WiMax realm.
	WimaxRealm pulumi.StringOutput `pulumi:"wimaxRealm"`
}

// NewExtenderControllerExtender registers a new resource with the given unique name, arguments, and options.
func NewExtenderControllerExtender(ctx *pulumi.Context,
	name string, args *ExtenderControllerExtenderArgs, opts ...pulumi.ResourceOption) (*ExtenderControllerExtender, error) {
	if args == nil {
		return nil, errors.New("missing one or more required arguments")
	}

	if args.Admin == nil {
		return nil, errors.New("invalid value for required argument 'Admin'")
	}
	if args.Fosid == nil {
		return nil, errors.New("invalid value for required argument 'Fosid'")
	}
	if args.Role == nil {
		return nil, errors.New("invalid value for required argument 'Role'")
	}
	var resource ExtenderControllerExtender
	err := ctx.RegisterResource("fortios:index/extenderControllerExtender:ExtenderControllerExtender", name, args, &resource, opts...)
	if err != nil {
		return nil, err
	}
	return &resource, nil
}

// GetExtenderControllerExtender gets an existing ExtenderControllerExtender resource's state with the given name, ID, and optional
// state properties that are used to uniquely qualify the lookup (nil if not required).
func GetExtenderControllerExtender(ctx *pulumi.Context,
	name string, id pulumi.IDInput, state *ExtenderControllerExtenderState, opts ...pulumi.ResourceOption) (*ExtenderControllerExtender, error) {
	var resource ExtenderControllerExtender
	err := ctx.ReadResource("fortios:index/extenderControllerExtender:ExtenderControllerExtender", name, id, state, &resource, opts...)
	if err != nil {
		return nil, err
	}
	return &resource, nil
}

// Input properties used for looking up and filtering ExtenderControllerExtender resources.
type extenderControllerExtenderState struct {
	// AAA shared secret.
	AaaSharedSecret *string `pulumi:"aaaSharedSecret"`
	// Access point name(APN).
	AccessPointName *string `pulumi:"accessPointName"`
	// FortiExtender Administration (enable or disable). Valid values: `disable`, `discovered`, `enable`.
	Admin *string `pulumi:"admin"`
	// Initialization AT commands specific to the MODEM.
	AtDialScript *string `pulumi:"atDialScript"`
	// Billing start day.
	BillingStartDay *int `pulumi:"billingStartDay"`
	// CDMA AAA SPI.
	CdmaAaaSpi *string `pulumi:"cdmaAaaSpi"`
	// CDMA HA SPI.
	CdmaHaSpi *string `pulumi:"cdmaHaSpi"`
	// NAI for CDMA MODEMS.
	CdmaNai *string `pulumi:"cdmaNai"`
	// Connection status.
	ConnStatus *int `pulumi:"connStatus"`
	// Description.
	Description *string `pulumi:"description"`
	// Dial mode (dial-on-demand or always-connect). Valid values: `dial-on-demand`, `always-connect`.
	DialMode *string `pulumi:"dialMode"`
	// Dial status.
	DialStatus *int `pulumi:"dialStatus"`
	// FortiExtender name.
	ExtName *string `pulumi:"extName"`
	// FortiExtender serial number.
	Fosid *string `pulumi:"fosid"`
	// HA shared secret.
	HaSharedSecret *string `pulumi:"haSharedSecret"`
	// FortiExtender interface name.
	Ifname *string `pulumi:"ifname"`
	// Allow/disallow network initiated updates to the MODEM. Valid values: `enable`, `disable`.
	InitiatedUpdate *string `pulumi:"initiatedUpdate"`
	// FortiExtender mode. Valid values: `standalone`, `redundant`.
	Mode *string `pulumi:"mode"`
	// MODEM password.
	ModemPasswd *string `pulumi:"modemPasswd"`
	// MODEM type (CDMA, GSM/LTE or WIMAX). Valid values: `cdma`, `gsm/lte`, `wimax`.
	ModemType *string `pulumi:"modemType"`
	// MODEM mode of operation(3G,LTE,etc). Valid values: `auto`, `auto-3g`, `force-lte`, `force-3g`, `force-2g`.
	MultiMode *string `pulumi:"multiMode"`
	// PPP authentication protocol (PAP,CHAP or auto). Valid values: `auto`, `pap`, `chap`.
	PppAuthProtocol *string `pulumi:"pppAuthProtocol"`
	// Enable/disable PPP echo request. Valid values: `enable`, `disable`.
	PppEchoRequest *string `pulumi:"pppEchoRequest"`
	// PPP password.
	PppPassword *string `pulumi:"pppPassword"`
	// PPP username.
	PppUsername *string `pulumi:"pppUsername"`
	// Primary HA.
	PrimaryHa *string `pulumi:"primaryHa"`
	// Monthly quota limit (MB).
	QuotaLimitMb *int `pulumi:"quotaLimitMb"`
	// Number of redials allowed based on failed attempts. Valid values: `none`, `1`, `2`, `3`, `4`, `5`, `6`, `7`, `8`, `9`, `10`.
	Redial *string `pulumi:"redial"`
	// Redundant interface.
	RedundantIntf *string `pulumi:"redundantIntf"`
	// Enable/disable MODEM roaming. Valid values: `enable`, `disable`.
	Roaming *string `pulumi:"roaming"`
	// FortiExtender work role(Primary, Secondary, None). Valid values: `none`, `primary`, `secondary`.
	Role *string `pulumi:"role"`
	// Secondary HA.
	SecondaryHa *string `pulumi:"secondaryHa"`
	// SIM PIN.
	SimPin *string `pulumi:"simPin"`
	// VDOM
	Vdom *int `pulumi:"vdom"`
	// Specifies the vdom to which the resource will be applied when the FortiGate unit is running in VDOM mode. Only one vdom can be specified. If you want to inherit the vdom configuration of the provider, please do not set this parameter.
	Vdomparam *string `pulumi:"vdomparam"`
	// WiMax authentication protocol(TLS or TTLS). Valid values: `tls`, `ttls`.
	WimaxAuthProtocol *string `pulumi:"wimaxAuthProtocol"`
	// WiMax carrier.
	WimaxCarrier *string `pulumi:"wimaxCarrier"`
	// WiMax realm.
	WimaxRealm *string `pulumi:"wimaxRealm"`
}

type ExtenderControllerExtenderState struct {
	// AAA shared secret.
	AaaSharedSecret pulumi.StringPtrInput
	// Access point name(APN).
	AccessPointName pulumi.StringPtrInput
	// FortiExtender Administration (enable or disable). Valid values: `disable`, `discovered`, `enable`.
	Admin pulumi.StringPtrInput
	// Initialization AT commands specific to the MODEM.
	AtDialScript pulumi.StringPtrInput
	// Billing start day.
	BillingStartDay pulumi.IntPtrInput
	// CDMA AAA SPI.
	CdmaAaaSpi pulumi.StringPtrInput
	// CDMA HA SPI.
	CdmaHaSpi pulumi.StringPtrInput
	// NAI for CDMA MODEMS.
	CdmaNai pulumi.StringPtrInput
	// Connection status.
	ConnStatus pulumi.IntPtrInput
	// Description.
	Description pulumi.StringPtrInput
	// Dial mode (dial-on-demand or always-connect). Valid values: `dial-on-demand`, `always-connect`.
	DialMode pulumi.StringPtrInput
	// Dial status.
	DialStatus pulumi.IntPtrInput
	// FortiExtender name.
	ExtName pulumi.StringPtrInput
	// FortiExtender serial number.
	Fosid pulumi.StringPtrInput
	// HA shared secret.
	HaSharedSecret pulumi.StringPtrInput
	// FortiExtender interface name.
	Ifname pulumi.StringPtrInput
	// Allow/disallow network initiated updates to the MODEM. Valid values: `enable`, `disable`.
	InitiatedUpdate pulumi.StringPtrInput
	// FortiExtender mode. Valid values: `standalone`, `redundant`.
	Mode pulumi.StringPtrInput
	// MODEM password.
	ModemPasswd pulumi.StringPtrInput
	// MODEM type (CDMA, GSM/LTE or WIMAX). Valid values: `cdma`, `gsm/lte`, `wimax`.
	ModemType pulumi.StringPtrInput
	// MODEM mode of operation(3G,LTE,etc). Valid values: `auto`, `auto-3g`, `force-lte`, `force-3g`, `force-2g`.
	MultiMode pulumi.StringPtrInput
	// PPP authentication protocol (PAP,CHAP or auto). Valid values: `auto`, `pap`, `chap`.
	PppAuthProtocol pulumi.StringPtrInput
	// Enable/disable PPP echo request. Valid values: `enable`, `disable`.
	PppEchoRequest pulumi.StringPtrInput
	// PPP password.
	PppPassword pulumi.StringPtrInput
	// PPP username.
	PppUsername pulumi.StringPtrInput
	// Primary HA.
	PrimaryHa pulumi.StringPtrInput
	// Monthly quota limit (MB).
	QuotaLimitMb pulumi.IntPtrInput
	// Number of redials allowed based on failed attempts. Valid values: `none`, `1`, `2`, `3`, `4`, `5`, `6`, `7`, `8`, `9`, `10`.
	Redial pulumi.StringPtrInput
	// Redundant interface.
	RedundantIntf pulumi.StringPtrInput
	// Enable/disable MODEM roaming. Valid values: `enable`, `disable`.
	Roaming pulumi.StringPtrInput
	// FortiExtender work role(Primary, Secondary, None). Valid values: `none`, `primary`, `secondary`.
	Role pulumi.StringPtrInput
	// Secondary HA.
	SecondaryHa pulumi.StringPtrInput
	// SIM PIN.
	SimPin pulumi.StringPtrInput
	// VDOM
	Vdom pulumi.IntPtrInput
	// Specifies the vdom to which the resource will be applied when the FortiGate unit is running in VDOM mode. Only one vdom can be specified. If you want to inherit the vdom configuration of the provider, please do not set this parameter.
	Vdomparam pulumi.StringPtrInput
	// WiMax authentication protocol(TLS or TTLS). Valid values: `tls`, `ttls`.
	WimaxAuthProtocol pulumi.StringPtrInput
	// WiMax carrier.
	WimaxCarrier pulumi.StringPtrInput
	// WiMax realm.
	WimaxRealm pulumi.StringPtrInput
}

func (ExtenderControllerExtenderState) ElementType() reflect.Type {
	return reflect.TypeOf((*extenderControllerExtenderState)(nil)).Elem()
}

type extenderControllerExtenderArgs struct {
	// AAA shared secret.
	AaaSharedSecret *string `pulumi:"aaaSharedSecret"`
	// Access point name(APN).
	AccessPointName *string `pulumi:"accessPointName"`
	// FortiExtender Administration (enable or disable). Valid values: `disable`, `discovered`, `enable`.
	Admin string `pulumi:"admin"`
	// Initialization AT commands specific to the MODEM.
	AtDialScript *string `pulumi:"atDialScript"`
	// Billing start day.
	BillingStartDay *int `pulumi:"billingStartDay"`
	// CDMA AAA SPI.
	CdmaAaaSpi *string `pulumi:"cdmaAaaSpi"`
	// CDMA HA SPI.
	CdmaHaSpi *string `pulumi:"cdmaHaSpi"`
	// NAI for CDMA MODEMS.
	CdmaNai *string `pulumi:"cdmaNai"`
	// Connection status.
	ConnStatus *int `pulumi:"connStatus"`
	// Description.
	Description *string `pulumi:"description"`
	// Dial mode (dial-on-demand or always-connect). Valid values: `dial-on-demand`, `always-connect`.
	DialMode *string `pulumi:"dialMode"`
	// Dial status.
	DialStatus *int `pulumi:"dialStatus"`
	// FortiExtender name.
	ExtName *string `pulumi:"extName"`
	// FortiExtender serial number.
	Fosid string `pulumi:"fosid"`
	// HA shared secret.
	HaSharedSecret *string `pulumi:"haSharedSecret"`
	// FortiExtender interface name.
	Ifname *string `pulumi:"ifname"`
	// Allow/disallow network initiated updates to the MODEM. Valid values: `enable`, `disable`.
	InitiatedUpdate *string `pulumi:"initiatedUpdate"`
	// FortiExtender mode. Valid values: `standalone`, `redundant`.
	Mode *string `pulumi:"mode"`
	// MODEM password.
	ModemPasswd *string `pulumi:"modemPasswd"`
	// MODEM type (CDMA, GSM/LTE or WIMAX). Valid values: `cdma`, `gsm/lte`, `wimax`.
	ModemType *string `pulumi:"modemType"`
	// MODEM mode of operation(3G,LTE,etc). Valid values: `auto`, `auto-3g`, `force-lte`, `force-3g`, `force-2g`.
	MultiMode *string `pulumi:"multiMode"`
	// PPP authentication protocol (PAP,CHAP or auto). Valid values: `auto`, `pap`, `chap`.
	PppAuthProtocol *string `pulumi:"pppAuthProtocol"`
	// Enable/disable PPP echo request. Valid values: `enable`, `disable`.
	PppEchoRequest *string `pulumi:"pppEchoRequest"`
	// PPP password.
	PppPassword *string `pulumi:"pppPassword"`
	// PPP username.
	PppUsername *string `pulumi:"pppUsername"`
	// Primary HA.
	PrimaryHa *string `pulumi:"primaryHa"`
	// Monthly quota limit (MB).
	QuotaLimitMb *int `pulumi:"quotaLimitMb"`
	// Number of redials allowed based on failed attempts. Valid values: `none`, `1`, `2`, `3`, `4`, `5`, `6`, `7`, `8`, `9`, `10`.
	Redial *string `pulumi:"redial"`
	// Redundant interface.
	RedundantIntf *string `pulumi:"redundantIntf"`
	// Enable/disable MODEM roaming. Valid values: `enable`, `disable`.
	Roaming *string `pulumi:"roaming"`
	// FortiExtender work role(Primary, Secondary, None). Valid values: `none`, `primary`, `secondary`.
	Role string `pulumi:"role"`
	// Secondary HA.
	SecondaryHa *string `pulumi:"secondaryHa"`
	// SIM PIN.
	SimPin *string `pulumi:"simPin"`
	// VDOM
	Vdom *int `pulumi:"vdom"`
	// Specifies the vdom to which the resource will be applied when the FortiGate unit is running in VDOM mode. Only one vdom can be specified. If you want to inherit the vdom configuration of the provider, please do not set this parameter.
	Vdomparam *string `pulumi:"vdomparam"`
	// WiMax authentication protocol(TLS or TTLS). Valid values: `tls`, `ttls`.
	WimaxAuthProtocol *string `pulumi:"wimaxAuthProtocol"`
	// WiMax carrier.
	WimaxCarrier *string `pulumi:"wimaxCarrier"`
	// WiMax realm.
	WimaxRealm *string `pulumi:"wimaxRealm"`
}

// The set of arguments for constructing a ExtenderControllerExtender resource.
type ExtenderControllerExtenderArgs struct {
	// AAA shared secret.
	AaaSharedSecret pulumi.StringPtrInput
	// Access point name(APN).
	AccessPointName pulumi.StringPtrInput
	// FortiExtender Administration (enable or disable). Valid values: `disable`, `discovered`, `enable`.
	Admin pulumi.StringInput
	// Initialization AT commands specific to the MODEM.
	AtDialScript pulumi.StringPtrInput
	// Billing start day.
	BillingStartDay pulumi.IntPtrInput
	// CDMA AAA SPI.
	CdmaAaaSpi pulumi.StringPtrInput
	// CDMA HA SPI.
	CdmaHaSpi pulumi.StringPtrInput
	// NAI for CDMA MODEMS.
	CdmaNai pulumi.StringPtrInput
	// Connection status.
	ConnStatus pulumi.IntPtrInput
	// Description.
	Description pulumi.StringPtrInput
	// Dial mode (dial-on-demand or always-connect). Valid values: `dial-on-demand`, `always-connect`.
	DialMode pulumi.StringPtrInput
	// Dial status.
	DialStatus pulumi.IntPtrInput
	// FortiExtender name.
	ExtName pulumi.StringPtrInput
	// FortiExtender serial number.
	Fosid pulumi.StringInput
	// HA shared secret.
	HaSharedSecret pulumi.StringPtrInput
	// FortiExtender interface name.
	Ifname pulumi.StringPtrInput
	// Allow/disallow network initiated updates to the MODEM. Valid values: `enable`, `disable`.
	InitiatedUpdate pulumi.StringPtrInput
	// FortiExtender mode. Valid values: `standalone`, `redundant`.
	Mode pulumi.StringPtrInput
	// MODEM password.
	ModemPasswd pulumi.StringPtrInput
	// MODEM type (CDMA, GSM/LTE or WIMAX). Valid values: `cdma`, `gsm/lte`, `wimax`.
	ModemType pulumi.StringPtrInput
	// MODEM mode of operation(3G,LTE,etc). Valid values: `auto`, `auto-3g`, `force-lte`, `force-3g`, `force-2g`.
	MultiMode pulumi.StringPtrInput
	// PPP authentication protocol (PAP,CHAP or auto). Valid values: `auto`, `pap`, `chap`.
	PppAuthProtocol pulumi.StringPtrInput
	// Enable/disable PPP echo request. Valid values: `enable`, `disable`.
	PppEchoRequest pulumi.StringPtrInput
	// PPP password.
	PppPassword pulumi.StringPtrInput
	// PPP username.
	PppUsername pulumi.StringPtrInput
	// Primary HA.
	PrimaryHa pulumi.StringPtrInput
	// Monthly quota limit (MB).
	QuotaLimitMb pulumi.IntPtrInput
	// Number of redials allowed based on failed attempts. Valid values: `none`, `1`, `2`, `3`, `4`, `5`, `6`, `7`, `8`, `9`, `10`.
	Redial pulumi.StringPtrInput
	// Redundant interface.
	RedundantIntf pulumi.StringPtrInput
	// Enable/disable MODEM roaming. Valid values: `enable`, `disable`.
	Roaming pulumi.StringPtrInput
	// FortiExtender work role(Primary, Secondary, None). Valid values: `none`, `primary`, `secondary`.
	Role pulumi.StringInput
	// Secondary HA.
	SecondaryHa pulumi.StringPtrInput
	// SIM PIN.
	SimPin pulumi.StringPtrInput
	// VDOM
	Vdom pulumi.IntPtrInput
	// Specifies the vdom to which the resource will be applied when the FortiGate unit is running in VDOM mode. Only one vdom can be specified. If you want to inherit the vdom configuration of the provider, please do not set this parameter.
	Vdomparam pulumi.StringPtrInput
	// WiMax authentication protocol(TLS or TTLS). Valid values: `tls`, `ttls`.
	WimaxAuthProtocol pulumi.StringPtrInput
	// WiMax carrier.
	WimaxCarrier pulumi.StringPtrInput
	// WiMax realm.
	WimaxRealm pulumi.StringPtrInput
}

func (ExtenderControllerExtenderArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*extenderControllerExtenderArgs)(nil)).Elem()
}

type ExtenderControllerExtenderInput interface {
	pulumi.Input

	ToExtenderControllerExtenderOutput() ExtenderControllerExtenderOutput
	ToExtenderControllerExtenderOutputWithContext(ctx context.Context) ExtenderControllerExtenderOutput
}

func (*ExtenderControllerExtender) ElementType() reflect.Type {
	return reflect.TypeOf((*ExtenderControllerExtender)(nil))
}

func (i *ExtenderControllerExtender) ToExtenderControllerExtenderOutput() ExtenderControllerExtenderOutput {
	return i.ToExtenderControllerExtenderOutputWithContext(context.Background())
}

func (i *ExtenderControllerExtender) ToExtenderControllerExtenderOutputWithContext(ctx context.Context) ExtenderControllerExtenderOutput {
	return pulumi.ToOutputWithContext(ctx, i).(ExtenderControllerExtenderOutput)
}

func (i *ExtenderControllerExtender) ToExtenderControllerExtenderPtrOutput() ExtenderControllerExtenderPtrOutput {
	return i.ToExtenderControllerExtenderPtrOutputWithContext(context.Background())
}

func (i *ExtenderControllerExtender) ToExtenderControllerExtenderPtrOutputWithContext(ctx context.Context) ExtenderControllerExtenderPtrOutput {
	return pulumi.ToOutputWithContext(ctx, i).(ExtenderControllerExtenderPtrOutput)
}

type ExtenderControllerExtenderPtrInput interface {
	pulumi.Input

	ToExtenderControllerExtenderPtrOutput() ExtenderControllerExtenderPtrOutput
	ToExtenderControllerExtenderPtrOutputWithContext(ctx context.Context) ExtenderControllerExtenderPtrOutput
}

type extenderControllerExtenderPtrType ExtenderControllerExtenderArgs

func (*extenderControllerExtenderPtrType) ElementType() reflect.Type {
	return reflect.TypeOf((**ExtenderControllerExtender)(nil))
}

func (i *extenderControllerExtenderPtrType) ToExtenderControllerExtenderPtrOutput() ExtenderControllerExtenderPtrOutput {
	return i.ToExtenderControllerExtenderPtrOutputWithContext(context.Background())
}

func (i *extenderControllerExtenderPtrType) ToExtenderControllerExtenderPtrOutputWithContext(ctx context.Context) ExtenderControllerExtenderPtrOutput {
	return pulumi.ToOutputWithContext(ctx, i).(ExtenderControllerExtenderPtrOutput)
}

// ExtenderControllerExtenderArrayInput is an input type that accepts ExtenderControllerExtenderArray and ExtenderControllerExtenderArrayOutput values.
// You can construct a concrete instance of `ExtenderControllerExtenderArrayInput` via:
//
//          ExtenderControllerExtenderArray{ ExtenderControllerExtenderArgs{...} }
type ExtenderControllerExtenderArrayInput interface {
	pulumi.Input

	ToExtenderControllerExtenderArrayOutput() ExtenderControllerExtenderArrayOutput
	ToExtenderControllerExtenderArrayOutputWithContext(context.Context) ExtenderControllerExtenderArrayOutput
}

type ExtenderControllerExtenderArray []ExtenderControllerExtenderInput

func (ExtenderControllerExtenderArray) ElementType() reflect.Type {
	return reflect.TypeOf(([]*ExtenderControllerExtender)(nil))
}

func (i ExtenderControllerExtenderArray) ToExtenderControllerExtenderArrayOutput() ExtenderControllerExtenderArrayOutput {
	return i.ToExtenderControllerExtenderArrayOutputWithContext(context.Background())
}

func (i ExtenderControllerExtenderArray) ToExtenderControllerExtenderArrayOutputWithContext(ctx context.Context) ExtenderControllerExtenderArrayOutput {
	return pulumi.ToOutputWithContext(ctx, i).(ExtenderControllerExtenderArrayOutput)
}

// ExtenderControllerExtenderMapInput is an input type that accepts ExtenderControllerExtenderMap and ExtenderControllerExtenderMapOutput values.
// You can construct a concrete instance of `ExtenderControllerExtenderMapInput` via:
//
//          ExtenderControllerExtenderMap{ "key": ExtenderControllerExtenderArgs{...} }
type ExtenderControllerExtenderMapInput interface {
	pulumi.Input

	ToExtenderControllerExtenderMapOutput() ExtenderControllerExtenderMapOutput
	ToExtenderControllerExtenderMapOutputWithContext(context.Context) ExtenderControllerExtenderMapOutput
}

type ExtenderControllerExtenderMap map[string]ExtenderControllerExtenderInput

func (ExtenderControllerExtenderMap) ElementType() reflect.Type {
	return reflect.TypeOf((map[string]*ExtenderControllerExtender)(nil))
}

func (i ExtenderControllerExtenderMap) ToExtenderControllerExtenderMapOutput() ExtenderControllerExtenderMapOutput {
	return i.ToExtenderControllerExtenderMapOutputWithContext(context.Background())
}

func (i ExtenderControllerExtenderMap) ToExtenderControllerExtenderMapOutputWithContext(ctx context.Context) ExtenderControllerExtenderMapOutput {
	return pulumi.ToOutputWithContext(ctx, i).(ExtenderControllerExtenderMapOutput)
}

type ExtenderControllerExtenderOutput struct {
	*pulumi.OutputState
}

func (ExtenderControllerExtenderOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*ExtenderControllerExtender)(nil))
}

func (o ExtenderControllerExtenderOutput) ToExtenderControllerExtenderOutput() ExtenderControllerExtenderOutput {
	return o
}

func (o ExtenderControllerExtenderOutput) ToExtenderControllerExtenderOutputWithContext(ctx context.Context) ExtenderControllerExtenderOutput {
	return o
}

func (o ExtenderControllerExtenderOutput) ToExtenderControllerExtenderPtrOutput() ExtenderControllerExtenderPtrOutput {
	return o.ToExtenderControllerExtenderPtrOutputWithContext(context.Background())
}

func (o ExtenderControllerExtenderOutput) ToExtenderControllerExtenderPtrOutputWithContext(ctx context.Context) ExtenderControllerExtenderPtrOutput {
	return o.ApplyT(func(v ExtenderControllerExtender) *ExtenderControllerExtender {
		return &v
	}).(ExtenderControllerExtenderPtrOutput)
}

type ExtenderControllerExtenderPtrOutput struct {
	*pulumi.OutputState
}

func (ExtenderControllerExtenderPtrOutput) ElementType() reflect.Type {
	return reflect.TypeOf((**ExtenderControllerExtender)(nil))
}

func (o ExtenderControllerExtenderPtrOutput) ToExtenderControllerExtenderPtrOutput() ExtenderControllerExtenderPtrOutput {
	return o
}

func (o ExtenderControllerExtenderPtrOutput) ToExtenderControllerExtenderPtrOutputWithContext(ctx context.Context) ExtenderControllerExtenderPtrOutput {
	return o
}

type ExtenderControllerExtenderArrayOutput struct{ *pulumi.OutputState }

func (ExtenderControllerExtenderArrayOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*[]ExtenderControllerExtender)(nil))
}

func (o ExtenderControllerExtenderArrayOutput) ToExtenderControllerExtenderArrayOutput() ExtenderControllerExtenderArrayOutput {
	return o
}

func (o ExtenderControllerExtenderArrayOutput) ToExtenderControllerExtenderArrayOutputWithContext(ctx context.Context) ExtenderControllerExtenderArrayOutput {
	return o
}

func (o ExtenderControllerExtenderArrayOutput) Index(i pulumi.IntInput) ExtenderControllerExtenderOutput {
	return pulumi.All(o, i).ApplyT(func(vs []interface{}) ExtenderControllerExtender {
		return vs[0].([]ExtenderControllerExtender)[vs[1].(int)]
	}).(ExtenderControllerExtenderOutput)
}

type ExtenderControllerExtenderMapOutput struct{ *pulumi.OutputState }

func (ExtenderControllerExtenderMapOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*map[string]ExtenderControllerExtender)(nil))
}

func (o ExtenderControllerExtenderMapOutput) ToExtenderControllerExtenderMapOutput() ExtenderControllerExtenderMapOutput {
	return o
}

func (o ExtenderControllerExtenderMapOutput) ToExtenderControllerExtenderMapOutputWithContext(ctx context.Context) ExtenderControllerExtenderMapOutput {
	return o
}

func (o ExtenderControllerExtenderMapOutput) MapIndex(k pulumi.StringInput) ExtenderControllerExtenderOutput {
	return pulumi.All(o, k).ApplyT(func(vs []interface{}) ExtenderControllerExtender {
		return vs[0].(map[string]ExtenderControllerExtender)[vs[1].(string)]
	}).(ExtenderControllerExtenderOutput)
}

func init() {
	pulumi.RegisterOutputType(ExtenderControllerExtenderOutput{})
	pulumi.RegisterOutputType(ExtenderControllerExtenderPtrOutput{})
	pulumi.RegisterOutputType(ExtenderControllerExtenderArrayOutput{})
	pulumi.RegisterOutputType(ExtenderControllerExtenderMapOutput{})
}
