// *** WARNING: this file was generated by the Pulumi Terraform Bridge (tfgen) Tool. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

package fortios

import (
	"context"
	"reflect"

	"github.com/pulumi/pulumi/sdk/v3/go/pulumi"
)

// Coordinate federated upgrades within the Security Fabric. Applies to FortiOS Version `>= 7.0.0`.
//
// ## Import
//
// System FederatedUpgrade can be imported using any of these accepted formats$ export "FORTIOS_IMPORT_TABLE"="true"
//
// ```sh
//  $ pulumi import fortios:index/systemFederatedUpgrade:SystemFederatedUpgrade labelname SystemFederatedUpgrade
// ```
//
//  $ unset "FORTIOS_IMPORT_TABLE"
type SystemFederatedUpgrade struct {
	pulumi.CustomResourceState

	// true or false, set this parameter to true when using dynamic forEach + toset to configure and sort sub-tables, please do not set this parameter when configuring static sub-tables.
	DynamicSortSubtable pulumi.StringPtrOutput `pulumi:"dynamicSortSubtable"`
	// Nodes which will be included in the upgrade. The structure of `nodeList` block is documented below.
	NodeLists SystemFederatedUpgradeNodeListArrayOutput `pulumi:"nodeLists"`
	// Current status of the upgrade. Valid values: `disabled`, `initialized`, `downloading`, `download-failed`, `ready`, `cancelled`, `confirmed`, `done`, `failed`.
	Status pulumi.StringOutput `pulumi:"status"`
	// Specifies the vdom to which the resource will be applied when the FortiGate unit is running in VDOM mode. Only one vdom can be specified. If you want to inherit the vdom configuration of the provider, please do not set this parameter.
	Vdomparam pulumi.StringPtrOutput `pulumi:"vdomparam"`
}

// NewSystemFederatedUpgrade registers a new resource with the given unique name, arguments, and options.
func NewSystemFederatedUpgrade(ctx *pulumi.Context,
	name string, args *SystemFederatedUpgradeArgs, opts ...pulumi.ResourceOption) (*SystemFederatedUpgrade, error) {
	if args == nil {
		args = &SystemFederatedUpgradeArgs{}
	}

	var resource SystemFederatedUpgrade
	err := ctx.RegisterResource("fortios:index/systemFederatedUpgrade:SystemFederatedUpgrade", name, args, &resource, opts...)
	if err != nil {
		return nil, err
	}
	return &resource, nil
}

// GetSystemFederatedUpgrade gets an existing SystemFederatedUpgrade resource's state with the given name, ID, and optional
// state properties that are used to uniquely qualify the lookup (nil if not required).
func GetSystemFederatedUpgrade(ctx *pulumi.Context,
	name string, id pulumi.IDInput, state *SystemFederatedUpgradeState, opts ...pulumi.ResourceOption) (*SystemFederatedUpgrade, error) {
	var resource SystemFederatedUpgrade
	err := ctx.ReadResource("fortios:index/systemFederatedUpgrade:SystemFederatedUpgrade", name, id, state, &resource, opts...)
	if err != nil {
		return nil, err
	}
	return &resource, nil
}

// Input properties used for looking up and filtering SystemFederatedUpgrade resources.
type systemFederatedUpgradeState struct {
	// true or false, set this parameter to true when using dynamic forEach + toset to configure and sort sub-tables, please do not set this parameter when configuring static sub-tables.
	DynamicSortSubtable *string `pulumi:"dynamicSortSubtable"`
	// Nodes which will be included in the upgrade. The structure of `nodeList` block is documented below.
	NodeLists []SystemFederatedUpgradeNodeList `pulumi:"nodeLists"`
	// Current status of the upgrade. Valid values: `disabled`, `initialized`, `downloading`, `download-failed`, `ready`, `cancelled`, `confirmed`, `done`, `failed`.
	Status *string `pulumi:"status"`
	// Specifies the vdom to which the resource will be applied when the FortiGate unit is running in VDOM mode. Only one vdom can be specified. If you want to inherit the vdom configuration of the provider, please do not set this parameter.
	Vdomparam *string `pulumi:"vdomparam"`
}

type SystemFederatedUpgradeState struct {
	// true or false, set this parameter to true when using dynamic forEach + toset to configure and sort sub-tables, please do not set this parameter when configuring static sub-tables.
	DynamicSortSubtable pulumi.StringPtrInput
	// Nodes which will be included in the upgrade. The structure of `nodeList` block is documented below.
	NodeLists SystemFederatedUpgradeNodeListArrayInput
	// Current status of the upgrade. Valid values: `disabled`, `initialized`, `downloading`, `download-failed`, `ready`, `cancelled`, `confirmed`, `done`, `failed`.
	Status pulumi.StringPtrInput
	// Specifies the vdom to which the resource will be applied when the FortiGate unit is running in VDOM mode. Only one vdom can be specified. If you want to inherit the vdom configuration of the provider, please do not set this parameter.
	Vdomparam pulumi.StringPtrInput
}

func (SystemFederatedUpgradeState) ElementType() reflect.Type {
	return reflect.TypeOf((*systemFederatedUpgradeState)(nil)).Elem()
}

type systemFederatedUpgradeArgs struct {
	// true or false, set this parameter to true when using dynamic forEach + toset to configure and sort sub-tables, please do not set this parameter when configuring static sub-tables.
	DynamicSortSubtable *string `pulumi:"dynamicSortSubtable"`
	// Nodes which will be included in the upgrade. The structure of `nodeList` block is documented below.
	NodeLists []SystemFederatedUpgradeNodeList `pulumi:"nodeLists"`
	// Current status of the upgrade. Valid values: `disabled`, `initialized`, `downloading`, `download-failed`, `ready`, `cancelled`, `confirmed`, `done`, `failed`.
	Status *string `pulumi:"status"`
	// Specifies the vdom to which the resource will be applied when the FortiGate unit is running in VDOM mode. Only one vdom can be specified. If you want to inherit the vdom configuration of the provider, please do not set this parameter.
	Vdomparam *string `pulumi:"vdomparam"`
}

// The set of arguments for constructing a SystemFederatedUpgrade resource.
type SystemFederatedUpgradeArgs struct {
	// true or false, set this parameter to true when using dynamic forEach + toset to configure and sort sub-tables, please do not set this parameter when configuring static sub-tables.
	DynamicSortSubtable pulumi.StringPtrInput
	// Nodes which will be included in the upgrade. The structure of `nodeList` block is documented below.
	NodeLists SystemFederatedUpgradeNodeListArrayInput
	// Current status of the upgrade. Valid values: `disabled`, `initialized`, `downloading`, `download-failed`, `ready`, `cancelled`, `confirmed`, `done`, `failed`.
	Status pulumi.StringPtrInput
	// Specifies the vdom to which the resource will be applied when the FortiGate unit is running in VDOM mode. Only one vdom can be specified. If you want to inherit the vdom configuration of the provider, please do not set this parameter.
	Vdomparam pulumi.StringPtrInput
}

func (SystemFederatedUpgradeArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*systemFederatedUpgradeArgs)(nil)).Elem()
}

type SystemFederatedUpgradeInput interface {
	pulumi.Input

	ToSystemFederatedUpgradeOutput() SystemFederatedUpgradeOutput
	ToSystemFederatedUpgradeOutputWithContext(ctx context.Context) SystemFederatedUpgradeOutput
}

func (*SystemFederatedUpgrade) ElementType() reflect.Type {
	return reflect.TypeOf((*SystemFederatedUpgrade)(nil))
}

func (i *SystemFederatedUpgrade) ToSystemFederatedUpgradeOutput() SystemFederatedUpgradeOutput {
	return i.ToSystemFederatedUpgradeOutputWithContext(context.Background())
}

func (i *SystemFederatedUpgrade) ToSystemFederatedUpgradeOutputWithContext(ctx context.Context) SystemFederatedUpgradeOutput {
	return pulumi.ToOutputWithContext(ctx, i).(SystemFederatedUpgradeOutput)
}

func (i *SystemFederatedUpgrade) ToSystemFederatedUpgradePtrOutput() SystemFederatedUpgradePtrOutput {
	return i.ToSystemFederatedUpgradePtrOutputWithContext(context.Background())
}

func (i *SystemFederatedUpgrade) ToSystemFederatedUpgradePtrOutputWithContext(ctx context.Context) SystemFederatedUpgradePtrOutput {
	return pulumi.ToOutputWithContext(ctx, i).(SystemFederatedUpgradePtrOutput)
}

type SystemFederatedUpgradePtrInput interface {
	pulumi.Input

	ToSystemFederatedUpgradePtrOutput() SystemFederatedUpgradePtrOutput
	ToSystemFederatedUpgradePtrOutputWithContext(ctx context.Context) SystemFederatedUpgradePtrOutput
}

type systemFederatedUpgradePtrType SystemFederatedUpgradeArgs

func (*systemFederatedUpgradePtrType) ElementType() reflect.Type {
	return reflect.TypeOf((**SystemFederatedUpgrade)(nil))
}

func (i *systemFederatedUpgradePtrType) ToSystemFederatedUpgradePtrOutput() SystemFederatedUpgradePtrOutput {
	return i.ToSystemFederatedUpgradePtrOutputWithContext(context.Background())
}

func (i *systemFederatedUpgradePtrType) ToSystemFederatedUpgradePtrOutputWithContext(ctx context.Context) SystemFederatedUpgradePtrOutput {
	return pulumi.ToOutputWithContext(ctx, i).(SystemFederatedUpgradePtrOutput)
}

// SystemFederatedUpgradeArrayInput is an input type that accepts SystemFederatedUpgradeArray and SystemFederatedUpgradeArrayOutput values.
// You can construct a concrete instance of `SystemFederatedUpgradeArrayInput` via:
//
//          SystemFederatedUpgradeArray{ SystemFederatedUpgradeArgs{...} }
type SystemFederatedUpgradeArrayInput interface {
	pulumi.Input

	ToSystemFederatedUpgradeArrayOutput() SystemFederatedUpgradeArrayOutput
	ToSystemFederatedUpgradeArrayOutputWithContext(context.Context) SystemFederatedUpgradeArrayOutput
}

type SystemFederatedUpgradeArray []SystemFederatedUpgradeInput

func (SystemFederatedUpgradeArray) ElementType() reflect.Type {
	return reflect.TypeOf(([]*SystemFederatedUpgrade)(nil))
}

func (i SystemFederatedUpgradeArray) ToSystemFederatedUpgradeArrayOutput() SystemFederatedUpgradeArrayOutput {
	return i.ToSystemFederatedUpgradeArrayOutputWithContext(context.Background())
}

func (i SystemFederatedUpgradeArray) ToSystemFederatedUpgradeArrayOutputWithContext(ctx context.Context) SystemFederatedUpgradeArrayOutput {
	return pulumi.ToOutputWithContext(ctx, i).(SystemFederatedUpgradeArrayOutput)
}

// SystemFederatedUpgradeMapInput is an input type that accepts SystemFederatedUpgradeMap and SystemFederatedUpgradeMapOutput values.
// You can construct a concrete instance of `SystemFederatedUpgradeMapInput` via:
//
//          SystemFederatedUpgradeMap{ "key": SystemFederatedUpgradeArgs{...} }
type SystemFederatedUpgradeMapInput interface {
	pulumi.Input

	ToSystemFederatedUpgradeMapOutput() SystemFederatedUpgradeMapOutput
	ToSystemFederatedUpgradeMapOutputWithContext(context.Context) SystemFederatedUpgradeMapOutput
}

type SystemFederatedUpgradeMap map[string]SystemFederatedUpgradeInput

func (SystemFederatedUpgradeMap) ElementType() reflect.Type {
	return reflect.TypeOf((map[string]*SystemFederatedUpgrade)(nil))
}

func (i SystemFederatedUpgradeMap) ToSystemFederatedUpgradeMapOutput() SystemFederatedUpgradeMapOutput {
	return i.ToSystemFederatedUpgradeMapOutputWithContext(context.Background())
}

func (i SystemFederatedUpgradeMap) ToSystemFederatedUpgradeMapOutputWithContext(ctx context.Context) SystemFederatedUpgradeMapOutput {
	return pulumi.ToOutputWithContext(ctx, i).(SystemFederatedUpgradeMapOutput)
}

type SystemFederatedUpgradeOutput struct {
	*pulumi.OutputState
}

func (SystemFederatedUpgradeOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*SystemFederatedUpgrade)(nil))
}

func (o SystemFederatedUpgradeOutput) ToSystemFederatedUpgradeOutput() SystemFederatedUpgradeOutput {
	return o
}

func (o SystemFederatedUpgradeOutput) ToSystemFederatedUpgradeOutputWithContext(ctx context.Context) SystemFederatedUpgradeOutput {
	return o
}

func (o SystemFederatedUpgradeOutput) ToSystemFederatedUpgradePtrOutput() SystemFederatedUpgradePtrOutput {
	return o.ToSystemFederatedUpgradePtrOutputWithContext(context.Background())
}

func (o SystemFederatedUpgradeOutput) ToSystemFederatedUpgradePtrOutputWithContext(ctx context.Context) SystemFederatedUpgradePtrOutput {
	return o.ApplyT(func(v SystemFederatedUpgrade) *SystemFederatedUpgrade {
		return &v
	}).(SystemFederatedUpgradePtrOutput)
}

type SystemFederatedUpgradePtrOutput struct {
	*pulumi.OutputState
}

func (SystemFederatedUpgradePtrOutput) ElementType() reflect.Type {
	return reflect.TypeOf((**SystemFederatedUpgrade)(nil))
}

func (o SystemFederatedUpgradePtrOutput) ToSystemFederatedUpgradePtrOutput() SystemFederatedUpgradePtrOutput {
	return o
}

func (o SystemFederatedUpgradePtrOutput) ToSystemFederatedUpgradePtrOutputWithContext(ctx context.Context) SystemFederatedUpgradePtrOutput {
	return o
}

type SystemFederatedUpgradeArrayOutput struct{ *pulumi.OutputState }

func (SystemFederatedUpgradeArrayOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*[]SystemFederatedUpgrade)(nil))
}

func (o SystemFederatedUpgradeArrayOutput) ToSystemFederatedUpgradeArrayOutput() SystemFederatedUpgradeArrayOutput {
	return o
}

func (o SystemFederatedUpgradeArrayOutput) ToSystemFederatedUpgradeArrayOutputWithContext(ctx context.Context) SystemFederatedUpgradeArrayOutput {
	return o
}

func (o SystemFederatedUpgradeArrayOutput) Index(i pulumi.IntInput) SystemFederatedUpgradeOutput {
	return pulumi.All(o, i).ApplyT(func(vs []interface{}) SystemFederatedUpgrade {
		return vs[0].([]SystemFederatedUpgrade)[vs[1].(int)]
	}).(SystemFederatedUpgradeOutput)
}

type SystemFederatedUpgradeMapOutput struct{ *pulumi.OutputState }

func (SystemFederatedUpgradeMapOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*map[string]SystemFederatedUpgrade)(nil))
}

func (o SystemFederatedUpgradeMapOutput) ToSystemFederatedUpgradeMapOutput() SystemFederatedUpgradeMapOutput {
	return o
}

func (o SystemFederatedUpgradeMapOutput) ToSystemFederatedUpgradeMapOutputWithContext(ctx context.Context) SystemFederatedUpgradeMapOutput {
	return o
}

func (o SystemFederatedUpgradeMapOutput) MapIndex(k pulumi.StringInput) SystemFederatedUpgradeOutput {
	return pulumi.All(o, k).ApplyT(func(vs []interface{}) SystemFederatedUpgrade {
		return vs[0].(map[string]SystemFederatedUpgrade)[vs[1].(string)]
	}).(SystemFederatedUpgradeOutput)
}

func init() {
	pulumi.RegisterOutputType(SystemFederatedUpgradeOutput{})
	pulumi.RegisterOutputType(SystemFederatedUpgradePtrOutput{})
	pulumi.RegisterOutputType(SystemFederatedUpgradeArrayOutput{})
	pulumi.RegisterOutputType(SystemFederatedUpgradeMapOutput{})
}
