// *** WARNING: this file was generated by the Pulumi Terraform Bridge (tfgen) Tool. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

package fortios

import (
	"context"
	"reflect"

	"github.com/pulumi/pulumi/sdk/v3/go/pulumi"
)

// Configure Access Proxy virtual hosts. Applies to FortiOS Version `>= 7.0.1`.
//
// ## Import
//
// Firewall AccessProxyVirtualHost can be imported using any of these accepted formats$ export "FORTIOS_IMPORT_TABLE"="true"
//
// ```sh
//  $ pulumi import fortios:index/firewallAccessProxyVirtualHost:FirewallAccessProxyVirtualHost labelname {{name}}
// ```
//
//  $ unset "FORTIOS_IMPORT_TABLE"
type FirewallAccessProxyVirtualHost struct {
	pulumi.CustomResourceState

	// The host name.
	Host pulumi.StringOutput `pulumi:"host"`
	// Type of host pattern. Valid values: `sub-string`, `wildcard`.
	HostType pulumi.StringOutput `pulumi:"hostType"`
	// Virtual host name.
	Name pulumi.StringOutput `pulumi:"name"`
	// SSL certificate for this host.
	SslCertificate pulumi.StringOutput `pulumi:"sslCertificate"`
	// Specifies the vdom to which the resource will be applied when the FortiGate unit is running in VDOM mode. Only one vdom can be specified. If you want to inherit the vdom configuration of the provider, please do not set this parameter.
	Vdomparam pulumi.StringPtrOutput `pulumi:"vdomparam"`
}

// NewFirewallAccessProxyVirtualHost registers a new resource with the given unique name, arguments, and options.
func NewFirewallAccessProxyVirtualHost(ctx *pulumi.Context,
	name string, args *FirewallAccessProxyVirtualHostArgs, opts ...pulumi.ResourceOption) (*FirewallAccessProxyVirtualHost, error) {
	if args == nil {
		args = &FirewallAccessProxyVirtualHostArgs{}
	}

	opts = pkgResourceDefaultOpts(opts)
	var resource FirewallAccessProxyVirtualHost
	err := ctx.RegisterResource("fortios:index/firewallAccessProxyVirtualHost:FirewallAccessProxyVirtualHost", name, args, &resource, opts...)
	if err != nil {
		return nil, err
	}
	return &resource, nil
}

// GetFirewallAccessProxyVirtualHost gets an existing FirewallAccessProxyVirtualHost resource's state with the given name, ID, and optional
// state properties that are used to uniquely qualify the lookup (nil if not required).
func GetFirewallAccessProxyVirtualHost(ctx *pulumi.Context,
	name string, id pulumi.IDInput, state *FirewallAccessProxyVirtualHostState, opts ...pulumi.ResourceOption) (*FirewallAccessProxyVirtualHost, error) {
	var resource FirewallAccessProxyVirtualHost
	err := ctx.ReadResource("fortios:index/firewallAccessProxyVirtualHost:FirewallAccessProxyVirtualHost", name, id, state, &resource, opts...)
	if err != nil {
		return nil, err
	}
	return &resource, nil
}

// Input properties used for looking up and filtering FirewallAccessProxyVirtualHost resources.
type firewallAccessProxyVirtualHostState struct {
	// The host name.
	Host *string `pulumi:"host"`
	// Type of host pattern. Valid values: `sub-string`, `wildcard`.
	HostType *string `pulumi:"hostType"`
	// Virtual host name.
	Name *string `pulumi:"name"`
	// SSL certificate for this host.
	SslCertificate *string `pulumi:"sslCertificate"`
	// Specifies the vdom to which the resource will be applied when the FortiGate unit is running in VDOM mode. Only one vdom can be specified. If you want to inherit the vdom configuration of the provider, please do not set this parameter.
	Vdomparam *string `pulumi:"vdomparam"`
}

type FirewallAccessProxyVirtualHostState struct {
	// The host name.
	Host pulumi.StringPtrInput
	// Type of host pattern. Valid values: `sub-string`, `wildcard`.
	HostType pulumi.StringPtrInput
	// Virtual host name.
	Name pulumi.StringPtrInput
	// SSL certificate for this host.
	SslCertificate pulumi.StringPtrInput
	// Specifies the vdom to which the resource will be applied when the FortiGate unit is running in VDOM mode. Only one vdom can be specified. If you want to inherit the vdom configuration of the provider, please do not set this parameter.
	Vdomparam pulumi.StringPtrInput
}

func (FirewallAccessProxyVirtualHostState) ElementType() reflect.Type {
	return reflect.TypeOf((*firewallAccessProxyVirtualHostState)(nil)).Elem()
}

type firewallAccessProxyVirtualHostArgs struct {
	// The host name.
	Host *string `pulumi:"host"`
	// Type of host pattern. Valid values: `sub-string`, `wildcard`.
	HostType *string `pulumi:"hostType"`
	// Virtual host name.
	Name *string `pulumi:"name"`
	// SSL certificate for this host.
	SslCertificate *string `pulumi:"sslCertificate"`
	// Specifies the vdom to which the resource will be applied when the FortiGate unit is running in VDOM mode. Only one vdom can be specified. If you want to inherit the vdom configuration of the provider, please do not set this parameter.
	Vdomparam *string `pulumi:"vdomparam"`
}

// The set of arguments for constructing a FirewallAccessProxyVirtualHost resource.
type FirewallAccessProxyVirtualHostArgs struct {
	// The host name.
	Host pulumi.StringPtrInput
	// Type of host pattern. Valid values: `sub-string`, `wildcard`.
	HostType pulumi.StringPtrInput
	// Virtual host name.
	Name pulumi.StringPtrInput
	// SSL certificate for this host.
	SslCertificate pulumi.StringPtrInput
	// Specifies the vdom to which the resource will be applied when the FortiGate unit is running in VDOM mode. Only one vdom can be specified. If you want to inherit the vdom configuration of the provider, please do not set this parameter.
	Vdomparam pulumi.StringPtrInput
}

func (FirewallAccessProxyVirtualHostArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*firewallAccessProxyVirtualHostArgs)(nil)).Elem()
}

type FirewallAccessProxyVirtualHostInput interface {
	pulumi.Input

	ToFirewallAccessProxyVirtualHostOutput() FirewallAccessProxyVirtualHostOutput
	ToFirewallAccessProxyVirtualHostOutputWithContext(ctx context.Context) FirewallAccessProxyVirtualHostOutput
}

func (*FirewallAccessProxyVirtualHost) ElementType() reflect.Type {
	return reflect.TypeOf((**FirewallAccessProxyVirtualHost)(nil)).Elem()
}

func (i *FirewallAccessProxyVirtualHost) ToFirewallAccessProxyVirtualHostOutput() FirewallAccessProxyVirtualHostOutput {
	return i.ToFirewallAccessProxyVirtualHostOutputWithContext(context.Background())
}

func (i *FirewallAccessProxyVirtualHost) ToFirewallAccessProxyVirtualHostOutputWithContext(ctx context.Context) FirewallAccessProxyVirtualHostOutput {
	return pulumi.ToOutputWithContext(ctx, i).(FirewallAccessProxyVirtualHostOutput)
}

// FirewallAccessProxyVirtualHostArrayInput is an input type that accepts FirewallAccessProxyVirtualHostArray and FirewallAccessProxyVirtualHostArrayOutput values.
// You can construct a concrete instance of `FirewallAccessProxyVirtualHostArrayInput` via:
//
//          FirewallAccessProxyVirtualHostArray{ FirewallAccessProxyVirtualHostArgs{...} }
type FirewallAccessProxyVirtualHostArrayInput interface {
	pulumi.Input

	ToFirewallAccessProxyVirtualHostArrayOutput() FirewallAccessProxyVirtualHostArrayOutput
	ToFirewallAccessProxyVirtualHostArrayOutputWithContext(context.Context) FirewallAccessProxyVirtualHostArrayOutput
}

type FirewallAccessProxyVirtualHostArray []FirewallAccessProxyVirtualHostInput

func (FirewallAccessProxyVirtualHostArray) ElementType() reflect.Type {
	return reflect.TypeOf((*[]*FirewallAccessProxyVirtualHost)(nil)).Elem()
}

func (i FirewallAccessProxyVirtualHostArray) ToFirewallAccessProxyVirtualHostArrayOutput() FirewallAccessProxyVirtualHostArrayOutput {
	return i.ToFirewallAccessProxyVirtualHostArrayOutputWithContext(context.Background())
}

func (i FirewallAccessProxyVirtualHostArray) ToFirewallAccessProxyVirtualHostArrayOutputWithContext(ctx context.Context) FirewallAccessProxyVirtualHostArrayOutput {
	return pulumi.ToOutputWithContext(ctx, i).(FirewallAccessProxyVirtualHostArrayOutput)
}

// FirewallAccessProxyVirtualHostMapInput is an input type that accepts FirewallAccessProxyVirtualHostMap and FirewallAccessProxyVirtualHostMapOutput values.
// You can construct a concrete instance of `FirewallAccessProxyVirtualHostMapInput` via:
//
//          FirewallAccessProxyVirtualHostMap{ "key": FirewallAccessProxyVirtualHostArgs{...} }
type FirewallAccessProxyVirtualHostMapInput interface {
	pulumi.Input

	ToFirewallAccessProxyVirtualHostMapOutput() FirewallAccessProxyVirtualHostMapOutput
	ToFirewallAccessProxyVirtualHostMapOutputWithContext(context.Context) FirewallAccessProxyVirtualHostMapOutput
}

type FirewallAccessProxyVirtualHostMap map[string]FirewallAccessProxyVirtualHostInput

func (FirewallAccessProxyVirtualHostMap) ElementType() reflect.Type {
	return reflect.TypeOf((*map[string]*FirewallAccessProxyVirtualHost)(nil)).Elem()
}

func (i FirewallAccessProxyVirtualHostMap) ToFirewallAccessProxyVirtualHostMapOutput() FirewallAccessProxyVirtualHostMapOutput {
	return i.ToFirewallAccessProxyVirtualHostMapOutputWithContext(context.Background())
}

func (i FirewallAccessProxyVirtualHostMap) ToFirewallAccessProxyVirtualHostMapOutputWithContext(ctx context.Context) FirewallAccessProxyVirtualHostMapOutput {
	return pulumi.ToOutputWithContext(ctx, i).(FirewallAccessProxyVirtualHostMapOutput)
}

type FirewallAccessProxyVirtualHostOutput struct{ *pulumi.OutputState }

func (FirewallAccessProxyVirtualHostOutput) ElementType() reflect.Type {
	return reflect.TypeOf((**FirewallAccessProxyVirtualHost)(nil)).Elem()
}

func (o FirewallAccessProxyVirtualHostOutput) ToFirewallAccessProxyVirtualHostOutput() FirewallAccessProxyVirtualHostOutput {
	return o
}

func (o FirewallAccessProxyVirtualHostOutput) ToFirewallAccessProxyVirtualHostOutputWithContext(ctx context.Context) FirewallAccessProxyVirtualHostOutput {
	return o
}

type FirewallAccessProxyVirtualHostArrayOutput struct{ *pulumi.OutputState }

func (FirewallAccessProxyVirtualHostArrayOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*[]*FirewallAccessProxyVirtualHost)(nil)).Elem()
}

func (o FirewallAccessProxyVirtualHostArrayOutput) ToFirewallAccessProxyVirtualHostArrayOutput() FirewallAccessProxyVirtualHostArrayOutput {
	return o
}

func (o FirewallAccessProxyVirtualHostArrayOutput) ToFirewallAccessProxyVirtualHostArrayOutputWithContext(ctx context.Context) FirewallAccessProxyVirtualHostArrayOutput {
	return o
}

func (o FirewallAccessProxyVirtualHostArrayOutput) Index(i pulumi.IntInput) FirewallAccessProxyVirtualHostOutput {
	return pulumi.All(o, i).ApplyT(func(vs []interface{}) *FirewallAccessProxyVirtualHost {
		return vs[0].([]*FirewallAccessProxyVirtualHost)[vs[1].(int)]
	}).(FirewallAccessProxyVirtualHostOutput)
}

type FirewallAccessProxyVirtualHostMapOutput struct{ *pulumi.OutputState }

func (FirewallAccessProxyVirtualHostMapOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*map[string]*FirewallAccessProxyVirtualHost)(nil)).Elem()
}

func (o FirewallAccessProxyVirtualHostMapOutput) ToFirewallAccessProxyVirtualHostMapOutput() FirewallAccessProxyVirtualHostMapOutput {
	return o
}

func (o FirewallAccessProxyVirtualHostMapOutput) ToFirewallAccessProxyVirtualHostMapOutputWithContext(ctx context.Context) FirewallAccessProxyVirtualHostMapOutput {
	return o
}

func (o FirewallAccessProxyVirtualHostMapOutput) MapIndex(k pulumi.StringInput) FirewallAccessProxyVirtualHostOutput {
	return pulumi.All(o, k).ApplyT(func(vs []interface{}) *FirewallAccessProxyVirtualHost {
		return vs[0].(map[string]*FirewallAccessProxyVirtualHost)[vs[1].(string)]
	}).(FirewallAccessProxyVirtualHostOutput)
}

func init() {
	pulumi.RegisterInputType(reflect.TypeOf((*FirewallAccessProxyVirtualHostInput)(nil)).Elem(), &FirewallAccessProxyVirtualHost{})
	pulumi.RegisterInputType(reflect.TypeOf((*FirewallAccessProxyVirtualHostArrayInput)(nil)).Elem(), FirewallAccessProxyVirtualHostArray{})
	pulumi.RegisterInputType(reflect.TypeOf((*FirewallAccessProxyVirtualHostMapInput)(nil)).Elem(), FirewallAccessProxyVirtualHostMap{})
	pulumi.RegisterOutputType(FirewallAccessProxyVirtualHostOutput{})
	pulumi.RegisterOutputType(FirewallAccessProxyVirtualHostArrayOutput{})
	pulumi.RegisterOutputType(FirewallAccessProxyVirtualHostMapOutput{})
}
