// Code generated by the Pulumi Terraform Bridge (tfgen) Tool DO NOT EDIT.
// *** WARNING: Do not edit by hand unless you're certain you know what you are doing! ***

package fortios

import (
	"context"
	"reflect"

	"github.com/lubyou/pulumi-fortios/sdk/go/fortios/internal"
	"github.com/pulumi/pulumi/sdk/v3/go/pulumi"
	"github.com/pulumi/pulumi/sdk/v3/go/pulumix"
)

type WanoptCacheService struct {
	pulumi.CustomResourceState

	AcceptableConnections pulumi.StringOutput                  `pulumi:"acceptableConnections"`
	Collaboration         pulumi.StringOutput                  `pulumi:"collaboration"`
	DeviceId              pulumi.StringOutput                  `pulumi:"deviceId"`
	DstPeers              WanoptCacheServiceDstPeerArrayOutput `pulumi:"dstPeers"`
	DynamicSortSubtable   pulumi.StringPtrOutput               `pulumi:"dynamicSortSubtable"`
	GetAllTables          pulumi.StringPtrOutput               `pulumi:"getAllTables"`
	PreferScenario        pulumi.StringOutput                  `pulumi:"preferScenario"`
	SrcPeers              WanoptCacheServiceSrcPeerArrayOutput `pulumi:"srcPeers"`
	Vdomparam             pulumi.StringPtrOutput               `pulumi:"vdomparam"`
}

// NewWanoptCacheService registers a new resource with the given unique name, arguments, and options.
func NewWanoptCacheService(ctx *pulumi.Context,
	name string, args *WanoptCacheServiceArgs, opts ...pulumi.ResourceOption) (*WanoptCacheService, error) {
	if args == nil {
		args = &WanoptCacheServiceArgs{}
	}

	opts = internal.PkgResourceDefaultOpts(opts)
	var resource WanoptCacheService
	err := ctx.RegisterResource("fortios:index/wanoptCacheService:WanoptCacheService", name, args, &resource, opts...)
	if err != nil {
		return nil, err
	}
	return &resource, nil
}

// GetWanoptCacheService gets an existing WanoptCacheService resource's state with the given name, ID, and optional
// state properties that are used to uniquely qualify the lookup (nil if not required).
func GetWanoptCacheService(ctx *pulumi.Context,
	name string, id pulumi.IDInput, state *WanoptCacheServiceState, opts ...pulumi.ResourceOption) (*WanoptCacheService, error) {
	var resource WanoptCacheService
	err := ctx.ReadResource("fortios:index/wanoptCacheService:WanoptCacheService", name, id, state, &resource, opts...)
	if err != nil {
		return nil, err
	}
	return &resource, nil
}

// Input properties used for looking up and filtering WanoptCacheService resources.
type wanoptCacheServiceState struct {
	AcceptableConnections *string                     `pulumi:"acceptableConnections"`
	Collaboration         *string                     `pulumi:"collaboration"`
	DeviceId              *string                     `pulumi:"deviceId"`
	DstPeers              []WanoptCacheServiceDstPeer `pulumi:"dstPeers"`
	DynamicSortSubtable   *string                     `pulumi:"dynamicSortSubtable"`
	GetAllTables          *string                     `pulumi:"getAllTables"`
	PreferScenario        *string                     `pulumi:"preferScenario"`
	SrcPeers              []WanoptCacheServiceSrcPeer `pulumi:"srcPeers"`
	Vdomparam             *string                     `pulumi:"vdomparam"`
}

type WanoptCacheServiceState struct {
	AcceptableConnections pulumi.StringPtrInput
	Collaboration         pulumi.StringPtrInput
	DeviceId              pulumi.StringPtrInput
	DstPeers              WanoptCacheServiceDstPeerArrayInput
	DynamicSortSubtable   pulumi.StringPtrInput
	GetAllTables          pulumi.StringPtrInput
	PreferScenario        pulumi.StringPtrInput
	SrcPeers              WanoptCacheServiceSrcPeerArrayInput
	Vdomparam             pulumi.StringPtrInput
}

func (WanoptCacheServiceState) ElementType() reflect.Type {
	return reflect.TypeOf((*wanoptCacheServiceState)(nil)).Elem()
}

type wanoptCacheServiceArgs struct {
	AcceptableConnections *string                     `pulumi:"acceptableConnections"`
	Collaboration         *string                     `pulumi:"collaboration"`
	DeviceId              *string                     `pulumi:"deviceId"`
	DstPeers              []WanoptCacheServiceDstPeer `pulumi:"dstPeers"`
	DynamicSortSubtable   *string                     `pulumi:"dynamicSortSubtable"`
	GetAllTables          *string                     `pulumi:"getAllTables"`
	PreferScenario        *string                     `pulumi:"preferScenario"`
	SrcPeers              []WanoptCacheServiceSrcPeer `pulumi:"srcPeers"`
	Vdomparam             *string                     `pulumi:"vdomparam"`
}

// The set of arguments for constructing a WanoptCacheService resource.
type WanoptCacheServiceArgs struct {
	AcceptableConnections pulumi.StringPtrInput
	Collaboration         pulumi.StringPtrInput
	DeviceId              pulumi.StringPtrInput
	DstPeers              WanoptCacheServiceDstPeerArrayInput
	DynamicSortSubtable   pulumi.StringPtrInput
	GetAllTables          pulumi.StringPtrInput
	PreferScenario        pulumi.StringPtrInput
	SrcPeers              WanoptCacheServiceSrcPeerArrayInput
	Vdomparam             pulumi.StringPtrInput
}

func (WanoptCacheServiceArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*wanoptCacheServiceArgs)(nil)).Elem()
}

type WanoptCacheServiceInput interface {
	pulumi.Input

	ToWanoptCacheServiceOutput() WanoptCacheServiceOutput
	ToWanoptCacheServiceOutputWithContext(ctx context.Context) WanoptCacheServiceOutput
}

func (*WanoptCacheService) ElementType() reflect.Type {
	return reflect.TypeOf((**WanoptCacheService)(nil)).Elem()
}

func (i *WanoptCacheService) ToWanoptCacheServiceOutput() WanoptCacheServiceOutput {
	return i.ToWanoptCacheServiceOutputWithContext(context.Background())
}

func (i *WanoptCacheService) ToWanoptCacheServiceOutputWithContext(ctx context.Context) WanoptCacheServiceOutput {
	return pulumi.ToOutputWithContext(ctx, i).(WanoptCacheServiceOutput)
}

func (i *WanoptCacheService) ToOutput(ctx context.Context) pulumix.Output[*WanoptCacheService] {
	return pulumix.Output[*WanoptCacheService]{
		OutputState: i.ToWanoptCacheServiceOutputWithContext(ctx).OutputState,
	}
}

// WanoptCacheServiceArrayInput is an input type that accepts WanoptCacheServiceArray and WanoptCacheServiceArrayOutput values.
// You can construct a concrete instance of `WanoptCacheServiceArrayInput` via:
//
//	WanoptCacheServiceArray{ WanoptCacheServiceArgs{...} }
type WanoptCacheServiceArrayInput interface {
	pulumi.Input

	ToWanoptCacheServiceArrayOutput() WanoptCacheServiceArrayOutput
	ToWanoptCacheServiceArrayOutputWithContext(context.Context) WanoptCacheServiceArrayOutput
}

type WanoptCacheServiceArray []WanoptCacheServiceInput

func (WanoptCacheServiceArray) ElementType() reflect.Type {
	return reflect.TypeOf((*[]*WanoptCacheService)(nil)).Elem()
}

func (i WanoptCacheServiceArray) ToWanoptCacheServiceArrayOutput() WanoptCacheServiceArrayOutput {
	return i.ToWanoptCacheServiceArrayOutputWithContext(context.Background())
}

func (i WanoptCacheServiceArray) ToWanoptCacheServiceArrayOutputWithContext(ctx context.Context) WanoptCacheServiceArrayOutput {
	return pulumi.ToOutputWithContext(ctx, i).(WanoptCacheServiceArrayOutput)
}

func (i WanoptCacheServiceArray) ToOutput(ctx context.Context) pulumix.Output[[]*WanoptCacheService] {
	return pulumix.Output[[]*WanoptCacheService]{
		OutputState: i.ToWanoptCacheServiceArrayOutputWithContext(ctx).OutputState,
	}
}

// WanoptCacheServiceMapInput is an input type that accepts WanoptCacheServiceMap and WanoptCacheServiceMapOutput values.
// You can construct a concrete instance of `WanoptCacheServiceMapInput` via:
//
//	WanoptCacheServiceMap{ "key": WanoptCacheServiceArgs{...} }
type WanoptCacheServiceMapInput interface {
	pulumi.Input

	ToWanoptCacheServiceMapOutput() WanoptCacheServiceMapOutput
	ToWanoptCacheServiceMapOutputWithContext(context.Context) WanoptCacheServiceMapOutput
}

type WanoptCacheServiceMap map[string]WanoptCacheServiceInput

func (WanoptCacheServiceMap) ElementType() reflect.Type {
	return reflect.TypeOf((*map[string]*WanoptCacheService)(nil)).Elem()
}

func (i WanoptCacheServiceMap) ToWanoptCacheServiceMapOutput() WanoptCacheServiceMapOutput {
	return i.ToWanoptCacheServiceMapOutputWithContext(context.Background())
}

func (i WanoptCacheServiceMap) ToWanoptCacheServiceMapOutputWithContext(ctx context.Context) WanoptCacheServiceMapOutput {
	return pulumi.ToOutputWithContext(ctx, i).(WanoptCacheServiceMapOutput)
}

func (i WanoptCacheServiceMap) ToOutput(ctx context.Context) pulumix.Output[map[string]*WanoptCacheService] {
	return pulumix.Output[map[string]*WanoptCacheService]{
		OutputState: i.ToWanoptCacheServiceMapOutputWithContext(ctx).OutputState,
	}
}

type WanoptCacheServiceOutput struct{ *pulumi.OutputState }

func (WanoptCacheServiceOutput) ElementType() reflect.Type {
	return reflect.TypeOf((**WanoptCacheService)(nil)).Elem()
}

func (o WanoptCacheServiceOutput) ToWanoptCacheServiceOutput() WanoptCacheServiceOutput {
	return o
}

func (o WanoptCacheServiceOutput) ToWanoptCacheServiceOutputWithContext(ctx context.Context) WanoptCacheServiceOutput {
	return o
}

func (o WanoptCacheServiceOutput) ToOutput(ctx context.Context) pulumix.Output[*WanoptCacheService] {
	return pulumix.Output[*WanoptCacheService]{
		OutputState: o.OutputState,
	}
}

func (o WanoptCacheServiceOutput) AcceptableConnections() pulumi.StringOutput {
	return o.ApplyT(func(v *WanoptCacheService) pulumi.StringOutput { return v.AcceptableConnections }).(pulumi.StringOutput)
}

func (o WanoptCacheServiceOutput) Collaboration() pulumi.StringOutput {
	return o.ApplyT(func(v *WanoptCacheService) pulumi.StringOutput { return v.Collaboration }).(pulumi.StringOutput)
}

func (o WanoptCacheServiceOutput) DeviceId() pulumi.StringOutput {
	return o.ApplyT(func(v *WanoptCacheService) pulumi.StringOutput { return v.DeviceId }).(pulumi.StringOutput)
}

func (o WanoptCacheServiceOutput) DstPeers() WanoptCacheServiceDstPeerArrayOutput {
	return o.ApplyT(func(v *WanoptCacheService) WanoptCacheServiceDstPeerArrayOutput { return v.DstPeers }).(WanoptCacheServiceDstPeerArrayOutput)
}

func (o WanoptCacheServiceOutput) DynamicSortSubtable() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *WanoptCacheService) pulumi.StringPtrOutput { return v.DynamicSortSubtable }).(pulumi.StringPtrOutput)
}

func (o WanoptCacheServiceOutput) GetAllTables() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *WanoptCacheService) pulumi.StringPtrOutput { return v.GetAllTables }).(pulumi.StringPtrOutput)
}

func (o WanoptCacheServiceOutput) PreferScenario() pulumi.StringOutput {
	return o.ApplyT(func(v *WanoptCacheService) pulumi.StringOutput { return v.PreferScenario }).(pulumi.StringOutput)
}

func (o WanoptCacheServiceOutput) SrcPeers() WanoptCacheServiceSrcPeerArrayOutput {
	return o.ApplyT(func(v *WanoptCacheService) WanoptCacheServiceSrcPeerArrayOutput { return v.SrcPeers }).(WanoptCacheServiceSrcPeerArrayOutput)
}

func (o WanoptCacheServiceOutput) Vdomparam() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *WanoptCacheService) pulumi.StringPtrOutput { return v.Vdomparam }).(pulumi.StringPtrOutput)
}

type WanoptCacheServiceArrayOutput struct{ *pulumi.OutputState }

func (WanoptCacheServiceArrayOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*[]*WanoptCacheService)(nil)).Elem()
}

func (o WanoptCacheServiceArrayOutput) ToWanoptCacheServiceArrayOutput() WanoptCacheServiceArrayOutput {
	return o
}

func (o WanoptCacheServiceArrayOutput) ToWanoptCacheServiceArrayOutputWithContext(ctx context.Context) WanoptCacheServiceArrayOutput {
	return o
}

func (o WanoptCacheServiceArrayOutput) ToOutput(ctx context.Context) pulumix.Output[[]*WanoptCacheService] {
	return pulumix.Output[[]*WanoptCacheService]{
		OutputState: o.OutputState,
	}
}

func (o WanoptCacheServiceArrayOutput) Index(i pulumi.IntInput) WanoptCacheServiceOutput {
	return pulumi.All(o, i).ApplyT(func(vs []interface{}) *WanoptCacheService {
		return vs[0].([]*WanoptCacheService)[vs[1].(int)]
	}).(WanoptCacheServiceOutput)
}

type WanoptCacheServiceMapOutput struct{ *pulumi.OutputState }

func (WanoptCacheServiceMapOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*map[string]*WanoptCacheService)(nil)).Elem()
}

func (o WanoptCacheServiceMapOutput) ToWanoptCacheServiceMapOutput() WanoptCacheServiceMapOutput {
	return o
}

func (o WanoptCacheServiceMapOutput) ToWanoptCacheServiceMapOutputWithContext(ctx context.Context) WanoptCacheServiceMapOutput {
	return o
}

func (o WanoptCacheServiceMapOutput) ToOutput(ctx context.Context) pulumix.Output[map[string]*WanoptCacheService] {
	return pulumix.Output[map[string]*WanoptCacheService]{
		OutputState: o.OutputState,
	}
}

func (o WanoptCacheServiceMapOutput) MapIndex(k pulumi.StringInput) WanoptCacheServiceOutput {
	return pulumi.All(o, k).ApplyT(func(vs []interface{}) *WanoptCacheService {
		return vs[0].(map[string]*WanoptCacheService)[vs[1].(string)]
	}).(WanoptCacheServiceOutput)
}

func init() {
	pulumi.RegisterInputType(reflect.TypeOf((*WanoptCacheServiceInput)(nil)).Elem(), &WanoptCacheService{})
	pulumi.RegisterInputType(reflect.TypeOf((*WanoptCacheServiceArrayInput)(nil)).Elem(), WanoptCacheServiceArray{})
	pulumi.RegisterInputType(reflect.TypeOf((*WanoptCacheServiceMapInput)(nil)).Elem(), WanoptCacheServiceMap{})
	pulumi.RegisterOutputType(WanoptCacheServiceOutput{})
	pulumi.RegisterOutputType(WanoptCacheServiceArrayOutput{})
	pulumi.RegisterOutputType(WanoptCacheServiceMapOutput{})
}
