// Code generated by the Pulumi Terraform Bridge (tfgen) Tool DO NOT EDIT.
// *** WARNING: Do not edit by hand unless you're certain you know what you are doing! ***

package fortios

import (
	"context"
	"reflect"

	"github.com/pulumi/pulumi/sdk/v3/go/pulumi"
)

// Use this data source to get information on fortios system ha
func LookupSystemHa(ctx *pulumi.Context, args *LookupSystemHaArgs, opts ...pulumi.InvokeOption) (*LookupSystemHaResult, error) {
	opts = pkgInvokeDefaultOpts(opts)
	var rv LookupSystemHaResult
	err := ctx.Invoke("fortios:index/getSystemHa:GetSystemHa", args, &rv, opts...)
	if err != nil {
		return nil, err
	}
	return &rv, nil
}

// A collection of arguments for invoking GetSystemHa.
type LookupSystemHaArgs struct {
	// Specifies the vdom to which the data source will be applied when the FortiGate unit is running in VDOM mode. Only one vdom can be specified. If you want to inherit the vdom configuration of the provider, please do not set this parameter.
	Vdomparam *string `pulumi:"vdomparam"`
}

// A collection of values returned by GetSystemHa.
type LookupSystemHaResult struct {
	// Number of gratuitous ARPs (1 - 60). Lower to reduce traffic. Higher to reduce failover time.
	Arps int `pulumi:"arps"`
	// Time between gratuitous ARPs  (1 - 20 sec). Lower to reduce failover time. Higher to reduce traffic.
	ArpsInterval int `pulumi:"arpsInterval"`
	// Enable/disable heartbeat message authentication.
	Authentication string `pulumi:"authentication"`
	// Dynamic weighted load balancing CPU usage weight and high and low thresholds.
	CpuThreshold string `pulumi:"cpuThreshold"`
	// Enable/disable heartbeat message encryption.
	Encryption string `pulumi:"encryption"`
	// Time to wait before failover (0 - 300 sec, default = 0), to avoid flip.
	FailoverHoldTime int `pulumi:"failoverHoldTime"`
	// Dynamic weighted load balancing weight and high and low number of FTP proxy sessions.
	FtpProxyThreshold string `pulumi:"ftpProxyThreshold"`
	// Enable/disable gratuitous ARPs. Disable if link-failed-signal enabled.
	GratuitousArps string `pulumi:"gratuitousArps"`
	// Cluster group ID  (0 - 255). Must be the same for all members.
	GroupId int `pulumi:"groupId"`
	// Cluster group name. Must be the same for all members.
	GroupName string `pulumi:"groupName"`
	// Enable/disable using ha-mgmt interface for syslog, SNMP, remote authentication (RADIUS), FortiAnalyzer, and FortiSandbox.
	HaDirect string `pulumi:"haDirect"`
	// HA heartbeat packet Ethertype (4-digit hex).
	HaEthType string `pulumi:"haEthType"`
	// Reserve interfaces to manage individual cluster units. The structure of `haMgmtInterfaces` block is documented below.
	HaMgmtInterfaces []GetSystemHaHaMgmtInterface `pulumi:"haMgmtInterfaces"`
	// Enable to reserve interfaces to manage individual cluster units.
	HaMgmtStatus string `pulumi:"haMgmtStatus"`
	// Normally you would only reduce this value for failover testing.
	HaUptimeDiffMargin int `pulumi:"haUptimeDiffMargin"`
	// Time between sending heartbeat packets (1 - 20 (100*ms)). Increase to reduce false positives.
	HbInterval int `pulumi:"hbInterval"`
	// Number of milliseconds for each heartbeat interval: 100ms or 10ms.
	HbIntervalInMilliseconds string `pulumi:"hbIntervalInMilliseconds"`
	// Number of lost heartbeats to signal a failure (1 - 60). Increase to reduce false positives.
	HbLostThreshold int `pulumi:"hbLostThreshold"`
	// Heartbeat interfaces. Must be the same for all members.
	Hbdev string `pulumi:"hbdev"`
	// Transparent mode HA heartbeat packet Ethertype (4-digit hex).
	HcEthType string `pulumi:"hcEthType"`
	// Time to wait before changing from hello to work state (5 - 300 sec).
	HelloHolddown int `pulumi:"helloHolddown"`
	// Dynamic weighted load balancing weight and high and low number of HTTP proxy sessions.
	HttpProxyThreshold string `pulumi:"httpProxyThreshold"`
	// The provider-assigned unique ID for this managed resource.
	Id string `pulumi:"id"`
	// Dynamic weighted load balancing weight and high and low number of IMAP proxy sessions.
	ImapProxyThreshold string `pulumi:"imapProxyThreshold"`
	// Enable/disable synchronization of sessions among HA clusters.
	InterClusterSessionSync string `pulumi:"interClusterSessionSync"`
	// key
	Key string `pulumi:"key"`
	// Telnet session HA heartbeat packet Ethertype (4-digit hex).
	L2epEthType string `pulumi:"l2epEthType"`
	// Enable to shut down all interfaces for 1 sec after a failover. Use if gratuitous ARPs do not update network.
	LinkFailedSignal string `pulumi:"linkFailedSignal"`
	// Enable to load balance TCP sessions. Disable to load balance proxy sessions only.
	LoadBalanceAll string `pulumi:"loadBalanceAll"`
	// Enable/disable usage of the logical serial number.
	LogicalSn string `pulumi:"logicalSn"`
	// Enable/disable memory based failover.
	MemoryBasedFailover string `pulumi:"memoryBasedFailover"`
	// Enable/disable memory compatible mode.
	MemoryCompatibleMode string `pulumi:"memoryCompatibleMode"`
	// Time to wait between subsequent memory based failovers in minutes (6 - 2147483647, default = 6).
	MemoryFailoverFlipTimeout int `pulumi:"memoryFailoverFlipTimeout"`
	// Duration of high memory usage before memory based failover is triggered in seconds (1 - 300, default = 60).
	MemoryFailoverMonitorPeriod int `pulumi:"memoryFailoverMonitorPeriod"`
	// Rate at which memory usage is sampled in order to measure memory usage in seconds (1 - 60, default = 1).
	MemoryFailoverSampleRate int `pulumi:"memoryFailoverSampleRate"`
	// Memory usage threshold to trigger memory based failover (0 means using conserve mode threshold in system.global).
	MemoryFailoverThreshold int `pulumi:"memoryFailoverThreshold"`
	// Dynamic weighted load balancing memory usage weight and high and low thresholds.
	MemoryThreshold string `pulumi:"memoryThreshold"`
	// HA mode. Must be the same for all members. FGSP requires standalone.
	Mode string `pulumi:"mode"`
	// Interfaces to check for port monitoring (or link failure).
	Monitor string `pulumi:"monitor"`
	// HA multicast TTL on master (5 - 3600 sec).
	MulticastTtl int `pulumi:"multicastTtl"`
	// Dynamic weighted load balancing weight and high and low number of NNTP proxy sessions.
	NntpProxyThreshold string `pulumi:"nntpProxyThreshold"`
	// Enable and increase the priority of the unit that should always be primary (master).
	Override string `pulumi:"override"`
	// Delay negotiating if override is enabled (0 - 3600 sec). Reduces how often the cluster negotiates.
	OverrideWaitTime int `pulumi:"overrideWaitTime"`
	// Cluster password. Must be the same for all members.
	Password string `pulumi:"password"`
	// Remote IP monitoring failover threshold (0 - 50).
	PingserverFailoverThreshold int `pulumi:"pingserverFailoverThreshold"`
	// Time to wait in minutes before renegotiating after a remote IP monitoring failover.
	PingserverFlipTimeout int `pulumi:"pingserverFlipTimeout"`
	// Interfaces to check for remote IP monitoring.
	PingserverMonitorInterface string `pulumi:"pingserverMonitorInterface"`
	// Enable to force the cluster to negotiate after a remote IP monitoring failover.
	PingserverSecondaryForceReset string `pulumi:"pingserverSecondaryForceReset"`
	// Enable to force the cluster to negotiate after a remote IP monitoring failover.
	PingserverSlaveForceReset string `pulumi:"pingserverSlaveForceReset"`
	// Dynamic weighted load balancing weight and high and low number of POP3 proxy sessions.
	Pop3ProxyThreshold string `pulumi:"pop3ProxyThreshold"`
	// Increase the priority to select the primary unit (0 - 255).
	Priority int `pulumi:"priority"`
	// Time to wait between routing table updates to the cluster (0 - 3600 sec).
	RouteHold int `pulumi:"routeHold"`
	// TTL for primary unit routes (5 - 3600 sec). Increase to maintain active routes during failover.
	RouteTtl int `pulumi:"routeTtl"`
	// Time to wait before sending new routes to the cluster (0 - 3600 sec).
	RouteWait int `pulumi:"routeWait"`
	// Type of A-A load balancing. Use none if you have external load balancers.
	Schedule string `pulumi:"schedule"`
	// Configure virtual cluster 2. The structure of `secondaryVcluster` block is documented below.
	SecondaryVcluster GetSystemHaSecondaryVcluster `pulumi:"secondaryVcluster"`
	// Enable/disable session pickup. Enabling it can reduce session down time when fail over happens.
	SessionPickup string `pulumi:"sessionPickup"`
	// Enable/disable UDP and ICMP session sync.
	SessionPickupConnectionless string `pulumi:"sessionPickupConnectionless"`
	// Enable to sync sessions longer than 30 sec. Only longer lived sessions need to be synced.
	SessionPickupDelay string `pulumi:"sessionPickupDelay"`
	// Enable/disable session helper expectation session sync for FGSP.
	SessionPickupExpectation string `pulumi:"sessionPickupExpectation"`
	// Enable/disable NAT session sync for FGSP.
	SessionPickupNat string `pulumi:"sessionPickupNat"`
	// Offload session-sync process to kernel and sync sessions using connected interface(s) directly.
	SessionSyncDev string `pulumi:"sessionSyncDev"`
	// Dynamic weighted load balancing weight and high and low number of SMTP proxy sessions.
	SmtpProxyThreshold string `pulumi:"smtpProxyThreshold"`
	// Enable/disable automatic HA failover on SSD disk failure.
	SsdFailover string `pulumi:"ssdFailover"`
	// Enable/disable FGSP configuration synchronization.
	StandaloneConfigSync string `pulumi:"standaloneConfigSync"`
	// Enable/disable standalone management VDOM.
	StandaloneMgmtVdom string `pulumi:"standaloneMgmtVdom"`
	// Enable/disable configuration synchronization.
	SyncConfig string `pulumi:"syncConfig"`
	// Enable/disable HA packet distribution to multiple CPUs.
	SyncPacketBalance string `pulumi:"syncPacketBalance"`
	// Default route gateway for unicast interface.
	UnicastGateway string `pulumi:"unicastGateway"`
	// Enable/disable unicast heartbeat.
	UnicastHb string `pulumi:"unicastHb"`
	// Unicast heartbeat netmask.
	UnicastHbNetmask string `pulumi:"unicastHbNetmask"`
	// Unicast heartbeat peer IP.
	UnicastHbPeerip string `pulumi:"unicastHbPeerip"`
	// Number of unicast peers. The structure of `unicastPeers` block is documented below.
	UnicastPeers []GetSystemHaUnicastPeer `pulumi:"unicastPeers"`
	// Enable/disable unicast connection.
	UnicastStatus string `pulumi:"unicastStatus"`
	// Number of minutes the primary HA unit waits before the secondary HA unit is considered upgraded and the system is started before starting its own upgrade (1 - 300, default = 30).
	UninterruptiblePrimaryWait int `pulumi:"uninterruptiblePrimaryWait"`
	// Enable to upgrade a cluster without blocking network traffic.
	UninterruptibleUpgrade string `pulumi:"uninterruptibleUpgrade"`
	// Enable/disable virtual cluster 2 for virtual clustering.
	Vcluster2 string `pulumi:"vcluster2"`
	// Cluster ID.
	VclusterId int `pulumi:"vclusterId"`
	// VDOMs in virtual cluster 2.
	Vdom      string  `pulumi:"vdom"`
	Vdomparam *string `pulumi:"vdomparam"`
	// Weight-round-robin weight for each cluster unit. Syntax <priority> <weight>.
	Weight string `pulumi:"weight"`
}

func LookupSystemHaOutput(ctx *pulumi.Context, args LookupSystemHaOutputArgs, opts ...pulumi.InvokeOption) LookupSystemHaResultOutput {
	return pulumi.ToOutputWithContext(context.Background(), args).
		ApplyT(func(v interface{}) (LookupSystemHaResult, error) {
			args := v.(LookupSystemHaArgs)
			r, err := LookupSystemHa(ctx, &args, opts...)
			var s LookupSystemHaResult
			if r != nil {
				s = *r
			}
			return s, err
		}).(LookupSystemHaResultOutput)
}

// A collection of arguments for invoking GetSystemHa.
type LookupSystemHaOutputArgs struct {
	// Specifies the vdom to which the data source will be applied when the FortiGate unit is running in VDOM mode. Only one vdom can be specified. If you want to inherit the vdom configuration of the provider, please do not set this parameter.
	Vdomparam pulumi.StringPtrInput `pulumi:"vdomparam"`
}

func (LookupSystemHaOutputArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*LookupSystemHaArgs)(nil)).Elem()
}

// A collection of values returned by GetSystemHa.
type LookupSystemHaResultOutput struct{ *pulumi.OutputState }

func (LookupSystemHaResultOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*LookupSystemHaResult)(nil)).Elem()
}

func (o LookupSystemHaResultOutput) ToLookupSystemHaResultOutput() LookupSystemHaResultOutput {
	return o
}

func (o LookupSystemHaResultOutput) ToLookupSystemHaResultOutputWithContext(ctx context.Context) LookupSystemHaResultOutput {
	return o
}

// Number of gratuitous ARPs (1 - 60). Lower to reduce traffic. Higher to reduce failover time.
func (o LookupSystemHaResultOutput) Arps() pulumi.IntOutput {
	return o.ApplyT(func(v LookupSystemHaResult) int { return v.Arps }).(pulumi.IntOutput)
}

// Time between gratuitous ARPs  (1 - 20 sec). Lower to reduce failover time. Higher to reduce traffic.
func (o LookupSystemHaResultOutput) ArpsInterval() pulumi.IntOutput {
	return o.ApplyT(func(v LookupSystemHaResult) int { return v.ArpsInterval }).(pulumi.IntOutput)
}

// Enable/disable heartbeat message authentication.
func (o LookupSystemHaResultOutput) Authentication() pulumi.StringOutput {
	return o.ApplyT(func(v LookupSystemHaResult) string { return v.Authentication }).(pulumi.StringOutput)
}

// Dynamic weighted load balancing CPU usage weight and high and low thresholds.
func (o LookupSystemHaResultOutput) CpuThreshold() pulumi.StringOutput {
	return o.ApplyT(func(v LookupSystemHaResult) string { return v.CpuThreshold }).(pulumi.StringOutput)
}

// Enable/disable heartbeat message encryption.
func (o LookupSystemHaResultOutput) Encryption() pulumi.StringOutput {
	return o.ApplyT(func(v LookupSystemHaResult) string { return v.Encryption }).(pulumi.StringOutput)
}

// Time to wait before failover (0 - 300 sec, default = 0), to avoid flip.
func (o LookupSystemHaResultOutput) FailoverHoldTime() pulumi.IntOutput {
	return o.ApplyT(func(v LookupSystemHaResult) int { return v.FailoverHoldTime }).(pulumi.IntOutput)
}

// Dynamic weighted load balancing weight and high and low number of FTP proxy sessions.
func (o LookupSystemHaResultOutput) FtpProxyThreshold() pulumi.StringOutput {
	return o.ApplyT(func(v LookupSystemHaResult) string { return v.FtpProxyThreshold }).(pulumi.StringOutput)
}

// Enable/disable gratuitous ARPs. Disable if link-failed-signal enabled.
func (o LookupSystemHaResultOutput) GratuitousArps() pulumi.StringOutput {
	return o.ApplyT(func(v LookupSystemHaResult) string { return v.GratuitousArps }).(pulumi.StringOutput)
}

// Cluster group ID  (0 - 255). Must be the same for all members.
func (o LookupSystemHaResultOutput) GroupId() pulumi.IntOutput {
	return o.ApplyT(func(v LookupSystemHaResult) int { return v.GroupId }).(pulumi.IntOutput)
}

// Cluster group name. Must be the same for all members.
func (o LookupSystemHaResultOutput) GroupName() pulumi.StringOutput {
	return o.ApplyT(func(v LookupSystemHaResult) string { return v.GroupName }).(pulumi.StringOutput)
}

// Enable/disable using ha-mgmt interface for syslog, SNMP, remote authentication (RADIUS), FortiAnalyzer, and FortiSandbox.
func (o LookupSystemHaResultOutput) HaDirect() pulumi.StringOutput {
	return o.ApplyT(func(v LookupSystemHaResult) string { return v.HaDirect }).(pulumi.StringOutput)
}

// HA heartbeat packet Ethertype (4-digit hex).
func (o LookupSystemHaResultOutput) HaEthType() pulumi.StringOutput {
	return o.ApplyT(func(v LookupSystemHaResult) string { return v.HaEthType }).(pulumi.StringOutput)
}

// Reserve interfaces to manage individual cluster units. The structure of `haMgmtInterfaces` block is documented below.
func (o LookupSystemHaResultOutput) HaMgmtInterfaces() GetSystemHaHaMgmtInterfaceArrayOutput {
	return o.ApplyT(func(v LookupSystemHaResult) []GetSystemHaHaMgmtInterface { return v.HaMgmtInterfaces }).(GetSystemHaHaMgmtInterfaceArrayOutput)
}

// Enable to reserve interfaces to manage individual cluster units.
func (o LookupSystemHaResultOutput) HaMgmtStatus() pulumi.StringOutput {
	return o.ApplyT(func(v LookupSystemHaResult) string { return v.HaMgmtStatus }).(pulumi.StringOutput)
}

// Normally you would only reduce this value for failover testing.
func (o LookupSystemHaResultOutput) HaUptimeDiffMargin() pulumi.IntOutput {
	return o.ApplyT(func(v LookupSystemHaResult) int { return v.HaUptimeDiffMargin }).(pulumi.IntOutput)
}

// Time between sending heartbeat packets (1 - 20 (100*ms)). Increase to reduce false positives.
func (o LookupSystemHaResultOutput) HbInterval() pulumi.IntOutput {
	return o.ApplyT(func(v LookupSystemHaResult) int { return v.HbInterval }).(pulumi.IntOutput)
}

// Number of milliseconds for each heartbeat interval: 100ms or 10ms.
func (o LookupSystemHaResultOutput) HbIntervalInMilliseconds() pulumi.StringOutput {
	return o.ApplyT(func(v LookupSystemHaResult) string { return v.HbIntervalInMilliseconds }).(pulumi.StringOutput)
}

// Number of lost heartbeats to signal a failure (1 - 60). Increase to reduce false positives.
func (o LookupSystemHaResultOutput) HbLostThreshold() pulumi.IntOutput {
	return o.ApplyT(func(v LookupSystemHaResult) int { return v.HbLostThreshold }).(pulumi.IntOutput)
}

// Heartbeat interfaces. Must be the same for all members.
func (o LookupSystemHaResultOutput) Hbdev() pulumi.StringOutput {
	return o.ApplyT(func(v LookupSystemHaResult) string { return v.Hbdev }).(pulumi.StringOutput)
}

// Transparent mode HA heartbeat packet Ethertype (4-digit hex).
func (o LookupSystemHaResultOutput) HcEthType() pulumi.StringOutput {
	return o.ApplyT(func(v LookupSystemHaResult) string { return v.HcEthType }).(pulumi.StringOutput)
}

// Time to wait before changing from hello to work state (5 - 300 sec).
func (o LookupSystemHaResultOutput) HelloHolddown() pulumi.IntOutput {
	return o.ApplyT(func(v LookupSystemHaResult) int { return v.HelloHolddown }).(pulumi.IntOutput)
}

// Dynamic weighted load balancing weight and high and low number of HTTP proxy sessions.
func (o LookupSystemHaResultOutput) HttpProxyThreshold() pulumi.StringOutput {
	return o.ApplyT(func(v LookupSystemHaResult) string { return v.HttpProxyThreshold }).(pulumi.StringOutput)
}

// The provider-assigned unique ID for this managed resource.
func (o LookupSystemHaResultOutput) Id() pulumi.StringOutput {
	return o.ApplyT(func(v LookupSystemHaResult) string { return v.Id }).(pulumi.StringOutput)
}

// Dynamic weighted load balancing weight and high and low number of IMAP proxy sessions.
func (o LookupSystemHaResultOutput) ImapProxyThreshold() pulumi.StringOutput {
	return o.ApplyT(func(v LookupSystemHaResult) string { return v.ImapProxyThreshold }).(pulumi.StringOutput)
}

// Enable/disable synchronization of sessions among HA clusters.
func (o LookupSystemHaResultOutput) InterClusterSessionSync() pulumi.StringOutput {
	return o.ApplyT(func(v LookupSystemHaResult) string { return v.InterClusterSessionSync }).(pulumi.StringOutput)
}

// key
func (o LookupSystemHaResultOutput) Key() pulumi.StringOutput {
	return o.ApplyT(func(v LookupSystemHaResult) string { return v.Key }).(pulumi.StringOutput)
}

// Telnet session HA heartbeat packet Ethertype (4-digit hex).
func (o LookupSystemHaResultOutput) L2epEthType() pulumi.StringOutput {
	return o.ApplyT(func(v LookupSystemHaResult) string { return v.L2epEthType }).(pulumi.StringOutput)
}

// Enable to shut down all interfaces for 1 sec after a failover. Use if gratuitous ARPs do not update network.
func (o LookupSystemHaResultOutput) LinkFailedSignal() pulumi.StringOutput {
	return o.ApplyT(func(v LookupSystemHaResult) string { return v.LinkFailedSignal }).(pulumi.StringOutput)
}

// Enable to load balance TCP sessions. Disable to load balance proxy sessions only.
func (o LookupSystemHaResultOutput) LoadBalanceAll() pulumi.StringOutput {
	return o.ApplyT(func(v LookupSystemHaResult) string { return v.LoadBalanceAll }).(pulumi.StringOutput)
}

// Enable/disable usage of the logical serial number.
func (o LookupSystemHaResultOutput) LogicalSn() pulumi.StringOutput {
	return o.ApplyT(func(v LookupSystemHaResult) string { return v.LogicalSn }).(pulumi.StringOutput)
}

// Enable/disable memory based failover.
func (o LookupSystemHaResultOutput) MemoryBasedFailover() pulumi.StringOutput {
	return o.ApplyT(func(v LookupSystemHaResult) string { return v.MemoryBasedFailover }).(pulumi.StringOutput)
}

// Enable/disable memory compatible mode.
func (o LookupSystemHaResultOutput) MemoryCompatibleMode() pulumi.StringOutput {
	return o.ApplyT(func(v LookupSystemHaResult) string { return v.MemoryCompatibleMode }).(pulumi.StringOutput)
}

// Time to wait between subsequent memory based failovers in minutes (6 - 2147483647, default = 6).
func (o LookupSystemHaResultOutput) MemoryFailoverFlipTimeout() pulumi.IntOutput {
	return o.ApplyT(func(v LookupSystemHaResult) int { return v.MemoryFailoverFlipTimeout }).(pulumi.IntOutput)
}

// Duration of high memory usage before memory based failover is triggered in seconds (1 - 300, default = 60).
func (o LookupSystemHaResultOutput) MemoryFailoverMonitorPeriod() pulumi.IntOutput {
	return o.ApplyT(func(v LookupSystemHaResult) int { return v.MemoryFailoverMonitorPeriod }).(pulumi.IntOutput)
}

// Rate at which memory usage is sampled in order to measure memory usage in seconds (1 - 60, default = 1).
func (o LookupSystemHaResultOutput) MemoryFailoverSampleRate() pulumi.IntOutput {
	return o.ApplyT(func(v LookupSystemHaResult) int { return v.MemoryFailoverSampleRate }).(pulumi.IntOutput)
}

// Memory usage threshold to trigger memory based failover (0 means using conserve mode threshold in system.global).
func (o LookupSystemHaResultOutput) MemoryFailoverThreshold() pulumi.IntOutput {
	return o.ApplyT(func(v LookupSystemHaResult) int { return v.MemoryFailoverThreshold }).(pulumi.IntOutput)
}

// Dynamic weighted load balancing memory usage weight and high and low thresholds.
func (o LookupSystemHaResultOutput) MemoryThreshold() pulumi.StringOutput {
	return o.ApplyT(func(v LookupSystemHaResult) string { return v.MemoryThreshold }).(pulumi.StringOutput)
}

// HA mode. Must be the same for all members. FGSP requires standalone.
func (o LookupSystemHaResultOutput) Mode() pulumi.StringOutput {
	return o.ApplyT(func(v LookupSystemHaResult) string { return v.Mode }).(pulumi.StringOutput)
}

// Interfaces to check for port monitoring (or link failure).
func (o LookupSystemHaResultOutput) Monitor() pulumi.StringOutput {
	return o.ApplyT(func(v LookupSystemHaResult) string { return v.Monitor }).(pulumi.StringOutput)
}

// HA multicast TTL on master (5 - 3600 sec).
func (o LookupSystemHaResultOutput) MulticastTtl() pulumi.IntOutput {
	return o.ApplyT(func(v LookupSystemHaResult) int { return v.MulticastTtl }).(pulumi.IntOutput)
}

// Dynamic weighted load balancing weight and high and low number of NNTP proxy sessions.
func (o LookupSystemHaResultOutput) NntpProxyThreshold() pulumi.StringOutput {
	return o.ApplyT(func(v LookupSystemHaResult) string { return v.NntpProxyThreshold }).(pulumi.StringOutput)
}

// Enable and increase the priority of the unit that should always be primary (master).
func (o LookupSystemHaResultOutput) Override() pulumi.StringOutput {
	return o.ApplyT(func(v LookupSystemHaResult) string { return v.Override }).(pulumi.StringOutput)
}

// Delay negotiating if override is enabled (0 - 3600 sec). Reduces how often the cluster negotiates.
func (o LookupSystemHaResultOutput) OverrideWaitTime() pulumi.IntOutput {
	return o.ApplyT(func(v LookupSystemHaResult) int { return v.OverrideWaitTime }).(pulumi.IntOutput)
}

// Cluster password. Must be the same for all members.
func (o LookupSystemHaResultOutput) Password() pulumi.StringOutput {
	return o.ApplyT(func(v LookupSystemHaResult) string { return v.Password }).(pulumi.StringOutput)
}

// Remote IP monitoring failover threshold (0 - 50).
func (o LookupSystemHaResultOutput) PingserverFailoverThreshold() pulumi.IntOutput {
	return o.ApplyT(func(v LookupSystemHaResult) int { return v.PingserverFailoverThreshold }).(pulumi.IntOutput)
}

// Time to wait in minutes before renegotiating after a remote IP monitoring failover.
func (o LookupSystemHaResultOutput) PingserverFlipTimeout() pulumi.IntOutput {
	return o.ApplyT(func(v LookupSystemHaResult) int { return v.PingserverFlipTimeout }).(pulumi.IntOutput)
}

// Interfaces to check for remote IP monitoring.
func (o LookupSystemHaResultOutput) PingserverMonitorInterface() pulumi.StringOutput {
	return o.ApplyT(func(v LookupSystemHaResult) string { return v.PingserverMonitorInterface }).(pulumi.StringOutput)
}

// Enable to force the cluster to negotiate after a remote IP monitoring failover.
func (o LookupSystemHaResultOutput) PingserverSecondaryForceReset() pulumi.StringOutput {
	return o.ApplyT(func(v LookupSystemHaResult) string { return v.PingserverSecondaryForceReset }).(pulumi.StringOutput)
}

// Enable to force the cluster to negotiate after a remote IP monitoring failover.
func (o LookupSystemHaResultOutput) PingserverSlaveForceReset() pulumi.StringOutput {
	return o.ApplyT(func(v LookupSystemHaResult) string { return v.PingserverSlaveForceReset }).(pulumi.StringOutput)
}

// Dynamic weighted load balancing weight and high and low number of POP3 proxy sessions.
func (o LookupSystemHaResultOutput) Pop3ProxyThreshold() pulumi.StringOutput {
	return o.ApplyT(func(v LookupSystemHaResult) string { return v.Pop3ProxyThreshold }).(pulumi.StringOutput)
}

// Increase the priority to select the primary unit (0 - 255).
func (o LookupSystemHaResultOutput) Priority() pulumi.IntOutput {
	return o.ApplyT(func(v LookupSystemHaResult) int { return v.Priority }).(pulumi.IntOutput)
}

// Time to wait between routing table updates to the cluster (0 - 3600 sec).
func (o LookupSystemHaResultOutput) RouteHold() pulumi.IntOutput {
	return o.ApplyT(func(v LookupSystemHaResult) int { return v.RouteHold }).(pulumi.IntOutput)
}

// TTL for primary unit routes (5 - 3600 sec). Increase to maintain active routes during failover.
func (o LookupSystemHaResultOutput) RouteTtl() pulumi.IntOutput {
	return o.ApplyT(func(v LookupSystemHaResult) int { return v.RouteTtl }).(pulumi.IntOutput)
}

// Time to wait before sending new routes to the cluster (0 - 3600 sec).
func (o LookupSystemHaResultOutput) RouteWait() pulumi.IntOutput {
	return o.ApplyT(func(v LookupSystemHaResult) int { return v.RouteWait }).(pulumi.IntOutput)
}

// Type of A-A load balancing. Use none if you have external load balancers.
func (o LookupSystemHaResultOutput) Schedule() pulumi.StringOutput {
	return o.ApplyT(func(v LookupSystemHaResult) string { return v.Schedule }).(pulumi.StringOutput)
}

// Configure virtual cluster 2. The structure of `secondaryVcluster` block is documented below.
func (o LookupSystemHaResultOutput) SecondaryVcluster() GetSystemHaSecondaryVclusterOutput {
	return o.ApplyT(func(v LookupSystemHaResult) GetSystemHaSecondaryVcluster { return v.SecondaryVcluster }).(GetSystemHaSecondaryVclusterOutput)
}

// Enable/disable session pickup. Enabling it can reduce session down time when fail over happens.
func (o LookupSystemHaResultOutput) SessionPickup() pulumi.StringOutput {
	return o.ApplyT(func(v LookupSystemHaResult) string { return v.SessionPickup }).(pulumi.StringOutput)
}

// Enable/disable UDP and ICMP session sync.
func (o LookupSystemHaResultOutput) SessionPickupConnectionless() pulumi.StringOutput {
	return o.ApplyT(func(v LookupSystemHaResult) string { return v.SessionPickupConnectionless }).(pulumi.StringOutput)
}

// Enable to sync sessions longer than 30 sec. Only longer lived sessions need to be synced.
func (o LookupSystemHaResultOutput) SessionPickupDelay() pulumi.StringOutput {
	return o.ApplyT(func(v LookupSystemHaResult) string { return v.SessionPickupDelay }).(pulumi.StringOutput)
}

// Enable/disable session helper expectation session sync for FGSP.
func (o LookupSystemHaResultOutput) SessionPickupExpectation() pulumi.StringOutput {
	return o.ApplyT(func(v LookupSystemHaResult) string { return v.SessionPickupExpectation }).(pulumi.StringOutput)
}

// Enable/disable NAT session sync for FGSP.
func (o LookupSystemHaResultOutput) SessionPickupNat() pulumi.StringOutput {
	return o.ApplyT(func(v LookupSystemHaResult) string { return v.SessionPickupNat }).(pulumi.StringOutput)
}

// Offload session-sync process to kernel and sync sessions using connected interface(s) directly.
func (o LookupSystemHaResultOutput) SessionSyncDev() pulumi.StringOutput {
	return o.ApplyT(func(v LookupSystemHaResult) string { return v.SessionSyncDev }).(pulumi.StringOutput)
}

// Dynamic weighted load balancing weight and high and low number of SMTP proxy sessions.
func (o LookupSystemHaResultOutput) SmtpProxyThreshold() pulumi.StringOutput {
	return o.ApplyT(func(v LookupSystemHaResult) string { return v.SmtpProxyThreshold }).(pulumi.StringOutput)
}

// Enable/disable automatic HA failover on SSD disk failure.
func (o LookupSystemHaResultOutput) SsdFailover() pulumi.StringOutput {
	return o.ApplyT(func(v LookupSystemHaResult) string { return v.SsdFailover }).(pulumi.StringOutput)
}

// Enable/disable FGSP configuration synchronization.
func (o LookupSystemHaResultOutput) StandaloneConfigSync() pulumi.StringOutput {
	return o.ApplyT(func(v LookupSystemHaResult) string { return v.StandaloneConfigSync }).(pulumi.StringOutput)
}

// Enable/disable standalone management VDOM.
func (o LookupSystemHaResultOutput) StandaloneMgmtVdom() pulumi.StringOutput {
	return o.ApplyT(func(v LookupSystemHaResult) string { return v.StandaloneMgmtVdom }).(pulumi.StringOutput)
}

// Enable/disable configuration synchronization.
func (o LookupSystemHaResultOutput) SyncConfig() pulumi.StringOutput {
	return o.ApplyT(func(v LookupSystemHaResult) string { return v.SyncConfig }).(pulumi.StringOutput)
}

// Enable/disable HA packet distribution to multiple CPUs.
func (o LookupSystemHaResultOutput) SyncPacketBalance() pulumi.StringOutput {
	return o.ApplyT(func(v LookupSystemHaResult) string { return v.SyncPacketBalance }).(pulumi.StringOutput)
}

// Default route gateway for unicast interface.
func (o LookupSystemHaResultOutput) UnicastGateway() pulumi.StringOutput {
	return o.ApplyT(func(v LookupSystemHaResult) string { return v.UnicastGateway }).(pulumi.StringOutput)
}

// Enable/disable unicast heartbeat.
func (o LookupSystemHaResultOutput) UnicastHb() pulumi.StringOutput {
	return o.ApplyT(func(v LookupSystemHaResult) string { return v.UnicastHb }).(pulumi.StringOutput)
}

// Unicast heartbeat netmask.
func (o LookupSystemHaResultOutput) UnicastHbNetmask() pulumi.StringOutput {
	return o.ApplyT(func(v LookupSystemHaResult) string { return v.UnicastHbNetmask }).(pulumi.StringOutput)
}

// Unicast heartbeat peer IP.
func (o LookupSystemHaResultOutput) UnicastHbPeerip() pulumi.StringOutput {
	return o.ApplyT(func(v LookupSystemHaResult) string { return v.UnicastHbPeerip }).(pulumi.StringOutput)
}

// Number of unicast peers. The structure of `unicastPeers` block is documented below.
func (o LookupSystemHaResultOutput) UnicastPeers() GetSystemHaUnicastPeerArrayOutput {
	return o.ApplyT(func(v LookupSystemHaResult) []GetSystemHaUnicastPeer { return v.UnicastPeers }).(GetSystemHaUnicastPeerArrayOutput)
}

// Enable/disable unicast connection.
func (o LookupSystemHaResultOutput) UnicastStatus() pulumi.StringOutput {
	return o.ApplyT(func(v LookupSystemHaResult) string { return v.UnicastStatus }).(pulumi.StringOutput)
}

// Number of minutes the primary HA unit waits before the secondary HA unit is considered upgraded and the system is started before starting its own upgrade (1 - 300, default = 30).
func (o LookupSystemHaResultOutput) UninterruptiblePrimaryWait() pulumi.IntOutput {
	return o.ApplyT(func(v LookupSystemHaResult) int { return v.UninterruptiblePrimaryWait }).(pulumi.IntOutput)
}

// Enable to upgrade a cluster without blocking network traffic.
func (o LookupSystemHaResultOutput) UninterruptibleUpgrade() pulumi.StringOutput {
	return o.ApplyT(func(v LookupSystemHaResult) string { return v.UninterruptibleUpgrade }).(pulumi.StringOutput)
}

// Enable/disable virtual cluster 2 for virtual clustering.
func (o LookupSystemHaResultOutput) Vcluster2() pulumi.StringOutput {
	return o.ApplyT(func(v LookupSystemHaResult) string { return v.Vcluster2 }).(pulumi.StringOutput)
}

// Cluster ID.
func (o LookupSystemHaResultOutput) VclusterId() pulumi.IntOutput {
	return o.ApplyT(func(v LookupSystemHaResult) int { return v.VclusterId }).(pulumi.IntOutput)
}

// VDOMs in virtual cluster 2.
func (o LookupSystemHaResultOutput) Vdom() pulumi.StringOutput {
	return o.ApplyT(func(v LookupSystemHaResult) string { return v.Vdom }).(pulumi.StringOutput)
}

func (o LookupSystemHaResultOutput) Vdomparam() pulumi.StringPtrOutput {
	return o.ApplyT(func(v LookupSystemHaResult) *string { return v.Vdomparam }).(pulumi.StringPtrOutput)
}

// Weight-round-robin weight for each cluster unit. Syntax <priority> <weight>.
func (o LookupSystemHaResultOutput) Weight() pulumi.StringOutput {
	return o.ApplyT(func(v LookupSystemHaResult) string { return v.Weight }).(pulumi.StringOutput)
}

func init() {
	pulumi.RegisterOutputType(LookupSystemHaResultOutput{})
}
