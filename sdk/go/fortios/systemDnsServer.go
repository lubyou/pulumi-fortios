// Code generated by the Pulumi Terraform Bridge (tfgen) Tool DO NOT EDIT.
// *** WARNING: Do not edit by hand unless you're certain you know what you are doing! ***

package fortios

import (
	"context"
	"reflect"

	"github.com/lubyou/pulumi-fortios/sdk/go/fortios/internal"
	"github.com/pulumi/pulumi/sdk/v3/go/pulumi"
)

type SystemDnsServer struct {
	pulumi.CustomResourceState

	DnsfilterProfile pulumi.StringOutput    `pulumi:"dnsfilterProfile"`
	Doh              pulumi.StringOutput    `pulumi:"doh"`
	Mode             pulumi.StringOutput    `pulumi:"mode"`
	Name             pulumi.StringOutput    `pulumi:"name"`
	Vdomparam        pulumi.StringPtrOutput `pulumi:"vdomparam"`
}

// NewSystemDnsServer registers a new resource with the given unique name, arguments, and options.
func NewSystemDnsServer(ctx *pulumi.Context,
	name string, args *SystemDnsServerArgs, opts ...pulumi.ResourceOption) (*SystemDnsServer, error) {
	if args == nil {
		args = &SystemDnsServerArgs{}
	}

	opts = internal.PkgResourceDefaultOpts(opts)
	var resource SystemDnsServer
	err := ctx.RegisterResource("fortios:index/systemDnsServer:SystemDnsServer", name, args, &resource, opts...)
	if err != nil {
		return nil, err
	}
	return &resource, nil
}

// GetSystemDnsServer gets an existing SystemDnsServer resource's state with the given name, ID, and optional
// state properties that are used to uniquely qualify the lookup (nil if not required).
func GetSystemDnsServer(ctx *pulumi.Context,
	name string, id pulumi.IDInput, state *SystemDnsServerState, opts ...pulumi.ResourceOption) (*SystemDnsServer, error) {
	var resource SystemDnsServer
	err := ctx.ReadResource("fortios:index/systemDnsServer:SystemDnsServer", name, id, state, &resource, opts...)
	if err != nil {
		return nil, err
	}
	return &resource, nil
}

// Input properties used for looking up and filtering SystemDnsServer resources.
type systemDnsServerState struct {
	DnsfilterProfile *string `pulumi:"dnsfilterProfile"`
	Doh              *string `pulumi:"doh"`
	Mode             *string `pulumi:"mode"`
	Name             *string `pulumi:"name"`
	Vdomparam        *string `pulumi:"vdomparam"`
}

type SystemDnsServerState struct {
	DnsfilterProfile pulumi.StringPtrInput
	Doh              pulumi.StringPtrInput
	Mode             pulumi.StringPtrInput
	Name             pulumi.StringPtrInput
	Vdomparam        pulumi.StringPtrInput
}

func (SystemDnsServerState) ElementType() reflect.Type {
	return reflect.TypeOf((*systemDnsServerState)(nil)).Elem()
}

type systemDnsServerArgs struct {
	DnsfilterProfile *string `pulumi:"dnsfilterProfile"`
	Doh              *string `pulumi:"doh"`
	Mode             *string `pulumi:"mode"`
	Name             *string `pulumi:"name"`
	Vdomparam        *string `pulumi:"vdomparam"`
}

// The set of arguments for constructing a SystemDnsServer resource.
type SystemDnsServerArgs struct {
	DnsfilterProfile pulumi.StringPtrInput
	Doh              pulumi.StringPtrInput
	Mode             pulumi.StringPtrInput
	Name             pulumi.StringPtrInput
	Vdomparam        pulumi.StringPtrInput
}

func (SystemDnsServerArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*systemDnsServerArgs)(nil)).Elem()
}

type SystemDnsServerInput interface {
	pulumi.Input

	ToSystemDnsServerOutput() SystemDnsServerOutput
	ToSystemDnsServerOutputWithContext(ctx context.Context) SystemDnsServerOutput
}

func (*SystemDnsServer) ElementType() reflect.Type {
	return reflect.TypeOf((**SystemDnsServer)(nil)).Elem()
}

func (i *SystemDnsServer) ToSystemDnsServerOutput() SystemDnsServerOutput {
	return i.ToSystemDnsServerOutputWithContext(context.Background())
}

func (i *SystemDnsServer) ToSystemDnsServerOutputWithContext(ctx context.Context) SystemDnsServerOutput {
	return pulumi.ToOutputWithContext(ctx, i).(SystemDnsServerOutput)
}

// SystemDnsServerArrayInput is an input type that accepts SystemDnsServerArray and SystemDnsServerArrayOutput values.
// You can construct a concrete instance of `SystemDnsServerArrayInput` via:
//
//	SystemDnsServerArray{ SystemDnsServerArgs{...} }
type SystemDnsServerArrayInput interface {
	pulumi.Input

	ToSystemDnsServerArrayOutput() SystemDnsServerArrayOutput
	ToSystemDnsServerArrayOutputWithContext(context.Context) SystemDnsServerArrayOutput
}

type SystemDnsServerArray []SystemDnsServerInput

func (SystemDnsServerArray) ElementType() reflect.Type {
	return reflect.TypeOf((*[]*SystemDnsServer)(nil)).Elem()
}

func (i SystemDnsServerArray) ToSystemDnsServerArrayOutput() SystemDnsServerArrayOutput {
	return i.ToSystemDnsServerArrayOutputWithContext(context.Background())
}

func (i SystemDnsServerArray) ToSystemDnsServerArrayOutputWithContext(ctx context.Context) SystemDnsServerArrayOutput {
	return pulumi.ToOutputWithContext(ctx, i).(SystemDnsServerArrayOutput)
}

// SystemDnsServerMapInput is an input type that accepts SystemDnsServerMap and SystemDnsServerMapOutput values.
// You can construct a concrete instance of `SystemDnsServerMapInput` via:
//
//	SystemDnsServerMap{ "key": SystemDnsServerArgs{...} }
type SystemDnsServerMapInput interface {
	pulumi.Input

	ToSystemDnsServerMapOutput() SystemDnsServerMapOutput
	ToSystemDnsServerMapOutputWithContext(context.Context) SystemDnsServerMapOutput
}

type SystemDnsServerMap map[string]SystemDnsServerInput

func (SystemDnsServerMap) ElementType() reflect.Type {
	return reflect.TypeOf((*map[string]*SystemDnsServer)(nil)).Elem()
}

func (i SystemDnsServerMap) ToSystemDnsServerMapOutput() SystemDnsServerMapOutput {
	return i.ToSystemDnsServerMapOutputWithContext(context.Background())
}

func (i SystemDnsServerMap) ToSystemDnsServerMapOutputWithContext(ctx context.Context) SystemDnsServerMapOutput {
	return pulumi.ToOutputWithContext(ctx, i).(SystemDnsServerMapOutput)
}

type SystemDnsServerOutput struct{ *pulumi.OutputState }

func (SystemDnsServerOutput) ElementType() reflect.Type {
	return reflect.TypeOf((**SystemDnsServer)(nil)).Elem()
}

func (o SystemDnsServerOutput) ToSystemDnsServerOutput() SystemDnsServerOutput {
	return o
}

func (o SystemDnsServerOutput) ToSystemDnsServerOutputWithContext(ctx context.Context) SystemDnsServerOutput {
	return o
}

func (o SystemDnsServerOutput) DnsfilterProfile() pulumi.StringOutput {
	return o.ApplyT(func(v *SystemDnsServer) pulumi.StringOutput { return v.DnsfilterProfile }).(pulumi.StringOutput)
}

func (o SystemDnsServerOutput) Doh() pulumi.StringOutput {
	return o.ApplyT(func(v *SystemDnsServer) pulumi.StringOutput { return v.Doh }).(pulumi.StringOutput)
}

func (o SystemDnsServerOutput) Mode() pulumi.StringOutput {
	return o.ApplyT(func(v *SystemDnsServer) pulumi.StringOutput { return v.Mode }).(pulumi.StringOutput)
}

func (o SystemDnsServerOutput) Name() pulumi.StringOutput {
	return o.ApplyT(func(v *SystemDnsServer) pulumi.StringOutput { return v.Name }).(pulumi.StringOutput)
}

func (o SystemDnsServerOutput) Vdomparam() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *SystemDnsServer) pulumi.StringPtrOutput { return v.Vdomparam }).(pulumi.StringPtrOutput)
}

type SystemDnsServerArrayOutput struct{ *pulumi.OutputState }

func (SystemDnsServerArrayOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*[]*SystemDnsServer)(nil)).Elem()
}

func (o SystemDnsServerArrayOutput) ToSystemDnsServerArrayOutput() SystemDnsServerArrayOutput {
	return o
}

func (o SystemDnsServerArrayOutput) ToSystemDnsServerArrayOutputWithContext(ctx context.Context) SystemDnsServerArrayOutput {
	return o
}

func (o SystemDnsServerArrayOutput) Index(i pulumi.IntInput) SystemDnsServerOutput {
	return pulumi.All(o, i).ApplyT(func(vs []interface{}) *SystemDnsServer {
		return vs[0].([]*SystemDnsServer)[vs[1].(int)]
	}).(SystemDnsServerOutput)
}

type SystemDnsServerMapOutput struct{ *pulumi.OutputState }

func (SystemDnsServerMapOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*map[string]*SystemDnsServer)(nil)).Elem()
}

func (o SystemDnsServerMapOutput) ToSystemDnsServerMapOutput() SystemDnsServerMapOutput {
	return o
}

func (o SystemDnsServerMapOutput) ToSystemDnsServerMapOutputWithContext(ctx context.Context) SystemDnsServerMapOutput {
	return o
}

func (o SystemDnsServerMapOutput) MapIndex(k pulumi.StringInput) SystemDnsServerOutput {
	return pulumi.All(o, k).ApplyT(func(vs []interface{}) *SystemDnsServer {
		return vs[0].(map[string]*SystemDnsServer)[vs[1].(string)]
	}).(SystemDnsServerOutput)
}

func init() {
	pulumi.RegisterInputType(reflect.TypeOf((*SystemDnsServerInput)(nil)).Elem(), &SystemDnsServer{})
	pulumi.RegisterInputType(reflect.TypeOf((*SystemDnsServerArrayInput)(nil)).Elem(), SystemDnsServerArray{})
	pulumi.RegisterInputType(reflect.TypeOf((*SystemDnsServerMapInput)(nil)).Elem(), SystemDnsServerMap{})
	pulumi.RegisterOutputType(SystemDnsServerOutput{})
	pulumi.RegisterOutputType(SystemDnsServerArrayOutput{})
	pulumi.RegisterOutputType(SystemDnsServerMapOutput{})
}
