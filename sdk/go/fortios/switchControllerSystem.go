// Code generated by the Pulumi Terraform Bridge (tfgen) Tool DO NOT EDIT.
// *** WARNING: Do not edit by hand unless you're certain you know what you are doing! ***

package fortios

import (
	"context"
	"reflect"

	"github.com/lubyou/pulumi-fortios/sdk/go/fortios/internal"
	"github.com/pulumi/pulumi/sdk/v3/go/pulumi"
	"github.com/pulumi/pulumi/sdk/v3/go/pulumix"
)

type SwitchControllerSystem struct {
	pulumi.CustomResourceState

	CaputpEchoInterval      pulumi.IntOutput       `pulumi:"caputpEchoInterval"`
	CaputpMaxRetransmit     pulumi.IntOutput       `pulumi:"caputpMaxRetransmit"`
	DataSyncInterval        pulumi.IntOutput       `pulumi:"dataSyncInterval"`
	DynamicPeriodicInterval pulumi.IntOutput       `pulumi:"dynamicPeriodicInterval"`
	IotHoldoff              pulumi.IntOutput       `pulumi:"iotHoldoff"`
	IotMacIdle              pulumi.IntOutput       `pulumi:"iotMacIdle"`
	IotScanInterval         pulumi.IntOutput       `pulumi:"iotScanInterval"`
	IotWeightThreshold      pulumi.IntOutput       `pulumi:"iotWeightThreshold"`
	NacPeriodicInterval     pulumi.IntOutput       `pulumi:"nacPeriodicInterval"`
	ParallelProcess         pulumi.IntOutput       `pulumi:"parallelProcess"`
	ParallelProcessOverride pulumi.StringOutput    `pulumi:"parallelProcessOverride"`
	TunnelMode              pulumi.StringOutput    `pulumi:"tunnelMode"`
	Vdomparam               pulumi.StringPtrOutput `pulumi:"vdomparam"`
}

// NewSwitchControllerSystem registers a new resource with the given unique name, arguments, and options.
func NewSwitchControllerSystem(ctx *pulumi.Context,
	name string, args *SwitchControllerSystemArgs, opts ...pulumi.ResourceOption) (*SwitchControllerSystem, error) {
	if args == nil {
		args = &SwitchControllerSystemArgs{}
	}

	opts = internal.PkgResourceDefaultOpts(opts)
	var resource SwitchControllerSystem
	err := ctx.RegisterResource("fortios:index/switchControllerSystem:SwitchControllerSystem", name, args, &resource, opts...)
	if err != nil {
		return nil, err
	}
	return &resource, nil
}

// GetSwitchControllerSystem gets an existing SwitchControllerSystem resource's state with the given name, ID, and optional
// state properties that are used to uniquely qualify the lookup (nil if not required).
func GetSwitchControllerSystem(ctx *pulumi.Context,
	name string, id pulumi.IDInput, state *SwitchControllerSystemState, opts ...pulumi.ResourceOption) (*SwitchControllerSystem, error) {
	var resource SwitchControllerSystem
	err := ctx.ReadResource("fortios:index/switchControllerSystem:SwitchControllerSystem", name, id, state, &resource, opts...)
	if err != nil {
		return nil, err
	}
	return &resource, nil
}

// Input properties used for looking up and filtering SwitchControllerSystem resources.
type switchControllerSystemState struct {
	CaputpEchoInterval      *int    `pulumi:"caputpEchoInterval"`
	CaputpMaxRetransmit     *int    `pulumi:"caputpMaxRetransmit"`
	DataSyncInterval        *int    `pulumi:"dataSyncInterval"`
	DynamicPeriodicInterval *int    `pulumi:"dynamicPeriodicInterval"`
	IotHoldoff              *int    `pulumi:"iotHoldoff"`
	IotMacIdle              *int    `pulumi:"iotMacIdle"`
	IotScanInterval         *int    `pulumi:"iotScanInterval"`
	IotWeightThreshold      *int    `pulumi:"iotWeightThreshold"`
	NacPeriodicInterval     *int    `pulumi:"nacPeriodicInterval"`
	ParallelProcess         *int    `pulumi:"parallelProcess"`
	ParallelProcessOverride *string `pulumi:"parallelProcessOverride"`
	TunnelMode              *string `pulumi:"tunnelMode"`
	Vdomparam               *string `pulumi:"vdomparam"`
}

type SwitchControllerSystemState struct {
	CaputpEchoInterval      pulumi.IntPtrInput
	CaputpMaxRetransmit     pulumi.IntPtrInput
	DataSyncInterval        pulumi.IntPtrInput
	DynamicPeriodicInterval pulumi.IntPtrInput
	IotHoldoff              pulumi.IntPtrInput
	IotMacIdle              pulumi.IntPtrInput
	IotScanInterval         pulumi.IntPtrInput
	IotWeightThreshold      pulumi.IntPtrInput
	NacPeriodicInterval     pulumi.IntPtrInput
	ParallelProcess         pulumi.IntPtrInput
	ParallelProcessOverride pulumi.StringPtrInput
	TunnelMode              pulumi.StringPtrInput
	Vdomparam               pulumi.StringPtrInput
}

func (SwitchControllerSystemState) ElementType() reflect.Type {
	return reflect.TypeOf((*switchControllerSystemState)(nil)).Elem()
}

type switchControllerSystemArgs struct {
	CaputpEchoInterval      *int    `pulumi:"caputpEchoInterval"`
	CaputpMaxRetransmit     *int    `pulumi:"caputpMaxRetransmit"`
	DataSyncInterval        *int    `pulumi:"dataSyncInterval"`
	DynamicPeriodicInterval *int    `pulumi:"dynamicPeriodicInterval"`
	IotHoldoff              *int    `pulumi:"iotHoldoff"`
	IotMacIdle              *int    `pulumi:"iotMacIdle"`
	IotScanInterval         *int    `pulumi:"iotScanInterval"`
	IotWeightThreshold      *int    `pulumi:"iotWeightThreshold"`
	NacPeriodicInterval     *int    `pulumi:"nacPeriodicInterval"`
	ParallelProcess         *int    `pulumi:"parallelProcess"`
	ParallelProcessOverride *string `pulumi:"parallelProcessOverride"`
	TunnelMode              *string `pulumi:"tunnelMode"`
	Vdomparam               *string `pulumi:"vdomparam"`
}

// The set of arguments for constructing a SwitchControllerSystem resource.
type SwitchControllerSystemArgs struct {
	CaputpEchoInterval      pulumi.IntPtrInput
	CaputpMaxRetransmit     pulumi.IntPtrInput
	DataSyncInterval        pulumi.IntPtrInput
	DynamicPeriodicInterval pulumi.IntPtrInput
	IotHoldoff              pulumi.IntPtrInput
	IotMacIdle              pulumi.IntPtrInput
	IotScanInterval         pulumi.IntPtrInput
	IotWeightThreshold      pulumi.IntPtrInput
	NacPeriodicInterval     pulumi.IntPtrInput
	ParallelProcess         pulumi.IntPtrInput
	ParallelProcessOverride pulumi.StringPtrInput
	TunnelMode              pulumi.StringPtrInput
	Vdomparam               pulumi.StringPtrInput
}

func (SwitchControllerSystemArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*switchControllerSystemArgs)(nil)).Elem()
}

type SwitchControllerSystemInput interface {
	pulumi.Input

	ToSwitchControllerSystemOutput() SwitchControllerSystemOutput
	ToSwitchControllerSystemOutputWithContext(ctx context.Context) SwitchControllerSystemOutput
}

func (*SwitchControllerSystem) ElementType() reflect.Type {
	return reflect.TypeOf((**SwitchControllerSystem)(nil)).Elem()
}

func (i *SwitchControllerSystem) ToSwitchControllerSystemOutput() SwitchControllerSystemOutput {
	return i.ToSwitchControllerSystemOutputWithContext(context.Background())
}

func (i *SwitchControllerSystem) ToSwitchControllerSystemOutputWithContext(ctx context.Context) SwitchControllerSystemOutput {
	return pulumi.ToOutputWithContext(ctx, i).(SwitchControllerSystemOutput)
}

func (i *SwitchControllerSystem) ToOutput(ctx context.Context) pulumix.Output[*SwitchControllerSystem] {
	return pulumix.Output[*SwitchControllerSystem]{
		OutputState: i.ToSwitchControllerSystemOutputWithContext(ctx).OutputState,
	}
}

// SwitchControllerSystemArrayInput is an input type that accepts SwitchControllerSystemArray and SwitchControllerSystemArrayOutput values.
// You can construct a concrete instance of `SwitchControllerSystemArrayInput` via:
//
//	SwitchControllerSystemArray{ SwitchControllerSystemArgs{...} }
type SwitchControllerSystemArrayInput interface {
	pulumi.Input

	ToSwitchControllerSystemArrayOutput() SwitchControllerSystemArrayOutput
	ToSwitchControllerSystemArrayOutputWithContext(context.Context) SwitchControllerSystemArrayOutput
}

type SwitchControllerSystemArray []SwitchControllerSystemInput

func (SwitchControllerSystemArray) ElementType() reflect.Type {
	return reflect.TypeOf((*[]*SwitchControllerSystem)(nil)).Elem()
}

func (i SwitchControllerSystemArray) ToSwitchControllerSystemArrayOutput() SwitchControllerSystemArrayOutput {
	return i.ToSwitchControllerSystemArrayOutputWithContext(context.Background())
}

func (i SwitchControllerSystemArray) ToSwitchControllerSystemArrayOutputWithContext(ctx context.Context) SwitchControllerSystemArrayOutput {
	return pulumi.ToOutputWithContext(ctx, i).(SwitchControllerSystemArrayOutput)
}

func (i SwitchControllerSystemArray) ToOutput(ctx context.Context) pulumix.Output[[]*SwitchControllerSystem] {
	return pulumix.Output[[]*SwitchControllerSystem]{
		OutputState: i.ToSwitchControllerSystemArrayOutputWithContext(ctx).OutputState,
	}
}

// SwitchControllerSystemMapInput is an input type that accepts SwitchControllerSystemMap and SwitchControllerSystemMapOutput values.
// You can construct a concrete instance of `SwitchControllerSystemMapInput` via:
//
//	SwitchControllerSystemMap{ "key": SwitchControllerSystemArgs{...} }
type SwitchControllerSystemMapInput interface {
	pulumi.Input

	ToSwitchControllerSystemMapOutput() SwitchControllerSystemMapOutput
	ToSwitchControllerSystemMapOutputWithContext(context.Context) SwitchControllerSystemMapOutput
}

type SwitchControllerSystemMap map[string]SwitchControllerSystemInput

func (SwitchControllerSystemMap) ElementType() reflect.Type {
	return reflect.TypeOf((*map[string]*SwitchControllerSystem)(nil)).Elem()
}

func (i SwitchControllerSystemMap) ToSwitchControllerSystemMapOutput() SwitchControllerSystemMapOutput {
	return i.ToSwitchControllerSystemMapOutputWithContext(context.Background())
}

func (i SwitchControllerSystemMap) ToSwitchControllerSystemMapOutputWithContext(ctx context.Context) SwitchControllerSystemMapOutput {
	return pulumi.ToOutputWithContext(ctx, i).(SwitchControllerSystemMapOutput)
}

func (i SwitchControllerSystemMap) ToOutput(ctx context.Context) pulumix.Output[map[string]*SwitchControllerSystem] {
	return pulumix.Output[map[string]*SwitchControllerSystem]{
		OutputState: i.ToSwitchControllerSystemMapOutputWithContext(ctx).OutputState,
	}
}

type SwitchControllerSystemOutput struct{ *pulumi.OutputState }

func (SwitchControllerSystemOutput) ElementType() reflect.Type {
	return reflect.TypeOf((**SwitchControllerSystem)(nil)).Elem()
}

func (o SwitchControllerSystemOutput) ToSwitchControllerSystemOutput() SwitchControllerSystemOutput {
	return o
}

func (o SwitchControllerSystemOutput) ToSwitchControllerSystemOutputWithContext(ctx context.Context) SwitchControllerSystemOutput {
	return o
}

func (o SwitchControllerSystemOutput) ToOutput(ctx context.Context) pulumix.Output[*SwitchControllerSystem] {
	return pulumix.Output[*SwitchControllerSystem]{
		OutputState: o.OutputState,
	}
}

func (o SwitchControllerSystemOutput) CaputpEchoInterval() pulumi.IntOutput {
	return o.ApplyT(func(v *SwitchControllerSystem) pulumi.IntOutput { return v.CaputpEchoInterval }).(pulumi.IntOutput)
}

func (o SwitchControllerSystemOutput) CaputpMaxRetransmit() pulumi.IntOutput {
	return o.ApplyT(func(v *SwitchControllerSystem) pulumi.IntOutput { return v.CaputpMaxRetransmit }).(pulumi.IntOutput)
}

func (o SwitchControllerSystemOutput) DataSyncInterval() pulumi.IntOutput {
	return o.ApplyT(func(v *SwitchControllerSystem) pulumi.IntOutput { return v.DataSyncInterval }).(pulumi.IntOutput)
}

func (o SwitchControllerSystemOutput) DynamicPeriodicInterval() pulumi.IntOutput {
	return o.ApplyT(func(v *SwitchControllerSystem) pulumi.IntOutput { return v.DynamicPeriodicInterval }).(pulumi.IntOutput)
}

func (o SwitchControllerSystemOutput) IotHoldoff() pulumi.IntOutput {
	return o.ApplyT(func(v *SwitchControllerSystem) pulumi.IntOutput { return v.IotHoldoff }).(pulumi.IntOutput)
}

func (o SwitchControllerSystemOutput) IotMacIdle() pulumi.IntOutput {
	return o.ApplyT(func(v *SwitchControllerSystem) pulumi.IntOutput { return v.IotMacIdle }).(pulumi.IntOutput)
}

func (o SwitchControllerSystemOutput) IotScanInterval() pulumi.IntOutput {
	return o.ApplyT(func(v *SwitchControllerSystem) pulumi.IntOutput { return v.IotScanInterval }).(pulumi.IntOutput)
}

func (o SwitchControllerSystemOutput) IotWeightThreshold() pulumi.IntOutput {
	return o.ApplyT(func(v *SwitchControllerSystem) pulumi.IntOutput { return v.IotWeightThreshold }).(pulumi.IntOutput)
}

func (o SwitchControllerSystemOutput) NacPeriodicInterval() pulumi.IntOutput {
	return o.ApplyT(func(v *SwitchControllerSystem) pulumi.IntOutput { return v.NacPeriodicInterval }).(pulumi.IntOutput)
}

func (o SwitchControllerSystemOutput) ParallelProcess() pulumi.IntOutput {
	return o.ApplyT(func(v *SwitchControllerSystem) pulumi.IntOutput { return v.ParallelProcess }).(pulumi.IntOutput)
}

func (o SwitchControllerSystemOutput) ParallelProcessOverride() pulumi.StringOutput {
	return o.ApplyT(func(v *SwitchControllerSystem) pulumi.StringOutput { return v.ParallelProcessOverride }).(pulumi.StringOutput)
}

func (o SwitchControllerSystemOutput) TunnelMode() pulumi.StringOutput {
	return o.ApplyT(func(v *SwitchControllerSystem) pulumi.StringOutput { return v.TunnelMode }).(pulumi.StringOutput)
}

func (o SwitchControllerSystemOutput) Vdomparam() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *SwitchControllerSystem) pulumi.StringPtrOutput { return v.Vdomparam }).(pulumi.StringPtrOutput)
}

type SwitchControllerSystemArrayOutput struct{ *pulumi.OutputState }

func (SwitchControllerSystemArrayOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*[]*SwitchControllerSystem)(nil)).Elem()
}

func (o SwitchControllerSystemArrayOutput) ToSwitchControllerSystemArrayOutput() SwitchControllerSystemArrayOutput {
	return o
}

func (o SwitchControllerSystemArrayOutput) ToSwitchControllerSystemArrayOutputWithContext(ctx context.Context) SwitchControllerSystemArrayOutput {
	return o
}

func (o SwitchControllerSystemArrayOutput) ToOutput(ctx context.Context) pulumix.Output[[]*SwitchControllerSystem] {
	return pulumix.Output[[]*SwitchControllerSystem]{
		OutputState: o.OutputState,
	}
}

func (o SwitchControllerSystemArrayOutput) Index(i pulumi.IntInput) SwitchControllerSystemOutput {
	return pulumi.All(o, i).ApplyT(func(vs []interface{}) *SwitchControllerSystem {
		return vs[0].([]*SwitchControllerSystem)[vs[1].(int)]
	}).(SwitchControllerSystemOutput)
}

type SwitchControllerSystemMapOutput struct{ *pulumi.OutputState }

func (SwitchControllerSystemMapOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*map[string]*SwitchControllerSystem)(nil)).Elem()
}

func (o SwitchControllerSystemMapOutput) ToSwitchControllerSystemMapOutput() SwitchControllerSystemMapOutput {
	return o
}

func (o SwitchControllerSystemMapOutput) ToSwitchControllerSystemMapOutputWithContext(ctx context.Context) SwitchControllerSystemMapOutput {
	return o
}

func (o SwitchControllerSystemMapOutput) ToOutput(ctx context.Context) pulumix.Output[map[string]*SwitchControllerSystem] {
	return pulumix.Output[map[string]*SwitchControllerSystem]{
		OutputState: o.OutputState,
	}
}

func (o SwitchControllerSystemMapOutput) MapIndex(k pulumi.StringInput) SwitchControllerSystemOutput {
	return pulumi.All(o, k).ApplyT(func(vs []interface{}) *SwitchControllerSystem {
		return vs[0].(map[string]*SwitchControllerSystem)[vs[1].(string)]
	}).(SwitchControllerSystemOutput)
}

func init() {
	pulumi.RegisterInputType(reflect.TypeOf((*SwitchControllerSystemInput)(nil)).Elem(), &SwitchControllerSystem{})
	pulumi.RegisterInputType(reflect.TypeOf((*SwitchControllerSystemArrayInput)(nil)).Elem(), SwitchControllerSystemArray{})
	pulumi.RegisterInputType(reflect.TypeOf((*SwitchControllerSystemMapInput)(nil)).Elem(), SwitchControllerSystemMap{})
	pulumi.RegisterOutputType(SwitchControllerSystemOutput{})
	pulumi.RegisterOutputType(SwitchControllerSystemArrayOutput{})
	pulumi.RegisterOutputType(SwitchControllerSystemMapOutput{})
}
