// *** WARNING: this file was generated by the Pulumi Terraform Bridge (tfgen) Tool. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

package fortios

import (
	"context"
	"reflect"

	"github.com/pulumi/pulumi/sdk/v3/go/pulumi"
)

// Provides a resource to configure access profiles of FortiOS.
//
// !> **Warning:** The resource will be deprecated and replaced by new resource `SystemAccprofile`, we recommend that you use the new resource.
//
// ## Example Usage
//
// ```go
// package main
//
// import (
// 	"github.com/pulumi/pulumi-fortios/sdk/go/fortios"
// 	"github.com/pulumi/pulumi/sdk/v3/go/pulumi"
// )
//
// func main() {
// 	pulumi.Run(func(ctx *pulumi.Context) error {
// 		_, err := fortios.NewSystemAdminProfiles(ctx, "test1", &fortios.SystemAdminProfilesArgs{
// 			AdmintimeoutOverride: pulumi.String("disable"),
// 			Authgrp:              pulumi.String("none"),
// 			Comments:             pulumi.String("test"),
// 			Ftviewgrp:            pulumi.String("read"),
// 			Fwgrp:                pulumi.String("none"),
// 			Loggrp:               pulumi.String("none"),
// 			Netgrp:               pulumi.String("none"),
// 			Scope:                pulumi.String("vdom"),
// 			Secfabgrp:            pulumi.String("read-write"),
// 			Sysgrp:               pulumi.String("read"),
// 			Utmgrp:               pulumi.String("none"),
// 			Vpngrp:               pulumi.String("none"),
// 			Wanoptgrp:            pulumi.String("none"),
// 			Wifi:                 pulumi.String("none"),
// 		})
// 		if err != nil {
// 			return err
// 		}
// 		return nil
// 	})
// }
// ```
type SystemAdminProfiles struct {
	pulumi.CustomResourceState

	// Enable/disable overriding the global administrator idle timeout.
	AdmintimeoutOverride pulumi.StringOutput `pulumi:"admintimeoutOverride"`
	// Administrator access to Users and Devices.
	Authgrp pulumi.StringOutput `pulumi:"authgrp"`
	// Comment.
	Comments pulumi.StringPtrOutput `pulumi:"comments"`
	// FortiView.
	Ftviewgrp pulumi.StringOutput `pulumi:"ftviewgrp"`
	// Administrator access to the Firewall configuration.
	Fwgrp pulumi.StringOutput `pulumi:"fwgrp"`
	// Administrator access to Logging and Reporting including viewing log messages.
	Loggrp pulumi.StringOutput `pulumi:"loggrp"`
	// Profile name.
	Name pulumi.StringOutput `pulumi:"name"`
	// Network Configuration.
	Netgrp pulumi.StringOutput `pulumi:"netgrp"`
	// Scope of admin access.
	Scope pulumi.StringOutput `pulumi:"scope"`
	// Security Fabric.
	Secfabgrp pulumi.StringOutput `pulumi:"secfabgrp"`
	// System Configuration.
	Sysgrp pulumi.StringOutput `pulumi:"sysgrp"`
	// Administrator access to Security Profiles.
	Utmgrp pulumi.StringOutput `pulumi:"utmgrp"`
	// Administrator access to IPsec, SSL, PPTP, and L2TP VPN.
	Vpngrp pulumi.StringOutput `pulumi:"vpngrp"`
	// Administrator access to WAN Opt & Cache.
	Wanoptgrp pulumi.StringOutput `pulumi:"wanoptgrp"`
	// Administrator access to the WiFi controller and Switch controller.
	Wifi pulumi.StringOutput `pulumi:"wifi"`
}

// NewSystemAdminProfiles registers a new resource with the given unique name, arguments, and options.
func NewSystemAdminProfiles(ctx *pulumi.Context,
	name string, args *SystemAdminProfilesArgs, opts ...pulumi.ResourceOption) (*SystemAdminProfiles, error) {
	if args == nil {
		args = &SystemAdminProfilesArgs{}
	}

	var resource SystemAdminProfiles
	err := ctx.RegisterResource("fortios:index/systemAdminProfiles:SystemAdminProfiles", name, args, &resource, opts...)
	if err != nil {
		return nil, err
	}
	return &resource, nil
}

// GetSystemAdminProfiles gets an existing SystemAdminProfiles resource's state with the given name, ID, and optional
// state properties that are used to uniquely qualify the lookup (nil if not required).
func GetSystemAdminProfiles(ctx *pulumi.Context,
	name string, id pulumi.IDInput, state *SystemAdminProfilesState, opts ...pulumi.ResourceOption) (*SystemAdminProfiles, error) {
	var resource SystemAdminProfiles
	err := ctx.ReadResource("fortios:index/systemAdminProfiles:SystemAdminProfiles", name, id, state, &resource, opts...)
	if err != nil {
		return nil, err
	}
	return &resource, nil
}

// Input properties used for looking up and filtering SystemAdminProfiles resources.
type systemAdminProfilesState struct {
	// Enable/disable overriding the global administrator idle timeout.
	AdmintimeoutOverride *string `pulumi:"admintimeoutOverride"`
	// Administrator access to Users and Devices.
	Authgrp *string `pulumi:"authgrp"`
	// Comment.
	Comments *string `pulumi:"comments"`
	// FortiView.
	Ftviewgrp *string `pulumi:"ftviewgrp"`
	// Administrator access to the Firewall configuration.
	Fwgrp *string `pulumi:"fwgrp"`
	// Administrator access to Logging and Reporting including viewing log messages.
	Loggrp *string `pulumi:"loggrp"`
	// Profile name.
	Name *string `pulumi:"name"`
	// Network Configuration.
	Netgrp *string `pulumi:"netgrp"`
	// Scope of admin access.
	Scope *string `pulumi:"scope"`
	// Security Fabric.
	Secfabgrp *string `pulumi:"secfabgrp"`
	// System Configuration.
	Sysgrp *string `pulumi:"sysgrp"`
	// Administrator access to Security Profiles.
	Utmgrp *string `pulumi:"utmgrp"`
	// Administrator access to IPsec, SSL, PPTP, and L2TP VPN.
	Vpngrp *string `pulumi:"vpngrp"`
	// Administrator access to WAN Opt & Cache.
	Wanoptgrp *string `pulumi:"wanoptgrp"`
	// Administrator access to the WiFi controller and Switch controller.
	Wifi *string `pulumi:"wifi"`
}

type SystemAdminProfilesState struct {
	// Enable/disable overriding the global administrator idle timeout.
	AdmintimeoutOverride pulumi.StringPtrInput
	// Administrator access to Users and Devices.
	Authgrp pulumi.StringPtrInput
	// Comment.
	Comments pulumi.StringPtrInput
	// FortiView.
	Ftviewgrp pulumi.StringPtrInput
	// Administrator access to the Firewall configuration.
	Fwgrp pulumi.StringPtrInput
	// Administrator access to Logging and Reporting including viewing log messages.
	Loggrp pulumi.StringPtrInput
	// Profile name.
	Name pulumi.StringPtrInput
	// Network Configuration.
	Netgrp pulumi.StringPtrInput
	// Scope of admin access.
	Scope pulumi.StringPtrInput
	// Security Fabric.
	Secfabgrp pulumi.StringPtrInput
	// System Configuration.
	Sysgrp pulumi.StringPtrInput
	// Administrator access to Security Profiles.
	Utmgrp pulumi.StringPtrInput
	// Administrator access to IPsec, SSL, PPTP, and L2TP VPN.
	Vpngrp pulumi.StringPtrInput
	// Administrator access to WAN Opt & Cache.
	Wanoptgrp pulumi.StringPtrInput
	// Administrator access to the WiFi controller and Switch controller.
	Wifi pulumi.StringPtrInput
}

func (SystemAdminProfilesState) ElementType() reflect.Type {
	return reflect.TypeOf((*systemAdminProfilesState)(nil)).Elem()
}

type systemAdminProfilesArgs struct {
	// Enable/disable overriding the global administrator idle timeout.
	AdmintimeoutOverride *string `pulumi:"admintimeoutOverride"`
	// Administrator access to Users and Devices.
	Authgrp *string `pulumi:"authgrp"`
	// Comment.
	Comments *string `pulumi:"comments"`
	// FortiView.
	Ftviewgrp *string `pulumi:"ftviewgrp"`
	// Administrator access to the Firewall configuration.
	Fwgrp *string `pulumi:"fwgrp"`
	// Administrator access to Logging and Reporting including viewing log messages.
	Loggrp *string `pulumi:"loggrp"`
	// Profile name.
	Name *string `pulumi:"name"`
	// Network Configuration.
	Netgrp *string `pulumi:"netgrp"`
	// Scope of admin access.
	Scope *string `pulumi:"scope"`
	// Security Fabric.
	Secfabgrp *string `pulumi:"secfabgrp"`
	// System Configuration.
	Sysgrp *string `pulumi:"sysgrp"`
	// Administrator access to Security Profiles.
	Utmgrp *string `pulumi:"utmgrp"`
	// Administrator access to IPsec, SSL, PPTP, and L2TP VPN.
	Vpngrp *string `pulumi:"vpngrp"`
	// Administrator access to WAN Opt & Cache.
	Wanoptgrp *string `pulumi:"wanoptgrp"`
	// Administrator access to the WiFi controller and Switch controller.
	Wifi *string `pulumi:"wifi"`
}

// The set of arguments for constructing a SystemAdminProfiles resource.
type SystemAdminProfilesArgs struct {
	// Enable/disable overriding the global administrator idle timeout.
	AdmintimeoutOverride pulumi.StringPtrInput
	// Administrator access to Users and Devices.
	Authgrp pulumi.StringPtrInput
	// Comment.
	Comments pulumi.StringPtrInput
	// FortiView.
	Ftviewgrp pulumi.StringPtrInput
	// Administrator access to the Firewall configuration.
	Fwgrp pulumi.StringPtrInput
	// Administrator access to Logging and Reporting including viewing log messages.
	Loggrp pulumi.StringPtrInput
	// Profile name.
	Name pulumi.StringPtrInput
	// Network Configuration.
	Netgrp pulumi.StringPtrInput
	// Scope of admin access.
	Scope pulumi.StringPtrInput
	// Security Fabric.
	Secfabgrp pulumi.StringPtrInput
	// System Configuration.
	Sysgrp pulumi.StringPtrInput
	// Administrator access to Security Profiles.
	Utmgrp pulumi.StringPtrInput
	// Administrator access to IPsec, SSL, PPTP, and L2TP VPN.
	Vpngrp pulumi.StringPtrInput
	// Administrator access to WAN Opt & Cache.
	Wanoptgrp pulumi.StringPtrInput
	// Administrator access to the WiFi controller and Switch controller.
	Wifi pulumi.StringPtrInput
}

func (SystemAdminProfilesArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*systemAdminProfilesArgs)(nil)).Elem()
}

type SystemAdminProfilesInput interface {
	pulumi.Input

	ToSystemAdminProfilesOutput() SystemAdminProfilesOutput
	ToSystemAdminProfilesOutputWithContext(ctx context.Context) SystemAdminProfilesOutput
}

func (*SystemAdminProfiles) ElementType() reflect.Type {
	return reflect.TypeOf((*SystemAdminProfiles)(nil))
}

func (i *SystemAdminProfiles) ToSystemAdminProfilesOutput() SystemAdminProfilesOutput {
	return i.ToSystemAdminProfilesOutputWithContext(context.Background())
}

func (i *SystemAdminProfiles) ToSystemAdminProfilesOutputWithContext(ctx context.Context) SystemAdminProfilesOutput {
	return pulumi.ToOutputWithContext(ctx, i).(SystemAdminProfilesOutput)
}

func (i *SystemAdminProfiles) ToSystemAdminProfilesPtrOutput() SystemAdminProfilesPtrOutput {
	return i.ToSystemAdminProfilesPtrOutputWithContext(context.Background())
}

func (i *SystemAdminProfiles) ToSystemAdminProfilesPtrOutputWithContext(ctx context.Context) SystemAdminProfilesPtrOutput {
	return pulumi.ToOutputWithContext(ctx, i).(SystemAdminProfilesPtrOutput)
}

type SystemAdminProfilesPtrInput interface {
	pulumi.Input

	ToSystemAdminProfilesPtrOutput() SystemAdminProfilesPtrOutput
	ToSystemAdminProfilesPtrOutputWithContext(ctx context.Context) SystemAdminProfilesPtrOutput
}

type systemAdminProfilesPtrType SystemAdminProfilesArgs

func (*systemAdminProfilesPtrType) ElementType() reflect.Type {
	return reflect.TypeOf((**SystemAdminProfiles)(nil))
}

func (i *systemAdminProfilesPtrType) ToSystemAdminProfilesPtrOutput() SystemAdminProfilesPtrOutput {
	return i.ToSystemAdminProfilesPtrOutputWithContext(context.Background())
}

func (i *systemAdminProfilesPtrType) ToSystemAdminProfilesPtrOutputWithContext(ctx context.Context) SystemAdminProfilesPtrOutput {
	return pulumi.ToOutputWithContext(ctx, i).(SystemAdminProfilesPtrOutput)
}

// SystemAdminProfilesArrayInput is an input type that accepts SystemAdminProfilesArray and SystemAdminProfilesArrayOutput values.
// You can construct a concrete instance of `SystemAdminProfilesArrayInput` via:
//
//          SystemAdminProfilesArray{ SystemAdminProfilesArgs{...} }
type SystemAdminProfilesArrayInput interface {
	pulumi.Input

	ToSystemAdminProfilesArrayOutput() SystemAdminProfilesArrayOutput
	ToSystemAdminProfilesArrayOutputWithContext(context.Context) SystemAdminProfilesArrayOutput
}

type SystemAdminProfilesArray []SystemAdminProfilesInput

func (SystemAdminProfilesArray) ElementType() reflect.Type {
	return reflect.TypeOf(([]*SystemAdminProfiles)(nil))
}

func (i SystemAdminProfilesArray) ToSystemAdminProfilesArrayOutput() SystemAdminProfilesArrayOutput {
	return i.ToSystemAdminProfilesArrayOutputWithContext(context.Background())
}

func (i SystemAdminProfilesArray) ToSystemAdminProfilesArrayOutputWithContext(ctx context.Context) SystemAdminProfilesArrayOutput {
	return pulumi.ToOutputWithContext(ctx, i).(SystemAdminProfilesArrayOutput)
}

// SystemAdminProfilesMapInput is an input type that accepts SystemAdminProfilesMap and SystemAdminProfilesMapOutput values.
// You can construct a concrete instance of `SystemAdminProfilesMapInput` via:
//
//          SystemAdminProfilesMap{ "key": SystemAdminProfilesArgs{...} }
type SystemAdminProfilesMapInput interface {
	pulumi.Input

	ToSystemAdminProfilesMapOutput() SystemAdminProfilesMapOutput
	ToSystemAdminProfilesMapOutputWithContext(context.Context) SystemAdminProfilesMapOutput
}

type SystemAdminProfilesMap map[string]SystemAdminProfilesInput

func (SystemAdminProfilesMap) ElementType() reflect.Type {
	return reflect.TypeOf((map[string]*SystemAdminProfiles)(nil))
}

func (i SystemAdminProfilesMap) ToSystemAdminProfilesMapOutput() SystemAdminProfilesMapOutput {
	return i.ToSystemAdminProfilesMapOutputWithContext(context.Background())
}

func (i SystemAdminProfilesMap) ToSystemAdminProfilesMapOutputWithContext(ctx context.Context) SystemAdminProfilesMapOutput {
	return pulumi.ToOutputWithContext(ctx, i).(SystemAdminProfilesMapOutput)
}

type SystemAdminProfilesOutput struct {
	*pulumi.OutputState
}

func (SystemAdminProfilesOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*SystemAdminProfiles)(nil))
}

func (o SystemAdminProfilesOutput) ToSystemAdminProfilesOutput() SystemAdminProfilesOutput {
	return o
}

func (o SystemAdminProfilesOutput) ToSystemAdminProfilesOutputWithContext(ctx context.Context) SystemAdminProfilesOutput {
	return o
}

func (o SystemAdminProfilesOutput) ToSystemAdminProfilesPtrOutput() SystemAdminProfilesPtrOutput {
	return o.ToSystemAdminProfilesPtrOutputWithContext(context.Background())
}

func (o SystemAdminProfilesOutput) ToSystemAdminProfilesPtrOutputWithContext(ctx context.Context) SystemAdminProfilesPtrOutput {
	return o.ApplyT(func(v SystemAdminProfiles) *SystemAdminProfiles {
		return &v
	}).(SystemAdminProfilesPtrOutput)
}

type SystemAdminProfilesPtrOutput struct {
	*pulumi.OutputState
}

func (SystemAdminProfilesPtrOutput) ElementType() reflect.Type {
	return reflect.TypeOf((**SystemAdminProfiles)(nil))
}

func (o SystemAdminProfilesPtrOutput) ToSystemAdminProfilesPtrOutput() SystemAdminProfilesPtrOutput {
	return o
}

func (o SystemAdminProfilesPtrOutput) ToSystemAdminProfilesPtrOutputWithContext(ctx context.Context) SystemAdminProfilesPtrOutput {
	return o
}

type SystemAdminProfilesArrayOutput struct{ *pulumi.OutputState }

func (SystemAdminProfilesArrayOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*[]SystemAdminProfiles)(nil))
}

func (o SystemAdminProfilesArrayOutput) ToSystemAdminProfilesArrayOutput() SystemAdminProfilesArrayOutput {
	return o
}

func (o SystemAdminProfilesArrayOutput) ToSystemAdminProfilesArrayOutputWithContext(ctx context.Context) SystemAdminProfilesArrayOutput {
	return o
}

func (o SystemAdminProfilesArrayOutput) Index(i pulumi.IntInput) SystemAdminProfilesOutput {
	return pulumi.All(o, i).ApplyT(func(vs []interface{}) SystemAdminProfiles {
		return vs[0].([]SystemAdminProfiles)[vs[1].(int)]
	}).(SystemAdminProfilesOutput)
}

type SystemAdminProfilesMapOutput struct{ *pulumi.OutputState }

func (SystemAdminProfilesMapOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*map[string]SystemAdminProfiles)(nil))
}

func (o SystemAdminProfilesMapOutput) ToSystemAdminProfilesMapOutput() SystemAdminProfilesMapOutput {
	return o
}

func (o SystemAdminProfilesMapOutput) ToSystemAdminProfilesMapOutputWithContext(ctx context.Context) SystemAdminProfilesMapOutput {
	return o
}

func (o SystemAdminProfilesMapOutput) MapIndex(k pulumi.StringInput) SystemAdminProfilesOutput {
	return pulumi.All(o, k).ApplyT(func(vs []interface{}) SystemAdminProfiles {
		return vs[0].(map[string]SystemAdminProfiles)[vs[1].(string)]
	}).(SystemAdminProfilesOutput)
}

func init() {
	pulumi.RegisterOutputType(SystemAdminProfilesOutput{})
	pulumi.RegisterOutputType(SystemAdminProfilesPtrOutput{})
	pulumi.RegisterOutputType(SystemAdminProfilesArrayOutput{})
	pulumi.RegisterOutputType(SystemAdminProfilesMapOutput{})
}
