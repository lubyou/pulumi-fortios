// *** WARNING: this file was generated by the Pulumi Terraform Bridge (tfgen) Tool. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

package fortios

import (
	"context"
	"reflect"

	"github.com/pkg/errors"
	"github.com/pulumi/pulumi/sdk/v3/go/pulumi"
)

// Configure Wireless Termination Points (WTPs), that is, FortiAPs or APs to be managed by FortiGate.
//
// ## Import
//
// WirelessController Wtp can be imported using any of these accepted formats$ export "FORTIOS_IMPORT_TABLE"="true"
//
// ```sh
//  $ pulumi import fortios:index/wirelessControllerWtp:WirelessControllerWtp labelname {{wtp_id}}
// ```
//
//  $ unset "FORTIOS_IMPORT_TABLE"
type WirelessControllerWtp struct {
	pulumi.CustomResourceState

	// Configure how the FortiGate operating as a wireless controller discovers and manages this WTP, AP or FortiAP. Valid values: `discovered`, `disable`, `enable`.
	Admin pulumi.StringOutput `pulumi:"admin"`
	// Control management access to the managed WTP, FortiAP, or AP. Separate entries with a space.
	Allowaccess pulumi.StringOutput `pulumi:"allowaccess"`
	// AP local configuration profile name.
	ApcfgProfile pulumi.StringOutput `pulumi:"apcfgProfile"`
	// Bonjour profile name.
	BonjourProfile pulumi.StringOutput `pulumi:"bonjourProfile"`
	// WTP latitude coordinate.
	CoordinateLatitude pulumi.StringOutput `pulumi:"coordinateLatitude"`
	// WTP longitude coordinate.
	CoordinateLongitude pulumi.StringOutput `pulumi:"coordinateLongitude"`
	// true or false, set this parameter to true when using dynamic forEach + toset to configure and sort sub-tables, please do not set this parameter when configuring static sub-tables.
	DynamicSortSubtable pulumi.StringPtrOutput `pulumi:"dynamicSortSubtable"`
	// Firmware version to provision to this FortiAP on bootup (major.minor.build, i.e. 6.2.1234).
	FirmwareProvision pulumi.StringOutput `pulumi:"firmwareProvision"`
	// Enable/disable WTP image download. Valid values: `enable`, `disable`.
	ImageDownload pulumi.StringOutput `pulumi:"imageDownload"`
	// Index (0 - 4294967295).
	Index pulumi.IntOutput `pulumi:"index"`
	// Method by which IP fragmentation is prevented for CAPWAP tunneled control and data packets (default = tcp-mss-adjust). Valid values: `tcp-mss-adjust`, `icmp-unreachable`.
	IpFragmentPreventing pulumi.StringOutput `pulumi:"ipFragmentPreventing"`
	// WTP LAN port mapping. The structure of `lan` block is documented below.
	Lan WirelessControllerWtpLanPtrOutput `pulumi:"lan"`
	// Enable to allow the FortiAPs LEDs to light. Disable to keep the LEDs off. You may want to keep the LEDs off so they are not distracting in low light areas etc. Valid values: `enable`, `disable`.
	LedState pulumi.StringOutput `pulumi:"ledState"`
	// Field for describing the physical location of the WTP, AP or FortiAP.
	Location pulumi.StringOutput `pulumi:"location"`
	// Set the managed WTP, FortiAP, or AP's administrator password.
	LoginPasswd pulumi.StringPtrOutput `pulumi:"loginPasswd"`
	// Change or reset the administrator password of a managed WTP, FortiAP or AP (yes, default, or no, default = no). Valid values: `yes`, `default`, `no`.
	LoginPasswdChange pulumi.StringOutput `pulumi:"loginPasswdChange"`
	// Enable/disable mesh Ethernet bridge when WTP is configured as a mesh branch/leaf AP. Valid values: `default`, `enable`, `disable`.
	MeshBridgeEnable pulumi.StringOutput `pulumi:"meshBridgeEnable"`
	// Virtual Access Point (VAP) name.
	Name pulumi.StringOutput `pulumi:"name"`
	// Enable to override the WTP profile management access configuration. Valid values: `enable`, `disable`.
	OverrideAllowaccess pulumi.StringOutput `pulumi:"overrideAllowaccess"`
	// Enable/disable overriding the WTP profile IP fragment prevention setting. Valid values: `enable`, `disable`.
	OverrideIpFragment pulumi.StringOutput `pulumi:"overrideIpFragment"`
	// Enable to override the WTP profile LAN port setting. Valid values: `enable`, `disable`.
	OverrideLan pulumi.StringOutput `pulumi:"overrideLan"`
	// Enable to override the profile LED state setting for this FortiAP. You must enable this option to use the led-state command to turn off the FortiAP's LEDs. Valid values: `enable`, `disable`.
	OverrideLedState pulumi.StringOutput `pulumi:"overrideLedState"`
	// Enable to override the WTP profile login-password (administrator password) setting. Valid values: `enable`, `disable`.
	OverrideLoginPasswdChange pulumi.StringOutput `pulumi:"overrideLoginPasswdChange"`
	// Enable/disable overriding the WTP profile split tunneling setting. Valid values: `enable`, `disable`.
	OverrideSplitTunnel pulumi.StringOutput `pulumi:"overrideSplitTunnel"`
	// Enable/disable overriding the wan-port-mode in the WTP profile. Valid values: `enable`, `disable`.
	OverrideWanPortMode pulumi.StringOutput `pulumi:"overrideWanPortMode"`
	// Configuration options for radio 1. The structure of `radio1` block is documented below.
	Radio1 WirelessControllerWtpRadio1PtrOutput `pulumi:"radio1"`
	// Configuration options for radio 2. The structure of `radio2` block is documented below.
	Radio2 WirelessControllerWtpRadio2PtrOutput `pulumi:"radio2"`
	// Configuration options for radio 3. The structure of `radio3` block is documented below.
	Radio3 WirelessControllerWtpRadio3PtrOutput `pulumi:"radio3"`
	// Configuration options for radio 4. The structure of `radio4` block is documented below.
	Radio4 WirelessControllerWtpRadio4PtrOutput `pulumi:"radio4"`
	// Region name WTP is associated with.
	Region pulumi.StringOutput `pulumi:"region"`
	// Relative horizontal region coordinate (between 0 and 1).
	RegionX pulumi.StringOutput `pulumi:"regionX"`
	// Relative vertical region coordinate (between 0 and 1).
	RegionY pulumi.StringOutput `pulumi:"regionY"`
	// Enable/disable automatically adding local subnetwork of FortiAP to split-tunneling ACL (default = disable). Valid values: `enable`, `disable`.
	SplitTunnelingAclLocalApSubnet pulumi.StringOutput `pulumi:"splitTunnelingAclLocalApSubnet"`
	// Split tunneling ACL path is local/tunnel. Valid values: `tunnel`, `local`.
	SplitTunnelingAclPath pulumi.StringOutput `pulumi:"splitTunnelingAclPath"`
	// Split tunneling ACL filter list. The structure of `splitTunnelingAcl` block is documented below.
	SplitTunnelingAcls WirelessControllerWtpSplitTunnelingAclArrayOutput `pulumi:"splitTunnelingAcls"`
	// Downlink tunnel MTU in octets. Set the value to either 0 (by default), 576, or 1500.
	TunMtuDownlink pulumi.IntOutput `pulumi:"tunMtuDownlink"`
	// Uplink tunnel maximum transmission unit (MTU) in octets (eight-bit bytes). Set the value to either 0 (by default), 576, or 1500.
	TunMtuUplink pulumi.IntOutput `pulumi:"tunMtuUplink"`
	// Universally Unique Identifier (UUID; automatically assigned but can be manually reset).
	Uuid pulumi.StringOutput `pulumi:"uuid"`
	// Specifies the vdom to which the resource will be applied when the FortiGate unit is running in VDOM mode. Only one vdom can be specified. If you want to inherit the vdom configuration of the provider, please do not set this parameter.
	Vdomparam pulumi.StringPtrOutput `pulumi:"vdomparam"`
	// Enable/disable using the FortiAP WAN port as a LAN port. Valid values: `wan-lan`, `wan-only`.
	WanPortMode pulumi.StringOutput `pulumi:"wanPortMode"`
	// WTP ID.
	WtpId pulumi.StringOutput `pulumi:"wtpId"`
	// WTP, AP, or FortiAP operating mode; normal (by default) or remote. A tunnel mode SSID can be assigned to an AP in normal mode but not remote mode, while a local-bridge mode SSID can be assigned to an AP in either normal mode or remote mode. Valid values: `normal`, `remote`.
	WtpMode pulumi.StringOutput `pulumi:"wtpMode"`
	// WTP profile name to apply to this WTP, AP or FortiAP.
	WtpProfile pulumi.StringOutput `pulumi:"wtpProfile"`
}

// NewWirelessControllerWtp registers a new resource with the given unique name, arguments, and options.
func NewWirelessControllerWtp(ctx *pulumi.Context,
	name string, args *WirelessControllerWtpArgs, opts ...pulumi.ResourceOption) (*WirelessControllerWtp, error) {
	if args == nil {
		return nil, errors.New("missing one or more required arguments")
	}

	if args.WtpProfile == nil {
		return nil, errors.New("invalid value for required argument 'WtpProfile'")
	}
	var resource WirelessControllerWtp
	err := ctx.RegisterResource("fortios:index/wirelessControllerWtp:WirelessControllerWtp", name, args, &resource, opts...)
	if err != nil {
		return nil, err
	}
	return &resource, nil
}

// GetWirelessControllerWtp gets an existing WirelessControllerWtp resource's state with the given name, ID, and optional
// state properties that are used to uniquely qualify the lookup (nil if not required).
func GetWirelessControllerWtp(ctx *pulumi.Context,
	name string, id pulumi.IDInput, state *WirelessControllerWtpState, opts ...pulumi.ResourceOption) (*WirelessControllerWtp, error) {
	var resource WirelessControllerWtp
	err := ctx.ReadResource("fortios:index/wirelessControllerWtp:WirelessControllerWtp", name, id, state, &resource, opts...)
	if err != nil {
		return nil, err
	}
	return &resource, nil
}

// Input properties used for looking up and filtering WirelessControllerWtp resources.
type wirelessControllerWtpState struct {
	// Configure how the FortiGate operating as a wireless controller discovers and manages this WTP, AP or FortiAP. Valid values: `discovered`, `disable`, `enable`.
	Admin *string `pulumi:"admin"`
	// Control management access to the managed WTP, FortiAP, or AP. Separate entries with a space.
	Allowaccess *string `pulumi:"allowaccess"`
	// AP local configuration profile name.
	ApcfgProfile *string `pulumi:"apcfgProfile"`
	// Bonjour profile name.
	BonjourProfile *string `pulumi:"bonjourProfile"`
	// WTP latitude coordinate.
	CoordinateLatitude *string `pulumi:"coordinateLatitude"`
	// WTP longitude coordinate.
	CoordinateLongitude *string `pulumi:"coordinateLongitude"`
	// true or false, set this parameter to true when using dynamic forEach + toset to configure and sort sub-tables, please do not set this parameter when configuring static sub-tables.
	DynamicSortSubtable *string `pulumi:"dynamicSortSubtable"`
	// Firmware version to provision to this FortiAP on bootup (major.minor.build, i.e. 6.2.1234).
	FirmwareProvision *string `pulumi:"firmwareProvision"`
	// Enable/disable WTP image download. Valid values: `enable`, `disable`.
	ImageDownload *string `pulumi:"imageDownload"`
	// Index (0 - 4294967295).
	Index *int `pulumi:"index"`
	// Method by which IP fragmentation is prevented for CAPWAP tunneled control and data packets (default = tcp-mss-adjust). Valid values: `tcp-mss-adjust`, `icmp-unreachable`.
	IpFragmentPreventing *string `pulumi:"ipFragmentPreventing"`
	// WTP LAN port mapping. The structure of `lan` block is documented below.
	Lan *WirelessControllerWtpLan `pulumi:"lan"`
	// Enable to allow the FortiAPs LEDs to light. Disable to keep the LEDs off. You may want to keep the LEDs off so they are not distracting in low light areas etc. Valid values: `enable`, `disable`.
	LedState *string `pulumi:"ledState"`
	// Field for describing the physical location of the WTP, AP or FortiAP.
	Location *string `pulumi:"location"`
	// Set the managed WTP, FortiAP, or AP's administrator password.
	LoginPasswd *string `pulumi:"loginPasswd"`
	// Change or reset the administrator password of a managed WTP, FortiAP or AP (yes, default, or no, default = no). Valid values: `yes`, `default`, `no`.
	LoginPasswdChange *string `pulumi:"loginPasswdChange"`
	// Enable/disable mesh Ethernet bridge when WTP is configured as a mesh branch/leaf AP. Valid values: `default`, `enable`, `disable`.
	MeshBridgeEnable *string `pulumi:"meshBridgeEnable"`
	// Virtual Access Point (VAP) name.
	Name *string `pulumi:"name"`
	// Enable to override the WTP profile management access configuration. Valid values: `enable`, `disable`.
	OverrideAllowaccess *string `pulumi:"overrideAllowaccess"`
	// Enable/disable overriding the WTP profile IP fragment prevention setting. Valid values: `enable`, `disable`.
	OverrideIpFragment *string `pulumi:"overrideIpFragment"`
	// Enable to override the WTP profile LAN port setting. Valid values: `enable`, `disable`.
	OverrideLan *string `pulumi:"overrideLan"`
	// Enable to override the profile LED state setting for this FortiAP. You must enable this option to use the led-state command to turn off the FortiAP's LEDs. Valid values: `enable`, `disable`.
	OverrideLedState *string `pulumi:"overrideLedState"`
	// Enable to override the WTP profile login-password (administrator password) setting. Valid values: `enable`, `disable`.
	OverrideLoginPasswdChange *string `pulumi:"overrideLoginPasswdChange"`
	// Enable/disable overriding the WTP profile split tunneling setting. Valid values: `enable`, `disable`.
	OverrideSplitTunnel *string `pulumi:"overrideSplitTunnel"`
	// Enable/disable overriding the wan-port-mode in the WTP profile. Valid values: `enable`, `disable`.
	OverrideWanPortMode *string `pulumi:"overrideWanPortMode"`
	// Configuration options for radio 1. The structure of `radio1` block is documented below.
	Radio1 *WirelessControllerWtpRadio1 `pulumi:"radio1"`
	// Configuration options for radio 2. The structure of `radio2` block is documented below.
	Radio2 *WirelessControllerWtpRadio2 `pulumi:"radio2"`
	// Configuration options for radio 3. The structure of `radio3` block is documented below.
	Radio3 *WirelessControllerWtpRadio3 `pulumi:"radio3"`
	// Configuration options for radio 4. The structure of `radio4` block is documented below.
	Radio4 *WirelessControllerWtpRadio4 `pulumi:"radio4"`
	// Region name WTP is associated with.
	Region *string `pulumi:"region"`
	// Relative horizontal region coordinate (between 0 and 1).
	RegionX *string `pulumi:"regionX"`
	// Relative vertical region coordinate (between 0 and 1).
	RegionY *string `pulumi:"regionY"`
	// Enable/disable automatically adding local subnetwork of FortiAP to split-tunneling ACL (default = disable). Valid values: `enable`, `disable`.
	SplitTunnelingAclLocalApSubnet *string `pulumi:"splitTunnelingAclLocalApSubnet"`
	// Split tunneling ACL path is local/tunnel. Valid values: `tunnel`, `local`.
	SplitTunnelingAclPath *string `pulumi:"splitTunnelingAclPath"`
	// Split tunneling ACL filter list. The structure of `splitTunnelingAcl` block is documented below.
	SplitTunnelingAcls []WirelessControllerWtpSplitTunnelingAcl `pulumi:"splitTunnelingAcls"`
	// Downlink tunnel MTU in octets. Set the value to either 0 (by default), 576, or 1500.
	TunMtuDownlink *int `pulumi:"tunMtuDownlink"`
	// Uplink tunnel maximum transmission unit (MTU) in octets (eight-bit bytes). Set the value to either 0 (by default), 576, or 1500.
	TunMtuUplink *int `pulumi:"tunMtuUplink"`
	// Universally Unique Identifier (UUID; automatically assigned but can be manually reset).
	Uuid *string `pulumi:"uuid"`
	// Specifies the vdom to which the resource will be applied when the FortiGate unit is running in VDOM mode. Only one vdom can be specified. If you want to inherit the vdom configuration of the provider, please do not set this parameter.
	Vdomparam *string `pulumi:"vdomparam"`
	// Enable/disable using the FortiAP WAN port as a LAN port. Valid values: `wan-lan`, `wan-only`.
	WanPortMode *string `pulumi:"wanPortMode"`
	// WTP ID.
	WtpId *string `pulumi:"wtpId"`
	// WTP, AP, or FortiAP operating mode; normal (by default) or remote. A tunnel mode SSID can be assigned to an AP in normal mode but not remote mode, while a local-bridge mode SSID can be assigned to an AP in either normal mode or remote mode. Valid values: `normal`, `remote`.
	WtpMode *string `pulumi:"wtpMode"`
	// WTP profile name to apply to this WTP, AP or FortiAP.
	WtpProfile *string `pulumi:"wtpProfile"`
}

type WirelessControllerWtpState struct {
	// Configure how the FortiGate operating as a wireless controller discovers and manages this WTP, AP or FortiAP. Valid values: `discovered`, `disable`, `enable`.
	Admin pulumi.StringPtrInput
	// Control management access to the managed WTP, FortiAP, or AP. Separate entries with a space.
	Allowaccess pulumi.StringPtrInput
	// AP local configuration profile name.
	ApcfgProfile pulumi.StringPtrInput
	// Bonjour profile name.
	BonjourProfile pulumi.StringPtrInput
	// WTP latitude coordinate.
	CoordinateLatitude pulumi.StringPtrInput
	// WTP longitude coordinate.
	CoordinateLongitude pulumi.StringPtrInput
	// true or false, set this parameter to true when using dynamic forEach + toset to configure and sort sub-tables, please do not set this parameter when configuring static sub-tables.
	DynamicSortSubtable pulumi.StringPtrInput
	// Firmware version to provision to this FortiAP on bootup (major.minor.build, i.e. 6.2.1234).
	FirmwareProvision pulumi.StringPtrInput
	// Enable/disable WTP image download. Valid values: `enable`, `disable`.
	ImageDownload pulumi.StringPtrInput
	// Index (0 - 4294967295).
	Index pulumi.IntPtrInput
	// Method by which IP fragmentation is prevented for CAPWAP tunneled control and data packets (default = tcp-mss-adjust). Valid values: `tcp-mss-adjust`, `icmp-unreachable`.
	IpFragmentPreventing pulumi.StringPtrInput
	// WTP LAN port mapping. The structure of `lan` block is documented below.
	Lan WirelessControllerWtpLanPtrInput
	// Enable to allow the FortiAPs LEDs to light. Disable to keep the LEDs off. You may want to keep the LEDs off so they are not distracting in low light areas etc. Valid values: `enable`, `disable`.
	LedState pulumi.StringPtrInput
	// Field for describing the physical location of the WTP, AP or FortiAP.
	Location pulumi.StringPtrInput
	// Set the managed WTP, FortiAP, or AP's administrator password.
	LoginPasswd pulumi.StringPtrInput
	// Change or reset the administrator password of a managed WTP, FortiAP or AP (yes, default, or no, default = no). Valid values: `yes`, `default`, `no`.
	LoginPasswdChange pulumi.StringPtrInput
	// Enable/disable mesh Ethernet bridge when WTP is configured as a mesh branch/leaf AP. Valid values: `default`, `enable`, `disable`.
	MeshBridgeEnable pulumi.StringPtrInput
	// Virtual Access Point (VAP) name.
	Name pulumi.StringPtrInput
	// Enable to override the WTP profile management access configuration. Valid values: `enable`, `disable`.
	OverrideAllowaccess pulumi.StringPtrInput
	// Enable/disable overriding the WTP profile IP fragment prevention setting. Valid values: `enable`, `disable`.
	OverrideIpFragment pulumi.StringPtrInput
	// Enable to override the WTP profile LAN port setting. Valid values: `enable`, `disable`.
	OverrideLan pulumi.StringPtrInput
	// Enable to override the profile LED state setting for this FortiAP. You must enable this option to use the led-state command to turn off the FortiAP's LEDs. Valid values: `enable`, `disable`.
	OverrideLedState pulumi.StringPtrInput
	// Enable to override the WTP profile login-password (administrator password) setting. Valid values: `enable`, `disable`.
	OverrideLoginPasswdChange pulumi.StringPtrInput
	// Enable/disable overriding the WTP profile split tunneling setting. Valid values: `enable`, `disable`.
	OverrideSplitTunnel pulumi.StringPtrInput
	// Enable/disable overriding the wan-port-mode in the WTP profile. Valid values: `enable`, `disable`.
	OverrideWanPortMode pulumi.StringPtrInput
	// Configuration options for radio 1. The structure of `radio1` block is documented below.
	Radio1 WirelessControllerWtpRadio1PtrInput
	// Configuration options for radio 2. The structure of `radio2` block is documented below.
	Radio2 WirelessControllerWtpRadio2PtrInput
	// Configuration options for radio 3. The structure of `radio3` block is documented below.
	Radio3 WirelessControllerWtpRadio3PtrInput
	// Configuration options for radio 4. The structure of `radio4` block is documented below.
	Radio4 WirelessControllerWtpRadio4PtrInput
	// Region name WTP is associated with.
	Region pulumi.StringPtrInput
	// Relative horizontal region coordinate (between 0 and 1).
	RegionX pulumi.StringPtrInput
	// Relative vertical region coordinate (between 0 and 1).
	RegionY pulumi.StringPtrInput
	// Enable/disable automatically adding local subnetwork of FortiAP to split-tunneling ACL (default = disable). Valid values: `enable`, `disable`.
	SplitTunnelingAclLocalApSubnet pulumi.StringPtrInput
	// Split tunneling ACL path is local/tunnel. Valid values: `tunnel`, `local`.
	SplitTunnelingAclPath pulumi.StringPtrInput
	// Split tunneling ACL filter list. The structure of `splitTunnelingAcl` block is documented below.
	SplitTunnelingAcls WirelessControllerWtpSplitTunnelingAclArrayInput
	// Downlink tunnel MTU in octets. Set the value to either 0 (by default), 576, or 1500.
	TunMtuDownlink pulumi.IntPtrInput
	// Uplink tunnel maximum transmission unit (MTU) in octets (eight-bit bytes). Set the value to either 0 (by default), 576, or 1500.
	TunMtuUplink pulumi.IntPtrInput
	// Universally Unique Identifier (UUID; automatically assigned but can be manually reset).
	Uuid pulumi.StringPtrInput
	// Specifies the vdom to which the resource will be applied when the FortiGate unit is running in VDOM mode. Only one vdom can be specified. If you want to inherit the vdom configuration of the provider, please do not set this parameter.
	Vdomparam pulumi.StringPtrInput
	// Enable/disable using the FortiAP WAN port as a LAN port. Valid values: `wan-lan`, `wan-only`.
	WanPortMode pulumi.StringPtrInput
	// WTP ID.
	WtpId pulumi.StringPtrInput
	// WTP, AP, or FortiAP operating mode; normal (by default) or remote. A tunnel mode SSID can be assigned to an AP in normal mode but not remote mode, while a local-bridge mode SSID can be assigned to an AP in either normal mode or remote mode. Valid values: `normal`, `remote`.
	WtpMode pulumi.StringPtrInput
	// WTP profile name to apply to this WTP, AP or FortiAP.
	WtpProfile pulumi.StringPtrInput
}

func (WirelessControllerWtpState) ElementType() reflect.Type {
	return reflect.TypeOf((*wirelessControllerWtpState)(nil)).Elem()
}

type wirelessControllerWtpArgs struct {
	// Configure how the FortiGate operating as a wireless controller discovers and manages this WTP, AP or FortiAP. Valid values: `discovered`, `disable`, `enable`.
	Admin *string `pulumi:"admin"`
	// Control management access to the managed WTP, FortiAP, or AP. Separate entries with a space.
	Allowaccess *string `pulumi:"allowaccess"`
	// AP local configuration profile name.
	ApcfgProfile *string `pulumi:"apcfgProfile"`
	// Bonjour profile name.
	BonjourProfile *string `pulumi:"bonjourProfile"`
	// WTP latitude coordinate.
	CoordinateLatitude *string `pulumi:"coordinateLatitude"`
	// WTP longitude coordinate.
	CoordinateLongitude *string `pulumi:"coordinateLongitude"`
	// true or false, set this parameter to true when using dynamic forEach + toset to configure and sort sub-tables, please do not set this parameter when configuring static sub-tables.
	DynamicSortSubtable *string `pulumi:"dynamicSortSubtable"`
	// Firmware version to provision to this FortiAP on bootup (major.minor.build, i.e. 6.2.1234).
	FirmwareProvision *string `pulumi:"firmwareProvision"`
	// Enable/disable WTP image download. Valid values: `enable`, `disable`.
	ImageDownload *string `pulumi:"imageDownload"`
	// Index (0 - 4294967295).
	Index *int `pulumi:"index"`
	// Method by which IP fragmentation is prevented for CAPWAP tunneled control and data packets (default = tcp-mss-adjust). Valid values: `tcp-mss-adjust`, `icmp-unreachable`.
	IpFragmentPreventing *string `pulumi:"ipFragmentPreventing"`
	// WTP LAN port mapping. The structure of `lan` block is documented below.
	Lan *WirelessControllerWtpLan `pulumi:"lan"`
	// Enable to allow the FortiAPs LEDs to light. Disable to keep the LEDs off. You may want to keep the LEDs off so they are not distracting in low light areas etc. Valid values: `enable`, `disable`.
	LedState *string `pulumi:"ledState"`
	// Field for describing the physical location of the WTP, AP or FortiAP.
	Location *string `pulumi:"location"`
	// Set the managed WTP, FortiAP, or AP's administrator password.
	LoginPasswd *string `pulumi:"loginPasswd"`
	// Change or reset the administrator password of a managed WTP, FortiAP or AP (yes, default, or no, default = no). Valid values: `yes`, `default`, `no`.
	LoginPasswdChange *string `pulumi:"loginPasswdChange"`
	// Enable/disable mesh Ethernet bridge when WTP is configured as a mesh branch/leaf AP. Valid values: `default`, `enable`, `disable`.
	MeshBridgeEnable *string `pulumi:"meshBridgeEnable"`
	// Virtual Access Point (VAP) name.
	Name *string `pulumi:"name"`
	// Enable to override the WTP profile management access configuration. Valid values: `enable`, `disable`.
	OverrideAllowaccess *string `pulumi:"overrideAllowaccess"`
	// Enable/disable overriding the WTP profile IP fragment prevention setting. Valid values: `enable`, `disable`.
	OverrideIpFragment *string `pulumi:"overrideIpFragment"`
	// Enable to override the WTP profile LAN port setting. Valid values: `enable`, `disable`.
	OverrideLan *string `pulumi:"overrideLan"`
	// Enable to override the profile LED state setting for this FortiAP. You must enable this option to use the led-state command to turn off the FortiAP's LEDs. Valid values: `enable`, `disable`.
	OverrideLedState *string `pulumi:"overrideLedState"`
	// Enable to override the WTP profile login-password (administrator password) setting. Valid values: `enable`, `disable`.
	OverrideLoginPasswdChange *string `pulumi:"overrideLoginPasswdChange"`
	// Enable/disable overriding the WTP profile split tunneling setting. Valid values: `enable`, `disable`.
	OverrideSplitTunnel *string `pulumi:"overrideSplitTunnel"`
	// Enable/disable overriding the wan-port-mode in the WTP profile. Valid values: `enable`, `disable`.
	OverrideWanPortMode *string `pulumi:"overrideWanPortMode"`
	// Configuration options for radio 1. The structure of `radio1` block is documented below.
	Radio1 *WirelessControllerWtpRadio1 `pulumi:"radio1"`
	// Configuration options for radio 2. The structure of `radio2` block is documented below.
	Radio2 *WirelessControllerWtpRadio2 `pulumi:"radio2"`
	// Configuration options for radio 3. The structure of `radio3` block is documented below.
	Radio3 *WirelessControllerWtpRadio3 `pulumi:"radio3"`
	// Configuration options for radio 4. The structure of `radio4` block is documented below.
	Radio4 *WirelessControllerWtpRadio4 `pulumi:"radio4"`
	// Region name WTP is associated with.
	Region *string `pulumi:"region"`
	// Relative horizontal region coordinate (between 0 and 1).
	RegionX *string `pulumi:"regionX"`
	// Relative vertical region coordinate (between 0 and 1).
	RegionY *string `pulumi:"regionY"`
	// Enable/disable automatically adding local subnetwork of FortiAP to split-tunneling ACL (default = disable). Valid values: `enable`, `disable`.
	SplitTunnelingAclLocalApSubnet *string `pulumi:"splitTunnelingAclLocalApSubnet"`
	// Split tunneling ACL path is local/tunnel. Valid values: `tunnel`, `local`.
	SplitTunnelingAclPath *string `pulumi:"splitTunnelingAclPath"`
	// Split tunneling ACL filter list. The structure of `splitTunnelingAcl` block is documented below.
	SplitTunnelingAcls []WirelessControllerWtpSplitTunnelingAcl `pulumi:"splitTunnelingAcls"`
	// Downlink tunnel MTU in octets. Set the value to either 0 (by default), 576, or 1500.
	TunMtuDownlink *int `pulumi:"tunMtuDownlink"`
	// Uplink tunnel maximum transmission unit (MTU) in octets (eight-bit bytes). Set the value to either 0 (by default), 576, or 1500.
	TunMtuUplink *int `pulumi:"tunMtuUplink"`
	// Universally Unique Identifier (UUID; automatically assigned but can be manually reset).
	Uuid *string `pulumi:"uuid"`
	// Specifies the vdom to which the resource will be applied when the FortiGate unit is running in VDOM mode. Only one vdom can be specified. If you want to inherit the vdom configuration of the provider, please do not set this parameter.
	Vdomparam *string `pulumi:"vdomparam"`
	// Enable/disable using the FortiAP WAN port as a LAN port. Valid values: `wan-lan`, `wan-only`.
	WanPortMode *string `pulumi:"wanPortMode"`
	// WTP ID.
	WtpId *string `pulumi:"wtpId"`
	// WTP, AP, or FortiAP operating mode; normal (by default) or remote. A tunnel mode SSID can be assigned to an AP in normal mode but not remote mode, while a local-bridge mode SSID can be assigned to an AP in either normal mode or remote mode. Valid values: `normal`, `remote`.
	WtpMode *string `pulumi:"wtpMode"`
	// WTP profile name to apply to this WTP, AP or FortiAP.
	WtpProfile string `pulumi:"wtpProfile"`
}

// The set of arguments for constructing a WirelessControllerWtp resource.
type WirelessControllerWtpArgs struct {
	// Configure how the FortiGate operating as a wireless controller discovers and manages this WTP, AP or FortiAP. Valid values: `discovered`, `disable`, `enable`.
	Admin pulumi.StringPtrInput
	// Control management access to the managed WTP, FortiAP, or AP. Separate entries with a space.
	Allowaccess pulumi.StringPtrInput
	// AP local configuration profile name.
	ApcfgProfile pulumi.StringPtrInput
	// Bonjour profile name.
	BonjourProfile pulumi.StringPtrInput
	// WTP latitude coordinate.
	CoordinateLatitude pulumi.StringPtrInput
	// WTP longitude coordinate.
	CoordinateLongitude pulumi.StringPtrInput
	// true or false, set this parameter to true when using dynamic forEach + toset to configure and sort sub-tables, please do not set this parameter when configuring static sub-tables.
	DynamicSortSubtable pulumi.StringPtrInput
	// Firmware version to provision to this FortiAP on bootup (major.minor.build, i.e. 6.2.1234).
	FirmwareProvision pulumi.StringPtrInput
	// Enable/disable WTP image download. Valid values: `enable`, `disable`.
	ImageDownload pulumi.StringPtrInput
	// Index (0 - 4294967295).
	Index pulumi.IntPtrInput
	// Method by which IP fragmentation is prevented for CAPWAP tunneled control and data packets (default = tcp-mss-adjust). Valid values: `tcp-mss-adjust`, `icmp-unreachable`.
	IpFragmentPreventing pulumi.StringPtrInput
	// WTP LAN port mapping. The structure of `lan` block is documented below.
	Lan WirelessControllerWtpLanPtrInput
	// Enable to allow the FortiAPs LEDs to light. Disable to keep the LEDs off. You may want to keep the LEDs off so they are not distracting in low light areas etc. Valid values: `enable`, `disable`.
	LedState pulumi.StringPtrInput
	// Field for describing the physical location of the WTP, AP or FortiAP.
	Location pulumi.StringPtrInput
	// Set the managed WTP, FortiAP, or AP's administrator password.
	LoginPasswd pulumi.StringPtrInput
	// Change or reset the administrator password of a managed WTP, FortiAP or AP (yes, default, or no, default = no). Valid values: `yes`, `default`, `no`.
	LoginPasswdChange pulumi.StringPtrInput
	// Enable/disable mesh Ethernet bridge when WTP is configured as a mesh branch/leaf AP. Valid values: `default`, `enable`, `disable`.
	MeshBridgeEnable pulumi.StringPtrInput
	// Virtual Access Point (VAP) name.
	Name pulumi.StringPtrInput
	// Enable to override the WTP profile management access configuration. Valid values: `enable`, `disable`.
	OverrideAllowaccess pulumi.StringPtrInput
	// Enable/disable overriding the WTP profile IP fragment prevention setting. Valid values: `enable`, `disable`.
	OverrideIpFragment pulumi.StringPtrInput
	// Enable to override the WTP profile LAN port setting. Valid values: `enable`, `disable`.
	OverrideLan pulumi.StringPtrInput
	// Enable to override the profile LED state setting for this FortiAP. You must enable this option to use the led-state command to turn off the FortiAP's LEDs. Valid values: `enable`, `disable`.
	OverrideLedState pulumi.StringPtrInput
	// Enable to override the WTP profile login-password (administrator password) setting. Valid values: `enable`, `disable`.
	OverrideLoginPasswdChange pulumi.StringPtrInput
	// Enable/disable overriding the WTP profile split tunneling setting. Valid values: `enable`, `disable`.
	OverrideSplitTunnel pulumi.StringPtrInput
	// Enable/disable overriding the wan-port-mode in the WTP profile. Valid values: `enable`, `disable`.
	OverrideWanPortMode pulumi.StringPtrInput
	// Configuration options for radio 1. The structure of `radio1` block is documented below.
	Radio1 WirelessControllerWtpRadio1PtrInput
	// Configuration options for radio 2. The structure of `radio2` block is documented below.
	Radio2 WirelessControllerWtpRadio2PtrInput
	// Configuration options for radio 3. The structure of `radio3` block is documented below.
	Radio3 WirelessControllerWtpRadio3PtrInput
	// Configuration options for radio 4. The structure of `radio4` block is documented below.
	Radio4 WirelessControllerWtpRadio4PtrInput
	// Region name WTP is associated with.
	Region pulumi.StringPtrInput
	// Relative horizontal region coordinate (between 0 and 1).
	RegionX pulumi.StringPtrInput
	// Relative vertical region coordinate (between 0 and 1).
	RegionY pulumi.StringPtrInput
	// Enable/disable automatically adding local subnetwork of FortiAP to split-tunneling ACL (default = disable). Valid values: `enable`, `disable`.
	SplitTunnelingAclLocalApSubnet pulumi.StringPtrInput
	// Split tunneling ACL path is local/tunnel. Valid values: `tunnel`, `local`.
	SplitTunnelingAclPath pulumi.StringPtrInput
	// Split tunneling ACL filter list. The structure of `splitTunnelingAcl` block is documented below.
	SplitTunnelingAcls WirelessControllerWtpSplitTunnelingAclArrayInput
	// Downlink tunnel MTU in octets. Set the value to either 0 (by default), 576, or 1500.
	TunMtuDownlink pulumi.IntPtrInput
	// Uplink tunnel maximum transmission unit (MTU) in octets (eight-bit bytes). Set the value to either 0 (by default), 576, or 1500.
	TunMtuUplink pulumi.IntPtrInput
	// Universally Unique Identifier (UUID; automatically assigned but can be manually reset).
	Uuid pulumi.StringPtrInput
	// Specifies the vdom to which the resource will be applied when the FortiGate unit is running in VDOM mode. Only one vdom can be specified. If you want to inherit the vdom configuration of the provider, please do not set this parameter.
	Vdomparam pulumi.StringPtrInput
	// Enable/disable using the FortiAP WAN port as a LAN port. Valid values: `wan-lan`, `wan-only`.
	WanPortMode pulumi.StringPtrInput
	// WTP ID.
	WtpId pulumi.StringPtrInput
	// WTP, AP, or FortiAP operating mode; normal (by default) or remote. A tunnel mode SSID can be assigned to an AP in normal mode but not remote mode, while a local-bridge mode SSID can be assigned to an AP in either normal mode or remote mode. Valid values: `normal`, `remote`.
	WtpMode pulumi.StringPtrInput
	// WTP profile name to apply to this WTP, AP or FortiAP.
	WtpProfile pulumi.StringInput
}

func (WirelessControllerWtpArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*wirelessControllerWtpArgs)(nil)).Elem()
}

type WirelessControllerWtpInput interface {
	pulumi.Input

	ToWirelessControllerWtpOutput() WirelessControllerWtpOutput
	ToWirelessControllerWtpOutputWithContext(ctx context.Context) WirelessControllerWtpOutput
}

func (*WirelessControllerWtp) ElementType() reflect.Type {
	return reflect.TypeOf((*WirelessControllerWtp)(nil))
}

func (i *WirelessControllerWtp) ToWirelessControllerWtpOutput() WirelessControllerWtpOutput {
	return i.ToWirelessControllerWtpOutputWithContext(context.Background())
}

func (i *WirelessControllerWtp) ToWirelessControllerWtpOutputWithContext(ctx context.Context) WirelessControllerWtpOutput {
	return pulumi.ToOutputWithContext(ctx, i).(WirelessControllerWtpOutput)
}

func (i *WirelessControllerWtp) ToWirelessControllerWtpPtrOutput() WirelessControllerWtpPtrOutput {
	return i.ToWirelessControllerWtpPtrOutputWithContext(context.Background())
}

func (i *WirelessControllerWtp) ToWirelessControllerWtpPtrOutputWithContext(ctx context.Context) WirelessControllerWtpPtrOutput {
	return pulumi.ToOutputWithContext(ctx, i).(WirelessControllerWtpPtrOutput)
}

type WirelessControllerWtpPtrInput interface {
	pulumi.Input

	ToWirelessControllerWtpPtrOutput() WirelessControllerWtpPtrOutput
	ToWirelessControllerWtpPtrOutputWithContext(ctx context.Context) WirelessControllerWtpPtrOutput
}

type wirelessControllerWtpPtrType WirelessControllerWtpArgs

func (*wirelessControllerWtpPtrType) ElementType() reflect.Type {
	return reflect.TypeOf((**WirelessControllerWtp)(nil))
}

func (i *wirelessControllerWtpPtrType) ToWirelessControllerWtpPtrOutput() WirelessControllerWtpPtrOutput {
	return i.ToWirelessControllerWtpPtrOutputWithContext(context.Background())
}

func (i *wirelessControllerWtpPtrType) ToWirelessControllerWtpPtrOutputWithContext(ctx context.Context) WirelessControllerWtpPtrOutput {
	return pulumi.ToOutputWithContext(ctx, i).(WirelessControllerWtpPtrOutput)
}

// WirelessControllerWtpArrayInput is an input type that accepts WirelessControllerWtpArray and WirelessControllerWtpArrayOutput values.
// You can construct a concrete instance of `WirelessControllerWtpArrayInput` via:
//
//          WirelessControllerWtpArray{ WirelessControllerWtpArgs{...} }
type WirelessControllerWtpArrayInput interface {
	pulumi.Input

	ToWirelessControllerWtpArrayOutput() WirelessControllerWtpArrayOutput
	ToWirelessControllerWtpArrayOutputWithContext(context.Context) WirelessControllerWtpArrayOutput
}

type WirelessControllerWtpArray []WirelessControllerWtpInput

func (WirelessControllerWtpArray) ElementType() reflect.Type {
	return reflect.TypeOf(([]*WirelessControllerWtp)(nil))
}

func (i WirelessControllerWtpArray) ToWirelessControllerWtpArrayOutput() WirelessControllerWtpArrayOutput {
	return i.ToWirelessControllerWtpArrayOutputWithContext(context.Background())
}

func (i WirelessControllerWtpArray) ToWirelessControllerWtpArrayOutputWithContext(ctx context.Context) WirelessControllerWtpArrayOutput {
	return pulumi.ToOutputWithContext(ctx, i).(WirelessControllerWtpArrayOutput)
}

// WirelessControllerWtpMapInput is an input type that accepts WirelessControllerWtpMap and WirelessControllerWtpMapOutput values.
// You can construct a concrete instance of `WirelessControllerWtpMapInput` via:
//
//          WirelessControllerWtpMap{ "key": WirelessControllerWtpArgs{...} }
type WirelessControllerWtpMapInput interface {
	pulumi.Input

	ToWirelessControllerWtpMapOutput() WirelessControllerWtpMapOutput
	ToWirelessControllerWtpMapOutputWithContext(context.Context) WirelessControllerWtpMapOutput
}

type WirelessControllerWtpMap map[string]WirelessControllerWtpInput

func (WirelessControllerWtpMap) ElementType() reflect.Type {
	return reflect.TypeOf((map[string]*WirelessControllerWtp)(nil))
}

func (i WirelessControllerWtpMap) ToWirelessControllerWtpMapOutput() WirelessControllerWtpMapOutput {
	return i.ToWirelessControllerWtpMapOutputWithContext(context.Background())
}

func (i WirelessControllerWtpMap) ToWirelessControllerWtpMapOutputWithContext(ctx context.Context) WirelessControllerWtpMapOutput {
	return pulumi.ToOutputWithContext(ctx, i).(WirelessControllerWtpMapOutput)
}

type WirelessControllerWtpOutput struct {
	*pulumi.OutputState
}

func (WirelessControllerWtpOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*WirelessControllerWtp)(nil))
}

func (o WirelessControllerWtpOutput) ToWirelessControllerWtpOutput() WirelessControllerWtpOutput {
	return o
}

func (o WirelessControllerWtpOutput) ToWirelessControllerWtpOutputWithContext(ctx context.Context) WirelessControllerWtpOutput {
	return o
}

func (o WirelessControllerWtpOutput) ToWirelessControllerWtpPtrOutput() WirelessControllerWtpPtrOutput {
	return o.ToWirelessControllerWtpPtrOutputWithContext(context.Background())
}

func (o WirelessControllerWtpOutput) ToWirelessControllerWtpPtrOutputWithContext(ctx context.Context) WirelessControllerWtpPtrOutput {
	return o.ApplyT(func(v WirelessControllerWtp) *WirelessControllerWtp {
		return &v
	}).(WirelessControllerWtpPtrOutput)
}

type WirelessControllerWtpPtrOutput struct {
	*pulumi.OutputState
}

func (WirelessControllerWtpPtrOutput) ElementType() reflect.Type {
	return reflect.TypeOf((**WirelessControllerWtp)(nil))
}

func (o WirelessControllerWtpPtrOutput) ToWirelessControllerWtpPtrOutput() WirelessControllerWtpPtrOutput {
	return o
}

func (o WirelessControllerWtpPtrOutput) ToWirelessControllerWtpPtrOutputWithContext(ctx context.Context) WirelessControllerWtpPtrOutput {
	return o
}

type WirelessControllerWtpArrayOutput struct{ *pulumi.OutputState }

func (WirelessControllerWtpArrayOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*[]WirelessControllerWtp)(nil))
}

func (o WirelessControllerWtpArrayOutput) ToWirelessControllerWtpArrayOutput() WirelessControllerWtpArrayOutput {
	return o
}

func (o WirelessControllerWtpArrayOutput) ToWirelessControllerWtpArrayOutputWithContext(ctx context.Context) WirelessControllerWtpArrayOutput {
	return o
}

func (o WirelessControllerWtpArrayOutput) Index(i pulumi.IntInput) WirelessControllerWtpOutput {
	return pulumi.All(o, i).ApplyT(func(vs []interface{}) WirelessControllerWtp {
		return vs[0].([]WirelessControllerWtp)[vs[1].(int)]
	}).(WirelessControllerWtpOutput)
}

type WirelessControllerWtpMapOutput struct{ *pulumi.OutputState }

func (WirelessControllerWtpMapOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*map[string]WirelessControllerWtp)(nil))
}

func (o WirelessControllerWtpMapOutput) ToWirelessControllerWtpMapOutput() WirelessControllerWtpMapOutput {
	return o
}

func (o WirelessControllerWtpMapOutput) ToWirelessControllerWtpMapOutputWithContext(ctx context.Context) WirelessControllerWtpMapOutput {
	return o
}

func (o WirelessControllerWtpMapOutput) MapIndex(k pulumi.StringInput) WirelessControllerWtpOutput {
	return pulumi.All(o, k).ApplyT(func(vs []interface{}) WirelessControllerWtp {
		return vs[0].(map[string]WirelessControllerWtp)[vs[1].(string)]
	}).(WirelessControllerWtpOutput)
}

func init() {
	pulumi.RegisterOutputType(WirelessControllerWtpOutput{})
	pulumi.RegisterOutputType(WirelessControllerWtpPtrOutput{})
	pulumi.RegisterOutputType(WirelessControllerWtpArrayOutput{})
	pulumi.RegisterOutputType(WirelessControllerWtpMapOutput{})
}
