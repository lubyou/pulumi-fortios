// Code generated by the Pulumi Terraform Bridge (tfgen) Tool DO NOT EDIT.
// *** WARNING: Do not edit by hand unless you're certain you know what you are doing! ***

package fortios

import (
	"context"
	"reflect"

	"github.com/lubyou/pulumi-fortios/sdk/go/fortios/internal"
	"github.com/pulumi/pulumi/sdk/v3/go/pulumi"
)

type VpnSslWebHostCheckSoftware struct {
	pulumi.CustomResourceState

	CheckItemLists      VpnSslWebHostCheckSoftwareCheckItemListArrayOutput `pulumi:"checkItemLists"`
	DynamicSortSubtable pulumi.StringPtrOutput                             `pulumi:"dynamicSortSubtable"`
	GetAllTables        pulumi.StringPtrOutput                             `pulumi:"getAllTables"`
	Guid                pulumi.StringOutput                                `pulumi:"guid"`
	Name                pulumi.StringOutput                                `pulumi:"name"`
	OsType              pulumi.StringOutput                                `pulumi:"osType"`
	Type                pulumi.StringOutput                                `pulumi:"type"`
	Vdomparam           pulumi.StringPtrOutput                             `pulumi:"vdomparam"`
	Version             pulumi.StringOutput                                `pulumi:"version"`
}

// NewVpnSslWebHostCheckSoftware registers a new resource with the given unique name, arguments, and options.
func NewVpnSslWebHostCheckSoftware(ctx *pulumi.Context,
	name string, args *VpnSslWebHostCheckSoftwareArgs, opts ...pulumi.ResourceOption) (*VpnSslWebHostCheckSoftware, error) {
	if args == nil {
		args = &VpnSslWebHostCheckSoftwareArgs{}
	}

	opts = internal.PkgResourceDefaultOpts(opts)
	var resource VpnSslWebHostCheckSoftware
	err := ctx.RegisterResource("fortios:index/vpnSslWebHostCheckSoftware:VpnSslWebHostCheckSoftware", name, args, &resource, opts...)
	if err != nil {
		return nil, err
	}
	return &resource, nil
}

// GetVpnSslWebHostCheckSoftware gets an existing VpnSslWebHostCheckSoftware resource's state with the given name, ID, and optional
// state properties that are used to uniquely qualify the lookup (nil if not required).
func GetVpnSslWebHostCheckSoftware(ctx *pulumi.Context,
	name string, id pulumi.IDInput, state *VpnSslWebHostCheckSoftwareState, opts ...pulumi.ResourceOption) (*VpnSslWebHostCheckSoftware, error) {
	var resource VpnSslWebHostCheckSoftware
	err := ctx.ReadResource("fortios:index/vpnSslWebHostCheckSoftware:VpnSslWebHostCheckSoftware", name, id, state, &resource, opts...)
	if err != nil {
		return nil, err
	}
	return &resource, nil
}

// Input properties used for looking up and filtering VpnSslWebHostCheckSoftware resources.
type vpnSslWebHostCheckSoftwareState struct {
	CheckItemLists      []VpnSslWebHostCheckSoftwareCheckItemList `pulumi:"checkItemLists"`
	DynamicSortSubtable *string                                   `pulumi:"dynamicSortSubtable"`
	GetAllTables        *string                                   `pulumi:"getAllTables"`
	Guid                *string                                   `pulumi:"guid"`
	Name                *string                                   `pulumi:"name"`
	OsType              *string                                   `pulumi:"osType"`
	Type                *string                                   `pulumi:"type"`
	Vdomparam           *string                                   `pulumi:"vdomparam"`
	Version             *string                                   `pulumi:"version"`
}

type VpnSslWebHostCheckSoftwareState struct {
	CheckItemLists      VpnSslWebHostCheckSoftwareCheckItemListArrayInput
	DynamicSortSubtable pulumi.StringPtrInput
	GetAllTables        pulumi.StringPtrInput
	Guid                pulumi.StringPtrInput
	Name                pulumi.StringPtrInput
	OsType              pulumi.StringPtrInput
	Type                pulumi.StringPtrInput
	Vdomparam           pulumi.StringPtrInput
	Version             pulumi.StringPtrInput
}

func (VpnSslWebHostCheckSoftwareState) ElementType() reflect.Type {
	return reflect.TypeOf((*vpnSslWebHostCheckSoftwareState)(nil)).Elem()
}

type vpnSslWebHostCheckSoftwareArgs struct {
	CheckItemLists      []VpnSslWebHostCheckSoftwareCheckItemList `pulumi:"checkItemLists"`
	DynamicSortSubtable *string                                   `pulumi:"dynamicSortSubtable"`
	GetAllTables        *string                                   `pulumi:"getAllTables"`
	Guid                *string                                   `pulumi:"guid"`
	Name                *string                                   `pulumi:"name"`
	OsType              *string                                   `pulumi:"osType"`
	Type                *string                                   `pulumi:"type"`
	Vdomparam           *string                                   `pulumi:"vdomparam"`
	Version             *string                                   `pulumi:"version"`
}

// The set of arguments for constructing a VpnSslWebHostCheckSoftware resource.
type VpnSslWebHostCheckSoftwareArgs struct {
	CheckItemLists      VpnSslWebHostCheckSoftwareCheckItemListArrayInput
	DynamicSortSubtable pulumi.StringPtrInput
	GetAllTables        pulumi.StringPtrInput
	Guid                pulumi.StringPtrInput
	Name                pulumi.StringPtrInput
	OsType              pulumi.StringPtrInput
	Type                pulumi.StringPtrInput
	Vdomparam           pulumi.StringPtrInput
	Version             pulumi.StringPtrInput
}

func (VpnSslWebHostCheckSoftwareArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*vpnSslWebHostCheckSoftwareArgs)(nil)).Elem()
}

type VpnSslWebHostCheckSoftwareInput interface {
	pulumi.Input

	ToVpnSslWebHostCheckSoftwareOutput() VpnSslWebHostCheckSoftwareOutput
	ToVpnSslWebHostCheckSoftwareOutputWithContext(ctx context.Context) VpnSslWebHostCheckSoftwareOutput
}

func (*VpnSslWebHostCheckSoftware) ElementType() reflect.Type {
	return reflect.TypeOf((**VpnSslWebHostCheckSoftware)(nil)).Elem()
}

func (i *VpnSslWebHostCheckSoftware) ToVpnSslWebHostCheckSoftwareOutput() VpnSslWebHostCheckSoftwareOutput {
	return i.ToVpnSslWebHostCheckSoftwareOutputWithContext(context.Background())
}

func (i *VpnSslWebHostCheckSoftware) ToVpnSslWebHostCheckSoftwareOutputWithContext(ctx context.Context) VpnSslWebHostCheckSoftwareOutput {
	return pulumi.ToOutputWithContext(ctx, i).(VpnSslWebHostCheckSoftwareOutput)
}

// VpnSslWebHostCheckSoftwareArrayInput is an input type that accepts VpnSslWebHostCheckSoftwareArray and VpnSslWebHostCheckSoftwareArrayOutput values.
// You can construct a concrete instance of `VpnSslWebHostCheckSoftwareArrayInput` via:
//
//	VpnSslWebHostCheckSoftwareArray{ VpnSslWebHostCheckSoftwareArgs{...} }
type VpnSslWebHostCheckSoftwareArrayInput interface {
	pulumi.Input

	ToVpnSslWebHostCheckSoftwareArrayOutput() VpnSslWebHostCheckSoftwareArrayOutput
	ToVpnSslWebHostCheckSoftwareArrayOutputWithContext(context.Context) VpnSslWebHostCheckSoftwareArrayOutput
}

type VpnSslWebHostCheckSoftwareArray []VpnSslWebHostCheckSoftwareInput

func (VpnSslWebHostCheckSoftwareArray) ElementType() reflect.Type {
	return reflect.TypeOf((*[]*VpnSslWebHostCheckSoftware)(nil)).Elem()
}

func (i VpnSslWebHostCheckSoftwareArray) ToVpnSslWebHostCheckSoftwareArrayOutput() VpnSslWebHostCheckSoftwareArrayOutput {
	return i.ToVpnSslWebHostCheckSoftwareArrayOutputWithContext(context.Background())
}

func (i VpnSslWebHostCheckSoftwareArray) ToVpnSslWebHostCheckSoftwareArrayOutputWithContext(ctx context.Context) VpnSslWebHostCheckSoftwareArrayOutput {
	return pulumi.ToOutputWithContext(ctx, i).(VpnSslWebHostCheckSoftwareArrayOutput)
}

// VpnSslWebHostCheckSoftwareMapInput is an input type that accepts VpnSslWebHostCheckSoftwareMap and VpnSslWebHostCheckSoftwareMapOutput values.
// You can construct a concrete instance of `VpnSslWebHostCheckSoftwareMapInput` via:
//
//	VpnSslWebHostCheckSoftwareMap{ "key": VpnSslWebHostCheckSoftwareArgs{...} }
type VpnSslWebHostCheckSoftwareMapInput interface {
	pulumi.Input

	ToVpnSslWebHostCheckSoftwareMapOutput() VpnSslWebHostCheckSoftwareMapOutput
	ToVpnSslWebHostCheckSoftwareMapOutputWithContext(context.Context) VpnSslWebHostCheckSoftwareMapOutput
}

type VpnSslWebHostCheckSoftwareMap map[string]VpnSslWebHostCheckSoftwareInput

func (VpnSslWebHostCheckSoftwareMap) ElementType() reflect.Type {
	return reflect.TypeOf((*map[string]*VpnSslWebHostCheckSoftware)(nil)).Elem()
}

func (i VpnSslWebHostCheckSoftwareMap) ToVpnSslWebHostCheckSoftwareMapOutput() VpnSslWebHostCheckSoftwareMapOutput {
	return i.ToVpnSslWebHostCheckSoftwareMapOutputWithContext(context.Background())
}

func (i VpnSslWebHostCheckSoftwareMap) ToVpnSslWebHostCheckSoftwareMapOutputWithContext(ctx context.Context) VpnSslWebHostCheckSoftwareMapOutput {
	return pulumi.ToOutputWithContext(ctx, i).(VpnSslWebHostCheckSoftwareMapOutput)
}

type VpnSslWebHostCheckSoftwareOutput struct{ *pulumi.OutputState }

func (VpnSslWebHostCheckSoftwareOutput) ElementType() reflect.Type {
	return reflect.TypeOf((**VpnSslWebHostCheckSoftware)(nil)).Elem()
}

func (o VpnSslWebHostCheckSoftwareOutput) ToVpnSslWebHostCheckSoftwareOutput() VpnSslWebHostCheckSoftwareOutput {
	return o
}

func (o VpnSslWebHostCheckSoftwareOutput) ToVpnSslWebHostCheckSoftwareOutputWithContext(ctx context.Context) VpnSslWebHostCheckSoftwareOutput {
	return o
}

func (o VpnSslWebHostCheckSoftwareOutput) CheckItemLists() VpnSslWebHostCheckSoftwareCheckItemListArrayOutput {
	return o.ApplyT(func(v *VpnSslWebHostCheckSoftware) VpnSslWebHostCheckSoftwareCheckItemListArrayOutput {
		return v.CheckItemLists
	}).(VpnSslWebHostCheckSoftwareCheckItemListArrayOutput)
}

func (o VpnSslWebHostCheckSoftwareOutput) DynamicSortSubtable() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *VpnSslWebHostCheckSoftware) pulumi.StringPtrOutput { return v.DynamicSortSubtable }).(pulumi.StringPtrOutput)
}

func (o VpnSslWebHostCheckSoftwareOutput) GetAllTables() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *VpnSslWebHostCheckSoftware) pulumi.StringPtrOutput { return v.GetAllTables }).(pulumi.StringPtrOutput)
}

func (o VpnSslWebHostCheckSoftwareOutput) Guid() pulumi.StringOutput {
	return o.ApplyT(func(v *VpnSslWebHostCheckSoftware) pulumi.StringOutput { return v.Guid }).(pulumi.StringOutput)
}

func (o VpnSslWebHostCheckSoftwareOutput) Name() pulumi.StringOutput {
	return o.ApplyT(func(v *VpnSslWebHostCheckSoftware) pulumi.StringOutput { return v.Name }).(pulumi.StringOutput)
}

func (o VpnSslWebHostCheckSoftwareOutput) OsType() pulumi.StringOutput {
	return o.ApplyT(func(v *VpnSslWebHostCheckSoftware) pulumi.StringOutput { return v.OsType }).(pulumi.StringOutput)
}

func (o VpnSslWebHostCheckSoftwareOutput) Type() pulumi.StringOutput {
	return o.ApplyT(func(v *VpnSslWebHostCheckSoftware) pulumi.StringOutput { return v.Type }).(pulumi.StringOutput)
}

func (o VpnSslWebHostCheckSoftwareOutput) Vdomparam() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *VpnSslWebHostCheckSoftware) pulumi.StringPtrOutput { return v.Vdomparam }).(pulumi.StringPtrOutput)
}

func (o VpnSslWebHostCheckSoftwareOutput) Version() pulumi.StringOutput {
	return o.ApplyT(func(v *VpnSslWebHostCheckSoftware) pulumi.StringOutput { return v.Version }).(pulumi.StringOutput)
}

type VpnSslWebHostCheckSoftwareArrayOutput struct{ *pulumi.OutputState }

func (VpnSslWebHostCheckSoftwareArrayOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*[]*VpnSslWebHostCheckSoftware)(nil)).Elem()
}

func (o VpnSslWebHostCheckSoftwareArrayOutput) ToVpnSslWebHostCheckSoftwareArrayOutput() VpnSslWebHostCheckSoftwareArrayOutput {
	return o
}

func (o VpnSslWebHostCheckSoftwareArrayOutput) ToVpnSslWebHostCheckSoftwareArrayOutputWithContext(ctx context.Context) VpnSslWebHostCheckSoftwareArrayOutput {
	return o
}

func (o VpnSslWebHostCheckSoftwareArrayOutput) Index(i pulumi.IntInput) VpnSslWebHostCheckSoftwareOutput {
	return pulumi.All(o, i).ApplyT(func(vs []interface{}) *VpnSslWebHostCheckSoftware {
		return vs[0].([]*VpnSslWebHostCheckSoftware)[vs[1].(int)]
	}).(VpnSslWebHostCheckSoftwareOutput)
}

type VpnSslWebHostCheckSoftwareMapOutput struct{ *pulumi.OutputState }

func (VpnSslWebHostCheckSoftwareMapOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*map[string]*VpnSslWebHostCheckSoftware)(nil)).Elem()
}

func (o VpnSslWebHostCheckSoftwareMapOutput) ToVpnSslWebHostCheckSoftwareMapOutput() VpnSslWebHostCheckSoftwareMapOutput {
	return o
}

func (o VpnSslWebHostCheckSoftwareMapOutput) ToVpnSslWebHostCheckSoftwareMapOutputWithContext(ctx context.Context) VpnSslWebHostCheckSoftwareMapOutput {
	return o
}

func (o VpnSslWebHostCheckSoftwareMapOutput) MapIndex(k pulumi.StringInput) VpnSslWebHostCheckSoftwareOutput {
	return pulumi.All(o, k).ApplyT(func(vs []interface{}) *VpnSslWebHostCheckSoftware {
		return vs[0].(map[string]*VpnSslWebHostCheckSoftware)[vs[1].(string)]
	}).(VpnSslWebHostCheckSoftwareOutput)
}

func init() {
	pulumi.RegisterInputType(reflect.TypeOf((*VpnSslWebHostCheckSoftwareInput)(nil)).Elem(), &VpnSslWebHostCheckSoftware{})
	pulumi.RegisterInputType(reflect.TypeOf((*VpnSslWebHostCheckSoftwareArrayInput)(nil)).Elem(), VpnSslWebHostCheckSoftwareArray{})
	pulumi.RegisterInputType(reflect.TypeOf((*VpnSslWebHostCheckSoftwareMapInput)(nil)).Elem(), VpnSslWebHostCheckSoftwareMap{})
	pulumi.RegisterOutputType(VpnSslWebHostCheckSoftwareOutput{})
	pulumi.RegisterOutputType(VpnSslWebHostCheckSoftwareArrayOutput{})
	pulumi.RegisterOutputType(VpnSslWebHostCheckSoftwareMapOutput{})
}
