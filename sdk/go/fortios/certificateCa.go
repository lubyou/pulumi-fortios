// Code generated by the Pulumi Terraform Bridge (tfgen) Tool DO NOT EDIT.
// *** WARNING: Do not edit by hand unless you're certain you know what you are doing! ***

package fortios

import (
	"context"
	"reflect"

	"errors"
	"github.com/lubyou/pulumi-fortios/sdk/go/fortios/internal"
	"github.com/pulumi/pulumi/sdk/v3/go/pulumi"
)

type CertificateCa struct {
	pulumi.CustomResourceState

	AutoUpdateDays        pulumi.IntOutput       `pulumi:"autoUpdateDays"`
	AutoUpdateDaysWarning pulumi.IntOutput       `pulumi:"autoUpdateDaysWarning"`
	Ca                    pulumi.StringOutput    `pulumi:"ca"`
	CaIdentifier          pulumi.StringOutput    `pulumi:"caIdentifier"`
	LastUpdated           pulumi.IntOutput       `pulumi:"lastUpdated"`
	Name                  pulumi.StringOutput    `pulumi:"name"`
	Obsolete              pulumi.StringOutput    `pulumi:"obsolete"`
	Range                 pulumi.StringOutput    `pulumi:"range"`
	ScepUrl               pulumi.StringOutput    `pulumi:"scepUrl"`
	Source                pulumi.StringOutput    `pulumi:"source"`
	SourceIp              pulumi.StringOutput    `pulumi:"sourceIp"`
	SslInspectionTrusted  pulumi.StringOutput    `pulumi:"sslInspectionTrusted"`
	Trusted               pulumi.StringOutput    `pulumi:"trusted"`
	Vdomparam             pulumi.StringPtrOutput `pulumi:"vdomparam"`
}

// NewCertificateCa registers a new resource with the given unique name, arguments, and options.
func NewCertificateCa(ctx *pulumi.Context,
	name string, args *CertificateCaArgs, opts ...pulumi.ResourceOption) (*CertificateCa, error) {
	if args == nil {
		return nil, errors.New("missing one or more required arguments")
	}

	if args.Ca == nil {
		return nil, errors.New("invalid value for required argument 'Ca'")
	}
	opts = internal.PkgResourceDefaultOpts(opts)
	var resource CertificateCa
	err := ctx.RegisterResource("fortios:index/certificateCa:CertificateCa", name, args, &resource, opts...)
	if err != nil {
		return nil, err
	}
	return &resource, nil
}

// GetCertificateCa gets an existing CertificateCa resource's state with the given name, ID, and optional
// state properties that are used to uniquely qualify the lookup (nil if not required).
func GetCertificateCa(ctx *pulumi.Context,
	name string, id pulumi.IDInput, state *CertificateCaState, opts ...pulumi.ResourceOption) (*CertificateCa, error) {
	var resource CertificateCa
	err := ctx.ReadResource("fortios:index/certificateCa:CertificateCa", name, id, state, &resource, opts...)
	if err != nil {
		return nil, err
	}
	return &resource, nil
}

// Input properties used for looking up and filtering CertificateCa resources.
type certificateCaState struct {
	AutoUpdateDays        *int    `pulumi:"autoUpdateDays"`
	AutoUpdateDaysWarning *int    `pulumi:"autoUpdateDaysWarning"`
	Ca                    *string `pulumi:"ca"`
	CaIdentifier          *string `pulumi:"caIdentifier"`
	LastUpdated           *int    `pulumi:"lastUpdated"`
	Name                  *string `pulumi:"name"`
	Obsolete              *string `pulumi:"obsolete"`
	Range                 *string `pulumi:"range"`
	ScepUrl               *string `pulumi:"scepUrl"`
	Source                *string `pulumi:"source"`
	SourceIp              *string `pulumi:"sourceIp"`
	SslInspectionTrusted  *string `pulumi:"sslInspectionTrusted"`
	Trusted               *string `pulumi:"trusted"`
	Vdomparam             *string `pulumi:"vdomparam"`
}

type CertificateCaState struct {
	AutoUpdateDays        pulumi.IntPtrInput
	AutoUpdateDaysWarning pulumi.IntPtrInput
	Ca                    pulumi.StringPtrInput
	CaIdentifier          pulumi.StringPtrInput
	LastUpdated           pulumi.IntPtrInput
	Name                  pulumi.StringPtrInput
	Obsolete              pulumi.StringPtrInput
	Range                 pulumi.StringPtrInput
	ScepUrl               pulumi.StringPtrInput
	Source                pulumi.StringPtrInput
	SourceIp              pulumi.StringPtrInput
	SslInspectionTrusted  pulumi.StringPtrInput
	Trusted               pulumi.StringPtrInput
	Vdomparam             pulumi.StringPtrInput
}

func (CertificateCaState) ElementType() reflect.Type {
	return reflect.TypeOf((*certificateCaState)(nil)).Elem()
}

type certificateCaArgs struct {
	AutoUpdateDays        *int    `pulumi:"autoUpdateDays"`
	AutoUpdateDaysWarning *int    `pulumi:"autoUpdateDaysWarning"`
	Ca                    string  `pulumi:"ca"`
	CaIdentifier          *string `pulumi:"caIdentifier"`
	LastUpdated           *int    `pulumi:"lastUpdated"`
	Name                  *string `pulumi:"name"`
	Obsolete              *string `pulumi:"obsolete"`
	Range                 *string `pulumi:"range"`
	ScepUrl               *string `pulumi:"scepUrl"`
	Source                *string `pulumi:"source"`
	SourceIp              *string `pulumi:"sourceIp"`
	SslInspectionTrusted  *string `pulumi:"sslInspectionTrusted"`
	Trusted               *string `pulumi:"trusted"`
	Vdomparam             *string `pulumi:"vdomparam"`
}

// The set of arguments for constructing a CertificateCa resource.
type CertificateCaArgs struct {
	AutoUpdateDays        pulumi.IntPtrInput
	AutoUpdateDaysWarning pulumi.IntPtrInput
	Ca                    pulumi.StringInput
	CaIdentifier          pulumi.StringPtrInput
	LastUpdated           pulumi.IntPtrInput
	Name                  pulumi.StringPtrInput
	Obsolete              pulumi.StringPtrInput
	Range                 pulumi.StringPtrInput
	ScepUrl               pulumi.StringPtrInput
	Source                pulumi.StringPtrInput
	SourceIp              pulumi.StringPtrInput
	SslInspectionTrusted  pulumi.StringPtrInput
	Trusted               pulumi.StringPtrInput
	Vdomparam             pulumi.StringPtrInput
}

func (CertificateCaArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*certificateCaArgs)(nil)).Elem()
}

type CertificateCaInput interface {
	pulumi.Input

	ToCertificateCaOutput() CertificateCaOutput
	ToCertificateCaOutputWithContext(ctx context.Context) CertificateCaOutput
}

func (*CertificateCa) ElementType() reflect.Type {
	return reflect.TypeOf((**CertificateCa)(nil)).Elem()
}

func (i *CertificateCa) ToCertificateCaOutput() CertificateCaOutput {
	return i.ToCertificateCaOutputWithContext(context.Background())
}

func (i *CertificateCa) ToCertificateCaOutputWithContext(ctx context.Context) CertificateCaOutput {
	return pulumi.ToOutputWithContext(ctx, i).(CertificateCaOutput)
}

// CertificateCaArrayInput is an input type that accepts CertificateCaArray and CertificateCaArrayOutput values.
// You can construct a concrete instance of `CertificateCaArrayInput` via:
//
//	CertificateCaArray{ CertificateCaArgs{...} }
type CertificateCaArrayInput interface {
	pulumi.Input

	ToCertificateCaArrayOutput() CertificateCaArrayOutput
	ToCertificateCaArrayOutputWithContext(context.Context) CertificateCaArrayOutput
}

type CertificateCaArray []CertificateCaInput

func (CertificateCaArray) ElementType() reflect.Type {
	return reflect.TypeOf((*[]*CertificateCa)(nil)).Elem()
}

func (i CertificateCaArray) ToCertificateCaArrayOutput() CertificateCaArrayOutput {
	return i.ToCertificateCaArrayOutputWithContext(context.Background())
}

func (i CertificateCaArray) ToCertificateCaArrayOutputWithContext(ctx context.Context) CertificateCaArrayOutput {
	return pulumi.ToOutputWithContext(ctx, i).(CertificateCaArrayOutput)
}

// CertificateCaMapInput is an input type that accepts CertificateCaMap and CertificateCaMapOutput values.
// You can construct a concrete instance of `CertificateCaMapInput` via:
//
//	CertificateCaMap{ "key": CertificateCaArgs{...} }
type CertificateCaMapInput interface {
	pulumi.Input

	ToCertificateCaMapOutput() CertificateCaMapOutput
	ToCertificateCaMapOutputWithContext(context.Context) CertificateCaMapOutput
}

type CertificateCaMap map[string]CertificateCaInput

func (CertificateCaMap) ElementType() reflect.Type {
	return reflect.TypeOf((*map[string]*CertificateCa)(nil)).Elem()
}

func (i CertificateCaMap) ToCertificateCaMapOutput() CertificateCaMapOutput {
	return i.ToCertificateCaMapOutputWithContext(context.Background())
}

func (i CertificateCaMap) ToCertificateCaMapOutputWithContext(ctx context.Context) CertificateCaMapOutput {
	return pulumi.ToOutputWithContext(ctx, i).(CertificateCaMapOutput)
}

type CertificateCaOutput struct{ *pulumi.OutputState }

func (CertificateCaOutput) ElementType() reflect.Type {
	return reflect.TypeOf((**CertificateCa)(nil)).Elem()
}

func (o CertificateCaOutput) ToCertificateCaOutput() CertificateCaOutput {
	return o
}

func (o CertificateCaOutput) ToCertificateCaOutputWithContext(ctx context.Context) CertificateCaOutput {
	return o
}

func (o CertificateCaOutput) AutoUpdateDays() pulumi.IntOutput {
	return o.ApplyT(func(v *CertificateCa) pulumi.IntOutput { return v.AutoUpdateDays }).(pulumi.IntOutput)
}

func (o CertificateCaOutput) AutoUpdateDaysWarning() pulumi.IntOutput {
	return o.ApplyT(func(v *CertificateCa) pulumi.IntOutput { return v.AutoUpdateDaysWarning }).(pulumi.IntOutput)
}

func (o CertificateCaOutput) Ca() pulumi.StringOutput {
	return o.ApplyT(func(v *CertificateCa) pulumi.StringOutput { return v.Ca }).(pulumi.StringOutput)
}

func (o CertificateCaOutput) CaIdentifier() pulumi.StringOutput {
	return o.ApplyT(func(v *CertificateCa) pulumi.StringOutput { return v.CaIdentifier }).(pulumi.StringOutput)
}

func (o CertificateCaOutput) LastUpdated() pulumi.IntOutput {
	return o.ApplyT(func(v *CertificateCa) pulumi.IntOutput { return v.LastUpdated }).(pulumi.IntOutput)
}

func (o CertificateCaOutput) Name() pulumi.StringOutput {
	return o.ApplyT(func(v *CertificateCa) pulumi.StringOutput { return v.Name }).(pulumi.StringOutput)
}

func (o CertificateCaOutput) Obsolete() pulumi.StringOutput {
	return o.ApplyT(func(v *CertificateCa) pulumi.StringOutput { return v.Obsolete }).(pulumi.StringOutput)
}

func (o CertificateCaOutput) Range() pulumi.StringOutput {
	return o.ApplyT(func(v *CertificateCa) pulumi.StringOutput { return v.Range }).(pulumi.StringOutput)
}

func (o CertificateCaOutput) ScepUrl() pulumi.StringOutput {
	return o.ApplyT(func(v *CertificateCa) pulumi.StringOutput { return v.ScepUrl }).(pulumi.StringOutput)
}

func (o CertificateCaOutput) Source() pulumi.StringOutput {
	return o.ApplyT(func(v *CertificateCa) pulumi.StringOutput { return v.Source }).(pulumi.StringOutput)
}

func (o CertificateCaOutput) SourceIp() pulumi.StringOutput {
	return o.ApplyT(func(v *CertificateCa) pulumi.StringOutput { return v.SourceIp }).(pulumi.StringOutput)
}

func (o CertificateCaOutput) SslInspectionTrusted() pulumi.StringOutput {
	return o.ApplyT(func(v *CertificateCa) pulumi.StringOutput { return v.SslInspectionTrusted }).(pulumi.StringOutput)
}

func (o CertificateCaOutput) Trusted() pulumi.StringOutput {
	return o.ApplyT(func(v *CertificateCa) pulumi.StringOutput { return v.Trusted }).(pulumi.StringOutput)
}

func (o CertificateCaOutput) Vdomparam() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *CertificateCa) pulumi.StringPtrOutput { return v.Vdomparam }).(pulumi.StringPtrOutput)
}

type CertificateCaArrayOutput struct{ *pulumi.OutputState }

func (CertificateCaArrayOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*[]*CertificateCa)(nil)).Elem()
}

func (o CertificateCaArrayOutput) ToCertificateCaArrayOutput() CertificateCaArrayOutput {
	return o
}

func (o CertificateCaArrayOutput) ToCertificateCaArrayOutputWithContext(ctx context.Context) CertificateCaArrayOutput {
	return o
}

func (o CertificateCaArrayOutput) Index(i pulumi.IntInput) CertificateCaOutput {
	return pulumi.All(o, i).ApplyT(func(vs []interface{}) *CertificateCa {
		return vs[0].([]*CertificateCa)[vs[1].(int)]
	}).(CertificateCaOutput)
}

type CertificateCaMapOutput struct{ *pulumi.OutputState }

func (CertificateCaMapOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*map[string]*CertificateCa)(nil)).Elem()
}

func (o CertificateCaMapOutput) ToCertificateCaMapOutput() CertificateCaMapOutput {
	return o
}

func (o CertificateCaMapOutput) ToCertificateCaMapOutputWithContext(ctx context.Context) CertificateCaMapOutput {
	return o
}

func (o CertificateCaMapOutput) MapIndex(k pulumi.StringInput) CertificateCaOutput {
	return pulumi.All(o, k).ApplyT(func(vs []interface{}) *CertificateCa {
		return vs[0].(map[string]*CertificateCa)[vs[1].(string)]
	}).(CertificateCaOutput)
}

func init() {
	pulumi.RegisterInputType(reflect.TypeOf((*CertificateCaInput)(nil)).Elem(), &CertificateCa{})
	pulumi.RegisterInputType(reflect.TypeOf((*CertificateCaArrayInput)(nil)).Elem(), CertificateCaArray{})
	pulumi.RegisterInputType(reflect.TypeOf((*CertificateCaMapInput)(nil)).Elem(), CertificateCaMap{})
	pulumi.RegisterOutputType(CertificateCaOutput{})
	pulumi.RegisterOutputType(CertificateCaArrayOutput{})
	pulumi.RegisterOutputType(CertificateCaMapOutput{})
}
