// Code generated by the Pulumi Terraform Bridge (tfgen) Tool DO NOT EDIT.
// *** WARNING: Do not edit by hand unless you're certain you know what you are doing! ***

package fortios

import (
	"context"
	"reflect"

	"errors"
	"github.com/lubyou/pulumi-fortios/sdk/go/fortios/internal"
	"github.com/pulumi/pulumi/sdk/v3/go/pulumi"
)

type NetworkingInterfacePort struct {
	pulumi.CustomResourceState

	Alias                pulumi.StringOutput    `pulumi:"alias"`
	Allowaccess          pulumi.StringOutput    `pulumi:"allowaccess"`
	Defaultgw            pulumi.StringOutput    `pulumi:"defaultgw"`
	Description          pulumi.StringPtrOutput `pulumi:"description"`
	DeviceIdentification pulumi.StringOutput    `pulumi:"deviceIdentification"`
	Distance             pulumi.StringOutput    `pulumi:"distance"`
	DnsServerOverride    pulumi.StringOutput    `pulumi:"dnsServerOverride"`
	Interface            pulumi.StringOutput    `pulumi:"interface"`
	Ip                   pulumi.StringOutput    `pulumi:"ip"`
	Mode                 pulumi.StringOutput    `pulumi:"mode"`
	Mtu                  pulumi.StringOutput    `pulumi:"mtu"`
	MtuOverride          pulumi.StringOutput    `pulumi:"mtuOverride"`
	Name                 pulumi.StringOutput    `pulumi:"name"`
	Role                 pulumi.StringOutput    `pulumi:"role"`
	Speed                pulumi.StringOutput    `pulumi:"speed"`
	Status               pulumi.StringOutput    `pulumi:"status"`
	TcpMss               pulumi.StringOutput    `pulumi:"tcpMss"`
	Type                 pulumi.StringOutput    `pulumi:"type"`
	Vdom                 pulumi.StringOutput    `pulumi:"vdom"`
	Vlanid               pulumi.StringOutput    `pulumi:"vlanid"`
}

// NewNetworkingInterfacePort registers a new resource with the given unique name, arguments, and options.
func NewNetworkingInterfacePort(ctx *pulumi.Context,
	name string, args *NetworkingInterfacePortArgs, opts ...pulumi.ResourceOption) (*NetworkingInterfacePort, error) {
	if args == nil {
		return nil, errors.New("missing one or more required arguments")
	}

	if args.Type == nil {
		return nil, errors.New("invalid value for required argument 'Type'")
	}
	opts = internal.PkgResourceDefaultOpts(opts)
	var resource NetworkingInterfacePort
	err := ctx.RegisterResource("fortios:index/networkingInterfacePort:NetworkingInterfacePort", name, args, &resource, opts...)
	if err != nil {
		return nil, err
	}
	return &resource, nil
}

// GetNetworkingInterfacePort gets an existing NetworkingInterfacePort resource's state with the given name, ID, and optional
// state properties that are used to uniquely qualify the lookup (nil if not required).
func GetNetworkingInterfacePort(ctx *pulumi.Context,
	name string, id pulumi.IDInput, state *NetworkingInterfacePortState, opts ...pulumi.ResourceOption) (*NetworkingInterfacePort, error) {
	var resource NetworkingInterfacePort
	err := ctx.ReadResource("fortios:index/networkingInterfacePort:NetworkingInterfacePort", name, id, state, &resource, opts...)
	if err != nil {
		return nil, err
	}
	return &resource, nil
}

// Input properties used for looking up and filtering NetworkingInterfacePort resources.
type networkingInterfacePortState struct {
	Alias                *string `pulumi:"alias"`
	Allowaccess          *string `pulumi:"allowaccess"`
	Defaultgw            *string `pulumi:"defaultgw"`
	Description          *string `pulumi:"description"`
	DeviceIdentification *string `pulumi:"deviceIdentification"`
	Distance             *string `pulumi:"distance"`
	DnsServerOverride    *string `pulumi:"dnsServerOverride"`
	Interface            *string `pulumi:"interface"`
	Ip                   *string `pulumi:"ip"`
	Mode                 *string `pulumi:"mode"`
	Mtu                  *string `pulumi:"mtu"`
	MtuOverride          *string `pulumi:"mtuOverride"`
	Name                 *string `pulumi:"name"`
	Role                 *string `pulumi:"role"`
	Speed                *string `pulumi:"speed"`
	Status               *string `pulumi:"status"`
	TcpMss               *string `pulumi:"tcpMss"`
	Type                 *string `pulumi:"type"`
	Vdom                 *string `pulumi:"vdom"`
	Vlanid               *string `pulumi:"vlanid"`
}

type NetworkingInterfacePortState struct {
	Alias                pulumi.StringPtrInput
	Allowaccess          pulumi.StringPtrInput
	Defaultgw            pulumi.StringPtrInput
	Description          pulumi.StringPtrInput
	DeviceIdentification pulumi.StringPtrInput
	Distance             pulumi.StringPtrInput
	DnsServerOverride    pulumi.StringPtrInput
	Interface            pulumi.StringPtrInput
	Ip                   pulumi.StringPtrInput
	Mode                 pulumi.StringPtrInput
	Mtu                  pulumi.StringPtrInput
	MtuOverride          pulumi.StringPtrInput
	Name                 pulumi.StringPtrInput
	Role                 pulumi.StringPtrInput
	Speed                pulumi.StringPtrInput
	Status               pulumi.StringPtrInput
	TcpMss               pulumi.StringPtrInput
	Type                 pulumi.StringPtrInput
	Vdom                 pulumi.StringPtrInput
	Vlanid               pulumi.StringPtrInput
}

func (NetworkingInterfacePortState) ElementType() reflect.Type {
	return reflect.TypeOf((*networkingInterfacePortState)(nil)).Elem()
}

type networkingInterfacePortArgs struct {
	Alias                *string `pulumi:"alias"`
	Allowaccess          *string `pulumi:"allowaccess"`
	Defaultgw            *string `pulumi:"defaultgw"`
	Description          *string `pulumi:"description"`
	DeviceIdentification *string `pulumi:"deviceIdentification"`
	Distance             *string `pulumi:"distance"`
	DnsServerOverride    *string `pulumi:"dnsServerOverride"`
	Interface            *string `pulumi:"interface"`
	Ip                   *string `pulumi:"ip"`
	Mode                 *string `pulumi:"mode"`
	Mtu                  *string `pulumi:"mtu"`
	MtuOverride          *string `pulumi:"mtuOverride"`
	Name                 *string `pulumi:"name"`
	Role                 *string `pulumi:"role"`
	Speed                *string `pulumi:"speed"`
	Status               *string `pulumi:"status"`
	TcpMss               *string `pulumi:"tcpMss"`
	Type                 string  `pulumi:"type"`
	Vdom                 *string `pulumi:"vdom"`
	Vlanid               *string `pulumi:"vlanid"`
}

// The set of arguments for constructing a NetworkingInterfacePort resource.
type NetworkingInterfacePortArgs struct {
	Alias                pulumi.StringPtrInput
	Allowaccess          pulumi.StringPtrInput
	Defaultgw            pulumi.StringPtrInput
	Description          pulumi.StringPtrInput
	DeviceIdentification pulumi.StringPtrInput
	Distance             pulumi.StringPtrInput
	DnsServerOverride    pulumi.StringPtrInput
	Interface            pulumi.StringPtrInput
	Ip                   pulumi.StringPtrInput
	Mode                 pulumi.StringPtrInput
	Mtu                  pulumi.StringPtrInput
	MtuOverride          pulumi.StringPtrInput
	Name                 pulumi.StringPtrInput
	Role                 pulumi.StringPtrInput
	Speed                pulumi.StringPtrInput
	Status               pulumi.StringPtrInput
	TcpMss               pulumi.StringPtrInput
	Type                 pulumi.StringInput
	Vdom                 pulumi.StringPtrInput
	Vlanid               pulumi.StringPtrInput
}

func (NetworkingInterfacePortArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*networkingInterfacePortArgs)(nil)).Elem()
}

type NetworkingInterfacePortInput interface {
	pulumi.Input

	ToNetworkingInterfacePortOutput() NetworkingInterfacePortOutput
	ToNetworkingInterfacePortOutputWithContext(ctx context.Context) NetworkingInterfacePortOutput
}

func (*NetworkingInterfacePort) ElementType() reflect.Type {
	return reflect.TypeOf((**NetworkingInterfacePort)(nil)).Elem()
}

func (i *NetworkingInterfacePort) ToNetworkingInterfacePortOutput() NetworkingInterfacePortOutput {
	return i.ToNetworkingInterfacePortOutputWithContext(context.Background())
}

func (i *NetworkingInterfacePort) ToNetworkingInterfacePortOutputWithContext(ctx context.Context) NetworkingInterfacePortOutput {
	return pulumi.ToOutputWithContext(ctx, i).(NetworkingInterfacePortOutput)
}

// NetworkingInterfacePortArrayInput is an input type that accepts NetworkingInterfacePortArray and NetworkingInterfacePortArrayOutput values.
// You can construct a concrete instance of `NetworkingInterfacePortArrayInput` via:
//
//	NetworkingInterfacePortArray{ NetworkingInterfacePortArgs{...} }
type NetworkingInterfacePortArrayInput interface {
	pulumi.Input

	ToNetworkingInterfacePortArrayOutput() NetworkingInterfacePortArrayOutput
	ToNetworkingInterfacePortArrayOutputWithContext(context.Context) NetworkingInterfacePortArrayOutput
}

type NetworkingInterfacePortArray []NetworkingInterfacePortInput

func (NetworkingInterfacePortArray) ElementType() reflect.Type {
	return reflect.TypeOf((*[]*NetworkingInterfacePort)(nil)).Elem()
}

func (i NetworkingInterfacePortArray) ToNetworkingInterfacePortArrayOutput() NetworkingInterfacePortArrayOutput {
	return i.ToNetworkingInterfacePortArrayOutputWithContext(context.Background())
}

func (i NetworkingInterfacePortArray) ToNetworkingInterfacePortArrayOutputWithContext(ctx context.Context) NetworkingInterfacePortArrayOutput {
	return pulumi.ToOutputWithContext(ctx, i).(NetworkingInterfacePortArrayOutput)
}

// NetworkingInterfacePortMapInput is an input type that accepts NetworkingInterfacePortMap and NetworkingInterfacePortMapOutput values.
// You can construct a concrete instance of `NetworkingInterfacePortMapInput` via:
//
//	NetworkingInterfacePortMap{ "key": NetworkingInterfacePortArgs{...} }
type NetworkingInterfacePortMapInput interface {
	pulumi.Input

	ToNetworkingInterfacePortMapOutput() NetworkingInterfacePortMapOutput
	ToNetworkingInterfacePortMapOutputWithContext(context.Context) NetworkingInterfacePortMapOutput
}

type NetworkingInterfacePortMap map[string]NetworkingInterfacePortInput

func (NetworkingInterfacePortMap) ElementType() reflect.Type {
	return reflect.TypeOf((*map[string]*NetworkingInterfacePort)(nil)).Elem()
}

func (i NetworkingInterfacePortMap) ToNetworkingInterfacePortMapOutput() NetworkingInterfacePortMapOutput {
	return i.ToNetworkingInterfacePortMapOutputWithContext(context.Background())
}

func (i NetworkingInterfacePortMap) ToNetworkingInterfacePortMapOutputWithContext(ctx context.Context) NetworkingInterfacePortMapOutput {
	return pulumi.ToOutputWithContext(ctx, i).(NetworkingInterfacePortMapOutput)
}

type NetworkingInterfacePortOutput struct{ *pulumi.OutputState }

func (NetworkingInterfacePortOutput) ElementType() reflect.Type {
	return reflect.TypeOf((**NetworkingInterfacePort)(nil)).Elem()
}

func (o NetworkingInterfacePortOutput) ToNetworkingInterfacePortOutput() NetworkingInterfacePortOutput {
	return o
}

func (o NetworkingInterfacePortOutput) ToNetworkingInterfacePortOutputWithContext(ctx context.Context) NetworkingInterfacePortOutput {
	return o
}

func (o NetworkingInterfacePortOutput) Alias() pulumi.StringOutput {
	return o.ApplyT(func(v *NetworkingInterfacePort) pulumi.StringOutput { return v.Alias }).(pulumi.StringOutput)
}

func (o NetworkingInterfacePortOutput) Allowaccess() pulumi.StringOutput {
	return o.ApplyT(func(v *NetworkingInterfacePort) pulumi.StringOutput { return v.Allowaccess }).(pulumi.StringOutput)
}

func (o NetworkingInterfacePortOutput) Defaultgw() pulumi.StringOutput {
	return o.ApplyT(func(v *NetworkingInterfacePort) pulumi.StringOutput { return v.Defaultgw }).(pulumi.StringOutput)
}

func (o NetworkingInterfacePortOutput) Description() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *NetworkingInterfacePort) pulumi.StringPtrOutput { return v.Description }).(pulumi.StringPtrOutput)
}

func (o NetworkingInterfacePortOutput) DeviceIdentification() pulumi.StringOutput {
	return o.ApplyT(func(v *NetworkingInterfacePort) pulumi.StringOutput { return v.DeviceIdentification }).(pulumi.StringOutput)
}

func (o NetworkingInterfacePortOutput) Distance() pulumi.StringOutput {
	return o.ApplyT(func(v *NetworkingInterfacePort) pulumi.StringOutput { return v.Distance }).(pulumi.StringOutput)
}

func (o NetworkingInterfacePortOutput) DnsServerOverride() pulumi.StringOutput {
	return o.ApplyT(func(v *NetworkingInterfacePort) pulumi.StringOutput { return v.DnsServerOverride }).(pulumi.StringOutput)
}

func (o NetworkingInterfacePortOutput) Interface() pulumi.StringOutput {
	return o.ApplyT(func(v *NetworkingInterfacePort) pulumi.StringOutput { return v.Interface }).(pulumi.StringOutput)
}

func (o NetworkingInterfacePortOutput) Ip() pulumi.StringOutput {
	return o.ApplyT(func(v *NetworkingInterfacePort) pulumi.StringOutput { return v.Ip }).(pulumi.StringOutput)
}

func (o NetworkingInterfacePortOutput) Mode() pulumi.StringOutput {
	return o.ApplyT(func(v *NetworkingInterfacePort) pulumi.StringOutput { return v.Mode }).(pulumi.StringOutput)
}

func (o NetworkingInterfacePortOutput) Mtu() pulumi.StringOutput {
	return o.ApplyT(func(v *NetworkingInterfacePort) pulumi.StringOutput { return v.Mtu }).(pulumi.StringOutput)
}

func (o NetworkingInterfacePortOutput) MtuOverride() pulumi.StringOutput {
	return o.ApplyT(func(v *NetworkingInterfacePort) pulumi.StringOutput { return v.MtuOverride }).(pulumi.StringOutput)
}

func (o NetworkingInterfacePortOutput) Name() pulumi.StringOutput {
	return o.ApplyT(func(v *NetworkingInterfacePort) pulumi.StringOutput { return v.Name }).(pulumi.StringOutput)
}

func (o NetworkingInterfacePortOutput) Role() pulumi.StringOutput {
	return o.ApplyT(func(v *NetworkingInterfacePort) pulumi.StringOutput { return v.Role }).(pulumi.StringOutput)
}

func (o NetworkingInterfacePortOutput) Speed() pulumi.StringOutput {
	return o.ApplyT(func(v *NetworkingInterfacePort) pulumi.StringOutput { return v.Speed }).(pulumi.StringOutput)
}

func (o NetworkingInterfacePortOutput) Status() pulumi.StringOutput {
	return o.ApplyT(func(v *NetworkingInterfacePort) pulumi.StringOutput { return v.Status }).(pulumi.StringOutput)
}

func (o NetworkingInterfacePortOutput) TcpMss() pulumi.StringOutput {
	return o.ApplyT(func(v *NetworkingInterfacePort) pulumi.StringOutput { return v.TcpMss }).(pulumi.StringOutput)
}

func (o NetworkingInterfacePortOutput) Type() pulumi.StringOutput {
	return o.ApplyT(func(v *NetworkingInterfacePort) pulumi.StringOutput { return v.Type }).(pulumi.StringOutput)
}

func (o NetworkingInterfacePortOutput) Vdom() pulumi.StringOutput {
	return o.ApplyT(func(v *NetworkingInterfacePort) pulumi.StringOutput { return v.Vdom }).(pulumi.StringOutput)
}

func (o NetworkingInterfacePortOutput) Vlanid() pulumi.StringOutput {
	return o.ApplyT(func(v *NetworkingInterfacePort) pulumi.StringOutput { return v.Vlanid }).(pulumi.StringOutput)
}

type NetworkingInterfacePortArrayOutput struct{ *pulumi.OutputState }

func (NetworkingInterfacePortArrayOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*[]*NetworkingInterfacePort)(nil)).Elem()
}

func (o NetworkingInterfacePortArrayOutput) ToNetworkingInterfacePortArrayOutput() NetworkingInterfacePortArrayOutput {
	return o
}

func (o NetworkingInterfacePortArrayOutput) ToNetworkingInterfacePortArrayOutputWithContext(ctx context.Context) NetworkingInterfacePortArrayOutput {
	return o
}

func (o NetworkingInterfacePortArrayOutput) Index(i pulumi.IntInput) NetworkingInterfacePortOutput {
	return pulumi.All(o, i).ApplyT(func(vs []interface{}) *NetworkingInterfacePort {
		return vs[0].([]*NetworkingInterfacePort)[vs[1].(int)]
	}).(NetworkingInterfacePortOutput)
}

type NetworkingInterfacePortMapOutput struct{ *pulumi.OutputState }

func (NetworkingInterfacePortMapOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*map[string]*NetworkingInterfacePort)(nil)).Elem()
}

func (o NetworkingInterfacePortMapOutput) ToNetworkingInterfacePortMapOutput() NetworkingInterfacePortMapOutput {
	return o
}

func (o NetworkingInterfacePortMapOutput) ToNetworkingInterfacePortMapOutputWithContext(ctx context.Context) NetworkingInterfacePortMapOutput {
	return o
}

func (o NetworkingInterfacePortMapOutput) MapIndex(k pulumi.StringInput) NetworkingInterfacePortOutput {
	return pulumi.All(o, k).ApplyT(func(vs []interface{}) *NetworkingInterfacePort {
		return vs[0].(map[string]*NetworkingInterfacePort)[vs[1].(string)]
	}).(NetworkingInterfacePortOutput)
}

func init() {
	pulumi.RegisterInputType(reflect.TypeOf((*NetworkingInterfacePortInput)(nil)).Elem(), &NetworkingInterfacePort{})
	pulumi.RegisterInputType(reflect.TypeOf((*NetworkingInterfacePortArrayInput)(nil)).Elem(), NetworkingInterfacePortArray{})
	pulumi.RegisterInputType(reflect.TypeOf((*NetworkingInterfacePortMapInput)(nil)).Elem(), NetworkingInterfacePortMap{})
	pulumi.RegisterOutputType(NetworkingInterfacePortOutput{})
	pulumi.RegisterOutputType(NetworkingInterfacePortArrayOutput{})
	pulumi.RegisterOutputType(NetworkingInterfacePortMapOutput{})
}
