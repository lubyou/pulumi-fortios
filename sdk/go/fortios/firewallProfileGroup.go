// Code generated by the Pulumi Terraform Bridge (tfgen) Tool DO NOT EDIT.
// *** WARNING: Do not edit by hand unless you're certain you know what you are doing! ***

package fortios

import (
	"context"
	"reflect"

	"github.com/pulumi/pulumi/sdk/v3/go/pulumi"
)

// Configure profile groups.
//
// ## Example Usage
//
// ```go
// package main
//
// import (
// 	"github.com/lubyou/pulumi-fortios/sdk/go/fortios"
// 	"github.com/pulumi/pulumi/sdk/v3/go/pulumi"
// )
//
// func main() {
// 	pulumi.Run(func(ctx *pulumi.Context) error {
// 		_, err := fortios.NewFirewallProfileGroup(ctx, "trname", &fortios.FirewallProfileGroupArgs{
// 			ProfileProtocolOptions: pulumi.String("default"),
// 			SslSshProfile:          pulumi.String("deep-inspection"),
// 		})
// 		if err != nil {
// 			return err
// 		}
// 		return nil
// 	})
// }
// ```
//
// ## Import
//
// Firewall ProfileGroup can be imported using any of these accepted formats
//
// ```sh
//  $ pulumi import fortios:index/firewallProfileGroup:FirewallProfileGroup labelname {{name}}
// ```
//
//  If you do not want to import arguments of block$ export "FORTIOS_IMPORT_TABLE"="false"
//
// ```sh
//  $ pulumi import fortios:index/firewallProfileGroup:FirewallProfileGroup labelname {{name}}
// ```
//
//  $ unset "FORTIOS_IMPORT_TABLE"
type FirewallProfileGroup struct {
	pulumi.CustomResourceState

	// Name of an existing Application list.
	ApplicationList pulumi.StringOutput `pulumi:"applicationList"`
	// Name of an existing Antivirus profile.
	AvProfile pulumi.StringOutput `pulumi:"avProfile"`
	// Name of an existing CIFS profile.
	CifsProfile pulumi.StringOutput `pulumi:"cifsProfile"`
	// Name of an existing DLP sensor.
	DlpSensor pulumi.StringOutput `pulumi:"dlpSensor"`
	// Name of an existing DNS filter profile.
	DnsfilterProfile pulumi.StringOutput `pulumi:"dnsfilterProfile"`
	// Name of an existing email filter profile.
	EmailfilterProfile pulumi.StringOutput `pulumi:"emailfilterProfile"`
	// Name of an existing file-filter profile.
	FileFilterProfile pulumi.StringOutput `pulumi:"fileFilterProfile"`
	// Name of an existing ICAP profile.
	IcapProfile pulumi.StringOutput `pulumi:"icapProfile"`
	// Name of an existing IPS sensor.
	IpsSensor pulumi.StringOutput `pulumi:"ipsSensor"`
	// Profile group name.
	Name pulumi.StringOutput `pulumi:"name"`
	// Name of an existing Protocol options profile.
	ProfileProtocolOptions pulumi.StringOutput `pulumi:"profileProtocolOptions"`
	// Name of an existing SCTP filter profile.
	SctpFilterProfile pulumi.StringOutput `pulumi:"sctpFilterProfile"`
	// Name of an existing Spam filter profile.
	SpamfilterProfile pulumi.StringOutput `pulumi:"spamfilterProfile"`
	// Name of an existing SSH filter profile.
	SshFilterProfile pulumi.StringOutput `pulumi:"sshFilterProfile"`
	// Name of an existing SSL SSH profile.
	SslSshProfile pulumi.StringOutput `pulumi:"sslSshProfile"`
	// Specifies the vdom to which the resource will be applied when the FortiGate unit is running in VDOM mode. Only one vdom can be specified. If you want to inherit the vdom configuration of the provider, please do not set this parameter.
	Vdomparam pulumi.StringPtrOutput `pulumi:"vdomparam"`
	// Name of an existing VideoFilter profile.
	VideofilterProfile pulumi.StringOutput `pulumi:"videofilterProfile"`
	// Name of an existing VoIP profile.
	VoipProfile pulumi.StringOutput `pulumi:"voipProfile"`
	// Name of an existing Web application firewall profile.
	WafProfile pulumi.StringOutput `pulumi:"wafProfile"`
	// Name of an existing Web filter profile.
	WebfilterProfile pulumi.StringOutput `pulumi:"webfilterProfile"`
}

// NewFirewallProfileGroup registers a new resource with the given unique name, arguments, and options.
func NewFirewallProfileGroup(ctx *pulumi.Context,
	name string, args *FirewallProfileGroupArgs, opts ...pulumi.ResourceOption) (*FirewallProfileGroup, error) {
	if args == nil {
		args = &FirewallProfileGroupArgs{}
	}

	opts = pkgResourceDefaultOpts(opts)
	var resource FirewallProfileGroup
	err := ctx.RegisterResource("fortios:index/firewallProfileGroup:FirewallProfileGroup", name, args, &resource, opts...)
	if err != nil {
		return nil, err
	}
	return &resource, nil
}

// GetFirewallProfileGroup gets an existing FirewallProfileGroup resource's state with the given name, ID, and optional
// state properties that are used to uniquely qualify the lookup (nil if not required).
func GetFirewallProfileGroup(ctx *pulumi.Context,
	name string, id pulumi.IDInput, state *FirewallProfileGroupState, opts ...pulumi.ResourceOption) (*FirewallProfileGroup, error) {
	var resource FirewallProfileGroup
	err := ctx.ReadResource("fortios:index/firewallProfileGroup:FirewallProfileGroup", name, id, state, &resource, opts...)
	if err != nil {
		return nil, err
	}
	return &resource, nil
}

// Input properties used for looking up and filtering FirewallProfileGroup resources.
type firewallProfileGroupState struct {
	// Name of an existing Application list.
	ApplicationList *string `pulumi:"applicationList"`
	// Name of an existing Antivirus profile.
	AvProfile *string `pulumi:"avProfile"`
	// Name of an existing CIFS profile.
	CifsProfile *string `pulumi:"cifsProfile"`
	// Name of an existing DLP sensor.
	DlpSensor *string `pulumi:"dlpSensor"`
	// Name of an existing DNS filter profile.
	DnsfilterProfile *string `pulumi:"dnsfilterProfile"`
	// Name of an existing email filter profile.
	EmailfilterProfile *string `pulumi:"emailfilterProfile"`
	// Name of an existing file-filter profile.
	FileFilterProfile *string `pulumi:"fileFilterProfile"`
	// Name of an existing ICAP profile.
	IcapProfile *string `pulumi:"icapProfile"`
	// Name of an existing IPS sensor.
	IpsSensor *string `pulumi:"ipsSensor"`
	// Profile group name.
	Name *string `pulumi:"name"`
	// Name of an existing Protocol options profile.
	ProfileProtocolOptions *string `pulumi:"profileProtocolOptions"`
	// Name of an existing SCTP filter profile.
	SctpFilterProfile *string `pulumi:"sctpFilterProfile"`
	// Name of an existing Spam filter profile.
	SpamfilterProfile *string `pulumi:"spamfilterProfile"`
	// Name of an existing SSH filter profile.
	SshFilterProfile *string `pulumi:"sshFilterProfile"`
	// Name of an existing SSL SSH profile.
	SslSshProfile *string `pulumi:"sslSshProfile"`
	// Specifies the vdom to which the resource will be applied when the FortiGate unit is running in VDOM mode. Only one vdom can be specified. If you want to inherit the vdom configuration of the provider, please do not set this parameter.
	Vdomparam *string `pulumi:"vdomparam"`
	// Name of an existing VideoFilter profile.
	VideofilterProfile *string `pulumi:"videofilterProfile"`
	// Name of an existing VoIP profile.
	VoipProfile *string `pulumi:"voipProfile"`
	// Name of an existing Web application firewall profile.
	WafProfile *string `pulumi:"wafProfile"`
	// Name of an existing Web filter profile.
	WebfilterProfile *string `pulumi:"webfilterProfile"`
}

type FirewallProfileGroupState struct {
	// Name of an existing Application list.
	ApplicationList pulumi.StringPtrInput
	// Name of an existing Antivirus profile.
	AvProfile pulumi.StringPtrInput
	// Name of an existing CIFS profile.
	CifsProfile pulumi.StringPtrInput
	// Name of an existing DLP sensor.
	DlpSensor pulumi.StringPtrInput
	// Name of an existing DNS filter profile.
	DnsfilterProfile pulumi.StringPtrInput
	// Name of an existing email filter profile.
	EmailfilterProfile pulumi.StringPtrInput
	// Name of an existing file-filter profile.
	FileFilterProfile pulumi.StringPtrInput
	// Name of an existing ICAP profile.
	IcapProfile pulumi.StringPtrInput
	// Name of an existing IPS sensor.
	IpsSensor pulumi.StringPtrInput
	// Profile group name.
	Name pulumi.StringPtrInput
	// Name of an existing Protocol options profile.
	ProfileProtocolOptions pulumi.StringPtrInput
	// Name of an existing SCTP filter profile.
	SctpFilterProfile pulumi.StringPtrInput
	// Name of an existing Spam filter profile.
	SpamfilterProfile pulumi.StringPtrInput
	// Name of an existing SSH filter profile.
	SshFilterProfile pulumi.StringPtrInput
	// Name of an existing SSL SSH profile.
	SslSshProfile pulumi.StringPtrInput
	// Specifies the vdom to which the resource will be applied when the FortiGate unit is running in VDOM mode. Only one vdom can be specified. If you want to inherit the vdom configuration of the provider, please do not set this parameter.
	Vdomparam pulumi.StringPtrInput
	// Name of an existing VideoFilter profile.
	VideofilterProfile pulumi.StringPtrInput
	// Name of an existing VoIP profile.
	VoipProfile pulumi.StringPtrInput
	// Name of an existing Web application firewall profile.
	WafProfile pulumi.StringPtrInput
	// Name of an existing Web filter profile.
	WebfilterProfile pulumi.StringPtrInput
}

func (FirewallProfileGroupState) ElementType() reflect.Type {
	return reflect.TypeOf((*firewallProfileGroupState)(nil)).Elem()
}

type firewallProfileGroupArgs struct {
	// Name of an existing Application list.
	ApplicationList *string `pulumi:"applicationList"`
	// Name of an existing Antivirus profile.
	AvProfile *string `pulumi:"avProfile"`
	// Name of an existing CIFS profile.
	CifsProfile *string `pulumi:"cifsProfile"`
	// Name of an existing DLP sensor.
	DlpSensor *string `pulumi:"dlpSensor"`
	// Name of an existing DNS filter profile.
	DnsfilterProfile *string `pulumi:"dnsfilterProfile"`
	// Name of an existing email filter profile.
	EmailfilterProfile *string `pulumi:"emailfilterProfile"`
	// Name of an existing file-filter profile.
	FileFilterProfile *string `pulumi:"fileFilterProfile"`
	// Name of an existing ICAP profile.
	IcapProfile *string `pulumi:"icapProfile"`
	// Name of an existing IPS sensor.
	IpsSensor *string `pulumi:"ipsSensor"`
	// Profile group name.
	Name *string `pulumi:"name"`
	// Name of an existing Protocol options profile.
	ProfileProtocolOptions *string `pulumi:"profileProtocolOptions"`
	// Name of an existing SCTP filter profile.
	SctpFilterProfile *string `pulumi:"sctpFilterProfile"`
	// Name of an existing Spam filter profile.
	SpamfilterProfile *string `pulumi:"spamfilterProfile"`
	// Name of an existing SSH filter profile.
	SshFilterProfile *string `pulumi:"sshFilterProfile"`
	// Name of an existing SSL SSH profile.
	SslSshProfile *string `pulumi:"sslSshProfile"`
	// Specifies the vdom to which the resource will be applied when the FortiGate unit is running in VDOM mode. Only one vdom can be specified. If you want to inherit the vdom configuration of the provider, please do not set this parameter.
	Vdomparam *string `pulumi:"vdomparam"`
	// Name of an existing VideoFilter profile.
	VideofilterProfile *string `pulumi:"videofilterProfile"`
	// Name of an existing VoIP profile.
	VoipProfile *string `pulumi:"voipProfile"`
	// Name of an existing Web application firewall profile.
	WafProfile *string `pulumi:"wafProfile"`
	// Name of an existing Web filter profile.
	WebfilterProfile *string `pulumi:"webfilterProfile"`
}

// The set of arguments for constructing a FirewallProfileGroup resource.
type FirewallProfileGroupArgs struct {
	// Name of an existing Application list.
	ApplicationList pulumi.StringPtrInput
	// Name of an existing Antivirus profile.
	AvProfile pulumi.StringPtrInput
	// Name of an existing CIFS profile.
	CifsProfile pulumi.StringPtrInput
	// Name of an existing DLP sensor.
	DlpSensor pulumi.StringPtrInput
	// Name of an existing DNS filter profile.
	DnsfilterProfile pulumi.StringPtrInput
	// Name of an existing email filter profile.
	EmailfilterProfile pulumi.StringPtrInput
	// Name of an existing file-filter profile.
	FileFilterProfile pulumi.StringPtrInput
	// Name of an existing ICAP profile.
	IcapProfile pulumi.StringPtrInput
	// Name of an existing IPS sensor.
	IpsSensor pulumi.StringPtrInput
	// Profile group name.
	Name pulumi.StringPtrInput
	// Name of an existing Protocol options profile.
	ProfileProtocolOptions pulumi.StringPtrInput
	// Name of an existing SCTP filter profile.
	SctpFilterProfile pulumi.StringPtrInput
	// Name of an existing Spam filter profile.
	SpamfilterProfile pulumi.StringPtrInput
	// Name of an existing SSH filter profile.
	SshFilterProfile pulumi.StringPtrInput
	// Name of an existing SSL SSH profile.
	SslSshProfile pulumi.StringPtrInput
	// Specifies the vdom to which the resource will be applied when the FortiGate unit is running in VDOM mode. Only one vdom can be specified. If you want to inherit the vdom configuration of the provider, please do not set this parameter.
	Vdomparam pulumi.StringPtrInput
	// Name of an existing VideoFilter profile.
	VideofilterProfile pulumi.StringPtrInput
	// Name of an existing VoIP profile.
	VoipProfile pulumi.StringPtrInput
	// Name of an existing Web application firewall profile.
	WafProfile pulumi.StringPtrInput
	// Name of an existing Web filter profile.
	WebfilterProfile pulumi.StringPtrInput
}

func (FirewallProfileGroupArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*firewallProfileGroupArgs)(nil)).Elem()
}

type FirewallProfileGroupInput interface {
	pulumi.Input

	ToFirewallProfileGroupOutput() FirewallProfileGroupOutput
	ToFirewallProfileGroupOutputWithContext(ctx context.Context) FirewallProfileGroupOutput
}

func (*FirewallProfileGroup) ElementType() reflect.Type {
	return reflect.TypeOf((**FirewallProfileGroup)(nil)).Elem()
}

func (i *FirewallProfileGroup) ToFirewallProfileGroupOutput() FirewallProfileGroupOutput {
	return i.ToFirewallProfileGroupOutputWithContext(context.Background())
}

func (i *FirewallProfileGroup) ToFirewallProfileGroupOutputWithContext(ctx context.Context) FirewallProfileGroupOutput {
	return pulumi.ToOutputWithContext(ctx, i).(FirewallProfileGroupOutput)
}

// FirewallProfileGroupArrayInput is an input type that accepts FirewallProfileGroupArray and FirewallProfileGroupArrayOutput values.
// You can construct a concrete instance of `FirewallProfileGroupArrayInput` via:
//
//          FirewallProfileGroupArray{ FirewallProfileGroupArgs{...} }
type FirewallProfileGroupArrayInput interface {
	pulumi.Input

	ToFirewallProfileGroupArrayOutput() FirewallProfileGroupArrayOutput
	ToFirewallProfileGroupArrayOutputWithContext(context.Context) FirewallProfileGroupArrayOutput
}

type FirewallProfileGroupArray []FirewallProfileGroupInput

func (FirewallProfileGroupArray) ElementType() reflect.Type {
	return reflect.TypeOf((*[]*FirewallProfileGroup)(nil)).Elem()
}

func (i FirewallProfileGroupArray) ToFirewallProfileGroupArrayOutput() FirewallProfileGroupArrayOutput {
	return i.ToFirewallProfileGroupArrayOutputWithContext(context.Background())
}

func (i FirewallProfileGroupArray) ToFirewallProfileGroupArrayOutputWithContext(ctx context.Context) FirewallProfileGroupArrayOutput {
	return pulumi.ToOutputWithContext(ctx, i).(FirewallProfileGroupArrayOutput)
}

// FirewallProfileGroupMapInput is an input type that accepts FirewallProfileGroupMap and FirewallProfileGroupMapOutput values.
// You can construct a concrete instance of `FirewallProfileGroupMapInput` via:
//
//          FirewallProfileGroupMap{ "key": FirewallProfileGroupArgs{...} }
type FirewallProfileGroupMapInput interface {
	pulumi.Input

	ToFirewallProfileGroupMapOutput() FirewallProfileGroupMapOutput
	ToFirewallProfileGroupMapOutputWithContext(context.Context) FirewallProfileGroupMapOutput
}

type FirewallProfileGroupMap map[string]FirewallProfileGroupInput

func (FirewallProfileGroupMap) ElementType() reflect.Type {
	return reflect.TypeOf((*map[string]*FirewallProfileGroup)(nil)).Elem()
}

func (i FirewallProfileGroupMap) ToFirewallProfileGroupMapOutput() FirewallProfileGroupMapOutput {
	return i.ToFirewallProfileGroupMapOutputWithContext(context.Background())
}

func (i FirewallProfileGroupMap) ToFirewallProfileGroupMapOutputWithContext(ctx context.Context) FirewallProfileGroupMapOutput {
	return pulumi.ToOutputWithContext(ctx, i).(FirewallProfileGroupMapOutput)
}

type FirewallProfileGroupOutput struct{ *pulumi.OutputState }

func (FirewallProfileGroupOutput) ElementType() reflect.Type {
	return reflect.TypeOf((**FirewallProfileGroup)(nil)).Elem()
}

func (o FirewallProfileGroupOutput) ToFirewallProfileGroupOutput() FirewallProfileGroupOutput {
	return o
}

func (o FirewallProfileGroupOutput) ToFirewallProfileGroupOutputWithContext(ctx context.Context) FirewallProfileGroupOutput {
	return o
}

type FirewallProfileGroupArrayOutput struct{ *pulumi.OutputState }

func (FirewallProfileGroupArrayOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*[]*FirewallProfileGroup)(nil)).Elem()
}

func (o FirewallProfileGroupArrayOutput) ToFirewallProfileGroupArrayOutput() FirewallProfileGroupArrayOutput {
	return o
}

func (o FirewallProfileGroupArrayOutput) ToFirewallProfileGroupArrayOutputWithContext(ctx context.Context) FirewallProfileGroupArrayOutput {
	return o
}

func (o FirewallProfileGroupArrayOutput) Index(i pulumi.IntInput) FirewallProfileGroupOutput {
	return pulumi.All(o, i).ApplyT(func(vs []interface{}) *FirewallProfileGroup {
		return vs[0].([]*FirewallProfileGroup)[vs[1].(int)]
	}).(FirewallProfileGroupOutput)
}

type FirewallProfileGroupMapOutput struct{ *pulumi.OutputState }

func (FirewallProfileGroupMapOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*map[string]*FirewallProfileGroup)(nil)).Elem()
}

func (o FirewallProfileGroupMapOutput) ToFirewallProfileGroupMapOutput() FirewallProfileGroupMapOutput {
	return o
}

func (o FirewallProfileGroupMapOutput) ToFirewallProfileGroupMapOutputWithContext(ctx context.Context) FirewallProfileGroupMapOutput {
	return o
}

func (o FirewallProfileGroupMapOutput) MapIndex(k pulumi.StringInput) FirewallProfileGroupOutput {
	return pulumi.All(o, k).ApplyT(func(vs []interface{}) *FirewallProfileGroup {
		return vs[0].(map[string]*FirewallProfileGroup)[vs[1].(string)]
	}).(FirewallProfileGroupOutput)
}

func init() {
	pulumi.RegisterInputType(reflect.TypeOf((*FirewallProfileGroupInput)(nil)).Elem(), &FirewallProfileGroup{})
	pulumi.RegisterInputType(reflect.TypeOf((*FirewallProfileGroupArrayInput)(nil)).Elem(), FirewallProfileGroupArray{})
	pulumi.RegisterInputType(reflect.TypeOf((*FirewallProfileGroupMapInput)(nil)).Elem(), FirewallProfileGroupMap{})
	pulumi.RegisterOutputType(FirewallProfileGroupOutput{})
	pulumi.RegisterOutputType(FirewallProfileGroupArrayOutput{})
	pulumi.RegisterOutputType(FirewallProfileGroupMapOutput{})
}
