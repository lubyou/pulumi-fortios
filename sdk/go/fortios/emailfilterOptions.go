// Code generated by the Pulumi Terraform Bridge (tfgen) Tool DO NOT EDIT.
// *** WARNING: Do not edit by hand unless you're certain you know what you are doing! ***

package fortios

import (
	"context"
	"reflect"

	"github.com/lubyou/pulumi-fortios/sdk/go/fortios/internal"
	"github.com/pulumi/pulumi/sdk/v3/go/pulumi"
	"github.com/pulumi/pulumi/sdk/v3/go/pulumix"
)

type EmailfilterOptions struct {
	pulumi.CustomResourceState

	DnsTimeout pulumi.IntOutput       `pulumi:"dnsTimeout"`
	Vdomparam  pulumi.StringPtrOutput `pulumi:"vdomparam"`
}

// NewEmailfilterOptions registers a new resource with the given unique name, arguments, and options.
func NewEmailfilterOptions(ctx *pulumi.Context,
	name string, args *EmailfilterOptionsArgs, opts ...pulumi.ResourceOption) (*EmailfilterOptions, error) {
	if args == nil {
		args = &EmailfilterOptionsArgs{}
	}

	opts = internal.PkgResourceDefaultOpts(opts)
	var resource EmailfilterOptions
	err := ctx.RegisterResource("fortios:index/emailfilterOptions:EmailfilterOptions", name, args, &resource, opts...)
	if err != nil {
		return nil, err
	}
	return &resource, nil
}

// GetEmailfilterOptions gets an existing EmailfilterOptions resource's state with the given name, ID, and optional
// state properties that are used to uniquely qualify the lookup (nil if not required).
func GetEmailfilterOptions(ctx *pulumi.Context,
	name string, id pulumi.IDInput, state *EmailfilterOptionsState, opts ...pulumi.ResourceOption) (*EmailfilterOptions, error) {
	var resource EmailfilterOptions
	err := ctx.ReadResource("fortios:index/emailfilterOptions:EmailfilterOptions", name, id, state, &resource, opts...)
	if err != nil {
		return nil, err
	}
	return &resource, nil
}

// Input properties used for looking up and filtering EmailfilterOptions resources.
type emailfilterOptionsState struct {
	DnsTimeout *int    `pulumi:"dnsTimeout"`
	Vdomparam  *string `pulumi:"vdomparam"`
}

type EmailfilterOptionsState struct {
	DnsTimeout pulumi.IntPtrInput
	Vdomparam  pulumi.StringPtrInput
}

func (EmailfilterOptionsState) ElementType() reflect.Type {
	return reflect.TypeOf((*emailfilterOptionsState)(nil)).Elem()
}

type emailfilterOptionsArgs struct {
	DnsTimeout *int    `pulumi:"dnsTimeout"`
	Vdomparam  *string `pulumi:"vdomparam"`
}

// The set of arguments for constructing a EmailfilterOptions resource.
type EmailfilterOptionsArgs struct {
	DnsTimeout pulumi.IntPtrInput
	Vdomparam  pulumi.StringPtrInput
}

func (EmailfilterOptionsArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*emailfilterOptionsArgs)(nil)).Elem()
}

type EmailfilterOptionsInput interface {
	pulumi.Input

	ToEmailfilterOptionsOutput() EmailfilterOptionsOutput
	ToEmailfilterOptionsOutputWithContext(ctx context.Context) EmailfilterOptionsOutput
}

func (*EmailfilterOptions) ElementType() reflect.Type {
	return reflect.TypeOf((**EmailfilterOptions)(nil)).Elem()
}

func (i *EmailfilterOptions) ToEmailfilterOptionsOutput() EmailfilterOptionsOutput {
	return i.ToEmailfilterOptionsOutputWithContext(context.Background())
}

func (i *EmailfilterOptions) ToEmailfilterOptionsOutputWithContext(ctx context.Context) EmailfilterOptionsOutput {
	return pulumi.ToOutputWithContext(ctx, i).(EmailfilterOptionsOutput)
}

func (i *EmailfilterOptions) ToOutput(ctx context.Context) pulumix.Output[*EmailfilterOptions] {
	return pulumix.Output[*EmailfilterOptions]{
		OutputState: i.ToEmailfilterOptionsOutputWithContext(ctx).OutputState,
	}
}

// EmailfilterOptionsArrayInput is an input type that accepts EmailfilterOptionsArray and EmailfilterOptionsArrayOutput values.
// You can construct a concrete instance of `EmailfilterOptionsArrayInput` via:
//
//	EmailfilterOptionsArray{ EmailfilterOptionsArgs{...} }
type EmailfilterOptionsArrayInput interface {
	pulumi.Input

	ToEmailfilterOptionsArrayOutput() EmailfilterOptionsArrayOutput
	ToEmailfilterOptionsArrayOutputWithContext(context.Context) EmailfilterOptionsArrayOutput
}

type EmailfilterOptionsArray []EmailfilterOptionsInput

func (EmailfilterOptionsArray) ElementType() reflect.Type {
	return reflect.TypeOf((*[]*EmailfilterOptions)(nil)).Elem()
}

func (i EmailfilterOptionsArray) ToEmailfilterOptionsArrayOutput() EmailfilterOptionsArrayOutput {
	return i.ToEmailfilterOptionsArrayOutputWithContext(context.Background())
}

func (i EmailfilterOptionsArray) ToEmailfilterOptionsArrayOutputWithContext(ctx context.Context) EmailfilterOptionsArrayOutput {
	return pulumi.ToOutputWithContext(ctx, i).(EmailfilterOptionsArrayOutput)
}

func (i EmailfilterOptionsArray) ToOutput(ctx context.Context) pulumix.Output[[]*EmailfilterOptions] {
	return pulumix.Output[[]*EmailfilterOptions]{
		OutputState: i.ToEmailfilterOptionsArrayOutputWithContext(ctx).OutputState,
	}
}

// EmailfilterOptionsMapInput is an input type that accepts EmailfilterOptionsMap and EmailfilterOptionsMapOutput values.
// You can construct a concrete instance of `EmailfilterOptionsMapInput` via:
//
//	EmailfilterOptionsMap{ "key": EmailfilterOptionsArgs{...} }
type EmailfilterOptionsMapInput interface {
	pulumi.Input

	ToEmailfilterOptionsMapOutput() EmailfilterOptionsMapOutput
	ToEmailfilterOptionsMapOutputWithContext(context.Context) EmailfilterOptionsMapOutput
}

type EmailfilterOptionsMap map[string]EmailfilterOptionsInput

func (EmailfilterOptionsMap) ElementType() reflect.Type {
	return reflect.TypeOf((*map[string]*EmailfilterOptions)(nil)).Elem()
}

func (i EmailfilterOptionsMap) ToEmailfilterOptionsMapOutput() EmailfilterOptionsMapOutput {
	return i.ToEmailfilterOptionsMapOutputWithContext(context.Background())
}

func (i EmailfilterOptionsMap) ToEmailfilterOptionsMapOutputWithContext(ctx context.Context) EmailfilterOptionsMapOutput {
	return pulumi.ToOutputWithContext(ctx, i).(EmailfilterOptionsMapOutput)
}

func (i EmailfilterOptionsMap) ToOutput(ctx context.Context) pulumix.Output[map[string]*EmailfilterOptions] {
	return pulumix.Output[map[string]*EmailfilterOptions]{
		OutputState: i.ToEmailfilterOptionsMapOutputWithContext(ctx).OutputState,
	}
}

type EmailfilterOptionsOutput struct{ *pulumi.OutputState }

func (EmailfilterOptionsOutput) ElementType() reflect.Type {
	return reflect.TypeOf((**EmailfilterOptions)(nil)).Elem()
}

func (o EmailfilterOptionsOutput) ToEmailfilterOptionsOutput() EmailfilterOptionsOutput {
	return o
}

func (o EmailfilterOptionsOutput) ToEmailfilterOptionsOutputWithContext(ctx context.Context) EmailfilterOptionsOutput {
	return o
}

func (o EmailfilterOptionsOutput) ToOutput(ctx context.Context) pulumix.Output[*EmailfilterOptions] {
	return pulumix.Output[*EmailfilterOptions]{
		OutputState: o.OutputState,
	}
}

func (o EmailfilterOptionsOutput) DnsTimeout() pulumi.IntOutput {
	return o.ApplyT(func(v *EmailfilterOptions) pulumi.IntOutput { return v.DnsTimeout }).(pulumi.IntOutput)
}

func (o EmailfilterOptionsOutput) Vdomparam() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *EmailfilterOptions) pulumi.StringPtrOutput { return v.Vdomparam }).(pulumi.StringPtrOutput)
}

type EmailfilterOptionsArrayOutput struct{ *pulumi.OutputState }

func (EmailfilterOptionsArrayOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*[]*EmailfilterOptions)(nil)).Elem()
}

func (o EmailfilterOptionsArrayOutput) ToEmailfilterOptionsArrayOutput() EmailfilterOptionsArrayOutput {
	return o
}

func (o EmailfilterOptionsArrayOutput) ToEmailfilterOptionsArrayOutputWithContext(ctx context.Context) EmailfilterOptionsArrayOutput {
	return o
}

func (o EmailfilterOptionsArrayOutput) ToOutput(ctx context.Context) pulumix.Output[[]*EmailfilterOptions] {
	return pulumix.Output[[]*EmailfilterOptions]{
		OutputState: o.OutputState,
	}
}

func (o EmailfilterOptionsArrayOutput) Index(i pulumi.IntInput) EmailfilterOptionsOutput {
	return pulumi.All(o, i).ApplyT(func(vs []interface{}) *EmailfilterOptions {
		return vs[0].([]*EmailfilterOptions)[vs[1].(int)]
	}).(EmailfilterOptionsOutput)
}

type EmailfilterOptionsMapOutput struct{ *pulumi.OutputState }

func (EmailfilterOptionsMapOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*map[string]*EmailfilterOptions)(nil)).Elem()
}

func (o EmailfilterOptionsMapOutput) ToEmailfilterOptionsMapOutput() EmailfilterOptionsMapOutput {
	return o
}

func (o EmailfilterOptionsMapOutput) ToEmailfilterOptionsMapOutputWithContext(ctx context.Context) EmailfilterOptionsMapOutput {
	return o
}

func (o EmailfilterOptionsMapOutput) ToOutput(ctx context.Context) pulumix.Output[map[string]*EmailfilterOptions] {
	return pulumix.Output[map[string]*EmailfilterOptions]{
		OutputState: o.OutputState,
	}
}

func (o EmailfilterOptionsMapOutput) MapIndex(k pulumi.StringInput) EmailfilterOptionsOutput {
	return pulumi.All(o, k).ApplyT(func(vs []interface{}) *EmailfilterOptions {
		return vs[0].(map[string]*EmailfilterOptions)[vs[1].(string)]
	}).(EmailfilterOptionsOutput)
}

func init() {
	pulumi.RegisterInputType(reflect.TypeOf((*EmailfilterOptionsInput)(nil)).Elem(), &EmailfilterOptions{})
	pulumi.RegisterInputType(reflect.TypeOf((*EmailfilterOptionsArrayInput)(nil)).Elem(), EmailfilterOptionsArray{})
	pulumi.RegisterInputType(reflect.TypeOf((*EmailfilterOptionsMapInput)(nil)).Elem(), EmailfilterOptionsMap{})
	pulumi.RegisterOutputType(EmailfilterOptionsOutput{})
	pulumi.RegisterOutputType(EmailfilterOptionsArrayOutput{})
	pulumi.RegisterOutputType(EmailfilterOptionsMapOutput{})
}
