// Code generated by the Pulumi Terraform Bridge (tfgen) Tool DO NOT EDIT.
// *** WARNING: Do not edit by hand unless you're certain you know what you are doing! ***

package fortios

import (
	"context"
	"reflect"

	"github.com/lubyou/pulumi-fortios/sdk/go/fortios/internal"
	"github.com/pulumi/pulumi/sdk/v3/go/pulumi"
	"github.com/pulumi/pulumi/sdk/v3/go/pulumix"
)

type WirelessControllerRegion struct {
	pulumi.CustomResourceState

	Comments  pulumi.StringOutput    `pulumi:"comments"`
	Grayscale pulumi.StringOutput    `pulumi:"grayscale"`
	ImageType pulumi.StringOutput    `pulumi:"imageType"`
	Name      pulumi.StringOutput    `pulumi:"name"`
	Opacity   pulumi.IntOutput       `pulumi:"opacity"`
	Vdomparam pulumi.StringPtrOutput `pulumi:"vdomparam"`
}

// NewWirelessControllerRegion registers a new resource with the given unique name, arguments, and options.
func NewWirelessControllerRegion(ctx *pulumi.Context,
	name string, args *WirelessControllerRegionArgs, opts ...pulumi.ResourceOption) (*WirelessControllerRegion, error) {
	if args == nil {
		args = &WirelessControllerRegionArgs{}
	}

	opts = internal.PkgResourceDefaultOpts(opts)
	var resource WirelessControllerRegion
	err := ctx.RegisterResource("fortios:index/wirelessControllerRegion:WirelessControllerRegion", name, args, &resource, opts...)
	if err != nil {
		return nil, err
	}
	return &resource, nil
}

// GetWirelessControllerRegion gets an existing WirelessControllerRegion resource's state with the given name, ID, and optional
// state properties that are used to uniquely qualify the lookup (nil if not required).
func GetWirelessControllerRegion(ctx *pulumi.Context,
	name string, id pulumi.IDInput, state *WirelessControllerRegionState, opts ...pulumi.ResourceOption) (*WirelessControllerRegion, error) {
	var resource WirelessControllerRegion
	err := ctx.ReadResource("fortios:index/wirelessControllerRegion:WirelessControllerRegion", name, id, state, &resource, opts...)
	if err != nil {
		return nil, err
	}
	return &resource, nil
}

// Input properties used for looking up and filtering WirelessControllerRegion resources.
type wirelessControllerRegionState struct {
	Comments  *string `pulumi:"comments"`
	Grayscale *string `pulumi:"grayscale"`
	ImageType *string `pulumi:"imageType"`
	Name      *string `pulumi:"name"`
	Opacity   *int    `pulumi:"opacity"`
	Vdomparam *string `pulumi:"vdomparam"`
}

type WirelessControllerRegionState struct {
	Comments  pulumi.StringPtrInput
	Grayscale pulumi.StringPtrInput
	ImageType pulumi.StringPtrInput
	Name      pulumi.StringPtrInput
	Opacity   pulumi.IntPtrInput
	Vdomparam pulumi.StringPtrInput
}

func (WirelessControllerRegionState) ElementType() reflect.Type {
	return reflect.TypeOf((*wirelessControllerRegionState)(nil)).Elem()
}

type wirelessControllerRegionArgs struct {
	Comments  *string `pulumi:"comments"`
	Grayscale *string `pulumi:"grayscale"`
	ImageType *string `pulumi:"imageType"`
	Name      *string `pulumi:"name"`
	Opacity   *int    `pulumi:"opacity"`
	Vdomparam *string `pulumi:"vdomparam"`
}

// The set of arguments for constructing a WirelessControllerRegion resource.
type WirelessControllerRegionArgs struct {
	Comments  pulumi.StringPtrInput
	Grayscale pulumi.StringPtrInput
	ImageType pulumi.StringPtrInput
	Name      pulumi.StringPtrInput
	Opacity   pulumi.IntPtrInput
	Vdomparam pulumi.StringPtrInput
}

func (WirelessControllerRegionArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*wirelessControllerRegionArgs)(nil)).Elem()
}

type WirelessControllerRegionInput interface {
	pulumi.Input

	ToWirelessControllerRegionOutput() WirelessControllerRegionOutput
	ToWirelessControllerRegionOutputWithContext(ctx context.Context) WirelessControllerRegionOutput
}

func (*WirelessControllerRegion) ElementType() reflect.Type {
	return reflect.TypeOf((**WirelessControllerRegion)(nil)).Elem()
}

func (i *WirelessControllerRegion) ToWirelessControllerRegionOutput() WirelessControllerRegionOutput {
	return i.ToWirelessControllerRegionOutputWithContext(context.Background())
}

func (i *WirelessControllerRegion) ToWirelessControllerRegionOutputWithContext(ctx context.Context) WirelessControllerRegionOutput {
	return pulumi.ToOutputWithContext(ctx, i).(WirelessControllerRegionOutput)
}

func (i *WirelessControllerRegion) ToOutput(ctx context.Context) pulumix.Output[*WirelessControllerRegion] {
	return pulumix.Output[*WirelessControllerRegion]{
		OutputState: i.ToWirelessControllerRegionOutputWithContext(ctx).OutputState,
	}
}

// WirelessControllerRegionArrayInput is an input type that accepts WirelessControllerRegionArray and WirelessControllerRegionArrayOutput values.
// You can construct a concrete instance of `WirelessControllerRegionArrayInput` via:
//
//	WirelessControllerRegionArray{ WirelessControllerRegionArgs{...} }
type WirelessControllerRegionArrayInput interface {
	pulumi.Input

	ToWirelessControllerRegionArrayOutput() WirelessControllerRegionArrayOutput
	ToWirelessControllerRegionArrayOutputWithContext(context.Context) WirelessControllerRegionArrayOutput
}

type WirelessControllerRegionArray []WirelessControllerRegionInput

func (WirelessControllerRegionArray) ElementType() reflect.Type {
	return reflect.TypeOf((*[]*WirelessControllerRegion)(nil)).Elem()
}

func (i WirelessControllerRegionArray) ToWirelessControllerRegionArrayOutput() WirelessControllerRegionArrayOutput {
	return i.ToWirelessControllerRegionArrayOutputWithContext(context.Background())
}

func (i WirelessControllerRegionArray) ToWirelessControllerRegionArrayOutputWithContext(ctx context.Context) WirelessControllerRegionArrayOutput {
	return pulumi.ToOutputWithContext(ctx, i).(WirelessControllerRegionArrayOutput)
}

func (i WirelessControllerRegionArray) ToOutput(ctx context.Context) pulumix.Output[[]*WirelessControllerRegion] {
	return pulumix.Output[[]*WirelessControllerRegion]{
		OutputState: i.ToWirelessControllerRegionArrayOutputWithContext(ctx).OutputState,
	}
}

// WirelessControllerRegionMapInput is an input type that accepts WirelessControllerRegionMap and WirelessControllerRegionMapOutput values.
// You can construct a concrete instance of `WirelessControllerRegionMapInput` via:
//
//	WirelessControllerRegionMap{ "key": WirelessControllerRegionArgs{...} }
type WirelessControllerRegionMapInput interface {
	pulumi.Input

	ToWirelessControllerRegionMapOutput() WirelessControllerRegionMapOutput
	ToWirelessControllerRegionMapOutputWithContext(context.Context) WirelessControllerRegionMapOutput
}

type WirelessControllerRegionMap map[string]WirelessControllerRegionInput

func (WirelessControllerRegionMap) ElementType() reflect.Type {
	return reflect.TypeOf((*map[string]*WirelessControllerRegion)(nil)).Elem()
}

func (i WirelessControllerRegionMap) ToWirelessControllerRegionMapOutput() WirelessControllerRegionMapOutput {
	return i.ToWirelessControllerRegionMapOutputWithContext(context.Background())
}

func (i WirelessControllerRegionMap) ToWirelessControllerRegionMapOutputWithContext(ctx context.Context) WirelessControllerRegionMapOutput {
	return pulumi.ToOutputWithContext(ctx, i).(WirelessControllerRegionMapOutput)
}

func (i WirelessControllerRegionMap) ToOutput(ctx context.Context) pulumix.Output[map[string]*WirelessControllerRegion] {
	return pulumix.Output[map[string]*WirelessControllerRegion]{
		OutputState: i.ToWirelessControllerRegionMapOutputWithContext(ctx).OutputState,
	}
}

type WirelessControllerRegionOutput struct{ *pulumi.OutputState }

func (WirelessControllerRegionOutput) ElementType() reflect.Type {
	return reflect.TypeOf((**WirelessControllerRegion)(nil)).Elem()
}

func (o WirelessControllerRegionOutput) ToWirelessControllerRegionOutput() WirelessControllerRegionOutput {
	return o
}

func (o WirelessControllerRegionOutput) ToWirelessControllerRegionOutputWithContext(ctx context.Context) WirelessControllerRegionOutput {
	return o
}

func (o WirelessControllerRegionOutput) ToOutput(ctx context.Context) pulumix.Output[*WirelessControllerRegion] {
	return pulumix.Output[*WirelessControllerRegion]{
		OutputState: o.OutputState,
	}
}

func (o WirelessControllerRegionOutput) Comments() pulumi.StringOutput {
	return o.ApplyT(func(v *WirelessControllerRegion) pulumi.StringOutput { return v.Comments }).(pulumi.StringOutput)
}

func (o WirelessControllerRegionOutput) Grayscale() pulumi.StringOutput {
	return o.ApplyT(func(v *WirelessControllerRegion) pulumi.StringOutput { return v.Grayscale }).(pulumi.StringOutput)
}

func (o WirelessControllerRegionOutput) ImageType() pulumi.StringOutput {
	return o.ApplyT(func(v *WirelessControllerRegion) pulumi.StringOutput { return v.ImageType }).(pulumi.StringOutput)
}

func (o WirelessControllerRegionOutput) Name() pulumi.StringOutput {
	return o.ApplyT(func(v *WirelessControllerRegion) pulumi.StringOutput { return v.Name }).(pulumi.StringOutput)
}

func (o WirelessControllerRegionOutput) Opacity() pulumi.IntOutput {
	return o.ApplyT(func(v *WirelessControllerRegion) pulumi.IntOutput { return v.Opacity }).(pulumi.IntOutput)
}

func (o WirelessControllerRegionOutput) Vdomparam() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *WirelessControllerRegion) pulumi.StringPtrOutput { return v.Vdomparam }).(pulumi.StringPtrOutput)
}

type WirelessControllerRegionArrayOutput struct{ *pulumi.OutputState }

func (WirelessControllerRegionArrayOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*[]*WirelessControllerRegion)(nil)).Elem()
}

func (o WirelessControllerRegionArrayOutput) ToWirelessControllerRegionArrayOutput() WirelessControllerRegionArrayOutput {
	return o
}

func (o WirelessControllerRegionArrayOutput) ToWirelessControllerRegionArrayOutputWithContext(ctx context.Context) WirelessControllerRegionArrayOutput {
	return o
}

func (o WirelessControllerRegionArrayOutput) ToOutput(ctx context.Context) pulumix.Output[[]*WirelessControllerRegion] {
	return pulumix.Output[[]*WirelessControllerRegion]{
		OutputState: o.OutputState,
	}
}

func (o WirelessControllerRegionArrayOutput) Index(i pulumi.IntInput) WirelessControllerRegionOutput {
	return pulumi.All(o, i).ApplyT(func(vs []interface{}) *WirelessControllerRegion {
		return vs[0].([]*WirelessControllerRegion)[vs[1].(int)]
	}).(WirelessControllerRegionOutput)
}

type WirelessControllerRegionMapOutput struct{ *pulumi.OutputState }

func (WirelessControllerRegionMapOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*map[string]*WirelessControllerRegion)(nil)).Elem()
}

func (o WirelessControllerRegionMapOutput) ToWirelessControllerRegionMapOutput() WirelessControllerRegionMapOutput {
	return o
}

func (o WirelessControllerRegionMapOutput) ToWirelessControllerRegionMapOutputWithContext(ctx context.Context) WirelessControllerRegionMapOutput {
	return o
}

func (o WirelessControllerRegionMapOutput) ToOutput(ctx context.Context) pulumix.Output[map[string]*WirelessControllerRegion] {
	return pulumix.Output[map[string]*WirelessControllerRegion]{
		OutputState: o.OutputState,
	}
}

func (o WirelessControllerRegionMapOutput) MapIndex(k pulumi.StringInput) WirelessControllerRegionOutput {
	return pulumi.All(o, k).ApplyT(func(vs []interface{}) *WirelessControllerRegion {
		return vs[0].(map[string]*WirelessControllerRegion)[vs[1].(string)]
	}).(WirelessControllerRegionOutput)
}

func init() {
	pulumi.RegisterInputType(reflect.TypeOf((*WirelessControllerRegionInput)(nil)).Elem(), &WirelessControllerRegion{})
	pulumi.RegisterInputType(reflect.TypeOf((*WirelessControllerRegionArrayInput)(nil)).Elem(), WirelessControllerRegionArray{})
	pulumi.RegisterInputType(reflect.TypeOf((*WirelessControllerRegionMapInput)(nil)).Elem(), WirelessControllerRegionMap{})
	pulumi.RegisterOutputType(WirelessControllerRegionOutput{})
	pulumi.RegisterOutputType(WirelessControllerRegionArrayOutput{})
	pulumi.RegisterOutputType(WirelessControllerRegionMapOutput{})
}
