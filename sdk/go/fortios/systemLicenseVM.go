// *** WARNING: this file was generated by the Pulumi Terraform Bridge (tfgen) Tool. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

package fortios

import (
	"context"
	"reflect"

	"github.com/pkg/errors"
	"github.com/pulumi/pulumi/sdk/v3/go/pulumi"
)

// Provides a resource to update VM license using uploaded file for FortiOS. Reboots immediately if successful.
//
// ## Example Usage
//
// ```go
// package main
//
// import (
// 	"github.com/pulumi/pulumi-fortios/sdk/go/fortios"
// 	"github.com/pulumi/pulumi/sdk/v3/go/pulumi"
// )
//
// func main() {
// 	pulumi.Run(func(ctx *pulumi.Context) error {
// 		_, err := fortios.NewSystemLicenseVM(ctx, "test2", &fortios.SystemLicenseVMArgs{
// 			FileContent: pulumi.String("LS0tLS1CRUdJTiBGR1QgVk0gTElDRU5TRS0tLS0tDQpRQUFBQUxXaTdCVnVkV2x3QXJZcC92S2J2Yk5zME5YNWluUW9sVldmcFoxWldJQi9pL2g4c01oR0psWWc5Vkl1DQorSlBJRis1aFphMWwyNm9yNHdiEQE3RnJDeVZnQUFBQWhxWjliWHFLK1hGN2o3dnB3WTB6QXRTaTdOMVM1ZWNxDQpWYmRRREZyYklUdnRvUWNyRU1jV0ltQzFqWWs5dmVoeGlYTG1OV0MwN25BSitYTTJFNmh2b29DMjE1YUwxK2wrDQovUHl5M0VLVnNTNjJDT2hMZHc3UndXajB3V3RqMmZiWg0KLS0tLS1FTkQgRkdUIFZNIExJQ0VOU0UtLS0tLQ0K"),
// 		})
// 		if err != nil {
// 			return err
// 		}
// 		return nil
// 	})
// }
// ```
type SystemLicenseVM struct {
	pulumi.CustomResourceState

	// The license file, it needs to be base64 encoded, must not contain whitespace or other invalid base64 characters, and must be included in HTTP body.
	FileContent pulumi.StringOutput `pulumi:"fileContent"`
}

// NewSystemLicenseVM registers a new resource with the given unique name, arguments, and options.
func NewSystemLicenseVM(ctx *pulumi.Context,
	name string, args *SystemLicenseVMArgs, opts ...pulumi.ResourceOption) (*SystemLicenseVM, error) {
	if args == nil {
		return nil, errors.New("missing one or more required arguments")
	}

	if args.FileContent == nil {
		return nil, errors.New("invalid value for required argument 'FileContent'")
	}
	var resource SystemLicenseVM
	err := ctx.RegisterResource("fortios:index/systemLicenseVM:SystemLicenseVM", name, args, &resource, opts...)
	if err != nil {
		return nil, err
	}
	return &resource, nil
}

// GetSystemLicenseVM gets an existing SystemLicenseVM resource's state with the given name, ID, and optional
// state properties that are used to uniquely qualify the lookup (nil if not required).
func GetSystemLicenseVM(ctx *pulumi.Context,
	name string, id pulumi.IDInput, state *SystemLicenseVMState, opts ...pulumi.ResourceOption) (*SystemLicenseVM, error) {
	var resource SystemLicenseVM
	err := ctx.ReadResource("fortios:index/systemLicenseVM:SystemLicenseVM", name, id, state, &resource, opts...)
	if err != nil {
		return nil, err
	}
	return &resource, nil
}

// Input properties used for looking up and filtering SystemLicenseVM resources.
type systemLicenseVMState struct {
	// The license file, it needs to be base64 encoded, must not contain whitespace or other invalid base64 characters, and must be included in HTTP body.
	FileContent *string `pulumi:"fileContent"`
}

type SystemLicenseVMState struct {
	// The license file, it needs to be base64 encoded, must not contain whitespace or other invalid base64 characters, and must be included in HTTP body.
	FileContent pulumi.StringPtrInput
}

func (SystemLicenseVMState) ElementType() reflect.Type {
	return reflect.TypeOf((*systemLicenseVMState)(nil)).Elem()
}

type systemLicenseVMArgs struct {
	// The license file, it needs to be base64 encoded, must not contain whitespace or other invalid base64 characters, and must be included in HTTP body.
	FileContent string `pulumi:"fileContent"`
}

// The set of arguments for constructing a SystemLicenseVM resource.
type SystemLicenseVMArgs struct {
	// The license file, it needs to be base64 encoded, must not contain whitespace or other invalid base64 characters, and must be included in HTTP body.
	FileContent pulumi.StringInput
}

func (SystemLicenseVMArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*systemLicenseVMArgs)(nil)).Elem()
}

type SystemLicenseVMInput interface {
	pulumi.Input

	ToSystemLicenseVMOutput() SystemLicenseVMOutput
	ToSystemLicenseVMOutputWithContext(ctx context.Context) SystemLicenseVMOutput
}

func (*SystemLicenseVM) ElementType() reflect.Type {
	return reflect.TypeOf((*SystemLicenseVM)(nil))
}

func (i *SystemLicenseVM) ToSystemLicenseVMOutput() SystemLicenseVMOutput {
	return i.ToSystemLicenseVMOutputWithContext(context.Background())
}

func (i *SystemLicenseVM) ToSystemLicenseVMOutputWithContext(ctx context.Context) SystemLicenseVMOutput {
	return pulumi.ToOutputWithContext(ctx, i).(SystemLicenseVMOutput)
}

func (i *SystemLicenseVM) ToSystemLicenseVMPtrOutput() SystemLicenseVMPtrOutput {
	return i.ToSystemLicenseVMPtrOutputWithContext(context.Background())
}

func (i *SystemLicenseVM) ToSystemLicenseVMPtrOutputWithContext(ctx context.Context) SystemLicenseVMPtrOutput {
	return pulumi.ToOutputWithContext(ctx, i).(SystemLicenseVMPtrOutput)
}

type SystemLicenseVMPtrInput interface {
	pulumi.Input

	ToSystemLicenseVMPtrOutput() SystemLicenseVMPtrOutput
	ToSystemLicenseVMPtrOutputWithContext(ctx context.Context) SystemLicenseVMPtrOutput
}

type systemLicenseVMPtrType SystemLicenseVMArgs

func (*systemLicenseVMPtrType) ElementType() reflect.Type {
	return reflect.TypeOf((**SystemLicenseVM)(nil))
}

func (i *systemLicenseVMPtrType) ToSystemLicenseVMPtrOutput() SystemLicenseVMPtrOutput {
	return i.ToSystemLicenseVMPtrOutputWithContext(context.Background())
}

func (i *systemLicenseVMPtrType) ToSystemLicenseVMPtrOutputWithContext(ctx context.Context) SystemLicenseVMPtrOutput {
	return pulumi.ToOutputWithContext(ctx, i).(SystemLicenseVMPtrOutput)
}

// SystemLicenseVMArrayInput is an input type that accepts SystemLicenseVMArray and SystemLicenseVMArrayOutput values.
// You can construct a concrete instance of `SystemLicenseVMArrayInput` via:
//
//          SystemLicenseVMArray{ SystemLicenseVMArgs{...} }
type SystemLicenseVMArrayInput interface {
	pulumi.Input

	ToSystemLicenseVMArrayOutput() SystemLicenseVMArrayOutput
	ToSystemLicenseVMArrayOutputWithContext(context.Context) SystemLicenseVMArrayOutput
}

type SystemLicenseVMArray []SystemLicenseVMInput

func (SystemLicenseVMArray) ElementType() reflect.Type {
	return reflect.TypeOf(([]*SystemLicenseVM)(nil))
}

func (i SystemLicenseVMArray) ToSystemLicenseVMArrayOutput() SystemLicenseVMArrayOutput {
	return i.ToSystemLicenseVMArrayOutputWithContext(context.Background())
}

func (i SystemLicenseVMArray) ToSystemLicenseVMArrayOutputWithContext(ctx context.Context) SystemLicenseVMArrayOutput {
	return pulumi.ToOutputWithContext(ctx, i).(SystemLicenseVMArrayOutput)
}

// SystemLicenseVMMapInput is an input type that accepts SystemLicenseVMMap and SystemLicenseVMMapOutput values.
// You can construct a concrete instance of `SystemLicenseVMMapInput` via:
//
//          SystemLicenseVMMap{ "key": SystemLicenseVMArgs{...} }
type SystemLicenseVMMapInput interface {
	pulumi.Input

	ToSystemLicenseVMMapOutput() SystemLicenseVMMapOutput
	ToSystemLicenseVMMapOutputWithContext(context.Context) SystemLicenseVMMapOutput
}

type SystemLicenseVMMap map[string]SystemLicenseVMInput

func (SystemLicenseVMMap) ElementType() reflect.Type {
	return reflect.TypeOf((map[string]*SystemLicenseVM)(nil))
}

func (i SystemLicenseVMMap) ToSystemLicenseVMMapOutput() SystemLicenseVMMapOutput {
	return i.ToSystemLicenseVMMapOutputWithContext(context.Background())
}

func (i SystemLicenseVMMap) ToSystemLicenseVMMapOutputWithContext(ctx context.Context) SystemLicenseVMMapOutput {
	return pulumi.ToOutputWithContext(ctx, i).(SystemLicenseVMMapOutput)
}

type SystemLicenseVMOutput struct {
	*pulumi.OutputState
}

func (SystemLicenseVMOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*SystemLicenseVM)(nil))
}

func (o SystemLicenseVMOutput) ToSystemLicenseVMOutput() SystemLicenseVMOutput {
	return o
}

func (o SystemLicenseVMOutput) ToSystemLicenseVMOutputWithContext(ctx context.Context) SystemLicenseVMOutput {
	return o
}

func (o SystemLicenseVMOutput) ToSystemLicenseVMPtrOutput() SystemLicenseVMPtrOutput {
	return o.ToSystemLicenseVMPtrOutputWithContext(context.Background())
}

func (o SystemLicenseVMOutput) ToSystemLicenseVMPtrOutputWithContext(ctx context.Context) SystemLicenseVMPtrOutput {
	return o.ApplyT(func(v SystemLicenseVM) *SystemLicenseVM {
		return &v
	}).(SystemLicenseVMPtrOutput)
}

type SystemLicenseVMPtrOutput struct {
	*pulumi.OutputState
}

func (SystemLicenseVMPtrOutput) ElementType() reflect.Type {
	return reflect.TypeOf((**SystemLicenseVM)(nil))
}

func (o SystemLicenseVMPtrOutput) ToSystemLicenseVMPtrOutput() SystemLicenseVMPtrOutput {
	return o
}

func (o SystemLicenseVMPtrOutput) ToSystemLicenseVMPtrOutputWithContext(ctx context.Context) SystemLicenseVMPtrOutput {
	return o
}

type SystemLicenseVMArrayOutput struct{ *pulumi.OutputState }

func (SystemLicenseVMArrayOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*[]SystemLicenseVM)(nil))
}

func (o SystemLicenseVMArrayOutput) ToSystemLicenseVMArrayOutput() SystemLicenseVMArrayOutput {
	return o
}

func (o SystemLicenseVMArrayOutput) ToSystemLicenseVMArrayOutputWithContext(ctx context.Context) SystemLicenseVMArrayOutput {
	return o
}

func (o SystemLicenseVMArrayOutput) Index(i pulumi.IntInput) SystemLicenseVMOutput {
	return pulumi.All(o, i).ApplyT(func(vs []interface{}) SystemLicenseVM {
		return vs[0].([]SystemLicenseVM)[vs[1].(int)]
	}).(SystemLicenseVMOutput)
}

type SystemLicenseVMMapOutput struct{ *pulumi.OutputState }

func (SystemLicenseVMMapOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*map[string]SystemLicenseVM)(nil))
}

func (o SystemLicenseVMMapOutput) ToSystemLicenseVMMapOutput() SystemLicenseVMMapOutput {
	return o
}

func (o SystemLicenseVMMapOutput) ToSystemLicenseVMMapOutputWithContext(ctx context.Context) SystemLicenseVMMapOutput {
	return o
}

func (o SystemLicenseVMMapOutput) MapIndex(k pulumi.StringInput) SystemLicenseVMOutput {
	return pulumi.All(o, k).ApplyT(func(vs []interface{}) SystemLicenseVM {
		return vs[0].(map[string]SystemLicenseVM)[vs[1].(string)]
	}).(SystemLicenseVMOutput)
}

func init() {
	pulumi.RegisterOutputType(SystemLicenseVMOutput{})
	pulumi.RegisterOutputType(SystemLicenseVMPtrOutput{})
	pulumi.RegisterOutputType(SystemLicenseVMArrayOutput{})
	pulumi.RegisterOutputType(SystemLicenseVMMapOutput{})
}
