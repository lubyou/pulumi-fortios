// Code generated by the Pulumi Terraform Bridge (tfgen) Tool DO NOT EDIT.
// *** WARNING: Do not edit by hand unless you're certain you know what you are doing! ***

package fortios

import (
	"context"
	"reflect"

	"errors"
	"github.com/pulumi/pulumi/sdk/v3/go/pulumi"
)

type SwitchControllerQosQosPolicy struct {
	pulumi.CustomResourceState

	DefaultCos     pulumi.IntOutput       `pulumi:"defaultCos"`
	Name           pulumi.StringOutput    `pulumi:"name"`
	QueuePolicy    pulumi.StringOutput    `pulumi:"queuePolicy"`
	TrustDot1pMap  pulumi.StringOutput    `pulumi:"trustDot1pMap"`
	TrustIpDscpMap pulumi.StringOutput    `pulumi:"trustIpDscpMap"`
	Vdomparam      pulumi.StringPtrOutput `pulumi:"vdomparam"`
}

// NewSwitchControllerQosQosPolicy registers a new resource with the given unique name, arguments, and options.
func NewSwitchControllerQosQosPolicy(ctx *pulumi.Context,
	name string, args *SwitchControllerQosQosPolicyArgs, opts ...pulumi.ResourceOption) (*SwitchControllerQosQosPolicy, error) {
	if args == nil {
		return nil, errors.New("missing one or more required arguments")
	}

	if args.DefaultCos == nil {
		return nil, errors.New("invalid value for required argument 'DefaultCos'")
	}
	opts = pkgResourceDefaultOpts(opts)
	var resource SwitchControllerQosQosPolicy
	err := ctx.RegisterResource("fortios:index/switchControllerQosQosPolicy:SwitchControllerQosQosPolicy", name, args, &resource, opts...)
	if err != nil {
		return nil, err
	}
	return &resource, nil
}

// GetSwitchControllerQosQosPolicy gets an existing SwitchControllerQosQosPolicy resource's state with the given name, ID, and optional
// state properties that are used to uniquely qualify the lookup (nil if not required).
func GetSwitchControllerQosQosPolicy(ctx *pulumi.Context,
	name string, id pulumi.IDInput, state *SwitchControllerQosQosPolicyState, opts ...pulumi.ResourceOption) (*SwitchControllerQosQosPolicy, error) {
	var resource SwitchControllerQosQosPolicy
	err := ctx.ReadResource("fortios:index/switchControllerQosQosPolicy:SwitchControllerQosQosPolicy", name, id, state, &resource, opts...)
	if err != nil {
		return nil, err
	}
	return &resource, nil
}

// Input properties used for looking up and filtering SwitchControllerQosQosPolicy resources.
type switchControllerQosQosPolicyState struct {
	DefaultCos     *int    `pulumi:"defaultCos"`
	Name           *string `pulumi:"name"`
	QueuePolicy    *string `pulumi:"queuePolicy"`
	TrustDot1pMap  *string `pulumi:"trustDot1pMap"`
	TrustIpDscpMap *string `pulumi:"trustIpDscpMap"`
	Vdomparam      *string `pulumi:"vdomparam"`
}

type SwitchControllerQosQosPolicyState struct {
	DefaultCos     pulumi.IntPtrInput
	Name           pulumi.StringPtrInput
	QueuePolicy    pulumi.StringPtrInput
	TrustDot1pMap  pulumi.StringPtrInput
	TrustIpDscpMap pulumi.StringPtrInput
	Vdomparam      pulumi.StringPtrInput
}

func (SwitchControllerQosQosPolicyState) ElementType() reflect.Type {
	return reflect.TypeOf((*switchControllerQosQosPolicyState)(nil)).Elem()
}

type switchControllerQosQosPolicyArgs struct {
	DefaultCos     int     `pulumi:"defaultCos"`
	Name           *string `pulumi:"name"`
	QueuePolicy    *string `pulumi:"queuePolicy"`
	TrustDot1pMap  *string `pulumi:"trustDot1pMap"`
	TrustIpDscpMap *string `pulumi:"trustIpDscpMap"`
	Vdomparam      *string `pulumi:"vdomparam"`
}

// The set of arguments for constructing a SwitchControllerQosQosPolicy resource.
type SwitchControllerQosQosPolicyArgs struct {
	DefaultCos     pulumi.IntInput
	Name           pulumi.StringPtrInput
	QueuePolicy    pulumi.StringPtrInput
	TrustDot1pMap  pulumi.StringPtrInput
	TrustIpDscpMap pulumi.StringPtrInput
	Vdomparam      pulumi.StringPtrInput
}

func (SwitchControllerQosQosPolicyArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*switchControllerQosQosPolicyArgs)(nil)).Elem()
}

type SwitchControllerQosQosPolicyInput interface {
	pulumi.Input

	ToSwitchControllerQosQosPolicyOutput() SwitchControllerQosQosPolicyOutput
	ToSwitchControllerQosQosPolicyOutputWithContext(ctx context.Context) SwitchControllerQosQosPolicyOutput
}

func (*SwitchControllerQosQosPolicy) ElementType() reflect.Type {
	return reflect.TypeOf((**SwitchControllerQosQosPolicy)(nil)).Elem()
}

func (i *SwitchControllerQosQosPolicy) ToSwitchControllerQosQosPolicyOutput() SwitchControllerQosQosPolicyOutput {
	return i.ToSwitchControllerQosQosPolicyOutputWithContext(context.Background())
}

func (i *SwitchControllerQosQosPolicy) ToSwitchControllerQosQosPolicyOutputWithContext(ctx context.Context) SwitchControllerQosQosPolicyOutput {
	return pulumi.ToOutputWithContext(ctx, i).(SwitchControllerQosQosPolicyOutput)
}

// SwitchControllerQosQosPolicyArrayInput is an input type that accepts SwitchControllerQosQosPolicyArray and SwitchControllerQosQosPolicyArrayOutput values.
// You can construct a concrete instance of `SwitchControllerQosQosPolicyArrayInput` via:
//
//	SwitchControllerQosQosPolicyArray{ SwitchControllerQosQosPolicyArgs{...} }
type SwitchControllerQosQosPolicyArrayInput interface {
	pulumi.Input

	ToSwitchControllerQosQosPolicyArrayOutput() SwitchControllerQosQosPolicyArrayOutput
	ToSwitchControllerQosQosPolicyArrayOutputWithContext(context.Context) SwitchControllerQosQosPolicyArrayOutput
}

type SwitchControllerQosQosPolicyArray []SwitchControllerQosQosPolicyInput

func (SwitchControllerQosQosPolicyArray) ElementType() reflect.Type {
	return reflect.TypeOf((*[]*SwitchControllerQosQosPolicy)(nil)).Elem()
}

func (i SwitchControllerQosQosPolicyArray) ToSwitchControllerQosQosPolicyArrayOutput() SwitchControllerQosQosPolicyArrayOutput {
	return i.ToSwitchControllerQosQosPolicyArrayOutputWithContext(context.Background())
}

func (i SwitchControllerQosQosPolicyArray) ToSwitchControllerQosQosPolicyArrayOutputWithContext(ctx context.Context) SwitchControllerQosQosPolicyArrayOutput {
	return pulumi.ToOutputWithContext(ctx, i).(SwitchControllerQosQosPolicyArrayOutput)
}

// SwitchControllerQosQosPolicyMapInput is an input type that accepts SwitchControllerQosQosPolicyMap and SwitchControllerQosQosPolicyMapOutput values.
// You can construct a concrete instance of `SwitchControllerQosQosPolicyMapInput` via:
//
//	SwitchControllerQosQosPolicyMap{ "key": SwitchControllerQosQosPolicyArgs{...} }
type SwitchControllerQosQosPolicyMapInput interface {
	pulumi.Input

	ToSwitchControllerQosQosPolicyMapOutput() SwitchControllerQosQosPolicyMapOutput
	ToSwitchControllerQosQosPolicyMapOutputWithContext(context.Context) SwitchControllerQosQosPolicyMapOutput
}

type SwitchControllerQosQosPolicyMap map[string]SwitchControllerQosQosPolicyInput

func (SwitchControllerQosQosPolicyMap) ElementType() reflect.Type {
	return reflect.TypeOf((*map[string]*SwitchControllerQosQosPolicy)(nil)).Elem()
}

func (i SwitchControllerQosQosPolicyMap) ToSwitchControllerQosQosPolicyMapOutput() SwitchControllerQosQosPolicyMapOutput {
	return i.ToSwitchControllerQosQosPolicyMapOutputWithContext(context.Background())
}

func (i SwitchControllerQosQosPolicyMap) ToSwitchControllerQosQosPolicyMapOutputWithContext(ctx context.Context) SwitchControllerQosQosPolicyMapOutput {
	return pulumi.ToOutputWithContext(ctx, i).(SwitchControllerQosQosPolicyMapOutput)
}

type SwitchControllerQosQosPolicyOutput struct{ *pulumi.OutputState }

func (SwitchControllerQosQosPolicyOutput) ElementType() reflect.Type {
	return reflect.TypeOf((**SwitchControllerQosQosPolicy)(nil)).Elem()
}

func (o SwitchControllerQosQosPolicyOutput) ToSwitchControllerQosQosPolicyOutput() SwitchControllerQosQosPolicyOutput {
	return o
}

func (o SwitchControllerQosQosPolicyOutput) ToSwitchControllerQosQosPolicyOutputWithContext(ctx context.Context) SwitchControllerQosQosPolicyOutput {
	return o
}

func (o SwitchControllerQosQosPolicyOutput) DefaultCos() pulumi.IntOutput {
	return o.ApplyT(func(v *SwitchControllerQosQosPolicy) pulumi.IntOutput { return v.DefaultCos }).(pulumi.IntOutput)
}

func (o SwitchControllerQosQosPolicyOutput) Name() pulumi.StringOutput {
	return o.ApplyT(func(v *SwitchControllerQosQosPolicy) pulumi.StringOutput { return v.Name }).(pulumi.StringOutput)
}

func (o SwitchControllerQosQosPolicyOutput) QueuePolicy() pulumi.StringOutput {
	return o.ApplyT(func(v *SwitchControllerQosQosPolicy) pulumi.StringOutput { return v.QueuePolicy }).(pulumi.StringOutput)
}

func (o SwitchControllerQosQosPolicyOutput) TrustDot1pMap() pulumi.StringOutput {
	return o.ApplyT(func(v *SwitchControllerQosQosPolicy) pulumi.StringOutput { return v.TrustDot1pMap }).(pulumi.StringOutput)
}

func (o SwitchControllerQosQosPolicyOutput) TrustIpDscpMap() pulumi.StringOutput {
	return o.ApplyT(func(v *SwitchControllerQosQosPolicy) pulumi.StringOutput { return v.TrustIpDscpMap }).(pulumi.StringOutput)
}

func (o SwitchControllerQosQosPolicyOutput) Vdomparam() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *SwitchControllerQosQosPolicy) pulumi.StringPtrOutput { return v.Vdomparam }).(pulumi.StringPtrOutput)
}

type SwitchControllerQosQosPolicyArrayOutput struct{ *pulumi.OutputState }

func (SwitchControllerQosQosPolicyArrayOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*[]*SwitchControllerQosQosPolicy)(nil)).Elem()
}

func (o SwitchControllerQosQosPolicyArrayOutput) ToSwitchControllerQosQosPolicyArrayOutput() SwitchControllerQosQosPolicyArrayOutput {
	return o
}

func (o SwitchControllerQosQosPolicyArrayOutput) ToSwitchControllerQosQosPolicyArrayOutputWithContext(ctx context.Context) SwitchControllerQosQosPolicyArrayOutput {
	return o
}

func (o SwitchControllerQosQosPolicyArrayOutput) Index(i pulumi.IntInput) SwitchControllerQosQosPolicyOutput {
	return pulumi.All(o, i).ApplyT(func(vs []interface{}) *SwitchControllerQosQosPolicy {
		return vs[0].([]*SwitchControllerQosQosPolicy)[vs[1].(int)]
	}).(SwitchControllerQosQosPolicyOutput)
}

type SwitchControllerQosQosPolicyMapOutput struct{ *pulumi.OutputState }

func (SwitchControllerQosQosPolicyMapOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*map[string]*SwitchControllerQosQosPolicy)(nil)).Elem()
}

func (o SwitchControllerQosQosPolicyMapOutput) ToSwitchControllerQosQosPolicyMapOutput() SwitchControllerQosQosPolicyMapOutput {
	return o
}

func (o SwitchControllerQosQosPolicyMapOutput) ToSwitchControllerQosQosPolicyMapOutputWithContext(ctx context.Context) SwitchControllerQosQosPolicyMapOutput {
	return o
}

func (o SwitchControllerQosQosPolicyMapOutput) MapIndex(k pulumi.StringInput) SwitchControllerQosQosPolicyOutput {
	return pulumi.All(o, k).ApplyT(func(vs []interface{}) *SwitchControllerQosQosPolicy {
		return vs[0].(map[string]*SwitchControllerQosQosPolicy)[vs[1].(string)]
	}).(SwitchControllerQosQosPolicyOutput)
}

func init() {
	pulumi.RegisterInputType(reflect.TypeOf((*SwitchControllerQosQosPolicyInput)(nil)).Elem(), &SwitchControllerQosQosPolicy{})
	pulumi.RegisterInputType(reflect.TypeOf((*SwitchControllerQosQosPolicyArrayInput)(nil)).Elem(), SwitchControllerQosQosPolicyArray{})
	pulumi.RegisterInputType(reflect.TypeOf((*SwitchControllerQosQosPolicyMapInput)(nil)).Elem(), SwitchControllerQosQosPolicyMap{})
	pulumi.RegisterOutputType(SwitchControllerQosQosPolicyOutput{})
	pulumi.RegisterOutputType(SwitchControllerQosQosPolicyArrayOutput{})
	pulumi.RegisterOutputType(SwitchControllerQosQosPolicyMapOutput{})
}
