// *** WARNING: this file was generated by the Pulumi Terraform Bridge (tfgen) Tool. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

package fortios

import (
	"context"
	"reflect"

	"github.com/pulumi/pulumi/sdk/v3/go/pulumi"
)

// Configure ICAP servers.
//
// ## Example Usage
//
// ```go
// package main
//
// import (
// 	"github.com/pulumi/pulumi-fortios/sdk/go/fortios"
// 	"github.com/pulumi/pulumi/sdk/v3/go/pulumi"
// )
//
// func main() {
// 	pulumi.Run(func(ctx *pulumi.Context) error {
// 		_, err := fortios.NewIcapServer(ctx, "trname", &fortios.IcapServerArgs{
// 			Ip6Address:     pulumi.String("::"),
// 			IpAddress:      pulumi.String("1.1.1.1"),
// 			IpVersion:      pulumi.String("4"),
// 			MaxConnections: pulumi.Int(100),
// 			Port:           pulumi.Int(22),
// 		})
// 		if err != nil {
// 			return err
// 		}
// 		return nil
// 	})
// }
// ```
//
// ## Import
//
// Icap Server can be imported using any of these accepted formats$ export "FORTIOS_IMPORT_TABLE"="true"
//
// ```sh
//  $ pulumi import fortios:index/icapServer:IcapServer labelname {{name}}
// ```
//
//  $ unset "FORTIOS_IMPORT_TABLE"
type IcapServer struct {
	pulumi.CustomResourceState

	// IPv6 address of the ICAP server.
	Ip6Address pulumi.StringOutput `pulumi:"ip6Address"`
	// IPv4 address of the ICAP server.
	IpAddress pulumi.StringOutput `pulumi:"ipAddress"`
	// IP version. Valid values: `4`, `6`.
	IpVersion pulumi.StringOutput `pulumi:"ipVersion"`
	// Maximum number of concurrent connections to ICAP server.
	MaxConnections pulumi.IntOutput `pulumi:"maxConnections"`
	// Server name.
	Name pulumi.StringOutput `pulumi:"name"`
	// ICAP server port.
	Port pulumi.IntOutput `pulumi:"port"`
	// Enable/disable secure connection to ICAP server. Valid values: `enable`, `disable`.
	Secure pulumi.StringOutput `pulumi:"secure"`
	// CA certificate name.
	SslCert pulumi.StringOutput `pulumi:"sslCert"`
	// Specifies the vdom to which the resource will be applied when the FortiGate unit is running in VDOM mode. Only one vdom can be specified. If you want to inherit the vdom configuration of the provider, please do not set this parameter.
	Vdomparam pulumi.StringPtrOutput `pulumi:"vdomparam"`
}

// NewIcapServer registers a new resource with the given unique name, arguments, and options.
func NewIcapServer(ctx *pulumi.Context,
	name string, args *IcapServerArgs, opts ...pulumi.ResourceOption) (*IcapServer, error) {
	if args == nil {
		args = &IcapServerArgs{}
	}

	var resource IcapServer
	err := ctx.RegisterResource("fortios:index/icapServer:IcapServer", name, args, &resource, opts...)
	if err != nil {
		return nil, err
	}
	return &resource, nil
}

// GetIcapServer gets an existing IcapServer resource's state with the given name, ID, and optional
// state properties that are used to uniquely qualify the lookup (nil if not required).
func GetIcapServer(ctx *pulumi.Context,
	name string, id pulumi.IDInput, state *IcapServerState, opts ...pulumi.ResourceOption) (*IcapServer, error) {
	var resource IcapServer
	err := ctx.ReadResource("fortios:index/icapServer:IcapServer", name, id, state, &resource, opts...)
	if err != nil {
		return nil, err
	}
	return &resource, nil
}

// Input properties used for looking up and filtering IcapServer resources.
type icapServerState struct {
	// IPv6 address of the ICAP server.
	Ip6Address *string `pulumi:"ip6Address"`
	// IPv4 address of the ICAP server.
	IpAddress *string `pulumi:"ipAddress"`
	// IP version. Valid values: `4`, `6`.
	IpVersion *string `pulumi:"ipVersion"`
	// Maximum number of concurrent connections to ICAP server.
	MaxConnections *int `pulumi:"maxConnections"`
	// Server name.
	Name *string `pulumi:"name"`
	// ICAP server port.
	Port *int `pulumi:"port"`
	// Enable/disable secure connection to ICAP server. Valid values: `enable`, `disable`.
	Secure *string `pulumi:"secure"`
	// CA certificate name.
	SslCert *string `pulumi:"sslCert"`
	// Specifies the vdom to which the resource will be applied when the FortiGate unit is running in VDOM mode. Only one vdom can be specified. If you want to inherit the vdom configuration of the provider, please do not set this parameter.
	Vdomparam *string `pulumi:"vdomparam"`
}

type IcapServerState struct {
	// IPv6 address of the ICAP server.
	Ip6Address pulumi.StringPtrInput
	// IPv4 address of the ICAP server.
	IpAddress pulumi.StringPtrInput
	// IP version. Valid values: `4`, `6`.
	IpVersion pulumi.StringPtrInput
	// Maximum number of concurrent connections to ICAP server.
	MaxConnections pulumi.IntPtrInput
	// Server name.
	Name pulumi.StringPtrInput
	// ICAP server port.
	Port pulumi.IntPtrInput
	// Enable/disable secure connection to ICAP server. Valid values: `enable`, `disable`.
	Secure pulumi.StringPtrInput
	// CA certificate name.
	SslCert pulumi.StringPtrInput
	// Specifies the vdom to which the resource will be applied when the FortiGate unit is running in VDOM mode. Only one vdom can be specified. If you want to inherit the vdom configuration of the provider, please do not set this parameter.
	Vdomparam pulumi.StringPtrInput
}

func (IcapServerState) ElementType() reflect.Type {
	return reflect.TypeOf((*icapServerState)(nil)).Elem()
}

type icapServerArgs struct {
	// IPv6 address of the ICAP server.
	Ip6Address *string `pulumi:"ip6Address"`
	// IPv4 address of the ICAP server.
	IpAddress *string `pulumi:"ipAddress"`
	// IP version. Valid values: `4`, `6`.
	IpVersion *string `pulumi:"ipVersion"`
	// Maximum number of concurrent connections to ICAP server.
	MaxConnections *int `pulumi:"maxConnections"`
	// Server name.
	Name *string `pulumi:"name"`
	// ICAP server port.
	Port *int `pulumi:"port"`
	// Enable/disable secure connection to ICAP server. Valid values: `enable`, `disable`.
	Secure *string `pulumi:"secure"`
	// CA certificate name.
	SslCert *string `pulumi:"sslCert"`
	// Specifies the vdom to which the resource will be applied when the FortiGate unit is running in VDOM mode. Only one vdom can be specified. If you want to inherit the vdom configuration of the provider, please do not set this parameter.
	Vdomparam *string `pulumi:"vdomparam"`
}

// The set of arguments for constructing a IcapServer resource.
type IcapServerArgs struct {
	// IPv6 address of the ICAP server.
	Ip6Address pulumi.StringPtrInput
	// IPv4 address of the ICAP server.
	IpAddress pulumi.StringPtrInput
	// IP version. Valid values: `4`, `6`.
	IpVersion pulumi.StringPtrInput
	// Maximum number of concurrent connections to ICAP server.
	MaxConnections pulumi.IntPtrInput
	// Server name.
	Name pulumi.StringPtrInput
	// ICAP server port.
	Port pulumi.IntPtrInput
	// Enable/disable secure connection to ICAP server. Valid values: `enable`, `disable`.
	Secure pulumi.StringPtrInput
	// CA certificate name.
	SslCert pulumi.StringPtrInput
	// Specifies the vdom to which the resource will be applied when the FortiGate unit is running in VDOM mode. Only one vdom can be specified. If you want to inherit the vdom configuration of the provider, please do not set this parameter.
	Vdomparam pulumi.StringPtrInput
}

func (IcapServerArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*icapServerArgs)(nil)).Elem()
}

type IcapServerInput interface {
	pulumi.Input

	ToIcapServerOutput() IcapServerOutput
	ToIcapServerOutputWithContext(ctx context.Context) IcapServerOutput
}

func (*IcapServer) ElementType() reflect.Type {
	return reflect.TypeOf((*IcapServer)(nil))
}

func (i *IcapServer) ToIcapServerOutput() IcapServerOutput {
	return i.ToIcapServerOutputWithContext(context.Background())
}

func (i *IcapServer) ToIcapServerOutputWithContext(ctx context.Context) IcapServerOutput {
	return pulumi.ToOutputWithContext(ctx, i).(IcapServerOutput)
}

func (i *IcapServer) ToIcapServerPtrOutput() IcapServerPtrOutput {
	return i.ToIcapServerPtrOutputWithContext(context.Background())
}

func (i *IcapServer) ToIcapServerPtrOutputWithContext(ctx context.Context) IcapServerPtrOutput {
	return pulumi.ToOutputWithContext(ctx, i).(IcapServerPtrOutput)
}

type IcapServerPtrInput interface {
	pulumi.Input

	ToIcapServerPtrOutput() IcapServerPtrOutput
	ToIcapServerPtrOutputWithContext(ctx context.Context) IcapServerPtrOutput
}

type icapServerPtrType IcapServerArgs

func (*icapServerPtrType) ElementType() reflect.Type {
	return reflect.TypeOf((**IcapServer)(nil))
}

func (i *icapServerPtrType) ToIcapServerPtrOutput() IcapServerPtrOutput {
	return i.ToIcapServerPtrOutputWithContext(context.Background())
}

func (i *icapServerPtrType) ToIcapServerPtrOutputWithContext(ctx context.Context) IcapServerPtrOutput {
	return pulumi.ToOutputWithContext(ctx, i).(IcapServerPtrOutput)
}

// IcapServerArrayInput is an input type that accepts IcapServerArray and IcapServerArrayOutput values.
// You can construct a concrete instance of `IcapServerArrayInput` via:
//
//          IcapServerArray{ IcapServerArgs{...} }
type IcapServerArrayInput interface {
	pulumi.Input

	ToIcapServerArrayOutput() IcapServerArrayOutput
	ToIcapServerArrayOutputWithContext(context.Context) IcapServerArrayOutput
}

type IcapServerArray []IcapServerInput

func (IcapServerArray) ElementType() reflect.Type {
	return reflect.TypeOf(([]*IcapServer)(nil))
}

func (i IcapServerArray) ToIcapServerArrayOutput() IcapServerArrayOutput {
	return i.ToIcapServerArrayOutputWithContext(context.Background())
}

func (i IcapServerArray) ToIcapServerArrayOutputWithContext(ctx context.Context) IcapServerArrayOutput {
	return pulumi.ToOutputWithContext(ctx, i).(IcapServerArrayOutput)
}

// IcapServerMapInput is an input type that accepts IcapServerMap and IcapServerMapOutput values.
// You can construct a concrete instance of `IcapServerMapInput` via:
//
//          IcapServerMap{ "key": IcapServerArgs{...} }
type IcapServerMapInput interface {
	pulumi.Input

	ToIcapServerMapOutput() IcapServerMapOutput
	ToIcapServerMapOutputWithContext(context.Context) IcapServerMapOutput
}

type IcapServerMap map[string]IcapServerInput

func (IcapServerMap) ElementType() reflect.Type {
	return reflect.TypeOf((map[string]*IcapServer)(nil))
}

func (i IcapServerMap) ToIcapServerMapOutput() IcapServerMapOutput {
	return i.ToIcapServerMapOutputWithContext(context.Background())
}

func (i IcapServerMap) ToIcapServerMapOutputWithContext(ctx context.Context) IcapServerMapOutput {
	return pulumi.ToOutputWithContext(ctx, i).(IcapServerMapOutput)
}

type IcapServerOutput struct {
	*pulumi.OutputState
}

func (IcapServerOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*IcapServer)(nil))
}

func (o IcapServerOutput) ToIcapServerOutput() IcapServerOutput {
	return o
}

func (o IcapServerOutput) ToIcapServerOutputWithContext(ctx context.Context) IcapServerOutput {
	return o
}

func (o IcapServerOutput) ToIcapServerPtrOutput() IcapServerPtrOutput {
	return o.ToIcapServerPtrOutputWithContext(context.Background())
}

func (o IcapServerOutput) ToIcapServerPtrOutputWithContext(ctx context.Context) IcapServerPtrOutput {
	return o.ApplyT(func(v IcapServer) *IcapServer {
		return &v
	}).(IcapServerPtrOutput)
}

type IcapServerPtrOutput struct {
	*pulumi.OutputState
}

func (IcapServerPtrOutput) ElementType() reflect.Type {
	return reflect.TypeOf((**IcapServer)(nil))
}

func (o IcapServerPtrOutput) ToIcapServerPtrOutput() IcapServerPtrOutput {
	return o
}

func (o IcapServerPtrOutput) ToIcapServerPtrOutputWithContext(ctx context.Context) IcapServerPtrOutput {
	return o
}

type IcapServerArrayOutput struct{ *pulumi.OutputState }

func (IcapServerArrayOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*[]IcapServer)(nil))
}

func (o IcapServerArrayOutput) ToIcapServerArrayOutput() IcapServerArrayOutput {
	return o
}

func (o IcapServerArrayOutput) ToIcapServerArrayOutputWithContext(ctx context.Context) IcapServerArrayOutput {
	return o
}

func (o IcapServerArrayOutput) Index(i pulumi.IntInput) IcapServerOutput {
	return pulumi.All(o, i).ApplyT(func(vs []interface{}) IcapServer {
		return vs[0].([]IcapServer)[vs[1].(int)]
	}).(IcapServerOutput)
}

type IcapServerMapOutput struct{ *pulumi.OutputState }

func (IcapServerMapOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*map[string]IcapServer)(nil))
}

func (o IcapServerMapOutput) ToIcapServerMapOutput() IcapServerMapOutput {
	return o
}

func (o IcapServerMapOutput) ToIcapServerMapOutputWithContext(ctx context.Context) IcapServerMapOutput {
	return o
}

func (o IcapServerMapOutput) MapIndex(k pulumi.StringInput) IcapServerOutput {
	return pulumi.All(o, k).ApplyT(func(vs []interface{}) IcapServer {
		return vs[0].(map[string]IcapServer)[vs[1].(string)]
	}).(IcapServerOutput)
}

func init() {
	pulumi.RegisterOutputType(IcapServerOutput{})
	pulumi.RegisterOutputType(IcapServerPtrOutput{})
	pulumi.RegisterOutputType(IcapServerArrayOutput{})
	pulumi.RegisterOutputType(IcapServerMapOutput{})
}
