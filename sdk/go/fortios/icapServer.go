// Code generated by the Pulumi Terraform Bridge (tfgen) Tool DO NOT EDIT.
// *** WARNING: Do not edit by hand unless you're certain you know what you are doing! ***

package fortios

import (
	"context"
	"reflect"

	"github.com/pulumi/pulumi/sdk/v3/go/pulumi"
)

type IcapServer struct {
	pulumi.CustomResourceState

	AddrType           pulumi.StringOutput    `pulumi:"addrType"`
	Fqdn               pulumi.StringOutput    `pulumi:"fqdn"`
	Healthcheck        pulumi.StringOutput    `pulumi:"healthcheck"`
	HealthcheckService pulumi.StringOutput    `pulumi:"healthcheckService"`
	Ip6Address         pulumi.StringOutput    `pulumi:"ip6Address"`
	IpAddress          pulumi.StringOutput    `pulumi:"ipAddress"`
	IpVersion          pulumi.StringOutput    `pulumi:"ipVersion"`
	MaxConnections     pulumi.IntOutput       `pulumi:"maxConnections"`
	Name               pulumi.StringOutput    `pulumi:"name"`
	Port               pulumi.IntOutput       `pulumi:"port"`
	Secure             pulumi.StringOutput    `pulumi:"secure"`
	SslCert            pulumi.StringOutput    `pulumi:"sslCert"`
	Vdomparam          pulumi.StringPtrOutput `pulumi:"vdomparam"`
}

// NewIcapServer registers a new resource with the given unique name, arguments, and options.
func NewIcapServer(ctx *pulumi.Context,
	name string, args *IcapServerArgs, opts ...pulumi.ResourceOption) (*IcapServer, error) {
	if args == nil {
		args = &IcapServerArgs{}
	}

	opts = pkgResourceDefaultOpts(opts)
	var resource IcapServer
	err := ctx.RegisterResource("fortios:index/icapServer:IcapServer", name, args, &resource, opts...)
	if err != nil {
		return nil, err
	}
	return &resource, nil
}

// GetIcapServer gets an existing IcapServer resource's state with the given name, ID, and optional
// state properties that are used to uniquely qualify the lookup (nil if not required).
func GetIcapServer(ctx *pulumi.Context,
	name string, id pulumi.IDInput, state *IcapServerState, opts ...pulumi.ResourceOption) (*IcapServer, error) {
	var resource IcapServer
	err := ctx.ReadResource("fortios:index/icapServer:IcapServer", name, id, state, &resource, opts...)
	if err != nil {
		return nil, err
	}
	return &resource, nil
}

// Input properties used for looking up and filtering IcapServer resources.
type icapServerState struct {
	AddrType           *string `pulumi:"addrType"`
	Fqdn               *string `pulumi:"fqdn"`
	Healthcheck        *string `pulumi:"healthcheck"`
	HealthcheckService *string `pulumi:"healthcheckService"`
	Ip6Address         *string `pulumi:"ip6Address"`
	IpAddress          *string `pulumi:"ipAddress"`
	IpVersion          *string `pulumi:"ipVersion"`
	MaxConnections     *int    `pulumi:"maxConnections"`
	Name               *string `pulumi:"name"`
	Port               *int    `pulumi:"port"`
	Secure             *string `pulumi:"secure"`
	SslCert            *string `pulumi:"sslCert"`
	Vdomparam          *string `pulumi:"vdomparam"`
}

type IcapServerState struct {
	AddrType           pulumi.StringPtrInput
	Fqdn               pulumi.StringPtrInput
	Healthcheck        pulumi.StringPtrInput
	HealthcheckService pulumi.StringPtrInput
	Ip6Address         pulumi.StringPtrInput
	IpAddress          pulumi.StringPtrInput
	IpVersion          pulumi.StringPtrInput
	MaxConnections     pulumi.IntPtrInput
	Name               pulumi.StringPtrInput
	Port               pulumi.IntPtrInput
	Secure             pulumi.StringPtrInput
	SslCert            pulumi.StringPtrInput
	Vdomparam          pulumi.StringPtrInput
}

func (IcapServerState) ElementType() reflect.Type {
	return reflect.TypeOf((*icapServerState)(nil)).Elem()
}

type icapServerArgs struct {
	AddrType           *string `pulumi:"addrType"`
	Fqdn               *string `pulumi:"fqdn"`
	Healthcheck        *string `pulumi:"healthcheck"`
	HealthcheckService *string `pulumi:"healthcheckService"`
	Ip6Address         *string `pulumi:"ip6Address"`
	IpAddress          *string `pulumi:"ipAddress"`
	IpVersion          *string `pulumi:"ipVersion"`
	MaxConnections     *int    `pulumi:"maxConnections"`
	Name               *string `pulumi:"name"`
	Port               *int    `pulumi:"port"`
	Secure             *string `pulumi:"secure"`
	SslCert            *string `pulumi:"sslCert"`
	Vdomparam          *string `pulumi:"vdomparam"`
}

// The set of arguments for constructing a IcapServer resource.
type IcapServerArgs struct {
	AddrType           pulumi.StringPtrInput
	Fqdn               pulumi.StringPtrInput
	Healthcheck        pulumi.StringPtrInput
	HealthcheckService pulumi.StringPtrInput
	Ip6Address         pulumi.StringPtrInput
	IpAddress          pulumi.StringPtrInput
	IpVersion          pulumi.StringPtrInput
	MaxConnections     pulumi.IntPtrInput
	Name               pulumi.StringPtrInput
	Port               pulumi.IntPtrInput
	Secure             pulumi.StringPtrInput
	SslCert            pulumi.StringPtrInput
	Vdomparam          pulumi.StringPtrInput
}

func (IcapServerArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*icapServerArgs)(nil)).Elem()
}

type IcapServerInput interface {
	pulumi.Input

	ToIcapServerOutput() IcapServerOutput
	ToIcapServerOutputWithContext(ctx context.Context) IcapServerOutput
}

func (*IcapServer) ElementType() reflect.Type {
	return reflect.TypeOf((**IcapServer)(nil)).Elem()
}

func (i *IcapServer) ToIcapServerOutput() IcapServerOutput {
	return i.ToIcapServerOutputWithContext(context.Background())
}

func (i *IcapServer) ToIcapServerOutputWithContext(ctx context.Context) IcapServerOutput {
	return pulumi.ToOutputWithContext(ctx, i).(IcapServerOutput)
}

// IcapServerArrayInput is an input type that accepts IcapServerArray and IcapServerArrayOutput values.
// You can construct a concrete instance of `IcapServerArrayInput` via:
//
//	IcapServerArray{ IcapServerArgs{...} }
type IcapServerArrayInput interface {
	pulumi.Input

	ToIcapServerArrayOutput() IcapServerArrayOutput
	ToIcapServerArrayOutputWithContext(context.Context) IcapServerArrayOutput
}

type IcapServerArray []IcapServerInput

func (IcapServerArray) ElementType() reflect.Type {
	return reflect.TypeOf((*[]*IcapServer)(nil)).Elem()
}

func (i IcapServerArray) ToIcapServerArrayOutput() IcapServerArrayOutput {
	return i.ToIcapServerArrayOutputWithContext(context.Background())
}

func (i IcapServerArray) ToIcapServerArrayOutputWithContext(ctx context.Context) IcapServerArrayOutput {
	return pulumi.ToOutputWithContext(ctx, i).(IcapServerArrayOutput)
}

// IcapServerMapInput is an input type that accepts IcapServerMap and IcapServerMapOutput values.
// You can construct a concrete instance of `IcapServerMapInput` via:
//
//	IcapServerMap{ "key": IcapServerArgs{...} }
type IcapServerMapInput interface {
	pulumi.Input

	ToIcapServerMapOutput() IcapServerMapOutput
	ToIcapServerMapOutputWithContext(context.Context) IcapServerMapOutput
}

type IcapServerMap map[string]IcapServerInput

func (IcapServerMap) ElementType() reflect.Type {
	return reflect.TypeOf((*map[string]*IcapServer)(nil)).Elem()
}

func (i IcapServerMap) ToIcapServerMapOutput() IcapServerMapOutput {
	return i.ToIcapServerMapOutputWithContext(context.Background())
}

func (i IcapServerMap) ToIcapServerMapOutputWithContext(ctx context.Context) IcapServerMapOutput {
	return pulumi.ToOutputWithContext(ctx, i).(IcapServerMapOutput)
}

type IcapServerOutput struct{ *pulumi.OutputState }

func (IcapServerOutput) ElementType() reflect.Type {
	return reflect.TypeOf((**IcapServer)(nil)).Elem()
}

func (o IcapServerOutput) ToIcapServerOutput() IcapServerOutput {
	return o
}

func (o IcapServerOutput) ToIcapServerOutputWithContext(ctx context.Context) IcapServerOutput {
	return o
}

func (o IcapServerOutput) AddrType() pulumi.StringOutput {
	return o.ApplyT(func(v *IcapServer) pulumi.StringOutput { return v.AddrType }).(pulumi.StringOutput)
}

func (o IcapServerOutput) Fqdn() pulumi.StringOutput {
	return o.ApplyT(func(v *IcapServer) pulumi.StringOutput { return v.Fqdn }).(pulumi.StringOutput)
}

func (o IcapServerOutput) Healthcheck() pulumi.StringOutput {
	return o.ApplyT(func(v *IcapServer) pulumi.StringOutput { return v.Healthcheck }).(pulumi.StringOutput)
}

func (o IcapServerOutput) HealthcheckService() pulumi.StringOutput {
	return o.ApplyT(func(v *IcapServer) pulumi.StringOutput { return v.HealthcheckService }).(pulumi.StringOutput)
}

func (o IcapServerOutput) Ip6Address() pulumi.StringOutput {
	return o.ApplyT(func(v *IcapServer) pulumi.StringOutput { return v.Ip6Address }).(pulumi.StringOutput)
}

func (o IcapServerOutput) IpAddress() pulumi.StringOutput {
	return o.ApplyT(func(v *IcapServer) pulumi.StringOutput { return v.IpAddress }).(pulumi.StringOutput)
}

func (o IcapServerOutput) IpVersion() pulumi.StringOutput {
	return o.ApplyT(func(v *IcapServer) pulumi.StringOutput { return v.IpVersion }).(pulumi.StringOutput)
}

func (o IcapServerOutput) MaxConnections() pulumi.IntOutput {
	return o.ApplyT(func(v *IcapServer) pulumi.IntOutput { return v.MaxConnections }).(pulumi.IntOutput)
}

func (o IcapServerOutput) Name() pulumi.StringOutput {
	return o.ApplyT(func(v *IcapServer) pulumi.StringOutput { return v.Name }).(pulumi.StringOutput)
}

func (o IcapServerOutput) Port() pulumi.IntOutput {
	return o.ApplyT(func(v *IcapServer) pulumi.IntOutput { return v.Port }).(pulumi.IntOutput)
}

func (o IcapServerOutput) Secure() pulumi.StringOutput {
	return o.ApplyT(func(v *IcapServer) pulumi.StringOutput { return v.Secure }).(pulumi.StringOutput)
}

func (o IcapServerOutput) SslCert() pulumi.StringOutput {
	return o.ApplyT(func(v *IcapServer) pulumi.StringOutput { return v.SslCert }).(pulumi.StringOutput)
}

func (o IcapServerOutput) Vdomparam() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *IcapServer) pulumi.StringPtrOutput { return v.Vdomparam }).(pulumi.StringPtrOutput)
}

type IcapServerArrayOutput struct{ *pulumi.OutputState }

func (IcapServerArrayOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*[]*IcapServer)(nil)).Elem()
}

func (o IcapServerArrayOutput) ToIcapServerArrayOutput() IcapServerArrayOutput {
	return o
}

func (o IcapServerArrayOutput) ToIcapServerArrayOutputWithContext(ctx context.Context) IcapServerArrayOutput {
	return o
}

func (o IcapServerArrayOutput) Index(i pulumi.IntInput) IcapServerOutput {
	return pulumi.All(o, i).ApplyT(func(vs []interface{}) *IcapServer {
		return vs[0].([]*IcapServer)[vs[1].(int)]
	}).(IcapServerOutput)
}

type IcapServerMapOutput struct{ *pulumi.OutputState }

func (IcapServerMapOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*map[string]*IcapServer)(nil)).Elem()
}

func (o IcapServerMapOutput) ToIcapServerMapOutput() IcapServerMapOutput {
	return o
}

func (o IcapServerMapOutput) ToIcapServerMapOutputWithContext(ctx context.Context) IcapServerMapOutput {
	return o
}

func (o IcapServerMapOutput) MapIndex(k pulumi.StringInput) IcapServerOutput {
	return pulumi.All(o, k).ApplyT(func(vs []interface{}) *IcapServer {
		return vs[0].(map[string]*IcapServer)[vs[1].(string)]
	}).(IcapServerOutput)
}

func init() {
	pulumi.RegisterInputType(reflect.TypeOf((*IcapServerInput)(nil)).Elem(), &IcapServer{})
	pulumi.RegisterInputType(reflect.TypeOf((*IcapServerArrayInput)(nil)).Elem(), IcapServerArray{})
	pulumi.RegisterInputType(reflect.TypeOf((*IcapServerMapInput)(nil)).Elem(), IcapServerMap{})
	pulumi.RegisterOutputType(IcapServerOutput{})
	pulumi.RegisterOutputType(IcapServerArrayOutput{})
	pulumi.RegisterOutputType(IcapServerMapOutput{})
}
