// Code generated by the Pulumi Terraform Bridge (tfgen) Tool DO NOT EDIT.
// *** WARNING: Do not edit by hand unless you're certain you know what you are doing! ***

package fortios

import (
	"context"
	"reflect"

	"github.com/pulumi/pulumi/sdk/v3/go/pulumi"
)

type ExtenderControllerDataplan struct {
	pulumi.CustomResourceState

	Apn             pulumi.StringOutput    `pulumi:"apn"`
	AuthType        pulumi.StringOutput    `pulumi:"authType"`
	BillingDate     pulumi.IntOutput       `pulumi:"billingDate"`
	Capacity        pulumi.IntOutput       `pulumi:"capacity"`
	Carrier         pulumi.StringOutput    `pulumi:"carrier"`
	Iccid           pulumi.StringOutput    `pulumi:"iccid"`
	ModemId         pulumi.StringOutput    `pulumi:"modemId"`
	MonthlyFee      pulumi.IntOutput       `pulumi:"monthlyFee"`
	Name            pulumi.StringOutput    `pulumi:"name"`
	Overage         pulumi.StringOutput    `pulumi:"overage"`
	Password        pulumi.StringPtrOutput `pulumi:"password"`
	Pdn             pulumi.StringOutput    `pulumi:"pdn"`
	PreferredSubnet pulumi.IntOutput       `pulumi:"preferredSubnet"`
	PrivateNetwork  pulumi.StringOutput    `pulumi:"privateNetwork"`
	SignalPeriod    pulumi.IntOutput       `pulumi:"signalPeriod"`
	SignalThreshold pulumi.IntOutput       `pulumi:"signalThreshold"`
	Slot            pulumi.StringOutput    `pulumi:"slot"`
	Type            pulumi.StringOutput    `pulumi:"type"`
	Username        pulumi.StringOutput    `pulumi:"username"`
	Vdomparam       pulumi.StringPtrOutput `pulumi:"vdomparam"`
}

// NewExtenderControllerDataplan registers a new resource with the given unique name, arguments, and options.
func NewExtenderControllerDataplan(ctx *pulumi.Context,
	name string, args *ExtenderControllerDataplanArgs, opts ...pulumi.ResourceOption) (*ExtenderControllerDataplan, error) {
	if args == nil {
		args = &ExtenderControllerDataplanArgs{}
	}

	if args.Password != nil {
		args.Password = pulumi.ToSecret(args.Password).(pulumi.StringPtrInput)
	}
	secrets := pulumi.AdditionalSecretOutputs([]string{
		"password",
	})
	opts = append(opts, secrets)
	opts = pkgResourceDefaultOpts(opts)
	var resource ExtenderControllerDataplan
	err := ctx.RegisterResource("fortios:index/extenderControllerDataplan:ExtenderControllerDataplan", name, args, &resource, opts...)
	if err != nil {
		return nil, err
	}
	return &resource, nil
}

// GetExtenderControllerDataplan gets an existing ExtenderControllerDataplan resource's state with the given name, ID, and optional
// state properties that are used to uniquely qualify the lookup (nil if not required).
func GetExtenderControllerDataplan(ctx *pulumi.Context,
	name string, id pulumi.IDInput, state *ExtenderControllerDataplanState, opts ...pulumi.ResourceOption) (*ExtenderControllerDataplan, error) {
	var resource ExtenderControllerDataplan
	err := ctx.ReadResource("fortios:index/extenderControllerDataplan:ExtenderControllerDataplan", name, id, state, &resource, opts...)
	if err != nil {
		return nil, err
	}
	return &resource, nil
}

// Input properties used for looking up and filtering ExtenderControllerDataplan resources.
type extenderControllerDataplanState struct {
	Apn             *string `pulumi:"apn"`
	AuthType        *string `pulumi:"authType"`
	BillingDate     *int    `pulumi:"billingDate"`
	Capacity        *int    `pulumi:"capacity"`
	Carrier         *string `pulumi:"carrier"`
	Iccid           *string `pulumi:"iccid"`
	ModemId         *string `pulumi:"modemId"`
	MonthlyFee      *int    `pulumi:"monthlyFee"`
	Name            *string `pulumi:"name"`
	Overage         *string `pulumi:"overage"`
	Password        *string `pulumi:"password"`
	Pdn             *string `pulumi:"pdn"`
	PreferredSubnet *int    `pulumi:"preferredSubnet"`
	PrivateNetwork  *string `pulumi:"privateNetwork"`
	SignalPeriod    *int    `pulumi:"signalPeriod"`
	SignalThreshold *int    `pulumi:"signalThreshold"`
	Slot            *string `pulumi:"slot"`
	Type            *string `pulumi:"type"`
	Username        *string `pulumi:"username"`
	Vdomparam       *string `pulumi:"vdomparam"`
}

type ExtenderControllerDataplanState struct {
	Apn             pulumi.StringPtrInput
	AuthType        pulumi.StringPtrInput
	BillingDate     pulumi.IntPtrInput
	Capacity        pulumi.IntPtrInput
	Carrier         pulumi.StringPtrInput
	Iccid           pulumi.StringPtrInput
	ModemId         pulumi.StringPtrInput
	MonthlyFee      pulumi.IntPtrInput
	Name            pulumi.StringPtrInput
	Overage         pulumi.StringPtrInput
	Password        pulumi.StringPtrInput
	Pdn             pulumi.StringPtrInput
	PreferredSubnet pulumi.IntPtrInput
	PrivateNetwork  pulumi.StringPtrInput
	SignalPeriod    pulumi.IntPtrInput
	SignalThreshold pulumi.IntPtrInput
	Slot            pulumi.StringPtrInput
	Type            pulumi.StringPtrInput
	Username        pulumi.StringPtrInput
	Vdomparam       pulumi.StringPtrInput
}

func (ExtenderControllerDataplanState) ElementType() reflect.Type {
	return reflect.TypeOf((*extenderControllerDataplanState)(nil)).Elem()
}

type extenderControllerDataplanArgs struct {
	Apn             *string `pulumi:"apn"`
	AuthType        *string `pulumi:"authType"`
	BillingDate     *int    `pulumi:"billingDate"`
	Capacity        *int    `pulumi:"capacity"`
	Carrier         *string `pulumi:"carrier"`
	Iccid           *string `pulumi:"iccid"`
	ModemId         *string `pulumi:"modemId"`
	MonthlyFee      *int    `pulumi:"monthlyFee"`
	Name            *string `pulumi:"name"`
	Overage         *string `pulumi:"overage"`
	Password        *string `pulumi:"password"`
	Pdn             *string `pulumi:"pdn"`
	PreferredSubnet *int    `pulumi:"preferredSubnet"`
	PrivateNetwork  *string `pulumi:"privateNetwork"`
	SignalPeriod    *int    `pulumi:"signalPeriod"`
	SignalThreshold *int    `pulumi:"signalThreshold"`
	Slot            *string `pulumi:"slot"`
	Type            *string `pulumi:"type"`
	Username        *string `pulumi:"username"`
	Vdomparam       *string `pulumi:"vdomparam"`
}

// The set of arguments for constructing a ExtenderControllerDataplan resource.
type ExtenderControllerDataplanArgs struct {
	Apn             pulumi.StringPtrInput
	AuthType        pulumi.StringPtrInput
	BillingDate     pulumi.IntPtrInput
	Capacity        pulumi.IntPtrInput
	Carrier         pulumi.StringPtrInput
	Iccid           pulumi.StringPtrInput
	ModemId         pulumi.StringPtrInput
	MonthlyFee      pulumi.IntPtrInput
	Name            pulumi.StringPtrInput
	Overage         pulumi.StringPtrInput
	Password        pulumi.StringPtrInput
	Pdn             pulumi.StringPtrInput
	PreferredSubnet pulumi.IntPtrInput
	PrivateNetwork  pulumi.StringPtrInput
	SignalPeriod    pulumi.IntPtrInput
	SignalThreshold pulumi.IntPtrInput
	Slot            pulumi.StringPtrInput
	Type            pulumi.StringPtrInput
	Username        pulumi.StringPtrInput
	Vdomparam       pulumi.StringPtrInput
}

func (ExtenderControllerDataplanArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*extenderControllerDataplanArgs)(nil)).Elem()
}

type ExtenderControllerDataplanInput interface {
	pulumi.Input

	ToExtenderControllerDataplanOutput() ExtenderControllerDataplanOutput
	ToExtenderControllerDataplanOutputWithContext(ctx context.Context) ExtenderControllerDataplanOutput
}

func (*ExtenderControllerDataplan) ElementType() reflect.Type {
	return reflect.TypeOf((**ExtenderControllerDataplan)(nil)).Elem()
}

func (i *ExtenderControllerDataplan) ToExtenderControllerDataplanOutput() ExtenderControllerDataplanOutput {
	return i.ToExtenderControllerDataplanOutputWithContext(context.Background())
}

func (i *ExtenderControllerDataplan) ToExtenderControllerDataplanOutputWithContext(ctx context.Context) ExtenderControllerDataplanOutput {
	return pulumi.ToOutputWithContext(ctx, i).(ExtenderControllerDataplanOutput)
}

// ExtenderControllerDataplanArrayInput is an input type that accepts ExtenderControllerDataplanArray and ExtenderControllerDataplanArrayOutput values.
// You can construct a concrete instance of `ExtenderControllerDataplanArrayInput` via:
//
//	ExtenderControllerDataplanArray{ ExtenderControllerDataplanArgs{...} }
type ExtenderControllerDataplanArrayInput interface {
	pulumi.Input

	ToExtenderControllerDataplanArrayOutput() ExtenderControllerDataplanArrayOutput
	ToExtenderControllerDataplanArrayOutputWithContext(context.Context) ExtenderControllerDataplanArrayOutput
}

type ExtenderControllerDataplanArray []ExtenderControllerDataplanInput

func (ExtenderControllerDataplanArray) ElementType() reflect.Type {
	return reflect.TypeOf((*[]*ExtenderControllerDataplan)(nil)).Elem()
}

func (i ExtenderControllerDataplanArray) ToExtenderControllerDataplanArrayOutput() ExtenderControllerDataplanArrayOutput {
	return i.ToExtenderControllerDataplanArrayOutputWithContext(context.Background())
}

func (i ExtenderControllerDataplanArray) ToExtenderControllerDataplanArrayOutputWithContext(ctx context.Context) ExtenderControllerDataplanArrayOutput {
	return pulumi.ToOutputWithContext(ctx, i).(ExtenderControllerDataplanArrayOutput)
}

// ExtenderControllerDataplanMapInput is an input type that accepts ExtenderControllerDataplanMap and ExtenderControllerDataplanMapOutput values.
// You can construct a concrete instance of `ExtenderControllerDataplanMapInput` via:
//
//	ExtenderControllerDataplanMap{ "key": ExtenderControllerDataplanArgs{...} }
type ExtenderControllerDataplanMapInput interface {
	pulumi.Input

	ToExtenderControllerDataplanMapOutput() ExtenderControllerDataplanMapOutput
	ToExtenderControllerDataplanMapOutputWithContext(context.Context) ExtenderControllerDataplanMapOutput
}

type ExtenderControllerDataplanMap map[string]ExtenderControllerDataplanInput

func (ExtenderControllerDataplanMap) ElementType() reflect.Type {
	return reflect.TypeOf((*map[string]*ExtenderControllerDataplan)(nil)).Elem()
}

func (i ExtenderControllerDataplanMap) ToExtenderControllerDataplanMapOutput() ExtenderControllerDataplanMapOutput {
	return i.ToExtenderControllerDataplanMapOutputWithContext(context.Background())
}

func (i ExtenderControllerDataplanMap) ToExtenderControllerDataplanMapOutputWithContext(ctx context.Context) ExtenderControllerDataplanMapOutput {
	return pulumi.ToOutputWithContext(ctx, i).(ExtenderControllerDataplanMapOutput)
}

type ExtenderControllerDataplanOutput struct{ *pulumi.OutputState }

func (ExtenderControllerDataplanOutput) ElementType() reflect.Type {
	return reflect.TypeOf((**ExtenderControllerDataplan)(nil)).Elem()
}

func (o ExtenderControllerDataplanOutput) ToExtenderControllerDataplanOutput() ExtenderControllerDataplanOutput {
	return o
}

func (o ExtenderControllerDataplanOutput) ToExtenderControllerDataplanOutputWithContext(ctx context.Context) ExtenderControllerDataplanOutput {
	return o
}

func (o ExtenderControllerDataplanOutput) Apn() pulumi.StringOutput {
	return o.ApplyT(func(v *ExtenderControllerDataplan) pulumi.StringOutput { return v.Apn }).(pulumi.StringOutput)
}

func (o ExtenderControllerDataplanOutput) AuthType() pulumi.StringOutput {
	return o.ApplyT(func(v *ExtenderControllerDataplan) pulumi.StringOutput { return v.AuthType }).(pulumi.StringOutput)
}

func (o ExtenderControllerDataplanOutput) BillingDate() pulumi.IntOutput {
	return o.ApplyT(func(v *ExtenderControllerDataplan) pulumi.IntOutput { return v.BillingDate }).(pulumi.IntOutput)
}

func (o ExtenderControllerDataplanOutput) Capacity() pulumi.IntOutput {
	return o.ApplyT(func(v *ExtenderControllerDataplan) pulumi.IntOutput { return v.Capacity }).(pulumi.IntOutput)
}

func (o ExtenderControllerDataplanOutput) Carrier() pulumi.StringOutput {
	return o.ApplyT(func(v *ExtenderControllerDataplan) pulumi.StringOutput { return v.Carrier }).(pulumi.StringOutput)
}

func (o ExtenderControllerDataplanOutput) Iccid() pulumi.StringOutput {
	return o.ApplyT(func(v *ExtenderControllerDataplan) pulumi.StringOutput { return v.Iccid }).(pulumi.StringOutput)
}

func (o ExtenderControllerDataplanOutput) ModemId() pulumi.StringOutput {
	return o.ApplyT(func(v *ExtenderControllerDataplan) pulumi.StringOutput { return v.ModemId }).(pulumi.StringOutput)
}

func (o ExtenderControllerDataplanOutput) MonthlyFee() pulumi.IntOutput {
	return o.ApplyT(func(v *ExtenderControllerDataplan) pulumi.IntOutput { return v.MonthlyFee }).(pulumi.IntOutput)
}

func (o ExtenderControllerDataplanOutput) Name() pulumi.StringOutput {
	return o.ApplyT(func(v *ExtenderControllerDataplan) pulumi.StringOutput { return v.Name }).(pulumi.StringOutput)
}

func (o ExtenderControllerDataplanOutput) Overage() pulumi.StringOutput {
	return o.ApplyT(func(v *ExtenderControllerDataplan) pulumi.StringOutput { return v.Overage }).(pulumi.StringOutput)
}

func (o ExtenderControllerDataplanOutput) Password() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *ExtenderControllerDataplan) pulumi.StringPtrOutput { return v.Password }).(pulumi.StringPtrOutput)
}

func (o ExtenderControllerDataplanOutput) Pdn() pulumi.StringOutput {
	return o.ApplyT(func(v *ExtenderControllerDataplan) pulumi.StringOutput { return v.Pdn }).(pulumi.StringOutput)
}

func (o ExtenderControllerDataplanOutput) PreferredSubnet() pulumi.IntOutput {
	return o.ApplyT(func(v *ExtenderControllerDataplan) pulumi.IntOutput { return v.PreferredSubnet }).(pulumi.IntOutput)
}

func (o ExtenderControllerDataplanOutput) PrivateNetwork() pulumi.StringOutput {
	return o.ApplyT(func(v *ExtenderControllerDataplan) pulumi.StringOutput { return v.PrivateNetwork }).(pulumi.StringOutput)
}

func (o ExtenderControllerDataplanOutput) SignalPeriod() pulumi.IntOutput {
	return o.ApplyT(func(v *ExtenderControllerDataplan) pulumi.IntOutput { return v.SignalPeriod }).(pulumi.IntOutput)
}

func (o ExtenderControllerDataplanOutput) SignalThreshold() pulumi.IntOutput {
	return o.ApplyT(func(v *ExtenderControllerDataplan) pulumi.IntOutput { return v.SignalThreshold }).(pulumi.IntOutput)
}

func (o ExtenderControllerDataplanOutput) Slot() pulumi.StringOutput {
	return o.ApplyT(func(v *ExtenderControllerDataplan) pulumi.StringOutput { return v.Slot }).(pulumi.StringOutput)
}

func (o ExtenderControllerDataplanOutput) Type() pulumi.StringOutput {
	return o.ApplyT(func(v *ExtenderControllerDataplan) pulumi.StringOutput { return v.Type }).(pulumi.StringOutput)
}

func (o ExtenderControllerDataplanOutput) Username() pulumi.StringOutput {
	return o.ApplyT(func(v *ExtenderControllerDataplan) pulumi.StringOutput { return v.Username }).(pulumi.StringOutput)
}

func (o ExtenderControllerDataplanOutput) Vdomparam() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *ExtenderControllerDataplan) pulumi.StringPtrOutput { return v.Vdomparam }).(pulumi.StringPtrOutput)
}

type ExtenderControllerDataplanArrayOutput struct{ *pulumi.OutputState }

func (ExtenderControllerDataplanArrayOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*[]*ExtenderControllerDataplan)(nil)).Elem()
}

func (o ExtenderControllerDataplanArrayOutput) ToExtenderControllerDataplanArrayOutput() ExtenderControllerDataplanArrayOutput {
	return o
}

func (o ExtenderControllerDataplanArrayOutput) ToExtenderControllerDataplanArrayOutputWithContext(ctx context.Context) ExtenderControllerDataplanArrayOutput {
	return o
}

func (o ExtenderControllerDataplanArrayOutput) Index(i pulumi.IntInput) ExtenderControllerDataplanOutput {
	return pulumi.All(o, i).ApplyT(func(vs []interface{}) *ExtenderControllerDataplan {
		return vs[0].([]*ExtenderControllerDataplan)[vs[1].(int)]
	}).(ExtenderControllerDataplanOutput)
}

type ExtenderControllerDataplanMapOutput struct{ *pulumi.OutputState }

func (ExtenderControllerDataplanMapOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*map[string]*ExtenderControllerDataplan)(nil)).Elem()
}

func (o ExtenderControllerDataplanMapOutput) ToExtenderControllerDataplanMapOutput() ExtenderControllerDataplanMapOutput {
	return o
}

func (o ExtenderControllerDataplanMapOutput) ToExtenderControllerDataplanMapOutputWithContext(ctx context.Context) ExtenderControllerDataplanMapOutput {
	return o
}

func (o ExtenderControllerDataplanMapOutput) MapIndex(k pulumi.StringInput) ExtenderControllerDataplanOutput {
	return pulumi.All(o, k).ApplyT(func(vs []interface{}) *ExtenderControllerDataplan {
		return vs[0].(map[string]*ExtenderControllerDataplan)[vs[1].(string)]
	}).(ExtenderControllerDataplanOutput)
}

func init() {
	pulumi.RegisterInputType(reflect.TypeOf((*ExtenderControllerDataplanInput)(nil)).Elem(), &ExtenderControllerDataplan{})
	pulumi.RegisterInputType(reflect.TypeOf((*ExtenderControllerDataplanArrayInput)(nil)).Elem(), ExtenderControllerDataplanArray{})
	pulumi.RegisterInputType(reflect.TypeOf((*ExtenderControllerDataplanMapInput)(nil)).Elem(), ExtenderControllerDataplanMap{})
	pulumi.RegisterOutputType(ExtenderControllerDataplanOutput{})
	pulumi.RegisterOutputType(ExtenderControllerDataplanArrayOutput{})
	pulumi.RegisterOutputType(ExtenderControllerDataplanMapOutput{})
}
