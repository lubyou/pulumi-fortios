// Code generated by the Pulumi Terraform Bridge (tfgen) Tool DO NOT EDIT.
// *** WARNING: Do not edit by hand unless you're certain you know what you are doing! ***

package fortios

import (
	"context"
	"reflect"

	"github.com/lubyou/pulumi-fortios/sdk/go/fortios/internal"
	"github.com/pulumi/pulumi/sdk/v3/go/pulumi"
)

type RouterMulticastFlow struct {
	pulumi.CustomResourceState

	Comments            pulumi.StringOutput                `pulumi:"comments"`
	DynamicSortSubtable pulumi.StringPtrOutput             `pulumi:"dynamicSortSubtable"`
	Flows               RouterMulticastFlowFlowArrayOutput `pulumi:"flows"`
	GetAllTables        pulumi.StringPtrOutput             `pulumi:"getAllTables"`
	Name                pulumi.StringOutput                `pulumi:"name"`
	Vdomparam           pulumi.StringPtrOutput             `pulumi:"vdomparam"`
}

// NewRouterMulticastFlow registers a new resource with the given unique name, arguments, and options.
func NewRouterMulticastFlow(ctx *pulumi.Context,
	name string, args *RouterMulticastFlowArgs, opts ...pulumi.ResourceOption) (*RouterMulticastFlow, error) {
	if args == nil {
		args = &RouterMulticastFlowArgs{}
	}

	opts = internal.PkgResourceDefaultOpts(opts)
	var resource RouterMulticastFlow
	err := ctx.RegisterResource("fortios:index/routerMulticastFlow:RouterMulticastFlow", name, args, &resource, opts...)
	if err != nil {
		return nil, err
	}
	return &resource, nil
}

// GetRouterMulticastFlow gets an existing RouterMulticastFlow resource's state with the given name, ID, and optional
// state properties that are used to uniquely qualify the lookup (nil if not required).
func GetRouterMulticastFlow(ctx *pulumi.Context,
	name string, id pulumi.IDInput, state *RouterMulticastFlowState, opts ...pulumi.ResourceOption) (*RouterMulticastFlow, error) {
	var resource RouterMulticastFlow
	err := ctx.ReadResource("fortios:index/routerMulticastFlow:RouterMulticastFlow", name, id, state, &resource, opts...)
	if err != nil {
		return nil, err
	}
	return &resource, nil
}

// Input properties used for looking up and filtering RouterMulticastFlow resources.
type routerMulticastFlowState struct {
	Comments            *string                   `pulumi:"comments"`
	DynamicSortSubtable *string                   `pulumi:"dynamicSortSubtable"`
	Flows               []RouterMulticastFlowFlow `pulumi:"flows"`
	GetAllTables        *string                   `pulumi:"getAllTables"`
	Name                *string                   `pulumi:"name"`
	Vdomparam           *string                   `pulumi:"vdomparam"`
}

type RouterMulticastFlowState struct {
	Comments            pulumi.StringPtrInput
	DynamicSortSubtable pulumi.StringPtrInput
	Flows               RouterMulticastFlowFlowArrayInput
	GetAllTables        pulumi.StringPtrInput
	Name                pulumi.StringPtrInput
	Vdomparam           pulumi.StringPtrInput
}

func (RouterMulticastFlowState) ElementType() reflect.Type {
	return reflect.TypeOf((*routerMulticastFlowState)(nil)).Elem()
}

type routerMulticastFlowArgs struct {
	Comments            *string                   `pulumi:"comments"`
	DynamicSortSubtable *string                   `pulumi:"dynamicSortSubtable"`
	Flows               []RouterMulticastFlowFlow `pulumi:"flows"`
	GetAllTables        *string                   `pulumi:"getAllTables"`
	Name                *string                   `pulumi:"name"`
	Vdomparam           *string                   `pulumi:"vdomparam"`
}

// The set of arguments for constructing a RouterMulticastFlow resource.
type RouterMulticastFlowArgs struct {
	Comments            pulumi.StringPtrInput
	DynamicSortSubtable pulumi.StringPtrInput
	Flows               RouterMulticastFlowFlowArrayInput
	GetAllTables        pulumi.StringPtrInput
	Name                pulumi.StringPtrInput
	Vdomparam           pulumi.StringPtrInput
}

func (RouterMulticastFlowArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*routerMulticastFlowArgs)(nil)).Elem()
}

type RouterMulticastFlowInput interface {
	pulumi.Input

	ToRouterMulticastFlowOutput() RouterMulticastFlowOutput
	ToRouterMulticastFlowOutputWithContext(ctx context.Context) RouterMulticastFlowOutput
}

func (*RouterMulticastFlow) ElementType() reflect.Type {
	return reflect.TypeOf((**RouterMulticastFlow)(nil)).Elem()
}

func (i *RouterMulticastFlow) ToRouterMulticastFlowOutput() RouterMulticastFlowOutput {
	return i.ToRouterMulticastFlowOutputWithContext(context.Background())
}

func (i *RouterMulticastFlow) ToRouterMulticastFlowOutputWithContext(ctx context.Context) RouterMulticastFlowOutput {
	return pulumi.ToOutputWithContext(ctx, i).(RouterMulticastFlowOutput)
}

// RouterMulticastFlowArrayInput is an input type that accepts RouterMulticastFlowArray and RouterMulticastFlowArrayOutput values.
// You can construct a concrete instance of `RouterMulticastFlowArrayInput` via:
//
//	RouterMulticastFlowArray{ RouterMulticastFlowArgs{...} }
type RouterMulticastFlowArrayInput interface {
	pulumi.Input

	ToRouterMulticastFlowArrayOutput() RouterMulticastFlowArrayOutput
	ToRouterMulticastFlowArrayOutputWithContext(context.Context) RouterMulticastFlowArrayOutput
}

type RouterMulticastFlowArray []RouterMulticastFlowInput

func (RouterMulticastFlowArray) ElementType() reflect.Type {
	return reflect.TypeOf((*[]*RouterMulticastFlow)(nil)).Elem()
}

func (i RouterMulticastFlowArray) ToRouterMulticastFlowArrayOutput() RouterMulticastFlowArrayOutput {
	return i.ToRouterMulticastFlowArrayOutputWithContext(context.Background())
}

func (i RouterMulticastFlowArray) ToRouterMulticastFlowArrayOutputWithContext(ctx context.Context) RouterMulticastFlowArrayOutput {
	return pulumi.ToOutputWithContext(ctx, i).(RouterMulticastFlowArrayOutput)
}

// RouterMulticastFlowMapInput is an input type that accepts RouterMulticastFlowMap and RouterMulticastFlowMapOutput values.
// You can construct a concrete instance of `RouterMulticastFlowMapInput` via:
//
//	RouterMulticastFlowMap{ "key": RouterMulticastFlowArgs{...} }
type RouterMulticastFlowMapInput interface {
	pulumi.Input

	ToRouterMulticastFlowMapOutput() RouterMulticastFlowMapOutput
	ToRouterMulticastFlowMapOutputWithContext(context.Context) RouterMulticastFlowMapOutput
}

type RouterMulticastFlowMap map[string]RouterMulticastFlowInput

func (RouterMulticastFlowMap) ElementType() reflect.Type {
	return reflect.TypeOf((*map[string]*RouterMulticastFlow)(nil)).Elem()
}

func (i RouterMulticastFlowMap) ToRouterMulticastFlowMapOutput() RouterMulticastFlowMapOutput {
	return i.ToRouterMulticastFlowMapOutputWithContext(context.Background())
}

func (i RouterMulticastFlowMap) ToRouterMulticastFlowMapOutputWithContext(ctx context.Context) RouterMulticastFlowMapOutput {
	return pulumi.ToOutputWithContext(ctx, i).(RouterMulticastFlowMapOutput)
}

type RouterMulticastFlowOutput struct{ *pulumi.OutputState }

func (RouterMulticastFlowOutput) ElementType() reflect.Type {
	return reflect.TypeOf((**RouterMulticastFlow)(nil)).Elem()
}

func (o RouterMulticastFlowOutput) ToRouterMulticastFlowOutput() RouterMulticastFlowOutput {
	return o
}

func (o RouterMulticastFlowOutput) ToRouterMulticastFlowOutputWithContext(ctx context.Context) RouterMulticastFlowOutput {
	return o
}

func (o RouterMulticastFlowOutput) Comments() pulumi.StringOutput {
	return o.ApplyT(func(v *RouterMulticastFlow) pulumi.StringOutput { return v.Comments }).(pulumi.StringOutput)
}

func (o RouterMulticastFlowOutput) DynamicSortSubtable() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *RouterMulticastFlow) pulumi.StringPtrOutput { return v.DynamicSortSubtable }).(pulumi.StringPtrOutput)
}

func (o RouterMulticastFlowOutput) Flows() RouterMulticastFlowFlowArrayOutput {
	return o.ApplyT(func(v *RouterMulticastFlow) RouterMulticastFlowFlowArrayOutput { return v.Flows }).(RouterMulticastFlowFlowArrayOutput)
}

func (o RouterMulticastFlowOutput) GetAllTables() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *RouterMulticastFlow) pulumi.StringPtrOutput { return v.GetAllTables }).(pulumi.StringPtrOutput)
}

func (o RouterMulticastFlowOutput) Name() pulumi.StringOutput {
	return o.ApplyT(func(v *RouterMulticastFlow) pulumi.StringOutput { return v.Name }).(pulumi.StringOutput)
}

func (o RouterMulticastFlowOutput) Vdomparam() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *RouterMulticastFlow) pulumi.StringPtrOutput { return v.Vdomparam }).(pulumi.StringPtrOutput)
}

type RouterMulticastFlowArrayOutput struct{ *pulumi.OutputState }

func (RouterMulticastFlowArrayOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*[]*RouterMulticastFlow)(nil)).Elem()
}

func (o RouterMulticastFlowArrayOutput) ToRouterMulticastFlowArrayOutput() RouterMulticastFlowArrayOutput {
	return o
}

func (o RouterMulticastFlowArrayOutput) ToRouterMulticastFlowArrayOutputWithContext(ctx context.Context) RouterMulticastFlowArrayOutput {
	return o
}

func (o RouterMulticastFlowArrayOutput) Index(i pulumi.IntInput) RouterMulticastFlowOutput {
	return pulumi.All(o, i).ApplyT(func(vs []interface{}) *RouterMulticastFlow {
		return vs[0].([]*RouterMulticastFlow)[vs[1].(int)]
	}).(RouterMulticastFlowOutput)
}

type RouterMulticastFlowMapOutput struct{ *pulumi.OutputState }

func (RouterMulticastFlowMapOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*map[string]*RouterMulticastFlow)(nil)).Elem()
}

func (o RouterMulticastFlowMapOutput) ToRouterMulticastFlowMapOutput() RouterMulticastFlowMapOutput {
	return o
}

func (o RouterMulticastFlowMapOutput) ToRouterMulticastFlowMapOutputWithContext(ctx context.Context) RouterMulticastFlowMapOutput {
	return o
}

func (o RouterMulticastFlowMapOutput) MapIndex(k pulumi.StringInput) RouterMulticastFlowOutput {
	return pulumi.All(o, k).ApplyT(func(vs []interface{}) *RouterMulticastFlow {
		return vs[0].(map[string]*RouterMulticastFlow)[vs[1].(string)]
	}).(RouterMulticastFlowOutput)
}

func init() {
	pulumi.RegisterInputType(reflect.TypeOf((*RouterMulticastFlowInput)(nil)).Elem(), &RouterMulticastFlow{})
	pulumi.RegisterInputType(reflect.TypeOf((*RouterMulticastFlowArrayInput)(nil)).Elem(), RouterMulticastFlowArray{})
	pulumi.RegisterInputType(reflect.TypeOf((*RouterMulticastFlowMapInput)(nil)).Elem(), RouterMulticastFlowMap{})
	pulumi.RegisterOutputType(RouterMulticastFlowOutput{})
	pulumi.RegisterOutputType(RouterMulticastFlowArrayOutput{})
	pulumi.RegisterOutputType(RouterMulticastFlowMapOutput{})
}
