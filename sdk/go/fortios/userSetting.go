// *** WARNING: this file was generated by the Pulumi Terraform Bridge (tfgen) Tool. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

package fortios

import (
	"context"
	"reflect"

	"github.com/pulumi/pulumi/sdk/v3/go/pulumi"
)

// Configure user authentication setting.
//
// ## Example Usage
//
// ```go
// package main
//
// import (
// 	"github.com/pulumi/pulumi-fortios/sdk/go/fortios"
// 	"github.com/pulumi/pulumi/sdk/v3/go/pulumi"
// )
//
// func main() {
// 	pulumi.Run(func(ctx *pulumi.Context) error {
// 		_, err := fortios.NewUserSetting(ctx, "trname", &fortios.UserSettingArgs{
// 			AuthBlackoutTime:          pulumi.Int(0),
// 			AuthCert:                  pulumi.String("Fortinet_Factory"),
// 			AuthHttpBasic:             pulumi.String("disable"),
// 			AuthInvalidMax:            pulumi.Int(5),
// 			AuthLockoutDuration:       pulumi.Int(0),
// 			AuthLockoutThreshold:      pulumi.Int(3),
// 			AuthOnDemand:              pulumi.String("implicitly"),
// 			AuthPortalTimeout:         pulumi.Int(3),
// 			AuthSecureHttp:            pulumi.String("disable"),
// 			AuthSrcMac:                pulumi.String("enable"),
// 			AuthSslAllowRenegotiation: pulumi.String("disable"),
// 			AuthTimeout:               pulumi.Int(5),
// 			AuthTimeoutType:           pulumi.String("idle-timeout"),
// 			AuthType:                  pulumi.String("http https ftp telnet"),
// 			RadiusSesTimeoutAct:       pulumi.String("hard-timeout"),
// 		})
// 		if err != nil {
// 			return err
// 		}
// 		return nil
// 	})
// }
// ```
//
// ## Import
//
// User Setting can be imported using any of these accepted formats$ export "FORTIOS_IMPORT_TABLE"="true"
//
// ```sh
//  $ pulumi import fortios:index/userSetting:UserSetting labelname UserSetting
// ```
//
//  $ unset "FORTIOS_IMPORT_TABLE"
type UserSetting struct {
	pulumi.CustomResourceState

	// Time in seconds an IP address is denied access after failing to authenticate five times within one minute.
	AuthBlackoutTime pulumi.IntOutput `pulumi:"authBlackoutTime"`
	// HTTPS CA certificate for policy authentication.
	AuthCaCert pulumi.StringOutput `pulumi:"authCaCert"`
	// HTTPS server certificate for policy authentication.
	AuthCert pulumi.StringOutput `pulumi:"authCert"`
	// Enable/disable use of HTTP basic authentication for identity-based firewall policies. Valid values: `enable`, `disable`.
	AuthHttpBasic pulumi.StringOutput `pulumi:"authHttpBasic"`
	// Maximum number of failed authentication attempts before the user is blocked.
	AuthInvalidMax pulumi.IntOutput `pulumi:"authInvalidMax"`
	// Lockout period in seconds after too many login failures.
	AuthLockoutDuration pulumi.IntOutput `pulumi:"authLockoutDuration"`
	// Maximum number of failed login attempts before login lockout is triggered.
	AuthLockoutThreshold pulumi.IntOutput `pulumi:"authLockoutThreshold"`
	// Always/implicitly trigger firewall authentication on demand. Valid values: `always`, `implicitly`.
	AuthOnDemand pulumi.StringOutput `pulumi:"authOnDemand"`
	// Time in minutes before captive portal user have to re-authenticate (1 - 30 min, default 3 min).
	AuthPortalTimeout pulumi.IntOutput `pulumi:"authPortalTimeout"`
	// Set up non-standard ports for authentication with HTTP, HTTPS, FTP, and TELNET. The structure of `authPorts` block is documented below.
	AuthPorts UserSettingAuthPortArrayOutput `pulumi:"authPorts"`
	// Enable/disable redirecting HTTP user authentication to more secure HTTPS. Valid values: `enable`, `disable`.
	AuthSecureHttp pulumi.StringOutput `pulumi:"authSecureHttp"`
	// Enable/disable source MAC for user identity. Valid values: `enable`, `disable`.
	AuthSrcMac pulumi.StringOutput `pulumi:"authSrcMac"`
	// Allow/forbid SSL re-negotiation for HTTPS authentication. Valid values: `enable`, `disable`.
	AuthSslAllowRenegotiation pulumi.StringOutput `pulumi:"authSslAllowRenegotiation"`
	// Maximum supported protocol version for SSL/TLS connections (default is no limit). Valid values: `sslv3`, `tlsv1`, `tlsv1-1`, `tlsv1-2`, `tlsv1-3`.
	AuthSslMaxProtoVersion pulumi.StringOutput `pulumi:"authSslMaxProtoVersion"`
	// Minimum supported protocol version for SSL/TLS connections (default is to follow system global setting). Valid values: `default`, `SSLv3`, `TLSv1`, `TLSv1-1`, `TLSv1-2`.
	AuthSslMinProtoVersion pulumi.StringOutput `pulumi:"authSslMinProtoVersion"`
	// Set signature algorithms related to HTTPS authentication (affects TLS version <= 1.2 only, default is to enable all). Valid values: `no-rsa-pss`, `all`.
	AuthSslSigalgs pulumi.StringOutput `pulumi:"authSslSigalgs"`
	// Time in minutes before the firewall user authentication timeout requires the user to re-authenticate.
	AuthTimeout pulumi.IntOutput `pulumi:"authTimeout"`
	// Control if authenticated users have to login again after a hard timeout, after an idle timeout, or after a session timeout. Valid values: `idle-timeout`, `hard-timeout`, `new-session`.
	AuthTimeoutType pulumi.StringOutput `pulumi:"authTimeoutType"`
	// Supported firewall policy authentication protocols/methods. Valid values: `http`, `https`, `ftp`, `telnet`.
	AuthType pulumi.StringOutput `pulumi:"authType"`
	// true or false, set this parameter to true when using dynamic forEach + toset to configure and sort sub-tables, please do not set this parameter when configuring static sub-tables.
	DynamicSortSubtable pulumi.StringPtrOutput `pulumi:"dynamicSortSubtable"`
	// Enable/disable per policy disclaimer. Valid values: `enable`, `disable`.
	PerPolicyDisclaimer pulumi.StringOutput `pulumi:"perPolicyDisclaimer"`
	// Set the RADIUS session timeout to a hard timeout or to ignore RADIUS server session timeouts. Valid values: `hard-timeout`, `ignore-timeout`.
	RadiusSesTimeoutAct pulumi.StringOutput `pulumi:"radiusSesTimeoutAct"`
	// Specifies the vdom to which the resource will be applied when the FortiGate unit is running in VDOM mode. Only one vdom can be specified. If you want to inherit the vdom configuration of the provider, please do not set this parameter.
	Vdomparam pulumi.StringPtrOutput `pulumi:"vdomparam"`
}

// NewUserSetting registers a new resource with the given unique name, arguments, and options.
func NewUserSetting(ctx *pulumi.Context,
	name string, args *UserSettingArgs, opts ...pulumi.ResourceOption) (*UserSetting, error) {
	if args == nil {
		args = &UserSettingArgs{}
	}

	opts = pkgResourceDefaultOpts(opts)
	var resource UserSetting
	err := ctx.RegisterResource("fortios:index/userSetting:UserSetting", name, args, &resource, opts...)
	if err != nil {
		return nil, err
	}
	return &resource, nil
}

// GetUserSetting gets an existing UserSetting resource's state with the given name, ID, and optional
// state properties that are used to uniquely qualify the lookup (nil if not required).
func GetUserSetting(ctx *pulumi.Context,
	name string, id pulumi.IDInput, state *UserSettingState, opts ...pulumi.ResourceOption) (*UserSetting, error) {
	var resource UserSetting
	err := ctx.ReadResource("fortios:index/userSetting:UserSetting", name, id, state, &resource, opts...)
	if err != nil {
		return nil, err
	}
	return &resource, nil
}

// Input properties used for looking up and filtering UserSetting resources.
type userSettingState struct {
	// Time in seconds an IP address is denied access after failing to authenticate five times within one minute.
	AuthBlackoutTime *int `pulumi:"authBlackoutTime"`
	// HTTPS CA certificate for policy authentication.
	AuthCaCert *string `pulumi:"authCaCert"`
	// HTTPS server certificate for policy authentication.
	AuthCert *string `pulumi:"authCert"`
	// Enable/disable use of HTTP basic authentication for identity-based firewall policies. Valid values: `enable`, `disable`.
	AuthHttpBasic *string `pulumi:"authHttpBasic"`
	// Maximum number of failed authentication attempts before the user is blocked.
	AuthInvalidMax *int `pulumi:"authInvalidMax"`
	// Lockout period in seconds after too many login failures.
	AuthLockoutDuration *int `pulumi:"authLockoutDuration"`
	// Maximum number of failed login attempts before login lockout is triggered.
	AuthLockoutThreshold *int `pulumi:"authLockoutThreshold"`
	// Always/implicitly trigger firewall authentication on demand. Valid values: `always`, `implicitly`.
	AuthOnDemand *string `pulumi:"authOnDemand"`
	// Time in minutes before captive portal user have to re-authenticate (1 - 30 min, default 3 min).
	AuthPortalTimeout *int `pulumi:"authPortalTimeout"`
	// Set up non-standard ports for authentication with HTTP, HTTPS, FTP, and TELNET. The structure of `authPorts` block is documented below.
	AuthPorts []UserSettingAuthPort `pulumi:"authPorts"`
	// Enable/disable redirecting HTTP user authentication to more secure HTTPS. Valid values: `enable`, `disable`.
	AuthSecureHttp *string `pulumi:"authSecureHttp"`
	// Enable/disable source MAC for user identity. Valid values: `enable`, `disable`.
	AuthSrcMac *string `pulumi:"authSrcMac"`
	// Allow/forbid SSL re-negotiation for HTTPS authentication. Valid values: `enable`, `disable`.
	AuthSslAllowRenegotiation *string `pulumi:"authSslAllowRenegotiation"`
	// Maximum supported protocol version for SSL/TLS connections (default is no limit). Valid values: `sslv3`, `tlsv1`, `tlsv1-1`, `tlsv1-2`, `tlsv1-3`.
	AuthSslMaxProtoVersion *string `pulumi:"authSslMaxProtoVersion"`
	// Minimum supported protocol version for SSL/TLS connections (default is to follow system global setting). Valid values: `default`, `SSLv3`, `TLSv1`, `TLSv1-1`, `TLSv1-2`.
	AuthSslMinProtoVersion *string `pulumi:"authSslMinProtoVersion"`
	// Set signature algorithms related to HTTPS authentication (affects TLS version <= 1.2 only, default is to enable all). Valid values: `no-rsa-pss`, `all`.
	AuthSslSigalgs *string `pulumi:"authSslSigalgs"`
	// Time in minutes before the firewall user authentication timeout requires the user to re-authenticate.
	AuthTimeout *int `pulumi:"authTimeout"`
	// Control if authenticated users have to login again after a hard timeout, after an idle timeout, or after a session timeout. Valid values: `idle-timeout`, `hard-timeout`, `new-session`.
	AuthTimeoutType *string `pulumi:"authTimeoutType"`
	// Supported firewall policy authentication protocols/methods. Valid values: `http`, `https`, `ftp`, `telnet`.
	AuthType *string `pulumi:"authType"`
	// true or false, set this parameter to true when using dynamic forEach + toset to configure and sort sub-tables, please do not set this parameter when configuring static sub-tables.
	DynamicSortSubtable *string `pulumi:"dynamicSortSubtable"`
	// Enable/disable per policy disclaimer. Valid values: `enable`, `disable`.
	PerPolicyDisclaimer *string `pulumi:"perPolicyDisclaimer"`
	// Set the RADIUS session timeout to a hard timeout or to ignore RADIUS server session timeouts. Valid values: `hard-timeout`, `ignore-timeout`.
	RadiusSesTimeoutAct *string `pulumi:"radiusSesTimeoutAct"`
	// Specifies the vdom to which the resource will be applied when the FortiGate unit is running in VDOM mode. Only one vdom can be specified. If you want to inherit the vdom configuration of the provider, please do not set this parameter.
	Vdomparam *string `pulumi:"vdomparam"`
}

type UserSettingState struct {
	// Time in seconds an IP address is denied access after failing to authenticate five times within one minute.
	AuthBlackoutTime pulumi.IntPtrInput
	// HTTPS CA certificate for policy authentication.
	AuthCaCert pulumi.StringPtrInput
	// HTTPS server certificate for policy authentication.
	AuthCert pulumi.StringPtrInput
	// Enable/disable use of HTTP basic authentication for identity-based firewall policies. Valid values: `enable`, `disable`.
	AuthHttpBasic pulumi.StringPtrInput
	// Maximum number of failed authentication attempts before the user is blocked.
	AuthInvalidMax pulumi.IntPtrInput
	// Lockout period in seconds after too many login failures.
	AuthLockoutDuration pulumi.IntPtrInput
	// Maximum number of failed login attempts before login lockout is triggered.
	AuthLockoutThreshold pulumi.IntPtrInput
	// Always/implicitly trigger firewall authentication on demand. Valid values: `always`, `implicitly`.
	AuthOnDemand pulumi.StringPtrInput
	// Time in minutes before captive portal user have to re-authenticate (1 - 30 min, default 3 min).
	AuthPortalTimeout pulumi.IntPtrInput
	// Set up non-standard ports for authentication with HTTP, HTTPS, FTP, and TELNET. The structure of `authPorts` block is documented below.
	AuthPorts UserSettingAuthPortArrayInput
	// Enable/disable redirecting HTTP user authentication to more secure HTTPS. Valid values: `enable`, `disable`.
	AuthSecureHttp pulumi.StringPtrInput
	// Enable/disable source MAC for user identity. Valid values: `enable`, `disable`.
	AuthSrcMac pulumi.StringPtrInput
	// Allow/forbid SSL re-negotiation for HTTPS authentication. Valid values: `enable`, `disable`.
	AuthSslAllowRenegotiation pulumi.StringPtrInput
	// Maximum supported protocol version for SSL/TLS connections (default is no limit). Valid values: `sslv3`, `tlsv1`, `tlsv1-1`, `tlsv1-2`, `tlsv1-3`.
	AuthSslMaxProtoVersion pulumi.StringPtrInput
	// Minimum supported protocol version for SSL/TLS connections (default is to follow system global setting). Valid values: `default`, `SSLv3`, `TLSv1`, `TLSv1-1`, `TLSv1-2`.
	AuthSslMinProtoVersion pulumi.StringPtrInput
	// Set signature algorithms related to HTTPS authentication (affects TLS version <= 1.2 only, default is to enable all). Valid values: `no-rsa-pss`, `all`.
	AuthSslSigalgs pulumi.StringPtrInput
	// Time in minutes before the firewall user authentication timeout requires the user to re-authenticate.
	AuthTimeout pulumi.IntPtrInput
	// Control if authenticated users have to login again after a hard timeout, after an idle timeout, or after a session timeout. Valid values: `idle-timeout`, `hard-timeout`, `new-session`.
	AuthTimeoutType pulumi.StringPtrInput
	// Supported firewall policy authentication protocols/methods. Valid values: `http`, `https`, `ftp`, `telnet`.
	AuthType pulumi.StringPtrInput
	// true or false, set this parameter to true when using dynamic forEach + toset to configure and sort sub-tables, please do not set this parameter when configuring static sub-tables.
	DynamicSortSubtable pulumi.StringPtrInput
	// Enable/disable per policy disclaimer. Valid values: `enable`, `disable`.
	PerPolicyDisclaimer pulumi.StringPtrInput
	// Set the RADIUS session timeout to a hard timeout or to ignore RADIUS server session timeouts. Valid values: `hard-timeout`, `ignore-timeout`.
	RadiusSesTimeoutAct pulumi.StringPtrInput
	// Specifies the vdom to which the resource will be applied when the FortiGate unit is running in VDOM mode. Only one vdom can be specified. If you want to inherit the vdom configuration of the provider, please do not set this parameter.
	Vdomparam pulumi.StringPtrInput
}

func (UserSettingState) ElementType() reflect.Type {
	return reflect.TypeOf((*userSettingState)(nil)).Elem()
}

type userSettingArgs struct {
	// Time in seconds an IP address is denied access after failing to authenticate five times within one minute.
	AuthBlackoutTime *int `pulumi:"authBlackoutTime"`
	// HTTPS CA certificate for policy authentication.
	AuthCaCert *string `pulumi:"authCaCert"`
	// HTTPS server certificate for policy authentication.
	AuthCert *string `pulumi:"authCert"`
	// Enable/disable use of HTTP basic authentication for identity-based firewall policies. Valid values: `enable`, `disable`.
	AuthHttpBasic *string `pulumi:"authHttpBasic"`
	// Maximum number of failed authentication attempts before the user is blocked.
	AuthInvalidMax *int `pulumi:"authInvalidMax"`
	// Lockout period in seconds after too many login failures.
	AuthLockoutDuration *int `pulumi:"authLockoutDuration"`
	// Maximum number of failed login attempts before login lockout is triggered.
	AuthLockoutThreshold *int `pulumi:"authLockoutThreshold"`
	// Always/implicitly trigger firewall authentication on demand. Valid values: `always`, `implicitly`.
	AuthOnDemand *string `pulumi:"authOnDemand"`
	// Time in minutes before captive portal user have to re-authenticate (1 - 30 min, default 3 min).
	AuthPortalTimeout *int `pulumi:"authPortalTimeout"`
	// Set up non-standard ports for authentication with HTTP, HTTPS, FTP, and TELNET. The structure of `authPorts` block is documented below.
	AuthPorts []UserSettingAuthPort `pulumi:"authPorts"`
	// Enable/disable redirecting HTTP user authentication to more secure HTTPS. Valid values: `enable`, `disable`.
	AuthSecureHttp *string `pulumi:"authSecureHttp"`
	// Enable/disable source MAC for user identity. Valid values: `enable`, `disable`.
	AuthSrcMac *string `pulumi:"authSrcMac"`
	// Allow/forbid SSL re-negotiation for HTTPS authentication. Valid values: `enable`, `disable`.
	AuthSslAllowRenegotiation *string `pulumi:"authSslAllowRenegotiation"`
	// Maximum supported protocol version for SSL/TLS connections (default is no limit). Valid values: `sslv3`, `tlsv1`, `tlsv1-1`, `tlsv1-2`, `tlsv1-3`.
	AuthSslMaxProtoVersion *string `pulumi:"authSslMaxProtoVersion"`
	// Minimum supported protocol version for SSL/TLS connections (default is to follow system global setting). Valid values: `default`, `SSLv3`, `TLSv1`, `TLSv1-1`, `TLSv1-2`.
	AuthSslMinProtoVersion *string `pulumi:"authSslMinProtoVersion"`
	// Set signature algorithms related to HTTPS authentication (affects TLS version <= 1.2 only, default is to enable all). Valid values: `no-rsa-pss`, `all`.
	AuthSslSigalgs *string `pulumi:"authSslSigalgs"`
	// Time in minutes before the firewall user authentication timeout requires the user to re-authenticate.
	AuthTimeout *int `pulumi:"authTimeout"`
	// Control if authenticated users have to login again after a hard timeout, after an idle timeout, or after a session timeout. Valid values: `idle-timeout`, `hard-timeout`, `new-session`.
	AuthTimeoutType *string `pulumi:"authTimeoutType"`
	// Supported firewall policy authentication protocols/methods. Valid values: `http`, `https`, `ftp`, `telnet`.
	AuthType *string `pulumi:"authType"`
	// true or false, set this parameter to true when using dynamic forEach + toset to configure and sort sub-tables, please do not set this parameter when configuring static sub-tables.
	DynamicSortSubtable *string `pulumi:"dynamicSortSubtable"`
	// Enable/disable per policy disclaimer. Valid values: `enable`, `disable`.
	PerPolicyDisclaimer *string `pulumi:"perPolicyDisclaimer"`
	// Set the RADIUS session timeout to a hard timeout or to ignore RADIUS server session timeouts. Valid values: `hard-timeout`, `ignore-timeout`.
	RadiusSesTimeoutAct *string `pulumi:"radiusSesTimeoutAct"`
	// Specifies the vdom to which the resource will be applied when the FortiGate unit is running in VDOM mode. Only one vdom can be specified. If you want to inherit the vdom configuration of the provider, please do not set this parameter.
	Vdomparam *string `pulumi:"vdomparam"`
}

// The set of arguments for constructing a UserSetting resource.
type UserSettingArgs struct {
	// Time in seconds an IP address is denied access after failing to authenticate five times within one minute.
	AuthBlackoutTime pulumi.IntPtrInput
	// HTTPS CA certificate for policy authentication.
	AuthCaCert pulumi.StringPtrInput
	// HTTPS server certificate for policy authentication.
	AuthCert pulumi.StringPtrInput
	// Enable/disable use of HTTP basic authentication for identity-based firewall policies. Valid values: `enable`, `disable`.
	AuthHttpBasic pulumi.StringPtrInput
	// Maximum number of failed authentication attempts before the user is blocked.
	AuthInvalidMax pulumi.IntPtrInput
	// Lockout period in seconds after too many login failures.
	AuthLockoutDuration pulumi.IntPtrInput
	// Maximum number of failed login attempts before login lockout is triggered.
	AuthLockoutThreshold pulumi.IntPtrInput
	// Always/implicitly trigger firewall authentication on demand. Valid values: `always`, `implicitly`.
	AuthOnDemand pulumi.StringPtrInput
	// Time in minutes before captive portal user have to re-authenticate (1 - 30 min, default 3 min).
	AuthPortalTimeout pulumi.IntPtrInput
	// Set up non-standard ports for authentication with HTTP, HTTPS, FTP, and TELNET. The structure of `authPorts` block is documented below.
	AuthPorts UserSettingAuthPortArrayInput
	// Enable/disable redirecting HTTP user authentication to more secure HTTPS. Valid values: `enable`, `disable`.
	AuthSecureHttp pulumi.StringPtrInput
	// Enable/disable source MAC for user identity. Valid values: `enable`, `disable`.
	AuthSrcMac pulumi.StringPtrInput
	// Allow/forbid SSL re-negotiation for HTTPS authentication. Valid values: `enable`, `disable`.
	AuthSslAllowRenegotiation pulumi.StringPtrInput
	// Maximum supported protocol version for SSL/TLS connections (default is no limit). Valid values: `sslv3`, `tlsv1`, `tlsv1-1`, `tlsv1-2`, `tlsv1-3`.
	AuthSslMaxProtoVersion pulumi.StringPtrInput
	// Minimum supported protocol version for SSL/TLS connections (default is to follow system global setting). Valid values: `default`, `SSLv3`, `TLSv1`, `TLSv1-1`, `TLSv1-2`.
	AuthSslMinProtoVersion pulumi.StringPtrInput
	// Set signature algorithms related to HTTPS authentication (affects TLS version <= 1.2 only, default is to enable all). Valid values: `no-rsa-pss`, `all`.
	AuthSslSigalgs pulumi.StringPtrInput
	// Time in minutes before the firewall user authentication timeout requires the user to re-authenticate.
	AuthTimeout pulumi.IntPtrInput
	// Control if authenticated users have to login again after a hard timeout, after an idle timeout, or after a session timeout. Valid values: `idle-timeout`, `hard-timeout`, `new-session`.
	AuthTimeoutType pulumi.StringPtrInput
	// Supported firewall policy authentication protocols/methods. Valid values: `http`, `https`, `ftp`, `telnet`.
	AuthType pulumi.StringPtrInput
	// true or false, set this parameter to true when using dynamic forEach + toset to configure and sort sub-tables, please do not set this parameter when configuring static sub-tables.
	DynamicSortSubtable pulumi.StringPtrInput
	// Enable/disable per policy disclaimer. Valid values: `enable`, `disable`.
	PerPolicyDisclaimer pulumi.StringPtrInput
	// Set the RADIUS session timeout to a hard timeout or to ignore RADIUS server session timeouts. Valid values: `hard-timeout`, `ignore-timeout`.
	RadiusSesTimeoutAct pulumi.StringPtrInput
	// Specifies the vdom to which the resource will be applied when the FortiGate unit is running in VDOM mode. Only one vdom can be specified. If you want to inherit the vdom configuration of the provider, please do not set this parameter.
	Vdomparam pulumi.StringPtrInput
}

func (UserSettingArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*userSettingArgs)(nil)).Elem()
}

type UserSettingInput interface {
	pulumi.Input

	ToUserSettingOutput() UserSettingOutput
	ToUserSettingOutputWithContext(ctx context.Context) UserSettingOutput
}

func (*UserSetting) ElementType() reflect.Type {
	return reflect.TypeOf((**UserSetting)(nil)).Elem()
}

func (i *UserSetting) ToUserSettingOutput() UserSettingOutput {
	return i.ToUserSettingOutputWithContext(context.Background())
}

func (i *UserSetting) ToUserSettingOutputWithContext(ctx context.Context) UserSettingOutput {
	return pulumi.ToOutputWithContext(ctx, i).(UserSettingOutput)
}

// UserSettingArrayInput is an input type that accepts UserSettingArray and UserSettingArrayOutput values.
// You can construct a concrete instance of `UserSettingArrayInput` via:
//
//          UserSettingArray{ UserSettingArgs{...} }
type UserSettingArrayInput interface {
	pulumi.Input

	ToUserSettingArrayOutput() UserSettingArrayOutput
	ToUserSettingArrayOutputWithContext(context.Context) UserSettingArrayOutput
}

type UserSettingArray []UserSettingInput

func (UserSettingArray) ElementType() reflect.Type {
	return reflect.TypeOf((*[]*UserSetting)(nil)).Elem()
}

func (i UserSettingArray) ToUserSettingArrayOutput() UserSettingArrayOutput {
	return i.ToUserSettingArrayOutputWithContext(context.Background())
}

func (i UserSettingArray) ToUserSettingArrayOutputWithContext(ctx context.Context) UserSettingArrayOutput {
	return pulumi.ToOutputWithContext(ctx, i).(UserSettingArrayOutput)
}

// UserSettingMapInput is an input type that accepts UserSettingMap and UserSettingMapOutput values.
// You can construct a concrete instance of `UserSettingMapInput` via:
//
//          UserSettingMap{ "key": UserSettingArgs{...} }
type UserSettingMapInput interface {
	pulumi.Input

	ToUserSettingMapOutput() UserSettingMapOutput
	ToUserSettingMapOutputWithContext(context.Context) UserSettingMapOutput
}

type UserSettingMap map[string]UserSettingInput

func (UserSettingMap) ElementType() reflect.Type {
	return reflect.TypeOf((*map[string]*UserSetting)(nil)).Elem()
}

func (i UserSettingMap) ToUserSettingMapOutput() UserSettingMapOutput {
	return i.ToUserSettingMapOutputWithContext(context.Background())
}

func (i UserSettingMap) ToUserSettingMapOutputWithContext(ctx context.Context) UserSettingMapOutput {
	return pulumi.ToOutputWithContext(ctx, i).(UserSettingMapOutput)
}

type UserSettingOutput struct{ *pulumi.OutputState }

func (UserSettingOutput) ElementType() reflect.Type {
	return reflect.TypeOf((**UserSetting)(nil)).Elem()
}

func (o UserSettingOutput) ToUserSettingOutput() UserSettingOutput {
	return o
}

func (o UserSettingOutput) ToUserSettingOutputWithContext(ctx context.Context) UserSettingOutput {
	return o
}

type UserSettingArrayOutput struct{ *pulumi.OutputState }

func (UserSettingArrayOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*[]*UserSetting)(nil)).Elem()
}

func (o UserSettingArrayOutput) ToUserSettingArrayOutput() UserSettingArrayOutput {
	return o
}

func (o UserSettingArrayOutput) ToUserSettingArrayOutputWithContext(ctx context.Context) UserSettingArrayOutput {
	return o
}

func (o UserSettingArrayOutput) Index(i pulumi.IntInput) UserSettingOutput {
	return pulumi.All(o, i).ApplyT(func(vs []interface{}) *UserSetting {
		return vs[0].([]*UserSetting)[vs[1].(int)]
	}).(UserSettingOutput)
}

type UserSettingMapOutput struct{ *pulumi.OutputState }

func (UserSettingMapOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*map[string]*UserSetting)(nil)).Elem()
}

func (o UserSettingMapOutput) ToUserSettingMapOutput() UserSettingMapOutput {
	return o
}

func (o UserSettingMapOutput) ToUserSettingMapOutputWithContext(ctx context.Context) UserSettingMapOutput {
	return o
}

func (o UserSettingMapOutput) MapIndex(k pulumi.StringInput) UserSettingOutput {
	return pulumi.All(o, k).ApplyT(func(vs []interface{}) *UserSetting {
		return vs[0].(map[string]*UserSetting)[vs[1].(string)]
	}).(UserSettingOutput)
}

func init() {
	pulumi.RegisterInputType(reflect.TypeOf((*UserSettingInput)(nil)).Elem(), &UserSetting{})
	pulumi.RegisterInputType(reflect.TypeOf((*UserSettingArrayInput)(nil)).Elem(), UserSettingArray{})
	pulumi.RegisterInputType(reflect.TypeOf((*UserSettingMapInput)(nil)).Elem(), UserSettingMap{})
	pulumi.RegisterOutputType(UserSettingOutput{})
	pulumi.RegisterOutputType(UserSettingArrayOutput{})
	pulumi.RegisterOutputType(UserSettingMapOutput{})
}
