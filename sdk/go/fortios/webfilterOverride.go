// Code generated by the Pulumi Terraform Bridge (tfgen) Tool DO NOT EDIT.
// *** WARNING: Do not edit by hand unless you're certain you know what you are doing! ***

package fortios

import (
	"context"
	"reflect"

	"errors"
	"github.com/lubyou/pulumi-fortios/sdk/go/fortios/internal"
	"github.com/pulumi/pulumi/sdk/v3/go/pulumi"
)

type WebfilterOverride struct {
	pulumi.CustomResourceState

	Expires    pulumi.StringOutput    `pulumi:"expires"`
	Fosid      pulumi.IntOutput       `pulumi:"fosid"`
	Initiator  pulumi.StringOutput    `pulumi:"initiator"`
	Ip         pulumi.StringOutput    `pulumi:"ip"`
	Ip6        pulumi.StringOutput    `pulumi:"ip6"`
	NewProfile pulumi.StringOutput    `pulumi:"newProfile"`
	OldProfile pulumi.StringOutput    `pulumi:"oldProfile"`
	Scope      pulumi.StringOutput    `pulumi:"scope"`
	Status     pulumi.StringOutput    `pulumi:"status"`
	User       pulumi.StringOutput    `pulumi:"user"`
	UserGroup  pulumi.StringOutput    `pulumi:"userGroup"`
	Vdomparam  pulumi.StringPtrOutput `pulumi:"vdomparam"`
}

// NewWebfilterOverride registers a new resource with the given unique name, arguments, and options.
func NewWebfilterOverride(ctx *pulumi.Context,
	name string, args *WebfilterOverrideArgs, opts ...pulumi.ResourceOption) (*WebfilterOverride, error) {
	if args == nil {
		return nil, errors.New("missing one or more required arguments")
	}

	if args.Expires == nil {
		return nil, errors.New("invalid value for required argument 'Expires'")
	}
	if args.NewProfile == nil {
		return nil, errors.New("invalid value for required argument 'NewProfile'")
	}
	if args.OldProfile == nil {
		return nil, errors.New("invalid value for required argument 'OldProfile'")
	}
	if args.User == nil {
		return nil, errors.New("invalid value for required argument 'User'")
	}
	opts = internal.PkgResourceDefaultOpts(opts)
	var resource WebfilterOverride
	err := ctx.RegisterResource("fortios:index/webfilterOverride:WebfilterOverride", name, args, &resource, opts...)
	if err != nil {
		return nil, err
	}
	return &resource, nil
}

// GetWebfilterOverride gets an existing WebfilterOverride resource's state with the given name, ID, and optional
// state properties that are used to uniquely qualify the lookup (nil if not required).
func GetWebfilterOverride(ctx *pulumi.Context,
	name string, id pulumi.IDInput, state *WebfilterOverrideState, opts ...pulumi.ResourceOption) (*WebfilterOverride, error) {
	var resource WebfilterOverride
	err := ctx.ReadResource("fortios:index/webfilterOverride:WebfilterOverride", name, id, state, &resource, opts...)
	if err != nil {
		return nil, err
	}
	return &resource, nil
}

// Input properties used for looking up and filtering WebfilterOverride resources.
type webfilterOverrideState struct {
	Expires    *string `pulumi:"expires"`
	Fosid      *int    `pulumi:"fosid"`
	Initiator  *string `pulumi:"initiator"`
	Ip         *string `pulumi:"ip"`
	Ip6        *string `pulumi:"ip6"`
	NewProfile *string `pulumi:"newProfile"`
	OldProfile *string `pulumi:"oldProfile"`
	Scope      *string `pulumi:"scope"`
	Status     *string `pulumi:"status"`
	User       *string `pulumi:"user"`
	UserGroup  *string `pulumi:"userGroup"`
	Vdomparam  *string `pulumi:"vdomparam"`
}

type WebfilterOverrideState struct {
	Expires    pulumi.StringPtrInput
	Fosid      pulumi.IntPtrInput
	Initiator  pulumi.StringPtrInput
	Ip         pulumi.StringPtrInput
	Ip6        pulumi.StringPtrInput
	NewProfile pulumi.StringPtrInput
	OldProfile pulumi.StringPtrInput
	Scope      pulumi.StringPtrInput
	Status     pulumi.StringPtrInput
	User       pulumi.StringPtrInput
	UserGroup  pulumi.StringPtrInput
	Vdomparam  pulumi.StringPtrInput
}

func (WebfilterOverrideState) ElementType() reflect.Type {
	return reflect.TypeOf((*webfilterOverrideState)(nil)).Elem()
}

type webfilterOverrideArgs struct {
	Expires    string  `pulumi:"expires"`
	Fosid      *int    `pulumi:"fosid"`
	Initiator  *string `pulumi:"initiator"`
	Ip         *string `pulumi:"ip"`
	Ip6        *string `pulumi:"ip6"`
	NewProfile string  `pulumi:"newProfile"`
	OldProfile string  `pulumi:"oldProfile"`
	Scope      *string `pulumi:"scope"`
	Status     *string `pulumi:"status"`
	User       string  `pulumi:"user"`
	UserGroup  *string `pulumi:"userGroup"`
	Vdomparam  *string `pulumi:"vdomparam"`
}

// The set of arguments for constructing a WebfilterOverride resource.
type WebfilterOverrideArgs struct {
	Expires    pulumi.StringInput
	Fosid      pulumi.IntPtrInput
	Initiator  pulumi.StringPtrInput
	Ip         pulumi.StringPtrInput
	Ip6        pulumi.StringPtrInput
	NewProfile pulumi.StringInput
	OldProfile pulumi.StringInput
	Scope      pulumi.StringPtrInput
	Status     pulumi.StringPtrInput
	User       pulumi.StringInput
	UserGroup  pulumi.StringPtrInput
	Vdomparam  pulumi.StringPtrInput
}

func (WebfilterOverrideArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*webfilterOverrideArgs)(nil)).Elem()
}

type WebfilterOverrideInput interface {
	pulumi.Input

	ToWebfilterOverrideOutput() WebfilterOverrideOutput
	ToWebfilterOverrideOutputWithContext(ctx context.Context) WebfilterOverrideOutput
}

func (*WebfilterOverride) ElementType() reflect.Type {
	return reflect.TypeOf((**WebfilterOverride)(nil)).Elem()
}

func (i *WebfilterOverride) ToWebfilterOverrideOutput() WebfilterOverrideOutput {
	return i.ToWebfilterOverrideOutputWithContext(context.Background())
}

func (i *WebfilterOverride) ToWebfilterOverrideOutputWithContext(ctx context.Context) WebfilterOverrideOutput {
	return pulumi.ToOutputWithContext(ctx, i).(WebfilterOverrideOutput)
}

// WebfilterOverrideArrayInput is an input type that accepts WebfilterOverrideArray and WebfilterOverrideArrayOutput values.
// You can construct a concrete instance of `WebfilterOverrideArrayInput` via:
//
//	WebfilterOverrideArray{ WebfilterOverrideArgs{...} }
type WebfilterOverrideArrayInput interface {
	pulumi.Input

	ToWebfilterOverrideArrayOutput() WebfilterOverrideArrayOutput
	ToWebfilterOverrideArrayOutputWithContext(context.Context) WebfilterOverrideArrayOutput
}

type WebfilterOverrideArray []WebfilterOverrideInput

func (WebfilterOverrideArray) ElementType() reflect.Type {
	return reflect.TypeOf((*[]*WebfilterOverride)(nil)).Elem()
}

func (i WebfilterOverrideArray) ToWebfilterOverrideArrayOutput() WebfilterOverrideArrayOutput {
	return i.ToWebfilterOverrideArrayOutputWithContext(context.Background())
}

func (i WebfilterOverrideArray) ToWebfilterOverrideArrayOutputWithContext(ctx context.Context) WebfilterOverrideArrayOutput {
	return pulumi.ToOutputWithContext(ctx, i).(WebfilterOverrideArrayOutput)
}

// WebfilterOverrideMapInput is an input type that accepts WebfilterOverrideMap and WebfilterOverrideMapOutput values.
// You can construct a concrete instance of `WebfilterOverrideMapInput` via:
//
//	WebfilterOverrideMap{ "key": WebfilterOverrideArgs{...} }
type WebfilterOverrideMapInput interface {
	pulumi.Input

	ToWebfilterOverrideMapOutput() WebfilterOverrideMapOutput
	ToWebfilterOverrideMapOutputWithContext(context.Context) WebfilterOverrideMapOutput
}

type WebfilterOverrideMap map[string]WebfilterOverrideInput

func (WebfilterOverrideMap) ElementType() reflect.Type {
	return reflect.TypeOf((*map[string]*WebfilterOverride)(nil)).Elem()
}

func (i WebfilterOverrideMap) ToWebfilterOverrideMapOutput() WebfilterOverrideMapOutput {
	return i.ToWebfilterOverrideMapOutputWithContext(context.Background())
}

func (i WebfilterOverrideMap) ToWebfilterOverrideMapOutputWithContext(ctx context.Context) WebfilterOverrideMapOutput {
	return pulumi.ToOutputWithContext(ctx, i).(WebfilterOverrideMapOutput)
}

type WebfilterOverrideOutput struct{ *pulumi.OutputState }

func (WebfilterOverrideOutput) ElementType() reflect.Type {
	return reflect.TypeOf((**WebfilterOverride)(nil)).Elem()
}

func (o WebfilterOverrideOutput) ToWebfilterOverrideOutput() WebfilterOverrideOutput {
	return o
}

func (o WebfilterOverrideOutput) ToWebfilterOverrideOutputWithContext(ctx context.Context) WebfilterOverrideOutput {
	return o
}

func (o WebfilterOverrideOutput) Expires() pulumi.StringOutput {
	return o.ApplyT(func(v *WebfilterOverride) pulumi.StringOutput { return v.Expires }).(pulumi.StringOutput)
}

func (o WebfilterOverrideOutput) Fosid() pulumi.IntOutput {
	return o.ApplyT(func(v *WebfilterOverride) pulumi.IntOutput { return v.Fosid }).(pulumi.IntOutput)
}

func (o WebfilterOverrideOutput) Initiator() pulumi.StringOutput {
	return o.ApplyT(func(v *WebfilterOverride) pulumi.StringOutput { return v.Initiator }).(pulumi.StringOutput)
}

func (o WebfilterOverrideOutput) Ip() pulumi.StringOutput {
	return o.ApplyT(func(v *WebfilterOverride) pulumi.StringOutput { return v.Ip }).(pulumi.StringOutput)
}

func (o WebfilterOverrideOutput) Ip6() pulumi.StringOutput {
	return o.ApplyT(func(v *WebfilterOverride) pulumi.StringOutput { return v.Ip6 }).(pulumi.StringOutput)
}

func (o WebfilterOverrideOutput) NewProfile() pulumi.StringOutput {
	return o.ApplyT(func(v *WebfilterOverride) pulumi.StringOutput { return v.NewProfile }).(pulumi.StringOutput)
}

func (o WebfilterOverrideOutput) OldProfile() pulumi.StringOutput {
	return o.ApplyT(func(v *WebfilterOverride) pulumi.StringOutput { return v.OldProfile }).(pulumi.StringOutput)
}

func (o WebfilterOverrideOutput) Scope() pulumi.StringOutput {
	return o.ApplyT(func(v *WebfilterOverride) pulumi.StringOutput { return v.Scope }).(pulumi.StringOutput)
}

func (o WebfilterOverrideOutput) Status() pulumi.StringOutput {
	return o.ApplyT(func(v *WebfilterOverride) pulumi.StringOutput { return v.Status }).(pulumi.StringOutput)
}

func (o WebfilterOverrideOutput) User() pulumi.StringOutput {
	return o.ApplyT(func(v *WebfilterOverride) pulumi.StringOutput { return v.User }).(pulumi.StringOutput)
}

func (o WebfilterOverrideOutput) UserGroup() pulumi.StringOutput {
	return o.ApplyT(func(v *WebfilterOverride) pulumi.StringOutput { return v.UserGroup }).(pulumi.StringOutput)
}

func (o WebfilterOverrideOutput) Vdomparam() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *WebfilterOverride) pulumi.StringPtrOutput { return v.Vdomparam }).(pulumi.StringPtrOutput)
}

type WebfilterOverrideArrayOutput struct{ *pulumi.OutputState }

func (WebfilterOverrideArrayOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*[]*WebfilterOverride)(nil)).Elem()
}

func (o WebfilterOverrideArrayOutput) ToWebfilterOverrideArrayOutput() WebfilterOverrideArrayOutput {
	return o
}

func (o WebfilterOverrideArrayOutput) ToWebfilterOverrideArrayOutputWithContext(ctx context.Context) WebfilterOverrideArrayOutput {
	return o
}

func (o WebfilterOverrideArrayOutput) Index(i pulumi.IntInput) WebfilterOverrideOutput {
	return pulumi.All(o, i).ApplyT(func(vs []interface{}) *WebfilterOverride {
		return vs[0].([]*WebfilterOverride)[vs[1].(int)]
	}).(WebfilterOverrideOutput)
}

type WebfilterOverrideMapOutput struct{ *pulumi.OutputState }

func (WebfilterOverrideMapOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*map[string]*WebfilterOverride)(nil)).Elem()
}

func (o WebfilterOverrideMapOutput) ToWebfilterOverrideMapOutput() WebfilterOverrideMapOutput {
	return o
}

func (o WebfilterOverrideMapOutput) ToWebfilterOverrideMapOutputWithContext(ctx context.Context) WebfilterOverrideMapOutput {
	return o
}

func (o WebfilterOverrideMapOutput) MapIndex(k pulumi.StringInput) WebfilterOverrideOutput {
	return pulumi.All(o, k).ApplyT(func(vs []interface{}) *WebfilterOverride {
		return vs[0].(map[string]*WebfilterOverride)[vs[1].(string)]
	}).(WebfilterOverrideOutput)
}

func init() {
	pulumi.RegisterInputType(reflect.TypeOf((*WebfilterOverrideInput)(nil)).Elem(), &WebfilterOverride{})
	pulumi.RegisterInputType(reflect.TypeOf((*WebfilterOverrideArrayInput)(nil)).Elem(), WebfilterOverrideArray{})
	pulumi.RegisterInputType(reflect.TypeOf((*WebfilterOverrideMapInput)(nil)).Elem(), WebfilterOverrideMap{})
	pulumi.RegisterOutputType(WebfilterOverrideOutput{})
	pulumi.RegisterOutputType(WebfilterOverrideArrayOutput{})
	pulumi.RegisterOutputType(WebfilterOverrideMapOutput{})
}
