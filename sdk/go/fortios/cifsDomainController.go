// Code generated by the Pulumi Terraform Bridge (tfgen) Tool DO NOT EDIT.
// *** WARNING: Do not edit by hand unless you're certain you know what you are doing! ***

package fortios

import (
	"context"
	"reflect"

	"github.com/lubyou/pulumi-fortios/sdk/go/fortios/internal"
	"github.com/pulumi/pulumi/sdk/v3/go/pulumi"
	"github.com/pulumi/pulumi/sdk/v3/go/pulumix"
)

type CifsDomainController struct {
	pulumi.CustomResourceState

	DomainName pulumi.StringOutput    `pulumi:"domainName"`
	Ip         pulumi.StringOutput    `pulumi:"ip"`
	Ip6        pulumi.StringOutput    `pulumi:"ip6"`
	Password   pulumi.StringPtrOutput `pulumi:"password"`
	Port       pulumi.IntOutput       `pulumi:"port"`
	ServerName pulumi.StringOutput    `pulumi:"serverName"`
	Username   pulumi.StringOutput    `pulumi:"username"`
	Vdomparam  pulumi.StringPtrOutput `pulumi:"vdomparam"`
}

// NewCifsDomainController registers a new resource with the given unique name, arguments, and options.
func NewCifsDomainController(ctx *pulumi.Context,
	name string, args *CifsDomainControllerArgs, opts ...pulumi.ResourceOption) (*CifsDomainController, error) {
	if args == nil {
		args = &CifsDomainControllerArgs{}
	}

	if args.Password != nil {
		args.Password = pulumi.ToSecret(args.Password).(pulumi.StringPtrInput)
	}
	secrets := pulumi.AdditionalSecretOutputs([]string{
		"password",
	})
	opts = append(opts, secrets)
	opts = internal.PkgResourceDefaultOpts(opts)
	var resource CifsDomainController
	err := ctx.RegisterResource("fortios:index/cifsDomainController:CifsDomainController", name, args, &resource, opts...)
	if err != nil {
		return nil, err
	}
	return &resource, nil
}

// GetCifsDomainController gets an existing CifsDomainController resource's state with the given name, ID, and optional
// state properties that are used to uniquely qualify the lookup (nil if not required).
func GetCifsDomainController(ctx *pulumi.Context,
	name string, id pulumi.IDInput, state *CifsDomainControllerState, opts ...pulumi.ResourceOption) (*CifsDomainController, error) {
	var resource CifsDomainController
	err := ctx.ReadResource("fortios:index/cifsDomainController:CifsDomainController", name, id, state, &resource, opts...)
	if err != nil {
		return nil, err
	}
	return &resource, nil
}

// Input properties used for looking up and filtering CifsDomainController resources.
type cifsDomainControllerState struct {
	DomainName *string `pulumi:"domainName"`
	Ip         *string `pulumi:"ip"`
	Ip6        *string `pulumi:"ip6"`
	Password   *string `pulumi:"password"`
	Port       *int    `pulumi:"port"`
	ServerName *string `pulumi:"serverName"`
	Username   *string `pulumi:"username"`
	Vdomparam  *string `pulumi:"vdomparam"`
}

type CifsDomainControllerState struct {
	DomainName pulumi.StringPtrInput
	Ip         pulumi.StringPtrInput
	Ip6        pulumi.StringPtrInput
	Password   pulumi.StringPtrInput
	Port       pulumi.IntPtrInput
	ServerName pulumi.StringPtrInput
	Username   pulumi.StringPtrInput
	Vdomparam  pulumi.StringPtrInput
}

func (CifsDomainControllerState) ElementType() reflect.Type {
	return reflect.TypeOf((*cifsDomainControllerState)(nil)).Elem()
}

type cifsDomainControllerArgs struct {
	DomainName *string `pulumi:"domainName"`
	Ip         *string `pulumi:"ip"`
	Ip6        *string `pulumi:"ip6"`
	Password   *string `pulumi:"password"`
	Port       *int    `pulumi:"port"`
	ServerName *string `pulumi:"serverName"`
	Username   *string `pulumi:"username"`
	Vdomparam  *string `pulumi:"vdomparam"`
}

// The set of arguments for constructing a CifsDomainController resource.
type CifsDomainControllerArgs struct {
	DomainName pulumi.StringPtrInput
	Ip         pulumi.StringPtrInput
	Ip6        pulumi.StringPtrInput
	Password   pulumi.StringPtrInput
	Port       pulumi.IntPtrInput
	ServerName pulumi.StringPtrInput
	Username   pulumi.StringPtrInput
	Vdomparam  pulumi.StringPtrInput
}

func (CifsDomainControllerArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*cifsDomainControllerArgs)(nil)).Elem()
}

type CifsDomainControllerInput interface {
	pulumi.Input

	ToCifsDomainControllerOutput() CifsDomainControllerOutput
	ToCifsDomainControllerOutputWithContext(ctx context.Context) CifsDomainControllerOutput
}

func (*CifsDomainController) ElementType() reflect.Type {
	return reflect.TypeOf((**CifsDomainController)(nil)).Elem()
}

func (i *CifsDomainController) ToCifsDomainControllerOutput() CifsDomainControllerOutput {
	return i.ToCifsDomainControllerOutputWithContext(context.Background())
}

func (i *CifsDomainController) ToCifsDomainControllerOutputWithContext(ctx context.Context) CifsDomainControllerOutput {
	return pulumi.ToOutputWithContext(ctx, i).(CifsDomainControllerOutput)
}

func (i *CifsDomainController) ToOutput(ctx context.Context) pulumix.Output[*CifsDomainController] {
	return pulumix.Output[*CifsDomainController]{
		OutputState: i.ToCifsDomainControllerOutputWithContext(ctx).OutputState,
	}
}

// CifsDomainControllerArrayInput is an input type that accepts CifsDomainControllerArray and CifsDomainControllerArrayOutput values.
// You can construct a concrete instance of `CifsDomainControllerArrayInput` via:
//
//	CifsDomainControllerArray{ CifsDomainControllerArgs{...} }
type CifsDomainControllerArrayInput interface {
	pulumi.Input

	ToCifsDomainControllerArrayOutput() CifsDomainControllerArrayOutput
	ToCifsDomainControllerArrayOutputWithContext(context.Context) CifsDomainControllerArrayOutput
}

type CifsDomainControllerArray []CifsDomainControllerInput

func (CifsDomainControllerArray) ElementType() reflect.Type {
	return reflect.TypeOf((*[]*CifsDomainController)(nil)).Elem()
}

func (i CifsDomainControllerArray) ToCifsDomainControllerArrayOutput() CifsDomainControllerArrayOutput {
	return i.ToCifsDomainControllerArrayOutputWithContext(context.Background())
}

func (i CifsDomainControllerArray) ToCifsDomainControllerArrayOutputWithContext(ctx context.Context) CifsDomainControllerArrayOutput {
	return pulumi.ToOutputWithContext(ctx, i).(CifsDomainControllerArrayOutput)
}

func (i CifsDomainControllerArray) ToOutput(ctx context.Context) pulumix.Output[[]*CifsDomainController] {
	return pulumix.Output[[]*CifsDomainController]{
		OutputState: i.ToCifsDomainControllerArrayOutputWithContext(ctx).OutputState,
	}
}

// CifsDomainControllerMapInput is an input type that accepts CifsDomainControllerMap and CifsDomainControllerMapOutput values.
// You can construct a concrete instance of `CifsDomainControllerMapInput` via:
//
//	CifsDomainControllerMap{ "key": CifsDomainControllerArgs{...} }
type CifsDomainControllerMapInput interface {
	pulumi.Input

	ToCifsDomainControllerMapOutput() CifsDomainControllerMapOutput
	ToCifsDomainControllerMapOutputWithContext(context.Context) CifsDomainControllerMapOutput
}

type CifsDomainControllerMap map[string]CifsDomainControllerInput

func (CifsDomainControllerMap) ElementType() reflect.Type {
	return reflect.TypeOf((*map[string]*CifsDomainController)(nil)).Elem()
}

func (i CifsDomainControllerMap) ToCifsDomainControllerMapOutput() CifsDomainControllerMapOutput {
	return i.ToCifsDomainControllerMapOutputWithContext(context.Background())
}

func (i CifsDomainControllerMap) ToCifsDomainControllerMapOutputWithContext(ctx context.Context) CifsDomainControllerMapOutput {
	return pulumi.ToOutputWithContext(ctx, i).(CifsDomainControllerMapOutput)
}

func (i CifsDomainControllerMap) ToOutput(ctx context.Context) pulumix.Output[map[string]*CifsDomainController] {
	return pulumix.Output[map[string]*CifsDomainController]{
		OutputState: i.ToCifsDomainControllerMapOutputWithContext(ctx).OutputState,
	}
}

type CifsDomainControllerOutput struct{ *pulumi.OutputState }

func (CifsDomainControllerOutput) ElementType() reflect.Type {
	return reflect.TypeOf((**CifsDomainController)(nil)).Elem()
}

func (o CifsDomainControllerOutput) ToCifsDomainControllerOutput() CifsDomainControllerOutput {
	return o
}

func (o CifsDomainControllerOutput) ToCifsDomainControllerOutputWithContext(ctx context.Context) CifsDomainControllerOutput {
	return o
}

func (o CifsDomainControllerOutput) ToOutput(ctx context.Context) pulumix.Output[*CifsDomainController] {
	return pulumix.Output[*CifsDomainController]{
		OutputState: o.OutputState,
	}
}

func (o CifsDomainControllerOutput) DomainName() pulumi.StringOutput {
	return o.ApplyT(func(v *CifsDomainController) pulumi.StringOutput { return v.DomainName }).(pulumi.StringOutput)
}

func (o CifsDomainControllerOutput) Ip() pulumi.StringOutput {
	return o.ApplyT(func(v *CifsDomainController) pulumi.StringOutput { return v.Ip }).(pulumi.StringOutput)
}

func (o CifsDomainControllerOutput) Ip6() pulumi.StringOutput {
	return o.ApplyT(func(v *CifsDomainController) pulumi.StringOutput { return v.Ip6 }).(pulumi.StringOutput)
}

func (o CifsDomainControllerOutput) Password() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *CifsDomainController) pulumi.StringPtrOutput { return v.Password }).(pulumi.StringPtrOutput)
}

func (o CifsDomainControllerOutput) Port() pulumi.IntOutput {
	return o.ApplyT(func(v *CifsDomainController) pulumi.IntOutput { return v.Port }).(pulumi.IntOutput)
}

func (o CifsDomainControllerOutput) ServerName() pulumi.StringOutput {
	return o.ApplyT(func(v *CifsDomainController) pulumi.StringOutput { return v.ServerName }).(pulumi.StringOutput)
}

func (o CifsDomainControllerOutput) Username() pulumi.StringOutput {
	return o.ApplyT(func(v *CifsDomainController) pulumi.StringOutput { return v.Username }).(pulumi.StringOutput)
}

func (o CifsDomainControllerOutput) Vdomparam() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *CifsDomainController) pulumi.StringPtrOutput { return v.Vdomparam }).(pulumi.StringPtrOutput)
}

type CifsDomainControllerArrayOutput struct{ *pulumi.OutputState }

func (CifsDomainControllerArrayOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*[]*CifsDomainController)(nil)).Elem()
}

func (o CifsDomainControllerArrayOutput) ToCifsDomainControllerArrayOutput() CifsDomainControllerArrayOutput {
	return o
}

func (o CifsDomainControllerArrayOutput) ToCifsDomainControllerArrayOutputWithContext(ctx context.Context) CifsDomainControllerArrayOutput {
	return o
}

func (o CifsDomainControllerArrayOutput) ToOutput(ctx context.Context) pulumix.Output[[]*CifsDomainController] {
	return pulumix.Output[[]*CifsDomainController]{
		OutputState: o.OutputState,
	}
}

func (o CifsDomainControllerArrayOutput) Index(i pulumi.IntInput) CifsDomainControllerOutput {
	return pulumi.All(o, i).ApplyT(func(vs []interface{}) *CifsDomainController {
		return vs[0].([]*CifsDomainController)[vs[1].(int)]
	}).(CifsDomainControllerOutput)
}

type CifsDomainControllerMapOutput struct{ *pulumi.OutputState }

func (CifsDomainControllerMapOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*map[string]*CifsDomainController)(nil)).Elem()
}

func (o CifsDomainControllerMapOutput) ToCifsDomainControllerMapOutput() CifsDomainControllerMapOutput {
	return o
}

func (o CifsDomainControllerMapOutput) ToCifsDomainControllerMapOutputWithContext(ctx context.Context) CifsDomainControllerMapOutput {
	return o
}

func (o CifsDomainControllerMapOutput) ToOutput(ctx context.Context) pulumix.Output[map[string]*CifsDomainController] {
	return pulumix.Output[map[string]*CifsDomainController]{
		OutputState: o.OutputState,
	}
}

func (o CifsDomainControllerMapOutput) MapIndex(k pulumi.StringInput) CifsDomainControllerOutput {
	return pulumi.All(o, k).ApplyT(func(vs []interface{}) *CifsDomainController {
		return vs[0].(map[string]*CifsDomainController)[vs[1].(string)]
	}).(CifsDomainControllerOutput)
}

func init() {
	pulumi.RegisterInputType(reflect.TypeOf((*CifsDomainControllerInput)(nil)).Elem(), &CifsDomainController{})
	pulumi.RegisterInputType(reflect.TypeOf((*CifsDomainControllerArrayInput)(nil)).Elem(), CifsDomainControllerArray{})
	pulumi.RegisterInputType(reflect.TypeOf((*CifsDomainControllerMapInput)(nil)).Elem(), CifsDomainControllerMap{})
	pulumi.RegisterOutputType(CifsDomainControllerOutput{})
	pulumi.RegisterOutputType(CifsDomainControllerArrayOutput{})
	pulumi.RegisterOutputType(CifsDomainControllerMapOutput{})
}
