// *** WARNING: this file was generated by the Pulumi Terraform Bridge (tfgen) Tool. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

package fortios

import (
	"context"
	"reflect"

	"github.com/pulumi/pulumi/sdk/v3/go/pulumi"
)

// Configure FortiSwitch SNMP v3 users globally.
//
// ## Import
//
// SwitchController SnmpUser can be imported using any of these accepted formats$ export "FORTIOS_IMPORT_TABLE"="true"
//
// ```sh
//  $ pulumi import fortios:index/switchControllerSnmpUser:SwitchControllerSnmpUser labelname {{name}}
// ```
//
//  $ unset "FORTIOS_IMPORT_TABLE"
type SwitchControllerSnmpUser struct {
	pulumi.CustomResourceState

	// Authentication protocol. Valid values: `md5`, `sha`.
	AuthProto pulumi.StringOutput `pulumi:"authProto"`
	// Password for authentication protocol.
	AuthPwd pulumi.StringPtrOutput `pulumi:"authPwd"`
	// SNMP user name.
	Name pulumi.StringOutput `pulumi:"name"`
	// Privacy (encryption) protocol. Valid values: `aes`, `des`.
	PrivProto pulumi.StringOutput `pulumi:"privProto"`
	// Password for privacy (encryption) protocol.
	PrivPwd pulumi.StringPtrOutput `pulumi:"privPwd"`
	// Enable/disable SNMP queries for this user. Valid values: `disable`, `enable`.
	Queries pulumi.StringOutput `pulumi:"queries"`
	// SNMPv3 query port (default = 161).
	QueryPort pulumi.IntOutput `pulumi:"queryPort"`
	// Security level for message authentication and encryption. Valid values: `no-auth-no-priv`, `auth-no-priv`, `auth-priv`.
	SecurityLevel pulumi.StringOutput `pulumi:"securityLevel"`
	// Specifies the vdom to which the resource will be applied when the FortiGate unit is running in VDOM mode. Only one vdom can be specified. If you want to inherit the vdom configuration of the provider, please do not set this parameter.
	Vdomparam pulumi.StringPtrOutput `pulumi:"vdomparam"`
}

// NewSwitchControllerSnmpUser registers a new resource with the given unique name, arguments, and options.
func NewSwitchControllerSnmpUser(ctx *pulumi.Context,
	name string, args *SwitchControllerSnmpUserArgs, opts ...pulumi.ResourceOption) (*SwitchControllerSnmpUser, error) {
	if args == nil {
		args = &SwitchControllerSnmpUserArgs{}
	}

	var resource SwitchControllerSnmpUser
	err := ctx.RegisterResource("fortios:index/switchControllerSnmpUser:SwitchControllerSnmpUser", name, args, &resource, opts...)
	if err != nil {
		return nil, err
	}
	return &resource, nil
}

// GetSwitchControllerSnmpUser gets an existing SwitchControllerSnmpUser resource's state with the given name, ID, and optional
// state properties that are used to uniquely qualify the lookup (nil if not required).
func GetSwitchControllerSnmpUser(ctx *pulumi.Context,
	name string, id pulumi.IDInput, state *SwitchControllerSnmpUserState, opts ...pulumi.ResourceOption) (*SwitchControllerSnmpUser, error) {
	var resource SwitchControllerSnmpUser
	err := ctx.ReadResource("fortios:index/switchControllerSnmpUser:SwitchControllerSnmpUser", name, id, state, &resource, opts...)
	if err != nil {
		return nil, err
	}
	return &resource, nil
}

// Input properties used for looking up and filtering SwitchControllerSnmpUser resources.
type switchControllerSnmpUserState struct {
	// Authentication protocol. Valid values: `md5`, `sha`.
	AuthProto *string `pulumi:"authProto"`
	// Password for authentication protocol.
	AuthPwd *string `pulumi:"authPwd"`
	// SNMP user name.
	Name *string `pulumi:"name"`
	// Privacy (encryption) protocol. Valid values: `aes`, `des`.
	PrivProto *string `pulumi:"privProto"`
	// Password for privacy (encryption) protocol.
	PrivPwd *string `pulumi:"privPwd"`
	// Enable/disable SNMP queries for this user. Valid values: `disable`, `enable`.
	Queries *string `pulumi:"queries"`
	// SNMPv3 query port (default = 161).
	QueryPort *int `pulumi:"queryPort"`
	// Security level for message authentication and encryption. Valid values: `no-auth-no-priv`, `auth-no-priv`, `auth-priv`.
	SecurityLevel *string `pulumi:"securityLevel"`
	// Specifies the vdom to which the resource will be applied when the FortiGate unit is running in VDOM mode. Only one vdom can be specified. If you want to inherit the vdom configuration of the provider, please do not set this parameter.
	Vdomparam *string `pulumi:"vdomparam"`
}

type SwitchControllerSnmpUserState struct {
	// Authentication protocol. Valid values: `md5`, `sha`.
	AuthProto pulumi.StringPtrInput
	// Password for authentication protocol.
	AuthPwd pulumi.StringPtrInput
	// SNMP user name.
	Name pulumi.StringPtrInput
	// Privacy (encryption) protocol. Valid values: `aes`, `des`.
	PrivProto pulumi.StringPtrInput
	// Password for privacy (encryption) protocol.
	PrivPwd pulumi.StringPtrInput
	// Enable/disable SNMP queries for this user. Valid values: `disable`, `enable`.
	Queries pulumi.StringPtrInput
	// SNMPv3 query port (default = 161).
	QueryPort pulumi.IntPtrInput
	// Security level for message authentication and encryption. Valid values: `no-auth-no-priv`, `auth-no-priv`, `auth-priv`.
	SecurityLevel pulumi.StringPtrInput
	// Specifies the vdom to which the resource will be applied when the FortiGate unit is running in VDOM mode. Only one vdom can be specified. If you want to inherit the vdom configuration of the provider, please do not set this parameter.
	Vdomparam pulumi.StringPtrInput
}

func (SwitchControllerSnmpUserState) ElementType() reflect.Type {
	return reflect.TypeOf((*switchControllerSnmpUserState)(nil)).Elem()
}

type switchControllerSnmpUserArgs struct {
	// Authentication protocol. Valid values: `md5`, `sha`.
	AuthProto *string `pulumi:"authProto"`
	// Password for authentication protocol.
	AuthPwd *string `pulumi:"authPwd"`
	// SNMP user name.
	Name *string `pulumi:"name"`
	// Privacy (encryption) protocol. Valid values: `aes`, `des`.
	PrivProto *string `pulumi:"privProto"`
	// Password for privacy (encryption) protocol.
	PrivPwd *string `pulumi:"privPwd"`
	// Enable/disable SNMP queries for this user. Valid values: `disable`, `enable`.
	Queries *string `pulumi:"queries"`
	// SNMPv3 query port (default = 161).
	QueryPort *int `pulumi:"queryPort"`
	// Security level for message authentication and encryption. Valid values: `no-auth-no-priv`, `auth-no-priv`, `auth-priv`.
	SecurityLevel *string `pulumi:"securityLevel"`
	// Specifies the vdom to which the resource will be applied when the FortiGate unit is running in VDOM mode. Only one vdom can be specified. If you want to inherit the vdom configuration of the provider, please do not set this parameter.
	Vdomparam *string `pulumi:"vdomparam"`
}

// The set of arguments for constructing a SwitchControllerSnmpUser resource.
type SwitchControllerSnmpUserArgs struct {
	// Authentication protocol. Valid values: `md5`, `sha`.
	AuthProto pulumi.StringPtrInput
	// Password for authentication protocol.
	AuthPwd pulumi.StringPtrInput
	// SNMP user name.
	Name pulumi.StringPtrInput
	// Privacy (encryption) protocol. Valid values: `aes`, `des`.
	PrivProto pulumi.StringPtrInput
	// Password for privacy (encryption) protocol.
	PrivPwd pulumi.StringPtrInput
	// Enable/disable SNMP queries for this user. Valid values: `disable`, `enable`.
	Queries pulumi.StringPtrInput
	// SNMPv3 query port (default = 161).
	QueryPort pulumi.IntPtrInput
	// Security level for message authentication and encryption. Valid values: `no-auth-no-priv`, `auth-no-priv`, `auth-priv`.
	SecurityLevel pulumi.StringPtrInput
	// Specifies the vdom to which the resource will be applied when the FortiGate unit is running in VDOM mode. Only one vdom can be specified. If you want to inherit the vdom configuration of the provider, please do not set this parameter.
	Vdomparam pulumi.StringPtrInput
}

func (SwitchControllerSnmpUserArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*switchControllerSnmpUserArgs)(nil)).Elem()
}

type SwitchControllerSnmpUserInput interface {
	pulumi.Input

	ToSwitchControllerSnmpUserOutput() SwitchControllerSnmpUserOutput
	ToSwitchControllerSnmpUserOutputWithContext(ctx context.Context) SwitchControllerSnmpUserOutput
}

func (*SwitchControllerSnmpUser) ElementType() reflect.Type {
	return reflect.TypeOf((*SwitchControllerSnmpUser)(nil))
}

func (i *SwitchControllerSnmpUser) ToSwitchControllerSnmpUserOutput() SwitchControllerSnmpUserOutput {
	return i.ToSwitchControllerSnmpUserOutputWithContext(context.Background())
}

func (i *SwitchControllerSnmpUser) ToSwitchControllerSnmpUserOutputWithContext(ctx context.Context) SwitchControllerSnmpUserOutput {
	return pulumi.ToOutputWithContext(ctx, i).(SwitchControllerSnmpUserOutput)
}

func (i *SwitchControllerSnmpUser) ToSwitchControllerSnmpUserPtrOutput() SwitchControllerSnmpUserPtrOutput {
	return i.ToSwitchControllerSnmpUserPtrOutputWithContext(context.Background())
}

func (i *SwitchControllerSnmpUser) ToSwitchControllerSnmpUserPtrOutputWithContext(ctx context.Context) SwitchControllerSnmpUserPtrOutput {
	return pulumi.ToOutputWithContext(ctx, i).(SwitchControllerSnmpUserPtrOutput)
}

type SwitchControllerSnmpUserPtrInput interface {
	pulumi.Input

	ToSwitchControllerSnmpUserPtrOutput() SwitchControllerSnmpUserPtrOutput
	ToSwitchControllerSnmpUserPtrOutputWithContext(ctx context.Context) SwitchControllerSnmpUserPtrOutput
}

type switchControllerSnmpUserPtrType SwitchControllerSnmpUserArgs

func (*switchControllerSnmpUserPtrType) ElementType() reflect.Type {
	return reflect.TypeOf((**SwitchControllerSnmpUser)(nil))
}

func (i *switchControllerSnmpUserPtrType) ToSwitchControllerSnmpUserPtrOutput() SwitchControllerSnmpUserPtrOutput {
	return i.ToSwitchControllerSnmpUserPtrOutputWithContext(context.Background())
}

func (i *switchControllerSnmpUserPtrType) ToSwitchControllerSnmpUserPtrOutputWithContext(ctx context.Context) SwitchControllerSnmpUserPtrOutput {
	return pulumi.ToOutputWithContext(ctx, i).(SwitchControllerSnmpUserPtrOutput)
}

// SwitchControllerSnmpUserArrayInput is an input type that accepts SwitchControllerSnmpUserArray and SwitchControllerSnmpUserArrayOutput values.
// You can construct a concrete instance of `SwitchControllerSnmpUserArrayInput` via:
//
//          SwitchControllerSnmpUserArray{ SwitchControllerSnmpUserArgs{...} }
type SwitchControllerSnmpUserArrayInput interface {
	pulumi.Input

	ToSwitchControllerSnmpUserArrayOutput() SwitchControllerSnmpUserArrayOutput
	ToSwitchControllerSnmpUserArrayOutputWithContext(context.Context) SwitchControllerSnmpUserArrayOutput
}

type SwitchControllerSnmpUserArray []SwitchControllerSnmpUserInput

func (SwitchControllerSnmpUserArray) ElementType() reflect.Type {
	return reflect.TypeOf(([]*SwitchControllerSnmpUser)(nil))
}

func (i SwitchControllerSnmpUserArray) ToSwitchControllerSnmpUserArrayOutput() SwitchControllerSnmpUserArrayOutput {
	return i.ToSwitchControllerSnmpUserArrayOutputWithContext(context.Background())
}

func (i SwitchControllerSnmpUserArray) ToSwitchControllerSnmpUserArrayOutputWithContext(ctx context.Context) SwitchControllerSnmpUserArrayOutput {
	return pulumi.ToOutputWithContext(ctx, i).(SwitchControllerSnmpUserArrayOutput)
}

// SwitchControllerSnmpUserMapInput is an input type that accepts SwitchControllerSnmpUserMap and SwitchControllerSnmpUserMapOutput values.
// You can construct a concrete instance of `SwitchControllerSnmpUserMapInput` via:
//
//          SwitchControllerSnmpUserMap{ "key": SwitchControllerSnmpUserArgs{...} }
type SwitchControllerSnmpUserMapInput interface {
	pulumi.Input

	ToSwitchControllerSnmpUserMapOutput() SwitchControllerSnmpUserMapOutput
	ToSwitchControllerSnmpUserMapOutputWithContext(context.Context) SwitchControllerSnmpUserMapOutput
}

type SwitchControllerSnmpUserMap map[string]SwitchControllerSnmpUserInput

func (SwitchControllerSnmpUserMap) ElementType() reflect.Type {
	return reflect.TypeOf((map[string]*SwitchControllerSnmpUser)(nil))
}

func (i SwitchControllerSnmpUserMap) ToSwitchControllerSnmpUserMapOutput() SwitchControllerSnmpUserMapOutput {
	return i.ToSwitchControllerSnmpUserMapOutputWithContext(context.Background())
}

func (i SwitchControllerSnmpUserMap) ToSwitchControllerSnmpUserMapOutputWithContext(ctx context.Context) SwitchControllerSnmpUserMapOutput {
	return pulumi.ToOutputWithContext(ctx, i).(SwitchControllerSnmpUserMapOutput)
}

type SwitchControllerSnmpUserOutput struct {
	*pulumi.OutputState
}

func (SwitchControllerSnmpUserOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*SwitchControllerSnmpUser)(nil))
}

func (o SwitchControllerSnmpUserOutput) ToSwitchControllerSnmpUserOutput() SwitchControllerSnmpUserOutput {
	return o
}

func (o SwitchControllerSnmpUserOutput) ToSwitchControllerSnmpUserOutputWithContext(ctx context.Context) SwitchControllerSnmpUserOutput {
	return o
}

func (o SwitchControllerSnmpUserOutput) ToSwitchControllerSnmpUserPtrOutput() SwitchControllerSnmpUserPtrOutput {
	return o.ToSwitchControllerSnmpUserPtrOutputWithContext(context.Background())
}

func (o SwitchControllerSnmpUserOutput) ToSwitchControllerSnmpUserPtrOutputWithContext(ctx context.Context) SwitchControllerSnmpUserPtrOutput {
	return o.ApplyT(func(v SwitchControllerSnmpUser) *SwitchControllerSnmpUser {
		return &v
	}).(SwitchControllerSnmpUserPtrOutput)
}

type SwitchControllerSnmpUserPtrOutput struct {
	*pulumi.OutputState
}

func (SwitchControllerSnmpUserPtrOutput) ElementType() reflect.Type {
	return reflect.TypeOf((**SwitchControllerSnmpUser)(nil))
}

func (o SwitchControllerSnmpUserPtrOutput) ToSwitchControllerSnmpUserPtrOutput() SwitchControllerSnmpUserPtrOutput {
	return o
}

func (o SwitchControllerSnmpUserPtrOutput) ToSwitchControllerSnmpUserPtrOutputWithContext(ctx context.Context) SwitchControllerSnmpUserPtrOutput {
	return o
}

type SwitchControllerSnmpUserArrayOutput struct{ *pulumi.OutputState }

func (SwitchControllerSnmpUserArrayOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*[]SwitchControllerSnmpUser)(nil))
}

func (o SwitchControllerSnmpUserArrayOutput) ToSwitchControllerSnmpUserArrayOutput() SwitchControllerSnmpUserArrayOutput {
	return o
}

func (o SwitchControllerSnmpUserArrayOutput) ToSwitchControllerSnmpUserArrayOutputWithContext(ctx context.Context) SwitchControllerSnmpUserArrayOutput {
	return o
}

func (o SwitchControllerSnmpUserArrayOutput) Index(i pulumi.IntInput) SwitchControllerSnmpUserOutput {
	return pulumi.All(o, i).ApplyT(func(vs []interface{}) SwitchControllerSnmpUser {
		return vs[0].([]SwitchControllerSnmpUser)[vs[1].(int)]
	}).(SwitchControllerSnmpUserOutput)
}

type SwitchControllerSnmpUserMapOutput struct{ *pulumi.OutputState }

func (SwitchControllerSnmpUserMapOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*map[string]SwitchControllerSnmpUser)(nil))
}

func (o SwitchControllerSnmpUserMapOutput) ToSwitchControllerSnmpUserMapOutput() SwitchControllerSnmpUserMapOutput {
	return o
}

func (o SwitchControllerSnmpUserMapOutput) ToSwitchControllerSnmpUserMapOutputWithContext(ctx context.Context) SwitchControllerSnmpUserMapOutput {
	return o
}

func (o SwitchControllerSnmpUserMapOutput) MapIndex(k pulumi.StringInput) SwitchControllerSnmpUserOutput {
	return pulumi.All(o, k).ApplyT(func(vs []interface{}) SwitchControllerSnmpUser {
		return vs[0].(map[string]SwitchControllerSnmpUser)[vs[1].(string)]
	}).(SwitchControllerSnmpUserOutput)
}

func init() {
	pulumi.RegisterOutputType(SwitchControllerSnmpUserOutput{})
	pulumi.RegisterOutputType(SwitchControllerSnmpUserPtrOutput{})
	pulumi.RegisterOutputType(SwitchControllerSnmpUserArrayOutput{})
	pulumi.RegisterOutputType(SwitchControllerSnmpUserMapOutput{})
}
