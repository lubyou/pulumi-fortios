// Code generated by the Pulumi Terraform Bridge (tfgen) Tool DO NOT EDIT.
// *** WARNING: Do not edit by hand unless you're certain you know what you are doing! ***

package fortios

import (
	"context"
	"reflect"

	"github.com/lubyou/pulumi-fortios/sdk/go/fortios/internal"
	"github.com/pulumi/pulumi/sdk/v3/go/pulumi"
)

type SwitchControllerSnmpUser struct {
	pulumi.CustomResourceState

	AuthProto     pulumi.StringOutput    `pulumi:"authProto"`
	AuthPwd       pulumi.StringPtrOutput `pulumi:"authPwd"`
	Name          pulumi.StringOutput    `pulumi:"name"`
	PrivProto     pulumi.StringOutput    `pulumi:"privProto"`
	PrivPwd       pulumi.StringPtrOutput `pulumi:"privPwd"`
	Queries       pulumi.StringOutput    `pulumi:"queries"`
	QueryPort     pulumi.IntOutput       `pulumi:"queryPort"`
	SecurityLevel pulumi.StringOutput    `pulumi:"securityLevel"`
	Vdomparam     pulumi.StringPtrOutput `pulumi:"vdomparam"`
}

// NewSwitchControllerSnmpUser registers a new resource with the given unique name, arguments, and options.
func NewSwitchControllerSnmpUser(ctx *pulumi.Context,
	name string, args *SwitchControllerSnmpUserArgs, opts ...pulumi.ResourceOption) (*SwitchControllerSnmpUser, error) {
	if args == nil {
		args = &SwitchControllerSnmpUserArgs{}
	}

	if args.AuthPwd != nil {
		args.AuthPwd = pulumi.ToSecret(args.AuthPwd).(pulumi.StringPtrInput)
	}
	if args.PrivPwd != nil {
		args.PrivPwd = pulumi.ToSecret(args.PrivPwd).(pulumi.StringPtrInput)
	}
	secrets := pulumi.AdditionalSecretOutputs([]string{
		"authPwd",
		"privPwd",
	})
	opts = append(opts, secrets)
	opts = internal.PkgResourceDefaultOpts(opts)
	var resource SwitchControllerSnmpUser
	err := ctx.RegisterResource("fortios:index/switchControllerSnmpUser:SwitchControllerSnmpUser", name, args, &resource, opts...)
	if err != nil {
		return nil, err
	}
	return &resource, nil
}

// GetSwitchControllerSnmpUser gets an existing SwitchControllerSnmpUser resource's state with the given name, ID, and optional
// state properties that are used to uniquely qualify the lookup (nil if not required).
func GetSwitchControllerSnmpUser(ctx *pulumi.Context,
	name string, id pulumi.IDInput, state *SwitchControllerSnmpUserState, opts ...pulumi.ResourceOption) (*SwitchControllerSnmpUser, error) {
	var resource SwitchControllerSnmpUser
	err := ctx.ReadResource("fortios:index/switchControllerSnmpUser:SwitchControllerSnmpUser", name, id, state, &resource, opts...)
	if err != nil {
		return nil, err
	}
	return &resource, nil
}

// Input properties used for looking up and filtering SwitchControllerSnmpUser resources.
type switchControllerSnmpUserState struct {
	AuthProto     *string `pulumi:"authProto"`
	AuthPwd       *string `pulumi:"authPwd"`
	Name          *string `pulumi:"name"`
	PrivProto     *string `pulumi:"privProto"`
	PrivPwd       *string `pulumi:"privPwd"`
	Queries       *string `pulumi:"queries"`
	QueryPort     *int    `pulumi:"queryPort"`
	SecurityLevel *string `pulumi:"securityLevel"`
	Vdomparam     *string `pulumi:"vdomparam"`
}

type SwitchControllerSnmpUserState struct {
	AuthProto     pulumi.StringPtrInput
	AuthPwd       pulumi.StringPtrInput
	Name          pulumi.StringPtrInput
	PrivProto     pulumi.StringPtrInput
	PrivPwd       pulumi.StringPtrInput
	Queries       pulumi.StringPtrInput
	QueryPort     pulumi.IntPtrInput
	SecurityLevel pulumi.StringPtrInput
	Vdomparam     pulumi.StringPtrInput
}

func (SwitchControllerSnmpUserState) ElementType() reflect.Type {
	return reflect.TypeOf((*switchControllerSnmpUserState)(nil)).Elem()
}

type switchControllerSnmpUserArgs struct {
	AuthProto     *string `pulumi:"authProto"`
	AuthPwd       *string `pulumi:"authPwd"`
	Name          *string `pulumi:"name"`
	PrivProto     *string `pulumi:"privProto"`
	PrivPwd       *string `pulumi:"privPwd"`
	Queries       *string `pulumi:"queries"`
	QueryPort     *int    `pulumi:"queryPort"`
	SecurityLevel *string `pulumi:"securityLevel"`
	Vdomparam     *string `pulumi:"vdomparam"`
}

// The set of arguments for constructing a SwitchControllerSnmpUser resource.
type SwitchControllerSnmpUserArgs struct {
	AuthProto     pulumi.StringPtrInput
	AuthPwd       pulumi.StringPtrInput
	Name          pulumi.StringPtrInput
	PrivProto     pulumi.StringPtrInput
	PrivPwd       pulumi.StringPtrInput
	Queries       pulumi.StringPtrInput
	QueryPort     pulumi.IntPtrInput
	SecurityLevel pulumi.StringPtrInput
	Vdomparam     pulumi.StringPtrInput
}

func (SwitchControllerSnmpUserArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*switchControllerSnmpUserArgs)(nil)).Elem()
}

type SwitchControllerSnmpUserInput interface {
	pulumi.Input

	ToSwitchControllerSnmpUserOutput() SwitchControllerSnmpUserOutput
	ToSwitchControllerSnmpUserOutputWithContext(ctx context.Context) SwitchControllerSnmpUserOutput
}

func (*SwitchControllerSnmpUser) ElementType() reflect.Type {
	return reflect.TypeOf((**SwitchControllerSnmpUser)(nil)).Elem()
}

func (i *SwitchControllerSnmpUser) ToSwitchControllerSnmpUserOutput() SwitchControllerSnmpUserOutput {
	return i.ToSwitchControllerSnmpUserOutputWithContext(context.Background())
}

func (i *SwitchControllerSnmpUser) ToSwitchControllerSnmpUserOutputWithContext(ctx context.Context) SwitchControllerSnmpUserOutput {
	return pulumi.ToOutputWithContext(ctx, i).(SwitchControllerSnmpUserOutput)
}

// SwitchControllerSnmpUserArrayInput is an input type that accepts SwitchControllerSnmpUserArray and SwitchControllerSnmpUserArrayOutput values.
// You can construct a concrete instance of `SwitchControllerSnmpUserArrayInput` via:
//
//	SwitchControllerSnmpUserArray{ SwitchControllerSnmpUserArgs{...} }
type SwitchControllerSnmpUserArrayInput interface {
	pulumi.Input

	ToSwitchControllerSnmpUserArrayOutput() SwitchControllerSnmpUserArrayOutput
	ToSwitchControllerSnmpUserArrayOutputWithContext(context.Context) SwitchControllerSnmpUserArrayOutput
}

type SwitchControllerSnmpUserArray []SwitchControllerSnmpUserInput

func (SwitchControllerSnmpUserArray) ElementType() reflect.Type {
	return reflect.TypeOf((*[]*SwitchControllerSnmpUser)(nil)).Elem()
}

func (i SwitchControllerSnmpUserArray) ToSwitchControllerSnmpUserArrayOutput() SwitchControllerSnmpUserArrayOutput {
	return i.ToSwitchControllerSnmpUserArrayOutputWithContext(context.Background())
}

func (i SwitchControllerSnmpUserArray) ToSwitchControllerSnmpUserArrayOutputWithContext(ctx context.Context) SwitchControllerSnmpUserArrayOutput {
	return pulumi.ToOutputWithContext(ctx, i).(SwitchControllerSnmpUserArrayOutput)
}

// SwitchControllerSnmpUserMapInput is an input type that accepts SwitchControllerSnmpUserMap and SwitchControllerSnmpUserMapOutput values.
// You can construct a concrete instance of `SwitchControllerSnmpUserMapInput` via:
//
//	SwitchControllerSnmpUserMap{ "key": SwitchControllerSnmpUserArgs{...} }
type SwitchControllerSnmpUserMapInput interface {
	pulumi.Input

	ToSwitchControllerSnmpUserMapOutput() SwitchControllerSnmpUserMapOutput
	ToSwitchControllerSnmpUserMapOutputWithContext(context.Context) SwitchControllerSnmpUserMapOutput
}

type SwitchControllerSnmpUserMap map[string]SwitchControllerSnmpUserInput

func (SwitchControllerSnmpUserMap) ElementType() reflect.Type {
	return reflect.TypeOf((*map[string]*SwitchControllerSnmpUser)(nil)).Elem()
}

func (i SwitchControllerSnmpUserMap) ToSwitchControllerSnmpUserMapOutput() SwitchControllerSnmpUserMapOutput {
	return i.ToSwitchControllerSnmpUserMapOutputWithContext(context.Background())
}

func (i SwitchControllerSnmpUserMap) ToSwitchControllerSnmpUserMapOutputWithContext(ctx context.Context) SwitchControllerSnmpUserMapOutput {
	return pulumi.ToOutputWithContext(ctx, i).(SwitchControllerSnmpUserMapOutput)
}

type SwitchControllerSnmpUserOutput struct{ *pulumi.OutputState }

func (SwitchControllerSnmpUserOutput) ElementType() reflect.Type {
	return reflect.TypeOf((**SwitchControllerSnmpUser)(nil)).Elem()
}

func (o SwitchControllerSnmpUserOutput) ToSwitchControllerSnmpUserOutput() SwitchControllerSnmpUserOutput {
	return o
}

func (o SwitchControllerSnmpUserOutput) ToSwitchControllerSnmpUserOutputWithContext(ctx context.Context) SwitchControllerSnmpUserOutput {
	return o
}

func (o SwitchControllerSnmpUserOutput) AuthProto() pulumi.StringOutput {
	return o.ApplyT(func(v *SwitchControllerSnmpUser) pulumi.StringOutput { return v.AuthProto }).(pulumi.StringOutput)
}

func (o SwitchControllerSnmpUserOutput) AuthPwd() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *SwitchControllerSnmpUser) pulumi.StringPtrOutput { return v.AuthPwd }).(pulumi.StringPtrOutput)
}

func (o SwitchControllerSnmpUserOutput) Name() pulumi.StringOutput {
	return o.ApplyT(func(v *SwitchControllerSnmpUser) pulumi.StringOutput { return v.Name }).(pulumi.StringOutput)
}

func (o SwitchControllerSnmpUserOutput) PrivProto() pulumi.StringOutput {
	return o.ApplyT(func(v *SwitchControllerSnmpUser) pulumi.StringOutput { return v.PrivProto }).(pulumi.StringOutput)
}

func (o SwitchControllerSnmpUserOutput) PrivPwd() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *SwitchControllerSnmpUser) pulumi.StringPtrOutput { return v.PrivPwd }).(pulumi.StringPtrOutput)
}

func (o SwitchControllerSnmpUserOutput) Queries() pulumi.StringOutput {
	return o.ApplyT(func(v *SwitchControllerSnmpUser) pulumi.StringOutput { return v.Queries }).(pulumi.StringOutput)
}

func (o SwitchControllerSnmpUserOutput) QueryPort() pulumi.IntOutput {
	return o.ApplyT(func(v *SwitchControllerSnmpUser) pulumi.IntOutput { return v.QueryPort }).(pulumi.IntOutput)
}

func (o SwitchControllerSnmpUserOutput) SecurityLevel() pulumi.StringOutput {
	return o.ApplyT(func(v *SwitchControllerSnmpUser) pulumi.StringOutput { return v.SecurityLevel }).(pulumi.StringOutput)
}

func (o SwitchControllerSnmpUserOutput) Vdomparam() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *SwitchControllerSnmpUser) pulumi.StringPtrOutput { return v.Vdomparam }).(pulumi.StringPtrOutput)
}

type SwitchControllerSnmpUserArrayOutput struct{ *pulumi.OutputState }

func (SwitchControllerSnmpUserArrayOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*[]*SwitchControllerSnmpUser)(nil)).Elem()
}

func (o SwitchControllerSnmpUserArrayOutput) ToSwitchControllerSnmpUserArrayOutput() SwitchControllerSnmpUserArrayOutput {
	return o
}

func (o SwitchControllerSnmpUserArrayOutput) ToSwitchControllerSnmpUserArrayOutputWithContext(ctx context.Context) SwitchControllerSnmpUserArrayOutput {
	return o
}

func (o SwitchControllerSnmpUserArrayOutput) Index(i pulumi.IntInput) SwitchControllerSnmpUserOutput {
	return pulumi.All(o, i).ApplyT(func(vs []interface{}) *SwitchControllerSnmpUser {
		return vs[0].([]*SwitchControllerSnmpUser)[vs[1].(int)]
	}).(SwitchControllerSnmpUserOutput)
}

type SwitchControllerSnmpUserMapOutput struct{ *pulumi.OutputState }

func (SwitchControllerSnmpUserMapOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*map[string]*SwitchControllerSnmpUser)(nil)).Elem()
}

func (o SwitchControllerSnmpUserMapOutput) ToSwitchControllerSnmpUserMapOutput() SwitchControllerSnmpUserMapOutput {
	return o
}

func (o SwitchControllerSnmpUserMapOutput) ToSwitchControllerSnmpUserMapOutputWithContext(ctx context.Context) SwitchControllerSnmpUserMapOutput {
	return o
}

func (o SwitchControllerSnmpUserMapOutput) MapIndex(k pulumi.StringInput) SwitchControllerSnmpUserOutput {
	return pulumi.All(o, k).ApplyT(func(vs []interface{}) *SwitchControllerSnmpUser {
		return vs[0].(map[string]*SwitchControllerSnmpUser)[vs[1].(string)]
	}).(SwitchControllerSnmpUserOutput)
}

func init() {
	pulumi.RegisterInputType(reflect.TypeOf((*SwitchControllerSnmpUserInput)(nil)).Elem(), &SwitchControllerSnmpUser{})
	pulumi.RegisterInputType(reflect.TypeOf((*SwitchControllerSnmpUserArrayInput)(nil)).Elem(), SwitchControllerSnmpUserArray{})
	pulumi.RegisterInputType(reflect.TypeOf((*SwitchControllerSnmpUserMapInput)(nil)).Elem(), SwitchControllerSnmpUserMap{})
	pulumi.RegisterOutputType(SwitchControllerSnmpUserOutput{})
	pulumi.RegisterOutputType(SwitchControllerSnmpUserArrayOutput{})
	pulumi.RegisterOutputType(SwitchControllerSnmpUserMapOutput{})
}
