// Code generated by the Pulumi Terraform Bridge (tfgen) Tool DO NOT EDIT.
// *** WARNING: Do not edit by hand unless you're certain you know what you are doing! ***

package fortios

import (
	"context"
	"reflect"

	"github.com/pulumi/pulumi/sdk/v3/go/pulumi"
)

// Configure UTM (Unified Threat Management) profile.
//
// ## Import
//
// WirelessController UtmProfile can be imported using any of these accepted formats
//
// ```sh
//  $ pulumi import fortios:index/wirelessControllerUtmProfile:WirelessControllerUtmProfile labelname {{name}}
// ```
//
//  If you do not want to import arguments of block$ export "FORTIOS_IMPORT_TABLE"="false"
//
// ```sh
//  $ pulumi import fortios:index/wirelessControllerUtmProfile:WirelessControllerUtmProfile labelname {{name}}
// ```
//
//  $ unset "FORTIOS_IMPORT_TABLE"
type WirelessControllerUtmProfile struct {
	pulumi.CustomResourceState

	// AntiVirus profile name.
	AntivirusProfile pulumi.StringOutput `pulumi:"antivirusProfile"`
	// Application control list name.
	ApplicationList pulumi.StringOutput `pulumi:"applicationList"`
	// Comment.
	Comment pulumi.StringOutput `pulumi:"comment"`
	// IPS sensor name.
	IpsSensor pulumi.StringOutput `pulumi:"ipsSensor"`
	// UTM profile name.
	Name pulumi.StringOutput `pulumi:"name"`
	// Block or monitor connections to Botnet servers or disable Botnet scanning. Valid values: `disable`, `block`, `monitor`.
	ScanBotnetConnections pulumi.StringOutput `pulumi:"scanBotnetConnections"`
	// Enable/disable UTM logging. Valid values: `enable`, `disable`.
	UtmLog pulumi.StringOutput `pulumi:"utmLog"`
	// Specifies the vdom to which the resource will be applied when the FortiGate unit is running in VDOM mode. Only one vdom can be specified. If you want to inherit the vdom configuration of the provider, please do not set this parameter.
	Vdomparam pulumi.StringPtrOutput `pulumi:"vdomparam"`
	// WebFilter profile name.
	WebfilterProfile pulumi.StringOutput `pulumi:"webfilterProfile"`
}

// NewWirelessControllerUtmProfile registers a new resource with the given unique name, arguments, and options.
func NewWirelessControllerUtmProfile(ctx *pulumi.Context,
	name string, args *WirelessControllerUtmProfileArgs, opts ...pulumi.ResourceOption) (*WirelessControllerUtmProfile, error) {
	if args == nil {
		args = &WirelessControllerUtmProfileArgs{}
	}

	opts = pkgResourceDefaultOpts(opts)
	var resource WirelessControllerUtmProfile
	err := ctx.RegisterResource("fortios:index/wirelessControllerUtmProfile:WirelessControllerUtmProfile", name, args, &resource, opts...)
	if err != nil {
		return nil, err
	}
	return &resource, nil
}

// GetWirelessControllerUtmProfile gets an existing WirelessControllerUtmProfile resource's state with the given name, ID, and optional
// state properties that are used to uniquely qualify the lookup (nil if not required).
func GetWirelessControllerUtmProfile(ctx *pulumi.Context,
	name string, id pulumi.IDInput, state *WirelessControllerUtmProfileState, opts ...pulumi.ResourceOption) (*WirelessControllerUtmProfile, error) {
	var resource WirelessControllerUtmProfile
	err := ctx.ReadResource("fortios:index/wirelessControllerUtmProfile:WirelessControllerUtmProfile", name, id, state, &resource, opts...)
	if err != nil {
		return nil, err
	}
	return &resource, nil
}

// Input properties used for looking up and filtering WirelessControllerUtmProfile resources.
type wirelessControllerUtmProfileState struct {
	// AntiVirus profile name.
	AntivirusProfile *string `pulumi:"antivirusProfile"`
	// Application control list name.
	ApplicationList *string `pulumi:"applicationList"`
	// Comment.
	Comment *string `pulumi:"comment"`
	// IPS sensor name.
	IpsSensor *string `pulumi:"ipsSensor"`
	// UTM profile name.
	Name *string `pulumi:"name"`
	// Block or monitor connections to Botnet servers or disable Botnet scanning. Valid values: `disable`, `block`, `monitor`.
	ScanBotnetConnections *string `pulumi:"scanBotnetConnections"`
	// Enable/disable UTM logging. Valid values: `enable`, `disable`.
	UtmLog *string `pulumi:"utmLog"`
	// Specifies the vdom to which the resource will be applied when the FortiGate unit is running in VDOM mode. Only one vdom can be specified. If you want to inherit the vdom configuration of the provider, please do not set this parameter.
	Vdomparam *string `pulumi:"vdomparam"`
	// WebFilter profile name.
	WebfilterProfile *string `pulumi:"webfilterProfile"`
}

type WirelessControllerUtmProfileState struct {
	// AntiVirus profile name.
	AntivirusProfile pulumi.StringPtrInput
	// Application control list name.
	ApplicationList pulumi.StringPtrInput
	// Comment.
	Comment pulumi.StringPtrInput
	// IPS sensor name.
	IpsSensor pulumi.StringPtrInput
	// UTM profile name.
	Name pulumi.StringPtrInput
	// Block or monitor connections to Botnet servers or disable Botnet scanning. Valid values: `disable`, `block`, `monitor`.
	ScanBotnetConnections pulumi.StringPtrInput
	// Enable/disable UTM logging. Valid values: `enable`, `disable`.
	UtmLog pulumi.StringPtrInput
	// Specifies the vdom to which the resource will be applied when the FortiGate unit is running in VDOM mode. Only one vdom can be specified. If you want to inherit the vdom configuration of the provider, please do not set this parameter.
	Vdomparam pulumi.StringPtrInput
	// WebFilter profile name.
	WebfilterProfile pulumi.StringPtrInput
}

func (WirelessControllerUtmProfileState) ElementType() reflect.Type {
	return reflect.TypeOf((*wirelessControllerUtmProfileState)(nil)).Elem()
}

type wirelessControllerUtmProfileArgs struct {
	// AntiVirus profile name.
	AntivirusProfile *string `pulumi:"antivirusProfile"`
	// Application control list name.
	ApplicationList *string `pulumi:"applicationList"`
	// Comment.
	Comment *string `pulumi:"comment"`
	// IPS sensor name.
	IpsSensor *string `pulumi:"ipsSensor"`
	// UTM profile name.
	Name *string `pulumi:"name"`
	// Block or monitor connections to Botnet servers or disable Botnet scanning. Valid values: `disable`, `block`, `monitor`.
	ScanBotnetConnections *string `pulumi:"scanBotnetConnections"`
	// Enable/disable UTM logging. Valid values: `enable`, `disable`.
	UtmLog *string `pulumi:"utmLog"`
	// Specifies the vdom to which the resource will be applied when the FortiGate unit is running in VDOM mode. Only one vdom can be specified. If you want to inherit the vdom configuration of the provider, please do not set this parameter.
	Vdomparam *string `pulumi:"vdomparam"`
	// WebFilter profile name.
	WebfilterProfile *string `pulumi:"webfilterProfile"`
}

// The set of arguments for constructing a WirelessControllerUtmProfile resource.
type WirelessControllerUtmProfileArgs struct {
	// AntiVirus profile name.
	AntivirusProfile pulumi.StringPtrInput
	// Application control list name.
	ApplicationList pulumi.StringPtrInput
	// Comment.
	Comment pulumi.StringPtrInput
	// IPS sensor name.
	IpsSensor pulumi.StringPtrInput
	// UTM profile name.
	Name pulumi.StringPtrInput
	// Block or monitor connections to Botnet servers or disable Botnet scanning. Valid values: `disable`, `block`, `monitor`.
	ScanBotnetConnections pulumi.StringPtrInput
	// Enable/disable UTM logging. Valid values: `enable`, `disable`.
	UtmLog pulumi.StringPtrInput
	// Specifies the vdom to which the resource will be applied when the FortiGate unit is running in VDOM mode. Only one vdom can be specified. If you want to inherit the vdom configuration of the provider, please do not set this parameter.
	Vdomparam pulumi.StringPtrInput
	// WebFilter profile name.
	WebfilterProfile pulumi.StringPtrInput
}

func (WirelessControllerUtmProfileArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*wirelessControllerUtmProfileArgs)(nil)).Elem()
}

type WirelessControllerUtmProfileInput interface {
	pulumi.Input

	ToWirelessControllerUtmProfileOutput() WirelessControllerUtmProfileOutput
	ToWirelessControllerUtmProfileOutputWithContext(ctx context.Context) WirelessControllerUtmProfileOutput
}

func (*WirelessControllerUtmProfile) ElementType() reflect.Type {
	return reflect.TypeOf((**WirelessControllerUtmProfile)(nil)).Elem()
}

func (i *WirelessControllerUtmProfile) ToWirelessControllerUtmProfileOutput() WirelessControllerUtmProfileOutput {
	return i.ToWirelessControllerUtmProfileOutputWithContext(context.Background())
}

func (i *WirelessControllerUtmProfile) ToWirelessControllerUtmProfileOutputWithContext(ctx context.Context) WirelessControllerUtmProfileOutput {
	return pulumi.ToOutputWithContext(ctx, i).(WirelessControllerUtmProfileOutput)
}

// WirelessControllerUtmProfileArrayInput is an input type that accepts WirelessControllerUtmProfileArray and WirelessControllerUtmProfileArrayOutput values.
// You can construct a concrete instance of `WirelessControllerUtmProfileArrayInput` via:
//
//          WirelessControllerUtmProfileArray{ WirelessControllerUtmProfileArgs{...} }
type WirelessControllerUtmProfileArrayInput interface {
	pulumi.Input

	ToWirelessControllerUtmProfileArrayOutput() WirelessControllerUtmProfileArrayOutput
	ToWirelessControllerUtmProfileArrayOutputWithContext(context.Context) WirelessControllerUtmProfileArrayOutput
}

type WirelessControllerUtmProfileArray []WirelessControllerUtmProfileInput

func (WirelessControllerUtmProfileArray) ElementType() reflect.Type {
	return reflect.TypeOf((*[]*WirelessControllerUtmProfile)(nil)).Elem()
}

func (i WirelessControllerUtmProfileArray) ToWirelessControllerUtmProfileArrayOutput() WirelessControllerUtmProfileArrayOutput {
	return i.ToWirelessControllerUtmProfileArrayOutputWithContext(context.Background())
}

func (i WirelessControllerUtmProfileArray) ToWirelessControllerUtmProfileArrayOutputWithContext(ctx context.Context) WirelessControllerUtmProfileArrayOutput {
	return pulumi.ToOutputWithContext(ctx, i).(WirelessControllerUtmProfileArrayOutput)
}

// WirelessControllerUtmProfileMapInput is an input type that accepts WirelessControllerUtmProfileMap and WirelessControllerUtmProfileMapOutput values.
// You can construct a concrete instance of `WirelessControllerUtmProfileMapInput` via:
//
//          WirelessControllerUtmProfileMap{ "key": WirelessControllerUtmProfileArgs{...} }
type WirelessControllerUtmProfileMapInput interface {
	pulumi.Input

	ToWirelessControllerUtmProfileMapOutput() WirelessControllerUtmProfileMapOutput
	ToWirelessControllerUtmProfileMapOutputWithContext(context.Context) WirelessControllerUtmProfileMapOutput
}

type WirelessControllerUtmProfileMap map[string]WirelessControllerUtmProfileInput

func (WirelessControllerUtmProfileMap) ElementType() reflect.Type {
	return reflect.TypeOf((*map[string]*WirelessControllerUtmProfile)(nil)).Elem()
}

func (i WirelessControllerUtmProfileMap) ToWirelessControllerUtmProfileMapOutput() WirelessControllerUtmProfileMapOutput {
	return i.ToWirelessControllerUtmProfileMapOutputWithContext(context.Background())
}

func (i WirelessControllerUtmProfileMap) ToWirelessControllerUtmProfileMapOutputWithContext(ctx context.Context) WirelessControllerUtmProfileMapOutput {
	return pulumi.ToOutputWithContext(ctx, i).(WirelessControllerUtmProfileMapOutput)
}

type WirelessControllerUtmProfileOutput struct{ *pulumi.OutputState }

func (WirelessControllerUtmProfileOutput) ElementType() reflect.Type {
	return reflect.TypeOf((**WirelessControllerUtmProfile)(nil)).Elem()
}

func (o WirelessControllerUtmProfileOutput) ToWirelessControllerUtmProfileOutput() WirelessControllerUtmProfileOutput {
	return o
}

func (o WirelessControllerUtmProfileOutput) ToWirelessControllerUtmProfileOutputWithContext(ctx context.Context) WirelessControllerUtmProfileOutput {
	return o
}

type WirelessControllerUtmProfileArrayOutput struct{ *pulumi.OutputState }

func (WirelessControllerUtmProfileArrayOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*[]*WirelessControllerUtmProfile)(nil)).Elem()
}

func (o WirelessControllerUtmProfileArrayOutput) ToWirelessControllerUtmProfileArrayOutput() WirelessControllerUtmProfileArrayOutput {
	return o
}

func (o WirelessControllerUtmProfileArrayOutput) ToWirelessControllerUtmProfileArrayOutputWithContext(ctx context.Context) WirelessControllerUtmProfileArrayOutput {
	return o
}

func (o WirelessControllerUtmProfileArrayOutput) Index(i pulumi.IntInput) WirelessControllerUtmProfileOutput {
	return pulumi.All(o, i).ApplyT(func(vs []interface{}) *WirelessControllerUtmProfile {
		return vs[0].([]*WirelessControllerUtmProfile)[vs[1].(int)]
	}).(WirelessControllerUtmProfileOutput)
}

type WirelessControllerUtmProfileMapOutput struct{ *pulumi.OutputState }

func (WirelessControllerUtmProfileMapOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*map[string]*WirelessControllerUtmProfile)(nil)).Elem()
}

func (o WirelessControllerUtmProfileMapOutput) ToWirelessControllerUtmProfileMapOutput() WirelessControllerUtmProfileMapOutput {
	return o
}

func (o WirelessControllerUtmProfileMapOutput) ToWirelessControllerUtmProfileMapOutputWithContext(ctx context.Context) WirelessControllerUtmProfileMapOutput {
	return o
}

func (o WirelessControllerUtmProfileMapOutput) MapIndex(k pulumi.StringInput) WirelessControllerUtmProfileOutput {
	return pulumi.All(o, k).ApplyT(func(vs []interface{}) *WirelessControllerUtmProfile {
		return vs[0].(map[string]*WirelessControllerUtmProfile)[vs[1].(string)]
	}).(WirelessControllerUtmProfileOutput)
}

func init() {
	pulumi.RegisterInputType(reflect.TypeOf((*WirelessControllerUtmProfileInput)(nil)).Elem(), &WirelessControllerUtmProfile{})
	pulumi.RegisterInputType(reflect.TypeOf((*WirelessControllerUtmProfileArrayInput)(nil)).Elem(), WirelessControllerUtmProfileArray{})
	pulumi.RegisterInputType(reflect.TypeOf((*WirelessControllerUtmProfileMapInput)(nil)).Elem(), WirelessControllerUtmProfileMap{})
	pulumi.RegisterOutputType(WirelessControllerUtmProfileOutput{})
	pulumi.RegisterOutputType(WirelessControllerUtmProfileArrayOutput{})
	pulumi.RegisterOutputType(WirelessControllerUtmProfileMapOutput{})
}
