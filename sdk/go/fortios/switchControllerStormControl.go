// Code generated by the Pulumi Terraform Bridge (tfgen) Tool DO NOT EDIT.
// *** WARNING: Do not edit by hand unless you're certain you know what you are doing! ***

package fortios

import (
	"context"
	"reflect"

	"github.com/pulumi/pulumi/sdk/v3/go/pulumi"
)

type SwitchControllerStormControl struct {
	pulumi.CustomResourceState

	Broadcast        pulumi.StringOutput    `pulumi:"broadcast"`
	Rate             pulumi.IntOutput       `pulumi:"rate"`
	UnknownMulticast pulumi.StringOutput    `pulumi:"unknownMulticast"`
	UnknownUnicast   pulumi.StringOutput    `pulumi:"unknownUnicast"`
	Vdomparam        pulumi.StringPtrOutput `pulumi:"vdomparam"`
}

// NewSwitchControllerStormControl registers a new resource with the given unique name, arguments, and options.
func NewSwitchControllerStormControl(ctx *pulumi.Context,
	name string, args *SwitchControllerStormControlArgs, opts ...pulumi.ResourceOption) (*SwitchControllerStormControl, error) {
	if args == nil {
		args = &SwitchControllerStormControlArgs{}
	}

	opts = pkgResourceDefaultOpts(opts)
	var resource SwitchControllerStormControl
	err := ctx.RegisterResource("fortios:index/switchControllerStormControl:SwitchControllerStormControl", name, args, &resource, opts...)
	if err != nil {
		return nil, err
	}
	return &resource, nil
}

// GetSwitchControllerStormControl gets an existing SwitchControllerStormControl resource's state with the given name, ID, and optional
// state properties that are used to uniquely qualify the lookup (nil if not required).
func GetSwitchControllerStormControl(ctx *pulumi.Context,
	name string, id pulumi.IDInput, state *SwitchControllerStormControlState, opts ...pulumi.ResourceOption) (*SwitchControllerStormControl, error) {
	var resource SwitchControllerStormControl
	err := ctx.ReadResource("fortios:index/switchControllerStormControl:SwitchControllerStormControl", name, id, state, &resource, opts...)
	if err != nil {
		return nil, err
	}
	return &resource, nil
}

// Input properties used for looking up and filtering SwitchControllerStormControl resources.
type switchControllerStormControlState struct {
	Broadcast        *string `pulumi:"broadcast"`
	Rate             *int    `pulumi:"rate"`
	UnknownMulticast *string `pulumi:"unknownMulticast"`
	UnknownUnicast   *string `pulumi:"unknownUnicast"`
	Vdomparam        *string `pulumi:"vdomparam"`
}

type SwitchControllerStormControlState struct {
	Broadcast        pulumi.StringPtrInput
	Rate             pulumi.IntPtrInput
	UnknownMulticast pulumi.StringPtrInput
	UnknownUnicast   pulumi.StringPtrInput
	Vdomparam        pulumi.StringPtrInput
}

func (SwitchControllerStormControlState) ElementType() reflect.Type {
	return reflect.TypeOf((*switchControllerStormControlState)(nil)).Elem()
}

type switchControllerStormControlArgs struct {
	Broadcast        *string `pulumi:"broadcast"`
	Rate             *int    `pulumi:"rate"`
	UnknownMulticast *string `pulumi:"unknownMulticast"`
	UnknownUnicast   *string `pulumi:"unknownUnicast"`
	Vdomparam        *string `pulumi:"vdomparam"`
}

// The set of arguments for constructing a SwitchControllerStormControl resource.
type SwitchControllerStormControlArgs struct {
	Broadcast        pulumi.StringPtrInput
	Rate             pulumi.IntPtrInput
	UnknownMulticast pulumi.StringPtrInput
	UnknownUnicast   pulumi.StringPtrInput
	Vdomparam        pulumi.StringPtrInput
}

func (SwitchControllerStormControlArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*switchControllerStormControlArgs)(nil)).Elem()
}

type SwitchControllerStormControlInput interface {
	pulumi.Input

	ToSwitchControllerStormControlOutput() SwitchControllerStormControlOutput
	ToSwitchControllerStormControlOutputWithContext(ctx context.Context) SwitchControllerStormControlOutput
}

func (*SwitchControllerStormControl) ElementType() reflect.Type {
	return reflect.TypeOf((**SwitchControllerStormControl)(nil)).Elem()
}

func (i *SwitchControllerStormControl) ToSwitchControllerStormControlOutput() SwitchControllerStormControlOutput {
	return i.ToSwitchControllerStormControlOutputWithContext(context.Background())
}

func (i *SwitchControllerStormControl) ToSwitchControllerStormControlOutputWithContext(ctx context.Context) SwitchControllerStormControlOutput {
	return pulumi.ToOutputWithContext(ctx, i).(SwitchControllerStormControlOutput)
}

// SwitchControllerStormControlArrayInput is an input type that accepts SwitchControllerStormControlArray and SwitchControllerStormControlArrayOutput values.
// You can construct a concrete instance of `SwitchControllerStormControlArrayInput` via:
//
//	SwitchControllerStormControlArray{ SwitchControllerStormControlArgs{...} }
type SwitchControllerStormControlArrayInput interface {
	pulumi.Input

	ToSwitchControllerStormControlArrayOutput() SwitchControllerStormControlArrayOutput
	ToSwitchControllerStormControlArrayOutputWithContext(context.Context) SwitchControllerStormControlArrayOutput
}

type SwitchControllerStormControlArray []SwitchControllerStormControlInput

func (SwitchControllerStormControlArray) ElementType() reflect.Type {
	return reflect.TypeOf((*[]*SwitchControllerStormControl)(nil)).Elem()
}

func (i SwitchControllerStormControlArray) ToSwitchControllerStormControlArrayOutput() SwitchControllerStormControlArrayOutput {
	return i.ToSwitchControllerStormControlArrayOutputWithContext(context.Background())
}

func (i SwitchControllerStormControlArray) ToSwitchControllerStormControlArrayOutputWithContext(ctx context.Context) SwitchControllerStormControlArrayOutput {
	return pulumi.ToOutputWithContext(ctx, i).(SwitchControllerStormControlArrayOutput)
}

// SwitchControllerStormControlMapInput is an input type that accepts SwitchControllerStormControlMap and SwitchControllerStormControlMapOutput values.
// You can construct a concrete instance of `SwitchControllerStormControlMapInput` via:
//
//	SwitchControllerStormControlMap{ "key": SwitchControllerStormControlArgs{...} }
type SwitchControllerStormControlMapInput interface {
	pulumi.Input

	ToSwitchControllerStormControlMapOutput() SwitchControllerStormControlMapOutput
	ToSwitchControllerStormControlMapOutputWithContext(context.Context) SwitchControllerStormControlMapOutput
}

type SwitchControllerStormControlMap map[string]SwitchControllerStormControlInput

func (SwitchControllerStormControlMap) ElementType() reflect.Type {
	return reflect.TypeOf((*map[string]*SwitchControllerStormControl)(nil)).Elem()
}

func (i SwitchControllerStormControlMap) ToSwitchControllerStormControlMapOutput() SwitchControllerStormControlMapOutput {
	return i.ToSwitchControllerStormControlMapOutputWithContext(context.Background())
}

func (i SwitchControllerStormControlMap) ToSwitchControllerStormControlMapOutputWithContext(ctx context.Context) SwitchControllerStormControlMapOutput {
	return pulumi.ToOutputWithContext(ctx, i).(SwitchControllerStormControlMapOutput)
}

type SwitchControllerStormControlOutput struct{ *pulumi.OutputState }

func (SwitchControllerStormControlOutput) ElementType() reflect.Type {
	return reflect.TypeOf((**SwitchControllerStormControl)(nil)).Elem()
}

func (o SwitchControllerStormControlOutput) ToSwitchControllerStormControlOutput() SwitchControllerStormControlOutput {
	return o
}

func (o SwitchControllerStormControlOutput) ToSwitchControllerStormControlOutputWithContext(ctx context.Context) SwitchControllerStormControlOutput {
	return o
}

func (o SwitchControllerStormControlOutput) Broadcast() pulumi.StringOutput {
	return o.ApplyT(func(v *SwitchControllerStormControl) pulumi.StringOutput { return v.Broadcast }).(pulumi.StringOutput)
}

func (o SwitchControllerStormControlOutput) Rate() pulumi.IntOutput {
	return o.ApplyT(func(v *SwitchControllerStormControl) pulumi.IntOutput { return v.Rate }).(pulumi.IntOutput)
}

func (o SwitchControllerStormControlOutput) UnknownMulticast() pulumi.StringOutput {
	return o.ApplyT(func(v *SwitchControllerStormControl) pulumi.StringOutput { return v.UnknownMulticast }).(pulumi.StringOutput)
}

func (o SwitchControllerStormControlOutput) UnknownUnicast() pulumi.StringOutput {
	return o.ApplyT(func(v *SwitchControllerStormControl) pulumi.StringOutput { return v.UnknownUnicast }).(pulumi.StringOutput)
}

func (o SwitchControllerStormControlOutput) Vdomparam() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *SwitchControllerStormControl) pulumi.StringPtrOutput { return v.Vdomparam }).(pulumi.StringPtrOutput)
}

type SwitchControllerStormControlArrayOutput struct{ *pulumi.OutputState }

func (SwitchControllerStormControlArrayOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*[]*SwitchControllerStormControl)(nil)).Elem()
}

func (o SwitchControllerStormControlArrayOutput) ToSwitchControllerStormControlArrayOutput() SwitchControllerStormControlArrayOutput {
	return o
}

func (o SwitchControllerStormControlArrayOutput) ToSwitchControllerStormControlArrayOutputWithContext(ctx context.Context) SwitchControllerStormControlArrayOutput {
	return o
}

func (o SwitchControllerStormControlArrayOutput) Index(i pulumi.IntInput) SwitchControllerStormControlOutput {
	return pulumi.All(o, i).ApplyT(func(vs []interface{}) *SwitchControllerStormControl {
		return vs[0].([]*SwitchControllerStormControl)[vs[1].(int)]
	}).(SwitchControllerStormControlOutput)
}

type SwitchControllerStormControlMapOutput struct{ *pulumi.OutputState }

func (SwitchControllerStormControlMapOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*map[string]*SwitchControllerStormControl)(nil)).Elem()
}

func (o SwitchControllerStormControlMapOutput) ToSwitchControllerStormControlMapOutput() SwitchControllerStormControlMapOutput {
	return o
}

func (o SwitchControllerStormControlMapOutput) ToSwitchControllerStormControlMapOutputWithContext(ctx context.Context) SwitchControllerStormControlMapOutput {
	return o
}

func (o SwitchControllerStormControlMapOutput) MapIndex(k pulumi.StringInput) SwitchControllerStormControlOutput {
	return pulumi.All(o, k).ApplyT(func(vs []interface{}) *SwitchControllerStormControl {
		return vs[0].(map[string]*SwitchControllerStormControl)[vs[1].(string)]
	}).(SwitchControllerStormControlOutput)
}

func init() {
	pulumi.RegisterInputType(reflect.TypeOf((*SwitchControllerStormControlInput)(nil)).Elem(), &SwitchControllerStormControl{})
	pulumi.RegisterInputType(reflect.TypeOf((*SwitchControllerStormControlArrayInput)(nil)).Elem(), SwitchControllerStormControlArray{})
	pulumi.RegisterInputType(reflect.TypeOf((*SwitchControllerStormControlMapInput)(nil)).Elem(), SwitchControllerStormControlMap{})
	pulumi.RegisterOutputType(SwitchControllerStormControlOutput{})
	pulumi.RegisterOutputType(SwitchControllerStormControlArrayOutput{})
	pulumi.RegisterOutputType(SwitchControllerStormControlMapOutput{})
}
