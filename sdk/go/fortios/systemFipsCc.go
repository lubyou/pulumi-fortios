// Code generated by the Pulumi Terraform Bridge (tfgen) Tool DO NOT EDIT.
// *** WARNING: Do not edit by hand unless you're certain you know what you are doing! ***

package fortios

import (
	"context"
	"reflect"

	"github.com/lubyou/pulumi-fortios/sdk/go/fortios/internal"
	"github.com/pulumi/pulumi/sdk/v3/go/pulumi"
	"github.com/pulumi/pulumi/sdk/v3/go/pulumix"
)

type SystemFipsCc struct {
	pulumi.CustomResourceState

	EntropyToken          pulumi.StringOutput    `pulumi:"entropyToken"`
	KeyGenerationSelfTest pulumi.StringOutput    `pulumi:"keyGenerationSelfTest"`
	SelfTestPeriod        pulumi.IntOutput       `pulumi:"selfTestPeriod"`
	Status                pulumi.StringOutput    `pulumi:"status"`
	Vdomparam             pulumi.StringPtrOutput `pulumi:"vdomparam"`
}

// NewSystemFipsCc registers a new resource with the given unique name, arguments, and options.
func NewSystemFipsCc(ctx *pulumi.Context,
	name string, args *SystemFipsCcArgs, opts ...pulumi.ResourceOption) (*SystemFipsCc, error) {
	if args == nil {
		args = &SystemFipsCcArgs{}
	}

	opts = internal.PkgResourceDefaultOpts(opts)
	var resource SystemFipsCc
	err := ctx.RegisterResource("fortios:index/systemFipsCc:SystemFipsCc", name, args, &resource, opts...)
	if err != nil {
		return nil, err
	}
	return &resource, nil
}

// GetSystemFipsCc gets an existing SystemFipsCc resource's state with the given name, ID, and optional
// state properties that are used to uniquely qualify the lookup (nil if not required).
func GetSystemFipsCc(ctx *pulumi.Context,
	name string, id pulumi.IDInput, state *SystemFipsCcState, opts ...pulumi.ResourceOption) (*SystemFipsCc, error) {
	var resource SystemFipsCc
	err := ctx.ReadResource("fortios:index/systemFipsCc:SystemFipsCc", name, id, state, &resource, opts...)
	if err != nil {
		return nil, err
	}
	return &resource, nil
}

// Input properties used for looking up and filtering SystemFipsCc resources.
type systemFipsCcState struct {
	EntropyToken          *string `pulumi:"entropyToken"`
	KeyGenerationSelfTest *string `pulumi:"keyGenerationSelfTest"`
	SelfTestPeriod        *int    `pulumi:"selfTestPeriod"`
	Status                *string `pulumi:"status"`
	Vdomparam             *string `pulumi:"vdomparam"`
}

type SystemFipsCcState struct {
	EntropyToken          pulumi.StringPtrInput
	KeyGenerationSelfTest pulumi.StringPtrInput
	SelfTestPeriod        pulumi.IntPtrInput
	Status                pulumi.StringPtrInput
	Vdomparam             pulumi.StringPtrInput
}

func (SystemFipsCcState) ElementType() reflect.Type {
	return reflect.TypeOf((*systemFipsCcState)(nil)).Elem()
}

type systemFipsCcArgs struct {
	EntropyToken          *string `pulumi:"entropyToken"`
	KeyGenerationSelfTest *string `pulumi:"keyGenerationSelfTest"`
	SelfTestPeriod        *int    `pulumi:"selfTestPeriod"`
	Status                *string `pulumi:"status"`
	Vdomparam             *string `pulumi:"vdomparam"`
}

// The set of arguments for constructing a SystemFipsCc resource.
type SystemFipsCcArgs struct {
	EntropyToken          pulumi.StringPtrInput
	KeyGenerationSelfTest pulumi.StringPtrInput
	SelfTestPeriod        pulumi.IntPtrInput
	Status                pulumi.StringPtrInput
	Vdomparam             pulumi.StringPtrInput
}

func (SystemFipsCcArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*systemFipsCcArgs)(nil)).Elem()
}

type SystemFipsCcInput interface {
	pulumi.Input

	ToSystemFipsCcOutput() SystemFipsCcOutput
	ToSystemFipsCcOutputWithContext(ctx context.Context) SystemFipsCcOutput
}

func (*SystemFipsCc) ElementType() reflect.Type {
	return reflect.TypeOf((**SystemFipsCc)(nil)).Elem()
}

func (i *SystemFipsCc) ToSystemFipsCcOutput() SystemFipsCcOutput {
	return i.ToSystemFipsCcOutputWithContext(context.Background())
}

func (i *SystemFipsCc) ToSystemFipsCcOutputWithContext(ctx context.Context) SystemFipsCcOutput {
	return pulumi.ToOutputWithContext(ctx, i).(SystemFipsCcOutput)
}

func (i *SystemFipsCc) ToOutput(ctx context.Context) pulumix.Output[*SystemFipsCc] {
	return pulumix.Output[*SystemFipsCc]{
		OutputState: i.ToSystemFipsCcOutputWithContext(ctx).OutputState,
	}
}

// SystemFipsCcArrayInput is an input type that accepts SystemFipsCcArray and SystemFipsCcArrayOutput values.
// You can construct a concrete instance of `SystemFipsCcArrayInput` via:
//
//	SystemFipsCcArray{ SystemFipsCcArgs{...} }
type SystemFipsCcArrayInput interface {
	pulumi.Input

	ToSystemFipsCcArrayOutput() SystemFipsCcArrayOutput
	ToSystemFipsCcArrayOutputWithContext(context.Context) SystemFipsCcArrayOutput
}

type SystemFipsCcArray []SystemFipsCcInput

func (SystemFipsCcArray) ElementType() reflect.Type {
	return reflect.TypeOf((*[]*SystemFipsCc)(nil)).Elem()
}

func (i SystemFipsCcArray) ToSystemFipsCcArrayOutput() SystemFipsCcArrayOutput {
	return i.ToSystemFipsCcArrayOutputWithContext(context.Background())
}

func (i SystemFipsCcArray) ToSystemFipsCcArrayOutputWithContext(ctx context.Context) SystemFipsCcArrayOutput {
	return pulumi.ToOutputWithContext(ctx, i).(SystemFipsCcArrayOutput)
}

func (i SystemFipsCcArray) ToOutput(ctx context.Context) pulumix.Output[[]*SystemFipsCc] {
	return pulumix.Output[[]*SystemFipsCc]{
		OutputState: i.ToSystemFipsCcArrayOutputWithContext(ctx).OutputState,
	}
}

// SystemFipsCcMapInput is an input type that accepts SystemFipsCcMap and SystemFipsCcMapOutput values.
// You can construct a concrete instance of `SystemFipsCcMapInput` via:
//
//	SystemFipsCcMap{ "key": SystemFipsCcArgs{...} }
type SystemFipsCcMapInput interface {
	pulumi.Input

	ToSystemFipsCcMapOutput() SystemFipsCcMapOutput
	ToSystemFipsCcMapOutputWithContext(context.Context) SystemFipsCcMapOutput
}

type SystemFipsCcMap map[string]SystemFipsCcInput

func (SystemFipsCcMap) ElementType() reflect.Type {
	return reflect.TypeOf((*map[string]*SystemFipsCc)(nil)).Elem()
}

func (i SystemFipsCcMap) ToSystemFipsCcMapOutput() SystemFipsCcMapOutput {
	return i.ToSystemFipsCcMapOutputWithContext(context.Background())
}

func (i SystemFipsCcMap) ToSystemFipsCcMapOutputWithContext(ctx context.Context) SystemFipsCcMapOutput {
	return pulumi.ToOutputWithContext(ctx, i).(SystemFipsCcMapOutput)
}

func (i SystemFipsCcMap) ToOutput(ctx context.Context) pulumix.Output[map[string]*SystemFipsCc] {
	return pulumix.Output[map[string]*SystemFipsCc]{
		OutputState: i.ToSystemFipsCcMapOutputWithContext(ctx).OutputState,
	}
}

type SystemFipsCcOutput struct{ *pulumi.OutputState }

func (SystemFipsCcOutput) ElementType() reflect.Type {
	return reflect.TypeOf((**SystemFipsCc)(nil)).Elem()
}

func (o SystemFipsCcOutput) ToSystemFipsCcOutput() SystemFipsCcOutput {
	return o
}

func (o SystemFipsCcOutput) ToSystemFipsCcOutputWithContext(ctx context.Context) SystemFipsCcOutput {
	return o
}

func (o SystemFipsCcOutput) ToOutput(ctx context.Context) pulumix.Output[*SystemFipsCc] {
	return pulumix.Output[*SystemFipsCc]{
		OutputState: o.OutputState,
	}
}

func (o SystemFipsCcOutput) EntropyToken() pulumi.StringOutput {
	return o.ApplyT(func(v *SystemFipsCc) pulumi.StringOutput { return v.EntropyToken }).(pulumi.StringOutput)
}

func (o SystemFipsCcOutput) KeyGenerationSelfTest() pulumi.StringOutput {
	return o.ApplyT(func(v *SystemFipsCc) pulumi.StringOutput { return v.KeyGenerationSelfTest }).(pulumi.StringOutput)
}

func (o SystemFipsCcOutput) SelfTestPeriod() pulumi.IntOutput {
	return o.ApplyT(func(v *SystemFipsCc) pulumi.IntOutput { return v.SelfTestPeriod }).(pulumi.IntOutput)
}

func (o SystemFipsCcOutput) Status() pulumi.StringOutput {
	return o.ApplyT(func(v *SystemFipsCc) pulumi.StringOutput { return v.Status }).(pulumi.StringOutput)
}

func (o SystemFipsCcOutput) Vdomparam() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *SystemFipsCc) pulumi.StringPtrOutput { return v.Vdomparam }).(pulumi.StringPtrOutput)
}

type SystemFipsCcArrayOutput struct{ *pulumi.OutputState }

func (SystemFipsCcArrayOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*[]*SystemFipsCc)(nil)).Elem()
}

func (o SystemFipsCcArrayOutput) ToSystemFipsCcArrayOutput() SystemFipsCcArrayOutput {
	return o
}

func (o SystemFipsCcArrayOutput) ToSystemFipsCcArrayOutputWithContext(ctx context.Context) SystemFipsCcArrayOutput {
	return o
}

func (o SystemFipsCcArrayOutput) ToOutput(ctx context.Context) pulumix.Output[[]*SystemFipsCc] {
	return pulumix.Output[[]*SystemFipsCc]{
		OutputState: o.OutputState,
	}
}

func (o SystemFipsCcArrayOutput) Index(i pulumi.IntInput) SystemFipsCcOutput {
	return pulumi.All(o, i).ApplyT(func(vs []interface{}) *SystemFipsCc {
		return vs[0].([]*SystemFipsCc)[vs[1].(int)]
	}).(SystemFipsCcOutput)
}

type SystemFipsCcMapOutput struct{ *pulumi.OutputState }

func (SystemFipsCcMapOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*map[string]*SystemFipsCc)(nil)).Elem()
}

func (o SystemFipsCcMapOutput) ToSystemFipsCcMapOutput() SystemFipsCcMapOutput {
	return o
}

func (o SystemFipsCcMapOutput) ToSystemFipsCcMapOutputWithContext(ctx context.Context) SystemFipsCcMapOutput {
	return o
}

func (o SystemFipsCcMapOutput) ToOutput(ctx context.Context) pulumix.Output[map[string]*SystemFipsCc] {
	return pulumix.Output[map[string]*SystemFipsCc]{
		OutputState: o.OutputState,
	}
}

func (o SystemFipsCcMapOutput) MapIndex(k pulumi.StringInput) SystemFipsCcOutput {
	return pulumi.All(o, k).ApplyT(func(vs []interface{}) *SystemFipsCc {
		return vs[0].(map[string]*SystemFipsCc)[vs[1].(string)]
	}).(SystemFipsCcOutput)
}

func init() {
	pulumi.RegisterInputType(reflect.TypeOf((*SystemFipsCcInput)(nil)).Elem(), &SystemFipsCc{})
	pulumi.RegisterInputType(reflect.TypeOf((*SystemFipsCcArrayInput)(nil)).Elem(), SystemFipsCcArray{})
	pulumi.RegisterInputType(reflect.TypeOf((*SystemFipsCcMapInput)(nil)).Elem(), SystemFipsCcMap{})
	pulumi.RegisterOutputType(SystemFipsCcOutput{})
	pulumi.RegisterOutputType(SystemFipsCcArrayOutput{})
	pulumi.RegisterOutputType(SystemFipsCcMapOutput{})
}
