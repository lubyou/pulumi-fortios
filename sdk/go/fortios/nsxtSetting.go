// *** WARNING: this file was generated by the Pulumi Terraform Bridge (tfgen) Tool. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

package fortios

import (
	"context"
	"reflect"

	"github.com/pulumi/pulumi/sdk/v3/go/pulumi"
)

// Configure NSX-T setting. Applies to FortiOS Version `>= 7.0.0`.
//
// ## Import
//
// Nsxt Setting can be imported using any of these accepted formats$ export "FORTIOS_IMPORT_TABLE"="true"
//
// ```sh
//  $ pulumi import fortios:index/nsxtSetting:NsxtSetting labelname NsxtSetting
// ```
//
//  $ unset "FORTIOS_IMPORT_TABLE"
type NsxtSetting struct {
	pulumi.CustomResourceState

	// Enable/disable liveness detection packet forwarding. Valid values: `enable`, `disable`.
	Liveness pulumi.StringOutput `pulumi:"liveness"`
	// Service name.
	Service pulumi.StringOutput `pulumi:"service"`
	// Specifies the vdom to which the resource will be applied when the FortiGate unit is running in VDOM mode. Only one vdom can be specified. If you want to inherit the vdom configuration of the provider, please do not set this parameter.
	Vdomparam pulumi.StringPtrOutput `pulumi:"vdomparam"`
}

// NewNsxtSetting registers a new resource with the given unique name, arguments, and options.
func NewNsxtSetting(ctx *pulumi.Context,
	name string, args *NsxtSettingArgs, opts ...pulumi.ResourceOption) (*NsxtSetting, error) {
	if args == nil {
		args = &NsxtSettingArgs{}
	}

	var resource NsxtSetting
	err := ctx.RegisterResource("fortios:index/nsxtSetting:NsxtSetting", name, args, &resource, opts...)
	if err != nil {
		return nil, err
	}
	return &resource, nil
}

// GetNsxtSetting gets an existing NsxtSetting resource's state with the given name, ID, and optional
// state properties that are used to uniquely qualify the lookup (nil if not required).
func GetNsxtSetting(ctx *pulumi.Context,
	name string, id pulumi.IDInput, state *NsxtSettingState, opts ...pulumi.ResourceOption) (*NsxtSetting, error) {
	var resource NsxtSetting
	err := ctx.ReadResource("fortios:index/nsxtSetting:NsxtSetting", name, id, state, &resource, opts...)
	if err != nil {
		return nil, err
	}
	return &resource, nil
}

// Input properties used for looking up and filtering NsxtSetting resources.
type nsxtSettingState struct {
	// Enable/disable liveness detection packet forwarding. Valid values: `enable`, `disable`.
	Liveness *string `pulumi:"liveness"`
	// Service name.
	Service *string `pulumi:"service"`
	// Specifies the vdom to which the resource will be applied when the FortiGate unit is running in VDOM mode. Only one vdom can be specified. If you want to inherit the vdom configuration of the provider, please do not set this parameter.
	Vdomparam *string `pulumi:"vdomparam"`
}

type NsxtSettingState struct {
	// Enable/disable liveness detection packet forwarding. Valid values: `enable`, `disable`.
	Liveness pulumi.StringPtrInput
	// Service name.
	Service pulumi.StringPtrInput
	// Specifies the vdom to which the resource will be applied when the FortiGate unit is running in VDOM mode. Only one vdom can be specified. If you want to inherit the vdom configuration of the provider, please do not set this parameter.
	Vdomparam pulumi.StringPtrInput
}

func (NsxtSettingState) ElementType() reflect.Type {
	return reflect.TypeOf((*nsxtSettingState)(nil)).Elem()
}

type nsxtSettingArgs struct {
	// Enable/disable liveness detection packet forwarding. Valid values: `enable`, `disable`.
	Liveness *string `pulumi:"liveness"`
	// Service name.
	Service *string `pulumi:"service"`
	// Specifies the vdom to which the resource will be applied when the FortiGate unit is running in VDOM mode. Only one vdom can be specified. If you want to inherit the vdom configuration of the provider, please do not set this parameter.
	Vdomparam *string `pulumi:"vdomparam"`
}

// The set of arguments for constructing a NsxtSetting resource.
type NsxtSettingArgs struct {
	// Enable/disable liveness detection packet forwarding. Valid values: `enable`, `disable`.
	Liveness pulumi.StringPtrInput
	// Service name.
	Service pulumi.StringPtrInput
	// Specifies the vdom to which the resource will be applied when the FortiGate unit is running in VDOM mode. Only one vdom can be specified. If you want to inherit the vdom configuration of the provider, please do not set this parameter.
	Vdomparam pulumi.StringPtrInput
}

func (NsxtSettingArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*nsxtSettingArgs)(nil)).Elem()
}

type NsxtSettingInput interface {
	pulumi.Input

	ToNsxtSettingOutput() NsxtSettingOutput
	ToNsxtSettingOutputWithContext(ctx context.Context) NsxtSettingOutput
}

func (*NsxtSetting) ElementType() reflect.Type {
	return reflect.TypeOf((*NsxtSetting)(nil))
}

func (i *NsxtSetting) ToNsxtSettingOutput() NsxtSettingOutput {
	return i.ToNsxtSettingOutputWithContext(context.Background())
}

func (i *NsxtSetting) ToNsxtSettingOutputWithContext(ctx context.Context) NsxtSettingOutput {
	return pulumi.ToOutputWithContext(ctx, i).(NsxtSettingOutput)
}

func (i *NsxtSetting) ToNsxtSettingPtrOutput() NsxtSettingPtrOutput {
	return i.ToNsxtSettingPtrOutputWithContext(context.Background())
}

func (i *NsxtSetting) ToNsxtSettingPtrOutputWithContext(ctx context.Context) NsxtSettingPtrOutput {
	return pulumi.ToOutputWithContext(ctx, i).(NsxtSettingPtrOutput)
}

type NsxtSettingPtrInput interface {
	pulumi.Input

	ToNsxtSettingPtrOutput() NsxtSettingPtrOutput
	ToNsxtSettingPtrOutputWithContext(ctx context.Context) NsxtSettingPtrOutput
}

type nsxtSettingPtrType NsxtSettingArgs

func (*nsxtSettingPtrType) ElementType() reflect.Type {
	return reflect.TypeOf((**NsxtSetting)(nil))
}

func (i *nsxtSettingPtrType) ToNsxtSettingPtrOutput() NsxtSettingPtrOutput {
	return i.ToNsxtSettingPtrOutputWithContext(context.Background())
}

func (i *nsxtSettingPtrType) ToNsxtSettingPtrOutputWithContext(ctx context.Context) NsxtSettingPtrOutput {
	return pulumi.ToOutputWithContext(ctx, i).(NsxtSettingPtrOutput)
}

// NsxtSettingArrayInput is an input type that accepts NsxtSettingArray and NsxtSettingArrayOutput values.
// You can construct a concrete instance of `NsxtSettingArrayInput` via:
//
//          NsxtSettingArray{ NsxtSettingArgs{...} }
type NsxtSettingArrayInput interface {
	pulumi.Input

	ToNsxtSettingArrayOutput() NsxtSettingArrayOutput
	ToNsxtSettingArrayOutputWithContext(context.Context) NsxtSettingArrayOutput
}

type NsxtSettingArray []NsxtSettingInput

func (NsxtSettingArray) ElementType() reflect.Type {
	return reflect.TypeOf(([]*NsxtSetting)(nil))
}

func (i NsxtSettingArray) ToNsxtSettingArrayOutput() NsxtSettingArrayOutput {
	return i.ToNsxtSettingArrayOutputWithContext(context.Background())
}

func (i NsxtSettingArray) ToNsxtSettingArrayOutputWithContext(ctx context.Context) NsxtSettingArrayOutput {
	return pulumi.ToOutputWithContext(ctx, i).(NsxtSettingArrayOutput)
}

// NsxtSettingMapInput is an input type that accepts NsxtSettingMap and NsxtSettingMapOutput values.
// You can construct a concrete instance of `NsxtSettingMapInput` via:
//
//          NsxtSettingMap{ "key": NsxtSettingArgs{...} }
type NsxtSettingMapInput interface {
	pulumi.Input

	ToNsxtSettingMapOutput() NsxtSettingMapOutput
	ToNsxtSettingMapOutputWithContext(context.Context) NsxtSettingMapOutput
}

type NsxtSettingMap map[string]NsxtSettingInput

func (NsxtSettingMap) ElementType() reflect.Type {
	return reflect.TypeOf((map[string]*NsxtSetting)(nil))
}

func (i NsxtSettingMap) ToNsxtSettingMapOutput() NsxtSettingMapOutput {
	return i.ToNsxtSettingMapOutputWithContext(context.Background())
}

func (i NsxtSettingMap) ToNsxtSettingMapOutputWithContext(ctx context.Context) NsxtSettingMapOutput {
	return pulumi.ToOutputWithContext(ctx, i).(NsxtSettingMapOutput)
}

type NsxtSettingOutput struct {
	*pulumi.OutputState
}

func (NsxtSettingOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*NsxtSetting)(nil))
}

func (o NsxtSettingOutput) ToNsxtSettingOutput() NsxtSettingOutput {
	return o
}

func (o NsxtSettingOutput) ToNsxtSettingOutputWithContext(ctx context.Context) NsxtSettingOutput {
	return o
}

func (o NsxtSettingOutput) ToNsxtSettingPtrOutput() NsxtSettingPtrOutput {
	return o.ToNsxtSettingPtrOutputWithContext(context.Background())
}

func (o NsxtSettingOutput) ToNsxtSettingPtrOutputWithContext(ctx context.Context) NsxtSettingPtrOutput {
	return o.ApplyT(func(v NsxtSetting) *NsxtSetting {
		return &v
	}).(NsxtSettingPtrOutput)
}

type NsxtSettingPtrOutput struct {
	*pulumi.OutputState
}

func (NsxtSettingPtrOutput) ElementType() reflect.Type {
	return reflect.TypeOf((**NsxtSetting)(nil))
}

func (o NsxtSettingPtrOutput) ToNsxtSettingPtrOutput() NsxtSettingPtrOutput {
	return o
}

func (o NsxtSettingPtrOutput) ToNsxtSettingPtrOutputWithContext(ctx context.Context) NsxtSettingPtrOutput {
	return o
}

type NsxtSettingArrayOutput struct{ *pulumi.OutputState }

func (NsxtSettingArrayOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*[]NsxtSetting)(nil))
}

func (o NsxtSettingArrayOutput) ToNsxtSettingArrayOutput() NsxtSettingArrayOutput {
	return o
}

func (o NsxtSettingArrayOutput) ToNsxtSettingArrayOutputWithContext(ctx context.Context) NsxtSettingArrayOutput {
	return o
}

func (o NsxtSettingArrayOutput) Index(i pulumi.IntInput) NsxtSettingOutput {
	return pulumi.All(o, i).ApplyT(func(vs []interface{}) NsxtSetting {
		return vs[0].([]NsxtSetting)[vs[1].(int)]
	}).(NsxtSettingOutput)
}

type NsxtSettingMapOutput struct{ *pulumi.OutputState }

func (NsxtSettingMapOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*map[string]NsxtSetting)(nil))
}

func (o NsxtSettingMapOutput) ToNsxtSettingMapOutput() NsxtSettingMapOutput {
	return o
}

func (o NsxtSettingMapOutput) ToNsxtSettingMapOutputWithContext(ctx context.Context) NsxtSettingMapOutput {
	return o
}

func (o NsxtSettingMapOutput) MapIndex(k pulumi.StringInput) NsxtSettingOutput {
	return pulumi.All(o, k).ApplyT(func(vs []interface{}) NsxtSetting {
		return vs[0].(map[string]NsxtSetting)[vs[1].(string)]
	}).(NsxtSettingOutput)
}

func init() {
	pulumi.RegisterOutputType(NsxtSettingOutput{})
	pulumi.RegisterOutputType(NsxtSettingPtrOutput{})
	pulumi.RegisterOutputType(NsxtSettingArrayOutput{})
	pulumi.RegisterOutputType(NsxtSettingMapOutput{})
}
