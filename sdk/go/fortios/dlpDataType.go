// Code generated by the Pulumi Terraform Bridge (tfgen) Tool DO NOT EDIT.
// *** WARNING: Do not edit by hand unless you're certain you know what you are doing! ***

package fortios

import (
	"context"
	"reflect"

	"github.com/pulumi/pulumi/sdk/v3/go/pulumi"
)

type DlpDataType struct {
	pulumi.CustomResourceState

	Comment                  pulumi.StringPtrOutput `pulumi:"comment"`
	LookAhead                pulumi.IntOutput       `pulumi:"lookAhead"`
	LookBack                 pulumi.IntOutput       `pulumi:"lookBack"`
	Name                     pulumi.StringOutput    `pulumi:"name"`
	Pattern                  pulumi.StringOutput    `pulumi:"pattern"`
	Transform                pulumi.StringOutput    `pulumi:"transform"`
	Vdomparam                pulumi.StringPtrOutput `pulumi:"vdomparam"`
	Verify                   pulumi.StringOutput    `pulumi:"verify"`
	VerifyTransformedPattern pulumi.StringOutput    `pulumi:"verifyTransformedPattern"`
}

// NewDlpDataType registers a new resource with the given unique name, arguments, and options.
func NewDlpDataType(ctx *pulumi.Context,
	name string, args *DlpDataTypeArgs, opts ...pulumi.ResourceOption) (*DlpDataType, error) {
	if args == nil {
		args = &DlpDataTypeArgs{}
	}

	opts = pkgResourceDefaultOpts(opts)
	var resource DlpDataType
	err := ctx.RegisterResource("fortios:index/dlpDataType:DlpDataType", name, args, &resource, opts...)
	if err != nil {
		return nil, err
	}
	return &resource, nil
}

// GetDlpDataType gets an existing DlpDataType resource's state with the given name, ID, and optional
// state properties that are used to uniquely qualify the lookup (nil if not required).
func GetDlpDataType(ctx *pulumi.Context,
	name string, id pulumi.IDInput, state *DlpDataTypeState, opts ...pulumi.ResourceOption) (*DlpDataType, error) {
	var resource DlpDataType
	err := ctx.ReadResource("fortios:index/dlpDataType:DlpDataType", name, id, state, &resource, opts...)
	if err != nil {
		return nil, err
	}
	return &resource, nil
}

// Input properties used for looking up and filtering DlpDataType resources.
type dlpDataTypeState struct {
	Comment                  *string `pulumi:"comment"`
	LookAhead                *int    `pulumi:"lookAhead"`
	LookBack                 *int    `pulumi:"lookBack"`
	Name                     *string `pulumi:"name"`
	Pattern                  *string `pulumi:"pattern"`
	Transform                *string `pulumi:"transform"`
	Vdomparam                *string `pulumi:"vdomparam"`
	Verify                   *string `pulumi:"verify"`
	VerifyTransformedPattern *string `pulumi:"verifyTransformedPattern"`
}

type DlpDataTypeState struct {
	Comment                  pulumi.StringPtrInput
	LookAhead                pulumi.IntPtrInput
	LookBack                 pulumi.IntPtrInput
	Name                     pulumi.StringPtrInput
	Pattern                  pulumi.StringPtrInput
	Transform                pulumi.StringPtrInput
	Vdomparam                pulumi.StringPtrInput
	Verify                   pulumi.StringPtrInput
	VerifyTransformedPattern pulumi.StringPtrInput
}

func (DlpDataTypeState) ElementType() reflect.Type {
	return reflect.TypeOf((*dlpDataTypeState)(nil)).Elem()
}

type dlpDataTypeArgs struct {
	Comment                  *string `pulumi:"comment"`
	LookAhead                *int    `pulumi:"lookAhead"`
	LookBack                 *int    `pulumi:"lookBack"`
	Name                     *string `pulumi:"name"`
	Pattern                  *string `pulumi:"pattern"`
	Transform                *string `pulumi:"transform"`
	Vdomparam                *string `pulumi:"vdomparam"`
	Verify                   *string `pulumi:"verify"`
	VerifyTransformedPattern *string `pulumi:"verifyTransformedPattern"`
}

// The set of arguments for constructing a DlpDataType resource.
type DlpDataTypeArgs struct {
	Comment                  pulumi.StringPtrInput
	LookAhead                pulumi.IntPtrInput
	LookBack                 pulumi.IntPtrInput
	Name                     pulumi.StringPtrInput
	Pattern                  pulumi.StringPtrInput
	Transform                pulumi.StringPtrInput
	Vdomparam                pulumi.StringPtrInput
	Verify                   pulumi.StringPtrInput
	VerifyTransformedPattern pulumi.StringPtrInput
}

func (DlpDataTypeArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*dlpDataTypeArgs)(nil)).Elem()
}

type DlpDataTypeInput interface {
	pulumi.Input

	ToDlpDataTypeOutput() DlpDataTypeOutput
	ToDlpDataTypeOutputWithContext(ctx context.Context) DlpDataTypeOutput
}

func (*DlpDataType) ElementType() reflect.Type {
	return reflect.TypeOf((**DlpDataType)(nil)).Elem()
}

func (i *DlpDataType) ToDlpDataTypeOutput() DlpDataTypeOutput {
	return i.ToDlpDataTypeOutputWithContext(context.Background())
}

func (i *DlpDataType) ToDlpDataTypeOutputWithContext(ctx context.Context) DlpDataTypeOutput {
	return pulumi.ToOutputWithContext(ctx, i).(DlpDataTypeOutput)
}

// DlpDataTypeArrayInput is an input type that accepts DlpDataTypeArray and DlpDataTypeArrayOutput values.
// You can construct a concrete instance of `DlpDataTypeArrayInput` via:
//
//	DlpDataTypeArray{ DlpDataTypeArgs{...} }
type DlpDataTypeArrayInput interface {
	pulumi.Input

	ToDlpDataTypeArrayOutput() DlpDataTypeArrayOutput
	ToDlpDataTypeArrayOutputWithContext(context.Context) DlpDataTypeArrayOutput
}

type DlpDataTypeArray []DlpDataTypeInput

func (DlpDataTypeArray) ElementType() reflect.Type {
	return reflect.TypeOf((*[]*DlpDataType)(nil)).Elem()
}

func (i DlpDataTypeArray) ToDlpDataTypeArrayOutput() DlpDataTypeArrayOutput {
	return i.ToDlpDataTypeArrayOutputWithContext(context.Background())
}

func (i DlpDataTypeArray) ToDlpDataTypeArrayOutputWithContext(ctx context.Context) DlpDataTypeArrayOutput {
	return pulumi.ToOutputWithContext(ctx, i).(DlpDataTypeArrayOutput)
}

// DlpDataTypeMapInput is an input type that accepts DlpDataTypeMap and DlpDataTypeMapOutput values.
// You can construct a concrete instance of `DlpDataTypeMapInput` via:
//
//	DlpDataTypeMap{ "key": DlpDataTypeArgs{...} }
type DlpDataTypeMapInput interface {
	pulumi.Input

	ToDlpDataTypeMapOutput() DlpDataTypeMapOutput
	ToDlpDataTypeMapOutputWithContext(context.Context) DlpDataTypeMapOutput
}

type DlpDataTypeMap map[string]DlpDataTypeInput

func (DlpDataTypeMap) ElementType() reflect.Type {
	return reflect.TypeOf((*map[string]*DlpDataType)(nil)).Elem()
}

func (i DlpDataTypeMap) ToDlpDataTypeMapOutput() DlpDataTypeMapOutput {
	return i.ToDlpDataTypeMapOutputWithContext(context.Background())
}

func (i DlpDataTypeMap) ToDlpDataTypeMapOutputWithContext(ctx context.Context) DlpDataTypeMapOutput {
	return pulumi.ToOutputWithContext(ctx, i).(DlpDataTypeMapOutput)
}

type DlpDataTypeOutput struct{ *pulumi.OutputState }

func (DlpDataTypeOutput) ElementType() reflect.Type {
	return reflect.TypeOf((**DlpDataType)(nil)).Elem()
}

func (o DlpDataTypeOutput) ToDlpDataTypeOutput() DlpDataTypeOutput {
	return o
}

func (o DlpDataTypeOutput) ToDlpDataTypeOutputWithContext(ctx context.Context) DlpDataTypeOutput {
	return o
}

func (o DlpDataTypeOutput) Comment() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *DlpDataType) pulumi.StringPtrOutput { return v.Comment }).(pulumi.StringPtrOutput)
}

func (o DlpDataTypeOutput) LookAhead() pulumi.IntOutput {
	return o.ApplyT(func(v *DlpDataType) pulumi.IntOutput { return v.LookAhead }).(pulumi.IntOutput)
}

func (o DlpDataTypeOutput) LookBack() pulumi.IntOutput {
	return o.ApplyT(func(v *DlpDataType) pulumi.IntOutput { return v.LookBack }).(pulumi.IntOutput)
}

func (o DlpDataTypeOutput) Name() pulumi.StringOutput {
	return o.ApplyT(func(v *DlpDataType) pulumi.StringOutput { return v.Name }).(pulumi.StringOutput)
}

func (o DlpDataTypeOutput) Pattern() pulumi.StringOutput {
	return o.ApplyT(func(v *DlpDataType) pulumi.StringOutput { return v.Pattern }).(pulumi.StringOutput)
}

func (o DlpDataTypeOutput) Transform() pulumi.StringOutput {
	return o.ApplyT(func(v *DlpDataType) pulumi.StringOutput { return v.Transform }).(pulumi.StringOutput)
}

func (o DlpDataTypeOutput) Vdomparam() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *DlpDataType) pulumi.StringPtrOutput { return v.Vdomparam }).(pulumi.StringPtrOutput)
}

func (o DlpDataTypeOutput) Verify() pulumi.StringOutput {
	return o.ApplyT(func(v *DlpDataType) pulumi.StringOutput { return v.Verify }).(pulumi.StringOutput)
}

func (o DlpDataTypeOutput) VerifyTransformedPattern() pulumi.StringOutput {
	return o.ApplyT(func(v *DlpDataType) pulumi.StringOutput { return v.VerifyTransformedPattern }).(pulumi.StringOutput)
}

type DlpDataTypeArrayOutput struct{ *pulumi.OutputState }

func (DlpDataTypeArrayOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*[]*DlpDataType)(nil)).Elem()
}

func (o DlpDataTypeArrayOutput) ToDlpDataTypeArrayOutput() DlpDataTypeArrayOutput {
	return o
}

func (o DlpDataTypeArrayOutput) ToDlpDataTypeArrayOutputWithContext(ctx context.Context) DlpDataTypeArrayOutput {
	return o
}

func (o DlpDataTypeArrayOutput) Index(i pulumi.IntInput) DlpDataTypeOutput {
	return pulumi.All(o, i).ApplyT(func(vs []interface{}) *DlpDataType {
		return vs[0].([]*DlpDataType)[vs[1].(int)]
	}).(DlpDataTypeOutput)
}

type DlpDataTypeMapOutput struct{ *pulumi.OutputState }

func (DlpDataTypeMapOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*map[string]*DlpDataType)(nil)).Elem()
}

func (o DlpDataTypeMapOutput) ToDlpDataTypeMapOutput() DlpDataTypeMapOutput {
	return o
}

func (o DlpDataTypeMapOutput) ToDlpDataTypeMapOutputWithContext(ctx context.Context) DlpDataTypeMapOutput {
	return o
}

func (o DlpDataTypeMapOutput) MapIndex(k pulumi.StringInput) DlpDataTypeOutput {
	return pulumi.All(o, k).ApplyT(func(vs []interface{}) *DlpDataType {
		return vs[0].(map[string]*DlpDataType)[vs[1].(string)]
	}).(DlpDataTypeOutput)
}

func init() {
	pulumi.RegisterInputType(reflect.TypeOf((*DlpDataTypeInput)(nil)).Elem(), &DlpDataType{})
	pulumi.RegisterInputType(reflect.TypeOf((*DlpDataTypeArrayInput)(nil)).Elem(), DlpDataTypeArray{})
	pulumi.RegisterInputType(reflect.TypeOf((*DlpDataTypeMapInput)(nil)).Elem(), DlpDataTypeMap{})
	pulumi.RegisterOutputType(DlpDataTypeOutput{})
	pulumi.RegisterOutputType(DlpDataTypeArrayOutput{})
	pulumi.RegisterOutputType(DlpDataTypeMapOutput{})
}
