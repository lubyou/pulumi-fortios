// Code generated by the Pulumi Terraform Bridge (tfgen) Tool DO NOT EDIT.
// *** WARNING: Do not edit by hand unless you're certain you know what you are doing! ***

package fortios

import (
	"context"
	"reflect"

	"github.com/lubyou/pulumi-fortios/sdk/go/fortios/internal"
	"github.com/pulumi/pulumi/sdk/v3/go/pulumi"
	"github.com/pulumi/pulumi/sdk/v3/go/pulumix"
)

type EmailfilterDnsbl struct {
	pulumi.CustomResourceState

	Comment             pulumi.StringPtrOutput           `pulumi:"comment"`
	DynamicSortSubtable pulumi.StringPtrOutput           `pulumi:"dynamicSortSubtable"`
	Entries             EmailfilterDnsblEntryArrayOutput `pulumi:"entries"`
	Fosid               pulumi.IntOutput                 `pulumi:"fosid"`
	GetAllTables        pulumi.StringPtrOutput           `pulumi:"getAllTables"`
	Name                pulumi.StringOutput              `pulumi:"name"`
	Vdomparam           pulumi.StringPtrOutput           `pulumi:"vdomparam"`
}

// NewEmailfilterDnsbl registers a new resource with the given unique name, arguments, and options.
func NewEmailfilterDnsbl(ctx *pulumi.Context,
	name string, args *EmailfilterDnsblArgs, opts ...pulumi.ResourceOption) (*EmailfilterDnsbl, error) {
	if args == nil {
		args = &EmailfilterDnsblArgs{}
	}

	opts = internal.PkgResourceDefaultOpts(opts)
	var resource EmailfilterDnsbl
	err := ctx.RegisterResource("fortios:index/emailfilterDnsbl:EmailfilterDnsbl", name, args, &resource, opts...)
	if err != nil {
		return nil, err
	}
	return &resource, nil
}

// GetEmailfilterDnsbl gets an existing EmailfilterDnsbl resource's state with the given name, ID, and optional
// state properties that are used to uniquely qualify the lookup (nil if not required).
func GetEmailfilterDnsbl(ctx *pulumi.Context,
	name string, id pulumi.IDInput, state *EmailfilterDnsblState, opts ...pulumi.ResourceOption) (*EmailfilterDnsbl, error) {
	var resource EmailfilterDnsbl
	err := ctx.ReadResource("fortios:index/emailfilterDnsbl:EmailfilterDnsbl", name, id, state, &resource, opts...)
	if err != nil {
		return nil, err
	}
	return &resource, nil
}

// Input properties used for looking up and filtering EmailfilterDnsbl resources.
type emailfilterDnsblState struct {
	Comment             *string                 `pulumi:"comment"`
	DynamicSortSubtable *string                 `pulumi:"dynamicSortSubtable"`
	Entries             []EmailfilterDnsblEntry `pulumi:"entries"`
	Fosid               *int                    `pulumi:"fosid"`
	GetAllTables        *string                 `pulumi:"getAllTables"`
	Name                *string                 `pulumi:"name"`
	Vdomparam           *string                 `pulumi:"vdomparam"`
}

type EmailfilterDnsblState struct {
	Comment             pulumi.StringPtrInput
	DynamicSortSubtable pulumi.StringPtrInput
	Entries             EmailfilterDnsblEntryArrayInput
	Fosid               pulumi.IntPtrInput
	GetAllTables        pulumi.StringPtrInput
	Name                pulumi.StringPtrInput
	Vdomparam           pulumi.StringPtrInput
}

func (EmailfilterDnsblState) ElementType() reflect.Type {
	return reflect.TypeOf((*emailfilterDnsblState)(nil)).Elem()
}

type emailfilterDnsblArgs struct {
	Comment             *string                 `pulumi:"comment"`
	DynamicSortSubtable *string                 `pulumi:"dynamicSortSubtable"`
	Entries             []EmailfilterDnsblEntry `pulumi:"entries"`
	Fosid               *int                    `pulumi:"fosid"`
	GetAllTables        *string                 `pulumi:"getAllTables"`
	Name                *string                 `pulumi:"name"`
	Vdomparam           *string                 `pulumi:"vdomparam"`
}

// The set of arguments for constructing a EmailfilterDnsbl resource.
type EmailfilterDnsblArgs struct {
	Comment             pulumi.StringPtrInput
	DynamicSortSubtable pulumi.StringPtrInput
	Entries             EmailfilterDnsblEntryArrayInput
	Fosid               pulumi.IntPtrInput
	GetAllTables        pulumi.StringPtrInput
	Name                pulumi.StringPtrInput
	Vdomparam           pulumi.StringPtrInput
}

func (EmailfilterDnsblArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*emailfilterDnsblArgs)(nil)).Elem()
}

type EmailfilterDnsblInput interface {
	pulumi.Input

	ToEmailfilterDnsblOutput() EmailfilterDnsblOutput
	ToEmailfilterDnsblOutputWithContext(ctx context.Context) EmailfilterDnsblOutput
}

func (*EmailfilterDnsbl) ElementType() reflect.Type {
	return reflect.TypeOf((**EmailfilterDnsbl)(nil)).Elem()
}

func (i *EmailfilterDnsbl) ToEmailfilterDnsblOutput() EmailfilterDnsblOutput {
	return i.ToEmailfilterDnsblOutputWithContext(context.Background())
}

func (i *EmailfilterDnsbl) ToEmailfilterDnsblOutputWithContext(ctx context.Context) EmailfilterDnsblOutput {
	return pulumi.ToOutputWithContext(ctx, i).(EmailfilterDnsblOutput)
}

func (i *EmailfilterDnsbl) ToOutput(ctx context.Context) pulumix.Output[*EmailfilterDnsbl] {
	return pulumix.Output[*EmailfilterDnsbl]{
		OutputState: i.ToEmailfilterDnsblOutputWithContext(ctx).OutputState,
	}
}

// EmailfilterDnsblArrayInput is an input type that accepts EmailfilterDnsblArray and EmailfilterDnsblArrayOutput values.
// You can construct a concrete instance of `EmailfilterDnsblArrayInput` via:
//
//	EmailfilterDnsblArray{ EmailfilterDnsblArgs{...} }
type EmailfilterDnsblArrayInput interface {
	pulumi.Input

	ToEmailfilterDnsblArrayOutput() EmailfilterDnsblArrayOutput
	ToEmailfilterDnsblArrayOutputWithContext(context.Context) EmailfilterDnsblArrayOutput
}

type EmailfilterDnsblArray []EmailfilterDnsblInput

func (EmailfilterDnsblArray) ElementType() reflect.Type {
	return reflect.TypeOf((*[]*EmailfilterDnsbl)(nil)).Elem()
}

func (i EmailfilterDnsblArray) ToEmailfilterDnsblArrayOutput() EmailfilterDnsblArrayOutput {
	return i.ToEmailfilterDnsblArrayOutputWithContext(context.Background())
}

func (i EmailfilterDnsblArray) ToEmailfilterDnsblArrayOutputWithContext(ctx context.Context) EmailfilterDnsblArrayOutput {
	return pulumi.ToOutputWithContext(ctx, i).(EmailfilterDnsblArrayOutput)
}

func (i EmailfilterDnsblArray) ToOutput(ctx context.Context) pulumix.Output[[]*EmailfilterDnsbl] {
	return pulumix.Output[[]*EmailfilterDnsbl]{
		OutputState: i.ToEmailfilterDnsblArrayOutputWithContext(ctx).OutputState,
	}
}

// EmailfilterDnsblMapInput is an input type that accepts EmailfilterDnsblMap and EmailfilterDnsblMapOutput values.
// You can construct a concrete instance of `EmailfilterDnsblMapInput` via:
//
//	EmailfilterDnsblMap{ "key": EmailfilterDnsblArgs{...} }
type EmailfilterDnsblMapInput interface {
	pulumi.Input

	ToEmailfilterDnsblMapOutput() EmailfilterDnsblMapOutput
	ToEmailfilterDnsblMapOutputWithContext(context.Context) EmailfilterDnsblMapOutput
}

type EmailfilterDnsblMap map[string]EmailfilterDnsblInput

func (EmailfilterDnsblMap) ElementType() reflect.Type {
	return reflect.TypeOf((*map[string]*EmailfilterDnsbl)(nil)).Elem()
}

func (i EmailfilterDnsblMap) ToEmailfilterDnsblMapOutput() EmailfilterDnsblMapOutput {
	return i.ToEmailfilterDnsblMapOutputWithContext(context.Background())
}

func (i EmailfilterDnsblMap) ToEmailfilterDnsblMapOutputWithContext(ctx context.Context) EmailfilterDnsblMapOutput {
	return pulumi.ToOutputWithContext(ctx, i).(EmailfilterDnsblMapOutput)
}

func (i EmailfilterDnsblMap) ToOutput(ctx context.Context) pulumix.Output[map[string]*EmailfilterDnsbl] {
	return pulumix.Output[map[string]*EmailfilterDnsbl]{
		OutputState: i.ToEmailfilterDnsblMapOutputWithContext(ctx).OutputState,
	}
}

type EmailfilterDnsblOutput struct{ *pulumi.OutputState }

func (EmailfilterDnsblOutput) ElementType() reflect.Type {
	return reflect.TypeOf((**EmailfilterDnsbl)(nil)).Elem()
}

func (o EmailfilterDnsblOutput) ToEmailfilterDnsblOutput() EmailfilterDnsblOutput {
	return o
}

func (o EmailfilterDnsblOutput) ToEmailfilterDnsblOutputWithContext(ctx context.Context) EmailfilterDnsblOutput {
	return o
}

func (o EmailfilterDnsblOutput) ToOutput(ctx context.Context) pulumix.Output[*EmailfilterDnsbl] {
	return pulumix.Output[*EmailfilterDnsbl]{
		OutputState: o.OutputState,
	}
}

func (o EmailfilterDnsblOutput) Comment() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *EmailfilterDnsbl) pulumi.StringPtrOutput { return v.Comment }).(pulumi.StringPtrOutput)
}

func (o EmailfilterDnsblOutput) DynamicSortSubtable() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *EmailfilterDnsbl) pulumi.StringPtrOutput { return v.DynamicSortSubtable }).(pulumi.StringPtrOutput)
}

func (o EmailfilterDnsblOutput) Entries() EmailfilterDnsblEntryArrayOutput {
	return o.ApplyT(func(v *EmailfilterDnsbl) EmailfilterDnsblEntryArrayOutput { return v.Entries }).(EmailfilterDnsblEntryArrayOutput)
}

func (o EmailfilterDnsblOutput) Fosid() pulumi.IntOutput {
	return o.ApplyT(func(v *EmailfilterDnsbl) pulumi.IntOutput { return v.Fosid }).(pulumi.IntOutput)
}

func (o EmailfilterDnsblOutput) GetAllTables() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *EmailfilterDnsbl) pulumi.StringPtrOutput { return v.GetAllTables }).(pulumi.StringPtrOutput)
}

func (o EmailfilterDnsblOutput) Name() pulumi.StringOutput {
	return o.ApplyT(func(v *EmailfilterDnsbl) pulumi.StringOutput { return v.Name }).(pulumi.StringOutput)
}

func (o EmailfilterDnsblOutput) Vdomparam() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *EmailfilterDnsbl) pulumi.StringPtrOutput { return v.Vdomparam }).(pulumi.StringPtrOutput)
}

type EmailfilterDnsblArrayOutput struct{ *pulumi.OutputState }

func (EmailfilterDnsblArrayOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*[]*EmailfilterDnsbl)(nil)).Elem()
}

func (o EmailfilterDnsblArrayOutput) ToEmailfilterDnsblArrayOutput() EmailfilterDnsblArrayOutput {
	return o
}

func (o EmailfilterDnsblArrayOutput) ToEmailfilterDnsblArrayOutputWithContext(ctx context.Context) EmailfilterDnsblArrayOutput {
	return o
}

func (o EmailfilterDnsblArrayOutput) ToOutput(ctx context.Context) pulumix.Output[[]*EmailfilterDnsbl] {
	return pulumix.Output[[]*EmailfilterDnsbl]{
		OutputState: o.OutputState,
	}
}

func (o EmailfilterDnsblArrayOutput) Index(i pulumi.IntInput) EmailfilterDnsblOutput {
	return pulumi.All(o, i).ApplyT(func(vs []interface{}) *EmailfilterDnsbl {
		return vs[0].([]*EmailfilterDnsbl)[vs[1].(int)]
	}).(EmailfilterDnsblOutput)
}

type EmailfilterDnsblMapOutput struct{ *pulumi.OutputState }

func (EmailfilterDnsblMapOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*map[string]*EmailfilterDnsbl)(nil)).Elem()
}

func (o EmailfilterDnsblMapOutput) ToEmailfilterDnsblMapOutput() EmailfilterDnsblMapOutput {
	return o
}

func (o EmailfilterDnsblMapOutput) ToEmailfilterDnsblMapOutputWithContext(ctx context.Context) EmailfilterDnsblMapOutput {
	return o
}

func (o EmailfilterDnsblMapOutput) ToOutput(ctx context.Context) pulumix.Output[map[string]*EmailfilterDnsbl] {
	return pulumix.Output[map[string]*EmailfilterDnsbl]{
		OutputState: o.OutputState,
	}
}

func (o EmailfilterDnsblMapOutput) MapIndex(k pulumi.StringInput) EmailfilterDnsblOutput {
	return pulumi.All(o, k).ApplyT(func(vs []interface{}) *EmailfilterDnsbl {
		return vs[0].(map[string]*EmailfilterDnsbl)[vs[1].(string)]
	}).(EmailfilterDnsblOutput)
}

func init() {
	pulumi.RegisterInputType(reflect.TypeOf((*EmailfilterDnsblInput)(nil)).Elem(), &EmailfilterDnsbl{})
	pulumi.RegisterInputType(reflect.TypeOf((*EmailfilterDnsblArrayInput)(nil)).Elem(), EmailfilterDnsblArray{})
	pulumi.RegisterInputType(reflect.TypeOf((*EmailfilterDnsblMapInput)(nil)).Elem(), EmailfilterDnsblMap{})
	pulumi.RegisterOutputType(EmailfilterDnsblOutput{})
	pulumi.RegisterOutputType(EmailfilterDnsblArrayOutput{})
	pulumi.RegisterOutputType(EmailfilterDnsblMapOutput{})
}
