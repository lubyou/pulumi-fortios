// *** WARNING: this file was generated by the Pulumi Terraform Bridge (tfgen) Tool. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

package fortios

import (
	"context"
	"reflect"

	"github.com/pulumi/pulumi/sdk/v3/go/pulumi"
)

// Configure central management.
//
// ## Example Usage
//
// ```go
// package main
//
// import (
// 	"github.com/lubyou/pulumi-fortios/sdk/go/fortios"
// 	"github.com/pulumi/pulumi/sdk/v3/go/pulumi"
// )
//
// func main() {
// 	pulumi.Run(func(ctx *pulumi.Context) error {
// 		_, err := fortios.NewSystemCentralManagement(ctx, "trname1", &fortios.SystemCentralManagementArgs{
// 			AllowMonitor:               pulumi.String("enable"),
// 			AllowPushConfiguration:     pulumi.String("enable"),
// 			AllowPushFirmware:          pulumi.String("enable"),
// 			AllowRemoteFirmwareUpgrade: pulumi.String("enable"),
// 			EncAlgorithm:               pulumi.String("high"),
// 			Fmg:                        pulumi.String("0.0.0.0"),
// 			FmgSourceIp6:               pulumi.String("::"),
// 			IncludeDefaultServers:      pulumi.String("enable"),
// 			Mode:                       pulumi.String("normal"),
// 			ScheduleConfigRestore:      pulumi.String("enable"),
// 			ScheduleScriptRestore:      pulumi.String("enable"),
// 			Type:                       pulumi.String("fortimanager"),
// 			Vdom:                       pulumi.String("root"),
// 		})
// 		if err != nil {
// 			return err
// 		}
// 		_, err = fortios.NewSystemCentralManagement(ctx, "trname2", &fortios.SystemCentralManagementArgs{
// 			AllowMonitor:               pulumi.String("enable"),
// 			AllowPushConfiguration:     pulumi.String("enable"),
// 			AllowPushFirmware:          pulumi.String("enable"),
// 			AllowRemoteFirmwareUpgrade: pulumi.String("enable"),
// 			EncAlgorithm:               pulumi.String("high"),
// 			Fmg:                        pulumi.String("\"192.168.52.177\""),
// 			IncludeDefaultServers:      pulumi.String("enable"),
// 			Mode:                       pulumi.String("normal"),
// 			Type:                       pulumi.String("fortimanager"),
// 			Vdom:                       pulumi.String("root"),
// 		})
// 		if err != nil {
// 			return err
// 		}
// 		return nil
// 	})
// }
// ```
//
// ## Import
//
// System CentralManagement can be imported using any of these accepted formats$ export "FORTIOS_IMPORT_TABLE"="true"
//
// ```sh
//  $ pulumi import fortios:index/systemCentralManagement:SystemCentralManagement labelname SystemCentralManagement
// ```
//
//  $ unset "FORTIOS_IMPORT_TABLE"
type SystemCentralManagement struct {
	pulumi.CustomResourceState

	// Enable/disable allowing the central management server to remotely monitor this FortiGate Valid values: `enable`, `disable`.
	AllowMonitor pulumi.StringOutput `pulumi:"allowMonitor"`
	// Enable/disable allowing the central management server to push configuration changes to this FortiGate. Valid values: `enable`, `disable`.
	AllowPushConfiguration pulumi.StringOutput `pulumi:"allowPushConfiguration"`
	// Enable/disable allowing the central management server to push firmware updates to this FortiGate. Valid values: `enable`, `disable`.
	AllowPushFirmware pulumi.StringOutput `pulumi:"allowPushFirmware"`
	// Enable/disable remotely upgrading the firmware on this FortiGate from the central management server. Valid values: `enable`, `disable`.
	AllowRemoteFirmwareUpgrade pulumi.StringOutput `pulumi:"allowRemoteFirmwareUpgrade"`
	// CA certificate to be used by FGFM protocol.
	CaCert pulumi.StringOutput `pulumi:"caCert"`
	// true or false, set this parameter to true when using dynamic forEach + toset to configure and sort sub-tables, please do not set this parameter when configuring static sub-tables.
	DynamicSortSubtable pulumi.StringPtrOutput `pulumi:"dynamicSortSubtable"`
	// Encryption strength for communications between the FortiGate and central management. Valid values: `default`, `high`, `low`.
	EncAlgorithm pulumi.StringOutput `pulumi:"encAlgorithm"`
	// IP address or FQDN of the FortiManager.
	Fmg pulumi.StringOutput `pulumi:"fmg"`
	// IPv4 source address that this FortiGate uses when communicating with FortiManager.
	FmgSourceIp pulumi.StringOutput `pulumi:"fmgSourceIp"`
	// IPv6 source address that this FortiGate uses when communicating with FortiManager.
	FmgSourceIp6 pulumi.StringOutput `pulumi:"fmgSourceIp6"`
	// Port used to communicate with FortiManager that is acting as a FortiGuard update server. Valid values: `8890`, `443`.
	FmgUpdatePort pulumi.StringOutput `pulumi:"fmgUpdatePort"`
	// Enable/disable inclusion of public FortiGuard servers in the override server list. Valid values: `enable`, `disable`.
	IncludeDefaultServers pulumi.StringOutput `pulumi:"includeDefaultServers"`
	// Specify outgoing interface to reach server.
	Interface pulumi.StringOutput `pulumi:"interface"`
	// Specify how to select outgoing interface to reach server. Valid values: `auto`, `sdwan`, `specify`.
	InterfaceSelectMethod pulumi.StringOutput `pulumi:"interfaceSelectMethod"`
	// Certificate to be used by FGFM protocol.
	LocalCert pulumi.StringOutput `pulumi:"localCert"`
	// Central management mode. Valid values: `normal`, `backup`.
	Mode pulumi.StringOutput `pulumi:"mode"`
	// Enable/disable allowing the central management server to restore the configuration of this FortiGate. Valid values: `enable`, `disable`.
	ScheduleConfigRestore pulumi.StringOutput `pulumi:"scheduleConfigRestore"`
	// Enable/disable allowing the central management server to restore the scripts stored on this FortiGate. Valid values: `enable`, `disable`.
	ScheduleScriptRestore pulumi.StringOutput `pulumi:"scheduleScriptRestore"`
	// Serial number.
	SerialNumber pulumi.StringOutput `pulumi:"serialNumber"`
	// Additional severs that the FortiGate can use for updates (for AV, IPS, updates) and ratings (for web filter and antispam ratings) servers. The structure of `serverList` block is documented below.
	ServerLists SystemCentralManagementServerListArrayOutput `pulumi:"serverLists"`
	// Central management type. Valid values: `fortimanager`, `fortiguard`, `none`.
	Type pulumi.StringOutput `pulumi:"type"`
	// Virtual domain (VDOM) name to use when communicating with FortiManager.
	Vdom pulumi.StringOutput `pulumi:"vdom"`
	// Specifies the vdom to which the resource will be applied when the FortiGate unit is running in VDOM mode. Only one vdom can be specified. If you want to inherit the vdom configuration of the provider, please do not set this parameter.
	Vdomparam pulumi.StringPtrOutput `pulumi:"vdomparam"`
}

// NewSystemCentralManagement registers a new resource with the given unique name, arguments, and options.
func NewSystemCentralManagement(ctx *pulumi.Context,
	name string, args *SystemCentralManagementArgs, opts ...pulumi.ResourceOption) (*SystemCentralManagement, error) {
	if args == nil {
		args = &SystemCentralManagementArgs{}
	}

	opts = pkgResourceDefaultOpts(opts)
	var resource SystemCentralManagement
	err := ctx.RegisterResource("fortios:index/systemCentralManagement:SystemCentralManagement", name, args, &resource, opts...)
	if err != nil {
		return nil, err
	}
	return &resource, nil
}

// GetSystemCentralManagement gets an existing SystemCentralManagement resource's state with the given name, ID, and optional
// state properties that are used to uniquely qualify the lookup (nil if not required).
func GetSystemCentralManagement(ctx *pulumi.Context,
	name string, id pulumi.IDInput, state *SystemCentralManagementState, opts ...pulumi.ResourceOption) (*SystemCentralManagement, error) {
	var resource SystemCentralManagement
	err := ctx.ReadResource("fortios:index/systemCentralManagement:SystemCentralManagement", name, id, state, &resource, opts...)
	if err != nil {
		return nil, err
	}
	return &resource, nil
}

// Input properties used for looking up and filtering SystemCentralManagement resources.
type systemCentralManagementState struct {
	// Enable/disable allowing the central management server to remotely monitor this FortiGate Valid values: `enable`, `disable`.
	AllowMonitor *string `pulumi:"allowMonitor"`
	// Enable/disable allowing the central management server to push configuration changes to this FortiGate. Valid values: `enable`, `disable`.
	AllowPushConfiguration *string `pulumi:"allowPushConfiguration"`
	// Enable/disable allowing the central management server to push firmware updates to this FortiGate. Valid values: `enable`, `disable`.
	AllowPushFirmware *string `pulumi:"allowPushFirmware"`
	// Enable/disable remotely upgrading the firmware on this FortiGate from the central management server. Valid values: `enable`, `disable`.
	AllowRemoteFirmwareUpgrade *string `pulumi:"allowRemoteFirmwareUpgrade"`
	// CA certificate to be used by FGFM protocol.
	CaCert *string `pulumi:"caCert"`
	// true or false, set this parameter to true when using dynamic forEach + toset to configure and sort sub-tables, please do not set this parameter when configuring static sub-tables.
	DynamicSortSubtable *string `pulumi:"dynamicSortSubtable"`
	// Encryption strength for communications between the FortiGate and central management. Valid values: `default`, `high`, `low`.
	EncAlgorithm *string `pulumi:"encAlgorithm"`
	// IP address or FQDN of the FortiManager.
	Fmg *string `pulumi:"fmg"`
	// IPv4 source address that this FortiGate uses when communicating with FortiManager.
	FmgSourceIp *string `pulumi:"fmgSourceIp"`
	// IPv6 source address that this FortiGate uses when communicating with FortiManager.
	FmgSourceIp6 *string `pulumi:"fmgSourceIp6"`
	// Port used to communicate with FortiManager that is acting as a FortiGuard update server. Valid values: `8890`, `443`.
	FmgUpdatePort *string `pulumi:"fmgUpdatePort"`
	// Enable/disable inclusion of public FortiGuard servers in the override server list. Valid values: `enable`, `disable`.
	IncludeDefaultServers *string `pulumi:"includeDefaultServers"`
	// Specify outgoing interface to reach server.
	Interface *string `pulumi:"interface"`
	// Specify how to select outgoing interface to reach server. Valid values: `auto`, `sdwan`, `specify`.
	InterfaceSelectMethod *string `pulumi:"interfaceSelectMethod"`
	// Certificate to be used by FGFM protocol.
	LocalCert *string `pulumi:"localCert"`
	// Central management mode. Valid values: `normal`, `backup`.
	Mode *string `pulumi:"mode"`
	// Enable/disable allowing the central management server to restore the configuration of this FortiGate. Valid values: `enable`, `disable`.
	ScheduleConfigRestore *string `pulumi:"scheduleConfigRestore"`
	// Enable/disable allowing the central management server to restore the scripts stored on this FortiGate. Valid values: `enable`, `disable`.
	ScheduleScriptRestore *string `pulumi:"scheduleScriptRestore"`
	// Serial number.
	SerialNumber *string `pulumi:"serialNumber"`
	// Additional severs that the FortiGate can use for updates (for AV, IPS, updates) and ratings (for web filter and antispam ratings) servers. The structure of `serverList` block is documented below.
	ServerLists []SystemCentralManagementServerList `pulumi:"serverLists"`
	// Central management type. Valid values: `fortimanager`, `fortiguard`, `none`.
	Type *string `pulumi:"type"`
	// Virtual domain (VDOM) name to use when communicating with FortiManager.
	Vdom *string `pulumi:"vdom"`
	// Specifies the vdom to which the resource will be applied when the FortiGate unit is running in VDOM mode. Only one vdom can be specified. If you want to inherit the vdom configuration of the provider, please do not set this parameter.
	Vdomparam *string `pulumi:"vdomparam"`
}

type SystemCentralManagementState struct {
	// Enable/disable allowing the central management server to remotely monitor this FortiGate Valid values: `enable`, `disable`.
	AllowMonitor pulumi.StringPtrInput
	// Enable/disable allowing the central management server to push configuration changes to this FortiGate. Valid values: `enable`, `disable`.
	AllowPushConfiguration pulumi.StringPtrInput
	// Enable/disable allowing the central management server to push firmware updates to this FortiGate. Valid values: `enable`, `disable`.
	AllowPushFirmware pulumi.StringPtrInput
	// Enable/disable remotely upgrading the firmware on this FortiGate from the central management server. Valid values: `enable`, `disable`.
	AllowRemoteFirmwareUpgrade pulumi.StringPtrInput
	// CA certificate to be used by FGFM protocol.
	CaCert pulumi.StringPtrInput
	// true or false, set this parameter to true when using dynamic forEach + toset to configure and sort sub-tables, please do not set this parameter when configuring static sub-tables.
	DynamicSortSubtable pulumi.StringPtrInput
	// Encryption strength for communications between the FortiGate and central management. Valid values: `default`, `high`, `low`.
	EncAlgorithm pulumi.StringPtrInput
	// IP address or FQDN of the FortiManager.
	Fmg pulumi.StringPtrInput
	// IPv4 source address that this FortiGate uses when communicating with FortiManager.
	FmgSourceIp pulumi.StringPtrInput
	// IPv6 source address that this FortiGate uses when communicating with FortiManager.
	FmgSourceIp6 pulumi.StringPtrInput
	// Port used to communicate with FortiManager that is acting as a FortiGuard update server. Valid values: `8890`, `443`.
	FmgUpdatePort pulumi.StringPtrInput
	// Enable/disable inclusion of public FortiGuard servers in the override server list. Valid values: `enable`, `disable`.
	IncludeDefaultServers pulumi.StringPtrInput
	// Specify outgoing interface to reach server.
	Interface pulumi.StringPtrInput
	// Specify how to select outgoing interface to reach server. Valid values: `auto`, `sdwan`, `specify`.
	InterfaceSelectMethod pulumi.StringPtrInput
	// Certificate to be used by FGFM protocol.
	LocalCert pulumi.StringPtrInput
	// Central management mode. Valid values: `normal`, `backup`.
	Mode pulumi.StringPtrInput
	// Enable/disable allowing the central management server to restore the configuration of this FortiGate. Valid values: `enable`, `disable`.
	ScheduleConfigRestore pulumi.StringPtrInput
	// Enable/disable allowing the central management server to restore the scripts stored on this FortiGate. Valid values: `enable`, `disable`.
	ScheduleScriptRestore pulumi.StringPtrInput
	// Serial number.
	SerialNumber pulumi.StringPtrInput
	// Additional severs that the FortiGate can use for updates (for AV, IPS, updates) and ratings (for web filter and antispam ratings) servers. The structure of `serverList` block is documented below.
	ServerLists SystemCentralManagementServerListArrayInput
	// Central management type. Valid values: `fortimanager`, `fortiguard`, `none`.
	Type pulumi.StringPtrInput
	// Virtual domain (VDOM) name to use when communicating with FortiManager.
	Vdom pulumi.StringPtrInput
	// Specifies the vdom to which the resource will be applied when the FortiGate unit is running in VDOM mode. Only one vdom can be specified. If you want to inherit the vdom configuration of the provider, please do not set this parameter.
	Vdomparam pulumi.StringPtrInput
}

func (SystemCentralManagementState) ElementType() reflect.Type {
	return reflect.TypeOf((*systemCentralManagementState)(nil)).Elem()
}

type systemCentralManagementArgs struct {
	// Enable/disable allowing the central management server to remotely monitor this FortiGate Valid values: `enable`, `disable`.
	AllowMonitor *string `pulumi:"allowMonitor"`
	// Enable/disable allowing the central management server to push configuration changes to this FortiGate. Valid values: `enable`, `disable`.
	AllowPushConfiguration *string `pulumi:"allowPushConfiguration"`
	// Enable/disable allowing the central management server to push firmware updates to this FortiGate. Valid values: `enable`, `disable`.
	AllowPushFirmware *string `pulumi:"allowPushFirmware"`
	// Enable/disable remotely upgrading the firmware on this FortiGate from the central management server. Valid values: `enable`, `disable`.
	AllowRemoteFirmwareUpgrade *string `pulumi:"allowRemoteFirmwareUpgrade"`
	// CA certificate to be used by FGFM protocol.
	CaCert *string `pulumi:"caCert"`
	// true or false, set this parameter to true when using dynamic forEach + toset to configure and sort sub-tables, please do not set this parameter when configuring static sub-tables.
	DynamicSortSubtable *string `pulumi:"dynamicSortSubtable"`
	// Encryption strength for communications between the FortiGate and central management. Valid values: `default`, `high`, `low`.
	EncAlgorithm *string `pulumi:"encAlgorithm"`
	// IP address or FQDN of the FortiManager.
	Fmg *string `pulumi:"fmg"`
	// IPv4 source address that this FortiGate uses when communicating with FortiManager.
	FmgSourceIp *string `pulumi:"fmgSourceIp"`
	// IPv6 source address that this FortiGate uses when communicating with FortiManager.
	FmgSourceIp6 *string `pulumi:"fmgSourceIp6"`
	// Port used to communicate with FortiManager that is acting as a FortiGuard update server. Valid values: `8890`, `443`.
	FmgUpdatePort *string `pulumi:"fmgUpdatePort"`
	// Enable/disable inclusion of public FortiGuard servers in the override server list. Valid values: `enable`, `disable`.
	IncludeDefaultServers *string `pulumi:"includeDefaultServers"`
	// Specify outgoing interface to reach server.
	Interface *string `pulumi:"interface"`
	// Specify how to select outgoing interface to reach server. Valid values: `auto`, `sdwan`, `specify`.
	InterfaceSelectMethod *string `pulumi:"interfaceSelectMethod"`
	// Certificate to be used by FGFM protocol.
	LocalCert *string `pulumi:"localCert"`
	// Central management mode. Valid values: `normal`, `backup`.
	Mode *string `pulumi:"mode"`
	// Enable/disable allowing the central management server to restore the configuration of this FortiGate. Valid values: `enable`, `disable`.
	ScheduleConfigRestore *string `pulumi:"scheduleConfigRestore"`
	// Enable/disable allowing the central management server to restore the scripts stored on this FortiGate. Valid values: `enable`, `disable`.
	ScheduleScriptRestore *string `pulumi:"scheduleScriptRestore"`
	// Serial number.
	SerialNumber *string `pulumi:"serialNumber"`
	// Additional severs that the FortiGate can use for updates (for AV, IPS, updates) and ratings (for web filter and antispam ratings) servers. The structure of `serverList` block is documented below.
	ServerLists []SystemCentralManagementServerList `pulumi:"serverLists"`
	// Central management type. Valid values: `fortimanager`, `fortiguard`, `none`.
	Type *string `pulumi:"type"`
	// Virtual domain (VDOM) name to use when communicating with FortiManager.
	Vdom *string `pulumi:"vdom"`
	// Specifies the vdom to which the resource will be applied when the FortiGate unit is running in VDOM mode. Only one vdom can be specified. If you want to inherit the vdom configuration of the provider, please do not set this parameter.
	Vdomparam *string `pulumi:"vdomparam"`
}

// The set of arguments for constructing a SystemCentralManagement resource.
type SystemCentralManagementArgs struct {
	// Enable/disable allowing the central management server to remotely monitor this FortiGate Valid values: `enable`, `disable`.
	AllowMonitor pulumi.StringPtrInput
	// Enable/disable allowing the central management server to push configuration changes to this FortiGate. Valid values: `enable`, `disable`.
	AllowPushConfiguration pulumi.StringPtrInput
	// Enable/disable allowing the central management server to push firmware updates to this FortiGate. Valid values: `enable`, `disable`.
	AllowPushFirmware pulumi.StringPtrInput
	// Enable/disable remotely upgrading the firmware on this FortiGate from the central management server. Valid values: `enable`, `disable`.
	AllowRemoteFirmwareUpgrade pulumi.StringPtrInput
	// CA certificate to be used by FGFM protocol.
	CaCert pulumi.StringPtrInput
	// true or false, set this parameter to true when using dynamic forEach + toset to configure and sort sub-tables, please do not set this parameter when configuring static sub-tables.
	DynamicSortSubtable pulumi.StringPtrInput
	// Encryption strength for communications between the FortiGate and central management. Valid values: `default`, `high`, `low`.
	EncAlgorithm pulumi.StringPtrInput
	// IP address or FQDN of the FortiManager.
	Fmg pulumi.StringPtrInput
	// IPv4 source address that this FortiGate uses when communicating with FortiManager.
	FmgSourceIp pulumi.StringPtrInput
	// IPv6 source address that this FortiGate uses when communicating with FortiManager.
	FmgSourceIp6 pulumi.StringPtrInput
	// Port used to communicate with FortiManager that is acting as a FortiGuard update server. Valid values: `8890`, `443`.
	FmgUpdatePort pulumi.StringPtrInput
	// Enable/disable inclusion of public FortiGuard servers in the override server list. Valid values: `enable`, `disable`.
	IncludeDefaultServers pulumi.StringPtrInput
	// Specify outgoing interface to reach server.
	Interface pulumi.StringPtrInput
	// Specify how to select outgoing interface to reach server. Valid values: `auto`, `sdwan`, `specify`.
	InterfaceSelectMethod pulumi.StringPtrInput
	// Certificate to be used by FGFM protocol.
	LocalCert pulumi.StringPtrInput
	// Central management mode. Valid values: `normal`, `backup`.
	Mode pulumi.StringPtrInput
	// Enable/disable allowing the central management server to restore the configuration of this FortiGate. Valid values: `enable`, `disable`.
	ScheduleConfigRestore pulumi.StringPtrInput
	// Enable/disable allowing the central management server to restore the scripts stored on this FortiGate. Valid values: `enable`, `disable`.
	ScheduleScriptRestore pulumi.StringPtrInput
	// Serial number.
	SerialNumber pulumi.StringPtrInput
	// Additional severs that the FortiGate can use for updates (for AV, IPS, updates) and ratings (for web filter and antispam ratings) servers. The structure of `serverList` block is documented below.
	ServerLists SystemCentralManagementServerListArrayInput
	// Central management type. Valid values: `fortimanager`, `fortiguard`, `none`.
	Type pulumi.StringPtrInput
	// Virtual domain (VDOM) name to use when communicating with FortiManager.
	Vdom pulumi.StringPtrInput
	// Specifies the vdom to which the resource will be applied when the FortiGate unit is running in VDOM mode. Only one vdom can be specified. If you want to inherit the vdom configuration of the provider, please do not set this parameter.
	Vdomparam pulumi.StringPtrInput
}

func (SystemCentralManagementArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*systemCentralManagementArgs)(nil)).Elem()
}

type SystemCentralManagementInput interface {
	pulumi.Input

	ToSystemCentralManagementOutput() SystemCentralManagementOutput
	ToSystemCentralManagementOutputWithContext(ctx context.Context) SystemCentralManagementOutput
}

func (*SystemCentralManagement) ElementType() reflect.Type {
	return reflect.TypeOf((**SystemCentralManagement)(nil)).Elem()
}

func (i *SystemCentralManagement) ToSystemCentralManagementOutput() SystemCentralManagementOutput {
	return i.ToSystemCentralManagementOutputWithContext(context.Background())
}

func (i *SystemCentralManagement) ToSystemCentralManagementOutputWithContext(ctx context.Context) SystemCentralManagementOutput {
	return pulumi.ToOutputWithContext(ctx, i).(SystemCentralManagementOutput)
}

// SystemCentralManagementArrayInput is an input type that accepts SystemCentralManagementArray and SystemCentralManagementArrayOutput values.
// You can construct a concrete instance of `SystemCentralManagementArrayInput` via:
//
//          SystemCentralManagementArray{ SystemCentralManagementArgs{...} }
type SystemCentralManagementArrayInput interface {
	pulumi.Input

	ToSystemCentralManagementArrayOutput() SystemCentralManagementArrayOutput
	ToSystemCentralManagementArrayOutputWithContext(context.Context) SystemCentralManagementArrayOutput
}

type SystemCentralManagementArray []SystemCentralManagementInput

func (SystemCentralManagementArray) ElementType() reflect.Type {
	return reflect.TypeOf((*[]*SystemCentralManagement)(nil)).Elem()
}

func (i SystemCentralManagementArray) ToSystemCentralManagementArrayOutput() SystemCentralManagementArrayOutput {
	return i.ToSystemCentralManagementArrayOutputWithContext(context.Background())
}

func (i SystemCentralManagementArray) ToSystemCentralManagementArrayOutputWithContext(ctx context.Context) SystemCentralManagementArrayOutput {
	return pulumi.ToOutputWithContext(ctx, i).(SystemCentralManagementArrayOutput)
}

// SystemCentralManagementMapInput is an input type that accepts SystemCentralManagementMap and SystemCentralManagementMapOutput values.
// You can construct a concrete instance of `SystemCentralManagementMapInput` via:
//
//          SystemCentralManagementMap{ "key": SystemCentralManagementArgs{...} }
type SystemCentralManagementMapInput interface {
	pulumi.Input

	ToSystemCentralManagementMapOutput() SystemCentralManagementMapOutput
	ToSystemCentralManagementMapOutputWithContext(context.Context) SystemCentralManagementMapOutput
}

type SystemCentralManagementMap map[string]SystemCentralManagementInput

func (SystemCentralManagementMap) ElementType() reflect.Type {
	return reflect.TypeOf((*map[string]*SystemCentralManagement)(nil)).Elem()
}

func (i SystemCentralManagementMap) ToSystemCentralManagementMapOutput() SystemCentralManagementMapOutput {
	return i.ToSystemCentralManagementMapOutputWithContext(context.Background())
}

func (i SystemCentralManagementMap) ToSystemCentralManagementMapOutputWithContext(ctx context.Context) SystemCentralManagementMapOutput {
	return pulumi.ToOutputWithContext(ctx, i).(SystemCentralManagementMapOutput)
}

type SystemCentralManagementOutput struct{ *pulumi.OutputState }

func (SystemCentralManagementOutput) ElementType() reflect.Type {
	return reflect.TypeOf((**SystemCentralManagement)(nil)).Elem()
}

func (o SystemCentralManagementOutput) ToSystemCentralManagementOutput() SystemCentralManagementOutput {
	return o
}

func (o SystemCentralManagementOutput) ToSystemCentralManagementOutputWithContext(ctx context.Context) SystemCentralManagementOutput {
	return o
}

type SystemCentralManagementArrayOutput struct{ *pulumi.OutputState }

func (SystemCentralManagementArrayOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*[]*SystemCentralManagement)(nil)).Elem()
}

func (o SystemCentralManagementArrayOutput) ToSystemCentralManagementArrayOutput() SystemCentralManagementArrayOutput {
	return o
}

func (o SystemCentralManagementArrayOutput) ToSystemCentralManagementArrayOutputWithContext(ctx context.Context) SystemCentralManagementArrayOutput {
	return o
}

func (o SystemCentralManagementArrayOutput) Index(i pulumi.IntInput) SystemCentralManagementOutput {
	return pulumi.All(o, i).ApplyT(func(vs []interface{}) *SystemCentralManagement {
		return vs[0].([]*SystemCentralManagement)[vs[1].(int)]
	}).(SystemCentralManagementOutput)
}

type SystemCentralManagementMapOutput struct{ *pulumi.OutputState }

func (SystemCentralManagementMapOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*map[string]*SystemCentralManagement)(nil)).Elem()
}

func (o SystemCentralManagementMapOutput) ToSystemCentralManagementMapOutput() SystemCentralManagementMapOutput {
	return o
}

func (o SystemCentralManagementMapOutput) ToSystemCentralManagementMapOutputWithContext(ctx context.Context) SystemCentralManagementMapOutput {
	return o
}

func (o SystemCentralManagementMapOutput) MapIndex(k pulumi.StringInput) SystemCentralManagementOutput {
	return pulumi.All(o, k).ApplyT(func(vs []interface{}) *SystemCentralManagement {
		return vs[0].(map[string]*SystemCentralManagement)[vs[1].(string)]
	}).(SystemCentralManagementOutput)
}

func init() {
	pulumi.RegisterInputType(reflect.TypeOf((*SystemCentralManagementInput)(nil)).Elem(), &SystemCentralManagement{})
	pulumi.RegisterInputType(reflect.TypeOf((*SystemCentralManagementArrayInput)(nil)).Elem(), SystemCentralManagementArray{})
	pulumi.RegisterInputType(reflect.TypeOf((*SystemCentralManagementMapInput)(nil)).Elem(), SystemCentralManagementMap{})
	pulumi.RegisterOutputType(SystemCentralManagementOutput{})
	pulumi.RegisterOutputType(SystemCentralManagementArrayOutput{})
	pulumi.RegisterOutputType(SystemCentralManagementMapOutput{})
}
