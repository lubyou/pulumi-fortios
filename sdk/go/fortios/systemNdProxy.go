// Code generated by the Pulumi Terraform Bridge (tfgen) Tool DO NOT EDIT.
// *** WARNING: Do not edit by hand unless you're certain you know what you are doing! ***

package fortios

import (
	"context"
	"reflect"

	"github.com/pulumi/pulumi/sdk/v3/go/pulumi"
)

type SystemNdProxy struct {
	pulumi.CustomResourceState

	DynamicSortSubtable pulumi.StringPtrOutput         `pulumi:"dynamicSortSubtable"`
	Members             SystemNdProxyMemberArrayOutput `pulumi:"members"`
	Status              pulumi.StringOutput            `pulumi:"status"`
	Vdomparam           pulumi.StringPtrOutput         `pulumi:"vdomparam"`
}

// NewSystemNdProxy registers a new resource with the given unique name, arguments, and options.
func NewSystemNdProxy(ctx *pulumi.Context,
	name string, args *SystemNdProxyArgs, opts ...pulumi.ResourceOption) (*SystemNdProxy, error) {
	if args == nil {
		args = &SystemNdProxyArgs{}
	}

	opts = pkgResourceDefaultOpts(opts)
	var resource SystemNdProxy
	err := ctx.RegisterResource("fortios:index/systemNdProxy:SystemNdProxy", name, args, &resource, opts...)
	if err != nil {
		return nil, err
	}
	return &resource, nil
}

// GetSystemNdProxy gets an existing SystemNdProxy resource's state with the given name, ID, and optional
// state properties that are used to uniquely qualify the lookup (nil if not required).
func GetSystemNdProxy(ctx *pulumi.Context,
	name string, id pulumi.IDInput, state *SystemNdProxyState, opts ...pulumi.ResourceOption) (*SystemNdProxy, error) {
	var resource SystemNdProxy
	err := ctx.ReadResource("fortios:index/systemNdProxy:SystemNdProxy", name, id, state, &resource, opts...)
	if err != nil {
		return nil, err
	}
	return &resource, nil
}

// Input properties used for looking up and filtering SystemNdProxy resources.
type systemNdProxyState struct {
	DynamicSortSubtable *string               `pulumi:"dynamicSortSubtable"`
	Members             []SystemNdProxyMember `pulumi:"members"`
	Status              *string               `pulumi:"status"`
	Vdomparam           *string               `pulumi:"vdomparam"`
}

type SystemNdProxyState struct {
	DynamicSortSubtable pulumi.StringPtrInput
	Members             SystemNdProxyMemberArrayInput
	Status              pulumi.StringPtrInput
	Vdomparam           pulumi.StringPtrInput
}

func (SystemNdProxyState) ElementType() reflect.Type {
	return reflect.TypeOf((*systemNdProxyState)(nil)).Elem()
}

type systemNdProxyArgs struct {
	DynamicSortSubtable *string               `pulumi:"dynamicSortSubtable"`
	Members             []SystemNdProxyMember `pulumi:"members"`
	Status              *string               `pulumi:"status"`
	Vdomparam           *string               `pulumi:"vdomparam"`
}

// The set of arguments for constructing a SystemNdProxy resource.
type SystemNdProxyArgs struct {
	DynamicSortSubtable pulumi.StringPtrInput
	Members             SystemNdProxyMemberArrayInput
	Status              pulumi.StringPtrInput
	Vdomparam           pulumi.StringPtrInput
}

func (SystemNdProxyArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*systemNdProxyArgs)(nil)).Elem()
}

type SystemNdProxyInput interface {
	pulumi.Input

	ToSystemNdProxyOutput() SystemNdProxyOutput
	ToSystemNdProxyOutputWithContext(ctx context.Context) SystemNdProxyOutput
}

func (*SystemNdProxy) ElementType() reflect.Type {
	return reflect.TypeOf((**SystemNdProxy)(nil)).Elem()
}

func (i *SystemNdProxy) ToSystemNdProxyOutput() SystemNdProxyOutput {
	return i.ToSystemNdProxyOutputWithContext(context.Background())
}

func (i *SystemNdProxy) ToSystemNdProxyOutputWithContext(ctx context.Context) SystemNdProxyOutput {
	return pulumi.ToOutputWithContext(ctx, i).(SystemNdProxyOutput)
}

// SystemNdProxyArrayInput is an input type that accepts SystemNdProxyArray and SystemNdProxyArrayOutput values.
// You can construct a concrete instance of `SystemNdProxyArrayInput` via:
//
//	SystemNdProxyArray{ SystemNdProxyArgs{...} }
type SystemNdProxyArrayInput interface {
	pulumi.Input

	ToSystemNdProxyArrayOutput() SystemNdProxyArrayOutput
	ToSystemNdProxyArrayOutputWithContext(context.Context) SystemNdProxyArrayOutput
}

type SystemNdProxyArray []SystemNdProxyInput

func (SystemNdProxyArray) ElementType() reflect.Type {
	return reflect.TypeOf((*[]*SystemNdProxy)(nil)).Elem()
}

func (i SystemNdProxyArray) ToSystemNdProxyArrayOutput() SystemNdProxyArrayOutput {
	return i.ToSystemNdProxyArrayOutputWithContext(context.Background())
}

func (i SystemNdProxyArray) ToSystemNdProxyArrayOutputWithContext(ctx context.Context) SystemNdProxyArrayOutput {
	return pulumi.ToOutputWithContext(ctx, i).(SystemNdProxyArrayOutput)
}

// SystemNdProxyMapInput is an input type that accepts SystemNdProxyMap and SystemNdProxyMapOutput values.
// You can construct a concrete instance of `SystemNdProxyMapInput` via:
//
//	SystemNdProxyMap{ "key": SystemNdProxyArgs{...} }
type SystemNdProxyMapInput interface {
	pulumi.Input

	ToSystemNdProxyMapOutput() SystemNdProxyMapOutput
	ToSystemNdProxyMapOutputWithContext(context.Context) SystemNdProxyMapOutput
}

type SystemNdProxyMap map[string]SystemNdProxyInput

func (SystemNdProxyMap) ElementType() reflect.Type {
	return reflect.TypeOf((*map[string]*SystemNdProxy)(nil)).Elem()
}

func (i SystemNdProxyMap) ToSystemNdProxyMapOutput() SystemNdProxyMapOutput {
	return i.ToSystemNdProxyMapOutputWithContext(context.Background())
}

func (i SystemNdProxyMap) ToSystemNdProxyMapOutputWithContext(ctx context.Context) SystemNdProxyMapOutput {
	return pulumi.ToOutputWithContext(ctx, i).(SystemNdProxyMapOutput)
}

type SystemNdProxyOutput struct{ *pulumi.OutputState }

func (SystemNdProxyOutput) ElementType() reflect.Type {
	return reflect.TypeOf((**SystemNdProxy)(nil)).Elem()
}

func (o SystemNdProxyOutput) ToSystemNdProxyOutput() SystemNdProxyOutput {
	return o
}

func (o SystemNdProxyOutput) ToSystemNdProxyOutputWithContext(ctx context.Context) SystemNdProxyOutput {
	return o
}

func (o SystemNdProxyOutput) DynamicSortSubtable() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *SystemNdProxy) pulumi.StringPtrOutput { return v.DynamicSortSubtable }).(pulumi.StringPtrOutput)
}

func (o SystemNdProxyOutput) Members() SystemNdProxyMemberArrayOutput {
	return o.ApplyT(func(v *SystemNdProxy) SystemNdProxyMemberArrayOutput { return v.Members }).(SystemNdProxyMemberArrayOutput)
}

func (o SystemNdProxyOutput) Status() pulumi.StringOutput {
	return o.ApplyT(func(v *SystemNdProxy) pulumi.StringOutput { return v.Status }).(pulumi.StringOutput)
}

func (o SystemNdProxyOutput) Vdomparam() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *SystemNdProxy) pulumi.StringPtrOutput { return v.Vdomparam }).(pulumi.StringPtrOutput)
}

type SystemNdProxyArrayOutput struct{ *pulumi.OutputState }

func (SystemNdProxyArrayOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*[]*SystemNdProxy)(nil)).Elem()
}

func (o SystemNdProxyArrayOutput) ToSystemNdProxyArrayOutput() SystemNdProxyArrayOutput {
	return o
}

func (o SystemNdProxyArrayOutput) ToSystemNdProxyArrayOutputWithContext(ctx context.Context) SystemNdProxyArrayOutput {
	return o
}

func (o SystemNdProxyArrayOutput) Index(i pulumi.IntInput) SystemNdProxyOutput {
	return pulumi.All(o, i).ApplyT(func(vs []interface{}) *SystemNdProxy {
		return vs[0].([]*SystemNdProxy)[vs[1].(int)]
	}).(SystemNdProxyOutput)
}

type SystemNdProxyMapOutput struct{ *pulumi.OutputState }

func (SystemNdProxyMapOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*map[string]*SystemNdProxy)(nil)).Elem()
}

func (o SystemNdProxyMapOutput) ToSystemNdProxyMapOutput() SystemNdProxyMapOutput {
	return o
}

func (o SystemNdProxyMapOutput) ToSystemNdProxyMapOutputWithContext(ctx context.Context) SystemNdProxyMapOutput {
	return o
}

func (o SystemNdProxyMapOutput) MapIndex(k pulumi.StringInput) SystemNdProxyOutput {
	return pulumi.All(o, k).ApplyT(func(vs []interface{}) *SystemNdProxy {
		return vs[0].(map[string]*SystemNdProxy)[vs[1].(string)]
	}).(SystemNdProxyOutput)
}

func init() {
	pulumi.RegisterInputType(reflect.TypeOf((*SystemNdProxyInput)(nil)).Elem(), &SystemNdProxy{})
	pulumi.RegisterInputType(reflect.TypeOf((*SystemNdProxyArrayInput)(nil)).Elem(), SystemNdProxyArray{})
	pulumi.RegisterInputType(reflect.TypeOf((*SystemNdProxyMapInput)(nil)).Elem(), SystemNdProxyMap{})
	pulumi.RegisterOutputType(SystemNdProxyOutput{})
	pulumi.RegisterOutputType(SystemNdProxyArrayOutput{})
	pulumi.RegisterOutputType(SystemNdProxyMapOutput{})
}
