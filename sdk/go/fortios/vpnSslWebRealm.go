// *** WARNING: this file was generated by the Pulumi Terraform Bridge (tfgen) Tool. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

package fortios

import (
	"context"
	"reflect"

	"github.com/pulumi/pulumi/sdk/v3/go/pulumi"
)

// Realm.
//
// ## Example Usage
//
// ```go
// package main
//
// import (
// 	"github.com/pulumi/pulumi-fortios/sdk/go/fortios"
// 	"github.com/pulumi/pulumi/sdk/v3/go/pulumi"
// )
//
// func main() {
// 	pulumi.Run(func(ctx *pulumi.Context) error {
// 		_, err := fortios.NewVpnSslWebRealm(ctx, "trname", &fortios.VpnSslWebRealmArgs{
// 			LoginPage:         pulumi.String("1.htm"),
// 			MaxConcurrentUser: pulumi.Int(33),
// 			UrlPath:           pulumi.String("1"),
// 			VirtualHost:       pulumi.String("2.2.2.2"),
// 		})
// 		if err != nil {
// 			return err
// 		}
// 		return nil
// 	})
// }
// ```
//
// ## Import
//
// VpnSslWeb Realm can be imported using any of these accepted formats$ export "FORTIOS_IMPORT_TABLE"="true"
//
// ```sh
//  $ pulumi import fortios:index/vpnSslWebRealm:VpnSslWebRealm labelname {{url_path}}
// ```
//
//  $ unset "FORTIOS_IMPORT_TABLE"
type VpnSslWebRealm struct {
	pulumi.CustomResourceState

	// Replacement HTML for SSL-VPN login page.
	LoginPage pulumi.StringPtrOutput `pulumi:"loginPage"`
	// Maximum concurrent users (0 - 65535, 0 means unlimited).
	MaxConcurrentUser pulumi.IntOutput `pulumi:"maxConcurrentUser"`
	// IP address used as a NAS-IP to communicate with the RADIUS server.
	NasIp pulumi.StringOutput `pulumi:"nasIp"`
	// RADIUS service port number (0 - 65535, 0 means user.radius.radius-port).
	RadiusPort pulumi.IntOutput `pulumi:"radiusPort"`
	// RADIUS server associated with realm.
	RadiusServer pulumi.StringOutput `pulumi:"radiusServer"`
	// URL path to access SSL-VPN login page.
	UrlPath pulumi.StringOutput `pulumi:"urlPath"`
	// Specifies the vdom to which the resource will be applied when the FortiGate unit is running in VDOM mode. Only one vdom can be specified. If you want to inherit the vdom configuration of the provider, please do not set this parameter.
	Vdomparam pulumi.StringPtrOutput `pulumi:"vdomparam"`
	// Virtual host name for realm.
	VirtualHost pulumi.StringPtrOutput `pulumi:"virtualHost"`
	// Enable/disable enforcement of virtual host method for SSL-VPN client access. Valid values: `enable`, `disable`.
	VirtualHostOnly pulumi.StringOutput `pulumi:"virtualHostOnly"`
}

// NewVpnSslWebRealm registers a new resource with the given unique name, arguments, and options.
func NewVpnSslWebRealm(ctx *pulumi.Context,
	name string, args *VpnSslWebRealmArgs, opts ...pulumi.ResourceOption) (*VpnSslWebRealm, error) {
	if args == nil {
		args = &VpnSslWebRealmArgs{}
	}

	var resource VpnSslWebRealm
	err := ctx.RegisterResource("fortios:index/vpnSslWebRealm:VpnSslWebRealm", name, args, &resource, opts...)
	if err != nil {
		return nil, err
	}
	return &resource, nil
}

// GetVpnSslWebRealm gets an existing VpnSslWebRealm resource's state with the given name, ID, and optional
// state properties that are used to uniquely qualify the lookup (nil if not required).
func GetVpnSslWebRealm(ctx *pulumi.Context,
	name string, id pulumi.IDInput, state *VpnSslWebRealmState, opts ...pulumi.ResourceOption) (*VpnSslWebRealm, error) {
	var resource VpnSslWebRealm
	err := ctx.ReadResource("fortios:index/vpnSslWebRealm:VpnSslWebRealm", name, id, state, &resource, opts...)
	if err != nil {
		return nil, err
	}
	return &resource, nil
}

// Input properties used for looking up and filtering VpnSslWebRealm resources.
type vpnSslWebRealmState struct {
	// Replacement HTML for SSL-VPN login page.
	LoginPage *string `pulumi:"loginPage"`
	// Maximum concurrent users (0 - 65535, 0 means unlimited).
	MaxConcurrentUser *int `pulumi:"maxConcurrentUser"`
	// IP address used as a NAS-IP to communicate with the RADIUS server.
	NasIp *string `pulumi:"nasIp"`
	// RADIUS service port number (0 - 65535, 0 means user.radius.radius-port).
	RadiusPort *int `pulumi:"radiusPort"`
	// RADIUS server associated with realm.
	RadiusServer *string `pulumi:"radiusServer"`
	// URL path to access SSL-VPN login page.
	UrlPath *string `pulumi:"urlPath"`
	// Specifies the vdom to which the resource will be applied when the FortiGate unit is running in VDOM mode. Only one vdom can be specified. If you want to inherit the vdom configuration of the provider, please do not set this parameter.
	Vdomparam *string `pulumi:"vdomparam"`
	// Virtual host name for realm.
	VirtualHost *string `pulumi:"virtualHost"`
	// Enable/disable enforcement of virtual host method for SSL-VPN client access. Valid values: `enable`, `disable`.
	VirtualHostOnly *string `pulumi:"virtualHostOnly"`
}

type VpnSslWebRealmState struct {
	// Replacement HTML for SSL-VPN login page.
	LoginPage pulumi.StringPtrInput
	// Maximum concurrent users (0 - 65535, 0 means unlimited).
	MaxConcurrentUser pulumi.IntPtrInput
	// IP address used as a NAS-IP to communicate with the RADIUS server.
	NasIp pulumi.StringPtrInput
	// RADIUS service port number (0 - 65535, 0 means user.radius.radius-port).
	RadiusPort pulumi.IntPtrInput
	// RADIUS server associated with realm.
	RadiusServer pulumi.StringPtrInput
	// URL path to access SSL-VPN login page.
	UrlPath pulumi.StringPtrInput
	// Specifies the vdom to which the resource will be applied when the FortiGate unit is running in VDOM mode. Only one vdom can be specified. If you want to inherit the vdom configuration of the provider, please do not set this parameter.
	Vdomparam pulumi.StringPtrInput
	// Virtual host name for realm.
	VirtualHost pulumi.StringPtrInput
	// Enable/disable enforcement of virtual host method for SSL-VPN client access. Valid values: `enable`, `disable`.
	VirtualHostOnly pulumi.StringPtrInput
}

func (VpnSslWebRealmState) ElementType() reflect.Type {
	return reflect.TypeOf((*vpnSslWebRealmState)(nil)).Elem()
}

type vpnSslWebRealmArgs struct {
	// Replacement HTML for SSL-VPN login page.
	LoginPage *string `pulumi:"loginPage"`
	// Maximum concurrent users (0 - 65535, 0 means unlimited).
	MaxConcurrentUser *int `pulumi:"maxConcurrentUser"`
	// IP address used as a NAS-IP to communicate with the RADIUS server.
	NasIp *string `pulumi:"nasIp"`
	// RADIUS service port number (0 - 65535, 0 means user.radius.radius-port).
	RadiusPort *int `pulumi:"radiusPort"`
	// RADIUS server associated with realm.
	RadiusServer *string `pulumi:"radiusServer"`
	// URL path to access SSL-VPN login page.
	UrlPath *string `pulumi:"urlPath"`
	// Specifies the vdom to which the resource will be applied when the FortiGate unit is running in VDOM mode. Only one vdom can be specified. If you want to inherit the vdom configuration of the provider, please do not set this parameter.
	Vdomparam *string `pulumi:"vdomparam"`
	// Virtual host name for realm.
	VirtualHost *string `pulumi:"virtualHost"`
	// Enable/disable enforcement of virtual host method for SSL-VPN client access. Valid values: `enable`, `disable`.
	VirtualHostOnly *string `pulumi:"virtualHostOnly"`
}

// The set of arguments for constructing a VpnSslWebRealm resource.
type VpnSslWebRealmArgs struct {
	// Replacement HTML for SSL-VPN login page.
	LoginPage pulumi.StringPtrInput
	// Maximum concurrent users (0 - 65535, 0 means unlimited).
	MaxConcurrentUser pulumi.IntPtrInput
	// IP address used as a NAS-IP to communicate with the RADIUS server.
	NasIp pulumi.StringPtrInput
	// RADIUS service port number (0 - 65535, 0 means user.radius.radius-port).
	RadiusPort pulumi.IntPtrInput
	// RADIUS server associated with realm.
	RadiusServer pulumi.StringPtrInput
	// URL path to access SSL-VPN login page.
	UrlPath pulumi.StringPtrInput
	// Specifies the vdom to which the resource will be applied when the FortiGate unit is running in VDOM mode. Only one vdom can be specified. If you want to inherit the vdom configuration of the provider, please do not set this parameter.
	Vdomparam pulumi.StringPtrInput
	// Virtual host name for realm.
	VirtualHost pulumi.StringPtrInput
	// Enable/disable enforcement of virtual host method for SSL-VPN client access. Valid values: `enable`, `disable`.
	VirtualHostOnly pulumi.StringPtrInput
}

func (VpnSslWebRealmArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*vpnSslWebRealmArgs)(nil)).Elem()
}

type VpnSslWebRealmInput interface {
	pulumi.Input

	ToVpnSslWebRealmOutput() VpnSslWebRealmOutput
	ToVpnSslWebRealmOutputWithContext(ctx context.Context) VpnSslWebRealmOutput
}

func (*VpnSslWebRealm) ElementType() reflect.Type {
	return reflect.TypeOf((*VpnSslWebRealm)(nil))
}

func (i *VpnSslWebRealm) ToVpnSslWebRealmOutput() VpnSslWebRealmOutput {
	return i.ToVpnSslWebRealmOutputWithContext(context.Background())
}

func (i *VpnSslWebRealm) ToVpnSslWebRealmOutputWithContext(ctx context.Context) VpnSslWebRealmOutput {
	return pulumi.ToOutputWithContext(ctx, i).(VpnSslWebRealmOutput)
}

func (i *VpnSslWebRealm) ToVpnSslWebRealmPtrOutput() VpnSslWebRealmPtrOutput {
	return i.ToVpnSslWebRealmPtrOutputWithContext(context.Background())
}

func (i *VpnSslWebRealm) ToVpnSslWebRealmPtrOutputWithContext(ctx context.Context) VpnSslWebRealmPtrOutput {
	return pulumi.ToOutputWithContext(ctx, i).(VpnSslWebRealmPtrOutput)
}

type VpnSslWebRealmPtrInput interface {
	pulumi.Input

	ToVpnSslWebRealmPtrOutput() VpnSslWebRealmPtrOutput
	ToVpnSslWebRealmPtrOutputWithContext(ctx context.Context) VpnSslWebRealmPtrOutput
}

type vpnSslWebRealmPtrType VpnSslWebRealmArgs

func (*vpnSslWebRealmPtrType) ElementType() reflect.Type {
	return reflect.TypeOf((**VpnSslWebRealm)(nil))
}

func (i *vpnSslWebRealmPtrType) ToVpnSslWebRealmPtrOutput() VpnSslWebRealmPtrOutput {
	return i.ToVpnSslWebRealmPtrOutputWithContext(context.Background())
}

func (i *vpnSslWebRealmPtrType) ToVpnSslWebRealmPtrOutputWithContext(ctx context.Context) VpnSslWebRealmPtrOutput {
	return pulumi.ToOutputWithContext(ctx, i).(VpnSslWebRealmPtrOutput)
}

// VpnSslWebRealmArrayInput is an input type that accepts VpnSslWebRealmArray and VpnSslWebRealmArrayOutput values.
// You can construct a concrete instance of `VpnSslWebRealmArrayInput` via:
//
//          VpnSslWebRealmArray{ VpnSslWebRealmArgs{...} }
type VpnSslWebRealmArrayInput interface {
	pulumi.Input

	ToVpnSslWebRealmArrayOutput() VpnSslWebRealmArrayOutput
	ToVpnSslWebRealmArrayOutputWithContext(context.Context) VpnSslWebRealmArrayOutput
}

type VpnSslWebRealmArray []VpnSslWebRealmInput

func (VpnSslWebRealmArray) ElementType() reflect.Type {
	return reflect.TypeOf(([]*VpnSslWebRealm)(nil))
}

func (i VpnSslWebRealmArray) ToVpnSslWebRealmArrayOutput() VpnSslWebRealmArrayOutput {
	return i.ToVpnSslWebRealmArrayOutputWithContext(context.Background())
}

func (i VpnSslWebRealmArray) ToVpnSslWebRealmArrayOutputWithContext(ctx context.Context) VpnSslWebRealmArrayOutput {
	return pulumi.ToOutputWithContext(ctx, i).(VpnSslWebRealmArrayOutput)
}

// VpnSslWebRealmMapInput is an input type that accepts VpnSslWebRealmMap and VpnSslWebRealmMapOutput values.
// You can construct a concrete instance of `VpnSslWebRealmMapInput` via:
//
//          VpnSslWebRealmMap{ "key": VpnSslWebRealmArgs{...} }
type VpnSslWebRealmMapInput interface {
	pulumi.Input

	ToVpnSslWebRealmMapOutput() VpnSslWebRealmMapOutput
	ToVpnSslWebRealmMapOutputWithContext(context.Context) VpnSslWebRealmMapOutput
}

type VpnSslWebRealmMap map[string]VpnSslWebRealmInput

func (VpnSslWebRealmMap) ElementType() reflect.Type {
	return reflect.TypeOf((map[string]*VpnSslWebRealm)(nil))
}

func (i VpnSslWebRealmMap) ToVpnSslWebRealmMapOutput() VpnSslWebRealmMapOutput {
	return i.ToVpnSslWebRealmMapOutputWithContext(context.Background())
}

func (i VpnSslWebRealmMap) ToVpnSslWebRealmMapOutputWithContext(ctx context.Context) VpnSslWebRealmMapOutput {
	return pulumi.ToOutputWithContext(ctx, i).(VpnSslWebRealmMapOutput)
}

type VpnSslWebRealmOutput struct {
	*pulumi.OutputState
}

func (VpnSslWebRealmOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*VpnSslWebRealm)(nil))
}

func (o VpnSslWebRealmOutput) ToVpnSslWebRealmOutput() VpnSslWebRealmOutput {
	return o
}

func (o VpnSslWebRealmOutput) ToVpnSslWebRealmOutputWithContext(ctx context.Context) VpnSslWebRealmOutput {
	return o
}

func (o VpnSslWebRealmOutput) ToVpnSslWebRealmPtrOutput() VpnSslWebRealmPtrOutput {
	return o.ToVpnSslWebRealmPtrOutputWithContext(context.Background())
}

func (o VpnSslWebRealmOutput) ToVpnSslWebRealmPtrOutputWithContext(ctx context.Context) VpnSslWebRealmPtrOutput {
	return o.ApplyT(func(v VpnSslWebRealm) *VpnSslWebRealm {
		return &v
	}).(VpnSslWebRealmPtrOutput)
}

type VpnSslWebRealmPtrOutput struct {
	*pulumi.OutputState
}

func (VpnSslWebRealmPtrOutput) ElementType() reflect.Type {
	return reflect.TypeOf((**VpnSslWebRealm)(nil))
}

func (o VpnSslWebRealmPtrOutput) ToVpnSslWebRealmPtrOutput() VpnSslWebRealmPtrOutput {
	return o
}

func (o VpnSslWebRealmPtrOutput) ToVpnSslWebRealmPtrOutputWithContext(ctx context.Context) VpnSslWebRealmPtrOutput {
	return o
}

type VpnSslWebRealmArrayOutput struct{ *pulumi.OutputState }

func (VpnSslWebRealmArrayOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*[]VpnSslWebRealm)(nil))
}

func (o VpnSslWebRealmArrayOutput) ToVpnSslWebRealmArrayOutput() VpnSslWebRealmArrayOutput {
	return o
}

func (o VpnSslWebRealmArrayOutput) ToVpnSslWebRealmArrayOutputWithContext(ctx context.Context) VpnSslWebRealmArrayOutput {
	return o
}

func (o VpnSslWebRealmArrayOutput) Index(i pulumi.IntInput) VpnSslWebRealmOutput {
	return pulumi.All(o, i).ApplyT(func(vs []interface{}) VpnSslWebRealm {
		return vs[0].([]VpnSslWebRealm)[vs[1].(int)]
	}).(VpnSslWebRealmOutput)
}

type VpnSslWebRealmMapOutput struct{ *pulumi.OutputState }

func (VpnSslWebRealmMapOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*map[string]VpnSslWebRealm)(nil))
}

func (o VpnSslWebRealmMapOutput) ToVpnSslWebRealmMapOutput() VpnSslWebRealmMapOutput {
	return o
}

func (o VpnSslWebRealmMapOutput) ToVpnSslWebRealmMapOutputWithContext(ctx context.Context) VpnSslWebRealmMapOutput {
	return o
}

func (o VpnSslWebRealmMapOutput) MapIndex(k pulumi.StringInput) VpnSslWebRealmOutput {
	return pulumi.All(o, k).ApplyT(func(vs []interface{}) VpnSslWebRealm {
		return vs[0].(map[string]VpnSslWebRealm)[vs[1].(string)]
	}).(VpnSslWebRealmOutput)
}

func init() {
	pulumi.RegisterOutputType(VpnSslWebRealmOutput{})
	pulumi.RegisterOutputType(VpnSslWebRealmPtrOutput{})
	pulumi.RegisterOutputType(VpnSslWebRealmArrayOutput{})
	pulumi.RegisterOutputType(VpnSslWebRealmMapOutput{})
}
