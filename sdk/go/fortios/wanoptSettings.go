// *** WARNING: this file was generated by the Pulumi Terraform Bridge (tfgen) Tool. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

package fortios

import (
	"context"
	"reflect"

	"github.com/pkg/errors"
	"github.com/pulumi/pulumi/sdk/v3/go/pulumi"
)

// Configure WAN optimization settings.
//
// ## Example Usage
//
// ```go
// package main
//
// import (
// 	"github.com/lubyou/pulumi-fortios/sdk/go/fortios"
// 	"github.com/pulumi/pulumi/sdk/v3/go/pulumi"
// )
//
// func main() {
// 	pulumi.Run(func(ctx *pulumi.Context) error {
// 		_, err := fortios.NewWanoptSettings(ctx, "trname", &fortios.WanoptSettingsArgs{
// 			AutoDetectAlgorithm: pulumi.String("simple"),
// 			HostId:              pulumi.String("default-id"),
// 			TunnelSslAlgorithm:  pulumi.String("high"),
// 		})
// 		if err != nil {
// 			return err
// 		}
// 		return nil
// 	})
// }
// ```
//
// ## Import
//
// Wanopt Settings can be imported using any of these accepted formats$ export "FORTIOS_IMPORT_TABLE"="true"
//
// ```sh
//  $ pulumi import fortios:index/wanoptSettings:WanoptSettings labelname WanoptSettings
// ```
//
//  $ unset "FORTIOS_IMPORT_TABLE"
type WanoptSettings struct {
	pulumi.CustomResourceState

	// Auto detection algorithms used in tunnel negotiations. Valid values: `simple`, `diff-req-resp`.
	AutoDetectAlgorithm pulumi.StringOutput `pulumi:"autoDetectAlgorithm"`
	// Local host ID (must also be entered in the remote FortiGate's peer list).
	HostId pulumi.StringOutput `pulumi:"hostId"`
	// Relative strength of encryption algorithms accepted during tunnel negotiation. Valid values: `high`, `medium`, `low`.
	TunnelSslAlgorithm pulumi.StringOutput `pulumi:"tunnelSslAlgorithm"`
	// Specifies the vdom to which the resource will be applied when the FortiGate unit is running in VDOM mode. Only one vdom can be specified. If you want to inherit the vdom configuration of the provider, please do not set this parameter.
	Vdomparam pulumi.StringPtrOutput `pulumi:"vdomparam"`
}

// NewWanoptSettings registers a new resource with the given unique name, arguments, and options.
func NewWanoptSettings(ctx *pulumi.Context,
	name string, args *WanoptSettingsArgs, opts ...pulumi.ResourceOption) (*WanoptSettings, error) {
	if args == nil {
		return nil, errors.New("missing one or more required arguments")
	}

	if args.HostId == nil {
		return nil, errors.New("invalid value for required argument 'HostId'")
	}
	opts = pkgResourceDefaultOpts(opts)
	var resource WanoptSettings
	err := ctx.RegisterResource("fortios:index/wanoptSettings:WanoptSettings", name, args, &resource, opts...)
	if err != nil {
		return nil, err
	}
	return &resource, nil
}

// GetWanoptSettings gets an existing WanoptSettings resource's state with the given name, ID, and optional
// state properties that are used to uniquely qualify the lookup (nil if not required).
func GetWanoptSettings(ctx *pulumi.Context,
	name string, id pulumi.IDInput, state *WanoptSettingsState, opts ...pulumi.ResourceOption) (*WanoptSettings, error) {
	var resource WanoptSettings
	err := ctx.ReadResource("fortios:index/wanoptSettings:WanoptSettings", name, id, state, &resource, opts...)
	if err != nil {
		return nil, err
	}
	return &resource, nil
}

// Input properties used for looking up and filtering WanoptSettings resources.
type wanoptSettingsState struct {
	// Auto detection algorithms used in tunnel negotiations. Valid values: `simple`, `diff-req-resp`.
	AutoDetectAlgorithm *string `pulumi:"autoDetectAlgorithm"`
	// Local host ID (must also be entered in the remote FortiGate's peer list).
	HostId *string `pulumi:"hostId"`
	// Relative strength of encryption algorithms accepted during tunnel negotiation. Valid values: `high`, `medium`, `low`.
	TunnelSslAlgorithm *string `pulumi:"tunnelSslAlgorithm"`
	// Specifies the vdom to which the resource will be applied when the FortiGate unit is running in VDOM mode. Only one vdom can be specified. If you want to inherit the vdom configuration of the provider, please do not set this parameter.
	Vdomparam *string `pulumi:"vdomparam"`
}

type WanoptSettingsState struct {
	// Auto detection algorithms used in tunnel negotiations. Valid values: `simple`, `diff-req-resp`.
	AutoDetectAlgorithm pulumi.StringPtrInput
	// Local host ID (must also be entered in the remote FortiGate's peer list).
	HostId pulumi.StringPtrInput
	// Relative strength of encryption algorithms accepted during tunnel negotiation. Valid values: `high`, `medium`, `low`.
	TunnelSslAlgorithm pulumi.StringPtrInput
	// Specifies the vdom to which the resource will be applied when the FortiGate unit is running in VDOM mode. Only one vdom can be specified. If you want to inherit the vdom configuration of the provider, please do not set this parameter.
	Vdomparam pulumi.StringPtrInput
}

func (WanoptSettingsState) ElementType() reflect.Type {
	return reflect.TypeOf((*wanoptSettingsState)(nil)).Elem()
}

type wanoptSettingsArgs struct {
	// Auto detection algorithms used in tunnel negotiations. Valid values: `simple`, `diff-req-resp`.
	AutoDetectAlgorithm *string `pulumi:"autoDetectAlgorithm"`
	// Local host ID (must also be entered in the remote FortiGate's peer list).
	HostId string `pulumi:"hostId"`
	// Relative strength of encryption algorithms accepted during tunnel negotiation. Valid values: `high`, `medium`, `low`.
	TunnelSslAlgorithm *string `pulumi:"tunnelSslAlgorithm"`
	// Specifies the vdom to which the resource will be applied when the FortiGate unit is running in VDOM mode. Only one vdom can be specified. If you want to inherit the vdom configuration of the provider, please do not set this parameter.
	Vdomparam *string `pulumi:"vdomparam"`
}

// The set of arguments for constructing a WanoptSettings resource.
type WanoptSettingsArgs struct {
	// Auto detection algorithms used in tunnel negotiations. Valid values: `simple`, `diff-req-resp`.
	AutoDetectAlgorithm pulumi.StringPtrInput
	// Local host ID (must also be entered in the remote FortiGate's peer list).
	HostId pulumi.StringInput
	// Relative strength of encryption algorithms accepted during tunnel negotiation. Valid values: `high`, `medium`, `low`.
	TunnelSslAlgorithm pulumi.StringPtrInput
	// Specifies the vdom to which the resource will be applied when the FortiGate unit is running in VDOM mode. Only one vdom can be specified. If you want to inherit the vdom configuration of the provider, please do not set this parameter.
	Vdomparam pulumi.StringPtrInput
}

func (WanoptSettingsArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*wanoptSettingsArgs)(nil)).Elem()
}

type WanoptSettingsInput interface {
	pulumi.Input

	ToWanoptSettingsOutput() WanoptSettingsOutput
	ToWanoptSettingsOutputWithContext(ctx context.Context) WanoptSettingsOutput
}

func (*WanoptSettings) ElementType() reflect.Type {
	return reflect.TypeOf((**WanoptSettings)(nil)).Elem()
}

func (i *WanoptSettings) ToWanoptSettingsOutput() WanoptSettingsOutput {
	return i.ToWanoptSettingsOutputWithContext(context.Background())
}

func (i *WanoptSettings) ToWanoptSettingsOutputWithContext(ctx context.Context) WanoptSettingsOutput {
	return pulumi.ToOutputWithContext(ctx, i).(WanoptSettingsOutput)
}

// WanoptSettingsArrayInput is an input type that accepts WanoptSettingsArray and WanoptSettingsArrayOutput values.
// You can construct a concrete instance of `WanoptSettingsArrayInput` via:
//
//          WanoptSettingsArray{ WanoptSettingsArgs{...} }
type WanoptSettingsArrayInput interface {
	pulumi.Input

	ToWanoptSettingsArrayOutput() WanoptSettingsArrayOutput
	ToWanoptSettingsArrayOutputWithContext(context.Context) WanoptSettingsArrayOutput
}

type WanoptSettingsArray []WanoptSettingsInput

func (WanoptSettingsArray) ElementType() reflect.Type {
	return reflect.TypeOf((*[]*WanoptSettings)(nil)).Elem()
}

func (i WanoptSettingsArray) ToWanoptSettingsArrayOutput() WanoptSettingsArrayOutput {
	return i.ToWanoptSettingsArrayOutputWithContext(context.Background())
}

func (i WanoptSettingsArray) ToWanoptSettingsArrayOutputWithContext(ctx context.Context) WanoptSettingsArrayOutput {
	return pulumi.ToOutputWithContext(ctx, i).(WanoptSettingsArrayOutput)
}

// WanoptSettingsMapInput is an input type that accepts WanoptSettingsMap and WanoptSettingsMapOutput values.
// You can construct a concrete instance of `WanoptSettingsMapInput` via:
//
//          WanoptSettingsMap{ "key": WanoptSettingsArgs{...} }
type WanoptSettingsMapInput interface {
	pulumi.Input

	ToWanoptSettingsMapOutput() WanoptSettingsMapOutput
	ToWanoptSettingsMapOutputWithContext(context.Context) WanoptSettingsMapOutput
}

type WanoptSettingsMap map[string]WanoptSettingsInput

func (WanoptSettingsMap) ElementType() reflect.Type {
	return reflect.TypeOf((*map[string]*WanoptSettings)(nil)).Elem()
}

func (i WanoptSettingsMap) ToWanoptSettingsMapOutput() WanoptSettingsMapOutput {
	return i.ToWanoptSettingsMapOutputWithContext(context.Background())
}

func (i WanoptSettingsMap) ToWanoptSettingsMapOutputWithContext(ctx context.Context) WanoptSettingsMapOutput {
	return pulumi.ToOutputWithContext(ctx, i).(WanoptSettingsMapOutput)
}

type WanoptSettingsOutput struct{ *pulumi.OutputState }

func (WanoptSettingsOutput) ElementType() reflect.Type {
	return reflect.TypeOf((**WanoptSettings)(nil)).Elem()
}

func (o WanoptSettingsOutput) ToWanoptSettingsOutput() WanoptSettingsOutput {
	return o
}

func (o WanoptSettingsOutput) ToWanoptSettingsOutputWithContext(ctx context.Context) WanoptSettingsOutput {
	return o
}

type WanoptSettingsArrayOutput struct{ *pulumi.OutputState }

func (WanoptSettingsArrayOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*[]*WanoptSettings)(nil)).Elem()
}

func (o WanoptSettingsArrayOutput) ToWanoptSettingsArrayOutput() WanoptSettingsArrayOutput {
	return o
}

func (o WanoptSettingsArrayOutput) ToWanoptSettingsArrayOutputWithContext(ctx context.Context) WanoptSettingsArrayOutput {
	return o
}

func (o WanoptSettingsArrayOutput) Index(i pulumi.IntInput) WanoptSettingsOutput {
	return pulumi.All(o, i).ApplyT(func(vs []interface{}) *WanoptSettings {
		return vs[0].([]*WanoptSettings)[vs[1].(int)]
	}).(WanoptSettingsOutput)
}

type WanoptSettingsMapOutput struct{ *pulumi.OutputState }

func (WanoptSettingsMapOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*map[string]*WanoptSettings)(nil)).Elem()
}

func (o WanoptSettingsMapOutput) ToWanoptSettingsMapOutput() WanoptSettingsMapOutput {
	return o
}

func (o WanoptSettingsMapOutput) ToWanoptSettingsMapOutputWithContext(ctx context.Context) WanoptSettingsMapOutput {
	return o
}

func (o WanoptSettingsMapOutput) MapIndex(k pulumi.StringInput) WanoptSettingsOutput {
	return pulumi.All(o, k).ApplyT(func(vs []interface{}) *WanoptSettings {
		return vs[0].(map[string]*WanoptSettings)[vs[1].(string)]
	}).(WanoptSettingsOutput)
}

func init() {
	pulumi.RegisterInputType(reflect.TypeOf((*WanoptSettingsInput)(nil)).Elem(), &WanoptSettings{})
	pulumi.RegisterInputType(reflect.TypeOf((*WanoptSettingsArrayInput)(nil)).Elem(), WanoptSettingsArray{})
	pulumi.RegisterInputType(reflect.TypeOf((*WanoptSettingsMapInput)(nil)).Elem(), WanoptSettingsMap{})
	pulumi.RegisterOutputType(WanoptSettingsOutput{})
	pulumi.RegisterOutputType(WanoptSettingsArrayOutput{})
	pulumi.RegisterOutputType(WanoptSettingsMapOutput{})
}
