// *** WARNING: this file was generated by the Pulumi Terraform Bridge (tfgen) Tool. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

package fortios

import (
	"context"
	"reflect"

	"github.com/pkg/errors"
	"github.com/pulumi/pulumi/sdk/v3/go/pulumi"
)

// Local keys and certificates.
//
// ## Import
//
// VpnCertificate Local can be imported using any of these accepted formats$ export "FORTIOS_IMPORT_TABLE"="true"
//
// ```sh
//  $ pulumi import fortios:index/vpnCertificateLocal:VpnCertificateLocal labelname {{name}}
// ```
//
//  $ unset "FORTIOS_IMPORT_TABLE"
type VpnCertificateLocal struct {
	pulumi.CustomResourceState

	// Number of days to wait before expiry of an updated local certificate is requested (0 = disabled).
	AutoRegenerateDays pulumi.IntOutput `pulumi:"autoRegenerateDays"`
	// Number of days to wait before an expiry warning message is generated (0 = disabled).
	AutoRegenerateDaysWarning pulumi.IntOutput `pulumi:"autoRegenerateDaysWarning"`
	// CA identifier of the CA server for signing via SCEP.
	CaIdentifier pulumi.StringOutput `pulumi:"caIdentifier"`
	// PEM format certificate.
	Certificate pulumi.StringOutput `pulumi:"certificate"`
	// Path location inside CMP server.
	CmpPath pulumi.StringOutput `pulumi:"cmpPath"`
	// CMP auto-regeneration method. Valid values: `keyupate`, `renewal`.
	CmpRegenerationMethod pulumi.StringOutput `pulumi:"cmpRegenerationMethod"`
	// 'ADDRESS:PORT' for CMP server.
	CmpServer pulumi.StringOutput `pulumi:"cmpServer"`
	// CMP server certificate.
	CmpServerCert pulumi.StringOutput `pulumi:"cmpServerCert"`
	// Comment.
	Comments pulumi.StringOutput `pulumi:"comments"`
	// Certificate Signing Request.
	Csr pulumi.StringOutput `pulumi:"csr"`
	// Certificate enrollment protocol. Valid values: `none`, `scep`, `cmpv2`.
	EnrollProtocol pulumi.StringOutput `pulumi:"enrollProtocol"`
	// Local ID the FortiGate uses for authentication as a VPN client.
	IkeLocalid pulumi.StringOutput `pulumi:"ikeLocalid"`
	// IKE local ID type. Valid values: `asn1dn`, `fqdn`.
	IkeLocalidType pulumi.StringOutput `pulumi:"ikeLocalidType"`
	// Time at which certificate was last updated.
	LastUpdated pulumi.IntOutput `pulumi:"lastUpdated"`
	// Name.
	Name pulumi.StringOutput `pulumi:"name"`
	// Name encoding method for auto-regeneration. Valid values: `printable`, `utf8`.
	NameEncoding pulumi.StringOutput `pulumi:"nameEncoding"`
	// Password as a PEM file.
	Password pulumi.StringPtrOutput `pulumi:"password"`
	// PEM format key, encrypted with a password.
	PrivateKey pulumi.StringOutput `pulumi:"privateKey"`
	// Either a global or VDOM IP address range for the certificate. Valid values: `global`, `vdom`.
	Range pulumi.StringOutput `pulumi:"range"`
	// SCEP server challenge password for auto-regeneration.
	ScepPassword pulumi.StringPtrOutput `pulumi:"scepPassword"`
	// SCEP server URL.
	ScepUrl pulumi.StringOutput `pulumi:"scepUrl"`
	// Certificate source type.
	Source pulumi.StringOutput `pulumi:"source"`
	// Source IP address for communications to the SCEP server.
	SourceIp pulumi.StringOutput `pulumi:"sourceIp"`
	// Certificate Signing Request State.
	State pulumi.StringOutput `pulumi:"state"`
	// Specifies the vdom to which the resource will be applied when the FortiGate unit is running in VDOM mode. Only one vdom can be specified. If you want to inherit the vdom configuration of the provider, please do not set this parameter.
	Vdomparam pulumi.StringPtrOutput `pulumi:"vdomparam"`
}

// NewVpnCertificateLocal registers a new resource with the given unique name, arguments, and options.
func NewVpnCertificateLocal(ctx *pulumi.Context,
	name string, args *VpnCertificateLocalArgs, opts ...pulumi.ResourceOption) (*VpnCertificateLocal, error) {
	if args == nil {
		return nil, errors.New("missing one or more required arguments")
	}

	if args.PrivateKey == nil {
		return nil, errors.New("invalid value for required argument 'PrivateKey'")
	}
	var resource VpnCertificateLocal
	err := ctx.RegisterResource("fortios:index/vpnCertificateLocal:VpnCertificateLocal", name, args, &resource, opts...)
	if err != nil {
		return nil, err
	}
	return &resource, nil
}

// GetVpnCertificateLocal gets an existing VpnCertificateLocal resource's state with the given name, ID, and optional
// state properties that are used to uniquely qualify the lookup (nil if not required).
func GetVpnCertificateLocal(ctx *pulumi.Context,
	name string, id pulumi.IDInput, state *VpnCertificateLocalState, opts ...pulumi.ResourceOption) (*VpnCertificateLocal, error) {
	var resource VpnCertificateLocal
	err := ctx.ReadResource("fortios:index/vpnCertificateLocal:VpnCertificateLocal", name, id, state, &resource, opts...)
	if err != nil {
		return nil, err
	}
	return &resource, nil
}

// Input properties used for looking up and filtering VpnCertificateLocal resources.
type vpnCertificateLocalState struct {
	// Number of days to wait before expiry of an updated local certificate is requested (0 = disabled).
	AutoRegenerateDays *int `pulumi:"autoRegenerateDays"`
	// Number of days to wait before an expiry warning message is generated (0 = disabled).
	AutoRegenerateDaysWarning *int `pulumi:"autoRegenerateDaysWarning"`
	// CA identifier of the CA server for signing via SCEP.
	CaIdentifier *string `pulumi:"caIdentifier"`
	// PEM format certificate.
	Certificate *string `pulumi:"certificate"`
	// Path location inside CMP server.
	CmpPath *string `pulumi:"cmpPath"`
	// CMP auto-regeneration method. Valid values: `keyupate`, `renewal`.
	CmpRegenerationMethod *string `pulumi:"cmpRegenerationMethod"`
	// 'ADDRESS:PORT' for CMP server.
	CmpServer *string `pulumi:"cmpServer"`
	// CMP server certificate.
	CmpServerCert *string `pulumi:"cmpServerCert"`
	// Comment.
	Comments *string `pulumi:"comments"`
	// Certificate Signing Request.
	Csr *string `pulumi:"csr"`
	// Certificate enrollment protocol. Valid values: `none`, `scep`, `cmpv2`.
	EnrollProtocol *string `pulumi:"enrollProtocol"`
	// Local ID the FortiGate uses for authentication as a VPN client.
	IkeLocalid *string `pulumi:"ikeLocalid"`
	// IKE local ID type. Valid values: `asn1dn`, `fqdn`.
	IkeLocalidType *string `pulumi:"ikeLocalidType"`
	// Time at which certificate was last updated.
	LastUpdated *int `pulumi:"lastUpdated"`
	// Name.
	Name *string `pulumi:"name"`
	// Name encoding method for auto-regeneration. Valid values: `printable`, `utf8`.
	NameEncoding *string `pulumi:"nameEncoding"`
	// Password as a PEM file.
	Password *string `pulumi:"password"`
	// PEM format key, encrypted with a password.
	PrivateKey *string `pulumi:"privateKey"`
	// Either a global or VDOM IP address range for the certificate. Valid values: `global`, `vdom`.
	Range *string `pulumi:"range"`
	// SCEP server challenge password for auto-regeneration.
	ScepPassword *string `pulumi:"scepPassword"`
	// SCEP server URL.
	ScepUrl *string `pulumi:"scepUrl"`
	// Certificate source type.
	Source *string `pulumi:"source"`
	// Source IP address for communications to the SCEP server.
	SourceIp *string `pulumi:"sourceIp"`
	// Certificate Signing Request State.
	State *string `pulumi:"state"`
	// Specifies the vdom to which the resource will be applied when the FortiGate unit is running in VDOM mode. Only one vdom can be specified. If you want to inherit the vdom configuration of the provider, please do not set this parameter.
	Vdomparam *string `pulumi:"vdomparam"`
}

type VpnCertificateLocalState struct {
	// Number of days to wait before expiry of an updated local certificate is requested (0 = disabled).
	AutoRegenerateDays pulumi.IntPtrInput
	// Number of days to wait before an expiry warning message is generated (0 = disabled).
	AutoRegenerateDaysWarning pulumi.IntPtrInput
	// CA identifier of the CA server for signing via SCEP.
	CaIdentifier pulumi.StringPtrInput
	// PEM format certificate.
	Certificate pulumi.StringPtrInput
	// Path location inside CMP server.
	CmpPath pulumi.StringPtrInput
	// CMP auto-regeneration method. Valid values: `keyupate`, `renewal`.
	CmpRegenerationMethod pulumi.StringPtrInput
	// 'ADDRESS:PORT' for CMP server.
	CmpServer pulumi.StringPtrInput
	// CMP server certificate.
	CmpServerCert pulumi.StringPtrInput
	// Comment.
	Comments pulumi.StringPtrInput
	// Certificate Signing Request.
	Csr pulumi.StringPtrInput
	// Certificate enrollment protocol. Valid values: `none`, `scep`, `cmpv2`.
	EnrollProtocol pulumi.StringPtrInput
	// Local ID the FortiGate uses for authentication as a VPN client.
	IkeLocalid pulumi.StringPtrInput
	// IKE local ID type. Valid values: `asn1dn`, `fqdn`.
	IkeLocalidType pulumi.StringPtrInput
	// Time at which certificate was last updated.
	LastUpdated pulumi.IntPtrInput
	// Name.
	Name pulumi.StringPtrInput
	// Name encoding method for auto-regeneration. Valid values: `printable`, `utf8`.
	NameEncoding pulumi.StringPtrInput
	// Password as a PEM file.
	Password pulumi.StringPtrInput
	// PEM format key, encrypted with a password.
	PrivateKey pulumi.StringPtrInput
	// Either a global or VDOM IP address range for the certificate. Valid values: `global`, `vdom`.
	Range pulumi.StringPtrInput
	// SCEP server challenge password for auto-regeneration.
	ScepPassword pulumi.StringPtrInput
	// SCEP server URL.
	ScepUrl pulumi.StringPtrInput
	// Certificate source type.
	Source pulumi.StringPtrInput
	// Source IP address for communications to the SCEP server.
	SourceIp pulumi.StringPtrInput
	// Certificate Signing Request State.
	State pulumi.StringPtrInput
	// Specifies the vdom to which the resource will be applied when the FortiGate unit is running in VDOM mode. Only one vdom can be specified. If you want to inherit the vdom configuration of the provider, please do not set this parameter.
	Vdomparam pulumi.StringPtrInput
}

func (VpnCertificateLocalState) ElementType() reflect.Type {
	return reflect.TypeOf((*vpnCertificateLocalState)(nil)).Elem()
}

type vpnCertificateLocalArgs struct {
	// Number of days to wait before expiry of an updated local certificate is requested (0 = disabled).
	AutoRegenerateDays *int `pulumi:"autoRegenerateDays"`
	// Number of days to wait before an expiry warning message is generated (0 = disabled).
	AutoRegenerateDaysWarning *int `pulumi:"autoRegenerateDaysWarning"`
	// CA identifier of the CA server for signing via SCEP.
	CaIdentifier *string `pulumi:"caIdentifier"`
	// PEM format certificate.
	Certificate *string `pulumi:"certificate"`
	// Path location inside CMP server.
	CmpPath *string `pulumi:"cmpPath"`
	// CMP auto-regeneration method. Valid values: `keyupate`, `renewal`.
	CmpRegenerationMethod *string `pulumi:"cmpRegenerationMethod"`
	// 'ADDRESS:PORT' for CMP server.
	CmpServer *string `pulumi:"cmpServer"`
	// CMP server certificate.
	CmpServerCert *string `pulumi:"cmpServerCert"`
	// Comment.
	Comments *string `pulumi:"comments"`
	// Certificate Signing Request.
	Csr *string `pulumi:"csr"`
	// Certificate enrollment protocol. Valid values: `none`, `scep`, `cmpv2`.
	EnrollProtocol *string `pulumi:"enrollProtocol"`
	// Local ID the FortiGate uses for authentication as a VPN client.
	IkeLocalid *string `pulumi:"ikeLocalid"`
	// IKE local ID type. Valid values: `asn1dn`, `fqdn`.
	IkeLocalidType *string `pulumi:"ikeLocalidType"`
	// Time at which certificate was last updated.
	LastUpdated *int `pulumi:"lastUpdated"`
	// Name.
	Name *string `pulumi:"name"`
	// Name encoding method for auto-regeneration. Valid values: `printable`, `utf8`.
	NameEncoding *string `pulumi:"nameEncoding"`
	// Password as a PEM file.
	Password *string `pulumi:"password"`
	// PEM format key, encrypted with a password.
	PrivateKey string `pulumi:"privateKey"`
	// Either a global or VDOM IP address range for the certificate. Valid values: `global`, `vdom`.
	Range *string `pulumi:"range"`
	// SCEP server challenge password for auto-regeneration.
	ScepPassword *string `pulumi:"scepPassword"`
	// SCEP server URL.
	ScepUrl *string `pulumi:"scepUrl"`
	// Certificate source type.
	Source *string `pulumi:"source"`
	// Source IP address for communications to the SCEP server.
	SourceIp *string `pulumi:"sourceIp"`
	// Certificate Signing Request State.
	State *string `pulumi:"state"`
	// Specifies the vdom to which the resource will be applied when the FortiGate unit is running in VDOM mode. Only one vdom can be specified. If you want to inherit the vdom configuration of the provider, please do not set this parameter.
	Vdomparam *string `pulumi:"vdomparam"`
}

// The set of arguments for constructing a VpnCertificateLocal resource.
type VpnCertificateLocalArgs struct {
	// Number of days to wait before expiry of an updated local certificate is requested (0 = disabled).
	AutoRegenerateDays pulumi.IntPtrInput
	// Number of days to wait before an expiry warning message is generated (0 = disabled).
	AutoRegenerateDaysWarning pulumi.IntPtrInput
	// CA identifier of the CA server for signing via SCEP.
	CaIdentifier pulumi.StringPtrInput
	// PEM format certificate.
	Certificate pulumi.StringPtrInput
	// Path location inside CMP server.
	CmpPath pulumi.StringPtrInput
	// CMP auto-regeneration method. Valid values: `keyupate`, `renewal`.
	CmpRegenerationMethod pulumi.StringPtrInput
	// 'ADDRESS:PORT' for CMP server.
	CmpServer pulumi.StringPtrInput
	// CMP server certificate.
	CmpServerCert pulumi.StringPtrInput
	// Comment.
	Comments pulumi.StringPtrInput
	// Certificate Signing Request.
	Csr pulumi.StringPtrInput
	// Certificate enrollment protocol. Valid values: `none`, `scep`, `cmpv2`.
	EnrollProtocol pulumi.StringPtrInput
	// Local ID the FortiGate uses for authentication as a VPN client.
	IkeLocalid pulumi.StringPtrInput
	// IKE local ID type. Valid values: `asn1dn`, `fqdn`.
	IkeLocalidType pulumi.StringPtrInput
	// Time at which certificate was last updated.
	LastUpdated pulumi.IntPtrInput
	// Name.
	Name pulumi.StringPtrInput
	// Name encoding method for auto-regeneration. Valid values: `printable`, `utf8`.
	NameEncoding pulumi.StringPtrInput
	// Password as a PEM file.
	Password pulumi.StringPtrInput
	// PEM format key, encrypted with a password.
	PrivateKey pulumi.StringInput
	// Either a global or VDOM IP address range for the certificate. Valid values: `global`, `vdom`.
	Range pulumi.StringPtrInput
	// SCEP server challenge password for auto-regeneration.
	ScepPassword pulumi.StringPtrInput
	// SCEP server URL.
	ScepUrl pulumi.StringPtrInput
	// Certificate source type.
	Source pulumi.StringPtrInput
	// Source IP address for communications to the SCEP server.
	SourceIp pulumi.StringPtrInput
	// Certificate Signing Request State.
	State pulumi.StringPtrInput
	// Specifies the vdom to which the resource will be applied when the FortiGate unit is running in VDOM mode. Only one vdom can be specified. If you want to inherit the vdom configuration of the provider, please do not set this parameter.
	Vdomparam pulumi.StringPtrInput
}

func (VpnCertificateLocalArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*vpnCertificateLocalArgs)(nil)).Elem()
}

type VpnCertificateLocalInput interface {
	pulumi.Input

	ToVpnCertificateLocalOutput() VpnCertificateLocalOutput
	ToVpnCertificateLocalOutputWithContext(ctx context.Context) VpnCertificateLocalOutput
}

func (*VpnCertificateLocal) ElementType() reflect.Type {
	return reflect.TypeOf((*VpnCertificateLocal)(nil))
}

func (i *VpnCertificateLocal) ToVpnCertificateLocalOutput() VpnCertificateLocalOutput {
	return i.ToVpnCertificateLocalOutputWithContext(context.Background())
}

func (i *VpnCertificateLocal) ToVpnCertificateLocalOutputWithContext(ctx context.Context) VpnCertificateLocalOutput {
	return pulumi.ToOutputWithContext(ctx, i).(VpnCertificateLocalOutput)
}

func (i *VpnCertificateLocal) ToVpnCertificateLocalPtrOutput() VpnCertificateLocalPtrOutput {
	return i.ToVpnCertificateLocalPtrOutputWithContext(context.Background())
}

func (i *VpnCertificateLocal) ToVpnCertificateLocalPtrOutputWithContext(ctx context.Context) VpnCertificateLocalPtrOutput {
	return pulumi.ToOutputWithContext(ctx, i).(VpnCertificateLocalPtrOutput)
}

type VpnCertificateLocalPtrInput interface {
	pulumi.Input

	ToVpnCertificateLocalPtrOutput() VpnCertificateLocalPtrOutput
	ToVpnCertificateLocalPtrOutputWithContext(ctx context.Context) VpnCertificateLocalPtrOutput
}

type vpnCertificateLocalPtrType VpnCertificateLocalArgs

func (*vpnCertificateLocalPtrType) ElementType() reflect.Type {
	return reflect.TypeOf((**VpnCertificateLocal)(nil))
}

func (i *vpnCertificateLocalPtrType) ToVpnCertificateLocalPtrOutput() VpnCertificateLocalPtrOutput {
	return i.ToVpnCertificateLocalPtrOutputWithContext(context.Background())
}

func (i *vpnCertificateLocalPtrType) ToVpnCertificateLocalPtrOutputWithContext(ctx context.Context) VpnCertificateLocalPtrOutput {
	return pulumi.ToOutputWithContext(ctx, i).(VpnCertificateLocalPtrOutput)
}

// VpnCertificateLocalArrayInput is an input type that accepts VpnCertificateLocalArray and VpnCertificateLocalArrayOutput values.
// You can construct a concrete instance of `VpnCertificateLocalArrayInput` via:
//
//          VpnCertificateLocalArray{ VpnCertificateLocalArgs{...} }
type VpnCertificateLocalArrayInput interface {
	pulumi.Input

	ToVpnCertificateLocalArrayOutput() VpnCertificateLocalArrayOutput
	ToVpnCertificateLocalArrayOutputWithContext(context.Context) VpnCertificateLocalArrayOutput
}

type VpnCertificateLocalArray []VpnCertificateLocalInput

func (VpnCertificateLocalArray) ElementType() reflect.Type {
	return reflect.TypeOf(([]*VpnCertificateLocal)(nil))
}

func (i VpnCertificateLocalArray) ToVpnCertificateLocalArrayOutput() VpnCertificateLocalArrayOutput {
	return i.ToVpnCertificateLocalArrayOutputWithContext(context.Background())
}

func (i VpnCertificateLocalArray) ToVpnCertificateLocalArrayOutputWithContext(ctx context.Context) VpnCertificateLocalArrayOutput {
	return pulumi.ToOutputWithContext(ctx, i).(VpnCertificateLocalArrayOutput)
}

// VpnCertificateLocalMapInput is an input type that accepts VpnCertificateLocalMap and VpnCertificateLocalMapOutput values.
// You can construct a concrete instance of `VpnCertificateLocalMapInput` via:
//
//          VpnCertificateLocalMap{ "key": VpnCertificateLocalArgs{...} }
type VpnCertificateLocalMapInput interface {
	pulumi.Input

	ToVpnCertificateLocalMapOutput() VpnCertificateLocalMapOutput
	ToVpnCertificateLocalMapOutputWithContext(context.Context) VpnCertificateLocalMapOutput
}

type VpnCertificateLocalMap map[string]VpnCertificateLocalInput

func (VpnCertificateLocalMap) ElementType() reflect.Type {
	return reflect.TypeOf((map[string]*VpnCertificateLocal)(nil))
}

func (i VpnCertificateLocalMap) ToVpnCertificateLocalMapOutput() VpnCertificateLocalMapOutput {
	return i.ToVpnCertificateLocalMapOutputWithContext(context.Background())
}

func (i VpnCertificateLocalMap) ToVpnCertificateLocalMapOutputWithContext(ctx context.Context) VpnCertificateLocalMapOutput {
	return pulumi.ToOutputWithContext(ctx, i).(VpnCertificateLocalMapOutput)
}

type VpnCertificateLocalOutput struct {
	*pulumi.OutputState
}

func (VpnCertificateLocalOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*VpnCertificateLocal)(nil))
}

func (o VpnCertificateLocalOutput) ToVpnCertificateLocalOutput() VpnCertificateLocalOutput {
	return o
}

func (o VpnCertificateLocalOutput) ToVpnCertificateLocalOutputWithContext(ctx context.Context) VpnCertificateLocalOutput {
	return o
}

func (o VpnCertificateLocalOutput) ToVpnCertificateLocalPtrOutput() VpnCertificateLocalPtrOutput {
	return o.ToVpnCertificateLocalPtrOutputWithContext(context.Background())
}

func (o VpnCertificateLocalOutput) ToVpnCertificateLocalPtrOutputWithContext(ctx context.Context) VpnCertificateLocalPtrOutput {
	return o.ApplyT(func(v VpnCertificateLocal) *VpnCertificateLocal {
		return &v
	}).(VpnCertificateLocalPtrOutput)
}

type VpnCertificateLocalPtrOutput struct {
	*pulumi.OutputState
}

func (VpnCertificateLocalPtrOutput) ElementType() reflect.Type {
	return reflect.TypeOf((**VpnCertificateLocal)(nil))
}

func (o VpnCertificateLocalPtrOutput) ToVpnCertificateLocalPtrOutput() VpnCertificateLocalPtrOutput {
	return o
}

func (o VpnCertificateLocalPtrOutput) ToVpnCertificateLocalPtrOutputWithContext(ctx context.Context) VpnCertificateLocalPtrOutput {
	return o
}

type VpnCertificateLocalArrayOutput struct{ *pulumi.OutputState }

func (VpnCertificateLocalArrayOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*[]VpnCertificateLocal)(nil))
}

func (o VpnCertificateLocalArrayOutput) ToVpnCertificateLocalArrayOutput() VpnCertificateLocalArrayOutput {
	return o
}

func (o VpnCertificateLocalArrayOutput) ToVpnCertificateLocalArrayOutputWithContext(ctx context.Context) VpnCertificateLocalArrayOutput {
	return o
}

func (o VpnCertificateLocalArrayOutput) Index(i pulumi.IntInput) VpnCertificateLocalOutput {
	return pulumi.All(o, i).ApplyT(func(vs []interface{}) VpnCertificateLocal {
		return vs[0].([]VpnCertificateLocal)[vs[1].(int)]
	}).(VpnCertificateLocalOutput)
}

type VpnCertificateLocalMapOutput struct{ *pulumi.OutputState }

func (VpnCertificateLocalMapOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*map[string]VpnCertificateLocal)(nil))
}

func (o VpnCertificateLocalMapOutput) ToVpnCertificateLocalMapOutput() VpnCertificateLocalMapOutput {
	return o
}

func (o VpnCertificateLocalMapOutput) ToVpnCertificateLocalMapOutputWithContext(ctx context.Context) VpnCertificateLocalMapOutput {
	return o
}

func (o VpnCertificateLocalMapOutput) MapIndex(k pulumi.StringInput) VpnCertificateLocalOutput {
	return pulumi.All(o, k).ApplyT(func(vs []interface{}) VpnCertificateLocal {
		return vs[0].(map[string]VpnCertificateLocal)[vs[1].(string)]
	}).(VpnCertificateLocalOutput)
}

func init() {
	pulumi.RegisterOutputType(VpnCertificateLocalOutput{})
	pulumi.RegisterOutputType(VpnCertificateLocalPtrOutput{})
	pulumi.RegisterOutputType(VpnCertificateLocalArrayOutput{})
	pulumi.RegisterOutputType(VpnCertificateLocalMapOutput{})
}
