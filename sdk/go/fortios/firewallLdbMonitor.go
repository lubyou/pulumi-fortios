// Code generated by the Pulumi Terraform Bridge (tfgen) Tool DO NOT EDIT.
// *** WARNING: Do not edit by hand unless you're certain you know what you are doing! ***

package fortios

import (
	"context"
	"reflect"

	"errors"
	"github.com/lubyou/pulumi-fortios/sdk/go/fortios/internal"
	"github.com/pulumi/pulumi/sdk/v3/go/pulumi"
	"github.com/pulumi/pulumi/sdk/v3/go/pulumix"
)

type FirewallLdbMonitor struct {
	pulumi.CustomResourceState

	DnsMatchIp       pulumi.StringOutput    `pulumi:"dnsMatchIp"`
	DnsProtocol      pulumi.StringOutput    `pulumi:"dnsProtocol"`
	DnsRequestDomain pulumi.StringOutput    `pulumi:"dnsRequestDomain"`
	HttpGet          pulumi.StringOutput    `pulumi:"httpGet"`
	HttpMatch        pulumi.StringOutput    `pulumi:"httpMatch"`
	HttpMaxRedirects pulumi.IntOutput       `pulumi:"httpMaxRedirects"`
	Interval         pulumi.IntOutput       `pulumi:"interval"`
	Name             pulumi.StringOutput    `pulumi:"name"`
	Port             pulumi.IntOutput       `pulumi:"port"`
	Retry            pulumi.IntOutput       `pulumi:"retry"`
	SrcIp            pulumi.StringOutput    `pulumi:"srcIp"`
	Timeout          pulumi.IntOutput       `pulumi:"timeout"`
	Type             pulumi.StringOutput    `pulumi:"type"`
	Vdomparam        pulumi.StringPtrOutput `pulumi:"vdomparam"`
}

// NewFirewallLdbMonitor registers a new resource with the given unique name, arguments, and options.
func NewFirewallLdbMonitor(ctx *pulumi.Context,
	name string, args *FirewallLdbMonitorArgs, opts ...pulumi.ResourceOption) (*FirewallLdbMonitor, error) {
	if args == nil {
		return nil, errors.New("missing one or more required arguments")
	}

	if args.Type == nil {
		return nil, errors.New("invalid value for required argument 'Type'")
	}
	opts = internal.PkgResourceDefaultOpts(opts)
	var resource FirewallLdbMonitor
	err := ctx.RegisterResource("fortios:index/firewallLdbMonitor:FirewallLdbMonitor", name, args, &resource, opts...)
	if err != nil {
		return nil, err
	}
	return &resource, nil
}

// GetFirewallLdbMonitor gets an existing FirewallLdbMonitor resource's state with the given name, ID, and optional
// state properties that are used to uniquely qualify the lookup (nil if not required).
func GetFirewallLdbMonitor(ctx *pulumi.Context,
	name string, id pulumi.IDInput, state *FirewallLdbMonitorState, opts ...pulumi.ResourceOption) (*FirewallLdbMonitor, error) {
	var resource FirewallLdbMonitor
	err := ctx.ReadResource("fortios:index/firewallLdbMonitor:FirewallLdbMonitor", name, id, state, &resource, opts...)
	if err != nil {
		return nil, err
	}
	return &resource, nil
}

// Input properties used for looking up and filtering FirewallLdbMonitor resources.
type firewallLdbMonitorState struct {
	DnsMatchIp       *string `pulumi:"dnsMatchIp"`
	DnsProtocol      *string `pulumi:"dnsProtocol"`
	DnsRequestDomain *string `pulumi:"dnsRequestDomain"`
	HttpGet          *string `pulumi:"httpGet"`
	HttpMatch        *string `pulumi:"httpMatch"`
	HttpMaxRedirects *int    `pulumi:"httpMaxRedirects"`
	Interval         *int    `pulumi:"interval"`
	Name             *string `pulumi:"name"`
	Port             *int    `pulumi:"port"`
	Retry            *int    `pulumi:"retry"`
	SrcIp            *string `pulumi:"srcIp"`
	Timeout          *int    `pulumi:"timeout"`
	Type             *string `pulumi:"type"`
	Vdomparam        *string `pulumi:"vdomparam"`
}

type FirewallLdbMonitorState struct {
	DnsMatchIp       pulumi.StringPtrInput
	DnsProtocol      pulumi.StringPtrInput
	DnsRequestDomain pulumi.StringPtrInput
	HttpGet          pulumi.StringPtrInput
	HttpMatch        pulumi.StringPtrInput
	HttpMaxRedirects pulumi.IntPtrInput
	Interval         pulumi.IntPtrInput
	Name             pulumi.StringPtrInput
	Port             pulumi.IntPtrInput
	Retry            pulumi.IntPtrInput
	SrcIp            pulumi.StringPtrInput
	Timeout          pulumi.IntPtrInput
	Type             pulumi.StringPtrInput
	Vdomparam        pulumi.StringPtrInput
}

func (FirewallLdbMonitorState) ElementType() reflect.Type {
	return reflect.TypeOf((*firewallLdbMonitorState)(nil)).Elem()
}

type firewallLdbMonitorArgs struct {
	DnsMatchIp       *string `pulumi:"dnsMatchIp"`
	DnsProtocol      *string `pulumi:"dnsProtocol"`
	DnsRequestDomain *string `pulumi:"dnsRequestDomain"`
	HttpGet          *string `pulumi:"httpGet"`
	HttpMatch        *string `pulumi:"httpMatch"`
	HttpMaxRedirects *int    `pulumi:"httpMaxRedirects"`
	Interval         *int    `pulumi:"interval"`
	Name             *string `pulumi:"name"`
	Port             *int    `pulumi:"port"`
	Retry            *int    `pulumi:"retry"`
	SrcIp            *string `pulumi:"srcIp"`
	Timeout          *int    `pulumi:"timeout"`
	Type             string  `pulumi:"type"`
	Vdomparam        *string `pulumi:"vdomparam"`
}

// The set of arguments for constructing a FirewallLdbMonitor resource.
type FirewallLdbMonitorArgs struct {
	DnsMatchIp       pulumi.StringPtrInput
	DnsProtocol      pulumi.StringPtrInput
	DnsRequestDomain pulumi.StringPtrInput
	HttpGet          pulumi.StringPtrInput
	HttpMatch        pulumi.StringPtrInput
	HttpMaxRedirects pulumi.IntPtrInput
	Interval         pulumi.IntPtrInput
	Name             pulumi.StringPtrInput
	Port             pulumi.IntPtrInput
	Retry            pulumi.IntPtrInput
	SrcIp            pulumi.StringPtrInput
	Timeout          pulumi.IntPtrInput
	Type             pulumi.StringInput
	Vdomparam        pulumi.StringPtrInput
}

func (FirewallLdbMonitorArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*firewallLdbMonitorArgs)(nil)).Elem()
}

type FirewallLdbMonitorInput interface {
	pulumi.Input

	ToFirewallLdbMonitorOutput() FirewallLdbMonitorOutput
	ToFirewallLdbMonitorOutputWithContext(ctx context.Context) FirewallLdbMonitorOutput
}

func (*FirewallLdbMonitor) ElementType() reflect.Type {
	return reflect.TypeOf((**FirewallLdbMonitor)(nil)).Elem()
}

func (i *FirewallLdbMonitor) ToFirewallLdbMonitorOutput() FirewallLdbMonitorOutput {
	return i.ToFirewallLdbMonitorOutputWithContext(context.Background())
}

func (i *FirewallLdbMonitor) ToFirewallLdbMonitorOutputWithContext(ctx context.Context) FirewallLdbMonitorOutput {
	return pulumi.ToOutputWithContext(ctx, i).(FirewallLdbMonitorOutput)
}

func (i *FirewallLdbMonitor) ToOutput(ctx context.Context) pulumix.Output[*FirewallLdbMonitor] {
	return pulumix.Output[*FirewallLdbMonitor]{
		OutputState: i.ToFirewallLdbMonitorOutputWithContext(ctx).OutputState,
	}
}

// FirewallLdbMonitorArrayInput is an input type that accepts FirewallLdbMonitorArray and FirewallLdbMonitorArrayOutput values.
// You can construct a concrete instance of `FirewallLdbMonitorArrayInput` via:
//
//	FirewallLdbMonitorArray{ FirewallLdbMonitorArgs{...} }
type FirewallLdbMonitorArrayInput interface {
	pulumi.Input

	ToFirewallLdbMonitorArrayOutput() FirewallLdbMonitorArrayOutput
	ToFirewallLdbMonitorArrayOutputWithContext(context.Context) FirewallLdbMonitorArrayOutput
}

type FirewallLdbMonitorArray []FirewallLdbMonitorInput

func (FirewallLdbMonitorArray) ElementType() reflect.Type {
	return reflect.TypeOf((*[]*FirewallLdbMonitor)(nil)).Elem()
}

func (i FirewallLdbMonitorArray) ToFirewallLdbMonitorArrayOutput() FirewallLdbMonitorArrayOutput {
	return i.ToFirewallLdbMonitorArrayOutputWithContext(context.Background())
}

func (i FirewallLdbMonitorArray) ToFirewallLdbMonitorArrayOutputWithContext(ctx context.Context) FirewallLdbMonitorArrayOutput {
	return pulumi.ToOutputWithContext(ctx, i).(FirewallLdbMonitorArrayOutput)
}

func (i FirewallLdbMonitorArray) ToOutput(ctx context.Context) pulumix.Output[[]*FirewallLdbMonitor] {
	return pulumix.Output[[]*FirewallLdbMonitor]{
		OutputState: i.ToFirewallLdbMonitorArrayOutputWithContext(ctx).OutputState,
	}
}

// FirewallLdbMonitorMapInput is an input type that accepts FirewallLdbMonitorMap and FirewallLdbMonitorMapOutput values.
// You can construct a concrete instance of `FirewallLdbMonitorMapInput` via:
//
//	FirewallLdbMonitorMap{ "key": FirewallLdbMonitorArgs{...} }
type FirewallLdbMonitorMapInput interface {
	pulumi.Input

	ToFirewallLdbMonitorMapOutput() FirewallLdbMonitorMapOutput
	ToFirewallLdbMonitorMapOutputWithContext(context.Context) FirewallLdbMonitorMapOutput
}

type FirewallLdbMonitorMap map[string]FirewallLdbMonitorInput

func (FirewallLdbMonitorMap) ElementType() reflect.Type {
	return reflect.TypeOf((*map[string]*FirewallLdbMonitor)(nil)).Elem()
}

func (i FirewallLdbMonitorMap) ToFirewallLdbMonitorMapOutput() FirewallLdbMonitorMapOutput {
	return i.ToFirewallLdbMonitorMapOutputWithContext(context.Background())
}

func (i FirewallLdbMonitorMap) ToFirewallLdbMonitorMapOutputWithContext(ctx context.Context) FirewallLdbMonitorMapOutput {
	return pulumi.ToOutputWithContext(ctx, i).(FirewallLdbMonitorMapOutput)
}

func (i FirewallLdbMonitorMap) ToOutput(ctx context.Context) pulumix.Output[map[string]*FirewallLdbMonitor] {
	return pulumix.Output[map[string]*FirewallLdbMonitor]{
		OutputState: i.ToFirewallLdbMonitorMapOutputWithContext(ctx).OutputState,
	}
}

type FirewallLdbMonitorOutput struct{ *pulumi.OutputState }

func (FirewallLdbMonitorOutput) ElementType() reflect.Type {
	return reflect.TypeOf((**FirewallLdbMonitor)(nil)).Elem()
}

func (o FirewallLdbMonitorOutput) ToFirewallLdbMonitorOutput() FirewallLdbMonitorOutput {
	return o
}

func (o FirewallLdbMonitorOutput) ToFirewallLdbMonitorOutputWithContext(ctx context.Context) FirewallLdbMonitorOutput {
	return o
}

func (o FirewallLdbMonitorOutput) ToOutput(ctx context.Context) pulumix.Output[*FirewallLdbMonitor] {
	return pulumix.Output[*FirewallLdbMonitor]{
		OutputState: o.OutputState,
	}
}

func (o FirewallLdbMonitorOutput) DnsMatchIp() pulumi.StringOutput {
	return o.ApplyT(func(v *FirewallLdbMonitor) pulumi.StringOutput { return v.DnsMatchIp }).(pulumi.StringOutput)
}

func (o FirewallLdbMonitorOutput) DnsProtocol() pulumi.StringOutput {
	return o.ApplyT(func(v *FirewallLdbMonitor) pulumi.StringOutput { return v.DnsProtocol }).(pulumi.StringOutput)
}

func (o FirewallLdbMonitorOutput) DnsRequestDomain() pulumi.StringOutput {
	return o.ApplyT(func(v *FirewallLdbMonitor) pulumi.StringOutput { return v.DnsRequestDomain }).(pulumi.StringOutput)
}

func (o FirewallLdbMonitorOutput) HttpGet() pulumi.StringOutput {
	return o.ApplyT(func(v *FirewallLdbMonitor) pulumi.StringOutput { return v.HttpGet }).(pulumi.StringOutput)
}

func (o FirewallLdbMonitorOutput) HttpMatch() pulumi.StringOutput {
	return o.ApplyT(func(v *FirewallLdbMonitor) pulumi.StringOutput { return v.HttpMatch }).(pulumi.StringOutput)
}

func (o FirewallLdbMonitorOutput) HttpMaxRedirects() pulumi.IntOutput {
	return o.ApplyT(func(v *FirewallLdbMonitor) pulumi.IntOutput { return v.HttpMaxRedirects }).(pulumi.IntOutput)
}

func (o FirewallLdbMonitorOutput) Interval() pulumi.IntOutput {
	return o.ApplyT(func(v *FirewallLdbMonitor) pulumi.IntOutput { return v.Interval }).(pulumi.IntOutput)
}

func (o FirewallLdbMonitorOutput) Name() pulumi.StringOutput {
	return o.ApplyT(func(v *FirewallLdbMonitor) pulumi.StringOutput { return v.Name }).(pulumi.StringOutput)
}

func (o FirewallLdbMonitorOutput) Port() pulumi.IntOutput {
	return o.ApplyT(func(v *FirewallLdbMonitor) pulumi.IntOutput { return v.Port }).(pulumi.IntOutput)
}

func (o FirewallLdbMonitorOutput) Retry() pulumi.IntOutput {
	return o.ApplyT(func(v *FirewallLdbMonitor) pulumi.IntOutput { return v.Retry }).(pulumi.IntOutput)
}

func (o FirewallLdbMonitorOutput) SrcIp() pulumi.StringOutput {
	return o.ApplyT(func(v *FirewallLdbMonitor) pulumi.StringOutput { return v.SrcIp }).(pulumi.StringOutput)
}

func (o FirewallLdbMonitorOutput) Timeout() pulumi.IntOutput {
	return o.ApplyT(func(v *FirewallLdbMonitor) pulumi.IntOutput { return v.Timeout }).(pulumi.IntOutput)
}

func (o FirewallLdbMonitorOutput) Type() pulumi.StringOutput {
	return o.ApplyT(func(v *FirewallLdbMonitor) pulumi.StringOutput { return v.Type }).(pulumi.StringOutput)
}

func (o FirewallLdbMonitorOutput) Vdomparam() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *FirewallLdbMonitor) pulumi.StringPtrOutput { return v.Vdomparam }).(pulumi.StringPtrOutput)
}

type FirewallLdbMonitorArrayOutput struct{ *pulumi.OutputState }

func (FirewallLdbMonitorArrayOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*[]*FirewallLdbMonitor)(nil)).Elem()
}

func (o FirewallLdbMonitorArrayOutput) ToFirewallLdbMonitorArrayOutput() FirewallLdbMonitorArrayOutput {
	return o
}

func (o FirewallLdbMonitorArrayOutput) ToFirewallLdbMonitorArrayOutputWithContext(ctx context.Context) FirewallLdbMonitorArrayOutput {
	return o
}

func (o FirewallLdbMonitorArrayOutput) ToOutput(ctx context.Context) pulumix.Output[[]*FirewallLdbMonitor] {
	return pulumix.Output[[]*FirewallLdbMonitor]{
		OutputState: o.OutputState,
	}
}

func (o FirewallLdbMonitorArrayOutput) Index(i pulumi.IntInput) FirewallLdbMonitorOutput {
	return pulumi.All(o, i).ApplyT(func(vs []interface{}) *FirewallLdbMonitor {
		return vs[0].([]*FirewallLdbMonitor)[vs[1].(int)]
	}).(FirewallLdbMonitorOutput)
}

type FirewallLdbMonitorMapOutput struct{ *pulumi.OutputState }

func (FirewallLdbMonitorMapOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*map[string]*FirewallLdbMonitor)(nil)).Elem()
}

func (o FirewallLdbMonitorMapOutput) ToFirewallLdbMonitorMapOutput() FirewallLdbMonitorMapOutput {
	return o
}

func (o FirewallLdbMonitorMapOutput) ToFirewallLdbMonitorMapOutputWithContext(ctx context.Context) FirewallLdbMonitorMapOutput {
	return o
}

func (o FirewallLdbMonitorMapOutput) ToOutput(ctx context.Context) pulumix.Output[map[string]*FirewallLdbMonitor] {
	return pulumix.Output[map[string]*FirewallLdbMonitor]{
		OutputState: o.OutputState,
	}
}

func (o FirewallLdbMonitorMapOutput) MapIndex(k pulumi.StringInput) FirewallLdbMonitorOutput {
	return pulumi.All(o, k).ApplyT(func(vs []interface{}) *FirewallLdbMonitor {
		return vs[0].(map[string]*FirewallLdbMonitor)[vs[1].(string)]
	}).(FirewallLdbMonitorOutput)
}

func init() {
	pulumi.RegisterInputType(reflect.TypeOf((*FirewallLdbMonitorInput)(nil)).Elem(), &FirewallLdbMonitor{})
	pulumi.RegisterInputType(reflect.TypeOf((*FirewallLdbMonitorArrayInput)(nil)).Elem(), FirewallLdbMonitorArray{})
	pulumi.RegisterInputType(reflect.TypeOf((*FirewallLdbMonitorMapInput)(nil)).Elem(), FirewallLdbMonitorMap{})
	pulumi.RegisterOutputType(FirewallLdbMonitorOutput{})
	pulumi.RegisterOutputType(FirewallLdbMonitorArrayOutput{})
	pulumi.RegisterOutputType(FirewallLdbMonitorMapOutput{})
}
