// Code generated by the Pulumi Terraform Bridge (tfgen) Tool DO NOT EDIT.
// *** WARNING: Do not edit by hand unless you're certain you know what you are doing! ***

package fortios

import (
	"context"
	"reflect"

	"github.com/pulumi/pulumi/sdk/v3/go/pulumi"
)

type VpnCertificateCrl struct {
	pulumi.CustomResourceState

	Crl            pulumi.StringOutput    `pulumi:"crl"`
	HttpUrl        pulumi.StringOutput    `pulumi:"httpUrl"`
	LastUpdated    pulumi.IntOutput       `pulumi:"lastUpdated"`
	LdapPassword   pulumi.StringPtrOutput `pulumi:"ldapPassword"`
	LdapServer     pulumi.StringOutput    `pulumi:"ldapServer"`
	LdapUsername   pulumi.StringOutput    `pulumi:"ldapUsername"`
	Name           pulumi.StringOutput    `pulumi:"name"`
	Range          pulumi.StringOutput    `pulumi:"range"`
	ScepCert       pulumi.StringOutput    `pulumi:"scepCert"`
	ScepUrl        pulumi.StringOutput    `pulumi:"scepUrl"`
	Source         pulumi.StringOutput    `pulumi:"source"`
	SourceIp       pulumi.StringOutput    `pulumi:"sourceIp"`
	UpdateInterval pulumi.IntOutput       `pulumi:"updateInterval"`
	UpdateVdom     pulumi.StringOutput    `pulumi:"updateVdom"`
	Vdomparam      pulumi.StringPtrOutput `pulumi:"vdomparam"`
}

// NewVpnCertificateCrl registers a new resource with the given unique name, arguments, and options.
func NewVpnCertificateCrl(ctx *pulumi.Context,
	name string, args *VpnCertificateCrlArgs, opts ...pulumi.ResourceOption) (*VpnCertificateCrl, error) {
	if args == nil {
		args = &VpnCertificateCrlArgs{}
	}

	if args.LdapPassword != nil {
		args.LdapPassword = pulumi.ToSecret(args.LdapPassword).(pulumi.StringPtrInput)
	}
	secrets := pulumi.AdditionalSecretOutputs([]string{
		"ldapPassword",
	})
	opts = append(opts, secrets)
	opts = pkgResourceDefaultOpts(opts)
	var resource VpnCertificateCrl
	err := ctx.RegisterResource("fortios:index/vpnCertificateCrl:VpnCertificateCrl", name, args, &resource, opts...)
	if err != nil {
		return nil, err
	}
	return &resource, nil
}

// GetVpnCertificateCrl gets an existing VpnCertificateCrl resource's state with the given name, ID, and optional
// state properties that are used to uniquely qualify the lookup (nil if not required).
func GetVpnCertificateCrl(ctx *pulumi.Context,
	name string, id pulumi.IDInput, state *VpnCertificateCrlState, opts ...pulumi.ResourceOption) (*VpnCertificateCrl, error) {
	var resource VpnCertificateCrl
	err := ctx.ReadResource("fortios:index/vpnCertificateCrl:VpnCertificateCrl", name, id, state, &resource, opts...)
	if err != nil {
		return nil, err
	}
	return &resource, nil
}

// Input properties used for looking up and filtering VpnCertificateCrl resources.
type vpnCertificateCrlState struct {
	Crl            *string `pulumi:"crl"`
	HttpUrl        *string `pulumi:"httpUrl"`
	LastUpdated    *int    `pulumi:"lastUpdated"`
	LdapPassword   *string `pulumi:"ldapPassword"`
	LdapServer     *string `pulumi:"ldapServer"`
	LdapUsername   *string `pulumi:"ldapUsername"`
	Name           *string `pulumi:"name"`
	Range          *string `pulumi:"range"`
	ScepCert       *string `pulumi:"scepCert"`
	ScepUrl        *string `pulumi:"scepUrl"`
	Source         *string `pulumi:"source"`
	SourceIp       *string `pulumi:"sourceIp"`
	UpdateInterval *int    `pulumi:"updateInterval"`
	UpdateVdom     *string `pulumi:"updateVdom"`
	Vdomparam      *string `pulumi:"vdomparam"`
}

type VpnCertificateCrlState struct {
	Crl            pulumi.StringPtrInput
	HttpUrl        pulumi.StringPtrInput
	LastUpdated    pulumi.IntPtrInput
	LdapPassword   pulumi.StringPtrInput
	LdapServer     pulumi.StringPtrInput
	LdapUsername   pulumi.StringPtrInput
	Name           pulumi.StringPtrInput
	Range          pulumi.StringPtrInput
	ScepCert       pulumi.StringPtrInput
	ScepUrl        pulumi.StringPtrInput
	Source         pulumi.StringPtrInput
	SourceIp       pulumi.StringPtrInput
	UpdateInterval pulumi.IntPtrInput
	UpdateVdom     pulumi.StringPtrInput
	Vdomparam      pulumi.StringPtrInput
}

func (VpnCertificateCrlState) ElementType() reflect.Type {
	return reflect.TypeOf((*vpnCertificateCrlState)(nil)).Elem()
}

type vpnCertificateCrlArgs struct {
	Crl            *string `pulumi:"crl"`
	HttpUrl        *string `pulumi:"httpUrl"`
	LastUpdated    *int    `pulumi:"lastUpdated"`
	LdapPassword   *string `pulumi:"ldapPassword"`
	LdapServer     *string `pulumi:"ldapServer"`
	LdapUsername   *string `pulumi:"ldapUsername"`
	Name           *string `pulumi:"name"`
	Range          *string `pulumi:"range"`
	ScepCert       *string `pulumi:"scepCert"`
	ScepUrl        *string `pulumi:"scepUrl"`
	Source         *string `pulumi:"source"`
	SourceIp       *string `pulumi:"sourceIp"`
	UpdateInterval *int    `pulumi:"updateInterval"`
	UpdateVdom     *string `pulumi:"updateVdom"`
	Vdomparam      *string `pulumi:"vdomparam"`
}

// The set of arguments for constructing a VpnCertificateCrl resource.
type VpnCertificateCrlArgs struct {
	Crl            pulumi.StringPtrInput
	HttpUrl        pulumi.StringPtrInput
	LastUpdated    pulumi.IntPtrInput
	LdapPassword   pulumi.StringPtrInput
	LdapServer     pulumi.StringPtrInput
	LdapUsername   pulumi.StringPtrInput
	Name           pulumi.StringPtrInput
	Range          pulumi.StringPtrInput
	ScepCert       pulumi.StringPtrInput
	ScepUrl        pulumi.StringPtrInput
	Source         pulumi.StringPtrInput
	SourceIp       pulumi.StringPtrInput
	UpdateInterval pulumi.IntPtrInput
	UpdateVdom     pulumi.StringPtrInput
	Vdomparam      pulumi.StringPtrInput
}

func (VpnCertificateCrlArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*vpnCertificateCrlArgs)(nil)).Elem()
}

type VpnCertificateCrlInput interface {
	pulumi.Input

	ToVpnCertificateCrlOutput() VpnCertificateCrlOutput
	ToVpnCertificateCrlOutputWithContext(ctx context.Context) VpnCertificateCrlOutput
}

func (*VpnCertificateCrl) ElementType() reflect.Type {
	return reflect.TypeOf((**VpnCertificateCrl)(nil)).Elem()
}

func (i *VpnCertificateCrl) ToVpnCertificateCrlOutput() VpnCertificateCrlOutput {
	return i.ToVpnCertificateCrlOutputWithContext(context.Background())
}

func (i *VpnCertificateCrl) ToVpnCertificateCrlOutputWithContext(ctx context.Context) VpnCertificateCrlOutput {
	return pulumi.ToOutputWithContext(ctx, i).(VpnCertificateCrlOutput)
}

// VpnCertificateCrlArrayInput is an input type that accepts VpnCertificateCrlArray and VpnCertificateCrlArrayOutput values.
// You can construct a concrete instance of `VpnCertificateCrlArrayInput` via:
//
//	VpnCertificateCrlArray{ VpnCertificateCrlArgs{...} }
type VpnCertificateCrlArrayInput interface {
	pulumi.Input

	ToVpnCertificateCrlArrayOutput() VpnCertificateCrlArrayOutput
	ToVpnCertificateCrlArrayOutputWithContext(context.Context) VpnCertificateCrlArrayOutput
}

type VpnCertificateCrlArray []VpnCertificateCrlInput

func (VpnCertificateCrlArray) ElementType() reflect.Type {
	return reflect.TypeOf((*[]*VpnCertificateCrl)(nil)).Elem()
}

func (i VpnCertificateCrlArray) ToVpnCertificateCrlArrayOutput() VpnCertificateCrlArrayOutput {
	return i.ToVpnCertificateCrlArrayOutputWithContext(context.Background())
}

func (i VpnCertificateCrlArray) ToVpnCertificateCrlArrayOutputWithContext(ctx context.Context) VpnCertificateCrlArrayOutput {
	return pulumi.ToOutputWithContext(ctx, i).(VpnCertificateCrlArrayOutput)
}

// VpnCertificateCrlMapInput is an input type that accepts VpnCertificateCrlMap and VpnCertificateCrlMapOutput values.
// You can construct a concrete instance of `VpnCertificateCrlMapInput` via:
//
//	VpnCertificateCrlMap{ "key": VpnCertificateCrlArgs{...} }
type VpnCertificateCrlMapInput interface {
	pulumi.Input

	ToVpnCertificateCrlMapOutput() VpnCertificateCrlMapOutput
	ToVpnCertificateCrlMapOutputWithContext(context.Context) VpnCertificateCrlMapOutput
}

type VpnCertificateCrlMap map[string]VpnCertificateCrlInput

func (VpnCertificateCrlMap) ElementType() reflect.Type {
	return reflect.TypeOf((*map[string]*VpnCertificateCrl)(nil)).Elem()
}

func (i VpnCertificateCrlMap) ToVpnCertificateCrlMapOutput() VpnCertificateCrlMapOutput {
	return i.ToVpnCertificateCrlMapOutputWithContext(context.Background())
}

func (i VpnCertificateCrlMap) ToVpnCertificateCrlMapOutputWithContext(ctx context.Context) VpnCertificateCrlMapOutput {
	return pulumi.ToOutputWithContext(ctx, i).(VpnCertificateCrlMapOutput)
}

type VpnCertificateCrlOutput struct{ *pulumi.OutputState }

func (VpnCertificateCrlOutput) ElementType() reflect.Type {
	return reflect.TypeOf((**VpnCertificateCrl)(nil)).Elem()
}

func (o VpnCertificateCrlOutput) ToVpnCertificateCrlOutput() VpnCertificateCrlOutput {
	return o
}

func (o VpnCertificateCrlOutput) ToVpnCertificateCrlOutputWithContext(ctx context.Context) VpnCertificateCrlOutput {
	return o
}

func (o VpnCertificateCrlOutput) Crl() pulumi.StringOutput {
	return o.ApplyT(func(v *VpnCertificateCrl) pulumi.StringOutput { return v.Crl }).(pulumi.StringOutput)
}

func (o VpnCertificateCrlOutput) HttpUrl() pulumi.StringOutput {
	return o.ApplyT(func(v *VpnCertificateCrl) pulumi.StringOutput { return v.HttpUrl }).(pulumi.StringOutput)
}

func (o VpnCertificateCrlOutput) LastUpdated() pulumi.IntOutput {
	return o.ApplyT(func(v *VpnCertificateCrl) pulumi.IntOutput { return v.LastUpdated }).(pulumi.IntOutput)
}

func (o VpnCertificateCrlOutput) LdapPassword() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *VpnCertificateCrl) pulumi.StringPtrOutput { return v.LdapPassword }).(pulumi.StringPtrOutput)
}

func (o VpnCertificateCrlOutput) LdapServer() pulumi.StringOutput {
	return o.ApplyT(func(v *VpnCertificateCrl) pulumi.StringOutput { return v.LdapServer }).(pulumi.StringOutput)
}

func (o VpnCertificateCrlOutput) LdapUsername() pulumi.StringOutput {
	return o.ApplyT(func(v *VpnCertificateCrl) pulumi.StringOutput { return v.LdapUsername }).(pulumi.StringOutput)
}

func (o VpnCertificateCrlOutput) Name() pulumi.StringOutput {
	return o.ApplyT(func(v *VpnCertificateCrl) pulumi.StringOutput { return v.Name }).(pulumi.StringOutput)
}

func (o VpnCertificateCrlOutput) Range() pulumi.StringOutput {
	return o.ApplyT(func(v *VpnCertificateCrl) pulumi.StringOutput { return v.Range }).(pulumi.StringOutput)
}

func (o VpnCertificateCrlOutput) ScepCert() pulumi.StringOutput {
	return o.ApplyT(func(v *VpnCertificateCrl) pulumi.StringOutput { return v.ScepCert }).(pulumi.StringOutput)
}

func (o VpnCertificateCrlOutput) ScepUrl() pulumi.StringOutput {
	return o.ApplyT(func(v *VpnCertificateCrl) pulumi.StringOutput { return v.ScepUrl }).(pulumi.StringOutput)
}

func (o VpnCertificateCrlOutput) Source() pulumi.StringOutput {
	return o.ApplyT(func(v *VpnCertificateCrl) pulumi.StringOutput { return v.Source }).(pulumi.StringOutput)
}

func (o VpnCertificateCrlOutput) SourceIp() pulumi.StringOutput {
	return o.ApplyT(func(v *VpnCertificateCrl) pulumi.StringOutput { return v.SourceIp }).(pulumi.StringOutput)
}

func (o VpnCertificateCrlOutput) UpdateInterval() pulumi.IntOutput {
	return o.ApplyT(func(v *VpnCertificateCrl) pulumi.IntOutput { return v.UpdateInterval }).(pulumi.IntOutput)
}

func (o VpnCertificateCrlOutput) UpdateVdom() pulumi.StringOutput {
	return o.ApplyT(func(v *VpnCertificateCrl) pulumi.StringOutput { return v.UpdateVdom }).(pulumi.StringOutput)
}

func (o VpnCertificateCrlOutput) Vdomparam() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *VpnCertificateCrl) pulumi.StringPtrOutput { return v.Vdomparam }).(pulumi.StringPtrOutput)
}

type VpnCertificateCrlArrayOutput struct{ *pulumi.OutputState }

func (VpnCertificateCrlArrayOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*[]*VpnCertificateCrl)(nil)).Elem()
}

func (o VpnCertificateCrlArrayOutput) ToVpnCertificateCrlArrayOutput() VpnCertificateCrlArrayOutput {
	return o
}

func (o VpnCertificateCrlArrayOutput) ToVpnCertificateCrlArrayOutputWithContext(ctx context.Context) VpnCertificateCrlArrayOutput {
	return o
}

func (o VpnCertificateCrlArrayOutput) Index(i pulumi.IntInput) VpnCertificateCrlOutput {
	return pulumi.All(o, i).ApplyT(func(vs []interface{}) *VpnCertificateCrl {
		return vs[0].([]*VpnCertificateCrl)[vs[1].(int)]
	}).(VpnCertificateCrlOutput)
}

type VpnCertificateCrlMapOutput struct{ *pulumi.OutputState }

func (VpnCertificateCrlMapOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*map[string]*VpnCertificateCrl)(nil)).Elem()
}

func (o VpnCertificateCrlMapOutput) ToVpnCertificateCrlMapOutput() VpnCertificateCrlMapOutput {
	return o
}

func (o VpnCertificateCrlMapOutput) ToVpnCertificateCrlMapOutputWithContext(ctx context.Context) VpnCertificateCrlMapOutput {
	return o
}

func (o VpnCertificateCrlMapOutput) MapIndex(k pulumi.StringInput) VpnCertificateCrlOutput {
	return pulumi.All(o, k).ApplyT(func(vs []interface{}) *VpnCertificateCrl {
		return vs[0].(map[string]*VpnCertificateCrl)[vs[1].(string)]
	}).(VpnCertificateCrlOutput)
}

func init() {
	pulumi.RegisterInputType(reflect.TypeOf((*VpnCertificateCrlInput)(nil)).Elem(), &VpnCertificateCrl{})
	pulumi.RegisterInputType(reflect.TypeOf((*VpnCertificateCrlArrayInput)(nil)).Elem(), VpnCertificateCrlArray{})
	pulumi.RegisterInputType(reflect.TypeOf((*VpnCertificateCrlMapInput)(nil)).Elem(), VpnCertificateCrlMap{})
	pulumi.RegisterOutputType(VpnCertificateCrlOutput{})
	pulumi.RegisterOutputType(VpnCertificateCrlArrayOutput{})
	pulumi.RegisterOutputType(VpnCertificateCrlMapOutput{})
}
