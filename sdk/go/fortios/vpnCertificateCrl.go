// *** WARNING: this file was generated by the Pulumi Terraform Bridge (tfgen) Tool. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

package fortios

import (
	"context"
	"reflect"

	"github.com/pulumi/pulumi/sdk/v3/go/pulumi"
)

// Certificate Revocation List as a PEM file.
//
// ## Import
//
// VpnCertificate Crl can be imported using any of these accepted formats
//
// ```sh
//  $ pulumi import fortios:index/vpnCertificateCrl:VpnCertificateCrl labelname {{name}}
// ```
//
//  If you do not want to import arguments of block$ export "FORTIOS_IMPORT_TABLE"="false"
//
// ```sh
//  $ pulumi import fortios:index/vpnCertificateCrl:VpnCertificateCrl labelname {{name}}
// ```
//
//  $ unset "FORTIOS_IMPORT_TABLE"
type VpnCertificateCrl struct {
	pulumi.CustomResourceState

	// Certificate Revocation List as a PEM file.
	Crl pulumi.StringOutput `pulumi:"crl"`
	// HTTP server URL for CRL auto-update.
	HttpUrl pulumi.StringOutput `pulumi:"httpUrl"`
	// Time at which CRL was last updated.
	LastUpdated pulumi.IntOutput `pulumi:"lastUpdated"`
	// LDAP server user password.
	LdapPassword pulumi.StringPtrOutput `pulumi:"ldapPassword"`
	// LDAP server name for CRL auto-update.
	LdapServer pulumi.StringOutput `pulumi:"ldapServer"`
	// LDAP server user name.
	LdapUsername pulumi.StringOutput `pulumi:"ldapUsername"`
	// Name.
	Name pulumi.StringOutput `pulumi:"name"`
	// Either global or VDOM IP address range for the certificate. Valid values: `global`, `vdom`.
	Range pulumi.StringOutput `pulumi:"range"`
	// Local certificate for SCEP communication for CRL auto-update.
	ScepCert pulumi.StringOutput `pulumi:"scepCert"`
	// SCEP server URL for CRL auto-update.
	ScepUrl pulumi.StringOutput `pulumi:"scepUrl"`
	// Certificate source type.
	Source pulumi.StringOutput `pulumi:"source"`
	// Source IP address for communications to a HTTP or SCEP CA server.
	SourceIp pulumi.StringOutput `pulumi:"sourceIp"`
	// Time in seconds before the FortiGate checks for an updated CRL. Set to 0 to update only when it expires.
	UpdateInterval pulumi.IntOutput `pulumi:"updateInterval"`
	// VDOM for CRL update.
	UpdateVdom pulumi.StringOutput `pulumi:"updateVdom"`
	// Specifies the vdom to which the resource will be applied when the FortiGate unit is running in VDOM mode. Only one vdom can be specified. If you want to inherit the vdom configuration of the provider, please do not set this parameter.
	Vdomparam pulumi.StringPtrOutput `pulumi:"vdomparam"`
}

// NewVpnCertificateCrl registers a new resource with the given unique name, arguments, and options.
func NewVpnCertificateCrl(ctx *pulumi.Context,
	name string, args *VpnCertificateCrlArgs, opts ...pulumi.ResourceOption) (*VpnCertificateCrl, error) {
	if args == nil {
		args = &VpnCertificateCrlArgs{}
	}

	opts = pkgResourceDefaultOpts(opts)
	var resource VpnCertificateCrl
	err := ctx.RegisterResource("fortios:index/vpnCertificateCrl:VpnCertificateCrl", name, args, &resource, opts...)
	if err != nil {
		return nil, err
	}
	return &resource, nil
}

// GetVpnCertificateCrl gets an existing VpnCertificateCrl resource's state with the given name, ID, and optional
// state properties that are used to uniquely qualify the lookup (nil if not required).
func GetVpnCertificateCrl(ctx *pulumi.Context,
	name string, id pulumi.IDInput, state *VpnCertificateCrlState, opts ...pulumi.ResourceOption) (*VpnCertificateCrl, error) {
	var resource VpnCertificateCrl
	err := ctx.ReadResource("fortios:index/vpnCertificateCrl:VpnCertificateCrl", name, id, state, &resource, opts...)
	if err != nil {
		return nil, err
	}
	return &resource, nil
}

// Input properties used for looking up and filtering VpnCertificateCrl resources.
type vpnCertificateCrlState struct {
	// Certificate Revocation List as a PEM file.
	Crl *string `pulumi:"crl"`
	// HTTP server URL for CRL auto-update.
	HttpUrl *string `pulumi:"httpUrl"`
	// Time at which CRL was last updated.
	LastUpdated *int `pulumi:"lastUpdated"`
	// LDAP server user password.
	LdapPassword *string `pulumi:"ldapPassword"`
	// LDAP server name for CRL auto-update.
	LdapServer *string `pulumi:"ldapServer"`
	// LDAP server user name.
	LdapUsername *string `pulumi:"ldapUsername"`
	// Name.
	Name *string `pulumi:"name"`
	// Either global or VDOM IP address range for the certificate. Valid values: `global`, `vdom`.
	Range *string `pulumi:"range"`
	// Local certificate for SCEP communication for CRL auto-update.
	ScepCert *string `pulumi:"scepCert"`
	// SCEP server URL for CRL auto-update.
	ScepUrl *string `pulumi:"scepUrl"`
	// Certificate source type.
	Source *string `pulumi:"source"`
	// Source IP address for communications to a HTTP or SCEP CA server.
	SourceIp *string `pulumi:"sourceIp"`
	// Time in seconds before the FortiGate checks for an updated CRL. Set to 0 to update only when it expires.
	UpdateInterval *int `pulumi:"updateInterval"`
	// VDOM for CRL update.
	UpdateVdom *string `pulumi:"updateVdom"`
	// Specifies the vdom to which the resource will be applied when the FortiGate unit is running in VDOM mode. Only one vdom can be specified. If you want to inherit the vdom configuration of the provider, please do not set this parameter.
	Vdomparam *string `pulumi:"vdomparam"`
}

type VpnCertificateCrlState struct {
	// Certificate Revocation List as a PEM file.
	Crl pulumi.StringPtrInput
	// HTTP server URL for CRL auto-update.
	HttpUrl pulumi.StringPtrInput
	// Time at which CRL was last updated.
	LastUpdated pulumi.IntPtrInput
	// LDAP server user password.
	LdapPassword pulumi.StringPtrInput
	// LDAP server name for CRL auto-update.
	LdapServer pulumi.StringPtrInput
	// LDAP server user name.
	LdapUsername pulumi.StringPtrInput
	// Name.
	Name pulumi.StringPtrInput
	// Either global or VDOM IP address range for the certificate. Valid values: `global`, `vdom`.
	Range pulumi.StringPtrInput
	// Local certificate for SCEP communication for CRL auto-update.
	ScepCert pulumi.StringPtrInput
	// SCEP server URL for CRL auto-update.
	ScepUrl pulumi.StringPtrInput
	// Certificate source type.
	Source pulumi.StringPtrInput
	// Source IP address for communications to a HTTP or SCEP CA server.
	SourceIp pulumi.StringPtrInput
	// Time in seconds before the FortiGate checks for an updated CRL. Set to 0 to update only when it expires.
	UpdateInterval pulumi.IntPtrInput
	// VDOM for CRL update.
	UpdateVdom pulumi.StringPtrInput
	// Specifies the vdom to which the resource will be applied when the FortiGate unit is running in VDOM mode. Only one vdom can be specified. If you want to inherit the vdom configuration of the provider, please do not set this parameter.
	Vdomparam pulumi.StringPtrInput
}

func (VpnCertificateCrlState) ElementType() reflect.Type {
	return reflect.TypeOf((*vpnCertificateCrlState)(nil)).Elem()
}

type vpnCertificateCrlArgs struct {
	// Certificate Revocation List as a PEM file.
	Crl *string `pulumi:"crl"`
	// HTTP server URL for CRL auto-update.
	HttpUrl *string `pulumi:"httpUrl"`
	// Time at which CRL was last updated.
	LastUpdated *int `pulumi:"lastUpdated"`
	// LDAP server user password.
	LdapPassword *string `pulumi:"ldapPassword"`
	// LDAP server name for CRL auto-update.
	LdapServer *string `pulumi:"ldapServer"`
	// LDAP server user name.
	LdapUsername *string `pulumi:"ldapUsername"`
	// Name.
	Name *string `pulumi:"name"`
	// Either global or VDOM IP address range for the certificate. Valid values: `global`, `vdom`.
	Range *string `pulumi:"range"`
	// Local certificate for SCEP communication for CRL auto-update.
	ScepCert *string `pulumi:"scepCert"`
	// SCEP server URL for CRL auto-update.
	ScepUrl *string `pulumi:"scepUrl"`
	// Certificate source type.
	Source *string `pulumi:"source"`
	// Source IP address for communications to a HTTP or SCEP CA server.
	SourceIp *string `pulumi:"sourceIp"`
	// Time in seconds before the FortiGate checks for an updated CRL. Set to 0 to update only when it expires.
	UpdateInterval *int `pulumi:"updateInterval"`
	// VDOM for CRL update.
	UpdateVdom *string `pulumi:"updateVdom"`
	// Specifies the vdom to which the resource will be applied when the FortiGate unit is running in VDOM mode. Only one vdom can be specified. If you want to inherit the vdom configuration of the provider, please do not set this parameter.
	Vdomparam *string `pulumi:"vdomparam"`
}

// The set of arguments for constructing a VpnCertificateCrl resource.
type VpnCertificateCrlArgs struct {
	// Certificate Revocation List as a PEM file.
	Crl pulumi.StringPtrInput
	// HTTP server URL for CRL auto-update.
	HttpUrl pulumi.StringPtrInput
	// Time at which CRL was last updated.
	LastUpdated pulumi.IntPtrInput
	// LDAP server user password.
	LdapPassword pulumi.StringPtrInput
	// LDAP server name for CRL auto-update.
	LdapServer pulumi.StringPtrInput
	// LDAP server user name.
	LdapUsername pulumi.StringPtrInput
	// Name.
	Name pulumi.StringPtrInput
	// Either global or VDOM IP address range for the certificate. Valid values: `global`, `vdom`.
	Range pulumi.StringPtrInput
	// Local certificate for SCEP communication for CRL auto-update.
	ScepCert pulumi.StringPtrInput
	// SCEP server URL for CRL auto-update.
	ScepUrl pulumi.StringPtrInput
	// Certificate source type.
	Source pulumi.StringPtrInput
	// Source IP address for communications to a HTTP or SCEP CA server.
	SourceIp pulumi.StringPtrInput
	// Time in seconds before the FortiGate checks for an updated CRL. Set to 0 to update only when it expires.
	UpdateInterval pulumi.IntPtrInput
	// VDOM for CRL update.
	UpdateVdom pulumi.StringPtrInput
	// Specifies the vdom to which the resource will be applied when the FortiGate unit is running in VDOM mode. Only one vdom can be specified. If you want to inherit the vdom configuration of the provider, please do not set this parameter.
	Vdomparam pulumi.StringPtrInput
}

func (VpnCertificateCrlArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*vpnCertificateCrlArgs)(nil)).Elem()
}

type VpnCertificateCrlInput interface {
	pulumi.Input

	ToVpnCertificateCrlOutput() VpnCertificateCrlOutput
	ToVpnCertificateCrlOutputWithContext(ctx context.Context) VpnCertificateCrlOutput
}

func (*VpnCertificateCrl) ElementType() reflect.Type {
	return reflect.TypeOf((**VpnCertificateCrl)(nil)).Elem()
}

func (i *VpnCertificateCrl) ToVpnCertificateCrlOutput() VpnCertificateCrlOutput {
	return i.ToVpnCertificateCrlOutputWithContext(context.Background())
}

func (i *VpnCertificateCrl) ToVpnCertificateCrlOutputWithContext(ctx context.Context) VpnCertificateCrlOutput {
	return pulumi.ToOutputWithContext(ctx, i).(VpnCertificateCrlOutput)
}

// VpnCertificateCrlArrayInput is an input type that accepts VpnCertificateCrlArray and VpnCertificateCrlArrayOutput values.
// You can construct a concrete instance of `VpnCertificateCrlArrayInput` via:
//
//          VpnCertificateCrlArray{ VpnCertificateCrlArgs{...} }
type VpnCertificateCrlArrayInput interface {
	pulumi.Input

	ToVpnCertificateCrlArrayOutput() VpnCertificateCrlArrayOutput
	ToVpnCertificateCrlArrayOutputWithContext(context.Context) VpnCertificateCrlArrayOutput
}

type VpnCertificateCrlArray []VpnCertificateCrlInput

func (VpnCertificateCrlArray) ElementType() reflect.Type {
	return reflect.TypeOf((*[]*VpnCertificateCrl)(nil)).Elem()
}

func (i VpnCertificateCrlArray) ToVpnCertificateCrlArrayOutput() VpnCertificateCrlArrayOutput {
	return i.ToVpnCertificateCrlArrayOutputWithContext(context.Background())
}

func (i VpnCertificateCrlArray) ToVpnCertificateCrlArrayOutputWithContext(ctx context.Context) VpnCertificateCrlArrayOutput {
	return pulumi.ToOutputWithContext(ctx, i).(VpnCertificateCrlArrayOutput)
}

// VpnCertificateCrlMapInput is an input type that accepts VpnCertificateCrlMap and VpnCertificateCrlMapOutput values.
// You can construct a concrete instance of `VpnCertificateCrlMapInput` via:
//
//          VpnCertificateCrlMap{ "key": VpnCertificateCrlArgs{...} }
type VpnCertificateCrlMapInput interface {
	pulumi.Input

	ToVpnCertificateCrlMapOutput() VpnCertificateCrlMapOutput
	ToVpnCertificateCrlMapOutputWithContext(context.Context) VpnCertificateCrlMapOutput
}

type VpnCertificateCrlMap map[string]VpnCertificateCrlInput

func (VpnCertificateCrlMap) ElementType() reflect.Type {
	return reflect.TypeOf((*map[string]*VpnCertificateCrl)(nil)).Elem()
}

func (i VpnCertificateCrlMap) ToVpnCertificateCrlMapOutput() VpnCertificateCrlMapOutput {
	return i.ToVpnCertificateCrlMapOutputWithContext(context.Background())
}

func (i VpnCertificateCrlMap) ToVpnCertificateCrlMapOutputWithContext(ctx context.Context) VpnCertificateCrlMapOutput {
	return pulumi.ToOutputWithContext(ctx, i).(VpnCertificateCrlMapOutput)
}

type VpnCertificateCrlOutput struct{ *pulumi.OutputState }

func (VpnCertificateCrlOutput) ElementType() reflect.Type {
	return reflect.TypeOf((**VpnCertificateCrl)(nil)).Elem()
}

func (o VpnCertificateCrlOutput) ToVpnCertificateCrlOutput() VpnCertificateCrlOutput {
	return o
}

func (o VpnCertificateCrlOutput) ToVpnCertificateCrlOutputWithContext(ctx context.Context) VpnCertificateCrlOutput {
	return o
}

type VpnCertificateCrlArrayOutput struct{ *pulumi.OutputState }

func (VpnCertificateCrlArrayOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*[]*VpnCertificateCrl)(nil)).Elem()
}

func (o VpnCertificateCrlArrayOutput) ToVpnCertificateCrlArrayOutput() VpnCertificateCrlArrayOutput {
	return o
}

func (o VpnCertificateCrlArrayOutput) ToVpnCertificateCrlArrayOutputWithContext(ctx context.Context) VpnCertificateCrlArrayOutput {
	return o
}

func (o VpnCertificateCrlArrayOutput) Index(i pulumi.IntInput) VpnCertificateCrlOutput {
	return pulumi.All(o, i).ApplyT(func(vs []interface{}) *VpnCertificateCrl {
		return vs[0].([]*VpnCertificateCrl)[vs[1].(int)]
	}).(VpnCertificateCrlOutput)
}

type VpnCertificateCrlMapOutput struct{ *pulumi.OutputState }

func (VpnCertificateCrlMapOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*map[string]*VpnCertificateCrl)(nil)).Elem()
}

func (o VpnCertificateCrlMapOutput) ToVpnCertificateCrlMapOutput() VpnCertificateCrlMapOutput {
	return o
}

func (o VpnCertificateCrlMapOutput) ToVpnCertificateCrlMapOutputWithContext(ctx context.Context) VpnCertificateCrlMapOutput {
	return o
}

func (o VpnCertificateCrlMapOutput) MapIndex(k pulumi.StringInput) VpnCertificateCrlOutput {
	return pulumi.All(o, k).ApplyT(func(vs []interface{}) *VpnCertificateCrl {
		return vs[0].(map[string]*VpnCertificateCrl)[vs[1].(string)]
	}).(VpnCertificateCrlOutput)
}

func init() {
	pulumi.RegisterInputType(reflect.TypeOf((*VpnCertificateCrlInput)(nil)).Elem(), &VpnCertificateCrl{})
	pulumi.RegisterInputType(reflect.TypeOf((*VpnCertificateCrlArrayInput)(nil)).Elem(), VpnCertificateCrlArray{})
	pulumi.RegisterInputType(reflect.TypeOf((*VpnCertificateCrlMapInput)(nil)).Elem(), VpnCertificateCrlMap{})
	pulumi.RegisterOutputType(VpnCertificateCrlOutput{})
	pulumi.RegisterOutputType(VpnCertificateCrlArrayOutput{})
	pulumi.RegisterOutputType(VpnCertificateCrlMapOutput{})
}
