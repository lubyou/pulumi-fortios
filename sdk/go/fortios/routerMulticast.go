// Code generated by the Pulumi Terraform Bridge (tfgen) Tool DO NOT EDIT.
// *** WARNING: Do not edit by hand unless you're certain you know what you are doing! ***

package fortios

import (
	"context"
	"reflect"

	"github.com/lubyou/pulumi-fortios/sdk/go/fortios/internal"
	"github.com/pulumi/pulumi/sdk/v3/go/pulumi"
	"github.com/pulumi/pulumi/sdk/v3/go/pulumix"
)

type RouterMulticast struct {
	pulumi.CustomResourceState

	DynamicSortSubtable pulumi.StringPtrOutput              `pulumi:"dynamicSortSubtable"`
	GetAllTables        pulumi.StringPtrOutput              `pulumi:"getAllTables"`
	Interfaces          RouterMulticastInterfaceArrayOutput `pulumi:"interfaces"`
	MulticastRouting    pulumi.StringOutput                 `pulumi:"multicastRouting"`
	PimSmGlobal         RouterMulticastPimSmGlobalOutput    `pulumi:"pimSmGlobal"`
	RouteLimit          pulumi.IntOutput                    `pulumi:"routeLimit"`
	RouteThreshold      pulumi.IntOutput                    `pulumi:"routeThreshold"`
	Vdomparam           pulumi.StringPtrOutput              `pulumi:"vdomparam"`
}

// NewRouterMulticast registers a new resource with the given unique name, arguments, and options.
func NewRouterMulticast(ctx *pulumi.Context,
	name string, args *RouterMulticastArgs, opts ...pulumi.ResourceOption) (*RouterMulticast, error) {
	if args == nil {
		args = &RouterMulticastArgs{}
	}

	opts = internal.PkgResourceDefaultOpts(opts)
	var resource RouterMulticast
	err := ctx.RegisterResource("fortios:index/routerMulticast:RouterMulticast", name, args, &resource, opts...)
	if err != nil {
		return nil, err
	}
	return &resource, nil
}

// GetRouterMulticast gets an existing RouterMulticast resource's state with the given name, ID, and optional
// state properties that are used to uniquely qualify the lookup (nil if not required).
func GetRouterMulticast(ctx *pulumi.Context,
	name string, id pulumi.IDInput, state *RouterMulticastState, opts ...pulumi.ResourceOption) (*RouterMulticast, error) {
	var resource RouterMulticast
	err := ctx.ReadResource("fortios:index/routerMulticast:RouterMulticast", name, id, state, &resource, opts...)
	if err != nil {
		return nil, err
	}
	return &resource, nil
}

// Input properties used for looking up and filtering RouterMulticast resources.
type routerMulticastState struct {
	DynamicSortSubtable *string                     `pulumi:"dynamicSortSubtable"`
	GetAllTables        *string                     `pulumi:"getAllTables"`
	Interfaces          []RouterMulticastInterface  `pulumi:"interfaces"`
	MulticastRouting    *string                     `pulumi:"multicastRouting"`
	PimSmGlobal         *RouterMulticastPimSmGlobal `pulumi:"pimSmGlobal"`
	RouteLimit          *int                        `pulumi:"routeLimit"`
	RouteThreshold      *int                        `pulumi:"routeThreshold"`
	Vdomparam           *string                     `pulumi:"vdomparam"`
}

type RouterMulticastState struct {
	DynamicSortSubtable pulumi.StringPtrInput
	GetAllTables        pulumi.StringPtrInput
	Interfaces          RouterMulticastInterfaceArrayInput
	MulticastRouting    pulumi.StringPtrInput
	PimSmGlobal         RouterMulticastPimSmGlobalPtrInput
	RouteLimit          pulumi.IntPtrInput
	RouteThreshold      pulumi.IntPtrInput
	Vdomparam           pulumi.StringPtrInput
}

func (RouterMulticastState) ElementType() reflect.Type {
	return reflect.TypeOf((*routerMulticastState)(nil)).Elem()
}

type routerMulticastArgs struct {
	DynamicSortSubtable *string                     `pulumi:"dynamicSortSubtable"`
	GetAllTables        *string                     `pulumi:"getAllTables"`
	Interfaces          []RouterMulticastInterface  `pulumi:"interfaces"`
	MulticastRouting    *string                     `pulumi:"multicastRouting"`
	PimSmGlobal         *RouterMulticastPimSmGlobal `pulumi:"pimSmGlobal"`
	RouteLimit          *int                        `pulumi:"routeLimit"`
	RouteThreshold      *int                        `pulumi:"routeThreshold"`
	Vdomparam           *string                     `pulumi:"vdomparam"`
}

// The set of arguments for constructing a RouterMulticast resource.
type RouterMulticastArgs struct {
	DynamicSortSubtable pulumi.StringPtrInput
	GetAllTables        pulumi.StringPtrInput
	Interfaces          RouterMulticastInterfaceArrayInput
	MulticastRouting    pulumi.StringPtrInput
	PimSmGlobal         RouterMulticastPimSmGlobalPtrInput
	RouteLimit          pulumi.IntPtrInput
	RouteThreshold      pulumi.IntPtrInput
	Vdomparam           pulumi.StringPtrInput
}

func (RouterMulticastArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*routerMulticastArgs)(nil)).Elem()
}

type RouterMulticastInput interface {
	pulumi.Input

	ToRouterMulticastOutput() RouterMulticastOutput
	ToRouterMulticastOutputWithContext(ctx context.Context) RouterMulticastOutput
}

func (*RouterMulticast) ElementType() reflect.Type {
	return reflect.TypeOf((**RouterMulticast)(nil)).Elem()
}

func (i *RouterMulticast) ToRouterMulticastOutput() RouterMulticastOutput {
	return i.ToRouterMulticastOutputWithContext(context.Background())
}

func (i *RouterMulticast) ToRouterMulticastOutputWithContext(ctx context.Context) RouterMulticastOutput {
	return pulumi.ToOutputWithContext(ctx, i).(RouterMulticastOutput)
}

func (i *RouterMulticast) ToOutput(ctx context.Context) pulumix.Output[*RouterMulticast] {
	return pulumix.Output[*RouterMulticast]{
		OutputState: i.ToRouterMulticastOutputWithContext(ctx).OutputState,
	}
}

// RouterMulticastArrayInput is an input type that accepts RouterMulticastArray and RouterMulticastArrayOutput values.
// You can construct a concrete instance of `RouterMulticastArrayInput` via:
//
//	RouterMulticastArray{ RouterMulticastArgs{...} }
type RouterMulticastArrayInput interface {
	pulumi.Input

	ToRouterMulticastArrayOutput() RouterMulticastArrayOutput
	ToRouterMulticastArrayOutputWithContext(context.Context) RouterMulticastArrayOutput
}

type RouterMulticastArray []RouterMulticastInput

func (RouterMulticastArray) ElementType() reflect.Type {
	return reflect.TypeOf((*[]*RouterMulticast)(nil)).Elem()
}

func (i RouterMulticastArray) ToRouterMulticastArrayOutput() RouterMulticastArrayOutput {
	return i.ToRouterMulticastArrayOutputWithContext(context.Background())
}

func (i RouterMulticastArray) ToRouterMulticastArrayOutputWithContext(ctx context.Context) RouterMulticastArrayOutput {
	return pulumi.ToOutputWithContext(ctx, i).(RouterMulticastArrayOutput)
}

func (i RouterMulticastArray) ToOutput(ctx context.Context) pulumix.Output[[]*RouterMulticast] {
	return pulumix.Output[[]*RouterMulticast]{
		OutputState: i.ToRouterMulticastArrayOutputWithContext(ctx).OutputState,
	}
}

// RouterMulticastMapInput is an input type that accepts RouterMulticastMap and RouterMulticastMapOutput values.
// You can construct a concrete instance of `RouterMulticastMapInput` via:
//
//	RouterMulticastMap{ "key": RouterMulticastArgs{...} }
type RouterMulticastMapInput interface {
	pulumi.Input

	ToRouterMulticastMapOutput() RouterMulticastMapOutput
	ToRouterMulticastMapOutputWithContext(context.Context) RouterMulticastMapOutput
}

type RouterMulticastMap map[string]RouterMulticastInput

func (RouterMulticastMap) ElementType() reflect.Type {
	return reflect.TypeOf((*map[string]*RouterMulticast)(nil)).Elem()
}

func (i RouterMulticastMap) ToRouterMulticastMapOutput() RouterMulticastMapOutput {
	return i.ToRouterMulticastMapOutputWithContext(context.Background())
}

func (i RouterMulticastMap) ToRouterMulticastMapOutputWithContext(ctx context.Context) RouterMulticastMapOutput {
	return pulumi.ToOutputWithContext(ctx, i).(RouterMulticastMapOutput)
}

func (i RouterMulticastMap) ToOutput(ctx context.Context) pulumix.Output[map[string]*RouterMulticast] {
	return pulumix.Output[map[string]*RouterMulticast]{
		OutputState: i.ToRouterMulticastMapOutputWithContext(ctx).OutputState,
	}
}

type RouterMulticastOutput struct{ *pulumi.OutputState }

func (RouterMulticastOutput) ElementType() reflect.Type {
	return reflect.TypeOf((**RouterMulticast)(nil)).Elem()
}

func (o RouterMulticastOutput) ToRouterMulticastOutput() RouterMulticastOutput {
	return o
}

func (o RouterMulticastOutput) ToRouterMulticastOutputWithContext(ctx context.Context) RouterMulticastOutput {
	return o
}

func (o RouterMulticastOutput) ToOutput(ctx context.Context) pulumix.Output[*RouterMulticast] {
	return pulumix.Output[*RouterMulticast]{
		OutputState: o.OutputState,
	}
}

func (o RouterMulticastOutput) DynamicSortSubtable() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *RouterMulticast) pulumi.StringPtrOutput { return v.DynamicSortSubtable }).(pulumi.StringPtrOutput)
}

func (o RouterMulticastOutput) GetAllTables() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *RouterMulticast) pulumi.StringPtrOutput { return v.GetAllTables }).(pulumi.StringPtrOutput)
}

func (o RouterMulticastOutput) Interfaces() RouterMulticastInterfaceArrayOutput {
	return o.ApplyT(func(v *RouterMulticast) RouterMulticastInterfaceArrayOutput { return v.Interfaces }).(RouterMulticastInterfaceArrayOutput)
}

func (o RouterMulticastOutput) MulticastRouting() pulumi.StringOutput {
	return o.ApplyT(func(v *RouterMulticast) pulumi.StringOutput { return v.MulticastRouting }).(pulumi.StringOutput)
}

func (o RouterMulticastOutput) PimSmGlobal() RouterMulticastPimSmGlobalOutput {
	return o.ApplyT(func(v *RouterMulticast) RouterMulticastPimSmGlobalOutput { return v.PimSmGlobal }).(RouterMulticastPimSmGlobalOutput)
}

func (o RouterMulticastOutput) RouteLimit() pulumi.IntOutput {
	return o.ApplyT(func(v *RouterMulticast) pulumi.IntOutput { return v.RouteLimit }).(pulumi.IntOutput)
}

func (o RouterMulticastOutput) RouteThreshold() pulumi.IntOutput {
	return o.ApplyT(func(v *RouterMulticast) pulumi.IntOutput { return v.RouteThreshold }).(pulumi.IntOutput)
}

func (o RouterMulticastOutput) Vdomparam() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *RouterMulticast) pulumi.StringPtrOutput { return v.Vdomparam }).(pulumi.StringPtrOutput)
}

type RouterMulticastArrayOutput struct{ *pulumi.OutputState }

func (RouterMulticastArrayOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*[]*RouterMulticast)(nil)).Elem()
}

func (o RouterMulticastArrayOutput) ToRouterMulticastArrayOutput() RouterMulticastArrayOutput {
	return o
}

func (o RouterMulticastArrayOutput) ToRouterMulticastArrayOutputWithContext(ctx context.Context) RouterMulticastArrayOutput {
	return o
}

func (o RouterMulticastArrayOutput) ToOutput(ctx context.Context) pulumix.Output[[]*RouterMulticast] {
	return pulumix.Output[[]*RouterMulticast]{
		OutputState: o.OutputState,
	}
}

func (o RouterMulticastArrayOutput) Index(i pulumi.IntInput) RouterMulticastOutput {
	return pulumi.All(o, i).ApplyT(func(vs []interface{}) *RouterMulticast {
		return vs[0].([]*RouterMulticast)[vs[1].(int)]
	}).(RouterMulticastOutput)
}

type RouterMulticastMapOutput struct{ *pulumi.OutputState }

func (RouterMulticastMapOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*map[string]*RouterMulticast)(nil)).Elem()
}

func (o RouterMulticastMapOutput) ToRouterMulticastMapOutput() RouterMulticastMapOutput {
	return o
}

func (o RouterMulticastMapOutput) ToRouterMulticastMapOutputWithContext(ctx context.Context) RouterMulticastMapOutput {
	return o
}

func (o RouterMulticastMapOutput) ToOutput(ctx context.Context) pulumix.Output[map[string]*RouterMulticast] {
	return pulumix.Output[map[string]*RouterMulticast]{
		OutputState: o.OutputState,
	}
}

func (o RouterMulticastMapOutput) MapIndex(k pulumi.StringInput) RouterMulticastOutput {
	return pulumi.All(o, k).ApplyT(func(vs []interface{}) *RouterMulticast {
		return vs[0].(map[string]*RouterMulticast)[vs[1].(string)]
	}).(RouterMulticastOutput)
}

func init() {
	pulumi.RegisterInputType(reflect.TypeOf((*RouterMulticastInput)(nil)).Elem(), &RouterMulticast{})
	pulumi.RegisterInputType(reflect.TypeOf((*RouterMulticastArrayInput)(nil)).Elem(), RouterMulticastArray{})
	pulumi.RegisterInputType(reflect.TypeOf((*RouterMulticastMapInput)(nil)).Elem(), RouterMulticastMap{})
	pulumi.RegisterOutputType(RouterMulticastOutput{})
	pulumi.RegisterOutputType(RouterMulticastArrayOutput{})
	pulumi.RegisterOutputType(RouterMulticastMapOutput{})
}
