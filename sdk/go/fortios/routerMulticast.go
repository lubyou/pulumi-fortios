// *** WARNING: this file was generated by the Pulumi Terraform Bridge (tfgen) Tool. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

package fortios

import (
	"context"
	"reflect"

	"github.com/pulumi/pulumi/sdk/v3/go/pulumi"
)

// Configure router multicast.
//
// ## Example Usage
//
// ```go
// package main
//
// import (
// 	"github.com/pulumi/pulumi-fortios/sdk/go/fortios"
// 	"github.com/pulumi/pulumi/sdk/v3/go/pulumi"
// )
//
// func main() {
// 	pulumi.Run(func(ctx *pulumi.Context) error {
// 		_, err := fortios.NewRouterMulticast(ctx, "trname", &fortios.RouterMulticastArgs{
// 			MulticastRouting: pulumi.String("disable"),
// 			PimSmGlobal: &RouterMulticastPimSmGlobalArgs{
// 				BsrAllowQuickRefresh:     pulumi.String("disable"),
// 				BsrCandidate:             pulumi.String("disable"),
// 				BsrHash:                  pulumi.Int(10),
// 				BsrPriority:              pulumi.Int(0),
// 				CiscoCrpPrefix:           pulumi.String("disable"),
// 				CiscoIgnoreRpSetPriority: pulumi.String("disable"),
// 				CiscoRegisterChecksum:    pulumi.String("disable"),
// 				JoinPruneHoldtime:        pulumi.Int(210),
// 				MessageInterval:          pulumi.Int(60),
// 				NullRegisterRetries:      pulumi.Int(1),
// 				RegisterRateLimit:        pulumi.Int(0),
// 				RegisterRpReachability:   pulumi.String("enable"),
// 				RegisterSource:           pulumi.String("disable"),
// 				RegisterSourceIp:         pulumi.String("0.0.0.0"),
// 				RegisterSupression:       pulumi.Int(60),
// 				RpRegisterKeepalive:      pulumi.Int(185),
// 				SptThreshold:             pulumi.String("enable"),
// 				Ssm:                      pulumi.String("disable"),
// 			},
// 			RouteLimit:     pulumi.Int(2147483647),
// 			RouteThreshold: pulumi.Int(2147483647),
// 		})
// 		if err != nil {
// 			return err
// 		}
// 		return nil
// 	})
// }
// ```
//
// ## Import
//
// Router Multicast can be imported using any of these accepted formats$ export "FORTIOS_IMPORT_TABLE"="true"
//
// ```sh
//  $ pulumi import fortios:index/routerMulticast:RouterMulticast labelname RouterMulticast
// ```
//
//  $ unset "FORTIOS_IMPORT_TABLE"
type RouterMulticast struct {
	pulumi.CustomResourceState

	// true or false, set this parameter to true when using dynamic forEach + toset to configure and sort sub-tables, please do not set this parameter when configuring static sub-tables.
	DynamicSortSubtable pulumi.StringPtrOutput `pulumi:"dynamicSortSubtable"`
	// PIM interfaces. The structure of `interface` block is documented below.
	Interfaces RouterMulticastInterfaceArrayOutput `pulumi:"interfaces"`
	// Enable/disable IP multicast routing. Valid values: `enable`, `disable`.
	MulticastRouting pulumi.StringOutput `pulumi:"multicastRouting"`
	// PIM sparse-mode global settings. The structure of `pimSmGlobal` block is documented below.
	PimSmGlobal RouterMulticastPimSmGlobalPtrOutput `pulumi:"pimSmGlobal"`
	// Maximum number of multicast routes.
	RouteLimit pulumi.IntOutput `pulumi:"routeLimit"`
	// Generate warnings when the number of multicast routes exceeds this number, must not be greater than route-limit.
	RouteThreshold pulumi.IntOutput `pulumi:"routeThreshold"`
	// Specifies the vdom to which the resource will be applied when the FortiGate unit is running in VDOM mode. Only one vdom can be specified. If you want to inherit the vdom configuration of the provider, please do not set this parameter.
	Vdomparam pulumi.StringPtrOutput `pulumi:"vdomparam"`
}

// NewRouterMulticast registers a new resource with the given unique name, arguments, and options.
func NewRouterMulticast(ctx *pulumi.Context,
	name string, args *RouterMulticastArgs, opts ...pulumi.ResourceOption) (*RouterMulticast, error) {
	if args == nil {
		args = &RouterMulticastArgs{}
	}

	opts = pkgResourceDefaultOpts(opts)
	var resource RouterMulticast
	err := ctx.RegisterResource("fortios:index/routerMulticast:RouterMulticast", name, args, &resource, opts...)
	if err != nil {
		return nil, err
	}
	return &resource, nil
}

// GetRouterMulticast gets an existing RouterMulticast resource's state with the given name, ID, and optional
// state properties that are used to uniquely qualify the lookup (nil if not required).
func GetRouterMulticast(ctx *pulumi.Context,
	name string, id pulumi.IDInput, state *RouterMulticastState, opts ...pulumi.ResourceOption) (*RouterMulticast, error) {
	var resource RouterMulticast
	err := ctx.ReadResource("fortios:index/routerMulticast:RouterMulticast", name, id, state, &resource, opts...)
	if err != nil {
		return nil, err
	}
	return &resource, nil
}

// Input properties used for looking up and filtering RouterMulticast resources.
type routerMulticastState struct {
	// true or false, set this parameter to true when using dynamic forEach + toset to configure and sort sub-tables, please do not set this parameter when configuring static sub-tables.
	DynamicSortSubtable *string `pulumi:"dynamicSortSubtable"`
	// PIM interfaces. The structure of `interface` block is documented below.
	Interfaces []RouterMulticastInterface `pulumi:"interfaces"`
	// Enable/disable IP multicast routing. Valid values: `enable`, `disable`.
	MulticastRouting *string `pulumi:"multicastRouting"`
	// PIM sparse-mode global settings. The structure of `pimSmGlobal` block is documented below.
	PimSmGlobal *RouterMulticastPimSmGlobal `pulumi:"pimSmGlobal"`
	// Maximum number of multicast routes.
	RouteLimit *int `pulumi:"routeLimit"`
	// Generate warnings when the number of multicast routes exceeds this number, must not be greater than route-limit.
	RouteThreshold *int `pulumi:"routeThreshold"`
	// Specifies the vdom to which the resource will be applied when the FortiGate unit is running in VDOM mode. Only one vdom can be specified. If you want to inherit the vdom configuration of the provider, please do not set this parameter.
	Vdomparam *string `pulumi:"vdomparam"`
}

type RouterMulticastState struct {
	// true or false, set this parameter to true when using dynamic forEach + toset to configure and sort sub-tables, please do not set this parameter when configuring static sub-tables.
	DynamicSortSubtable pulumi.StringPtrInput
	// PIM interfaces. The structure of `interface` block is documented below.
	Interfaces RouterMulticastInterfaceArrayInput
	// Enable/disable IP multicast routing. Valid values: `enable`, `disable`.
	MulticastRouting pulumi.StringPtrInput
	// PIM sparse-mode global settings. The structure of `pimSmGlobal` block is documented below.
	PimSmGlobal RouterMulticastPimSmGlobalPtrInput
	// Maximum number of multicast routes.
	RouteLimit pulumi.IntPtrInput
	// Generate warnings when the number of multicast routes exceeds this number, must not be greater than route-limit.
	RouteThreshold pulumi.IntPtrInput
	// Specifies the vdom to which the resource will be applied when the FortiGate unit is running in VDOM mode. Only one vdom can be specified. If you want to inherit the vdom configuration of the provider, please do not set this parameter.
	Vdomparam pulumi.StringPtrInput
}

func (RouterMulticastState) ElementType() reflect.Type {
	return reflect.TypeOf((*routerMulticastState)(nil)).Elem()
}

type routerMulticastArgs struct {
	// true or false, set this parameter to true when using dynamic forEach + toset to configure and sort sub-tables, please do not set this parameter when configuring static sub-tables.
	DynamicSortSubtable *string `pulumi:"dynamicSortSubtable"`
	// PIM interfaces. The structure of `interface` block is documented below.
	Interfaces []RouterMulticastInterface `pulumi:"interfaces"`
	// Enable/disable IP multicast routing. Valid values: `enable`, `disable`.
	MulticastRouting *string `pulumi:"multicastRouting"`
	// PIM sparse-mode global settings. The structure of `pimSmGlobal` block is documented below.
	PimSmGlobal *RouterMulticastPimSmGlobal `pulumi:"pimSmGlobal"`
	// Maximum number of multicast routes.
	RouteLimit *int `pulumi:"routeLimit"`
	// Generate warnings when the number of multicast routes exceeds this number, must not be greater than route-limit.
	RouteThreshold *int `pulumi:"routeThreshold"`
	// Specifies the vdom to which the resource will be applied when the FortiGate unit is running in VDOM mode. Only one vdom can be specified. If you want to inherit the vdom configuration of the provider, please do not set this parameter.
	Vdomparam *string `pulumi:"vdomparam"`
}

// The set of arguments for constructing a RouterMulticast resource.
type RouterMulticastArgs struct {
	// true or false, set this parameter to true when using dynamic forEach + toset to configure and sort sub-tables, please do not set this parameter when configuring static sub-tables.
	DynamicSortSubtable pulumi.StringPtrInput
	// PIM interfaces. The structure of `interface` block is documented below.
	Interfaces RouterMulticastInterfaceArrayInput
	// Enable/disable IP multicast routing. Valid values: `enable`, `disable`.
	MulticastRouting pulumi.StringPtrInput
	// PIM sparse-mode global settings. The structure of `pimSmGlobal` block is documented below.
	PimSmGlobal RouterMulticastPimSmGlobalPtrInput
	// Maximum number of multicast routes.
	RouteLimit pulumi.IntPtrInput
	// Generate warnings when the number of multicast routes exceeds this number, must not be greater than route-limit.
	RouteThreshold pulumi.IntPtrInput
	// Specifies the vdom to which the resource will be applied when the FortiGate unit is running in VDOM mode. Only one vdom can be specified. If you want to inherit the vdom configuration of the provider, please do not set this parameter.
	Vdomparam pulumi.StringPtrInput
}

func (RouterMulticastArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*routerMulticastArgs)(nil)).Elem()
}

type RouterMulticastInput interface {
	pulumi.Input

	ToRouterMulticastOutput() RouterMulticastOutput
	ToRouterMulticastOutputWithContext(ctx context.Context) RouterMulticastOutput
}

func (*RouterMulticast) ElementType() reflect.Type {
	return reflect.TypeOf((**RouterMulticast)(nil)).Elem()
}

func (i *RouterMulticast) ToRouterMulticastOutput() RouterMulticastOutput {
	return i.ToRouterMulticastOutputWithContext(context.Background())
}

func (i *RouterMulticast) ToRouterMulticastOutputWithContext(ctx context.Context) RouterMulticastOutput {
	return pulumi.ToOutputWithContext(ctx, i).(RouterMulticastOutput)
}

// RouterMulticastArrayInput is an input type that accepts RouterMulticastArray and RouterMulticastArrayOutput values.
// You can construct a concrete instance of `RouterMulticastArrayInput` via:
//
//          RouterMulticastArray{ RouterMulticastArgs{...} }
type RouterMulticastArrayInput interface {
	pulumi.Input

	ToRouterMulticastArrayOutput() RouterMulticastArrayOutput
	ToRouterMulticastArrayOutputWithContext(context.Context) RouterMulticastArrayOutput
}

type RouterMulticastArray []RouterMulticastInput

func (RouterMulticastArray) ElementType() reflect.Type {
	return reflect.TypeOf((*[]*RouterMulticast)(nil)).Elem()
}

func (i RouterMulticastArray) ToRouterMulticastArrayOutput() RouterMulticastArrayOutput {
	return i.ToRouterMulticastArrayOutputWithContext(context.Background())
}

func (i RouterMulticastArray) ToRouterMulticastArrayOutputWithContext(ctx context.Context) RouterMulticastArrayOutput {
	return pulumi.ToOutputWithContext(ctx, i).(RouterMulticastArrayOutput)
}

// RouterMulticastMapInput is an input type that accepts RouterMulticastMap and RouterMulticastMapOutput values.
// You can construct a concrete instance of `RouterMulticastMapInput` via:
//
//          RouterMulticastMap{ "key": RouterMulticastArgs{...} }
type RouterMulticastMapInput interface {
	pulumi.Input

	ToRouterMulticastMapOutput() RouterMulticastMapOutput
	ToRouterMulticastMapOutputWithContext(context.Context) RouterMulticastMapOutput
}

type RouterMulticastMap map[string]RouterMulticastInput

func (RouterMulticastMap) ElementType() reflect.Type {
	return reflect.TypeOf((*map[string]*RouterMulticast)(nil)).Elem()
}

func (i RouterMulticastMap) ToRouterMulticastMapOutput() RouterMulticastMapOutput {
	return i.ToRouterMulticastMapOutputWithContext(context.Background())
}

func (i RouterMulticastMap) ToRouterMulticastMapOutputWithContext(ctx context.Context) RouterMulticastMapOutput {
	return pulumi.ToOutputWithContext(ctx, i).(RouterMulticastMapOutput)
}

type RouterMulticastOutput struct{ *pulumi.OutputState }

func (RouterMulticastOutput) ElementType() reflect.Type {
	return reflect.TypeOf((**RouterMulticast)(nil)).Elem()
}

func (o RouterMulticastOutput) ToRouterMulticastOutput() RouterMulticastOutput {
	return o
}

func (o RouterMulticastOutput) ToRouterMulticastOutputWithContext(ctx context.Context) RouterMulticastOutput {
	return o
}

type RouterMulticastArrayOutput struct{ *pulumi.OutputState }

func (RouterMulticastArrayOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*[]*RouterMulticast)(nil)).Elem()
}

func (o RouterMulticastArrayOutput) ToRouterMulticastArrayOutput() RouterMulticastArrayOutput {
	return o
}

func (o RouterMulticastArrayOutput) ToRouterMulticastArrayOutputWithContext(ctx context.Context) RouterMulticastArrayOutput {
	return o
}

func (o RouterMulticastArrayOutput) Index(i pulumi.IntInput) RouterMulticastOutput {
	return pulumi.All(o, i).ApplyT(func(vs []interface{}) *RouterMulticast {
		return vs[0].([]*RouterMulticast)[vs[1].(int)]
	}).(RouterMulticastOutput)
}

type RouterMulticastMapOutput struct{ *pulumi.OutputState }

func (RouterMulticastMapOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*map[string]*RouterMulticast)(nil)).Elem()
}

func (o RouterMulticastMapOutput) ToRouterMulticastMapOutput() RouterMulticastMapOutput {
	return o
}

func (o RouterMulticastMapOutput) ToRouterMulticastMapOutputWithContext(ctx context.Context) RouterMulticastMapOutput {
	return o
}

func (o RouterMulticastMapOutput) MapIndex(k pulumi.StringInput) RouterMulticastOutput {
	return pulumi.All(o, k).ApplyT(func(vs []interface{}) *RouterMulticast {
		return vs[0].(map[string]*RouterMulticast)[vs[1].(string)]
	}).(RouterMulticastOutput)
}

func init() {
	pulumi.RegisterInputType(reflect.TypeOf((*RouterMulticastInput)(nil)).Elem(), &RouterMulticast{})
	pulumi.RegisterInputType(reflect.TypeOf((*RouterMulticastArrayInput)(nil)).Elem(), RouterMulticastArray{})
	pulumi.RegisterInputType(reflect.TypeOf((*RouterMulticastMapInput)(nil)).Elem(), RouterMulticastMap{})
	pulumi.RegisterOutputType(RouterMulticastOutput{})
	pulumi.RegisterOutputType(RouterMulticastArrayOutput{})
	pulumi.RegisterOutputType(RouterMulticastMapOutput{})
}
