// Code generated by the Pulumi Terraform Bridge (tfgen) Tool DO NOT EDIT.
// *** WARNING: Do not edit by hand unless you're certain you know what you are doing! ***

package fortios

import (
	"context"
	"reflect"

	"errors"
	"github.com/lubyou/pulumi-fortios/sdk/go/fortios/internal"
	"github.com/pulumi/pulumi/sdk/v3/go/pulumi"
)

type FirewallSniffer struct {
	pulumi.CustomResourceState

	Anomalies                FirewallSnifferAnomalyArrayOutput      `pulumi:"anomalies"`
	ApplicationList          pulumi.StringOutput                    `pulumi:"applicationList"`
	ApplicationListStatus    pulumi.StringOutput                    `pulumi:"applicationListStatus"`
	AvProfile                pulumi.StringOutput                    `pulumi:"avProfile"`
	AvProfileStatus          pulumi.StringOutput                    `pulumi:"avProfileStatus"`
	DlpProfile               pulumi.StringOutput                    `pulumi:"dlpProfile"`
	DlpProfileStatus         pulumi.StringOutput                    `pulumi:"dlpProfileStatus"`
	DlpSensor                pulumi.StringOutput                    `pulumi:"dlpSensor"`
	DlpSensorStatus          pulumi.StringOutput                    `pulumi:"dlpSensorStatus"`
	Dsri                     pulumi.StringOutput                    `pulumi:"dsri"`
	DynamicSortSubtable      pulumi.StringPtrOutput                 `pulumi:"dynamicSortSubtable"`
	EmailfilterProfile       pulumi.StringOutput                    `pulumi:"emailfilterProfile"`
	EmailfilterProfileStatus pulumi.StringOutput                    `pulumi:"emailfilterProfileStatus"`
	FileFilterProfile        pulumi.StringOutput                    `pulumi:"fileFilterProfile"`
	FileFilterProfileStatus  pulumi.StringOutput                    `pulumi:"fileFilterProfileStatus"`
	Fosid                    pulumi.IntOutput                       `pulumi:"fosid"`
	GetAllTables             pulumi.StringPtrOutput                 `pulumi:"getAllTables"`
	Host                     pulumi.StringOutput                    `pulumi:"host"`
	Interface                pulumi.StringOutput                    `pulumi:"interface"`
	IpThreatfeedStatus       pulumi.StringOutput                    `pulumi:"ipThreatfeedStatus"`
	IpThreatfeeds            FirewallSnifferIpThreatfeedArrayOutput `pulumi:"ipThreatfeeds"`
	IpsDosStatus             pulumi.StringOutput                    `pulumi:"ipsDosStatus"`
	IpsSensor                pulumi.StringOutput                    `pulumi:"ipsSensor"`
	IpsSensorStatus          pulumi.StringOutput                    `pulumi:"ipsSensorStatus"`
	Ipv6                     pulumi.StringOutput                    `pulumi:"ipv6"`
	Logtraffic               pulumi.StringOutput                    `pulumi:"logtraffic"`
	MaxPacketCount           pulumi.IntOutput                       `pulumi:"maxPacketCount"`
	NonIp                    pulumi.StringOutput                    `pulumi:"nonIp"`
	Port                     pulumi.StringOutput                    `pulumi:"port"`
	Protocol                 pulumi.StringOutput                    `pulumi:"protocol"`
	ScanBotnetConnections    pulumi.StringOutput                    `pulumi:"scanBotnetConnections"`
	SpamfilterProfile        pulumi.StringOutput                    `pulumi:"spamfilterProfile"`
	SpamfilterProfileStatus  pulumi.StringOutput                    `pulumi:"spamfilterProfileStatus"`
	Status                   pulumi.StringOutput                    `pulumi:"status"`
	Vdomparam                pulumi.StringPtrOutput                 `pulumi:"vdomparam"`
	Vlan                     pulumi.StringOutput                    `pulumi:"vlan"`
	WebfilterProfile         pulumi.StringOutput                    `pulumi:"webfilterProfile"`
	WebfilterProfileStatus   pulumi.StringOutput                    `pulumi:"webfilterProfileStatus"`
}

// NewFirewallSniffer registers a new resource with the given unique name, arguments, and options.
func NewFirewallSniffer(ctx *pulumi.Context,
	name string, args *FirewallSnifferArgs, opts ...pulumi.ResourceOption) (*FirewallSniffer, error) {
	if args == nil {
		return nil, errors.New("missing one or more required arguments")
	}

	if args.Interface == nil {
		return nil, errors.New("invalid value for required argument 'Interface'")
	}
	opts = internal.PkgResourceDefaultOpts(opts)
	var resource FirewallSniffer
	err := ctx.RegisterResource("fortios:index/firewallSniffer:FirewallSniffer", name, args, &resource, opts...)
	if err != nil {
		return nil, err
	}
	return &resource, nil
}

// GetFirewallSniffer gets an existing FirewallSniffer resource's state with the given name, ID, and optional
// state properties that are used to uniquely qualify the lookup (nil if not required).
func GetFirewallSniffer(ctx *pulumi.Context,
	name string, id pulumi.IDInput, state *FirewallSnifferState, opts ...pulumi.ResourceOption) (*FirewallSniffer, error) {
	var resource FirewallSniffer
	err := ctx.ReadResource("fortios:index/firewallSniffer:FirewallSniffer", name, id, state, &resource, opts...)
	if err != nil {
		return nil, err
	}
	return &resource, nil
}

// Input properties used for looking up and filtering FirewallSniffer resources.
type firewallSnifferState struct {
	Anomalies                []FirewallSnifferAnomaly      `pulumi:"anomalies"`
	ApplicationList          *string                       `pulumi:"applicationList"`
	ApplicationListStatus    *string                       `pulumi:"applicationListStatus"`
	AvProfile                *string                       `pulumi:"avProfile"`
	AvProfileStatus          *string                       `pulumi:"avProfileStatus"`
	DlpProfile               *string                       `pulumi:"dlpProfile"`
	DlpProfileStatus         *string                       `pulumi:"dlpProfileStatus"`
	DlpSensor                *string                       `pulumi:"dlpSensor"`
	DlpSensorStatus          *string                       `pulumi:"dlpSensorStatus"`
	Dsri                     *string                       `pulumi:"dsri"`
	DynamicSortSubtable      *string                       `pulumi:"dynamicSortSubtable"`
	EmailfilterProfile       *string                       `pulumi:"emailfilterProfile"`
	EmailfilterProfileStatus *string                       `pulumi:"emailfilterProfileStatus"`
	FileFilterProfile        *string                       `pulumi:"fileFilterProfile"`
	FileFilterProfileStatus  *string                       `pulumi:"fileFilterProfileStatus"`
	Fosid                    *int                          `pulumi:"fosid"`
	GetAllTables             *string                       `pulumi:"getAllTables"`
	Host                     *string                       `pulumi:"host"`
	Interface                *string                       `pulumi:"interface"`
	IpThreatfeedStatus       *string                       `pulumi:"ipThreatfeedStatus"`
	IpThreatfeeds            []FirewallSnifferIpThreatfeed `pulumi:"ipThreatfeeds"`
	IpsDosStatus             *string                       `pulumi:"ipsDosStatus"`
	IpsSensor                *string                       `pulumi:"ipsSensor"`
	IpsSensorStatus          *string                       `pulumi:"ipsSensorStatus"`
	Ipv6                     *string                       `pulumi:"ipv6"`
	Logtraffic               *string                       `pulumi:"logtraffic"`
	MaxPacketCount           *int                          `pulumi:"maxPacketCount"`
	NonIp                    *string                       `pulumi:"nonIp"`
	Port                     *string                       `pulumi:"port"`
	Protocol                 *string                       `pulumi:"protocol"`
	ScanBotnetConnections    *string                       `pulumi:"scanBotnetConnections"`
	SpamfilterProfile        *string                       `pulumi:"spamfilterProfile"`
	SpamfilterProfileStatus  *string                       `pulumi:"spamfilterProfileStatus"`
	Status                   *string                       `pulumi:"status"`
	Vdomparam                *string                       `pulumi:"vdomparam"`
	Vlan                     *string                       `pulumi:"vlan"`
	WebfilterProfile         *string                       `pulumi:"webfilterProfile"`
	WebfilterProfileStatus   *string                       `pulumi:"webfilterProfileStatus"`
}

type FirewallSnifferState struct {
	Anomalies                FirewallSnifferAnomalyArrayInput
	ApplicationList          pulumi.StringPtrInput
	ApplicationListStatus    pulumi.StringPtrInput
	AvProfile                pulumi.StringPtrInput
	AvProfileStatus          pulumi.StringPtrInput
	DlpProfile               pulumi.StringPtrInput
	DlpProfileStatus         pulumi.StringPtrInput
	DlpSensor                pulumi.StringPtrInput
	DlpSensorStatus          pulumi.StringPtrInput
	Dsri                     pulumi.StringPtrInput
	DynamicSortSubtable      pulumi.StringPtrInput
	EmailfilterProfile       pulumi.StringPtrInput
	EmailfilterProfileStatus pulumi.StringPtrInput
	FileFilterProfile        pulumi.StringPtrInput
	FileFilterProfileStatus  pulumi.StringPtrInput
	Fosid                    pulumi.IntPtrInput
	GetAllTables             pulumi.StringPtrInput
	Host                     pulumi.StringPtrInput
	Interface                pulumi.StringPtrInput
	IpThreatfeedStatus       pulumi.StringPtrInput
	IpThreatfeeds            FirewallSnifferIpThreatfeedArrayInput
	IpsDosStatus             pulumi.StringPtrInput
	IpsSensor                pulumi.StringPtrInput
	IpsSensorStatus          pulumi.StringPtrInput
	Ipv6                     pulumi.StringPtrInput
	Logtraffic               pulumi.StringPtrInput
	MaxPacketCount           pulumi.IntPtrInput
	NonIp                    pulumi.StringPtrInput
	Port                     pulumi.StringPtrInput
	Protocol                 pulumi.StringPtrInput
	ScanBotnetConnections    pulumi.StringPtrInput
	SpamfilterProfile        pulumi.StringPtrInput
	SpamfilterProfileStatus  pulumi.StringPtrInput
	Status                   pulumi.StringPtrInput
	Vdomparam                pulumi.StringPtrInput
	Vlan                     pulumi.StringPtrInput
	WebfilterProfile         pulumi.StringPtrInput
	WebfilterProfileStatus   pulumi.StringPtrInput
}

func (FirewallSnifferState) ElementType() reflect.Type {
	return reflect.TypeOf((*firewallSnifferState)(nil)).Elem()
}

type firewallSnifferArgs struct {
	Anomalies                []FirewallSnifferAnomaly      `pulumi:"anomalies"`
	ApplicationList          *string                       `pulumi:"applicationList"`
	ApplicationListStatus    *string                       `pulumi:"applicationListStatus"`
	AvProfile                *string                       `pulumi:"avProfile"`
	AvProfileStatus          *string                       `pulumi:"avProfileStatus"`
	DlpProfile               *string                       `pulumi:"dlpProfile"`
	DlpProfileStatus         *string                       `pulumi:"dlpProfileStatus"`
	DlpSensor                *string                       `pulumi:"dlpSensor"`
	DlpSensorStatus          *string                       `pulumi:"dlpSensorStatus"`
	Dsri                     *string                       `pulumi:"dsri"`
	DynamicSortSubtable      *string                       `pulumi:"dynamicSortSubtable"`
	EmailfilterProfile       *string                       `pulumi:"emailfilterProfile"`
	EmailfilterProfileStatus *string                       `pulumi:"emailfilterProfileStatus"`
	FileFilterProfile        *string                       `pulumi:"fileFilterProfile"`
	FileFilterProfileStatus  *string                       `pulumi:"fileFilterProfileStatus"`
	Fosid                    *int                          `pulumi:"fosid"`
	GetAllTables             *string                       `pulumi:"getAllTables"`
	Host                     *string                       `pulumi:"host"`
	Interface                string                        `pulumi:"interface"`
	IpThreatfeedStatus       *string                       `pulumi:"ipThreatfeedStatus"`
	IpThreatfeeds            []FirewallSnifferIpThreatfeed `pulumi:"ipThreatfeeds"`
	IpsDosStatus             *string                       `pulumi:"ipsDosStatus"`
	IpsSensor                *string                       `pulumi:"ipsSensor"`
	IpsSensorStatus          *string                       `pulumi:"ipsSensorStatus"`
	Ipv6                     *string                       `pulumi:"ipv6"`
	Logtraffic               *string                       `pulumi:"logtraffic"`
	MaxPacketCount           *int                          `pulumi:"maxPacketCount"`
	NonIp                    *string                       `pulumi:"nonIp"`
	Port                     *string                       `pulumi:"port"`
	Protocol                 *string                       `pulumi:"protocol"`
	ScanBotnetConnections    *string                       `pulumi:"scanBotnetConnections"`
	SpamfilterProfile        *string                       `pulumi:"spamfilterProfile"`
	SpamfilterProfileStatus  *string                       `pulumi:"spamfilterProfileStatus"`
	Status                   *string                       `pulumi:"status"`
	Vdomparam                *string                       `pulumi:"vdomparam"`
	Vlan                     *string                       `pulumi:"vlan"`
	WebfilterProfile         *string                       `pulumi:"webfilterProfile"`
	WebfilterProfileStatus   *string                       `pulumi:"webfilterProfileStatus"`
}

// The set of arguments for constructing a FirewallSniffer resource.
type FirewallSnifferArgs struct {
	Anomalies                FirewallSnifferAnomalyArrayInput
	ApplicationList          pulumi.StringPtrInput
	ApplicationListStatus    pulumi.StringPtrInput
	AvProfile                pulumi.StringPtrInput
	AvProfileStatus          pulumi.StringPtrInput
	DlpProfile               pulumi.StringPtrInput
	DlpProfileStatus         pulumi.StringPtrInput
	DlpSensor                pulumi.StringPtrInput
	DlpSensorStatus          pulumi.StringPtrInput
	Dsri                     pulumi.StringPtrInput
	DynamicSortSubtable      pulumi.StringPtrInput
	EmailfilterProfile       pulumi.StringPtrInput
	EmailfilterProfileStatus pulumi.StringPtrInput
	FileFilterProfile        pulumi.StringPtrInput
	FileFilterProfileStatus  pulumi.StringPtrInput
	Fosid                    pulumi.IntPtrInput
	GetAllTables             pulumi.StringPtrInput
	Host                     pulumi.StringPtrInput
	Interface                pulumi.StringInput
	IpThreatfeedStatus       pulumi.StringPtrInput
	IpThreatfeeds            FirewallSnifferIpThreatfeedArrayInput
	IpsDosStatus             pulumi.StringPtrInput
	IpsSensor                pulumi.StringPtrInput
	IpsSensorStatus          pulumi.StringPtrInput
	Ipv6                     pulumi.StringPtrInput
	Logtraffic               pulumi.StringPtrInput
	MaxPacketCount           pulumi.IntPtrInput
	NonIp                    pulumi.StringPtrInput
	Port                     pulumi.StringPtrInput
	Protocol                 pulumi.StringPtrInput
	ScanBotnetConnections    pulumi.StringPtrInput
	SpamfilterProfile        pulumi.StringPtrInput
	SpamfilterProfileStatus  pulumi.StringPtrInput
	Status                   pulumi.StringPtrInput
	Vdomparam                pulumi.StringPtrInput
	Vlan                     pulumi.StringPtrInput
	WebfilterProfile         pulumi.StringPtrInput
	WebfilterProfileStatus   pulumi.StringPtrInput
}

func (FirewallSnifferArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*firewallSnifferArgs)(nil)).Elem()
}

type FirewallSnifferInput interface {
	pulumi.Input

	ToFirewallSnifferOutput() FirewallSnifferOutput
	ToFirewallSnifferOutputWithContext(ctx context.Context) FirewallSnifferOutput
}

func (*FirewallSniffer) ElementType() reflect.Type {
	return reflect.TypeOf((**FirewallSniffer)(nil)).Elem()
}

func (i *FirewallSniffer) ToFirewallSnifferOutput() FirewallSnifferOutput {
	return i.ToFirewallSnifferOutputWithContext(context.Background())
}

func (i *FirewallSniffer) ToFirewallSnifferOutputWithContext(ctx context.Context) FirewallSnifferOutput {
	return pulumi.ToOutputWithContext(ctx, i).(FirewallSnifferOutput)
}

// FirewallSnifferArrayInput is an input type that accepts FirewallSnifferArray and FirewallSnifferArrayOutput values.
// You can construct a concrete instance of `FirewallSnifferArrayInput` via:
//
//	FirewallSnifferArray{ FirewallSnifferArgs{...} }
type FirewallSnifferArrayInput interface {
	pulumi.Input

	ToFirewallSnifferArrayOutput() FirewallSnifferArrayOutput
	ToFirewallSnifferArrayOutputWithContext(context.Context) FirewallSnifferArrayOutput
}

type FirewallSnifferArray []FirewallSnifferInput

func (FirewallSnifferArray) ElementType() reflect.Type {
	return reflect.TypeOf((*[]*FirewallSniffer)(nil)).Elem()
}

func (i FirewallSnifferArray) ToFirewallSnifferArrayOutput() FirewallSnifferArrayOutput {
	return i.ToFirewallSnifferArrayOutputWithContext(context.Background())
}

func (i FirewallSnifferArray) ToFirewallSnifferArrayOutputWithContext(ctx context.Context) FirewallSnifferArrayOutput {
	return pulumi.ToOutputWithContext(ctx, i).(FirewallSnifferArrayOutput)
}

// FirewallSnifferMapInput is an input type that accepts FirewallSnifferMap and FirewallSnifferMapOutput values.
// You can construct a concrete instance of `FirewallSnifferMapInput` via:
//
//	FirewallSnifferMap{ "key": FirewallSnifferArgs{...} }
type FirewallSnifferMapInput interface {
	pulumi.Input

	ToFirewallSnifferMapOutput() FirewallSnifferMapOutput
	ToFirewallSnifferMapOutputWithContext(context.Context) FirewallSnifferMapOutput
}

type FirewallSnifferMap map[string]FirewallSnifferInput

func (FirewallSnifferMap) ElementType() reflect.Type {
	return reflect.TypeOf((*map[string]*FirewallSniffer)(nil)).Elem()
}

func (i FirewallSnifferMap) ToFirewallSnifferMapOutput() FirewallSnifferMapOutput {
	return i.ToFirewallSnifferMapOutputWithContext(context.Background())
}

func (i FirewallSnifferMap) ToFirewallSnifferMapOutputWithContext(ctx context.Context) FirewallSnifferMapOutput {
	return pulumi.ToOutputWithContext(ctx, i).(FirewallSnifferMapOutput)
}

type FirewallSnifferOutput struct{ *pulumi.OutputState }

func (FirewallSnifferOutput) ElementType() reflect.Type {
	return reflect.TypeOf((**FirewallSniffer)(nil)).Elem()
}

func (o FirewallSnifferOutput) ToFirewallSnifferOutput() FirewallSnifferOutput {
	return o
}

func (o FirewallSnifferOutput) ToFirewallSnifferOutputWithContext(ctx context.Context) FirewallSnifferOutput {
	return o
}

func (o FirewallSnifferOutput) Anomalies() FirewallSnifferAnomalyArrayOutput {
	return o.ApplyT(func(v *FirewallSniffer) FirewallSnifferAnomalyArrayOutput { return v.Anomalies }).(FirewallSnifferAnomalyArrayOutput)
}

func (o FirewallSnifferOutput) ApplicationList() pulumi.StringOutput {
	return o.ApplyT(func(v *FirewallSniffer) pulumi.StringOutput { return v.ApplicationList }).(pulumi.StringOutput)
}

func (o FirewallSnifferOutput) ApplicationListStatus() pulumi.StringOutput {
	return o.ApplyT(func(v *FirewallSniffer) pulumi.StringOutput { return v.ApplicationListStatus }).(pulumi.StringOutput)
}

func (o FirewallSnifferOutput) AvProfile() pulumi.StringOutput {
	return o.ApplyT(func(v *FirewallSniffer) pulumi.StringOutput { return v.AvProfile }).(pulumi.StringOutput)
}

func (o FirewallSnifferOutput) AvProfileStatus() pulumi.StringOutput {
	return o.ApplyT(func(v *FirewallSniffer) pulumi.StringOutput { return v.AvProfileStatus }).(pulumi.StringOutput)
}

func (o FirewallSnifferOutput) DlpProfile() pulumi.StringOutput {
	return o.ApplyT(func(v *FirewallSniffer) pulumi.StringOutput { return v.DlpProfile }).(pulumi.StringOutput)
}

func (o FirewallSnifferOutput) DlpProfileStatus() pulumi.StringOutput {
	return o.ApplyT(func(v *FirewallSniffer) pulumi.StringOutput { return v.DlpProfileStatus }).(pulumi.StringOutput)
}

func (o FirewallSnifferOutput) DlpSensor() pulumi.StringOutput {
	return o.ApplyT(func(v *FirewallSniffer) pulumi.StringOutput { return v.DlpSensor }).(pulumi.StringOutput)
}

func (o FirewallSnifferOutput) DlpSensorStatus() pulumi.StringOutput {
	return o.ApplyT(func(v *FirewallSniffer) pulumi.StringOutput { return v.DlpSensorStatus }).(pulumi.StringOutput)
}

func (o FirewallSnifferOutput) Dsri() pulumi.StringOutput {
	return o.ApplyT(func(v *FirewallSniffer) pulumi.StringOutput { return v.Dsri }).(pulumi.StringOutput)
}

func (o FirewallSnifferOutput) DynamicSortSubtable() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *FirewallSniffer) pulumi.StringPtrOutput { return v.DynamicSortSubtable }).(pulumi.StringPtrOutput)
}

func (o FirewallSnifferOutput) EmailfilterProfile() pulumi.StringOutput {
	return o.ApplyT(func(v *FirewallSniffer) pulumi.StringOutput { return v.EmailfilterProfile }).(pulumi.StringOutput)
}

func (o FirewallSnifferOutput) EmailfilterProfileStatus() pulumi.StringOutput {
	return o.ApplyT(func(v *FirewallSniffer) pulumi.StringOutput { return v.EmailfilterProfileStatus }).(pulumi.StringOutput)
}

func (o FirewallSnifferOutput) FileFilterProfile() pulumi.StringOutput {
	return o.ApplyT(func(v *FirewallSniffer) pulumi.StringOutput { return v.FileFilterProfile }).(pulumi.StringOutput)
}

func (o FirewallSnifferOutput) FileFilterProfileStatus() pulumi.StringOutput {
	return o.ApplyT(func(v *FirewallSniffer) pulumi.StringOutput { return v.FileFilterProfileStatus }).(pulumi.StringOutput)
}

func (o FirewallSnifferOutput) Fosid() pulumi.IntOutput {
	return o.ApplyT(func(v *FirewallSniffer) pulumi.IntOutput { return v.Fosid }).(pulumi.IntOutput)
}

func (o FirewallSnifferOutput) GetAllTables() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *FirewallSniffer) pulumi.StringPtrOutput { return v.GetAllTables }).(pulumi.StringPtrOutput)
}

func (o FirewallSnifferOutput) Host() pulumi.StringOutput {
	return o.ApplyT(func(v *FirewallSniffer) pulumi.StringOutput { return v.Host }).(pulumi.StringOutput)
}

func (o FirewallSnifferOutput) Interface() pulumi.StringOutput {
	return o.ApplyT(func(v *FirewallSniffer) pulumi.StringOutput { return v.Interface }).(pulumi.StringOutput)
}

func (o FirewallSnifferOutput) IpThreatfeedStatus() pulumi.StringOutput {
	return o.ApplyT(func(v *FirewallSniffer) pulumi.StringOutput { return v.IpThreatfeedStatus }).(pulumi.StringOutput)
}

func (o FirewallSnifferOutput) IpThreatfeeds() FirewallSnifferIpThreatfeedArrayOutput {
	return o.ApplyT(func(v *FirewallSniffer) FirewallSnifferIpThreatfeedArrayOutput { return v.IpThreatfeeds }).(FirewallSnifferIpThreatfeedArrayOutput)
}

func (o FirewallSnifferOutput) IpsDosStatus() pulumi.StringOutput {
	return o.ApplyT(func(v *FirewallSniffer) pulumi.StringOutput { return v.IpsDosStatus }).(pulumi.StringOutput)
}

func (o FirewallSnifferOutput) IpsSensor() pulumi.StringOutput {
	return o.ApplyT(func(v *FirewallSniffer) pulumi.StringOutput { return v.IpsSensor }).(pulumi.StringOutput)
}

func (o FirewallSnifferOutput) IpsSensorStatus() pulumi.StringOutput {
	return o.ApplyT(func(v *FirewallSniffer) pulumi.StringOutput { return v.IpsSensorStatus }).(pulumi.StringOutput)
}

func (o FirewallSnifferOutput) Ipv6() pulumi.StringOutput {
	return o.ApplyT(func(v *FirewallSniffer) pulumi.StringOutput { return v.Ipv6 }).(pulumi.StringOutput)
}

func (o FirewallSnifferOutput) Logtraffic() pulumi.StringOutput {
	return o.ApplyT(func(v *FirewallSniffer) pulumi.StringOutput { return v.Logtraffic }).(pulumi.StringOutput)
}

func (o FirewallSnifferOutput) MaxPacketCount() pulumi.IntOutput {
	return o.ApplyT(func(v *FirewallSniffer) pulumi.IntOutput { return v.MaxPacketCount }).(pulumi.IntOutput)
}

func (o FirewallSnifferOutput) NonIp() pulumi.StringOutput {
	return o.ApplyT(func(v *FirewallSniffer) pulumi.StringOutput { return v.NonIp }).(pulumi.StringOutput)
}

func (o FirewallSnifferOutput) Port() pulumi.StringOutput {
	return o.ApplyT(func(v *FirewallSniffer) pulumi.StringOutput { return v.Port }).(pulumi.StringOutput)
}

func (o FirewallSnifferOutput) Protocol() pulumi.StringOutput {
	return o.ApplyT(func(v *FirewallSniffer) pulumi.StringOutput { return v.Protocol }).(pulumi.StringOutput)
}

func (o FirewallSnifferOutput) ScanBotnetConnections() pulumi.StringOutput {
	return o.ApplyT(func(v *FirewallSniffer) pulumi.StringOutput { return v.ScanBotnetConnections }).(pulumi.StringOutput)
}

func (o FirewallSnifferOutput) SpamfilterProfile() pulumi.StringOutput {
	return o.ApplyT(func(v *FirewallSniffer) pulumi.StringOutput { return v.SpamfilterProfile }).(pulumi.StringOutput)
}

func (o FirewallSnifferOutput) SpamfilterProfileStatus() pulumi.StringOutput {
	return o.ApplyT(func(v *FirewallSniffer) pulumi.StringOutput { return v.SpamfilterProfileStatus }).(pulumi.StringOutput)
}

func (o FirewallSnifferOutput) Status() pulumi.StringOutput {
	return o.ApplyT(func(v *FirewallSniffer) pulumi.StringOutput { return v.Status }).(pulumi.StringOutput)
}

func (o FirewallSnifferOutput) Vdomparam() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *FirewallSniffer) pulumi.StringPtrOutput { return v.Vdomparam }).(pulumi.StringPtrOutput)
}

func (o FirewallSnifferOutput) Vlan() pulumi.StringOutput {
	return o.ApplyT(func(v *FirewallSniffer) pulumi.StringOutput { return v.Vlan }).(pulumi.StringOutput)
}

func (o FirewallSnifferOutput) WebfilterProfile() pulumi.StringOutput {
	return o.ApplyT(func(v *FirewallSniffer) pulumi.StringOutput { return v.WebfilterProfile }).(pulumi.StringOutput)
}

func (o FirewallSnifferOutput) WebfilterProfileStatus() pulumi.StringOutput {
	return o.ApplyT(func(v *FirewallSniffer) pulumi.StringOutput { return v.WebfilterProfileStatus }).(pulumi.StringOutput)
}

type FirewallSnifferArrayOutput struct{ *pulumi.OutputState }

func (FirewallSnifferArrayOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*[]*FirewallSniffer)(nil)).Elem()
}

func (o FirewallSnifferArrayOutput) ToFirewallSnifferArrayOutput() FirewallSnifferArrayOutput {
	return o
}

func (o FirewallSnifferArrayOutput) ToFirewallSnifferArrayOutputWithContext(ctx context.Context) FirewallSnifferArrayOutput {
	return o
}

func (o FirewallSnifferArrayOutput) Index(i pulumi.IntInput) FirewallSnifferOutput {
	return pulumi.All(o, i).ApplyT(func(vs []interface{}) *FirewallSniffer {
		return vs[0].([]*FirewallSniffer)[vs[1].(int)]
	}).(FirewallSnifferOutput)
}

type FirewallSnifferMapOutput struct{ *pulumi.OutputState }

func (FirewallSnifferMapOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*map[string]*FirewallSniffer)(nil)).Elem()
}

func (o FirewallSnifferMapOutput) ToFirewallSnifferMapOutput() FirewallSnifferMapOutput {
	return o
}

func (o FirewallSnifferMapOutput) ToFirewallSnifferMapOutputWithContext(ctx context.Context) FirewallSnifferMapOutput {
	return o
}

func (o FirewallSnifferMapOutput) MapIndex(k pulumi.StringInput) FirewallSnifferOutput {
	return pulumi.All(o, k).ApplyT(func(vs []interface{}) *FirewallSniffer {
		return vs[0].(map[string]*FirewallSniffer)[vs[1].(string)]
	}).(FirewallSnifferOutput)
}

func init() {
	pulumi.RegisterInputType(reflect.TypeOf((*FirewallSnifferInput)(nil)).Elem(), &FirewallSniffer{})
	pulumi.RegisterInputType(reflect.TypeOf((*FirewallSnifferArrayInput)(nil)).Elem(), FirewallSnifferArray{})
	pulumi.RegisterInputType(reflect.TypeOf((*FirewallSnifferMapInput)(nil)).Elem(), FirewallSnifferMap{})
	pulumi.RegisterOutputType(FirewallSnifferOutput{})
	pulumi.RegisterOutputType(FirewallSnifferArrayOutput{})
	pulumi.RegisterOutputType(FirewallSnifferMapOutput{})
}
