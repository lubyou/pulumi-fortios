// *** WARNING: this file was generated by the Pulumi Terraform Bridge (tfgen) Tool. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

package fortios

import (
	"context"
	"reflect"

	"github.com/pkg/errors"
	"github.com/pulumi/pulumi/sdk/v3/go/pulumi"
)

// This resource supports installing devicemanager policy package from FortiManager to the related FortiGate
//
// ## Example Usage
//
// ```go
// package main
//
// import (
// 	"github.com/pulumi/pulumi-fortios/sdk/go/fortios"
// 	"github.com/pulumi/pulumi/sdk/v3/go/pulumi"
// )
//
// func main() {
// 	pulumi.Run(func(ctx *pulumi.Context) error {
// 		_, err := fortios.NewFortimanagerDVMInstallPolicyPackage(ctx, "test1", &fortios.FortimanagerDVMInstallPolicyPackageArgs{
// 			PackageName: pulumi.String("test-pkg1"),
// 			Timeout:     pulumi.Int(5),
// 		})
// 		if err != nil {
// 			return err
// 		}
// 		return nil
// 	})
// }
// ```
type FortimanagerDVMInstallPolicyPackage struct {
	pulumi.CustomResourceState

	// Source ADOM name. default is 'root'
	Adom pulumi.StringPtrOutput `pulumi:"adom"`
	// The installation package name.
	PackageName pulumi.StringOutput `pulumi:"packageName"`
	// Timeout for installing the package to the target, default: 3 minutes.
	Timeout pulumi.IntPtrOutput `pulumi:"timeout"`
}

// NewFortimanagerDVMInstallPolicyPackage registers a new resource with the given unique name, arguments, and options.
func NewFortimanagerDVMInstallPolicyPackage(ctx *pulumi.Context,
	name string, args *FortimanagerDVMInstallPolicyPackageArgs, opts ...pulumi.ResourceOption) (*FortimanagerDVMInstallPolicyPackage, error) {
	if args == nil {
		return nil, errors.New("missing one or more required arguments")
	}

	if args.PackageName == nil {
		return nil, errors.New("invalid value for required argument 'PackageName'")
	}
	var resource FortimanagerDVMInstallPolicyPackage
	err := ctx.RegisterResource("fortios:index/fortimanagerDVMInstallPolicyPackage:FortimanagerDVMInstallPolicyPackage", name, args, &resource, opts...)
	if err != nil {
		return nil, err
	}
	return &resource, nil
}

// GetFortimanagerDVMInstallPolicyPackage gets an existing FortimanagerDVMInstallPolicyPackage resource's state with the given name, ID, and optional
// state properties that are used to uniquely qualify the lookup (nil if not required).
func GetFortimanagerDVMInstallPolicyPackage(ctx *pulumi.Context,
	name string, id pulumi.IDInput, state *FortimanagerDVMInstallPolicyPackageState, opts ...pulumi.ResourceOption) (*FortimanagerDVMInstallPolicyPackage, error) {
	var resource FortimanagerDVMInstallPolicyPackage
	err := ctx.ReadResource("fortios:index/fortimanagerDVMInstallPolicyPackage:FortimanagerDVMInstallPolicyPackage", name, id, state, &resource, opts...)
	if err != nil {
		return nil, err
	}
	return &resource, nil
}

// Input properties used for looking up and filtering FortimanagerDVMInstallPolicyPackage resources.
type fortimanagerDVMInstallPolicyPackageState struct {
	// Source ADOM name. default is 'root'
	Adom *string `pulumi:"adom"`
	// The installation package name.
	PackageName *string `pulumi:"packageName"`
	// Timeout for installing the package to the target, default: 3 minutes.
	Timeout *int `pulumi:"timeout"`
}

type FortimanagerDVMInstallPolicyPackageState struct {
	// Source ADOM name. default is 'root'
	Adom pulumi.StringPtrInput
	// The installation package name.
	PackageName pulumi.StringPtrInput
	// Timeout for installing the package to the target, default: 3 minutes.
	Timeout pulumi.IntPtrInput
}

func (FortimanagerDVMInstallPolicyPackageState) ElementType() reflect.Type {
	return reflect.TypeOf((*fortimanagerDVMInstallPolicyPackageState)(nil)).Elem()
}

type fortimanagerDVMInstallPolicyPackageArgs struct {
	// Source ADOM name. default is 'root'
	Adom *string `pulumi:"adom"`
	// The installation package name.
	PackageName string `pulumi:"packageName"`
	// Timeout for installing the package to the target, default: 3 minutes.
	Timeout *int `pulumi:"timeout"`
}

// The set of arguments for constructing a FortimanagerDVMInstallPolicyPackage resource.
type FortimanagerDVMInstallPolicyPackageArgs struct {
	// Source ADOM name. default is 'root'
	Adom pulumi.StringPtrInput
	// The installation package name.
	PackageName pulumi.StringInput
	// Timeout for installing the package to the target, default: 3 minutes.
	Timeout pulumi.IntPtrInput
}

func (FortimanagerDVMInstallPolicyPackageArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*fortimanagerDVMInstallPolicyPackageArgs)(nil)).Elem()
}

type FortimanagerDVMInstallPolicyPackageInput interface {
	pulumi.Input

	ToFortimanagerDVMInstallPolicyPackageOutput() FortimanagerDVMInstallPolicyPackageOutput
	ToFortimanagerDVMInstallPolicyPackageOutputWithContext(ctx context.Context) FortimanagerDVMInstallPolicyPackageOutput
}

func (*FortimanagerDVMInstallPolicyPackage) ElementType() reflect.Type {
	return reflect.TypeOf((*FortimanagerDVMInstallPolicyPackage)(nil))
}

func (i *FortimanagerDVMInstallPolicyPackage) ToFortimanagerDVMInstallPolicyPackageOutput() FortimanagerDVMInstallPolicyPackageOutput {
	return i.ToFortimanagerDVMInstallPolicyPackageOutputWithContext(context.Background())
}

func (i *FortimanagerDVMInstallPolicyPackage) ToFortimanagerDVMInstallPolicyPackageOutputWithContext(ctx context.Context) FortimanagerDVMInstallPolicyPackageOutput {
	return pulumi.ToOutputWithContext(ctx, i).(FortimanagerDVMInstallPolicyPackageOutput)
}

func (i *FortimanagerDVMInstallPolicyPackage) ToFortimanagerDVMInstallPolicyPackagePtrOutput() FortimanagerDVMInstallPolicyPackagePtrOutput {
	return i.ToFortimanagerDVMInstallPolicyPackagePtrOutputWithContext(context.Background())
}

func (i *FortimanagerDVMInstallPolicyPackage) ToFortimanagerDVMInstallPolicyPackagePtrOutputWithContext(ctx context.Context) FortimanagerDVMInstallPolicyPackagePtrOutput {
	return pulumi.ToOutputWithContext(ctx, i).(FortimanagerDVMInstallPolicyPackagePtrOutput)
}

type FortimanagerDVMInstallPolicyPackagePtrInput interface {
	pulumi.Input

	ToFortimanagerDVMInstallPolicyPackagePtrOutput() FortimanagerDVMInstallPolicyPackagePtrOutput
	ToFortimanagerDVMInstallPolicyPackagePtrOutputWithContext(ctx context.Context) FortimanagerDVMInstallPolicyPackagePtrOutput
}

type fortimanagerDVMInstallPolicyPackagePtrType FortimanagerDVMInstallPolicyPackageArgs

func (*fortimanagerDVMInstallPolicyPackagePtrType) ElementType() reflect.Type {
	return reflect.TypeOf((**FortimanagerDVMInstallPolicyPackage)(nil))
}

func (i *fortimanagerDVMInstallPolicyPackagePtrType) ToFortimanagerDVMInstallPolicyPackagePtrOutput() FortimanagerDVMInstallPolicyPackagePtrOutput {
	return i.ToFortimanagerDVMInstallPolicyPackagePtrOutputWithContext(context.Background())
}

func (i *fortimanagerDVMInstallPolicyPackagePtrType) ToFortimanagerDVMInstallPolicyPackagePtrOutputWithContext(ctx context.Context) FortimanagerDVMInstallPolicyPackagePtrOutput {
	return pulumi.ToOutputWithContext(ctx, i).(FortimanagerDVMInstallPolicyPackagePtrOutput)
}

// FortimanagerDVMInstallPolicyPackageArrayInput is an input type that accepts FortimanagerDVMInstallPolicyPackageArray and FortimanagerDVMInstallPolicyPackageArrayOutput values.
// You can construct a concrete instance of `FortimanagerDVMInstallPolicyPackageArrayInput` via:
//
//          FortimanagerDVMInstallPolicyPackageArray{ FortimanagerDVMInstallPolicyPackageArgs{...} }
type FortimanagerDVMInstallPolicyPackageArrayInput interface {
	pulumi.Input

	ToFortimanagerDVMInstallPolicyPackageArrayOutput() FortimanagerDVMInstallPolicyPackageArrayOutput
	ToFortimanagerDVMInstallPolicyPackageArrayOutputWithContext(context.Context) FortimanagerDVMInstallPolicyPackageArrayOutput
}

type FortimanagerDVMInstallPolicyPackageArray []FortimanagerDVMInstallPolicyPackageInput

func (FortimanagerDVMInstallPolicyPackageArray) ElementType() reflect.Type {
	return reflect.TypeOf(([]*FortimanagerDVMInstallPolicyPackage)(nil))
}

func (i FortimanagerDVMInstallPolicyPackageArray) ToFortimanagerDVMInstallPolicyPackageArrayOutput() FortimanagerDVMInstallPolicyPackageArrayOutput {
	return i.ToFortimanagerDVMInstallPolicyPackageArrayOutputWithContext(context.Background())
}

func (i FortimanagerDVMInstallPolicyPackageArray) ToFortimanagerDVMInstallPolicyPackageArrayOutputWithContext(ctx context.Context) FortimanagerDVMInstallPolicyPackageArrayOutput {
	return pulumi.ToOutputWithContext(ctx, i).(FortimanagerDVMInstallPolicyPackageArrayOutput)
}

// FortimanagerDVMInstallPolicyPackageMapInput is an input type that accepts FortimanagerDVMInstallPolicyPackageMap and FortimanagerDVMInstallPolicyPackageMapOutput values.
// You can construct a concrete instance of `FortimanagerDVMInstallPolicyPackageMapInput` via:
//
//          FortimanagerDVMInstallPolicyPackageMap{ "key": FortimanagerDVMInstallPolicyPackageArgs{...} }
type FortimanagerDVMInstallPolicyPackageMapInput interface {
	pulumi.Input

	ToFortimanagerDVMInstallPolicyPackageMapOutput() FortimanagerDVMInstallPolicyPackageMapOutput
	ToFortimanagerDVMInstallPolicyPackageMapOutputWithContext(context.Context) FortimanagerDVMInstallPolicyPackageMapOutput
}

type FortimanagerDVMInstallPolicyPackageMap map[string]FortimanagerDVMInstallPolicyPackageInput

func (FortimanagerDVMInstallPolicyPackageMap) ElementType() reflect.Type {
	return reflect.TypeOf((map[string]*FortimanagerDVMInstallPolicyPackage)(nil))
}

func (i FortimanagerDVMInstallPolicyPackageMap) ToFortimanagerDVMInstallPolicyPackageMapOutput() FortimanagerDVMInstallPolicyPackageMapOutput {
	return i.ToFortimanagerDVMInstallPolicyPackageMapOutputWithContext(context.Background())
}

func (i FortimanagerDVMInstallPolicyPackageMap) ToFortimanagerDVMInstallPolicyPackageMapOutputWithContext(ctx context.Context) FortimanagerDVMInstallPolicyPackageMapOutput {
	return pulumi.ToOutputWithContext(ctx, i).(FortimanagerDVMInstallPolicyPackageMapOutput)
}

type FortimanagerDVMInstallPolicyPackageOutput struct {
	*pulumi.OutputState
}

func (FortimanagerDVMInstallPolicyPackageOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*FortimanagerDVMInstallPolicyPackage)(nil))
}

func (o FortimanagerDVMInstallPolicyPackageOutput) ToFortimanagerDVMInstallPolicyPackageOutput() FortimanagerDVMInstallPolicyPackageOutput {
	return o
}

func (o FortimanagerDVMInstallPolicyPackageOutput) ToFortimanagerDVMInstallPolicyPackageOutputWithContext(ctx context.Context) FortimanagerDVMInstallPolicyPackageOutput {
	return o
}

func (o FortimanagerDVMInstallPolicyPackageOutput) ToFortimanagerDVMInstallPolicyPackagePtrOutput() FortimanagerDVMInstallPolicyPackagePtrOutput {
	return o.ToFortimanagerDVMInstallPolicyPackagePtrOutputWithContext(context.Background())
}

func (o FortimanagerDVMInstallPolicyPackageOutput) ToFortimanagerDVMInstallPolicyPackagePtrOutputWithContext(ctx context.Context) FortimanagerDVMInstallPolicyPackagePtrOutput {
	return o.ApplyT(func(v FortimanagerDVMInstallPolicyPackage) *FortimanagerDVMInstallPolicyPackage {
		return &v
	}).(FortimanagerDVMInstallPolicyPackagePtrOutput)
}

type FortimanagerDVMInstallPolicyPackagePtrOutput struct {
	*pulumi.OutputState
}

func (FortimanagerDVMInstallPolicyPackagePtrOutput) ElementType() reflect.Type {
	return reflect.TypeOf((**FortimanagerDVMInstallPolicyPackage)(nil))
}

func (o FortimanagerDVMInstallPolicyPackagePtrOutput) ToFortimanagerDVMInstallPolicyPackagePtrOutput() FortimanagerDVMInstallPolicyPackagePtrOutput {
	return o
}

func (o FortimanagerDVMInstallPolicyPackagePtrOutput) ToFortimanagerDVMInstallPolicyPackagePtrOutputWithContext(ctx context.Context) FortimanagerDVMInstallPolicyPackagePtrOutput {
	return o
}

type FortimanagerDVMInstallPolicyPackageArrayOutput struct{ *pulumi.OutputState }

func (FortimanagerDVMInstallPolicyPackageArrayOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*[]FortimanagerDVMInstallPolicyPackage)(nil))
}

func (o FortimanagerDVMInstallPolicyPackageArrayOutput) ToFortimanagerDVMInstallPolicyPackageArrayOutput() FortimanagerDVMInstallPolicyPackageArrayOutput {
	return o
}

func (o FortimanagerDVMInstallPolicyPackageArrayOutput) ToFortimanagerDVMInstallPolicyPackageArrayOutputWithContext(ctx context.Context) FortimanagerDVMInstallPolicyPackageArrayOutput {
	return o
}

func (o FortimanagerDVMInstallPolicyPackageArrayOutput) Index(i pulumi.IntInput) FortimanagerDVMInstallPolicyPackageOutput {
	return pulumi.All(o, i).ApplyT(func(vs []interface{}) FortimanagerDVMInstallPolicyPackage {
		return vs[0].([]FortimanagerDVMInstallPolicyPackage)[vs[1].(int)]
	}).(FortimanagerDVMInstallPolicyPackageOutput)
}

type FortimanagerDVMInstallPolicyPackageMapOutput struct{ *pulumi.OutputState }

func (FortimanagerDVMInstallPolicyPackageMapOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*map[string]FortimanagerDVMInstallPolicyPackage)(nil))
}

func (o FortimanagerDVMInstallPolicyPackageMapOutput) ToFortimanagerDVMInstallPolicyPackageMapOutput() FortimanagerDVMInstallPolicyPackageMapOutput {
	return o
}

func (o FortimanagerDVMInstallPolicyPackageMapOutput) ToFortimanagerDVMInstallPolicyPackageMapOutputWithContext(ctx context.Context) FortimanagerDVMInstallPolicyPackageMapOutput {
	return o
}

func (o FortimanagerDVMInstallPolicyPackageMapOutput) MapIndex(k pulumi.StringInput) FortimanagerDVMInstallPolicyPackageOutput {
	return pulumi.All(o, k).ApplyT(func(vs []interface{}) FortimanagerDVMInstallPolicyPackage {
		return vs[0].(map[string]FortimanagerDVMInstallPolicyPackage)[vs[1].(string)]
	}).(FortimanagerDVMInstallPolicyPackageOutput)
}

func init() {
	pulumi.RegisterOutputType(FortimanagerDVMInstallPolicyPackageOutput{})
	pulumi.RegisterOutputType(FortimanagerDVMInstallPolicyPackagePtrOutput{})
	pulumi.RegisterOutputType(FortimanagerDVMInstallPolicyPackageArrayOutput{})
	pulumi.RegisterOutputType(FortimanagerDVMInstallPolicyPackageMapOutput{})
}
