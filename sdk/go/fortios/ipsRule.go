// Code generated by the Pulumi Terraform Bridge (tfgen) Tool DO NOT EDIT.
// *** WARNING: Do not edit by hand unless you're certain you know what you are doing! ***

package fortios

import (
	"context"
	"reflect"

	"github.com/lubyou/pulumi-fortios/sdk/go/fortios/internal"
	"github.com/pulumi/pulumi/sdk/v3/go/pulumi"
	"github.com/pulumi/pulumi/sdk/v3/go/pulumix"
)

type IpsRule struct {
	pulumi.CustomResourceState

	Action              pulumi.StringOutput        `pulumi:"action"`
	Application         pulumi.StringOutput        `pulumi:"application"`
	Date                pulumi.IntOutput           `pulumi:"date"`
	DynamicSortSubtable pulumi.StringPtrOutput     `pulumi:"dynamicSortSubtable"`
	GetAllTables        pulumi.StringPtrOutput     `pulumi:"getAllTables"`
	Group               pulumi.StringOutput        `pulumi:"group"`
	Location            pulumi.StringOutput        `pulumi:"location"`
	Log                 pulumi.StringOutput        `pulumi:"log"`
	LogPacket           pulumi.StringOutput        `pulumi:"logPacket"`
	Metadatas           IpsRuleMetadataArrayOutput `pulumi:"metadatas"`
	Name                pulumi.StringOutput        `pulumi:"name"`
	Os                  pulumi.StringOutput        `pulumi:"os"`
	Rev                 pulumi.IntOutput           `pulumi:"rev"`
	RuleId              pulumi.IntOutput           `pulumi:"ruleId"`
	Service             pulumi.StringOutput        `pulumi:"service"`
	Severity            pulumi.StringOutput        `pulumi:"severity"`
	Status              pulumi.StringOutput        `pulumi:"status"`
	Vdomparam           pulumi.StringPtrOutput     `pulumi:"vdomparam"`
}

// NewIpsRule registers a new resource with the given unique name, arguments, and options.
func NewIpsRule(ctx *pulumi.Context,
	name string, args *IpsRuleArgs, opts ...pulumi.ResourceOption) (*IpsRule, error) {
	if args == nil {
		args = &IpsRuleArgs{}
	}

	opts = internal.PkgResourceDefaultOpts(opts)
	var resource IpsRule
	err := ctx.RegisterResource("fortios:index/ipsRule:IpsRule", name, args, &resource, opts...)
	if err != nil {
		return nil, err
	}
	return &resource, nil
}

// GetIpsRule gets an existing IpsRule resource's state with the given name, ID, and optional
// state properties that are used to uniquely qualify the lookup (nil if not required).
func GetIpsRule(ctx *pulumi.Context,
	name string, id pulumi.IDInput, state *IpsRuleState, opts ...pulumi.ResourceOption) (*IpsRule, error) {
	var resource IpsRule
	err := ctx.ReadResource("fortios:index/ipsRule:IpsRule", name, id, state, &resource, opts...)
	if err != nil {
		return nil, err
	}
	return &resource, nil
}

// Input properties used for looking up and filtering IpsRule resources.
type ipsRuleState struct {
	Action              *string           `pulumi:"action"`
	Application         *string           `pulumi:"application"`
	Date                *int              `pulumi:"date"`
	DynamicSortSubtable *string           `pulumi:"dynamicSortSubtable"`
	GetAllTables        *string           `pulumi:"getAllTables"`
	Group               *string           `pulumi:"group"`
	Location            *string           `pulumi:"location"`
	Log                 *string           `pulumi:"log"`
	LogPacket           *string           `pulumi:"logPacket"`
	Metadatas           []IpsRuleMetadata `pulumi:"metadatas"`
	Name                *string           `pulumi:"name"`
	Os                  *string           `pulumi:"os"`
	Rev                 *int              `pulumi:"rev"`
	RuleId              *int              `pulumi:"ruleId"`
	Service             *string           `pulumi:"service"`
	Severity            *string           `pulumi:"severity"`
	Status              *string           `pulumi:"status"`
	Vdomparam           *string           `pulumi:"vdomparam"`
}

type IpsRuleState struct {
	Action              pulumi.StringPtrInput
	Application         pulumi.StringPtrInput
	Date                pulumi.IntPtrInput
	DynamicSortSubtable pulumi.StringPtrInput
	GetAllTables        pulumi.StringPtrInput
	Group               pulumi.StringPtrInput
	Location            pulumi.StringPtrInput
	Log                 pulumi.StringPtrInput
	LogPacket           pulumi.StringPtrInput
	Metadatas           IpsRuleMetadataArrayInput
	Name                pulumi.StringPtrInput
	Os                  pulumi.StringPtrInput
	Rev                 pulumi.IntPtrInput
	RuleId              pulumi.IntPtrInput
	Service             pulumi.StringPtrInput
	Severity            pulumi.StringPtrInput
	Status              pulumi.StringPtrInput
	Vdomparam           pulumi.StringPtrInput
}

func (IpsRuleState) ElementType() reflect.Type {
	return reflect.TypeOf((*ipsRuleState)(nil)).Elem()
}

type ipsRuleArgs struct {
	Action              *string           `pulumi:"action"`
	Application         *string           `pulumi:"application"`
	Date                *int              `pulumi:"date"`
	DynamicSortSubtable *string           `pulumi:"dynamicSortSubtable"`
	GetAllTables        *string           `pulumi:"getAllTables"`
	Group               *string           `pulumi:"group"`
	Location            *string           `pulumi:"location"`
	Log                 *string           `pulumi:"log"`
	LogPacket           *string           `pulumi:"logPacket"`
	Metadatas           []IpsRuleMetadata `pulumi:"metadatas"`
	Name                *string           `pulumi:"name"`
	Os                  *string           `pulumi:"os"`
	Rev                 *int              `pulumi:"rev"`
	RuleId              *int              `pulumi:"ruleId"`
	Service             *string           `pulumi:"service"`
	Severity            *string           `pulumi:"severity"`
	Status              *string           `pulumi:"status"`
	Vdomparam           *string           `pulumi:"vdomparam"`
}

// The set of arguments for constructing a IpsRule resource.
type IpsRuleArgs struct {
	Action              pulumi.StringPtrInput
	Application         pulumi.StringPtrInput
	Date                pulumi.IntPtrInput
	DynamicSortSubtable pulumi.StringPtrInput
	GetAllTables        pulumi.StringPtrInput
	Group               pulumi.StringPtrInput
	Location            pulumi.StringPtrInput
	Log                 pulumi.StringPtrInput
	LogPacket           pulumi.StringPtrInput
	Metadatas           IpsRuleMetadataArrayInput
	Name                pulumi.StringPtrInput
	Os                  pulumi.StringPtrInput
	Rev                 pulumi.IntPtrInput
	RuleId              pulumi.IntPtrInput
	Service             pulumi.StringPtrInput
	Severity            pulumi.StringPtrInput
	Status              pulumi.StringPtrInput
	Vdomparam           pulumi.StringPtrInput
}

func (IpsRuleArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*ipsRuleArgs)(nil)).Elem()
}

type IpsRuleInput interface {
	pulumi.Input

	ToIpsRuleOutput() IpsRuleOutput
	ToIpsRuleOutputWithContext(ctx context.Context) IpsRuleOutput
}

func (*IpsRule) ElementType() reflect.Type {
	return reflect.TypeOf((**IpsRule)(nil)).Elem()
}

func (i *IpsRule) ToIpsRuleOutput() IpsRuleOutput {
	return i.ToIpsRuleOutputWithContext(context.Background())
}

func (i *IpsRule) ToIpsRuleOutputWithContext(ctx context.Context) IpsRuleOutput {
	return pulumi.ToOutputWithContext(ctx, i).(IpsRuleOutput)
}

func (i *IpsRule) ToOutput(ctx context.Context) pulumix.Output[*IpsRule] {
	return pulumix.Output[*IpsRule]{
		OutputState: i.ToIpsRuleOutputWithContext(ctx).OutputState,
	}
}

// IpsRuleArrayInput is an input type that accepts IpsRuleArray and IpsRuleArrayOutput values.
// You can construct a concrete instance of `IpsRuleArrayInput` via:
//
//	IpsRuleArray{ IpsRuleArgs{...} }
type IpsRuleArrayInput interface {
	pulumi.Input

	ToIpsRuleArrayOutput() IpsRuleArrayOutput
	ToIpsRuleArrayOutputWithContext(context.Context) IpsRuleArrayOutput
}

type IpsRuleArray []IpsRuleInput

func (IpsRuleArray) ElementType() reflect.Type {
	return reflect.TypeOf((*[]*IpsRule)(nil)).Elem()
}

func (i IpsRuleArray) ToIpsRuleArrayOutput() IpsRuleArrayOutput {
	return i.ToIpsRuleArrayOutputWithContext(context.Background())
}

func (i IpsRuleArray) ToIpsRuleArrayOutputWithContext(ctx context.Context) IpsRuleArrayOutput {
	return pulumi.ToOutputWithContext(ctx, i).(IpsRuleArrayOutput)
}

func (i IpsRuleArray) ToOutput(ctx context.Context) pulumix.Output[[]*IpsRule] {
	return pulumix.Output[[]*IpsRule]{
		OutputState: i.ToIpsRuleArrayOutputWithContext(ctx).OutputState,
	}
}

// IpsRuleMapInput is an input type that accepts IpsRuleMap and IpsRuleMapOutput values.
// You can construct a concrete instance of `IpsRuleMapInput` via:
//
//	IpsRuleMap{ "key": IpsRuleArgs{...} }
type IpsRuleMapInput interface {
	pulumi.Input

	ToIpsRuleMapOutput() IpsRuleMapOutput
	ToIpsRuleMapOutputWithContext(context.Context) IpsRuleMapOutput
}

type IpsRuleMap map[string]IpsRuleInput

func (IpsRuleMap) ElementType() reflect.Type {
	return reflect.TypeOf((*map[string]*IpsRule)(nil)).Elem()
}

func (i IpsRuleMap) ToIpsRuleMapOutput() IpsRuleMapOutput {
	return i.ToIpsRuleMapOutputWithContext(context.Background())
}

func (i IpsRuleMap) ToIpsRuleMapOutputWithContext(ctx context.Context) IpsRuleMapOutput {
	return pulumi.ToOutputWithContext(ctx, i).(IpsRuleMapOutput)
}

func (i IpsRuleMap) ToOutput(ctx context.Context) pulumix.Output[map[string]*IpsRule] {
	return pulumix.Output[map[string]*IpsRule]{
		OutputState: i.ToIpsRuleMapOutputWithContext(ctx).OutputState,
	}
}

type IpsRuleOutput struct{ *pulumi.OutputState }

func (IpsRuleOutput) ElementType() reflect.Type {
	return reflect.TypeOf((**IpsRule)(nil)).Elem()
}

func (o IpsRuleOutput) ToIpsRuleOutput() IpsRuleOutput {
	return o
}

func (o IpsRuleOutput) ToIpsRuleOutputWithContext(ctx context.Context) IpsRuleOutput {
	return o
}

func (o IpsRuleOutput) ToOutput(ctx context.Context) pulumix.Output[*IpsRule] {
	return pulumix.Output[*IpsRule]{
		OutputState: o.OutputState,
	}
}

func (o IpsRuleOutput) Action() pulumi.StringOutput {
	return o.ApplyT(func(v *IpsRule) pulumi.StringOutput { return v.Action }).(pulumi.StringOutput)
}

func (o IpsRuleOutput) Application() pulumi.StringOutput {
	return o.ApplyT(func(v *IpsRule) pulumi.StringOutput { return v.Application }).(pulumi.StringOutput)
}

func (o IpsRuleOutput) Date() pulumi.IntOutput {
	return o.ApplyT(func(v *IpsRule) pulumi.IntOutput { return v.Date }).(pulumi.IntOutput)
}

func (o IpsRuleOutput) DynamicSortSubtable() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *IpsRule) pulumi.StringPtrOutput { return v.DynamicSortSubtable }).(pulumi.StringPtrOutput)
}

func (o IpsRuleOutput) GetAllTables() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *IpsRule) pulumi.StringPtrOutput { return v.GetAllTables }).(pulumi.StringPtrOutput)
}

func (o IpsRuleOutput) Group() pulumi.StringOutput {
	return o.ApplyT(func(v *IpsRule) pulumi.StringOutput { return v.Group }).(pulumi.StringOutput)
}

func (o IpsRuleOutput) Location() pulumi.StringOutput {
	return o.ApplyT(func(v *IpsRule) pulumi.StringOutput { return v.Location }).(pulumi.StringOutput)
}

func (o IpsRuleOutput) Log() pulumi.StringOutput {
	return o.ApplyT(func(v *IpsRule) pulumi.StringOutput { return v.Log }).(pulumi.StringOutput)
}

func (o IpsRuleOutput) LogPacket() pulumi.StringOutput {
	return o.ApplyT(func(v *IpsRule) pulumi.StringOutput { return v.LogPacket }).(pulumi.StringOutput)
}

func (o IpsRuleOutput) Metadatas() IpsRuleMetadataArrayOutput {
	return o.ApplyT(func(v *IpsRule) IpsRuleMetadataArrayOutput { return v.Metadatas }).(IpsRuleMetadataArrayOutput)
}

func (o IpsRuleOutput) Name() pulumi.StringOutput {
	return o.ApplyT(func(v *IpsRule) pulumi.StringOutput { return v.Name }).(pulumi.StringOutput)
}

func (o IpsRuleOutput) Os() pulumi.StringOutput {
	return o.ApplyT(func(v *IpsRule) pulumi.StringOutput { return v.Os }).(pulumi.StringOutput)
}

func (o IpsRuleOutput) Rev() pulumi.IntOutput {
	return o.ApplyT(func(v *IpsRule) pulumi.IntOutput { return v.Rev }).(pulumi.IntOutput)
}

func (o IpsRuleOutput) RuleId() pulumi.IntOutput {
	return o.ApplyT(func(v *IpsRule) pulumi.IntOutput { return v.RuleId }).(pulumi.IntOutput)
}

func (o IpsRuleOutput) Service() pulumi.StringOutput {
	return o.ApplyT(func(v *IpsRule) pulumi.StringOutput { return v.Service }).(pulumi.StringOutput)
}

func (o IpsRuleOutput) Severity() pulumi.StringOutput {
	return o.ApplyT(func(v *IpsRule) pulumi.StringOutput { return v.Severity }).(pulumi.StringOutput)
}

func (o IpsRuleOutput) Status() pulumi.StringOutput {
	return o.ApplyT(func(v *IpsRule) pulumi.StringOutput { return v.Status }).(pulumi.StringOutput)
}

func (o IpsRuleOutput) Vdomparam() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *IpsRule) pulumi.StringPtrOutput { return v.Vdomparam }).(pulumi.StringPtrOutput)
}

type IpsRuleArrayOutput struct{ *pulumi.OutputState }

func (IpsRuleArrayOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*[]*IpsRule)(nil)).Elem()
}

func (o IpsRuleArrayOutput) ToIpsRuleArrayOutput() IpsRuleArrayOutput {
	return o
}

func (o IpsRuleArrayOutput) ToIpsRuleArrayOutputWithContext(ctx context.Context) IpsRuleArrayOutput {
	return o
}

func (o IpsRuleArrayOutput) ToOutput(ctx context.Context) pulumix.Output[[]*IpsRule] {
	return pulumix.Output[[]*IpsRule]{
		OutputState: o.OutputState,
	}
}

func (o IpsRuleArrayOutput) Index(i pulumi.IntInput) IpsRuleOutput {
	return pulumi.All(o, i).ApplyT(func(vs []interface{}) *IpsRule {
		return vs[0].([]*IpsRule)[vs[1].(int)]
	}).(IpsRuleOutput)
}

type IpsRuleMapOutput struct{ *pulumi.OutputState }

func (IpsRuleMapOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*map[string]*IpsRule)(nil)).Elem()
}

func (o IpsRuleMapOutput) ToIpsRuleMapOutput() IpsRuleMapOutput {
	return o
}

func (o IpsRuleMapOutput) ToIpsRuleMapOutputWithContext(ctx context.Context) IpsRuleMapOutput {
	return o
}

func (o IpsRuleMapOutput) ToOutput(ctx context.Context) pulumix.Output[map[string]*IpsRule] {
	return pulumix.Output[map[string]*IpsRule]{
		OutputState: o.OutputState,
	}
}

func (o IpsRuleMapOutput) MapIndex(k pulumi.StringInput) IpsRuleOutput {
	return pulumi.All(o, k).ApplyT(func(vs []interface{}) *IpsRule {
		return vs[0].(map[string]*IpsRule)[vs[1].(string)]
	}).(IpsRuleOutput)
}

func init() {
	pulumi.RegisterInputType(reflect.TypeOf((*IpsRuleInput)(nil)).Elem(), &IpsRule{})
	pulumi.RegisterInputType(reflect.TypeOf((*IpsRuleArrayInput)(nil)).Elem(), IpsRuleArray{})
	pulumi.RegisterInputType(reflect.TypeOf((*IpsRuleMapInput)(nil)).Elem(), IpsRuleMap{})
	pulumi.RegisterOutputType(IpsRuleOutput{})
	pulumi.RegisterOutputType(IpsRuleArrayOutput{})
	pulumi.RegisterOutputType(IpsRuleMapOutput{})
}
