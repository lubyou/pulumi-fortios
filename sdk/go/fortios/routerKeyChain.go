// Code generated by the Pulumi Terraform Bridge (tfgen) Tool DO NOT EDIT.
// *** WARNING: Do not edit by hand unless you're certain you know what you are doing! ***

package fortios

import (
	"context"
	"reflect"

	"github.com/pulumi/pulumi/sdk/v3/go/pulumi"
)

type RouterKeyChain struct {
	pulumi.CustomResourceState

	DynamicSortSubtable pulumi.StringPtrOutput       `pulumi:"dynamicSortSubtable"`
	Keys                RouterKeyChainKeyArrayOutput `pulumi:"keys"`
	Name                pulumi.StringOutput          `pulumi:"name"`
	Vdomparam           pulumi.StringPtrOutput       `pulumi:"vdomparam"`
}

// NewRouterKeyChain registers a new resource with the given unique name, arguments, and options.
func NewRouterKeyChain(ctx *pulumi.Context,
	name string, args *RouterKeyChainArgs, opts ...pulumi.ResourceOption) (*RouterKeyChain, error) {
	if args == nil {
		args = &RouterKeyChainArgs{}
	}

	opts = pkgResourceDefaultOpts(opts)
	var resource RouterKeyChain
	err := ctx.RegisterResource("fortios:index/routerKeyChain:RouterKeyChain", name, args, &resource, opts...)
	if err != nil {
		return nil, err
	}
	return &resource, nil
}

// GetRouterKeyChain gets an existing RouterKeyChain resource's state with the given name, ID, and optional
// state properties that are used to uniquely qualify the lookup (nil if not required).
func GetRouterKeyChain(ctx *pulumi.Context,
	name string, id pulumi.IDInput, state *RouterKeyChainState, opts ...pulumi.ResourceOption) (*RouterKeyChain, error) {
	var resource RouterKeyChain
	err := ctx.ReadResource("fortios:index/routerKeyChain:RouterKeyChain", name, id, state, &resource, opts...)
	if err != nil {
		return nil, err
	}
	return &resource, nil
}

// Input properties used for looking up and filtering RouterKeyChain resources.
type routerKeyChainState struct {
	DynamicSortSubtable *string             `pulumi:"dynamicSortSubtable"`
	Keys                []RouterKeyChainKey `pulumi:"keys"`
	Name                *string             `pulumi:"name"`
	Vdomparam           *string             `pulumi:"vdomparam"`
}

type RouterKeyChainState struct {
	DynamicSortSubtable pulumi.StringPtrInput
	Keys                RouterKeyChainKeyArrayInput
	Name                pulumi.StringPtrInput
	Vdomparam           pulumi.StringPtrInput
}

func (RouterKeyChainState) ElementType() reflect.Type {
	return reflect.TypeOf((*routerKeyChainState)(nil)).Elem()
}

type routerKeyChainArgs struct {
	DynamicSortSubtable *string             `pulumi:"dynamicSortSubtable"`
	Keys                []RouterKeyChainKey `pulumi:"keys"`
	Name                *string             `pulumi:"name"`
	Vdomparam           *string             `pulumi:"vdomparam"`
}

// The set of arguments for constructing a RouterKeyChain resource.
type RouterKeyChainArgs struct {
	DynamicSortSubtable pulumi.StringPtrInput
	Keys                RouterKeyChainKeyArrayInput
	Name                pulumi.StringPtrInput
	Vdomparam           pulumi.StringPtrInput
}

func (RouterKeyChainArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*routerKeyChainArgs)(nil)).Elem()
}

type RouterKeyChainInput interface {
	pulumi.Input

	ToRouterKeyChainOutput() RouterKeyChainOutput
	ToRouterKeyChainOutputWithContext(ctx context.Context) RouterKeyChainOutput
}

func (*RouterKeyChain) ElementType() reflect.Type {
	return reflect.TypeOf((**RouterKeyChain)(nil)).Elem()
}

func (i *RouterKeyChain) ToRouterKeyChainOutput() RouterKeyChainOutput {
	return i.ToRouterKeyChainOutputWithContext(context.Background())
}

func (i *RouterKeyChain) ToRouterKeyChainOutputWithContext(ctx context.Context) RouterKeyChainOutput {
	return pulumi.ToOutputWithContext(ctx, i).(RouterKeyChainOutput)
}

// RouterKeyChainArrayInput is an input type that accepts RouterKeyChainArray and RouterKeyChainArrayOutput values.
// You can construct a concrete instance of `RouterKeyChainArrayInput` via:
//
//	RouterKeyChainArray{ RouterKeyChainArgs{...} }
type RouterKeyChainArrayInput interface {
	pulumi.Input

	ToRouterKeyChainArrayOutput() RouterKeyChainArrayOutput
	ToRouterKeyChainArrayOutputWithContext(context.Context) RouterKeyChainArrayOutput
}

type RouterKeyChainArray []RouterKeyChainInput

func (RouterKeyChainArray) ElementType() reflect.Type {
	return reflect.TypeOf((*[]*RouterKeyChain)(nil)).Elem()
}

func (i RouterKeyChainArray) ToRouterKeyChainArrayOutput() RouterKeyChainArrayOutput {
	return i.ToRouterKeyChainArrayOutputWithContext(context.Background())
}

func (i RouterKeyChainArray) ToRouterKeyChainArrayOutputWithContext(ctx context.Context) RouterKeyChainArrayOutput {
	return pulumi.ToOutputWithContext(ctx, i).(RouterKeyChainArrayOutput)
}

// RouterKeyChainMapInput is an input type that accepts RouterKeyChainMap and RouterKeyChainMapOutput values.
// You can construct a concrete instance of `RouterKeyChainMapInput` via:
//
//	RouterKeyChainMap{ "key": RouterKeyChainArgs{...} }
type RouterKeyChainMapInput interface {
	pulumi.Input

	ToRouterKeyChainMapOutput() RouterKeyChainMapOutput
	ToRouterKeyChainMapOutputWithContext(context.Context) RouterKeyChainMapOutput
}

type RouterKeyChainMap map[string]RouterKeyChainInput

func (RouterKeyChainMap) ElementType() reflect.Type {
	return reflect.TypeOf((*map[string]*RouterKeyChain)(nil)).Elem()
}

func (i RouterKeyChainMap) ToRouterKeyChainMapOutput() RouterKeyChainMapOutput {
	return i.ToRouterKeyChainMapOutputWithContext(context.Background())
}

func (i RouterKeyChainMap) ToRouterKeyChainMapOutputWithContext(ctx context.Context) RouterKeyChainMapOutput {
	return pulumi.ToOutputWithContext(ctx, i).(RouterKeyChainMapOutput)
}

type RouterKeyChainOutput struct{ *pulumi.OutputState }

func (RouterKeyChainOutput) ElementType() reflect.Type {
	return reflect.TypeOf((**RouterKeyChain)(nil)).Elem()
}

func (o RouterKeyChainOutput) ToRouterKeyChainOutput() RouterKeyChainOutput {
	return o
}

func (o RouterKeyChainOutput) ToRouterKeyChainOutputWithContext(ctx context.Context) RouterKeyChainOutput {
	return o
}

func (o RouterKeyChainOutput) DynamicSortSubtable() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *RouterKeyChain) pulumi.StringPtrOutput { return v.DynamicSortSubtable }).(pulumi.StringPtrOutput)
}

func (o RouterKeyChainOutput) Keys() RouterKeyChainKeyArrayOutput {
	return o.ApplyT(func(v *RouterKeyChain) RouterKeyChainKeyArrayOutput { return v.Keys }).(RouterKeyChainKeyArrayOutput)
}

func (o RouterKeyChainOutput) Name() pulumi.StringOutput {
	return o.ApplyT(func(v *RouterKeyChain) pulumi.StringOutput { return v.Name }).(pulumi.StringOutput)
}

func (o RouterKeyChainOutput) Vdomparam() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *RouterKeyChain) pulumi.StringPtrOutput { return v.Vdomparam }).(pulumi.StringPtrOutput)
}

type RouterKeyChainArrayOutput struct{ *pulumi.OutputState }

func (RouterKeyChainArrayOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*[]*RouterKeyChain)(nil)).Elem()
}

func (o RouterKeyChainArrayOutput) ToRouterKeyChainArrayOutput() RouterKeyChainArrayOutput {
	return o
}

func (o RouterKeyChainArrayOutput) ToRouterKeyChainArrayOutputWithContext(ctx context.Context) RouterKeyChainArrayOutput {
	return o
}

func (o RouterKeyChainArrayOutput) Index(i pulumi.IntInput) RouterKeyChainOutput {
	return pulumi.All(o, i).ApplyT(func(vs []interface{}) *RouterKeyChain {
		return vs[0].([]*RouterKeyChain)[vs[1].(int)]
	}).(RouterKeyChainOutput)
}

type RouterKeyChainMapOutput struct{ *pulumi.OutputState }

func (RouterKeyChainMapOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*map[string]*RouterKeyChain)(nil)).Elem()
}

func (o RouterKeyChainMapOutput) ToRouterKeyChainMapOutput() RouterKeyChainMapOutput {
	return o
}

func (o RouterKeyChainMapOutput) ToRouterKeyChainMapOutputWithContext(ctx context.Context) RouterKeyChainMapOutput {
	return o
}

func (o RouterKeyChainMapOutput) MapIndex(k pulumi.StringInput) RouterKeyChainOutput {
	return pulumi.All(o, k).ApplyT(func(vs []interface{}) *RouterKeyChain {
		return vs[0].(map[string]*RouterKeyChain)[vs[1].(string)]
	}).(RouterKeyChainOutput)
}

func init() {
	pulumi.RegisterInputType(reflect.TypeOf((*RouterKeyChainInput)(nil)).Elem(), &RouterKeyChain{})
	pulumi.RegisterInputType(reflect.TypeOf((*RouterKeyChainArrayInput)(nil)).Elem(), RouterKeyChainArray{})
	pulumi.RegisterInputType(reflect.TypeOf((*RouterKeyChainMapInput)(nil)).Elem(), RouterKeyChainMap{})
	pulumi.RegisterOutputType(RouterKeyChainOutput{})
	pulumi.RegisterOutputType(RouterKeyChainArrayOutput{})
	pulumi.RegisterOutputType(RouterKeyChainMapOutput{})
}
