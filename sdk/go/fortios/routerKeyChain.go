// *** WARNING: this file was generated by the Pulumi Terraform Bridge (tfgen) Tool. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

package fortios

import (
	"context"
	"reflect"

	"github.com/pulumi/pulumi/sdk/v3/go/pulumi"
)

// Configure key-chain.
//
// ## Example Usage
//
// ```go
// package main
//
// import (
// 	"github.com/pulumi/pulumi-fortios/sdk/go/fortios"
// 	"github.com/pulumi/pulumi/sdk/v3/go/pulumi"
// )
//
// func main() {
// 	pulumi.Run(func(ctx *pulumi.Context) error {
// 		_, err := fortios.NewRouterKeyChain(ctx, "trname", &fortios.RouterKeyChainArgs{
// 			Keys: RouterKeyChainKeyArray{
// 				&RouterKeyChainKeyArgs{
// 					AcceptLifetime: pulumi.String("04:00:00 01 01 2008 04:00:00 01 01 2022"),
// 					KeyString:      pulumi.String("ewiwn3i23232s212"),
// 					SendLifetime:   pulumi.String("04:00:00 01 01 2008 04:00:00 01 01 2022"),
// 				},
// 			},
// 		})
// 		if err != nil {
// 			return err
// 		}
// 		return nil
// 	})
// }
// ```
//
// ## Import
//
// Router KeyChain can be imported using any of these accepted formats
//
// ```sh
//  $ pulumi import fortios:index/routerKeyChain:RouterKeyChain labelname {{name}}
// ```
//
//  If you do not want to import arguments of block$ export "FORTIOS_IMPORT_TABLE"="false"
//
// ```sh
//  $ pulumi import fortios:index/routerKeyChain:RouterKeyChain labelname {{name}}
// ```
//
//  $ unset "FORTIOS_IMPORT_TABLE"
type RouterKeyChain struct {
	pulumi.CustomResourceState

	// true or false, set this parameter to true when using dynamic forEach + toset to configure and sort sub-tables, please do not set this parameter when configuring static sub-tables.
	DynamicSortSubtable pulumi.StringPtrOutput `pulumi:"dynamicSortSubtable"`
	// Configuration method to edit key settings. The structure of `key` block is documented below.
	Keys RouterKeyChainKeyArrayOutput `pulumi:"keys"`
	// Key-chain name.
	Name pulumi.StringOutput `pulumi:"name"`
	// Specifies the vdom to which the resource will be applied when the FortiGate unit is running in VDOM mode. Only one vdom can be specified. If you want to inherit the vdom configuration of the provider, please do not set this parameter.
	Vdomparam pulumi.StringPtrOutput `pulumi:"vdomparam"`
}

// NewRouterKeyChain registers a new resource with the given unique name, arguments, and options.
func NewRouterKeyChain(ctx *pulumi.Context,
	name string, args *RouterKeyChainArgs, opts ...pulumi.ResourceOption) (*RouterKeyChain, error) {
	if args == nil {
		args = &RouterKeyChainArgs{}
	}

	opts = pkgResourceDefaultOpts(opts)
	var resource RouterKeyChain
	err := ctx.RegisterResource("fortios:index/routerKeyChain:RouterKeyChain", name, args, &resource, opts...)
	if err != nil {
		return nil, err
	}
	return &resource, nil
}

// GetRouterKeyChain gets an existing RouterKeyChain resource's state with the given name, ID, and optional
// state properties that are used to uniquely qualify the lookup (nil if not required).
func GetRouterKeyChain(ctx *pulumi.Context,
	name string, id pulumi.IDInput, state *RouterKeyChainState, opts ...pulumi.ResourceOption) (*RouterKeyChain, error) {
	var resource RouterKeyChain
	err := ctx.ReadResource("fortios:index/routerKeyChain:RouterKeyChain", name, id, state, &resource, opts...)
	if err != nil {
		return nil, err
	}
	return &resource, nil
}

// Input properties used for looking up and filtering RouterKeyChain resources.
type routerKeyChainState struct {
	// true or false, set this parameter to true when using dynamic forEach + toset to configure and sort sub-tables, please do not set this parameter when configuring static sub-tables.
	DynamicSortSubtable *string `pulumi:"dynamicSortSubtable"`
	// Configuration method to edit key settings. The structure of `key` block is documented below.
	Keys []RouterKeyChainKey `pulumi:"keys"`
	// Key-chain name.
	Name *string `pulumi:"name"`
	// Specifies the vdom to which the resource will be applied when the FortiGate unit is running in VDOM mode. Only one vdom can be specified. If you want to inherit the vdom configuration of the provider, please do not set this parameter.
	Vdomparam *string `pulumi:"vdomparam"`
}

type RouterKeyChainState struct {
	// true or false, set this parameter to true when using dynamic forEach + toset to configure and sort sub-tables, please do not set this parameter when configuring static sub-tables.
	DynamicSortSubtable pulumi.StringPtrInput
	// Configuration method to edit key settings. The structure of `key` block is documented below.
	Keys RouterKeyChainKeyArrayInput
	// Key-chain name.
	Name pulumi.StringPtrInput
	// Specifies the vdom to which the resource will be applied when the FortiGate unit is running in VDOM mode. Only one vdom can be specified. If you want to inherit the vdom configuration of the provider, please do not set this parameter.
	Vdomparam pulumi.StringPtrInput
}

func (RouterKeyChainState) ElementType() reflect.Type {
	return reflect.TypeOf((*routerKeyChainState)(nil)).Elem()
}

type routerKeyChainArgs struct {
	// true or false, set this parameter to true when using dynamic forEach + toset to configure and sort sub-tables, please do not set this parameter when configuring static sub-tables.
	DynamicSortSubtable *string `pulumi:"dynamicSortSubtable"`
	// Configuration method to edit key settings. The structure of `key` block is documented below.
	Keys []RouterKeyChainKey `pulumi:"keys"`
	// Key-chain name.
	Name *string `pulumi:"name"`
	// Specifies the vdom to which the resource will be applied when the FortiGate unit is running in VDOM mode. Only one vdom can be specified. If you want to inherit the vdom configuration of the provider, please do not set this parameter.
	Vdomparam *string `pulumi:"vdomparam"`
}

// The set of arguments for constructing a RouterKeyChain resource.
type RouterKeyChainArgs struct {
	// true or false, set this parameter to true when using dynamic forEach + toset to configure and sort sub-tables, please do not set this parameter when configuring static sub-tables.
	DynamicSortSubtable pulumi.StringPtrInput
	// Configuration method to edit key settings. The structure of `key` block is documented below.
	Keys RouterKeyChainKeyArrayInput
	// Key-chain name.
	Name pulumi.StringPtrInput
	// Specifies the vdom to which the resource will be applied when the FortiGate unit is running in VDOM mode. Only one vdom can be specified. If you want to inherit the vdom configuration of the provider, please do not set this parameter.
	Vdomparam pulumi.StringPtrInput
}

func (RouterKeyChainArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*routerKeyChainArgs)(nil)).Elem()
}

type RouterKeyChainInput interface {
	pulumi.Input

	ToRouterKeyChainOutput() RouterKeyChainOutput
	ToRouterKeyChainOutputWithContext(ctx context.Context) RouterKeyChainOutput
}

func (*RouterKeyChain) ElementType() reflect.Type {
	return reflect.TypeOf((**RouterKeyChain)(nil)).Elem()
}

func (i *RouterKeyChain) ToRouterKeyChainOutput() RouterKeyChainOutput {
	return i.ToRouterKeyChainOutputWithContext(context.Background())
}

func (i *RouterKeyChain) ToRouterKeyChainOutputWithContext(ctx context.Context) RouterKeyChainOutput {
	return pulumi.ToOutputWithContext(ctx, i).(RouterKeyChainOutput)
}

// RouterKeyChainArrayInput is an input type that accepts RouterKeyChainArray and RouterKeyChainArrayOutput values.
// You can construct a concrete instance of `RouterKeyChainArrayInput` via:
//
//          RouterKeyChainArray{ RouterKeyChainArgs{...} }
type RouterKeyChainArrayInput interface {
	pulumi.Input

	ToRouterKeyChainArrayOutput() RouterKeyChainArrayOutput
	ToRouterKeyChainArrayOutputWithContext(context.Context) RouterKeyChainArrayOutput
}

type RouterKeyChainArray []RouterKeyChainInput

func (RouterKeyChainArray) ElementType() reflect.Type {
	return reflect.TypeOf((*[]*RouterKeyChain)(nil)).Elem()
}

func (i RouterKeyChainArray) ToRouterKeyChainArrayOutput() RouterKeyChainArrayOutput {
	return i.ToRouterKeyChainArrayOutputWithContext(context.Background())
}

func (i RouterKeyChainArray) ToRouterKeyChainArrayOutputWithContext(ctx context.Context) RouterKeyChainArrayOutput {
	return pulumi.ToOutputWithContext(ctx, i).(RouterKeyChainArrayOutput)
}

// RouterKeyChainMapInput is an input type that accepts RouterKeyChainMap and RouterKeyChainMapOutput values.
// You can construct a concrete instance of `RouterKeyChainMapInput` via:
//
//          RouterKeyChainMap{ "key": RouterKeyChainArgs{...} }
type RouterKeyChainMapInput interface {
	pulumi.Input

	ToRouterKeyChainMapOutput() RouterKeyChainMapOutput
	ToRouterKeyChainMapOutputWithContext(context.Context) RouterKeyChainMapOutput
}

type RouterKeyChainMap map[string]RouterKeyChainInput

func (RouterKeyChainMap) ElementType() reflect.Type {
	return reflect.TypeOf((*map[string]*RouterKeyChain)(nil)).Elem()
}

func (i RouterKeyChainMap) ToRouterKeyChainMapOutput() RouterKeyChainMapOutput {
	return i.ToRouterKeyChainMapOutputWithContext(context.Background())
}

func (i RouterKeyChainMap) ToRouterKeyChainMapOutputWithContext(ctx context.Context) RouterKeyChainMapOutput {
	return pulumi.ToOutputWithContext(ctx, i).(RouterKeyChainMapOutput)
}

type RouterKeyChainOutput struct{ *pulumi.OutputState }

func (RouterKeyChainOutput) ElementType() reflect.Type {
	return reflect.TypeOf((**RouterKeyChain)(nil)).Elem()
}

func (o RouterKeyChainOutput) ToRouterKeyChainOutput() RouterKeyChainOutput {
	return o
}

func (o RouterKeyChainOutput) ToRouterKeyChainOutputWithContext(ctx context.Context) RouterKeyChainOutput {
	return o
}

type RouterKeyChainArrayOutput struct{ *pulumi.OutputState }

func (RouterKeyChainArrayOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*[]*RouterKeyChain)(nil)).Elem()
}

func (o RouterKeyChainArrayOutput) ToRouterKeyChainArrayOutput() RouterKeyChainArrayOutput {
	return o
}

func (o RouterKeyChainArrayOutput) ToRouterKeyChainArrayOutputWithContext(ctx context.Context) RouterKeyChainArrayOutput {
	return o
}

func (o RouterKeyChainArrayOutput) Index(i pulumi.IntInput) RouterKeyChainOutput {
	return pulumi.All(o, i).ApplyT(func(vs []interface{}) *RouterKeyChain {
		return vs[0].([]*RouterKeyChain)[vs[1].(int)]
	}).(RouterKeyChainOutput)
}

type RouterKeyChainMapOutput struct{ *pulumi.OutputState }

func (RouterKeyChainMapOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*map[string]*RouterKeyChain)(nil)).Elem()
}

func (o RouterKeyChainMapOutput) ToRouterKeyChainMapOutput() RouterKeyChainMapOutput {
	return o
}

func (o RouterKeyChainMapOutput) ToRouterKeyChainMapOutputWithContext(ctx context.Context) RouterKeyChainMapOutput {
	return o
}

func (o RouterKeyChainMapOutput) MapIndex(k pulumi.StringInput) RouterKeyChainOutput {
	return pulumi.All(o, k).ApplyT(func(vs []interface{}) *RouterKeyChain {
		return vs[0].(map[string]*RouterKeyChain)[vs[1].(string)]
	}).(RouterKeyChainOutput)
}

func init() {
	pulumi.RegisterInputType(reflect.TypeOf((*RouterKeyChainInput)(nil)).Elem(), &RouterKeyChain{})
	pulumi.RegisterInputType(reflect.TypeOf((*RouterKeyChainArrayInput)(nil)).Elem(), RouterKeyChainArray{})
	pulumi.RegisterInputType(reflect.TypeOf((*RouterKeyChainMapInput)(nil)).Elem(), RouterKeyChainMap{})
	pulumi.RegisterOutputType(RouterKeyChainOutput{})
	pulumi.RegisterOutputType(RouterKeyChainArrayOutput{})
	pulumi.RegisterOutputType(RouterKeyChainMapOutput{})
}
