// Code generated by the Pulumi Terraform Bridge (tfgen) Tool DO NOT EDIT.
// *** WARNING: Do not edit by hand unless you're certain you know what you are doing! ***

package fortios

import (
	"context"
	"reflect"

	"github.com/lubyou/pulumi-fortios/sdk/go/fortios/internal"
	"github.com/pulumi/pulumi/sdk/v3/go/pulumi"
	"github.com/pulumi/pulumi/sdk/v3/go/pulumix"
)

type SpamfilterOptions struct {
	pulumi.CustomResourceState

	DnsTimeout pulumi.IntOutput       `pulumi:"dnsTimeout"`
	Vdomparam  pulumi.StringPtrOutput `pulumi:"vdomparam"`
}

// NewSpamfilterOptions registers a new resource with the given unique name, arguments, and options.
func NewSpamfilterOptions(ctx *pulumi.Context,
	name string, args *SpamfilterOptionsArgs, opts ...pulumi.ResourceOption) (*SpamfilterOptions, error) {
	if args == nil {
		args = &SpamfilterOptionsArgs{}
	}

	opts = internal.PkgResourceDefaultOpts(opts)
	var resource SpamfilterOptions
	err := ctx.RegisterResource("fortios:index/spamfilterOptions:SpamfilterOptions", name, args, &resource, opts...)
	if err != nil {
		return nil, err
	}
	return &resource, nil
}

// GetSpamfilterOptions gets an existing SpamfilterOptions resource's state with the given name, ID, and optional
// state properties that are used to uniquely qualify the lookup (nil if not required).
func GetSpamfilterOptions(ctx *pulumi.Context,
	name string, id pulumi.IDInput, state *SpamfilterOptionsState, opts ...pulumi.ResourceOption) (*SpamfilterOptions, error) {
	var resource SpamfilterOptions
	err := ctx.ReadResource("fortios:index/spamfilterOptions:SpamfilterOptions", name, id, state, &resource, opts...)
	if err != nil {
		return nil, err
	}
	return &resource, nil
}

// Input properties used for looking up and filtering SpamfilterOptions resources.
type spamfilterOptionsState struct {
	DnsTimeout *int    `pulumi:"dnsTimeout"`
	Vdomparam  *string `pulumi:"vdomparam"`
}

type SpamfilterOptionsState struct {
	DnsTimeout pulumi.IntPtrInput
	Vdomparam  pulumi.StringPtrInput
}

func (SpamfilterOptionsState) ElementType() reflect.Type {
	return reflect.TypeOf((*spamfilterOptionsState)(nil)).Elem()
}

type spamfilterOptionsArgs struct {
	DnsTimeout *int    `pulumi:"dnsTimeout"`
	Vdomparam  *string `pulumi:"vdomparam"`
}

// The set of arguments for constructing a SpamfilterOptions resource.
type SpamfilterOptionsArgs struct {
	DnsTimeout pulumi.IntPtrInput
	Vdomparam  pulumi.StringPtrInput
}

func (SpamfilterOptionsArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*spamfilterOptionsArgs)(nil)).Elem()
}

type SpamfilterOptionsInput interface {
	pulumi.Input

	ToSpamfilterOptionsOutput() SpamfilterOptionsOutput
	ToSpamfilterOptionsOutputWithContext(ctx context.Context) SpamfilterOptionsOutput
}

func (*SpamfilterOptions) ElementType() reflect.Type {
	return reflect.TypeOf((**SpamfilterOptions)(nil)).Elem()
}

func (i *SpamfilterOptions) ToSpamfilterOptionsOutput() SpamfilterOptionsOutput {
	return i.ToSpamfilterOptionsOutputWithContext(context.Background())
}

func (i *SpamfilterOptions) ToSpamfilterOptionsOutputWithContext(ctx context.Context) SpamfilterOptionsOutput {
	return pulumi.ToOutputWithContext(ctx, i).(SpamfilterOptionsOutput)
}

func (i *SpamfilterOptions) ToOutput(ctx context.Context) pulumix.Output[*SpamfilterOptions] {
	return pulumix.Output[*SpamfilterOptions]{
		OutputState: i.ToSpamfilterOptionsOutputWithContext(ctx).OutputState,
	}
}

// SpamfilterOptionsArrayInput is an input type that accepts SpamfilterOptionsArray and SpamfilterOptionsArrayOutput values.
// You can construct a concrete instance of `SpamfilterOptionsArrayInput` via:
//
//	SpamfilterOptionsArray{ SpamfilterOptionsArgs{...} }
type SpamfilterOptionsArrayInput interface {
	pulumi.Input

	ToSpamfilterOptionsArrayOutput() SpamfilterOptionsArrayOutput
	ToSpamfilterOptionsArrayOutputWithContext(context.Context) SpamfilterOptionsArrayOutput
}

type SpamfilterOptionsArray []SpamfilterOptionsInput

func (SpamfilterOptionsArray) ElementType() reflect.Type {
	return reflect.TypeOf((*[]*SpamfilterOptions)(nil)).Elem()
}

func (i SpamfilterOptionsArray) ToSpamfilterOptionsArrayOutput() SpamfilterOptionsArrayOutput {
	return i.ToSpamfilterOptionsArrayOutputWithContext(context.Background())
}

func (i SpamfilterOptionsArray) ToSpamfilterOptionsArrayOutputWithContext(ctx context.Context) SpamfilterOptionsArrayOutput {
	return pulumi.ToOutputWithContext(ctx, i).(SpamfilterOptionsArrayOutput)
}

func (i SpamfilterOptionsArray) ToOutput(ctx context.Context) pulumix.Output[[]*SpamfilterOptions] {
	return pulumix.Output[[]*SpamfilterOptions]{
		OutputState: i.ToSpamfilterOptionsArrayOutputWithContext(ctx).OutputState,
	}
}

// SpamfilterOptionsMapInput is an input type that accepts SpamfilterOptionsMap and SpamfilterOptionsMapOutput values.
// You can construct a concrete instance of `SpamfilterOptionsMapInput` via:
//
//	SpamfilterOptionsMap{ "key": SpamfilterOptionsArgs{...} }
type SpamfilterOptionsMapInput interface {
	pulumi.Input

	ToSpamfilterOptionsMapOutput() SpamfilterOptionsMapOutput
	ToSpamfilterOptionsMapOutputWithContext(context.Context) SpamfilterOptionsMapOutput
}

type SpamfilterOptionsMap map[string]SpamfilterOptionsInput

func (SpamfilterOptionsMap) ElementType() reflect.Type {
	return reflect.TypeOf((*map[string]*SpamfilterOptions)(nil)).Elem()
}

func (i SpamfilterOptionsMap) ToSpamfilterOptionsMapOutput() SpamfilterOptionsMapOutput {
	return i.ToSpamfilterOptionsMapOutputWithContext(context.Background())
}

func (i SpamfilterOptionsMap) ToSpamfilterOptionsMapOutputWithContext(ctx context.Context) SpamfilterOptionsMapOutput {
	return pulumi.ToOutputWithContext(ctx, i).(SpamfilterOptionsMapOutput)
}

func (i SpamfilterOptionsMap) ToOutput(ctx context.Context) pulumix.Output[map[string]*SpamfilterOptions] {
	return pulumix.Output[map[string]*SpamfilterOptions]{
		OutputState: i.ToSpamfilterOptionsMapOutputWithContext(ctx).OutputState,
	}
}

type SpamfilterOptionsOutput struct{ *pulumi.OutputState }

func (SpamfilterOptionsOutput) ElementType() reflect.Type {
	return reflect.TypeOf((**SpamfilterOptions)(nil)).Elem()
}

func (o SpamfilterOptionsOutput) ToSpamfilterOptionsOutput() SpamfilterOptionsOutput {
	return o
}

func (o SpamfilterOptionsOutput) ToSpamfilterOptionsOutputWithContext(ctx context.Context) SpamfilterOptionsOutput {
	return o
}

func (o SpamfilterOptionsOutput) ToOutput(ctx context.Context) pulumix.Output[*SpamfilterOptions] {
	return pulumix.Output[*SpamfilterOptions]{
		OutputState: o.OutputState,
	}
}

func (o SpamfilterOptionsOutput) DnsTimeout() pulumi.IntOutput {
	return o.ApplyT(func(v *SpamfilterOptions) pulumi.IntOutput { return v.DnsTimeout }).(pulumi.IntOutput)
}

func (o SpamfilterOptionsOutput) Vdomparam() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *SpamfilterOptions) pulumi.StringPtrOutput { return v.Vdomparam }).(pulumi.StringPtrOutput)
}

type SpamfilterOptionsArrayOutput struct{ *pulumi.OutputState }

func (SpamfilterOptionsArrayOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*[]*SpamfilterOptions)(nil)).Elem()
}

func (o SpamfilterOptionsArrayOutput) ToSpamfilterOptionsArrayOutput() SpamfilterOptionsArrayOutput {
	return o
}

func (o SpamfilterOptionsArrayOutput) ToSpamfilterOptionsArrayOutputWithContext(ctx context.Context) SpamfilterOptionsArrayOutput {
	return o
}

func (o SpamfilterOptionsArrayOutput) ToOutput(ctx context.Context) pulumix.Output[[]*SpamfilterOptions] {
	return pulumix.Output[[]*SpamfilterOptions]{
		OutputState: o.OutputState,
	}
}

func (o SpamfilterOptionsArrayOutput) Index(i pulumi.IntInput) SpamfilterOptionsOutput {
	return pulumi.All(o, i).ApplyT(func(vs []interface{}) *SpamfilterOptions {
		return vs[0].([]*SpamfilterOptions)[vs[1].(int)]
	}).(SpamfilterOptionsOutput)
}

type SpamfilterOptionsMapOutput struct{ *pulumi.OutputState }

func (SpamfilterOptionsMapOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*map[string]*SpamfilterOptions)(nil)).Elem()
}

func (o SpamfilterOptionsMapOutput) ToSpamfilterOptionsMapOutput() SpamfilterOptionsMapOutput {
	return o
}

func (o SpamfilterOptionsMapOutput) ToSpamfilterOptionsMapOutputWithContext(ctx context.Context) SpamfilterOptionsMapOutput {
	return o
}

func (o SpamfilterOptionsMapOutput) ToOutput(ctx context.Context) pulumix.Output[map[string]*SpamfilterOptions] {
	return pulumix.Output[map[string]*SpamfilterOptions]{
		OutputState: o.OutputState,
	}
}

func (o SpamfilterOptionsMapOutput) MapIndex(k pulumi.StringInput) SpamfilterOptionsOutput {
	return pulumi.All(o, k).ApplyT(func(vs []interface{}) *SpamfilterOptions {
		return vs[0].(map[string]*SpamfilterOptions)[vs[1].(string)]
	}).(SpamfilterOptionsOutput)
}

func init() {
	pulumi.RegisterInputType(reflect.TypeOf((*SpamfilterOptionsInput)(nil)).Elem(), &SpamfilterOptions{})
	pulumi.RegisterInputType(reflect.TypeOf((*SpamfilterOptionsArrayInput)(nil)).Elem(), SpamfilterOptionsArray{})
	pulumi.RegisterInputType(reflect.TypeOf((*SpamfilterOptionsMapInput)(nil)).Elem(), SpamfilterOptionsMap{})
	pulumi.RegisterOutputType(SpamfilterOptionsOutput{})
	pulumi.RegisterOutputType(SpamfilterOptionsArrayOutput{})
	pulumi.RegisterOutputType(SpamfilterOptionsMapOutput{})
}
