// *** WARNING: this file was generated by the Pulumi Terraform Bridge (tfgen) Tool. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

package fortios

import (
	"context"
	"reflect"

	"github.com/pulumi/pulumi/sdk/v3/go/pulumi"
)

// Configure wireless controller event log filters.
//
// ## Import
//
// WirelessController Log can be imported using any of these accepted formats$ export "FORTIOS_IMPORT_TABLE"="true"
//
// ```sh
//  $ pulumi import fortios:index/wirelessControllerLog:WirelessControllerLog labelname WirelessControllerLog
// ```
//
//  $ unset "FORTIOS_IMPORT_TABLE"
type WirelessControllerLog struct {
	pulumi.CustomResourceState

	// Lowest severity level to log address group message. Valid values: `emergency`, `alert`, `critical`, `error`, `warning`, `notification`, `information`, `debug`.
	AddrgrpLog pulumi.StringOutput `pulumi:"addrgrpLog"`
	// Lowest severity level to log BLE detection message. Valid values: `emergency`, `alert`, `critical`, `error`, `warning`, `notification`, `information`, `debug`.
	BleLog pulumi.StringOutput `pulumi:"bleLog"`
	// Lowest severity level to log client load balancing message. Valid values: `emergency`, `alert`, `critical`, `error`, `warning`, `notification`, `information`, `debug`.
	ClbLog pulumi.StringOutput `pulumi:"clbLog"`
	// Lowest severity level to log DHCP starvation event message. Valid values: `emergency`, `alert`, `critical`, `error`, `warning`, `notification`, `information`, `debug`.
	DhcpStarvLog pulumi.StringOutput `pulumi:"dhcpStarvLog"`
	// Lowest severity level to log LED schedule event message. Valid values: `emergency`, `alert`, `critical`, `error`, `warning`, `notification`, `information`, `debug`.
	LedSchedLog pulumi.StringOutput `pulumi:"ledSchedLog"`
	// Lowest severity level to log radio event message. Valid values: `emergency`, `alert`, `critical`, `error`, `warning`, `notification`, `information`, `debug`.
	RadioEventLog pulumi.StringOutput `pulumi:"radioEventLog"`
	// Lowest severity level to log rogue AP event message. Valid values: `emergency`, `alert`, `critical`, `error`, `warning`, `notification`, `information`, `debug`.
	RogueEventLog pulumi.StringOutput `pulumi:"rogueEventLog"`
	// Lowest severity level to log station event message. Valid values: `emergency`, `alert`, `critical`, `error`, `warning`, `notification`, `information`, `debug`.
	StaEventLog pulumi.StringOutput `pulumi:"staEventLog"`
	// Lowest severity level to log station locate message. Valid values: `emergency`, `alert`, `critical`, `error`, `warning`, `notification`, `information`, `debug`.
	StaLocateLog pulumi.StringOutput `pulumi:"staLocateLog"`
	// Enable/disable wireless event logging. Valid values: `enable`, `disable`.
	Status pulumi.StringOutput `pulumi:"status"`
	// Specifies the vdom to which the resource will be applied when the FortiGate unit is running in VDOM mode. Only one vdom can be specified. If you want to inherit the vdom configuration of the provider, please do not set this parameter.
	Vdomparam pulumi.StringPtrOutput `pulumi:"vdomparam"`
	// Lowest severity level to log WIDS message. Valid values: `emergency`, `alert`, `critical`, `error`, `warning`, `notification`, `information`, `debug`.
	WidsLog pulumi.StringOutput `pulumi:"widsLog"`
	// Lowest severity level to log WTP event message. Valid values: `emergency`, `alert`, `critical`, `error`, `warning`, `notification`, `information`, `debug`.
	WtpEventLog pulumi.StringOutput `pulumi:"wtpEventLog"`
}

// NewWirelessControllerLog registers a new resource with the given unique name, arguments, and options.
func NewWirelessControllerLog(ctx *pulumi.Context,
	name string, args *WirelessControllerLogArgs, opts ...pulumi.ResourceOption) (*WirelessControllerLog, error) {
	if args == nil {
		args = &WirelessControllerLogArgs{}
	}

	var resource WirelessControllerLog
	err := ctx.RegisterResource("fortios:index/wirelessControllerLog:WirelessControllerLog", name, args, &resource, opts...)
	if err != nil {
		return nil, err
	}
	return &resource, nil
}

// GetWirelessControllerLog gets an existing WirelessControllerLog resource's state with the given name, ID, and optional
// state properties that are used to uniquely qualify the lookup (nil if not required).
func GetWirelessControllerLog(ctx *pulumi.Context,
	name string, id pulumi.IDInput, state *WirelessControllerLogState, opts ...pulumi.ResourceOption) (*WirelessControllerLog, error) {
	var resource WirelessControllerLog
	err := ctx.ReadResource("fortios:index/wirelessControllerLog:WirelessControllerLog", name, id, state, &resource, opts...)
	if err != nil {
		return nil, err
	}
	return &resource, nil
}

// Input properties used for looking up and filtering WirelessControllerLog resources.
type wirelessControllerLogState struct {
	// Lowest severity level to log address group message. Valid values: `emergency`, `alert`, `critical`, `error`, `warning`, `notification`, `information`, `debug`.
	AddrgrpLog *string `pulumi:"addrgrpLog"`
	// Lowest severity level to log BLE detection message. Valid values: `emergency`, `alert`, `critical`, `error`, `warning`, `notification`, `information`, `debug`.
	BleLog *string `pulumi:"bleLog"`
	// Lowest severity level to log client load balancing message. Valid values: `emergency`, `alert`, `critical`, `error`, `warning`, `notification`, `information`, `debug`.
	ClbLog *string `pulumi:"clbLog"`
	// Lowest severity level to log DHCP starvation event message. Valid values: `emergency`, `alert`, `critical`, `error`, `warning`, `notification`, `information`, `debug`.
	DhcpStarvLog *string `pulumi:"dhcpStarvLog"`
	// Lowest severity level to log LED schedule event message. Valid values: `emergency`, `alert`, `critical`, `error`, `warning`, `notification`, `information`, `debug`.
	LedSchedLog *string `pulumi:"ledSchedLog"`
	// Lowest severity level to log radio event message. Valid values: `emergency`, `alert`, `critical`, `error`, `warning`, `notification`, `information`, `debug`.
	RadioEventLog *string `pulumi:"radioEventLog"`
	// Lowest severity level to log rogue AP event message. Valid values: `emergency`, `alert`, `critical`, `error`, `warning`, `notification`, `information`, `debug`.
	RogueEventLog *string `pulumi:"rogueEventLog"`
	// Lowest severity level to log station event message. Valid values: `emergency`, `alert`, `critical`, `error`, `warning`, `notification`, `information`, `debug`.
	StaEventLog *string `pulumi:"staEventLog"`
	// Lowest severity level to log station locate message. Valid values: `emergency`, `alert`, `critical`, `error`, `warning`, `notification`, `information`, `debug`.
	StaLocateLog *string `pulumi:"staLocateLog"`
	// Enable/disable wireless event logging. Valid values: `enable`, `disable`.
	Status *string `pulumi:"status"`
	// Specifies the vdom to which the resource will be applied when the FortiGate unit is running in VDOM mode. Only one vdom can be specified. If you want to inherit the vdom configuration of the provider, please do not set this parameter.
	Vdomparam *string `pulumi:"vdomparam"`
	// Lowest severity level to log WIDS message. Valid values: `emergency`, `alert`, `critical`, `error`, `warning`, `notification`, `information`, `debug`.
	WidsLog *string `pulumi:"widsLog"`
	// Lowest severity level to log WTP event message. Valid values: `emergency`, `alert`, `critical`, `error`, `warning`, `notification`, `information`, `debug`.
	WtpEventLog *string `pulumi:"wtpEventLog"`
}

type WirelessControllerLogState struct {
	// Lowest severity level to log address group message. Valid values: `emergency`, `alert`, `critical`, `error`, `warning`, `notification`, `information`, `debug`.
	AddrgrpLog pulumi.StringPtrInput
	// Lowest severity level to log BLE detection message. Valid values: `emergency`, `alert`, `critical`, `error`, `warning`, `notification`, `information`, `debug`.
	BleLog pulumi.StringPtrInput
	// Lowest severity level to log client load balancing message. Valid values: `emergency`, `alert`, `critical`, `error`, `warning`, `notification`, `information`, `debug`.
	ClbLog pulumi.StringPtrInput
	// Lowest severity level to log DHCP starvation event message. Valid values: `emergency`, `alert`, `critical`, `error`, `warning`, `notification`, `information`, `debug`.
	DhcpStarvLog pulumi.StringPtrInput
	// Lowest severity level to log LED schedule event message. Valid values: `emergency`, `alert`, `critical`, `error`, `warning`, `notification`, `information`, `debug`.
	LedSchedLog pulumi.StringPtrInput
	// Lowest severity level to log radio event message. Valid values: `emergency`, `alert`, `critical`, `error`, `warning`, `notification`, `information`, `debug`.
	RadioEventLog pulumi.StringPtrInput
	// Lowest severity level to log rogue AP event message. Valid values: `emergency`, `alert`, `critical`, `error`, `warning`, `notification`, `information`, `debug`.
	RogueEventLog pulumi.StringPtrInput
	// Lowest severity level to log station event message. Valid values: `emergency`, `alert`, `critical`, `error`, `warning`, `notification`, `information`, `debug`.
	StaEventLog pulumi.StringPtrInput
	// Lowest severity level to log station locate message. Valid values: `emergency`, `alert`, `critical`, `error`, `warning`, `notification`, `information`, `debug`.
	StaLocateLog pulumi.StringPtrInput
	// Enable/disable wireless event logging. Valid values: `enable`, `disable`.
	Status pulumi.StringPtrInput
	// Specifies the vdom to which the resource will be applied when the FortiGate unit is running in VDOM mode. Only one vdom can be specified. If you want to inherit the vdom configuration of the provider, please do not set this parameter.
	Vdomparam pulumi.StringPtrInput
	// Lowest severity level to log WIDS message. Valid values: `emergency`, `alert`, `critical`, `error`, `warning`, `notification`, `information`, `debug`.
	WidsLog pulumi.StringPtrInput
	// Lowest severity level to log WTP event message. Valid values: `emergency`, `alert`, `critical`, `error`, `warning`, `notification`, `information`, `debug`.
	WtpEventLog pulumi.StringPtrInput
}

func (WirelessControllerLogState) ElementType() reflect.Type {
	return reflect.TypeOf((*wirelessControllerLogState)(nil)).Elem()
}

type wirelessControllerLogArgs struct {
	// Lowest severity level to log address group message. Valid values: `emergency`, `alert`, `critical`, `error`, `warning`, `notification`, `information`, `debug`.
	AddrgrpLog *string `pulumi:"addrgrpLog"`
	// Lowest severity level to log BLE detection message. Valid values: `emergency`, `alert`, `critical`, `error`, `warning`, `notification`, `information`, `debug`.
	BleLog *string `pulumi:"bleLog"`
	// Lowest severity level to log client load balancing message. Valid values: `emergency`, `alert`, `critical`, `error`, `warning`, `notification`, `information`, `debug`.
	ClbLog *string `pulumi:"clbLog"`
	// Lowest severity level to log DHCP starvation event message. Valid values: `emergency`, `alert`, `critical`, `error`, `warning`, `notification`, `information`, `debug`.
	DhcpStarvLog *string `pulumi:"dhcpStarvLog"`
	// Lowest severity level to log LED schedule event message. Valid values: `emergency`, `alert`, `critical`, `error`, `warning`, `notification`, `information`, `debug`.
	LedSchedLog *string `pulumi:"ledSchedLog"`
	// Lowest severity level to log radio event message. Valid values: `emergency`, `alert`, `critical`, `error`, `warning`, `notification`, `information`, `debug`.
	RadioEventLog *string `pulumi:"radioEventLog"`
	// Lowest severity level to log rogue AP event message. Valid values: `emergency`, `alert`, `critical`, `error`, `warning`, `notification`, `information`, `debug`.
	RogueEventLog *string `pulumi:"rogueEventLog"`
	// Lowest severity level to log station event message. Valid values: `emergency`, `alert`, `critical`, `error`, `warning`, `notification`, `information`, `debug`.
	StaEventLog *string `pulumi:"staEventLog"`
	// Lowest severity level to log station locate message. Valid values: `emergency`, `alert`, `critical`, `error`, `warning`, `notification`, `information`, `debug`.
	StaLocateLog *string `pulumi:"staLocateLog"`
	// Enable/disable wireless event logging. Valid values: `enable`, `disable`.
	Status *string `pulumi:"status"`
	// Specifies the vdom to which the resource will be applied when the FortiGate unit is running in VDOM mode. Only one vdom can be specified. If you want to inherit the vdom configuration of the provider, please do not set this parameter.
	Vdomparam *string `pulumi:"vdomparam"`
	// Lowest severity level to log WIDS message. Valid values: `emergency`, `alert`, `critical`, `error`, `warning`, `notification`, `information`, `debug`.
	WidsLog *string `pulumi:"widsLog"`
	// Lowest severity level to log WTP event message. Valid values: `emergency`, `alert`, `critical`, `error`, `warning`, `notification`, `information`, `debug`.
	WtpEventLog *string `pulumi:"wtpEventLog"`
}

// The set of arguments for constructing a WirelessControllerLog resource.
type WirelessControllerLogArgs struct {
	// Lowest severity level to log address group message. Valid values: `emergency`, `alert`, `critical`, `error`, `warning`, `notification`, `information`, `debug`.
	AddrgrpLog pulumi.StringPtrInput
	// Lowest severity level to log BLE detection message. Valid values: `emergency`, `alert`, `critical`, `error`, `warning`, `notification`, `information`, `debug`.
	BleLog pulumi.StringPtrInput
	// Lowest severity level to log client load balancing message. Valid values: `emergency`, `alert`, `critical`, `error`, `warning`, `notification`, `information`, `debug`.
	ClbLog pulumi.StringPtrInput
	// Lowest severity level to log DHCP starvation event message. Valid values: `emergency`, `alert`, `critical`, `error`, `warning`, `notification`, `information`, `debug`.
	DhcpStarvLog pulumi.StringPtrInput
	// Lowest severity level to log LED schedule event message. Valid values: `emergency`, `alert`, `critical`, `error`, `warning`, `notification`, `information`, `debug`.
	LedSchedLog pulumi.StringPtrInput
	// Lowest severity level to log radio event message. Valid values: `emergency`, `alert`, `critical`, `error`, `warning`, `notification`, `information`, `debug`.
	RadioEventLog pulumi.StringPtrInput
	// Lowest severity level to log rogue AP event message. Valid values: `emergency`, `alert`, `critical`, `error`, `warning`, `notification`, `information`, `debug`.
	RogueEventLog pulumi.StringPtrInput
	// Lowest severity level to log station event message. Valid values: `emergency`, `alert`, `critical`, `error`, `warning`, `notification`, `information`, `debug`.
	StaEventLog pulumi.StringPtrInput
	// Lowest severity level to log station locate message. Valid values: `emergency`, `alert`, `critical`, `error`, `warning`, `notification`, `information`, `debug`.
	StaLocateLog pulumi.StringPtrInput
	// Enable/disable wireless event logging. Valid values: `enable`, `disable`.
	Status pulumi.StringPtrInput
	// Specifies the vdom to which the resource will be applied when the FortiGate unit is running in VDOM mode. Only one vdom can be specified. If you want to inherit the vdom configuration of the provider, please do not set this parameter.
	Vdomparam pulumi.StringPtrInput
	// Lowest severity level to log WIDS message. Valid values: `emergency`, `alert`, `critical`, `error`, `warning`, `notification`, `information`, `debug`.
	WidsLog pulumi.StringPtrInput
	// Lowest severity level to log WTP event message. Valid values: `emergency`, `alert`, `critical`, `error`, `warning`, `notification`, `information`, `debug`.
	WtpEventLog pulumi.StringPtrInput
}

func (WirelessControllerLogArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*wirelessControllerLogArgs)(nil)).Elem()
}

type WirelessControllerLogInput interface {
	pulumi.Input

	ToWirelessControllerLogOutput() WirelessControllerLogOutput
	ToWirelessControllerLogOutputWithContext(ctx context.Context) WirelessControllerLogOutput
}

func (*WirelessControllerLog) ElementType() reflect.Type {
	return reflect.TypeOf((*WirelessControllerLog)(nil))
}

func (i *WirelessControllerLog) ToWirelessControllerLogOutput() WirelessControllerLogOutput {
	return i.ToWirelessControllerLogOutputWithContext(context.Background())
}

func (i *WirelessControllerLog) ToWirelessControllerLogOutputWithContext(ctx context.Context) WirelessControllerLogOutput {
	return pulumi.ToOutputWithContext(ctx, i).(WirelessControllerLogOutput)
}

func (i *WirelessControllerLog) ToWirelessControllerLogPtrOutput() WirelessControllerLogPtrOutput {
	return i.ToWirelessControllerLogPtrOutputWithContext(context.Background())
}

func (i *WirelessControllerLog) ToWirelessControllerLogPtrOutputWithContext(ctx context.Context) WirelessControllerLogPtrOutput {
	return pulumi.ToOutputWithContext(ctx, i).(WirelessControllerLogPtrOutput)
}

type WirelessControllerLogPtrInput interface {
	pulumi.Input

	ToWirelessControllerLogPtrOutput() WirelessControllerLogPtrOutput
	ToWirelessControllerLogPtrOutputWithContext(ctx context.Context) WirelessControllerLogPtrOutput
}

type wirelessControllerLogPtrType WirelessControllerLogArgs

func (*wirelessControllerLogPtrType) ElementType() reflect.Type {
	return reflect.TypeOf((**WirelessControllerLog)(nil))
}

func (i *wirelessControllerLogPtrType) ToWirelessControllerLogPtrOutput() WirelessControllerLogPtrOutput {
	return i.ToWirelessControllerLogPtrOutputWithContext(context.Background())
}

func (i *wirelessControllerLogPtrType) ToWirelessControllerLogPtrOutputWithContext(ctx context.Context) WirelessControllerLogPtrOutput {
	return pulumi.ToOutputWithContext(ctx, i).(WirelessControllerLogPtrOutput)
}

// WirelessControllerLogArrayInput is an input type that accepts WirelessControllerLogArray and WirelessControllerLogArrayOutput values.
// You can construct a concrete instance of `WirelessControllerLogArrayInput` via:
//
//          WirelessControllerLogArray{ WirelessControllerLogArgs{...} }
type WirelessControllerLogArrayInput interface {
	pulumi.Input

	ToWirelessControllerLogArrayOutput() WirelessControllerLogArrayOutput
	ToWirelessControllerLogArrayOutputWithContext(context.Context) WirelessControllerLogArrayOutput
}

type WirelessControllerLogArray []WirelessControllerLogInput

func (WirelessControllerLogArray) ElementType() reflect.Type {
	return reflect.TypeOf(([]*WirelessControllerLog)(nil))
}

func (i WirelessControllerLogArray) ToWirelessControllerLogArrayOutput() WirelessControllerLogArrayOutput {
	return i.ToWirelessControllerLogArrayOutputWithContext(context.Background())
}

func (i WirelessControllerLogArray) ToWirelessControllerLogArrayOutputWithContext(ctx context.Context) WirelessControllerLogArrayOutput {
	return pulumi.ToOutputWithContext(ctx, i).(WirelessControllerLogArrayOutput)
}

// WirelessControllerLogMapInput is an input type that accepts WirelessControllerLogMap and WirelessControllerLogMapOutput values.
// You can construct a concrete instance of `WirelessControllerLogMapInput` via:
//
//          WirelessControllerLogMap{ "key": WirelessControllerLogArgs{...} }
type WirelessControllerLogMapInput interface {
	pulumi.Input

	ToWirelessControllerLogMapOutput() WirelessControllerLogMapOutput
	ToWirelessControllerLogMapOutputWithContext(context.Context) WirelessControllerLogMapOutput
}

type WirelessControllerLogMap map[string]WirelessControllerLogInput

func (WirelessControllerLogMap) ElementType() reflect.Type {
	return reflect.TypeOf((map[string]*WirelessControllerLog)(nil))
}

func (i WirelessControllerLogMap) ToWirelessControllerLogMapOutput() WirelessControllerLogMapOutput {
	return i.ToWirelessControllerLogMapOutputWithContext(context.Background())
}

func (i WirelessControllerLogMap) ToWirelessControllerLogMapOutputWithContext(ctx context.Context) WirelessControllerLogMapOutput {
	return pulumi.ToOutputWithContext(ctx, i).(WirelessControllerLogMapOutput)
}

type WirelessControllerLogOutput struct {
	*pulumi.OutputState
}

func (WirelessControllerLogOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*WirelessControllerLog)(nil))
}

func (o WirelessControllerLogOutput) ToWirelessControllerLogOutput() WirelessControllerLogOutput {
	return o
}

func (o WirelessControllerLogOutput) ToWirelessControllerLogOutputWithContext(ctx context.Context) WirelessControllerLogOutput {
	return o
}

func (o WirelessControllerLogOutput) ToWirelessControllerLogPtrOutput() WirelessControllerLogPtrOutput {
	return o.ToWirelessControllerLogPtrOutputWithContext(context.Background())
}

func (o WirelessControllerLogOutput) ToWirelessControllerLogPtrOutputWithContext(ctx context.Context) WirelessControllerLogPtrOutput {
	return o.ApplyT(func(v WirelessControllerLog) *WirelessControllerLog {
		return &v
	}).(WirelessControllerLogPtrOutput)
}

type WirelessControllerLogPtrOutput struct {
	*pulumi.OutputState
}

func (WirelessControllerLogPtrOutput) ElementType() reflect.Type {
	return reflect.TypeOf((**WirelessControllerLog)(nil))
}

func (o WirelessControllerLogPtrOutput) ToWirelessControllerLogPtrOutput() WirelessControllerLogPtrOutput {
	return o
}

func (o WirelessControllerLogPtrOutput) ToWirelessControllerLogPtrOutputWithContext(ctx context.Context) WirelessControllerLogPtrOutput {
	return o
}

type WirelessControllerLogArrayOutput struct{ *pulumi.OutputState }

func (WirelessControllerLogArrayOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*[]WirelessControllerLog)(nil))
}

func (o WirelessControllerLogArrayOutput) ToWirelessControllerLogArrayOutput() WirelessControllerLogArrayOutput {
	return o
}

func (o WirelessControllerLogArrayOutput) ToWirelessControllerLogArrayOutputWithContext(ctx context.Context) WirelessControllerLogArrayOutput {
	return o
}

func (o WirelessControllerLogArrayOutput) Index(i pulumi.IntInput) WirelessControllerLogOutput {
	return pulumi.All(o, i).ApplyT(func(vs []interface{}) WirelessControllerLog {
		return vs[0].([]WirelessControllerLog)[vs[1].(int)]
	}).(WirelessControllerLogOutput)
}

type WirelessControllerLogMapOutput struct{ *pulumi.OutputState }

func (WirelessControllerLogMapOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*map[string]WirelessControllerLog)(nil))
}

func (o WirelessControllerLogMapOutput) ToWirelessControllerLogMapOutput() WirelessControllerLogMapOutput {
	return o
}

func (o WirelessControllerLogMapOutput) ToWirelessControllerLogMapOutputWithContext(ctx context.Context) WirelessControllerLogMapOutput {
	return o
}

func (o WirelessControllerLogMapOutput) MapIndex(k pulumi.StringInput) WirelessControllerLogOutput {
	return pulumi.All(o, k).ApplyT(func(vs []interface{}) WirelessControllerLog {
		return vs[0].(map[string]WirelessControllerLog)[vs[1].(string)]
	}).(WirelessControllerLogOutput)
}

func init() {
	pulumi.RegisterOutputType(WirelessControllerLogOutput{})
	pulumi.RegisterOutputType(WirelessControllerLogPtrOutput{})
	pulumi.RegisterOutputType(WirelessControllerLogArrayOutput{})
	pulumi.RegisterOutputType(WirelessControllerLogMapOutput{})
}
