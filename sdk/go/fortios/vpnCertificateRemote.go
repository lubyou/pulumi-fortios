// Code generated by the Pulumi Terraform Bridge (tfgen) Tool DO NOT EDIT.
// *** WARNING: Do not edit by hand unless you're certain you know what you are doing! ***

package fortios

import (
	"context"
	"reflect"

	"github.com/lubyou/pulumi-fortios/sdk/go/fortios/internal"
	"github.com/pulumi/pulumi/sdk/v3/go/pulumi"
	"github.com/pulumi/pulumi/sdk/v3/go/pulumix"
)

type VpnCertificateRemote struct {
	pulumi.CustomResourceState

	Name      pulumi.StringOutput    `pulumi:"name"`
	Range     pulumi.StringOutput    `pulumi:"range"`
	Remote    pulumi.StringOutput    `pulumi:"remote"`
	Source    pulumi.StringOutput    `pulumi:"source"`
	Vdomparam pulumi.StringPtrOutput `pulumi:"vdomparam"`
}

// NewVpnCertificateRemote registers a new resource with the given unique name, arguments, and options.
func NewVpnCertificateRemote(ctx *pulumi.Context,
	name string, args *VpnCertificateRemoteArgs, opts ...pulumi.ResourceOption) (*VpnCertificateRemote, error) {
	if args == nil {
		args = &VpnCertificateRemoteArgs{}
	}

	opts = internal.PkgResourceDefaultOpts(opts)
	var resource VpnCertificateRemote
	err := ctx.RegisterResource("fortios:index/vpnCertificateRemote:VpnCertificateRemote", name, args, &resource, opts...)
	if err != nil {
		return nil, err
	}
	return &resource, nil
}

// GetVpnCertificateRemote gets an existing VpnCertificateRemote resource's state with the given name, ID, and optional
// state properties that are used to uniquely qualify the lookup (nil if not required).
func GetVpnCertificateRemote(ctx *pulumi.Context,
	name string, id pulumi.IDInput, state *VpnCertificateRemoteState, opts ...pulumi.ResourceOption) (*VpnCertificateRemote, error) {
	var resource VpnCertificateRemote
	err := ctx.ReadResource("fortios:index/vpnCertificateRemote:VpnCertificateRemote", name, id, state, &resource, opts...)
	if err != nil {
		return nil, err
	}
	return &resource, nil
}

// Input properties used for looking up and filtering VpnCertificateRemote resources.
type vpnCertificateRemoteState struct {
	Name      *string `pulumi:"name"`
	Range     *string `pulumi:"range"`
	Remote    *string `pulumi:"remote"`
	Source    *string `pulumi:"source"`
	Vdomparam *string `pulumi:"vdomparam"`
}

type VpnCertificateRemoteState struct {
	Name      pulumi.StringPtrInput
	Range     pulumi.StringPtrInput
	Remote    pulumi.StringPtrInput
	Source    pulumi.StringPtrInput
	Vdomparam pulumi.StringPtrInput
}

func (VpnCertificateRemoteState) ElementType() reflect.Type {
	return reflect.TypeOf((*vpnCertificateRemoteState)(nil)).Elem()
}

type vpnCertificateRemoteArgs struct {
	Name      *string `pulumi:"name"`
	Range     *string `pulumi:"range"`
	Remote    *string `pulumi:"remote"`
	Source    *string `pulumi:"source"`
	Vdomparam *string `pulumi:"vdomparam"`
}

// The set of arguments for constructing a VpnCertificateRemote resource.
type VpnCertificateRemoteArgs struct {
	Name      pulumi.StringPtrInput
	Range     pulumi.StringPtrInput
	Remote    pulumi.StringPtrInput
	Source    pulumi.StringPtrInput
	Vdomparam pulumi.StringPtrInput
}

func (VpnCertificateRemoteArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*vpnCertificateRemoteArgs)(nil)).Elem()
}

type VpnCertificateRemoteInput interface {
	pulumi.Input

	ToVpnCertificateRemoteOutput() VpnCertificateRemoteOutput
	ToVpnCertificateRemoteOutputWithContext(ctx context.Context) VpnCertificateRemoteOutput
}

func (*VpnCertificateRemote) ElementType() reflect.Type {
	return reflect.TypeOf((**VpnCertificateRemote)(nil)).Elem()
}

func (i *VpnCertificateRemote) ToVpnCertificateRemoteOutput() VpnCertificateRemoteOutput {
	return i.ToVpnCertificateRemoteOutputWithContext(context.Background())
}

func (i *VpnCertificateRemote) ToVpnCertificateRemoteOutputWithContext(ctx context.Context) VpnCertificateRemoteOutput {
	return pulumi.ToOutputWithContext(ctx, i).(VpnCertificateRemoteOutput)
}

func (i *VpnCertificateRemote) ToOutput(ctx context.Context) pulumix.Output[*VpnCertificateRemote] {
	return pulumix.Output[*VpnCertificateRemote]{
		OutputState: i.ToVpnCertificateRemoteOutputWithContext(ctx).OutputState,
	}
}

// VpnCertificateRemoteArrayInput is an input type that accepts VpnCertificateRemoteArray and VpnCertificateRemoteArrayOutput values.
// You can construct a concrete instance of `VpnCertificateRemoteArrayInput` via:
//
//	VpnCertificateRemoteArray{ VpnCertificateRemoteArgs{...} }
type VpnCertificateRemoteArrayInput interface {
	pulumi.Input

	ToVpnCertificateRemoteArrayOutput() VpnCertificateRemoteArrayOutput
	ToVpnCertificateRemoteArrayOutputWithContext(context.Context) VpnCertificateRemoteArrayOutput
}

type VpnCertificateRemoteArray []VpnCertificateRemoteInput

func (VpnCertificateRemoteArray) ElementType() reflect.Type {
	return reflect.TypeOf((*[]*VpnCertificateRemote)(nil)).Elem()
}

func (i VpnCertificateRemoteArray) ToVpnCertificateRemoteArrayOutput() VpnCertificateRemoteArrayOutput {
	return i.ToVpnCertificateRemoteArrayOutputWithContext(context.Background())
}

func (i VpnCertificateRemoteArray) ToVpnCertificateRemoteArrayOutputWithContext(ctx context.Context) VpnCertificateRemoteArrayOutput {
	return pulumi.ToOutputWithContext(ctx, i).(VpnCertificateRemoteArrayOutput)
}

func (i VpnCertificateRemoteArray) ToOutput(ctx context.Context) pulumix.Output[[]*VpnCertificateRemote] {
	return pulumix.Output[[]*VpnCertificateRemote]{
		OutputState: i.ToVpnCertificateRemoteArrayOutputWithContext(ctx).OutputState,
	}
}

// VpnCertificateRemoteMapInput is an input type that accepts VpnCertificateRemoteMap and VpnCertificateRemoteMapOutput values.
// You can construct a concrete instance of `VpnCertificateRemoteMapInput` via:
//
//	VpnCertificateRemoteMap{ "key": VpnCertificateRemoteArgs{...} }
type VpnCertificateRemoteMapInput interface {
	pulumi.Input

	ToVpnCertificateRemoteMapOutput() VpnCertificateRemoteMapOutput
	ToVpnCertificateRemoteMapOutputWithContext(context.Context) VpnCertificateRemoteMapOutput
}

type VpnCertificateRemoteMap map[string]VpnCertificateRemoteInput

func (VpnCertificateRemoteMap) ElementType() reflect.Type {
	return reflect.TypeOf((*map[string]*VpnCertificateRemote)(nil)).Elem()
}

func (i VpnCertificateRemoteMap) ToVpnCertificateRemoteMapOutput() VpnCertificateRemoteMapOutput {
	return i.ToVpnCertificateRemoteMapOutputWithContext(context.Background())
}

func (i VpnCertificateRemoteMap) ToVpnCertificateRemoteMapOutputWithContext(ctx context.Context) VpnCertificateRemoteMapOutput {
	return pulumi.ToOutputWithContext(ctx, i).(VpnCertificateRemoteMapOutput)
}

func (i VpnCertificateRemoteMap) ToOutput(ctx context.Context) pulumix.Output[map[string]*VpnCertificateRemote] {
	return pulumix.Output[map[string]*VpnCertificateRemote]{
		OutputState: i.ToVpnCertificateRemoteMapOutputWithContext(ctx).OutputState,
	}
}

type VpnCertificateRemoteOutput struct{ *pulumi.OutputState }

func (VpnCertificateRemoteOutput) ElementType() reflect.Type {
	return reflect.TypeOf((**VpnCertificateRemote)(nil)).Elem()
}

func (o VpnCertificateRemoteOutput) ToVpnCertificateRemoteOutput() VpnCertificateRemoteOutput {
	return o
}

func (o VpnCertificateRemoteOutput) ToVpnCertificateRemoteOutputWithContext(ctx context.Context) VpnCertificateRemoteOutput {
	return o
}

func (o VpnCertificateRemoteOutput) ToOutput(ctx context.Context) pulumix.Output[*VpnCertificateRemote] {
	return pulumix.Output[*VpnCertificateRemote]{
		OutputState: o.OutputState,
	}
}

func (o VpnCertificateRemoteOutput) Name() pulumi.StringOutput {
	return o.ApplyT(func(v *VpnCertificateRemote) pulumi.StringOutput { return v.Name }).(pulumi.StringOutput)
}

func (o VpnCertificateRemoteOutput) Range() pulumi.StringOutput {
	return o.ApplyT(func(v *VpnCertificateRemote) pulumi.StringOutput { return v.Range }).(pulumi.StringOutput)
}

func (o VpnCertificateRemoteOutput) Remote() pulumi.StringOutput {
	return o.ApplyT(func(v *VpnCertificateRemote) pulumi.StringOutput { return v.Remote }).(pulumi.StringOutput)
}

func (o VpnCertificateRemoteOutput) Source() pulumi.StringOutput {
	return o.ApplyT(func(v *VpnCertificateRemote) pulumi.StringOutput { return v.Source }).(pulumi.StringOutput)
}

func (o VpnCertificateRemoteOutput) Vdomparam() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *VpnCertificateRemote) pulumi.StringPtrOutput { return v.Vdomparam }).(pulumi.StringPtrOutput)
}

type VpnCertificateRemoteArrayOutput struct{ *pulumi.OutputState }

func (VpnCertificateRemoteArrayOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*[]*VpnCertificateRemote)(nil)).Elem()
}

func (o VpnCertificateRemoteArrayOutput) ToVpnCertificateRemoteArrayOutput() VpnCertificateRemoteArrayOutput {
	return o
}

func (o VpnCertificateRemoteArrayOutput) ToVpnCertificateRemoteArrayOutputWithContext(ctx context.Context) VpnCertificateRemoteArrayOutput {
	return o
}

func (o VpnCertificateRemoteArrayOutput) ToOutput(ctx context.Context) pulumix.Output[[]*VpnCertificateRemote] {
	return pulumix.Output[[]*VpnCertificateRemote]{
		OutputState: o.OutputState,
	}
}

func (o VpnCertificateRemoteArrayOutput) Index(i pulumi.IntInput) VpnCertificateRemoteOutput {
	return pulumi.All(o, i).ApplyT(func(vs []interface{}) *VpnCertificateRemote {
		return vs[0].([]*VpnCertificateRemote)[vs[1].(int)]
	}).(VpnCertificateRemoteOutput)
}

type VpnCertificateRemoteMapOutput struct{ *pulumi.OutputState }

func (VpnCertificateRemoteMapOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*map[string]*VpnCertificateRemote)(nil)).Elem()
}

func (o VpnCertificateRemoteMapOutput) ToVpnCertificateRemoteMapOutput() VpnCertificateRemoteMapOutput {
	return o
}

func (o VpnCertificateRemoteMapOutput) ToVpnCertificateRemoteMapOutputWithContext(ctx context.Context) VpnCertificateRemoteMapOutput {
	return o
}

func (o VpnCertificateRemoteMapOutput) ToOutput(ctx context.Context) pulumix.Output[map[string]*VpnCertificateRemote] {
	return pulumix.Output[map[string]*VpnCertificateRemote]{
		OutputState: o.OutputState,
	}
}

func (o VpnCertificateRemoteMapOutput) MapIndex(k pulumi.StringInput) VpnCertificateRemoteOutput {
	return pulumi.All(o, k).ApplyT(func(vs []interface{}) *VpnCertificateRemote {
		return vs[0].(map[string]*VpnCertificateRemote)[vs[1].(string)]
	}).(VpnCertificateRemoteOutput)
}

func init() {
	pulumi.RegisterInputType(reflect.TypeOf((*VpnCertificateRemoteInput)(nil)).Elem(), &VpnCertificateRemote{})
	pulumi.RegisterInputType(reflect.TypeOf((*VpnCertificateRemoteArrayInput)(nil)).Elem(), VpnCertificateRemoteArray{})
	pulumi.RegisterInputType(reflect.TypeOf((*VpnCertificateRemoteMapInput)(nil)).Elem(), VpnCertificateRemoteMap{})
	pulumi.RegisterOutputType(VpnCertificateRemoteOutput{})
	pulumi.RegisterOutputType(VpnCertificateRemoteArrayOutput{})
	pulumi.RegisterOutputType(VpnCertificateRemoteMapOutput{})
}
