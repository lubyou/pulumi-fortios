// Code generated by the Pulumi Terraform Bridge (tfgen) Tool DO NOT EDIT.
// *** WARNING: Do not edit by hand unless you're certain you know what you are doing! ***

package fortios

import (
	"context"
	"reflect"

	"github.com/pulumi/pulumi/sdk/v3/go/pulumi"
)

// Configure zones to group two or more interfaces. When a zone is created you can configure policies for the zone instead of individual interfaces in the zone.
//
// ## Example Usage
//
// ```go
// package main
//
// import (
// 	"github.com/lubyou/pulumi-fortios/sdk/go/fortios"
// 	"github.com/pulumi/pulumi/sdk/v3/go/pulumi"
// )
//
// func main() {
// 	pulumi.Run(func(ctx *pulumi.Context) error {
// 		_, err := fortios.NewSystemZone(ctx, "trname", &fortios.SystemZoneArgs{
// 			Intrazone: pulumi.String("allow"),
// 		})
// 		if err != nil {
// 			return err
// 		}
// 		return nil
// 	})
// }
// ```
//
// ## Import
//
// System Zone can be imported using any of these accepted formats
//
// ```sh
//  $ pulumi import fortios:index/systemZone:SystemZone labelname {{name}}
// ```
//
//  If you do not want to import arguments of block$ export "FORTIOS_IMPORT_TABLE"="false"
//
// ```sh
//  $ pulumi import fortios:index/systemZone:SystemZone labelname {{name}}
// ```
//
//  $ unset "FORTIOS_IMPORT_TABLE"
type SystemZone struct {
	pulumi.CustomResourceState

	// Description.
	Description pulumi.StringOutput `pulumi:"description"`
	// true or false, set this parameter to true when using dynamic forEach + toset to configure and sort sub-tables, please do not set this parameter when configuring static sub-tables.
	DynamicSortSubtable pulumi.StringPtrOutput `pulumi:"dynamicSortSubtable"`
	// Add interfaces to this zone. Interfaces must not be assigned to another zone or have firewall policies defined. The structure of `interface` block is documented below.
	Interfaces SystemZoneInterfaceArrayOutput `pulumi:"interfaces"`
	// Allow or deny traffic routing between different interfaces in the same zone (default = deny). Valid values: `allow`, `deny`.
	Intrazone pulumi.StringOutput `pulumi:"intrazone"`
	// Tag name.
	Name pulumi.StringOutput `pulumi:"name"`
	// Config object tagging. The structure of `tagging` block is documented below.
	Taggings SystemZoneTaggingArrayOutput `pulumi:"taggings"`
	// Specifies the vdom to which the resource will be applied when the FortiGate unit is running in VDOM mode. Only one vdom can be specified. If you want to inherit the vdom configuration of the provider, please do not set this parameter.
	Vdomparam pulumi.StringPtrOutput `pulumi:"vdomparam"`
}

// NewSystemZone registers a new resource with the given unique name, arguments, and options.
func NewSystemZone(ctx *pulumi.Context,
	name string, args *SystemZoneArgs, opts ...pulumi.ResourceOption) (*SystemZone, error) {
	if args == nil {
		args = &SystemZoneArgs{}
	}

	opts = pkgResourceDefaultOpts(opts)
	var resource SystemZone
	err := ctx.RegisterResource("fortios:index/systemZone:SystemZone", name, args, &resource, opts...)
	if err != nil {
		return nil, err
	}
	return &resource, nil
}

// GetSystemZone gets an existing SystemZone resource's state with the given name, ID, and optional
// state properties that are used to uniquely qualify the lookup (nil if not required).
func GetSystemZone(ctx *pulumi.Context,
	name string, id pulumi.IDInput, state *SystemZoneState, opts ...pulumi.ResourceOption) (*SystemZone, error) {
	var resource SystemZone
	err := ctx.ReadResource("fortios:index/systemZone:SystemZone", name, id, state, &resource, opts...)
	if err != nil {
		return nil, err
	}
	return &resource, nil
}

// Input properties used for looking up and filtering SystemZone resources.
type systemZoneState struct {
	// Description.
	Description *string `pulumi:"description"`
	// true or false, set this parameter to true when using dynamic forEach + toset to configure and sort sub-tables, please do not set this parameter when configuring static sub-tables.
	DynamicSortSubtable *string `pulumi:"dynamicSortSubtable"`
	// Add interfaces to this zone. Interfaces must not be assigned to another zone or have firewall policies defined. The structure of `interface` block is documented below.
	Interfaces []SystemZoneInterface `pulumi:"interfaces"`
	// Allow or deny traffic routing between different interfaces in the same zone (default = deny). Valid values: `allow`, `deny`.
	Intrazone *string `pulumi:"intrazone"`
	// Tag name.
	Name *string `pulumi:"name"`
	// Config object tagging. The structure of `tagging` block is documented below.
	Taggings []SystemZoneTagging `pulumi:"taggings"`
	// Specifies the vdom to which the resource will be applied when the FortiGate unit is running in VDOM mode. Only one vdom can be specified. If you want to inherit the vdom configuration of the provider, please do not set this parameter.
	Vdomparam *string `pulumi:"vdomparam"`
}

type SystemZoneState struct {
	// Description.
	Description pulumi.StringPtrInput
	// true or false, set this parameter to true when using dynamic forEach + toset to configure and sort sub-tables, please do not set this parameter when configuring static sub-tables.
	DynamicSortSubtable pulumi.StringPtrInput
	// Add interfaces to this zone. Interfaces must not be assigned to another zone or have firewall policies defined. The structure of `interface` block is documented below.
	Interfaces SystemZoneInterfaceArrayInput
	// Allow or deny traffic routing between different interfaces in the same zone (default = deny). Valid values: `allow`, `deny`.
	Intrazone pulumi.StringPtrInput
	// Tag name.
	Name pulumi.StringPtrInput
	// Config object tagging. The structure of `tagging` block is documented below.
	Taggings SystemZoneTaggingArrayInput
	// Specifies the vdom to which the resource will be applied when the FortiGate unit is running in VDOM mode. Only one vdom can be specified. If you want to inherit the vdom configuration of the provider, please do not set this parameter.
	Vdomparam pulumi.StringPtrInput
}

func (SystemZoneState) ElementType() reflect.Type {
	return reflect.TypeOf((*systemZoneState)(nil)).Elem()
}

type systemZoneArgs struct {
	// Description.
	Description *string `pulumi:"description"`
	// true or false, set this parameter to true when using dynamic forEach + toset to configure and sort sub-tables, please do not set this parameter when configuring static sub-tables.
	DynamicSortSubtable *string `pulumi:"dynamicSortSubtable"`
	// Add interfaces to this zone. Interfaces must not be assigned to another zone or have firewall policies defined. The structure of `interface` block is documented below.
	Interfaces []SystemZoneInterface `pulumi:"interfaces"`
	// Allow or deny traffic routing between different interfaces in the same zone (default = deny). Valid values: `allow`, `deny`.
	Intrazone *string `pulumi:"intrazone"`
	// Tag name.
	Name *string `pulumi:"name"`
	// Config object tagging. The structure of `tagging` block is documented below.
	Taggings []SystemZoneTagging `pulumi:"taggings"`
	// Specifies the vdom to which the resource will be applied when the FortiGate unit is running in VDOM mode. Only one vdom can be specified. If you want to inherit the vdom configuration of the provider, please do not set this parameter.
	Vdomparam *string `pulumi:"vdomparam"`
}

// The set of arguments for constructing a SystemZone resource.
type SystemZoneArgs struct {
	// Description.
	Description pulumi.StringPtrInput
	// true or false, set this parameter to true when using dynamic forEach + toset to configure and sort sub-tables, please do not set this parameter when configuring static sub-tables.
	DynamicSortSubtable pulumi.StringPtrInput
	// Add interfaces to this zone. Interfaces must not be assigned to another zone or have firewall policies defined. The structure of `interface` block is documented below.
	Interfaces SystemZoneInterfaceArrayInput
	// Allow or deny traffic routing between different interfaces in the same zone (default = deny). Valid values: `allow`, `deny`.
	Intrazone pulumi.StringPtrInput
	// Tag name.
	Name pulumi.StringPtrInput
	// Config object tagging. The structure of `tagging` block is documented below.
	Taggings SystemZoneTaggingArrayInput
	// Specifies the vdom to which the resource will be applied when the FortiGate unit is running in VDOM mode. Only one vdom can be specified. If you want to inherit the vdom configuration of the provider, please do not set this parameter.
	Vdomparam pulumi.StringPtrInput
}

func (SystemZoneArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*systemZoneArgs)(nil)).Elem()
}

type SystemZoneInput interface {
	pulumi.Input

	ToSystemZoneOutput() SystemZoneOutput
	ToSystemZoneOutputWithContext(ctx context.Context) SystemZoneOutput
}

func (*SystemZone) ElementType() reflect.Type {
	return reflect.TypeOf((**SystemZone)(nil)).Elem()
}

func (i *SystemZone) ToSystemZoneOutput() SystemZoneOutput {
	return i.ToSystemZoneOutputWithContext(context.Background())
}

func (i *SystemZone) ToSystemZoneOutputWithContext(ctx context.Context) SystemZoneOutput {
	return pulumi.ToOutputWithContext(ctx, i).(SystemZoneOutput)
}

// SystemZoneArrayInput is an input type that accepts SystemZoneArray and SystemZoneArrayOutput values.
// You can construct a concrete instance of `SystemZoneArrayInput` via:
//
//          SystemZoneArray{ SystemZoneArgs{...} }
type SystemZoneArrayInput interface {
	pulumi.Input

	ToSystemZoneArrayOutput() SystemZoneArrayOutput
	ToSystemZoneArrayOutputWithContext(context.Context) SystemZoneArrayOutput
}

type SystemZoneArray []SystemZoneInput

func (SystemZoneArray) ElementType() reflect.Type {
	return reflect.TypeOf((*[]*SystemZone)(nil)).Elem()
}

func (i SystemZoneArray) ToSystemZoneArrayOutput() SystemZoneArrayOutput {
	return i.ToSystemZoneArrayOutputWithContext(context.Background())
}

func (i SystemZoneArray) ToSystemZoneArrayOutputWithContext(ctx context.Context) SystemZoneArrayOutput {
	return pulumi.ToOutputWithContext(ctx, i).(SystemZoneArrayOutput)
}

// SystemZoneMapInput is an input type that accepts SystemZoneMap and SystemZoneMapOutput values.
// You can construct a concrete instance of `SystemZoneMapInput` via:
//
//          SystemZoneMap{ "key": SystemZoneArgs{...} }
type SystemZoneMapInput interface {
	pulumi.Input

	ToSystemZoneMapOutput() SystemZoneMapOutput
	ToSystemZoneMapOutputWithContext(context.Context) SystemZoneMapOutput
}

type SystemZoneMap map[string]SystemZoneInput

func (SystemZoneMap) ElementType() reflect.Type {
	return reflect.TypeOf((*map[string]*SystemZone)(nil)).Elem()
}

func (i SystemZoneMap) ToSystemZoneMapOutput() SystemZoneMapOutput {
	return i.ToSystemZoneMapOutputWithContext(context.Background())
}

func (i SystemZoneMap) ToSystemZoneMapOutputWithContext(ctx context.Context) SystemZoneMapOutput {
	return pulumi.ToOutputWithContext(ctx, i).(SystemZoneMapOutput)
}

type SystemZoneOutput struct{ *pulumi.OutputState }

func (SystemZoneOutput) ElementType() reflect.Type {
	return reflect.TypeOf((**SystemZone)(nil)).Elem()
}

func (o SystemZoneOutput) ToSystemZoneOutput() SystemZoneOutput {
	return o
}

func (o SystemZoneOutput) ToSystemZoneOutputWithContext(ctx context.Context) SystemZoneOutput {
	return o
}

type SystemZoneArrayOutput struct{ *pulumi.OutputState }

func (SystemZoneArrayOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*[]*SystemZone)(nil)).Elem()
}

func (o SystemZoneArrayOutput) ToSystemZoneArrayOutput() SystemZoneArrayOutput {
	return o
}

func (o SystemZoneArrayOutput) ToSystemZoneArrayOutputWithContext(ctx context.Context) SystemZoneArrayOutput {
	return o
}

func (o SystemZoneArrayOutput) Index(i pulumi.IntInput) SystemZoneOutput {
	return pulumi.All(o, i).ApplyT(func(vs []interface{}) *SystemZone {
		return vs[0].([]*SystemZone)[vs[1].(int)]
	}).(SystemZoneOutput)
}

type SystemZoneMapOutput struct{ *pulumi.OutputState }

func (SystemZoneMapOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*map[string]*SystemZone)(nil)).Elem()
}

func (o SystemZoneMapOutput) ToSystemZoneMapOutput() SystemZoneMapOutput {
	return o
}

func (o SystemZoneMapOutput) ToSystemZoneMapOutputWithContext(ctx context.Context) SystemZoneMapOutput {
	return o
}

func (o SystemZoneMapOutput) MapIndex(k pulumi.StringInput) SystemZoneOutput {
	return pulumi.All(o, k).ApplyT(func(vs []interface{}) *SystemZone {
		return vs[0].(map[string]*SystemZone)[vs[1].(string)]
	}).(SystemZoneOutput)
}

func init() {
	pulumi.RegisterInputType(reflect.TypeOf((*SystemZoneInput)(nil)).Elem(), &SystemZone{})
	pulumi.RegisterInputType(reflect.TypeOf((*SystemZoneArrayInput)(nil)).Elem(), SystemZoneArray{})
	pulumi.RegisterInputType(reflect.TypeOf((*SystemZoneMapInput)(nil)).Elem(), SystemZoneMap{})
	pulumi.RegisterOutputType(SystemZoneOutput{})
	pulumi.RegisterOutputType(SystemZoneArrayOutput{})
	pulumi.RegisterOutputType(SystemZoneMapOutput{})
}
