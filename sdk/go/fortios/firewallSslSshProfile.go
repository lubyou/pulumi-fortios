// Code generated by the Pulumi Terraform Bridge (tfgen) Tool DO NOT EDIT.
// *** WARNING: Do not edit by hand unless you're certain you know what you are doing! ***

package fortios

import (
	"context"
	"reflect"

	"github.com/pulumi/pulumi/sdk/v3/go/pulumi"
)

// Configure SSL/SSH protocol options.
//
// ## Example Usage
//
// ```go
// package main
//
// import (
// 	"github.com/lubyou/pulumi-fortios/sdk/go/fortios"
// 	"github.com/pulumi/pulumi-fortios/sdk/go/fortios"
// 	"github.com/pulumi/pulumi/sdk/v3/go/pulumi"
// )
//
// func main() {
// 	pulumi.Run(func(ctx *pulumi.Context) error {
// 		_, err := fortios.NewFirewallSslSshProfile(ctx, "t1", &fortios.FirewallSslSshProfileArgs{
// 			Ftps: &FirewallSslSshProfileFtpsArgs{
// 				Ports: pulumi.String("990"),
// 			},
// 			Https: &FirewallSslSshProfileHttpsArgs{
// 				Ports: pulumi.String("443 127 422 392"),
// 			},
// 			Imaps: &FirewallSslSshProfileImapsArgs{
// 				Ports: pulumi.String("993 1123"),
// 			},
// 			Pop3s: &FirewallSslSshProfilePop3sArgs{
// 				Ports: pulumi.String("995"),
// 			},
// 			Smtps: &FirewallSslSshProfileSmtpsArgs{
// 				Ports: pulumi.String("465"),
// 			},
// 			Ssl: &FirewallSslSshProfileSslArgs{
// 				InspectAll: pulumi.String("disable"),
// 			},
// 		})
// 		if err != nil {
// 			return err
// 		}
// 		_, err = fortios.NewFirewallSslSshProfile(ctx, "t2", &fortios.FirewallSslSshProfileArgs{
// 			Https: &FirewallSslSshProfileHttpsArgs{
// 				Ports: pulumi.String("443"),
// 			},
// 			Ssl: &FirewallSslSshProfileSslArgs{
// 				InspectAll: pulumi.String("deep-inspection"),
// 			},
// 		})
// 		if err != nil {
// 			return err
// 		}
// 		return nil
// 	})
// }
// ```
//
// ## Import
//
// Firewall SslSshProfile can be imported using any of these accepted formats
//
// ```sh
//  $ pulumi import fortios:index/firewallSslSshProfile:FirewallSslSshProfile labelname {{name}}
// ```
//
//  If you do not want to import arguments of block$ export "FORTIOS_IMPORT_TABLE"="false"
//
// ```sh
//  $ pulumi import fortios:index/firewallSslSshProfile:FirewallSslSshProfile labelname {{name}}
// ```
//
//  $ unset "FORTIOS_IMPORT_TABLE"
type FirewallSslSshProfile struct {
	pulumi.CustomResourceState

	// Enable/disable exempting servers by FortiGuard allowlist. Valid values: `enable`, `disable`.
	Allowlist pulumi.StringOutput `pulumi:"allowlist"`
	// Enable/disable blocking SSL-based botnet communication by FortiGuard certificate blacklist. Valid values: `disable`, `enable`.
	BlockBlacklistedCertificates pulumi.StringOutput `pulumi:"blockBlacklistedCertificates"`
	// Enable/disable blocking SSL-based botnet communication by FortiGuard certificate blocklist. Valid values: `disable`, `enable`.
	BlockBlocklistedCertificates pulumi.StringOutput `pulumi:"blockBlocklistedCertificates"`
	// CA certificate used by SSL Inspection.
	Caname pulumi.StringOutput `pulumi:"caname"`
	// Optional comments.
	Comment pulumi.StringPtrOutput `pulumi:"comment"`
	// Configure DNS over TLS options. The structure of `dot` block is documented below.
	Dot FirewallSslSshProfileDotPtrOutput `pulumi:"dot"`
	// true or false, set this parameter to true when using dynamic forEach + toset to configure and sort sub-tables, please do not set this parameter when configuring static sub-tables.
	DynamicSortSubtable pulumi.StringPtrOutput `pulumi:"dynamicSortSubtable"`
	// Configure FTPS options. The structure of `ftps` block is documented below.
	Ftps FirewallSslSshProfileFtpsPtrOutput `pulumi:"ftps"`
	// Configure HTTPS options. The structure of `https` block is documented below.
	Https FirewallSslSshProfileHttpsPtrOutput `pulumi:"https"`
	// Configure IMAPS options. The structure of `imaps` block is documented below.
	Imaps FirewallSslSshProfileImapsPtrOutput `pulumi:"imaps"`
	// Enable/disable inspection of MAPI over HTTPS. Valid values: `enable`, `disable`.
	MapiOverHttps pulumi.StringOutput `pulumi:"mapiOverHttps"`
	// Name.
	Name pulumi.StringOutput `pulumi:"name"`
	// Configure POP3S options. The structure of `pop3s` block is documented below.
	Pop3s FirewallSslSshProfilePop3sPtrOutput `pulumi:"pop3s"`
	// Enable/disable inspection of RPC over HTTPS. Valid values: `enable`, `disable`.
	RpcOverHttps pulumi.StringOutput `pulumi:"rpcOverHttps"`
	// Certificate used by SSL Inspection to replace server certificate.
	ServerCert pulumi.StringOutput `pulumi:"serverCert"`
	// Re-sign or replace the server's certificate. Valid values: `re-sign`, `replace`.
	ServerCertMode pulumi.StringOutput `pulumi:"serverCertMode"`
	// Configure SMTPS options. The structure of `smtps` block is documented below.
	Smtps FirewallSslSshProfileSmtpsPtrOutput `pulumi:"smtps"`
	// Configure SSH options. The structure of `ssh` block is documented below.
	Ssh FirewallSslSshProfileSshPtrOutput `pulumi:"ssh"`
	// Configure SSL options. The structure of `ssl` block is documented below.
	Ssl FirewallSslSshProfileSslPtrOutput `pulumi:"ssl"`
	// Enable/disable logging SSL anomalies. Valid values: `disable`, `enable`.
	SslAnomaliesLog pulumi.StringOutput `pulumi:"sslAnomaliesLog"`
	// Enable/disable logging SSL anomalies. Valid values: `disable`, `enable`.
	SslAnomalyLog pulumi.StringOutput `pulumi:"sslAnomalyLog"`
	// Enable/disable logging SSL exemptions. Valid values: `disable`, `enable`.
	SslExemptionLog pulumi.StringOutput `pulumi:"sslExemptionLog"`
	// Enable/disable logging SSL exemptions. Valid values: `disable`, `enable`.
	SslExemptionsLog pulumi.StringOutput `pulumi:"sslExemptionsLog"`
	// Servers to exempt from SSL inspection. The structure of `sslExempt` block is documented below.
	SslExempts FirewallSslSshProfileSslExemptArrayOutput `pulumi:"sslExempts"`
	// Enable/disable logging of TLS handshakes. Valid values: `disable`, `enable`.
	SslHandshakeLog pulumi.StringOutput `pulumi:"sslHandshakeLog"`
	// Enable/disable logging SSL negotiation. Valid values: `disable`, `enable`.
	SslNegotiationLog pulumi.StringOutput `pulumi:"sslNegotiationLog"`
	// Enable/disable logging of server certificate information. Valid values: `disable`, `enable`.
	SslServerCertLog pulumi.StringOutput `pulumi:"sslServerCertLog"`
	// SSL servers. The structure of `sslServer` block is documented below.
	SslServers FirewallSslSshProfileSslServerArrayOutput `pulumi:"sslServers"`
	// Configure ALPN option. Valid values: `http1-1`, `http2`, `all`, `none`.
	SupportedAlpn pulumi.StringOutput `pulumi:"supportedAlpn"`
	// Untrusted CA certificate used by SSL Inspection.
	UntrustedCaname pulumi.StringOutput `pulumi:"untrustedCaname"`
	// Enable/disable the use of SSL server table for SSL offloading. Valid values: `disable`, `enable`.
	UseSslServer pulumi.StringOutput `pulumi:"useSslServer"`
	// Specifies the vdom to which the resource will be applied when the FortiGate unit is running in VDOM mode. Only one vdom can be specified. If you want to inherit the vdom configuration of the provider, please do not set this parameter.
	Vdomparam pulumi.StringPtrOutput `pulumi:"vdomparam"`
	// Enable/disable exempting servers by FortiGuard whitelist. Valid values: `enable`, `disable`.
	Whitelist pulumi.StringOutput `pulumi:"whitelist"`
}

// NewFirewallSslSshProfile registers a new resource with the given unique name, arguments, and options.
func NewFirewallSslSshProfile(ctx *pulumi.Context,
	name string, args *FirewallSslSshProfileArgs, opts ...pulumi.ResourceOption) (*FirewallSslSshProfile, error) {
	if args == nil {
		args = &FirewallSslSshProfileArgs{}
	}

	opts = pkgResourceDefaultOpts(opts)
	var resource FirewallSslSshProfile
	err := ctx.RegisterResource("fortios:index/firewallSslSshProfile:FirewallSslSshProfile", name, args, &resource, opts...)
	if err != nil {
		return nil, err
	}
	return &resource, nil
}

// GetFirewallSslSshProfile gets an existing FirewallSslSshProfile resource's state with the given name, ID, and optional
// state properties that are used to uniquely qualify the lookup (nil if not required).
func GetFirewallSslSshProfile(ctx *pulumi.Context,
	name string, id pulumi.IDInput, state *FirewallSslSshProfileState, opts ...pulumi.ResourceOption) (*FirewallSslSshProfile, error) {
	var resource FirewallSslSshProfile
	err := ctx.ReadResource("fortios:index/firewallSslSshProfile:FirewallSslSshProfile", name, id, state, &resource, opts...)
	if err != nil {
		return nil, err
	}
	return &resource, nil
}

// Input properties used for looking up and filtering FirewallSslSshProfile resources.
type firewallSslSshProfileState struct {
	// Enable/disable exempting servers by FortiGuard allowlist. Valid values: `enable`, `disable`.
	Allowlist *string `pulumi:"allowlist"`
	// Enable/disable blocking SSL-based botnet communication by FortiGuard certificate blacklist. Valid values: `disable`, `enable`.
	BlockBlacklistedCertificates *string `pulumi:"blockBlacklistedCertificates"`
	// Enable/disable blocking SSL-based botnet communication by FortiGuard certificate blocklist. Valid values: `disable`, `enable`.
	BlockBlocklistedCertificates *string `pulumi:"blockBlocklistedCertificates"`
	// CA certificate used by SSL Inspection.
	Caname *string `pulumi:"caname"`
	// Optional comments.
	Comment *string `pulumi:"comment"`
	// Configure DNS over TLS options. The structure of `dot` block is documented below.
	Dot *FirewallSslSshProfileDot `pulumi:"dot"`
	// true or false, set this parameter to true when using dynamic forEach + toset to configure and sort sub-tables, please do not set this parameter when configuring static sub-tables.
	DynamicSortSubtable *string `pulumi:"dynamicSortSubtable"`
	// Configure FTPS options. The structure of `ftps` block is documented below.
	Ftps *FirewallSslSshProfileFtps `pulumi:"ftps"`
	// Configure HTTPS options. The structure of `https` block is documented below.
	Https *FirewallSslSshProfileHttps `pulumi:"https"`
	// Configure IMAPS options. The structure of `imaps` block is documented below.
	Imaps *FirewallSslSshProfileImaps `pulumi:"imaps"`
	// Enable/disable inspection of MAPI over HTTPS. Valid values: `enable`, `disable`.
	MapiOverHttps *string `pulumi:"mapiOverHttps"`
	// Name.
	Name *string `pulumi:"name"`
	// Configure POP3S options. The structure of `pop3s` block is documented below.
	Pop3s *FirewallSslSshProfilePop3s `pulumi:"pop3s"`
	// Enable/disable inspection of RPC over HTTPS. Valid values: `enable`, `disable`.
	RpcOverHttps *string `pulumi:"rpcOverHttps"`
	// Certificate used by SSL Inspection to replace server certificate.
	ServerCert *string `pulumi:"serverCert"`
	// Re-sign or replace the server's certificate. Valid values: `re-sign`, `replace`.
	ServerCertMode *string `pulumi:"serverCertMode"`
	// Configure SMTPS options. The structure of `smtps` block is documented below.
	Smtps *FirewallSslSshProfileSmtps `pulumi:"smtps"`
	// Configure SSH options. The structure of `ssh` block is documented below.
	Ssh *FirewallSslSshProfileSsh `pulumi:"ssh"`
	// Configure SSL options. The structure of `ssl` block is documented below.
	Ssl *FirewallSslSshProfileSsl `pulumi:"ssl"`
	// Enable/disable logging SSL anomalies. Valid values: `disable`, `enable`.
	SslAnomaliesLog *string `pulumi:"sslAnomaliesLog"`
	// Enable/disable logging SSL anomalies. Valid values: `disable`, `enable`.
	SslAnomalyLog *string `pulumi:"sslAnomalyLog"`
	// Enable/disable logging SSL exemptions. Valid values: `disable`, `enable`.
	SslExemptionLog *string `pulumi:"sslExemptionLog"`
	// Enable/disable logging SSL exemptions. Valid values: `disable`, `enable`.
	SslExemptionsLog *string `pulumi:"sslExemptionsLog"`
	// Servers to exempt from SSL inspection. The structure of `sslExempt` block is documented below.
	SslExempts []FirewallSslSshProfileSslExempt `pulumi:"sslExempts"`
	// Enable/disable logging of TLS handshakes. Valid values: `disable`, `enable`.
	SslHandshakeLog *string `pulumi:"sslHandshakeLog"`
	// Enable/disable logging SSL negotiation. Valid values: `disable`, `enable`.
	SslNegotiationLog *string `pulumi:"sslNegotiationLog"`
	// Enable/disable logging of server certificate information. Valid values: `disable`, `enable`.
	SslServerCertLog *string `pulumi:"sslServerCertLog"`
	// SSL servers. The structure of `sslServer` block is documented below.
	SslServers []FirewallSslSshProfileSslServer `pulumi:"sslServers"`
	// Configure ALPN option. Valid values: `http1-1`, `http2`, `all`, `none`.
	SupportedAlpn *string `pulumi:"supportedAlpn"`
	// Untrusted CA certificate used by SSL Inspection.
	UntrustedCaname *string `pulumi:"untrustedCaname"`
	// Enable/disable the use of SSL server table for SSL offloading. Valid values: `disable`, `enable`.
	UseSslServer *string `pulumi:"useSslServer"`
	// Specifies the vdom to which the resource will be applied when the FortiGate unit is running in VDOM mode. Only one vdom can be specified. If you want to inherit the vdom configuration of the provider, please do not set this parameter.
	Vdomparam *string `pulumi:"vdomparam"`
	// Enable/disable exempting servers by FortiGuard whitelist. Valid values: `enable`, `disable`.
	Whitelist *string `pulumi:"whitelist"`
}

type FirewallSslSshProfileState struct {
	// Enable/disable exempting servers by FortiGuard allowlist. Valid values: `enable`, `disable`.
	Allowlist pulumi.StringPtrInput
	// Enable/disable blocking SSL-based botnet communication by FortiGuard certificate blacklist. Valid values: `disable`, `enable`.
	BlockBlacklistedCertificates pulumi.StringPtrInput
	// Enable/disable blocking SSL-based botnet communication by FortiGuard certificate blocklist. Valid values: `disable`, `enable`.
	BlockBlocklistedCertificates pulumi.StringPtrInput
	// CA certificate used by SSL Inspection.
	Caname pulumi.StringPtrInput
	// Optional comments.
	Comment pulumi.StringPtrInput
	// Configure DNS over TLS options. The structure of `dot` block is documented below.
	Dot FirewallSslSshProfileDotPtrInput
	// true or false, set this parameter to true when using dynamic forEach + toset to configure and sort sub-tables, please do not set this parameter when configuring static sub-tables.
	DynamicSortSubtable pulumi.StringPtrInput
	// Configure FTPS options. The structure of `ftps` block is documented below.
	Ftps FirewallSslSshProfileFtpsPtrInput
	// Configure HTTPS options. The structure of `https` block is documented below.
	Https FirewallSslSshProfileHttpsPtrInput
	// Configure IMAPS options. The structure of `imaps` block is documented below.
	Imaps FirewallSslSshProfileImapsPtrInput
	// Enable/disable inspection of MAPI over HTTPS. Valid values: `enable`, `disable`.
	MapiOverHttps pulumi.StringPtrInput
	// Name.
	Name pulumi.StringPtrInput
	// Configure POP3S options. The structure of `pop3s` block is documented below.
	Pop3s FirewallSslSshProfilePop3sPtrInput
	// Enable/disable inspection of RPC over HTTPS. Valid values: `enable`, `disable`.
	RpcOverHttps pulumi.StringPtrInput
	// Certificate used by SSL Inspection to replace server certificate.
	ServerCert pulumi.StringPtrInput
	// Re-sign or replace the server's certificate. Valid values: `re-sign`, `replace`.
	ServerCertMode pulumi.StringPtrInput
	// Configure SMTPS options. The structure of `smtps` block is documented below.
	Smtps FirewallSslSshProfileSmtpsPtrInput
	// Configure SSH options. The structure of `ssh` block is documented below.
	Ssh FirewallSslSshProfileSshPtrInput
	// Configure SSL options. The structure of `ssl` block is documented below.
	Ssl FirewallSslSshProfileSslPtrInput
	// Enable/disable logging SSL anomalies. Valid values: `disable`, `enable`.
	SslAnomaliesLog pulumi.StringPtrInput
	// Enable/disable logging SSL anomalies. Valid values: `disable`, `enable`.
	SslAnomalyLog pulumi.StringPtrInput
	// Enable/disable logging SSL exemptions. Valid values: `disable`, `enable`.
	SslExemptionLog pulumi.StringPtrInput
	// Enable/disable logging SSL exemptions. Valid values: `disable`, `enable`.
	SslExemptionsLog pulumi.StringPtrInput
	// Servers to exempt from SSL inspection. The structure of `sslExempt` block is documented below.
	SslExempts FirewallSslSshProfileSslExemptArrayInput
	// Enable/disable logging of TLS handshakes. Valid values: `disable`, `enable`.
	SslHandshakeLog pulumi.StringPtrInput
	// Enable/disable logging SSL negotiation. Valid values: `disable`, `enable`.
	SslNegotiationLog pulumi.StringPtrInput
	// Enable/disable logging of server certificate information. Valid values: `disable`, `enable`.
	SslServerCertLog pulumi.StringPtrInput
	// SSL servers. The structure of `sslServer` block is documented below.
	SslServers FirewallSslSshProfileSslServerArrayInput
	// Configure ALPN option. Valid values: `http1-1`, `http2`, `all`, `none`.
	SupportedAlpn pulumi.StringPtrInput
	// Untrusted CA certificate used by SSL Inspection.
	UntrustedCaname pulumi.StringPtrInput
	// Enable/disable the use of SSL server table for SSL offloading. Valid values: `disable`, `enable`.
	UseSslServer pulumi.StringPtrInput
	// Specifies the vdom to which the resource will be applied when the FortiGate unit is running in VDOM mode. Only one vdom can be specified. If you want to inherit the vdom configuration of the provider, please do not set this parameter.
	Vdomparam pulumi.StringPtrInput
	// Enable/disable exempting servers by FortiGuard whitelist. Valid values: `enable`, `disable`.
	Whitelist pulumi.StringPtrInput
}

func (FirewallSslSshProfileState) ElementType() reflect.Type {
	return reflect.TypeOf((*firewallSslSshProfileState)(nil)).Elem()
}

type firewallSslSshProfileArgs struct {
	// Enable/disable exempting servers by FortiGuard allowlist. Valid values: `enable`, `disable`.
	Allowlist *string `pulumi:"allowlist"`
	// Enable/disable blocking SSL-based botnet communication by FortiGuard certificate blacklist. Valid values: `disable`, `enable`.
	BlockBlacklistedCertificates *string `pulumi:"blockBlacklistedCertificates"`
	// Enable/disable blocking SSL-based botnet communication by FortiGuard certificate blocklist. Valid values: `disable`, `enable`.
	BlockBlocklistedCertificates *string `pulumi:"blockBlocklistedCertificates"`
	// CA certificate used by SSL Inspection.
	Caname *string `pulumi:"caname"`
	// Optional comments.
	Comment *string `pulumi:"comment"`
	// Configure DNS over TLS options. The structure of `dot` block is documented below.
	Dot *FirewallSslSshProfileDot `pulumi:"dot"`
	// true or false, set this parameter to true when using dynamic forEach + toset to configure and sort sub-tables, please do not set this parameter when configuring static sub-tables.
	DynamicSortSubtable *string `pulumi:"dynamicSortSubtable"`
	// Configure FTPS options. The structure of `ftps` block is documented below.
	Ftps *FirewallSslSshProfileFtps `pulumi:"ftps"`
	// Configure HTTPS options. The structure of `https` block is documented below.
	Https *FirewallSslSshProfileHttps `pulumi:"https"`
	// Configure IMAPS options. The structure of `imaps` block is documented below.
	Imaps *FirewallSslSshProfileImaps `pulumi:"imaps"`
	// Enable/disable inspection of MAPI over HTTPS. Valid values: `enable`, `disable`.
	MapiOverHttps *string `pulumi:"mapiOverHttps"`
	// Name.
	Name *string `pulumi:"name"`
	// Configure POP3S options. The structure of `pop3s` block is documented below.
	Pop3s *FirewallSslSshProfilePop3s `pulumi:"pop3s"`
	// Enable/disable inspection of RPC over HTTPS. Valid values: `enable`, `disable`.
	RpcOverHttps *string `pulumi:"rpcOverHttps"`
	// Certificate used by SSL Inspection to replace server certificate.
	ServerCert *string `pulumi:"serverCert"`
	// Re-sign or replace the server's certificate. Valid values: `re-sign`, `replace`.
	ServerCertMode *string `pulumi:"serverCertMode"`
	// Configure SMTPS options. The structure of `smtps` block is documented below.
	Smtps *FirewallSslSshProfileSmtps `pulumi:"smtps"`
	// Configure SSH options. The structure of `ssh` block is documented below.
	Ssh *FirewallSslSshProfileSsh `pulumi:"ssh"`
	// Configure SSL options. The structure of `ssl` block is documented below.
	Ssl *FirewallSslSshProfileSsl `pulumi:"ssl"`
	// Enable/disable logging SSL anomalies. Valid values: `disable`, `enable`.
	SslAnomaliesLog *string `pulumi:"sslAnomaliesLog"`
	// Enable/disable logging SSL anomalies. Valid values: `disable`, `enable`.
	SslAnomalyLog *string `pulumi:"sslAnomalyLog"`
	// Enable/disable logging SSL exemptions. Valid values: `disable`, `enable`.
	SslExemptionLog *string `pulumi:"sslExemptionLog"`
	// Enable/disable logging SSL exemptions. Valid values: `disable`, `enable`.
	SslExemptionsLog *string `pulumi:"sslExemptionsLog"`
	// Servers to exempt from SSL inspection. The structure of `sslExempt` block is documented below.
	SslExempts []FirewallSslSshProfileSslExempt `pulumi:"sslExempts"`
	// Enable/disable logging of TLS handshakes. Valid values: `disable`, `enable`.
	SslHandshakeLog *string `pulumi:"sslHandshakeLog"`
	// Enable/disable logging SSL negotiation. Valid values: `disable`, `enable`.
	SslNegotiationLog *string `pulumi:"sslNegotiationLog"`
	// Enable/disable logging of server certificate information. Valid values: `disable`, `enable`.
	SslServerCertLog *string `pulumi:"sslServerCertLog"`
	// SSL servers. The structure of `sslServer` block is documented below.
	SslServers []FirewallSslSshProfileSslServer `pulumi:"sslServers"`
	// Configure ALPN option. Valid values: `http1-1`, `http2`, `all`, `none`.
	SupportedAlpn *string `pulumi:"supportedAlpn"`
	// Untrusted CA certificate used by SSL Inspection.
	UntrustedCaname *string `pulumi:"untrustedCaname"`
	// Enable/disable the use of SSL server table for SSL offloading. Valid values: `disable`, `enable`.
	UseSslServer *string `pulumi:"useSslServer"`
	// Specifies the vdom to which the resource will be applied when the FortiGate unit is running in VDOM mode. Only one vdom can be specified. If you want to inherit the vdom configuration of the provider, please do not set this parameter.
	Vdomparam *string `pulumi:"vdomparam"`
	// Enable/disable exempting servers by FortiGuard whitelist. Valid values: `enable`, `disable`.
	Whitelist *string `pulumi:"whitelist"`
}

// The set of arguments for constructing a FirewallSslSshProfile resource.
type FirewallSslSshProfileArgs struct {
	// Enable/disable exempting servers by FortiGuard allowlist. Valid values: `enable`, `disable`.
	Allowlist pulumi.StringPtrInput
	// Enable/disable blocking SSL-based botnet communication by FortiGuard certificate blacklist. Valid values: `disable`, `enable`.
	BlockBlacklistedCertificates pulumi.StringPtrInput
	// Enable/disable blocking SSL-based botnet communication by FortiGuard certificate blocklist. Valid values: `disable`, `enable`.
	BlockBlocklistedCertificates pulumi.StringPtrInput
	// CA certificate used by SSL Inspection.
	Caname pulumi.StringPtrInput
	// Optional comments.
	Comment pulumi.StringPtrInput
	// Configure DNS over TLS options. The structure of `dot` block is documented below.
	Dot FirewallSslSshProfileDotPtrInput
	// true or false, set this parameter to true when using dynamic forEach + toset to configure and sort sub-tables, please do not set this parameter when configuring static sub-tables.
	DynamicSortSubtable pulumi.StringPtrInput
	// Configure FTPS options. The structure of `ftps` block is documented below.
	Ftps FirewallSslSshProfileFtpsPtrInput
	// Configure HTTPS options. The structure of `https` block is documented below.
	Https FirewallSslSshProfileHttpsPtrInput
	// Configure IMAPS options. The structure of `imaps` block is documented below.
	Imaps FirewallSslSshProfileImapsPtrInput
	// Enable/disable inspection of MAPI over HTTPS. Valid values: `enable`, `disable`.
	MapiOverHttps pulumi.StringPtrInput
	// Name.
	Name pulumi.StringPtrInput
	// Configure POP3S options. The structure of `pop3s` block is documented below.
	Pop3s FirewallSslSshProfilePop3sPtrInput
	// Enable/disable inspection of RPC over HTTPS. Valid values: `enable`, `disable`.
	RpcOverHttps pulumi.StringPtrInput
	// Certificate used by SSL Inspection to replace server certificate.
	ServerCert pulumi.StringPtrInput
	// Re-sign or replace the server's certificate. Valid values: `re-sign`, `replace`.
	ServerCertMode pulumi.StringPtrInput
	// Configure SMTPS options. The structure of `smtps` block is documented below.
	Smtps FirewallSslSshProfileSmtpsPtrInput
	// Configure SSH options. The structure of `ssh` block is documented below.
	Ssh FirewallSslSshProfileSshPtrInput
	// Configure SSL options. The structure of `ssl` block is documented below.
	Ssl FirewallSslSshProfileSslPtrInput
	// Enable/disable logging SSL anomalies. Valid values: `disable`, `enable`.
	SslAnomaliesLog pulumi.StringPtrInput
	// Enable/disable logging SSL anomalies. Valid values: `disable`, `enable`.
	SslAnomalyLog pulumi.StringPtrInput
	// Enable/disable logging SSL exemptions. Valid values: `disable`, `enable`.
	SslExemptionLog pulumi.StringPtrInput
	// Enable/disable logging SSL exemptions. Valid values: `disable`, `enable`.
	SslExemptionsLog pulumi.StringPtrInput
	// Servers to exempt from SSL inspection. The structure of `sslExempt` block is documented below.
	SslExempts FirewallSslSshProfileSslExemptArrayInput
	// Enable/disable logging of TLS handshakes. Valid values: `disable`, `enable`.
	SslHandshakeLog pulumi.StringPtrInput
	// Enable/disable logging SSL negotiation. Valid values: `disable`, `enable`.
	SslNegotiationLog pulumi.StringPtrInput
	// Enable/disable logging of server certificate information. Valid values: `disable`, `enable`.
	SslServerCertLog pulumi.StringPtrInput
	// SSL servers. The structure of `sslServer` block is documented below.
	SslServers FirewallSslSshProfileSslServerArrayInput
	// Configure ALPN option. Valid values: `http1-1`, `http2`, `all`, `none`.
	SupportedAlpn pulumi.StringPtrInput
	// Untrusted CA certificate used by SSL Inspection.
	UntrustedCaname pulumi.StringPtrInput
	// Enable/disable the use of SSL server table for SSL offloading. Valid values: `disable`, `enable`.
	UseSslServer pulumi.StringPtrInput
	// Specifies the vdom to which the resource will be applied when the FortiGate unit is running in VDOM mode. Only one vdom can be specified. If you want to inherit the vdom configuration of the provider, please do not set this parameter.
	Vdomparam pulumi.StringPtrInput
	// Enable/disable exempting servers by FortiGuard whitelist. Valid values: `enable`, `disable`.
	Whitelist pulumi.StringPtrInput
}

func (FirewallSslSshProfileArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*firewallSslSshProfileArgs)(nil)).Elem()
}

type FirewallSslSshProfileInput interface {
	pulumi.Input

	ToFirewallSslSshProfileOutput() FirewallSslSshProfileOutput
	ToFirewallSslSshProfileOutputWithContext(ctx context.Context) FirewallSslSshProfileOutput
}

func (*FirewallSslSshProfile) ElementType() reflect.Type {
	return reflect.TypeOf((**FirewallSslSshProfile)(nil)).Elem()
}

func (i *FirewallSslSshProfile) ToFirewallSslSshProfileOutput() FirewallSslSshProfileOutput {
	return i.ToFirewallSslSshProfileOutputWithContext(context.Background())
}

func (i *FirewallSslSshProfile) ToFirewallSslSshProfileOutputWithContext(ctx context.Context) FirewallSslSshProfileOutput {
	return pulumi.ToOutputWithContext(ctx, i).(FirewallSslSshProfileOutput)
}

// FirewallSslSshProfileArrayInput is an input type that accepts FirewallSslSshProfileArray and FirewallSslSshProfileArrayOutput values.
// You can construct a concrete instance of `FirewallSslSshProfileArrayInput` via:
//
//          FirewallSslSshProfileArray{ FirewallSslSshProfileArgs{...} }
type FirewallSslSshProfileArrayInput interface {
	pulumi.Input

	ToFirewallSslSshProfileArrayOutput() FirewallSslSshProfileArrayOutput
	ToFirewallSslSshProfileArrayOutputWithContext(context.Context) FirewallSslSshProfileArrayOutput
}

type FirewallSslSshProfileArray []FirewallSslSshProfileInput

func (FirewallSslSshProfileArray) ElementType() reflect.Type {
	return reflect.TypeOf((*[]*FirewallSslSshProfile)(nil)).Elem()
}

func (i FirewallSslSshProfileArray) ToFirewallSslSshProfileArrayOutput() FirewallSslSshProfileArrayOutput {
	return i.ToFirewallSslSshProfileArrayOutputWithContext(context.Background())
}

func (i FirewallSslSshProfileArray) ToFirewallSslSshProfileArrayOutputWithContext(ctx context.Context) FirewallSslSshProfileArrayOutput {
	return pulumi.ToOutputWithContext(ctx, i).(FirewallSslSshProfileArrayOutput)
}

// FirewallSslSshProfileMapInput is an input type that accepts FirewallSslSshProfileMap and FirewallSslSshProfileMapOutput values.
// You can construct a concrete instance of `FirewallSslSshProfileMapInput` via:
//
//          FirewallSslSshProfileMap{ "key": FirewallSslSshProfileArgs{...} }
type FirewallSslSshProfileMapInput interface {
	pulumi.Input

	ToFirewallSslSshProfileMapOutput() FirewallSslSshProfileMapOutput
	ToFirewallSslSshProfileMapOutputWithContext(context.Context) FirewallSslSshProfileMapOutput
}

type FirewallSslSshProfileMap map[string]FirewallSslSshProfileInput

func (FirewallSslSshProfileMap) ElementType() reflect.Type {
	return reflect.TypeOf((*map[string]*FirewallSslSshProfile)(nil)).Elem()
}

func (i FirewallSslSshProfileMap) ToFirewallSslSshProfileMapOutput() FirewallSslSshProfileMapOutput {
	return i.ToFirewallSslSshProfileMapOutputWithContext(context.Background())
}

func (i FirewallSslSshProfileMap) ToFirewallSslSshProfileMapOutputWithContext(ctx context.Context) FirewallSslSshProfileMapOutput {
	return pulumi.ToOutputWithContext(ctx, i).(FirewallSslSshProfileMapOutput)
}

type FirewallSslSshProfileOutput struct{ *pulumi.OutputState }

func (FirewallSslSshProfileOutput) ElementType() reflect.Type {
	return reflect.TypeOf((**FirewallSslSshProfile)(nil)).Elem()
}

func (o FirewallSslSshProfileOutput) ToFirewallSslSshProfileOutput() FirewallSslSshProfileOutput {
	return o
}

func (o FirewallSslSshProfileOutput) ToFirewallSslSshProfileOutputWithContext(ctx context.Context) FirewallSslSshProfileOutput {
	return o
}

type FirewallSslSshProfileArrayOutput struct{ *pulumi.OutputState }

func (FirewallSslSshProfileArrayOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*[]*FirewallSslSshProfile)(nil)).Elem()
}

func (o FirewallSslSshProfileArrayOutput) ToFirewallSslSshProfileArrayOutput() FirewallSslSshProfileArrayOutput {
	return o
}

func (o FirewallSslSshProfileArrayOutput) ToFirewallSslSshProfileArrayOutputWithContext(ctx context.Context) FirewallSslSshProfileArrayOutput {
	return o
}

func (o FirewallSslSshProfileArrayOutput) Index(i pulumi.IntInput) FirewallSslSshProfileOutput {
	return pulumi.All(o, i).ApplyT(func(vs []interface{}) *FirewallSslSshProfile {
		return vs[0].([]*FirewallSslSshProfile)[vs[1].(int)]
	}).(FirewallSslSshProfileOutput)
}

type FirewallSslSshProfileMapOutput struct{ *pulumi.OutputState }

func (FirewallSslSshProfileMapOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*map[string]*FirewallSslSshProfile)(nil)).Elem()
}

func (o FirewallSslSshProfileMapOutput) ToFirewallSslSshProfileMapOutput() FirewallSslSshProfileMapOutput {
	return o
}

func (o FirewallSslSshProfileMapOutput) ToFirewallSslSshProfileMapOutputWithContext(ctx context.Context) FirewallSslSshProfileMapOutput {
	return o
}

func (o FirewallSslSshProfileMapOutput) MapIndex(k pulumi.StringInput) FirewallSslSshProfileOutput {
	return pulumi.All(o, k).ApplyT(func(vs []interface{}) *FirewallSslSshProfile {
		return vs[0].(map[string]*FirewallSslSshProfile)[vs[1].(string)]
	}).(FirewallSslSshProfileOutput)
}

func init() {
	pulumi.RegisterInputType(reflect.TypeOf((*FirewallSslSshProfileInput)(nil)).Elem(), &FirewallSslSshProfile{})
	pulumi.RegisterInputType(reflect.TypeOf((*FirewallSslSshProfileArrayInput)(nil)).Elem(), FirewallSslSshProfileArray{})
	pulumi.RegisterInputType(reflect.TypeOf((*FirewallSslSshProfileMapInput)(nil)).Elem(), FirewallSslSshProfileMap{})
	pulumi.RegisterOutputType(FirewallSslSshProfileOutput{})
	pulumi.RegisterOutputType(FirewallSslSshProfileArrayOutput{})
	pulumi.RegisterOutputType(FirewallSslSshProfileMapOutput{})
}
