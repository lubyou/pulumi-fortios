// Code generated by the Pulumi Terraform Bridge (tfgen) Tool DO NOT EDIT.
// *** WARNING: Do not edit by hand unless you're certain you know what you are doing! ***

package fortios

import (
	"context"
	"reflect"

	"github.com/pkg/errors"
	"github.com/pulumi/pulumi/sdk/v3/go/pulumi"
)

// Configure TTL policies.
//
// ## Example Usage
//
// ```go
// package main
//
// import (
// 	"github.com/lubyou/pulumi-fortios/sdk/go/fortios"
// 	"github.com/pulumi/pulumi-fortios/sdk/go/fortios"
// 	"github.com/pulumi/pulumi/sdk/v3/go/pulumi"
// )
//
// func main() {
// 	pulumi.Run(func(ctx *pulumi.Context) error {
// 		_, err := fortios.NewFirewallTtlPolicy(ctx, "trname", &fortios.FirewallTtlPolicyArgs{
// 			Action:   pulumi.String("accept"),
// 			Fosid:    pulumi.Int(1),
// 			Schedule: pulumi.String("always"),
// 			Services: FirewallTtlPolicyServiceArray{
// 				&FirewallTtlPolicyServiceArgs{
// 					Name: pulumi.String("ALL"),
// 				},
// 			},
// 			Srcaddrs: FirewallTtlPolicySrcaddrArray{
// 				&FirewallTtlPolicySrcaddrArgs{
// 					Name: pulumi.String("all"),
// 				},
// 			},
// 			Srcintf: pulumi.String("port3"),
// 			Status:  pulumi.String("enable"),
// 			Ttl:     pulumi.String("23"),
// 		})
// 		if err != nil {
// 			return err
// 		}
// 		return nil
// 	})
// }
// ```
//
// ## Import
//
// Firewall TtlPolicy can be imported using any of these accepted formats
//
// ```sh
//  $ pulumi import fortios:index/firewallTtlPolicy:FirewallTtlPolicy labelname {{fosid}}
// ```
//
//  If you do not want to import arguments of block$ export "FORTIOS_IMPORT_TABLE"="false"
//
// ```sh
//  $ pulumi import fortios:index/firewallTtlPolicy:FirewallTtlPolicy labelname {{fosid}}
// ```
//
//  $ unset "FORTIOS_IMPORT_TABLE"
type FirewallTtlPolicy struct {
	pulumi.CustomResourceState

	// Action to be performed on traffic matching this policy (default = deny). Valid values: `accept`, `deny`.
	Action pulumi.StringOutput `pulumi:"action"`
	// true or false, set this parameter to true when using dynamic forEach + toset to configure and sort sub-tables, please do not set this parameter when configuring static sub-tables.
	DynamicSortSubtable pulumi.StringPtrOutput `pulumi:"dynamicSortSubtable"`
	// ID.
	Fosid pulumi.IntOutput `pulumi:"fosid"`
	// Schedule object from available options.
	Schedule pulumi.StringOutput `pulumi:"schedule"`
	// Service object(s) from available options. Separate multiple names with a space. The structure of `service` block is documented below.
	Services FirewallTtlPolicyServiceArrayOutput `pulumi:"services"`
	// Source address object(s) from available options. Separate multiple names with a space. The structure of `srcaddr` block is documented below.
	Srcaddrs FirewallTtlPolicySrcaddrArrayOutput `pulumi:"srcaddrs"`
	// Source interface name from available interfaces.
	Srcintf pulumi.StringOutput `pulumi:"srcintf"`
	// Enable/disable this TTL policy. Valid values: `enable`, `disable`.
	Status pulumi.StringOutput `pulumi:"status"`
	// Value/range to match against the packet's Time to Live value (format: ttl[ - ttlHigh], 1 - 255).
	Ttl pulumi.StringOutput `pulumi:"ttl"`
	// Specifies the vdom to which the resource will be applied when the FortiGate unit is running in VDOM mode. Only one vdom can be specified. If you want to inherit the vdom configuration of the provider, please do not set this parameter.
	Vdomparam pulumi.StringPtrOutput `pulumi:"vdomparam"`
}

// NewFirewallTtlPolicy registers a new resource with the given unique name, arguments, and options.
func NewFirewallTtlPolicy(ctx *pulumi.Context,
	name string, args *FirewallTtlPolicyArgs, opts ...pulumi.ResourceOption) (*FirewallTtlPolicy, error) {
	if args == nil {
		return nil, errors.New("missing one or more required arguments")
	}

	if args.Fosid == nil {
		return nil, errors.New("invalid value for required argument 'Fosid'")
	}
	if args.Schedule == nil {
		return nil, errors.New("invalid value for required argument 'Schedule'")
	}
	if args.Services == nil {
		return nil, errors.New("invalid value for required argument 'Services'")
	}
	if args.Srcaddrs == nil {
		return nil, errors.New("invalid value for required argument 'Srcaddrs'")
	}
	if args.Srcintf == nil {
		return nil, errors.New("invalid value for required argument 'Srcintf'")
	}
	if args.Ttl == nil {
		return nil, errors.New("invalid value for required argument 'Ttl'")
	}
	opts = pkgResourceDefaultOpts(opts)
	var resource FirewallTtlPolicy
	err := ctx.RegisterResource("fortios:index/firewallTtlPolicy:FirewallTtlPolicy", name, args, &resource, opts...)
	if err != nil {
		return nil, err
	}
	return &resource, nil
}

// GetFirewallTtlPolicy gets an existing FirewallTtlPolicy resource's state with the given name, ID, and optional
// state properties that are used to uniquely qualify the lookup (nil if not required).
func GetFirewallTtlPolicy(ctx *pulumi.Context,
	name string, id pulumi.IDInput, state *FirewallTtlPolicyState, opts ...pulumi.ResourceOption) (*FirewallTtlPolicy, error) {
	var resource FirewallTtlPolicy
	err := ctx.ReadResource("fortios:index/firewallTtlPolicy:FirewallTtlPolicy", name, id, state, &resource, opts...)
	if err != nil {
		return nil, err
	}
	return &resource, nil
}

// Input properties used for looking up and filtering FirewallTtlPolicy resources.
type firewallTtlPolicyState struct {
	// Action to be performed on traffic matching this policy (default = deny). Valid values: `accept`, `deny`.
	Action *string `pulumi:"action"`
	// true or false, set this parameter to true when using dynamic forEach + toset to configure and sort sub-tables, please do not set this parameter when configuring static sub-tables.
	DynamicSortSubtable *string `pulumi:"dynamicSortSubtable"`
	// ID.
	Fosid *int `pulumi:"fosid"`
	// Schedule object from available options.
	Schedule *string `pulumi:"schedule"`
	// Service object(s) from available options. Separate multiple names with a space. The structure of `service` block is documented below.
	Services []FirewallTtlPolicyService `pulumi:"services"`
	// Source address object(s) from available options. Separate multiple names with a space. The structure of `srcaddr` block is documented below.
	Srcaddrs []FirewallTtlPolicySrcaddr `pulumi:"srcaddrs"`
	// Source interface name from available interfaces.
	Srcintf *string `pulumi:"srcintf"`
	// Enable/disable this TTL policy. Valid values: `enable`, `disable`.
	Status *string `pulumi:"status"`
	// Value/range to match against the packet's Time to Live value (format: ttl[ - ttlHigh], 1 - 255).
	Ttl *string `pulumi:"ttl"`
	// Specifies the vdom to which the resource will be applied when the FortiGate unit is running in VDOM mode. Only one vdom can be specified. If you want to inherit the vdom configuration of the provider, please do not set this parameter.
	Vdomparam *string `pulumi:"vdomparam"`
}

type FirewallTtlPolicyState struct {
	// Action to be performed on traffic matching this policy (default = deny). Valid values: `accept`, `deny`.
	Action pulumi.StringPtrInput
	// true or false, set this parameter to true when using dynamic forEach + toset to configure and sort sub-tables, please do not set this parameter when configuring static sub-tables.
	DynamicSortSubtable pulumi.StringPtrInput
	// ID.
	Fosid pulumi.IntPtrInput
	// Schedule object from available options.
	Schedule pulumi.StringPtrInput
	// Service object(s) from available options. Separate multiple names with a space. The structure of `service` block is documented below.
	Services FirewallTtlPolicyServiceArrayInput
	// Source address object(s) from available options. Separate multiple names with a space. The structure of `srcaddr` block is documented below.
	Srcaddrs FirewallTtlPolicySrcaddrArrayInput
	// Source interface name from available interfaces.
	Srcintf pulumi.StringPtrInput
	// Enable/disable this TTL policy. Valid values: `enable`, `disable`.
	Status pulumi.StringPtrInput
	// Value/range to match against the packet's Time to Live value (format: ttl[ - ttlHigh], 1 - 255).
	Ttl pulumi.StringPtrInput
	// Specifies the vdom to which the resource will be applied when the FortiGate unit is running in VDOM mode. Only one vdom can be specified. If you want to inherit the vdom configuration of the provider, please do not set this parameter.
	Vdomparam pulumi.StringPtrInput
}

func (FirewallTtlPolicyState) ElementType() reflect.Type {
	return reflect.TypeOf((*firewallTtlPolicyState)(nil)).Elem()
}

type firewallTtlPolicyArgs struct {
	// Action to be performed on traffic matching this policy (default = deny). Valid values: `accept`, `deny`.
	Action *string `pulumi:"action"`
	// true or false, set this parameter to true when using dynamic forEach + toset to configure and sort sub-tables, please do not set this parameter when configuring static sub-tables.
	DynamicSortSubtable *string `pulumi:"dynamicSortSubtable"`
	// ID.
	Fosid int `pulumi:"fosid"`
	// Schedule object from available options.
	Schedule string `pulumi:"schedule"`
	// Service object(s) from available options. Separate multiple names with a space. The structure of `service` block is documented below.
	Services []FirewallTtlPolicyService `pulumi:"services"`
	// Source address object(s) from available options. Separate multiple names with a space. The structure of `srcaddr` block is documented below.
	Srcaddrs []FirewallTtlPolicySrcaddr `pulumi:"srcaddrs"`
	// Source interface name from available interfaces.
	Srcintf string `pulumi:"srcintf"`
	// Enable/disable this TTL policy. Valid values: `enable`, `disable`.
	Status *string `pulumi:"status"`
	// Value/range to match against the packet's Time to Live value (format: ttl[ - ttlHigh], 1 - 255).
	Ttl string `pulumi:"ttl"`
	// Specifies the vdom to which the resource will be applied when the FortiGate unit is running in VDOM mode. Only one vdom can be specified. If you want to inherit the vdom configuration of the provider, please do not set this parameter.
	Vdomparam *string `pulumi:"vdomparam"`
}

// The set of arguments for constructing a FirewallTtlPolicy resource.
type FirewallTtlPolicyArgs struct {
	// Action to be performed on traffic matching this policy (default = deny). Valid values: `accept`, `deny`.
	Action pulumi.StringPtrInput
	// true or false, set this parameter to true when using dynamic forEach + toset to configure and sort sub-tables, please do not set this parameter when configuring static sub-tables.
	DynamicSortSubtable pulumi.StringPtrInput
	// ID.
	Fosid pulumi.IntInput
	// Schedule object from available options.
	Schedule pulumi.StringInput
	// Service object(s) from available options. Separate multiple names with a space. The structure of `service` block is documented below.
	Services FirewallTtlPolicyServiceArrayInput
	// Source address object(s) from available options. Separate multiple names with a space. The structure of `srcaddr` block is documented below.
	Srcaddrs FirewallTtlPolicySrcaddrArrayInput
	// Source interface name from available interfaces.
	Srcintf pulumi.StringInput
	// Enable/disable this TTL policy. Valid values: `enable`, `disable`.
	Status pulumi.StringPtrInput
	// Value/range to match against the packet's Time to Live value (format: ttl[ - ttlHigh], 1 - 255).
	Ttl pulumi.StringInput
	// Specifies the vdom to which the resource will be applied when the FortiGate unit is running in VDOM mode. Only one vdom can be specified. If you want to inherit the vdom configuration of the provider, please do not set this parameter.
	Vdomparam pulumi.StringPtrInput
}

func (FirewallTtlPolicyArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*firewallTtlPolicyArgs)(nil)).Elem()
}

type FirewallTtlPolicyInput interface {
	pulumi.Input

	ToFirewallTtlPolicyOutput() FirewallTtlPolicyOutput
	ToFirewallTtlPolicyOutputWithContext(ctx context.Context) FirewallTtlPolicyOutput
}

func (*FirewallTtlPolicy) ElementType() reflect.Type {
	return reflect.TypeOf((**FirewallTtlPolicy)(nil)).Elem()
}

func (i *FirewallTtlPolicy) ToFirewallTtlPolicyOutput() FirewallTtlPolicyOutput {
	return i.ToFirewallTtlPolicyOutputWithContext(context.Background())
}

func (i *FirewallTtlPolicy) ToFirewallTtlPolicyOutputWithContext(ctx context.Context) FirewallTtlPolicyOutput {
	return pulumi.ToOutputWithContext(ctx, i).(FirewallTtlPolicyOutput)
}

// FirewallTtlPolicyArrayInput is an input type that accepts FirewallTtlPolicyArray and FirewallTtlPolicyArrayOutput values.
// You can construct a concrete instance of `FirewallTtlPolicyArrayInput` via:
//
//          FirewallTtlPolicyArray{ FirewallTtlPolicyArgs{...} }
type FirewallTtlPolicyArrayInput interface {
	pulumi.Input

	ToFirewallTtlPolicyArrayOutput() FirewallTtlPolicyArrayOutput
	ToFirewallTtlPolicyArrayOutputWithContext(context.Context) FirewallTtlPolicyArrayOutput
}

type FirewallTtlPolicyArray []FirewallTtlPolicyInput

func (FirewallTtlPolicyArray) ElementType() reflect.Type {
	return reflect.TypeOf((*[]*FirewallTtlPolicy)(nil)).Elem()
}

func (i FirewallTtlPolicyArray) ToFirewallTtlPolicyArrayOutput() FirewallTtlPolicyArrayOutput {
	return i.ToFirewallTtlPolicyArrayOutputWithContext(context.Background())
}

func (i FirewallTtlPolicyArray) ToFirewallTtlPolicyArrayOutputWithContext(ctx context.Context) FirewallTtlPolicyArrayOutput {
	return pulumi.ToOutputWithContext(ctx, i).(FirewallTtlPolicyArrayOutput)
}

// FirewallTtlPolicyMapInput is an input type that accepts FirewallTtlPolicyMap and FirewallTtlPolicyMapOutput values.
// You can construct a concrete instance of `FirewallTtlPolicyMapInput` via:
//
//          FirewallTtlPolicyMap{ "key": FirewallTtlPolicyArgs{...} }
type FirewallTtlPolicyMapInput interface {
	pulumi.Input

	ToFirewallTtlPolicyMapOutput() FirewallTtlPolicyMapOutput
	ToFirewallTtlPolicyMapOutputWithContext(context.Context) FirewallTtlPolicyMapOutput
}

type FirewallTtlPolicyMap map[string]FirewallTtlPolicyInput

func (FirewallTtlPolicyMap) ElementType() reflect.Type {
	return reflect.TypeOf((*map[string]*FirewallTtlPolicy)(nil)).Elem()
}

func (i FirewallTtlPolicyMap) ToFirewallTtlPolicyMapOutput() FirewallTtlPolicyMapOutput {
	return i.ToFirewallTtlPolicyMapOutputWithContext(context.Background())
}

func (i FirewallTtlPolicyMap) ToFirewallTtlPolicyMapOutputWithContext(ctx context.Context) FirewallTtlPolicyMapOutput {
	return pulumi.ToOutputWithContext(ctx, i).(FirewallTtlPolicyMapOutput)
}

type FirewallTtlPolicyOutput struct{ *pulumi.OutputState }

func (FirewallTtlPolicyOutput) ElementType() reflect.Type {
	return reflect.TypeOf((**FirewallTtlPolicy)(nil)).Elem()
}

func (o FirewallTtlPolicyOutput) ToFirewallTtlPolicyOutput() FirewallTtlPolicyOutput {
	return o
}

func (o FirewallTtlPolicyOutput) ToFirewallTtlPolicyOutputWithContext(ctx context.Context) FirewallTtlPolicyOutput {
	return o
}

type FirewallTtlPolicyArrayOutput struct{ *pulumi.OutputState }

func (FirewallTtlPolicyArrayOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*[]*FirewallTtlPolicy)(nil)).Elem()
}

func (o FirewallTtlPolicyArrayOutput) ToFirewallTtlPolicyArrayOutput() FirewallTtlPolicyArrayOutput {
	return o
}

func (o FirewallTtlPolicyArrayOutput) ToFirewallTtlPolicyArrayOutputWithContext(ctx context.Context) FirewallTtlPolicyArrayOutput {
	return o
}

func (o FirewallTtlPolicyArrayOutput) Index(i pulumi.IntInput) FirewallTtlPolicyOutput {
	return pulumi.All(o, i).ApplyT(func(vs []interface{}) *FirewallTtlPolicy {
		return vs[0].([]*FirewallTtlPolicy)[vs[1].(int)]
	}).(FirewallTtlPolicyOutput)
}

type FirewallTtlPolicyMapOutput struct{ *pulumi.OutputState }

func (FirewallTtlPolicyMapOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*map[string]*FirewallTtlPolicy)(nil)).Elem()
}

func (o FirewallTtlPolicyMapOutput) ToFirewallTtlPolicyMapOutput() FirewallTtlPolicyMapOutput {
	return o
}

func (o FirewallTtlPolicyMapOutput) ToFirewallTtlPolicyMapOutputWithContext(ctx context.Context) FirewallTtlPolicyMapOutput {
	return o
}

func (o FirewallTtlPolicyMapOutput) MapIndex(k pulumi.StringInput) FirewallTtlPolicyOutput {
	return pulumi.All(o, k).ApplyT(func(vs []interface{}) *FirewallTtlPolicy {
		return vs[0].(map[string]*FirewallTtlPolicy)[vs[1].(string)]
	}).(FirewallTtlPolicyOutput)
}

func init() {
	pulumi.RegisterInputType(reflect.TypeOf((*FirewallTtlPolicyInput)(nil)).Elem(), &FirewallTtlPolicy{})
	pulumi.RegisterInputType(reflect.TypeOf((*FirewallTtlPolicyArrayInput)(nil)).Elem(), FirewallTtlPolicyArray{})
	pulumi.RegisterInputType(reflect.TypeOf((*FirewallTtlPolicyMapInput)(nil)).Elem(), FirewallTtlPolicyMap{})
	pulumi.RegisterOutputType(FirewallTtlPolicyOutput{})
	pulumi.RegisterOutputType(FirewallTtlPolicyArrayOutput{})
	pulumi.RegisterOutputType(FirewallTtlPolicyMapOutput{})
}
