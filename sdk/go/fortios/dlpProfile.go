// Code generated by the Pulumi Terraform Bridge (tfgen) Tool DO NOT EDIT.
// *** WARNING: Do not edit by hand unless you're certain you know what you are doing! ***

package fortios

import (
	"context"
	"reflect"

	"github.com/lubyou/pulumi-fortios/sdk/go/fortios/internal"
	"github.com/pulumi/pulumi/sdk/v3/go/pulumi"
	"github.com/pulumi/pulumi/sdk/v3/go/pulumix"
)

type DlpProfile struct {
	pulumi.CustomResourceState

	Comment             pulumi.StringPtrOutput    `pulumi:"comment"`
	DlpLog              pulumi.StringOutput       `pulumi:"dlpLog"`
	DynamicSortSubtable pulumi.StringPtrOutput    `pulumi:"dynamicSortSubtable"`
	ExtendedLog         pulumi.StringOutput       `pulumi:"extendedLog"`
	FeatureSet          pulumi.StringOutput       `pulumi:"featureSet"`
	FullArchiveProto    pulumi.StringOutput       `pulumi:"fullArchiveProto"`
	GetAllTables        pulumi.StringPtrOutput    `pulumi:"getAllTables"`
	NacQuarLog          pulumi.StringOutput       `pulumi:"nacQuarLog"`
	Name                pulumi.StringOutput       `pulumi:"name"`
	ReplacemsgGroup     pulumi.StringOutput       `pulumi:"replacemsgGroup"`
	Rules               DlpProfileRuleArrayOutput `pulumi:"rules"`
	SummaryProto        pulumi.StringOutput       `pulumi:"summaryProto"`
	Vdomparam           pulumi.StringPtrOutput    `pulumi:"vdomparam"`
}

// NewDlpProfile registers a new resource with the given unique name, arguments, and options.
func NewDlpProfile(ctx *pulumi.Context,
	name string, args *DlpProfileArgs, opts ...pulumi.ResourceOption) (*DlpProfile, error) {
	if args == nil {
		args = &DlpProfileArgs{}
	}

	opts = internal.PkgResourceDefaultOpts(opts)
	var resource DlpProfile
	err := ctx.RegisterResource("fortios:index/dlpProfile:DlpProfile", name, args, &resource, opts...)
	if err != nil {
		return nil, err
	}
	return &resource, nil
}

// GetDlpProfile gets an existing DlpProfile resource's state with the given name, ID, and optional
// state properties that are used to uniquely qualify the lookup (nil if not required).
func GetDlpProfile(ctx *pulumi.Context,
	name string, id pulumi.IDInput, state *DlpProfileState, opts ...pulumi.ResourceOption) (*DlpProfile, error) {
	var resource DlpProfile
	err := ctx.ReadResource("fortios:index/dlpProfile:DlpProfile", name, id, state, &resource, opts...)
	if err != nil {
		return nil, err
	}
	return &resource, nil
}

// Input properties used for looking up and filtering DlpProfile resources.
type dlpProfileState struct {
	Comment             *string          `pulumi:"comment"`
	DlpLog              *string          `pulumi:"dlpLog"`
	DynamicSortSubtable *string          `pulumi:"dynamicSortSubtable"`
	ExtendedLog         *string          `pulumi:"extendedLog"`
	FeatureSet          *string          `pulumi:"featureSet"`
	FullArchiveProto    *string          `pulumi:"fullArchiveProto"`
	GetAllTables        *string          `pulumi:"getAllTables"`
	NacQuarLog          *string          `pulumi:"nacQuarLog"`
	Name                *string          `pulumi:"name"`
	ReplacemsgGroup     *string          `pulumi:"replacemsgGroup"`
	Rules               []DlpProfileRule `pulumi:"rules"`
	SummaryProto        *string          `pulumi:"summaryProto"`
	Vdomparam           *string          `pulumi:"vdomparam"`
}

type DlpProfileState struct {
	Comment             pulumi.StringPtrInput
	DlpLog              pulumi.StringPtrInput
	DynamicSortSubtable pulumi.StringPtrInput
	ExtendedLog         pulumi.StringPtrInput
	FeatureSet          pulumi.StringPtrInput
	FullArchiveProto    pulumi.StringPtrInput
	GetAllTables        pulumi.StringPtrInput
	NacQuarLog          pulumi.StringPtrInput
	Name                pulumi.StringPtrInput
	ReplacemsgGroup     pulumi.StringPtrInput
	Rules               DlpProfileRuleArrayInput
	SummaryProto        pulumi.StringPtrInput
	Vdomparam           pulumi.StringPtrInput
}

func (DlpProfileState) ElementType() reflect.Type {
	return reflect.TypeOf((*dlpProfileState)(nil)).Elem()
}

type dlpProfileArgs struct {
	Comment             *string          `pulumi:"comment"`
	DlpLog              *string          `pulumi:"dlpLog"`
	DynamicSortSubtable *string          `pulumi:"dynamicSortSubtable"`
	ExtendedLog         *string          `pulumi:"extendedLog"`
	FeatureSet          *string          `pulumi:"featureSet"`
	FullArchiveProto    *string          `pulumi:"fullArchiveProto"`
	GetAllTables        *string          `pulumi:"getAllTables"`
	NacQuarLog          *string          `pulumi:"nacQuarLog"`
	Name                *string          `pulumi:"name"`
	ReplacemsgGroup     *string          `pulumi:"replacemsgGroup"`
	Rules               []DlpProfileRule `pulumi:"rules"`
	SummaryProto        *string          `pulumi:"summaryProto"`
	Vdomparam           *string          `pulumi:"vdomparam"`
}

// The set of arguments for constructing a DlpProfile resource.
type DlpProfileArgs struct {
	Comment             pulumi.StringPtrInput
	DlpLog              pulumi.StringPtrInput
	DynamicSortSubtable pulumi.StringPtrInput
	ExtendedLog         pulumi.StringPtrInput
	FeatureSet          pulumi.StringPtrInput
	FullArchiveProto    pulumi.StringPtrInput
	GetAllTables        pulumi.StringPtrInput
	NacQuarLog          pulumi.StringPtrInput
	Name                pulumi.StringPtrInput
	ReplacemsgGroup     pulumi.StringPtrInput
	Rules               DlpProfileRuleArrayInput
	SummaryProto        pulumi.StringPtrInput
	Vdomparam           pulumi.StringPtrInput
}

func (DlpProfileArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*dlpProfileArgs)(nil)).Elem()
}

type DlpProfileInput interface {
	pulumi.Input

	ToDlpProfileOutput() DlpProfileOutput
	ToDlpProfileOutputWithContext(ctx context.Context) DlpProfileOutput
}

func (*DlpProfile) ElementType() reflect.Type {
	return reflect.TypeOf((**DlpProfile)(nil)).Elem()
}

func (i *DlpProfile) ToDlpProfileOutput() DlpProfileOutput {
	return i.ToDlpProfileOutputWithContext(context.Background())
}

func (i *DlpProfile) ToDlpProfileOutputWithContext(ctx context.Context) DlpProfileOutput {
	return pulumi.ToOutputWithContext(ctx, i).(DlpProfileOutput)
}

func (i *DlpProfile) ToOutput(ctx context.Context) pulumix.Output[*DlpProfile] {
	return pulumix.Output[*DlpProfile]{
		OutputState: i.ToDlpProfileOutputWithContext(ctx).OutputState,
	}
}

// DlpProfileArrayInput is an input type that accepts DlpProfileArray and DlpProfileArrayOutput values.
// You can construct a concrete instance of `DlpProfileArrayInput` via:
//
//	DlpProfileArray{ DlpProfileArgs{...} }
type DlpProfileArrayInput interface {
	pulumi.Input

	ToDlpProfileArrayOutput() DlpProfileArrayOutput
	ToDlpProfileArrayOutputWithContext(context.Context) DlpProfileArrayOutput
}

type DlpProfileArray []DlpProfileInput

func (DlpProfileArray) ElementType() reflect.Type {
	return reflect.TypeOf((*[]*DlpProfile)(nil)).Elem()
}

func (i DlpProfileArray) ToDlpProfileArrayOutput() DlpProfileArrayOutput {
	return i.ToDlpProfileArrayOutputWithContext(context.Background())
}

func (i DlpProfileArray) ToDlpProfileArrayOutputWithContext(ctx context.Context) DlpProfileArrayOutput {
	return pulumi.ToOutputWithContext(ctx, i).(DlpProfileArrayOutput)
}

func (i DlpProfileArray) ToOutput(ctx context.Context) pulumix.Output[[]*DlpProfile] {
	return pulumix.Output[[]*DlpProfile]{
		OutputState: i.ToDlpProfileArrayOutputWithContext(ctx).OutputState,
	}
}

// DlpProfileMapInput is an input type that accepts DlpProfileMap and DlpProfileMapOutput values.
// You can construct a concrete instance of `DlpProfileMapInput` via:
//
//	DlpProfileMap{ "key": DlpProfileArgs{...} }
type DlpProfileMapInput interface {
	pulumi.Input

	ToDlpProfileMapOutput() DlpProfileMapOutput
	ToDlpProfileMapOutputWithContext(context.Context) DlpProfileMapOutput
}

type DlpProfileMap map[string]DlpProfileInput

func (DlpProfileMap) ElementType() reflect.Type {
	return reflect.TypeOf((*map[string]*DlpProfile)(nil)).Elem()
}

func (i DlpProfileMap) ToDlpProfileMapOutput() DlpProfileMapOutput {
	return i.ToDlpProfileMapOutputWithContext(context.Background())
}

func (i DlpProfileMap) ToDlpProfileMapOutputWithContext(ctx context.Context) DlpProfileMapOutput {
	return pulumi.ToOutputWithContext(ctx, i).(DlpProfileMapOutput)
}

func (i DlpProfileMap) ToOutput(ctx context.Context) pulumix.Output[map[string]*DlpProfile] {
	return pulumix.Output[map[string]*DlpProfile]{
		OutputState: i.ToDlpProfileMapOutputWithContext(ctx).OutputState,
	}
}

type DlpProfileOutput struct{ *pulumi.OutputState }

func (DlpProfileOutput) ElementType() reflect.Type {
	return reflect.TypeOf((**DlpProfile)(nil)).Elem()
}

func (o DlpProfileOutput) ToDlpProfileOutput() DlpProfileOutput {
	return o
}

func (o DlpProfileOutput) ToDlpProfileOutputWithContext(ctx context.Context) DlpProfileOutput {
	return o
}

func (o DlpProfileOutput) ToOutput(ctx context.Context) pulumix.Output[*DlpProfile] {
	return pulumix.Output[*DlpProfile]{
		OutputState: o.OutputState,
	}
}

func (o DlpProfileOutput) Comment() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *DlpProfile) pulumi.StringPtrOutput { return v.Comment }).(pulumi.StringPtrOutput)
}

func (o DlpProfileOutput) DlpLog() pulumi.StringOutput {
	return o.ApplyT(func(v *DlpProfile) pulumi.StringOutput { return v.DlpLog }).(pulumi.StringOutput)
}

func (o DlpProfileOutput) DynamicSortSubtable() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *DlpProfile) pulumi.StringPtrOutput { return v.DynamicSortSubtable }).(pulumi.StringPtrOutput)
}

func (o DlpProfileOutput) ExtendedLog() pulumi.StringOutput {
	return o.ApplyT(func(v *DlpProfile) pulumi.StringOutput { return v.ExtendedLog }).(pulumi.StringOutput)
}

func (o DlpProfileOutput) FeatureSet() pulumi.StringOutput {
	return o.ApplyT(func(v *DlpProfile) pulumi.StringOutput { return v.FeatureSet }).(pulumi.StringOutput)
}

func (o DlpProfileOutput) FullArchiveProto() pulumi.StringOutput {
	return o.ApplyT(func(v *DlpProfile) pulumi.StringOutput { return v.FullArchiveProto }).(pulumi.StringOutput)
}

func (o DlpProfileOutput) GetAllTables() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *DlpProfile) pulumi.StringPtrOutput { return v.GetAllTables }).(pulumi.StringPtrOutput)
}

func (o DlpProfileOutput) NacQuarLog() pulumi.StringOutput {
	return o.ApplyT(func(v *DlpProfile) pulumi.StringOutput { return v.NacQuarLog }).(pulumi.StringOutput)
}

func (o DlpProfileOutput) Name() pulumi.StringOutput {
	return o.ApplyT(func(v *DlpProfile) pulumi.StringOutput { return v.Name }).(pulumi.StringOutput)
}

func (o DlpProfileOutput) ReplacemsgGroup() pulumi.StringOutput {
	return o.ApplyT(func(v *DlpProfile) pulumi.StringOutput { return v.ReplacemsgGroup }).(pulumi.StringOutput)
}

func (o DlpProfileOutput) Rules() DlpProfileRuleArrayOutput {
	return o.ApplyT(func(v *DlpProfile) DlpProfileRuleArrayOutput { return v.Rules }).(DlpProfileRuleArrayOutput)
}

func (o DlpProfileOutput) SummaryProto() pulumi.StringOutput {
	return o.ApplyT(func(v *DlpProfile) pulumi.StringOutput { return v.SummaryProto }).(pulumi.StringOutput)
}

func (o DlpProfileOutput) Vdomparam() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *DlpProfile) pulumi.StringPtrOutput { return v.Vdomparam }).(pulumi.StringPtrOutput)
}

type DlpProfileArrayOutput struct{ *pulumi.OutputState }

func (DlpProfileArrayOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*[]*DlpProfile)(nil)).Elem()
}

func (o DlpProfileArrayOutput) ToDlpProfileArrayOutput() DlpProfileArrayOutput {
	return o
}

func (o DlpProfileArrayOutput) ToDlpProfileArrayOutputWithContext(ctx context.Context) DlpProfileArrayOutput {
	return o
}

func (o DlpProfileArrayOutput) ToOutput(ctx context.Context) pulumix.Output[[]*DlpProfile] {
	return pulumix.Output[[]*DlpProfile]{
		OutputState: o.OutputState,
	}
}

func (o DlpProfileArrayOutput) Index(i pulumi.IntInput) DlpProfileOutput {
	return pulumi.All(o, i).ApplyT(func(vs []interface{}) *DlpProfile {
		return vs[0].([]*DlpProfile)[vs[1].(int)]
	}).(DlpProfileOutput)
}

type DlpProfileMapOutput struct{ *pulumi.OutputState }

func (DlpProfileMapOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*map[string]*DlpProfile)(nil)).Elem()
}

func (o DlpProfileMapOutput) ToDlpProfileMapOutput() DlpProfileMapOutput {
	return o
}

func (o DlpProfileMapOutput) ToDlpProfileMapOutputWithContext(ctx context.Context) DlpProfileMapOutput {
	return o
}

func (o DlpProfileMapOutput) ToOutput(ctx context.Context) pulumix.Output[map[string]*DlpProfile] {
	return pulumix.Output[map[string]*DlpProfile]{
		OutputState: o.OutputState,
	}
}

func (o DlpProfileMapOutput) MapIndex(k pulumi.StringInput) DlpProfileOutput {
	return pulumi.All(o, k).ApplyT(func(vs []interface{}) *DlpProfile {
		return vs[0].(map[string]*DlpProfile)[vs[1].(string)]
	}).(DlpProfileOutput)
}

func init() {
	pulumi.RegisterInputType(reflect.TypeOf((*DlpProfileInput)(nil)).Elem(), &DlpProfile{})
	pulumi.RegisterInputType(reflect.TypeOf((*DlpProfileArrayInput)(nil)).Elem(), DlpProfileArray{})
	pulumi.RegisterInputType(reflect.TypeOf((*DlpProfileMapInput)(nil)).Elem(), DlpProfileMap{})
	pulumi.RegisterOutputType(DlpProfileOutput{})
	pulumi.RegisterOutputType(DlpProfileArrayOutput{})
	pulumi.RegisterOutputType(DlpProfileMapOutput{})
}
