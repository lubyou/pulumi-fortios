// Code generated by the Pulumi Terraform Bridge (tfgen) Tool DO NOT EDIT.
// *** WARNING: Do not edit by hand unless you're certain you know what you are doing! ***

package fortios

import (
	"context"
	"reflect"

	"github.com/lubyou/pulumi-fortios/sdk/go/fortios/internal"
	"github.com/pulumi/pulumi/sdk/v3/go/pulumi"
	"github.com/pulumi/pulumi/sdk/v3/go/pulumix"
)

type SwitchControllerSwitchLog struct {
	pulumi.CustomResourceState

	Severity  pulumi.StringOutput    `pulumi:"severity"`
	Status    pulumi.StringOutput    `pulumi:"status"`
	Vdomparam pulumi.StringPtrOutput `pulumi:"vdomparam"`
}

// NewSwitchControllerSwitchLog registers a new resource with the given unique name, arguments, and options.
func NewSwitchControllerSwitchLog(ctx *pulumi.Context,
	name string, args *SwitchControllerSwitchLogArgs, opts ...pulumi.ResourceOption) (*SwitchControllerSwitchLog, error) {
	if args == nil {
		args = &SwitchControllerSwitchLogArgs{}
	}

	opts = internal.PkgResourceDefaultOpts(opts)
	var resource SwitchControllerSwitchLog
	err := ctx.RegisterResource("fortios:index/switchControllerSwitchLog:SwitchControllerSwitchLog", name, args, &resource, opts...)
	if err != nil {
		return nil, err
	}
	return &resource, nil
}

// GetSwitchControllerSwitchLog gets an existing SwitchControllerSwitchLog resource's state with the given name, ID, and optional
// state properties that are used to uniquely qualify the lookup (nil if not required).
func GetSwitchControllerSwitchLog(ctx *pulumi.Context,
	name string, id pulumi.IDInput, state *SwitchControllerSwitchLogState, opts ...pulumi.ResourceOption) (*SwitchControllerSwitchLog, error) {
	var resource SwitchControllerSwitchLog
	err := ctx.ReadResource("fortios:index/switchControllerSwitchLog:SwitchControllerSwitchLog", name, id, state, &resource, opts...)
	if err != nil {
		return nil, err
	}
	return &resource, nil
}

// Input properties used for looking up and filtering SwitchControllerSwitchLog resources.
type switchControllerSwitchLogState struct {
	Severity  *string `pulumi:"severity"`
	Status    *string `pulumi:"status"`
	Vdomparam *string `pulumi:"vdomparam"`
}

type SwitchControllerSwitchLogState struct {
	Severity  pulumi.StringPtrInput
	Status    pulumi.StringPtrInput
	Vdomparam pulumi.StringPtrInput
}

func (SwitchControllerSwitchLogState) ElementType() reflect.Type {
	return reflect.TypeOf((*switchControllerSwitchLogState)(nil)).Elem()
}

type switchControllerSwitchLogArgs struct {
	Severity  *string `pulumi:"severity"`
	Status    *string `pulumi:"status"`
	Vdomparam *string `pulumi:"vdomparam"`
}

// The set of arguments for constructing a SwitchControllerSwitchLog resource.
type SwitchControllerSwitchLogArgs struct {
	Severity  pulumi.StringPtrInput
	Status    pulumi.StringPtrInput
	Vdomparam pulumi.StringPtrInput
}

func (SwitchControllerSwitchLogArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*switchControllerSwitchLogArgs)(nil)).Elem()
}

type SwitchControllerSwitchLogInput interface {
	pulumi.Input

	ToSwitchControllerSwitchLogOutput() SwitchControllerSwitchLogOutput
	ToSwitchControllerSwitchLogOutputWithContext(ctx context.Context) SwitchControllerSwitchLogOutput
}

func (*SwitchControllerSwitchLog) ElementType() reflect.Type {
	return reflect.TypeOf((**SwitchControllerSwitchLog)(nil)).Elem()
}

func (i *SwitchControllerSwitchLog) ToSwitchControllerSwitchLogOutput() SwitchControllerSwitchLogOutput {
	return i.ToSwitchControllerSwitchLogOutputWithContext(context.Background())
}

func (i *SwitchControllerSwitchLog) ToSwitchControllerSwitchLogOutputWithContext(ctx context.Context) SwitchControllerSwitchLogOutput {
	return pulumi.ToOutputWithContext(ctx, i).(SwitchControllerSwitchLogOutput)
}

func (i *SwitchControllerSwitchLog) ToOutput(ctx context.Context) pulumix.Output[*SwitchControllerSwitchLog] {
	return pulumix.Output[*SwitchControllerSwitchLog]{
		OutputState: i.ToSwitchControllerSwitchLogOutputWithContext(ctx).OutputState,
	}
}

// SwitchControllerSwitchLogArrayInput is an input type that accepts SwitchControllerSwitchLogArray and SwitchControllerSwitchLogArrayOutput values.
// You can construct a concrete instance of `SwitchControllerSwitchLogArrayInput` via:
//
//	SwitchControllerSwitchLogArray{ SwitchControllerSwitchLogArgs{...} }
type SwitchControllerSwitchLogArrayInput interface {
	pulumi.Input

	ToSwitchControllerSwitchLogArrayOutput() SwitchControllerSwitchLogArrayOutput
	ToSwitchControllerSwitchLogArrayOutputWithContext(context.Context) SwitchControllerSwitchLogArrayOutput
}

type SwitchControllerSwitchLogArray []SwitchControllerSwitchLogInput

func (SwitchControllerSwitchLogArray) ElementType() reflect.Type {
	return reflect.TypeOf((*[]*SwitchControllerSwitchLog)(nil)).Elem()
}

func (i SwitchControllerSwitchLogArray) ToSwitchControllerSwitchLogArrayOutput() SwitchControllerSwitchLogArrayOutput {
	return i.ToSwitchControllerSwitchLogArrayOutputWithContext(context.Background())
}

func (i SwitchControllerSwitchLogArray) ToSwitchControllerSwitchLogArrayOutputWithContext(ctx context.Context) SwitchControllerSwitchLogArrayOutput {
	return pulumi.ToOutputWithContext(ctx, i).(SwitchControllerSwitchLogArrayOutput)
}

func (i SwitchControllerSwitchLogArray) ToOutput(ctx context.Context) pulumix.Output[[]*SwitchControllerSwitchLog] {
	return pulumix.Output[[]*SwitchControllerSwitchLog]{
		OutputState: i.ToSwitchControllerSwitchLogArrayOutputWithContext(ctx).OutputState,
	}
}

// SwitchControllerSwitchLogMapInput is an input type that accepts SwitchControllerSwitchLogMap and SwitchControllerSwitchLogMapOutput values.
// You can construct a concrete instance of `SwitchControllerSwitchLogMapInput` via:
//
//	SwitchControllerSwitchLogMap{ "key": SwitchControllerSwitchLogArgs{...} }
type SwitchControllerSwitchLogMapInput interface {
	pulumi.Input

	ToSwitchControllerSwitchLogMapOutput() SwitchControllerSwitchLogMapOutput
	ToSwitchControllerSwitchLogMapOutputWithContext(context.Context) SwitchControllerSwitchLogMapOutput
}

type SwitchControllerSwitchLogMap map[string]SwitchControllerSwitchLogInput

func (SwitchControllerSwitchLogMap) ElementType() reflect.Type {
	return reflect.TypeOf((*map[string]*SwitchControllerSwitchLog)(nil)).Elem()
}

func (i SwitchControllerSwitchLogMap) ToSwitchControllerSwitchLogMapOutput() SwitchControllerSwitchLogMapOutput {
	return i.ToSwitchControllerSwitchLogMapOutputWithContext(context.Background())
}

func (i SwitchControllerSwitchLogMap) ToSwitchControllerSwitchLogMapOutputWithContext(ctx context.Context) SwitchControllerSwitchLogMapOutput {
	return pulumi.ToOutputWithContext(ctx, i).(SwitchControllerSwitchLogMapOutput)
}

func (i SwitchControllerSwitchLogMap) ToOutput(ctx context.Context) pulumix.Output[map[string]*SwitchControllerSwitchLog] {
	return pulumix.Output[map[string]*SwitchControllerSwitchLog]{
		OutputState: i.ToSwitchControllerSwitchLogMapOutputWithContext(ctx).OutputState,
	}
}

type SwitchControllerSwitchLogOutput struct{ *pulumi.OutputState }

func (SwitchControllerSwitchLogOutput) ElementType() reflect.Type {
	return reflect.TypeOf((**SwitchControllerSwitchLog)(nil)).Elem()
}

func (o SwitchControllerSwitchLogOutput) ToSwitchControllerSwitchLogOutput() SwitchControllerSwitchLogOutput {
	return o
}

func (o SwitchControllerSwitchLogOutput) ToSwitchControllerSwitchLogOutputWithContext(ctx context.Context) SwitchControllerSwitchLogOutput {
	return o
}

func (o SwitchControllerSwitchLogOutput) ToOutput(ctx context.Context) pulumix.Output[*SwitchControllerSwitchLog] {
	return pulumix.Output[*SwitchControllerSwitchLog]{
		OutputState: o.OutputState,
	}
}

func (o SwitchControllerSwitchLogOutput) Severity() pulumi.StringOutput {
	return o.ApplyT(func(v *SwitchControllerSwitchLog) pulumi.StringOutput { return v.Severity }).(pulumi.StringOutput)
}

func (o SwitchControllerSwitchLogOutput) Status() pulumi.StringOutput {
	return o.ApplyT(func(v *SwitchControllerSwitchLog) pulumi.StringOutput { return v.Status }).(pulumi.StringOutput)
}

func (o SwitchControllerSwitchLogOutput) Vdomparam() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *SwitchControllerSwitchLog) pulumi.StringPtrOutput { return v.Vdomparam }).(pulumi.StringPtrOutput)
}

type SwitchControllerSwitchLogArrayOutput struct{ *pulumi.OutputState }

func (SwitchControllerSwitchLogArrayOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*[]*SwitchControllerSwitchLog)(nil)).Elem()
}

func (o SwitchControllerSwitchLogArrayOutput) ToSwitchControllerSwitchLogArrayOutput() SwitchControllerSwitchLogArrayOutput {
	return o
}

func (o SwitchControllerSwitchLogArrayOutput) ToSwitchControllerSwitchLogArrayOutputWithContext(ctx context.Context) SwitchControllerSwitchLogArrayOutput {
	return o
}

func (o SwitchControllerSwitchLogArrayOutput) ToOutput(ctx context.Context) pulumix.Output[[]*SwitchControllerSwitchLog] {
	return pulumix.Output[[]*SwitchControllerSwitchLog]{
		OutputState: o.OutputState,
	}
}

func (o SwitchControllerSwitchLogArrayOutput) Index(i pulumi.IntInput) SwitchControllerSwitchLogOutput {
	return pulumi.All(o, i).ApplyT(func(vs []interface{}) *SwitchControllerSwitchLog {
		return vs[0].([]*SwitchControllerSwitchLog)[vs[1].(int)]
	}).(SwitchControllerSwitchLogOutput)
}

type SwitchControllerSwitchLogMapOutput struct{ *pulumi.OutputState }

func (SwitchControllerSwitchLogMapOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*map[string]*SwitchControllerSwitchLog)(nil)).Elem()
}

func (o SwitchControllerSwitchLogMapOutput) ToSwitchControllerSwitchLogMapOutput() SwitchControllerSwitchLogMapOutput {
	return o
}

func (o SwitchControllerSwitchLogMapOutput) ToSwitchControllerSwitchLogMapOutputWithContext(ctx context.Context) SwitchControllerSwitchLogMapOutput {
	return o
}

func (o SwitchControllerSwitchLogMapOutput) ToOutput(ctx context.Context) pulumix.Output[map[string]*SwitchControllerSwitchLog] {
	return pulumix.Output[map[string]*SwitchControllerSwitchLog]{
		OutputState: o.OutputState,
	}
}

func (o SwitchControllerSwitchLogMapOutput) MapIndex(k pulumi.StringInput) SwitchControllerSwitchLogOutput {
	return pulumi.All(o, k).ApplyT(func(vs []interface{}) *SwitchControllerSwitchLog {
		return vs[0].(map[string]*SwitchControllerSwitchLog)[vs[1].(string)]
	}).(SwitchControllerSwitchLogOutput)
}

func init() {
	pulumi.RegisterInputType(reflect.TypeOf((*SwitchControllerSwitchLogInput)(nil)).Elem(), &SwitchControllerSwitchLog{})
	pulumi.RegisterInputType(reflect.TypeOf((*SwitchControllerSwitchLogArrayInput)(nil)).Elem(), SwitchControllerSwitchLogArray{})
	pulumi.RegisterInputType(reflect.TypeOf((*SwitchControllerSwitchLogMapInput)(nil)).Elem(), SwitchControllerSwitchLogMap{})
	pulumi.RegisterOutputType(SwitchControllerSwitchLogOutput{})
	pulumi.RegisterOutputType(SwitchControllerSwitchLogArrayOutput{})
	pulumi.RegisterOutputType(SwitchControllerSwitchLogMapOutput{})
}
