// *** WARNING: this file was generated by the Pulumi Terraform Bridge (tfgen) Tool. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

package fortios

import (
	"context"
	"reflect"

	"github.com/pulumi/pulumi/sdk/v3/go/pulumi"
)

// Configure quarantine support.
//
// ## Example Usage
//
// ```go
// package main
//
// import (
// 	"github.com/lubyou/pulumi-fortios/sdk/go/fortios"
// 	"github.com/pulumi/pulumi/sdk/v3/go/pulumi"
// )
//
// func main() {
// 	pulumi.Run(func(ctx *pulumi.Context) error {
// 		_, err := fortios.NewUserQuarantine(ctx, "trname", &fortios.UserQuarantineArgs{
// 			Quarantine: pulumi.String("enable"),
// 		})
// 		if err != nil {
// 			return err
// 		}
// 		return nil
// 	})
// }
// ```
//
// ## Import
//
// User Quarantine can be imported using any of these accepted formats$ export "FORTIOS_IMPORT_TABLE"="true"
//
// ```sh
//  $ pulumi import fortios:index/userQuarantine:UserQuarantine labelname UserQuarantine
// ```
//
//  $ unset "FORTIOS_IMPORT_TABLE"
type UserQuarantine struct {
	pulumi.CustomResourceState

	// true or false, set this parameter to true when using dynamic forEach + toset to configure and sort sub-tables, please do not set this parameter when configuring static sub-tables.
	DynamicSortSubtable pulumi.StringPtrOutput `pulumi:"dynamicSortSubtable"`
	// Firewall address group which includes all quarantine MAC address.
	FirewallGroups pulumi.StringOutput `pulumi:"firewallGroups"`
	// Enable/disable quarantine. Valid values: `enable`, `disable`.
	Quarantine pulumi.StringOutput `pulumi:"quarantine"`
	// Quarantine entry to hold multiple MACs. The structure of `targets` block is documented below.
	Targets UserQuarantineTargetArrayOutput `pulumi:"targets"`
	// Traffic policy for quarantined MACs.
	TrafficPolicy pulumi.StringOutput `pulumi:"trafficPolicy"`
	// Specifies the vdom to which the resource will be applied when the FortiGate unit is running in VDOM mode. Only one vdom can be specified. If you want to inherit the vdom configuration of the provider, please do not set this parameter.
	Vdomparam pulumi.StringPtrOutput `pulumi:"vdomparam"`
}

// NewUserQuarantine registers a new resource with the given unique name, arguments, and options.
func NewUserQuarantine(ctx *pulumi.Context,
	name string, args *UserQuarantineArgs, opts ...pulumi.ResourceOption) (*UserQuarantine, error) {
	if args == nil {
		args = &UserQuarantineArgs{}
	}

	opts = pkgResourceDefaultOpts(opts)
	var resource UserQuarantine
	err := ctx.RegisterResource("fortios:index/userQuarantine:UserQuarantine", name, args, &resource, opts...)
	if err != nil {
		return nil, err
	}
	return &resource, nil
}

// GetUserQuarantine gets an existing UserQuarantine resource's state with the given name, ID, and optional
// state properties that are used to uniquely qualify the lookup (nil if not required).
func GetUserQuarantine(ctx *pulumi.Context,
	name string, id pulumi.IDInput, state *UserQuarantineState, opts ...pulumi.ResourceOption) (*UserQuarantine, error) {
	var resource UserQuarantine
	err := ctx.ReadResource("fortios:index/userQuarantine:UserQuarantine", name, id, state, &resource, opts...)
	if err != nil {
		return nil, err
	}
	return &resource, nil
}

// Input properties used for looking up and filtering UserQuarantine resources.
type userQuarantineState struct {
	// true or false, set this parameter to true when using dynamic forEach + toset to configure and sort sub-tables, please do not set this parameter when configuring static sub-tables.
	DynamicSortSubtable *string `pulumi:"dynamicSortSubtable"`
	// Firewall address group which includes all quarantine MAC address.
	FirewallGroups *string `pulumi:"firewallGroups"`
	// Enable/disable quarantine. Valid values: `enable`, `disable`.
	Quarantine *string `pulumi:"quarantine"`
	// Quarantine entry to hold multiple MACs. The structure of `targets` block is documented below.
	Targets []UserQuarantineTarget `pulumi:"targets"`
	// Traffic policy for quarantined MACs.
	TrafficPolicy *string `pulumi:"trafficPolicy"`
	// Specifies the vdom to which the resource will be applied when the FortiGate unit is running in VDOM mode. Only one vdom can be specified. If you want to inherit the vdom configuration of the provider, please do not set this parameter.
	Vdomparam *string `pulumi:"vdomparam"`
}

type UserQuarantineState struct {
	// true or false, set this parameter to true when using dynamic forEach + toset to configure and sort sub-tables, please do not set this parameter when configuring static sub-tables.
	DynamicSortSubtable pulumi.StringPtrInput
	// Firewall address group which includes all quarantine MAC address.
	FirewallGroups pulumi.StringPtrInput
	// Enable/disable quarantine. Valid values: `enable`, `disable`.
	Quarantine pulumi.StringPtrInput
	// Quarantine entry to hold multiple MACs. The structure of `targets` block is documented below.
	Targets UserQuarantineTargetArrayInput
	// Traffic policy for quarantined MACs.
	TrafficPolicy pulumi.StringPtrInput
	// Specifies the vdom to which the resource will be applied when the FortiGate unit is running in VDOM mode. Only one vdom can be specified. If you want to inherit the vdom configuration of the provider, please do not set this parameter.
	Vdomparam pulumi.StringPtrInput
}

func (UserQuarantineState) ElementType() reflect.Type {
	return reflect.TypeOf((*userQuarantineState)(nil)).Elem()
}

type userQuarantineArgs struct {
	// true or false, set this parameter to true when using dynamic forEach + toset to configure and sort sub-tables, please do not set this parameter when configuring static sub-tables.
	DynamicSortSubtable *string `pulumi:"dynamicSortSubtable"`
	// Firewall address group which includes all quarantine MAC address.
	FirewallGroups *string `pulumi:"firewallGroups"`
	// Enable/disable quarantine. Valid values: `enable`, `disable`.
	Quarantine *string `pulumi:"quarantine"`
	// Quarantine entry to hold multiple MACs. The structure of `targets` block is documented below.
	Targets []UserQuarantineTarget `pulumi:"targets"`
	// Traffic policy for quarantined MACs.
	TrafficPolicy *string `pulumi:"trafficPolicy"`
	// Specifies the vdom to which the resource will be applied when the FortiGate unit is running in VDOM mode. Only one vdom can be specified. If you want to inherit the vdom configuration of the provider, please do not set this parameter.
	Vdomparam *string `pulumi:"vdomparam"`
}

// The set of arguments for constructing a UserQuarantine resource.
type UserQuarantineArgs struct {
	// true or false, set this parameter to true when using dynamic forEach + toset to configure and sort sub-tables, please do not set this parameter when configuring static sub-tables.
	DynamicSortSubtable pulumi.StringPtrInput
	// Firewall address group which includes all quarantine MAC address.
	FirewallGroups pulumi.StringPtrInput
	// Enable/disable quarantine. Valid values: `enable`, `disable`.
	Quarantine pulumi.StringPtrInput
	// Quarantine entry to hold multiple MACs. The structure of `targets` block is documented below.
	Targets UserQuarantineTargetArrayInput
	// Traffic policy for quarantined MACs.
	TrafficPolicy pulumi.StringPtrInput
	// Specifies the vdom to which the resource will be applied when the FortiGate unit is running in VDOM mode. Only one vdom can be specified. If you want to inherit the vdom configuration of the provider, please do not set this parameter.
	Vdomparam pulumi.StringPtrInput
}

func (UserQuarantineArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*userQuarantineArgs)(nil)).Elem()
}

type UserQuarantineInput interface {
	pulumi.Input

	ToUserQuarantineOutput() UserQuarantineOutput
	ToUserQuarantineOutputWithContext(ctx context.Context) UserQuarantineOutput
}

func (*UserQuarantine) ElementType() reflect.Type {
	return reflect.TypeOf((**UserQuarantine)(nil)).Elem()
}

func (i *UserQuarantine) ToUserQuarantineOutput() UserQuarantineOutput {
	return i.ToUserQuarantineOutputWithContext(context.Background())
}

func (i *UserQuarantine) ToUserQuarantineOutputWithContext(ctx context.Context) UserQuarantineOutput {
	return pulumi.ToOutputWithContext(ctx, i).(UserQuarantineOutput)
}

// UserQuarantineArrayInput is an input type that accepts UserQuarantineArray and UserQuarantineArrayOutput values.
// You can construct a concrete instance of `UserQuarantineArrayInput` via:
//
//          UserQuarantineArray{ UserQuarantineArgs{...} }
type UserQuarantineArrayInput interface {
	pulumi.Input

	ToUserQuarantineArrayOutput() UserQuarantineArrayOutput
	ToUserQuarantineArrayOutputWithContext(context.Context) UserQuarantineArrayOutput
}

type UserQuarantineArray []UserQuarantineInput

func (UserQuarantineArray) ElementType() reflect.Type {
	return reflect.TypeOf((*[]*UserQuarantine)(nil)).Elem()
}

func (i UserQuarantineArray) ToUserQuarantineArrayOutput() UserQuarantineArrayOutput {
	return i.ToUserQuarantineArrayOutputWithContext(context.Background())
}

func (i UserQuarantineArray) ToUserQuarantineArrayOutputWithContext(ctx context.Context) UserQuarantineArrayOutput {
	return pulumi.ToOutputWithContext(ctx, i).(UserQuarantineArrayOutput)
}

// UserQuarantineMapInput is an input type that accepts UserQuarantineMap and UserQuarantineMapOutput values.
// You can construct a concrete instance of `UserQuarantineMapInput` via:
//
//          UserQuarantineMap{ "key": UserQuarantineArgs{...} }
type UserQuarantineMapInput interface {
	pulumi.Input

	ToUserQuarantineMapOutput() UserQuarantineMapOutput
	ToUserQuarantineMapOutputWithContext(context.Context) UserQuarantineMapOutput
}

type UserQuarantineMap map[string]UserQuarantineInput

func (UserQuarantineMap) ElementType() reflect.Type {
	return reflect.TypeOf((*map[string]*UserQuarantine)(nil)).Elem()
}

func (i UserQuarantineMap) ToUserQuarantineMapOutput() UserQuarantineMapOutput {
	return i.ToUserQuarantineMapOutputWithContext(context.Background())
}

func (i UserQuarantineMap) ToUserQuarantineMapOutputWithContext(ctx context.Context) UserQuarantineMapOutput {
	return pulumi.ToOutputWithContext(ctx, i).(UserQuarantineMapOutput)
}

type UserQuarantineOutput struct{ *pulumi.OutputState }

func (UserQuarantineOutput) ElementType() reflect.Type {
	return reflect.TypeOf((**UserQuarantine)(nil)).Elem()
}

func (o UserQuarantineOutput) ToUserQuarantineOutput() UserQuarantineOutput {
	return o
}

func (o UserQuarantineOutput) ToUserQuarantineOutputWithContext(ctx context.Context) UserQuarantineOutput {
	return o
}

type UserQuarantineArrayOutput struct{ *pulumi.OutputState }

func (UserQuarantineArrayOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*[]*UserQuarantine)(nil)).Elem()
}

func (o UserQuarantineArrayOutput) ToUserQuarantineArrayOutput() UserQuarantineArrayOutput {
	return o
}

func (o UserQuarantineArrayOutput) ToUserQuarantineArrayOutputWithContext(ctx context.Context) UserQuarantineArrayOutput {
	return o
}

func (o UserQuarantineArrayOutput) Index(i pulumi.IntInput) UserQuarantineOutput {
	return pulumi.All(o, i).ApplyT(func(vs []interface{}) *UserQuarantine {
		return vs[0].([]*UserQuarantine)[vs[1].(int)]
	}).(UserQuarantineOutput)
}

type UserQuarantineMapOutput struct{ *pulumi.OutputState }

func (UserQuarantineMapOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*map[string]*UserQuarantine)(nil)).Elem()
}

func (o UserQuarantineMapOutput) ToUserQuarantineMapOutput() UserQuarantineMapOutput {
	return o
}

func (o UserQuarantineMapOutput) ToUserQuarantineMapOutputWithContext(ctx context.Context) UserQuarantineMapOutput {
	return o
}

func (o UserQuarantineMapOutput) MapIndex(k pulumi.StringInput) UserQuarantineOutput {
	return pulumi.All(o, k).ApplyT(func(vs []interface{}) *UserQuarantine {
		return vs[0].(map[string]*UserQuarantine)[vs[1].(string)]
	}).(UserQuarantineOutput)
}

func init() {
	pulumi.RegisterInputType(reflect.TypeOf((*UserQuarantineInput)(nil)).Elem(), &UserQuarantine{})
	pulumi.RegisterInputType(reflect.TypeOf((*UserQuarantineArrayInput)(nil)).Elem(), UserQuarantineArray{})
	pulumi.RegisterInputType(reflect.TypeOf((*UserQuarantineMapInput)(nil)).Elem(), UserQuarantineMap{})
	pulumi.RegisterOutputType(UserQuarantineOutput{})
	pulumi.RegisterOutputType(UserQuarantineArrayOutput{})
	pulumi.RegisterOutputType(UserQuarantineMapOutput{})
}
