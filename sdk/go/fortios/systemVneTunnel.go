// Code generated by the Pulumi Terraform Bridge (tfgen) Tool DO NOT EDIT.
// *** WARNING: Do not edit by hand unless you're certain you know what you are doing! ***

package fortios

import (
	"context"
	"reflect"

	"github.com/pulumi/pulumi/sdk/v3/go/pulumi"
)

type SystemVneTunnel struct {
	pulumi.CustomResourceState

	AutoAsicOffload pulumi.StringOutput    `pulumi:"autoAsicOffload"`
	BmrHostname     pulumi.StringPtrOutput `pulumi:"bmrHostname"`
	Br              pulumi.StringOutput    `pulumi:"br"`
	HttpPassword    pulumi.StringPtrOutput `pulumi:"httpPassword"`
	HttpUsername    pulumi.StringOutput    `pulumi:"httpUsername"`
	Interface       pulumi.StringOutput    `pulumi:"interface"`
	Ipv4Address     pulumi.StringOutput    `pulumi:"ipv4Address"`
	Mode            pulumi.StringOutput    `pulumi:"mode"`
	SslCertificate  pulumi.StringOutput    `pulumi:"sslCertificate"`
	Status          pulumi.StringOutput    `pulumi:"status"`
	UpdateUrl       pulumi.StringOutput    `pulumi:"updateUrl"`
	Vdomparam       pulumi.StringPtrOutput `pulumi:"vdomparam"`
}

// NewSystemVneTunnel registers a new resource with the given unique name, arguments, and options.
func NewSystemVneTunnel(ctx *pulumi.Context,
	name string, args *SystemVneTunnelArgs, opts ...pulumi.ResourceOption) (*SystemVneTunnel, error) {
	if args == nil {
		args = &SystemVneTunnelArgs{}
	}

	if args.BmrHostname != nil {
		args.BmrHostname = pulumi.ToSecret(args.BmrHostname).(pulumi.StringPtrInput)
	}
	secrets := pulumi.AdditionalSecretOutputs([]string{
		"bmrHostname",
	})
	opts = append(opts, secrets)
	opts = pkgResourceDefaultOpts(opts)
	var resource SystemVneTunnel
	err := ctx.RegisterResource("fortios:index/systemVneTunnel:SystemVneTunnel", name, args, &resource, opts...)
	if err != nil {
		return nil, err
	}
	return &resource, nil
}

// GetSystemVneTunnel gets an existing SystemVneTunnel resource's state with the given name, ID, and optional
// state properties that are used to uniquely qualify the lookup (nil if not required).
func GetSystemVneTunnel(ctx *pulumi.Context,
	name string, id pulumi.IDInput, state *SystemVneTunnelState, opts ...pulumi.ResourceOption) (*SystemVneTunnel, error) {
	var resource SystemVneTunnel
	err := ctx.ReadResource("fortios:index/systemVneTunnel:SystemVneTunnel", name, id, state, &resource, opts...)
	if err != nil {
		return nil, err
	}
	return &resource, nil
}

// Input properties used for looking up and filtering SystemVneTunnel resources.
type systemVneTunnelState struct {
	AutoAsicOffload *string `pulumi:"autoAsicOffload"`
	BmrHostname     *string `pulumi:"bmrHostname"`
	Br              *string `pulumi:"br"`
	HttpPassword    *string `pulumi:"httpPassword"`
	HttpUsername    *string `pulumi:"httpUsername"`
	Interface       *string `pulumi:"interface"`
	Ipv4Address     *string `pulumi:"ipv4Address"`
	Mode            *string `pulumi:"mode"`
	SslCertificate  *string `pulumi:"sslCertificate"`
	Status          *string `pulumi:"status"`
	UpdateUrl       *string `pulumi:"updateUrl"`
	Vdomparam       *string `pulumi:"vdomparam"`
}

type SystemVneTunnelState struct {
	AutoAsicOffload pulumi.StringPtrInput
	BmrHostname     pulumi.StringPtrInput
	Br              pulumi.StringPtrInput
	HttpPassword    pulumi.StringPtrInput
	HttpUsername    pulumi.StringPtrInput
	Interface       pulumi.StringPtrInput
	Ipv4Address     pulumi.StringPtrInput
	Mode            pulumi.StringPtrInput
	SslCertificate  pulumi.StringPtrInput
	Status          pulumi.StringPtrInput
	UpdateUrl       pulumi.StringPtrInput
	Vdomparam       pulumi.StringPtrInput
}

func (SystemVneTunnelState) ElementType() reflect.Type {
	return reflect.TypeOf((*systemVneTunnelState)(nil)).Elem()
}

type systemVneTunnelArgs struct {
	AutoAsicOffload *string `pulumi:"autoAsicOffload"`
	BmrHostname     *string `pulumi:"bmrHostname"`
	Br              *string `pulumi:"br"`
	HttpPassword    *string `pulumi:"httpPassword"`
	HttpUsername    *string `pulumi:"httpUsername"`
	Interface       *string `pulumi:"interface"`
	Ipv4Address     *string `pulumi:"ipv4Address"`
	Mode            *string `pulumi:"mode"`
	SslCertificate  *string `pulumi:"sslCertificate"`
	Status          *string `pulumi:"status"`
	UpdateUrl       *string `pulumi:"updateUrl"`
	Vdomparam       *string `pulumi:"vdomparam"`
}

// The set of arguments for constructing a SystemVneTunnel resource.
type SystemVneTunnelArgs struct {
	AutoAsicOffload pulumi.StringPtrInput
	BmrHostname     pulumi.StringPtrInput
	Br              pulumi.StringPtrInput
	HttpPassword    pulumi.StringPtrInput
	HttpUsername    pulumi.StringPtrInput
	Interface       pulumi.StringPtrInput
	Ipv4Address     pulumi.StringPtrInput
	Mode            pulumi.StringPtrInput
	SslCertificate  pulumi.StringPtrInput
	Status          pulumi.StringPtrInput
	UpdateUrl       pulumi.StringPtrInput
	Vdomparam       pulumi.StringPtrInput
}

func (SystemVneTunnelArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*systemVneTunnelArgs)(nil)).Elem()
}

type SystemVneTunnelInput interface {
	pulumi.Input

	ToSystemVneTunnelOutput() SystemVneTunnelOutput
	ToSystemVneTunnelOutputWithContext(ctx context.Context) SystemVneTunnelOutput
}

func (*SystemVneTunnel) ElementType() reflect.Type {
	return reflect.TypeOf((**SystemVneTunnel)(nil)).Elem()
}

func (i *SystemVneTunnel) ToSystemVneTunnelOutput() SystemVneTunnelOutput {
	return i.ToSystemVneTunnelOutputWithContext(context.Background())
}

func (i *SystemVneTunnel) ToSystemVneTunnelOutputWithContext(ctx context.Context) SystemVneTunnelOutput {
	return pulumi.ToOutputWithContext(ctx, i).(SystemVneTunnelOutput)
}

// SystemVneTunnelArrayInput is an input type that accepts SystemVneTunnelArray and SystemVneTunnelArrayOutput values.
// You can construct a concrete instance of `SystemVneTunnelArrayInput` via:
//
//	SystemVneTunnelArray{ SystemVneTunnelArgs{...} }
type SystemVneTunnelArrayInput interface {
	pulumi.Input

	ToSystemVneTunnelArrayOutput() SystemVneTunnelArrayOutput
	ToSystemVneTunnelArrayOutputWithContext(context.Context) SystemVneTunnelArrayOutput
}

type SystemVneTunnelArray []SystemVneTunnelInput

func (SystemVneTunnelArray) ElementType() reflect.Type {
	return reflect.TypeOf((*[]*SystemVneTunnel)(nil)).Elem()
}

func (i SystemVneTunnelArray) ToSystemVneTunnelArrayOutput() SystemVneTunnelArrayOutput {
	return i.ToSystemVneTunnelArrayOutputWithContext(context.Background())
}

func (i SystemVneTunnelArray) ToSystemVneTunnelArrayOutputWithContext(ctx context.Context) SystemVneTunnelArrayOutput {
	return pulumi.ToOutputWithContext(ctx, i).(SystemVneTunnelArrayOutput)
}

// SystemVneTunnelMapInput is an input type that accepts SystemVneTunnelMap and SystemVneTunnelMapOutput values.
// You can construct a concrete instance of `SystemVneTunnelMapInput` via:
//
//	SystemVneTunnelMap{ "key": SystemVneTunnelArgs{...} }
type SystemVneTunnelMapInput interface {
	pulumi.Input

	ToSystemVneTunnelMapOutput() SystemVneTunnelMapOutput
	ToSystemVneTunnelMapOutputWithContext(context.Context) SystemVneTunnelMapOutput
}

type SystemVneTunnelMap map[string]SystemVneTunnelInput

func (SystemVneTunnelMap) ElementType() reflect.Type {
	return reflect.TypeOf((*map[string]*SystemVneTunnel)(nil)).Elem()
}

func (i SystemVneTunnelMap) ToSystemVneTunnelMapOutput() SystemVneTunnelMapOutput {
	return i.ToSystemVneTunnelMapOutputWithContext(context.Background())
}

func (i SystemVneTunnelMap) ToSystemVneTunnelMapOutputWithContext(ctx context.Context) SystemVneTunnelMapOutput {
	return pulumi.ToOutputWithContext(ctx, i).(SystemVneTunnelMapOutput)
}

type SystemVneTunnelOutput struct{ *pulumi.OutputState }

func (SystemVneTunnelOutput) ElementType() reflect.Type {
	return reflect.TypeOf((**SystemVneTunnel)(nil)).Elem()
}

func (o SystemVneTunnelOutput) ToSystemVneTunnelOutput() SystemVneTunnelOutput {
	return o
}

func (o SystemVneTunnelOutput) ToSystemVneTunnelOutputWithContext(ctx context.Context) SystemVneTunnelOutput {
	return o
}

func (o SystemVneTunnelOutput) AutoAsicOffload() pulumi.StringOutput {
	return o.ApplyT(func(v *SystemVneTunnel) pulumi.StringOutput { return v.AutoAsicOffload }).(pulumi.StringOutput)
}

func (o SystemVneTunnelOutput) BmrHostname() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *SystemVneTunnel) pulumi.StringPtrOutput { return v.BmrHostname }).(pulumi.StringPtrOutput)
}

func (o SystemVneTunnelOutput) Br() pulumi.StringOutput {
	return o.ApplyT(func(v *SystemVneTunnel) pulumi.StringOutput { return v.Br }).(pulumi.StringOutput)
}

func (o SystemVneTunnelOutput) HttpPassword() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *SystemVneTunnel) pulumi.StringPtrOutput { return v.HttpPassword }).(pulumi.StringPtrOutput)
}

func (o SystemVneTunnelOutput) HttpUsername() pulumi.StringOutput {
	return o.ApplyT(func(v *SystemVneTunnel) pulumi.StringOutput { return v.HttpUsername }).(pulumi.StringOutput)
}

func (o SystemVneTunnelOutput) Interface() pulumi.StringOutput {
	return o.ApplyT(func(v *SystemVneTunnel) pulumi.StringOutput { return v.Interface }).(pulumi.StringOutput)
}

func (o SystemVneTunnelOutput) Ipv4Address() pulumi.StringOutput {
	return o.ApplyT(func(v *SystemVneTunnel) pulumi.StringOutput { return v.Ipv4Address }).(pulumi.StringOutput)
}

func (o SystemVneTunnelOutput) Mode() pulumi.StringOutput {
	return o.ApplyT(func(v *SystemVneTunnel) pulumi.StringOutput { return v.Mode }).(pulumi.StringOutput)
}

func (o SystemVneTunnelOutput) SslCertificate() pulumi.StringOutput {
	return o.ApplyT(func(v *SystemVneTunnel) pulumi.StringOutput { return v.SslCertificate }).(pulumi.StringOutput)
}

func (o SystemVneTunnelOutput) Status() pulumi.StringOutput {
	return o.ApplyT(func(v *SystemVneTunnel) pulumi.StringOutput { return v.Status }).(pulumi.StringOutput)
}

func (o SystemVneTunnelOutput) UpdateUrl() pulumi.StringOutput {
	return o.ApplyT(func(v *SystemVneTunnel) pulumi.StringOutput { return v.UpdateUrl }).(pulumi.StringOutput)
}

func (o SystemVneTunnelOutput) Vdomparam() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *SystemVneTunnel) pulumi.StringPtrOutput { return v.Vdomparam }).(pulumi.StringPtrOutput)
}

type SystemVneTunnelArrayOutput struct{ *pulumi.OutputState }

func (SystemVneTunnelArrayOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*[]*SystemVneTunnel)(nil)).Elem()
}

func (o SystemVneTunnelArrayOutput) ToSystemVneTunnelArrayOutput() SystemVneTunnelArrayOutput {
	return o
}

func (o SystemVneTunnelArrayOutput) ToSystemVneTunnelArrayOutputWithContext(ctx context.Context) SystemVneTunnelArrayOutput {
	return o
}

func (o SystemVneTunnelArrayOutput) Index(i pulumi.IntInput) SystemVneTunnelOutput {
	return pulumi.All(o, i).ApplyT(func(vs []interface{}) *SystemVneTunnel {
		return vs[0].([]*SystemVneTunnel)[vs[1].(int)]
	}).(SystemVneTunnelOutput)
}

type SystemVneTunnelMapOutput struct{ *pulumi.OutputState }

func (SystemVneTunnelMapOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*map[string]*SystemVneTunnel)(nil)).Elem()
}

func (o SystemVneTunnelMapOutput) ToSystemVneTunnelMapOutput() SystemVneTunnelMapOutput {
	return o
}

func (o SystemVneTunnelMapOutput) ToSystemVneTunnelMapOutputWithContext(ctx context.Context) SystemVneTunnelMapOutput {
	return o
}

func (o SystemVneTunnelMapOutput) MapIndex(k pulumi.StringInput) SystemVneTunnelOutput {
	return pulumi.All(o, k).ApplyT(func(vs []interface{}) *SystemVneTunnel {
		return vs[0].(map[string]*SystemVneTunnel)[vs[1].(string)]
	}).(SystemVneTunnelOutput)
}

func init() {
	pulumi.RegisterInputType(reflect.TypeOf((*SystemVneTunnelInput)(nil)).Elem(), &SystemVneTunnel{})
	pulumi.RegisterInputType(reflect.TypeOf((*SystemVneTunnelArrayInput)(nil)).Elem(), SystemVneTunnelArray{})
	pulumi.RegisterInputType(reflect.TypeOf((*SystemVneTunnelMapInput)(nil)).Elem(), SystemVneTunnelMap{})
	pulumi.RegisterOutputType(SystemVneTunnelOutput{})
	pulumi.RegisterOutputType(SystemVneTunnelArrayOutput{})
	pulumi.RegisterOutputType(SystemVneTunnelMapOutput{})
}
