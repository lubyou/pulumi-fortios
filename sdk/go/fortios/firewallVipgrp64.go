// *** WARNING: this file was generated by the Pulumi Terraform Bridge (tfgen) Tool. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

package fortios

import (
	"context"
	"reflect"

	"github.com/pkg/errors"
	"github.com/pulumi/pulumi/sdk/v3/go/pulumi"
)

// Configure IPv6 to IPv4 virtual IP groups. Applies to FortiOS Version `<= 7.0.0`.
//
// ## Example Usage
//
// ```go
// package main
//
// import (
// 	"github.com/pulumi/pulumi-fortios/sdk/go/fortios"
// 	"github.com/pulumi/pulumi/sdk/v3/go/pulumi"
// )
//
// func main() {
// 	pulumi.Run(func(ctx *pulumi.Context) error {
// 		trname1, err := fortios.NewFirewallVip64(ctx, "trname1", &fortios.FirewallVip64Args{
// 			ArpReply:    pulumi.String("enable"),
// 			Color:       pulumi.Int(0),
// 			Extip:       pulumi.String("2001:db8:99:503::22"),
// 			Extport:     pulumi.String("0-65535"),
// 			Fosid:       pulumi.Int(0),
// 			LdbMethod:   pulumi.String("static"),
// 			Mappedip:    pulumi.String("1.1.3.1"),
// 			Mappedport:  pulumi.String("0-65535"),
// 			Portforward: pulumi.String("disable"),
// 			Protocol:    pulumi.String("tcp"),
// 			Type:        pulumi.String("static-nat"),
// 		})
// 		if err != nil {
// 			return err
// 		}
// 		_, err = fortios.NewFirewallVipgrp64(ctx, "trname", &fortios.FirewallVipgrp64Args{
// 			Color: pulumi.Int(0),
// 			Members: FirewallVipgrp64MemberArray{
// 				&FirewallVipgrp64MemberArgs{
// 					Name: trname1.Name,
// 				},
// 			},
// 		})
// 		if err != nil {
// 			return err
// 		}
// 		return nil
// 	})
// }
// ```
//
// ## Import
//
// Firewall Vipgrp64 can be imported using any of these accepted formats$ export "FORTIOS_IMPORT_TABLE"="true"
//
// ```sh
//  $ pulumi import fortios:index/firewallVipgrp64:FirewallVipgrp64 labelname {{name}}
// ```
//
//  $ unset "FORTIOS_IMPORT_TABLE"
type FirewallVipgrp64 struct {
	pulumi.CustomResourceState

	// Integer value to determine the color of the icon in the GUI (range 1 to 32, default = 0, which sets the value to 1).
	Color pulumi.IntOutput `pulumi:"color"`
	// Comment.
	Comments pulumi.StringPtrOutput `pulumi:"comments"`
	// true or false, set this parameter to true when using dynamic forEach + toset to configure and sort sub-tables, please do not set this parameter when configuring static sub-tables.
	DynamicSortSubtable pulumi.StringPtrOutput `pulumi:"dynamicSortSubtable"`
	// Member VIP objects of the group (Separate multiple objects with a space). The structure of `member` block is documented below.
	Members FirewallVipgrp64MemberArrayOutput `pulumi:"members"`
	// VIP64 name.
	Name pulumi.StringOutput `pulumi:"name"`
	// Universally Unique Identifier (UUID; automatically assigned but can be manually reset).
	Uuid pulumi.StringOutput `pulumi:"uuid"`
	// Specifies the vdom to which the resource will be applied when the FortiGate unit is running in VDOM mode. Only one vdom can be specified. If you want to inherit the vdom configuration of the provider, please do not set this parameter.
	Vdomparam pulumi.StringPtrOutput `pulumi:"vdomparam"`
}

// NewFirewallVipgrp64 registers a new resource with the given unique name, arguments, and options.
func NewFirewallVipgrp64(ctx *pulumi.Context,
	name string, args *FirewallVipgrp64Args, opts ...pulumi.ResourceOption) (*FirewallVipgrp64, error) {
	if args == nil {
		return nil, errors.New("missing one or more required arguments")
	}

	if args.Members == nil {
		return nil, errors.New("invalid value for required argument 'Members'")
	}
	opts = pkgResourceDefaultOpts(opts)
	var resource FirewallVipgrp64
	err := ctx.RegisterResource("fortios:index/firewallVipgrp64:FirewallVipgrp64", name, args, &resource, opts...)
	if err != nil {
		return nil, err
	}
	return &resource, nil
}

// GetFirewallVipgrp64 gets an existing FirewallVipgrp64 resource's state with the given name, ID, and optional
// state properties that are used to uniquely qualify the lookup (nil if not required).
func GetFirewallVipgrp64(ctx *pulumi.Context,
	name string, id pulumi.IDInput, state *FirewallVipgrp64State, opts ...pulumi.ResourceOption) (*FirewallVipgrp64, error) {
	var resource FirewallVipgrp64
	err := ctx.ReadResource("fortios:index/firewallVipgrp64:FirewallVipgrp64", name, id, state, &resource, opts...)
	if err != nil {
		return nil, err
	}
	return &resource, nil
}

// Input properties used for looking up and filtering FirewallVipgrp64 resources.
type firewallVipgrp64State struct {
	// Integer value to determine the color of the icon in the GUI (range 1 to 32, default = 0, which sets the value to 1).
	Color *int `pulumi:"color"`
	// Comment.
	Comments *string `pulumi:"comments"`
	// true or false, set this parameter to true when using dynamic forEach + toset to configure and sort sub-tables, please do not set this parameter when configuring static sub-tables.
	DynamicSortSubtable *string `pulumi:"dynamicSortSubtable"`
	// Member VIP objects of the group (Separate multiple objects with a space). The structure of `member` block is documented below.
	Members []FirewallVipgrp64Member `pulumi:"members"`
	// VIP64 name.
	Name *string `pulumi:"name"`
	// Universally Unique Identifier (UUID; automatically assigned but can be manually reset).
	Uuid *string `pulumi:"uuid"`
	// Specifies the vdom to which the resource will be applied when the FortiGate unit is running in VDOM mode. Only one vdom can be specified. If you want to inherit the vdom configuration of the provider, please do not set this parameter.
	Vdomparam *string `pulumi:"vdomparam"`
}

type FirewallVipgrp64State struct {
	// Integer value to determine the color of the icon in the GUI (range 1 to 32, default = 0, which sets the value to 1).
	Color pulumi.IntPtrInput
	// Comment.
	Comments pulumi.StringPtrInput
	// true or false, set this parameter to true when using dynamic forEach + toset to configure and sort sub-tables, please do not set this parameter when configuring static sub-tables.
	DynamicSortSubtable pulumi.StringPtrInput
	// Member VIP objects of the group (Separate multiple objects with a space). The structure of `member` block is documented below.
	Members FirewallVipgrp64MemberArrayInput
	// VIP64 name.
	Name pulumi.StringPtrInput
	// Universally Unique Identifier (UUID; automatically assigned but can be manually reset).
	Uuid pulumi.StringPtrInput
	// Specifies the vdom to which the resource will be applied when the FortiGate unit is running in VDOM mode. Only one vdom can be specified. If you want to inherit the vdom configuration of the provider, please do not set this parameter.
	Vdomparam pulumi.StringPtrInput
}

func (FirewallVipgrp64State) ElementType() reflect.Type {
	return reflect.TypeOf((*firewallVipgrp64State)(nil)).Elem()
}

type firewallVipgrp64Args struct {
	// Integer value to determine the color of the icon in the GUI (range 1 to 32, default = 0, which sets the value to 1).
	Color *int `pulumi:"color"`
	// Comment.
	Comments *string `pulumi:"comments"`
	// true or false, set this parameter to true when using dynamic forEach + toset to configure and sort sub-tables, please do not set this parameter when configuring static sub-tables.
	DynamicSortSubtable *string `pulumi:"dynamicSortSubtable"`
	// Member VIP objects of the group (Separate multiple objects with a space). The structure of `member` block is documented below.
	Members []FirewallVipgrp64Member `pulumi:"members"`
	// VIP64 name.
	Name *string `pulumi:"name"`
	// Universally Unique Identifier (UUID; automatically assigned but can be manually reset).
	Uuid *string `pulumi:"uuid"`
	// Specifies the vdom to which the resource will be applied when the FortiGate unit is running in VDOM mode. Only one vdom can be specified. If you want to inherit the vdom configuration of the provider, please do not set this parameter.
	Vdomparam *string `pulumi:"vdomparam"`
}

// The set of arguments for constructing a FirewallVipgrp64 resource.
type FirewallVipgrp64Args struct {
	// Integer value to determine the color of the icon in the GUI (range 1 to 32, default = 0, which sets the value to 1).
	Color pulumi.IntPtrInput
	// Comment.
	Comments pulumi.StringPtrInput
	// true or false, set this parameter to true when using dynamic forEach + toset to configure and sort sub-tables, please do not set this parameter when configuring static sub-tables.
	DynamicSortSubtable pulumi.StringPtrInput
	// Member VIP objects of the group (Separate multiple objects with a space). The structure of `member` block is documented below.
	Members FirewallVipgrp64MemberArrayInput
	// VIP64 name.
	Name pulumi.StringPtrInput
	// Universally Unique Identifier (UUID; automatically assigned but can be manually reset).
	Uuid pulumi.StringPtrInput
	// Specifies the vdom to which the resource will be applied when the FortiGate unit is running in VDOM mode. Only one vdom can be specified. If you want to inherit the vdom configuration of the provider, please do not set this parameter.
	Vdomparam pulumi.StringPtrInput
}

func (FirewallVipgrp64Args) ElementType() reflect.Type {
	return reflect.TypeOf((*firewallVipgrp64Args)(nil)).Elem()
}

type FirewallVipgrp64Input interface {
	pulumi.Input

	ToFirewallVipgrp64Output() FirewallVipgrp64Output
	ToFirewallVipgrp64OutputWithContext(ctx context.Context) FirewallVipgrp64Output
}

func (*FirewallVipgrp64) ElementType() reflect.Type {
	return reflect.TypeOf((**FirewallVipgrp64)(nil)).Elem()
}

func (i *FirewallVipgrp64) ToFirewallVipgrp64Output() FirewallVipgrp64Output {
	return i.ToFirewallVipgrp64OutputWithContext(context.Background())
}

func (i *FirewallVipgrp64) ToFirewallVipgrp64OutputWithContext(ctx context.Context) FirewallVipgrp64Output {
	return pulumi.ToOutputWithContext(ctx, i).(FirewallVipgrp64Output)
}

// FirewallVipgrp64ArrayInput is an input type that accepts FirewallVipgrp64Array and FirewallVipgrp64ArrayOutput values.
// You can construct a concrete instance of `FirewallVipgrp64ArrayInput` via:
//
//          FirewallVipgrp64Array{ FirewallVipgrp64Args{...} }
type FirewallVipgrp64ArrayInput interface {
	pulumi.Input

	ToFirewallVipgrp64ArrayOutput() FirewallVipgrp64ArrayOutput
	ToFirewallVipgrp64ArrayOutputWithContext(context.Context) FirewallVipgrp64ArrayOutput
}

type FirewallVipgrp64Array []FirewallVipgrp64Input

func (FirewallVipgrp64Array) ElementType() reflect.Type {
	return reflect.TypeOf((*[]*FirewallVipgrp64)(nil)).Elem()
}

func (i FirewallVipgrp64Array) ToFirewallVipgrp64ArrayOutput() FirewallVipgrp64ArrayOutput {
	return i.ToFirewallVipgrp64ArrayOutputWithContext(context.Background())
}

func (i FirewallVipgrp64Array) ToFirewallVipgrp64ArrayOutputWithContext(ctx context.Context) FirewallVipgrp64ArrayOutput {
	return pulumi.ToOutputWithContext(ctx, i).(FirewallVipgrp64ArrayOutput)
}

// FirewallVipgrp64MapInput is an input type that accepts FirewallVipgrp64Map and FirewallVipgrp64MapOutput values.
// You can construct a concrete instance of `FirewallVipgrp64MapInput` via:
//
//          FirewallVipgrp64Map{ "key": FirewallVipgrp64Args{...} }
type FirewallVipgrp64MapInput interface {
	pulumi.Input

	ToFirewallVipgrp64MapOutput() FirewallVipgrp64MapOutput
	ToFirewallVipgrp64MapOutputWithContext(context.Context) FirewallVipgrp64MapOutput
}

type FirewallVipgrp64Map map[string]FirewallVipgrp64Input

func (FirewallVipgrp64Map) ElementType() reflect.Type {
	return reflect.TypeOf((*map[string]*FirewallVipgrp64)(nil)).Elem()
}

func (i FirewallVipgrp64Map) ToFirewallVipgrp64MapOutput() FirewallVipgrp64MapOutput {
	return i.ToFirewallVipgrp64MapOutputWithContext(context.Background())
}

func (i FirewallVipgrp64Map) ToFirewallVipgrp64MapOutputWithContext(ctx context.Context) FirewallVipgrp64MapOutput {
	return pulumi.ToOutputWithContext(ctx, i).(FirewallVipgrp64MapOutput)
}

type FirewallVipgrp64Output struct{ *pulumi.OutputState }

func (FirewallVipgrp64Output) ElementType() reflect.Type {
	return reflect.TypeOf((**FirewallVipgrp64)(nil)).Elem()
}

func (o FirewallVipgrp64Output) ToFirewallVipgrp64Output() FirewallVipgrp64Output {
	return o
}

func (o FirewallVipgrp64Output) ToFirewallVipgrp64OutputWithContext(ctx context.Context) FirewallVipgrp64Output {
	return o
}

type FirewallVipgrp64ArrayOutput struct{ *pulumi.OutputState }

func (FirewallVipgrp64ArrayOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*[]*FirewallVipgrp64)(nil)).Elem()
}

func (o FirewallVipgrp64ArrayOutput) ToFirewallVipgrp64ArrayOutput() FirewallVipgrp64ArrayOutput {
	return o
}

func (o FirewallVipgrp64ArrayOutput) ToFirewallVipgrp64ArrayOutputWithContext(ctx context.Context) FirewallVipgrp64ArrayOutput {
	return o
}

func (o FirewallVipgrp64ArrayOutput) Index(i pulumi.IntInput) FirewallVipgrp64Output {
	return pulumi.All(o, i).ApplyT(func(vs []interface{}) *FirewallVipgrp64 {
		return vs[0].([]*FirewallVipgrp64)[vs[1].(int)]
	}).(FirewallVipgrp64Output)
}

type FirewallVipgrp64MapOutput struct{ *pulumi.OutputState }

func (FirewallVipgrp64MapOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*map[string]*FirewallVipgrp64)(nil)).Elem()
}

func (o FirewallVipgrp64MapOutput) ToFirewallVipgrp64MapOutput() FirewallVipgrp64MapOutput {
	return o
}

func (o FirewallVipgrp64MapOutput) ToFirewallVipgrp64MapOutputWithContext(ctx context.Context) FirewallVipgrp64MapOutput {
	return o
}

func (o FirewallVipgrp64MapOutput) MapIndex(k pulumi.StringInput) FirewallVipgrp64Output {
	return pulumi.All(o, k).ApplyT(func(vs []interface{}) *FirewallVipgrp64 {
		return vs[0].(map[string]*FirewallVipgrp64)[vs[1].(string)]
	}).(FirewallVipgrp64Output)
}

func init() {
	pulumi.RegisterInputType(reflect.TypeOf((*FirewallVipgrp64Input)(nil)).Elem(), &FirewallVipgrp64{})
	pulumi.RegisterInputType(reflect.TypeOf((*FirewallVipgrp64ArrayInput)(nil)).Elem(), FirewallVipgrp64Array{})
	pulumi.RegisterInputType(reflect.TypeOf((*FirewallVipgrp64MapInput)(nil)).Elem(), FirewallVipgrp64Map{})
	pulumi.RegisterOutputType(FirewallVipgrp64Output{})
	pulumi.RegisterOutputType(FirewallVipgrp64ArrayOutput{})
	pulumi.RegisterOutputType(FirewallVipgrp64MapOutput{})
}
