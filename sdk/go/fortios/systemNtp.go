// Code generated by the Pulumi Terraform Bridge (tfgen) Tool DO NOT EDIT.
// *** WARNING: Do not edit by hand unless you're certain you know what you are doing! ***

package fortios

import (
	"context"
	"reflect"

	"github.com/lubyou/pulumi-fortios/sdk/go/fortios/internal"
	"github.com/pulumi/pulumi/sdk/v3/go/pulumi"
)

type SystemNtp struct {
	pulumi.CustomResourceState

	Authentication      pulumi.StringOutput           `pulumi:"authentication"`
	DynamicSortSubtable pulumi.StringPtrOutput        `pulumi:"dynamicSortSubtable"`
	GetAllTables        pulumi.StringPtrOutput        `pulumi:"getAllTables"`
	Interfaces          SystemNtpInterfaceArrayOutput `pulumi:"interfaces"`
	Key                 pulumi.StringPtrOutput        `pulumi:"key"`
	KeyId               pulumi.IntOutput              `pulumi:"keyId"`
	KeyType             pulumi.StringOutput           `pulumi:"keyType"`
	Ntpservers          SystemNtpNtpserverArrayOutput `pulumi:"ntpservers"`
	Ntpsync             pulumi.StringOutput           `pulumi:"ntpsync"`
	ServerMode          pulumi.StringOutput           `pulumi:"serverMode"`
	SourceIp            pulumi.StringOutput           `pulumi:"sourceIp"`
	SourceIp6           pulumi.StringOutput           `pulumi:"sourceIp6"`
	Syncinterval        pulumi.IntOutput              `pulumi:"syncinterval"`
	Type                pulumi.StringOutput           `pulumi:"type"`
	Vdomparam           pulumi.StringPtrOutput        `pulumi:"vdomparam"`
}

// NewSystemNtp registers a new resource with the given unique name, arguments, and options.
func NewSystemNtp(ctx *pulumi.Context,
	name string, args *SystemNtpArgs, opts ...pulumi.ResourceOption) (*SystemNtp, error) {
	if args == nil {
		args = &SystemNtpArgs{}
	}

	if args.Key != nil {
		args.Key = pulumi.ToSecret(args.Key).(pulumi.StringPtrInput)
	}
	secrets := pulumi.AdditionalSecretOutputs([]string{
		"key",
	})
	opts = append(opts, secrets)
	opts = internal.PkgResourceDefaultOpts(opts)
	var resource SystemNtp
	err := ctx.RegisterResource("fortios:index/systemNtp:SystemNtp", name, args, &resource, opts...)
	if err != nil {
		return nil, err
	}
	return &resource, nil
}

// GetSystemNtp gets an existing SystemNtp resource's state with the given name, ID, and optional
// state properties that are used to uniquely qualify the lookup (nil if not required).
func GetSystemNtp(ctx *pulumi.Context,
	name string, id pulumi.IDInput, state *SystemNtpState, opts ...pulumi.ResourceOption) (*SystemNtp, error) {
	var resource SystemNtp
	err := ctx.ReadResource("fortios:index/systemNtp:SystemNtp", name, id, state, &resource, opts...)
	if err != nil {
		return nil, err
	}
	return &resource, nil
}

// Input properties used for looking up and filtering SystemNtp resources.
type systemNtpState struct {
	Authentication      *string              `pulumi:"authentication"`
	DynamicSortSubtable *string              `pulumi:"dynamicSortSubtable"`
	GetAllTables        *string              `pulumi:"getAllTables"`
	Interfaces          []SystemNtpInterface `pulumi:"interfaces"`
	Key                 *string              `pulumi:"key"`
	KeyId               *int                 `pulumi:"keyId"`
	KeyType             *string              `pulumi:"keyType"`
	Ntpservers          []SystemNtpNtpserver `pulumi:"ntpservers"`
	Ntpsync             *string              `pulumi:"ntpsync"`
	ServerMode          *string              `pulumi:"serverMode"`
	SourceIp            *string              `pulumi:"sourceIp"`
	SourceIp6           *string              `pulumi:"sourceIp6"`
	Syncinterval        *int                 `pulumi:"syncinterval"`
	Type                *string              `pulumi:"type"`
	Vdomparam           *string              `pulumi:"vdomparam"`
}

type SystemNtpState struct {
	Authentication      pulumi.StringPtrInput
	DynamicSortSubtable pulumi.StringPtrInput
	GetAllTables        pulumi.StringPtrInput
	Interfaces          SystemNtpInterfaceArrayInput
	Key                 pulumi.StringPtrInput
	KeyId               pulumi.IntPtrInput
	KeyType             pulumi.StringPtrInput
	Ntpservers          SystemNtpNtpserverArrayInput
	Ntpsync             pulumi.StringPtrInput
	ServerMode          pulumi.StringPtrInput
	SourceIp            pulumi.StringPtrInput
	SourceIp6           pulumi.StringPtrInput
	Syncinterval        pulumi.IntPtrInput
	Type                pulumi.StringPtrInput
	Vdomparam           pulumi.StringPtrInput
}

func (SystemNtpState) ElementType() reflect.Type {
	return reflect.TypeOf((*systemNtpState)(nil)).Elem()
}

type systemNtpArgs struct {
	Authentication      *string              `pulumi:"authentication"`
	DynamicSortSubtable *string              `pulumi:"dynamicSortSubtable"`
	GetAllTables        *string              `pulumi:"getAllTables"`
	Interfaces          []SystemNtpInterface `pulumi:"interfaces"`
	Key                 *string              `pulumi:"key"`
	KeyId               *int                 `pulumi:"keyId"`
	KeyType             *string              `pulumi:"keyType"`
	Ntpservers          []SystemNtpNtpserver `pulumi:"ntpservers"`
	Ntpsync             *string              `pulumi:"ntpsync"`
	ServerMode          *string              `pulumi:"serverMode"`
	SourceIp            *string              `pulumi:"sourceIp"`
	SourceIp6           *string              `pulumi:"sourceIp6"`
	Syncinterval        *int                 `pulumi:"syncinterval"`
	Type                *string              `pulumi:"type"`
	Vdomparam           *string              `pulumi:"vdomparam"`
}

// The set of arguments for constructing a SystemNtp resource.
type SystemNtpArgs struct {
	Authentication      pulumi.StringPtrInput
	DynamicSortSubtable pulumi.StringPtrInput
	GetAllTables        pulumi.StringPtrInput
	Interfaces          SystemNtpInterfaceArrayInput
	Key                 pulumi.StringPtrInput
	KeyId               pulumi.IntPtrInput
	KeyType             pulumi.StringPtrInput
	Ntpservers          SystemNtpNtpserverArrayInput
	Ntpsync             pulumi.StringPtrInput
	ServerMode          pulumi.StringPtrInput
	SourceIp            pulumi.StringPtrInput
	SourceIp6           pulumi.StringPtrInput
	Syncinterval        pulumi.IntPtrInput
	Type                pulumi.StringPtrInput
	Vdomparam           pulumi.StringPtrInput
}

func (SystemNtpArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*systemNtpArgs)(nil)).Elem()
}

type SystemNtpInput interface {
	pulumi.Input

	ToSystemNtpOutput() SystemNtpOutput
	ToSystemNtpOutputWithContext(ctx context.Context) SystemNtpOutput
}

func (*SystemNtp) ElementType() reflect.Type {
	return reflect.TypeOf((**SystemNtp)(nil)).Elem()
}

func (i *SystemNtp) ToSystemNtpOutput() SystemNtpOutput {
	return i.ToSystemNtpOutputWithContext(context.Background())
}

func (i *SystemNtp) ToSystemNtpOutputWithContext(ctx context.Context) SystemNtpOutput {
	return pulumi.ToOutputWithContext(ctx, i).(SystemNtpOutput)
}

// SystemNtpArrayInput is an input type that accepts SystemNtpArray and SystemNtpArrayOutput values.
// You can construct a concrete instance of `SystemNtpArrayInput` via:
//
//	SystemNtpArray{ SystemNtpArgs{...} }
type SystemNtpArrayInput interface {
	pulumi.Input

	ToSystemNtpArrayOutput() SystemNtpArrayOutput
	ToSystemNtpArrayOutputWithContext(context.Context) SystemNtpArrayOutput
}

type SystemNtpArray []SystemNtpInput

func (SystemNtpArray) ElementType() reflect.Type {
	return reflect.TypeOf((*[]*SystemNtp)(nil)).Elem()
}

func (i SystemNtpArray) ToSystemNtpArrayOutput() SystemNtpArrayOutput {
	return i.ToSystemNtpArrayOutputWithContext(context.Background())
}

func (i SystemNtpArray) ToSystemNtpArrayOutputWithContext(ctx context.Context) SystemNtpArrayOutput {
	return pulumi.ToOutputWithContext(ctx, i).(SystemNtpArrayOutput)
}

// SystemNtpMapInput is an input type that accepts SystemNtpMap and SystemNtpMapOutput values.
// You can construct a concrete instance of `SystemNtpMapInput` via:
//
//	SystemNtpMap{ "key": SystemNtpArgs{...} }
type SystemNtpMapInput interface {
	pulumi.Input

	ToSystemNtpMapOutput() SystemNtpMapOutput
	ToSystemNtpMapOutputWithContext(context.Context) SystemNtpMapOutput
}

type SystemNtpMap map[string]SystemNtpInput

func (SystemNtpMap) ElementType() reflect.Type {
	return reflect.TypeOf((*map[string]*SystemNtp)(nil)).Elem()
}

func (i SystemNtpMap) ToSystemNtpMapOutput() SystemNtpMapOutput {
	return i.ToSystemNtpMapOutputWithContext(context.Background())
}

func (i SystemNtpMap) ToSystemNtpMapOutputWithContext(ctx context.Context) SystemNtpMapOutput {
	return pulumi.ToOutputWithContext(ctx, i).(SystemNtpMapOutput)
}

type SystemNtpOutput struct{ *pulumi.OutputState }

func (SystemNtpOutput) ElementType() reflect.Type {
	return reflect.TypeOf((**SystemNtp)(nil)).Elem()
}

func (o SystemNtpOutput) ToSystemNtpOutput() SystemNtpOutput {
	return o
}

func (o SystemNtpOutput) ToSystemNtpOutputWithContext(ctx context.Context) SystemNtpOutput {
	return o
}

func (o SystemNtpOutput) Authentication() pulumi.StringOutput {
	return o.ApplyT(func(v *SystemNtp) pulumi.StringOutput { return v.Authentication }).(pulumi.StringOutput)
}

func (o SystemNtpOutput) DynamicSortSubtable() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *SystemNtp) pulumi.StringPtrOutput { return v.DynamicSortSubtable }).(pulumi.StringPtrOutput)
}

func (o SystemNtpOutput) GetAllTables() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *SystemNtp) pulumi.StringPtrOutput { return v.GetAllTables }).(pulumi.StringPtrOutput)
}

func (o SystemNtpOutput) Interfaces() SystemNtpInterfaceArrayOutput {
	return o.ApplyT(func(v *SystemNtp) SystemNtpInterfaceArrayOutput { return v.Interfaces }).(SystemNtpInterfaceArrayOutput)
}

func (o SystemNtpOutput) Key() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *SystemNtp) pulumi.StringPtrOutput { return v.Key }).(pulumi.StringPtrOutput)
}

func (o SystemNtpOutput) KeyId() pulumi.IntOutput {
	return o.ApplyT(func(v *SystemNtp) pulumi.IntOutput { return v.KeyId }).(pulumi.IntOutput)
}

func (o SystemNtpOutput) KeyType() pulumi.StringOutput {
	return o.ApplyT(func(v *SystemNtp) pulumi.StringOutput { return v.KeyType }).(pulumi.StringOutput)
}

func (o SystemNtpOutput) Ntpservers() SystemNtpNtpserverArrayOutput {
	return o.ApplyT(func(v *SystemNtp) SystemNtpNtpserverArrayOutput { return v.Ntpservers }).(SystemNtpNtpserverArrayOutput)
}

func (o SystemNtpOutput) Ntpsync() pulumi.StringOutput {
	return o.ApplyT(func(v *SystemNtp) pulumi.StringOutput { return v.Ntpsync }).(pulumi.StringOutput)
}

func (o SystemNtpOutput) ServerMode() pulumi.StringOutput {
	return o.ApplyT(func(v *SystemNtp) pulumi.StringOutput { return v.ServerMode }).(pulumi.StringOutput)
}

func (o SystemNtpOutput) SourceIp() pulumi.StringOutput {
	return o.ApplyT(func(v *SystemNtp) pulumi.StringOutput { return v.SourceIp }).(pulumi.StringOutput)
}

func (o SystemNtpOutput) SourceIp6() pulumi.StringOutput {
	return o.ApplyT(func(v *SystemNtp) pulumi.StringOutput { return v.SourceIp6 }).(pulumi.StringOutput)
}

func (o SystemNtpOutput) Syncinterval() pulumi.IntOutput {
	return o.ApplyT(func(v *SystemNtp) pulumi.IntOutput { return v.Syncinterval }).(pulumi.IntOutput)
}

func (o SystemNtpOutput) Type() pulumi.StringOutput {
	return o.ApplyT(func(v *SystemNtp) pulumi.StringOutput { return v.Type }).(pulumi.StringOutput)
}

func (o SystemNtpOutput) Vdomparam() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *SystemNtp) pulumi.StringPtrOutput { return v.Vdomparam }).(pulumi.StringPtrOutput)
}

type SystemNtpArrayOutput struct{ *pulumi.OutputState }

func (SystemNtpArrayOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*[]*SystemNtp)(nil)).Elem()
}

func (o SystemNtpArrayOutput) ToSystemNtpArrayOutput() SystemNtpArrayOutput {
	return o
}

func (o SystemNtpArrayOutput) ToSystemNtpArrayOutputWithContext(ctx context.Context) SystemNtpArrayOutput {
	return o
}

func (o SystemNtpArrayOutput) Index(i pulumi.IntInput) SystemNtpOutput {
	return pulumi.All(o, i).ApplyT(func(vs []interface{}) *SystemNtp {
		return vs[0].([]*SystemNtp)[vs[1].(int)]
	}).(SystemNtpOutput)
}

type SystemNtpMapOutput struct{ *pulumi.OutputState }

func (SystemNtpMapOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*map[string]*SystemNtp)(nil)).Elem()
}

func (o SystemNtpMapOutput) ToSystemNtpMapOutput() SystemNtpMapOutput {
	return o
}

func (o SystemNtpMapOutput) ToSystemNtpMapOutputWithContext(ctx context.Context) SystemNtpMapOutput {
	return o
}

func (o SystemNtpMapOutput) MapIndex(k pulumi.StringInput) SystemNtpOutput {
	return pulumi.All(o, k).ApplyT(func(vs []interface{}) *SystemNtp {
		return vs[0].(map[string]*SystemNtp)[vs[1].(string)]
	}).(SystemNtpOutput)
}

func init() {
	pulumi.RegisterInputType(reflect.TypeOf((*SystemNtpInput)(nil)).Elem(), &SystemNtp{})
	pulumi.RegisterInputType(reflect.TypeOf((*SystemNtpArrayInput)(nil)).Elem(), SystemNtpArray{})
	pulumi.RegisterInputType(reflect.TypeOf((*SystemNtpMapInput)(nil)).Elem(), SystemNtpMap{})
	pulumi.RegisterOutputType(SystemNtpOutput{})
	pulumi.RegisterOutputType(SystemNtpArrayOutput{})
	pulumi.RegisterOutputType(SystemNtpMapOutput{})
}
