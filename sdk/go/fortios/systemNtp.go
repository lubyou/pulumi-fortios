// *** WARNING: this file was generated by the Pulumi Terraform Bridge (tfgen) Tool. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

package fortios

import (
	"context"
	"reflect"

	"github.com/pulumi/pulumi/sdk/v3/go/pulumi"
)

// Configure system NTP information.
//
// ## Example Usage
//
// ```go
// package main
//
// import (
// 	"github.com/pulumi/pulumi-fortios/sdk/go/fortios"
// 	"github.com/pulumi/pulumi/sdk/v3/go/pulumi"
// )
//
// func main() {
// 	pulumi.Run(func(ctx *pulumi.Context) error {
// 		_, err := fortios.NewSystemNtp(ctx, "trname", &fortios.SystemNtpArgs{
// 			Ntpsync:      pulumi.String("enable"),
// 			ServerMode:   pulumi.String("disable"),
// 			SourceIp:     pulumi.String("0.0.0.0"),
// 			SourceIp6:    pulumi.String("::"),
// 			Syncinterval: pulumi.Int(1),
// 			Type:         pulumi.String("fortiguard"),
// 		})
// 		if err != nil {
// 			return err
// 		}
// 		return nil
// 	})
// }
// ```
//
// ## Import
//
// System Ntp can be imported using any of these accepted formats$ export "FORTIOS_IMPORT_TABLE"="true"
//
// ```sh
//  $ pulumi import fortios:index/systemNtp:SystemNtp labelname SystemNtp
// ```
//
//  $ unset "FORTIOS_IMPORT_TABLE"
type SystemNtp struct {
	pulumi.CustomResourceState

	// Enable/disable MD5/SHA1 authentication. Valid values: `enable`, `disable`.
	Authentication pulumi.StringOutput `pulumi:"authentication"`
	// true or false, set this parameter to true when using dynamic forEach + toset to configure and sort sub-tables, please do not set this parameter when configuring static sub-tables.
	DynamicSortSubtable pulumi.StringPtrOutput `pulumi:"dynamicSortSubtable"`
	// Specify outgoing interface to reach server.
	Interfaces SystemNtpInterfaceArrayOutput `pulumi:"interfaces"`
	// Key for MD5/SHA1 authentication.
	Key pulumi.StringPtrOutput `pulumi:"key"`
	// Key ID for authentication.
	KeyId pulumi.IntOutput `pulumi:"keyId"`
	// Key type for authentication (MD5, SHA1). Valid values: `MD5`, `SHA1`.
	KeyType pulumi.StringOutput `pulumi:"keyType"`
	// Configure the FortiGate to connect to any available third-party NTP server. The structure of `ntpserver` block is documented below.
	Ntpservers SystemNtpNtpserverArrayOutput `pulumi:"ntpservers"`
	// Enable/disable setting the FortiGate system time by synchronizing with an NTP Server. Valid values: `enable`, `disable`.
	Ntpsync pulumi.StringOutput `pulumi:"ntpsync"`
	// Enable/disable FortiGate NTP Server Mode. Your FortiGate becomes an NTP server for other devices on your network. The FortiGate relays NTP requests to its configured NTP server. Valid values: `enable`, `disable`.
	ServerMode pulumi.StringOutput `pulumi:"serverMode"`
	// Source IP address for communication to the NTP server.
	SourceIp pulumi.StringOutput `pulumi:"sourceIp"`
	// Source IPv6 address for communication to the NTP server.
	SourceIp6 pulumi.StringOutput `pulumi:"sourceIp6"`
	// NTP synchronization interval (1 - 1440 min).
	Syncinterval pulumi.IntOutput `pulumi:"syncinterval"`
	// Use the FortiGuard NTP server or any other available NTP Server. Valid values: `fortiguard`, `custom`.
	Type pulumi.StringOutput `pulumi:"type"`
	// Specifies the vdom to which the resource will be applied when the FortiGate unit is running in VDOM mode. Only one vdom can be specified. If you want to inherit the vdom configuration of the provider, please do not set this parameter.
	Vdomparam pulumi.StringPtrOutput `pulumi:"vdomparam"`
}

// NewSystemNtp registers a new resource with the given unique name, arguments, and options.
func NewSystemNtp(ctx *pulumi.Context,
	name string, args *SystemNtpArgs, opts ...pulumi.ResourceOption) (*SystemNtp, error) {
	if args == nil {
		args = &SystemNtpArgs{}
	}

	var resource SystemNtp
	err := ctx.RegisterResource("fortios:index/systemNtp:SystemNtp", name, args, &resource, opts...)
	if err != nil {
		return nil, err
	}
	return &resource, nil
}

// GetSystemNtp gets an existing SystemNtp resource's state with the given name, ID, and optional
// state properties that are used to uniquely qualify the lookup (nil if not required).
func GetSystemNtp(ctx *pulumi.Context,
	name string, id pulumi.IDInput, state *SystemNtpState, opts ...pulumi.ResourceOption) (*SystemNtp, error) {
	var resource SystemNtp
	err := ctx.ReadResource("fortios:index/systemNtp:SystemNtp", name, id, state, &resource, opts...)
	if err != nil {
		return nil, err
	}
	return &resource, nil
}

// Input properties used for looking up and filtering SystemNtp resources.
type systemNtpState struct {
	// Enable/disable MD5/SHA1 authentication. Valid values: `enable`, `disable`.
	Authentication *string `pulumi:"authentication"`
	// true or false, set this parameter to true when using dynamic forEach + toset to configure and sort sub-tables, please do not set this parameter when configuring static sub-tables.
	DynamicSortSubtable *string `pulumi:"dynamicSortSubtable"`
	// Specify outgoing interface to reach server.
	Interfaces []SystemNtpInterface `pulumi:"interfaces"`
	// Key for MD5/SHA1 authentication.
	Key *string `pulumi:"key"`
	// Key ID for authentication.
	KeyId *int `pulumi:"keyId"`
	// Key type for authentication (MD5, SHA1). Valid values: `MD5`, `SHA1`.
	KeyType *string `pulumi:"keyType"`
	// Configure the FortiGate to connect to any available third-party NTP server. The structure of `ntpserver` block is documented below.
	Ntpservers []SystemNtpNtpserver `pulumi:"ntpservers"`
	// Enable/disable setting the FortiGate system time by synchronizing with an NTP Server. Valid values: `enable`, `disable`.
	Ntpsync *string `pulumi:"ntpsync"`
	// Enable/disable FortiGate NTP Server Mode. Your FortiGate becomes an NTP server for other devices on your network. The FortiGate relays NTP requests to its configured NTP server. Valid values: `enable`, `disable`.
	ServerMode *string `pulumi:"serverMode"`
	// Source IP address for communication to the NTP server.
	SourceIp *string `pulumi:"sourceIp"`
	// Source IPv6 address for communication to the NTP server.
	SourceIp6 *string `pulumi:"sourceIp6"`
	// NTP synchronization interval (1 - 1440 min).
	Syncinterval *int `pulumi:"syncinterval"`
	// Use the FortiGuard NTP server or any other available NTP Server. Valid values: `fortiguard`, `custom`.
	Type *string `pulumi:"type"`
	// Specifies the vdom to which the resource will be applied when the FortiGate unit is running in VDOM mode. Only one vdom can be specified. If you want to inherit the vdom configuration of the provider, please do not set this parameter.
	Vdomparam *string `pulumi:"vdomparam"`
}

type SystemNtpState struct {
	// Enable/disable MD5/SHA1 authentication. Valid values: `enable`, `disable`.
	Authentication pulumi.StringPtrInput
	// true or false, set this parameter to true when using dynamic forEach + toset to configure and sort sub-tables, please do not set this parameter when configuring static sub-tables.
	DynamicSortSubtable pulumi.StringPtrInput
	// Specify outgoing interface to reach server.
	Interfaces SystemNtpInterfaceArrayInput
	// Key for MD5/SHA1 authentication.
	Key pulumi.StringPtrInput
	// Key ID for authentication.
	KeyId pulumi.IntPtrInput
	// Key type for authentication (MD5, SHA1). Valid values: `MD5`, `SHA1`.
	KeyType pulumi.StringPtrInput
	// Configure the FortiGate to connect to any available third-party NTP server. The structure of `ntpserver` block is documented below.
	Ntpservers SystemNtpNtpserverArrayInput
	// Enable/disable setting the FortiGate system time by synchronizing with an NTP Server. Valid values: `enable`, `disable`.
	Ntpsync pulumi.StringPtrInput
	// Enable/disable FortiGate NTP Server Mode. Your FortiGate becomes an NTP server for other devices on your network. The FortiGate relays NTP requests to its configured NTP server. Valid values: `enable`, `disable`.
	ServerMode pulumi.StringPtrInput
	// Source IP address for communication to the NTP server.
	SourceIp pulumi.StringPtrInput
	// Source IPv6 address for communication to the NTP server.
	SourceIp6 pulumi.StringPtrInput
	// NTP synchronization interval (1 - 1440 min).
	Syncinterval pulumi.IntPtrInput
	// Use the FortiGuard NTP server or any other available NTP Server. Valid values: `fortiguard`, `custom`.
	Type pulumi.StringPtrInput
	// Specifies the vdom to which the resource will be applied when the FortiGate unit is running in VDOM mode. Only one vdom can be specified. If you want to inherit the vdom configuration of the provider, please do not set this parameter.
	Vdomparam pulumi.StringPtrInput
}

func (SystemNtpState) ElementType() reflect.Type {
	return reflect.TypeOf((*systemNtpState)(nil)).Elem()
}

type systemNtpArgs struct {
	// Enable/disable MD5/SHA1 authentication. Valid values: `enable`, `disable`.
	Authentication *string `pulumi:"authentication"`
	// true or false, set this parameter to true when using dynamic forEach + toset to configure and sort sub-tables, please do not set this parameter when configuring static sub-tables.
	DynamicSortSubtable *string `pulumi:"dynamicSortSubtable"`
	// Specify outgoing interface to reach server.
	Interfaces []SystemNtpInterface `pulumi:"interfaces"`
	// Key for MD5/SHA1 authentication.
	Key *string `pulumi:"key"`
	// Key ID for authentication.
	KeyId *int `pulumi:"keyId"`
	// Key type for authentication (MD5, SHA1). Valid values: `MD5`, `SHA1`.
	KeyType *string `pulumi:"keyType"`
	// Configure the FortiGate to connect to any available third-party NTP server. The structure of `ntpserver` block is documented below.
	Ntpservers []SystemNtpNtpserver `pulumi:"ntpservers"`
	// Enable/disable setting the FortiGate system time by synchronizing with an NTP Server. Valid values: `enable`, `disable`.
	Ntpsync *string `pulumi:"ntpsync"`
	// Enable/disable FortiGate NTP Server Mode. Your FortiGate becomes an NTP server for other devices on your network. The FortiGate relays NTP requests to its configured NTP server. Valid values: `enable`, `disable`.
	ServerMode *string `pulumi:"serverMode"`
	// Source IP address for communication to the NTP server.
	SourceIp *string `pulumi:"sourceIp"`
	// Source IPv6 address for communication to the NTP server.
	SourceIp6 *string `pulumi:"sourceIp6"`
	// NTP synchronization interval (1 - 1440 min).
	Syncinterval *int `pulumi:"syncinterval"`
	// Use the FortiGuard NTP server or any other available NTP Server. Valid values: `fortiguard`, `custom`.
	Type *string `pulumi:"type"`
	// Specifies the vdom to which the resource will be applied when the FortiGate unit is running in VDOM mode. Only one vdom can be specified. If you want to inherit the vdom configuration of the provider, please do not set this parameter.
	Vdomparam *string `pulumi:"vdomparam"`
}

// The set of arguments for constructing a SystemNtp resource.
type SystemNtpArgs struct {
	// Enable/disable MD5/SHA1 authentication. Valid values: `enable`, `disable`.
	Authentication pulumi.StringPtrInput
	// true or false, set this parameter to true when using dynamic forEach + toset to configure and sort sub-tables, please do not set this parameter when configuring static sub-tables.
	DynamicSortSubtable pulumi.StringPtrInput
	// Specify outgoing interface to reach server.
	Interfaces SystemNtpInterfaceArrayInput
	// Key for MD5/SHA1 authentication.
	Key pulumi.StringPtrInput
	// Key ID for authentication.
	KeyId pulumi.IntPtrInput
	// Key type for authentication (MD5, SHA1). Valid values: `MD5`, `SHA1`.
	KeyType pulumi.StringPtrInput
	// Configure the FortiGate to connect to any available third-party NTP server. The structure of `ntpserver` block is documented below.
	Ntpservers SystemNtpNtpserverArrayInput
	// Enable/disable setting the FortiGate system time by synchronizing with an NTP Server. Valid values: `enable`, `disable`.
	Ntpsync pulumi.StringPtrInput
	// Enable/disable FortiGate NTP Server Mode. Your FortiGate becomes an NTP server for other devices on your network. The FortiGate relays NTP requests to its configured NTP server. Valid values: `enable`, `disable`.
	ServerMode pulumi.StringPtrInput
	// Source IP address for communication to the NTP server.
	SourceIp pulumi.StringPtrInput
	// Source IPv6 address for communication to the NTP server.
	SourceIp6 pulumi.StringPtrInput
	// NTP synchronization interval (1 - 1440 min).
	Syncinterval pulumi.IntPtrInput
	// Use the FortiGuard NTP server or any other available NTP Server. Valid values: `fortiguard`, `custom`.
	Type pulumi.StringPtrInput
	// Specifies the vdom to which the resource will be applied when the FortiGate unit is running in VDOM mode. Only one vdom can be specified. If you want to inherit the vdom configuration of the provider, please do not set this parameter.
	Vdomparam pulumi.StringPtrInput
}

func (SystemNtpArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*systemNtpArgs)(nil)).Elem()
}

type SystemNtpInput interface {
	pulumi.Input

	ToSystemNtpOutput() SystemNtpOutput
	ToSystemNtpOutputWithContext(ctx context.Context) SystemNtpOutput
}

func (*SystemNtp) ElementType() reflect.Type {
	return reflect.TypeOf((*SystemNtp)(nil))
}

func (i *SystemNtp) ToSystemNtpOutput() SystemNtpOutput {
	return i.ToSystemNtpOutputWithContext(context.Background())
}

func (i *SystemNtp) ToSystemNtpOutputWithContext(ctx context.Context) SystemNtpOutput {
	return pulumi.ToOutputWithContext(ctx, i).(SystemNtpOutput)
}

func (i *SystemNtp) ToSystemNtpPtrOutput() SystemNtpPtrOutput {
	return i.ToSystemNtpPtrOutputWithContext(context.Background())
}

func (i *SystemNtp) ToSystemNtpPtrOutputWithContext(ctx context.Context) SystemNtpPtrOutput {
	return pulumi.ToOutputWithContext(ctx, i).(SystemNtpPtrOutput)
}

type SystemNtpPtrInput interface {
	pulumi.Input

	ToSystemNtpPtrOutput() SystemNtpPtrOutput
	ToSystemNtpPtrOutputWithContext(ctx context.Context) SystemNtpPtrOutput
}

type systemNtpPtrType SystemNtpArgs

func (*systemNtpPtrType) ElementType() reflect.Type {
	return reflect.TypeOf((**SystemNtp)(nil))
}

func (i *systemNtpPtrType) ToSystemNtpPtrOutput() SystemNtpPtrOutput {
	return i.ToSystemNtpPtrOutputWithContext(context.Background())
}

func (i *systemNtpPtrType) ToSystemNtpPtrOutputWithContext(ctx context.Context) SystemNtpPtrOutput {
	return pulumi.ToOutputWithContext(ctx, i).(SystemNtpPtrOutput)
}

// SystemNtpArrayInput is an input type that accepts SystemNtpArray and SystemNtpArrayOutput values.
// You can construct a concrete instance of `SystemNtpArrayInput` via:
//
//          SystemNtpArray{ SystemNtpArgs{...} }
type SystemNtpArrayInput interface {
	pulumi.Input

	ToSystemNtpArrayOutput() SystemNtpArrayOutput
	ToSystemNtpArrayOutputWithContext(context.Context) SystemNtpArrayOutput
}

type SystemNtpArray []SystemNtpInput

func (SystemNtpArray) ElementType() reflect.Type {
	return reflect.TypeOf(([]*SystemNtp)(nil))
}

func (i SystemNtpArray) ToSystemNtpArrayOutput() SystemNtpArrayOutput {
	return i.ToSystemNtpArrayOutputWithContext(context.Background())
}

func (i SystemNtpArray) ToSystemNtpArrayOutputWithContext(ctx context.Context) SystemNtpArrayOutput {
	return pulumi.ToOutputWithContext(ctx, i).(SystemNtpArrayOutput)
}

// SystemNtpMapInput is an input type that accepts SystemNtpMap and SystemNtpMapOutput values.
// You can construct a concrete instance of `SystemNtpMapInput` via:
//
//          SystemNtpMap{ "key": SystemNtpArgs{...} }
type SystemNtpMapInput interface {
	pulumi.Input

	ToSystemNtpMapOutput() SystemNtpMapOutput
	ToSystemNtpMapOutputWithContext(context.Context) SystemNtpMapOutput
}

type SystemNtpMap map[string]SystemNtpInput

func (SystemNtpMap) ElementType() reflect.Type {
	return reflect.TypeOf((map[string]*SystemNtp)(nil))
}

func (i SystemNtpMap) ToSystemNtpMapOutput() SystemNtpMapOutput {
	return i.ToSystemNtpMapOutputWithContext(context.Background())
}

func (i SystemNtpMap) ToSystemNtpMapOutputWithContext(ctx context.Context) SystemNtpMapOutput {
	return pulumi.ToOutputWithContext(ctx, i).(SystemNtpMapOutput)
}

type SystemNtpOutput struct {
	*pulumi.OutputState
}

func (SystemNtpOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*SystemNtp)(nil))
}

func (o SystemNtpOutput) ToSystemNtpOutput() SystemNtpOutput {
	return o
}

func (o SystemNtpOutput) ToSystemNtpOutputWithContext(ctx context.Context) SystemNtpOutput {
	return o
}

func (o SystemNtpOutput) ToSystemNtpPtrOutput() SystemNtpPtrOutput {
	return o.ToSystemNtpPtrOutputWithContext(context.Background())
}

func (o SystemNtpOutput) ToSystemNtpPtrOutputWithContext(ctx context.Context) SystemNtpPtrOutput {
	return o.ApplyT(func(v SystemNtp) *SystemNtp {
		return &v
	}).(SystemNtpPtrOutput)
}

type SystemNtpPtrOutput struct {
	*pulumi.OutputState
}

func (SystemNtpPtrOutput) ElementType() reflect.Type {
	return reflect.TypeOf((**SystemNtp)(nil))
}

func (o SystemNtpPtrOutput) ToSystemNtpPtrOutput() SystemNtpPtrOutput {
	return o
}

func (o SystemNtpPtrOutput) ToSystemNtpPtrOutputWithContext(ctx context.Context) SystemNtpPtrOutput {
	return o
}

type SystemNtpArrayOutput struct{ *pulumi.OutputState }

func (SystemNtpArrayOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*[]SystemNtp)(nil))
}

func (o SystemNtpArrayOutput) ToSystemNtpArrayOutput() SystemNtpArrayOutput {
	return o
}

func (o SystemNtpArrayOutput) ToSystemNtpArrayOutputWithContext(ctx context.Context) SystemNtpArrayOutput {
	return o
}

func (o SystemNtpArrayOutput) Index(i pulumi.IntInput) SystemNtpOutput {
	return pulumi.All(o, i).ApplyT(func(vs []interface{}) SystemNtp {
		return vs[0].([]SystemNtp)[vs[1].(int)]
	}).(SystemNtpOutput)
}

type SystemNtpMapOutput struct{ *pulumi.OutputState }

func (SystemNtpMapOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*map[string]SystemNtp)(nil))
}

func (o SystemNtpMapOutput) ToSystemNtpMapOutput() SystemNtpMapOutput {
	return o
}

func (o SystemNtpMapOutput) ToSystemNtpMapOutputWithContext(ctx context.Context) SystemNtpMapOutput {
	return o
}

func (o SystemNtpMapOutput) MapIndex(k pulumi.StringInput) SystemNtpOutput {
	return pulumi.All(o, k).ApplyT(func(vs []interface{}) SystemNtp {
		return vs[0].(map[string]SystemNtp)[vs[1].(string)]
	}).(SystemNtpOutput)
}

func init() {
	pulumi.RegisterOutputType(SystemNtpOutput{})
	pulumi.RegisterOutputType(SystemNtpPtrOutput{})
	pulumi.RegisterOutputType(SystemNtpArrayOutput{})
	pulumi.RegisterOutputType(SystemNtpMapOutput{})
}
