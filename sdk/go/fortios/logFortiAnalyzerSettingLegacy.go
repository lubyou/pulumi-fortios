// Code generated by the Pulumi Terraform Bridge (tfgen) Tool DO NOT EDIT.
// *** WARNING: Do not edit by hand unless you're certain you know what you are doing! ***

package fortios

import (
	"context"
	"reflect"

	"github.com/pkg/errors"
	"github.com/pulumi/pulumi/sdk/v3/go/pulumi"
)

// Provides a resource to configure configure logging to FortiAnalyzer log management devices.
//
// !> **Warning:** The resource will be deprecated and replaced by new resource `LogFortianalyzerSetting`, we recommend that you use the new resource.
//
// ## Example Usage
//
// ```go
// package main
//
// import (
// 	"github.com/lubyou/pulumi-fortios/sdk/go/fortios"
// 	"github.com/pulumi/pulumi/sdk/v3/go/pulumi"
// )
//
// func main() {
// 	pulumi.Run(func(ctx *pulumi.Context) error {
// 		_, err := fortios.NewLogFortiAnalyzerSettingLegacy(ctx, "test1", &fortios.LogFortiAnalyzerSettingLegacyArgs{
// 			EncAlgorithm:  pulumi.String("high-medium"),
// 			HmacAlgorithm: pulumi.String("sha256"),
// 			Reliable:      pulumi.String("enable"),
// 			Server:        pulumi.String("10.2.2.99"),
// 			SourceIp:      pulumi.String("10.2.2.99"),
// 			Status:        pulumi.String("enable"),
// 			UploadOption:  pulumi.String("realtime"),
// 		})
// 		if err != nil {
// 			return err
// 		}
// 		return nil
// 	})
// }
// ```
type LogFortiAnalyzerSettingLegacy struct {
	pulumi.CustomResourceState

	// Enable/disable sending FortiAnalyzer log data with SSL encryption.
	EncAlgorithm pulumi.StringOutput `pulumi:"encAlgorithm"`
	// FortiAnalyzer IPsec tunnel HMAC algorithm.
	HmacAlgorithm pulumi.StringOutput `pulumi:"hmacAlgorithm"`
	// Enable/disable reliable logging to FortiAnalyzer.
	Reliable pulumi.StringOutput `pulumi:"reliable"`
	// The remote FortiAnalyzer.
	Server pulumi.StringOutput `pulumi:"server"`
	// Source IPv4 or IPv6 address used to communicate with FortiAnalyzer.
	SourceIp pulumi.StringOutput `pulumi:"sourceIp"`
	// Enable/disable logging to FortiAnalyzer.
	Status pulumi.StringOutput `pulumi:"status"`
	// Enable/disable logging to hard disk and then uploading to FortiAnalyzer.
	UploadOption pulumi.StringOutput `pulumi:"uploadOption"`
}

// NewLogFortiAnalyzerSettingLegacy registers a new resource with the given unique name, arguments, and options.
func NewLogFortiAnalyzerSettingLegacy(ctx *pulumi.Context,
	name string, args *LogFortiAnalyzerSettingLegacyArgs, opts ...pulumi.ResourceOption) (*LogFortiAnalyzerSettingLegacy, error) {
	if args == nil {
		return nil, errors.New("missing one or more required arguments")
	}

	if args.Status == nil {
		return nil, errors.New("invalid value for required argument 'Status'")
	}
	opts = pkgResourceDefaultOpts(opts)
	var resource LogFortiAnalyzerSettingLegacy
	err := ctx.RegisterResource("fortios:index/logFortiAnalyzerSettingLegacy:LogFortiAnalyzerSettingLegacy", name, args, &resource, opts...)
	if err != nil {
		return nil, err
	}
	return &resource, nil
}

// GetLogFortiAnalyzerSettingLegacy gets an existing LogFortiAnalyzerSettingLegacy resource's state with the given name, ID, and optional
// state properties that are used to uniquely qualify the lookup (nil if not required).
func GetLogFortiAnalyzerSettingLegacy(ctx *pulumi.Context,
	name string, id pulumi.IDInput, state *LogFortiAnalyzerSettingLegacyState, opts ...pulumi.ResourceOption) (*LogFortiAnalyzerSettingLegacy, error) {
	var resource LogFortiAnalyzerSettingLegacy
	err := ctx.ReadResource("fortios:index/logFortiAnalyzerSettingLegacy:LogFortiAnalyzerSettingLegacy", name, id, state, &resource, opts...)
	if err != nil {
		return nil, err
	}
	return &resource, nil
}

// Input properties used for looking up and filtering LogFortiAnalyzerSettingLegacy resources.
type logFortiAnalyzerSettingLegacyState struct {
	// Enable/disable sending FortiAnalyzer log data with SSL encryption.
	EncAlgorithm *string `pulumi:"encAlgorithm"`
	// FortiAnalyzer IPsec tunnel HMAC algorithm.
	HmacAlgorithm *string `pulumi:"hmacAlgorithm"`
	// Enable/disable reliable logging to FortiAnalyzer.
	Reliable *string `pulumi:"reliable"`
	// The remote FortiAnalyzer.
	Server *string `pulumi:"server"`
	// Source IPv4 or IPv6 address used to communicate with FortiAnalyzer.
	SourceIp *string `pulumi:"sourceIp"`
	// Enable/disable logging to FortiAnalyzer.
	Status *string `pulumi:"status"`
	// Enable/disable logging to hard disk and then uploading to FortiAnalyzer.
	UploadOption *string `pulumi:"uploadOption"`
}

type LogFortiAnalyzerSettingLegacyState struct {
	// Enable/disable sending FortiAnalyzer log data with SSL encryption.
	EncAlgorithm pulumi.StringPtrInput
	// FortiAnalyzer IPsec tunnel HMAC algorithm.
	HmacAlgorithm pulumi.StringPtrInput
	// Enable/disable reliable logging to FortiAnalyzer.
	Reliable pulumi.StringPtrInput
	// The remote FortiAnalyzer.
	Server pulumi.StringPtrInput
	// Source IPv4 or IPv6 address used to communicate with FortiAnalyzer.
	SourceIp pulumi.StringPtrInput
	// Enable/disable logging to FortiAnalyzer.
	Status pulumi.StringPtrInput
	// Enable/disable logging to hard disk and then uploading to FortiAnalyzer.
	UploadOption pulumi.StringPtrInput
}

func (LogFortiAnalyzerSettingLegacyState) ElementType() reflect.Type {
	return reflect.TypeOf((*logFortiAnalyzerSettingLegacyState)(nil)).Elem()
}

type logFortiAnalyzerSettingLegacyArgs struct {
	// Enable/disable sending FortiAnalyzer log data with SSL encryption.
	EncAlgorithm *string `pulumi:"encAlgorithm"`
	// FortiAnalyzer IPsec tunnel HMAC algorithm.
	HmacAlgorithm *string `pulumi:"hmacAlgorithm"`
	// Enable/disable reliable logging to FortiAnalyzer.
	Reliable *string `pulumi:"reliable"`
	// The remote FortiAnalyzer.
	Server *string `pulumi:"server"`
	// Source IPv4 or IPv6 address used to communicate with FortiAnalyzer.
	SourceIp *string `pulumi:"sourceIp"`
	// Enable/disable logging to FortiAnalyzer.
	Status string `pulumi:"status"`
	// Enable/disable logging to hard disk and then uploading to FortiAnalyzer.
	UploadOption *string `pulumi:"uploadOption"`
}

// The set of arguments for constructing a LogFortiAnalyzerSettingLegacy resource.
type LogFortiAnalyzerSettingLegacyArgs struct {
	// Enable/disable sending FortiAnalyzer log data with SSL encryption.
	EncAlgorithm pulumi.StringPtrInput
	// FortiAnalyzer IPsec tunnel HMAC algorithm.
	HmacAlgorithm pulumi.StringPtrInput
	// Enable/disable reliable logging to FortiAnalyzer.
	Reliable pulumi.StringPtrInput
	// The remote FortiAnalyzer.
	Server pulumi.StringPtrInput
	// Source IPv4 or IPv6 address used to communicate with FortiAnalyzer.
	SourceIp pulumi.StringPtrInput
	// Enable/disable logging to FortiAnalyzer.
	Status pulumi.StringInput
	// Enable/disable logging to hard disk and then uploading to FortiAnalyzer.
	UploadOption pulumi.StringPtrInput
}

func (LogFortiAnalyzerSettingLegacyArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*logFortiAnalyzerSettingLegacyArgs)(nil)).Elem()
}

type LogFortiAnalyzerSettingLegacyInput interface {
	pulumi.Input

	ToLogFortiAnalyzerSettingLegacyOutput() LogFortiAnalyzerSettingLegacyOutput
	ToLogFortiAnalyzerSettingLegacyOutputWithContext(ctx context.Context) LogFortiAnalyzerSettingLegacyOutput
}

func (*LogFortiAnalyzerSettingLegacy) ElementType() reflect.Type {
	return reflect.TypeOf((**LogFortiAnalyzerSettingLegacy)(nil)).Elem()
}

func (i *LogFortiAnalyzerSettingLegacy) ToLogFortiAnalyzerSettingLegacyOutput() LogFortiAnalyzerSettingLegacyOutput {
	return i.ToLogFortiAnalyzerSettingLegacyOutputWithContext(context.Background())
}

func (i *LogFortiAnalyzerSettingLegacy) ToLogFortiAnalyzerSettingLegacyOutputWithContext(ctx context.Context) LogFortiAnalyzerSettingLegacyOutput {
	return pulumi.ToOutputWithContext(ctx, i).(LogFortiAnalyzerSettingLegacyOutput)
}

// LogFortiAnalyzerSettingLegacyArrayInput is an input type that accepts LogFortiAnalyzerSettingLegacyArray and LogFortiAnalyzerSettingLegacyArrayOutput values.
// You can construct a concrete instance of `LogFortiAnalyzerSettingLegacyArrayInput` via:
//
//          LogFortiAnalyzerSettingLegacyArray{ LogFortiAnalyzerSettingLegacyArgs{...} }
type LogFortiAnalyzerSettingLegacyArrayInput interface {
	pulumi.Input

	ToLogFortiAnalyzerSettingLegacyArrayOutput() LogFortiAnalyzerSettingLegacyArrayOutput
	ToLogFortiAnalyzerSettingLegacyArrayOutputWithContext(context.Context) LogFortiAnalyzerSettingLegacyArrayOutput
}

type LogFortiAnalyzerSettingLegacyArray []LogFortiAnalyzerSettingLegacyInput

func (LogFortiAnalyzerSettingLegacyArray) ElementType() reflect.Type {
	return reflect.TypeOf((*[]*LogFortiAnalyzerSettingLegacy)(nil)).Elem()
}

func (i LogFortiAnalyzerSettingLegacyArray) ToLogFortiAnalyzerSettingLegacyArrayOutput() LogFortiAnalyzerSettingLegacyArrayOutput {
	return i.ToLogFortiAnalyzerSettingLegacyArrayOutputWithContext(context.Background())
}

func (i LogFortiAnalyzerSettingLegacyArray) ToLogFortiAnalyzerSettingLegacyArrayOutputWithContext(ctx context.Context) LogFortiAnalyzerSettingLegacyArrayOutput {
	return pulumi.ToOutputWithContext(ctx, i).(LogFortiAnalyzerSettingLegacyArrayOutput)
}

// LogFortiAnalyzerSettingLegacyMapInput is an input type that accepts LogFortiAnalyzerSettingLegacyMap and LogFortiAnalyzerSettingLegacyMapOutput values.
// You can construct a concrete instance of `LogFortiAnalyzerSettingLegacyMapInput` via:
//
//          LogFortiAnalyzerSettingLegacyMap{ "key": LogFortiAnalyzerSettingLegacyArgs{...} }
type LogFortiAnalyzerSettingLegacyMapInput interface {
	pulumi.Input

	ToLogFortiAnalyzerSettingLegacyMapOutput() LogFortiAnalyzerSettingLegacyMapOutput
	ToLogFortiAnalyzerSettingLegacyMapOutputWithContext(context.Context) LogFortiAnalyzerSettingLegacyMapOutput
}

type LogFortiAnalyzerSettingLegacyMap map[string]LogFortiAnalyzerSettingLegacyInput

func (LogFortiAnalyzerSettingLegacyMap) ElementType() reflect.Type {
	return reflect.TypeOf((*map[string]*LogFortiAnalyzerSettingLegacy)(nil)).Elem()
}

func (i LogFortiAnalyzerSettingLegacyMap) ToLogFortiAnalyzerSettingLegacyMapOutput() LogFortiAnalyzerSettingLegacyMapOutput {
	return i.ToLogFortiAnalyzerSettingLegacyMapOutputWithContext(context.Background())
}

func (i LogFortiAnalyzerSettingLegacyMap) ToLogFortiAnalyzerSettingLegacyMapOutputWithContext(ctx context.Context) LogFortiAnalyzerSettingLegacyMapOutput {
	return pulumi.ToOutputWithContext(ctx, i).(LogFortiAnalyzerSettingLegacyMapOutput)
}

type LogFortiAnalyzerSettingLegacyOutput struct{ *pulumi.OutputState }

func (LogFortiAnalyzerSettingLegacyOutput) ElementType() reflect.Type {
	return reflect.TypeOf((**LogFortiAnalyzerSettingLegacy)(nil)).Elem()
}

func (o LogFortiAnalyzerSettingLegacyOutput) ToLogFortiAnalyzerSettingLegacyOutput() LogFortiAnalyzerSettingLegacyOutput {
	return o
}

func (o LogFortiAnalyzerSettingLegacyOutput) ToLogFortiAnalyzerSettingLegacyOutputWithContext(ctx context.Context) LogFortiAnalyzerSettingLegacyOutput {
	return o
}

type LogFortiAnalyzerSettingLegacyArrayOutput struct{ *pulumi.OutputState }

func (LogFortiAnalyzerSettingLegacyArrayOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*[]*LogFortiAnalyzerSettingLegacy)(nil)).Elem()
}

func (o LogFortiAnalyzerSettingLegacyArrayOutput) ToLogFortiAnalyzerSettingLegacyArrayOutput() LogFortiAnalyzerSettingLegacyArrayOutput {
	return o
}

func (o LogFortiAnalyzerSettingLegacyArrayOutput) ToLogFortiAnalyzerSettingLegacyArrayOutputWithContext(ctx context.Context) LogFortiAnalyzerSettingLegacyArrayOutput {
	return o
}

func (o LogFortiAnalyzerSettingLegacyArrayOutput) Index(i pulumi.IntInput) LogFortiAnalyzerSettingLegacyOutput {
	return pulumi.All(o, i).ApplyT(func(vs []interface{}) *LogFortiAnalyzerSettingLegacy {
		return vs[0].([]*LogFortiAnalyzerSettingLegacy)[vs[1].(int)]
	}).(LogFortiAnalyzerSettingLegacyOutput)
}

type LogFortiAnalyzerSettingLegacyMapOutput struct{ *pulumi.OutputState }

func (LogFortiAnalyzerSettingLegacyMapOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*map[string]*LogFortiAnalyzerSettingLegacy)(nil)).Elem()
}

func (o LogFortiAnalyzerSettingLegacyMapOutput) ToLogFortiAnalyzerSettingLegacyMapOutput() LogFortiAnalyzerSettingLegacyMapOutput {
	return o
}

func (o LogFortiAnalyzerSettingLegacyMapOutput) ToLogFortiAnalyzerSettingLegacyMapOutputWithContext(ctx context.Context) LogFortiAnalyzerSettingLegacyMapOutput {
	return o
}

func (o LogFortiAnalyzerSettingLegacyMapOutput) MapIndex(k pulumi.StringInput) LogFortiAnalyzerSettingLegacyOutput {
	return pulumi.All(o, k).ApplyT(func(vs []interface{}) *LogFortiAnalyzerSettingLegacy {
		return vs[0].(map[string]*LogFortiAnalyzerSettingLegacy)[vs[1].(string)]
	}).(LogFortiAnalyzerSettingLegacyOutput)
}

func init() {
	pulumi.RegisterInputType(reflect.TypeOf((*LogFortiAnalyzerSettingLegacyInput)(nil)).Elem(), &LogFortiAnalyzerSettingLegacy{})
	pulumi.RegisterInputType(reflect.TypeOf((*LogFortiAnalyzerSettingLegacyArrayInput)(nil)).Elem(), LogFortiAnalyzerSettingLegacyArray{})
	pulumi.RegisterInputType(reflect.TypeOf((*LogFortiAnalyzerSettingLegacyMapInput)(nil)).Elem(), LogFortiAnalyzerSettingLegacyMap{})
	pulumi.RegisterOutputType(LogFortiAnalyzerSettingLegacyOutput{})
	pulumi.RegisterOutputType(LogFortiAnalyzerSettingLegacyArrayOutput{})
	pulumi.RegisterOutputType(LogFortiAnalyzerSettingLegacyMapOutput{})
}
