// *** WARNING: this file was generated by the Pulumi Terraform Bridge (tfgen) Tool. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

package fortios

import (
	"context"
	"reflect"

	"github.com/pkg/errors"
	"github.com/pulumi/pulumi/sdk/v3/go/pulumi"
)

// This resource supports Create/Read/Update/Delete devicemanager script for FortiManager.
//
// ## Example Usage
//
// ```go
// package main
//
// import (
// 	"fmt"
//
// 	"github.com/pulumi/pulumi-fortios/sdk/go/fortios"
// 	"github.com/pulumi/pulumi/sdk/v3/go/pulumi"
// )
//
// func main() {
// 	pulumi.Run(func(ctx *pulumi.Context) error {
// 		_, err := fortios.NewFortimanagerDVMScript(ctx, "test1", &fortios.FortimanagerDVMScriptArgs{
// 			Content: pulumi.String(fmt.Sprintf("%v%v%v%v%v%v%v", "config system interface \n", " edit port3 \n", "	 set vdom \"root\"\n", "	 set ip 10.7.0.200 255.255.0.0 \n", "	 set allowaccess ping http https\n", "	 next \n", " end\n")),
// 			Description: pulumi.String("description"),
// 			Target:      pulumi.String("remote_device"),
// 		})
// 		if err != nil {
// 			return err
// 		}
// 		return nil
// 	})
// }
// ```
type FortimanagerDVMScript struct {
	pulumi.CustomResourceState

	// ADOM name. default is 'root'.
	Adom pulumi.StringPtrOutput `pulumi:"adom"`
	// Script content, only cli script is supported now
	Content pulumi.StringOutput `pulumi:"content"`
	// Description.
	Description pulumi.StringPtrOutput `pulumi:"description"`
	// Script name.
	Name pulumi.StringOutput `pulumi:"name"`
	// Script target, Enum: ["deviceDatabase", "remoteDevice", "adomDatabase"]
	Target pulumi.StringPtrOutput `pulumi:"target"`
}

// NewFortimanagerDVMScript registers a new resource with the given unique name, arguments, and options.
func NewFortimanagerDVMScript(ctx *pulumi.Context,
	name string, args *FortimanagerDVMScriptArgs, opts ...pulumi.ResourceOption) (*FortimanagerDVMScript, error) {
	if args == nil {
		return nil, errors.New("missing one or more required arguments")
	}

	if args.Content == nil {
		return nil, errors.New("invalid value for required argument 'Content'")
	}
	var resource FortimanagerDVMScript
	err := ctx.RegisterResource("fortios:index/fortimanagerDVMScript:FortimanagerDVMScript", name, args, &resource, opts...)
	if err != nil {
		return nil, err
	}
	return &resource, nil
}

// GetFortimanagerDVMScript gets an existing FortimanagerDVMScript resource's state with the given name, ID, and optional
// state properties that are used to uniquely qualify the lookup (nil if not required).
func GetFortimanagerDVMScript(ctx *pulumi.Context,
	name string, id pulumi.IDInput, state *FortimanagerDVMScriptState, opts ...pulumi.ResourceOption) (*FortimanagerDVMScript, error) {
	var resource FortimanagerDVMScript
	err := ctx.ReadResource("fortios:index/fortimanagerDVMScript:FortimanagerDVMScript", name, id, state, &resource, opts...)
	if err != nil {
		return nil, err
	}
	return &resource, nil
}

// Input properties used for looking up and filtering FortimanagerDVMScript resources.
type fortimanagerDVMScriptState struct {
	// ADOM name. default is 'root'.
	Adom *string `pulumi:"adom"`
	// Script content, only cli script is supported now
	Content *string `pulumi:"content"`
	// Description.
	Description *string `pulumi:"description"`
	// Script name.
	Name *string `pulumi:"name"`
	// Script target, Enum: ["deviceDatabase", "remoteDevice", "adomDatabase"]
	Target *string `pulumi:"target"`
}

type FortimanagerDVMScriptState struct {
	// ADOM name. default is 'root'.
	Adom pulumi.StringPtrInput
	// Script content, only cli script is supported now
	Content pulumi.StringPtrInput
	// Description.
	Description pulumi.StringPtrInput
	// Script name.
	Name pulumi.StringPtrInput
	// Script target, Enum: ["deviceDatabase", "remoteDevice", "adomDatabase"]
	Target pulumi.StringPtrInput
}

func (FortimanagerDVMScriptState) ElementType() reflect.Type {
	return reflect.TypeOf((*fortimanagerDVMScriptState)(nil)).Elem()
}

type fortimanagerDVMScriptArgs struct {
	// ADOM name. default is 'root'.
	Adom *string `pulumi:"adom"`
	// Script content, only cli script is supported now
	Content string `pulumi:"content"`
	// Description.
	Description *string `pulumi:"description"`
	// Script name.
	Name *string `pulumi:"name"`
	// Script target, Enum: ["deviceDatabase", "remoteDevice", "adomDatabase"]
	Target *string `pulumi:"target"`
}

// The set of arguments for constructing a FortimanagerDVMScript resource.
type FortimanagerDVMScriptArgs struct {
	// ADOM name. default is 'root'.
	Adom pulumi.StringPtrInput
	// Script content, only cli script is supported now
	Content pulumi.StringInput
	// Description.
	Description pulumi.StringPtrInput
	// Script name.
	Name pulumi.StringPtrInput
	// Script target, Enum: ["deviceDatabase", "remoteDevice", "adomDatabase"]
	Target pulumi.StringPtrInput
}

func (FortimanagerDVMScriptArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*fortimanagerDVMScriptArgs)(nil)).Elem()
}

type FortimanagerDVMScriptInput interface {
	pulumi.Input

	ToFortimanagerDVMScriptOutput() FortimanagerDVMScriptOutput
	ToFortimanagerDVMScriptOutputWithContext(ctx context.Context) FortimanagerDVMScriptOutput
}

func (*FortimanagerDVMScript) ElementType() reflect.Type {
	return reflect.TypeOf((*FortimanagerDVMScript)(nil))
}

func (i *FortimanagerDVMScript) ToFortimanagerDVMScriptOutput() FortimanagerDVMScriptOutput {
	return i.ToFortimanagerDVMScriptOutputWithContext(context.Background())
}

func (i *FortimanagerDVMScript) ToFortimanagerDVMScriptOutputWithContext(ctx context.Context) FortimanagerDVMScriptOutput {
	return pulumi.ToOutputWithContext(ctx, i).(FortimanagerDVMScriptOutput)
}

func (i *FortimanagerDVMScript) ToFortimanagerDVMScriptPtrOutput() FortimanagerDVMScriptPtrOutput {
	return i.ToFortimanagerDVMScriptPtrOutputWithContext(context.Background())
}

func (i *FortimanagerDVMScript) ToFortimanagerDVMScriptPtrOutputWithContext(ctx context.Context) FortimanagerDVMScriptPtrOutput {
	return pulumi.ToOutputWithContext(ctx, i).(FortimanagerDVMScriptPtrOutput)
}

type FortimanagerDVMScriptPtrInput interface {
	pulumi.Input

	ToFortimanagerDVMScriptPtrOutput() FortimanagerDVMScriptPtrOutput
	ToFortimanagerDVMScriptPtrOutputWithContext(ctx context.Context) FortimanagerDVMScriptPtrOutput
}

type fortimanagerDVMScriptPtrType FortimanagerDVMScriptArgs

func (*fortimanagerDVMScriptPtrType) ElementType() reflect.Type {
	return reflect.TypeOf((**FortimanagerDVMScript)(nil))
}

func (i *fortimanagerDVMScriptPtrType) ToFortimanagerDVMScriptPtrOutput() FortimanagerDVMScriptPtrOutput {
	return i.ToFortimanagerDVMScriptPtrOutputWithContext(context.Background())
}

func (i *fortimanagerDVMScriptPtrType) ToFortimanagerDVMScriptPtrOutputWithContext(ctx context.Context) FortimanagerDVMScriptPtrOutput {
	return pulumi.ToOutputWithContext(ctx, i).(FortimanagerDVMScriptPtrOutput)
}

// FortimanagerDVMScriptArrayInput is an input type that accepts FortimanagerDVMScriptArray and FortimanagerDVMScriptArrayOutput values.
// You can construct a concrete instance of `FortimanagerDVMScriptArrayInput` via:
//
//          FortimanagerDVMScriptArray{ FortimanagerDVMScriptArgs{...} }
type FortimanagerDVMScriptArrayInput interface {
	pulumi.Input

	ToFortimanagerDVMScriptArrayOutput() FortimanagerDVMScriptArrayOutput
	ToFortimanagerDVMScriptArrayOutputWithContext(context.Context) FortimanagerDVMScriptArrayOutput
}

type FortimanagerDVMScriptArray []FortimanagerDVMScriptInput

func (FortimanagerDVMScriptArray) ElementType() reflect.Type {
	return reflect.TypeOf(([]*FortimanagerDVMScript)(nil))
}

func (i FortimanagerDVMScriptArray) ToFortimanagerDVMScriptArrayOutput() FortimanagerDVMScriptArrayOutput {
	return i.ToFortimanagerDVMScriptArrayOutputWithContext(context.Background())
}

func (i FortimanagerDVMScriptArray) ToFortimanagerDVMScriptArrayOutputWithContext(ctx context.Context) FortimanagerDVMScriptArrayOutput {
	return pulumi.ToOutputWithContext(ctx, i).(FortimanagerDVMScriptArrayOutput)
}

// FortimanagerDVMScriptMapInput is an input type that accepts FortimanagerDVMScriptMap and FortimanagerDVMScriptMapOutput values.
// You can construct a concrete instance of `FortimanagerDVMScriptMapInput` via:
//
//          FortimanagerDVMScriptMap{ "key": FortimanagerDVMScriptArgs{...} }
type FortimanagerDVMScriptMapInput interface {
	pulumi.Input

	ToFortimanagerDVMScriptMapOutput() FortimanagerDVMScriptMapOutput
	ToFortimanagerDVMScriptMapOutputWithContext(context.Context) FortimanagerDVMScriptMapOutput
}

type FortimanagerDVMScriptMap map[string]FortimanagerDVMScriptInput

func (FortimanagerDVMScriptMap) ElementType() reflect.Type {
	return reflect.TypeOf((map[string]*FortimanagerDVMScript)(nil))
}

func (i FortimanagerDVMScriptMap) ToFortimanagerDVMScriptMapOutput() FortimanagerDVMScriptMapOutput {
	return i.ToFortimanagerDVMScriptMapOutputWithContext(context.Background())
}

func (i FortimanagerDVMScriptMap) ToFortimanagerDVMScriptMapOutputWithContext(ctx context.Context) FortimanagerDVMScriptMapOutput {
	return pulumi.ToOutputWithContext(ctx, i).(FortimanagerDVMScriptMapOutput)
}

type FortimanagerDVMScriptOutput struct {
	*pulumi.OutputState
}

func (FortimanagerDVMScriptOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*FortimanagerDVMScript)(nil))
}

func (o FortimanagerDVMScriptOutput) ToFortimanagerDVMScriptOutput() FortimanagerDVMScriptOutput {
	return o
}

func (o FortimanagerDVMScriptOutput) ToFortimanagerDVMScriptOutputWithContext(ctx context.Context) FortimanagerDVMScriptOutput {
	return o
}

func (o FortimanagerDVMScriptOutput) ToFortimanagerDVMScriptPtrOutput() FortimanagerDVMScriptPtrOutput {
	return o.ToFortimanagerDVMScriptPtrOutputWithContext(context.Background())
}

func (o FortimanagerDVMScriptOutput) ToFortimanagerDVMScriptPtrOutputWithContext(ctx context.Context) FortimanagerDVMScriptPtrOutput {
	return o.ApplyT(func(v FortimanagerDVMScript) *FortimanagerDVMScript {
		return &v
	}).(FortimanagerDVMScriptPtrOutput)
}

type FortimanagerDVMScriptPtrOutput struct {
	*pulumi.OutputState
}

func (FortimanagerDVMScriptPtrOutput) ElementType() reflect.Type {
	return reflect.TypeOf((**FortimanagerDVMScript)(nil))
}

func (o FortimanagerDVMScriptPtrOutput) ToFortimanagerDVMScriptPtrOutput() FortimanagerDVMScriptPtrOutput {
	return o
}

func (o FortimanagerDVMScriptPtrOutput) ToFortimanagerDVMScriptPtrOutputWithContext(ctx context.Context) FortimanagerDVMScriptPtrOutput {
	return o
}

type FortimanagerDVMScriptArrayOutput struct{ *pulumi.OutputState }

func (FortimanagerDVMScriptArrayOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*[]FortimanagerDVMScript)(nil))
}

func (o FortimanagerDVMScriptArrayOutput) ToFortimanagerDVMScriptArrayOutput() FortimanagerDVMScriptArrayOutput {
	return o
}

func (o FortimanagerDVMScriptArrayOutput) ToFortimanagerDVMScriptArrayOutputWithContext(ctx context.Context) FortimanagerDVMScriptArrayOutput {
	return o
}

func (o FortimanagerDVMScriptArrayOutput) Index(i pulumi.IntInput) FortimanagerDVMScriptOutput {
	return pulumi.All(o, i).ApplyT(func(vs []interface{}) FortimanagerDVMScript {
		return vs[0].([]FortimanagerDVMScript)[vs[1].(int)]
	}).(FortimanagerDVMScriptOutput)
}

type FortimanagerDVMScriptMapOutput struct{ *pulumi.OutputState }

func (FortimanagerDVMScriptMapOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*map[string]FortimanagerDVMScript)(nil))
}

func (o FortimanagerDVMScriptMapOutput) ToFortimanagerDVMScriptMapOutput() FortimanagerDVMScriptMapOutput {
	return o
}

func (o FortimanagerDVMScriptMapOutput) ToFortimanagerDVMScriptMapOutputWithContext(ctx context.Context) FortimanagerDVMScriptMapOutput {
	return o
}

func (o FortimanagerDVMScriptMapOutput) MapIndex(k pulumi.StringInput) FortimanagerDVMScriptOutput {
	return pulumi.All(o, k).ApplyT(func(vs []interface{}) FortimanagerDVMScript {
		return vs[0].(map[string]FortimanagerDVMScript)[vs[1].(string)]
	}).(FortimanagerDVMScriptOutput)
}

func init() {
	pulumi.RegisterOutputType(FortimanagerDVMScriptOutput{})
	pulumi.RegisterOutputType(FortimanagerDVMScriptPtrOutput{})
	pulumi.RegisterOutputType(FortimanagerDVMScriptArrayOutput{})
	pulumi.RegisterOutputType(FortimanagerDVMScriptMapOutput{})
}
