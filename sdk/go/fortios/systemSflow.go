// Code generated by the Pulumi Terraform Bridge (tfgen) Tool DO NOT EDIT.
// *** WARNING: Do not edit by hand unless you're certain you know what you are doing! ***

package fortios

import (
	"context"
	"reflect"

	"errors"
	"github.com/pulumi/pulumi/sdk/v3/go/pulumi"
)

type SystemSflow struct {
	pulumi.CustomResourceState

	CollectorIp           pulumi.StringOutput    `pulumi:"collectorIp"`
	CollectorPort         pulumi.IntOutput       `pulumi:"collectorPort"`
	Interface             pulumi.StringOutput    `pulumi:"interface"`
	InterfaceSelectMethod pulumi.StringOutput    `pulumi:"interfaceSelectMethod"`
	SourceIp              pulumi.StringOutput    `pulumi:"sourceIp"`
	Vdomparam             pulumi.StringPtrOutput `pulumi:"vdomparam"`
}

// NewSystemSflow registers a new resource with the given unique name, arguments, and options.
func NewSystemSflow(ctx *pulumi.Context,
	name string, args *SystemSflowArgs, opts ...pulumi.ResourceOption) (*SystemSflow, error) {
	if args == nil {
		return nil, errors.New("missing one or more required arguments")
	}

	if args.CollectorIp == nil {
		return nil, errors.New("invalid value for required argument 'CollectorIp'")
	}
	opts = pkgResourceDefaultOpts(opts)
	var resource SystemSflow
	err := ctx.RegisterResource("fortios:index/systemSflow:SystemSflow", name, args, &resource, opts...)
	if err != nil {
		return nil, err
	}
	return &resource, nil
}

// GetSystemSflow gets an existing SystemSflow resource's state with the given name, ID, and optional
// state properties that are used to uniquely qualify the lookup (nil if not required).
func GetSystemSflow(ctx *pulumi.Context,
	name string, id pulumi.IDInput, state *SystemSflowState, opts ...pulumi.ResourceOption) (*SystemSflow, error) {
	var resource SystemSflow
	err := ctx.ReadResource("fortios:index/systemSflow:SystemSflow", name, id, state, &resource, opts...)
	if err != nil {
		return nil, err
	}
	return &resource, nil
}

// Input properties used for looking up and filtering SystemSflow resources.
type systemSflowState struct {
	CollectorIp           *string `pulumi:"collectorIp"`
	CollectorPort         *int    `pulumi:"collectorPort"`
	Interface             *string `pulumi:"interface"`
	InterfaceSelectMethod *string `pulumi:"interfaceSelectMethod"`
	SourceIp              *string `pulumi:"sourceIp"`
	Vdomparam             *string `pulumi:"vdomparam"`
}

type SystemSflowState struct {
	CollectorIp           pulumi.StringPtrInput
	CollectorPort         pulumi.IntPtrInput
	Interface             pulumi.StringPtrInput
	InterfaceSelectMethod pulumi.StringPtrInput
	SourceIp              pulumi.StringPtrInput
	Vdomparam             pulumi.StringPtrInput
}

func (SystemSflowState) ElementType() reflect.Type {
	return reflect.TypeOf((*systemSflowState)(nil)).Elem()
}

type systemSflowArgs struct {
	CollectorIp           string  `pulumi:"collectorIp"`
	CollectorPort         *int    `pulumi:"collectorPort"`
	Interface             *string `pulumi:"interface"`
	InterfaceSelectMethod *string `pulumi:"interfaceSelectMethod"`
	SourceIp              *string `pulumi:"sourceIp"`
	Vdomparam             *string `pulumi:"vdomparam"`
}

// The set of arguments for constructing a SystemSflow resource.
type SystemSflowArgs struct {
	CollectorIp           pulumi.StringInput
	CollectorPort         pulumi.IntPtrInput
	Interface             pulumi.StringPtrInput
	InterfaceSelectMethod pulumi.StringPtrInput
	SourceIp              pulumi.StringPtrInput
	Vdomparam             pulumi.StringPtrInput
}

func (SystemSflowArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*systemSflowArgs)(nil)).Elem()
}

type SystemSflowInput interface {
	pulumi.Input

	ToSystemSflowOutput() SystemSflowOutput
	ToSystemSflowOutputWithContext(ctx context.Context) SystemSflowOutput
}

func (*SystemSflow) ElementType() reflect.Type {
	return reflect.TypeOf((**SystemSflow)(nil)).Elem()
}

func (i *SystemSflow) ToSystemSflowOutput() SystemSflowOutput {
	return i.ToSystemSflowOutputWithContext(context.Background())
}

func (i *SystemSflow) ToSystemSflowOutputWithContext(ctx context.Context) SystemSflowOutput {
	return pulumi.ToOutputWithContext(ctx, i).(SystemSflowOutput)
}

// SystemSflowArrayInput is an input type that accepts SystemSflowArray and SystemSflowArrayOutput values.
// You can construct a concrete instance of `SystemSflowArrayInput` via:
//
//	SystemSflowArray{ SystemSflowArgs{...} }
type SystemSflowArrayInput interface {
	pulumi.Input

	ToSystemSflowArrayOutput() SystemSflowArrayOutput
	ToSystemSflowArrayOutputWithContext(context.Context) SystemSflowArrayOutput
}

type SystemSflowArray []SystemSflowInput

func (SystemSflowArray) ElementType() reflect.Type {
	return reflect.TypeOf((*[]*SystemSflow)(nil)).Elem()
}

func (i SystemSflowArray) ToSystemSflowArrayOutput() SystemSflowArrayOutput {
	return i.ToSystemSflowArrayOutputWithContext(context.Background())
}

func (i SystemSflowArray) ToSystemSflowArrayOutputWithContext(ctx context.Context) SystemSflowArrayOutput {
	return pulumi.ToOutputWithContext(ctx, i).(SystemSflowArrayOutput)
}

// SystemSflowMapInput is an input type that accepts SystemSflowMap and SystemSflowMapOutput values.
// You can construct a concrete instance of `SystemSflowMapInput` via:
//
//	SystemSflowMap{ "key": SystemSflowArgs{...} }
type SystemSflowMapInput interface {
	pulumi.Input

	ToSystemSflowMapOutput() SystemSflowMapOutput
	ToSystemSflowMapOutputWithContext(context.Context) SystemSflowMapOutput
}

type SystemSflowMap map[string]SystemSflowInput

func (SystemSflowMap) ElementType() reflect.Type {
	return reflect.TypeOf((*map[string]*SystemSflow)(nil)).Elem()
}

func (i SystemSflowMap) ToSystemSflowMapOutput() SystemSflowMapOutput {
	return i.ToSystemSflowMapOutputWithContext(context.Background())
}

func (i SystemSflowMap) ToSystemSflowMapOutputWithContext(ctx context.Context) SystemSflowMapOutput {
	return pulumi.ToOutputWithContext(ctx, i).(SystemSflowMapOutput)
}

type SystemSflowOutput struct{ *pulumi.OutputState }

func (SystemSflowOutput) ElementType() reflect.Type {
	return reflect.TypeOf((**SystemSflow)(nil)).Elem()
}

func (o SystemSflowOutput) ToSystemSflowOutput() SystemSflowOutput {
	return o
}

func (o SystemSflowOutput) ToSystemSflowOutputWithContext(ctx context.Context) SystemSflowOutput {
	return o
}

func (o SystemSflowOutput) CollectorIp() pulumi.StringOutput {
	return o.ApplyT(func(v *SystemSflow) pulumi.StringOutput { return v.CollectorIp }).(pulumi.StringOutput)
}

func (o SystemSflowOutput) CollectorPort() pulumi.IntOutput {
	return o.ApplyT(func(v *SystemSflow) pulumi.IntOutput { return v.CollectorPort }).(pulumi.IntOutput)
}

func (o SystemSflowOutput) Interface() pulumi.StringOutput {
	return o.ApplyT(func(v *SystemSflow) pulumi.StringOutput { return v.Interface }).(pulumi.StringOutput)
}

func (o SystemSflowOutput) InterfaceSelectMethod() pulumi.StringOutput {
	return o.ApplyT(func(v *SystemSflow) pulumi.StringOutput { return v.InterfaceSelectMethod }).(pulumi.StringOutput)
}

func (o SystemSflowOutput) SourceIp() pulumi.StringOutput {
	return o.ApplyT(func(v *SystemSflow) pulumi.StringOutput { return v.SourceIp }).(pulumi.StringOutput)
}

func (o SystemSflowOutput) Vdomparam() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *SystemSflow) pulumi.StringPtrOutput { return v.Vdomparam }).(pulumi.StringPtrOutput)
}

type SystemSflowArrayOutput struct{ *pulumi.OutputState }

func (SystemSflowArrayOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*[]*SystemSflow)(nil)).Elem()
}

func (o SystemSflowArrayOutput) ToSystemSflowArrayOutput() SystemSflowArrayOutput {
	return o
}

func (o SystemSflowArrayOutput) ToSystemSflowArrayOutputWithContext(ctx context.Context) SystemSflowArrayOutput {
	return o
}

func (o SystemSflowArrayOutput) Index(i pulumi.IntInput) SystemSflowOutput {
	return pulumi.All(o, i).ApplyT(func(vs []interface{}) *SystemSflow {
		return vs[0].([]*SystemSflow)[vs[1].(int)]
	}).(SystemSflowOutput)
}

type SystemSflowMapOutput struct{ *pulumi.OutputState }

func (SystemSflowMapOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*map[string]*SystemSflow)(nil)).Elem()
}

func (o SystemSflowMapOutput) ToSystemSflowMapOutput() SystemSflowMapOutput {
	return o
}

func (o SystemSflowMapOutput) ToSystemSflowMapOutputWithContext(ctx context.Context) SystemSflowMapOutput {
	return o
}

func (o SystemSflowMapOutput) MapIndex(k pulumi.StringInput) SystemSflowOutput {
	return pulumi.All(o, k).ApplyT(func(vs []interface{}) *SystemSflow {
		return vs[0].(map[string]*SystemSflow)[vs[1].(string)]
	}).(SystemSflowOutput)
}

func init() {
	pulumi.RegisterInputType(reflect.TypeOf((*SystemSflowInput)(nil)).Elem(), &SystemSflow{})
	pulumi.RegisterInputType(reflect.TypeOf((*SystemSflowArrayInput)(nil)).Elem(), SystemSflowArray{})
	pulumi.RegisterInputType(reflect.TypeOf((*SystemSflowMapInput)(nil)).Elem(), SystemSflowMap{})
	pulumi.RegisterOutputType(SystemSflowOutput{})
	pulumi.RegisterOutputType(SystemSflowArrayOutput{})
	pulumi.RegisterOutputType(SystemSflowMapOutput{})
}
