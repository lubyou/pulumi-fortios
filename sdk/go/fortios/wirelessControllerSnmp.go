// Code generated by the Pulumi Terraform Bridge (tfgen) Tool DO NOT EDIT.
// *** WARNING: Do not edit by hand unless you're certain you know what you are doing! ***

package fortios

import (
	"context"
	"reflect"

	"github.com/pulumi/pulumi/sdk/v3/go/pulumi"
)

type WirelessControllerSnmp struct {
	pulumi.CustomResourceState

	Communities          WirelessControllerSnmpCommunityArrayOutput `pulumi:"communities"`
	ContactInfo          pulumi.StringOutput                        `pulumi:"contactInfo"`
	DynamicSortSubtable  pulumi.StringPtrOutput                     `pulumi:"dynamicSortSubtable"`
	EngineId             pulumi.StringOutput                        `pulumi:"engineId"`
	TrapHighCpuThreshold pulumi.IntOutput                           `pulumi:"trapHighCpuThreshold"`
	TrapHighMemThreshold pulumi.IntOutput                           `pulumi:"trapHighMemThreshold"`
	Users                WirelessControllerSnmpUserArrayOutput      `pulumi:"users"`
	Vdomparam            pulumi.StringPtrOutput                     `pulumi:"vdomparam"`
}

// NewWirelessControllerSnmp registers a new resource with the given unique name, arguments, and options.
func NewWirelessControllerSnmp(ctx *pulumi.Context,
	name string, args *WirelessControllerSnmpArgs, opts ...pulumi.ResourceOption) (*WirelessControllerSnmp, error) {
	if args == nil {
		args = &WirelessControllerSnmpArgs{}
	}

	opts = pkgResourceDefaultOpts(opts)
	var resource WirelessControllerSnmp
	err := ctx.RegisterResource("fortios:index/wirelessControllerSnmp:WirelessControllerSnmp", name, args, &resource, opts...)
	if err != nil {
		return nil, err
	}
	return &resource, nil
}

// GetWirelessControllerSnmp gets an existing WirelessControllerSnmp resource's state with the given name, ID, and optional
// state properties that are used to uniquely qualify the lookup (nil if not required).
func GetWirelessControllerSnmp(ctx *pulumi.Context,
	name string, id pulumi.IDInput, state *WirelessControllerSnmpState, opts ...pulumi.ResourceOption) (*WirelessControllerSnmp, error) {
	var resource WirelessControllerSnmp
	err := ctx.ReadResource("fortios:index/wirelessControllerSnmp:WirelessControllerSnmp", name, id, state, &resource, opts...)
	if err != nil {
		return nil, err
	}
	return &resource, nil
}

// Input properties used for looking up and filtering WirelessControllerSnmp resources.
type wirelessControllerSnmpState struct {
	Communities          []WirelessControllerSnmpCommunity `pulumi:"communities"`
	ContactInfo          *string                           `pulumi:"contactInfo"`
	DynamicSortSubtable  *string                           `pulumi:"dynamicSortSubtable"`
	EngineId             *string                           `pulumi:"engineId"`
	TrapHighCpuThreshold *int                              `pulumi:"trapHighCpuThreshold"`
	TrapHighMemThreshold *int                              `pulumi:"trapHighMemThreshold"`
	Users                []WirelessControllerSnmpUser      `pulumi:"users"`
	Vdomparam            *string                           `pulumi:"vdomparam"`
}

type WirelessControllerSnmpState struct {
	Communities          WirelessControllerSnmpCommunityArrayInput
	ContactInfo          pulumi.StringPtrInput
	DynamicSortSubtable  pulumi.StringPtrInput
	EngineId             pulumi.StringPtrInput
	TrapHighCpuThreshold pulumi.IntPtrInput
	TrapHighMemThreshold pulumi.IntPtrInput
	Users                WirelessControllerSnmpUserArrayInput
	Vdomparam            pulumi.StringPtrInput
}

func (WirelessControllerSnmpState) ElementType() reflect.Type {
	return reflect.TypeOf((*wirelessControllerSnmpState)(nil)).Elem()
}

type wirelessControllerSnmpArgs struct {
	Communities          []WirelessControllerSnmpCommunity `pulumi:"communities"`
	ContactInfo          *string                           `pulumi:"contactInfo"`
	DynamicSortSubtable  *string                           `pulumi:"dynamicSortSubtable"`
	EngineId             *string                           `pulumi:"engineId"`
	TrapHighCpuThreshold *int                              `pulumi:"trapHighCpuThreshold"`
	TrapHighMemThreshold *int                              `pulumi:"trapHighMemThreshold"`
	Users                []WirelessControllerSnmpUser      `pulumi:"users"`
	Vdomparam            *string                           `pulumi:"vdomparam"`
}

// The set of arguments for constructing a WirelessControllerSnmp resource.
type WirelessControllerSnmpArgs struct {
	Communities          WirelessControllerSnmpCommunityArrayInput
	ContactInfo          pulumi.StringPtrInput
	DynamicSortSubtable  pulumi.StringPtrInput
	EngineId             pulumi.StringPtrInput
	TrapHighCpuThreshold pulumi.IntPtrInput
	TrapHighMemThreshold pulumi.IntPtrInput
	Users                WirelessControllerSnmpUserArrayInput
	Vdomparam            pulumi.StringPtrInput
}

func (WirelessControllerSnmpArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*wirelessControllerSnmpArgs)(nil)).Elem()
}

type WirelessControllerSnmpInput interface {
	pulumi.Input

	ToWirelessControllerSnmpOutput() WirelessControllerSnmpOutput
	ToWirelessControllerSnmpOutputWithContext(ctx context.Context) WirelessControllerSnmpOutput
}

func (*WirelessControllerSnmp) ElementType() reflect.Type {
	return reflect.TypeOf((**WirelessControllerSnmp)(nil)).Elem()
}

func (i *WirelessControllerSnmp) ToWirelessControllerSnmpOutput() WirelessControllerSnmpOutput {
	return i.ToWirelessControllerSnmpOutputWithContext(context.Background())
}

func (i *WirelessControllerSnmp) ToWirelessControllerSnmpOutputWithContext(ctx context.Context) WirelessControllerSnmpOutput {
	return pulumi.ToOutputWithContext(ctx, i).(WirelessControllerSnmpOutput)
}

// WirelessControllerSnmpArrayInput is an input type that accepts WirelessControllerSnmpArray and WirelessControllerSnmpArrayOutput values.
// You can construct a concrete instance of `WirelessControllerSnmpArrayInput` via:
//
//	WirelessControllerSnmpArray{ WirelessControllerSnmpArgs{...} }
type WirelessControllerSnmpArrayInput interface {
	pulumi.Input

	ToWirelessControllerSnmpArrayOutput() WirelessControllerSnmpArrayOutput
	ToWirelessControllerSnmpArrayOutputWithContext(context.Context) WirelessControllerSnmpArrayOutput
}

type WirelessControllerSnmpArray []WirelessControllerSnmpInput

func (WirelessControllerSnmpArray) ElementType() reflect.Type {
	return reflect.TypeOf((*[]*WirelessControllerSnmp)(nil)).Elem()
}

func (i WirelessControllerSnmpArray) ToWirelessControllerSnmpArrayOutput() WirelessControllerSnmpArrayOutput {
	return i.ToWirelessControllerSnmpArrayOutputWithContext(context.Background())
}

func (i WirelessControllerSnmpArray) ToWirelessControllerSnmpArrayOutputWithContext(ctx context.Context) WirelessControllerSnmpArrayOutput {
	return pulumi.ToOutputWithContext(ctx, i).(WirelessControllerSnmpArrayOutput)
}

// WirelessControllerSnmpMapInput is an input type that accepts WirelessControllerSnmpMap and WirelessControllerSnmpMapOutput values.
// You can construct a concrete instance of `WirelessControllerSnmpMapInput` via:
//
//	WirelessControllerSnmpMap{ "key": WirelessControllerSnmpArgs{...} }
type WirelessControllerSnmpMapInput interface {
	pulumi.Input

	ToWirelessControllerSnmpMapOutput() WirelessControllerSnmpMapOutput
	ToWirelessControllerSnmpMapOutputWithContext(context.Context) WirelessControllerSnmpMapOutput
}

type WirelessControllerSnmpMap map[string]WirelessControllerSnmpInput

func (WirelessControllerSnmpMap) ElementType() reflect.Type {
	return reflect.TypeOf((*map[string]*WirelessControllerSnmp)(nil)).Elem()
}

func (i WirelessControllerSnmpMap) ToWirelessControllerSnmpMapOutput() WirelessControllerSnmpMapOutput {
	return i.ToWirelessControllerSnmpMapOutputWithContext(context.Background())
}

func (i WirelessControllerSnmpMap) ToWirelessControllerSnmpMapOutputWithContext(ctx context.Context) WirelessControllerSnmpMapOutput {
	return pulumi.ToOutputWithContext(ctx, i).(WirelessControllerSnmpMapOutput)
}

type WirelessControllerSnmpOutput struct{ *pulumi.OutputState }

func (WirelessControllerSnmpOutput) ElementType() reflect.Type {
	return reflect.TypeOf((**WirelessControllerSnmp)(nil)).Elem()
}

func (o WirelessControllerSnmpOutput) ToWirelessControllerSnmpOutput() WirelessControllerSnmpOutput {
	return o
}

func (o WirelessControllerSnmpOutput) ToWirelessControllerSnmpOutputWithContext(ctx context.Context) WirelessControllerSnmpOutput {
	return o
}

func (o WirelessControllerSnmpOutput) Communities() WirelessControllerSnmpCommunityArrayOutput {
	return o.ApplyT(func(v *WirelessControllerSnmp) WirelessControllerSnmpCommunityArrayOutput { return v.Communities }).(WirelessControllerSnmpCommunityArrayOutput)
}

func (o WirelessControllerSnmpOutput) ContactInfo() pulumi.StringOutput {
	return o.ApplyT(func(v *WirelessControllerSnmp) pulumi.StringOutput { return v.ContactInfo }).(pulumi.StringOutput)
}

func (o WirelessControllerSnmpOutput) DynamicSortSubtable() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *WirelessControllerSnmp) pulumi.StringPtrOutput { return v.DynamicSortSubtable }).(pulumi.StringPtrOutput)
}

func (o WirelessControllerSnmpOutput) EngineId() pulumi.StringOutput {
	return o.ApplyT(func(v *WirelessControllerSnmp) pulumi.StringOutput { return v.EngineId }).(pulumi.StringOutput)
}

func (o WirelessControllerSnmpOutput) TrapHighCpuThreshold() pulumi.IntOutput {
	return o.ApplyT(func(v *WirelessControllerSnmp) pulumi.IntOutput { return v.TrapHighCpuThreshold }).(pulumi.IntOutput)
}

func (o WirelessControllerSnmpOutput) TrapHighMemThreshold() pulumi.IntOutput {
	return o.ApplyT(func(v *WirelessControllerSnmp) pulumi.IntOutput { return v.TrapHighMemThreshold }).(pulumi.IntOutput)
}

func (o WirelessControllerSnmpOutput) Users() WirelessControllerSnmpUserArrayOutput {
	return o.ApplyT(func(v *WirelessControllerSnmp) WirelessControllerSnmpUserArrayOutput { return v.Users }).(WirelessControllerSnmpUserArrayOutput)
}

func (o WirelessControllerSnmpOutput) Vdomparam() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *WirelessControllerSnmp) pulumi.StringPtrOutput { return v.Vdomparam }).(pulumi.StringPtrOutput)
}

type WirelessControllerSnmpArrayOutput struct{ *pulumi.OutputState }

func (WirelessControllerSnmpArrayOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*[]*WirelessControllerSnmp)(nil)).Elem()
}

func (o WirelessControllerSnmpArrayOutput) ToWirelessControllerSnmpArrayOutput() WirelessControllerSnmpArrayOutput {
	return o
}

func (o WirelessControllerSnmpArrayOutput) ToWirelessControllerSnmpArrayOutputWithContext(ctx context.Context) WirelessControllerSnmpArrayOutput {
	return o
}

func (o WirelessControllerSnmpArrayOutput) Index(i pulumi.IntInput) WirelessControllerSnmpOutput {
	return pulumi.All(o, i).ApplyT(func(vs []interface{}) *WirelessControllerSnmp {
		return vs[0].([]*WirelessControllerSnmp)[vs[1].(int)]
	}).(WirelessControllerSnmpOutput)
}

type WirelessControllerSnmpMapOutput struct{ *pulumi.OutputState }

func (WirelessControllerSnmpMapOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*map[string]*WirelessControllerSnmp)(nil)).Elem()
}

func (o WirelessControllerSnmpMapOutput) ToWirelessControllerSnmpMapOutput() WirelessControllerSnmpMapOutput {
	return o
}

func (o WirelessControllerSnmpMapOutput) ToWirelessControllerSnmpMapOutputWithContext(ctx context.Context) WirelessControllerSnmpMapOutput {
	return o
}

func (o WirelessControllerSnmpMapOutput) MapIndex(k pulumi.StringInput) WirelessControllerSnmpOutput {
	return pulumi.All(o, k).ApplyT(func(vs []interface{}) *WirelessControllerSnmp {
		return vs[0].(map[string]*WirelessControllerSnmp)[vs[1].(string)]
	}).(WirelessControllerSnmpOutput)
}

func init() {
	pulumi.RegisterInputType(reflect.TypeOf((*WirelessControllerSnmpInput)(nil)).Elem(), &WirelessControllerSnmp{})
	pulumi.RegisterInputType(reflect.TypeOf((*WirelessControllerSnmpArrayInput)(nil)).Elem(), WirelessControllerSnmpArray{})
	pulumi.RegisterInputType(reflect.TypeOf((*WirelessControllerSnmpMapInput)(nil)).Elem(), WirelessControllerSnmpMap{})
	pulumi.RegisterOutputType(WirelessControllerSnmpOutput{})
	pulumi.RegisterOutputType(WirelessControllerSnmpArrayOutput{})
	pulumi.RegisterOutputType(WirelessControllerSnmpMapOutput{})
}
