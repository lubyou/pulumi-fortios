// *** WARNING: this file was generated by the Pulumi Terraform Bridge (tfgen) Tool. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

package fortios

import (
	"context"
	"reflect"

	"github.com/pulumi/pulumi/sdk/v3/go/pulumi"
)

// Report dataset configuration. Applies to FortiOS Version `<= 7.0.0`.
//
// ## Example Usage
//
// ```go
// package main
//
// import (
// 	"github.com/pulumi/pulumi-fortios/sdk/go/fortios"
// 	"github.com/pulumi/pulumi/sdk/v3/go/pulumi"
// )
//
// func main() {
// 	pulumi.Run(func(ctx *pulumi.Context) error {
// 		_, err := fortios.NewReportDataset(ctx, "trname", &fortios.ReportDatasetArgs{
// 			Policy: pulumi.Int(0),
// 			Query:  pulumi.String("select * from testdb"),
// 		})
// 		if err != nil {
// 			return err
// 		}
// 		return nil
// 	})
// }
// ```
//
// ## Import
//
// Report Dataset can be imported using any of these accepted formats$ export "FORTIOS_IMPORT_TABLE"="true"
//
// ```sh
//  $ pulumi import fortios:index/reportDataset:ReportDataset labelname {{name}}
// ```
//
//  $ unset "FORTIOS_IMPORT_TABLE"
type ReportDataset struct {
	pulumi.CustomResourceState

	// true or false, set this parameter to true when using dynamic forEach + toset to configure and sort sub-tables, please do not set this parameter when configuring static sub-tables.
	DynamicSortSubtable pulumi.StringPtrOutput `pulumi:"dynamicSortSubtable"`
	// SQL field name.
	Fields ReportDatasetFieldArrayOutput `pulumi:"fields"`
	// Name.
	Name pulumi.StringOutput `pulumi:"name"`
	// Parameters. The structure of `parameters` block is documented below.
	Parameters ReportDatasetParameterArrayOutput `pulumi:"parameters"`
	// Used by monitor policy.
	Policy pulumi.IntOutput `pulumi:"policy"`
	// SQL query statement.
	Query pulumi.StringOutput `pulumi:"query"`
	// Specifies the vdom to which the resource will be applied when the FortiGate unit is running in VDOM mode. Only one vdom can be specified. If you want to inherit the vdom configuration of the provider, please do not set this parameter.
	Vdomparam pulumi.StringPtrOutput `pulumi:"vdomparam"`
}

// NewReportDataset registers a new resource with the given unique name, arguments, and options.
func NewReportDataset(ctx *pulumi.Context,
	name string, args *ReportDatasetArgs, opts ...pulumi.ResourceOption) (*ReportDataset, error) {
	if args == nil {
		args = &ReportDatasetArgs{}
	}

	opts = pkgResourceDefaultOpts(opts)
	var resource ReportDataset
	err := ctx.RegisterResource("fortios:index/reportDataset:ReportDataset", name, args, &resource, opts...)
	if err != nil {
		return nil, err
	}
	return &resource, nil
}

// GetReportDataset gets an existing ReportDataset resource's state with the given name, ID, and optional
// state properties that are used to uniquely qualify the lookup (nil if not required).
func GetReportDataset(ctx *pulumi.Context,
	name string, id pulumi.IDInput, state *ReportDatasetState, opts ...pulumi.ResourceOption) (*ReportDataset, error) {
	var resource ReportDataset
	err := ctx.ReadResource("fortios:index/reportDataset:ReportDataset", name, id, state, &resource, opts...)
	if err != nil {
		return nil, err
	}
	return &resource, nil
}

// Input properties used for looking up and filtering ReportDataset resources.
type reportDatasetState struct {
	// true or false, set this parameter to true when using dynamic forEach + toset to configure and sort sub-tables, please do not set this parameter when configuring static sub-tables.
	DynamicSortSubtable *string `pulumi:"dynamicSortSubtable"`
	// SQL field name.
	Fields []ReportDatasetField `pulumi:"fields"`
	// Name.
	Name *string `pulumi:"name"`
	// Parameters. The structure of `parameters` block is documented below.
	Parameters []ReportDatasetParameter `pulumi:"parameters"`
	// Used by monitor policy.
	Policy *int `pulumi:"policy"`
	// SQL query statement.
	Query *string `pulumi:"query"`
	// Specifies the vdom to which the resource will be applied when the FortiGate unit is running in VDOM mode. Only one vdom can be specified. If you want to inherit the vdom configuration of the provider, please do not set this parameter.
	Vdomparam *string `pulumi:"vdomparam"`
}

type ReportDatasetState struct {
	// true or false, set this parameter to true when using dynamic forEach + toset to configure and sort sub-tables, please do not set this parameter when configuring static sub-tables.
	DynamicSortSubtable pulumi.StringPtrInput
	// SQL field name.
	Fields ReportDatasetFieldArrayInput
	// Name.
	Name pulumi.StringPtrInput
	// Parameters. The structure of `parameters` block is documented below.
	Parameters ReportDatasetParameterArrayInput
	// Used by monitor policy.
	Policy pulumi.IntPtrInput
	// SQL query statement.
	Query pulumi.StringPtrInput
	// Specifies the vdom to which the resource will be applied when the FortiGate unit is running in VDOM mode. Only one vdom can be specified. If you want to inherit the vdom configuration of the provider, please do not set this parameter.
	Vdomparam pulumi.StringPtrInput
}

func (ReportDatasetState) ElementType() reflect.Type {
	return reflect.TypeOf((*reportDatasetState)(nil)).Elem()
}

type reportDatasetArgs struct {
	// true or false, set this parameter to true when using dynamic forEach + toset to configure and sort sub-tables, please do not set this parameter when configuring static sub-tables.
	DynamicSortSubtable *string `pulumi:"dynamicSortSubtable"`
	// SQL field name.
	Fields []ReportDatasetField `pulumi:"fields"`
	// Name.
	Name *string `pulumi:"name"`
	// Parameters. The structure of `parameters` block is documented below.
	Parameters []ReportDatasetParameter `pulumi:"parameters"`
	// Used by monitor policy.
	Policy *int `pulumi:"policy"`
	// SQL query statement.
	Query *string `pulumi:"query"`
	// Specifies the vdom to which the resource will be applied when the FortiGate unit is running in VDOM mode. Only one vdom can be specified. If you want to inherit the vdom configuration of the provider, please do not set this parameter.
	Vdomparam *string `pulumi:"vdomparam"`
}

// The set of arguments for constructing a ReportDataset resource.
type ReportDatasetArgs struct {
	// true or false, set this parameter to true when using dynamic forEach + toset to configure and sort sub-tables, please do not set this parameter when configuring static sub-tables.
	DynamicSortSubtable pulumi.StringPtrInput
	// SQL field name.
	Fields ReportDatasetFieldArrayInput
	// Name.
	Name pulumi.StringPtrInput
	// Parameters. The structure of `parameters` block is documented below.
	Parameters ReportDatasetParameterArrayInput
	// Used by monitor policy.
	Policy pulumi.IntPtrInput
	// SQL query statement.
	Query pulumi.StringPtrInput
	// Specifies the vdom to which the resource will be applied when the FortiGate unit is running in VDOM mode. Only one vdom can be specified. If you want to inherit the vdom configuration of the provider, please do not set this parameter.
	Vdomparam pulumi.StringPtrInput
}

func (ReportDatasetArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*reportDatasetArgs)(nil)).Elem()
}

type ReportDatasetInput interface {
	pulumi.Input

	ToReportDatasetOutput() ReportDatasetOutput
	ToReportDatasetOutputWithContext(ctx context.Context) ReportDatasetOutput
}

func (*ReportDataset) ElementType() reflect.Type {
	return reflect.TypeOf((**ReportDataset)(nil)).Elem()
}

func (i *ReportDataset) ToReportDatasetOutput() ReportDatasetOutput {
	return i.ToReportDatasetOutputWithContext(context.Background())
}

func (i *ReportDataset) ToReportDatasetOutputWithContext(ctx context.Context) ReportDatasetOutput {
	return pulumi.ToOutputWithContext(ctx, i).(ReportDatasetOutput)
}

// ReportDatasetArrayInput is an input type that accepts ReportDatasetArray and ReportDatasetArrayOutput values.
// You can construct a concrete instance of `ReportDatasetArrayInput` via:
//
//          ReportDatasetArray{ ReportDatasetArgs{...} }
type ReportDatasetArrayInput interface {
	pulumi.Input

	ToReportDatasetArrayOutput() ReportDatasetArrayOutput
	ToReportDatasetArrayOutputWithContext(context.Context) ReportDatasetArrayOutput
}

type ReportDatasetArray []ReportDatasetInput

func (ReportDatasetArray) ElementType() reflect.Type {
	return reflect.TypeOf((*[]*ReportDataset)(nil)).Elem()
}

func (i ReportDatasetArray) ToReportDatasetArrayOutput() ReportDatasetArrayOutput {
	return i.ToReportDatasetArrayOutputWithContext(context.Background())
}

func (i ReportDatasetArray) ToReportDatasetArrayOutputWithContext(ctx context.Context) ReportDatasetArrayOutput {
	return pulumi.ToOutputWithContext(ctx, i).(ReportDatasetArrayOutput)
}

// ReportDatasetMapInput is an input type that accepts ReportDatasetMap and ReportDatasetMapOutput values.
// You can construct a concrete instance of `ReportDatasetMapInput` via:
//
//          ReportDatasetMap{ "key": ReportDatasetArgs{...} }
type ReportDatasetMapInput interface {
	pulumi.Input

	ToReportDatasetMapOutput() ReportDatasetMapOutput
	ToReportDatasetMapOutputWithContext(context.Context) ReportDatasetMapOutput
}

type ReportDatasetMap map[string]ReportDatasetInput

func (ReportDatasetMap) ElementType() reflect.Type {
	return reflect.TypeOf((*map[string]*ReportDataset)(nil)).Elem()
}

func (i ReportDatasetMap) ToReportDatasetMapOutput() ReportDatasetMapOutput {
	return i.ToReportDatasetMapOutputWithContext(context.Background())
}

func (i ReportDatasetMap) ToReportDatasetMapOutputWithContext(ctx context.Context) ReportDatasetMapOutput {
	return pulumi.ToOutputWithContext(ctx, i).(ReportDatasetMapOutput)
}

type ReportDatasetOutput struct{ *pulumi.OutputState }

func (ReportDatasetOutput) ElementType() reflect.Type {
	return reflect.TypeOf((**ReportDataset)(nil)).Elem()
}

func (o ReportDatasetOutput) ToReportDatasetOutput() ReportDatasetOutput {
	return o
}

func (o ReportDatasetOutput) ToReportDatasetOutputWithContext(ctx context.Context) ReportDatasetOutput {
	return o
}

type ReportDatasetArrayOutput struct{ *pulumi.OutputState }

func (ReportDatasetArrayOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*[]*ReportDataset)(nil)).Elem()
}

func (o ReportDatasetArrayOutput) ToReportDatasetArrayOutput() ReportDatasetArrayOutput {
	return o
}

func (o ReportDatasetArrayOutput) ToReportDatasetArrayOutputWithContext(ctx context.Context) ReportDatasetArrayOutput {
	return o
}

func (o ReportDatasetArrayOutput) Index(i pulumi.IntInput) ReportDatasetOutput {
	return pulumi.All(o, i).ApplyT(func(vs []interface{}) *ReportDataset {
		return vs[0].([]*ReportDataset)[vs[1].(int)]
	}).(ReportDatasetOutput)
}

type ReportDatasetMapOutput struct{ *pulumi.OutputState }

func (ReportDatasetMapOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*map[string]*ReportDataset)(nil)).Elem()
}

func (o ReportDatasetMapOutput) ToReportDatasetMapOutput() ReportDatasetMapOutput {
	return o
}

func (o ReportDatasetMapOutput) ToReportDatasetMapOutputWithContext(ctx context.Context) ReportDatasetMapOutput {
	return o
}

func (o ReportDatasetMapOutput) MapIndex(k pulumi.StringInput) ReportDatasetOutput {
	return pulumi.All(o, k).ApplyT(func(vs []interface{}) *ReportDataset {
		return vs[0].(map[string]*ReportDataset)[vs[1].(string)]
	}).(ReportDatasetOutput)
}

func init() {
	pulumi.RegisterInputType(reflect.TypeOf((*ReportDatasetInput)(nil)).Elem(), &ReportDataset{})
	pulumi.RegisterInputType(reflect.TypeOf((*ReportDatasetArrayInput)(nil)).Elem(), ReportDatasetArray{})
	pulumi.RegisterInputType(reflect.TypeOf((*ReportDatasetMapInput)(nil)).Elem(), ReportDatasetMap{})
	pulumi.RegisterOutputType(ReportDatasetOutput{})
	pulumi.RegisterOutputType(ReportDatasetArrayOutput{})
	pulumi.RegisterOutputType(ReportDatasetMapOutput{})
}
