// Code generated by the Pulumi Terraform Bridge (tfgen) Tool DO NOT EDIT.
// *** WARNING: Do not edit by hand unless you're certain you know what you are doing! ***

package fortios

import (
	"context"
	"reflect"

	"github.com/lubyou/pulumi-fortios/sdk/go/fortios/internal"
	"github.com/pulumi/pulumi/sdk/v3/go/pulumi"
	"github.com/pulumi/pulumi/sdk/v3/go/pulumix"
)

type ReportDataset struct {
	pulumi.CustomResourceState

	DynamicSortSubtable pulumi.StringPtrOutput            `pulumi:"dynamicSortSubtable"`
	Fields              ReportDatasetFieldArrayOutput     `pulumi:"fields"`
	GetAllTables        pulumi.StringPtrOutput            `pulumi:"getAllTables"`
	Name                pulumi.StringOutput               `pulumi:"name"`
	Parameters          ReportDatasetParameterArrayOutput `pulumi:"parameters"`
	Policy              pulumi.IntOutput                  `pulumi:"policy"`
	Query               pulumi.StringOutput               `pulumi:"query"`
	Vdomparam           pulumi.StringPtrOutput            `pulumi:"vdomparam"`
}

// NewReportDataset registers a new resource with the given unique name, arguments, and options.
func NewReportDataset(ctx *pulumi.Context,
	name string, args *ReportDatasetArgs, opts ...pulumi.ResourceOption) (*ReportDataset, error) {
	if args == nil {
		args = &ReportDatasetArgs{}
	}

	opts = internal.PkgResourceDefaultOpts(opts)
	var resource ReportDataset
	err := ctx.RegisterResource("fortios:index/reportDataset:ReportDataset", name, args, &resource, opts...)
	if err != nil {
		return nil, err
	}
	return &resource, nil
}

// GetReportDataset gets an existing ReportDataset resource's state with the given name, ID, and optional
// state properties that are used to uniquely qualify the lookup (nil if not required).
func GetReportDataset(ctx *pulumi.Context,
	name string, id pulumi.IDInput, state *ReportDatasetState, opts ...pulumi.ResourceOption) (*ReportDataset, error) {
	var resource ReportDataset
	err := ctx.ReadResource("fortios:index/reportDataset:ReportDataset", name, id, state, &resource, opts...)
	if err != nil {
		return nil, err
	}
	return &resource, nil
}

// Input properties used for looking up and filtering ReportDataset resources.
type reportDatasetState struct {
	DynamicSortSubtable *string                  `pulumi:"dynamicSortSubtable"`
	Fields              []ReportDatasetField     `pulumi:"fields"`
	GetAllTables        *string                  `pulumi:"getAllTables"`
	Name                *string                  `pulumi:"name"`
	Parameters          []ReportDatasetParameter `pulumi:"parameters"`
	Policy              *int                     `pulumi:"policy"`
	Query               *string                  `pulumi:"query"`
	Vdomparam           *string                  `pulumi:"vdomparam"`
}

type ReportDatasetState struct {
	DynamicSortSubtable pulumi.StringPtrInput
	Fields              ReportDatasetFieldArrayInput
	GetAllTables        pulumi.StringPtrInput
	Name                pulumi.StringPtrInput
	Parameters          ReportDatasetParameterArrayInput
	Policy              pulumi.IntPtrInput
	Query               pulumi.StringPtrInput
	Vdomparam           pulumi.StringPtrInput
}

func (ReportDatasetState) ElementType() reflect.Type {
	return reflect.TypeOf((*reportDatasetState)(nil)).Elem()
}

type reportDatasetArgs struct {
	DynamicSortSubtable *string                  `pulumi:"dynamicSortSubtable"`
	Fields              []ReportDatasetField     `pulumi:"fields"`
	GetAllTables        *string                  `pulumi:"getAllTables"`
	Name                *string                  `pulumi:"name"`
	Parameters          []ReportDatasetParameter `pulumi:"parameters"`
	Policy              *int                     `pulumi:"policy"`
	Query               *string                  `pulumi:"query"`
	Vdomparam           *string                  `pulumi:"vdomparam"`
}

// The set of arguments for constructing a ReportDataset resource.
type ReportDatasetArgs struct {
	DynamicSortSubtable pulumi.StringPtrInput
	Fields              ReportDatasetFieldArrayInput
	GetAllTables        pulumi.StringPtrInput
	Name                pulumi.StringPtrInput
	Parameters          ReportDatasetParameterArrayInput
	Policy              pulumi.IntPtrInput
	Query               pulumi.StringPtrInput
	Vdomparam           pulumi.StringPtrInput
}

func (ReportDatasetArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*reportDatasetArgs)(nil)).Elem()
}

type ReportDatasetInput interface {
	pulumi.Input

	ToReportDatasetOutput() ReportDatasetOutput
	ToReportDatasetOutputWithContext(ctx context.Context) ReportDatasetOutput
}

func (*ReportDataset) ElementType() reflect.Type {
	return reflect.TypeOf((**ReportDataset)(nil)).Elem()
}

func (i *ReportDataset) ToReportDatasetOutput() ReportDatasetOutput {
	return i.ToReportDatasetOutputWithContext(context.Background())
}

func (i *ReportDataset) ToReportDatasetOutputWithContext(ctx context.Context) ReportDatasetOutput {
	return pulumi.ToOutputWithContext(ctx, i).(ReportDatasetOutput)
}

func (i *ReportDataset) ToOutput(ctx context.Context) pulumix.Output[*ReportDataset] {
	return pulumix.Output[*ReportDataset]{
		OutputState: i.ToReportDatasetOutputWithContext(ctx).OutputState,
	}
}

// ReportDatasetArrayInput is an input type that accepts ReportDatasetArray and ReportDatasetArrayOutput values.
// You can construct a concrete instance of `ReportDatasetArrayInput` via:
//
//	ReportDatasetArray{ ReportDatasetArgs{...} }
type ReportDatasetArrayInput interface {
	pulumi.Input

	ToReportDatasetArrayOutput() ReportDatasetArrayOutput
	ToReportDatasetArrayOutputWithContext(context.Context) ReportDatasetArrayOutput
}

type ReportDatasetArray []ReportDatasetInput

func (ReportDatasetArray) ElementType() reflect.Type {
	return reflect.TypeOf((*[]*ReportDataset)(nil)).Elem()
}

func (i ReportDatasetArray) ToReportDatasetArrayOutput() ReportDatasetArrayOutput {
	return i.ToReportDatasetArrayOutputWithContext(context.Background())
}

func (i ReportDatasetArray) ToReportDatasetArrayOutputWithContext(ctx context.Context) ReportDatasetArrayOutput {
	return pulumi.ToOutputWithContext(ctx, i).(ReportDatasetArrayOutput)
}

func (i ReportDatasetArray) ToOutput(ctx context.Context) pulumix.Output[[]*ReportDataset] {
	return pulumix.Output[[]*ReportDataset]{
		OutputState: i.ToReportDatasetArrayOutputWithContext(ctx).OutputState,
	}
}

// ReportDatasetMapInput is an input type that accepts ReportDatasetMap and ReportDatasetMapOutput values.
// You can construct a concrete instance of `ReportDatasetMapInput` via:
//
//	ReportDatasetMap{ "key": ReportDatasetArgs{...} }
type ReportDatasetMapInput interface {
	pulumi.Input

	ToReportDatasetMapOutput() ReportDatasetMapOutput
	ToReportDatasetMapOutputWithContext(context.Context) ReportDatasetMapOutput
}

type ReportDatasetMap map[string]ReportDatasetInput

func (ReportDatasetMap) ElementType() reflect.Type {
	return reflect.TypeOf((*map[string]*ReportDataset)(nil)).Elem()
}

func (i ReportDatasetMap) ToReportDatasetMapOutput() ReportDatasetMapOutput {
	return i.ToReportDatasetMapOutputWithContext(context.Background())
}

func (i ReportDatasetMap) ToReportDatasetMapOutputWithContext(ctx context.Context) ReportDatasetMapOutput {
	return pulumi.ToOutputWithContext(ctx, i).(ReportDatasetMapOutput)
}

func (i ReportDatasetMap) ToOutput(ctx context.Context) pulumix.Output[map[string]*ReportDataset] {
	return pulumix.Output[map[string]*ReportDataset]{
		OutputState: i.ToReportDatasetMapOutputWithContext(ctx).OutputState,
	}
}

type ReportDatasetOutput struct{ *pulumi.OutputState }

func (ReportDatasetOutput) ElementType() reflect.Type {
	return reflect.TypeOf((**ReportDataset)(nil)).Elem()
}

func (o ReportDatasetOutput) ToReportDatasetOutput() ReportDatasetOutput {
	return o
}

func (o ReportDatasetOutput) ToReportDatasetOutputWithContext(ctx context.Context) ReportDatasetOutput {
	return o
}

func (o ReportDatasetOutput) ToOutput(ctx context.Context) pulumix.Output[*ReportDataset] {
	return pulumix.Output[*ReportDataset]{
		OutputState: o.OutputState,
	}
}

func (o ReportDatasetOutput) DynamicSortSubtable() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *ReportDataset) pulumi.StringPtrOutput { return v.DynamicSortSubtable }).(pulumi.StringPtrOutput)
}

func (o ReportDatasetOutput) Fields() ReportDatasetFieldArrayOutput {
	return o.ApplyT(func(v *ReportDataset) ReportDatasetFieldArrayOutput { return v.Fields }).(ReportDatasetFieldArrayOutput)
}

func (o ReportDatasetOutput) GetAllTables() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *ReportDataset) pulumi.StringPtrOutput { return v.GetAllTables }).(pulumi.StringPtrOutput)
}

func (o ReportDatasetOutput) Name() pulumi.StringOutput {
	return o.ApplyT(func(v *ReportDataset) pulumi.StringOutput { return v.Name }).(pulumi.StringOutput)
}

func (o ReportDatasetOutput) Parameters() ReportDatasetParameterArrayOutput {
	return o.ApplyT(func(v *ReportDataset) ReportDatasetParameterArrayOutput { return v.Parameters }).(ReportDatasetParameterArrayOutput)
}

func (o ReportDatasetOutput) Policy() pulumi.IntOutput {
	return o.ApplyT(func(v *ReportDataset) pulumi.IntOutput { return v.Policy }).(pulumi.IntOutput)
}

func (o ReportDatasetOutput) Query() pulumi.StringOutput {
	return o.ApplyT(func(v *ReportDataset) pulumi.StringOutput { return v.Query }).(pulumi.StringOutput)
}

func (o ReportDatasetOutput) Vdomparam() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *ReportDataset) pulumi.StringPtrOutput { return v.Vdomparam }).(pulumi.StringPtrOutput)
}

type ReportDatasetArrayOutput struct{ *pulumi.OutputState }

func (ReportDatasetArrayOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*[]*ReportDataset)(nil)).Elem()
}

func (o ReportDatasetArrayOutput) ToReportDatasetArrayOutput() ReportDatasetArrayOutput {
	return o
}

func (o ReportDatasetArrayOutput) ToReportDatasetArrayOutputWithContext(ctx context.Context) ReportDatasetArrayOutput {
	return o
}

func (o ReportDatasetArrayOutput) ToOutput(ctx context.Context) pulumix.Output[[]*ReportDataset] {
	return pulumix.Output[[]*ReportDataset]{
		OutputState: o.OutputState,
	}
}

func (o ReportDatasetArrayOutput) Index(i pulumi.IntInput) ReportDatasetOutput {
	return pulumi.All(o, i).ApplyT(func(vs []interface{}) *ReportDataset {
		return vs[0].([]*ReportDataset)[vs[1].(int)]
	}).(ReportDatasetOutput)
}

type ReportDatasetMapOutput struct{ *pulumi.OutputState }

func (ReportDatasetMapOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*map[string]*ReportDataset)(nil)).Elem()
}

func (o ReportDatasetMapOutput) ToReportDatasetMapOutput() ReportDatasetMapOutput {
	return o
}

func (o ReportDatasetMapOutput) ToReportDatasetMapOutputWithContext(ctx context.Context) ReportDatasetMapOutput {
	return o
}

func (o ReportDatasetMapOutput) ToOutput(ctx context.Context) pulumix.Output[map[string]*ReportDataset] {
	return pulumix.Output[map[string]*ReportDataset]{
		OutputState: o.OutputState,
	}
}

func (o ReportDatasetMapOutput) MapIndex(k pulumi.StringInput) ReportDatasetOutput {
	return pulumi.All(o, k).ApplyT(func(vs []interface{}) *ReportDataset {
		return vs[0].(map[string]*ReportDataset)[vs[1].(string)]
	}).(ReportDatasetOutput)
}

func init() {
	pulumi.RegisterInputType(reflect.TypeOf((*ReportDatasetInput)(nil)).Elem(), &ReportDataset{})
	pulumi.RegisterInputType(reflect.TypeOf((*ReportDatasetArrayInput)(nil)).Elem(), ReportDatasetArray{})
	pulumi.RegisterInputType(reflect.TypeOf((*ReportDatasetMapInput)(nil)).Elem(), ReportDatasetMap{})
	pulumi.RegisterOutputType(ReportDatasetOutput{})
	pulumi.RegisterOutputType(ReportDatasetArrayOutput{})
	pulumi.RegisterOutputType(ReportDatasetMapOutput{})
}
