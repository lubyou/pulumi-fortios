// Code generated by the Pulumi Terraform Bridge (tfgen) Tool DO NOT EDIT.
// *** WARNING: Do not edit by hand unless you're certain you know what you are doing! ***

package fortios

import (
	"context"
	"reflect"

	"errors"
	"github.com/lubyou/pulumi-fortios/sdk/go/fortios/internal"
	"github.com/pulumi/pulumi/sdk/v3/go/pulumi"
)

type DnsfilterDomainFilter struct {
	pulumi.CustomResourceState

	Comment             pulumi.StringPtrOutput                `pulumi:"comment"`
	DynamicSortSubtable pulumi.StringPtrOutput                `pulumi:"dynamicSortSubtable"`
	Entries             DnsfilterDomainFilterEntryArrayOutput `pulumi:"entries"`
	Fosid               pulumi.IntOutput                      `pulumi:"fosid"`
	GetAllTables        pulumi.StringPtrOutput                `pulumi:"getAllTables"`
	Name                pulumi.StringOutput                   `pulumi:"name"`
	Vdomparam           pulumi.StringPtrOutput                `pulumi:"vdomparam"`
}

// NewDnsfilterDomainFilter registers a new resource with the given unique name, arguments, and options.
func NewDnsfilterDomainFilter(ctx *pulumi.Context,
	name string, args *DnsfilterDomainFilterArgs, opts ...pulumi.ResourceOption) (*DnsfilterDomainFilter, error) {
	if args == nil {
		return nil, errors.New("missing one or more required arguments")
	}

	if args.Fosid == nil {
		return nil, errors.New("invalid value for required argument 'Fosid'")
	}
	opts = internal.PkgResourceDefaultOpts(opts)
	var resource DnsfilterDomainFilter
	err := ctx.RegisterResource("fortios:index/dnsfilterDomainFilter:DnsfilterDomainFilter", name, args, &resource, opts...)
	if err != nil {
		return nil, err
	}
	return &resource, nil
}

// GetDnsfilterDomainFilter gets an existing DnsfilterDomainFilter resource's state with the given name, ID, and optional
// state properties that are used to uniquely qualify the lookup (nil if not required).
func GetDnsfilterDomainFilter(ctx *pulumi.Context,
	name string, id pulumi.IDInput, state *DnsfilterDomainFilterState, opts ...pulumi.ResourceOption) (*DnsfilterDomainFilter, error) {
	var resource DnsfilterDomainFilter
	err := ctx.ReadResource("fortios:index/dnsfilterDomainFilter:DnsfilterDomainFilter", name, id, state, &resource, opts...)
	if err != nil {
		return nil, err
	}
	return &resource, nil
}

// Input properties used for looking up and filtering DnsfilterDomainFilter resources.
type dnsfilterDomainFilterState struct {
	Comment             *string                      `pulumi:"comment"`
	DynamicSortSubtable *string                      `pulumi:"dynamicSortSubtable"`
	Entries             []DnsfilterDomainFilterEntry `pulumi:"entries"`
	Fosid               *int                         `pulumi:"fosid"`
	GetAllTables        *string                      `pulumi:"getAllTables"`
	Name                *string                      `pulumi:"name"`
	Vdomparam           *string                      `pulumi:"vdomparam"`
}

type DnsfilterDomainFilterState struct {
	Comment             pulumi.StringPtrInput
	DynamicSortSubtable pulumi.StringPtrInput
	Entries             DnsfilterDomainFilterEntryArrayInput
	Fosid               pulumi.IntPtrInput
	GetAllTables        pulumi.StringPtrInput
	Name                pulumi.StringPtrInput
	Vdomparam           pulumi.StringPtrInput
}

func (DnsfilterDomainFilterState) ElementType() reflect.Type {
	return reflect.TypeOf((*dnsfilterDomainFilterState)(nil)).Elem()
}

type dnsfilterDomainFilterArgs struct {
	Comment             *string                      `pulumi:"comment"`
	DynamicSortSubtable *string                      `pulumi:"dynamicSortSubtable"`
	Entries             []DnsfilterDomainFilterEntry `pulumi:"entries"`
	Fosid               int                          `pulumi:"fosid"`
	GetAllTables        *string                      `pulumi:"getAllTables"`
	Name                *string                      `pulumi:"name"`
	Vdomparam           *string                      `pulumi:"vdomparam"`
}

// The set of arguments for constructing a DnsfilterDomainFilter resource.
type DnsfilterDomainFilterArgs struct {
	Comment             pulumi.StringPtrInput
	DynamicSortSubtable pulumi.StringPtrInput
	Entries             DnsfilterDomainFilterEntryArrayInput
	Fosid               pulumi.IntInput
	GetAllTables        pulumi.StringPtrInput
	Name                pulumi.StringPtrInput
	Vdomparam           pulumi.StringPtrInput
}

func (DnsfilterDomainFilterArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*dnsfilterDomainFilterArgs)(nil)).Elem()
}

type DnsfilterDomainFilterInput interface {
	pulumi.Input

	ToDnsfilterDomainFilterOutput() DnsfilterDomainFilterOutput
	ToDnsfilterDomainFilterOutputWithContext(ctx context.Context) DnsfilterDomainFilterOutput
}

func (*DnsfilterDomainFilter) ElementType() reflect.Type {
	return reflect.TypeOf((**DnsfilterDomainFilter)(nil)).Elem()
}

func (i *DnsfilterDomainFilter) ToDnsfilterDomainFilterOutput() DnsfilterDomainFilterOutput {
	return i.ToDnsfilterDomainFilterOutputWithContext(context.Background())
}

func (i *DnsfilterDomainFilter) ToDnsfilterDomainFilterOutputWithContext(ctx context.Context) DnsfilterDomainFilterOutput {
	return pulumi.ToOutputWithContext(ctx, i).(DnsfilterDomainFilterOutput)
}

// DnsfilterDomainFilterArrayInput is an input type that accepts DnsfilterDomainFilterArray and DnsfilterDomainFilterArrayOutput values.
// You can construct a concrete instance of `DnsfilterDomainFilterArrayInput` via:
//
//	DnsfilterDomainFilterArray{ DnsfilterDomainFilterArgs{...} }
type DnsfilterDomainFilterArrayInput interface {
	pulumi.Input

	ToDnsfilterDomainFilterArrayOutput() DnsfilterDomainFilterArrayOutput
	ToDnsfilterDomainFilterArrayOutputWithContext(context.Context) DnsfilterDomainFilterArrayOutput
}

type DnsfilterDomainFilterArray []DnsfilterDomainFilterInput

func (DnsfilterDomainFilterArray) ElementType() reflect.Type {
	return reflect.TypeOf((*[]*DnsfilterDomainFilter)(nil)).Elem()
}

func (i DnsfilterDomainFilterArray) ToDnsfilterDomainFilterArrayOutput() DnsfilterDomainFilterArrayOutput {
	return i.ToDnsfilterDomainFilterArrayOutputWithContext(context.Background())
}

func (i DnsfilterDomainFilterArray) ToDnsfilterDomainFilterArrayOutputWithContext(ctx context.Context) DnsfilterDomainFilterArrayOutput {
	return pulumi.ToOutputWithContext(ctx, i).(DnsfilterDomainFilterArrayOutput)
}

// DnsfilterDomainFilterMapInput is an input type that accepts DnsfilterDomainFilterMap and DnsfilterDomainFilterMapOutput values.
// You can construct a concrete instance of `DnsfilterDomainFilterMapInput` via:
//
//	DnsfilterDomainFilterMap{ "key": DnsfilterDomainFilterArgs{...} }
type DnsfilterDomainFilterMapInput interface {
	pulumi.Input

	ToDnsfilterDomainFilterMapOutput() DnsfilterDomainFilterMapOutput
	ToDnsfilterDomainFilterMapOutputWithContext(context.Context) DnsfilterDomainFilterMapOutput
}

type DnsfilterDomainFilterMap map[string]DnsfilterDomainFilterInput

func (DnsfilterDomainFilterMap) ElementType() reflect.Type {
	return reflect.TypeOf((*map[string]*DnsfilterDomainFilter)(nil)).Elem()
}

func (i DnsfilterDomainFilterMap) ToDnsfilterDomainFilterMapOutput() DnsfilterDomainFilterMapOutput {
	return i.ToDnsfilterDomainFilterMapOutputWithContext(context.Background())
}

func (i DnsfilterDomainFilterMap) ToDnsfilterDomainFilterMapOutputWithContext(ctx context.Context) DnsfilterDomainFilterMapOutput {
	return pulumi.ToOutputWithContext(ctx, i).(DnsfilterDomainFilterMapOutput)
}

type DnsfilterDomainFilterOutput struct{ *pulumi.OutputState }

func (DnsfilterDomainFilterOutput) ElementType() reflect.Type {
	return reflect.TypeOf((**DnsfilterDomainFilter)(nil)).Elem()
}

func (o DnsfilterDomainFilterOutput) ToDnsfilterDomainFilterOutput() DnsfilterDomainFilterOutput {
	return o
}

func (o DnsfilterDomainFilterOutput) ToDnsfilterDomainFilterOutputWithContext(ctx context.Context) DnsfilterDomainFilterOutput {
	return o
}

func (o DnsfilterDomainFilterOutput) Comment() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *DnsfilterDomainFilter) pulumi.StringPtrOutput { return v.Comment }).(pulumi.StringPtrOutput)
}

func (o DnsfilterDomainFilterOutput) DynamicSortSubtable() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *DnsfilterDomainFilter) pulumi.StringPtrOutput { return v.DynamicSortSubtable }).(pulumi.StringPtrOutput)
}

func (o DnsfilterDomainFilterOutput) Entries() DnsfilterDomainFilterEntryArrayOutput {
	return o.ApplyT(func(v *DnsfilterDomainFilter) DnsfilterDomainFilterEntryArrayOutput { return v.Entries }).(DnsfilterDomainFilterEntryArrayOutput)
}

func (o DnsfilterDomainFilterOutput) Fosid() pulumi.IntOutput {
	return o.ApplyT(func(v *DnsfilterDomainFilter) pulumi.IntOutput { return v.Fosid }).(pulumi.IntOutput)
}

func (o DnsfilterDomainFilterOutput) GetAllTables() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *DnsfilterDomainFilter) pulumi.StringPtrOutput { return v.GetAllTables }).(pulumi.StringPtrOutput)
}

func (o DnsfilterDomainFilterOutput) Name() pulumi.StringOutput {
	return o.ApplyT(func(v *DnsfilterDomainFilter) pulumi.StringOutput { return v.Name }).(pulumi.StringOutput)
}

func (o DnsfilterDomainFilterOutput) Vdomparam() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *DnsfilterDomainFilter) pulumi.StringPtrOutput { return v.Vdomparam }).(pulumi.StringPtrOutput)
}

type DnsfilterDomainFilterArrayOutput struct{ *pulumi.OutputState }

func (DnsfilterDomainFilterArrayOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*[]*DnsfilterDomainFilter)(nil)).Elem()
}

func (o DnsfilterDomainFilterArrayOutput) ToDnsfilterDomainFilterArrayOutput() DnsfilterDomainFilterArrayOutput {
	return o
}

func (o DnsfilterDomainFilterArrayOutput) ToDnsfilterDomainFilterArrayOutputWithContext(ctx context.Context) DnsfilterDomainFilterArrayOutput {
	return o
}

func (o DnsfilterDomainFilterArrayOutput) Index(i pulumi.IntInput) DnsfilterDomainFilterOutput {
	return pulumi.All(o, i).ApplyT(func(vs []interface{}) *DnsfilterDomainFilter {
		return vs[0].([]*DnsfilterDomainFilter)[vs[1].(int)]
	}).(DnsfilterDomainFilterOutput)
}

type DnsfilterDomainFilterMapOutput struct{ *pulumi.OutputState }

func (DnsfilterDomainFilterMapOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*map[string]*DnsfilterDomainFilter)(nil)).Elem()
}

func (o DnsfilterDomainFilterMapOutput) ToDnsfilterDomainFilterMapOutput() DnsfilterDomainFilterMapOutput {
	return o
}

func (o DnsfilterDomainFilterMapOutput) ToDnsfilterDomainFilterMapOutputWithContext(ctx context.Context) DnsfilterDomainFilterMapOutput {
	return o
}

func (o DnsfilterDomainFilterMapOutput) MapIndex(k pulumi.StringInput) DnsfilterDomainFilterOutput {
	return pulumi.All(o, k).ApplyT(func(vs []interface{}) *DnsfilterDomainFilter {
		return vs[0].(map[string]*DnsfilterDomainFilter)[vs[1].(string)]
	}).(DnsfilterDomainFilterOutput)
}

func init() {
	pulumi.RegisterInputType(reflect.TypeOf((*DnsfilterDomainFilterInput)(nil)).Elem(), &DnsfilterDomainFilter{})
	pulumi.RegisterInputType(reflect.TypeOf((*DnsfilterDomainFilterArrayInput)(nil)).Elem(), DnsfilterDomainFilterArray{})
	pulumi.RegisterInputType(reflect.TypeOf((*DnsfilterDomainFilterMapInput)(nil)).Elem(), DnsfilterDomainFilterMap{})
	pulumi.RegisterOutputType(DnsfilterDomainFilterOutput{})
	pulumi.RegisterOutputType(DnsfilterDomainFilterArrayOutput{})
	pulumi.RegisterOutputType(DnsfilterDomainFilterMapOutput{})
}
