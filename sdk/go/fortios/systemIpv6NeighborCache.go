// Code generated by the Pulumi Terraform Bridge (tfgen) Tool DO NOT EDIT.
// *** WARNING: Do not edit by hand unless you're certain you know what you are doing! ***

package fortios

import (
	"context"
	"reflect"

	"errors"
	"github.com/pulumi/pulumi/sdk/v3/go/pulumi"
)

type SystemIpv6NeighborCache struct {
	pulumi.CustomResourceState

	Fosid     pulumi.IntOutput       `pulumi:"fosid"`
	Interface pulumi.StringOutput    `pulumi:"interface"`
	Ipv6      pulumi.StringOutput    `pulumi:"ipv6"`
	Mac       pulumi.StringOutput    `pulumi:"mac"`
	Vdomparam pulumi.StringPtrOutput `pulumi:"vdomparam"`
}

// NewSystemIpv6NeighborCache registers a new resource with the given unique name, arguments, and options.
func NewSystemIpv6NeighborCache(ctx *pulumi.Context,
	name string, args *SystemIpv6NeighborCacheArgs, opts ...pulumi.ResourceOption) (*SystemIpv6NeighborCache, error) {
	if args == nil {
		return nil, errors.New("missing one or more required arguments")
	}

	if args.Fosid == nil {
		return nil, errors.New("invalid value for required argument 'Fosid'")
	}
	if args.Interface == nil {
		return nil, errors.New("invalid value for required argument 'Interface'")
	}
	if args.Ipv6 == nil {
		return nil, errors.New("invalid value for required argument 'Ipv6'")
	}
	if args.Mac == nil {
		return nil, errors.New("invalid value for required argument 'Mac'")
	}
	opts = pkgResourceDefaultOpts(opts)
	var resource SystemIpv6NeighborCache
	err := ctx.RegisterResource("fortios:index/systemIpv6NeighborCache:SystemIpv6NeighborCache", name, args, &resource, opts...)
	if err != nil {
		return nil, err
	}
	return &resource, nil
}

// GetSystemIpv6NeighborCache gets an existing SystemIpv6NeighborCache resource's state with the given name, ID, and optional
// state properties that are used to uniquely qualify the lookup (nil if not required).
func GetSystemIpv6NeighborCache(ctx *pulumi.Context,
	name string, id pulumi.IDInput, state *SystemIpv6NeighborCacheState, opts ...pulumi.ResourceOption) (*SystemIpv6NeighborCache, error) {
	var resource SystemIpv6NeighborCache
	err := ctx.ReadResource("fortios:index/systemIpv6NeighborCache:SystemIpv6NeighborCache", name, id, state, &resource, opts...)
	if err != nil {
		return nil, err
	}
	return &resource, nil
}

// Input properties used for looking up and filtering SystemIpv6NeighborCache resources.
type systemIpv6NeighborCacheState struct {
	Fosid     *int    `pulumi:"fosid"`
	Interface *string `pulumi:"interface"`
	Ipv6      *string `pulumi:"ipv6"`
	Mac       *string `pulumi:"mac"`
	Vdomparam *string `pulumi:"vdomparam"`
}

type SystemIpv6NeighborCacheState struct {
	Fosid     pulumi.IntPtrInput
	Interface pulumi.StringPtrInput
	Ipv6      pulumi.StringPtrInput
	Mac       pulumi.StringPtrInput
	Vdomparam pulumi.StringPtrInput
}

func (SystemIpv6NeighborCacheState) ElementType() reflect.Type {
	return reflect.TypeOf((*systemIpv6NeighborCacheState)(nil)).Elem()
}

type systemIpv6NeighborCacheArgs struct {
	Fosid     int     `pulumi:"fosid"`
	Interface string  `pulumi:"interface"`
	Ipv6      string  `pulumi:"ipv6"`
	Mac       string  `pulumi:"mac"`
	Vdomparam *string `pulumi:"vdomparam"`
}

// The set of arguments for constructing a SystemIpv6NeighborCache resource.
type SystemIpv6NeighborCacheArgs struct {
	Fosid     pulumi.IntInput
	Interface pulumi.StringInput
	Ipv6      pulumi.StringInput
	Mac       pulumi.StringInput
	Vdomparam pulumi.StringPtrInput
}

func (SystemIpv6NeighborCacheArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*systemIpv6NeighborCacheArgs)(nil)).Elem()
}

type SystemIpv6NeighborCacheInput interface {
	pulumi.Input

	ToSystemIpv6NeighborCacheOutput() SystemIpv6NeighborCacheOutput
	ToSystemIpv6NeighborCacheOutputWithContext(ctx context.Context) SystemIpv6NeighborCacheOutput
}

func (*SystemIpv6NeighborCache) ElementType() reflect.Type {
	return reflect.TypeOf((**SystemIpv6NeighborCache)(nil)).Elem()
}

func (i *SystemIpv6NeighborCache) ToSystemIpv6NeighborCacheOutput() SystemIpv6NeighborCacheOutput {
	return i.ToSystemIpv6NeighborCacheOutputWithContext(context.Background())
}

func (i *SystemIpv6NeighborCache) ToSystemIpv6NeighborCacheOutputWithContext(ctx context.Context) SystemIpv6NeighborCacheOutput {
	return pulumi.ToOutputWithContext(ctx, i).(SystemIpv6NeighborCacheOutput)
}

// SystemIpv6NeighborCacheArrayInput is an input type that accepts SystemIpv6NeighborCacheArray and SystemIpv6NeighborCacheArrayOutput values.
// You can construct a concrete instance of `SystemIpv6NeighborCacheArrayInput` via:
//
//	SystemIpv6NeighborCacheArray{ SystemIpv6NeighborCacheArgs{...} }
type SystemIpv6NeighborCacheArrayInput interface {
	pulumi.Input

	ToSystemIpv6NeighborCacheArrayOutput() SystemIpv6NeighborCacheArrayOutput
	ToSystemIpv6NeighborCacheArrayOutputWithContext(context.Context) SystemIpv6NeighborCacheArrayOutput
}

type SystemIpv6NeighborCacheArray []SystemIpv6NeighborCacheInput

func (SystemIpv6NeighborCacheArray) ElementType() reflect.Type {
	return reflect.TypeOf((*[]*SystemIpv6NeighborCache)(nil)).Elem()
}

func (i SystemIpv6NeighborCacheArray) ToSystemIpv6NeighborCacheArrayOutput() SystemIpv6NeighborCacheArrayOutput {
	return i.ToSystemIpv6NeighborCacheArrayOutputWithContext(context.Background())
}

func (i SystemIpv6NeighborCacheArray) ToSystemIpv6NeighborCacheArrayOutputWithContext(ctx context.Context) SystemIpv6NeighborCacheArrayOutput {
	return pulumi.ToOutputWithContext(ctx, i).(SystemIpv6NeighborCacheArrayOutput)
}

// SystemIpv6NeighborCacheMapInput is an input type that accepts SystemIpv6NeighborCacheMap and SystemIpv6NeighborCacheMapOutput values.
// You can construct a concrete instance of `SystemIpv6NeighborCacheMapInput` via:
//
//	SystemIpv6NeighborCacheMap{ "key": SystemIpv6NeighborCacheArgs{...} }
type SystemIpv6NeighborCacheMapInput interface {
	pulumi.Input

	ToSystemIpv6NeighborCacheMapOutput() SystemIpv6NeighborCacheMapOutput
	ToSystemIpv6NeighborCacheMapOutputWithContext(context.Context) SystemIpv6NeighborCacheMapOutput
}

type SystemIpv6NeighborCacheMap map[string]SystemIpv6NeighborCacheInput

func (SystemIpv6NeighborCacheMap) ElementType() reflect.Type {
	return reflect.TypeOf((*map[string]*SystemIpv6NeighborCache)(nil)).Elem()
}

func (i SystemIpv6NeighborCacheMap) ToSystemIpv6NeighborCacheMapOutput() SystemIpv6NeighborCacheMapOutput {
	return i.ToSystemIpv6NeighborCacheMapOutputWithContext(context.Background())
}

func (i SystemIpv6NeighborCacheMap) ToSystemIpv6NeighborCacheMapOutputWithContext(ctx context.Context) SystemIpv6NeighborCacheMapOutput {
	return pulumi.ToOutputWithContext(ctx, i).(SystemIpv6NeighborCacheMapOutput)
}

type SystemIpv6NeighborCacheOutput struct{ *pulumi.OutputState }

func (SystemIpv6NeighborCacheOutput) ElementType() reflect.Type {
	return reflect.TypeOf((**SystemIpv6NeighborCache)(nil)).Elem()
}

func (o SystemIpv6NeighborCacheOutput) ToSystemIpv6NeighborCacheOutput() SystemIpv6NeighborCacheOutput {
	return o
}

func (o SystemIpv6NeighborCacheOutput) ToSystemIpv6NeighborCacheOutputWithContext(ctx context.Context) SystemIpv6NeighborCacheOutput {
	return o
}

func (o SystemIpv6NeighborCacheOutput) Fosid() pulumi.IntOutput {
	return o.ApplyT(func(v *SystemIpv6NeighborCache) pulumi.IntOutput { return v.Fosid }).(pulumi.IntOutput)
}

func (o SystemIpv6NeighborCacheOutput) Interface() pulumi.StringOutput {
	return o.ApplyT(func(v *SystemIpv6NeighborCache) pulumi.StringOutput { return v.Interface }).(pulumi.StringOutput)
}

func (o SystemIpv6NeighborCacheOutput) Ipv6() pulumi.StringOutput {
	return o.ApplyT(func(v *SystemIpv6NeighborCache) pulumi.StringOutput { return v.Ipv6 }).(pulumi.StringOutput)
}

func (o SystemIpv6NeighborCacheOutput) Mac() pulumi.StringOutput {
	return o.ApplyT(func(v *SystemIpv6NeighborCache) pulumi.StringOutput { return v.Mac }).(pulumi.StringOutput)
}

func (o SystemIpv6NeighborCacheOutput) Vdomparam() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *SystemIpv6NeighborCache) pulumi.StringPtrOutput { return v.Vdomparam }).(pulumi.StringPtrOutput)
}

type SystemIpv6NeighborCacheArrayOutput struct{ *pulumi.OutputState }

func (SystemIpv6NeighborCacheArrayOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*[]*SystemIpv6NeighborCache)(nil)).Elem()
}

func (o SystemIpv6NeighborCacheArrayOutput) ToSystemIpv6NeighborCacheArrayOutput() SystemIpv6NeighborCacheArrayOutput {
	return o
}

func (o SystemIpv6NeighborCacheArrayOutput) ToSystemIpv6NeighborCacheArrayOutputWithContext(ctx context.Context) SystemIpv6NeighborCacheArrayOutput {
	return o
}

func (o SystemIpv6NeighborCacheArrayOutput) Index(i pulumi.IntInput) SystemIpv6NeighborCacheOutput {
	return pulumi.All(o, i).ApplyT(func(vs []interface{}) *SystemIpv6NeighborCache {
		return vs[0].([]*SystemIpv6NeighborCache)[vs[1].(int)]
	}).(SystemIpv6NeighborCacheOutput)
}

type SystemIpv6NeighborCacheMapOutput struct{ *pulumi.OutputState }

func (SystemIpv6NeighborCacheMapOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*map[string]*SystemIpv6NeighborCache)(nil)).Elem()
}

func (o SystemIpv6NeighborCacheMapOutput) ToSystemIpv6NeighborCacheMapOutput() SystemIpv6NeighborCacheMapOutput {
	return o
}

func (o SystemIpv6NeighborCacheMapOutput) ToSystemIpv6NeighborCacheMapOutputWithContext(ctx context.Context) SystemIpv6NeighborCacheMapOutput {
	return o
}

func (o SystemIpv6NeighborCacheMapOutput) MapIndex(k pulumi.StringInput) SystemIpv6NeighborCacheOutput {
	return pulumi.All(o, k).ApplyT(func(vs []interface{}) *SystemIpv6NeighborCache {
		return vs[0].(map[string]*SystemIpv6NeighborCache)[vs[1].(string)]
	}).(SystemIpv6NeighborCacheOutput)
}

func init() {
	pulumi.RegisterInputType(reflect.TypeOf((*SystemIpv6NeighborCacheInput)(nil)).Elem(), &SystemIpv6NeighborCache{})
	pulumi.RegisterInputType(reflect.TypeOf((*SystemIpv6NeighborCacheArrayInput)(nil)).Elem(), SystemIpv6NeighborCacheArray{})
	pulumi.RegisterInputType(reflect.TypeOf((*SystemIpv6NeighborCacheMapInput)(nil)).Elem(), SystemIpv6NeighborCacheMap{})
	pulumi.RegisterOutputType(SystemIpv6NeighborCacheOutput{})
	pulumi.RegisterOutputType(SystemIpv6NeighborCacheArrayOutput{})
	pulumi.RegisterOutputType(SystemIpv6NeighborCacheMapOutput{})
}
