// Code generated by the Pulumi Terraform Bridge (tfgen) Tool DO NOT EDIT.
// *** WARNING: Do not edit by hand unless you're certain you know what you are doing! ***

package fortios

import (
	"context"
	"reflect"

	"errors"
	"github.com/lubyou/pulumi-fortios/sdk/go/fortios/internal"
	"github.com/pulumi/pulumi/sdk/v3/go/pulumi"
)

type SystemDdns struct {
	pulumi.CustomResourceState

	AddrType            pulumi.StringOutput                   `pulumi:"addrType"`
	BoundIp             pulumi.StringOutput                   `pulumi:"boundIp"`
	ClearText           pulumi.StringOutput                   `pulumi:"clearText"`
	DdnsAuth            pulumi.StringOutput                   `pulumi:"ddnsAuth"`
	DdnsDomain          pulumi.StringOutput                   `pulumi:"ddnsDomain"`
	DdnsKey             pulumi.StringOutput                   `pulumi:"ddnsKey"`
	DdnsKeyname         pulumi.StringOutput                   `pulumi:"ddnsKeyname"`
	DdnsPassword        pulumi.StringPtrOutput                `pulumi:"ddnsPassword"`
	DdnsServer          pulumi.StringOutput                   `pulumi:"ddnsServer"`
	DdnsServerAddrs     SystemDdnsDdnsServerAddrArrayOutput   `pulumi:"ddnsServerAddrs"`
	DdnsServerIp        pulumi.StringOutput                   `pulumi:"ddnsServerIp"`
	DdnsSn              pulumi.StringOutput                   `pulumi:"ddnsSn"`
	DdnsTtl             pulumi.IntOutput                      `pulumi:"ddnsTtl"`
	DdnsUsername        pulumi.StringOutput                   `pulumi:"ddnsUsername"`
	DdnsZone            pulumi.StringOutput                   `pulumi:"ddnsZone"`
	Ddnsid              pulumi.IntOutput                      `pulumi:"ddnsid"`
	DynamicSortSubtable pulumi.StringPtrOutput                `pulumi:"dynamicSortSubtable"`
	GetAllTables        pulumi.StringPtrOutput                `pulumi:"getAllTables"`
	MonitorInterfaces   SystemDdnsMonitorInterfaceArrayOutput `pulumi:"monitorInterfaces"`
	ServerType          pulumi.StringOutput                   `pulumi:"serverType"`
	SslCertificate      pulumi.StringOutput                   `pulumi:"sslCertificate"`
	UpdateInterval      pulumi.IntOutput                      `pulumi:"updateInterval"`
	UsePublicIp         pulumi.StringOutput                   `pulumi:"usePublicIp"`
	Vdomparam           pulumi.StringPtrOutput                `pulumi:"vdomparam"`
}

// NewSystemDdns registers a new resource with the given unique name, arguments, and options.
func NewSystemDdns(ctx *pulumi.Context,
	name string, args *SystemDdnsArgs, opts ...pulumi.ResourceOption) (*SystemDdns, error) {
	if args == nil {
		return nil, errors.New("missing one or more required arguments")
	}

	if args.DdnsServer == nil {
		return nil, errors.New("invalid value for required argument 'DdnsServer'")
	}
	if args.MonitorInterfaces == nil {
		return nil, errors.New("invalid value for required argument 'MonitorInterfaces'")
	}
	if args.DdnsKey != nil {
		args.DdnsKey = pulumi.ToSecret(args.DdnsKey).(pulumi.StringPtrInput)
	}
	if args.DdnsPassword != nil {
		args.DdnsPassword = pulumi.ToSecret(args.DdnsPassword).(pulumi.StringPtrInput)
	}
	secrets := pulumi.AdditionalSecretOutputs([]string{
		"ddnsKey",
		"ddnsPassword",
	})
	opts = append(opts, secrets)
	opts = internal.PkgResourceDefaultOpts(opts)
	var resource SystemDdns
	err := ctx.RegisterResource("fortios:index/systemDdns:SystemDdns", name, args, &resource, opts...)
	if err != nil {
		return nil, err
	}
	return &resource, nil
}

// GetSystemDdns gets an existing SystemDdns resource's state with the given name, ID, and optional
// state properties that are used to uniquely qualify the lookup (nil if not required).
func GetSystemDdns(ctx *pulumi.Context,
	name string, id pulumi.IDInput, state *SystemDdnsState, opts ...pulumi.ResourceOption) (*SystemDdns, error) {
	var resource SystemDdns
	err := ctx.ReadResource("fortios:index/systemDdns:SystemDdns", name, id, state, &resource, opts...)
	if err != nil {
		return nil, err
	}
	return &resource, nil
}

// Input properties used for looking up and filtering SystemDdns resources.
type systemDdnsState struct {
	AddrType            *string                      `pulumi:"addrType"`
	BoundIp             *string                      `pulumi:"boundIp"`
	ClearText           *string                      `pulumi:"clearText"`
	DdnsAuth            *string                      `pulumi:"ddnsAuth"`
	DdnsDomain          *string                      `pulumi:"ddnsDomain"`
	DdnsKey             *string                      `pulumi:"ddnsKey"`
	DdnsKeyname         *string                      `pulumi:"ddnsKeyname"`
	DdnsPassword        *string                      `pulumi:"ddnsPassword"`
	DdnsServer          *string                      `pulumi:"ddnsServer"`
	DdnsServerAddrs     []SystemDdnsDdnsServerAddr   `pulumi:"ddnsServerAddrs"`
	DdnsServerIp        *string                      `pulumi:"ddnsServerIp"`
	DdnsSn              *string                      `pulumi:"ddnsSn"`
	DdnsTtl             *int                         `pulumi:"ddnsTtl"`
	DdnsUsername        *string                      `pulumi:"ddnsUsername"`
	DdnsZone            *string                      `pulumi:"ddnsZone"`
	Ddnsid              *int                         `pulumi:"ddnsid"`
	DynamicSortSubtable *string                      `pulumi:"dynamicSortSubtable"`
	GetAllTables        *string                      `pulumi:"getAllTables"`
	MonitorInterfaces   []SystemDdnsMonitorInterface `pulumi:"monitorInterfaces"`
	ServerType          *string                      `pulumi:"serverType"`
	SslCertificate      *string                      `pulumi:"sslCertificate"`
	UpdateInterval      *int                         `pulumi:"updateInterval"`
	UsePublicIp         *string                      `pulumi:"usePublicIp"`
	Vdomparam           *string                      `pulumi:"vdomparam"`
}

type SystemDdnsState struct {
	AddrType            pulumi.StringPtrInput
	BoundIp             pulumi.StringPtrInput
	ClearText           pulumi.StringPtrInput
	DdnsAuth            pulumi.StringPtrInput
	DdnsDomain          pulumi.StringPtrInput
	DdnsKey             pulumi.StringPtrInput
	DdnsKeyname         pulumi.StringPtrInput
	DdnsPassword        pulumi.StringPtrInput
	DdnsServer          pulumi.StringPtrInput
	DdnsServerAddrs     SystemDdnsDdnsServerAddrArrayInput
	DdnsServerIp        pulumi.StringPtrInput
	DdnsSn              pulumi.StringPtrInput
	DdnsTtl             pulumi.IntPtrInput
	DdnsUsername        pulumi.StringPtrInput
	DdnsZone            pulumi.StringPtrInput
	Ddnsid              pulumi.IntPtrInput
	DynamicSortSubtable pulumi.StringPtrInput
	GetAllTables        pulumi.StringPtrInput
	MonitorInterfaces   SystemDdnsMonitorInterfaceArrayInput
	ServerType          pulumi.StringPtrInput
	SslCertificate      pulumi.StringPtrInput
	UpdateInterval      pulumi.IntPtrInput
	UsePublicIp         pulumi.StringPtrInput
	Vdomparam           pulumi.StringPtrInput
}

func (SystemDdnsState) ElementType() reflect.Type {
	return reflect.TypeOf((*systemDdnsState)(nil)).Elem()
}

type systemDdnsArgs struct {
	AddrType            *string                      `pulumi:"addrType"`
	BoundIp             *string                      `pulumi:"boundIp"`
	ClearText           *string                      `pulumi:"clearText"`
	DdnsAuth            *string                      `pulumi:"ddnsAuth"`
	DdnsDomain          *string                      `pulumi:"ddnsDomain"`
	DdnsKey             *string                      `pulumi:"ddnsKey"`
	DdnsKeyname         *string                      `pulumi:"ddnsKeyname"`
	DdnsPassword        *string                      `pulumi:"ddnsPassword"`
	DdnsServer          string                       `pulumi:"ddnsServer"`
	DdnsServerAddrs     []SystemDdnsDdnsServerAddr   `pulumi:"ddnsServerAddrs"`
	DdnsServerIp        *string                      `pulumi:"ddnsServerIp"`
	DdnsSn              *string                      `pulumi:"ddnsSn"`
	DdnsTtl             *int                         `pulumi:"ddnsTtl"`
	DdnsUsername        *string                      `pulumi:"ddnsUsername"`
	DdnsZone            *string                      `pulumi:"ddnsZone"`
	Ddnsid              *int                         `pulumi:"ddnsid"`
	DynamicSortSubtable *string                      `pulumi:"dynamicSortSubtable"`
	GetAllTables        *string                      `pulumi:"getAllTables"`
	MonitorInterfaces   []SystemDdnsMonitorInterface `pulumi:"monitorInterfaces"`
	ServerType          *string                      `pulumi:"serverType"`
	SslCertificate      *string                      `pulumi:"sslCertificate"`
	UpdateInterval      *int                         `pulumi:"updateInterval"`
	UsePublicIp         *string                      `pulumi:"usePublicIp"`
	Vdomparam           *string                      `pulumi:"vdomparam"`
}

// The set of arguments for constructing a SystemDdns resource.
type SystemDdnsArgs struct {
	AddrType            pulumi.StringPtrInput
	BoundIp             pulumi.StringPtrInput
	ClearText           pulumi.StringPtrInput
	DdnsAuth            pulumi.StringPtrInput
	DdnsDomain          pulumi.StringPtrInput
	DdnsKey             pulumi.StringPtrInput
	DdnsKeyname         pulumi.StringPtrInput
	DdnsPassword        pulumi.StringPtrInput
	DdnsServer          pulumi.StringInput
	DdnsServerAddrs     SystemDdnsDdnsServerAddrArrayInput
	DdnsServerIp        pulumi.StringPtrInput
	DdnsSn              pulumi.StringPtrInput
	DdnsTtl             pulumi.IntPtrInput
	DdnsUsername        pulumi.StringPtrInput
	DdnsZone            pulumi.StringPtrInput
	Ddnsid              pulumi.IntPtrInput
	DynamicSortSubtable pulumi.StringPtrInput
	GetAllTables        pulumi.StringPtrInput
	MonitorInterfaces   SystemDdnsMonitorInterfaceArrayInput
	ServerType          pulumi.StringPtrInput
	SslCertificate      pulumi.StringPtrInput
	UpdateInterval      pulumi.IntPtrInput
	UsePublicIp         pulumi.StringPtrInput
	Vdomparam           pulumi.StringPtrInput
}

func (SystemDdnsArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*systemDdnsArgs)(nil)).Elem()
}

type SystemDdnsInput interface {
	pulumi.Input

	ToSystemDdnsOutput() SystemDdnsOutput
	ToSystemDdnsOutputWithContext(ctx context.Context) SystemDdnsOutput
}

func (*SystemDdns) ElementType() reflect.Type {
	return reflect.TypeOf((**SystemDdns)(nil)).Elem()
}

func (i *SystemDdns) ToSystemDdnsOutput() SystemDdnsOutput {
	return i.ToSystemDdnsOutputWithContext(context.Background())
}

func (i *SystemDdns) ToSystemDdnsOutputWithContext(ctx context.Context) SystemDdnsOutput {
	return pulumi.ToOutputWithContext(ctx, i).(SystemDdnsOutput)
}

// SystemDdnsArrayInput is an input type that accepts SystemDdnsArray and SystemDdnsArrayOutput values.
// You can construct a concrete instance of `SystemDdnsArrayInput` via:
//
//	SystemDdnsArray{ SystemDdnsArgs{...} }
type SystemDdnsArrayInput interface {
	pulumi.Input

	ToSystemDdnsArrayOutput() SystemDdnsArrayOutput
	ToSystemDdnsArrayOutputWithContext(context.Context) SystemDdnsArrayOutput
}

type SystemDdnsArray []SystemDdnsInput

func (SystemDdnsArray) ElementType() reflect.Type {
	return reflect.TypeOf((*[]*SystemDdns)(nil)).Elem()
}

func (i SystemDdnsArray) ToSystemDdnsArrayOutput() SystemDdnsArrayOutput {
	return i.ToSystemDdnsArrayOutputWithContext(context.Background())
}

func (i SystemDdnsArray) ToSystemDdnsArrayOutputWithContext(ctx context.Context) SystemDdnsArrayOutput {
	return pulumi.ToOutputWithContext(ctx, i).(SystemDdnsArrayOutput)
}

// SystemDdnsMapInput is an input type that accepts SystemDdnsMap and SystemDdnsMapOutput values.
// You can construct a concrete instance of `SystemDdnsMapInput` via:
//
//	SystemDdnsMap{ "key": SystemDdnsArgs{...} }
type SystemDdnsMapInput interface {
	pulumi.Input

	ToSystemDdnsMapOutput() SystemDdnsMapOutput
	ToSystemDdnsMapOutputWithContext(context.Context) SystemDdnsMapOutput
}

type SystemDdnsMap map[string]SystemDdnsInput

func (SystemDdnsMap) ElementType() reflect.Type {
	return reflect.TypeOf((*map[string]*SystemDdns)(nil)).Elem()
}

func (i SystemDdnsMap) ToSystemDdnsMapOutput() SystemDdnsMapOutput {
	return i.ToSystemDdnsMapOutputWithContext(context.Background())
}

func (i SystemDdnsMap) ToSystemDdnsMapOutputWithContext(ctx context.Context) SystemDdnsMapOutput {
	return pulumi.ToOutputWithContext(ctx, i).(SystemDdnsMapOutput)
}

type SystemDdnsOutput struct{ *pulumi.OutputState }

func (SystemDdnsOutput) ElementType() reflect.Type {
	return reflect.TypeOf((**SystemDdns)(nil)).Elem()
}

func (o SystemDdnsOutput) ToSystemDdnsOutput() SystemDdnsOutput {
	return o
}

func (o SystemDdnsOutput) ToSystemDdnsOutputWithContext(ctx context.Context) SystemDdnsOutput {
	return o
}

func (o SystemDdnsOutput) AddrType() pulumi.StringOutput {
	return o.ApplyT(func(v *SystemDdns) pulumi.StringOutput { return v.AddrType }).(pulumi.StringOutput)
}

func (o SystemDdnsOutput) BoundIp() pulumi.StringOutput {
	return o.ApplyT(func(v *SystemDdns) pulumi.StringOutput { return v.BoundIp }).(pulumi.StringOutput)
}

func (o SystemDdnsOutput) ClearText() pulumi.StringOutput {
	return o.ApplyT(func(v *SystemDdns) pulumi.StringOutput { return v.ClearText }).(pulumi.StringOutput)
}

func (o SystemDdnsOutput) DdnsAuth() pulumi.StringOutput {
	return o.ApplyT(func(v *SystemDdns) pulumi.StringOutput { return v.DdnsAuth }).(pulumi.StringOutput)
}

func (o SystemDdnsOutput) DdnsDomain() pulumi.StringOutput {
	return o.ApplyT(func(v *SystemDdns) pulumi.StringOutput { return v.DdnsDomain }).(pulumi.StringOutput)
}

func (o SystemDdnsOutput) DdnsKey() pulumi.StringOutput {
	return o.ApplyT(func(v *SystemDdns) pulumi.StringOutput { return v.DdnsKey }).(pulumi.StringOutput)
}

func (o SystemDdnsOutput) DdnsKeyname() pulumi.StringOutput {
	return o.ApplyT(func(v *SystemDdns) pulumi.StringOutput { return v.DdnsKeyname }).(pulumi.StringOutput)
}

func (o SystemDdnsOutput) DdnsPassword() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *SystemDdns) pulumi.StringPtrOutput { return v.DdnsPassword }).(pulumi.StringPtrOutput)
}

func (o SystemDdnsOutput) DdnsServer() pulumi.StringOutput {
	return o.ApplyT(func(v *SystemDdns) pulumi.StringOutput { return v.DdnsServer }).(pulumi.StringOutput)
}

func (o SystemDdnsOutput) DdnsServerAddrs() SystemDdnsDdnsServerAddrArrayOutput {
	return o.ApplyT(func(v *SystemDdns) SystemDdnsDdnsServerAddrArrayOutput { return v.DdnsServerAddrs }).(SystemDdnsDdnsServerAddrArrayOutput)
}

func (o SystemDdnsOutput) DdnsServerIp() pulumi.StringOutput {
	return o.ApplyT(func(v *SystemDdns) pulumi.StringOutput { return v.DdnsServerIp }).(pulumi.StringOutput)
}

func (o SystemDdnsOutput) DdnsSn() pulumi.StringOutput {
	return o.ApplyT(func(v *SystemDdns) pulumi.StringOutput { return v.DdnsSn }).(pulumi.StringOutput)
}

func (o SystemDdnsOutput) DdnsTtl() pulumi.IntOutput {
	return o.ApplyT(func(v *SystemDdns) pulumi.IntOutput { return v.DdnsTtl }).(pulumi.IntOutput)
}

func (o SystemDdnsOutput) DdnsUsername() pulumi.StringOutput {
	return o.ApplyT(func(v *SystemDdns) pulumi.StringOutput { return v.DdnsUsername }).(pulumi.StringOutput)
}

func (o SystemDdnsOutput) DdnsZone() pulumi.StringOutput {
	return o.ApplyT(func(v *SystemDdns) pulumi.StringOutput { return v.DdnsZone }).(pulumi.StringOutput)
}

func (o SystemDdnsOutput) Ddnsid() pulumi.IntOutput {
	return o.ApplyT(func(v *SystemDdns) pulumi.IntOutput { return v.Ddnsid }).(pulumi.IntOutput)
}

func (o SystemDdnsOutput) DynamicSortSubtable() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *SystemDdns) pulumi.StringPtrOutput { return v.DynamicSortSubtable }).(pulumi.StringPtrOutput)
}

func (o SystemDdnsOutput) GetAllTables() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *SystemDdns) pulumi.StringPtrOutput { return v.GetAllTables }).(pulumi.StringPtrOutput)
}

func (o SystemDdnsOutput) MonitorInterfaces() SystemDdnsMonitorInterfaceArrayOutput {
	return o.ApplyT(func(v *SystemDdns) SystemDdnsMonitorInterfaceArrayOutput { return v.MonitorInterfaces }).(SystemDdnsMonitorInterfaceArrayOutput)
}

func (o SystemDdnsOutput) ServerType() pulumi.StringOutput {
	return o.ApplyT(func(v *SystemDdns) pulumi.StringOutput { return v.ServerType }).(pulumi.StringOutput)
}

func (o SystemDdnsOutput) SslCertificate() pulumi.StringOutput {
	return o.ApplyT(func(v *SystemDdns) pulumi.StringOutput { return v.SslCertificate }).(pulumi.StringOutput)
}

func (o SystemDdnsOutput) UpdateInterval() pulumi.IntOutput {
	return o.ApplyT(func(v *SystemDdns) pulumi.IntOutput { return v.UpdateInterval }).(pulumi.IntOutput)
}

func (o SystemDdnsOutput) UsePublicIp() pulumi.StringOutput {
	return o.ApplyT(func(v *SystemDdns) pulumi.StringOutput { return v.UsePublicIp }).(pulumi.StringOutput)
}

func (o SystemDdnsOutput) Vdomparam() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *SystemDdns) pulumi.StringPtrOutput { return v.Vdomparam }).(pulumi.StringPtrOutput)
}

type SystemDdnsArrayOutput struct{ *pulumi.OutputState }

func (SystemDdnsArrayOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*[]*SystemDdns)(nil)).Elem()
}

func (o SystemDdnsArrayOutput) ToSystemDdnsArrayOutput() SystemDdnsArrayOutput {
	return o
}

func (o SystemDdnsArrayOutput) ToSystemDdnsArrayOutputWithContext(ctx context.Context) SystemDdnsArrayOutput {
	return o
}

func (o SystemDdnsArrayOutput) Index(i pulumi.IntInput) SystemDdnsOutput {
	return pulumi.All(o, i).ApplyT(func(vs []interface{}) *SystemDdns {
		return vs[0].([]*SystemDdns)[vs[1].(int)]
	}).(SystemDdnsOutput)
}

type SystemDdnsMapOutput struct{ *pulumi.OutputState }

func (SystemDdnsMapOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*map[string]*SystemDdns)(nil)).Elem()
}

func (o SystemDdnsMapOutput) ToSystemDdnsMapOutput() SystemDdnsMapOutput {
	return o
}

func (o SystemDdnsMapOutput) ToSystemDdnsMapOutputWithContext(ctx context.Context) SystemDdnsMapOutput {
	return o
}

func (o SystemDdnsMapOutput) MapIndex(k pulumi.StringInput) SystemDdnsOutput {
	return pulumi.All(o, k).ApplyT(func(vs []interface{}) *SystemDdns {
		return vs[0].(map[string]*SystemDdns)[vs[1].(string)]
	}).(SystemDdnsOutput)
}

func init() {
	pulumi.RegisterInputType(reflect.TypeOf((*SystemDdnsInput)(nil)).Elem(), &SystemDdns{})
	pulumi.RegisterInputType(reflect.TypeOf((*SystemDdnsArrayInput)(nil)).Elem(), SystemDdnsArray{})
	pulumi.RegisterInputType(reflect.TypeOf((*SystemDdnsMapInput)(nil)).Elem(), SystemDdnsMap{})
	pulumi.RegisterOutputType(SystemDdnsOutput{})
	pulumi.RegisterOutputType(SystemDdnsArrayOutput{})
	pulumi.RegisterOutputType(SystemDdnsMapOutput{})
}
