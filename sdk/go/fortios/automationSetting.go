// Code generated by the Pulumi Terraform Bridge (tfgen) Tool DO NOT EDIT.
// *** WARNING: Do not edit by hand unless you're certain you know what you are doing! ***

package fortios

import (
	"context"
	"reflect"

	"github.com/lubyou/pulumi-fortios/sdk/go/fortios/internal"
	"github.com/pulumi/pulumi/sdk/v3/go/pulumi"
	"github.com/pulumi/pulumi/sdk/v3/go/pulumix"
)

type AutomationSetting struct {
	pulumi.CustomResourceState

	FabricSync            pulumi.StringOutput    `pulumi:"fabricSync"`
	MaxConcurrentStitches pulumi.IntOutput       `pulumi:"maxConcurrentStitches"`
	Vdomparam             pulumi.StringPtrOutput `pulumi:"vdomparam"`
}

// NewAutomationSetting registers a new resource with the given unique name, arguments, and options.
func NewAutomationSetting(ctx *pulumi.Context,
	name string, args *AutomationSettingArgs, opts ...pulumi.ResourceOption) (*AutomationSetting, error) {
	if args == nil {
		args = &AutomationSettingArgs{}
	}

	opts = internal.PkgResourceDefaultOpts(opts)
	var resource AutomationSetting
	err := ctx.RegisterResource("fortios:index/automationSetting:AutomationSetting", name, args, &resource, opts...)
	if err != nil {
		return nil, err
	}
	return &resource, nil
}

// GetAutomationSetting gets an existing AutomationSetting resource's state with the given name, ID, and optional
// state properties that are used to uniquely qualify the lookup (nil if not required).
func GetAutomationSetting(ctx *pulumi.Context,
	name string, id pulumi.IDInput, state *AutomationSettingState, opts ...pulumi.ResourceOption) (*AutomationSetting, error) {
	var resource AutomationSetting
	err := ctx.ReadResource("fortios:index/automationSetting:AutomationSetting", name, id, state, &resource, opts...)
	if err != nil {
		return nil, err
	}
	return &resource, nil
}

// Input properties used for looking up and filtering AutomationSetting resources.
type automationSettingState struct {
	FabricSync            *string `pulumi:"fabricSync"`
	MaxConcurrentStitches *int    `pulumi:"maxConcurrentStitches"`
	Vdomparam             *string `pulumi:"vdomparam"`
}

type AutomationSettingState struct {
	FabricSync            pulumi.StringPtrInput
	MaxConcurrentStitches pulumi.IntPtrInput
	Vdomparam             pulumi.StringPtrInput
}

func (AutomationSettingState) ElementType() reflect.Type {
	return reflect.TypeOf((*automationSettingState)(nil)).Elem()
}

type automationSettingArgs struct {
	FabricSync            *string `pulumi:"fabricSync"`
	MaxConcurrentStitches *int    `pulumi:"maxConcurrentStitches"`
	Vdomparam             *string `pulumi:"vdomparam"`
}

// The set of arguments for constructing a AutomationSetting resource.
type AutomationSettingArgs struct {
	FabricSync            pulumi.StringPtrInput
	MaxConcurrentStitches pulumi.IntPtrInput
	Vdomparam             pulumi.StringPtrInput
}

func (AutomationSettingArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*automationSettingArgs)(nil)).Elem()
}

type AutomationSettingInput interface {
	pulumi.Input

	ToAutomationSettingOutput() AutomationSettingOutput
	ToAutomationSettingOutputWithContext(ctx context.Context) AutomationSettingOutput
}

func (*AutomationSetting) ElementType() reflect.Type {
	return reflect.TypeOf((**AutomationSetting)(nil)).Elem()
}

func (i *AutomationSetting) ToAutomationSettingOutput() AutomationSettingOutput {
	return i.ToAutomationSettingOutputWithContext(context.Background())
}

func (i *AutomationSetting) ToAutomationSettingOutputWithContext(ctx context.Context) AutomationSettingOutput {
	return pulumi.ToOutputWithContext(ctx, i).(AutomationSettingOutput)
}

func (i *AutomationSetting) ToOutput(ctx context.Context) pulumix.Output[*AutomationSetting] {
	return pulumix.Output[*AutomationSetting]{
		OutputState: i.ToAutomationSettingOutputWithContext(ctx).OutputState,
	}
}

// AutomationSettingArrayInput is an input type that accepts AutomationSettingArray and AutomationSettingArrayOutput values.
// You can construct a concrete instance of `AutomationSettingArrayInput` via:
//
//	AutomationSettingArray{ AutomationSettingArgs{...} }
type AutomationSettingArrayInput interface {
	pulumi.Input

	ToAutomationSettingArrayOutput() AutomationSettingArrayOutput
	ToAutomationSettingArrayOutputWithContext(context.Context) AutomationSettingArrayOutput
}

type AutomationSettingArray []AutomationSettingInput

func (AutomationSettingArray) ElementType() reflect.Type {
	return reflect.TypeOf((*[]*AutomationSetting)(nil)).Elem()
}

func (i AutomationSettingArray) ToAutomationSettingArrayOutput() AutomationSettingArrayOutput {
	return i.ToAutomationSettingArrayOutputWithContext(context.Background())
}

func (i AutomationSettingArray) ToAutomationSettingArrayOutputWithContext(ctx context.Context) AutomationSettingArrayOutput {
	return pulumi.ToOutputWithContext(ctx, i).(AutomationSettingArrayOutput)
}

func (i AutomationSettingArray) ToOutput(ctx context.Context) pulumix.Output[[]*AutomationSetting] {
	return pulumix.Output[[]*AutomationSetting]{
		OutputState: i.ToAutomationSettingArrayOutputWithContext(ctx).OutputState,
	}
}

// AutomationSettingMapInput is an input type that accepts AutomationSettingMap and AutomationSettingMapOutput values.
// You can construct a concrete instance of `AutomationSettingMapInput` via:
//
//	AutomationSettingMap{ "key": AutomationSettingArgs{...} }
type AutomationSettingMapInput interface {
	pulumi.Input

	ToAutomationSettingMapOutput() AutomationSettingMapOutput
	ToAutomationSettingMapOutputWithContext(context.Context) AutomationSettingMapOutput
}

type AutomationSettingMap map[string]AutomationSettingInput

func (AutomationSettingMap) ElementType() reflect.Type {
	return reflect.TypeOf((*map[string]*AutomationSetting)(nil)).Elem()
}

func (i AutomationSettingMap) ToAutomationSettingMapOutput() AutomationSettingMapOutput {
	return i.ToAutomationSettingMapOutputWithContext(context.Background())
}

func (i AutomationSettingMap) ToAutomationSettingMapOutputWithContext(ctx context.Context) AutomationSettingMapOutput {
	return pulumi.ToOutputWithContext(ctx, i).(AutomationSettingMapOutput)
}

func (i AutomationSettingMap) ToOutput(ctx context.Context) pulumix.Output[map[string]*AutomationSetting] {
	return pulumix.Output[map[string]*AutomationSetting]{
		OutputState: i.ToAutomationSettingMapOutputWithContext(ctx).OutputState,
	}
}

type AutomationSettingOutput struct{ *pulumi.OutputState }

func (AutomationSettingOutput) ElementType() reflect.Type {
	return reflect.TypeOf((**AutomationSetting)(nil)).Elem()
}

func (o AutomationSettingOutput) ToAutomationSettingOutput() AutomationSettingOutput {
	return o
}

func (o AutomationSettingOutput) ToAutomationSettingOutputWithContext(ctx context.Context) AutomationSettingOutput {
	return o
}

func (o AutomationSettingOutput) ToOutput(ctx context.Context) pulumix.Output[*AutomationSetting] {
	return pulumix.Output[*AutomationSetting]{
		OutputState: o.OutputState,
	}
}

func (o AutomationSettingOutput) FabricSync() pulumi.StringOutput {
	return o.ApplyT(func(v *AutomationSetting) pulumi.StringOutput { return v.FabricSync }).(pulumi.StringOutput)
}

func (o AutomationSettingOutput) MaxConcurrentStitches() pulumi.IntOutput {
	return o.ApplyT(func(v *AutomationSetting) pulumi.IntOutput { return v.MaxConcurrentStitches }).(pulumi.IntOutput)
}

func (o AutomationSettingOutput) Vdomparam() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *AutomationSetting) pulumi.StringPtrOutput { return v.Vdomparam }).(pulumi.StringPtrOutput)
}

type AutomationSettingArrayOutput struct{ *pulumi.OutputState }

func (AutomationSettingArrayOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*[]*AutomationSetting)(nil)).Elem()
}

func (o AutomationSettingArrayOutput) ToAutomationSettingArrayOutput() AutomationSettingArrayOutput {
	return o
}

func (o AutomationSettingArrayOutput) ToAutomationSettingArrayOutputWithContext(ctx context.Context) AutomationSettingArrayOutput {
	return o
}

func (o AutomationSettingArrayOutput) ToOutput(ctx context.Context) pulumix.Output[[]*AutomationSetting] {
	return pulumix.Output[[]*AutomationSetting]{
		OutputState: o.OutputState,
	}
}

func (o AutomationSettingArrayOutput) Index(i pulumi.IntInput) AutomationSettingOutput {
	return pulumi.All(o, i).ApplyT(func(vs []interface{}) *AutomationSetting {
		return vs[0].([]*AutomationSetting)[vs[1].(int)]
	}).(AutomationSettingOutput)
}

type AutomationSettingMapOutput struct{ *pulumi.OutputState }

func (AutomationSettingMapOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*map[string]*AutomationSetting)(nil)).Elem()
}

func (o AutomationSettingMapOutput) ToAutomationSettingMapOutput() AutomationSettingMapOutput {
	return o
}

func (o AutomationSettingMapOutput) ToAutomationSettingMapOutputWithContext(ctx context.Context) AutomationSettingMapOutput {
	return o
}

func (o AutomationSettingMapOutput) ToOutput(ctx context.Context) pulumix.Output[map[string]*AutomationSetting] {
	return pulumix.Output[map[string]*AutomationSetting]{
		OutputState: o.OutputState,
	}
}

func (o AutomationSettingMapOutput) MapIndex(k pulumi.StringInput) AutomationSettingOutput {
	return pulumi.All(o, k).ApplyT(func(vs []interface{}) *AutomationSetting {
		return vs[0].(map[string]*AutomationSetting)[vs[1].(string)]
	}).(AutomationSettingOutput)
}

func init() {
	pulumi.RegisterInputType(reflect.TypeOf((*AutomationSettingInput)(nil)).Elem(), &AutomationSetting{})
	pulumi.RegisterInputType(reflect.TypeOf((*AutomationSettingArrayInput)(nil)).Elem(), AutomationSettingArray{})
	pulumi.RegisterInputType(reflect.TypeOf((*AutomationSettingMapInput)(nil)).Elem(), AutomationSettingMap{})
	pulumi.RegisterOutputType(AutomationSettingOutput{})
	pulumi.RegisterOutputType(AutomationSettingArrayOutput{})
	pulumi.RegisterOutputType(AutomationSettingMapOutput{})
}
