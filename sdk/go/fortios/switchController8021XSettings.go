// *** WARNING: this file was generated by the Pulumi Terraform Bridge (tfgen) Tool. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

package fortios

import (
	"context"
	"reflect"

	"github.com/pulumi/pulumi/sdk/v3/go/pulumi"
)

// Configure global 802.1X settings.
//
// ## Example Usage
//
// ```go
// package main
//
// import (
// 	"github.com/pulumi/pulumi-fortios/sdk/go/fortios"
// 	"github.com/pulumi/pulumi/sdk/v3/go/pulumi"
// )
//
// func main() {
// 	pulumi.Run(func(ctx *pulumi.Context) error {
// 		_, err := fortios.NewSwitchController8021XSettings(ctx, "trname", &fortios.SwitchController8021XSettingsArgs{
// 			LinkDownAuth:     pulumi.String("set-unauth"),
// 			MaxReauthAttempt: pulumi.Int(3),
// 			ReauthPeriod:     pulumi.Int(12),
// 		})
// 		if err != nil {
// 			return err
// 		}
// 		return nil
// 	})
// }
// ```
//
// ## Import
//
// SwitchController 8021XSettings can be imported using any of these accepted formats
//
// ```sh
//  $ pulumi import fortios:index/switchController8021XSettings:SwitchController8021XSettings labelname SwitchController8021XSettings
// ```
//
//  If you do not want to import arguments of block$ export "FORTIOS_IMPORT_TABLE"="false"
//
// ```sh
//  $ pulumi import fortios:index/switchController8021XSettings:SwitchController8021XSettings labelname SwitchController8021XSettings
// ```
//
//  $ unset "FORTIOS_IMPORT_TABLE"
type SwitchController8021XSettings struct {
	pulumi.CustomResourceState

	// Interface-reauthentication state to set if a link is down. Valid values: `set-unauth`, `no-action`.
	LinkDownAuth pulumi.StringOutput `pulumi:"linkDownAuth"`
	// Maximum number of authentication attempts (0 - 15, default = 3).
	MaxReauthAttempt pulumi.IntOutput `pulumi:"maxReauthAttempt"`
	// Period of time to allow for reauthentication (1 - 1440 sec, default = 60, 0 = disable reauthentication).
	ReauthPeriod pulumi.IntOutput `pulumi:"reauthPeriod"`
	// 802.1X Tx period (seconds, default=30).
	TxPeriod pulumi.IntOutput `pulumi:"txPeriod"`
	// Specifies the vdom to which the resource will be applied when the FortiGate unit is running in VDOM mode. Only one vdom can be specified. If you want to inherit the vdom configuration of the provider, please do not set this parameter.
	Vdomparam pulumi.StringPtrOutput `pulumi:"vdomparam"`
}

// NewSwitchController8021XSettings registers a new resource with the given unique name, arguments, and options.
func NewSwitchController8021XSettings(ctx *pulumi.Context,
	name string, args *SwitchController8021XSettingsArgs, opts ...pulumi.ResourceOption) (*SwitchController8021XSettings, error) {
	if args == nil {
		args = &SwitchController8021XSettingsArgs{}
	}

	opts = pkgResourceDefaultOpts(opts)
	var resource SwitchController8021XSettings
	err := ctx.RegisterResource("fortios:index/switchController8021XSettings:SwitchController8021XSettings", name, args, &resource, opts...)
	if err != nil {
		return nil, err
	}
	return &resource, nil
}

// GetSwitchController8021XSettings gets an existing SwitchController8021XSettings resource's state with the given name, ID, and optional
// state properties that are used to uniquely qualify the lookup (nil if not required).
func GetSwitchController8021XSettings(ctx *pulumi.Context,
	name string, id pulumi.IDInput, state *SwitchController8021XSettingsState, opts ...pulumi.ResourceOption) (*SwitchController8021XSettings, error) {
	var resource SwitchController8021XSettings
	err := ctx.ReadResource("fortios:index/switchController8021XSettings:SwitchController8021XSettings", name, id, state, &resource, opts...)
	if err != nil {
		return nil, err
	}
	return &resource, nil
}

// Input properties used for looking up and filtering SwitchController8021XSettings resources.
type switchController8021XSettingsState struct {
	// Interface-reauthentication state to set if a link is down. Valid values: `set-unauth`, `no-action`.
	LinkDownAuth *string `pulumi:"linkDownAuth"`
	// Maximum number of authentication attempts (0 - 15, default = 3).
	MaxReauthAttempt *int `pulumi:"maxReauthAttempt"`
	// Period of time to allow for reauthentication (1 - 1440 sec, default = 60, 0 = disable reauthentication).
	ReauthPeriod *int `pulumi:"reauthPeriod"`
	// 802.1X Tx period (seconds, default=30).
	TxPeriod *int `pulumi:"txPeriod"`
	// Specifies the vdom to which the resource will be applied when the FortiGate unit is running in VDOM mode. Only one vdom can be specified. If you want to inherit the vdom configuration of the provider, please do not set this parameter.
	Vdomparam *string `pulumi:"vdomparam"`
}

type SwitchController8021XSettingsState struct {
	// Interface-reauthentication state to set if a link is down. Valid values: `set-unauth`, `no-action`.
	LinkDownAuth pulumi.StringPtrInput
	// Maximum number of authentication attempts (0 - 15, default = 3).
	MaxReauthAttempt pulumi.IntPtrInput
	// Period of time to allow for reauthentication (1 - 1440 sec, default = 60, 0 = disable reauthentication).
	ReauthPeriod pulumi.IntPtrInput
	// 802.1X Tx period (seconds, default=30).
	TxPeriod pulumi.IntPtrInput
	// Specifies the vdom to which the resource will be applied when the FortiGate unit is running in VDOM mode. Only one vdom can be specified. If you want to inherit the vdom configuration of the provider, please do not set this parameter.
	Vdomparam pulumi.StringPtrInput
}

func (SwitchController8021XSettingsState) ElementType() reflect.Type {
	return reflect.TypeOf((*switchController8021XSettingsState)(nil)).Elem()
}

type switchController8021XSettingsArgs struct {
	// Interface-reauthentication state to set if a link is down. Valid values: `set-unauth`, `no-action`.
	LinkDownAuth *string `pulumi:"linkDownAuth"`
	// Maximum number of authentication attempts (0 - 15, default = 3).
	MaxReauthAttempt *int `pulumi:"maxReauthAttempt"`
	// Period of time to allow for reauthentication (1 - 1440 sec, default = 60, 0 = disable reauthentication).
	ReauthPeriod *int `pulumi:"reauthPeriod"`
	// 802.1X Tx period (seconds, default=30).
	TxPeriod *int `pulumi:"txPeriod"`
	// Specifies the vdom to which the resource will be applied when the FortiGate unit is running in VDOM mode. Only one vdom can be specified. If you want to inherit the vdom configuration of the provider, please do not set this parameter.
	Vdomparam *string `pulumi:"vdomparam"`
}

// The set of arguments for constructing a SwitchController8021XSettings resource.
type SwitchController8021XSettingsArgs struct {
	// Interface-reauthentication state to set if a link is down. Valid values: `set-unauth`, `no-action`.
	LinkDownAuth pulumi.StringPtrInput
	// Maximum number of authentication attempts (0 - 15, default = 3).
	MaxReauthAttempt pulumi.IntPtrInput
	// Period of time to allow for reauthentication (1 - 1440 sec, default = 60, 0 = disable reauthentication).
	ReauthPeriod pulumi.IntPtrInput
	// 802.1X Tx period (seconds, default=30).
	TxPeriod pulumi.IntPtrInput
	// Specifies the vdom to which the resource will be applied when the FortiGate unit is running in VDOM mode. Only one vdom can be specified. If you want to inherit the vdom configuration of the provider, please do not set this parameter.
	Vdomparam pulumi.StringPtrInput
}

func (SwitchController8021XSettingsArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*switchController8021XSettingsArgs)(nil)).Elem()
}

type SwitchController8021XSettingsInput interface {
	pulumi.Input

	ToSwitchController8021XSettingsOutput() SwitchController8021XSettingsOutput
	ToSwitchController8021XSettingsOutputWithContext(ctx context.Context) SwitchController8021XSettingsOutput
}

func (*SwitchController8021XSettings) ElementType() reflect.Type {
	return reflect.TypeOf((**SwitchController8021XSettings)(nil)).Elem()
}

func (i *SwitchController8021XSettings) ToSwitchController8021XSettingsOutput() SwitchController8021XSettingsOutput {
	return i.ToSwitchController8021XSettingsOutputWithContext(context.Background())
}

func (i *SwitchController8021XSettings) ToSwitchController8021XSettingsOutputWithContext(ctx context.Context) SwitchController8021XSettingsOutput {
	return pulumi.ToOutputWithContext(ctx, i).(SwitchController8021XSettingsOutput)
}

// SwitchController8021XSettingsArrayInput is an input type that accepts SwitchController8021XSettingsArray and SwitchController8021XSettingsArrayOutput values.
// You can construct a concrete instance of `SwitchController8021XSettingsArrayInput` via:
//
//          SwitchController8021XSettingsArray{ SwitchController8021XSettingsArgs{...} }
type SwitchController8021XSettingsArrayInput interface {
	pulumi.Input

	ToSwitchController8021XSettingsArrayOutput() SwitchController8021XSettingsArrayOutput
	ToSwitchController8021XSettingsArrayOutputWithContext(context.Context) SwitchController8021XSettingsArrayOutput
}

type SwitchController8021XSettingsArray []SwitchController8021XSettingsInput

func (SwitchController8021XSettingsArray) ElementType() reflect.Type {
	return reflect.TypeOf((*[]*SwitchController8021XSettings)(nil)).Elem()
}

func (i SwitchController8021XSettingsArray) ToSwitchController8021XSettingsArrayOutput() SwitchController8021XSettingsArrayOutput {
	return i.ToSwitchController8021XSettingsArrayOutputWithContext(context.Background())
}

func (i SwitchController8021XSettingsArray) ToSwitchController8021XSettingsArrayOutputWithContext(ctx context.Context) SwitchController8021XSettingsArrayOutput {
	return pulumi.ToOutputWithContext(ctx, i).(SwitchController8021XSettingsArrayOutput)
}

// SwitchController8021XSettingsMapInput is an input type that accepts SwitchController8021XSettingsMap and SwitchController8021XSettingsMapOutput values.
// You can construct a concrete instance of `SwitchController8021XSettingsMapInput` via:
//
//          SwitchController8021XSettingsMap{ "key": SwitchController8021XSettingsArgs{...} }
type SwitchController8021XSettingsMapInput interface {
	pulumi.Input

	ToSwitchController8021XSettingsMapOutput() SwitchController8021XSettingsMapOutput
	ToSwitchController8021XSettingsMapOutputWithContext(context.Context) SwitchController8021XSettingsMapOutput
}

type SwitchController8021XSettingsMap map[string]SwitchController8021XSettingsInput

func (SwitchController8021XSettingsMap) ElementType() reflect.Type {
	return reflect.TypeOf((*map[string]*SwitchController8021XSettings)(nil)).Elem()
}

func (i SwitchController8021XSettingsMap) ToSwitchController8021XSettingsMapOutput() SwitchController8021XSettingsMapOutput {
	return i.ToSwitchController8021XSettingsMapOutputWithContext(context.Background())
}

func (i SwitchController8021XSettingsMap) ToSwitchController8021XSettingsMapOutputWithContext(ctx context.Context) SwitchController8021XSettingsMapOutput {
	return pulumi.ToOutputWithContext(ctx, i).(SwitchController8021XSettingsMapOutput)
}

type SwitchController8021XSettingsOutput struct{ *pulumi.OutputState }

func (SwitchController8021XSettingsOutput) ElementType() reflect.Type {
	return reflect.TypeOf((**SwitchController8021XSettings)(nil)).Elem()
}

func (o SwitchController8021XSettingsOutput) ToSwitchController8021XSettingsOutput() SwitchController8021XSettingsOutput {
	return o
}

func (o SwitchController8021XSettingsOutput) ToSwitchController8021XSettingsOutputWithContext(ctx context.Context) SwitchController8021XSettingsOutput {
	return o
}

type SwitchController8021XSettingsArrayOutput struct{ *pulumi.OutputState }

func (SwitchController8021XSettingsArrayOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*[]*SwitchController8021XSettings)(nil)).Elem()
}

func (o SwitchController8021XSettingsArrayOutput) ToSwitchController8021XSettingsArrayOutput() SwitchController8021XSettingsArrayOutput {
	return o
}

func (o SwitchController8021XSettingsArrayOutput) ToSwitchController8021XSettingsArrayOutputWithContext(ctx context.Context) SwitchController8021XSettingsArrayOutput {
	return o
}

func (o SwitchController8021XSettingsArrayOutput) Index(i pulumi.IntInput) SwitchController8021XSettingsOutput {
	return pulumi.All(o, i).ApplyT(func(vs []interface{}) *SwitchController8021XSettings {
		return vs[0].([]*SwitchController8021XSettings)[vs[1].(int)]
	}).(SwitchController8021XSettingsOutput)
}

type SwitchController8021XSettingsMapOutput struct{ *pulumi.OutputState }

func (SwitchController8021XSettingsMapOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*map[string]*SwitchController8021XSettings)(nil)).Elem()
}

func (o SwitchController8021XSettingsMapOutput) ToSwitchController8021XSettingsMapOutput() SwitchController8021XSettingsMapOutput {
	return o
}

func (o SwitchController8021XSettingsMapOutput) ToSwitchController8021XSettingsMapOutputWithContext(ctx context.Context) SwitchController8021XSettingsMapOutput {
	return o
}

func (o SwitchController8021XSettingsMapOutput) MapIndex(k pulumi.StringInput) SwitchController8021XSettingsOutput {
	return pulumi.All(o, k).ApplyT(func(vs []interface{}) *SwitchController8021XSettings {
		return vs[0].(map[string]*SwitchController8021XSettings)[vs[1].(string)]
	}).(SwitchController8021XSettingsOutput)
}

func init() {
	pulumi.RegisterInputType(reflect.TypeOf((*SwitchController8021XSettingsInput)(nil)).Elem(), &SwitchController8021XSettings{})
	pulumi.RegisterInputType(reflect.TypeOf((*SwitchController8021XSettingsArrayInput)(nil)).Elem(), SwitchController8021XSettingsArray{})
	pulumi.RegisterInputType(reflect.TypeOf((*SwitchController8021XSettingsMapInput)(nil)).Elem(), SwitchController8021XSettingsMap{})
	pulumi.RegisterOutputType(SwitchController8021XSettingsOutput{})
	pulumi.RegisterOutputType(SwitchController8021XSettingsArrayOutput{})
	pulumi.RegisterOutputType(SwitchController8021XSettingsMapOutput{})
}
