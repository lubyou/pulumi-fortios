// *** WARNING: this file was generated by the Pulumi Terraform Bridge (tfgen) Tool. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

package fortios

import (
	"context"
	"reflect"

	"github.com/pkg/errors"
	"github.com/pulumi/pulumi/sdk/v3/go/pulumi"
)

// Configure DNS.
//
// ## Example Usage
//
// ```go
// package main
//
// import (
// 	"github.com/pulumi/pulumi-fortios/sdk/go/fortios"
// 	"github.com/pulumi/pulumi/sdk/v3/go/pulumi"
// )
//
// func main() {
// 	pulumi.Run(func(ctx *pulumi.Context) error {
// 		_, err := fortios.NewSystemDns(ctx, "trname", &fortios.SystemDnsArgs{
// 			CacheNotfoundResponses: pulumi.String("disable"),
// 			DnsCacheLimit:          pulumi.Int(5000),
// 			DnsCacheTtl:            pulumi.Int(1800),
// 			Ip6Primary:             pulumi.String("::"),
// 			Ip6Secondary:           pulumi.String("::"),
// 			Primary:                pulumi.String("208.91.112.53"),
// 			Retry:                  pulumi.Int(2),
// 			Secondary:              pulumi.String("208.91.112.51"),
// 			SourceIp:               pulumi.String("0.0.0.0"),
// 			Timeout:                pulumi.Int(5),
// 		})
// 		if err != nil {
// 			return err
// 		}
// 		return nil
// 	})
// }
// ```
//
// ## Import
//
// System Dns can be imported using any of these accepted formats$ export "FORTIOS_IMPORT_TABLE"="true"
//
// ```sh
//  $ pulumi import fortios:index/systemDns:SystemDns labelname SystemDns
// ```
//
//  $ unset "FORTIOS_IMPORT_TABLE"
type SystemDns struct {
	pulumi.CustomResourceState

	// Alternate primary DNS server. (This is not used as a failover DNS server.)
	AltPrimary pulumi.StringOutput `pulumi:"altPrimary"`
	// Alternate secondary DNS server. (This is not used as a failover DNS server.)
	AltSecondary pulumi.StringOutput `pulumi:"altSecondary"`
	// Enable/disable response from the DNS server when a record is not in cache. Valid values: `disable`, `enable`.
	CacheNotfoundResponses pulumi.StringOutput `pulumi:"cacheNotfoundResponses"`
	// Maximum number of records in the DNS cache.
	DnsCacheLimit pulumi.IntOutput `pulumi:"dnsCacheLimit"`
	// Duration in seconds that the DNS cache retains information.
	DnsCacheTtl pulumi.IntOutput `pulumi:"dnsCacheTtl"`
	// Enable/disable/enforce DNS over TLS. Valid values: `disable`, `enable`, `enforce`.
	DnsOverTls pulumi.StringOutput `pulumi:"dnsOverTls"`
	// DNS search domain list separated by space (maximum 8 domains)
	Domains SystemDnsDomainArrayOutput `pulumi:"domains"`
	// true or false, set this parameter to true when using dynamic forEach + toset to configure and sort sub-tables, please do not set this parameter when configuring static sub-tables.
	DynamicSortSubtable pulumi.StringPtrOutput `pulumi:"dynamicSortSubtable"`
	// Specify outgoing interface to reach server.
	Interface pulumi.StringOutput `pulumi:"interface"`
	// Specify how to select outgoing interface to reach server. Valid values: `auto`, `sdwan`, `specify`.
	InterfaceSelectMethod pulumi.StringOutput `pulumi:"interfaceSelectMethod"`
	// Primary DNS server IPv6 address.
	Ip6Primary pulumi.StringOutput `pulumi:"ip6Primary"`
	// Secondary DNS server IPv6 address.
	Ip6Secondary pulumi.StringOutput `pulumi:"ip6Secondary"`
	// Local DNS log setting. Valid values: `disable`, `error`, `all`.
	Log pulumi.StringOutput `pulumi:"log"`
	// Primary DNS server IP address.
	Primary pulumi.StringOutput `pulumi:"primary"`
	// DNS protocols. Valid values: `cleartext`, `dot`, `doh`.
	Protocol pulumi.StringOutput `pulumi:"protocol"`
	// Number of times to retry (0 - 5).
	Retry pulumi.IntOutput `pulumi:"retry"`
	// Secondary DNS server IP address.
	Secondary pulumi.StringOutput `pulumi:"secondary"`
	// DNS server host name list. The structure of `serverHostname` block is documented below.
	ServerHostnames SystemDnsServerHostnameArrayOutput `pulumi:"serverHostnames"`
	// Specify how configured servers are prioritized. Valid values: `least-rtt`, `failover`.
	ServerSelectMethod pulumi.StringOutput `pulumi:"serverSelectMethod"`
	// IP address used by the DNS server as its source IP.
	SourceIp pulumi.StringOutput `pulumi:"sourceIp"`
	// Name of local certificate for SSL connections.
	SslCertificate pulumi.StringOutput `pulumi:"sslCertificate"`
	// DNS query timeout interval in seconds (1 - 10).
	Timeout pulumi.IntOutput `pulumi:"timeout"`
	// Specifies the vdom to which the resource will be applied when the FortiGate unit is running in VDOM mode. Only one vdom can be specified. If you want to inherit the vdom configuration of the provider, please do not set this parameter.
	Vdomparam pulumi.StringPtrOutput `pulumi:"vdomparam"`
}

// NewSystemDns registers a new resource with the given unique name, arguments, and options.
func NewSystemDns(ctx *pulumi.Context,
	name string, args *SystemDnsArgs, opts ...pulumi.ResourceOption) (*SystemDns, error) {
	if args == nil {
		return nil, errors.New("missing one or more required arguments")
	}

	if args.Primary == nil {
		return nil, errors.New("invalid value for required argument 'Primary'")
	}
	opts = pkgResourceDefaultOpts(opts)
	var resource SystemDns
	err := ctx.RegisterResource("fortios:index/systemDns:SystemDns", name, args, &resource, opts...)
	if err != nil {
		return nil, err
	}
	return &resource, nil
}

// GetSystemDns gets an existing SystemDns resource's state with the given name, ID, and optional
// state properties that are used to uniquely qualify the lookup (nil if not required).
func GetSystemDns(ctx *pulumi.Context,
	name string, id pulumi.IDInput, state *SystemDnsState, opts ...pulumi.ResourceOption) (*SystemDns, error) {
	var resource SystemDns
	err := ctx.ReadResource("fortios:index/systemDns:SystemDns", name, id, state, &resource, opts...)
	if err != nil {
		return nil, err
	}
	return &resource, nil
}

// Input properties used for looking up and filtering SystemDns resources.
type systemDnsState struct {
	// Alternate primary DNS server. (This is not used as a failover DNS server.)
	AltPrimary *string `pulumi:"altPrimary"`
	// Alternate secondary DNS server. (This is not used as a failover DNS server.)
	AltSecondary *string `pulumi:"altSecondary"`
	// Enable/disable response from the DNS server when a record is not in cache. Valid values: `disable`, `enable`.
	CacheNotfoundResponses *string `pulumi:"cacheNotfoundResponses"`
	// Maximum number of records in the DNS cache.
	DnsCacheLimit *int `pulumi:"dnsCacheLimit"`
	// Duration in seconds that the DNS cache retains information.
	DnsCacheTtl *int `pulumi:"dnsCacheTtl"`
	// Enable/disable/enforce DNS over TLS. Valid values: `disable`, `enable`, `enforce`.
	DnsOverTls *string `pulumi:"dnsOverTls"`
	// DNS search domain list separated by space (maximum 8 domains)
	Domains []SystemDnsDomain `pulumi:"domains"`
	// true or false, set this parameter to true when using dynamic forEach + toset to configure and sort sub-tables, please do not set this parameter when configuring static sub-tables.
	DynamicSortSubtable *string `pulumi:"dynamicSortSubtable"`
	// Specify outgoing interface to reach server.
	Interface *string `pulumi:"interface"`
	// Specify how to select outgoing interface to reach server. Valid values: `auto`, `sdwan`, `specify`.
	InterfaceSelectMethod *string `pulumi:"interfaceSelectMethod"`
	// Primary DNS server IPv6 address.
	Ip6Primary *string `pulumi:"ip6Primary"`
	// Secondary DNS server IPv6 address.
	Ip6Secondary *string `pulumi:"ip6Secondary"`
	// Local DNS log setting. Valid values: `disable`, `error`, `all`.
	Log *string `pulumi:"log"`
	// Primary DNS server IP address.
	Primary *string `pulumi:"primary"`
	// DNS protocols. Valid values: `cleartext`, `dot`, `doh`.
	Protocol *string `pulumi:"protocol"`
	// Number of times to retry (0 - 5).
	Retry *int `pulumi:"retry"`
	// Secondary DNS server IP address.
	Secondary *string `pulumi:"secondary"`
	// DNS server host name list. The structure of `serverHostname` block is documented below.
	ServerHostnames []SystemDnsServerHostname `pulumi:"serverHostnames"`
	// Specify how configured servers are prioritized. Valid values: `least-rtt`, `failover`.
	ServerSelectMethod *string `pulumi:"serverSelectMethod"`
	// IP address used by the DNS server as its source IP.
	SourceIp *string `pulumi:"sourceIp"`
	// Name of local certificate for SSL connections.
	SslCertificate *string `pulumi:"sslCertificate"`
	// DNS query timeout interval in seconds (1 - 10).
	Timeout *int `pulumi:"timeout"`
	// Specifies the vdom to which the resource will be applied when the FortiGate unit is running in VDOM mode. Only one vdom can be specified. If you want to inherit the vdom configuration of the provider, please do not set this parameter.
	Vdomparam *string `pulumi:"vdomparam"`
}

type SystemDnsState struct {
	// Alternate primary DNS server. (This is not used as a failover DNS server.)
	AltPrimary pulumi.StringPtrInput
	// Alternate secondary DNS server. (This is not used as a failover DNS server.)
	AltSecondary pulumi.StringPtrInput
	// Enable/disable response from the DNS server when a record is not in cache. Valid values: `disable`, `enable`.
	CacheNotfoundResponses pulumi.StringPtrInput
	// Maximum number of records in the DNS cache.
	DnsCacheLimit pulumi.IntPtrInput
	// Duration in seconds that the DNS cache retains information.
	DnsCacheTtl pulumi.IntPtrInput
	// Enable/disable/enforce DNS over TLS. Valid values: `disable`, `enable`, `enforce`.
	DnsOverTls pulumi.StringPtrInput
	// DNS search domain list separated by space (maximum 8 domains)
	Domains SystemDnsDomainArrayInput
	// true or false, set this parameter to true when using dynamic forEach + toset to configure and sort sub-tables, please do not set this parameter when configuring static sub-tables.
	DynamicSortSubtable pulumi.StringPtrInput
	// Specify outgoing interface to reach server.
	Interface pulumi.StringPtrInput
	// Specify how to select outgoing interface to reach server. Valid values: `auto`, `sdwan`, `specify`.
	InterfaceSelectMethod pulumi.StringPtrInput
	// Primary DNS server IPv6 address.
	Ip6Primary pulumi.StringPtrInput
	// Secondary DNS server IPv6 address.
	Ip6Secondary pulumi.StringPtrInput
	// Local DNS log setting. Valid values: `disable`, `error`, `all`.
	Log pulumi.StringPtrInput
	// Primary DNS server IP address.
	Primary pulumi.StringPtrInput
	// DNS protocols. Valid values: `cleartext`, `dot`, `doh`.
	Protocol pulumi.StringPtrInput
	// Number of times to retry (0 - 5).
	Retry pulumi.IntPtrInput
	// Secondary DNS server IP address.
	Secondary pulumi.StringPtrInput
	// DNS server host name list. The structure of `serverHostname` block is documented below.
	ServerHostnames SystemDnsServerHostnameArrayInput
	// Specify how configured servers are prioritized. Valid values: `least-rtt`, `failover`.
	ServerSelectMethod pulumi.StringPtrInput
	// IP address used by the DNS server as its source IP.
	SourceIp pulumi.StringPtrInput
	// Name of local certificate for SSL connections.
	SslCertificate pulumi.StringPtrInput
	// DNS query timeout interval in seconds (1 - 10).
	Timeout pulumi.IntPtrInput
	// Specifies the vdom to which the resource will be applied when the FortiGate unit is running in VDOM mode. Only one vdom can be specified. If you want to inherit the vdom configuration of the provider, please do not set this parameter.
	Vdomparam pulumi.StringPtrInput
}

func (SystemDnsState) ElementType() reflect.Type {
	return reflect.TypeOf((*systemDnsState)(nil)).Elem()
}

type systemDnsArgs struct {
	// Alternate primary DNS server. (This is not used as a failover DNS server.)
	AltPrimary *string `pulumi:"altPrimary"`
	// Alternate secondary DNS server. (This is not used as a failover DNS server.)
	AltSecondary *string `pulumi:"altSecondary"`
	// Enable/disable response from the DNS server when a record is not in cache. Valid values: `disable`, `enable`.
	CacheNotfoundResponses *string `pulumi:"cacheNotfoundResponses"`
	// Maximum number of records in the DNS cache.
	DnsCacheLimit *int `pulumi:"dnsCacheLimit"`
	// Duration in seconds that the DNS cache retains information.
	DnsCacheTtl *int `pulumi:"dnsCacheTtl"`
	// Enable/disable/enforce DNS over TLS. Valid values: `disable`, `enable`, `enforce`.
	DnsOverTls *string `pulumi:"dnsOverTls"`
	// DNS search domain list separated by space (maximum 8 domains)
	Domains []SystemDnsDomain `pulumi:"domains"`
	// true or false, set this parameter to true when using dynamic forEach + toset to configure and sort sub-tables, please do not set this parameter when configuring static sub-tables.
	DynamicSortSubtable *string `pulumi:"dynamicSortSubtable"`
	// Specify outgoing interface to reach server.
	Interface *string `pulumi:"interface"`
	// Specify how to select outgoing interface to reach server. Valid values: `auto`, `sdwan`, `specify`.
	InterfaceSelectMethod *string `pulumi:"interfaceSelectMethod"`
	// Primary DNS server IPv6 address.
	Ip6Primary *string `pulumi:"ip6Primary"`
	// Secondary DNS server IPv6 address.
	Ip6Secondary *string `pulumi:"ip6Secondary"`
	// Local DNS log setting. Valid values: `disable`, `error`, `all`.
	Log *string `pulumi:"log"`
	// Primary DNS server IP address.
	Primary string `pulumi:"primary"`
	// DNS protocols. Valid values: `cleartext`, `dot`, `doh`.
	Protocol *string `pulumi:"protocol"`
	// Number of times to retry (0 - 5).
	Retry *int `pulumi:"retry"`
	// Secondary DNS server IP address.
	Secondary *string `pulumi:"secondary"`
	// DNS server host name list. The structure of `serverHostname` block is documented below.
	ServerHostnames []SystemDnsServerHostname `pulumi:"serverHostnames"`
	// Specify how configured servers are prioritized. Valid values: `least-rtt`, `failover`.
	ServerSelectMethod *string `pulumi:"serverSelectMethod"`
	// IP address used by the DNS server as its source IP.
	SourceIp *string `pulumi:"sourceIp"`
	// Name of local certificate for SSL connections.
	SslCertificate *string `pulumi:"sslCertificate"`
	// DNS query timeout interval in seconds (1 - 10).
	Timeout *int `pulumi:"timeout"`
	// Specifies the vdom to which the resource will be applied when the FortiGate unit is running in VDOM mode. Only one vdom can be specified. If you want to inherit the vdom configuration of the provider, please do not set this parameter.
	Vdomparam *string `pulumi:"vdomparam"`
}

// The set of arguments for constructing a SystemDns resource.
type SystemDnsArgs struct {
	// Alternate primary DNS server. (This is not used as a failover DNS server.)
	AltPrimary pulumi.StringPtrInput
	// Alternate secondary DNS server. (This is not used as a failover DNS server.)
	AltSecondary pulumi.StringPtrInput
	// Enable/disable response from the DNS server when a record is not in cache. Valid values: `disable`, `enable`.
	CacheNotfoundResponses pulumi.StringPtrInput
	// Maximum number of records in the DNS cache.
	DnsCacheLimit pulumi.IntPtrInput
	// Duration in seconds that the DNS cache retains information.
	DnsCacheTtl pulumi.IntPtrInput
	// Enable/disable/enforce DNS over TLS. Valid values: `disable`, `enable`, `enforce`.
	DnsOverTls pulumi.StringPtrInput
	// DNS search domain list separated by space (maximum 8 domains)
	Domains SystemDnsDomainArrayInput
	// true or false, set this parameter to true when using dynamic forEach + toset to configure and sort sub-tables, please do not set this parameter when configuring static sub-tables.
	DynamicSortSubtable pulumi.StringPtrInput
	// Specify outgoing interface to reach server.
	Interface pulumi.StringPtrInput
	// Specify how to select outgoing interface to reach server. Valid values: `auto`, `sdwan`, `specify`.
	InterfaceSelectMethod pulumi.StringPtrInput
	// Primary DNS server IPv6 address.
	Ip6Primary pulumi.StringPtrInput
	// Secondary DNS server IPv6 address.
	Ip6Secondary pulumi.StringPtrInput
	// Local DNS log setting. Valid values: `disable`, `error`, `all`.
	Log pulumi.StringPtrInput
	// Primary DNS server IP address.
	Primary pulumi.StringInput
	// DNS protocols. Valid values: `cleartext`, `dot`, `doh`.
	Protocol pulumi.StringPtrInput
	// Number of times to retry (0 - 5).
	Retry pulumi.IntPtrInput
	// Secondary DNS server IP address.
	Secondary pulumi.StringPtrInput
	// DNS server host name list. The structure of `serverHostname` block is documented below.
	ServerHostnames SystemDnsServerHostnameArrayInput
	// Specify how configured servers are prioritized. Valid values: `least-rtt`, `failover`.
	ServerSelectMethod pulumi.StringPtrInput
	// IP address used by the DNS server as its source IP.
	SourceIp pulumi.StringPtrInput
	// Name of local certificate for SSL connections.
	SslCertificate pulumi.StringPtrInput
	// DNS query timeout interval in seconds (1 - 10).
	Timeout pulumi.IntPtrInput
	// Specifies the vdom to which the resource will be applied when the FortiGate unit is running in VDOM mode. Only one vdom can be specified. If you want to inherit the vdom configuration of the provider, please do not set this parameter.
	Vdomparam pulumi.StringPtrInput
}

func (SystemDnsArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*systemDnsArgs)(nil)).Elem()
}

type SystemDnsInput interface {
	pulumi.Input

	ToSystemDnsOutput() SystemDnsOutput
	ToSystemDnsOutputWithContext(ctx context.Context) SystemDnsOutput
}

func (*SystemDns) ElementType() reflect.Type {
	return reflect.TypeOf((**SystemDns)(nil)).Elem()
}

func (i *SystemDns) ToSystemDnsOutput() SystemDnsOutput {
	return i.ToSystemDnsOutputWithContext(context.Background())
}

func (i *SystemDns) ToSystemDnsOutputWithContext(ctx context.Context) SystemDnsOutput {
	return pulumi.ToOutputWithContext(ctx, i).(SystemDnsOutput)
}

// SystemDnsArrayInput is an input type that accepts SystemDnsArray and SystemDnsArrayOutput values.
// You can construct a concrete instance of `SystemDnsArrayInput` via:
//
//          SystemDnsArray{ SystemDnsArgs{...} }
type SystemDnsArrayInput interface {
	pulumi.Input

	ToSystemDnsArrayOutput() SystemDnsArrayOutput
	ToSystemDnsArrayOutputWithContext(context.Context) SystemDnsArrayOutput
}

type SystemDnsArray []SystemDnsInput

func (SystemDnsArray) ElementType() reflect.Type {
	return reflect.TypeOf((*[]*SystemDns)(nil)).Elem()
}

func (i SystemDnsArray) ToSystemDnsArrayOutput() SystemDnsArrayOutput {
	return i.ToSystemDnsArrayOutputWithContext(context.Background())
}

func (i SystemDnsArray) ToSystemDnsArrayOutputWithContext(ctx context.Context) SystemDnsArrayOutput {
	return pulumi.ToOutputWithContext(ctx, i).(SystemDnsArrayOutput)
}

// SystemDnsMapInput is an input type that accepts SystemDnsMap and SystemDnsMapOutput values.
// You can construct a concrete instance of `SystemDnsMapInput` via:
//
//          SystemDnsMap{ "key": SystemDnsArgs{...} }
type SystemDnsMapInput interface {
	pulumi.Input

	ToSystemDnsMapOutput() SystemDnsMapOutput
	ToSystemDnsMapOutputWithContext(context.Context) SystemDnsMapOutput
}

type SystemDnsMap map[string]SystemDnsInput

func (SystemDnsMap) ElementType() reflect.Type {
	return reflect.TypeOf((*map[string]*SystemDns)(nil)).Elem()
}

func (i SystemDnsMap) ToSystemDnsMapOutput() SystemDnsMapOutput {
	return i.ToSystemDnsMapOutputWithContext(context.Background())
}

func (i SystemDnsMap) ToSystemDnsMapOutputWithContext(ctx context.Context) SystemDnsMapOutput {
	return pulumi.ToOutputWithContext(ctx, i).(SystemDnsMapOutput)
}

type SystemDnsOutput struct{ *pulumi.OutputState }

func (SystemDnsOutput) ElementType() reflect.Type {
	return reflect.TypeOf((**SystemDns)(nil)).Elem()
}

func (o SystemDnsOutput) ToSystemDnsOutput() SystemDnsOutput {
	return o
}

func (o SystemDnsOutput) ToSystemDnsOutputWithContext(ctx context.Context) SystemDnsOutput {
	return o
}

type SystemDnsArrayOutput struct{ *pulumi.OutputState }

func (SystemDnsArrayOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*[]*SystemDns)(nil)).Elem()
}

func (o SystemDnsArrayOutput) ToSystemDnsArrayOutput() SystemDnsArrayOutput {
	return o
}

func (o SystemDnsArrayOutput) ToSystemDnsArrayOutputWithContext(ctx context.Context) SystemDnsArrayOutput {
	return o
}

func (o SystemDnsArrayOutput) Index(i pulumi.IntInput) SystemDnsOutput {
	return pulumi.All(o, i).ApplyT(func(vs []interface{}) *SystemDns {
		return vs[0].([]*SystemDns)[vs[1].(int)]
	}).(SystemDnsOutput)
}

type SystemDnsMapOutput struct{ *pulumi.OutputState }

func (SystemDnsMapOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*map[string]*SystemDns)(nil)).Elem()
}

func (o SystemDnsMapOutput) ToSystemDnsMapOutput() SystemDnsMapOutput {
	return o
}

func (o SystemDnsMapOutput) ToSystemDnsMapOutputWithContext(ctx context.Context) SystemDnsMapOutput {
	return o
}

func (o SystemDnsMapOutput) MapIndex(k pulumi.StringInput) SystemDnsOutput {
	return pulumi.All(o, k).ApplyT(func(vs []interface{}) *SystemDns {
		return vs[0].(map[string]*SystemDns)[vs[1].(string)]
	}).(SystemDnsOutput)
}

func init() {
	pulumi.RegisterInputType(reflect.TypeOf((*SystemDnsInput)(nil)).Elem(), &SystemDns{})
	pulumi.RegisterInputType(reflect.TypeOf((*SystemDnsArrayInput)(nil)).Elem(), SystemDnsArray{})
	pulumi.RegisterInputType(reflect.TypeOf((*SystemDnsMapInput)(nil)).Elem(), SystemDnsMap{})
	pulumi.RegisterOutputType(SystemDnsOutput{})
	pulumi.RegisterOutputType(SystemDnsArrayOutput{})
	pulumi.RegisterOutputType(SystemDnsMapOutput{})
}
