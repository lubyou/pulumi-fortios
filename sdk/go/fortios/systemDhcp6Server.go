// Code generated by the Pulumi Terraform Bridge (tfgen) Tool DO NOT EDIT.
// *** WARNING: Do not edit by hand unless you're certain you know what you are doing! ***

package fortios

import (
	"context"
	"reflect"

	"errors"
	"github.com/lubyou/pulumi-fortios/sdk/go/fortios/internal"
	"github.com/pulumi/pulumi/sdk/v3/go/pulumi"
	"github.com/pulumi/pulumi/sdk/v3/go/pulumix"
)

type SystemDhcp6Server struct {
	pulumi.CustomResourceState

	DelegatedPrefixIaid pulumi.IntOutput                        `pulumi:"delegatedPrefixIaid"`
	DnsSearchList       pulumi.StringOutput                     `pulumi:"dnsSearchList"`
	DnsServer1          pulumi.StringOutput                     `pulumi:"dnsServer1"`
	DnsServer2          pulumi.StringOutput                     `pulumi:"dnsServer2"`
	DnsServer3          pulumi.StringOutput                     `pulumi:"dnsServer3"`
	DnsServer4          pulumi.StringOutput                     `pulumi:"dnsServer4"`
	DnsService          pulumi.StringOutput                     `pulumi:"dnsService"`
	Domain              pulumi.StringOutput                     `pulumi:"domain"`
	DynamicSortSubtable pulumi.StringPtrOutput                  `pulumi:"dynamicSortSubtable"`
	Fosid               pulumi.IntOutput                        `pulumi:"fosid"`
	GetAllTables        pulumi.StringPtrOutput                  `pulumi:"getAllTables"`
	Interface           pulumi.StringOutput                     `pulumi:"interface"`
	IpMode              pulumi.StringOutput                     `pulumi:"ipMode"`
	IpRanges            SystemDhcp6ServerIpRangeArrayOutput     `pulumi:"ipRanges"`
	LeaseTime           pulumi.IntOutput                        `pulumi:"leaseTime"`
	Option1             pulumi.StringOutput                     `pulumi:"option1"`
	Option2             pulumi.StringOutput                     `pulumi:"option2"`
	Option3             pulumi.StringOutput                     `pulumi:"option3"`
	PrefixMode          pulumi.StringOutput                     `pulumi:"prefixMode"`
	PrefixRanges        SystemDhcp6ServerPrefixRangeArrayOutput `pulumi:"prefixRanges"`
	RapidCommit         pulumi.StringOutput                     `pulumi:"rapidCommit"`
	Status              pulumi.StringOutput                     `pulumi:"status"`
	Subnet              pulumi.StringOutput                     `pulumi:"subnet"`
	UpstreamInterface   pulumi.StringOutput                     `pulumi:"upstreamInterface"`
	Vdomparam           pulumi.StringPtrOutput                  `pulumi:"vdomparam"`
}

// NewSystemDhcp6Server registers a new resource with the given unique name, arguments, and options.
func NewSystemDhcp6Server(ctx *pulumi.Context,
	name string, args *SystemDhcp6ServerArgs, opts ...pulumi.ResourceOption) (*SystemDhcp6Server, error) {
	if args == nil {
		return nil, errors.New("missing one or more required arguments")
	}

	if args.Fosid == nil {
		return nil, errors.New("invalid value for required argument 'Fosid'")
	}
	if args.Interface == nil {
		return nil, errors.New("invalid value for required argument 'Interface'")
	}
	if args.Subnet == nil {
		return nil, errors.New("invalid value for required argument 'Subnet'")
	}
	opts = internal.PkgResourceDefaultOpts(opts)
	var resource SystemDhcp6Server
	err := ctx.RegisterResource("fortios:index/systemDhcp6Server:SystemDhcp6Server", name, args, &resource, opts...)
	if err != nil {
		return nil, err
	}
	return &resource, nil
}

// GetSystemDhcp6Server gets an existing SystemDhcp6Server resource's state with the given name, ID, and optional
// state properties that are used to uniquely qualify the lookup (nil if not required).
func GetSystemDhcp6Server(ctx *pulumi.Context,
	name string, id pulumi.IDInput, state *SystemDhcp6ServerState, opts ...pulumi.ResourceOption) (*SystemDhcp6Server, error) {
	var resource SystemDhcp6Server
	err := ctx.ReadResource("fortios:index/systemDhcp6Server:SystemDhcp6Server", name, id, state, &resource, opts...)
	if err != nil {
		return nil, err
	}
	return &resource, nil
}

// Input properties used for looking up and filtering SystemDhcp6Server resources.
type systemDhcp6ServerState struct {
	DelegatedPrefixIaid *int                           `pulumi:"delegatedPrefixIaid"`
	DnsSearchList       *string                        `pulumi:"dnsSearchList"`
	DnsServer1          *string                        `pulumi:"dnsServer1"`
	DnsServer2          *string                        `pulumi:"dnsServer2"`
	DnsServer3          *string                        `pulumi:"dnsServer3"`
	DnsServer4          *string                        `pulumi:"dnsServer4"`
	DnsService          *string                        `pulumi:"dnsService"`
	Domain              *string                        `pulumi:"domain"`
	DynamicSortSubtable *string                        `pulumi:"dynamicSortSubtable"`
	Fosid               *int                           `pulumi:"fosid"`
	GetAllTables        *string                        `pulumi:"getAllTables"`
	Interface           *string                        `pulumi:"interface"`
	IpMode              *string                        `pulumi:"ipMode"`
	IpRanges            []SystemDhcp6ServerIpRange     `pulumi:"ipRanges"`
	LeaseTime           *int                           `pulumi:"leaseTime"`
	Option1             *string                        `pulumi:"option1"`
	Option2             *string                        `pulumi:"option2"`
	Option3             *string                        `pulumi:"option3"`
	PrefixMode          *string                        `pulumi:"prefixMode"`
	PrefixRanges        []SystemDhcp6ServerPrefixRange `pulumi:"prefixRanges"`
	RapidCommit         *string                        `pulumi:"rapidCommit"`
	Status              *string                        `pulumi:"status"`
	Subnet              *string                        `pulumi:"subnet"`
	UpstreamInterface   *string                        `pulumi:"upstreamInterface"`
	Vdomparam           *string                        `pulumi:"vdomparam"`
}

type SystemDhcp6ServerState struct {
	DelegatedPrefixIaid pulumi.IntPtrInput
	DnsSearchList       pulumi.StringPtrInput
	DnsServer1          pulumi.StringPtrInput
	DnsServer2          pulumi.StringPtrInput
	DnsServer3          pulumi.StringPtrInput
	DnsServer4          pulumi.StringPtrInput
	DnsService          pulumi.StringPtrInput
	Domain              pulumi.StringPtrInput
	DynamicSortSubtable pulumi.StringPtrInput
	Fosid               pulumi.IntPtrInput
	GetAllTables        pulumi.StringPtrInput
	Interface           pulumi.StringPtrInput
	IpMode              pulumi.StringPtrInput
	IpRanges            SystemDhcp6ServerIpRangeArrayInput
	LeaseTime           pulumi.IntPtrInput
	Option1             pulumi.StringPtrInput
	Option2             pulumi.StringPtrInput
	Option3             pulumi.StringPtrInput
	PrefixMode          pulumi.StringPtrInput
	PrefixRanges        SystemDhcp6ServerPrefixRangeArrayInput
	RapidCommit         pulumi.StringPtrInput
	Status              pulumi.StringPtrInput
	Subnet              pulumi.StringPtrInput
	UpstreamInterface   pulumi.StringPtrInput
	Vdomparam           pulumi.StringPtrInput
}

func (SystemDhcp6ServerState) ElementType() reflect.Type {
	return reflect.TypeOf((*systemDhcp6ServerState)(nil)).Elem()
}

type systemDhcp6ServerArgs struct {
	DelegatedPrefixIaid *int                           `pulumi:"delegatedPrefixIaid"`
	DnsSearchList       *string                        `pulumi:"dnsSearchList"`
	DnsServer1          *string                        `pulumi:"dnsServer1"`
	DnsServer2          *string                        `pulumi:"dnsServer2"`
	DnsServer3          *string                        `pulumi:"dnsServer3"`
	DnsServer4          *string                        `pulumi:"dnsServer4"`
	DnsService          *string                        `pulumi:"dnsService"`
	Domain              *string                        `pulumi:"domain"`
	DynamicSortSubtable *string                        `pulumi:"dynamicSortSubtable"`
	Fosid               int                            `pulumi:"fosid"`
	GetAllTables        *string                        `pulumi:"getAllTables"`
	Interface           string                         `pulumi:"interface"`
	IpMode              *string                        `pulumi:"ipMode"`
	IpRanges            []SystemDhcp6ServerIpRange     `pulumi:"ipRanges"`
	LeaseTime           *int                           `pulumi:"leaseTime"`
	Option1             *string                        `pulumi:"option1"`
	Option2             *string                        `pulumi:"option2"`
	Option3             *string                        `pulumi:"option3"`
	PrefixMode          *string                        `pulumi:"prefixMode"`
	PrefixRanges        []SystemDhcp6ServerPrefixRange `pulumi:"prefixRanges"`
	RapidCommit         *string                        `pulumi:"rapidCommit"`
	Status              *string                        `pulumi:"status"`
	Subnet              string                         `pulumi:"subnet"`
	UpstreamInterface   *string                        `pulumi:"upstreamInterface"`
	Vdomparam           *string                        `pulumi:"vdomparam"`
}

// The set of arguments for constructing a SystemDhcp6Server resource.
type SystemDhcp6ServerArgs struct {
	DelegatedPrefixIaid pulumi.IntPtrInput
	DnsSearchList       pulumi.StringPtrInput
	DnsServer1          pulumi.StringPtrInput
	DnsServer2          pulumi.StringPtrInput
	DnsServer3          pulumi.StringPtrInput
	DnsServer4          pulumi.StringPtrInput
	DnsService          pulumi.StringPtrInput
	Domain              pulumi.StringPtrInput
	DynamicSortSubtable pulumi.StringPtrInput
	Fosid               pulumi.IntInput
	GetAllTables        pulumi.StringPtrInput
	Interface           pulumi.StringInput
	IpMode              pulumi.StringPtrInput
	IpRanges            SystemDhcp6ServerIpRangeArrayInput
	LeaseTime           pulumi.IntPtrInput
	Option1             pulumi.StringPtrInput
	Option2             pulumi.StringPtrInput
	Option3             pulumi.StringPtrInput
	PrefixMode          pulumi.StringPtrInput
	PrefixRanges        SystemDhcp6ServerPrefixRangeArrayInput
	RapidCommit         pulumi.StringPtrInput
	Status              pulumi.StringPtrInput
	Subnet              pulumi.StringInput
	UpstreamInterface   pulumi.StringPtrInput
	Vdomparam           pulumi.StringPtrInput
}

func (SystemDhcp6ServerArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*systemDhcp6ServerArgs)(nil)).Elem()
}

type SystemDhcp6ServerInput interface {
	pulumi.Input

	ToSystemDhcp6ServerOutput() SystemDhcp6ServerOutput
	ToSystemDhcp6ServerOutputWithContext(ctx context.Context) SystemDhcp6ServerOutput
}

func (*SystemDhcp6Server) ElementType() reflect.Type {
	return reflect.TypeOf((**SystemDhcp6Server)(nil)).Elem()
}

func (i *SystemDhcp6Server) ToSystemDhcp6ServerOutput() SystemDhcp6ServerOutput {
	return i.ToSystemDhcp6ServerOutputWithContext(context.Background())
}

func (i *SystemDhcp6Server) ToSystemDhcp6ServerOutputWithContext(ctx context.Context) SystemDhcp6ServerOutput {
	return pulumi.ToOutputWithContext(ctx, i).(SystemDhcp6ServerOutput)
}

func (i *SystemDhcp6Server) ToOutput(ctx context.Context) pulumix.Output[*SystemDhcp6Server] {
	return pulumix.Output[*SystemDhcp6Server]{
		OutputState: i.ToSystemDhcp6ServerOutputWithContext(ctx).OutputState,
	}
}

// SystemDhcp6ServerArrayInput is an input type that accepts SystemDhcp6ServerArray and SystemDhcp6ServerArrayOutput values.
// You can construct a concrete instance of `SystemDhcp6ServerArrayInput` via:
//
//	SystemDhcp6ServerArray{ SystemDhcp6ServerArgs{...} }
type SystemDhcp6ServerArrayInput interface {
	pulumi.Input

	ToSystemDhcp6ServerArrayOutput() SystemDhcp6ServerArrayOutput
	ToSystemDhcp6ServerArrayOutputWithContext(context.Context) SystemDhcp6ServerArrayOutput
}

type SystemDhcp6ServerArray []SystemDhcp6ServerInput

func (SystemDhcp6ServerArray) ElementType() reflect.Type {
	return reflect.TypeOf((*[]*SystemDhcp6Server)(nil)).Elem()
}

func (i SystemDhcp6ServerArray) ToSystemDhcp6ServerArrayOutput() SystemDhcp6ServerArrayOutput {
	return i.ToSystemDhcp6ServerArrayOutputWithContext(context.Background())
}

func (i SystemDhcp6ServerArray) ToSystemDhcp6ServerArrayOutputWithContext(ctx context.Context) SystemDhcp6ServerArrayOutput {
	return pulumi.ToOutputWithContext(ctx, i).(SystemDhcp6ServerArrayOutput)
}

func (i SystemDhcp6ServerArray) ToOutput(ctx context.Context) pulumix.Output[[]*SystemDhcp6Server] {
	return pulumix.Output[[]*SystemDhcp6Server]{
		OutputState: i.ToSystemDhcp6ServerArrayOutputWithContext(ctx).OutputState,
	}
}

// SystemDhcp6ServerMapInput is an input type that accepts SystemDhcp6ServerMap and SystemDhcp6ServerMapOutput values.
// You can construct a concrete instance of `SystemDhcp6ServerMapInput` via:
//
//	SystemDhcp6ServerMap{ "key": SystemDhcp6ServerArgs{...} }
type SystemDhcp6ServerMapInput interface {
	pulumi.Input

	ToSystemDhcp6ServerMapOutput() SystemDhcp6ServerMapOutput
	ToSystemDhcp6ServerMapOutputWithContext(context.Context) SystemDhcp6ServerMapOutput
}

type SystemDhcp6ServerMap map[string]SystemDhcp6ServerInput

func (SystemDhcp6ServerMap) ElementType() reflect.Type {
	return reflect.TypeOf((*map[string]*SystemDhcp6Server)(nil)).Elem()
}

func (i SystemDhcp6ServerMap) ToSystemDhcp6ServerMapOutput() SystemDhcp6ServerMapOutput {
	return i.ToSystemDhcp6ServerMapOutputWithContext(context.Background())
}

func (i SystemDhcp6ServerMap) ToSystemDhcp6ServerMapOutputWithContext(ctx context.Context) SystemDhcp6ServerMapOutput {
	return pulumi.ToOutputWithContext(ctx, i).(SystemDhcp6ServerMapOutput)
}

func (i SystemDhcp6ServerMap) ToOutput(ctx context.Context) pulumix.Output[map[string]*SystemDhcp6Server] {
	return pulumix.Output[map[string]*SystemDhcp6Server]{
		OutputState: i.ToSystemDhcp6ServerMapOutputWithContext(ctx).OutputState,
	}
}

type SystemDhcp6ServerOutput struct{ *pulumi.OutputState }

func (SystemDhcp6ServerOutput) ElementType() reflect.Type {
	return reflect.TypeOf((**SystemDhcp6Server)(nil)).Elem()
}

func (o SystemDhcp6ServerOutput) ToSystemDhcp6ServerOutput() SystemDhcp6ServerOutput {
	return o
}

func (o SystemDhcp6ServerOutput) ToSystemDhcp6ServerOutputWithContext(ctx context.Context) SystemDhcp6ServerOutput {
	return o
}

func (o SystemDhcp6ServerOutput) ToOutput(ctx context.Context) pulumix.Output[*SystemDhcp6Server] {
	return pulumix.Output[*SystemDhcp6Server]{
		OutputState: o.OutputState,
	}
}

func (o SystemDhcp6ServerOutput) DelegatedPrefixIaid() pulumi.IntOutput {
	return o.ApplyT(func(v *SystemDhcp6Server) pulumi.IntOutput { return v.DelegatedPrefixIaid }).(pulumi.IntOutput)
}

func (o SystemDhcp6ServerOutput) DnsSearchList() pulumi.StringOutput {
	return o.ApplyT(func(v *SystemDhcp6Server) pulumi.StringOutput { return v.DnsSearchList }).(pulumi.StringOutput)
}

func (o SystemDhcp6ServerOutput) DnsServer1() pulumi.StringOutput {
	return o.ApplyT(func(v *SystemDhcp6Server) pulumi.StringOutput { return v.DnsServer1 }).(pulumi.StringOutput)
}

func (o SystemDhcp6ServerOutput) DnsServer2() pulumi.StringOutput {
	return o.ApplyT(func(v *SystemDhcp6Server) pulumi.StringOutput { return v.DnsServer2 }).(pulumi.StringOutput)
}

func (o SystemDhcp6ServerOutput) DnsServer3() pulumi.StringOutput {
	return o.ApplyT(func(v *SystemDhcp6Server) pulumi.StringOutput { return v.DnsServer3 }).(pulumi.StringOutput)
}

func (o SystemDhcp6ServerOutput) DnsServer4() pulumi.StringOutput {
	return o.ApplyT(func(v *SystemDhcp6Server) pulumi.StringOutput { return v.DnsServer4 }).(pulumi.StringOutput)
}

func (o SystemDhcp6ServerOutput) DnsService() pulumi.StringOutput {
	return o.ApplyT(func(v *SystemDhcp6Server) pulumi.StringOutput { return v.DnsService }).(pulumi.StringOutput)
}

func (o SystemDhcp6ServerOutput) Domain() pulumi.StringOutput {
	return o.ApplyT(func(v *SystemDhcp6Server) pulumi.StringOutput { return v.Domain }).(pulumi.StringOutput)
}

func (o SystemDhcp6ServerOutput) DynamicSortSubtable() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *SystemDhcp6Server) pulumi.StringPtrOutput { return v.DynamicSortSubtable }).(pulumi.StringPtrOutput)
}

func (o SystemDhcp6ServerOutput) Fosid() pulumi.IntOutput {
	return o.ApplyT(func(v *SystemDhcp6Server) pulumi.IntOutput { return v.Fosid }).(pulumi.IntOutput)
}

func (o SystemDhcp6ServerOutput) GetAllTables() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *SystemDhcp6Server) pulumi.StringPtrOutput { return v.GetAllTables }).(pulumi.StringPtrOutput)
}

func (o SystemDhcp6ServerOutput) Interface() pulumi.StringOutput {
	return o.ApplyT(func(v *SystemDhcp6Server) pulumi.StringOutput { return v.Interface }).(pulumi.StringOutput)
}

func (o SystemDhcp6ServerOutput) IpMode() pulumi.StringOutput {
	return o.ApplyT(func(v *SystemDhcp6Server) pulumi.StringOutput { return v.IpMode }).(pulumi.StringOutput)
}

func (o SystemDhcp6ServerOutput) IpRanges() SystemDhcp6ServerIpRangeArrayOutput {
	return o.ApplyT(func(v *SystemDhcp6Server) SystemDhcp6ServerIpRangeArrayOutput { return v.IpRanges }).(SystemDhcp6ServerIpRangeArrayOutput)
}

func (o SystemDhcp6ServerOutput) LeaseTime() pulumi.IntOutput {
	return o.ApplyT(func(v *SystemDhcp6Server) pulumi.IntOutput { return v.LeaseTime }).(pulumi.IntOutput)
}

func (o SystemDhcp6ServerOutput) Option1() pulumi.StringOutput {
	return o.ApplyT(func(v *SystemDhcp6Server) pulumi.StringOutput { return v.Option1 }).(pulumi.StringOutput)
}

func (o SystemDhcp6ServerOutput) Option2() pulumi.StringOutput {
	return o.ApplyT(func(v *SystemDhcp6Server) pulumi.StringOutput { return v.Option2 }).(pulumi.StringOutput)
}

func (o SystemDhcp6ServerOutput) Option3() pulumi.StringOutput {
	return o.ApplyT(func(v *SystemDhcp6Server) pulumi.StringOutput { return v.Option3 }).(pulumi.StringOutput)
}

func (o SystemDhcp6ServerOutput) PrefixMode() pulumi.StringOutput {
	return o.ApplyT(func(v *SystemDhcp6Server) pulumi.StringOutput { return v.PrefixMode }).(pulumi.StringOutput)
}

func (o SystemDhcp6ServerOutput) PrefixRanges() SystemDhcp6ServerPrefixRangeArrayOutput {
	return o.ApplyT(func(v *SystemDhcp6Server) SystemDhcp6ServerPrefixRangeArrayOutput { return v.PrefixRanges }).(SystemDhcp6ServerPrefixRangeArrayOutput)
}

func (o SystemDhcp6ServerOutput) RapidCommit() pulumi.StringOutput {
	return o.ApplyT(func(v *SystemDhcp6Server) pulumi.StringOutput { return v.RapidCommit }).(pulumi.StringOutput)
}

func (o SystemDhcp6ServerOutput) Status() pulumi.StringOutput {
	return o.ApplyT(func(v *SystemDhcp6Server) pulumi.StringOutput { return v.Status }).(pulumi.StringOutput)
}

func (o SystemDhcp6ServerOutput) Subnet() pulumi.StringOutput {
	return o.ApplyT(func(v *SystemDhcp6Server) pulumi.StringOutput { return v.Subnet }).(pulumi.StringOutput)
}

func (o SystemDhcp6ServerOutput) UpstreamInterface() pulumi.StringOutput {
	return o.ApplyT(func(v *SystemDhcp6Server) pulumi.StringOutput { return v.UpstreamInterface }).(pulumi.StringOutput)
}

func (o SystemDhcp6ServerOutput) Vdomparam() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *SystemDhcp6Server) pulumi.StringPtrOutput { return v.Vdomparam }).(pulumi.StringPtrOutput)
}

type SystemDhcp6ServerArrayOutput struct{ *pulumi.OutputState }

func (SystemDhcp6ServerArrayOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*[]*SystemDhcp6Server)(nil)).Elem()
}

func (o SystemDhcp6ServerArrayOutput) ToSystemDhcp6ServerArrayOutput() SystemDhcp6ServerArrayOutput {
	return o
}

func (o SystemDhcp6ServerArrayOutput) ToSystemDhcp6ServerArrayOutputWithContext(ctx context.Context) SystemDhcp6ServerArrayOutput {
	return o
}

func (o SystemDhcp6ServerArrayOutput) ToOutput(ctx context.Context) pulumix.Output[[]*SystemDhcp6Server] {
	return pulumix.Output[[]*SystemDhcp6Server]{
		OutputState: o.OutputState,
	}
}

func (o SystemDhcp6ServerArrayOutput) Index(i pulumi.IntInput) SystemDhcp6ServerOutput {
	return pulumi.All(o, i).ApplyT(func(vs []interface{}) *SystemDhcp6Server {
		return vs[0].([]*SystemDhcp6Server)[vs[1].(int)]
	}).(SystemDhcp6ServerOutput)
}

type SystemDhcp6ServerMapOutput struct{ *pulumi.OutputState }

func (SystemDhcp6ServerMapOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*map[string]*SystemDhcp6Server)(nil)).Elem()
}

func (o SystemDhcp6ServerMapOutput) ToSystemDhcp6ServerMapOutput() SystemDhcp6ServerMapOutput {
	return o
}

func (o SystemDhcp6ServerMapOutput) ToSystemDhcp6ServerMapOutputWithContext(ctx context.Context) SystemDhcp6ServerMapOutput {
	return o
}

func (o SystemDhcp6ServerMapOutput) ToOutput(ctx context.Context) pulumix.Output[map[string]*SystemDhcp6Server] {
	return pulumix.Output[map[string]*SystemDhcp6Server]{
		OutputState: o.OutputState,
	}
}

func (o SystemDhcp6ServerMapOutput) MapIndex(k pulumi.StringInput) SystemDhcp6ServerOutput {
	return pulumi.All(o, k).ApplyT(func(vs []interface{}) *SystemDhcp6Server {
		return vs[0].(map[string]*SystemDhcp6Server)[vs[1].(string)]
	}).(SystemDhcp6ServerOutput)
}

func init() {
	pulumi.RegisterInputType(reflect.TypeOf((*SystemDhcp6ServerInput)(nil)).Elem(), &SystemDhcp6Server{})
	pulumi.RegisterInputType(reflect.TypeOf((*SystemDhcp6ServerArrayInput)(nil)).Elem(), SystemDhcp6ServerArray{})
	pulumi.RegisterInputType(reflect.TypeOf((*SystemDhcp6ServerMapInput)(nil)).Elem(), SystemDhcp6ServerMap{})
	pulumi.RegisterOutputType(SystemDhcp6ServerOutput{})
	pulumi.RegisterOutputType(SystemDhcp6ServerArrayOutput{})
	pulumi.RegisterOutputType(SystemDhcp6ServerMapOutput{})
}
