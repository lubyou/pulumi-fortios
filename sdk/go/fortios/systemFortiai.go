// Code generated by the Pulumi Terraform Bridge (tfgen) Tool DO NOT EDIT.
// *** WARNING: Do not edit by hand unless you're certain you know what you are doing! ***

package fortios

import (
	"context"
	"reflect"

	"github.com/lubyou/pulumi-fortios/sdk/go/fortios/internal"
	"github.com/pulumi/pulumi/sdk/v3/go/pulumi"
)

type SystemFortiai struct {
	pulumi.CustomResourceState

	Interface             pulumi.StringOutput    `pulumi:"interface"`
	InterfaceSelectMethod pulumi.StringOutput    `pulumi:"interfaceSelectMethod"`
	SourceIp              pulumi.StringOutput    `pulumi:"sourceIp"`
	Status                pulumi.StringOutput    `pulumi:"status"`
	Vdomparam             pulumi.StringPtrOutput `pulumi:"vdomparam"`
}

// NewSystemFortiai registers a new resource with the given unique name, arguments, and options.
func NewSystemFortiai(ctx *pulumi.Context,
	name string, args *SystemFortiaiArgs, opts ...pulumi.ResourceOption) (*SystemFortiai, error) {
	if args == nil {
		args = &SystemFortiaiArgs{}
	}

	opts = internal.PkgResourceDefaultOpts(opts)
	var resource SystemFortiai
	err := ctx.RegisterResource("fortios:index/systemFortiai:SystemFortiai", name, args, &resource, opts...)
	if err != nil {
		return nil, err
	}
	return &resource, nil
}

// GetSystemFortiai gets an existing SystemFortiai resource's state with the given name, ID, and optional
// state properties that are used to uniquely qualify the lookup (nil if not required).
func GetSystemFortiai(ctx *pulumi.Context,
	name string, id pulumi.IDInput, state *SystemFortiaiState, opts ...pulumi.ResourceOption) (*SystemFortiai, error) {
	var resource SystemFortiai
	err := ctx.ReadResource("fortios:index/systemFortiai:SystemFortiai", name, id, state, &resource, opts...)
	if err != nil {
		return nil, err
	}
	return &resource, nil
}

// Input properties used for looking up and filtering SystemFortiai resources.
type systemFortiaiState struct {
	Interface             *string `pulumi:"interface"`
	InterfaceSelectMethod *string `pulumi:"interfaceSelectMethod"`
	SourceIp              *string `pulumi:"sourceIp"`
	Status                *string `pulumi:"status"`
	Vdomparam             *string `pulumi:"vdomparam"`
}

type SystemFortiaiState struct {
	Interface             pulumi.StringPtrInput
	InterfaceSelectMethod pulumi.StringPtrInput
	SourceIp              pulumi.StringPtrInput
	Status                pulumi.StringPtrInput
	Vdomparam             pulumi.StringPtrInput
}

func (SystemFortiaiState) ElementType() reflect.Type {
	return reflect.TypeOf((*systemFortiaiState)(nil)).Elem()
}

type systemFortiaiArgs struct {
	Interface             *string `pulumi:"interface"`
	InterfaceSelectMethod *string `pulumi:"interfaceSelectMethod"`
	SourceIp              *string `pulumi:"sourceIp"`
	Status                *string `pulumi:"status"`
	Vdomparam             *string `pulumi:"vdomparam"`
}

// The set of arguments for constructing a SystemFortiai resource.
type SystemFortiaiArgs struct {
	Interface             pulumi.StringPtrInput
	InterfaceSelectMethod pulumi.StringPtrInput
	SourceIp              pulumi.StringPtrInput
	Status                pulumi.StringPtrInput
	Vdomparam             pulumi.StringPtrInput
}

func (SystemFortiaiArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*systemFortiaiArgs)(nil)).Elem()
}

type SystemFortiaiInput interface {
	pulumi.Input

	ToSystemFortiaiOutput() SystemFortiaiOutput
	ToSystemFortiaiOutputWithContext(ctx context.Context) SystemFortiaiOutput
}

func (*SystemFortiai) ElementType() reflect.Type {
	return reflect.TypeOf((**SystemFortiai)(nil)).Elem()
}

func (i *SystemFortiai) ToSystemFortiaiOutput() SystemFortiaiOutput {
	return i.ToSystemFortiaiOutputWithContext(context.Background())
}

func (i *SystemFortiai) ToSystemFortiaiOutputWithContext(ctx context.Context) SystemFortiaiOutput {
	return pulumi.ToOutputWithContext(ctx, i).(SystemFortiaiOutput)
}

// SystemFortiaiArrayInput is an input type that accepts SystemFortiaiArray and SystemFortiaiArrayOutput values.
// You can construct a concrete instance of `SystemFortiaiArrayInput` via:
//
//	SystemFortiaiArray{ SystemFortiaiArgs{...} }
type SystemFortiaiArrayInput interface {
	pulumi.Input

	ToSystemFortiaiArrayOutput() SystemFortiaiArrayOutput
	ToSystemFortiaiArrayOutputWithContext(context.Context) SystemFortiaiArrayOutput
}

type SystemFortiaiArray []SystemFortiaiInput

func (SystemFortiaiArray) ElementType() reflect.Type {
	return reflect.TypeOf((*[]*SystemFortiai)(nil)).Elem()
}

func (i SystemFortiaiArray) ToSystemFortiaiArrayOutput() SystemFortiaiArrayOutput {
	return i.ToSystemFortiaiArrayOutputWithContext(context.Background())
}

func (i SystemFortiaiArray) ToSystemFortiaiArrayOutputWithContext(ctx context.Context) SystemFortiaiArrayOutput {
	return pulumi.ToOutputWithContext(ctx, i).(SystemFortiaiArrayOutput)
}

// SystemFortiaiMapInput is an input type that accepts SystemFortiaiMap and SystemFortiaiMapOutput values.
// You can construct a concrete instance of `SystemFortiaiMapInput` via:
//
//	SystemFortiaiMap{ "key": SystemFortiaiArgs{...} }
type SystemFortiaiMapInput interface {
	pulumi.Input

	ToSystemFortiaiMapOutput() SystemFortiaiMapOutput
	ToSystemFortiaiMapOutputWithContext(context.Context) SystemFortiaiMapOutput
}

type SystemFortiaiMap map[string]SystemFortiaiInput

func (SystemFortiaiMap) ElementType() reflect.Type {
	return reflect.TypeOf((*map[string]*SystemFortiai)(nil)).Elem()
}

func (i SystemFortiaiMap) ToSystemFortiaiMapOutput() SystemFortiaiMapOutput {
	return i.ToSystemFortiaiMapOutputWithContext(context.Background())
}

func (i SystemFortiaiMap) ToSystemFortiaiMapOutputWithContext(ctx context.Context) SystemFortiaiMapOutput {
	return pulumi.ToOutputWithContext(ctx, i).(SystemFortiaiMapOutput)
}

type SystemFortiaiOutput struct{ *pulumi.OutputState }

func (SystemFortiaiOutput) ElementType() reflect.Type {
	return reflect.TypeOf((**SystemFortiai)(nil)).Elem()
}

func (o SystemFortiaiOutput) ToSystemFortiaiOutput() SystemFortiaiOutput {
	return o
}

func (o SystemFortiaiOutput) ToSystemFortiaiOutputWithContext(ctx context.Context) SystemFortiaiOutput {
	return o
}

func (o SystemFortiaiOutput) Interface() pulumi.StringOutput {
	return o.ApplyT(func(v *SystemFortiai) pulumi.StringOutput { return v.Interface }).(pulumi.StringOutput)
}

func (o SystemFortiaiOutput) InterfaceSelectMethod() pulumi.StringOutput {
	return o.ApplyT(func(v *SystemFortiai) pulumi.StringOutput { return v.InterfaceSelectMethod }).(pulumi.StringOutput)
}

func (o SystemFortiaiOutput) SourceIp() pulumi.StringOutput {
	return o.ApplyT(func(v *SystemFortiai) pulumi.StringOutput { return v.SourceIp }).(pulumi.StringOutput)
}

func (o SystemFortiaiOutput) Status() pulumi.StringOutput {
	return o.ApplyT(func(v *SystemFortiai) pulumi.StringOutput { return v.Status }).(pulumi.StringOutput)
}

func (o SystemFortiaiOutput) Vdomparam() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *SystemFortiai) pulumi.StringPtrOutput { return v.Vdomparam }).(pulumi.StringPtrOutput)
}

type SystemFortiaiArrayOutput struct{ *pulumi.OutputState }

func (SystemFortiaiArrayOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*[]*SystemFortiai)(nil)).Elem()
}

func (o SystemFortiaiArrayOutput) ToSystemFortiaiArrayOutput() SystemFortiaiArrayOutput {
	return o
}

func (o SystemFortiaiArrayOutput) ToSystemFortiaiArrayOutputWithContext(ctx context.Context) SystemFortiaiArrayOutput {
	return o
}

func (o SystemFortiaiArrayOutput) Index(i pulumi.IntInput) SystemFortiaiOutput {
	return pulumi.All(o, i).ApplyT(func(vs []interface{}) *SystemFortiai {
		return vs[0].([]*SystemFortiai)[vs[1].(int)]
	}).(SystemFortiaiOutput)
}

type SystemFortiaiMapOutput struct{ *pulumi.OutputState }

func (SystemFortiaiMapOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*map[string]*SystemFortiai)(nil)).Elem()
}

func (o SystemFortiaiMapOutput) ToSystemFortiaiMapOutput() SystemFortiaiMapOutput {
	return o
}

func (o SystemFortiaiMapOutput) ToSystemFortiaiMapOutputWithContext(ctx context.Context) SystemFortiaiMapOutput {
	return o
}

func (o SystemFortiaiMapOutput) MapIndex(k pulumi.StringInput) SystemFortiaiOutput {
	return pulumi.All(o, k).ApplyT(func(vs []interface{}) *SystemFortiai {
		return vs[0].(map[string]*SystemFortiai)[vs[1].(string)]
	}).(SystemFortiaiOutput)
}

func init() {
	pulumi.RegisterInputType(reflect.TypeOf((*SystemFortiaiInput)(nil)).Elem(), &SystemFortiai{})
	pulumi.RegisterInputType(reflect.TypeOf((*SystemFortiaiArrayInput)(nil)).Elem(), SystemFortiaiArray{})
	pulumi.RegisterInputType(reflect.TypeOf((*SystemFortiaiMapInput)(nil)).Elem(), SystemFortiaiMap{})
	pulumi.RegisterOutputType(SystemFortiaiOutput{})
	pulumi.RegisterOutputType(SystemFortiaiArrayOutput{})
	pulumi.RegisterOutputType(SystemFortiaiMapOutput{})
}
