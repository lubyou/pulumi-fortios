// Code generated by the Pulumi Terraform Bridge (tfgen) Tool DO NOT EDIT.
// *** WARNING: Do not edit by hand unless you're certain you know what you are doing! ***

package fortios

import (
	"context"
	"reflect"

	"github.com/pulumi/pulumi/sdk/v3/go/pulumi"
)

type WirelessControllerMpskProfile struct {
	pulumi.CustomResourceState

	DynamicSortSubtable   pulumi.StringPtrOutput                            `pulumi:"dynamicSortSubtable"`
	MpskConcurrentClients pulumi.IntOutput                                  `pulumi:"mpskConcurrentClients"`
	MpskGroups            WirelessControllerMpskProfileMpskGroupArrayOutput `pulumi:"mpskGroups"`
	Name                  pulumi.StringOutput                               `pulumi:"name"`
	Vdomparam             pulumi.StringPtrOutput                            `pulumi:"vdomparam"`
}

// NewWirelessControllerMpskProfile registers a new resource with the given unique name, arguments, and options.
func NewWirelessControllerMpskProfile(ctx *pulumi.Context,
	name string, args *WirelessControllerMpskProfileArgs, opts ...pulumi.ResourceOption) (*WirelessControllerMpskProfile, error) {
	if args == nil {
		args = &WirelessControllerMpskProfileArgs{}
	}

	opts = pkgResourceDefaultOpts(opts)
	var resource WirelessControllerMpskProfile
	err := ctx.RegisterResource("fortios:index/wirelessControllerMpskProfile:WirelessControllerMpskProfile", name, args, &resource, opts...)
	if err != nil {
		return nil, err
	}
	return &resource, nil
}

// GetWirelessControllerMpskProfile gets an existing WirelessControllerMpskProfile resource's state with the given name, ID, and optional
// state properties that are used to uniquely qualify the lookup (nil if not required).
func GetWirelessControllerMpskProfile(ctx *pulumi.Context,
	name string, id pulumi.IDInput, state *WirelessControllerMpskProfileState, opts ...pulumi.ResourceOption) (*WirelessControllerMpskProfile, error) {
	var resource WirelessControllerMpskProfile
	err := ctx.ReadResource("fortios:index/wirelessControllerMpskProfile:WirelessControllerMpskProfile", name, id, state, &resource, opts...)
	if err != nil {
		return nil, err
	}
	return &resource, nil
}

// Input properties used for looking up and filtering WirelessControllerMpskProfile resources.
type wirelessControllerMpskProfileState struct {
	DynamicSortSubtable   *string                                  `pulumi:"dynamicSortSubtable"`
	MpskConcurrentClients *int                                     `pulumi:"mpskConcurrentClients"`
	MpskGroups            []WirelessControllerMpskProfileMpskGroup `pulumi:"mpskGroups"`
	Name                  *string                                  `pulumi:"name"`
	Vdomparam             *string                                  `pulumi:"vdomparam"`
}

type WirelessControllerMpskProfileState struct {
	DynamicSortSubtable   pulumi.StringPtrInput
	MpskConcurrentClients pulumi.IntPtrInput
	MpskGroups            WirelessControllerMpskProfileMpskGroupArrayInput
	Name                  pulumi.StringPtrInput
	Vdomparam             pulumi.StringPtrInput
}

func (WirelessControllerMpskProfileState) ElementType() reflect.Type {
	return reflect.TypeOf((*wirelessControllerMpskProfileState)(nil)).Elem()
}

type wirelessControllerMpskProfileArgs struct {
	DynamicSortSubtable   *string                                  `pulumi:"dynamicSortSubtable"`
	MpskConcurrentClients *int                                     `pulumi:"mpskConcurrentClients"`
	MpskGroups            []WirelessControllerMpskProfileMpskGroup `pulumi:"mpskGroups"`
	Name                  *string                                  `pulumi:"name"`
	Vdomparam             *string                                  `pulumi:"vdomparam"`
}

// The set of arguments for constructing a WirelessControllerMpskProfile resource.
type WirelessControllerMpskProfileArgs struct {
	DynamicSortSubtable   pulumi.StringPtrInput
	MpskConcurrentClients pulumi.IntPtrInput
	MpskGroups            WirelessControllerMpskProfileMpskGroupArrayInput
	Name                  pulumi.StringPtrInput
	Vdomparam             pulumi.StringPtrInput
}

func (WirelessControllerMpskProfileArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*wirelessControllerMpskProfileArgs)(nil)).Elem()
}

type WirelessControllerMpskProfileInput interface {
	pulumi.Input

	ToWirelessControllerMpskProfileOutput() WirelessControllerMpskProfileOutput
	ToWirelessControllerMpskProfileOutputWithContext(ctx context.Context) WirelessControllerMpskProfileOutput
}

func (*WirelessControllerMpskProfile) ElementType() reflect.Type {
	return reflect.TypeOf((**WirelessControllerMpskProfile)(nil)).Elem()
}

func (i *WirelessControllerMpskProfile) ToWirelessControllerMpskProfileOutput() WirelessControllerMpskProfileOutput {
	return i.ToWirelessControllerMpskProfileOutputWithContext(context.Background())
}

func (i *WirelessControllerMpskProfile) ToWirelessControllerMpskProfileOutputWithContext(ctx context.Context) WirelessControllerMpskProfileOutput {
	return pulumi.ToOutputWithContext(ctx, i).(WirelessControllerMpskProfileOutput)
}

// WirelessControllerMpskProfileArrayInput is an input type that accepts WirelessControllerMpskProfileArray and WirelessControllerMpskProfileArrayOutput values.
// You can construct a concrete instance of `WirelessControllerMpskProfileArrayInput` via:
//
//	WirelessControllerMpskProfileArray{ WirelessControllerMpskProfileArgs{...} }
type WirelessControllerMpskProfileArrayInput interface {
	pulumi.Input

	ToWirelessControllerMpskProfileArrayOutput() WirelessControllerMpskProfileArrayOutput
	ToWirelessControllerMpskProfileArrayOutputWithContext(context.Context) WirelessControllerMpskProfileArrayOutput
}

type WirelessControllerMpskProfileArray []WirelessControllerMpskProfileInput

func (WirelessControllerMpskProfileArray) ElementType() reflect.Type {
	return reflect.TypeOf((*[]*WirelessControllerMpskProfile)(nil)).Elem()
}

func (i WirelessControllerMpskProfileArray) ToWirelessControllerMpskProfileArrayOutput() WirelessControllerMpskProfileArrayOutput {
	return i.ToWirelessControllerMpskProfileArrayOutputWithContext(context.Background())
}

func (i WirelessControllerMpskProfileArray) ToWirelessControllerMpskProfileArrayOutputWithContext(ctx context.Context) WirelessControllerMpskProfileArrayOutput {
	return pulumi.ToOutputWithContext(ctx, i).(WirelessControllerMpskProfileArrayOutput)
}

// WirelessControllerMpskProfileMapInput is an input type that accepts WirelessControllerMpskProfileMap and WirelessControllerMpskProfileMapOutput values.
// You can construct a concrete instance of `WirelessControllerMpskProfileMapInput` via:
//
//	WirelessControllerMpskProfileMap{ "key": WirelessControllerMpskProfileArgs{...} }
type WirelessControllerMpskProfileMapInput interface {
	pulumi.Input

	ToWirelessControllerMpskProfileMapOutput() WirelessControllerMpskProfileMapOutput
	ToWirelessControllerMpskProfileMapOutputWithContext(context.Context) WirelessControllerMpskProfileMapOutput
}

type WirelessControllerMpskProfileMap map[string]WirelessControllerMpskProfileInput

func (WirelessControllerMpskProfileMap) ElementType() reflect.Type {
	return reflect.TypeOf((*map[string]*WirelessControllerMpskProfile)(nil)).Elem()
}

func (i WirelessControllerMpskProfileMap) ToWirelessControllerMpskProfileMapOutput() WirelessControllerMpskProfileMapOutput {
	return i.ToWirelessControllerMpskProfileMapOutputWithContext(context.Background())
}

func (i WirelessControllerMpskProfileMap) ToWirelessControllerMpskProfileMapOutputWithContext(ctx context.Context) WirelessControllerMpskProfileMapOutput {
	return pulumi.ToOutputWithContext(ctx, i).(WirelessControllerMpskProfileMapOutput)
}

type WirelessControllerMpskProfileOutput struct{ *pulumi.OutputState }

func (WirelessControllerMpskProfileOutput) ElementType() reflect.Type {
	return reflect.TypeOf((**WirelessControllerMpskProfile)(nil)).Elem()
}

func (o WirelessControllerMpskProfileOutput) ToWirelessControllerMpskProfileOutput() WirelessControllerMpskProfileOutput {
	return o
}

func (o WirelessControllerMpskProfileOutput) ToWirelessControllerMpskProfileOutputWithContext(ctx context.Context) WirelessControllerMpskProfileOutput {
	return o
}

func (o WirelessControllerMpskProfileOutput) DynamicSortSubtable() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *WirelessControllerMpskProfile) pulumi.StringPtrOutput { return v.DynamicSortSubtable }).(pulumi.StringPtrOutput)
}

func (o WirelessControllerMpskProfileOutput) MpskConcurrentClients() pulumi.IntOutput {
	return o.ApplyT(func(v *WirelessControllerMpskProfile) pulumi.IntOutput { return v.MpskConcurrentClients }).(pulumi.IntOutput)
}

func (o WirelessControllerMpskProfileOutput) MpskGroups() WirelessControllerMpskProfileMpskGroupArrayOutput {
	return o.ApplyT(func(v *WirelessControllerMpskProfile) WirelessControllerMpskProfileMpskGroupArrayOutput {
		return v.MpskGroups
	}).(WirelessControllerMpskProfileMpskGroupArrayOutput)
}

func (o WirelessControllerMpskProfileOutput) Name() pulumi.StringOutput {
	return o.ApplyT(func(v *WirelessControllerMpskProfile) pulumi.StringOutput { return v.Name }).(pulumi.StringOutput)
}

func (o WirelessControllerMpskProfileOutput) Vdomparam() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *WirelessControllerMpskProfile) pulumi.StringPtrOutput { return v.Vdomparam }).(pulumi.StringPtrOutput)
}

type WirelessControllerMpskProfileArrayOutput struct{ *pulumi.OutputState }

func (WirelessControllerMpskProfileArrayOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*[]*WirelessControllerMpskProfile)(nil)).Elem()
}

func (o WirelessControllerMpskProfileArrayOutput) ToWirelessControllerMpskProfileArrayOutput() WirelessControllerMpskProfileArrayOutput {
	return o
}

func (o WirelessControllerMpskProfileArrayOutput) ToWirelessControllerMpskProfileArrayOutputWithContext(ctx context.Context) WirelessControllerMpskProfileArrayOutput {
	return o
}

func (o WirelessControllerMpskProfileArrayOutput) Index(i pulumi.IntInput) WirelessControllerMpskProfileOutput {
	return pulumi.All(o, i).ApplyT(func(vs []interface{}) *WirelessControllerMpskProfile {
		return vs[0].([]*WirelessControllerMpskProfile)[vs[1].(int)]
	}).(WirelessControllerMpskProfileOutput)
}

type WirelessControllerMpskProfileMapOutput struct{ *pulumi.OutputState }

func (WirelessControllerMpskProfileMapOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*map[string]*WirelessControllerMpskProfile)(nil)).Elem()
}

func (o WirelessControllerMpskProfileMapOutput) ToWirelessControllerMpskProfileMapOutput() WirelessControllerMpskProfileMapOutput {
	return o
}

func (o WirelessControllerMpskProfileMapOutput) ToWirelessControllerMpskProfileMapOutputWithContext(ctx context.Context) WirelessControllerMpskProfileMapOutput {
	return o
}

func (o WirelessControllerMpskProfileMapOutput) MapIndex(k pulumi.StringInput) WirelessControllerMpskProfileOutput {
	return pulumi.All(o, k).ApplyT(func(vs []interface{}) *WirelessControllerMpskProfile {
		return vs[0].(map[string]*WirelessControllerMpskProfile)[vs[1].(string)]
	}).(WirelessControllerMpskProfileOutput)
}

func init() {
	pulumi.RegisterInputType(reflect.TypeOf((*WirelessControllerMpskProfileInput)(nil)).Elem(), &WirelessControllerMpskProfile{})
	pulumi.RegisterInputType(reflect.TypeOf((*WirelessControllerMpskProfileArrayInput)(nil)).Elem(), WirelessControllerMpskProfileArray{})
	pulumi.RegisterInputType(reflect.TypeOf((*WirelessControllerMpskProfileMapInput)(nil)).Elem(), WirelessControllerMpskProfileMap{})
	pulumi.RegisterOutputType(WirelessControllerMpskProfileOutput{})
	pulumi.RegisterOutputType(WirelessControllerMpskProfileArrayOutput{})
	pulumi.RegisterOutputType(WirelessControllerMpskProfileMapOutput{})
}
