// *** WARNING: this file was generated by the Pulumi Terraform Bridge (tfgen) Tool. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

package fortios

import (
	"context"
	"reflect"

	"github.com/pulumi/pulumi/sdk/v3/go/pulumi"
)

// Configure inter wireless controller operation.
//
// ## Example Usage
//
// ```go
// package main
//
// import (
// 	"github.com/pulumi/pulumi-fortios/sdk/go/fortios"
// 	"github.com/pulumi/pulumi/sdk/v3/go/pulumi"
// )
//
// func main() {
// 	pulumi.Run(func(ctx *pulumi.Context) error {
// 		_, err := fortios.NewWirelessControllerInterController(ctx, "trname", &fortios.WirelessControllerInterControllerArgs{
// 			FastFailoverMax:     pulumi.Int(10),
// 			FastFailoverWait:    pulumi.Int(10),
// 			InterControllerKey:  pulumi.String("ENC XXXX"),
// 			InterControllerMode: pulumi.String("disable"),
// 			InterControllerPri:  pulumi.String("primary"),
// 		})
// 		if err != nil {
// 			return err
// 		}
// 		return nil
// 	})
// }
// ```
//
// ## Import
//
// WirelessController InterController can be imported using any of these accepted formats$ export "FORTIOS_IMPORT_TABLE"="true"
//
// ```sh
//  $ pulumi import fortios:index/wirelessControllerInterController:WirelessControllerInterController labelname WirelessControllerInterController
// ```
//
//  $ unset "FORTIOS_IMPORT_TABLE"
type WirelessControllerInterController struct {
	pulumi.CustomResourceState

	// true or false, set this parameter to true when using dynamic forEach + toset to configure and sort sub-tables, please do not set this parameter when configuring static sub-tables.
	DynamicSortSubtable pulumi.StringPtrOutput `pulumi:"dynamicSortSubtable"`
	// Maximum number of retransmissions for fast failover HA messages between peer wireless controllers (3 - 64, default = 10).
	FastFailoverMax pulumi.IntOutput `pulumi:"fastFailoverMax"`
	// Minimum wait time before an AP transitions from secondary controller to primary controller (10 - 86400 sec, default = 10).
	FastFailoverWait pulumi.IntOutput `pulumi:"fastFailoverWait"`
	// Secret key for inter-controller communications.
	InterControllerKey pulumi.StringPtrOutput `pulumi:"interControllerKey"`
	// Configure inter-controller mode (disable, l2-roaming, 1+1, default = disable). Valid values: `disable`, `l2-roaming`, `1+1`.
	InterControllerMode pulumi.StringOutput `pulumi:"interControllerMode"`
	// Fast failover peer wireless controller list. The structure of `interControllerPeer` block is documented below.
	InterControllerPeers WirelessControllerInterControllerInterControllerPeerArrayOutput `pulumi:"interControllerPeers"`
	// Configure inter-controller's priority (primary or secondary, default = primary). Valid values: `primary`, `secondary`.
	InterControllerPri pulumi.StringOutput `pulumi:"interControllerPri"`
	// Specifies the vdom to which the resource will be applied when the FortiGate unit is running in VDOM mode. Only one vdom can be specified. If you want to inherit the vdom configuration of the provider, please do not set this parameter.
	Vdomparam pulumi.StringPtrOutput `pulumi:"vdomparam"`
}

// NewWirelessControllerInterController registers a new resource with the given unique name, arguments, and options.
func NewWirelessControllerInterController(ctx *pulumi.Context,
	name string, args *WirelessControllerInterControllerArgs, opts ...pulumi.ResourceOption) (*WirelessControllerInterController, error) {
	if args == nil {
		args = &WirelessControllerInterControllerArgs{}
	}

	opts = pkgResourceDefaultOpts(opts)
	var resource WirelessControllerInterController
	err := ctx.RegisterResource("fortios:index/wirelessControllerInterController:WirelessControllerInterController", name, args, &resource, opts...)
	if err != nil {
		return nil, err
	}
	return &resource, nil
}

// GetWirelessControllerInterController gets an existing WirelessControllerInterController resource's state with the given name, ID, and optional
// state properties that are used to uniquely qualify the lookup (nil if not required).
func GetWirelessControllerInterController(ctx *pulumi.Context,
	name string, id pulumi.IDInput, state *WirelessControllerInterControllerState, opts ...pulumi.ResourceOption) (*WirelessControllerInterController, error) {
	var resource WirelessControllerInterController
	err := ctx.ReadResource("fortios:index/wirelessControllerInterController:WirelessControllerInterController", name, id, state, &resource, opts...)
	if err != nil {
		return nil, err
	}
	return &resource, nil
}

// Input properties used for looking up and filtering WirelessControllerInterController resources.
type wirelessControllerInterControllerState struct {
	// true or false, set this parameter to true when using dynamic forEach + toset to configure and sort sub-tables, please do not set this parameter when configuring static sub-tables.
	DynamicSortSubtable *string `pulumi:"dynamicSortSubtable"`
	// Maximum number of retransmissions for fast failover HA messages between peer wireless controllers (3 - 64, default = 10).
	FastFailoverMax *int `pulumi:"fastFailoverMax"`
	// Minimum wait time before an AP transitions from secondary controller to primary controller (10 - 86400 sec, default = 10).
	FastFailoverWait *int `pulumi:"fastFailoverWait"`
	// Secret key for inter-controller communications.
	InterControllerKey *string `pulumi:"interControllerKey"`
	// Configure inter-controller mode (disable, l2-roaming, 1+1, default = disable). Valid values: `disable`, `l2-roaming`, `1+1`.
	InterControllerMode *string `pulumi:"interControllerMode"`
	// Fast failover peer wireless controller list. The structure of `interControllerPeer` block is documented below.
	InterControllerPeers []WirelessControllerInterControllerInterControllerPeer `pulumi:"interControllerPeers"`
	// Configure inter-controller's priority (primary or secondary, default = primary). Valid values: `primary`, `secondary`.
	InterControllerPri *string `pulumi:"interControllerPri"`
	// Specifies the vdom to which the resource will be applied when the FortiGate unit is running in VDOM mode. Only one vdom can be specified. If you want to inherit the vdom configuration of the provider, please do not set this parameter.
	Vdomparam *string `pulumi:"vdomparam"`
}

type WirelessControllerInterControllerState struct {
	// true or false, set this parameter to true when using dynamic forEach + toset to configure and sort sub-tables, please do not set this parameter when configuring static sub-tables.
	DynamicSortSubtable pulumi.StringPtrInput
	// Maximum number of retransmissions for fast failover HA messages between peer wireless controllers (3 - 64, default = 10).
	FastFailoverMax pulumi.IntPtrInput
	// Minimum wait time before an AP transitions from secondary controller to primary controller (10 - 86400 sec, default = 10).
	FastFailoverWait pulumi.IntPtrInput
	// Secret key for inter-controller communications.
	InterControllerKey pulumi.StringPtrInput
	// Configure inter-controller mode (disable, l2-roaming, 1+1, default = disable). Valid values: `disable`, `l2-roaming`, `1+1`.
	InterControllerMode pulumi.StringPtrInput
	// Fast failover peer wireless controller list. The structure of `interControllerPeer` block is documented below.
	InterControllerPeers WirelessControllerInterControllerInterControllerPeerArrayInput
	// Configure inter-controller's priority (primary or secondary, default = primary). Valid values: `primary`, `secondary`.
	InterControllerPri pulumi.StringPtrInput
	// Specifies the vdom to which the resource will be applied when the FortiGate unit is running in VDOM mode. Only one vdom can be specified. If you want to inherit the vdom configuration of the provider, please do not set this parameter.
	Vdomparam pulumi.StringPtrInput
}

func (WirelessControllerInterControllerState) ElementType() reflect.Type {
	return reflect.TypeOf((*wirelessControllerInterControllerState)(nil)).Elem()
}

type wirelessControllerInterControllerArgs struct {
	// true or false, set this parameter to true when using dynamic forEach + toset to configure and sort sub-tables, please do not set this parameter when configuring static sub-tables.
	DynamicSortSubtable *string `pulumi:"dynamicSortSubtable"`
	// Maximum number of retransmissions for fast failover HA messages between peer wireless controllers (3 - 64, default = 10).
	FastFailoverMax *int `pulumi:"fastFailoverMax"`
	// Minimum wait time before an AP transitions from secondary controller to primary controller (10 - 86400 sec, default = 10).
	FastFailoverWait *int `pulumi:"fastFailoverWait"`
	// Secret key for inter-controller communications.
	InterControllerKey *string `pulumi:"interControllerKey"`
	// Configure inter-controller mode (disable, l2-roaming, 1+1, default = disable). Valid values: `disable`, `l2-roaming`, `1+1`.
	InterControllerMode *string `pulumi:"interControllerMode"`
	// Fast failover peer wireless controller list. The structure of `interControllerPeer` block is documented below.
	InterControllerPeers []WirelessControllerInterControllerInterControllerPeer `pulumi:"interControllerPeers"`
	// Configure inter-controller's priority (primary or secondary, default = primary). Valid values: `primary`, `secondary`.
	InterControllerPri *string `pulumi:"interControllerPri"`
	// Specifies the vdom to which the resource will be applied when the FortiGate unit is running in VDOM mode. Only one vdom can be specified. If you want to inherit the vdom configuration of the provider, please do not set this parameter.
	Vdomparam *string `pulumi:"vdomparam"`
}

// The set of arguments for constructing a WirelessControllerInterController resource.
type WirelessControllerInterControllerArgs struct {
	// true or false, set this parameter to true when using dynamic forEach + toset to configure and sort sub-tables, please do not set this parameter when configuring static sub-tables.
	DynamicSortSubtable pulumi.StringPtrInput
	// Maximum number of retransmissions for fast failover HA messages between peer wireless controllers (3 - 64, default = 10).
	FastFailoverMax pulumi.IntPtrInput
	// Minimum wait time before an AP transitions from secondary controller to primary controller (10 - 86400 sec, default = 10).
	FastFailoverWait pulumi.IntPtrInput
	// Secret key for inter-controller communications.
	InterControllerKey pulumi.StringPtrInput
	// Configure inter-controller mode (disable, l2-roaming, 1+1, default = disable). Valid values: `disable`, `l2-roaming`, `1+1`.
	InterControllerMode pulumi.StringPtrInput
	// Fast failover peer wireless controller list. The structure of `interControllerPeer` block is documented below.
	InterControllerPeers WirelessControllerInterControllerInterControllerPeerArrayInput
	// Configure inter-controller's priority (primary or secondary, default = primary). Valid values: `primary`, `secondary`.
	InterControllerPri pulumi.StringPtrInput
	// Specifies the vdom to which the resource will be applied when the FortiGate unit is running in VDOM mode. Only one vdom can be specified. If you want to inherit the vdom configuration of the provider, please do not set this parameter.
	Vdomparam pulumi.StringPtrInput
}

func (WirelessControllerInterControllerArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*wirelessControllerInterControllerArgs)(nil)).Elem()
}

type WirelessControllerInterControllerInput interface {
	pulumi.Input

	ToWirelessControllerInterControllerOutput() WirelessControllerInterControllerOutput
	ToWirelessControllerInterControllerOutputWithContext(ctx context.Context) WirelessControllerInterControllerOutput
}

func (*WirelessControllerInterController) ElementType() reflect.Type {
	return reflect.TypeOf((**WirelessControllerInterController)(nil)).Elem()
}

func (i *WirelessControllerInterController) ToWirelessControllerInterControllerOutput() WirelessControllerInterControllerOutput {
	return i.ToWirelessControllerInterControllerOutputWithContext(context.Background())
}

func (i *WirelessControllerInterController) ToWirelessControllerInterControllerOutputWithContext(ctx context.Context) WirelessControllerInterControllerOutput {
	return pulumi.ToOutputWithContext(ctx, i).(WirelessControllerInterControllerOutput)
}

// WirelessControllerInterControllerArrayInput is an input type that accepts WirelessControllerInterControllerArray and WirelessControllerInterControllerArrayOutput values.
// You can construct a concrete instance of `WirelessControllerInterControllerArrayInput` via:
//
//          WirelessControllerInterControllerArray{ WirelessControllerInterControllerArgs{...} }
type WirelessControllerInterControllerArrayInput interface {
	pulumi.Input

	ToWirelessControllerInterControllerArrayOutput() WirelessControllerInterControllerArrayOutput
	ToWirelessControllerInterControllerArrayOutputWithContext(context.Context) WirelessControllerInterControllerArrayOutput
}

type WirelessControllerInterControllerArray []WirelessControllerInterControllerInput

func (WirelessControllerInterControllerArray) ElementType() reflect.Type {
	return reflect.TypeOf((*[]*WirelessControllerInterController)(nil)).Elem()
}

func (i WirelessControllerInterControllerArray) ToWirelessControllerInterControllerArrayOutput() WirelessControllerInterControllerArrayOutput {
	return i.ToWirelessControllerInterControllerArrayOutputWithContext(context.Background())
}

func (i WirelessControllerInterControllerArray) ToWirelessControllerInterControllerArrayOutputWithContext(ctx context.Context) WirelessControllerInterControllerArrayOutput {
	return pulumi.ToOutputWithContext(ctx, i).(WirelessControllerInterControllerArrayOutput)
}

// WirelessControllerInterControllerMapInput is an input type that accepts WirelessControllerInterControllerMap and WirelessControllerInterControllerMapOutput values.
// You can construct a concrete instance of `WirelessControllerInterControllerMapInput` via:
//
//          WirelessControllerInterControllerMap{ "key": WirelessControllerInterControllerArgs{...} }
type WirelessControllerInterControllerMapInput interface {
	pulumi.Input

	ToWirelessControllerInterControllerMapOutput() WirelessControllerInterControllerMapOutput
	ToWirelessControllerInterControllerMapOutputWithContext(context.Context) WirelessControllerInterControllerMapOutput
}

type WirelessControllerInterControllerMap map[string]WirelessControllerInterControllerInput

func (WirelessControllerInterControllerMap) ElementType() reflect.Type {
	return reflect.TypeOf((*map[string]*WirelessControllerInterController)(nil)).Elem()
}

func (i WirelessControllerInterControllerMap) ToWirelessControllerInterControllerMapOutput() WirelessControllerInterControllerMapOutput {
	return i.ToWirelessControllerInterControllerMapOutputWithContext(context.Background())
}

func (i WirelessControllerInterControllerMap) ToWirelessControllerInterControllerMapOutputWithContext(ctx context.Context) WirelessControllerInterControllerMapOutput {
	return pulumi.ToOutputWithContext(ctx, i).(WirelessControllerInterControllerMapOutput)
}

type WirelessControllerInterControllerOutput struct{ *pulumi.OutputState }

func (WirelessControllerInterControllerOutput) ElementType() reflect.Type {
	return reflect.TypeOf((**WirelessControllerInterController)(nil)).Elem()
}

func (o WirelessControllerInterControllerOutput) ToWirelessControllerInterControllerOutput() WirelessControllerInterControllerOutput {
	return o
}

func (o WirelessControllerInterControllerOutput) ToWirelessControllerInterControllerOutputWithContext(ctx context.Context) WirelessControllerInterControllerOutput {
	return o
}

type WirelessControllerInterControllerArrayOutput struct{ *pulumi.OutputState }

func (WirelessControllerInterControllerArrayOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*[]*WirelessControllerInterController)(nil)).Elem()
}

func (o WirelessControllerInterControllerArrayOutput) ToWirelessControllerInterControllerArrayOutput() WirelessControllerInterControllerArrayOutput {
	return o
}

func (o WirelessControllerInterControllerArrayOutput) ToWirelessControllerInterControllerArrayOutputWithContext(ctx context.Context) WirelessControllerInterControllerArrayOutput {
	return o
}

func (o WirelessControllerInterControllerArrayOutput) Index(i pulumi.IntInput) WirelessControllerInterControllerOutput {
	return pulumi.All(o, i).ApplyT(func(vs []interface{}) *WirelessControllerInterController {
		return vs[0].([]*WirelessControllerInterController)[vs[1].(int)]
	}).(WirelessControllerInterControllerOutput)
}

type WirelessControllerInterControllerMapOutput struct{ *pulumi.OutputState }

func (WirelessControllerInterControllerMapOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*map[string]*WirelessControllerInterController)(nil)).Elem()
}

func (o WirelessControllerInterControllerMapOutput) ToWirelessControllerInterControllerMapOutput() WirelessControllerInterControllerMapOutput {
	return o
}

func (o WirelessControllerInterControllerMapOutput) ToWirelessControllerInterControllerMapOutputWithContext(ctx context.Context) WirelessControllerInterControllerMapOutput {
	return o
}

func (o WirelessControllerInterControllerMapOutput) MapIndex(k pulumi.StringInput) WirelessControllerInterControllerOutput {
	return pulumi.All(o, k).ApplyT(func(vs []interface{}) *WirelessControllerInterController {
		return vs[0].(map[string]*WirelessControllerInterController)[vs[1].(string)]
	}).(WirelessControllerInterControllerOutput)
}

func init() {
	pulumi.RegisterInputType(reflect.TypeOf((*WirelessControllerInterControllerInput)(nil)).Elem(), &WirelessControllerInterController{})
	pulumi.RegisterInputType(reflect.TypeOf((*WirelessControllerInterControllerArrayInput)(nil)).Elem(), WirelessControllerInterControllerArray{})
	pulumi.RegisterInputType(reflect.TypeOf((*WirelessControllerInterControllerMapInput)(nil)).Elem(), WirelessControllerInterControllerMap{})
	pulumi.RegisterOutputType(WirelessControllerInterControllerOutput{})
	pulumi.RegisterOutputType(WirelessControllerInterControllerArrayOutput{})
	pulumi.RegisterOutputType(WirelessControllerInterControllerMapOutput{})
}
