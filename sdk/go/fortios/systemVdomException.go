// Code generated by the Pulumi Terraform Bridge (tfgen) Tool DO NOT EDIT.
// *** WARNING: Do not edit by hand unless you're certain you know what you are doing! ***

package fortios

import (
	"context"
	"reflect"

	"errors"
	"github.com/lubyou/pulumi-fortios/sdk/go/fortios/internal"
	"github.com/pulumi/pulumi/sdk/v3/go/pulumi"
	"github.com/pulumi/pulumi/sdk/v3/go/pulumix"
)

type SystemVdomException struct {
	pulumi.CustomResourceState

	DynamicSortSubtable pulumi.StringPtrOutput             `pulumi:"dynamicSortSubtable"`
	Fosid               pulumi.IntOutput                   `pulumi:"fosid"`
	GetAllTables        pulumi.StringPtrOutput             `pulumi:"getAllTables"`
	Object              pulumi.StringOutput                `pulumi:"object"`
	Oid                 pulumi.IntOutput                   `pulumi:"oid"`
	Scope               pulumi.StringOutput                `pulumi:"scope"`
	Vdomparam           pulumi.StringPtrOutput             `pulumi:"vdomparam"`
	Vdoms               SystemVdomExceptionVdomArrayOutput `pulumi:"vdoms"`
}

// NewSystemVdomException registers a new resource with the given unique name, arguments, and options.
func NewSystemVdomException(ctx *pulumi.Context,
	name string, args *SystemVdomExceptionArgs, opts ...pulumi.ResourceOption) (*SystemVdomException, error) {
	if args == nil {
		return nil, errors.New("missing one or more required arguments")
	}

	if args.Object == nil {
		return nil, errors.New("invalid value for required argument 'Object'")
	}
	opts = internal.PkgResourceDefaultOpts(opts)
	var resource SystemVdomException
	err := ctx.RegisterResource("fortios:index/systemVdomException:SystemVdomException", name, args, &resource, opts...)
	if err != nil {
		return nil, err
	}
	return &resource, nil
}

// GetSystemVdomException gets an existing SystemVdomException resource's state with the given name, ID, and optional
// state properties that are used to uniquely qualify the lookup (nil if not required).
func GetSystemVdomException(ctx *pulumi.Context,
	name string, id pulumi.IDInput, state *SystemVdomExceptionState, opts ...pulumi.ResourceOption) (*SystemVdomException, error) {
	var resource SystemVdomException
	err := ctx.ReadResource("fortios:index/systemVdomException:SystemVdomException", name, id, state, &resource, opts...)
	if err != nil {
		return nil, err
	}
	return &resource, nil
}

// Input properties used for looking up and filtering SystemVdomException resources.
type systemVdomExceptionState struct {
	DynamicSortSubtable *string                   `pulumi:"dynamicSortSubtable"`
	Fosid               *int                      `pulumi:"fosid"`
	GetAllTables        *string                   `pulumi:"getAllTables"`
	Object              *string                   `pulumi:"object"`
	Oid                 *int                      `pulumi:"oid"`
	Scope               *string                   `pulumi:"scope"`
	Vdomparam           *string                   `pulumi:"vdomparam"`
	Vdoms               []SystemVdomExceptionVdom `pulumi:"vdoms"`
}

type SystemVdomExceptionState struct {
	DynamicSortSubtable pulumi.StringPtrInput
	Fosid               pulumi.IntPtrInput
	GetAllTables        pulumi.StringPtrInput
	Object              pulumi.StringPtrInput
	Oid                 pulumi.IntPtrInput
	Scope               pulumi.StringPtrInput
	Vdomparam           pulumi.StringPtrInput
	Vdoms               SystemVdomExceptionVdomArrayInput
}

func (SystemVdomExceptionState) ElementType() reflect.Type {
	return reflect.TypeOf((*systemVdomExceptionState)(nil)).Elem()
}

type systemVdomExceptionArgs struct {
	DynamicSortSubtable *string                   `pulumi:"dynamicSortSubtable"`
	Fosid               *int                      `pulumi:"fosid"`
	GetAllTables        *string                   `pulumi:"getAllTables"`
	Object              string                    `pulumi:"object"`
	Oid                 *int                      `pulumi:"oid"`
	Scope               *string                   `pulumi:"scope"`
	Vdomparam           *string                   `pulumi:"vdomparam"`
	Vdoms               []SystemVdomExceptionVdom `pulumi:"vdoms"`
}

// The set of arguments for constructing a SystemVdomException resource.
type SystemVdomExceptionArgs struct {
	DynamicSortSubtable pulumi.StringPtrInput
	Fosid               pulumi.IntPtrInput
	GetAllTables        pulumi.StringPtrInput
	Object              pulumi.StringInput
	Oid                 pulumi.IntPtrInput
	Scope               pulumi.StringPtrInput
	Vdomparam           pulumi.StringPtrInput
	Vdoms               SystemVdomExceptionVdomArrayInput
}

func (SystemVdomExceptionArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*systemVdomExceptionArgs)(nil)).Elem()
}

type SystemVdomExceptionInput interface {
	pulumi.Input

	ToSystemVdomExceptionOutput() SystemVdomExceptionOutput
	ToSystemVdomExceptionOutputWithContext(ctx context.Context) SystemVdomExceptionOutput
}

func (*SystemVdomException) ElementType() reflect.Type {
	return reflect.TypeOf((**SystemVdomException)(nil)).Elem()
}

func (i *SystemVdomException) ToSystemVdomExceptionOutput() SystemVdomExceptionOutput {
	return i.ToSystemVdomExceptionOutputWithContext(context.Background())
}

func (i *SystemVdomException) ToSystemVdomExceptionOutputWithContext(ctx context.Context) SystemVdomExceptionOutput {
	return pulumi.ToOutputWithContext(ctx, i).(SystemVdomExceptionOutput)
}

func (i *SystemVdomException) ToOutput(ctx context.Context) pulumix.Output[*SystemVdomException] {
	return pulumix.Output[*SystemVdomException]{
		OutputState: i.ToSystemVdomExceptionOutputWithContext(ctx).OutputState,
	}
}

// SystemVdomExceptionArrayInput is an input type that accepts SystemVdomExceptionArray and SystemVdomExceptionArrayOutput values.
// You can construct a concrete instance of `SystemVdomExceptionArrayInput` via:
//
//	SystemVdomExceptionArray{ SystemVdomExceptionArgs{...} }
type SystemVdomExceptionArrayInput interface {
	pulumi.Input

	ToSystemVdomExceptionArrayOutput() SystemVdomExceptionArrayOutput
	ToSystemVdomExceptionArrayOutputWithContext(context.Context) SystemVdomExceptionArrayOutput
}

type SystemVdomExceptionArray []SystemVdomExceptionInput

func (SystemVdomExceptionArray) ElementType() reflect.Type {
	return reflect.TypeOf((*[]*SystemVdomException)(nil)).Elem()
}

func (i SystemVdomExceptionArray) ToSystemVdomExceptionArrayOutput() SystemVdomExceptionArrayOutput {
	return i.ToSystemVdomExceptionArrayOutputWithContext(context.Background())
}

func (i SystemVdomExceptionArray) ToSystemVdomExceptionArrayOutputWithContext(ctx context.Context) SystemVdomExceptionArrayOutput {
	return pulumi.ToOutputWithContext(ctx, i).(SystemVdomExceptionArrayOutput)
}

func (i SystemVdomExceptionArray) ToOutput(ctx context.Context) pulumix.Output[[]*SystemVdomException] {
	return pulumix.Output[[]*SystemVdomException]{
		OutputState: i.ToSystemVdomExceptionArrayOutputWithContext(ctx).OutputState,
	}
}

// SystemVdomExceptionMapInput is an input type that accepts SystemVdomExceptionMap and SystemVdomExceptionMapOutput values.
// You can construct a concrete instance of `SystemVdomExceptionMapInput` via:
//
//	SystemVdomExceptionMap{ "key": SystemVdomExceptionArgs{...} }
type SystemVdomExceptionMapInput interface {
	pulumi.Input

	ToSystemVdomExceptionMapOutput() SystemVdomExceptionMapOutput
	ToSystemVdomExceptionMapOutputWithContext(context.Context) SystemVdomExceptionMapOutput
}

type SystemVdomExceptionMap map[string]SystemVdomExceptionInput

func (SystemVdomExceptionMap) ElementType() reflect.Type {
	return reflect.TypeOf((*map[string]*SystemVdomException)(nil)).Elem()
}

func (i SystemVdomExceptionMap) ToSystemVdomExceptionMapOutput() SystemVdomExceptionMapOutput {
	return i.ToSystemVdomExceptionMapOutputWithContext(context.Background())
}

func (i SystemVdomExceptionMap) ToSystemVdomExceptionMapOutputWithContext(ctx context.Context) SystemVdomExceptionMapOutput {
	return pulumi.ToOutputWithContext(ctx, i).(SystemVdomExceptionMapOutput)
}

func (i SystemVdomExceptionMap) ToOutput(ctx context.Context) pulumix.Output[map[string]*SystemVdomException] {
	return pulumix.Output[map[string]*SystemVdomException]{
		OutputState: i.ToSystemVdomExceptionMapOutputWithContext(ctx).OutputState,
	}
}

type SystemVdomExceptionOutput struct{ *pulumi.OutputState }

func (SystemVdomExceptionOutput) ElementType() reflect.Type {
	return reflect.TypeOf((**SystemVdomException)(nil)).Elem()
}

func (o SystemVdomExceptionOutput) ToSystemVdomExceptionOutput() SystemVdomExceptionOutput {
	return o
}

func (o SystemVdomExceptionOutput) ToSystemVdomExceptionOutputWithContext(ctx context.Context) SystemVdomExceptionOutput {
	return o
}

func (o SystemVdomExceptionOutput) ToOutput(ctx context.Context) pulumix.Output[*SystemVdomException] {
	return pulumix.Output[*SystemVdomException]{
		OutputState: o.OutputState,
	}
}

func (o SystemVdomExceptionOutput) DynamicSortSubtable() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *SystemVdomException) pulumi.StringPtrOutput { return v.DynamicSortSubtable }).(pulumi.StringPtrOutput)
}

func (o SystemVdomExceptionOutput) Fosid() pulumi.IntOutput {
	return o.ApplyT(func(v *SystemVdomException) pulumi.IntOutput { return v.Fosid }).(pulumi.IntOutput)
}

func (o SystemVdomExceptionOutput) GetAllTables() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *SystemVdomException) pulumi.StringPtrOutput { return v.GetAllTables }).(pulumi.StringPtrOutput)
}

func (o SystemVdomExceptionOutput) Object() pulumi.StringOutput {
	return o.ApplyT(func(v *SystemVdomException) pulumi.StringOutput { return v.Object }).(pulumi.StringOutput)
}

func (o SystemVdomExceptionOutput) Oid() pulumi.IntOutput {
	return o.ApplyT(func(v *SystemVdomException) pulumi.IntOutput { return v.Oid }).(pulumi.IntOutput)
}

func (o SystemVdomExceptionOutput) Scope() pulumi.StringOutput {
	return o.ApplyT(func(v *SystemVdomException) pulumi.StringOutput { return v.Scope }).(pulumi.StringOutput)
}

func (o SystemVdomExceptionOutput) Vdomparam() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *SystemVdomException) pulumi.StringPtrOutput { return v.Vdomparam }).(pulumi.StringPtrOutput)
}

func (o SystemVdomExceptionOutput) Vdoms() SystemVdomExceptionVdomArrayOutput {
	return o.ApplyT(func(v *SystemVdomException) SystemVdomExceptionVdomArrayOutput { return v.Vdoms }).(SystemVdomExceptionVdomArrayOutput)
}

type SystemVdomExceptionArrayOutput struct{ *pulumi.OutputState }

func (SystemVdomExceptionArrayOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*[]*SystemVdomException)(nil)).Elem()
}

func (o SystemVdomExceptionArrayOutput) ToSystemVdomExceptionArrayOutput() SystemVdomExceptionArrayOutput {
	return o
}

func (o SystemVdomExceptionArrayOutput) ToSystemVdomExceptionArrayOutputWithContext(ctx context.Context) SystemVdomExceptionArrayOutput {
	return o
}

func (o SystemVdomExceptionArrayOutput) ToOutput(ctx context.Context) pulumix.Output[[]*SystemVdomException] {
	return pulumix.Output[[]*SystemVdomException]{
		OutputState: o.OutputState,
	}
}

func (o SystemVdomExceptionArrayOutput) Index(i pulumi.IntInput) SystemVdomExceptionOutput {
	return pulumi.All(o, i).ApplyT(func(vs []interface{}) *SystemVdomException {
		return vs[0].([]*SystemVdomException)[vs[1].(int)]
	}).(SystemVdomExceptionOutput)
}

type SystemVdomExceptionMapOutput struct{ *pulumi.OutputState }

func (SystemVdomExceptionMapOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*map[string]*SystemVdomException)(nil)).Elem()
}

func (o SystemVdomExceptionMapOutput) ToSystemVdomExceptionMapOutput() SystemVdomExceptionMapOutput {
	return o
}

func (o SystemVdomExceptionMapOutput) ToSystemVdomExceptionMapOutputWithContext(ctx context.Context) SystemVdomExceptionMapOutput {
	return o
}

func (o SystemVdomExceptionMapOutput) ToOutput(ctx context.Context) pulumix.Output[map[string]*SystemVdomException] {
	return pulumix.Output[map[string]*SystemVdomException]{
		OutputState: o.OutputState,
	}
}

func (o SystemVdomExceptionMapOutput) MapIndex(k pulumi.StringInput) SystemVdomExceptionOutput {
	return pulumi.All(o, k).ApplyT(func(vs []interface{}) *SystemVdomException {
		return vs[0].(map[string]*SystemVdomException)[vs[1].(string)]
	}).(SystemVdomExceptionOutput)
}

func init() {
	pulumi.RegisterInputType(reflect.TypeOf((*SystemVdomExceptionInput)(nil)).Elem(), &SystemVdomException{})
	pulumi.RegisterInputType(reflect.TypeOf((*SystemVdomExceptionArrayInput)(nil)).Elem(), SystemVdomExceptionArray{})
	pulumi.RegisterInputType(reflect.TypeOf((*SystemVdomExceptionMapInput)(nil)).Elem(), SystemVdomExceptionMap{})
	pulumi.RegisterOutputType(SystemVdomExceptionOutput{})
	pulumi.RegisterOutputType(SystemVdomExceptionArrayOutput{})
	pulumi.RegisterOutputType(SystemVdomExceptionMapOutput{})
}
