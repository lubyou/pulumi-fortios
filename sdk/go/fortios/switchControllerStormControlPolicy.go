// *** WARNING: this file was generated by the Pulumi Terraform Bridge (tfgen) Tool. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

package fortios

import (
	"context"
	"reflect"

	"github.com/pulumi/pulumi/sdk/v3/go/pulumi"
)

// Configure FortiSwitch storm control policy to be applied on managed-switch ports.
//
// ## Import
//
// SwitchController StormControlPolicy can be imported using any of these accepted formats$ export "FORTIOS_IMPORT_TABLE"="true"
//
// ```sh
//  $ pulumi import fortios:index/switchControllerStormControlPolicy:SwitchControllerStormControlPolicy labelname {{name}}
// ```
//
//  $ unset "FORTIOS_IMPORT_TABLE"
type SwitchControllerStormControlPolicy struct {
	pulumi.CustomResourceState

	// Enable/disable storm control to drop/allow broadcast traffic in override mode. Valid values: `enable`, `disable`.
	Broadcast pulumi.StringOutput `pulumi:"broadcast"`
	// Description of the storm control policy.
	Description pulumi.StringOutput `pulumi:"description"`
	// Storm control policy name.
	Name pulumi.StringOutput `pulumi:"name"`
	// Threshold rate in packets per second at which storm traffic is controlled in override mode (default=500, 0 to drop all).
	Rate pulumi.IntOutput `pulumi:"rate"`
	// Set Storm control mode. Valid values: `global`, `override`, `disabled`.
	StormControlMode pulumi.StringOutput `pulumi:"stormControlMode"`
	// Enable/disable storm control to drop/allow unknown multicast traffic in override mode. Valid values: `enable`, `disable`.
	UnknownMulticast pulumi.StringOutput `pulumi:"unknownMulticast"`
	// Enable/disable storm control to drop/allow unknown unicast traffic in override mode. Valid values: `enable`, `disable`.
	UnknownUnicast pulumi.StringOutput `pulumi:"unknownUnicast"`
	// Specifies the vdom to which the resource will be applied when the FortiGate unit is running in VDOM mode. Only one vdom can be specified. If you want to inherit the vdom configuration of the provider, please do not set this parameter.
	Vdomparam pulumi.StringPtrOutput `pulumi:"vdomparam"`
}

// NewSwitchControllerStormControlPolicy registers a new resource with the given unique name, arguments, and options.
func NewSwitchControllerStormControlPolicy(ctx *pulumi.Context,
	name string, args *SwitchControllerStormControlPolicyArgs, opts ...pulumi.ResourceOption) (*SwitchControllerStormControlPolicy, error) {
	if args == nil {
		args = &SwitchControllerStormControlPolicyArgs{}
	}

	var resource SwitchControllerStormControlPolicy
	err := ctx.RegisterResource("fortios:index/switchControllerStormControlPolicy:SwitchControllerStormControlPolicy", name, args, &resource, opts...)
	if err != nil {
		return nil, err
	}
	return &resource, nil
}

// GetSwitchControllerStormControlPolicy gets an existing SwitchControllerStormControlPolicy resource's state with the given name, ID, and optional
// state properties that are used to uniquely qualify the lookup (nil if not required).
func GetSwitchControllerStormControlPolicy(ctx *pulumi.Context,
	name string, id pulumi.IDInput, state *SwitchControllerStormControlPolicyState, opts ...pulumi.ResourceOption) (*SwitchControllerStormControlPolicy, error) {
	var resource SwitchControllerStormControlPolicy
	err := ctx.ReadResource("fortios:index/switchControllerStormControlPolicy:SwitchControllerStormControlPolicy", name, id, state, &resource, opts...)
	if err != nil {
		return nil, err
	}
	return &resource, nil
}

// Input properties used for looking up and filtering SwitchControllerStormControlPolicy resources.
type switchControllerStormControlPolicyState struct {
	// Enable/disable storm control to drop/allow broadcast traffic in override mode. Valid values: `enable`, `disable`.
	Broadcast *string `pulumi:"broadcast"`
	// Description of the storm control policy.
	Description *string `pulumi:"description"`
	// Storm control policy name.
	Name *string `pulumi:"name"`
	// Threshold rate in packets per second at which storm traffic is controlled in override mode (default=500, 0 to drop all).
	Rate *int `pulumi:"rate"`
	// Set Storm control mode. Valid values: `global`, `override`, `disabled`.
	StormControlMode *string `pulumi:"stormControlMode"`
	// Enable/disable storm control to drop/allow unknown multicast traffic in override mode. Valid values: `enable`, `disable`.
	UnknownMulticast *string `pulumi:"unknownMulticast"`
	// Enable/disable storm control to drop/allow unknown unicast traffic in override mode. Valid values: `enable`, `disable`.
	UnknownUnicast *string `pulumi:"unknownUnicast"`
	// Specifies the vdom to which the resource will be applied when the FortiGate unit is running in VDOM mode. Only one vdom can be specified. If you want to inherit the vdom configuration of the provider, please do not set this parameter.
	Vdomparam *string `pulumi:"vdomparam"`
}

type SwitchControllerStormControlPolicyState struct {
	// Enable/disable storm control to drop/allow broadcast traffic in override mode. Valid values: `enable`, `disable`.
	Broadcast pulumi.StringPtrInput
	// Description of the storm control policy.
	Description pulumi.StringPtrInput
	// Storm control policy name.
	Name pulumi.StringPtrInput
	// Threshold rate in packets per second at which storm traffic is controlled in override mode (default=500, 0 to drop all).
	Rate pulumi.IntPtrInput
	// Set Storm control mode. Valid values: `global`, `override`, `disabled`.
	StormControlMode pulumi.StringPtrInput
	// Enable/disable storm control to drop/allow unknown multicast traffic in override mode. Valid values: `enable`, `disable`.
	UnknownMulticast pulumi.StringPtrInput
	// Enable/disable storm control to drop/allow unknown unicast traffic in override mode. Valid values: `enable`, `disable`.
	UnknownUnicast pulumi.StringPtrInput
	// Specifies the vdom to which the resource will be applied when the FortiGate unit is running in VDOM mode. Only one vdom can be specified. If you want to inherit the vdom configuration of the provider, please do not set this parameter.
	Vdomparam pulumi.StringPtrInput
}

func (SwitchControllerStormControlPolicyState) ElementType() reflect.Type {
	return reflect.TypeOf((*switchControllerStormControlPolicyState)(nil)).Elem()
}

type switchControllerStormControlPolicyArgs struct {
	// Enable/disable storm control to drop/allow broadcast traffic in override mode. Valid values: `enable`, `disable`.
	Broadcast *string `pulumi:"broadcast"`
	// Description of the storm control policy.
	Description *string `pulumi:"description"`
	// Storm control policy name.
	Name *string `pulumi:"name"`
	// Threshold rate in packets per second at which storm traffic is controlled in override mode (default=500, 0 to drop all).
	Rate *int `pulumi:"rate"`
	// Set Storm control mode. Valid values: `global`, `override`, `disabled`.
	StormControlMode *string `pulumi:"stormControlMode"`
	// Enable/disable storm control to drop/allow unknown multicast traffic in override mode. Valid values: `enable`, `disable`.
	UnknownMulticast *string `pulumi:"unknownMulticast"`
	// Enable/disable storm control to drop/allow unknown unicast traffic in override mode. Valid values: `enable`, `disable`.
	UnknownUnicast *string `pulumi:"unknownUnicast"`
	// Specifies the vdom to which the resource will be applied when the FortiGate unit is running in VDOM mode. Only one vdom can be specified. If you want to inherit the vdom configuration of the provider, please do not set this parameter.
	Vdomparam *string `pulumi:"vdomparam"`
}

// The set of arguments for constructing a SwitchControllerStormControlPolicy resource.
type SwitchControllerStormControlPolicyArgs struct {
	// Enable/disable storm control to drop/allow broadcast traffic in override mode. Valid values: `enable`, `disable`.
	Broadcast pulumi.StringPtrInput
	// Description of the storm control policy.
	Description pulumi.StringPtrInput
	// Storm control policy name.
	Name pulumi.StringPtrInput
	// Threshold rate in packets per second at which storm traffic is controlled in override mode (default=500, 0 to drop all).
	Rate pulumi.IntPtrInput
	// Set Storm control mode. Valid values: `global`, `override`, `disabled`.
	StormControlMode pulumi.StringPtrInput
	// Enable/disable storm control to drop/allow unknown multicast traffic in override mode. Valid values: `enable`, `disable`.
	UnknownMulticast pulumi.StringPtrInput
	// Enable/disable storm control to drop/allow unknown unicast traffic in override mode. Valid values: `enable`, `disable`.
	UnknownUnicast pulumi.StringPtrInput
	// Specifies the vdom to which the resource will be applied when the FortiGate unit is running in VDOM mode. Only one vdom can be specified. If you want to inherit the vdom configuration of the provider, please do not set this parameter.
	Vdomparam pulumi.StringPtrInput
}

func (SwitchControllerStormControlPolicyArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*switchControllerStormControlPolicyArgs)(nil)).Elem()
}

type SwitchControllerStormControlPolicyInput interface {
	pulumi.Input

	ToSwitchControllerStormControlPolicyOutput() SwitchControllerStormControlPolicyOutput
	ToSwitchControllerStormControlPolicyOutputWithContext(ctx context.Context) SwitchControllerStormControlPolicyOutput
}

func (*SwitchControllerStormControlPolicy) ElementType() reflect.Type {
	return reflect.TypeOf((*SwitchControllerStormControlPolicy)(nil))
}

func (i *SwitchControllerStormControlPolicy) ToSwitchControllerStormControlPolicyOutput() SwitchControllerStormControlPolicyOutput {
	return i.ToSwitchControllerStormControlPolicyOutputWithContext(context.Background())
}

func (i *SwitchControllerStormControlPolicy) ToSwitchControllerStormControlPolicyOutputWithContext(ctx context.Context) SwitchControllerStormControlPolicyOutput {
	return pulumi.ToOutputWithContext(ctx, i).(SwitchControllerStormControlPolicyOutput)
}

func (i *SwitchControllerStormControlPolicy) ToSwitchControllerStormControlPolicyPtrOutput() SwitchControllerStormControlPolicyPtrOutput {
	return i.ToSwitchControllerStormControlPolicyPtrOutputWithContext(context.Background())
}

func (i *SwitchControllerStormControlPolicy) ToSwitchControllerStormControlPolicyPtrOutputWithContext(ctx context.Context) SwitchControllerStormControlPolicyPtrOutput {
	return pulumi.ToOutputWithContext(ctx, i).(SwitchControllerStormControlPolicyPtrOutput)
}

type SwitchControllerStormControlPolicyPtrInput interface {
	pulumi.Input

	ToSwitchControllerStormControlPolicyPtrOutput() SwitchControllerStormControlPolicyPtrOutput
	ToSwitchControllerStormControlPolicyPtrOutputWithContext(ctx context.Context) SwitchControllerStormControlPolicyPtrOutput
}

type switchControllerStormControlPolicyPtrType SwitchControllerStormControlPolicyArgs

func (*switchControllerStormControlPolicyPtrType) ElementType() reflect.Type {
	return reflect.TypeOf((**SwitchControllerStormControlPolicy)(nil))
}

func (i *switchControllerStormControlPolicyPtrType) ToSwitchControllerStormControlPolicyPtrOutput() SwitchControllerStormControlPolicyPtrOutput {
	return i.ToSwitchControllerStormControlPolicyPtrOutputWithContext(context.Background())
}

func (i *switchControllerStormControlPolicyPtrType) ToSwitchControllerStormControlPolicyPtrOutputWithContext(ctx context.Context) SwitchControllerStormControlPolicyPtrOutput {
	return pulumi.ToOutputWithContext(ctx, i).(SwitchControllerStormControlPolicyPtrOutput)
}

// SwitchControllerStormControlPolicyArrayInput is an input type that accepts SwitchControllerStormControlPolicyArray and SwitchControllerStormControlPolicyArrayOutput values.
// You can construct a concrete instance of `SwitchControllerStormControlPolicyArrayInput` via:
//
//          SwitchControllerStormControlPolicyArray{ SwitchControllerStormControlPolicyArgs{...} }
type SwitchControllerStormControlPolicyArrayInput interface {
	pulumi.Input

	ToSwitchControllerStormControlPolicyArrayOutput() SwitchControllerStormControlPolicyArrayOutput
	ToSwitchControllerStormControlPolicyArrayOutputWithContext(context.Context) SwitchControllerStormControlPolicyArrayOutput
}

type SwitchControllerStormControlPolicyArray []SwitchControllerStormControlPolicyInput

func (SwitchControllerStormControlPolicyArray) ElementType() reflect.Type {
	return reflect.TypeOf(([]*SwitchControllerStormControlPolicy)(nil))
}

func (i SwitchControllerStormControlPolicyArray) ToSwitchControllerStormControlPolicyArrayOutput() SwitchControllerStormControlPolicyArrayOutput {
	return i.ToSwitchControllerStormControlPolicyArrayOutputWithContext(context.Background())
}

func (i SwitchControllerStormControlPolicyArray) ToSwitchControllerStormControlPolicyArrayOutputWithContext(ctx context.Context) SwitchControllerStormControlPolicyArrayOutput {
	return pulumi.ToOutputWithContext(ctx, i).(SwitchControllerStormControlPolicyArrayOutput)
}

// SwitchControllerStormControlPolicyMapInput is an input type that accepts SwitchControllerStormControlPolicyMap and SwitchControllerStormControlPolicyMapOutput values.
// You can construct a concrete instance of `SwitchControllerStormControlPolicyMapInput` via:
//
//          SwitchControllerStormControlPolicyMap{ "key": SwitchControllerStormControlPolicyArgs{...} }
type SwitchControllerStormControlPolicyMapInput interface {
	pulumi.Input

	ToSwitchControllerStormControlPolicyMapOutput() SwitchControllerStormControlPolicyMapOutput
	ToSwitchControllerStormControlPolicyMapOutputWithContext(context.Context) SwitchControllerStormControlPolicyMapOutput
}

type SwitchControllerStormControlPolicyMap map[string]SwitchControllerStormControlPolicyInput

func (SwitchControllerStormControlPolicyMap) ElementType() reflect.Type {
	return reflect.TypeOf((map[string]*SwitchControllerStormControlPolicy)(nil))
}

func (i SwitchControllerStormControlPolicyMap) ToSwitchControllerStormControlPolicyMapOutput() SwitchControllerStormControlPolicyMapOutput {
	return i.ToSwitchControllerStormControlPolicyMapOutputWithContext(context.Background())
}

func (i SwitchControllerStormControlPolicyMap) ToSwitchControllerStormControlPolicyMapOutputWithContext(ctx context.Context) SwitchControllerStormControlPolicyMapOutput {
	return pulumi.ToOutputWithContext(ctx, i).(SwitchControllerStormControlPolicyMapOutput)
}

type SwitchControllerStormControlPolicyOutput struct {
	*pulumi.OutputState
}

func (SwitchControllerStormControlPolicyOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*SwitchControllerStormControlPolicy)(nil))
}

func (o SwitchControllerStormControlPolicyOutput) ToSwitchControllerStormControlPolicyOutput() SwitchControllerStormControlPolicyOutput {
	return o
}

func (o SwitchControllerStormControlPolicyOutput) ToSwitchControllerStormControlPolicyOutputWithContext(ctx context.Context) SwitchControllerStormControlPolicyOutput {
	return o
}

func (o SwitchControllerStormControlPolicyOutput) ToSwitchControllerStormControlPolicyPtrOutput() SwitchControllerStormControlPolicyPtrOutput {
	return o.ToSwitchControllerStormControlPolicyPtrOutputWithContext(context.Background())
}

func (o SwitchControllerStormControlPolicyOutput) ToSwitchControllerStormControlPolicyPtrOutputWithContext(ctx context.Context) SwitchControllerStormControlPolicyPtrOutput {
	return o.ApplyT(func(v SwitchControllerStormControlPolicy) *SwitchControllerStormControlPolicy {
		return &v
	}).(SwitchControllerStormControlPolicyPtrOutput)
}

type SwitchControllerStormControlPolicyPtrOutput struct {
	*pulumi.OutputState
}

func (SwitchControllerStormControlPolicyPtrOutput) ElementType() reflect.Type {
	return reflect.TypeOf((**SwitchControllerStormControlPolicy)(nil))
}

func (o SwitchControllerStormControlPolicyPtrOutput) ToSwitchControllerStormControlPolicyPtrOutput() SwitchControllerStormControlPolicyPtrOutput {
	return o
}

func (o SwitchControllerStormControlPolicyPtrOutput) ToSwitchControllerStormControlPolicyPtrOutputWithContext(ctx context.Context) SwitchControllerStormControlPolicyPtrOutput {
	return o
}

type SwitchControllerStormControlPolicyArrayOutput struct{ *pulumi.OutputState }

func (SwitchControllerStormControlPolicyArrayOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*[]SwitchControllerStormControlPolicy)(nil))
}

func (o SwitchControllerStormControlPolicyArrayOutput) ToSwitchControllerStormControlPolicyArrayOutput() SwitchControllerStormControlPolicyArrayOutput {
	return o
}

func (o SwitchControllerStormControlPolicyArrayOutput) ToSwitchControllerStormControlPolicyArrayOutputWithContext(ctx context.Context) SwitchControllerStormControlPolicyArrayOutput {
	return o
}

func (o SwitchControllerStormControlPolicyArrayOutput) Index(i pulumi.IntInput) SwitchControllerStormControlPolicyOutput {
	return pulumi.All(o, i).ApplyT(func(vs []interface{}) SwitchControllerStormControlPolicy {
		return vs[0].([]SwitchControllerStormControlPolicy)[vs[1].(int)]
	}).(SwitchControllerStormControlPolicyOutput)
}

type SwitchControllerStormControlPolicyMapOutput struct{ *pulumi.OutputState }

func (SwitchControllerStormControlPolicyMapOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*map[string]SwitchControllerStormControlPolicy)(nil))
}

func (o SwitchControllerStormControlPolicyMapOutput) ToSwitchControllerStormControlPolicyMapOutput() SwitchControllerStormControlPolicyMapOutput {
	return o
}

func (o SwitchControllerStormControlPolicyMapOutput) ToSwitchControllerStormControlPolicyMapOutputWithContext(ctx context.Context) SwitchControllerStormControlPolicyMapOutput {
	return o
}

func (o SwitchControllerStormControlPolicyMapOutput) MapIndex(k pulumi.StringInput) SwitchControllerStormControlPolicyOutput {
	return pulumi.All(o, k).ApplyT(func(vs []interface{}) SwitchControllerStormControlPolicy {
		return vs[0].(map[string]SwitchControllerStormControlPolicy)[vs[1].(string)]
	}).(SwitchControllerStormControlPolicyOutput)
}

func init() {
	pulumi.RegisterOutputType(SwitchControllerStormControlPolicyOutput{})
	pulumi.RegisterOutputType(SwitchControllerStormControlPolicyPtrOutput{})
	pulumi.RegisterOutputType(SwitchControllerStormControlPolicyArrayOutput{})
	pulumi.RegisterOutputType(SwitchControllerStormControlPolicyMapOutput{})
}
