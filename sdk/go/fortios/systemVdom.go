// Code generated by the Pulumi Terraform Bridge (tfgen) Tool DO NOT EDIT.
// *** WARNING: Do not edit by hand unless you're certain you know what you are doing! ***

package fortios

import (
	"context"
	"reflect"

	"github.com/lubyou/pulumi-fortios/sdk/go/fortios/internal"
	"github.com/pulumi/pulumi/sdk/v3/go/pulumi"
	"github.com/pulumi/pulumi/sdk/v3/go/pulumix"
)

type SystemVdom struct {
	pulumi.CustomResourceState

	Flag       pulumi.IntOutput       `pulumi:"flag"`
	Name       pulumi.StringOutput    `pulumi:"name"`
	ShortName  pulumi.StringOutput    `pulumi:"shortName"`
	Temporary  pulumi.IntOutput       `pulumi:"temporary"`
	VclusterId pulumi.IntOutput       `pulumi:"vclusterId"`
	Vdomparam  pulumi.StringPtrOutput `pulumi:"vdomparam"`
}

// NewSystemVdom registers a new resource with the given unique name, arguments, and options.
func NewSystemVdom(ctx *pulumi.Context,
	name string, args *SystemVdomArgs, opts ...pulumi.ResourceOption) (*SystemVdom, error) {
	if args == nil {
		args = &SystemVdomArgs{}
	}

	opts = internal.PkgResourceDefaultOpts(opts)
	var resource SystemVdom
	err := ctx.RegisterResource("fortios:index/systemVdom:SystemVdom", name, args, &resource, opts...)
	if err != nil {
		return nil, err
	}
	return &resource, nil
}

// GetSystemVdom gets an existing SystemVdom resource's state with the given name, ID, and optional
// state properties that are used to uniquely qualify the lookup (nil if not required).
func GetSystemVdom(ctx *pulumi.Context,
	name string, id pulumi.IDInput, state *SystemVdomState, opts ...pulumi.ResourceOption) (*SystemVdom, error) {
	var resource SystemVdom
	err := ctx.ReadResource("fortios:index/systemVdom:SystemVdom", name, id, state, &resource, opts...)
	if err != nil {
		return nil, err
	}
	return &resource, nil
}

// Input properties used for looking up and filtering SystemVdom resources.
type systemVdomState struct {
	Flag       *int    `pulumi:"flag"`
	Name       *string `pulumi:"name"`
	ShortName  *string `pulumi:"shortName"`
	Temporary  *int    `pulumi:"temporary"`
	VclusterId *int    `pulumi:"vclusterId"`
	Vdomparam  *string `pulumi:"vdomparam"`
}

type SystemVdomState struct {
	Flag       pulumi.IntPtrInput
	Name       pulumi.StringPtrInput
	ShortName  pulumi.StringPtrInput
	Temporary  pulumi.IntPtrInput
	VclusterId pulumi.IntPtrInput
	Vdomparam  pulumi.StringPtrInput
}

func (SystemVdomState) ElementType() reflect.Type {
	return reflect.TypeOf((*systemVdomState)(nil)).Elem()
}

type systemVdomArgs struct {
	Flag       *int    `pulumi:"flag"`
	Name       *string `pulumi:"name"`
	ShortName  *string `pulumi:"shortName"`
	Temporary  *int    `pulumi:"temporary"`
	VclusterId *int    `pulumi:"vclusterId"`
	Vdomparam  *string `pulumi:"vdomparam"`
}

// The set of arguments for constructing a SystemVdom resource.
type SystemVdomArgs struct {
	Flag       pulumi.IntPtrInput
	Name       pulumi.StringPtrInput
	ShortName  pulumi.StringPtrInput
	Temporary  pulumi.IntPtrInput
	VclusterId pulumi.IntPtrInput
	Vdomparam  pulumi.StringPtrInput
}

func (SystemVdomArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*systemVdomArgs)(nil)).Elem()
}

type SystemVdomInput interface {
	pulumi.Input

	ToSystemVdomOutput() SystemVdomOutput
	ToSystemVdomOutputWithContext(ctx context.Context) SystemVdomOutput
}

func (*SystemVdom) ElementType() reflect.Type {
	return reflect.TypeOf((**SystemVdom)(nil)).Elem()
}

func (i *SystemVdom) ToSystemVdomOutput() SystemVdomOutput {
	return i.ToSystemVdomOutputWithContext(context.Background())
}

func (i *SystemVdom) ToSystemVdomOutputWithContext(ctx context.Context) SystemVdomOutput {
	return pulumi.ToOutputWithContext(ctx, i).(SystemVdomOutput)
}

func (i *SystemVdom) ToOutput(ctx context.Context) pulumix.Output[*SystemVdom] {
	return pulumix.Output[*SystemVdom]{
		OutputState: i.ToSystemVdomOutputWithContext(ctx).OutputState,
	}
}

// SystemVdomArrayInput is an input type that accepts SystemVdomArray and SystemVdomArrayOutput values.
// You can construct a concrete instance of `SystemVdomArrayInput` via:
//
//	SystemVdomArray{ SystemVdomArgs{...} }
type SystemVdomArrayInput interface {
	pulumi.Input

	ToSystemVdomArrayOutput() SystemVdomArrayOutput
	ToSystemVdomArrayOutputWithContext(context.Context) SystemVdomArrayOutput
}

type SystemVdomArray []SystemVdomInput

func (SystemVdomArray) ElementType() reflect.Type {
	return reflect.TypeOf((*[]*SystemVdom)(nil)).Elem()
}

func (i SystemVdomArray) ToSystemVdomArrayOutput() SystemVdomArrayOutput {
	return i.ToSystemVdomArrayOutputWithContext(context.Background())
}

func (i SystemVdomArray) ToSystemVdomArrayOutputWithContext(ctx context.Context) SystemVdomArrayOutput {
	return pulumi.ToOutputWithContext(ctx, i).(SystemVdomArrayOutput)
}

func (i SystemVdomArray) ToOutput(ctx context.Context) pulumix.Output[[]*SystemVdom] {
	return pulumix.Output[[]*SystemVdom]{
		OutputState: i.ToSystemVdomArrayOutputWithContext(ctx).OutputState,
	}
}

// SystemVdomMapInput is an input type that accepts SystemVdomMap and SystemVdomMapOutput values.
// You can construct a concrete instance of `SystemVdomMapInput` via:
//
//	SystemVdomMap{ "key": SystemVdomArgs{...} }
type SystemVdomMapInput interface {
	pulumi.Input

	ToSystemVdomMapOutput() SystemVdomMapOutput
	ToSystemVdomMapOutputWithContext(context.Context) SystemVdomMapOutput
}

type SystemVdomMap map[string]SystemVdomInput

func (SystemVdomMap) ElementType() reflect.Type {
	return reflect.TypeOf((*map[string]*SystemVdom)(nil)).Elem()
}

func (i SystemVdomMap) ToSystemVdomMapOutput() SystemVdomMapOutput {
	return i.ToSystemVdomMapOutputWithContext(context.Background())
}

func (i SystemVdomMap) ToSystemVdomMapOutputWithContext(ctx context.Context) SystemVdomMapOutput {
	return pulumi.ToOutputWithContext(ctx, i).(SystemVdomMapOutput)
}

func (i SystemVdomMap) ToOutput(ctx context.Context) pulumix.Output[map[string]*SystemVdom] {
	return pulumix.Output[map[string]*SystemVdom]{
		OutputState: i.ToSystemVdomMapOutputWithContext(ctx).OutputState,
	}
}

type SystemVdomOutput struct{ *pulumi.OutputState }

func (SystemVdomOutput) ElementType() reflect.Type {
	return reflect.TypeOf((**SystemVdom)(nil)).Elem()
}

func (o SystemVdomOutput) ToSystemVdomOutput() SystemVdomOutput {
	return o
}

func (o SystemVdomOutput) ToSystemVdomOutputWithContext(ctx context.Context) SystemVdomOutput {
	return o
}

func (o SystemVdomOutput) ToOutput(ctx context.Context) pulumix.Output[*SystemVdom] {
	return pulumix.Output[*SystemVdom]{
		OutputState: o.OutputState,
	}
}

func (o SystemVdomOutput) Flag() pulumi.IntOutput {
	return o.ApplyT(func(v *SystemVdom) pulumi.IntOutput { return v.Flag }).(pulumi.IntOutput)
}

func (o SystemVdomOutput) Name() pulumi.StringOutput {
	return o.ApplyT(func(v *SystemVdom) pulumi.StringOutput { return v.Name }).(pulumi.StringOutput)
}

func (o SystemVdomOutput) ShortName() pulumi.StringOutput {
	return o.ApplyT(func(v *SystemVdom) pulumi.StringOutput { return v.ShortName }).(pulumi.StringOutput)
}

func (o SystemVdomOutput) Temporary() pulumi.IntOutput {
	return o.ApplyT(func(v *SystemVdom) pulumi.IntOutput { return v.Temporary }).(pulumi.IntOutput)
}

func (o SystemVdomOutput) VclusterId() pulumi.IntOutput {
	return o.ApplyT(func(v *SystemVdom) pulumi.IntOutput { return v.VclusterId }).(pulumi.IntOutput)
}

func (o SystemVdomOutput) Vdomparam() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *SystemVdom) pulumi.StringPtrOutput { return v.Vdomparam }).(pulumi.StringPtrOutput)
}

type SystemVdomArrayOutput struct{ *pulumi.OutputState }

func (SystemVdomArrayOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*[]*SystemVdom)(nil)).Elem()
}

func (o SystemVdomArrayOutput) ToSystemVdomArrayOutput() SystemVdomArrayOutput {
	return o
}

func (o SystemVdomArrayOutput) ToSystemVdomArrayOutputWithContext(ctx context.Context) SystemVdomArrayOutput {
	return o
}

func (o SystemVdomArrayOutput) ToOutput(ctx context.Context) pulumix.Output[[]*SystemVdom] {
	return pulumix.Output[[]*SystemVdom]{
		OutputState: o.OutputState,
	}
}

func (o SystemVdomArrayOutput) Index(i pulumi.IntInput) SystemVdomOutput {
	return pulumi.All(o, i).ApplyT(func(vs []interface{}) *SystemVdom {
		return vs[0].([]*SystemVdom)[vs[1].(int)]
	}).(SystemVdomOutput)
}

type SystemVdomMapOutput struct{ *pulumi.OutputState }

func (SystemVdomMapOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*map[string]*SystemVdom)(nil)).Elem()
}

func (o SystemVdomMapOutput) ToSystemVdomMapOutput() SystemVdomMapOutput {
	return o
}

func (o SystemVdomMapOutput) ToSystemVdomMapOutputWithContext(ctx context.Context) SystemVdomMapOutput {
	return o
}

func (o SystemVdomMapOutput) ToOutput(ctx context.Context) pulumix.Output[map[string]*SystemVdom] {
	return pulumix.Output[map[string]*SystemVdom]{
		OutputState: o.OutputState,
	}
}

func (o SystemVdomMapOutput) MapIndex(k pulumi.StringInput) SystemVdomOutput {
	return pulumi.All(o, k).ApplyT(func(vs []interface{}) *SystemVdom {
		return vs[0].(map[string]*SystemVdom)[vs[1].(string)]
	}).(SystemVdomOutput)
}

func init() {
	pulumi.RegisterInputType(reflect.TypeOf((*SystemVdomInput)(nil)).Elem(), &SystemVdom{})
	pulumi.RegisterInputType(reflect.TypeOf((*SystemVdomArrayInput)(nil)).Elem(), SystemVdomArray{})
	pulumi.RegisterInputType(reflect.TypeOf((*SystemVdomMapInput)(nil)).Elem(), SystemVdomMap{})
	pulumi.RegisterOutputType(SystemVdomOutput{})
	pulumi.RegisterOutputType(SystemVdomArrayOutput{})
	pulumi.RegisterOutputType(SystemVdomMapOutput{})
}
