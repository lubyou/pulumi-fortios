// Code generated by the Pulumi Terraform Bridge (tfgen) Tool DO NOT EDIT.
// *** WARNING: Do not edit by hand unless you're certain you know what you are doing! ***

package fortios

import (
	"context"
	"reflect"

	"github.com/lubyou/pulumi-fortios/sdk/go/fortios/internal"
	"github.com/pulumi/pulumi/sdk/v3/go/pulumi"
	"github.com/pulumi/pulumi/sdk/v3/go/pulumix"
)

type SystemNetworkVisibility struct {
	pulumi.CustomResourceState

	DestinationHostnameVisibility pulumi.StringOutput    `pulumi:"destinationHostnameVisibility"`
	DestinationLocation           pulumi.StringOutput    `pulumi:"destinationLocation"`
	DestinationVisibility         pulumi.StringOutput    `pulumi:"destinationVisibility"`
	HostnameLimit                 pulumi.IntOutput       `pulumi:"hostnameLimit"`
	HostnameTtl                   pulumi.IntOutput       `pulumi:"hostnameTtl"`
	SourceLocation                pulumi.StringOutput    `pulumi:"sourceLocation"`
	Vdomparam                     pulumi.StringPtrOutput `pulumi:"vdomparam"`
}

// NewSystemNetworkVisibility registers a new resource with the given unique name, arguments, and options.
func NewSystemNetworkVisibility(ctx *pulumi.Context,
	name string, args *SystemNetworkVisibilityArgs, opts ...pulumi.ResourceOption) (*SystemNetworkVisibility, error) {
	if args == nil {
		args = &SystemNetworkVisibilityArgs{}
	}

	opts = internal.PkgResourceDefaultOpts(opts)
	var resource SystemNetworkVisibility
	err := ctx.RegisterResource("fortios:index/systemNetworkVisibility:SystemNetworkVisibility", name, args, &resource, opts...)
	if err != nil {
		return nil, err
	}
	return &resource, nil
}

// GetSystemNetworkVisibility gets an existing SystemNetworkVisibility resource's state with the given name, ID, and optional
// state properties that are used to uniquely qualify the lookup (nil if not required).
func GetSystemNetworkVisibility(ctx *pulumi.Context,
	name string, id pulumi.IDInput, state *SystemNetworkVisibilityState, opts ...pulumi.ResourceOption) (*SystemNetworkVisibility, error) {
	var resource SystemNetworkVisibility
	err := ctx.ReadResource("fortios:index/systemNetworkVisibility:SystemNetworkVisibility", name, id, state, &resource, opts...)
	if err != nil {
		return nil, err
	}
	return &resource, nil
}

// Input properties used for looking up and filtering SystemNetworkVisibility resources.
type systemNetworkVisibilityState struct {
	DestinationHostnameVisibility *string `pulumi:"destinationHostnameVisibility"`
	DestinationLocation           *string `pulumi:"destinationLocation"`
	DestinationVisibility         *string `pulumi:"destinationVisibility"`
	HostnameLimit                 *int    `pulumi:"hostnameLimit"`
	HostnameTtl                   *int    `pulumi:"hostnameTtl"`
	SourceLocation                *string `pulumi:"sourceLocation"`
	Vdomparam                     *string `pulumi:"vdomparam"`
}

type SystemNetworkVisibilityState struct {
	DestinationHostnameVisibility pulumi.StringPtrInput
	DestinationLocation           pulumi.StringPtrInput
	DestinationVisibility         pulumi.StringPtrInput
	HostnameLimit                 pulumi.IntPtrInput
	HostnameTtl                   pulumi.IntPtrInput
	SourceLocation                pulumi.StringPtrInput
	Vdomparam                     pulumi.StringPtrInput
}

func (SystemNetworkVisibilityState) ElementType() reflect.Type {
	return reflect.TypeOf((*systemNetworkVisibilityState)(nil)).Elem()
}

type systemNetworkVisibilityArgs struct {
	DestinationHostnameVisibility *string `pulumi:"destinationHostnameVisibility"`
	DestinationLocation           *string `pulumi:"destinationLocation"`
	DestinationVisibility         *string `pulumi:"destinationVisibility"`
	HostnameLimit                 *int    `pulumi:"hostnameLimit"`
	HostnameTtl                   *int    `pulumi:"hostnameTtl"`
	SourceLocation                *string `pulumi:"sourceLocation"`
	Vdomparam                     *string `pulumi:"vdomparam"`
}

// The set of arguments for constructing a SystemNetworkVisibility resource.
type SystemNetworkVisibilityArgs struct {
	DestinationHostnameVisibility pulumi.StringPtrInput
	DestinationLocation           pulumi.StringPtrInput
	DestinationVisibility         pulumi.StringPtrInput
	HostnameLimit                 pulumi.IntPtrInput
	HostnameTtl                   pulumi.IntPtrInput
	SourceLocation                pulumi.StringPtrInput
	Vdomparam                     pulumi.StringPtrInput
}

func (SystemNetworkVisibilityArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*systemNetworkVisibilityArgs)(nil)).Elem()
}

type SystemNetworkVisibilityInput interface {
	pulumi.Input

	ToSystemNetworkVisibilityOutput() SystemNetworkVisibilityOutput
	ToSystemNetworkVisibilityOutputWithContext(ctx context.Context) SystemNetworkVisibilityOutput
}

func (*SystemNetworkVisibility) ElementType() reflect.Type {
	return reflect.TypeOf((**SystemNetworkVisibility)(nil)).Elem()
}

func (i *SystemNetworkVisibility) ToSystemNetworkVisibilityOutput() SystemNetworkVisibilityOutput {
	return i.ToSystemNetworkVisibilityOutputWithContext(context.Background())
}

func (i *SystemNetworkVisibility) ToSystemNetworkVisibilityOutputWithContext(ctx context.Context) SystemNetworkVisibilityOutput {
	return pulumi.ToOutputWithContext(ctx, i).(SystemNetworkVisibilityOutput)
}

func (i *SystemNetworkVisibility) ToOutput(ctx context.Context) pulumix.Output[*SystemNetworkVisibility] {
	return pulumix.Output[*SystemNetworkVisibility]{
		OutputState: i.ToSystemNetworkVisibilityOutputWithContext(ctx).OutputState,
	}
}

// SystemNetworkVisibilityArrayInput is an input type that accepts SystemNetworkVisibilityArray and SystemNetworkVisibilityArrayOutput values.
// You can construct a concrete instance of `SystemNetworkVisibilityArrayInput` via:
//
//	SystemNetworkVisibilityArray{ SystemNetworkVisibilityArgs{...} }
type SystemNetworkVisibilityArrayInput interface {
	pulumi.Input

	ToSystemNetworkVisibilityArrayOutput() SystemNetworkVisibilityArrayOutput
	ToSystemNetworkVisibilityArrayOutputWithContext(context.Context) SystemNetworkVisibilityArrayOutput
}

type SystemNetworkVisibilityArray []SystemNetworkVisibilityInput

func (SystemNetworkVisibilityArray) ElementType() reflect.Type {
	return reflect.TypeOf((*[]*SystemNetworkVisibility)(nil)).Elem()
}

func (i SystemNetworkVisibilityArray) ToSystemNetworkVisibilityArrayOutput() SystemNetworkVisibilityArrayOutput {
	return i.ToSystemNetworkVisibilityArrayOutputWithContext(context.Background())
}

func (i SystemNetworkVisibilityArray) ToSystemNetworkVisibilityArrayOutputWithContext(ctx context.Context) SystemNetworkVisibilityArrayOutput {
	return pulumi.ToOutputWithContext(ctx, i).(SystemNetworkVisibilityArrayOutput)
}

func (i SystemNetworkVisibilityArray) ToOutput(ctx context.Context) pulumix.Output[[]*SystemNetworkVisibility] {
	return pulumix.Output[[]*SystemNetworkVisibility]{
		OutputState: i.ToSystemNetworkVisibilityArrayOutputWithContext(ctx).OutputState,
	}
}

// SystemNetworkVisibilityMapInput is an input type that accepts SystemNetworkVisibilityMap and SystemNetworkVisibilityMapOutput values.
// You can construct a concrete instance of `SystemNetworkVisibilityMapInput` via:
//
//	SystemNetworkVisibilityMap{ "key": SystemNetworkVisibilityArgs{...} }
type SystemNetworkVisibilityMapInput interface {
	pulumi.Input

	ToSystemNetworkVisibilityMapOutput() SystemNetworkVisibilityMapOutput
	ToSystemNetworkVisibilityMapOutputWithContext(context.Context) SystemNetworkVisibilityMapOutput
}

type SystemNetworkVisibilityMap map[string]SystemNetworkVisibilityInput

func (SystemNetworkVisibilityMap) ElementType() reflect.Type {
	return reflect.TypeOf((*map[string]*SystemNetworkVisibility)(nil)).Elem()
}

func (i SystemNetworkVisibilityMap) ToSystemNetworkVisibilityMapOutput() SystemNetworkVisibilityMapOutput {
	return i.ToSystemNetworkVisibilityMapOutputWithContext(context.Background())
}

func (i SystemNetworkVisibilityMap) ToSystemNetworkVisibilityMapOutputWithContext(ctx context.Context) SystemNetworkVisibilityMapOutput {
	return pulumi.ToOutputWithContext(ctx, i).(SystemNetworkVisibilityMapOutput)
}

func (i SystemNetworkVisibilityMap) ToOutput(ctx context.Context) pulumix.Output[map[string]*SystemNetworkVisibility] {
	return pulumix.Output[map[string]*SystemNetworkVisibility]{
		OutputState: i.ToSystemNetworkVisibilityMapOutputWithContext(ctx).OutputState,
	}
}

type SystemNetworkVisibilityOutput struct{ *pulumi.OutputState }

func (SystemNetworkVisibilityOutput) ElementType() reflect.Type {
	return reflect.TypeOf((**SystemNetworkVisibility)(nil)).Elem()
}

func (o SystemNetworkVisibilityOutput) ToSystemNetworkVisibilityOutput() SystemNetworkVisibilityOutput {
	return o
}

func (o SystemNetworkVisibilityOutput) ToSystemNetworkVisibilityOutputWithContext(ctx context.Context) SystemNetworkVisibilityOutput {
	return o
}

func (o SystemNetworkVisibilityOutput) ToOutput(ctx context.Context) pulumix.Output[*SystemNetworkVisibility] {
	return pulumix.Output[*SystemNetworkVisibility]{
		OutputState: o.OutputState,
	}
}

func (o SystemNetworkVisibilityOutput) DestinationHostnameVisibility() pulumi.StringOutput {
	return o.ApplyT(func(v *SystemNetworkVisibility) pulumi.StringOutput { return v.DestinationHostnameVisibility }).(pulumi.StringOutput)
}

func (o SystemNetworkVisibilityOutput) DestinationLocation() pulumi.StringOutput {
	return o.ApplyT(func(v *SystemNetworkVisibility) pulumi.StringOutput { return v.DestinationLocation }).(pulumi.StringOutput)
}

func (o SystemNetworkVisibilityOutput) DestinationVisibility() pulumi.StringOutput {
	return o.ApplyT(func(v *SystemNetworkVisibility) pulumi.StringOutput { return v.DestinationVisibility }).(pulumi.StringOutput)
}

func (o SystemNetworkVisibilityOutput) HostnameLimit() pulumi.IntOutput {
	return o.ApplyT(func(v *SystemNetworkVisibility) pulumi.IntOutput { return v.HostnameLimit }).(pulumi.IntOutput)
}

func (o SystemNetworkVisibilityOutput) HostnameTtl() pulumi.IntOutput {
	return o.ApplyT(func(v *SystemNetworkVisibility) pulumi.IntOutput { return v.HostnameTtl }).(pulumi.IntOutput)
}

func (o SystemNetworkVisibilityOutput) SourceLocation() pulumi.StringOutput {
	return o.ApplyT(func(v *SystemNetworkVisibility) pulumi.StringOutput { return v.SourceLocation }).(pulumi.StringOutput)
}

func (o SystemNetworkVisibilityOutput) Vdomparam() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *SystemNetworkVisibility) pulumi.StringPtrOutput { return v.Vdomparam }).(pulumi.StringPtrOutput)
}

type SystemNetworkVisibilityArrayOutput struct{ *pulumi.OutputState }

func (SystemNetworkVisibilityArrayOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*[]*SystemNetworkVisibility)(nil)).Elem()
}

func (o SystemNetworkVisibilityArrayOutput) ToSystemNetworkVisibilityArrayOutput() SystemNetworkVisibilityArrayOutput {
	return o
}

func (o SystemNetworkVisibilityArrayOutput) ToSystemNetworkVisibilityArrayOutputWithContext(ctx context.Context) SystemNetworkVisibilityArrayOutput {
	return o
}

func (o SystemNetworkVisibilityArrayOutput) ToOutput(ctx context.Context) pulumix.Output[[]*SystemNetworkVisibility] {
	return pulumix.Output[[]*SystemNetworkVisibility]{
		OutputState: o.OutputState,
	}
}

func (o SystemNetworkVisibilityArrayOutput) Index(i pulumi.IntInput) SystemNetworkVisibilityOutput {
	return pulumi.All(o, i).ApplyT(func(vs []interface{}) *SystemNetworkVisibility {
		return vs[0].([]*SystemNetworkVisibility)[vs[1].(int)]
	}).(SystemNetworkVisibilityOutput)
}

type SystemNetworkVisibilityMapOutput struct{ *pulumi.OutputState }

func (SystemNetworkVisibilityMapOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*map[string]*SystemNetworkVisibility)(nil)).Elem()
}

func (o SystemNetworkVisibilityMapOutput) ToSystemNetworkVisibilityMapOutput() SystemNetworkVisibilityMapOutput {
	return o
}

func (o SystemNetworkVisibilityMapOutput) ToSystemNetworkVisibilityMapOutputWithContext(ctx context.Context) SystemNetworkVisibilityMapOutput {
	return o
}

func (o SystemNetworkVisibilityMapOutput) ToOutput(ctx context.Context) pulumix.Output[map[string]*SystemNetworkVisibility] {
	return pulumix.Output[map[string]*SystemNetworkVisibility]{
		OutputState: o.OutputState,
	}
}

func (o SystemNetworkVisibilityMapOutput) MapIndex(k pulumi.StringInput) SystemNetworkVisibilityOutput {
	return pulumi.All(o, k).ApplyT(func(vs []interface{}) *SystemNetworkVisibility {
		return vs[0].(map[string]*SystemNetworkVisibility)[vs[1].(string)]
	}).(SystemNetworkVisibilityOutput)
}

func init() {
	pulumi.RegisterInputType(reflect.TypeOf((*SystemNetworkVisibilityInput)(nil)).Elem(), &SystemNetworkVisibility{})
	pulumi.RegisterInputType(reflect.TypeOf((*SystemNetworkVisibilityArrayInput)(nil)).Elem(), SystemNetworkVisibilityArray{})
	pulumi.RegisterInputType(reflect.TypeOf((*SystemNetworkVisibilityMapInput)(nil)).Elem(), SystemNetworkVisibilityMap{})
	pulumi.RegisterOutputType(SystemNetworkVisibilityOutput{})
	pulumi.RegisterOutputType(SystemNetworkVisibilityArrayOutput{})
	pulumi.RegisterOutputType(SystemNetworkVisibilityMapOutput{})
}
