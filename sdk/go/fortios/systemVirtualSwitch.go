// Code generated by the Pulumi Terraform Bridge (tfgen) Tool DO NOT EDIT.
// *** WARNING: Do not edit by hand unless you're certain you know what you are doing! ***

package fortios

import (
	"context"
	"reflect"

	"github.com/pulumi/pulumi/sdk/v3/go/pulumi"
)

// Configure virtual hardware switch interfaces. Applies to FortiOS Version `>= 7.0.4`.
//
// ## Import
//
// System VirtualSwitch can be imported using any of these accepted formats
//
// ```sh
//  $ pulumi import fortios:index/systemVirtualSwitch:SystemVirtualSwitch labelname {{name}}
// ```
//
//  If you do not want to import arguments of block$ export "FORTIOS_IMPORT_TABLE"="false"
//
// ```sh
//  $ pulumi import fortios:index/systemVirtualSwitch:SystemVirtualSwitch labelname {{name}}
// ```
//
//  $ unset "FORTIOS_IMPORT_TABLE"
type SystemVirtualSwitch struct {
	pulumi.CustomResourceState

	// true or false, set this parameter to true when using dynamic forEach + toset to configure and sort sub-tables, please do not set this parameter when configuring static sub-tables.
	DynamicSortSubtable pulumi.StringPtrOutput `pulumi:"dynamicSortSubtable"`
	// Physical interface name.
	Name pulumi.StringOutput `pulumi:"name"`
	// Physical switch parent.
	PhysicalSwitch pulumi.StringOutput `pulumi:"physicalSwitch"`
	// Configure member ports. The structure of `port` block is documented below.
	Ports SystemVirtualSwitchPortArrayOutput `pulumi:"ports"`
	// Enable/disable SPAN. Valid values: `disable`, `enable`.
	Span pulumi.StringOutput `pulumi:"span"`
	// SPAN destination port.
	SpanDestPort pulumi.StringOutput `pulumi:"spanDestPort"`
	// SPAN direction. Valid values: `rx`, `tx`, `both`.
	SpanDirection pulumi.StringOutput `pulumi:"spanDirection"`
	// SPAN source port.
	SpanSourcePort pulumi.StringOutput `pulumi:"spanSourcePort"`
	// Specifies the vdom to which the resource will be applied when the FortiGate unit is running in VDOM mode. Only one vdom can be specified. If you want to inherit the vdom configuration of the provider, please do not set this parameter.
	Vdomparam pulumi.StringPtrOutput `pulumi:"vdomparam"`
	// VLAN.
	Vlan pulumi.IntOutput `pulumi:"vlan"`
}

// NewSystemVirtualSwitch registers a new resource with the given unique name, arguments, and options.
func NewSystemVirtualSwitch(ctx *pulumi.Context,
	name string, args *SystemVirtualSwitchArgs, opts ...pulumi.ResourceOption) (*SystemVirtualSwitch, error) {
	if args == nil {
		args = &SystemVirtualSwitchArgs{}
	}

	opts = pkgResourceDefaultOpts(opts)
	var resource SystemVirtualSwitch
	err := ctx.RegisterResource("fortios:index/systemVirtualSwitch:SystemVirtualSwitch", name, args, &resource, opts...)
	if err != nil {
		return nil, err
	}
	return &resource, nil
}

// GetSystemVirtualSwitch gets an existing SystemVirtualSwitch resource's state with the given name, ID, and optional
// state properties that are used to uniquely qualify the lookup (nil if not required).
func GetSystemVirtualSwitch(ctx *pulumi.Context,
	name string, id pulumi.IDInput, state *SystemVirtualSwitchState, opts ...pulumi.ResourceOption) (*SystemVirtualSwitch, error) {
	var resource SystemVirtualSwitch
	err := ctx.ReadResource("fortios:index/systemVirtualSwitch:SystemVirtualSwitch", name, id, state, &resource, opts...)
	if err != nil {
		return nil, err
	}
	return &resource, nil
}

// Input properties used for looking up and filtering SystemVirtualSwitch resources.
type systemVirtualSwitchState struct {
	// true or false, set this parameter to true when using dynamic forEach + toset to configure and sort sub-tables, please do not set this parameter when configuring static sub-tables.
	DynamicSortSubtable *string `pulumi:"dynamicSortSubtable"`
	// Physical interface name.
	Name *string `pulumi:"name"`
	// Physical switch parent.
	PhysicalSwitch *string `pulumi:"physicalSwitch"`
	// Configure member ports. The structure of `port` block is documented below.
	Ports []SystemVirtualSwitchPort `pulumi:"ports"`
	// Enable/disable SPAN. Valid values: `disable`, `enable`.
	Span *string `pulumi:"span"`
	// SPAN destination port.
	SpanDestPort *string `pulumi:"spanDestPort"`
	// SPAN direction. Valid values: `rx`, `tx`, `both`.
	SpanDirection *string `pulumi:"spanDirection"`
	// SPAN source port.
	SpanSourcePort *string `pulumi:"spanSourcePort"`
	// Specifies the vdom to which the resource will be applied when the FortiGate unit is running in VDOM mode. Only one vdom can be specified. If you want to inherit the vdom configuration of the provider, please do not set this parameter.
	Vdomparam *string `pulumi:"vdomparam"`
	// VLAN.
	Vlan *int `pulumi:"vlan"`
}

type SystemVirtualSwitchState struct {
	// true or false, set this parameter to true when using dynamic forEach + toset to configure and sort sub-tables, please do not set this parameter when configuring static sub-tables.
	DynamicSortSubtable pulumi.StringPtrInput
	// Physical interface name.
	Name pulumi.StringPtrInput
	// Physical switch parent.
	PhysicalSwitch pulumi.StringPtrInput
	// Configure member ports. The structure of `port` block is documented below.
	Ports SystemVirtualSwitchPortArrayInput
	// Enable/disable SPAN. Valid values: `disable`, `enable`.
	Span pulumi.StringPtrInput
	// SPAN destination port.
	SpanDestPort pulumi.StringPtrInput
	// SPAN direction. Valid values: `rx`, `tx`, `both`.
	SpanDirection pulumi.StringPtrInput
	// SPAN source port.
	SpanSourcePort pulumi.StringPtrInput
	// Specifies the vdom to which the resource will be applied when the FortiGate unit is running in VDOM mode. Only one vdom can be specified. If you want to inherit the vdom configuration of the provider, please do not set this parameter.
	Vdomparam pulumi.StringPtrInput
	// VLAN.
	Vlan pulumi.IntPtrInput
}

func (SystemVirtualSwitchState) ElementType() reflect.Type {
	return reflect.TypeOf((*systemVirtualSwitchState)(nil)).Elem()
}

type systemVirtualSwitchArgs struct {
	// true or false, set this parameter to true when using dynamic forEach + toset to configure and sort sub-tables, please do not set this parameter when configuring static sub-tables.
	DynamicSortSubtable *string `pulumi:"dynamicSortSubtable"`
	// Physical interface name.
	Name *string `pulumi:"name"`
	// Physical switch parent.
	PhysicalSwitch *string `pulumi:"physicalSwitch"`
	// Configure member ports. The structure of `port` block is documented below.
	Ports []SystemVirtualSwitchPort `pulumi:"ports"`
	// Enable/disable SPAN. Valid values: `disable`, `enable`.
	Span *string `pulumi:"span"`
	// SPAN destination port.
	SpanDestPort *string `pulumi:"spanDestPort"`
	// SPAN direction. Valid values: `rx`, `tx`, `both`.
	SpanDirection *string `pulumi:"spanDirection"`
	// SPAN source port.
	SpanSourcePort *string `pulumi:"spanSourcePort"`
	// Specifies the vdom to which the resource will be applied when the FortiGate unit is running in VDOM mode. Only one vdom can be specified. If you want to inherit the vdom configuration of the provider, please do not set this parameter.
	Vdomparam *string `pulumi:"vdomparam"`
	// VLAN.
	Vlan *int `pulumi:"vlan"`
}

// The set of arguments for constructing a SystemVirtualSwitch resource.
type SystemVirtualSwitchArgs struct {
	// true or false, set this parameter to true when using dynamic forEach + toset to configure and sort sub-tables, please do not set this parameter when configuring static sub-tables.
	DynamicSortSubtable pulumi.StringPtrInput
	// Physical interface name.
	Name pulumi.StringPtrInput
	// Physical switch parent.
	PhysicalSwitch pulumi.StringPtrInput
	// Configure member ports. The structure of `port` block is documented below.
	Ports SystemVirtualSwitchPortArrayInput
	// Enable/disable SPAN. Valid values: `disable`, `enable`.
	Span pulumi.StringPtrInput
	// SPAN destination port.
	SpanDestPort pulumi.StringPtrInput
	// SPAN direction. Valid values: `rx`, `tx`, `both`.
	SpanDirection pulumi.StringPtrInput
	// SPAN source port.
	SpanSourcePort pulumi.StringPtrInput
	// Specifies the vdom to which the resource will be applied when the FortiGate unit is running in VDOM mode. Only one vdom can be specified. If you want to inherit the vdom configuration of the provider, please do not set this parameter.
	Vdomparam pulumi.StringPtrInput
	// VLAN.
	Vlan pulumi.IntPtrInput
}

func (SystemVirtualSwitchArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*systemVirtualSwitchArgs)(nil)).Elem()
}

type SystemVirtualSwitchInput interface {
	pulumi.Input

	ToSystemVirtualSwitchOutput() SystemVirtualSwitchOutput
	ToSystemVirtualSwitchOutputWithContext(ctx context.Context) SystemVirtualSwitchOutput
}

func (*SystemVirtualSwitch) ElementType() reflect.Type {
	return reflect.TypeOf((**SystemVirtualSwitch)(nil)).Elem()
}

func (i *SystemVirtualSwitch) ToSystemVirtualSwitchOutput() SystemVirtualSwitchOutput {
	return i.ToSystemVirtualSwitchOutputWithContext(context.Background())
}

func (i *SystemVirtualSwitch) ToSystemVirtualSwitchOutputWithContext(ctx context.Context) SystemVirtualSwitchOutput {
	return pulumi.ToOutputWithContext(ctx, i).(SystemVirtualSwitchOutput)
}

// SystemVirtualSwitchArrayInput is an input type that accepts SystemVirtualSwitchArray and SystemVirtualSwitchArrayOutput values.
// You can construct a concrete instance of `SystemVirtualSwitchArrayInput` via:
//
//          SystemVirtualSwitchArray{ SystemVirtualSwitchArgs{...} }
type SystemVirtualSwitchArrayInput interface {
	pulumi.Input

	ToSystemVirtualSwitchArrayOutput() SystemVirtualSwitchArrayOutput
	ToSystemVirtualSwitchArrayOutputWithContext(context.Context) SystemVirtualSwitchArrayOutput
}

type SystemVirtualSwitchArray []SystemVirtualSwitchInput

func (SystemVirtualSwitchArray) ElementType() reflect.Type {
	return reflect.TypeOf((*[]*SystemVirtualSwitch)(nil)).Elem()
}

func (i SystemVirtualSwitchArray) ToSystemVirtualSwitchArrayOutput() SystemVirtualSwitchArrayOutput {
	return i.ToSystemVirtualSwitchArrayOutputWithContext(context.Background())
}

func (i SystemVirtualSwitchArray) ToSystemVirtualSwitchArrayOutputWithContext(ctx context.Context) SystemVirtualSwitchArrayOutput {
	return pulumi.ToOutputWithContext(ctx, i).(SystemVirtualSwitchArrayOutput)
}

// SystemVirtualSwitchMapInput is an input type that accepts SystemVirtualSwitchMap and SystemVirtualSwitchMapOutput values.
// You can construct a concrete instance of `SystemVirtualSwitchMapInput` via:
//
//          SystemVirtualSwitchMap{ "key": SystemVirtualSwitchArgs{...} }
type SystemVirtualSwitchMapInput interface {
	pulumi.Input

	ToSystemVirtualSwitchMapOutput() SystemVirtualSwitchMapOutput
	ToSystemVirtualSwitchMapOutputWithContext(context.Context) SystemVirtualSwitchMapOutput
}

type SystemVirtualSwitchMap map[string]SystemVirtualSwitchInput

func (SystemVirtualSwitchMap) ElementType() reflect.Type {
	return reflect.TypeOf((*map[string]*SystemVirtualSwitch)(nil)).Elem()
}

func (i SystemVirtualSwitchMap) ToSystemVirtualSwitchMapOutput() SystemVirtualSwitchMapOutput {
	return i.ToSystemVirtualSwitchMapOutputWithContext(context.Background())
}

func (i SystemVirtualSwitchMap) ToSystemVirtualSwitchMapOutputWithContext(ctx context.Context) SystemVirtualSwitchMapOutput {
	return pulumi.ToOutputWithContext(ctx, i).(SystemVirtualSwitchMapOutput)
}

type SystemVirtualSwitchOutput struct{ *pulumi.OutputState }

func (SystemVirtualSwitchOutput) ElementType() reflect.Type {
	return reflect.TypeOf((**SystemVirtualSwitch)(nil)).Elem()
}

func (o SystemVirtualSwitchOutput) ToSystemVirtualSwitchOutput() SystemVirtualSwitchOutput {
	return o
}

func (o SystemVirtualSwitchOutput) ToSystemVirtualSwitchOutputWithContext(ctx context.Context) SystemVirtualSwitchOutput {
	return o
}

type SystemVirtualSwitchArrayOutput struct{ *pulumi.OutputState }

func (SystemVirtualSwitchArrayOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*[]*SystemVirtualSwitch)(nil)).Elem()
}

func (o SystemVirtualSwitchArrayOutput) ToSystemVirtualSwitchArrayOutput() SystemVirtualSwitchArrayOutput {
	return o
}

func (o SystemVirtualSwitchArrayOutput) ToSystemVirtualSwitchArrayOutputWithContext(ctx context.Context) SystemVirtualSwitchArrayOutput {
	return o
}

func (o SystemVirtualSwitchArrayOutput) Index(i pulumi.IntInput) SystemVirtualSwitchOutput {
	return pulumi.All(o, i).ApplyT(func(vs []interface{}) *SystemVirtualSwitch {
		return vs[0].([]*SystemVirtualSwitch)[vs[1].(int)]
	}).(SystemVirtualSwitchOutput)
}

type SystemVirtualSwitchMapOutput struct{ *pulumi.OutputState }

func (SystemVirtualSwitchMapOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*map[string]*SystemVirtualSwitch)(nil)).Elem()
}

func (o SystemVirtualSwitchMapOutput) ToSystemVirtualSwitchMapOutput() SystemVirtualSwitchMapOutput {
	return o
}

func (o SystemVirtualSwitchMapOutput) ToSystemVirtualSwitchMapOutputWithContext(ctx context.Context) SystemVirtualSwitchMapOutput {
	return o
}

func (o SystemVirtualSwitchMapOutput) MapIndex(k pulumi.StringInput) SystemVirtualSwitchOutput {
	return pulumi.All(o, k).ApplyT(func(vs []interface{}) *SystemVirtualSwitch {
		return vs[0].(map[string]*SystemVirtualSwitch)[vs[1].(string)]
	}).(SystemVirtualSwitchOutput)
}

func init() {
	pulumi.RegisterInputType(reflect.TypeOf((*SystemVirtualSwitchInput)(nil)).Elem(), &SystemVirtualSwitch{})
	pulumi.RegisterInputType(reflect.TypeOf((*SystemVirtualSwitchArrayInput)(nil)).Elem(), SystemVirtualSwitchArray{})
	pulumi.RegisterInputType(reflect.TypeOf((*SystemVirtualSwitchMapInput)(nil)).Elem(), SystemVirtualSwitchMap{})
	pulumi.RegisterOutputType(SystemVirtualSwitchOutput{})
	pulumi.RegisterOutputType(SystemVirtualSwitchArrayOutput{})
	pulumi.RegisterOutputType(SystemVirtualSwitchMapOutput{})
}
