// Code generated by the Pulumi Terraform Bridge (tfgen) Tool DO NOT EDIT.
// *** WARNING: Do not edit by hand unless you're certain you know what you are doing! ***

package fortios

import (
	"context"
	"reflect"

	"github.com/lubyou/pulumi-fortios/sdk/go/fortios/internal"
	"github.com/pulumi/pulumi/sdk/v3/go/pulumi"
)

type SystemVirtualSwitch struct {
	pulumi.CustomResourceState

	DynamicSortSubtable pulumi.StringPtrOutput             `pulumi:"dynamicSortSubtable"`
	GetAllTables        pulumi.StringPtrOutput             `pulumi:"getAllTables"`
	Name                pulumi.StringOutput                `pulumi:"name"`
	PhysicalSwitch      pulumi.StringOutput                `pulumi:"physicalSwitch"`
	Ports               SystemVirtualSwitchPortArrayOutput `pulumi:"ports"`
	Span                pulumi.StringOutput                `pulumi:"span"`
	SpanDestPort        pulumi.StringOutput                `pulumi:"spanDestPort"`
	SpanDirection       pulumi.StringOutput                `pulumi:"spanDirection"`
	SpanSourcePort      pulumi.StringOutput                `pulumi:"spanSourcePort"`
	Vdomparam           pulumi.StringPtrOutput             `pulumi:"vdomparam"`
	Vlan                pulumi.IntOutput                   `pulumi:"vlan"`
}

// NewSystemVirtualSwitch registers a new resource with the given unique name, arguments, and options.
func NewSystemVirtualSwitch(ctx *pulumi.Context,
	name string, args *SystemVirtualSwitchArgs, opts ...pulumi.ResourceOption) (*SystemVirtualSwitch, error) {
	if args == nil {
		args = &SystemVirtualSwitchArgs{}
	}

	opts = internal.PkgResourceDefaultOpts(opts)
	var resource SystemVirtualSwitch
	err := ctx.RegisterResource("fortios:index/systemVirtualSwitch:SystemVirtualSwitch", name, args, &resource, opts...)
	if err != nil {
		return nil, err
	}
	return &resource, nil
}

// GetSystemVirtualSwitch gets an existing SystemVirtualSwitch resource's state with the given name, ID, and optional
// state properties that are used to uniquely qualify the lookup (nil if not required).
func GetSystemVirtualSwitch(ctx *pulumi.Context,
	name string, id pulumi.IDInput, state *SystemVirtualSwitchState, opts ...pulumi.ResourceOption) (*SystemVirtualSwitch, error) {
	var resource SystemVirtualSwitch
	err := ctx.ReadResource("fortios:index/systemVirtualSwitch:SystemVirtualSwitch", name, id, state, &resource, opts...)
	if err != nil {
		return nil, err
	}
	return &resource, nil
}

// Input properties used for looking up and filtering SystemVirtualSwitch resources.
type systemVirtualSwitchState struct {
	DynamicSortSubtable *string                   `pulumi:"dynamicSortSubtable"`
	GetAllTables        *string                   `pulumi:"getAllTables"`
	Name                *string                   `pulumi:"name"`
	PhysicalSwitch      *string                   `pulumi:"physicalSwitch"`
	Ports               []SystemVirtualSwitchPort `pulumi:"ports"`
	Span                *string                   `pulumi:"span"`
	SpanDestPort        *string                   `pulumi:"spanDestPort"`
	SpanDirection       *string                   `pulumi:"spanDirection"`
	SpanSourcePort      *string                   `pulumi:"spanSourcePort"`
	Vdomparam           *string                   `pulumi:"vdomparam"`
	Vlan                *int                      `pulumi:"vlan"`
}

type SystemVirtualSwitchState struct {
	DynamicSortSubtable pulumi.StringPtrInput
	GetAllTables        pulumi.StringPtrInput
	Name                pulumi.StringPtrInput
	PhysicalSwitch      pulumi.StringPtrInput
	Ports               SystemVirtualSwitchPortArrayInput
	Span                pulumi.StringPtrInput
	SpanDestPort        pulumi.StringPtrInput
	SpanDirection       pulumi.StringPtrInput
	SpanSourcePort      pulumi.StringPtrInput
	Vdomparam           pulumi.StringPtrInput
	Vlan                pulumi.IntPtrInput
}

func (SystemVirtualSwitchState) ElementType() reflect.Type {
	return reflect.TypeOf((*systemVirtualSwitchState)(nil)).Elem()
}

type systemVirtualSwitchArgs struct {
	DynamicSortSubtable *string                   `pulumi:"dynamicSortSubtable"`
	GetAllTables        *string                   `pulumi:"getAllTables"`
	Name                *string                   `pulumi:"name"`
	PhysicalSwitch      *string                   `pulumi:"physicalSwitch"`
	Ports               []SystemVirtualSwitchPort `pulumi:"ports"`
	Span                *string                   `pulumi:"span"`
	SpanDestPort        *string                   `pulumi:"spanDestPort"`
	SpanDirection       *string                   `pulumi:"spanDirection"`
	SpanSourcePort      *string                   `pulumi:"spanSourcePort"`
	Vdomparam           *string                   `pulumi:"vdomparam"`
	Vlan                *int                      `pulumi:"vlan"`
}

// The set of arguments for constructing a SystemVirtualSwitch resource.
type SystemVirtualSwitchArgs struct {
	DynamicSortSubtable pulumi.StringPtrInput
	GetAllTables        pulumi.StringPtrInput
	Name                pulumi.StringPtrInput
	PhysicalSwitch      pulumi.StringPtrInput
	Ports               SystemVirtualSwitchPortArrayInput
	Span                pulumi.StringPtrInput
	SpanDestPort        pulumi.StringPtrInput
	SpanDirection       pulumi.StringPtrInput
	SpanSourcePort      pulumi.StringPtrInput
	Vdomparam           pulumi.StringPtrInput
	Vlan                pulumi.IntPtrInput
}

func (SystemVirtualSwitchArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*systemVirtualSwitchArgs)(nil)).Elem()
}

type SystemVirtualSwitchInput interface {
	pulumi.Input

	ToSystemVirtualSwitchOutput() SystemVirtualSwitchOutput
	ToSystemVirtualSwitchOutputWithContext(ctx context.Context) SystemVirtualSwitchOutput
}

func (*SystemVirtualSwitch) ElementType() reflect.Type {
	return reflect.TypeOf((**SystemVirtualSwitch)(nil)).Elem()
}

func (i *SystemVirtualSwitch) ToSystemVirtualSwitchOutput() SystemVirtualSwitchOutput {
	return i.ToSystemVirtualSwitchOutputWithContext(context.Background())
}

func (i *SystemVirtualSwitch) ToSystemVirtualSwitchOutputWithContext(ctx context.Context) SystemVirtualSwitchOutput {
	return pulumi.ToOutputWithContext(ctx, i).(SystemVirtualSwitchOutput)
}

// SystemVirtualSwitchArrayInput is an input type that accepts SystemVirtualSwitchArray and SystemVirtualSwitchArrayOutput values.
// You can construct a concrete instance of `SystemVirtualSwitchArrayInput` via:
//
//	SystemVirtualSwitchArray{ SystemVirtualSwitchArgs{...} }
type SystemVirtualSwitchArrayInput interface {
	pulumi.Input

	ToSystemVirtualSwitchArrayOutput() SystemVirtualSwitchArrayOutput
	ToSystemVirtualSwitchArrayOutputWithContext(context.Context) SystemVirtualSwitchArrayOutput
}

type SystemVirtualSwitchArray []SystemVirtualSwitchInput

func (SystemVirtualSwitchArray) ElementType() reflect.Type {
	return reflect.TypeOf((*[]*SystemVirtualSwitch)(nil)).Elem()
}

func (i SystemVirtualSwitchArray) ToSystemVirtualSwitchArrayOutput() SystemVirtualSwitchArrayOutput {
	return i.ToSystemVirtualSwitchArrayOutputWithContext(context.Background())
}

func (i SystemVirtualSwitchArray) ToSystemVirtualSwitchArrayOutputWithContext(ctx context.Context) SystemVirtualSwitchArrayOutput {
	return pulumi.ToOutputWithContext(ctx, i).(SystemVirtualSwitchArrayOutput)
}

// SystemVirtualSwitchMapInput is an input type that accepts SystemVirtualSwitchMap and SystemVirtualSwitchMapOutput values.
// You can construct a concrete instance of `SystemVirtualSwitchMapInput` via:
//
//	SystemVirtualSwitchMap{ "key": SystemVirtualSwitchArgs{...} }
type SystemVirtualSwitchMapInput interface {
	pulumi.Input

	ToSystemVirtualSwitchMapOutput() SystemVirtualSwitchMapOutput
	ToSystemVirtualSwitchMapOutputWithContext(context.Context) SystemVirtualSwitchMapOutput
}

type SystemVirtualSwitchMap map[string]SystemVirtualSwitchInput

func (SystemVirtualSwitchMap) ElementType() reflect.Type {
	return reflect.TypeOf((*map[string]*SystemVirtualSwitch)(nil)).Elem()
}

func (i SystemVirtualSwitchMap) ToSystemVirtualSwitchMapOutput() SystemVirtualSwitchMapOutput {
	return i.ToSystemVirtualSwitchMapOutputWithContext(context.Background())
}

func (i SystemVirtualSwitchMap) ToSystemVirtualSwitchMapOutputWithContext(ctx context.Context) SystemVirtualSwitchMapOutput {
	return pulumi.ToOutputWithContext(ctx, i).(SystemVirtualSwitchMapOutput)
}

type SystemVirtualSwitchOutput struct{ *pulumi.OutputState }

func (SystemVirtualSwitchOutput) ElementType() reflect.Type {
	return reflect.TypeOf((**SystemVirtualSwitch)(nil)).Elem()
}

func (o SystemVirtualSwitchOutput) ToSystemVirtualSwitchOutput() SystemVirtualSwitchOutput {
	return o
}

func (o SystemVirtualSwitchOutput) ToSystemVirtualSwitchOutputWithContext(ctx context.Context) SystemVirtualSwitchOutput {
	return o
}

func (o SystemVirtualSwitchOutput) DynamicSortSubtable() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *SystemVirtualSwitch) pulumi.StringPtrOutput { return v.DynamicSortSubtable }).(pulumi.StringPtrOutput)
}

func (o SystemVirtualSwitchOutput) GetAllTables() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *SystemVirtualSwitch) pulumi.StringPtrOutput { return v.GetAllTables }).(pulumi.StringPtrOutput)
}

func (o SystemVirtualSwitchOutput) Name() pulumi.StringOutput {
	return o.ApplyT(func(v *SystemVirtualSwitch) pulumi.StringOutput { return v.Name }).(pulumi.StringOutput)
}

func (o SystemVirtualSwitchOutput) PhysicalSwitch() pulumi.StringOutput {
	return o.ApplyT(func(v *SystemVirtualSwitch) pulumi.StringOutput { return v.PhysicalSwitch }).(pulumi.StringOutput)
}

func (o SystemVirtualSwitchOutput) Ports() SystemVirtualSwitchPortArrayOutput {
	return o.ApplyT(func(v *SystemVirtualSwitch) SystemVirtualSwitchPortArrayOutput { return v.Ports }).(SystemVirtualSwitchPortArrayOutput)
}

func (o SystemVirtualSwitchOutput) Span() pulumi.StringOutput {
	return o.ApplyT(func(v *SystemVirtualSwitch) pulumi.StringOutput { return v.Span }).(pulumi.StringOutput)
}

func (o SystemVirtualSwitchOutput) SpanDestPort() pulumi.StringOutput {
	return o.ApplyT(func(v *SystemVirtualSwitch) pulumi.StringOutput { return v.SpanDestPort }).(pulumi.StringOutput)
}

func (o SystemVirtualSwitchOutput) SpanDirection() pulumi.StringOutput {
	return o.ApplyT(func(v *SystemVirtualSwitch) pulumi.StringOutput { return v.SpanDirection }).(pulumi.StringOutput)
}

func (o SystemVirtualSwitchOutput) SpanSourcePort() pulumi.StringOutput {
	return o.ApplyT(func(v *SystemVirtualSwitch) pulumi.StringOutput { return v.SpanSourcePort }).(pulumi.StringOutput)
}

func (o SystemVirtualSwitchOutput) Vdomparam() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *SystemVirtualSwitch) pulumi.StringPtrOutput { return v.Vdomparam }).(pulumi.StringPtrOutput)
}

func (o SystemVirtualSwitchOutput) Vlan() pulumi.IntOutput {
	return o.ApplyT(func(v *SystemVirtualSwitch) pulumi.IntOutput { return v.Vlan }).(pulumi.IntOutput)
}

type SystemVirtualSwitchArrayOutput struct{ *pulumi.OutputState }

func (SystemVirtualSwitchArrayOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*[]*SystemVirtualSwitch)(nil)).Elem()
}

func (o SystemVirtualSwitchArrayOutput) ToSystemVirtualSwitchArrayOutput() SystemVirtualSwitchArrayOutput {
	return o
}

func (o SystemVirtualSwitchArrayOutput) ToSystemVirtualSwitchArrayOutputWithContext(ctx context.Context) SystemVirtualSwitchArrayOutput {
	return o
}

func (o SystemVirtualSwitchArrayOutput) Index(i pulumi.IntInput) SystemVirtualSwitchOutput {
	return pulumi.All(o, i).ApplyT(func(vs []interface{}) *SystemVirtualSwitch {
		return vs[0].([]*SystemVirtualSwitch)[vs[1].(int)]
	}).(SystemVirtualSwitchOutput)
}

type SystemVirtualSwitchMapOutput struct{ *pulumi.OutputState }

func (SystemVirtualSwitchMapOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*map[string]*SystemVirtualSwitch)(nil)).Elem()
}

func (o SystemVirtualSwitchMapOutput) ToSystemVirtualSwitchMapOutput() SystemVirtualSwitchMapOutput {
	return o
}

func (o SystemVirtualSwitchMapOutput) ToSystemVirtualSwitchMapOutputWithContext(ctx context.Context) SystemVirtualSwitchMapOutput {
	return o
}

func (o SystemVirtualSwitchMapOutput) MapIndex(k pulumi.StringInput) SystemVirtualSwitchOutput {
	return pulumi.All(o, k).ApplyT(func(vs []interface{}) *SystemVirtualSwitch {
		return vs[0].(map[string]*SystemVirtualSwitch)[vs[1].(string)]
	}).(SystemVirtualSwitchOutput)
}

func init() {
	pulumi.RegisterInputType(reflect.TypeOf((*SystemVirtualSwitchInput)(nil)).Elem(), &SystemVirtualSwitch{})
	pulumi.RegisterInputType(reflect.TypeOf((*SystemVirtualSwitchArrayInput)(nil)).Elem(), SystemVirtualSwitchArray{})
	pulumi.RegisterInputType(reflect.TypeOf((*SystemVirtualSwitchMapInput)(nil)).Elem(), SystemVirtualSwitchMap{})
	pulumi.RegisterOutputType(SystemVirtualSwitchOutput{})
	pulumi.RegisterOutputType(SystemVirtualSwitchArrayOutput{})
	pulumi.RegisterOutputType(SystemVirtualSwitchMapOutput{})
}
