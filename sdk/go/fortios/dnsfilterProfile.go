// Code generated by the Pulumi Terraform Bridge (tfgen) Tool DO NOT EDIT.
// *** WARNING: Do not edit by hand unless you're certain you know what you are doing! ***

package fortios

import (
	"context"
	"reflect"

	"github.com/lubyou/pulumi-fortios/sdk/go/fortios/internal"
	"github.com/pulumi/pulumi/sdk/v3/go/pulumi"
	"github.com/pulumi/pulumi/sdk/v3/go/pulumix"
)

type DnsfilterProfile struct {
	pulumi.CustomResourceState

	BlockAction             pulumi.StringOutput                               `pulumi:"blockAction"`
	BlockBotnet             pulumi.StringOutput                               `pulumi:"blockBotnet"`
	Comment                 pulumi.StringPtrOutput                            `pulumi:"comment"`
	DnsTranslations         DnsfilterProfileDnsTranslationArrayOutput         `pulumi:"dnsTranslations"`
	DomainFilter            DnsfilterProfileDomainFilterOutput                `pulumi:"domainFilter"`
	DynamicSortSubtable     pulumi.StringPtrOutput                            `pulumi:"dynamicSortSubtable"`
	ExternalIpBlocklists    DnsfilterProfileExternalIpBlocklistArrayOutput    `pulumi:"externalIpBlocklists"`
	FtgdDns                 DnsfilterProfileFtgdDnsOutput                     `pulumi:"ftgdDns"`
	GetAllTables            pulumi.StringPtrOutput                            `pulumi:"getAllTables"`
	LogAllDomain            pulumi.StringOutput                               `pulumi:"logAllDomain"`
	Name                    pulumi.StringOutput                               `pulumi:"name"`
	RedirectPortal          pulumi.StringOutput                               `pulumi:"redirectPortal"`
	RedirectPortal6         pulumi.StringOutput                               `pulumi:"redirectPortal6"`
	SafeSearch              pulumi.StringOutput                               `pulumi:"safeSearch"`
	SdnsDomainLog           pulumi.StringOutput                               `pulumi:"sdnsDomainLog"`
	SdnsFtgdErrLog          pulumi.StringOutput                               `pulumi:"sdnsFtgdErrLog"`
	TransparentDnsDatabases DnsfilterProfileTransparentDnsDatabaseArrayOutput `pulumi:"transparentDnsDatabases"`
	Vdomparam               pulumi.StringPtrOutput                            `pulumi:"vdomparam"`
	YoutubeRestrict         pulumi.StringOutput                               `pulumi:"youtubeRestrict"`
}

// NewDnsfilterProfile registers a new resource with the given unique name, arguments, and options.
func NewDnsfilterProfile(ctx *pulumi.Context,
	name string, args *DnsfilterProfileArgs, opts ...pulumi.ResourceOption) (*DnsfilterProfile, error) {
	if args == nil {
		args = &DnsfilterProfileArgs{}
	}

	opts = internal.PkgResourceDefaultOpts(opts)
	var resource DnsfilterProfile
	err := ctx.RegisterResource("fortios:index/dnsfilterProfile:DnsfilterProfile", name, args, &resource, opts...)
	if err != nil {
		return nil, err
	}
	return &resource, nil
}

// GetDnsfilterProfile gets an existing DnsfilterProfile resource's state with the given name, ID, and optional
// state properties that are used to uniquely qualify the lookup (nil if not required).
func GetDnsfilterProfile(ctx *pulumi.Context,
	name string, id pulumi.IDInput, state *DnsfilterProfileState, opts ...pulumi.ResourceOption) (*DnsfilterProfile, error) {
	var resource DnsfilterProfile
	err := ctx.ReadResource("fortios:index/dnsfilterProfile:DnsfilterProfile", name, id, state, &resource, opts...)
	if err != nil {
		return nil, err
	}
	return &resource, nil
}

// Input properties used for looking up and filtering DnsfilterProfile resources.
type dnsfilterProfileState struct {
	BlockAction             *string                                  `pulumi:"blockAction"`
	BlockBotnet             *string                                  `pulumi:"blockBotnet"`
	Comment                 *string                                  `pulumi:"comment"`
	DnsTranslations         []DnsfilterProfileDnsTranslation         `pulumi:"dnsTranslations"`
	DomainFilter            *DnsfilterProfileDomainFilter            `pulumi:"domainFilter"`
	DynamicSortSubtable     *string                                  `pulumi:"dynamicSortSubtable"`
	ExternalIpBlocklists    []DnsfilterProfileExternalIpBlocklist    `pulumi:"externalIpBlocklists"`
	FtgdDns                 *DnsfilterProfileFtgdDns                 `pulumi:"ftgdDns"`
	GetAllTables            *string                                  `pulumi:"getAllTables"`
	LogAllDomain            *string                                  `pulumi:"logAllDomain"`
	Name                    *string                                  `pulumi:"name"`
	RedirectPortal          *string                                  `pulumi:"redirectPortal"`
	RedirectPortal6         *string                                  `pulumi:"redirectPortal6"`
	SafeSearch              *string                                  `pulumi:"safeSearch"`
	SdnsDomainLog           *string                                  `pulumi:"sdnsDomainLog"`
	SdnsFtgdErrLog          *string                                  `pulumi:"sdnsFtgdErrLog"`
	TransparentDnsDatabases []DnsfilterProfileTransparentDnsDatabase `pulumi:"transparentDnsDatabases"`
	Vdomparam               *string                                  `pulumi:"vdomparam"`
	YoutubeRestrict         *string                                  `pulumi:"youtubeRestrict"`
}

type DnsfilterProfileState struct {
	BlockAction             pulumi.StringPtrInput
	BlockBotnet             pulumi.StringPtrInput
	Comment                 pulumi.StringPtrInput
	DnsTranslations         DnsfilterProfileDnsTranslationArrayInput
	DomainFilter            DnsfilterProfileDomainFilterPtrInput
	DynamicSortSubtable     pulumi.StringPtrInput
	ExternalIpBlocklists    DnsfilterProfileExternalIpBlocklistArrayInput
	FtgdDns                 DnsfilterProfileFtgdDnsPtrInput
	GetAllTables            pulumi.StringPtrInput
	LogAllDomain            pulumi.StringPtrInput
	Name                    pulumi.StringPtrInput
	RedirectPortal          pulumi.StringPtrInput
	RedirectPortal6         pulumi.StringPtrInput
	SafeSearch              pulumi.StringPtrInput
	SdnsDomainLog           pulumi.StringPtrInput
	SdnsFtgdErrLog          pulumi.StringPtrInput
	TransparentDnsDatabases DnsfilterProfileTransparentDnsDatabaseArrayInput
	Vdomparam               pulumi.StringPtrInput
	YoutubeRestrict         pulumi.StringPtrInput
}

func (DnsfilterProfileState) ElementType() reflect.Type {
	return reflect.TypeOf((*dnsfilterProfileState)(nil)).Elem()
}

type dnsfilterProfileArgs struct {
	BlockAction             *string                                  `pulumi:"blockAction"`
	BlockBotnet             *string                                  `pulumi:"blockBotnet"`
	Comment                 *string                                  `pulumi:"comment"`
	DnsTranslations         []DnsfilterProfileDnsTranslation         `pulumi:"dnsTranslations"`
	DomainFilter            *DnsfilterProfileDomainFilter            `pulumi:"domainFilter"`
	DynamicSortSubtable     *string                                  `pulumi:"dynamicSortSubtable"`
	ExternalIpBlocklists    []DnsfilterProfileExternalIpBlocklist    `pulumi:"externalIpBlocklists"`
	FtgdDns                 *DnsfilterProfileFtgdDns                 `pulumi:"ftgdDns"`
	GetAllTables            *string                                  `pulumi:"getAllTables"`
	LogAllDomain            *string                                  `pulumi:"logAllDomain"`
	Name                    *string                                  `pulumi:"name"`
	RedirectPortal          *string                                  `pulumi:"redirectPortal"`
	RedirectPortal6         *string                                  `pulumi:"redirectPortal6"`
	SafeSearch              *string                                  `pulumi:"safeSearch"`
	SdnsDomainLog           *string                                  `pulumi:"sdnsDomainLog"`
	SdnsFtgdErrLog          *string                                  `pulumi:"sdnsFtgdErrLog"`
	TransparentDnsDatabases []DnsfilterProfileTransparentDnsDatabase `pulumi:"transparentDnsDatabases"`
	Vdomparam               *string                                  `pulumi:"vdomparam"`
	YoutubeRestrict         *string                                  `pulumi:"youtubeRestrict"`
}

// The set of arguments for constructing a DnsfilterProfile resource.
type DnsfilterProfileArgs struct {
	BlockAction             pulumi.StringPtrInput
	BlockBotnet             pulumi.StringPtrInput
	Comment                 pulumi.StringPtrInput
	DnsTranslations         DnsfilterProfileDnsTranslationArrayInput
	DomainFilter            DnsfilterProfileDomainFilterPtrInput
	DynamicSortSubtable     pulumi.StringPtrInput
	ExternalIpBlocklists    DnsfilterProfileExternalIpBlocklistArrayInput
	FtgdDns                 DnsfilterProfileFtgdDnsPtrInput
	GetAllTables            pulumi.StringPtrInput
	LogAllDomain            pulumi.StringPtrInput
	Name                    pulumi.StringPtrInput
	RedirectPortal          pulumi.StringPtrInput
	RedirectPortal6         pulumi.StringPtrInput
	SafeSearch              pulumi.StringPtrInput
	SdnsDomainLog           pulumi.StringPtrInput
	SdnsFtgdErrLog          pulumi.StringPtrInput
	TransparentDnsDatabases DnsfilterProfileTransparentDnsDatabaseArrayInput
	Vdomparam               pulumi.StringPtrInput
	YoutubeRestrict         pulumi.StringPtrInput
}

func (DnsfilterProfileArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*dnsfilterProfileArgs)(nil)).Elem()
}

type DnsfilterProfileInput interface {
	pulumi.Input

	ToDnsfilterProfileOutput() DnsfilterProfileOutput
	ToDnsfilterProfileOutputWithContext(ctx context.Context) DnsfilterProfileOutput
}

func (*DnsfilterProfile) ElementType() reflect.Type {
	return reflect.TypeOf((**DnsfilterProfile)(nil)).Elem()
}

func (i *DnsfilterProfile) ToDnsfilterProfileOutput() DnsfilterProfileOutput {
	return i.ToDnsfilterProfileOutputWithContext(context.Background())
}

func (i *DnsfilterProfile) ToDnsfilterProfileOutputWithContext(ctx context.Context) DnsfilterProfileOutput {
	return pulumi.ToOutputWithContext(ctx, i).(DnsfilterProfileOutput)
}

func (i *DnsfilterProfile) ToOutput(ctx context.Context) pulumix.Output[*DnsfilterProfile] {
	return pulumix.Output[*DnsfilterProfile]{
		OutputState: i.ToDnsfilterProfileOutputWithContext(ctx).OutputState,
	}
}

// DnsfilterProfileArrayInput is an input type that accepts DnsfilterProfileArray and DnsfilterProfileArrayOutput values.
// You can construct a concrete instance of `DnsfilterProfileArrayInput` via:
//
//	DnsfilterProfileArray{ DnsfilterProfileArgs{...} }
type DnsfilterProfileArrayInput interface {
	pulumi.Input

	ToDnsfilterProfileArrayOutput() DnsfilterProfileArrayOutput
	ToDnsfilterProfileArrayOutputWithContext(context.Context) DnsfilterProfileArrayOutput
}

type DnsfilterProfileArray []DnsfilterProfileInput

func (DnsfilterProfileArray) ElementType() reflect.Type {
	return reflect.TypeOf((*[]*DnsfilterProfile)(nil)).Elem()
}

func (i DnsfilterProfileArray) ToDnsfilterProfileArrayOutput() DnsfilterProfileArrayOutput {
	return i.ToDnsfilterProfileArrayOutputWithContext(context.Background())
}

func (i DnsfilterProfileArray) ToDnsfilterProfileArrayOutputWithContext(ctx context.Context) DnsfilterProfileArrayOutput {
	return pulumi.ToOutputWithContext(ctx, i).(DnsfilterProfileArrayOutput)
}

func (i DnsfilterProfileArray) ToOutput(ctx context.Context) pulumix.Output[[]*DnsfilterProfile] {
	return pulumix.Output[[]*DnsfilterProfile]{
		OutputState: i.ToDnsfilterProfileArrayOutputWithContext(ctx).OutputState,
	}
}

// DnsfilterProfileMapInput is an input type that accepts DnsfilterProfileMap and DnsfilterProfileMapOutput values.
// You can construct a concrete instance of `DnsfilterProfileMapInput` via:
//
//	DnsfilterProfileMap{ "key": DnsfilterProfileArgs{...} }
type DnsfilterProfileMapInput interface {
	pulumi.Input

	ToDnsfilterProfileMapOutput() DnsfilterProfileMapOutput
	ToDnsfilterProfileMapOutputWithContext(context.Context) DnsfilterProfileMapOutput
}

type DnsfilterProfileMap map[string]DnsfilterProfileInput

func (DnsfilterProfileMap) ElementType() reflect.Type {
	return reflect.TypeOf((*map[string]*DnsfilterProfile)(nil)).Elem()
}

func (i DnsfilterProfileMap) ToDnsfilterProfileMapOutput() DnsfilterProfileMapOutput {
	return i.ToDnsfilterProfileMapOutputWithContext(context.Background())
}

func (i DnsfilterProfileMap) ToDnsfilterProfileMapOutputWithContext(ctx context.Context) DnsfilterProfileMapOutput {
	return pulumi.ToOutputWithContext(ctx, i).(DnsfilterProfileMapOutput)
}

func (i DnsfilterProfileMap) ToOutput(ctx context.Context) pulumix.Output[map[string]*DnsfilterProfile] {
	return pulumix.Output[map[string]*DnsfilterProfile]{
		OutputState: i.ToDnsfilterProfileMapOutputWithContext(ctx).OutputState,
	}
}

type DnsfilterProfileOutput struct{ *pulumi.OutputState }

func (DnsfilterProfileOutput) ElementType() reflect.Type {
	return reflect.TypeOf((**DnsfilterProfile)(nil)).Elem()
}

func (o DnsfilterProfileOutput) ToDnsfilterProfileOutput() DnsfilterProfileOutput {
	return o
}

func (o DnsfilterProfileOutput) ToDnsfilterProfileOutputWithContext(ctx context.Context) DnsfilterProfileOutput {
	return o
}

func (o DnsfilterProfileOutput) ToOutput(ctx context.Context) pulumix.Output[*DnsfilterProfile] {
	return pulumix.Output[*DnsfilterProfile]{
		OutputState: o.OutputState,
	}
}

func (o DnsfilterProfileOutput) BlockAction() pulumi.StringOutput {
	return o.ApplyT(func(v *DnsfilterProfile) pulumi.StringOutput { return v.BlockAction }).(pulumi.StringOutput)
}

func (o DnsfilterProfileOutput) BlockBotnet() pulumi.StringOutput {
	return o.ApplyT(func(v *DnsfilterProfile) pulumi.StringOutput { return v.BlockBotnet }).(pulumi.StringOutput)
}

func (o DnsfilterProfileOutput) Comment() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *DnsfilterProfile) pulumi.StringPtrOutput { return v.Comment }).(pulumi.StringPtrOutput)
}

func (o DnsfilterProfileOutput) DnsTranslations() DnsfilterProfileDnsTranslationArrayOutput {
	return o.ApplyT(func(v *DnsfilterProfile) DnsfilterProfileDnsTranslationArrayOutput { return v.DnsTranslations }).(DnsfilterProfileDnsTranslationArrayOutput)
}

func (o DnsfilterProfileOutput) DomainFilter() DnsfilterProfileDomainFilterOutput {
	return o.ApplyT(func(v *DnsfilterProfile) DnsfilterProfileDomainFilterOutput { return v.DomainFilter }).(DnsfilterProfileDomainFilterOutput)
}

func (o DnsfilterProfileOutput) DynamicSortSubtable() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *DnsfilterProfile) pulumi.StringPtrOutput { return v.DynamicSortSubtable }).(pulumi.StringPtrOutput)
}

func (o DnsfilterProfileOutput) ExternalIpBlocklists() DnsfilterProfileExternalIpBlocklistArrayOutput {
	return o.ApplyT(func(v *DnsfilterProfile) DnsfilterProfileExternalIpBlocklistArrayOutput {
		return v.ExternalIpBlocklists
	}).(DnsfilterProfileExternalIpBlocklistArrayOutput)
}

func (o DnsfilterProfileOutput) FtgdDns() DnsfilterProfileFtgdDnsOutput {
	return o.ApplyT(func(v *DnsfilterProfile) DnsfilterProfileFtgdDnsOutput { return v.FtgdDns }).(DnsfilterProfileFtgdDnsOutput)
}

func (o DnsfilterProfileOutput) GetAllTables() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *DnsfilterProfile) pulumi.StringPtrOutput { return v.GetAllTables }).(pulumi.StringPtrOutput)
}

func (o DnsfilterProfileOutput) LogAllDomain() pulumi.StringOutput {
	return o.ApplyT(func(v *DnsfilterProfile) pulumi.StringOutput { return v.LogAllDomain }).(pulumi.StringOutput)
}

func (o DnsfilterProfileOutput) Name() pulumi.StringOutput {
	return o.ApplyT(func(v *DnsfilterProfile) pulumi.StringOutput { return v.Name }).(pulumi.StringOutput)
}

func (o DnsfilterProfileOutput) RedirectPortal() pulumi.StringOutput {
	return o.ApplyT(func(v *DnsfilterProfile) pulumi.StringOutput { return v.RedirectPortal }).(pulumi.StringOutput)
}

func (o DnsfilterProfileOutput) RedirectPortal6() pulumi.StringOutput {
	return o.ApplyT(func(v *DnsfilterProfile) pulumi.StringOutput { return v.RedirectPortal6 }).(pulumi.StringOutput)
}

func (o DnsfilterProfileOutput) SafeSearch() pulumi.StringOutput {
	return o.ApplyT(func(v *DnsfilterProfile) pulumi.StringOutput { return v.SafeSearch }).(pulumi.StringOutput)
}

func (o DnsfilterProfileOutput) SdnsDomainLog() pulumi.StringOutput {
	return o.ApplyT(func(v *DnsfilterProfile) pulumi.StringOutput { return v.SdnsDomainLog }).(pulumi.StringOutput)
}

func (o DnsfilterProfileOutput) SdnsFtgdErrLog() pulumi.StringOutput {
	return o.ApplyT(func(v *DnsfilterProfile) pulumi.StringOutput { return v.SdnsFtgdErrLog }).(pulumi.StringOutput)
}

func (o DnsfilterProfileOutput) TransparentDnsDatabases() DnsfilterProfileTransparentDnsDatabaseArrayOutput {
	return o.ApplyT(func(v *DnsfilterProfile) DnsfilterProfileTransparentDnsDatabaseArrayOutput {
		return v.TransparentDnsDatabases
	}).(DnsfilterProfileTransparentDnsDatabaseArrayOutput)
}

func (o DnsfilterProfileOutput) Vdomparam() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *DnsfilterProfile) pulumi.StringPtrOutput { return v.Vdomparam }).(pulumi.StringPtrOutput)
}

func (o DnsfilterProfileOutput) YoutubeRestrict() pulumi.StringOutput {
	return o.ApplyT(func(v *DnsfilterProfile) pulumi.StringOutput { return v.YoutubeRestrict }).(pulumi.StringOutput)
}

type DnsfilterProfileArrayOutput struct{ *pulumi.OutputState }

func (DnsfilterProfileArrayOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*[]*DnsfilterProfile)(nil)).Elem()
}

func (o DnsfilterProfileArrayOutput) ToDnsfilterProfileArrayOutput() DnsfilterProfileArrayOutput {
	return o
}

func (o DnsfilterProfileArrayOutput) ToDnsfilterProfileArrayOutputWithContext(ctx context.Context) DnsfilterProfileArrayOutput {
	return o
}

func (o DnsfilterProfileArrayOutput) ToOutput(ctx context.Context) pulumix.Output[[]*DnsfilterProfile] {
	return pulumix.Output[[]*DnsfilterProfile]{
		OutputState: o.OutputState,
	}
}

func (o DnsfilterProfileArrayOutput) Index(i pulumi.IntInput) DnsfilterProfileOutput {
	return pulumi.All(o, i).ApplyT(func(vs []interface{}) *DnsfilterProfile {
		return vs[0].([]*DnsfilterProfile)[vs[1].(int)]
	}).(DnsfilterProfileOutput)
}

type DnsfilterProfileMapOutput struct{ *pulumi.OutputState }

func (DnsfilterProfileMapOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*map[string]*DnsfilterProfile)(nil)).Elem()
}

func (o DnsfilterProfileMapOutput) ToDnsfilterProfileMapOutput() DnsfilterProfileMapOutput {
	return o
}

func (o DnsfilterProfileMapOutput) ToDnsfilterProfileMapOutputWithContext(ctx context.Context) DnsfilterProfileMapOutput {
	return o
}

func (o DnsfilterProfileMapOutput) ToOutput(ctx context.Context) pulumix.Output[map[string]*DnsfilterProfile] {
	return pulumix.Output[map[string]*DnsfilterProfile]{
		OutputState: o.OutputState,
	}
}

func (o DnsfilterProfileMapOutput) MapIndex(k pulumi.StringInput) DnsfilterProfileOutput {
	return pulumi.All(o, k).ApplyT(func(vs []interface{}) *DnsfilterProfile {
		return vs[0].(map[string]*DnsfilterProfile)[vs[1].(string)]
	}).(DnsfilterProfileOutput)
}

func init() {
	pulumi.RegisterInputType(reflect.TypeOf((*DnsfilterProfileInput)(nil)).Elem(), &DnsfilterProfile{})
	pulumi.RegisterInputType(reflect.TypeOf((*DnsfilterProfileArrayInput)(nil)).Elem(), DnsfilterProfileArray{})
	pulumi.RegisterInputType(reflect.TypeOf((*DnsfilterProfileMapInput)(nil)).Elem(), DnsfilterProfileMap{})
	pulumi.RegisterOutputType(DnsfilterProfileOutput{})
	pulumi.RegisterOutputType(DnsfilterProfileArrayOutput{})
	pulumi.RegisterOutputType(DnsfilterProfileMapOutput{})
}
