// Code generated by the Pulumi Terraform Bridge (tfgen) Tool DO NOT EDIT.
// *** WARNING: Do not edit by hand unless you're certain you know what you are doing! ***

package fortios

import (
	"context"
	"reflect"

	"github.com/lubyou/pulumi-fortios/sdk/go/fortios/internal"
	"github.com/pulumi/pulumi/sdk/v3/go/pulumi"
	"github.com/pulumi/pulumi/sdk/v3/go/pulumix"
)

type WirelessControllerHotspot20H2QpWanMetric struct {
	pulumi.CustomResourceState

	DownlinkLoad            pulumi.IntOutput       `pulumi:"downlinkLoad"`
	DownlinkSpeed           pulumi.IntOutput       `pulumi:"downlinkSpeed"`
	LinkAtCapacity          pulumi.StringOutput    `pulumi:"linkAtCapacity"`
	LinkStatus              pulumi.StringOutput    `pulumi:"linkStatus"`
	LoadMeasurementDuration pulumi.IntOutput       `pulumi:"loadMeasurementDuration"`
	Name                    pulumi.StringOutput    `pulumi:"name"`
	SymmetricWanLink        pulumi.StringOutput    `pulumi:"symmetricWanLink"`
	UplinkLoad              pulumi.IntOutput       `pulumi:"uplinkLoad"`
	UplinkSpeed             pulumi.IntOutput       `pulumi:"uplinkSpeed"`
	Vdomparam               pulumi.StringPtrOutput `pulumi:"vdomparam"`
}

// NewWirelessControllerHotspot20H2QpWanMetric registers a new resource with the given unique name, arguments, and options.
func NewWirelessControllerHotspot20H2QpWanMetric(ctx *pulumi.Context,
	name string, args *WirelessControllerHotspot20H2QpWanMetricArgs, opts ...pulumi.ResourceOption) (*WirelessControllerHotspot20H2QpWanMetric, error) {
	if args == nil {
		args = &WirelessControllerHotspot20H2QpWanMetricArgs{}
	}

	opts = internal.PkgResourceDefaultOpts(opts)
	var resource WirelessControllerHotspot20H2QpWanMetric
	err := ctx.RegisterResource("fortios:index/wirelessControllerHotspot20H2QpWanMetric:WirelessControllerHotspot20H2QpWanMetric", name, args, &resource, opts...)
	if err != nil {
		return nil, err
	}
	return &resource, nil
}

// GetWirelessControllerHotspot20H2QpWanMetric gets an existing WirelessControllerHotspot20H2QpWanMetric resource's state with the given name, ID, and optional
// state properties that are used to uniquely qualify the lookup (nil if not required).
func GetWirelessControllerHotspot20H2QpWanMetric(ctx *pulumi.Context,
	name string, id pulumi.IDInput, state *WirelessControllerHotspot20H2QpWanMetricState, opts ...pulumi.ResourceOption) (*WirelessControllerHotspot20H2QpWanMetric, error) {
	var resource WirelessControllerHotspot20H2QpWanMetric
	err := ctx.ReadResource("fortios:index/wirelessControllerHotspot20H2QpWanMetric:WirelessControllerHotspot20H2QpWanMetric", name, id, state, &resource, opts...)
	if err != nil {
		return nil, err
	}
	return &resource, nil
}

// Input properties used for looking up and filtering WirelessControllerHotspot20H2QpWanMetric resources.
type wirelessControllerHotspot20H2QpWanMetricState struct {
	DownlinkLoad            *int    `pulumi:"downlinkLoad"`
	DownlinkSpeed           *int    `pulumi:"downlinkSpeed"`
	LinkAtCapacity          *string `pulumi:"linkAtCapacity"`
	LinkStatus              *string `pulumi:"linkStatus"`
	LoadMeasurementDuration *int    `pulumi:"loadMeasurementDuration"`
	Name                    *string `pulumi:"name"`
	SymmetricWanLink        *string `pulumi:"symmetricWanLink"`
	UplinkLoad              *int    `pulumi:"uplinkLoad"`
	UplinkSpeed             *int    `pulumi:"uplinkSpeed"`
	Vdomparam               *string `pulumi:"vdomparam"`
}

type WirelessControllerHotspot20H2QpWanMetricState struct {
	DownlinkLoad            pulumi.IntPtrInput
	DownlinkSpeed           pulumi.IntPtrInput
	LinkAtCapacity          pulumi.StringPtrInput
	LinkStatus              pulumi.StringPtrInput
	LoadMeasurementDuration pulumi.IntPtrInput
	Name                    pulumi.StringPtrInput
	SymmetricWanLink        pulumi.StringPtrInput
	UplinkLoad              pulumi.IntPtrInput
	UplinkSpeed             pulumi.IntPtrInput
	Vdomparam               pulumi.StringPtrInput
}

func (WirelessControllerHotspot20H2QpWanMetricState) ElementType() reflect.Type {
	return reflect.TypeOf((*wirelessControllerHotspot20H2QpWanMetricState)(nil)).Elem()
}

type wirelessControllerHotspot20H2QpWanMetricArgs struct {
	DownlinkLoad            *int    `pulumi:"downlinkLoad"`
	DownlinkSpeed           *int    `pulumi:"downlinkSpeed"`
	LinkAtCapacity          *string `pulumi:"linkAtCapacity"`
	LinkStatus              *string `pulumi:"linkStatus"`
	LoadMeasurementDuration *int    `pulumi:"loadMeasurementDuration"`
	Name                    *string `pulumi:"name"`
	SymmetricWanLink        *string `pulumi:"symmetricWanLink"`
	UplinkLoad              *int    `pulumi:"uplinkLoad"`
	UplinkSpeed             *int    `pulumi:"uplinkSpeed"`
	Vdomparam               *string `pulumi:"vdomparam"`
}

// The set of arguments for constructing a WirelessControllerHotspot20H2QpWanMetric resource.
type WirelessControllerHotspot20H2QpWanMetricArgs struct {
	DownlinkLoad            pulumi.IntPtrInput
	DownlinkSpeed           pulumi.IntPtrInput
	LinkAtCapacity          pulumi.StringPtrInput
	LinkStatus              pulumi.StringPtrInput
	LoadMeasurementDuration pulumi.IntPtrInput
	Name                    pulumi.StringPtrInput
	SymmetricWanLink        pulumi.StringPtrInput
	UplinkLoad              pulumi.IntPtrInput
	UplinkSpeed             pulumi.IntPtrInput
	Vdomparam               pulumi.StringPtrInput
}

func (WirelessControllerHotspot20H2QpWanMetricArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*wirelessControllerHotspot20H2QpWanMetricArgs)(nil)).Elem()
}

type WirelessControllerHotspot20H2QpWanMetricInput interface {
	pulumi.Input

	ToWirelessControllerHotspot20H2QpWanMetricOutput() WirelessControllerHotspot20H2QpWanMetricOutput
	ToWirelessControllerHotspot20H2QpWanMetricOutputWithContext(ctx context.Context) WirelessControllerHotspot20H2QpWanMetricOutput
}

func (*WirelessControllerHotspot20H2QpWanMetric) ElementType() reflect.Type {
	return reflect.TypeOf((**WirelessControllerHotspot20H2QpWanMetric)(nil)).Elem()
}

func (i *WirelessControllerHotspot20H2QpWanMetric) ToWirelessControllerHotspot20H2QpWanMetricOutput() WirelessControllerHotspot20H2QpWanMetricOutput {
	return i.ToWirelessControllerHotspot20H2QpWanMetricOutputWithContext(context.Background())
}

func (i *WirelessControllerHotspot20H2QpWanMetric) ToWirelessControllerHotspot20H2QpWanMetricOutputWithContext(ctx context.Context) WirelessControllerHotspot20H2QpWanMetricOutput {
	return pulumi.ToOutputWithContext(ctx, i).(WirelessControllerHotspot20H2QpWanMetricOutput)
}

func (i *WirelessControllerHotspot20H2QpWanMetric) ToOutput(ctx context.Context) pulumix.Output[*WirelessControllerHotspot20H2QpWanMetric] {
	return pulumix.Output[*WirelessControllerHotspot20H2QpWanMetric]{
		OutputState: i.ToWirelessControllerHotspot20H2QpWanMetricOutputWithContext(ctx).OutputState,
	}
}

// WirelessControllerHotspot20H2QpWanMetricArrayInput is an input type that accepts WirelessControllerHotspot20H2QpWanMetricArray and WirelessControllerHotspot20H2QpWanMetricArrayOutput values.
// You can construct a concrete instance of `WirelessControllerHotspot20H2QpWanMetricArrayInput` via:
//
//	WirelessControllerHotspot20H2QpWanMetricArray{ WirelessControllerHotspot20H2QpWanMetricArgs{...} }
type WirelessControllerHotspot20H2QpWanMetricArrayInput interface {
	pulumi.Input

	ToWirelessControllerHotspot20H2QpWanMetricArrayOutput() WirelessControllerHotspot20H2QpWanMetricArrayOutput
	ToWirelessControllerHotspot20H2QpWanMetricArrayOutputWithContext(context.Context) WirelessControllerHotspot20H2QpWanMetricArrayOutput
}

type WirelessControllerHotspot20H2QpWanMetricArray []WirelessControllerHotspot20H2QpWanMetricInput

func (WirelessControllerHotspot20H2QpWanMetricArray) ElementType() reflect.Type {
	return reflect.TypeOf((*[]*WirelessControllerHotspot20H2QpWanMetric)(nil)).Elem()
}

func (i WirelessControllerHotspot20H2QpWanMetricArray) ToWirelessControllerHotspot20H2QpWanMetricArrayOutput() WirelessControllerHotspot20H2QpWanMetricArrayOutput {
	return i.ToWirelessControllerHotspot20H2QpWanMetricArrayOutputWithContext(context.Background())
}

func (i WirelessControllerHotspot20H2QpWanMetricArray) ToWirelessControllerHotspot20H2QpWanMetricArrayOutputWithContext(ctx context.Context) WirelessControllerHotspot20H2QpWanMetricArrayOutput {
	return pulumi.ToOutputWithContext(ctx, i).(WirelessControllerHotspot20H2QpWanMetricArrayOutput)
}

func (i WirelessControllerHotspot20H2QpWanMetricArray) ToOutput(ctx context.Context) pulumix.Output[[]*WirelessControllerHotspot20H2QpWanMetric] {
	return pulumix.Output[[]*WirelessControllerHotspot20H2QpWanMetric]{
		OutputState: i.ToWirelessControllerHotspot20H2QpWanMetricArrayOutputWithContext(ctx).OutputState,
	}
}

// WirelessControllerHotspot20H2QpWanMetricMapInput is an input type that accepts WirelessControllerHotspot20H2QpWanMetricMap and WirelessControllerHotspot20H2QpWanMetricMapOutput values.
// You can construct a concrete instance of `WirelessControllerHotspot20H2QpWanMetricMapInput` via:
//
//	WirelessControllerHotspot20H2QpWanMetricMap{ "key": WirelessControllerHotspot20H2QpWanMetricArgs{...} }
type WirelessControllerHotspot20H2QpWanMetricMapInput interface {
	pulumi.Input

	ToWirelessControllerHotspot20H2QpWanMetricMapOutput() WirelessControllerHotspot20H2QpWanMetricMapOutput
	ToWirelessControllerHotspot20H2QpWanMetricMapOutputWithContext(context.Context) WirelessControllerHotspot20H2QpWanMetricMapOutput
}

type WirelessControllerHotspot20H2QpWanMetricMap map[string]WirelessControllerHotspot20H2QpWanMetricInput

func (WirelessControllerHotspot20H2QpWanMetricMap) ElementType() reflect.Type {
	return reflect.TypeOf((*map[string]*WirelessControllerHotspot20H2QpWanMetric)(nil)).Elem()
}

func (i WirelessControllerHotspot20H2QpWanMetricMap) ToWirelessControllerHotspot20H2QpWanMetricMapOutput() WirelessControllerHotspot20H2QpWanMetricMapOutput {
	return i.ToWirelessControllerHotspot20H2QpWanMetricMapOutputWithContext(context.Background())
}

func (i WirelessControllerHotspot20H2QpWanMetricMap) ToWirelessControllerHotspot20H2QpWanMetricMapOutputWithContext(ctx context.Context) WirelessControllerHotspot20H2QpWanMetricMapOutput {
	return pulumi.ToOutputWithContext(ctx, i).(WirelessControllerHotspot20H2QpWanMetricMapOutput)
}

func (i WirelessControllerHotspot20H2QpWanMetricMap) ToOutput(ctx context.Context) pulumix.Output[map[string]*WirelessControllerHotspot20H2QpWanMetric] {
	return pulumix.Output[map[string]*WirelessControllerHotspot20H2QpWanMetric]{
		OutputState: i.ToWirelessControllerHotspot20H2QpWanMetricMapOutputWithContext(ctx).OutputState,
	}
}

type WirelessControllerHotspot20H2QpWanMetricOutput struct{ *pulumi.OutputState }

func (WirelessControllerHotspot20H2QpWanMetricOutput) ElementType() reflect.Type {
	return reflect.TypeOf((**WirelessControllerHotspot20H2QpWanMetric)(nil)).Elem()
}

func (o WirelessControllerHotspot20H2QpWanMetricOutput) ToWirelessControllerHotspot20H2QpWanMetricOutput() WirelessControllerHotspot20H2QpWanMetricOutput {
	return o
}

func (o WirelessControllerHotspot20H2QpWanMetricOutput) ToWirelessControllerHotspot20H2QpWanMetricOutputWithContext(ctx context.Context) WirelessControllerHotspot20H2QpWanMetricOutput {
	return o
}

func (o WirelessControllerHotspot20H2QpWanMetricOutput) ToOutput(ctx context.Context) pulumix.Output[*WirelessControllerHotspot20H2QpWanMetric] {
	return pulumix.Output[*WirelessControllerHotspot20H2QpWanMetric]{
		OutputState: o.OutputState,
	}
}

func (o WirelessControllerHotspot20H2QpWanMetricOutput) DownlinkLoad() pulumi.IntOutput {
	return o.ApplyT(func(v *WirelessControllerHotspot20H2QpWanMetric) pulumi.IntOutput { return v.DownlinkLoad }).(pulumi.IntOutput)
}

func (o WirelessControllerHotspot20H2QpWanMetricOutput) DownlinkSpeed() pulumi.IntOutput {
	return o.ApplyT(func(v *WirelessControllerHotspot20H2QpWanMetric) pulumi.IntOutput { return v.DownlinkSpeed }).(pulumi.IntOutput)
}

func (o WirelessControllerHotspot20H2QpWanMetricOutput) LinkAtCapacity() pulumi.StringOutput {
	return o.ApplyT(func(v *WirelessControllerHotspot20H2QpWanMetric) pulumi.StringOutput { return v.LinkAtCapacity }).(pulumi.StringOutput)
}

func (o WirelessControllerHotspot20H2QpWanMetricOutput) LinkStatus() pulumi.StringOutput {
	return o.ApplyT(func(v *WirelessControllerHotspot20H2QpWanMetric) pulumi.StringOutput { return v.LinkStatus }).(pulumi.StringOutput)
}

func (o WirelessControllerHotspot20H2QpWanMetricOutput) LoadMeasurementDuration() pulumi.IntOutput {
	return o.ApplyT(func(v *WirelessControllerHotspot20H2QpWanMetric) pulumi.IntOutput { return v.LoadMeasurementDuration }).(pulumi.IntOutput)
}

func (o WirelessControllerHotspot20H2QpWanMetricOutput) Name() pulumi.StringOutput {
	return o.ApplyT(func(v *WirelessControllerHotspot20H2QpWanMetric) pulumi.StringOutput { return v.Name }).(pulumi.StringOutput)
}

func (o WirelessControllerHotspot20H2QpWanMetricOutput) SymmetricWanLink() pulumi.StringOutput {
	return o.ApplyT(func(v *WirelessControllerHotspot20H2QpWanMetric) pulumi.StringOutput { return v.SymmetricWanLink }).(pulumi.StringOutput)
}

func (o WirelessControllerHotspot20H2QpWanMetricOutput) UplinkLoad() pulumi.IntOutput {
	return o.ApplyT(func(v *WirelessControllerHotspot20H2QpWanMetric) pulumi.IntOutput { return v.UplinkLoad }).(pulumi.IntOutput)
}

func (o WirelessControllerHotspot20H2QpWanMetricOutput) UplinkSpeed() pulumi.IntOutput {
	return o.ApplyT(func(v *WirelessControllerHotspot20H2QpWanMetric) pulumi.IntOutput { return v.UplinkSpeed }).(pulumi.IntOutput)
}

func (o WirelessControllerHotspot20H2QpWanMetricOutput) Vdomparam() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *WirelessControllerHotspot20H2QpWanMetric) pulumi.StringPtrOutput { return v.Vdomparam }).(pulumi.StringPtrOutput)
}

type WirelessControllerHotspot20H2QpWanMetricArrayOutput struct{ *pulumi.OutputState }

func (WirelessControllerHotspot20H2QpWanMetricArrayOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*[]*WirelessControllerHotspot20H2QpWanMetric)(nil)).Elem()
}

func (o WirelessControllerHotspot20H2QpWanMetricArrayOutput) ToWirelessControllerHotspot20H2QpWanMetricArrayOutput() WirelessControllerHotspot20H2QpWanMetricArrayOutput {
	return o
}

func (o WirelessControllerHotspot20H2QpWanMetricArrayOutput) ToWirelessControllerHotspot20H2QpWanMetricArrayOutputWithContext(ctx context.Context) WirelessControllerHotspot20H2QpWanMetricArrayOutput {
	return o
}

func (o WirelessControllerHotspot20H2QpWanMetricArrayOutput) ToOutput(ctx context.Context) pulumix.Output[[]*WirelessControllerHotspot20H2QpWanMetric] {
	return pulumix.Output[[]*WirelessControllerHotspot20H2QpWanMetric]{
		OutputState: o.OutputState,
	}
}

func (o WirelessControllerHotspot20H2QpWanMetricArrayOutput) Index(i pulumi.IntInput) WirelessControllerHotspot20H2QpWanMetricOutput {
	return pulumi.All(o, i).ApplyT(func(vs []interface{}) *WirelessControllerHotspot20H2QpWanMetric {
		return vs[0].([]*WirelessControllerHotspot20H2QpWanMetric)[vs[1].(int)]
	}).(WirelessControllerHotspot20H2QpWanMetricOutput)
}

type WirelessControllerHotspot20H2QpWanMetricMapOutput struct{ *pulumi.OutputState }

func (WirelessControllerHotspot20H2QpWanMetricMapOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*map[string]*WirelessControllerHotspot20H2QpWanMetric)(nil)).Elem()
}

func (o WirelessControllerHotspot20H2QpWanMetricMapOutput) ToWirelessControllerHotspot20H2QpWanMetricMapOutput() WirelessControllerHotspot20H2QpWanMetricMapOutput {
	return o
}

func (o WirelessControllerHotspot20H2QpWanMetricMapOutput) ToWirelessControllerHotspot20H2QpWanMetricMapOutputWithContext(ctx context.Context) WirelessControllerHotspot20H2QpWanMetricMapOutput {
	return o
}

func (o WirelessControllerHotspot20H2QpWanMetricMapOutput) ToOutput(ctx context.Context) pulumix.Output[map[string]*WirelessControllerHotspot20H2QpWanMetric] {
	return pulumix.Output[map[string]*WirelessControllerHotspot20H2QpWanMetric]{
		OutputState: o.OutputState,
	}
}

func (o WirelessControllerHotspot20H2QpWanMetricMapOutput) MapIndex(k pulumi.StringInput) WirelessControllerHotspot20H2QpWanMetricOutput {
	return pulumi.All(o, k).ApplyT(func(vs []interface{}) *WirelessControllerHotspot20H2QpWanMetric {
		return vs[0].(map[string]*WirelessControllerHotspot20H2QpWanMetric)[vs[1].(string)]
	}).(WirelessControllerHotspot20H2QpWanMetricOutput)
}

func init() {
	pulumi.RegisterInputType(reflect.TypeOf((*WirelessControllerHotspot20H2QpWanMetricInput)(nil)).Elem(), &WirelessControllerHotspot20H2QpWanMetric{})
	pulumi.RegisterInputType(reflect.TypeOf((*WirelessControllerHotspot20H2QpWanMetricArrayInput)(nil)).Elem(), WirelessControllerHotspot20H2QpWanMetricArray{})
	pulumi.RegisterInputType(reflect.TypeOf((*WirelessControllerHotspot20H2QpWanMetricMapInput)(nil)).Elem(), WirelessControllerHotspot20H2QpWanMetricMap{})
	pulumi.RegisterOutputType(WirelessControllerHotspot20H2QpWanMetricOutput{})
	pulumi.RegisterOutputType(WirelessControllerHotspot20H2QpWanMetricArrayOutput{})
	pulumi.RegisterOutputType(WirelessControllerHotspot20H2QpWanMetricMapOutput{})
}
