// Code generated by the Pulumi Terraform Bridge (tfgen) Tool DO NOT EDIT.
// *** WARNING: Do not edit by hand unless you're certain you know what you are doing! ***

package fortios

import (
	"context"
	"reflect"

	"github.com/pulumi/pulumi/sdk/v3/go/pulumi"
)

// Configure WAN metrics.
//
// ## Example Usage
//
// ```go
// package main
//
// import (
// 	"github.com/lubyou/pulumi-fortios/sdk/go/fortios"
// 	"github.com/pulumi/pulumi/sdk/v3/go/pulumi"
// )
//
// func main() {
// 	pulumi.Run(func(ctx *pulumi.Context) error {
// 		_, err := fortios.NewWirelessControllerHotspot20H2QpWanMetric(ctx, "trname", &fortios.WirelessControllerHotspot20H2QpWanMetricArgs{
// 			DownlinkLoad:            pulumi.Int(0),
// 			DownlinkSpeed:           pulumi.Int(2400),
// 			LinkAtCapacity:          pulumi.String("disable"),
// 			LinkStatus:              pulumi.String("up"),
// 			LoadMeasurementDuration: pulumi.Int(0),
// 			SymmetricWanLink:        pulumi.String("symmetric"),
// 			UplinkLoad:              pulumi.Int(0),
// 			UplinkSpeed:             pulumi.Int(2400),
// 		})
// 		if err != nil {
// 			return err
// 		}
// 		return nil
// 	})
// }
// ```
//
// ## Import
//
// WirelessControllerHotspot20 H2QpWanMetric can be imported using any of these accepted formats
//
// ```sh
//  $ pulumi import fortios:index/wirelessControllerHotspot20H2QpWanMetric:WirelessControllerHotspot20H2QpWanMetric labelname {{name}}
// ```
//
//  If you do not want to import arguments of block$ export "FORTIOS_IMPORT_TABLE"="false"
//
// ```sh
//  $ pulumi import fortios:index/wirelessControllerHotspot20H2QpWanMetric:WirelessControllerHotspot20H2QpWanMetric labelname {{name}}
// ```
//
//  $ unset "FORTIOS_IMPORT_TABLE"
type WirelessControllerHotspot20H2QpWanMetric struct {
	pulumi.CustomResourceState

	// Downlink load.
	DownlinkLoad pulumi.IntOutput `pulumi:"downlinkLoad"`
	// Downlink speed (in kilobits/s).
	DownlinkSpeed pulumi.IntOutput `pulumi:"downlinkSpeed"`
	// Link at capacity. Valid values: `enable`, `disable`.
	LinkAtCapacity pulumi.StringOutput `pulumi:"linkAtCapacity"`
	// Link status. Valid values: `up`, `down`, `in-test`.
	LinkStatus pulumi.StringOutput `pulumi:"linkStatus"`
	// Load measurement duration (in tenths of a second).
	LoadMeasurementDuration pulumi.IntOutput `pulumi:"loadMeasurementDuration"`
	// WAN metric name.
	Name pulumi.StringOutput `pulumi:"name"`
	// WAN link symmetry. Valid values: `symmetric`, `asymmetric`.
	SymmetricWanLink pulumi.StringOutput `pulumi:"symmetricWanLink"`
	// Uplink load.
	UplinkLoad pulumi.IntOutput `pulumi:"uplinkLoad"`
	// Uplink speed (in kilobits/s).
	UplinkSpeed pulumi.IntOutput `pulumi:"uplinkSpeed"`
	// Specifies the vdom to which the resource will be applied when the FortiGate unit is running in VDOM mode. Only one vdom can be specified. If you want to inherit the vdom configuration of the provider, please do not set this parameter.
	Vdomparam pulumi.StringPtrOutput `pulumi:"vdomparam"`
}

// NewWirelessControllerHotspot20H2QpWanMetric registers a new resource with the given unique name, arguments, and options.
func NewWirelessControllerHotspot20H2QpWanMetric(ctx *pulumi.Context,
	name string, args *WirelessControllerHotspot20H2QpWanMetricArgs, opts ...pulumi.ResourceOption) (*WirelessControllerHotspot20H2QpWanMetric, error) {
	if args == nil {
		args = &WirelessControllerHotspot20H2QpWanMetricArgs{}
	}

	opts = pkgResourceDefaultOpts(opts)
	var resource WirelessControllerHotspot20H2QpWanMetric
	err := ctx.RegisterResource("fortios:index/wirelessControllerHotspot20H2QpWanMetric:WirelessControllerHotspot20H2QpWanMetric", name, args, &resource, opts...)
	if err != nil {
		return nil, err
	}
	return &resource, nil
}

// GetWirelessControllerHotspot20H2QpWanMetric gets an existing WirelessControllerHotspot20H2QpWanMetric resource's state with the given name, ID, and optional
// state properties that are used to uniquely qualify the lookup (nil if not required).
func GetWirelessControllerHotspot20H2QpWanMetric(ctx *pulumi.Context,
	name string, id pulumi.IDInput, state *WirelessControllerHotspot20H2QpWanMetricState, opts ...pulumi.ResourceOption) (*WirelessControllerHotspot20H2QpWanMetric, error) {
	var resource WirelessControllerHotspot20H2QpWanMetric
	err := ctx.ReadResource("fortios:index/wirelessControllerHotspot20H2QpWanMetric:WirelessControllerHotspot20H2QpWanMetric", name, id, state, &resource, opts...)
	if err != nil {
		return nil, err
	}
	return &resource, nil
}

// Input properties used for looking up and filtering WirelessControllerHotspot20H2QpWanMetric resources.
type wirelessControllerHotspot20H2QpWanMetricState struct {
	// Downlink load.
	DownlinkLoad *int `pulumi:"downlinkLoad"`
	// Downlink speed (in kilobits/s).
	DownlinkSpeed *int `pulumi:"downlinkSpeed"`
	// Link at capacity. Valid values: `enable`, `disable`.
	LinkAtCapacity *string `pulumi:"linkAtCapacity"`
	// Link status. Valid values: `up`, `down`, `in-test`.
	LinkStatus *string `pulumi:"linkStatus"`
	// Load measurement duration (in tenths of a second).
	LoadMeasurementDuration *int `pulumi:"loadMeasurementDuration"`
	// WAN metric name.
	Name *string `pulumi:"name"`
	// WAN link symmetry. Valid values: `symmetric`, `asymmetric`.
	SymmetricWanLink *string `pulumi:"symmetricWanLink"`
	// Uplink load.
	UplinkLoad *int `pulumi:"uplinkLoad"`
	// Uplink speed (in kilobits/s).
	UplinkSpeed *int `pulumi:"uplinkSpeed"`
	// Specifies the vdom to which the resource will be applied when the FortiGate unit is running in VDOM mode. Only one vdom can be specified. If you want to inherit the vdom configuration of the provider, please do not set this parameter.
	Vdomparam *string `pulumi:"vdomparam"`
}

type WirelessControllerHotspot20H2QpWanMetricState struct {
	// Downlink load.
	DownlinkLoad pulumi.IntPtrInput
	// Downlink speed (in kilobits/s).
	DownlinkSpeed pulumi.IntPtrInput
	// Link at capacity. Valid values: `enable`, `disable`.
	LinkAtCapacity pulumi.StringPtrInput
	// Link status. Valid values: `up`, `down`, `in-test`.
	LinkStatus pulumi.StringPtrInput
	// Load measurement duration (in tenths of a second).
	LoadMeasurementDuration pulumi.IntPtrInput
	// WAN metric name.
	Name pulumi.StringPtrInput
	// WAN link symmetry. Valid values: `symmetric`, `asymmetric`.
	SymmetricWanLink pulumi.StringPtrInput
	// Uplink load.
	UplinkLoad pulumi.IntPtrInput
	// Uplink speed (in kilobits/s).
	UplinkSpeed pulumi.IntPtrInput
	// Specifies the vdom to which the resource will be applied when the FortiGate unit is running in VDOM mode. Only one vdom can be specified. If you want to inherit the vdom configuration of the provider, please do not set this parameter.
	Vdomparam pulumi.StringPtrInput
}

func (WirelessControllerHotspot20H2QpWanMetricState) ElementType() reflect.Type {
	return reflect.TypeOf((*wirelessControllerHotspot20H2QpWanMetricState)(nil)).Elem()
}

type wirelessControllerHotspot20H2QpWanMetricArgs struct {
	// Downlink load.
	DownlinkLoad *int `pulumi:"downlinkLoad"`
	// Downlink speed (in kilobits/s).
	DownlinkSpeed *int `pulumi:"downlinkSpeed"`
	// Link at capacity. Valid values: `enable`, `disable`.
	LinkAtCapacity *string `pulumi:"linkAtCapacity"`
	// Link status. Valid values: `up`, `down`, `in-test`.
	LinkStatus *string `pulumi:"linkStatus"`
	// Load measurement duration (in tenths of a second).
	LoadMeasurementDuration *int `pulumi:"loadMeasurementDuration"`
	// WAN metric name.
	Name *string `pulumi:"name"`
	// WAN link symmetry. Valid values: `symmetric`, `asymmetric`.
	SymmetricWanLink *string `pulumi:"symmetricWanLink"`
	// Uplink load.
	UplinkLoad *int `pulumi:"uplinkLoad"`
	// Uplink speed (in kilobits/s).
	UplinkSpeed *int `pulumi:"uplinkSpeed"`
	// Specifies the vdom to which the resource will be applied when the FortiGate unit is running in VDOM mode. Only one vdom can be specified. If you want to inherit the vdom configuration of the provider, please do not set this parameter.
	Vdomparam *string `pulumi:"vdomparam"`
}

// The set of arguments for constructing a WirelessControllerHotspot20H2QpWanMetric resource.
type WirelessControllerHotspot20H2QpWanMetricArgs struct {
	// Downlink load.
	DownlinkLoad pulumi.IntPtrInput
	// Downlink speed (in kilobits/s).
	DownlinkSpeed pulumi.IntPtrInput
	// Link at capacity. Valid values: `enable`, `disable`.
	LinkAtCapacity pulumi.StringPtrInput
	// Link status. Valid values: `up`, `down`, `in-test`.
	LinkStatus pulumi.StringPtrInput
	// Load measurement duration (in tenths of a second).
	LoadMeasurementDuration pulumi.IntPtrInput
	// WAN metric name.
	Name pulumi.StringPtrInput
	// WAN link symmetry. Valid values: `symmetric`, `asymmetric`.
	SymmetricWanLink pulumi.StringPtrInput
	// Uplink load.
	UplinkLoad pulumi.IntPtrInput
	// Uplink speed (in kilobits/s).
	UplinkSpeed pulumi.IntPtrInput
	// Specifies the vdom to which the resource will be applied when the FortiGate unit is running in VDOM mode. Only one vdom can be specified. If you want to inherit the vdom configuration of the provider, please do not set this parameter.
	Vdomparam pulumi.StringPtrInput
}

func (WirelessControllerHotspot20H2QpWanMetricArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*wirelessControllerHotspot20H2QpWanMetricArgs)(nil)).Elem()
}

type WirelessControllerHotspot20H2QpWanMetricInput interface {
	pulumi.Input

	ToWirelessControllerHotspot20H2QpWanMetricOutput() WirelessControllerHotspot20H2QpWanMetricOutput
	ToWirelessControllerHotspot20H2QpWanMetricOutputWithContext(ctx context.Context) WirelessControllerHotspot20H2QpWanMetricOutput
}

func (*WirelessControllerHotspot20H2QpWanMetric) ElementType() reflect.Type {
	return reflect.TypeOf((**WirelessControllerHotspot20H2QpWanMetric)(nil)).Elem()
}

func (i *WirelessControllerHotspot20H2QpWanMetric) ToWirelessControllerHotspot20H2QpWanMetricOutput() WirelessControllerHotspot20H2QpWanMetricOutput {
	return i.ToWirelessControllerHotspot20H2QpWanMetricOutputWithContext(context.Background())
}

func (i *WirelessControllerHotspot20H2QpWanMetric) ToWirelessControllerHotspot20H2QpWanMetricOutputWithContext(ctx context.Context) WirelessControllerHotspot20H2QpWanMetricOutput {
	return pulumi.ToOutputWithContext(ctx, i).(WirelessControllerHotspot20H2QpWanMetricOutput)
}

// WirelessControllerHotspot20H2QpWanMetricArrayInput is an input type that accepts WirelessControllerHotspot20H2QpWanMetricArray and WirelessControllerHotspot20H2QpWanMetricArrayOutput values.
// You can construct a concrete instance of `WirelessControllerHotspot20H2QpWanMetricArrayInput` via:
//
//          WirelessControllerHotspot20H2QpWanMetricArray{ WirelessControllerHotspot20H2QpWanMetricArgs{...} }
type WirelessControllerHotspot20H2QpWanMetricArrayInput interface {
	pulumi.Input

	ToWirelessControllerHotspot20H2QpWanMetricArrayOutput() WirelessControllerHotspot20H2QpWanMetricArrayOutput
	ToWirelessControllerHotspot20H2QpWanMetricArrayOutputWithContext(context.Context) WirelessControllerHotspot20H2QpWanMetricArrayOutput
}

type WirelessControllerHotspot20H2QpWanMetricArray []WirelessControllerHotspot20H2QpWanMetricInput

func (WirelessControllerHotspot20H2QpWanMetricArray) ElementType() reflect.Type {
	return reflect.TypeOf((*[]*WirelessControllerHotspot20H2QpWanMetric)(nil)).Elem()
}

func (i WirelessControllerHotspot20H2QpWanMetricArray) ToWirelessControllerHotspot20H2QpWanMetricArrayOutput() WirelessControllerHotspot20H2QpWanMetricArrayOutput {
	return i.ToWirelessControllerHotspot20H2QpWanMetricArrayOutputWithContext(context.Background())
}

func (i WirelessControllerHotspot20H2QpWanMetricArray) ToWirelessControllerHotspot20H2QpWanMetricArrayOutputWithContext(ctx context.Context) WirelessControllerHotspot20H2QpWanMetricArrayOutput {
	return pulumi.ToOutputWithContext(ctx, i).(WirelessControllerHotspot20H2QpWanMetricArrayOutput)
}

// WirelessControllerHotspot20H2QpWanMetricMapInput is an input type that accepts WirelessControllerHotspot20H2QpWanMetricMap and WirelessControllerHotspot20H2QpWanMetricMapOutput values.
// You can construct a concrete instance of `WirelessControllerHotspot20H2QpWanMetricMapInput` via:
//
//          WirelessControllerHotspot20H2QpWanMetricMap{ "key": WirelessControllerHotspot20H2QpWanMetricArgs{...} }
type WirelessControllerHotspot20H2QpWanMetricMapInput interface {
	pulumi.Input

	ToWirelessControllerHotspot20H2QpWanMetricMapOutput() WirelessControllerHotspot20H2QpWanMetricMapOutput
	ToWirelessControllerHotspot20H2QpWanMetricMapOutputWithContext(context.Context) WirelessControllerHotspot20H2QpWanMetricMapOutput
}

type WirelessControllerHotspot20H2QpWanMetricMap map[string]WirelessControllerHotspot20H2QpWanMetricInput

func (WirelessControllerHotspot20H2QpWanMetricMap) ElementType() reflect.Type {
	return reflect.TypeOf((*map[string]*WirelessControllerHotspot20H2QpWanMetric)(nil)).Elem()
}

func (i WirelessControllerHotspot20H2QpWanMetricMap) ToWirelessControllerHotspot20H2QpWanMetricMapOutput() WirelessControllerHotspot20H2QpWanMetricMapOutput {
	return i.ToWirelessControllerHotspot20H2QpWanMetricMapOutputWithContext(context.Background())
}

func (i WirelessControllerHotspot20H2QpWanMetricMap) ToWirelessControllerHotspot20H2QpWanMetricMapOutputWithContext(ctx context.Context) WirelessControllerHotspot20H2QpWanMetricMapOutput {
	return pulumi.ToOutputWithContext(ctx, i).(WirelessControllerHotspot20H2QpWanMetricMapOutput)
}

type WirelessControllerHotspot20H2QpWanMetricOutput struct{ *pulumi.OutputState }

func (WirelessControllerHotspot20H2QpWanMetricOutput) ElementType() reflect.Type {
	return reflect.TypeOf((**WirelessControllerHotspot20H2QpWanMetric)(nil)).Elem()
}

func (o WirelessControllerHotspot20H2QpWanMetricOutput) ToWirelessControllerHotspot20H2QpWanMetricOutput() WirelessControllerHotspot20H2QpWanMetricOutput {
	return o
}

func (o WirelessControllerHotspot20H2QpWanMetricOutput) ToWirelessControllerHotspot20H2QpWanMetricOutputWithContext(ctx context.Context) WirelessControllerHotspot20H2QpWanMetricOutput {
	return o
}

type WirelessControllerHotspot20H2QpWanMetricArrayOutput struct{ *pulumi.OutputState }

func (WirelessControllerHotspot20H2QpWanMetricArrayOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*[]*WirelessControllerHotspot20H2QpWanMetric)(nil)).Elem()
}

func (o WirelessControllerHotspot20H2QpWanMetricArrayOutput) ToWirelessControllerHotspot20H2QpWanMetricArrayOutput() WirelessControllerHotspot20H2QpWanMetricArrayOutput {
	return o
}

func (o WirelessControllerHotspot20H2QpWanMetricArrayOutput) ToWirelessControllerHotspot20H2QpWanMetricArrayOutputWithContext(ctx context.Context) WirelessControllerHotspot20H2QpWanMetricArrayOutput {
	return o
}

func (o WirelessControllerHotspot20H2QpWanMetricArrayOutput) Index(i pulumi.IntInput) WirelessControllerHotspot20H2QpWanMetricOutput {
	return pulumi.All(o, i).ApplyT(func(vs []interface{}) *WirelessControllerHotspot20H2QpWanMetric {
		return vs[0].([]*WirelessControllerHotspot20H2QpWanMetric)[vs[1].(int)]
	}).(WirelessControllerHotspot20H2QpWanMetricOutput)
}

type WirelessControllerHotspot20H2QpWanMetricMapOutput struct{ *pulumi.OutputState }

func (WirelessControllerHotspot20H2QpWanMetricMapOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*map[string]*WirelessControllerHotspot20H2QpWanMetric)(nil)).Elem()
}

func (o WirelessControllerHotspot20H2QpWanMetricMapOutput) ToWirelessControllerHotspot20H2QpWanMetricMapOutput() WirelessControllerHotspot20H2QpWanMetricMapOutput {
	return o
}

func (o WirelessControllerHotspot20H2QpWanMetricMapOutput) ToWirelessControllerHotspot20H2QpWanMetricMapOutputWithContext(ctx context.Context) WirelessControllerHotspot20H2QpWanMetricMapOutput {
	return o
}

func (o WirelessControllerHotspot20H2QpWanMetricMapOutput) MapIndex(k pulumi.StringInput) WirelessControllerHotspot20H2QpWanMetricOutput {
	return pulumi.All(o, k).ApplyT(func(vs []interface{}) *WirelessControllerHotspot20H2QpWanMetric {
		return vs[0].(map[string]*WirelessControllerHotspot20H2QpWanMetric)[vs[1].(string)]
	}).(WirelessControllerHotspot20H2QpWanMetricOutput)
}

func init() {
	pulumi.RegisterInputType(reflect.TypeOf((*WirelessControllerHotspot20H2QpWanMetricInput)(nil)).Elem(), &WirelessControllerHotspot20H2QpWanMetric{})
	pulumi.RegisterInputType(reflect.TypeOf((*WirelessControllerHotspot20H2QpWanMetricArrayInput)(nil)).Elem(), WirelessControllerHotspot20H2QpWanMetricArray{})
	pulumi.RegisterInputType(reflect.TypeOf((*WirelessControllerHotspot20H2QpWanMetricMapInput)(nil)).Elem(), WirelessControllerHotspot20H2QpWanMetricMap{})
	pulumi.RegisterOutputType(WirelessControllerHotspot20H2QpWanMetricOutput{})
	pulumi.RegisterOutputType(WirelessControllerHotspot20H2QpWanMetricArrayOutput{})
	pulumi.RegisterOutputType(WirelessControllerHotspot20H2QpWanMetricMapOutput{})
}
