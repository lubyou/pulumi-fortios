// *** WARNING: this file was generated by the Pulumi Terraform Bridge (tfgen) Tool. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

package fortios

import (
	"context"
	"reflect"

	"github.com/pkg/errors"
	"github.com/pulumi/pulumi/sdk/v3/go/pulumi"
)

// Configure IPsec manual keys.
//
// ## Example Usage
//
// ```go
// package main
//
// import (
// 	"github.com/pulumi/pulumi-fortios/sdk/go/fortios"
// 	"github.com/pulumi/pulumi/sdk/v3/go/pulumi"
// )
//
// func main() {
// 	pulumi.Run(func(ctx *pulumi.Context) error {
// 		_, err := fortios.NewVpnIpsecManualkeyInterface(ctx, "trname", &fortios.VpnIpsecManualkeyInterfaceArgs{
// 			AddrType:  pulumi.String("4"),
// 			AuthAlg:   pulumi.String("null"),
// 			AuthKey:   pulumi.String("-"),
// 			EncAlg:    pulumi.String("des"),
// 			EncKey:    pulumi.String("CECA2184ACADAEEF"),
// 			Interface: pulumi.String("port3"),
// 			IpVersion: pulumi.String("4"),
// 			LocalGw:   pulumi.String("0.0.0.0"),
// 			LocalGw6:  pulumi.String("::"),
// 			LocalSpi:  pulumi.String("0x100"),
// 			RemoteGw:  pulumi.String("2.2.2.2"),
// 			RemoteGw6: pulumi.String("::"),
// 			RemoteSpi: pulumi.String("0x100"),
// 		})
// 		if err != nil {
// 			return err
// 		}
// 		return nil
// 	})
// }
// ```
//
// ## Import
//
// VpnIpsec ManualkeyInterface can be imported using any of these accepted formats$ export "FORTIOS_IMPORT_TABLE"="true"
//
// ```sh
//  $ pulumi import fortios:index/vpnIpsecManualkeyInterface:VpnIpsecManualkeyInterface labelname {{name}}
// ```
//
//  $ unset "FORTIOS_IMPORT_TABLE"
type VpnIpsecManualkeyInterface struct {
	pulumi.CustomResourceState

	// IP version to use for IP packets. Valid values: `4`, `6`.
	AddrType pulumi.StringOutput `pulumi:"addrType"`
	// Authentication algorithm. Must be the same for both ends of the tunnel. Valid values: `null`, `md5`, `sha1`, `sha256`, `sha384`, `sha512`.
	AuthAlg pulumi.StringOutput `pulumi:"authAlg"`
	// Hexadecimal authentication key in 16-digit (8-byte) segments separated by hyphens.
	AuthKey pulumi.StringOutput `pulumi:"authKey"`
	// Encryption algorithm. Must be the same for both ends of the tunnel. Valid values: `null`, `des`, `3des`, `aes128`, `aes192`, `aes256`, `aria128`, `aria192`, `aria256`, `seed`.
	EncAlg pulumi.StringOutput `pulumi:"encAlg"`
	// Hexadecimal encryption key in 16-digit (8-byte) segments separated by hyphens.
	EncKey pulumi.StringOutput `pulumi:"encKey"`
	// Name of the physical, aggregate, or VLAN interface.
	Interface pulumi.StringOutput `pulumi:"interface"`
	// IP version to use for VPN interface. Valid values: `4`, `6`.
	IpVersion pulumi.StringOutput `pulumi:"ipVersion"`
	// IPv4 address of the local gateway's external interface.
	LocalGw pulumi.StringOutput `pulumi:"localGw"`
	// Local IPv6 address of VPN gateway.
	LocalGw6 pulumi.StringOutput `pulumi:"localGw6"`
	// Local SPI, a hexadecimal 8-digit (4-byte) tag. Discerns between two traffic streams with different encryption rules.
	LocalSpi pulumi.StringOutput `pulumi:"localSpi"`
	// IPsec tunnel name.
	Name pulumi.StringOutput `pulumi:"name"`
	// Enable/disable offloading IPsec VPN manual key sessions to NPUs. Valid values: `enable`, `disable`.
	NpuOffload pulumi.StringOutput `pulumi:"npuOffload"`
	// IPv4 address of the remote gateway's external interface.
	RemoteGw pulumi.StringOutput `pulumi:"remoteGw"`
	// Remote IPv6 address of VPN gateway.
	RemoteGw6 pulumi.StringOutput `pulumi:"remoteGw6"`
	// Remote SPI, a hexadecimal 8-digit (4-byte) tag. Discerns between two traffic streams with different encryption rules.
	RemoteSpi pulumi.StringOutput `pulumi:"remoteSpi"`
	// Specifies the vdom to which the resource will be applied when the FortiGate unit is running in VDOM mode. Only one vdom can be specified. If you want to inherit the vdom configuration of the provider, please do not set this parameter.
	Vdomparam pulumi.StringPtrOutput `pulumi:"vdomparam"`
}

// NewVpnIpsecManualkeyInterface registers a new resource with the given unique name, arguments, and options.
func NewVpnIpsecManualkeyInterface(ctx *pulumi.Context,
	name string, args *VpnIpsecManualkeyInterfaceArgs, opts ...pulumi.ResourceOption) (*VpnIpsecManualkeyInterface, error) {
	if args == nil {
		return nil, errors.New("missing one or more required arguments")
	}

	if args.AuthAlg == nil {
		return nil, errors.New("invalid value for required argument 'AuthAlg'")
	}
	if args.EncAlg == nil {
		return nil, errors.New("invalid value for required argument 'EncAlg'")
	}
	if args.Interface == nil {
		return nil, errors.New("invalid value for required argument 'Interface'")
	}
	if args.RemoteGw == nil {
		return nil, errors.New("invalid value for required argument 'RemoteGw'")
	}
	if args.RemoteGw6 == nil {
		return nil, errors.New("invalid value for required argument 'RemoteGw6'")
	}
	opts = pkgResourceDefaultOpts(opts)
	var resource VpnIpsecManualkeyInterface
	err := ctx.RegisterResource("fortios:index/vpnIpsecManualkeyInterface:VpnIpsecManualkeyInterface", name, args, &resource, opts...)
	if err != nil {
		return nil, err
	}
	return &resource, nil
}

// GetVpnIpsecManualkeyInterface gets an existing VpnIpsecManualkeyInterface resource's state with the given name, ID, and optional
// state properties that are used to uniquely qualify the lookup (nil if not required).
func GetVpnIpsecManualkeyInterface(ctx *pulumi.Context,
	name string, id pulumi.IDInput, state *VpnIpsecManualkeyInterfaceState, opts ...pulumi.ResourceOption) (*VpnIpsecManualkeyInterface, error) {
	var resource VpnIpsecManualkeyInterface
	err := ctx.ReadResource("fortios:index/vpnIpsecManualkeyInterface:VpnIpsecManualkeyInterface", name, id, state, &resource, opts...)
	if err != nil {
		return nil, err
	}
	return &resource, nil
}

// Input properties used for looking up and filtering VpnIpsecManualkeyInterface resources.
type vpnIpsecManualkeyInterfaceState struct {
	// IP version to use for IP packets. Valid values: `4`, `6`.
	AddrType *string `pulumi:"addrType"`
	// Authentication algorithm. Must be the same for both ends of the tunnel. Valid values: `null`, `md5`, `sha1`, `sha256`, `sha384`, `sha512`.
	AuthAlg *string `pulumi:"authAlg"`
	// Hexadecimal authentication key in 16-digit (8-byte) segments separated by hyphens.
	AuthKey *string `pulumi:"authKey"`
	// Encryption algorithm. Must be the same for both ends of the tunnel. Valid values: `null`, `des`, `3des`, `aes128`, `aes192`, `aes256`, `aria128`, `aria192`, `aria256`, `seed`.
	EncAlg *string `pulumi:"encAlg"`
	// Hexadecimal encryption key in 16-digit (8-byte) segments separated by hyphens.
	EncKey *string `pulumi:"encKey"`
	// Name of the physical, aggregate, or VLAN interface.
	Interface *string `pulumi:"interface"`
	// IP version to use for VPN interface. Valid values: `4`, `6`.
	IpVersion *string `pulumi:"ipVersion"`
	// IPv4 address of the local gateway's external interface.
	LocalGw *string `pulumi:"localGw"`
	// Local IPv6 address of VPN gateway.
	LocalGw6 *string `pulumi:"localGw6"`
	// Local SPI, a hexadecimal 8-digit (4-byte) tag. Discerns between two traffic streams with different encryption rules.
	LocalSpi *string `pulumi:"localSpi"`
	// IPsec tunnel name.
	Name *string `pulumi:"name"`
	// Enable/disable offloading IPsec VPN manual key sessions to NPUs. Valid values: `enable`, `disable`.
	NpuOffload *string `pulumi:"npuOffload"`
	// IPv4 address of the remote gateway's external interface.
	RemoteGw *string `pulumi:"remoteGw"`
	// Remote IPv6 address of VPN gateway.
	RemoteGw6 *string `pulumi:"remoteGw6"`
	// Remote SPI, a hexadecimal 8-digit (4-byte) tag. Discerns between two traffic streams with different encryption rules.
	RemoteSpi *string `pulumi:"remoteSpi"`
	// Specifies the vdom to which the resource will be applied when the FortiGate unit is running in VDOM mode. Only one vdom can be specified. If you want to inherit the vdom configuration of the provider, please do not set this parameter.
	Vdomparam *string `pulumi:"vdomparam"`
}

type VpnIpsecManualkeyInterfaceState struct {
	// IP version to use for IP packets. Valid values: `4`, `6`.
	AddrType pulumi.StringPtrInput
	// Authentication algorithm. Must be the same for both ends of the tunnel. Valid values: `null`, `md5`, `sha1`, `sha256`, `sha384`, `sha512`.
	AuthAlg pulumi.StringPtrInput
	// Hexadecimal authentication key in 16-digit (8-byte) segments separated by hyphens.
	AuthKey pulumi.StringPtrInput
	// Encryption algorithm. Must be the same for both ends of the tunnel. Valid values: `null`, `des`, `3des`, `aes128`, `aes192`, `aes256`, `aria128`, `aria192`, `aria256`, `seed`.
	EncAlg pulumi.StringPtrInput
	// Hexadecimal encryption key in 16-digit (8-byte) segments separated by hyphens.
	EncKey pulumi.StringPtrInput
	// Name of the physical, aggregate, or VLAN interface.
	Interface pulumi.StringPtrInput
	// IP version to use for VPN interface. Valid values: `4`, `6`.
	IpVersion pulumi.StringPtrInput
	// IPv4 address of the local gateway's external interface.
	LocalGw pulumi.StringPtrInput
	// Local IPv6 address of VPN gateway.
	LocalGw6 pulumi.StringPtrInput
	// Local SPI, a hexadecimal 8-digit (4-byte) tag. Discerns between two traffic streams with different encryption rules.
	LocalSpi pulumi.StringPtrInput
	// IPsec tunnel name.
	Name pulumi.StringPtrInput
	// Enable/disable offloading IPsec VPN manual key sessions to NPUs. Valid values: `enable`, `disable`.
	NpuOffload pulumi.StringPtrInput
	// IPv4 address of the remote gateway's external interface.
	RemoteGw pulumi.StringPtrInput
	// Remote IPv6 address of VPN gateway.
	RemoteGw6 pulumi.StringPtrInput
	// Remote SPI, a hexadecimal 8-digit (4-byte) tag. Discerns between two traffic streams with different encryption rules.
	RemoteSpi pulumi.StringPtrInput
	// Specifies the vdom to which the resource will be applied when the FortiGate unit is running in VDOM mode. Only one vdom can be specified. If you want to inherit the vdom configuration of the provider, please do not set this parameter.
	Vdomparam pulumi.StringPtrInput
}

func (VpnIpsecManualkeyInterfaceState) ElementType() reflect.Type {
	return reflect.TypeOf((*vpnIpsecManualkeyInterfaceState)(nil)).Elem()
}

type vpnIpsecManualkeyInterfaceArgs struct {
	// IP version to use for IP packets. Valid values: `4`, `6`.
	AddrType *string `pulumi:"addrType"`
	// Authentication algorithm. Must be the same for both ends of the tunnel. Valid values: `null`, `md5`, `sha1`, `sha256`, `sha384`, `sha512`.
	AuthAlg string `pulumi:"authAlg"`
	// Hexadecimal authentication key in 16-digit (8-byte) segments separated by hyphens.
	AuthKey *string `pulumi:"authKey"`
	// Encryption algorithm. Must be the same for both ends of the tunnel. Valid values: `null`, `des`, `3des`, `aes128`, `aes192`, `aes256`, `aria128`, `aria192`, `aria256`, `seed`.
	EncAlg string `pulumi:"encAlg"`
	// Hexadecimal encryption key in 16-digit (8-byte) segments separated by hyphens.
	EncKey *string `pulumi:"encKey"`
	// Name of the physical, aggregate, or VLAN interface.
	Interface string `pulumi:"interface"`
	// IP version to use for VPN interface. Valid values: `4`, `6`.
	IpVersion *string `pulumi:"ipVersion"`
	// IPv4 address of the local gateway's external interface.
	LocalGw *string `pulumi:"localGw"`
	// Local IPv6 address of VPN gateway.
	LocalGw6 *string `pulumi:"localGw6"`
	// Local SPI, a hexadecimal 8-digit (4-byte) tag. Discerns between two traffic streams with different encryption rules.
	LocalSpi *string `pulumi:"localSpi"`
	// IPsec tunnel name.
	Name *string `pulumi:"name"`
	// Enable/disable offloading IPsec VPN manual key sessions to NPUs. Valid values: `enable`, `disable`.
	NpuOffload *string `pulumi:"npuOffload"`
	// IPv4 address of the remote gateway's external interface.
	RemoteGw string `pulumi:"remoteGw"`
	// Remote IPv6 address of VPN gateway.
	RemoteGw6 string `pulumi:"remoteGw6"`
	// Remote SPI, a hexadecimal 8-digit (4-byte) tag. Discerns between two traffic streams with different encryption rules.
	RemoteSpi *string `pulumi:"remoteSpi"`
	// Specifies the vdom to which the resource will be applied when the FortiGate unit is running in VDOM mode. Only one vdom can be specified. If you want to inherit the vdom configuration of the provider, please do not set this parameter.
	Vdomparam *string `pulumi:"vdomparam"`
}

// The set of arguments for constructing a VpnIpsecManualkeyInterface resource.
type VpnIpsecManualkeyInterfaceArgs struct {
	// IP version to use for IP packets. Valid values: `4`, `6`.
	AddrType pulumi.StringPtrInput
	// Authentication algorithm. Must be the same for both ends of the tunnel. Valid values: `null`, `md5`, `sha1`, `sha256`, `sha384`, `sha512`.
	AuthAlg pulumi.StringInput
	// Hexadecimal authentication key in 16-digit (8-byte) segments separated by hyphens.
	AuthKey pulumi.StringPtrInput
	// Encryption algorithm. Must be the same for both ends of the tunnel. Valid values: `null`, `des`, `3des`, `aes128`, `aes192`, `aes256`, `aria128`, `aria192`, `aria256`, `seed`.
	EncAlg pulumi.StringInput
	// Hexadecimal encryption key in 16-digit (8-byte) segments separated by hyphens.
	EncKey pulumi.StringPtrInput
	// Name of the physical, aggregate, or VLAN interface.
	Interface pulumi.StringInput
	// IP version to use for VPN interface. Valid values: `4`, `6`.
	IpVersion pulumi.StringPtrInput
	// IPv4 address of the local gateway's external interface.
	LocalGw pulumi.StringPtrInput
	// Local IPv6 address of VPN gateway.
	LocalGw6 pulumi.StringPtrInput
	// Local SPI, a hexadecimal 8-digit (4-byte) tag. Discerns between two traffic streams with different encryption rules.
	LocalSpi pulumi.StringPtrInput
	// IPsec tunnel name.
	Name pulumi.StringPtrInput
	// Enable/disable offloading IPsec VPN manual key sessions to NPUs. Valid values: `enable`, `disable`.
	NpuOffload pulumi.StringPtrInput
	// IPv4 address of the remote gateway's external interface.
	RemoteGw pulumi.StringInput
	// Remote IPv6 address of VPN gateway.
	RemoteGw6 pulumi.StringInput
	// Remote SPI, a hexadecimal 8-digit (4-byte) tag. Discerns between two traffic streams with different encryption rules.
	RemoteSpi pulumi.StringPtrInput
	// Specifies the vdom to which the resource will be applied when the FortiGate unit is running in VDOM mode. Only one vdom can be specified. If you want to inherit the vdom configuration of the provider, please do not set this parameter.
	Vdomparam pulumi.StringPtrInput
}

func (VpnIpsecManualkeyInterfaceArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*vpnIpsecManualkeyInterfaceArgs)(nil)).Elem()
}

type VpnIpsecManualkeyInterfaceInput interface {
	pulumi.Input

	ToVpnIpsecManualkeyInterfaceOutput() VpnIpsecManualkeyInterfaceOutput
	ToVpnIpsecManualkeyInterfaceOutputWithContext(ctx context.Context) VpnIpsecManualkeyInterfaceOutput
}

func (*VpnIpsecManualkeyInterface) ElementType() reflect.Type {
	return reflect.TypeOf((**VpnIpsecManualkeyInterface)(nil)).Elem()
}

func (i *VpnIpsecManualkeyInterface) ToVpnIpsecManualkeyInterfaceOutput() VpnIpsecManualkeyInterfaceOutput {
	return i.ToVpnIpsecManualkeyInterfaceOutputWithContext(context.Background())
}

func (i *VpnIpsecManualkeyInterface) ToVpnIpsecManualkeyInterfaceOutputWithContext(ctx context.Context) VpnIpsecManualkeyInterfaceOutput {
	return pulumi.ToOutputWithContext(ctx, i).(VpnIpsecManualkeyInterfaceOutput)
}

// VpnIpsecManualkeyInterfaceArrayInput is an input type that accepts VpnIpsecManualkeyInterfaceArray and VpnIpsecManualkeyInterfaceArrayOutput values.
// You can construct a concrete instance of `VpnIpsecManualkeyInterfaceArrayInput` via:
//
//          VpnIpsecManualkeyInterfaceArray{ VpnIpsecManualkeyInterfaceArgs{...} }
type VpnIpsecManualkeyInterfaceArrayInput interface {
	pulumi.Input

	ToVpnIpsecManualkeyInterfaceArrayOutput() VpnIpsecManualkeyInterfaceArrayOutput
	ToVpnIpsecManualkeyInterfaceArrayOutputWithContext(context.Context) VpnIpsecManualkeyInterfaceArrayOutput
}

type VpnIpsecManualkeyInterfaceArray []VpnIpsecManualkeyInterfaceInput

func (VpnIpsecManualkeyInterfaceArray) ElementType() reflect.Type {
	return reflect.TypeOf((*[]*VpnIpsecManualkeyInterface)(nil)).Elem()
}

func (i VpnIpsecManualkeyInterfaceArray) ToVpnIpsecManualkeyInterfaceArrayOutput() VpnIpsecManualkeyInterfaceArrayOutput {
	return i.ToVpnIpsecManualkeyInterfaceArrayOutputWithContext(context.Background())
}

func (i VpnIpsecManualkeyInterfaceArray) ToVpnIpsecManualkeyInterfaceArrayOutputWithContext(ctx context.Context) VpnIpsecManualkeyInterfaceArrayOutput {
	return pulumi.ToOutputWithContext(ctx, i).(VpnIpsecManualkeyInterfaceArrayOutput)
}

// VpnIpsecManualkeyInterfaceMapInput is an input type that accepts VpnIpsecManualkeyInterfaceMap and VpnIpsecManualkeyInterfaceMapOutput values.
// You can construct a concrete instance of `VpnIpsecManualkeyInterfaceMapInput` via:
//
//          VpnIpsecManualkeyInterfaceMap{ "key": VpnIpsecManualkeyInterfaceArgs{...} }
type VpnIpsecManualkeyInterfaceMapInput interface {
	pulumi.Input

	ToVpnIpsecManualkeyInterfaceMapOutput() VpnIpsecManualkeyInterfaceMapOutput
	ToVpnIpsecManualkeyInterfaceMapOutputWithContext(context.Context) VpnIpsecManualkeyInterfaceMapOutput
}

type VpnIpsecManualkeyInterfaceMap map[string]VpnIpsecManualkeyInterfaceInput

func (VpnIpsecManualkeyInterfaceMap) ElementType() reflect.Type {
	return reflect.TypeOf((*map[string]*VpnIpsecManualkeyInterface)(nil)).Elem()
}

func (i VpnIpsecManualkeyInterfaceMap) ToVpnIpsecManualkeyInterfaceMapOutput() VpnIpsecManualkeyInterfaceMapOutput {
	return i.ToVpnIpsecManualkeyInterfaceMapOutputWithContext(context.Background())
}

func (i VpnIpsecManualkeyInterfaceMap) ToVpnIpsecManualkeyInterfaceMapOutputWithContext(ctx context.Context) VpnIpsecManualkeyInterfaceMapOutput {
	return pulumi.ToOutputWithContext(ctx, i).(VpnIpsecManualkeyInterfaceMapOutput)
}

type VpnIpsecManualkeyInterfaceOutput struct{ *pulumi.OutputState }

func (VpnIpsecManualkeyInterfaceOutput) ElementType() reflect.Type {
	return reflect.TypeOf((**VpnIpsecManualkeyInterface)(nil)).Elem()
}

func (o VpnIpsecManualkeyInterfaceOutput) ToVpnIpsecManualkeyInterfaceOutput() VpnIpsecManualkeyInterfaceOutput {
	return o
}

func (o VpnIpsecManualkeyInterfaceOutput) ToVpnIpsecManualkeyInterfaceOutputWithContext(ctx context.Context) VpnIpsecManualkeyInterfaceOutput {
	return o
}

type VpnIpsecManualkeyInterfaceArrayOutput struct{ *pulumi.OutputState }

func (VpnIpsecManualkeyInterfaceArrayOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*[]*VpnIpsecManualkeyInterface)(nil)).Elem()
}

func (o VpnIpsecManualkeyInterfaceArrayOutput) ToVpnIpsecManualkeyInterfaceArrayOutput() VpnIpsecManualkeyInterfaceArrayOutput {
	return o
}

func (o VpnIpsecManualkeyInterfaceArrayOutput) ToVpnIpsecManualkeyInterfaceArrayOutputWithContext(ctx context.Context) VpnIpsecManualkeyInterfaceArrayOutput {
	return o
}

func (o VpnIpsecManualkeyInterfaceArrayOutput) Index(i pulumi.IntInput) VpnIpsecManualkeyInterfaceOutput {
	return pulumi.All(o, i).ApplyT(func(vs []interface{}) *VpnIpsecManualkeyInterface {
		return vs[0].([]*VpnIpsecManualkeyInterface)[vs[1].(int)]
	}).(VpnIpsecManualkeyInterfaceOutput)
}

type VpnIpsecManualkeyInterfaceMapOutput struct{ *pulumi.OutputState }

func (VpnIpsecManualkeyInterfaceMapOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*map[string]*VpnIpsecManualkeyInterface)(nil)).Elem()
}

func (o VpnIpsecManualkeyInterfaceMapOutput) ToVpnIpsecManualkeyInterfaceMapOutput() VpnIpsecManualkeyInterfaceMapOutput {
	return o
}

func (o VpnIpsecManualkeyInterfaceMapOutput) ToVpnIpsecManualkeyInterfaceMapOutputWithContext(ctx context.Context) VpnIpsecManualkeyInterfaceMapOutput {
	return o
}

func (o VpnIpsecManualkeyInterfaceMapOutput) MapIndex(k pulumi.StringInput) VpnIpsecManualkeyInterfaceOutput {
	return pulumi.All(o, k).ApplyT(func(vs []interface{}) *VpnIpsecManualkeyInterface {
		return vs[0].(map[string]*VpnIpsecManualkeyInterface)[vs[1].(string)]
	}).(VpnIpsecManualkeyInterfaceOutput)
}

func init() {
	pulumi.RegisterInputType(reflect.TypeOf((*VpnIpsecManualkeyInterfaceInput)(nil)).Elem(), &VpnIpsecManualkeyInterface{})
	pulumi.RegisterInputType(reflect.TypeOf((*VpnIpsecManualkeyInterfaceArrayInput)(nil)).Elem(), VpnIpsecManualkeyInterfaceArray{})
	pulumi.RegisterInputType(reflect.TypeOf((*VpnIpsecManualkeyInterfaceMapInput)(nil)).Elem(), VpnIpsecManualkeyInterfaceMap{})
	pulumi.RegisterOutputType(VpnIpsecManualkeyInterfaceOutput{})
	pulumi.RegisterOutputType(VpnIpsecManualkeyInterfaceArrayOutput{})
	pulumi.RegisterOutputType(VpnIpsecManualkeyInterfaceMapOutput{})
}
