// *** WARNING: this file was generated by the Pulumi Terraform Bridge (tfgen) Tool. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

package fortios

import (
	"context"
	"reflect"

	"github.com/pkg/errors"
	"github.com/pulumi/pulumi/sdk/v3/go/pulumi"
)

// Configure system PTP information.
//
// ## Example Usage
//
// ```go
// package main
//
// import (
// 	"github.com/pulumi/pulumi-fortios/sdk/go/fortios"
// 	"github.com/pulumi/pulumi/sdk/v3/go/pulumi"
// )
//
// func main() {
// 	pulumi.Run(func(ctx *pulumi.Context) error {
// 		_, err := fortios.NewSystemPtp(ctx, "trname", &fortios.SystemPtpArgs{
// 			DelayMechanism:  pulumi.String("E2E"),
// 			Interface:       pulumi.String("port3"),
// 			Mode:            pulumi.String("multicast"),
// 			RequestInterval: pulumi.Int(1),
// 			Status:          pulumi.String("enable"),
// 		})
// 		if err != nil {
// 			return err
// 		}
// 		return nil
// 	})
// }
// ```
//
// ## Import
//
// System Ptp can be imported using any of these accepted formats$ export "FORTIOS_IMPORT_TABLE"="true"
//
// ```sh
//  $ pulumi import fortios:index/systemPtp:SystemPtp labelname SystemPtp
// ```
//
//  $ unset "FORTIOS_IMPORT_TABLE"
type SystemPtp struct {
	pulumi.CustomResourceState

	// End to end delay detection or peer to peer delay detection. Valid values: `E2E`, `P2P`.
	DelayMechanism pulumi.StringOutput `pulumi:"delayMechanism"`
	// true or false, set this parameter to true when using dynamic forEach + toset to configure and sort sub-tables, please do not set this parameter when configuring static sub-tables.
	DynamicSortSubtable pulumi.StringPtrOutput `pulumi:"dynamicSortSubtable"`
	// PTP slave will reply through this interface.
	Interface pulumi.StringOutput `pulumi:"interface"`
	// Multicast transmission or hybrid transmission. Valid values: `multicast`, `hybrid`.
	Mode pulumi.StringOutput `pulumi:"mode"`
	// The delay request value is the logarithmic mean interval in seconds between the delay request messages sent by the slave to the master.
	RequestInterval pulumi.IntOutput `pulumi:"requestInterval"`
	// FortiGate interface(s) with PTP server mode enabled. Devices on your network can contact these interfaces for PTP services. The structure of `serverInterface` block is documented below.
	ServerInterfaces SystemPtpServerInterfaceArrayOutput `pulumi:"serverInterfaces"`
	// Enable/disable FortiGate PTP server mode. Your FortiGate becomes an PTP server for other devices on your network. Valid values: `enable`, `disable`.
	ServerMode pulumi.StringOutput `pulumi:"serverMode"`
	// Enable/disable setting the FortiGate system time by synchronizing with an PTP Server. Valid values: `enable`, `disable`.
	Status pulumi.StringOutput `pulumi:"status"`
	// Specifies the vdom to which the resource will be applied when the FortiGate unit is running in VDOM mode. Only one vdom can be specified. If you want to inherit the vdom configuration of the provider, please do not set this parameter.
	Vdomparam pulumi.StringPtrOutput `pulumi:"vdomparam"`
}

// NewSystemPtp registers a new resource with the given unique name, arguments, and options.
func NewSystemPtp(ctx *pulumi.Context,
	name string, args *SystemPtpArgs, opts ...pulumi.ResourceOption) (*SystemPtp, error) {
	if args == nil {
		return nil, errors.New("missing one or more required arguments")
	}

	if args.Interface == nil {
		return nil, errors.New("invalid value for required argument 'Interface'")
	}
	opts = pkgResourceDefaultOpts(opts)
	var resource SystemPtp
	err := ctx.RegisterResource("fortios:index/systemPtp:SystemPtp", name, args, &resource, opts...)
	if err != nil {
		return nil, err
	}
	return &resource, nil
}

// GetSystemPtp gets an existing SystemPtp resource's state with the given name, ID, and optional
// state properties that are used to uniquely qualify the lookup (nil if not required).
func GetSystemPtp(ctx *pulumi.Context,
	name string, id pulumi.IDInput, state *SystemPtpState, opts ...pulumi.ResourceOption) (*SystemPtp, error) {
	var resource SystemPtp
	err := ctx.ReadResource("fortios:index/systemPtp:SystemPtp", name, id, state, &resource, opts...)
	if err != nil {
		return nil, err
	}
	return &resource, nil
}

// Input properties used for looking up and filtering SystemPtp resources.
type systemPtpState struct {
	// End to end delay detection or peer to peer delay detection. Valid values: `E2E`, `P2P`.
	DelayMechanism *string `pulumi:"delayMechanism"`
	// true or false, set this parameter to true when using dynamic forEach + toset to configure and sort sub-tables, please do not set this parameter when configuring static sub-tables.
	DynamicSortSubtable *string `pulumi:"dynamicSortSubtable"`
	// PTP slave will reply through this interface.
	Interface *string `pulumi:"interface"`
	// Multicast transmission or hybrid transmission. Valid values: `multicast`, `hybrid`.
	Mode *string `pulumi:"mode"`
	// The delay request value is the logarithmic mean interval in seconds between the delay request messages sent by the slave to the master.
	RequestInterval *int `pulumi:"requestInterval"`
	// FortiGate interface(s) with PTP server mode enabled. Devices on your network can contact these interfaces for PTP services. The structure of `serverInterface` block is documented below.
	ServerInterfaces []SystemPtpServerInterface `pulumi:"serverInterfaces"`
	// Enable/disable FortiGate PTP server mode. Your FortiGate becomes an PTP server for other devices on your network. Valid values: `enable`, `disable`.
	ServerMode *string `pulumi:"serverMode"`
	// Enable/disable setting the FortiGate system time by synchronizing with an PTP Server. Valid values: `enable`, `disable`.
	Status *string `pulumi:"status"`
	// Specifies the vdom to which the resource will be applied when the FortiGate unit is running in VDOM mode. Only one vdom can be specified. If you want to inherit the vdom configuration of the provider, please do not set this parameter.
	Vdomparam *string `pulumi:"vdomparam"`
}

type SystemPtpState struct {
	// End to end delay detection or peer to peer delay detection. Valid values: `E2E`, `P2P`.
	DelayMechanism pulumi.StringPtrInput
	// true or false, set this parameter to true when using dynamic forEach + toset to configure and sort sub-tables, please do not set this parameter when configuring static sub-tables.
	DynamicSortSubtable pulumi.StringPtrInput
	// PTP slave will reply through this interface.
	Interface pulumi.StringPtrInput
	// Multicast transmission or hybrid transmission. Valid values: `multicast`, `hybrid`.
	Mode pulumi.StringPtrInput
	// The delay request value is the logarithmic mean interval in seconds between the delay request messages sent by the slave to the master.
	RequestInterval pulumi.IntPtrInput
	// FortiGate interface(s) with PTP server mode enabled. Devices on your network can contact these interfaces for PTP services. The structure of `serverInterface` block is documented below.
	ServerInterfaces SystemPtpServerInterfaceArrayInput
	// Enable/disable FortiGate PTP server mode. Your FortiGate becomes an PTP server for other devices on your network. Valid values: `enable`, `disable`.
	ServerMode pulumi.StringPtrInput
	// Enable/disable setting the FortiGate system time by synchronizing with an PTP Server. Valid values: `enable`, `disable`.
	Status pulumi.StringPtrInput
	// Specifies the vdom to which the resource will be applied when the FortiGate unit is running in VDOM mode. Only one vdom can be specified. If you want to inherit the vdom configuration of the provider, please do not set this parameter.
	Vdomparam pulumi.StringPtrInput
}

func (SystemPtpState) ElementType() reflect.Type {
	return reflect.TypeOf((*systemPtpState)(nil)).Elem()
}

type systemPtpArgs struct {
	// End to end delay detection or peer to peer delay detection. Valid values: `E2E`, `P2P`.
	DelayMechanism *string `pulumi:"delayMechanism"`
	// true or false, set this parameter to true when using dynamic forEach + toset to configure and sort sub-tables, please do not set this parameter when configuring static sub-tables.
	DynamicSortSubtable *string `pulumi:"dynamicSortSubtable"`
	// PTP slave will reply through this interface.
	Interface string `pulumi:"interface"`
	// Multicast transmission or hybrid transmission. Valid values: `multicast`, `hybrid`.
	Mode *string `pulumi:"mode"`
	// The delay request value is the logarithmic mean interval in seconds between the delay request messages sent by the slave to the master.
	RequestInterval *int `pulumi:"requestInterval"`
	// FortiGate interface(s) with PTP server mode enabled. Devices on your network can contact these interfaces for PTP services. The structure of `serverInterface` block is documented below.
	ServerInterfaces []SystemPtpServerInterface `pulumi:"serverInterfaces"`
	// Enable/disable FortiGate PTP server mode. Your FortiGate becomes an PTP server for other devices on your network. Valid values: `enable`, `disable`.
	ServerMode *string `pulumi:"serverMode"`
	// Enable/disable setting the FortiGate system time by synchronizing with an PTP Server. Valid values: `enable`, `disable`.
	Status *string `pulumi:"status"`
	// Specifies the vdom to which the resource will be applied when the FortiGate unit is running in VDOM mode. Only one vdom can be specified. If you want to inherit the vdom configuration of the provider, please do not set this parameter.
	Vdomparam *string `pulumi:"vdomparam"`
}

// The set of arguments for constructing a SystemPtp resource.
type SystemPtpArgs struct {
	// End to end delay detection or peer to peer delay detection. Valid values: `E2E`, `P2P`.
	DelayMechanism pulumi.StringPtrInput
	// true or false, set this parameter to true when using dynamic forEach + toset to configure and sort sub-tables, please do not set this parameter when configuring static sub-tables.
	DynamicSortSubtable pulumi.StringPtrInput
	// PTP slave will reply through this interface.
	Interface pulumi.StringInput
	// Multicast transmission or hybrid transmission. Valid values: `multicast`, `hybrid`.
	Mode pulumi.StringPtrInput
	// The delay request value is the logarithmic mean interval in seconds between the delay request messages sent by the slave to the master.
	RequestInterval pulumi.IntPtrInput
	// FortiGate interface(s) with PTP server mode enabled. Devices on your network can contact these interfaces for PTP services. The structure of `serverInterface` block is documented below.
	ServerInterfaces SystemPtpServerInterfaceArrayInput
	// Enable/disable FortiGate PTP server mode. Your FortiGate becomes an PTP server for other devices on your network. Valid values: `enable`, `disable`.
	ServerMode pulumi.StringPtrInput
	// Enable/disable setting the FortiGate system time by synchronizing with an PTP Server. Valid values: `enable`, `disable`.
	Status pulumi.StringPtrInput
	// Specifies the vdom to which the resource will be applied when the FortiGate unit is running in VDOM mode. Only one vdom can be specified. If you want to inherit the vdom configuration of the provider, please do not set this parameter.
	Vdomparam pulumi.StringPtrInput
}

func (SystemPtpArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*systemPtpArgs)(nil)).Elem()
}

type SystemPtpInput interface {
	pulumi.Input

	ToSystemPtpOutput() SystemPtpOutput
	ToSystemPtpOutputWithContext(ctx context.Context) SystemPtpOutput
}

func (*SystemPtp) ElementType() reflect.Type {
	return reflect.TypeOf((**SystemPtp)(nil)).Elem()
}

func (i *SystemPtp) ToSystemPtpOutput() SystemPtpOutput {
	return i.ToSystemPtpOutputWithContext(context.Background())
}

func (i *SystemPtp) ToSystemPtpOutputWithContext(ctx context.Context) SystemPtpOutput {
	return pulumi.ToOutputWithContext(ctx, i).(SystemPtpOutput)
}

// SystemPtpArrayInput is an input type that accepts SystemPtpArray and SystemPtpArrayOutput values.
// You can construct a concrete instance of `SystemPtpArrayInput` via:
//
//          SystemPtpArray{ SystemPtpArgs{...} }
type SystemPtpArrayInput interface {
	pulumi.Input

	ToSystemPtpArrayOutput() SystemPtpArrayOutput
	ToSystemPtpArrayOutputWithContext(context.Context) SystemPtpArrayOutput
}

type SystemPtpArray []SystemPtpInput

func (SystemPtpArray) ElementType() reflect.Type {
	return reflect.TypeOf((*[]*SystemPtp)(nil)).Elem()
}

func (i SystemPtpArray) ToSystemPtpArrayOutput() SystemPtpArrayOutput {
	return i.ToSystemPtpArrayOutputWithContext(context.Background())
}

func (i SystemPtpArray) ToSystemPtpArrayOutputWithContext(ctx context.Context) SystemPtpArrayOutput {
	return pulumi.ToOutputWithContext(ctx, i).(SystemPtpArrayOutput)
}

// SystemPtpMapInput is an input type that accepts SystemPtpMap and SystemPtpMapOutput values.
// You can construct a concrete instance of `SystemPtpMapInput` via:
//
//          SystemPtpMap{ "key": SystemPtpArgs{...} }
type SystemPtpMapInput interface {
	pulumi.Input

	ToSystemPtpMapOutput() SystemPtpMapOutput
	ToSystemPtpMapOutputWithContext(context.Context) SystemPtpMapOutput
}

type SystemPtpMap map[string]SystemPtpInput

func (SystemPtpMap) ElementType() reflect.Type {
	return reflect.TypeOf((*map[string]*SystemPtp)(nil)).Elem()
}

func (i SystemPtpMap) ToSystemPtpMapOutput() SystemPtpMapOutput {
	return i.ToSystemPtpMapOutputWithContext(context.Background())
}

func (i SystemPtpMap) ToSystemPtpMapOutputWithContext(ctx context.Context) SystemPtpMapOutput {
	return pulumi.ToOutputWithContext(ctx, i).(SystemPtpMapOutput)
}

type SystemPtpOutput struct{ *pulumi.OutputState }

func (SystemPtpOutput) ElementType() reflect.Type {
	return reflect.TypeOf((**SystemPtp)(nil)).Elem()
}

func (o SystemPtpOutput) ToSystemPtpOutput() SystemPtpOutput {
	return o
}

func (o SystemPtpOutput) ToSystemPtpOutputWithContext(ctx context.Context) SystemPtpOutput {
	return o
}

type SystemPtpArrayOutput struct{ *pulumi.OutputState }

func (SystemPtpArrayOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*[]*SystemPtp)(nil)).Elem()
}

func (o SystemPtpArrayOutput) ToSystemPtpArrayOutput() SystemPtpArrayOutput {
	return o
}

func (o SystemPtpArrayOutput) ToSystemPtpArrayOutputWithContext(ctx context.Context) SystemPtpArrayOutput {
	return o
}

func (o SystemPtpArrayOutput) Index(i pulumi.IntInput) SystemPtpOutput {
	return pulumi.All(o, i).ApplyT(func(vs []interface{}) *SystemPtp {
		return vs[0].([]*SystemPtp)[vs[1].(int)]
	}).(SystemPtpOutput)
}

type SystemPtpMapOutput struct{ *pulumi.OutputState }

func (SystemPtpMapOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*map[string]*SystemPtp)(nil)).Elem()
}

func (o SystemPtpMapOutput) ToSystemPtpMapOutput() SystemPtpMapOutput {
	return o
}

func (o SystemPtpMapOutput) ToSystemPtpMapOutputWithContext(ctx context.Context) SystemPtpMapOutput {
	return o
}

func (o SystemPtpMapOutput) MapIndex(k pulumi.StringInput) SystemPtpOutput {
	return pulumi.All(o, k).ApplyT(func(vs []interface{}) *SystemPtp {
		return vs[0].(map[string]*SystemPtp)[vs[1].(string)]
	}).(SystemPtpOutput)
}

func init() {
	pulumi.RegisterInputType(reflect.TypeOf((*SystemPtpInput)(nil)).Elem(), &SystemPtp{})
	pulumi.RegisterInputType(reflect.TypeOf((*SystemPtpArrayInput)(nil)).Elem(), SystemPtpArray{})
	pulumi.RegisterInputType(reflect.TypeOf((*SystemPtpMapInput)(nil)).Elem(), SystemPtpMap{})
	pulumi.RegisterOutputType(SystemPtpOutput{})
	pulumi.RegisterOutputType(SystemPtpArrayOutput{})
	pulumi.RegisterOutputType(SystemPtpMapOutput{})
}
