// Code generated by the Pulumi Terraform Bridge (tfgen) Tool DO NOT EDIT.
// *** WARNING: Do not edit by hand unless you're certain you know what you are doing! ***

package fortios

import (
	"context"
	"reflect"

	"errors"
	"github.com/lubyou/pulumi-fortios/sdk/go/fortios/internal"
	"github.com/pulumi/pulumi/sdk/v3/go/pulumi"
	"github.com/pulumi/pulumi/sdk/v3/go/pulumix"
)

type SystemPtp struct {
	pulumi.CustomResourceState

	DelayMechanism      pulumi.StringOutput                 `pulumi:"delayMechanism"`
	DynamicSortSubtable pulumi.StringPtrOutput              `pulumi:"dynamicSortSubtable"`
	GetAllTables        pulumi.StringPtrOutput              `pulumi:"getAllTables"`
	Interface           pulumi.StringOutput                 `pulumi:"interface"`
	Mode                pulumi.StringOutput                 `pulumi:"mode"`
	RequestInterval     pulumi.IntOutput                    `pulumi:"requestInterval"`
	ServerInterfaces    SystemPtpServerInterfaceArrayOutput `pulumi:"serverInterfaces"`
	ServerMode          pulumi.StringOutput                 `pulumi:"serverMode"`
	Status              pulumi.StringOutput                 `pulumi:"status"`
	Vdomparam           pulumi.StringPtrOutput              `pulumi:"vdomparam"`
}

// NewSystemPtp registers a new resource with the given unique name, arguments, and options.
func NewSystemPtp(ctx *pulumi.Context,
	name string, args *SystemPtpArgs, opts ...pulumi.ResourceOption) (*SystemPtp, error) {
	if args == nil {
		return nil, errors.New("missing one or more required arguments")
	}

	if args.Interface == nil {
		return nil, errors.New("invalid value for required argument 'Interface'")
	}
	opts = internal.PkgResourceDefaultOpts(opts)
	var resource SystemPtp
	err := ctx.RegisterResource("fortios:index/systemPtp:SystemPtp", name, args, &resource, opts...)
	if err != nil {
		return nil, err
	}
	return &resource, nil
}

// GetSystemPtp gets an existing SystemPtp resource's state with the given name, ID, and optional
// state properties that are used to uniquely qualify the lookup (nil if not required).
func GetSystemPtp(ctx *pulumi.Context,
	name string, id pulumi.IDInput, state *SystemPtpState, opts ...pulumi.ResourceOption) (*SystemPtp, error) {
	var resource SystemPtp
	err := ctx.ReadResource("fortios:index/systemPtp:SystemPtp", name, id, state, &resource, opts...)
	if err != nil {
		return nil, err
	}
	return &resource, nil
}

// Input properties used for looking up and filtering SystemPtp resources.
type systemPtpState struct {
	DelayMechanism      *string                    `pulumi:"delayMechanism"`
	DynamicSortSubtable *string                    `pulumi:"dynamicSortSubtable"`
	GetAllTables        *string                    `pulumi:"getAllTables"`
	Interface           *string                    `pulumi:"interface"`
	Mode                *string                    `pulumi:"mode"`
	RequestInterval     *int                       `pulumi:"requestInterval"`
	ServerInterfaces    []SystemPtpServerInterface `pulumi:"serverInterfaces"`
	ServerMode          *string                    `pulumi:"serverMode"`
	Status              *string                    `pulumi:"status"`
	Vdomparam           *string                    `pulumi:"vdomparam"`
}

type SystemPtpState struct {
	DelayMechanism      pulumi.StringPtrInput
	DynamicSortSubtable pulumi.StringPtrInput
	GetAllTables        pulumi.StringPtrInput
	Interface           pulumi.StringPtrInput
	Mode                pulumi.StringPtrInput
	RequestInterval     pulumi.IntPtrInput
	ServerInterfaces    SystemPtpServerInterfaceArrayInput
	ServerMode          pulumi.StringPtrInput
	Status              pulumi.StringPtrInput
	Vdomparam           pulumi.StringPtrInput
}

func (SystemPtpState) ElementType() reflect.Type {
	return reflect.TypeOf((*systemPtpState)(nil)).Elem()
}

type systemPtpArgs struct {
	DelayMechanism      *string                    `pulumi:"delayMechanism"`
	DynamicSortSubtable *string                    `pulumi:"dynamicSortSubtable"`
	GetAllTables        *string                    `pulumi:"getAllTables"`
	Interface           string                     `pulumi:"interface"`
	Mode                *string                    `pulumi:"mode"`
	RequestInterval     *int                       `pulumi:"requestInterval"`
	ServerInterfaces    []SystemPtpServerInterface `pulumi:"serverInterfaces"`
	ServerMode          *string                    `pulumi:"serverMode"`
	Status              *string                    `pulumi:"status"`
	Vdomparam           *string                    `pulumi:"vdomparam"`
}

// The set of arguments for constructing a SystemPtp resource.
type SystemPtpArgs struct {
	DelayMechanism      pulumi.StringPtrInput
	DynamicSortSubtable pulumi.StringPtrInput
	GetAllTables        pulumi.StringPtrInput
	Interface           pulumi.StringInput
	Mode                pulumi.StringPtrInput
	RequestInterval     pulumi.IntPtrInput
	ServerInterfaces    SystemPtpServerInterfaceArrayInput
	ServerMode          pulumi.StringPtrInput
	Status              pulumi.StringPtrInput
	Vdomparam           pulumi.StringPtrInput
}

func (SystemPtpArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*systemPtpArgs)(nil)).Elem()
}

type SystemPtpInput interface {
	pulumi.Input

	ToSystemPtpOutput() SystemPtpOutput
	ToSystemPtpOutputWithContext(ctx context.Context) SystemPtpOutput
}

func (*SystemPtp) ElementType() reflect.Type {
	return reflect.TypeOf((**SystemPtp)(nil)).Elem()
}

func (i *SystemPtp) ToSystemPtpOutput() SystemPtpOutput {
	return i.ToSystemPtpOutputWithContext(context.Background())
}

func (i *SystemPtp) ToSystemPtpOutputWithContext(ctx context.Context) SystemPtpOutput {
	return pulumi.ToOutputWithContext(ctx, i).(SystemPtpOutput)
}

func (i *SystemPtp) ToOutput(ctx context.Context) pulumix.Output[*SystemPtp] {
	return pulumix.Output[*SystemPtp]{
		OutputState: i.ToSystemPtpOutputWithContext(ctx).OutputState,
	}
}

// SystemPtpArrayInput is an input type that accepts SystemPtpArray and SystemPtpArrayOutput values.
// You can construct a concrete instance of `SystemPtpArrayInput` via:
//
//	SystemPtpArray{ SystemPtpArgs{...} }
type SystemPtpArrayInput interface {
	pulumi.Input

	ToSystemPtpArrayOutput() SystemPtpArrayOutput
	ToSystemPtpArrayOutputWithContext(context.Context) SystemPtpArrayOutput
}

type SystemPtpArray []SystemPtpInput

func (SystemPtpArray) ElementType() reflect.Type {
	return reflect.TypeOf((*[]*SystemPtp)(nil)).Elem()
}

func (i SystemPtpArray) ToSystemPtpArrayOutput() SystemPtpArrayOutput {
	return i.ToSystemPtpArrayOutputWithContext(context.Background())
}

func (i SystemPtpArray) ToSystemPtpArrayOutputWithContext(ctx context.Context) SystemPtpArrayOutput {
	return pulumi.ToOutputWithContext(ctx, i).(SystemPtpArrayOutput)
}

func (i SystemPtpArray) ToOutput(ctx context.Context) pulumix.Output[[]*SystemPtp] {
	return pulumix.Output[[]*SystemPtp]{
		OutputState: i.ToSystemPtpArrayOutputWithContext(ctx).OutputState,
	}
}

// SystemPtpMapInput is an input type that accepts SystemPtpMap and SystemPtpMapOutput values.
// You can construct a concrete instance of `SystemPtpMapInput` via:
//
//	SystemPtpMap{ "key": SystemPtpArgs{...} }
type SystemPtpMapInput interface {
	pulumi.Input

	ToSystemPtpMapOutput() SystemPtpMapOutput
	ToSystemPtpMapOutputWithContext(context.Context) SystemPtpMapOutput
}

type SystemPtpMap map[string]SystemPtpInput

func (SystemPtpMap) ElementType() reflect.Type {
	return reflect.TypeOf((*map[string]*SystemPtp)(nil)).Elem()
}

func (i SystemPtpMap) ToSystemPtpMapOutput() SystemPtpMapOutput {
	return i.ToSystemPtpMapOutputWithContext(context.Background())
}

func (i SystemPtpMap) ToSystemPtpMapOutputWithContext(ctx context.Context) SystemPtpMapOutput {
	return pulumi.ToOutputWithContext(ctx, i).(SystemPtpMapOutput)
}

func (i SystemPtpMap) ToOutput(ctx context.Context) pulumix.Output[map[string]*SystemPtp] {
	return pulumix.Output[map[string]*SystemPtp]{
		OutputState: i.ToSystemPtpMapOutputWithContext(ctx).OutputState,
	}
}

type SystemPtpOutput struct{ *pulumi.OutputState }

func (SystemPtpOutput) ElementType() reflect.Type {
	return reflect.TypeOf((**SystemPtp)(nil)).Elem()
}

func (o SystemPtpOutput) ToSystemPtpOutput() SystemPtpOutput {
	return o
}

func (o SystemPtpOutput) ToSystemPtpOutputWithContext(ctx context.Context) SystemPtpOutput {
	return o
}

func (o SystemPtpOutput) ToOutput(ctx context.Context) pulumix.Output[*SystemPtp] {
	return pulumix.Output[*SystemPtp]{
		OutputState: o.OutputState,
	}
}

func (o SystemPtpOutput) DelayMechanism() pulumi.StringOutput {
	return o.ApplyT(func(v *SystemPtp) pulumi.StringOutput { return v.DelayMechanism }).(pulumi.StringOutput)
}

func (o SystemPtpOutput) DynamicSortSubtable() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *SystemPtp) pulumi.StringPtrOutput { return v.DynamicSortSubtable }).(pulumi.StringPtrOutput)
}

func (o SystemPtpOutput) GetAllTables() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *SystemPtp) pulumi.StringPtrOutput { return v.GetAllTables }).(pulumi.StringPtrOutput)
}

func (o SystemPtpOutput) Interface() pulumi.StringOutput {
	return o.ApplyT(func(v *SystemPtp) pulumi.StringOutput { return v.Interface }).(pulumi.StringOutput)
}

func (o SystemPtpOutput) Mode() pulumi.StringOutput {
	return o.ApplyT(func(v *SystemPtp) pulumi.StringOutput { return v.Mode }).(pulumi.StringOutput)
}

func (o SystemPtpOutput) RequestInterval() pulumi.IntOutput {
	return o.ApplyT(func(v *SystemPtp) pulumi.IntOutput { return v.RequestInterval }).(pulumi.IntOutput)
}

func (o SystemPtpOutput) ServerInterfaces() SystemPtpServerInterfaceArrayOutput {
	return o.ApplyT(func(v *SystemPtp) SystemPtpServerInterfaceArrayOutput { return v.ServerInterfaces }).(SystemPtpServerInterfaceArrayOutput)
}

func (o SystemPtpOutput) ServerMode() pulumi.StringOutput {
	return o.ApplyT(func(v *SystemPtp) pulumi.StringOutput { return v.ServerMode }).(pulumi.StringOutput)
}

func (o SystemPtpOutput) Status() pulumi.StringOutput {
	return o.ApplyT(func(v *SystemPtp) pulumi.StringOutput { return v.Status }).(pulumi.StringOutput)
}

func (o SystemPtpOutput) Vdomparam() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *SystemPtp) pulumi.StringPtrOutput { return v.Vdomparam }).(pulumi.StringPtrOutput)
}

type SystemPtpArrayOutput struct{ *pulumi.OutputState }

func (SystemPtpArrayOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*[]*SystemPtp)(nil)).Elem()
}

func (o SystemPtpArrayOutput) ToSystemPtpArrayOutput() SystemPtpArrayOutput {
	return o
}

func (o SystemPtpArrayOutput) ToSystemPtpArrayOutputWithContext(ctx context.Context) SystemPtpArrayOutput {
	return o
}

func (o SystemPtpArrayOutput) ToOutput(ctx context.Context) pulumix.Output[[]*SystemPtp] {
	return pulumix.Output[[]*SystemPtp]{
		OutputState: o.OutputState,
	}
}

func (o SystemPtpArrayOutput) Index(i pulumi.IntInput) SystemPtpOutput {
	return pulumi.All(o, i).ApplyT(func(vs []interface{}) *SystemPtp {
		return vs[0].([]*SystemPtp)[vs[1].(int)]
	}).(SystemPtpOutput)
}

type SystemPtpMapOutput struct{ *pulumi.OutputState }

func (SystemPtpMapOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*map[string]*SystemPtp)(nil)).Elem()
}

func (o SystemPtpMapOutput) ToSystemPtpMapOutput() SystemPtpMapOutput {
	return o
}

func (o SystemPtpMapOutput) ToSystemPtpMapOutputWithContext(ctx context.Context) SystemPtpMapOutput {
	return o
}

func (o SystemPtpMapOutput) ToOutput(ctx context.Context) pulumix.Output[map[string]*SystemPtp] {
	return pulumix.Output[map[string]*SystemPtp]{
		OutputState: o.OutputState,
	}
}

func (o SystemPtpMapOutput) MapIndex(k pulumi.StringInput) SystemPtpOutput {
	return pulumi.All(o, k).ApplyT(func(vs []interface{}) *SystemPtp {
		return vs[0].(map[string]*SystemPtp)[vs[1].(string)]
	}).(SystemPtpOutput)
}

func init() {
	pulumi.RegisterInputType(reflect.TypeOf((*SystemPtpInput)(nil)).Elem(), &SystemPtp{})
	pulumi.RegisterInputType(reflect.TypeOf((*SystemPtpArrayInput)(nil)).Elem(), SystemPtpArray{})
	pulumi.RegisterInputType(reflect.TypeOf((*SystemPtpMapInput)(nil)).Elem(), SystemPtpMap{})
	pulumi.RegisterOutputType(SystemPtpOutput{})
	pulumi.RegisterOutputType(SystemPtpArrayOutput{})
	pulumi.RegisterOutputType(SystemPtpMapOutput{})
}
