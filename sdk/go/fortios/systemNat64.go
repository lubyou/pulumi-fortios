// Code generated by the Pulumi Terraform Bridge (tfgen) Tool DO NOT EDIT.
// *** WARNING: Do not edit by hand unless you're certain you know what you are doing! ***

package fortios

import (
	"context"
	"reflect"

	"errors"
	"github.com/pulumi/pulumi/sdk/v3/go/pulumi"
)

type SystemNat64 struct {
	pulumi.CustomResourceState

	AlwaysSynthesizeAaaaRecord     pulumi.StringOutput                   `pulumi:"alwaysSynthesizeAaaaRecord"`
	DynamicSortSubtable            pulumi.StringPtrOutput                `pulumi:"dynamicSortSubtable"`
	GenerateIpv6FragmentHeader     pulumi.StringOutput                   `pulumi:"generateIpv6FragmentHeader"`
	Nat46ForceIpv4PacketForwarding pulumi.StringOutput                   `pulumi:"nat46ForceIpv4PacketForwarding"`
	Nat64Prefix                    pulumi.StringOutput                   `pulumi:"nat64Prefix"`
	SecondaryPrefixStatus          pulumi.StringOutput                   `pulumi:"secondaryPrefixStatus"`
	SecondaryPrefixes              SystemNat64SecondaryPrefixArrayOutput `pulumi:"secondaryPrefixes"`
	Status                         pulumi.StringOutput                   `pulumi:"status"`
	Vdomparam                      pulumi.StringPtrOutput                `pulumi:"vdomparam"`
}

// NewSystemNat64 registers a new resource with the given unique name, arguments, and options.
func NewSystemNat64(ctx *pulumi.Context,
	name string, args *SystemNat64Args, opts ...pulumi.ResourceOption) (*SystemNat64, error) {
	if args == nil {
		return nil, errors.New("missing one or more required arguments")
	}

	if args.Nat64Prefix == nil {
		return nil, errors.New("invalid value for required argument 'Nat64Prefix'")
	}
	opts = pkgResourceDefaultOpts(opts)
	var resource SystemNat64
	err := ctx.RegisterResource("fortios:index/systemNat64:SystemNat64", name, args, &resource, opts...)
	if err != nil {
		return nil, err
	}
	return &resource, nil
}

// GetSystemNat64 gets an existing SystemNat64 resource's state with the given name, ID, and optional
// state properties that are used to uniquely qualify the lookup (nil if not required).
func GetSystemNat64(ctx *pulumi.Context,
	name string, id pulumi.IDInput, state *SystemNat64State, opts ...pulumi.ResourceOption) (*SystemNat64, error) {
	var resource SystemNat64
	err := ctx.ReadResource("fortios:index/systemNat64:SystemNat64", name, id, state, &resource, opts...)
	if err != nil {
		return nil, err
	}
	return &resource, nil
}

// Input properties used for looking up and filtering SystemNat64 resources.
type systemNat64State struct {
	AlwaysSynthesizeAaaaRecord     *string                      `pulumi:"alwaysSynthesizeAaaaRecord"`
	DynamicSortSubtable            *string                      `pulumi:"dynamicSortSubtable"`
	GenerateIpv6FragmentHeader     *string                      `pulumi:"generateIpv6FragmentHeader"`
	Nat46ForceIpv4PacketForwarding *string                      `pulumi:"nat46ForceIpv4PacketForwarding"`
	Nat64Prefix                    *string                      `pulumi:"nat64Prefix"`
	SecondaryPrefixStatus          *string                      `pulumi:"secondaryPrefixStatus"`
	SecondaryPrefixes              []SystemNat64SecondaryPrefix `pulumi:"secondaryPrefixes"`
	Status                         *string                      `pulumi:"status"`
	Vdomparam                      *string                      `pulumi:"vdomparam"`
}

type SystemNat64State struct {
	AlwaysSynthesizeAaaaRecord     pulumi.StringPtrInput
	DynamicSortSubtable            pulumi.StringPtrInput
	GenerateIpv6FragmentHeader     pulumi.StringPtrInput
	Nat46ForceIpv4PacketForwarding pulumi.StringPtrInput
	Nat64Prefix                    pulumi.StringPtrInput
	SecondaryPrefixStatus          pulumi.StringPtrInput
	SecondaryPrefixes              SystemNat64SecondaryPrefixArrayInput
	Status                         pulumi.StringPtrInput
	Vdomparam                      pulumi.StringPtrInput
}

func (SystemNat64State) ElementType() reflect.Type {
	return reflect.TypeOf((*systemNat64State)(nil)).Elem()
}

type systemNat64Args struct {
	AlwaysSynthesizeAaaaRecord     *string                      `pulumi:"alwaysSynthesizeAaaaRecord"`
	DynamicSortSubtable            *string                      `pulumi:"dynamicSortSubtable"`
	GenerateIpv6FragmentHeader     *string                      `pulumi:"generateIpv6FragmentHeader"`
	Nat46ForceIpv4PacketForwarding *string                      `pulumi:"nat46ForceIpv4PacketForwarding"`
	Nat64Prefix                    string                       `pulumi:"nat64Prefix"`
	SecondaryPrefixStatus          *string                      `pulumi:"secondaryPrefixStatus"`
	SecondaryPrefixes              []SystemNat64SecondaryPrefix `pulumi:"secondaryPrefixes"`
	Status                         *string                      `pulumi:"status"`
	Vdomparam                      *string                      `pulumi:"vdomparam"`
}

// The set of arguments for constructing a SystemNat64 resource.
type SystemNat64Args struct {
	AlwaysSynthesizeAaaaRecord     pulumi.StringPtrInput
	DynamicSortSubtable            pulumi.StringPtrInput
	GenerateIpv6FragmentHeader     pulumi.StringPtrInput
	Nat46ForceIpv4PacketForwarding pulumi.StringPtrInput
	Nat64Prefix                    pulumi.StringInput
	SecondaryPrefixStatus          pulumi.StringPtrInput
	SecondaryPrefixes              SystemNat64SecondaryPrefixArrayInput
	Status                         pulumi.StringPtrInput
	Vdomparam                      pulumi.StringPtrInput
}

func (SystemNat64Args) ElementType() reflect.Type {
	return reflect.TypeOf((*systemNat64Args)(nil)).Elem()
}

type SystemNat64Input interface {
	pulumi.Input

	ToSystemNat64Output() SystemNat64Output
	ToSystemNat64OutputWithContext(ctx context.Context) SystemNat64Output
}

func (*SystemNat64) ElementType() reflect.Type {
	return reflect.TypeOf((**SystemNat64)(nil)).Elem()
}

func (i *SystemNat64) ToSystemNat64Output() SystemNat64Output {
	return i.ToSystemNat64OutputWithContext(context.Background())
}

func (i *SystemNat64) ToSystemNat64OutputWithContext(ctx context.Context) SystemNat64Output {
	return pulumi.ToOutputWithContext(ctx, i).(SystemNat64Output)
}

// SystemNat64ArrayInput is an input type that accepts SystemNat64Array and SystemNat64ArrayOutput values.
// You can construct a concrete instance of `SystemNat64ArrayInput` via:
//
//	SystemNat64Array{ SystemNat64Args{...} }
type SystemNat64ArrayInput interface {
	pulumi.Input

	ToSystemNat64ArrayOutput() SystemNat64ArrayOutput
	ToSystemNat64ArrayOutputWithContext(context.Context) SystemNat64ArrayOutput
}

type SystemNat64Array []SystemNat64Input

func (SystemNat64Array) ElementType() reflect.Type {
	return reflect.TypeOf((*[]*SystemNat64)(nil)).Elem()
}

func (i SystemNat64Array) ToSystemNat64ArrayOutput() SystemNat64ArrayOutput {
	return i.ToSystemNat64ArrayOutputWithContext(context.Background())
}

func (i SystemNat64Array) ToSystemNat64ArrayOutputWithContext(ctx context.Context) SystemNat64ArrayOutput {
	return pulumi.ToOutputWithContext(ctx, i).(SystemNat64ArrayOutput)
}

// SystemNat64MapInput is an input type that accepts SystemNat64Map and SystemNat64MapOutput values.
// You can construct a concrete instance of `SystemNat64MapInput` via:
//
//	SystemNat64Map{ "key": SystemNat64Args{...} }
type SystemNat64MapInput interface {
	pulumi.Input

	ToSystemNat64MapOutput() SystemNat64MapOutput
	ToSystemNat64MapOutputWithContext(context.Context) SystemNat64MapOutput
}

type SystemNat64Map map[string]SystemNat64Input

func (SystemNat64Map) ElementType() reflect.Type {
	return reflect.TypeOf((*map[string]*SystemNat64)(nil)).Elem()
}

func (i SystemNat64Map) ToSystemNat64MapOutput() SystemNat64MapOutput {
	return i.ToSystemNat64MapOutputWithContext(context.Background())
}

func (i SystemNat64Map) ToSystemNat64MapOutputWithContext(ctx context.Context) SystemNat64MapOutput {
	return pulumi.ToOutputWithContext(ctx, i).(SystemNat64MapOutput)
}

type SystemNat64Output struct{ *pulumi.OutputState }

func (SystemNat64Output) ElementType() reflect.Type {
	return reflect.TypeOf((**SystemNat64)(nil)).Elem()
}

func (o SystemNat64Output) ToSystemNat64Output() SystemNat64Output {
	return o
}

func (o SystemNat64Output) ToSystemNat64OutputWithContext(ctx context.Context) SystemNat64Output {
	return o
}

func (o SystemNat64Output) AlwaysSynthesizeAaaaRecord() pulumi.StringOutput {
	return o.ApplyT(func(v *SystemNat64) pulumi.StringOutput { return v.AlwaysSynthesizeAaaaRecord }).(pulumi.StringOutput)
}

func (o SystemNat64Output) DynamicSortSubtable() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *SystemNat64) pulumi.StringPtrOutput { return v.DynamicSortSubtable }).(pulumi.StringPtrOutput)
}

func (o SystemNat64Output) GenerateIpv6FragmentHeader() pulumi.StringOutput {
	return o.ApplyT(func(v *SystemNat64) pulumi.StringOutput { return v.GenerateIpv6FragmentHeader }).(pulumi.StringOutput)
}

func (o SystemNat64Output) Nat46ForceIpv4PacketForwarding() pulumi.StringOutput {
	return o.ApplyT(func(v *SystemNat64) pulumi.StringOutput { return v.Nat46ForceIpv4PacketForwarding }).(pulumi.StringOutput)
}

func (o SystemNat64Output) Nat64Prefix() pulumi.StringOutput {
	return o.ApplyT(func(v *SystemNat64) pulumi.StringOutput { return v.Nat64Prefix }).(pulumi.StringOutput)
}

func (o SystemNat64Output) SecondaryPrefixStatus() pulumi.StringOutput {
	return o.ApplyT(func(v *SystemNat64) pulumi.StringOutput { return v.SecondaryPrefixStatus }).(pulumi.StringOutput)
}

func (o SystemNat64Output) SecondaryPrefixes() SystemNat64SecondaryPrefixArrayOutput {
	return o.ApplyT(func(v *SystemNat64) SystemNat64SecondaryPrefixArrayOutput { return v.SecondaryPrefixes }).(SystemNat64SecondaryPrefixArrayOutput)
}

func (o SystemNat64Output) Status() pulumi.StringOutput {
	return o.ApplyT(func(v *SystemNat64) pulumi.StringOutput { return v.Status }).(pulumi.StringOutput)
}

func (o SystemNat64Output) Vdomparam() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *SystemNat64) pulumi.StringPtrOutput { return v.Vdomparam }).(pulumi.StringPtrOutput)
}

type SystemNat64ArrayOutput struct{ *pulumi.OutputState }

func (SystemNat64ArrayOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*[]*SystemNat64)(nil)).Elem()
}

func (o SystemNat64ArrayOutput) ToSystemNat64ArrayOutput() SystemNat64ArrayOutput {
	return o
}

func (o SystemNat64ArrayOutput) ToSystemNat64ArrayOutputWithContext(ctx context.Context) SystemNat64ArrayOutput {
	return o
}

func (o SystemNat64ArrayOutput) Index(i pulumi.IntInput) SystemNat64Output {
	return pulumi.All(o, i).ApplyT(func(vs []interface{}) *SystemNat64 {
		return vs[0].([]*SystemNat64)[vs[1].(int)]
	}).(SystemNat64Output)
}

type SystemNat64MapOutput struct{ *pulumi.OutputState }

func (SystemNat64MapOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*map[string]*SystemNat64)(nil)).Elem()
}

func (o SystemNat64MapOutput) ToSystemNat64MapOutput() SystemNat64MapOutput {
	return o
}

func (o SystemNat64MapOutput) ToSystemNat64MapOutputWithContext(ctx context.Context) SystemNat64MapOutput {
	return o
}

func (o SystemNat64MapOutput) MapIndex(k pulumi.StringInput) SystemNat64Output {
	return pulumi.All(o, k).ApplyT(func(vs []interface{}) *SystemNat64 {
		return vs[0].(map[string]*SystemNat64)[vs[1].(string)]
	}).(SystemNat64Output)
}

func init() {
	pulumi.RegisterInputType(reflect.TypeOf((*SystemNat64Input)(nil)).Elem(), &SystemNat64{})
	pulumi.RegisterInputType(reflect.TypeOf((*SystemNat64ArrayInput)(nil)).Elem(), SystemNat64Array{})
	pulumi.RegisterInputType(reflect.TypeOf((*SystemNat64MapInput)(nil)).Elem(), SystemNat64Map{})
	pulumi.RegisterOutputType(SystemNat64Output{})
	pulumi.RegisterOutputType(SystemNat64ArrayOutput{})
	pulumi.RegisterOutputType(SystemNat64MapOutput{})
}
