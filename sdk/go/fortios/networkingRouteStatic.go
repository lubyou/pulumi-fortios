// *** WARNING: this file was generated by the Pulumi Terraform Bridge (tfgen) Tool. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

package fortios

import (
	"context"
	"reflect"

	"github.com/pkg/errors"
	"github.com/pulumi/pulumi/sdk/v3/go/pulumi"
)

// Provides a resource to configure static route of FortiOS.
//
// !> **Warning:** The resource will be deprecated and replaced by new resource `RouterStatic`, we recommend that you use the new resource.
//
// ## Example Usage
//
// ```go
// package main
//
// import (
// 	"github.com/pulumi/pulumi-fortios/sdk/go/fortios"
// 	"github.com/pulumi/pulumi/sdk/v3/go/pulumi"
// )
//
// func main() {
// 	pulumi.Run(func(ctx *pulumi.Context) error {
// 		_, err := fortios.NewNetworkingRouteStatic(ctx, "subnet", &fortios.NetworkingRouteStaticArgs{
// 			Blackhole: pulumi.String("disable"),
// 			Comment:   pulumi.String("Terraform test"),
// 			Device:    pulumi.String("port2"),
// 			Distance:  pulumi.String("22"),
// 			Dst:       pulumi.String("110.2.2.122/32"),
// 			Gateway:   pulumi.String("2.2.2.2"),
// 			Priority:  pulumi.String("3"),
// 			Status:    pulumi.String("enable"),
// 			Weight:    pulumi.String("3"),
// 		})
// 		if err != nil {
// 			return err
// 		}
// 		_, err = fortios.NewNetworkingRouteStatic(ctx, "internetService", &fortios.NetworkingRouteStaticArgs{
// 			Blackhole:       pulumi.String("disable"),
// 			Comment:         pulumi.String("Terraform Test"),
// 			Device:          pulumi.String("port2"),
// 			Distance:        pulumi.String("22"),
// 			Gateway:         pulumi.String("2.2.2.2"),
// 			InternetService: pulumi.Int(5242881),
// 			Priority:        pulumi.String("3"),
// 			Status:          pulumi.String("enable"),
// 			Weight:          pulumi.String("3"),
// 		})
// 		if err != nil {
// 			return err
// 		}
// 		return nil
// 	})
// }
// ```
type NetworkingRouteStatic struct {
	pulumi.CustomResourceState

	// Enable/disable black hole.
	Blackhole pulumi.StringOutput `pulumi:"blackhole"`
	// Optional comments.
	Comment pulumi.StringPtrOutput `pulumi:"comment"`
	// Gateway out interface or tunnel.
	Device pulumi.StringOutput `pulumi:"device"`
	// Administrative distance.
	Distance pulumi.StringOutput `pulumi:"distance"`
	// Destination IP and mask for this route.
	Dst pulumi.StringOutput `pulumi:"dst"`
	// Gateway IP for this route.
	Gateway pulumi.StringOutput `pulumi:"gateway"`
	// Application ID in the Internet service database.
	InternetService pulumi.IntOutput `pulumi:"internetService"`
	// Administrative priority.
	Priority pulumi.StringOutput `pulumi:"priority"`
	// Enable/disable this static route. default is "enable".
	Status pulumi.StringOutput `pulumi:"status"`
	// Administrative weight.
	Weight pulumi.StringOutput `pulumi:"weight"`
}

// NewNetworkingRouteStatic registers a new resource with the given unique name, arguments, and options.
func NewNetworkingRouteStatic(ctx *pulumi.Context,
	name string, args *NetworkingRouteStaticArgs, opts ...pulumi.ResourceOption) (*NetworkingRouteStatic, error) {
	if args == nil {
		return nil, errors.New("missing one or more required arguments")
	}

	if args.Device == nil {
		return nil, errors.New("invalid value for required argument 'Device'")
	}
	if args.Gateway == nil {
		return nil, errors.New("invalid value for required argument 'Gateway'")
	}
	opts = pkgResourceDefaultOpts(opts)
	var resource NetworkingRouteStatic
	err := ctx.RegisterResource("fortios:index/networkingRouteStatic:NetworkingRouteStatic", name, args, &resource, opts...)
	if err != nil {
		return nil, err
	}
	return &resource, nil
}

// GetNetworkingRouteStatic gets an existing NetworkingRouteStatic resource's state with the given name, ID, and optional
// state properties that are used to uniquely qualify the lookup (nil if not required).
func GetNetworkingRouteStatic(ctx *pulumi.Context,
	name string, id pulumi.IDInput, state *NetworkingRouteStaticState, opts ...pulumi.ResourceOption) (*NetworkingRouteStatic, error) {
	var resource NetworkingRouteStatic
	err := ctx.ReadResource("fortios:index/networkingRouteStatic:NetworkingRouteStatic", name, id, state, &resource, opts...)
	if err != nil {
		return nil, err
	}
	return &resource, nil
}

// Input properties used for looking up and filtering NetworkingRouteStatic resources.
type networkingRouteStaticState struct {
	// Enable/disable black hole.
	Blackhole *string `pulumi:"blackhole"`
	// Optional comments.
	Comment *string `pulumi:"comment"`
	// Gateway out interface or tunnel.
	Device *string `pulumi:"device"`
	// Administrative distance.
	Distance *string `pulumi:"distance"`
	// Destination IP and mask for this route.
	Dst *string `pulumi:"dst"`
	// Gateway IP for this route.
	Gateway *string `pulumi:"gateway"`
	// Application ID in the Internet service database.
	InternetService *int `pulumi:"internetService"`
	// Administrative priority.
	Priority *string `pulumi:"priority"`
	// Enable/disable this static route. default is "enable".
	Status *string `pulumi:"status"`
	// Administrative weight.
	Weight *string `pulumi:"weight"`
}

type NetworkingRouteStaticState struct {
	// Enable/disable black hole.
	Blackhole pulumi.StringPtrInput
	// Optional comments.
	Comment pulumi.StringPtrInput
	// Gateway out interface or tunnel.
	Device pulumi.StringPtrInput
	// Administrative distance.
	Distance pulumi.StringPtrInput
	// Destination IP and mask for this route.
	Dst pulumi.StringPtrInput
	// Gateway IP for this route.
	Gateway pulumi.StringPtrInput
	// Application ID in the Internet service database.
	InternetService pulumi.IntPtrInput
	// Administrative priority.
	Priority pulumi.StringPtrInput
	// Enable/disable this static route. default is "enable".
	Status pulumi.StringPtrInput
	// Administrative weight.
	Weight pulumi.StringPtrInput
}

func (NetworkingRouteStaticState) ElementType() reflect.Type {
	return reflect.TypeOf((*networkingRouteStaticState)(nil)).Elem()
}

type networkingRouteStaticArgs struct {
	// Enable/disable black hole.
	Blackhole *string `pulumi:"blackhole"`
	// Optional comments.
	Comment *string `pulumi:"comment"`
	// Gateway out interface or tunnel.
	Device string `pulumi:"device"`
	// Administrative distance.
	Distance *string `pulumi:"distance"`
	// Destination IP and mask for this route.
	Dst *string `pulumi:"dst"`
	// Gateway IP for this route.
	Gateway string `pulumi:"gateway"`
	// Application ID in the Internet service database.
	InternetService *int `pulumi:"internetService"`
	// Administrative priority.
	Priority *string `pulumi:"priority"`
	// Enable/disable this static route. default is "enable".
	Status *string `pulumi:"status"`
	// Administrative weight.
	Weight *string `pulumi:"weight"`
}

// The set of arguments for constructing a NetworkingRouteStatic resource.
type NetworkingRouteStaticArgs struct {
	// Enable/disable black hole.
	Blackhole pulumi.StringPtrInput
	// Optional comments.
	Comment pulumi.StringPtrInput
	// Gateway out interface or tunnel.
	Device pulumi.StringInput
	// Administrative distance.
	Distance pulumi.StringPtrInput
	// Destination IP and mask for this route.
	Dst pulumi.StringPtrInput
	// Gateway IP for this route.
	Gateway pulumi.StringInput
	// Application ID in the Internet service database.
	InternetService pulumi.IntPtrInput
	// Administrative priority.
	Priority pulumi.StringPtrInput
	// Enable/disable this static route. default is "enable".
	Status pulumi.StringPtrInput
	// Administrative weight.
	Weight pulumi.StringPtrInput
}

func (NetworkingRouteStaticArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*networkingRouteStaticArgs)(nil)).Elem()
}

type NetworkingRouteStaticInput interface {
	pulumi.Input

	ToNetworkingRouteStaticOutput() NetworkingRouteStaticOutput
	ToNetworkingRouteStaticOutputWithContext(ctx context.Context) NetworkingRouteStaticOutput
}

func (*NetworkingRouteStatic) ElementType() reflect.Type {
	return reflect.TypeOf((**NetworkingRouteStatic)(nil)).Elem()
}

func (i *NetworkingRouteStatic) ToNetworkingRouteStaticOutput() NetworkingRouteStaticOutput {
	return i.ToNetworkingRouteStaticOutputWithContext(context.Background())
}

func (i *NetworkingRouteStatic) ToNetworkingRouteStaticOutputWithContext(ctx context.Context) NetworkingRouteStaticOutput {
	return pulumi.ToOutputWithContext(ctx, i).(NetworkingRouteStaticOutput)
}

// NetworkingRouteStaticArrayInput is an input type that accepts NetworkingRouteStaticArray and NetworkingRouteStaticArrayOutput values.
// You can construct a concrete instance of `NetworkingRouteStaticArrayInput` via:
//
//          NetworkingRouteStaticArray{ NetworkingRouteStaticArgs{...} }
type NetworkingRouteStaticArrayInput interface {
	pulumi.Input

	ToNetworkingRouteStaticArrayOutput() NetworkingRouteStaticArrayOutput
	ToNetworkingRouteStaticArrayOutputWithContext(context.Context) NetworkingRouteStaticArrayOutput
}

type NetworkingRouteStaticArray []NetworkingRouteStaticInput

func (NetworkingRouteStaticArray) ElementType() reflect.Type {
	return reflect.TypeOf((*[]*NetworkingRouteStatic)(nil)).Elem()
}

func (i NetworkingRouteStaticArray) ToNetworkingRouteStaticArrayOutput() NetworkingRouteStaticArrayOutput {
	return i.ToNetworkingRouteStaticArrayOutputWithContext(context.Background())
}

func (i NetworkingRouteStaticArray) ToNetworkingRouteStaticArrayOutputWithContext(ctx context.Context) NetworkingRouteStaticArrayOutput {
	return pulumi.ToOutputWithContext(ctx, i).(NetworkingRouteStaticArrayOutput)
}

// NetworkingRouteStaticMapInput is an input type that accepts NetworkingRouteStaticMap and NetworkingRouteStaticMapOutput values.
// You can construct a concrete instance of `NetworkingRouteStaticMapInput` via:
//
//          NetworkingRouteStaticMap{ "key": NetworkingRouteStaticArgs{...} }
type NetworkingRouteStaticMapInput interface {
	pulumi.Input

	ToNetworkingRouteStaticMapOutput() NetworkingRouteStaticMapOutput
	ToNetworkingRouteStaticMapOutputWithContext(context.Context) NetworkingRouteStaticMapOutput
}

type NetworkingRouteStaticMap map[string]NetworkingRouteStaticInput

func (NetworkingRouteStaticMap) ElementType() reflect.Type {
	return reflect.TypeOf((*map[string]*NetworkingRouteStatic)(nil)).Elem()
}

func (i NetworkingRouteStaticMap) ToNetworkingRouteStaticMapOutput() NetworkingRouteStaticMapOutput {
	return i.ToNetworkingRouteStaticMapOutputWithContext(context.Background())
}

func (i NetworkingRouteStaticMap) ToNetworkingRouteStaticMapOutputWithContext(ctx context.Context) NetworkingRouteStaticMapOutput {
	return pulumi.ToOutputWithContext(ctx, i).(NetworkingRouteStaticMapOutput)
}

type NetworkingRouteStaticOutput struct{ *pulumi.OutputState }

func (NetworkingRouteStaticOutput) ElementType() reflect.Type {
	return reflect.TypeOf((**NetworkingRouteStatic)(nil)).Elem()
}

func (o NetworkingRouteStaticOutput) ToNetworkingRouteStaticOutput() NetworkingRouteStaticOutput {
	return o
}

func (o NetworkingRouteStaticOutput) ToNetworkingRouteStaticOutputWithContext(ctx context.Context) NetworkingRouteStaticOutput {
	return o
}

type NetworkingRouteStaticArrayOutput struct{ *pulumi.OutputState }

func (NetworkingRouteStaticArrayOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*[]*NetworkingRouteStatic)(nil)).Elem()
}

func (o NetworkingRouteStaticArrayOutput) ToNetworkingRouteStaticArrayOutput() NetworkingRouteStaticArrayOutput {
	return o
}

func (o NetworkingRouteStaticArrayOutput) ToNetworkingRouteStaticArrayOutputWithContext(ctx context.Context) NetworkingRouteStaticArrayOutput {
	return o
}

func (o NetworkingRouteStaticArrayOutput) Index(i pulumi.IntInput) NetworkingRouteStaticOutput {
	return pulumi.All(o, i).ApplyT(func(vs []interface{}) *NetworkingRouteStatic {
		return vs[0].([]*NetworkingRouteStatic)[vs[1].(int)]
	}).(NetworkingRouteStaticOutput)
}

type NetworkingRouteStaticMapOutput struct{ *pulumi.OutputState }

func (NetworkingRouteStaticMapOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*map[string]*NetworkingRouteStatic)(nil)).Elem()
}

func (o NetworkingRouteStaticMapOutput) ToNetworkingRouteStaticMapOutput() NetworkingRouteStaticMapOutput {
	return o
}

func (o NetworkingRouteStaticMapOutput) ToNetworkingRouteStaticMapOutputWithContext(ctx context.Context) NetworkingRouteStaticMapOutput {
	return o
}

func (o NetworkingRouteStaticMapOutput) MapIndex(k pulumi.StringInput) NetworkingRouteStaticOutput {
	return pulumi.All(o, k).ApplyT(func(vs []interface{}) *NetworkingRouteStatic {
		return vs[0].(map[string]*NetworkingRouteStatic)[vs[1].(string)]
	}).(NetworkingRouteStaticOutput)
}

func init() {
	pulumi.RegisterInputType(reflect.TypeOf((*NetworkingRouteStaticInput)(nil)).Elem(), &NetworkingRouteStatic{})
	pulumi.RegisterInputType(reflect.TypeOf((*NetworkingRouteStaticArrayInput)(nil)).Elem(), NetworkingRouteStaticArray{})
	pulumi.RegisterInputType(reflect.TypeOf((*NetworkingRouteStaticMapInput)(nil)).Elem(), NetworkingRouteStaticMap{})
	pulumi.RegisterOutputType(NetworkingRouteStaticOutput{})
	pulumi.RegisterOutputType(NetworkingRouteStaticArrayOutput{})
	pulumi.RegisterOutputType(NetworkingRouteStaticMapOutput{})
}
