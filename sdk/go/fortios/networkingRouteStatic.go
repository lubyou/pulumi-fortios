// Code generated by the Pulumi Terraform Bridge (tfgen) Tool DO NOT EDIT.
// *** WARNING: Do not edit by hand unless you're certain you know what you are doing! ***

package fortios

import (
	"context"
	"reflect"

	"errors"
	"github.com/lubyou/pulumi-fortios/sdk/go/fortios/internal"
	"github.com/pulumi/pulumi/sdk/v3/go/pulumi"
)

type NetworkingRouteStatic struct {
	pulumi.CustomResourceState

	Blackhole       pulumi.StringOutput    `pulumi:"blackhole"`
	Comment         pulumi.StringPtrOutput `pulumi:"comment"`
	Device          pulumi.StringOutput    `pulumi:"device"`
	Distance        pulumi.StringOutput    `pulumi:"distance"`
	Dst             pulumi.StringOutput    `pulumi:"dst"`
	Gateway         pulumi.StringOutput    `pulumi:"gateway"`
	InternetService pulumi.IntOutput       `pulumi:"internetService"`
	Priority        pulumi.StringOutput    `pulumi:"priority"`
	Status          pulumi.StringOutput    `pulumi:"status"`
	Weight          pulumi.StringOutput    `pulumi:"weight"`
}

// NewNetworkingRouteStatic registers a new resource with the given unique name, arguments, and options.
func NewNetworkingRouteStatic(ctx *pulumi.Context,
	name string, args *NetworkingRouteStaticArgs, opts ...pulumi.ResourceOption) (*NetworkingRouteStatic, error) {
	if args == nil {
		return nil, errors.New("missing one or more required arguments")
	}

	if args.Device == nil {
		return nil, errors.New("invalid value for required argument 'Device'")
	}
	if args.Gateway == nil {
		return nil, errors.New("invalid value for required argument 'Gateway'")
	}
	opts = internal.PkgResourceDefaultOpts(opts)
	var resource NetworkingRouteStatic
	err := ctx.RegisterResource("fortios:index/networkingRouteStatic:NetworkingRouteStatic", name, args, &resource, opts...)
	if err != nil {
		return nil, err
	}
	return &resource, nil
}

// GetNetworkingRouteStatic gets an existing NetworkingRouteStatic resource's state with the given name, ID, and optional
// state properties that are used to uniquely qualify the lookup (nil if not required).
func GetNetworkingRouteStatic(ctx *pulumi.Context,
	name string, id pulumi.IDInput, state *NetworkingRouteStaticState, opts ...pulumi.ResourceOption) (*NetworkingRouteStatic, error) {
	var resource NetworkingRouteStatic
	err := ctx.ReadResource("fortios:index/networkingRouteStatic:NetworkingRouteStatic", name, id, state, &resource, opts...)
	if err != nil {
		return nil, err
	}
	return &resource, nil
}

// Input properties used for looking up and filtering NetworkingRouteStatic resources.
type networkingRouteStaticState struct {
	Blackhole       *string `pulumi:"blackhole"`
	Comment         *string `pulumi:"comment"`
	Device          *string `pulumi:"device"`
	Distance        *string `pulumi:"distance"`
	Dst             *string `pulumi:"dst"`
	Gateway         *string `pulumi:"gateway"`
	InternetService *int    `pulumi:"internetService"`
	Priority        *string `pulumi:"priority"`
	Status          *string `pulumi:"status"`
	Weight          *string `pulumi:"weight"`
}

type NetworkingRouteStaticState struct {
	Blackhole       pulumi.StringPtrInput
	Comment         pulumi.StringPtrInput
	Device          pulumi.StringPtrInput
	Distance        pulumi.StringPtrInput
	Dst             pulumi.StringPtrInput
	Gateway         pulumi.StringPtrInput
	InternetService pulumi.IntPtrInput
	Priority        pulumi.StringPtrInput
	Status          pulumi.StringPtrInput
	Weight          pulumi.StringPtrInput
}

func (NetworkingRouteStaticState) ElementType() reflect.Type {
	return reflect.TypeOf((*networkingRouteStaticState)(nil)).Elem()
}

type networkingRouteStaticArgs struct {
	Blackhole       *string `pulumi:"blackhole"`
	Comment         *string `pulumi:"comment"`
	Device          string  `pulumi:"device"`
	Distance        *string `pulumi:"distance"`
	Dst             *string `pulumi:"dst"`
	Gateway         string  `pulumi:"gateway"`
	InternetService *int    `pulumi:"internetService"`
	Priority        *string `pulumi:"priority"`
	Status          *string `pulumi:"status"`
	Weight          *string `pulumi:"weight"`
}

// The set of arguments for constructing a NetworkingRouteStatic resource.
type NetworkingRouteStaticArgs struct {
	Blackhole       pulumi.StringPtrInput
	Comment         pulumi.StringPtrInput
	Device          pulumi.StringInput
	Distance        pulumi.StringPtrInput
	Dst             pulumi.StringPtrInput
	Gateway         pulumi.StringInput
	InternetService pulumi.IntPtrInput
	Priority        pulumi.StringPtrInput
	Status          pulumi.StringPtrInput
	Weight          pulumi.StringPtrInput
}

func (NetworkingRouteStaticArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*networkingRouteStaticArgs)(nil)).Elem()
}

type NetworkingRouteStaticInput interface {
	pulumi.Input

	ToNetworkingRouteStaticOutput() NetworkingRouteStaticOutput
	ToNetworkingRouteStaticOutputWithContext(ctx context.Context) NetworkingRouteStaticOutput
}

func (*NetworkingRouteStatic) ElementType() reflect.Type {
	return reflect.TypeOf((**NetworkingRouteStatic)(nil)).Elem()
}

func (i *NetworkingRouteStatic) ToNetworkingRouteStaticOutput() NetworkingRouteStaticOutput {
	return i.ToNetworkingRouteStaticOutputWithContext(context.Background())
}

func (i *NetworkingRouteStatic) ToNetworkingRouteStaticOutputWithContext(ctx context.Context) NetworkingRouteStaticOutput {
	return pulumi.ToOutputWithContext(ctx, i).(NetworkingRouteStaticOutput)
}

// NetworkingRouteStaticArrayInput is an input type that accepts NetworkingRouteStaticArray and NetworkingRouteStaticArrayOutput values.
// You can construct a concrete instance of `NetworkingRouteStaticArrayInput` via:
//
//	NetworkingRouteStaticArray{ NetworkingRouteStaticArgs{...} }
type NetworkingRouteStaticArrayInput interface {
	pulumi.Input

	ToNetworkingRouteStaticArrayOutput() NetworkingRouteStaticArrayOutput
	ToNetworkingRouteStaticArrayOutputWithContext(context.Context) NetworkingRouteStaticArrayOutput
}

type NetworkingRouteStaticArray []NetworkingRouteStaticInput

func (NetworkingRouteStaticArray) ElementType() reflect.Type {
	return reflect.TypeOf((*[]*NetworkingRouteStatic)(nil)).Elem()
}

func (i NetworkingRouteStaticArray) ToNetworkingRouteStaticArrayOutput() NetworkingRouteStaticArrayOutput {
	return i.ToNetworkingRouteStaticArrayOutputWithContext(context.Background())
}

func (i NetworkingRouteStaticArray) ToNetworkingRouteStaticArrayOutputWithContext(ctx context.Context) NetworkingRouteStaticArrayOutput {
	return pulumi.ToOutputWithContext(ctx, i).(NetworkingRouteStaticArrayOutput)
}

// NetworkingRouteStaticMapInput is an input type that accepts NetworkingRouteStaticMap and NetworkingRouteStaticMapOutput values.
// You can construct a concrete instance of `NetworkingRouteStaticMapInput` via:
//
//	NetworkingRouteStaticMap{ "key": NetworkingRouteStaticArgs{...} }
type NetworkingRouteStaticMapInput interface {
	pulumi.Input

	ToNetworkingRouteStaticMapOutput() NetworkingRouteStaticMapOutput
	ToNetworkingRouteStaticMapOutputWithContext(context.Context) NetworkingRouteStaticMapOutput
}

type NetworkingRouteStaticMap map[string]NetworkingRouteStaticInput

func (NetworkingRouteStaticMap) ElementType() reflect.Type {
	return reflect.TypeOf((*map[string]*NetworkingRouteStatic)(nil)).Elem()
}

func (i NetworkingRouteStaticMap) ToNetworkingRouteStaticMapOutput() NetworkingRouteStaticMapOutput {
	return i.ToNetworkingRouteStaticMapOutputWithContext(context.Background())
}

func (i NetworkingRouteStaticMap) ToNetworkingRouteStaticMapOutputWithContext(ctx context.Context) NetworkingRouteStaticMapOutput {
	return pulumi.ToOutputWithContext(ctx, i).(NetworkingRouteStaticMapOutput)
}

type NetworkingRouteStaticOutput struct{ *pulumi.OutputState }

func (NetworkingRouteStaticOutput) ElementType() reflect.Type {
	return reflect.TypeOf((**NetworkingRouteStatic)(nil)).Elem()
}

func (o NetworkingRouteStaticOutput) ToNetworkingRouteStaticOutput() NetworkingRouteStaticOutput {
	return o
}

func (o NetworkingRouteStaticOutput) ToNetworkingRouteStaticOutputWithContext(ctx context.Context) NetworkingRouteStaticOutput {
	return o
}

func (o NetworkingRouteStaticOutput) Blackhole() pulumi.StringOutput {
	return o.ApplyT(func(v *NetworkingRouteStatic) pulumi.StringOutput { return v.Blackhole }).(pulumi.StringOutput)
}

func (o NetworkingRouteStaticOutput) Comment() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *NetworkingRouteStatic) pulumi.StringPtrOutput { return v.Comment }).(pulumi.StringPtrOutput)
}

func (o NetworkingRouteStaticOutput) Device() pulumi.StringOutput {
	return o.ApplyT(func(v *NetworkingRouteStatic) pulumi.StringOutput { return v.Device }).(pulumi.StringOutput)
}

func (o NetworkingRouteStaticOutput) Distance() pulumi.StringOutput {
	return o.ApplyT(func(v *NetworkingRouteStatic) pulumi.StringOutput { return v.Distance }).(pulumi.StringOutput)
}

func (o NetworkingRouteStaticOutput) Dst() pulumi.StringOutput {
	return o.ApplyT(func(v *NetworkingRouteStatic) pulumi.StringOutput { return v.Dst }).(pulumi.StringOutput)
}

func (o NetworkingRouteStaticOutput) Gateway() pulumi.StringOutput {
	return o.ApplyT(func(v *NetworkingRouteStatic) pulumi.StringOutput { return v.Gateway }).(pulumi.StringOutput)
}

func (o NetworkingRouteStaticOutput) InternetService() pulumi.IntOutput {
	return o.ApplyT(func(v *NetworkingRouteStatic) pulumi.IntOutput { return v.InternetService }).(pulumi.IntOutput)
}

func (o NetworkingRouteStaticOutput) Priority() pulumi.StringOutput {
	return o.ApplyT(func(v *NetworkingRouteStatic) pulumi.StringOutput { return v.Priority }).(pulumi.StringOutput)
}

func (o NetworkingRouteStaticOutput) Status() pulumi.StringOutput {
	return o.ApplyT(func(v *NetworkingRouteStatic) pulumi.StringOutput { return v.Status }).(pulumi.StringOutput)
}

func (o NetworkingRouteStaticOutput) Weight() pulumi.StringOutput {
	return o.ApplyT(func(v *NetworkingRouteStatic) pulumi.StringOutput { return v.Weight }).(pulumi.StringOutput)
}

type NetworkingRouteStaticArrayOutput struct{ *pulumi.OutputState }

func (NetworkingRouteStaticArrayOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*[]*NetworkingRouteStatic)(nil)).Elem()
}

func (o NetworkingRouteStaticArrayOutput) ToNetworkingRouteStaticArrayOutput() NetworkingRouteStaticArrayOutput {
	return o
}

func (o NetworkingRouteStaticArrayOutput) ToNetworkingRouteStaticArrayOutputWithContext(ctx context.Context) NetworkingRouteStaticArrayOutput {
	return o
}

func (o NetworkingRouteStaticArrayOutput) Index(i pulumi.IntInput) NetworkingRouteStaticOutput {
	return pulumi.All(o, i).ApplyT(func(vs []interface{}) *NetworkingRouteStatic {
		return vs[0].([]*NetworkingRouteStatic)[vs[1].(int)]
	}).(NetworkingRouteStaticOutput)
}

type NetworkingRouteStaticMapOutput struct{ *pulumi.OutputState }

func (NetworkingRouteStaticMapOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*map[string]*NetworkingRouteStatic)(nil)).Elem()
}

func (o NetworkingRouteStaticMapOutput) ToNetworkingRouteStaticMapOutput() NetworkingRouteStaticMapOutput {
	return o
}

func (o NetworkingRouteStaticMapOutput) ToNetworkingRouteStaticMapOutputWithContext(ctx context.Context) NetworkingRouteStaticMapOutput {
	return o
}

func (o NetworkingRouteStaticMapOutput) MapIndex(k pulumi.StringInput) NetworkingRouteStaticOutput {
	return pulumi.All(o, k).ApplyT(func(vs []interface{}) *NetworkingRouteStatic {
		return vs[0].(map[string]*NetworkingRouteStatic)[vs[1].(string)]
	}).(NetworkingRouteStaticOutput)
}

func init() {
	pulumi.RegisterInputType(reflect.TypeOf((*NetworkingRouteStaticInput)(nil)).Elem(), &NetworkingRouteStatic{})
	pulumi.RegisterInputType(reflect.TypeOf((*NetworkingRouteStaticArrayInput)(nil)).Elem(), NetworkingRouteStaticArray{})
	pulumi.RegisterInputType(reflect.TypeOf((*NetworkingRouteStaticMapInput)(nil)).Elem(), NetworkingRouteStaticMap{})
	pulumi.RegisterOutputType(NetworkingRouteStaticOutput{})
	pulumi.RegisterOutputType(NetworkingRouteStaticArrayOutput{})
	pulumi.RegisterOutputType(NetworkingRouteStaticMapOutput{})
}
