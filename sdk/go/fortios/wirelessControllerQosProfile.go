// Code generated by the Pulumi Terraform Bridge (tfgen) Tool DO NOT EDIT.
// *** WARNING: Do not edit by hand unless you're certain you know what you are doing! ***

package fortios

import (
	"context"
	"reflect"

	"github.com/pulumi/pulumi/sdk/v3/go/pulumi"
)

// Configure WiFi quality of service (QoS) profiles.
//
// ## Import
//
// WirelessController QosProfile can be imported using any of these accepted formats
//
// ```sh
//  $ pulumi import fortios:index/wirelessControllerQosProfile:WirelessControllerQosProfile labelname {{name}}
// ```
//
//  If you do not want to import arguments of block$ export "FORTIOS_IMPORT_TABLE"="false"
//
// ```sh
//  $ pulumi import fortios:index/wirelessControllerQosProfile:WirelessControllerQosProfile labelname {{name}}
// ```
//
//  $ unset "FORTIOS_IMPORT_TABLE"
type WirelessControllerQosProfile struct {
	pulumi.CustomResourceState

	// Enable/disable WMM bandwidth admission control. Valid values: `enable`, `disable`.
	BandwidthAdmissionControl pulumi.StringOutput `pulumi:"bandwidthAdmissionControl"`
	// Maximum bandwidth capacity allowed (1 - 600000 Kbps, default = 2000).
	BandwidthCapacity pulumi.IntOutput `pulumi:"bandwidthCapacity"`
	// Enable/disable client rate burst. Valid values: `enable`, `disable`.
	Burst pulumi.StringOutput `pulumi:"burst"`
	// Enable/disable WMM call admission control. Valid values: `enable`, `disable`.
	CallAdmissionControl pulumi.StringOutput `pulumi:"callAdmissionControl"`
	// Maximum number of Voice over WLAN (VoWLAN) phones allowed (0 - 60, default = 10).
	CallCapacity pulumi.IntOutput `pulumi:"callCapacity"`
	// Comment.
	Comment pulumi.StringOutput `pulumi:"comment"`
	// Maximum downlink bandwidth for Virtual Access Points (VAPs) (0 - 2097152 Kbps, default = 0, 0 means no limit).
	Downlink pulumi.IntOutput `pulumi:"downlink"`
	// Maximum downlink bandwidth for clients (0 - 2097152 Kbps, default = 0, 0 means no limit).
	DownlinkSta pulumi.IntOutput `pulumi:"downlinkSta"`
	// DSCP mapping for best effort access (default = 0 24). The structure of `dscpWmmBe` block is documented below.
	DscpWmmBes WirelessControllerQosProfileDscpWmmBeArrayOutput `pulumi:"dscpWmmBes"`
	// DSCP mapping for background access (default = 8 16). The structure of `dscpWmmBk` block is documented below.
	DscpWmmBks WirelessControllerQosProfileDscpWmmBkArrayOutput `pulumi:"dscpWmmBks"`
	// Enable/disable Differentiated Services Code Point (DSCP) mapping. Valid values: `enable`, `disable`.
	DscpWmmMapping pulumi.StringOutput `pulumi:"dscpWmmMapping"`
	// DSCP mapping for video access (default = 32 40). The structure of `dscpWmmVi` block is documented below.
	DscpWmmVis WirelessControllerQosProfileDscpWmmViArrayOutput `pulumi:"dscpWmmVis"`
	// DSCP mapping for voice access (default = 48 56). The structure of `dscpWmmVo` block is documented below.
	DscpWmmVos WirelessControllerQosProfileDscpWmmVoArrayOutput `pulumi:"dscpWmmVos"`
	// true or false, set this parameter to true when using dynamic forEach + toset to configure and sort sub-tables, please do not set this parameter when configuring static sub-tables.
	DynamicSortSubtable pulumi.StringPtrOutput `pulumi:"dynamicSortSubtable"`
	// WiFi QoS profile name.
	Name pulumi.StringOutput `pulumi:"name"`
	// Maximum uplink bandwidth for Virtual Access Points (VAPs) (0 - 2097152 Kbps, default = 0, 0 means no limit).
	Uplink pulumi.IntOutput `pulumi:"uplink"`
	// Maximum uplink bandwidth for clients (0 - 2097152 Kbps, default = 0, 0 means no limit).
	UplinkSta pulumi.IntOutput `pulumi:"uplinkSta"`
	// Specifies the vdom to which the resource will be applied when the FortiGate unit is running in VDOM mode. Only one vdom can be specified. If you want to inherit the vdom configuration of the provider, please do not set this parameter.
	Vdomparam pulumi.StringPtrOutput `pulumi:"vdomparam"`
	// Enable/disable WiFi multi-media (WMM) control. Valid values: `enable`, `disable`.
	Wmm pulumi.StringOutput `pulumi:"wmm"`
	// DSCP marking for best effort access (default = 0).
	WmmBeDscp pulumi.IntOutput `pulumi:"wmmBeDscp"`
	// DSCP marking for background access (default = 8).
	WmmBkDscp pulumi.IntOutput `pulumi:"wmmBkDscp"`
	// Enable/disable WMM Differentiated Services Code Point (DSCP) marking. Valid values: `enable`, `disable`.
	WmmDscpMarking pulumi.StringOutput `pulumi:"wmmDscpMarking"`
	// Enable/disable WMM Unscheduled Automatic Power Save Delivery (U-APSD) power save mode. Valid values: `enable`, `disable`.
	WmmUapsd pulumi.StringOutput `pulumi:"wmmUapsd"`
	// DSCP marking for video access (default = 32).
	WmmViDscp pulumi.IntOutput `pulumi:"wmmViDscp"`
	// DSCP marking for voice access (default = 48).
	WmmVoDscp pulumi.IntOutput `pulumi:"wmmVoDscp"`
}

// NewWirelessControllerQosProfile registers a new resource with the given unique name, arguments, and options.
func NewWirelessControllerQosProfile(ctx *pulumi.Context,
	name string, args *WirelessControllerQosProfileArgs, opts ...pulumi.ResourceOption) (*WirelessControllerQosProfile, error) {
	if args == nil {
		args = &WirelessControllerQosProfileArgs{}
	}

	opts = pkgResourceDefaultOpts(opts)
	var resource WirelessControllerQosProfile
	err := ctx.RegisterResource("fortios:index/wirelessControllerQosProfile:WirelessControllerQosProfile", name, args, &resource, opts...)
	if err != nil {
		return nil, err
	}
	return &resource, nil
}

// GetWirelessControllerQosProfile gets an existing WirelessControllerQosProfile resource's state with the given name, ID, and optional
// state properties that are used to uniquely qualify the lookup (nil if not required).
func GetWirelessControllerQosProfile(ctx *pulumi.Context,
	name string, id pulumi.IDInput, state *WirelessControllerQosProfileState, opts ...pulumi.ResourceOption) (*WirelessControllerQosProfile, error) {
	var resource WirelessControllerQosProfile
	err := ctx.ReadResource("fortios:index/wirelessControllerQosProfile:WirelessControllerQosProfile", name, id, state, &resource, opts...)
	if err != nil {
		return nil, err
	}
	return &resource, nil
}

// Input properties used for looking up and filtering WirelessControllerQosProfile resources.
type wirelessControllerQosProfileState struct {
	// Enable/disable WMM bandwidth admission control. Valid values: `enable`, `disable`.
	BandwidthAdmissionControl *string `pulumi:"bandwidthAdmissionControl"`
	// Maximum bandwidth capacity allowed (1 - 600000 Kbps, default = 2000).
	BandwidthCapacity *int `pulumi:"bandwidthCapacity"`
	// Enable/disable client rate burst. Valid values: `enable`, `disable`.
	Burst *string `pulumi:"burst"`
	// Enable/disable WMM call admission control. Valid values: `enable`, `disable`.
	CallAdmissionControl *string `pulumi:"callAdmissionControl"`
	// Maximum number of Voice over WLAN (VoWLAN) phones allowed (0 - 60, default = 10).
	CallCapacity *int `pulumi:"callCapacity"`
	// Comment.
	Comment *string `pulumi:"comment"`
	// Maximum downlink bandwidth for Virtual Access Points (VAPs) (0 - 2097152 Kbps, default = 0, 0 means no limit).
	Downlink *int `pulumi:"downlink"`
	// Maximum downlink bandwidth for clients (0 - 2097152 Kbps, default = 0, 0 means no limit).
	DownlinkSta *int `pulumi:"downlinkSta"`
	// DSCP mapping for best effort access (default = 0 24). The structure of `dscpWmmBe` block is documented below.
	DscpWmmBes []WirelessControllerQosProfileDscpWmmBe `pulumi:"dscpWmmBes"`
	// DSCP mapping for background access (default = 8 16). The structure of `dscpWmmBk` block is documented below.
	DscpWmmBks []WirelessControllerQosProfileDscpWmmBk `pulumi:"dscpWmmBks"`
	// Enable/disable Differentiated Services Code Point (DSCP) mapping. Valid values: `enable`, `disable`.
	DscpWmmMapping *string `pulumi:"dscpWmmMapping"`
	// DSCP mapping for video access (default = 32 40). The structure of `dscpWmmVi` block is documented below.
	DscpWmmVis []WirelessControllerQosProfileDscpWmmVi `pulumi:"dscpWmmVis"`
	// DSCP mapping for voice access (default = 48 56). The structure of `dscpWmmVo` block is documented below.
	DscpWmmVos []WirelessControllerQosProfileDscpWmmVo `pulumi:"dscpWmmVos"`
	// true or false, set this parameter to true when using dynamic forEach + toset to configure and sort sub-tables, please do not set this parameter when configuring static sub-tables.
	DynamicSortSubtable *string `pulumi:"dynamicSortSubtable"`
	// WiFi QoS profile name.
	Name *string `pulumi:"name"`
	// Maximum uplink bandwidth for Virtual Access Points (VAPs) (0 - 2097152 Kbps, default = 0, 0 means no limit).
	Uplink *int `pulumi:"uplink"`
	// Maximum uplink bandwidth for clients (0 - 2097152 Kbps, default = 0, 0 means no limit).
	UplinkSta *int `pulumi:"uplinkSta"`
	// Specifies the vdom to which the resource will be applied when the FortiGate unit is running in VDOM mode. Only one vdom can be specified. If you want to inherit the vdom configuration of the provider, please do not set this parameter.
	Vdomparam *string `pulumi:"vdomparam"`
	// Enable/disable WiFi multi-media (WMM) control. Valid values: `enable`, `disable`.
	Wmm *string `pulumi:"wmm"`
	// DSCP marking for best effort access (default = 0).
	WmmBeDscp *int `pulumi:"wmmBeDscp"`
	// DSCP marking for background access (default = 8).
	WmmBkDscp *int `pulumi:"wmmBkDscp"`
	// Enable/disable WMM Differentiated Services Code Point (DSCP) marking. Valid values: `enable`, `disable`.
	WmmDscpMarking *string `pulumi:"wmmDscpMarking"`
	// Enable/disable WMM Unscheduled Automatic Power Save Delivery (U-APSD) power save mode. Valid values: `enable`, `disable`.
	WmmUapsd *string `pulumi:"wmmUapsd"`
	// DSCP marking for video access (default = 32).
	WmmViDscp *int `pulumi:"wmmViDscp"`
	// DSCP marking for voice access (default = 48).
	WmmVoDscp *int `pulumi:"wmmVoDscp"`
}

type WirelessControllerQosProfileState struct {
	// Enable/disable WMM bandwidth admission control. Valid values: `enable`, `disable`.
	BandwidthAdmissionControl pulumi.StringPtrInput
	// Maximum bandwidth capacity allowed (1 - 600000 Kbps, default = 2000).
	BandwidthCapacity pulumi.IntPtrInput
	// Enable/disable client rate burst. Valid values: `enable`, `disable`.
	Burst pulumi.StringPtrInput
	// Enable/disable WMM call admission control. Valid values: `enable`, `disable`.
	CallAdmissionControl pulumi.StringPtrInput
	// Maximum number of Voice over WLAN (VoWLAN) phones allowed (0 - 60, default = 10).
	CallCapacity pulumi.IntPtrInput
	// Comment.
	Comment pulumi.StringPtrInput
	// Maximum downlink bandwidth for Virtual Access Points (VAPs) (0 - 2097152 Kbps, default = 0, 0 means no limit).
	Downlink pulumi.IntPtrInput
	// Maximum downlink bandwidth for clients (0 - 2097152 Kbps, default = 0, 0 means no limit).
	DownlinkSta pulumi.IntPtrInput
	// DSCP mapping for best effort access (default = 0 24). The structure of `dscpWmmBe` block is documented below.
	DscpWmmBes WirelessControllerQosProfileDscpWmmBeArrayInput
	// DSCP mapping for background access (default = 8 16). The structure of `dscpWmmBk` block is documented below.
	DscpWmmBks WirelessControllerQosProfileDscpWmmBkArrayInput
	// Enable/disable Differentiated Services Code Point (DSCP) mapping. Valid values: `enable`, `disable`.
	DscpWmmMapping pulumi.StringPtrInput
	// DSCP mapping for video access (default = 32 40). The structure of `dscpWmmVi` block is documented below.
	DscpWmmVis WirelessControllerQosProfileDscpWmmViArrayInput
	// DSCP mapping for voice access (default = 48 56). The structure of `dscpWmmVo` block is documented below.
	DscpWmmVos WirelessControllerQosProfileDscpWmmVoArrayInput
	// true or false, set this parameter to true when using dynamic forEach + toset to configure and sort sub-tables, please do not set this parameter when configuring static sub-tables.
	DynamicSortSubtable pulumi.StringPtrInput
	// WiFi QoS profile name.
	Name pulumi.StringPtrInput
	// Maximum uplink bandwidth for Virtual Access Points (VAPs) (0 - 2097152 Kbps, default = 0, 0 means no limit).
	Uplink pulumi.IntPtrInput
	// Maximum uplink bandwidth for clients (0 - 2097152 Kbps, default = 0, 0 means no limit).
	UplinkSta pulumi.IntPtrInput
	// Specifies the vdom to which the resource will be applied when the FortiGate unit is running in VDOM mode. Only one vdom can be specified. If you want to inherit the vdom configuration of the provider, please do not set this parameter.
	Vdomparam pulumi.StringPtrInput
	// Enable/disable WiFi multi-media (WMM) control. Valid values: `enable`, `disable`.
	Wmm pulumi.StringPtrInput
	// DSCP marking for best effort access (default = 0).
	WmmBeDscp pulumi.IntPtrInput
	// DSCP marking for background access (default = 8).
	WmmBkDscp pulumi.IntPtrInput
	// Enable/disable WMM Differentiated Services Code Point (DSCP) marking. Valid values: `enable`, `disable`.
	WmmDscpMarking pulumi.StringPtrInput
	// Enable/disable WMM Unscheduled Automatic Power Save Delivery (U-APSD) power save mode. Valid values: `enable`, `disable`.
	WmmUapsd pulumi.StringPtrInput
	// DSCP marking for video access (default = 32).
	WmmViDscp pulumi.IntPtrInput
	// DSCP marking for voice access (default = 48).
	WmmVoDscp pulumi.IntPtrInput
}

func (WirelessControllerQosProfileState) ElementType() reflect.Type {
	return reflect.TypeOf((*wirelessControllerQosProfileState)(nil)).Elem()
}

type wirelessControllerQosProfileArgs struct {
	// Enable/disable WMM bandwidth admission control. Valid values: `enable`, `disable`.
	BandwidthAdmissionControl *string `pulumi:"bandwidthAdmissionControl"`
	// Maximum bandwidth capacity allowed (1 - 600000 Kbps, default = 2000).
	BandwidthCapacity *int `pulumi:"bandwidthCapacity"`
	// Enable/disable client rate burst. Valid values: `enable`, `disable`.
	Burst *string `pulumi:"burst"`
	// Enable/disable WMM call admission control. Valid values: `enable`, `disable`.
	CallAdmissionControl *string `pulumi:"callAdmissionControl"`
	// Maximum number of Voice over WLAN (VoWLAN) phones allowed (0 - 60, default = 10).
	CallCapacity *int `pulumi:"callCapacity"`
	// Comment.
	Comment *string `pulumi:"comment"`
	// Maximum downlink bandwidth for Virtual Access Points (VAPs) (0 - 2097152 Kbps, default = 0, 0 means no limit).
	Downlink *int `pulumi:"downlink"`
	// Maximum downlink bandwidth for clients (0 - 2097152 Kbps, default = 0, 0 means no limit).
	DownlinkSta *int `pulumi:"downlinkSta"`
	// DSCP mapping for best effort access (default = 0 24). The structure of `dscpWmmBe` block is documented below.
	DscpWmmBes []WirelessControllerQosProfileDscpWmmBe `pulumi:"dscpWmmBes"`
	// DSCP mapping for background access (default = 8 16). The structure of `dscpWmmBk` block is documented below.
	DscpWmmBks []WirelessControllerQosProfileDscpWmmBk `pulumi:"dscpWmmBks"`
	// Enable/disable Differentiated Services Code Point (DSCP) mapping. Valid values: `enable`, `disable`.
	DscpWmmMapping *string `pulumi:"dscpWmmMapping"`
	// DSCP mapping for video access (default = 32 40). The structure of `dscpWmmVi` block is documented below.
	DscpWmmVis []WirelessControllerQosProfileDscpWmmVi `pulumi:"dscpWmmVis"`
	// DSCP mapping for voice access (default = 48 56). The structure of `dscpWmmVo` block is documented below.
	DscpWmmVos []WirelessControllerQosProfileDscpWmmVo `pulumi:"dscpWmmVos"`
	// true or false, set this parameter to true when using dynamic forEach + toset to configure and sort sub-tables, please do not set this parameter when configuring static sub-tables.
	DynamicSortSubtable *string `pulumi:"dynamicSortSubtable"`
	// WiFi QoS profile name.
	Name *string `pulumi:"name"`
	// Maximum uplink bandwidth for Virtual Access Points (VAPs) (0 - 2097152 Kbps, default = 0, 0 means no limit).
	Uplink *int `pulumi:"uplink"`
	// Maximum uplink bandwidth for clients (0 - 2097152 Kbps, default = 0, 0 means no limit).
	UplinkSta *int `pulumi:"uplinkSta"`
	// Specifies the vdom to which the resource will be applied when the FortiGate unit is running in VDOM mode. Only one vdom can be specified. If you want to inherit the vdom configuration of the provider, please do not set this parameter.
	Vdomparam *string `pulumi:"vdomparam"`
	// Enable/disable WiFi multi-media (WMM) control. Valid values: `enable`, `disable`.
	Wmm *string `pulumi:"wmm"`
	// DSCP marking for best effort access (default = 0).
	WmmBeDscp *int `pulumi:"wmmBeDscp"`
	// DSCP marking for background access (default = 8).
	WmmBkDscp *int `pulumi:"wmmBkDscp"`
	// Enable/disable WMM Differentiated Services Code Point (DSCP) marking. Valid values: `enable`, `disable`.
	WmmDscpMarking *string `pulumi:"wmmDscpMarking"`
	// Enable/disable WMM Unscheduled Automatic Power Save Delivery (U-APSD) power save mode. Valid values: `enable`, `disable`.
	WmmUapsd *string `pulumi:"wmmUapsd"`
	// DSCP marking for video access (default = 32).
	WmmViDscp *int `pulumi:"wmmViDscp"`
	// DSCP marking for voice access (default = 48).
	WmmVoDscp *int `pulumi:"wmmVoDscp"`
}

// The set of arguments for constructing a WirelessControllerQosProfile resource.
type WirelessControllerQosProfileArgs struct {
	// Enable/disable WMM bandwidth admission control. Valid values: `enable`, `disable`.
	BandwidthAdmissionControl pulumi.StringPtrInput
	// Maximum bandwidth capacity allowed (1 - 600000 Kbps, default = 2000).
	BandwidthCapacity pulumi.IntPtrInput
	// Enable/disable client rate burst. Valid values: `enable`, `disable`.
	Burst pulumi.StringPtrInput
	// Enable/disable WMM call admission control. Valid values: `enable`, `disable`.
	CallAdmissionControl pulumi.StringPtrInput
	// Maximum number of Voice over WLAN (VoWLAN) phones allowed (0 - 60, default = 10).
	CallCapacity pulumi.IntPtrInput
	// Comment.
	Comment pulumi.StringPtrInput
	// Maximum downlink bandwidth for Virtual Access Points (VAPs) (0 - 2097152 Kbps, default = 0, 0 means no limit).
	Downlink pulumi.IntPtrInput
	// Maximum downlink bandwidth for clients (0 - 2097152 Kbps, default = 0, 0 means no limit).
	DownlinkSta pulumi.IntPtrInput
	// DSCP mapping for best effort access (default = 0 24). The structure of `dscpWmmBe` block is documented below.
	DscpWmmBes WirelessControllerQosProfileDscpWmmBeArrayInput
	// DSCP mapping for background access (default = 8 16). The structure of `dscpWmmBk` block is documented below.
	DscpWmmBks WirelessControllerQosProfileDscpWmmBkArrayInput
	// Enable/disable Differentiated Services Code Point (DSCP) mapping. Valid values: `enable`, `disable`.
	DscpWmmMapping pulumi.StringPtrInput
	// DSCP mapping for video access (default = 32 40). The structure of `dscpWmmVi` block is documented below.
	DscpWmmVis WirelessControllerQosProfileDscpWmmViArrayInput
	// DSCP mapping for voice access (default = 48 56). The structure of `dscpWmmVo` block is documented below.
	DscpWmmVos WirelessControllerQosProfileDscpWmmVoArrayInput
	// true or false, set this parameter to true when using dynamic forEach + toset to configure and sort sub-tables, please do not set this parameter when configuring static sub-tables.
	DynamicSortSubtable pulumi.StringPtrInput
	// WiFi QoS profile name.
	Name pulumi.StringPtrInput
	// Maximum uplink bandwidth for Virtual Access Points (VAPs) (0 - 2097152 Kbps, default = 0, 0 means no limit).
	Uplink pulumi.IntPtrInput
	// Maximum uplink bandwidth for clients (0 - 2097152 Kbps, default = 0, 0 means no limit).
	UplinkSta pulumi.IntPtrInput
	// Specifies the vdom to which the resource will be applied when the FortiGate unit is running in VDOM mode. Only one vdom can be specified. If you want to inherit the vdom configuration of the provider, please do not set this parameter.
	Vdomparam pulumi.StringPtrInput
	// Enable/disable WiFi multi-media (WMM) control. Valid values: `enable`, `disable`.
	Wmm pulumi.StringPtrInput
	// DSCP marking for best effort access (default = 0).
	WmmBeDscp pulumi.IntPtrInput
	// DSCP marking for background access (default = 8).
	WmmBkDscp pulumi.IntPtrInput
	// Enable/disable WMM Differentiated Services Code Point (DSCP) marking. Valid values: `enable`, `disable`.
	WmmDscpMarking pulumi.StringPtrInput
	// Enable/disable WMM Unscheduled Automatic Power Save Delivery (U-APSD) power save mode. Valid values: `enable`, `disable`.
	WmmUapsd pulumi.StringPtrInput
	// DSCP marking for video access (default = 32).
	WmmViDscp pulumi.IntPtrInput
	// DSCP marking for voice access (default = 48).
	WmmVoDscp pulumi.IntPtrInput
}

func (WirelessControllerQosProfileArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*wirelessControllerQosProfileArgs)(nil)).Elem()
}

type WirelessControllerQosProfileInput interface {
	pulumi.Input

	ToWirelessControllerQosProfileOutput() WirelessControllerQosProfileOutput
	ToWirelessControllerQosProfileOutputWithContext(ctx context.Context) WirelessControllerQosProfileOutput
}

func (*WirelessControllerQosProfile) ElementType() reflect.Type {
	return reflect.TypeOf((**WirelessControllerQosProfile)(nil)).Elem()
}

func (i *WirelessControllerQosProfile) ToWirelessControllerQosProfileOutput() WirelessControllerQosProfileOutput {
	return i.ToWirelessControllerQosProfileOutputWithContext(context.Background())
}

func (i *WirelessControllerQosProfile) ToWirelessControllerQosProfileOutputWithContext(ctx context.Context) WirelessControllerQosProfileOutput {
	return pulumi.ToOutputWithContext(ctx, i).(WirelessControllerQosProfileOutput)
}

// WirelessControllerQosProfileArrayInput is an input type that accepts WirelessControllerQosProfileArray and WirelessControllerQosProfileArrayOutput values.
// You can construct a concrete instance of `WirelessControllerQosProfileArrayInput` via:
//
//          WirelessControllerQosProfileArray{ WirelessControllerQosProfileArgs{...} }
type WirelessControllerQosProfileArrayInput interface {
	pulumi.Input

	ToWirelessControllerQosProfileArrayOutput() WirelessControllerQosProfileArrayOutput
	ToWirelessControllerQosProfileArrayOutputWithContext(context.Context) WirelessControllerQosProfileArrayOutput
}

type WirelessControllerQosProfileArray []WirelessControllerQosProfileInput

func (WirelessControllerQosProfileArray) ElementType() reflect.Type {
	return reflect.TypeOf((*[]*WirelessControllerQosProfile)(nil)).Elem()
}

func (i WirelessControllerQosProfileArray) ToWirelessControllerQosProfileArrayOutput() WirelessControllerQosProfileArrayOutput {
	return i.ToWirelessControllerQosProfileArrayOutputWithContext(context.Background())
}

func (i WirelessControllerQosProfileArray) ToWirelessControllerQosProfileArrayOutputWithContext(ctx context.Context) WirelessControllerQosProfileArrayOutput {
	return pulumi.ToOutputWithContext(ctx, i).(WirelessControllerQosProfileArrayOutput)
}

// WirelessControllerQosProfileMapInput is an input type that accepts WirelessControllerQosProfileMap and WirelessControllerQosProfileMapOutput values.
// You can construct a concrete instance of `WirelessControllerQosProfileMapInput` via:
//
//          WirelessControllerQosProfileMap{ "key": WirelessControllerQosProfileArgs{...} }
type WirelessControllerQosProfileMapInput interface {
	pulumi.Input

	ToWirelessControllerQosProfileMapOutput() WirelessControllerQosProfileMapOutput
	ToWirelessControllerQosProfileMapOutputWithContext(context.Context) WirelessControllerQosProfileMapOutput
}

type WirelessControllerQosProfileMap map[string]WirelessControllerQosProfileInput

func (WirelessControllerQosProfileMap) ElementType() reflect.Type {
	return reflect.TypeOf((*map[string]*WirelessControllerQosProfile)(nil)).Elem()
}

func (i WirelessControllerQosProfileMap) ToWirelessControllerQosProfileMapOutput() WirelessControllerQosProfileMapOutput {
	return i.ToWirelessControllerQosProfileMapOutputWithContext(context.Background())
}

func (i WirelessControllerQosProfileMap) ToWirelessControllerQosProfileMapOutputWithContext(ctx context.Context) WirelessControllerQosProfileMapOutput {
	return pulumi.ToOutputWithContext(ctx, i).(WirelessControllerQosProfileMapOutput)
}

type WirelessControllerQosProfileOutput struct{ *pulumi.OutputState }

func (WirelessControllerQosProfileOutput) ElementType() reflect.Type {
	return reflect.TypeOf((**WirelessControllerQosProfile)(nil)).Elem()
}

func (o WirelessControllerQosProfileOutput) ToWirelessControllerQosProfileOutput() WirelessControllerQosProfileOutput {
	return o
}

func (o WirelessControllerQosProfileOutput) ToWirelessControllerQosProfileOutputWithContext(ctx context.Context) WirelessControllerQosProfileOutput {
	return o
}

type WirelessControllerQosProfileArrayOutput struct{ *pulumi.OutputState }

func (WirelessControllerQosProfileArrayOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*[]*WirelessControllerQosProfile)(nil)).Elem()
}

func (o WirelessControllerQosProfileArrayOutput) ToWirelessControllerQosProfileArrayOutput() WirelessControllerQosProfileArrayOutput {
	return o
}

func (o WirelessControllerQosProfileArrayOutput) ToWirelessControllerQosProfileArrayOutputWithContext(ctx context.Context) WirelessControllerQosProfileArrayOutput {
	return o
}

func (o WirelessControllerQosProfileArrayOutput) Index(i pulumi.IntInput) WirelessControllerQosProfileOutput {
	return pulumi.All(o, i).ApplyT(func(vs []interface{}) *WirelessControllerQosProfile {
		return vs[0].([]*WirelessControllerQosProfile)[vs[1].(int)]
	}).(WirelessControllerQosProfileOutput)
}

type WirelessControllerQosProfileMapOutput struct{ *pulumi.OutputState }

func (WirelessControllerQosProfileMapOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*map[string]*WirelessControllerQosProfile)(nil)).Elem()
}

func (o WirelessControllerQosProfileMapOutput) ToWirelessControllerQosProfileMapOutput() WirelessControllerQosProfileMapOutput {
	return o
}

func (o WirelessControllerQosProfileMapOutput) ToWirelessControllerQosProfileMapOutputWithContext(ctx context.Context) WirelessControllerQosProfileMapOutput {
	return o
}

func (o WirelessControllerQosProfileMapOutput) MapIndex(k pulumi.StringInput) WirelessControllerQosProfileOutput {
	return pulumi.All(o, k).ApplyT(func(vs []interface{}) *WirelessControllerQosProfile {
		return vs[0].(map[string]*WirelessControllerQosProfile)[vs[1].(string)]
	}).(WirelessControllerQosProfileOutput)
}

func init() {
	pulumi.RegisterInputType(reflect.TypeOf((*WirelessControllerQosProfileInput)(nil)).Elem(), &WirelessControllerQosProfile{})
	pulumi.RegisterInputType(reflect.TypeOf((*WirelessControllerQosProfileArrayInput)(nil)).Elem(), WirelessControllerQosProfileArray{})
	pulumi.RegisterInputType(reflect.TypeOf((*WirelessControllerQosProfileMapInput)(nil)).Elem(), WirelessControllerQosProfileMap{})
	pulumi.RegisterOutputType(WirelessControllerQosProfileOutput{})
	pulumi.RegisterOutputType(WirelessControllerQosProfileArrayOutput{})
	pulumi.RegisterOutputType(WirelessControllerQosProfileMapOutput{})
}
