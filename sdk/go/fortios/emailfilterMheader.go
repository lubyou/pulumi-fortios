// Code generated by the Pulumi Terraform Bridge (tfgen) Tool DO NOT EDIT.
// *** WARNING: Do not edit by hand unless you're certain you know what you are doing! ***

package fortios

import (
	"context"
	"reflect"

	"github.com/pulumi/pulumi/sdk/v3/go/pulumi"
)

type EmailfilterMheader struct {
	pulumi.CustomResourceState

	Comment             pulumi.StringPtrOutput             `pulumi:"comment"`
	DynamicSortSubtable pulumi.StringPtrOutput             `pulumi:"dynamicSortSubtable"`
	Entries             EmailfilterMheaderEntryArrayOutput `pulumi:"entries"`
	Fosid               pulumi.IntOutput                   `pulumi:"fosid"`
	Name                pulumi.StringOutput                `pulumi:"name"`
	Vdomparam           pulumi.StringPtrOutput             `pulumi:"vdomparam"`
}

// NewEmailfilterMheader registers a new resource with the given unique name, arguments, and options.
func NewEmailfilterMheader(ctx *pulumi.Context,
	name string, args *EmailfilterMheaderArgs, opts ...pulumi.ResourceOption) (*EmailfilterMheader, error) {
	if args == nil {
		args = &EmailfilterMheaderArgs{}
	}

	opts = pkgResourceDefaultOpts(opts)
	var resource EmailfilterMheader
	err := ctx.RegisterResource("fortios:index/emailfilterMheader:EmailfilterMheader", name, args, &resource, opts...)
	if err != nil {
		return nil, err
	}
	return &resource, nil
}

// GetEmailfilterMheader gets an existing EmailfilterMheader resource's state with the given name, ID, and optional
// state properties that are used to uniquely qualify the lookup (nil if not required).
func GetEmailfilterMheader(ctx *pulumi.Context,
	name string, id pulumi.IDInput, state *EmailfilterMheaderState, opts ...pulumi.ResourceOption) (*EmailfilterMheader, error) {
	var resource EmailfilterMheader
	err := ctx.ReadResource("fortios:index/emailfilterMheader:EmailfilterMheader", name, id, state, &resource, opts...)
	if err != nil {
		return nil, err
	}
	return &resource, nil
}

// Input properties used for looking up and filtering EmailfilterMheader resources.
type emailfilterMheaderState struct {
	Comment             *string                   `pulumi:"comment"`
	DynamicSortSubtable *string                   `pulumi:"dynamicSortSubtable"`
	Entries             []EmailfilterMheaderEntry `pulumi:"entries"`
	Fosid               *int                      `pulumi:"fosid"`
	Name                *string                   `pulumi:"name"`
	Vdomparam           *string                   `pulumi:"vdomparam"`
}

type EmailfilterMheaderState struct {
	Comment             pulumi.StringPtrInput
	DynamicSortSubtable pulumi.StringPtrInput
	Entries             EmailfilterMheaderEntryArrayInput
	Fosid               pulumi.IntPtrInput
	Name                pulumi.StringPtrInput
	Vdomparam           pulumi.StringPtrInput
}

func (EmailfilterMheaderState) ElementType() reflect.Type {
	return reflect.TypeOf((*emailfilterMheaderState)(nil)).Elem()
}

type emailfilterMheaderArgs struct {
	Comment             *string                   `pulumi:"comment"`
	DynamicSortSubtable *string                   `pulumi:"dynamicSortSubtable"`
	Entries             []EmailfilterMheaderEntry `pulumi:"entries"`
	Fosid               *int                      `pulumi:"fosid"`
	Name                *string                   `pulumi:"name"`
	Vdomparam           *string                   `pulumi:"vdomparam"`
}

// The set of arguments for constructing a EmailfilterMheader resource.
type EmailfilterMheaderArgs struct {
	Comment             pulumi.StringPtrInput
	DynamicSortSubtable pulumi.StringPtrInput
	Entries             EmailfilterMheaderEntryArrayInput
	Fosid               pulumi.IntPtrInput
	Name                pulumi.StringPtrInput
	Vdomparam           pulumi.StringPtrInput
}

func (EmailfilterMheaderArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*emailfilterMheaderArgs)(nil)).Elem()
}

type EmailfilterMheaderInput interface {
	pulumi.Input

	ToEmailfilterMheaderOutput() EmailfilterMheaderOutput
	ToEmailfilterMheaderOutputWithContext(ctx context.Context) EmailfilterMheaderOutput
}

func (*EmailfilterMheader) ElementType() reflect.Type {
	return reflect.TypeOf((**EmailfilterMheader)(nil)).Elem()
}

func (i *EmailfilterMheader) ToEmailfilterMheaderOutput() EmailfilterMheaderOutput {
	return i.ToEmailfilterMheaderOutputWithContext(context.Background())
}

func (i *EmailfilterMheader) ToEmailfilterMheaderOutputWithContext(ctx context.Context) EmailfilterMheaderOutput {
	return pulumi.ToOutputWithContext(ctx, i).(EmailfilterMheaderOutput)
}

// EmailfilterMheaderArrayInput is an input type that accepts EmailfilterMheaderArray and EmailfilterMheaderArrayOutput values.
// You can construct a concrete instance of `EmailfilterMheaderArrayInput` via:
//
//	EmailfilterMheaderArray{ EmailfilterMheaderArgs{...} }
type EmailfilterMheaderArrayInput interface {
	pulumi.Input

	ToEmailfilterMheaderArrayOutput() EmailfilterMheaderArrayOutput
	ToEmailfilterMheaderArrayOutputWithContext(context.Context) EmailfilterMheaderArrayOutput
}

type EmailfilterMheaderArray []EmailfilterMheaderInput

func (EmailfilterMheaderArray) ElementType() reflect.Type {
	return reflect.TypeOf((*[]*EmailfilterMheader)(nil)).Elem()
}

func (i EmailfilterMheaderArray) ToEmailfilterMheaderArrayOutput() EmailfilterMheaderArrayOutput {
	return i.ToEmailfilterMheaderArrayOutputWithContext(context.Background())
}

func (i EmailfilterMheaderArray) ToEmailfilterMheaderArrayOutputWithContext(ctx context.Context) EmailfilterMheaderArrayOutput {
	return pulumi.ToOutputWithContext(ctx, i).(EmailfilterMheaderArrayOutput)
}

// EmailfilterMheaderMapInput is an input type that accepts EmailfilterMheaderMap and EmailfilterMheaderMapOutput values.
// You can construct a concrete instance of `EmailfilterMheaderMapInput` via:
//
//	EmailfilterMheaderMap{ "key": EmailfilterMheaderArgs{...} }
type EmailfilterMheaderMapInput interface {
	pulumi.Input

	ToEmailfilterMheaderMapOutput() EmailfilterMheaderMapOutput
	ToEmailfilterMheaderMapOutputWithContext(context.Context) EmailfilterMheaderMapOutput
}

type EmailfilterMheaderMap map[string]EmailfilterMheaderInput

func (EmailfilterMheaderMap) ElementType() reflect.Type {
	return reflect.TypeOf((*map[string]*EmailfilterMheader)(nil)).Elem()
}

func (i EmailfilterMheaderMap) ToEmailfilterMheaderMapOutput() EmailfilterMheaderMapOutput {
	return i.ToEmailfilterMheaderMapOutputWithContext(context.Background())
}

func (i EmailfilterMheaderMap) ToEmailfilterMheaderMapOutputWithContext(ctx context.Context) EmailfilterMheaderMapOutput {
	return pulumi.ToOutputWithContext(ctx, i).(EmailfilterMheaderMapOutput)
}

type EmailfilterMheaderOutput struct{ *pulumi.OutputState }

func (EmailfilterMheaderOutput) ElementType() reflect.Type {
	return reflect.TypeOf((**EmailfilterMheader)(nil)).Elem()
}

func (o EmailfilterMheaderOutput) ToEmailfilterMheaderOutput() EmailfilterMheaderOutput {
	return o
}

func (o EmailfilterMheaderOutput) ToEmailfilterMheaderOutputWithContext(ctx context.Context) EmailfilterMheaderOutput {
	return o
}

func (o EmailfilterMheaderOutput) Comment() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *EmailfilterMheader) pulumi.StringPtrOutput { return v.Comment }).(pulumi.StringPtrOutput)
}

func (o EmailfilterMheaderOutput) DynamicSortSubtable() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *EmailfilterMheader) pulumi.StringPtrOutput { return v.DynamicSortSubtable }).(pulumi.StringPtrOutput)
}

func (o EmailfilterMheaderOutput) Entries() EmailfilterMheaderEntryArrayOutput {
	return o.ApplyT(func(v *EmailfilterMheader) EmailfilterMheaderEntryArrayOutput { return v.Entries }).(EmailfilterMheaderEntryArrayOutput)
}

func (o EmailfilterMheaderOutput) Fosid() pulumi.IntOutput {
	return o.ApplyT(func(v *EmailfilterMheader) pulumi.IntOutput { return v.Fosid }).(pulumi.IntOutput)
}

func (o EmailfilterMheaderOutput) Name() pulumi.StringOutput {
	return o.ApplyT(func(v *EmailfilterMheader) pulumi.StringOutput { return v.Name }).(pulumi.StringOutput)
}

func (o EmailfilterMheaderOutput) Vdomparam() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *EmailfilterMheader) pulumi.StringPtrOutput { return v.Vdomparam }).(pulumi.StringPtrOutput)
}

type EmailfilterMheaderArrayOutput struct{ *pulumi.OutputState }

func (EmailfilterMheaderArrayOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*[]*EmailfilterMheader)(nil)).Elem()
}

func (o EmailfilterMheaderArrayOutput) ToEmailfilterMheaderArrayOutput() EmailfilterMheaderArrayOutput {
	return o
}

func (o EmailfilterMheaderArrayOutput) ToEmailfilterMheaderArrayOutputWithContext(ctx context.Context) EmailfilterMheaderArrayOutput {
	return o
}

func (o EmailfilterMheaderArrayOutput) Index(i pulumi.IntInput) EmailfilterMheaderOutput {
	return pulumi.All(o, i).ApplyT(func(vs []interface{}) *EmailfilterMheader {
		return vs[0].([]*EmailfilterMheader)[vs[1].(int)]
	}).(EmailfilterMheaderOutput)
}

type EmailfilterMheaderMapOutput struct{ *pulumi.OutputState }

func (EmailfilterMheaderMapOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*map[string]*EmailfilterMheader)(nil)).Elem()
}

func (o EmailfilterMheaderMapOutput) ToEmailfilterMheaderMapOutput() EmailfilterMheaderMapOutput {
	return o
}

func (o EmailfilterMheaderMapOutput) ToEmailfilterMheaderMapOutputWithContext(ctx context.Context) EmailfilterMheaderMapOutput {
	return o
}

func (o EmailfilterMheaderMapOutput) MapIndex(k pulumi.StringInput) EmailfilterMheaderOutput {
	return pulumi.All(o, k).ApplyT(func(vs []interface{}) *EmailfilterMheader {
		return vs[0].(map[string]*EmailfilterMheader)[vs[1].(string)]
	}).(EmailfilterMheaderOutput)
}

func init() {
	pulumi.RegisterInputType(reflect.TypeOf((*EmailfilterMheaderInput)(nil)).Elem(), &EmailfilterMheader{})
	pulumi.RegisterInputType(reflect.TypeOf((*EmailfilterMheaderArrayInput)(nil)).Elem(), EmailfilterMheaderArray{})
	pulumi.RegisterInputType(reflect.TypeOf((*EmailfilterMheaderMapInput)(nil)).Elem(), EmailfilterMheaderMap{})
	pulumi.RegisterOutputType(EmailfilterMheaderOutput{})
	pulumi.RegisterOutputType(EmailfilterMheaderArrayOutput{})
	pulumi.RegisterOutputType(EmailfilterMheaderMapOutput{})
}
