// Code generated by the Pulumi Terraform Bridge (tfgen) Tool DO NOT EDIT.
// *** WARNING: Do not edit by hand unless you're certain you know what you are doing! ***

package fortios

import (
	"context"
	"reflect"

	"errors"
	"github.com/lubyou/pulumi-fortios/sdk/go/fortios/internal"
	"github.com/pulumi/pulumi/sdk/v3/go/pulumi"
)

type VpnCertificateSetting struct {
	pulumi.CustomResourceState

	CertExpireWarning     pulumi.IntOutput                           `pulumi:"certExpireWarning"`
	CertnameDsa1024       pulumi.StringOutput                        `pulumi:"certnameDsa1024"`
	CertnameDsa2048       pulumi.StringOutput                        `pulumi:"certnameDsa2048"`
	CertnameEcdsa256      pulumi.StringOutput                        `pulumi:"certnameEcdsa256"`
	CertnameEcdsa384      pulumi.StringOutput                        `pulumi:"certnameEcdsa384"`
	CertnameEcdsa521      pulumi.StringOutput                        `pulumi:"certnameEcdsa521"`
	CertnameEd25519       pulumi.StringOutput                        `pulumi:"certnameEd25519"`
	CertnameEd448         pulumi.StringOutput                        `pulumi:"certnameEd448"`
	CertnameRsa1024       pulumi.StringOutput                        `pulumi:"certnameRsa1024"`
	CertnameRsa2048       pulumi.StringOutput                        `pulumi:"certnameRsa2048"`
	CertnameRsa4096       pulumi.StringOutput                        `pulumi:"certnameRsa4096"`
	CheckCaCert           pulumi.StringOutput                        `pulumi:"checkCaCert"`
	CheckCaChain          pulumi.StringOutput                        `pulumi:"checkCaChain"`
	CmpKeyUsageChecking   pulumi.StringOutput                        `pulumi:"cmpKeyUsageChecking"`
	CmpSaveExtraCerts     pulumi.StringOutput                        `pulumi:"cmpSaveExtraCerts"`
	CnAllowMulti          pulumi.StringOutput                        `pulumi:"cnAllowMulti"`
	CnMatch               pulumi.StringOutput                        `pulumi:"cnMatch"`
	CrlVerification       VpnCertificateSettingCrlVerificationOutput `pulumi:"crlVerification"`
	GetAllTables          pulumi.StringPtrOutput                     `pulumi:"getAllTables"`
	Interface             pulumi.StringOutput                        `pulumi:"interface"`
	InterfaceSelectMethod pulumi.StringOutput                        `pulumi:"interfaceSelectMethod"`
	OcspDefaultServer     pulumi.StringOutput                        `pulumi:"ocspDefaultServer"`
	OcspOption            pulumi.StringOutput                        `pulumi:"ocspOption"`
	OcspStatus            pulumi.StringOutput                        `pulumi:"ocspStatus"`
	Proxy                 pulumi.StringOutput                        `pulumi:"proxy"`
	ProxyPassword         pulumi.StringPtrOutput                     `pulumi:"proxyPassword"`
	ProxyPort             pulumi.IntOutput                           `pulumi:"proxyPort"`
	ProxyUsername         pulumi.StringOutput                        `pulumi:"proxyUsername"`
	SourceIp              pulumi.StringOutput                        `pulumi:"sourceIp"`
	SslMinProtoVersion    pulumi.StringOutput                        `pulumi:"sslMinProtoVersion"`
	SslOcspSourceIp       pulumi.StringOutput                        `pulumi:"sslOcspSourceIp"`
	StrictCrlCheck        pulumi.StringOutput                        `pulumi:"strictCrlCheck"`
	StrictOcspCheck       pulumi.StringOutput                        `pulumi:"strictOcspCheck"`
	SubjectMatch          pulumi.StringOutput                        `pulumi:"subjectMatch"`
	SubjectSet            pulumi.StringOutput                        `pulumi:"subjectSet"`
	Vdomparam             pulumi.StringPtrOutput                     `pulumi:"vdomparam"`
}

// NewVpnCertificateSetting registers a new resource with the given unique name, arguments, and options.
func NewVpnCertificateSetting(ctx *pulumi.Context,
	name string, args *VpnCertificateSettingArgs, opts ...pulumi.ResourceOption) (*VpnCertificateSetting, error) {
	if args == nil {
		return nil, errors.New("missing one or more required arguments")
	}

	if args.CertnameDsa1024 == nil {
		return nil, errors.New("invalid value for required argument 'CertnameDsa1024'")
	}
	if args.CertnameDsa2048 == nil {
		return nil, errors.New("invalid value for required argument 'CertnameDsa2048'")
	}
	if args.CertnameEcdsa256 == nil {
		return nil, errors.New("invalid value for required argument 'CertnameEcdsa256'")
	}
	if args.CertnameEcdsa384 == nil {
		return nil, errors.New("invalid value for required argument 'CertnameEcdsa384'")
	}
	if args.CertnameRsa1024 == nil {
		return nil, errors.New("invalid value for required argument 'CertnameRsa1024'")
	}
	if args.CertnameRsa2048 == nil {
		return nil, errors.New("invalid value for required argument 'CertnameRsa2048'")
	}
	opts = internal.PkgResourceDefaultOpts(opts)
	var resource VpnCertificateSetting
	err := ctx.RegisterResource("fortios:index/vpnCertificateSetting:VpnCertificateSetting", name, args, &resource, opts...)
	if err != nil {
		return nil, err
	}
	return &resource, nil
}

// GetVpnCertificateSetting gets an existing VpnCertificateSetting resource's state with the given name, ID, and optional
// state properties that are used to uniquely qualify the lookup (nil if not required).
func GetVpnCertificateSetting(ctx *pulumi.Context,
	name string, id pulumi.IDInput, state *VpnCertificateSettingState, opts ...pulumi.ResourceOption) (*VpnCertificateSetting, error) {
	var resource VpnCertificateSetting
	err := ctx.ReadResource("fortios:index/vpnCertificateSetting:VpnCertificateSetting", name, id, state, &resource, opts...)
	if err != nil {
		return nil, err
	}
	return &resource, nil
}

// Input properties used for looking up and filtering VpnCertificateSetting resources.
type vpnCertificateSettingState struct {
	CertExpireWarning     *int                                  `pulumi:"certExpireWarning"`
	CertnameDsa1024       *string                               `pulumi:"certnameDsa1024"`
	CertnameDsa2048       *string                               `pulumi:"certnameDsa2048"`
	CertnameEcdsa256      *string                               `pulumi:"certnameEcdsa256"`
	CertnameEcdsa384      *string                               `pulumi:"certnameEcdsa384"`
	CertnameEcdsa521      *string                               `pulumi:"certnameEcdsa521"`
	CertnameEd25519       *string                               `pulumi:"certnameEd25519"`
	CertnameEd448         *string                               `pulumi:"certnameEd448"`
	CertnameRsa1024       *string                               `pulumi:"certnameRsa1024"`
	CertnameRsa2048       *string                               `pulumi:"certnameRsa2048"`
	CertnameRsa4096       *string                               `pulumi:"certnameRsa4096"`
	CheckCaCert           *string                               `pulumi:"checkCaCert"`
	CheckCaChain          *string                               `pulumi:"checkCaChain"`
	CmpKeyUsageChecking   *string                               `pulumi:"cmpKeyUsageChecking"`
	CmpSaveExtraCerts     *string                               `pulumi:"cmpSaveExtraCerts"`
	CnAllowMulti          *string                               `pulumi:"cnAllowMulti"`
	CnMatch               *string                               `pulumi:"cnMatch"`
	CrlVerification       *VpnCertificateSettingCrlVerification `pulumi:"crlVerification"`
	GetAllTables          *string                               `pulumi:"getAllTables"`
	Interface             *string                               `pulumi:"interface"`
	InterfaceSelectMethod *string                               `pulumi:"interfaceSelectMethod"`
	OcspDefaultServer     *string                               `pulumi:"ocspDefaultServer"`
	OcspOption            *string                               `pulumi:"ocspOption"`
	OcspStatus            *string                               `pulumi:"ocspStatus"`
	Proxy                 *string                               `pulumi:"proxy"`
	ProxyPassword         *string                               `pulumi:"proxyPassword"`
	ProxyPort             *int                                  `pulumi:"proxyPort"`
	ProxyUsername         *string                               `pulumi:"proxyUsername"`
	SourceIp              *string                               `pulumi:"sourceIp"`
	SslMinProtoVersion    *string                               `pulumi:"sslMinProtoVersion"`
	SslOcspSourceIp       *string                               `pulumi:"sslOcspSourceIp"`
	StrictCrlCheck        *string                               `pulumi:"strictCrlCheck"`
	StrictOcspCheck       *string                               `pulumi:"strictOcspCheck"`
	SubjectMatch          *string                               `pulumi:"subjectMatch"`
	SubjectSet            *string                               `pulumi:"subjectSet"`
	Vdomparam             *string                               `pulumi:"vdomparam"`
}

type VpnCertificateSettingState struct {
	CertExpireWarning     pulumi.IntPtrInput
	CertnameDsa1024       pulumi.StringPtrInput
	CertnameDsa2048       pulumi.StringPtrInput
	CertnameEcdsa256      pulumi.StringPtrInput
	CertnameEcdsa384      pulumi.StringPtrInput
	CertnameEcdsa521      pulumi.StringPtrInput
	CertnameEd25519       pulumi.StringPtrInput
	CertnameEd448         pulumi.StringPtrInput
	CertnameRsa1024       pulumi.StringPtrInput
	CertnameRsa2048       pulumi.StringPtrInput
	CertnameRsa4096       pulumi.StringPtrInput
	CheckCaCert           pulumi.StringPtrInput
	CheckCaChain          pulumi.StringPtrInput
	CmpKeyUsageChecking   pulumi.StringPtrInput
	CmpSaveExtraCerts     pulumi.StringPtrInput
	CnAllowMulti          pulumi.StringPtrInput
	CnMatch               pulumi.StringPtrInput
	CrlVerification       VpnCertificateSettingCrlVerificationPtrInput
	GetAllTables          pulumi.StringPtrInput
	Interface             pulumi.StringPtrInput
	InterfaceSelectMethod pulumi.StringPtrInput
	OcspDefaultServer     pulumi.StringPtrInput
	OcspOption            pulumi.StringPtrInput
	OcspStatus            pulumi.StringPtrInput
	Proxy                 pulumi.StringPtrInput
	ProxyPassword         pulumi.StringPtrInput
	ProxyPort             pulumi.IntPtrInput
	ProxyUsername         pulumi.StringPtrInput
	SourceIp              pulumi.StringPtrInput
	SslMinProtoVersion    pulumi.StringPtrInput
	SslOcspSourceIp       pulumi.StringPtrInput
	StrictCrlCheck        pulumi.StringPtrInput
	StrictOcspCheck       pulumi.StringPtrInput
	SubjectMatch          pulumi.StringPtrInput
	SubjectSet            pulumi.StringPtrInput
	Vdomparam             pulumi.StringPtrInput
}

func (VpnCertificateSettingState) ElementType() reflect.Type {
	return reflect.TypeOf((*vpnCertificateSettingState)(nil)).Elem()
}

type vpnCertificateSettingArgs struct {
	CertExpireWarning     *int                                  `pulumi:"certExpireWarning"`
	CertnameDsa1024       string                                `pulumi:"certnameDsa1024"`
	CertnameDsa2048       string                                `pulumi:"certnameDsa2048"`
	CertnameEcdsa256      string                                `pulumi:"certnameEcdsa256"`
	CertnameEcdsa384      string                                `pulumi:"certnameEcdsa384"`
	CertnameEcdsa521      *string                               `pulumi:"certnameEcdsa521"`
	CertnameEd25519       *string                               `pulumi:"certnameEd25519"`
	CertnameEd448         *string                               `pulumi:"certnameEd448"`
	CertnameRsa1024       string                                `pulumi:"certnameRsa1024"`
	CertnameRsa2048       string                                `pulumi:"certnameRsa2048"`
	CertnameRsa4096       *string                               `pulumi:"certnameRsa4096"`
	CheckCaCert           *string                               `pulumi:"checkCaCert"`
	CheckCaChain          *string                               `pulumi:"checkCaChain"`
	CmpKeyUsageChecking   *string                               `pulumi:"cmpKeyUsageChecking"`
	CmpSaveExtraCerts     *string                               `pulumi:"cmpSaveExtraCerts"`
	CnAllowMulti          *string                               `pulumi:"cnAllowMulti"`
	CnMatch               *string                               `pulumi:"cnMatch"`
	CrlVerification       *VpnCertificateSettingCrlVerification `pulumi:"crlVerification"`
	GetAllTables          *string                               `pulumi:"getAllTables"`
	Interface             *string                               `pulumi:"interface"`
	InterfaceSelectMethod *string                               `pulumi:"interfaceSelectMethod"`
	OcspDefaultServer     *string                               `pulumi:"ocspDefaultServer"`
	OcspOption            *string                               `pulumi:"ocspOption"`
	OcspStatus            *string                               `pulumi:"ocspStatus"`
	Proxy                 *string                               `pulumi:"proxy"`
	ProxyPassword         *string                               `pulumi:"proxyPassword"`
	ProxyPort             *int                                  `pulumi:"proxyPort"`
	ProxyUsername         *string                               `pulumi:"proxyUsername"`
	SourceIp              *string                               `pulumi:"sourceIp"`
	SslMinProtoVersion    *string                               `pulumi:"sslMinProtoVersion"`
	SslOcspSourceIp       *string                               `pulumi:"sslOcspSourceIp"`
	StrictCrlCheck        *string                               `pulumi:"strictCrlCheck"`
	StrictOcspCheck       *string                               `pulumi:"strictOcspCheck"`
	SubjectMatch          *string                               `pulumi:"subjectMatch"`
	SubjectSet            *string                               `pulumi:"subjectSet"`
	Vdomparam             *string                               `pulumi:"vdomparam"`
}

// The set of arguments for constructing a VpnCertificateSetting resource.
type VpnCertificateSettingArgs struct {
	CertExpireWarning     pulumi.IntPtrInput
	CertnameDsa1024       pulumi.StringInput
	CertnameDsa2048       pulumi.StringInput
	CertnameEcdsa256      pulumi.StringInput
	CertnameEcdsa384      pulumi.StringInput
	CertnameEcdsa521      pulumi.StringPtrInput
	CertnameEd25519       pulumi.StringPtrInput
	CertnameEd448         pulumi.StringPtrInput
	CertnameRsa1024       pulumi.StringInput
	CertnameRsa2048       pulumi.StringInput
	CertnameRsa4096       pulumi.StringPtrInput
	CheckCaCert           pulumi.StringPtrInput
	CheckCaChain          pulumi.StringPtrInput
	CmpKeyUsageChecking   pulumi.StringPtrInput
	CmpSaveExtraCerts     pulumi.StringPtrInput
	CnAllowMulti          pulumi.StringPtrInput
	CnMatch               pulumi.StringPtrInput
	CrlVerification       VpnCertificateSettingCrlVerificationPtrInput
	GetAllTables          pulumi.StringPtrInput
	Interface             pulumi.StringPtrInput
	InterfaceSelectMethod pulumi.StringPtrInput
	OcspDefaultServer     pulumi.StringPtrInput
	OcspOption            pulumi.StringPtrInput
	OcspStatus            pulumi.StringPtrInput
	Proxy                 pulumi.StringPtrInput
	ProxyPassword         pulumi.StringPtrInput
	ProxyPort             pulumi.IntPtrInput
	ProxyUsername         pulumi.StringPtrInput
	SourceIp              pulumi.StringPtrInput
	SslMinProtoVersion    pulumi.StringPtrInput
	SslOcspSourceIp       pulumi.StringPtrInput
	StrictCrlCheck        pulumi.StringPtrInput
	StrictOcspCheck       pulumi.StringPtrInput
	SubjectMatch          pulumi.StringPtrInput
	SubjectSet            pulumi.StringPtrInput
	Vdomparam             pulumi.StringPtrInput
}

func (VpnCertificateSettingArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*vpnCertificateSettingArgs)(nil)).Elem()
}

type VpnCertificateSettingInput interface {
	pulumi.Input

	ToVpnCertificateSettingOutput() VpnCertificateSettingOutput
	ToVpnCertificateSettingOutputWithContext(ctx context.Context) VpnCertificateSettingOutput
}

func (*VpnCertificateSetting) ElementType() reflect.Type {
	return reflect.TypeOf((**VpnCertificateSetting)(nil)).Elem()
}

func (i *VpnCertificateSetting) ToVpnCertificateSettingOutput() VpnCertificateSettingOutput {
	return i.ToVpnCertificateSettingOutputWithContext(context.Background())
}

func (i *VpnCertificateSetting) ToVpnCertificateSettingOutputWithContext(ctx context.Context) VpnCertificateSettingOutput {
	return pulumi.ToOutputWithContext(ctx, i).(VpnCertificateSettingOutput)
}

// VpnCertificateSettingArrayInput is an input type that accepts VpnCertificateSettingArray and VpnCertificateSettingArrayOutput values.
// You can construct a concrete instance of `VpnCertificateSettingArrayInput` via:
//
//	VpnCertificateSettingArray{ VpnCertificateSettingArgs{...} }
type VpnCertificateSettingArrayInput interface {
	pulumi.Input

	ToVpnCertificateSettingArrayOutput() VpnCertificateSettingArrayOutput
	ToVpnCertificateSettingArrayOutputWithContext(context.Context) VpnCertificateSettingArrayOutput
}

type VpnCertificateSettingArray []VpnCertificateSettingInput

func (VpnCertificateSettingArray) ElementType() reflect.Type {
	return reflect.TypeOf((*[]*VpnCertificateSetting)(nil)).Elem()
}

func (i VpnCertificateSettingArray) ToVpnCertificateSettingArrayOutput() VpnCertificateSettingArrayOutput {
	return i.ToVpnCertificateSettingArrayOutputWithContext(context.Background())
}

func (i VpnCertificateSettingArray) ToVpnCertificateSettingArrayOutputWithContext(ctx context.Context) VpnCertificateSettingArrayOutput {
	return pulumi.ToOutputWithContext(ctx, i).(VpnCertificateSettingArrayOutput)
}

// VpnCertificateSettingMapInput is an input type that accepts VpnCertificateSettingMap and VpnCertificateSettingMapOutput values.
// You can construct a concrete instance of `VpnCertificateSettingMapInput` via:
//
//	VpnCertificateSettingMap{ "key": VpnCertificateSettingArgs{...} }
type VpnCertificateSettingMapInput interface {
	pulumi.Input

	ToVpnCertificateSettingMapOutput() VpnCertificateSettingMapOutput
	ToVpnCertificateSettingMapOutputWithContext(context.Context) VpnCertificateSettingMapOutput
}

type VpnCertificateSettingMap map[string]VpnCertificateSettingInput

func (VpnCertificateSettingMap) ElementType() reflect.Type {
	return reflect.TypeOf((*map[string]*VpnCertificateSetting)(nil)).Elem()
}

func (i VpnCertificateSettingMap) ToVpnCertificateSettingMapOutput() VpnCertificateSettingMapOutput {
	return i.ToVpnCertificateSettingMapOutputWithContext(context.Background())
}

func (i VpnCertificateSettingMap) ToVpnCertificateSettingMapOutputWithContext(ctx context.Context) VpnCertificateSettingMapOutput {
	return pulumi.ToOutputWithContext(ctx, i).(VpnCertificateSettingMapOutput)
}

type VpnCertificateSettingOutput struct{ *pulumi.OutputState }

func (VpnCertificateSettingOutput) ElementType() reflect.Type {
	return reflect.TypeOf((**VpnCertificateSetting)(nil)).Elem()
}

func (o VpnCertificateSettingOutput) ToVpnCertificateSettingOutput() VpnCertificateSettingOutput {
	return o
}

func (o VpnCertificateSettingOutput) ToVpnCertificateSettingOutputWithContext(ctx context.Context) VpnCertificateSettingOutput {
	return o
}

func (o VpnCertificateSettingOutput) CertExpireWarning() pulumi.IntOutput {
	return o.ApplyT(func(v *VpnCertificateSetting) pulumi.IntOutput { return v.CertExpireWarning }).(pulumi.IntOutput)
}

func (o VpnCertificateSettingOutput) CertnameDsa1024() pulumi.StringOutput {
	return o.ApplyT(func(v *VpnCertificateSetting) pulumi.StringOutput { return v.CertnameDsa1024 }).(pulumi.StringOutput)
}

func (o VpnCertificateSettingOutput) CertnameDsa2048() pulumi.StringOutput {
	return o.ApplyT(func(v *VpnCertificateSetting) pulumi.StringOutput { return v.CertnameDsa2048 }).(pulumi.StringOutput)
}

func (o VpnCertificateSettingOutput) CertnameEcdsa256() pulumi.StringOutput {
	return o.ApplyT(func(v *VpnCertificateSetting) pulumi.StringOutput { return v.CertnameEcdsa256 }).(pulumi.StringOutput)
}

func (o VpnCertificateSettingOutput) CertnameEcdsa384() pulumi.StringOutput {
	return o.ApplyT(func(v *VpnCertificateSetting) pulumi.StringOutput { return v.CertnameEcdsa384 }).(pulumi.StringOutput)
}

func (o VpnCertificateSettingOutput) CertnameEcdsa521() pulumi.StringOutput {
	return o.ApplyT(func(v *VpnCertificateSetting) pulumi.StringOutput { return v.CertnameEcdsa521 }).(pulumi.StringOutput)
}

func (o VpnCertificateSettingOutput) CertnameEd25519() pulumi.StringOutput {
	return o.ApplyT(func(v *VpnCertificateSetting) pulumi.StringOutput { return v.CertnameEd25519 }).(pulumi.StringOutput)
}

func (o VpnCertificateSettingOutput) CertnameEd448() pulumi.StringOutput {
	return o.ApplyT(func(v *VpnCertificateSetting) pulumi.StringOutput { return v.CertnameEd448 }).(pulumi.StringOutput)
}

func (o VpnCertificateSettingOutput) CertnameRsa1024() pulumi.StringOutput {
	return o.ApplyT(func(v *VpnCertificateSetting) pulumi.StringOutput { return v.CertnameRsa1024 }).(pulumi.StringOutput)
}

func (o VpnCertificateSettingOutput) CertnameRsa2048() pulumi.StringOutput {
	return o.ApplyT(func(v *VpnCertificateSetting) pulumi.StringOutput { return v.CertnameRsa2048 }).(pulumi.StringOutput)
}

func (o VpnCertificateSettingOutput) CertnameRsa4096() pulumi.StringOutput {
	return o.ApplyT(func(v *VpnCertificateSetting) pulumi.StringOutput { return v.CertnameRsa4096 }).(pulumi.StringOutput)
}

func (o VpnCertificateSettingOutput) CheckCaCert() pulumi.StringOutput {
	return o.ApplyT(func(v *VpnCertificateSetting) pulumi.StringOutput { return v.CheckCaCert }).(pulumi.StringOutput)
}

func (o VpnCertificateSettingOutput) CheckCaChain() pulumi.StringOutput {
	return o.ApplyT(func(v *VpnCertificateSetting) pulumi.StringOutput { return v.CheckCaChain }).(pulumi.StringOutput)
}

func (o VpnCertificateSettingOutput) CmpKeyUsageChecking() pulumi.StringOutput {
	return o.ApplyT(func(v *VpnCertificateSetting) pulumi.StringOutput { return v.CmpKeyUsageChecking }).(pulumi.StringOutput)
}

func (o VpnCertificateSettingOutput) CmpSaveExtraCerts() pulumi.StringOutput {
	return o.ApplyT(func(v *VpnCertificateSetting) pulumi.StringOutput { return v.CmpSaveExtraCerts }).(pulumi.StringOutput)
}

func (o VpnCertificateSettingOutput) CnAllowMulti() pulumi.StringOutput {
	return o.ApplyT(func(v *VpnCertificateSetting) pulumi.StringOutput { return v.CnAllowMulti }).(pulumi.StringOutput)
}

func (o VpnCertificateSettingOutput) CnMatch() pulumi.StringOutput {
	return o.ApplyT(func(v *VpnCertificateSetting) pulumi.StringOutput { return v.CnMatch }).(pulumi.StringOutput)
}

func (o VpnCertificateSettingOutput) CrlVerification() VpnCertificateSettingCrlVerificationOutput {
	return o.ApplyT(func(v *VpnCertificateSetting) VpnCertificateSettingCrlVerificationOutput { return v.CrlVerification }).(VpnCertificateSettingCrlVerificationOutput)
}

func (o VpnCertificateSettingOutput) GetAllTables() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *VpnCertificateSetting) pulumi.StringPtrOutput { return v.GetAllTables }).(pulumi.StringPtrOutput)
}

func (o VpnCertificateSettingOutput) Interface() pulumi.StringOutput {
	return o.ApplyT(func(v *VpnCertificateSetting) pulumi.StringOutput { return v.Interface }).(pulumi.StringOutput)
}

func (o VpnCertificateSettingOutput) InterfaceSelectMethod() pulumi.StringOutput {
	return o.ApplyT(func(v *VpnCertificateSetting) pulumi.StringOutput { return v.InterfaceSelectMethod }).(pulumi.StringOutput)
}

func (o VpnCertificateSettingOutput) OcspDefaultServer() pulumi.StringOutput {
	return o.ApplyT(func(v *VpnCertificateSetting) pulumi.StringOutput { return v.OcspDefaultServer }).(pulumi.StringOutput)
}

func (o VpnCertificateSettingOutput) OcspOption() pulumi.StringOutput {
	return o.ApplyT(func(v *VpnCertificateSetting) pulumi.StringOutput { return v.OcspOption }).(pulumi.StringOutput)
}

func (o VpnCertificateSettingOutput) OcspStatus() pulumi.StringOutput {
	return o.ApplyT(func(v *VpnCertificateSetting) pulumi.StringOutput { return v.OcspStatus }).(pulumi.StringOutput)
}

func (o VpnCertificateSettingOutput) Proxy() pulumi.StringOutput {
	return o.ApplyT(func(v *VpnCertificateSetting) pulumi.StringOutput { return v.Proxy }).(pulumi.StringOutput)
}

func (o VpnCertificateSettingOutput) ProxyPassword() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *VpnCertificateSetting) pulumi.StringPtrOutput { return v.ProxyPassword }).(pulumi.StringPtrOutput)
}

func (o VpnCertificateSettingOutput) ProxyPort() pulumi.IntOutput {
	return o.ApplyT(func(v *VpnCertificateSetting) pulumi.IntOutput { return v.ProxyPort }).(pulumi.IntOutput)
}

func (o VpnCertificateSettingOutput) ProxyUsername() pulumi.StringOutput {
	return o.ApplyT(func(v *VpnCertificateSetting) pulumi.StringOutput { return v.ProxyUsername }).(pulumi.StringOutput)
}

func (o VpnCertificateSettingOutput) SourceIp() pulumi.StringOutput {
	return o.ApplyT(func(v *VpnCertificateSetting) pulumi.StringOutput { return v.SourceIp }).(pulumi.StringOutput)
}

func (o VpnCertificateSettingOutput) SslMinProtoVersion() pulumi.StringOutput {
	return o.ApplyT(func(v *VpnCertificateSetting) pulumi.StringOutput { return v.SslMinProtoVersion }).(pulumi.StringOutput)
}

func (o VpnCertificateSettingOutput) SslOcspSourceIp() pulumi.StringOutput {
	return o.ApplyT(func(v *VpnCertificateSetting) pulumi.StringOutput { return v.SslOcspSourceIp }).(pulumi.StringOutput)
}

func (o VpnCertificateSettingOutput) StrictCrlCheck() pulumi.StringOutput {
	return o.ApplyT(func(v *VpnCertificateSetting) pulumi.StringOutput { return v.StrictCrlCheck }).(pulumi.StringOutput)
}

func (o VpnCertificateSettingOutput) StrictOcspCheck() pulumi.StringOutput {
	return o.ApplyT(func(v *VpnCertificateSetting) pulumi.StringOutput { return v.StrictOcspCheck }).(pulumi.StringOutput)
}

func (o VpnCertificateSettingOutput) SubjectMatch() pulumi.StringOutput {
	return o.ApplyT(func(v *VpnCertificateSetting) pulumi.StringOutput { return v.SubjectMatch }).(pulumi.StringOutput)
}

func (o VpnCertificateSettingOutput) SubjectSet() pulumi.StringOutput {
	return o.ApplyT(func(v *VpnCertificateSetting) pulumi.StringOutput { return v.SubjectSet }).(pulumi.StringOutput)
}

func (o VpnCertificateSettingOutput) Vdomparam() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *VpnCertificateSetting) pulumi.StringPtrOutput { return v.Vdomparam }).(pulumi.StringPtrOutput)
}

type VpnCertificateSettingArrayOutput struct{ *pulumi.OutputState }

func (VpnCertificateSettingArrayOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*[]*VpnCertificateSetting)(nil)).Elem()
}

func (o VpnCertificateSettingArrayOutput) ToVpnCertificateSettingArrayOutput() VpnCertificateSettingArrayOutput {
	return o
}

func (o VpnCertificateSettingArrayOutput) ToVpnCertificateSettingArrayOutputWithContext(ctx context.Context) VpnCertificateSettingArrayOutput {
	return o
}

func (o VpnCertificateSettingArrayOutput) Index(i pulumi.IntInput) VpnCertificateSettingOutput {
	return pulumi.All(o, i).ApplyT(func(vs []interface{}) *VpnCertificateSetting {
		return vs[0].([]*VpnCertificateSetting)[vs[1].(int)]
	}).(VpnCertificateSettingOutput)
}

type VpnCertificateSettingMapOutput struct{ *pulumi.OutputState }

func (VpnCertificateSettingMapOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*map[string]*VpnCertificateSetting)(nil)).Elem()
}

func (o VpnCertificateSettingMapOutput) ToVpnCertificateSettingMapOutput() VpnCertificateSettingMapOutput {
	return o
}

func (o VpnCertificateSettingMapOutput) ToVpnCertificateSettingMapOutputWithContext(ctx context.Context) VpnCertificateSettingMapOutput {
	return o
}

func (o VpnCertificateSettingMapOutput) MapIndex(k pulumi.StringInput) VpnCertificateSettingOutput {
	return pulumi.All(o, k).ApplyT(func(vs []interface{}) *VpnCertificateSetting {
		return vs[0].(map[string]*VpnCertificateSetting)[vs[1].(string)]
	}).(VpnCertificateSettingOutput)
}

func init() {
	pulumi.RegisterInputType(reflect.TypeOf((*VpnCertificateSettingInput)(nil)).Elem(), &VpnCertificateSetting{})
	pulumi.RegisterInputType(reflect.TypeOf((*VpnCertificateSettingArrayInput)(nil)).Elem(), VpnCertificateSettingArray{})
	pulumi.RegisterInputType(reflect.TypeOf((*VpnCertificateSettingMapInput)(nil)).Elem(), VpnCertificateSettingMap{})
	pulumi.RegisterOutputType(VpnCertificateSettingOutput{})
	pulumi.RegisterOutputType(VpnCertificateSettingArrayOutput{})
	pulumi.RegisterOutputType(VpnCertificateSettingMapOutput{})
}
