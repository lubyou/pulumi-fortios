// *** WARNING: this file was generated by the Pulumi Terraform Bridge (tfgen) Tool. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

package fortios

import (
	"context"
	"reflect"

	"github.com/pulumi/pulumi/sdk/v3/go/pulumi"
)

// Configure IPS URL filter DNS servers.
//
// ## Import
//
// System IpsUrlfilterDns can be imported using any of these accepted formats$ export "FORTIOS_IMPORT_TABLE"="true"
//
// ```sh
//  $ pulumi import fortios:index/systemIpsUrlfilterDns:SystemIpsUrlfilterDns labelname {{address}}
// ```
//
//  $ unset "FORTIOS_IMPORT_TABLE"
type SystemIpsUrlfilterDns struct {
	pulumi.CustomResourceState

	// DNS server IP address.
	Address pulumi.StringOutput `pulumi:"address"`
	// Enable/disable this server for IPv6 queries. Valid values: `enable`, `disable`.
	Ipv6Capability pulumi.StringOutput `pulumi:"ipv6Capability"`
	// Enable/disable using this DNS server for IPS URL filter DNS queries. Valid values: `enable`, `disable`.
	Status pulumi.StringOutput `pulumi:"status"`
	// Specifies the vdom to which the resource will be applied when the FortiGate unit is running in VDOM mode. Only one vdom can be specified. If you want to inherit the vdom configuration of the provider, please do not set this parameter.
	Vdomparam pulumi.StringPtrOutput `pulumi:"vdomparam"`
}

// NewSystemIpsUrlfilterDns registers a new resource with the given unique name, arguments, and options.
func NewSystemIpsUrlfilterDns(ctx *pulumi.Context,
	name string, args *SystemIpsUrlfilterDnsArgs, opts ...pulumi.ResourceOption) (*SystemIpsUrlfilterDns, error) {
	if args == nil {
		args = &SystemIpsUrlfilterDnsArgs{}
	}

	var resource SystemIpsUrlfilterDns
	err := ctx.RegisterResource("fortios:index/systemIpsUrlfilterDns:SystemIpsUrlfilterDns", name, args, &resource, opts...)
	if err != nil {
		return nil, err
	}
	return &resource, nil
}

// GetSystemIpsUrlfilterDns gets an existing SystemIpsUrlfilterDns resource's state with the given name, ID, and optional
// state properties that are used to uniquely qualify the lookup (nil if not required).
func GetSystemIpsUrlfilterDns(ctx *pulumi.Context,
	name string, id pulumi.IDInput, state *SystemIpsUrlfilterDnsState, opts ...pulumi.ResourceOption) (*SystemIpsUrlfilterDns, error) {
	var resource SystemIpsUrlfilterDns
	err := ctx.ReadResource("fortios:index/systemIpsUrlfilterDns:SystemIpsUrlfilterDns", name, id, state, &resource, opts...)
	if err != nil {
		return nil, err
	}
	return &resource, nil
}

// Input properties used for looking up and filtering SystemIpsUrlfilterDns resources.
type systemIpsUrlfilterDnsState struct {
	// DNS server IP address.
	Address *string `pulumi:"address"`
	// Enable/disable this server for IPv6 queries. Valid values: `enable`, `disable`.
	Ipv6Capability *string `pulumi:"ipv6Capability"`
	// Enable/disable using this DNS server for IPS URL filter DNS queries. Valid values: `enable`, `disable`.
	Status *string `pulumi:"status"`
	// Specifies the vdom to which the resource will be applied when the FortiGate unit is running in VDOM mode. Only one vdom can be specified. If you want to inherit the vdom configuration of the provider, please do not set this parameter.
	Vdomparam *string `pulumi:"vdomparam"`
}

type SystemIpsUrlfilterDnsState struct {
	// DNS server IP address.
	Address pulumi.StringPtrInput
	// Enable/disable this server for IPv6 queries. Valid values: `enable`, `disable`.
	Ipv6Capability pulumi.StringPtrInput
	// Enable/disable using this DNS server for IPS URL filter DNS queries. Valid values: `enable`, `disable`.
	Status pulumi.StringPtrInput
	// Specifies the vdom to which the resource will be applied when the FortiGate unit is running in VDOM mode. Only one vdom can be specified. If you want to inherit the vdom configuration of the provider, please do not set this parameter.
	Vdomparam pulumi.StringPtrInput
}

func (SystemIpsUrlfilterDnsState) ElementType() reflect.Type {
	return reflect.TypeOf((*systemIpsUrlfilterDnsState)(nil)).Elem()
}

type systemIpsUrlfilterDnsArgs struct {
	// DNS server IP address.
	Address *string `pulumi:"address"`
	// Enable/disable this server for IPv6 queries. Valid values: `enable`, `disable`.
	Ipv6Capability *string `pulumi:"ipv6Capability"`
	// Enable/disable using this DNS server for IPS URL filter DNS queries. Valid values: `enable`, `disable`.
	Status *string `pulumi:"status"`
	// Specifies the vdom to which the resource will be applied when the FortiGate unit is running in VDOM mode. Only one vdom can be specified. If you want to inherit the vdom configuration of the provider, please do not set this parameter.
	Vdomparam *string `pulumi:"vdomparam"`
}

// The set of arguments for constructing a SystemIpsUrlfilterDns resource.
type SystemIpsUrlfilterDnsArgs struct {
	// DNS server IP address.
	Address pulumi.StringPtrInput
	// Enable/disable this server for IPv6 queries. Valid values: `enable`, `disable`.
	Ipv6Capability pulumi.StringPtrInput
	// Enable/disable using this DNS server for IPS URL filter DNS queries. Valid values: `enable`, `disable`.
	Status pulumi.StringPtrInput
	// Specifies the vdom to which the resource will be applied when the FortiGate unit is running in VDOM mode. Only one vdom can be specified. If you want to inherit the vdom configuration of the provider, please do not set this parameter.
	Vdomparam pulumi.StringPtrInput
}

func (SystemIpsUrlfilterDnsArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*systemIpsUrlfilterDnsArgs)(nil)).Elem()
}

type SystemIpsUrlfilterDnsInput interface {
	pulumi.Input

	ToSystemIpsUrlfilterDnsOutput() SystemIpsUrlfilterDnsOutput
	ToSystemIpsUrlfilterDnsOutputWithContext(ctx context.Context) SystemIpsUrlfilterDnsOutput
}

func (*SystemIpsUrlfilterDns) ElementType() reflect.Type {
	return reflect.TypeOf((*SystemIpsUrlfilterDns)(nil))
}

func (i *SystemIpsUrlfilterDns) ToSystemIpsUrlfilterDnsOutput() SystemIpsUrlfilterDnsOutput {
	return i.ToSystemIpsUrlfilterDnsOutputWithContext(context.Background())
}

func (i *SystemIpsUrlfilterDns) ToSystemIpsUrlfilterDnsOutputWithContext(ctx context.Context) SystemIpsUrlfilterDnsOutput {
	return pulumi.ToOutputWithContext(ctx, i).(SystemIpsUrlfilterDnsOutput)
}

func (i *SystemIpsUrlfilterDns) ToSystemIpsUrlfilterDnsPtrOutput() SystemIpsUrlfilterDnsPtrOutput {
	return i.ToSystemIpsUrlfilterDnsPtrOutputWithContext(context.Background())
}

func (i *SystemIpsUrlfilterDns) ToSystemIpsUrlfilterDnsPtrOutputWithContext(ctx context.Context) SystemIpsUrlfilterDnsPtrOutput {
	return pulumi.ToOutputWithContext(ctx, i).(SystemIpsUrlfilterDnsPtrOutput)
}

type SystemIpsUrlfilterDnsPtrInput interface {
	pulumi.Input

	ToSystemIpsUrlfilterDnsPtrOutput() SystemIpsUrlfilterDnsPtrOutput
	ToSystemIpsUrlfilterDnsPtrOutputWithContext(ctx context.Context) SystemIpsUrlfilterDnsPtrOutput
}

type systemIpsUrlfilterDnsPtrType SystemIpsUrlfilterDnsArgs

func (*systemIpsUrlfilterDnsPtrType) ElementType() reflect.Type {
	return reflect.TypeOf((**SystemIpsUrlfilterDns)(nil))
}

func (i *systemIpsUrlfilterDnsPtrType) ToSystemIpsUrlfilterDnsPtrOutput() SystemIpsUrlfilterDnsPtrOutput {
	return i.ToSystemIpsUrlfilterDnsPtrOutputWithContext(context.Background())
}

func (i *systemIpsUrlfilterDnsPtrType) ToSystemIpsUrlfilterDnsPtrOutputWithContext(ctx context.Context) SystemIpsUrlfilterDnsPtrOutput {
	return pulumi.ToOutputWithContext(ctx, i).(SystemIpsUrlfilterDnsPtrOutput)
}

// SystemIpsUrlfilterDnsArrayInput is an input type that accepts SystemIpsUrlfilterDnsArray and SystemIpsUrlfilterDnsArrayOutput values.
// You can construct a concrete instance of `SystemIpsUrlfilterDnsArrayInput` via:
//
//          SystemIpsUrlfilterDnsArray{ SystemIpsUrlfilterDnsArgs{...} }
type SystemIpsUrlfilterDnsArrayInput interface {
	pulumi.Input

	ToSystemIpsUrlfilterDnsArrayOutput() SystemIpsUrlfilterDnsArrayOutput
	ToSystemIpsUrlfilterDnsArrayOutputWithContext(context.Context) SystemIpsUrlfilterDnsArrayOutput
}

type SystemIpsUrlfilterDnsArray []SystemIpsUrlfilterDnsInput

func (SystemIpsUrlfilterDnsArray) ElementType() reflect.Type {
	return reflect.TypeOf(([]*SystemIpsUrlfilterDns)(nil))
}

func (i SystemIpsUrlfilterDnsArray) ToSystemIpsUrlfilterDnsArrayOutput() SystemIpsUrlfilterDnsArrayOutput {
	return i.ToSystemIpsUrlfilterDnsArrayOutputWithContext(context.Background())
}

func (i SystemIpsUrlfilterDnsArray) ToSystemIpsUrlfilterDnsArrayOutputWithContext(ctx context.Context) SystemIpsUrlfilterDnsArrayOutput {
	return pulumi.ToOutputWithContext(ctx, i).(SystemIpsUrlfilterDnsArrayOutput)
}

// SystemIpsUrlfilterDnsMapInput is an input type that accepts SystemIpsUrlfilterDnsMap and SystemIpsUrlfilterDnsMapOutput values.
// You can construct a concrete instance of `SystemIpsUrlfilterDnsMapInput` via:
//
//          SystemIpsUrlfilterDnsMap{ "key": SystemIpsUrlfilterDnsArgs{...} }
type SystemIpsUrlfilterDnsMapInput interface {
	pulumi.Input

	ToSystemIpsUrlfilterDnsMapOutput() SystemIpsUrlfilterDnsMapOutput
	ToSystemIpsUrlfilterDnsMapOutputWithContext(context.Context) SystemIpsUrlfilterDnsMapOutput
}

type SystemIpsUrlfilterDnsMap map[string]SystemIpsUrlfilterDnsInput

func (SystemIpsUrlfilterDnsMap) ElementType() reflect.Type {
	return reflect.TypeOf((map[string]*SystemIpsUrlfilterDns)(nil))
}

func (i SystemIpsUrlfilterDnsMap) ToSystemIpsUrlfilterDnsMapOutput() SystemIpsUrlfilterDnsMapOutput {
	return i.ToSystemIpsUrlfilterDnsMapOutputWithContext(context.Background())
}

func (i SystemIpsUrlfilterDnsMap) ToSystemIpsUrlfilterDnsMapOutputWithContext(ctx context.Context) SystemIpsUrlfilterDnsMapOutput {
	return pulumi.ToOutputWithContext(ctx, i).(SystemIpsUrlfilterDnsMapOutput)
}

type SystemIpsUrlfilterDnsOutput struct {
	*pulumi.OutputState
}

func (SystemIpsUrlfilterDnsOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*SystemIpsUrlfilterDns)(nil))
}

func (o SystemIpsUrlfilterDnsOutput) ToSystemIpsUrlfilterDnsOutput() SystemIpsUrlfilterDnsOutput {
	return o
}

func (o SystemIpsUrlfilterDnsOutput) ToSystemIpsUrlfilterDnsOutputWithContext(ctx context.Context) SystemIpsUrlfilterDnsOutput {
	return o
}

func (o SystemIpsUrlfilterDnsOutput) ToSystemIpsUrlfilterDnsPtrOutput() SystemIpsUrlfilterDnsPtrOutput {
	return o.ToSystemIpsUrlfilterDnsPtrOutputWithContext(context.Background())
}

func (o SystemIpsUrlfilterDnsOutput) ToSystemIpsUrlfilterDnsPtrOutputWithContext(ctx context.Context) SystemIpsUrlfilterDnsPtrOutput {
	return o.ApplyT(func(v SystemIpsUrlfilterDns) *SystemIpsUrlfilterDns {
		return &v
	}).(SystemIpsUrlfilterDnsPtrOutput)
}

type SystemIpsUrlfilterDnsPtrOutput struct {
	*pulumi.OutputState
}

func (SystemIpsUrlfilterDnsPtrOutput) ElementType() reflect.Type {
	return reflect.TypeOf((**SystemIpsUrlfilterDns)(nil))
}

func (o SystemIpsUrlfilterDnsPtrOutput) ToSystemIpsUrlfilterDnsPtrOutput() SystemIpsUrlfilterDnsPtrOutput {
	return o
}

func (o SystemIpsUrlfilterDnsPtrOutput) ToSystemIpsUrlfilterDnsPtrOutputWithContext(ctx context.Context) SystemIpsUrlfilterDnsPtrOutput {
	return o
}

type SystemIpsUrlfilterDnsArrayOutput struct{ *pulumi.OutputState }

func (SystemIpsUrlfilterDnsArrayOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*[]SystemIpsUrlfilterDns)(nil))
}

func (o SystemIpsUrlfilterDnsArrayOutput) ToSystemIpsUrlfilterDnsArrayOutput() SystemIpsUrlfilterDnsArrayOutput {
	return o
}

func (o SystemIpsUrlfilterDnsArrayOutput) ToSystemIpsUrlfilterDnsArrayOutputWithContext(ctx context.Context) SystemIpsUrlfilterDnsArrayOutput {
	return o
}

func (o SystemIpsUrlfilterDnsArrayOutput) Index(i pulumi.IntInput) SystemIpsUrlfilterDnsOutput {
	return pulumi.All(o, i).ApplyT(func(vs []interface{}) SystemIpsUrlfilterDns {
		return vs[0].([]SystemIpsUrlfilterDns)[vs[1].(int)]
	}).(SystemIpsUrlfilterDnsOutput)
}

type SystemIpsUrlfilterDnsMapOutput struct{ *pulumi.OutputState }

func (SystemIpsUrlfilterDnsMapOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*map[string]SystemIpsUrlfilterDns)(nil))
}

func (o SystemIpsUrlfilterDnsMapOutput) ToSystemIpsUrlfilterDnsMapOutput() SystemIpsUrlfilterDnsMapOutput {
	return o
}

func (o SystemIpsUrlfilterDnsMapOutput) ToSystemIpsUrlfilterDnsMapOutputWithContext(ctx context.Context) SystemIpsUrlfilterDnsMapOutput {
	return o
}

func (o SystemIpsUrlfilterDnsMapOutput) MapIndex(k pulumi.StringInput) SystemIpsUrlfilterDnsOutput {
	return pulumi.All(o, k).ApplyT(func(vs []interface{}) SystemIpsUrlfilterDns {
		return vs[0].(map[string]SystemIpsUrlfilterDns)[vs[1].(string)]
	}).(SystemIpsUrlfilterDnsOutput)
}

func init() {
	pulumi.RegisterOutputType(SystemIpsUrlfilterDnsOutput{})
	pulumi.RegisterOutputType(SystemIpsUrlfilterDnsPtrOutput{})
	pulumi.RegisterOutputType(SystemIpsUrlfilterDnsArrayOutput{})
	pulumi.RegisterOutputType(SystemIpsUrlfilterDnsMapOutput{})
}
