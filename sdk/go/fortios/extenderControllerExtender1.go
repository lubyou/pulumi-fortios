// Code generated by the Pulumi Terraform Bridge (tfgen) Tool DO NOT EDIT.
// *** WARNING: Do not edit by hand unless you're certain you know what you are doing! ***

package fortios

import (
	"context"
	"reflect"

	"errors"
	"github.com/lubyou/pulumi-fortios/sdk/go/fortios/internal"
	"github.com/pulumi/pulumi/sdk/v3/go/pulumi"
	"github.com/pulumi/pulumi/sdk/v3/go/pulumix"
)

type ExtenderControllerExtender1 struct {
	pulumi.CustomResourceState

	Authorized       pulumi.StringOutput                               `pulumi:"authorized"`
	ControllerReport ExtenderControllerExtender1ControllerReportOutput `pulumi:"controllerReport"`
	Description      pulumi.StringOutput                               `pulumi:"description"`
	ExtName          pulumi.StringOutput                               `pulumi:"extName"`
	Fosid            pulumi.StringOutput                               `pulumi:"fosid"`
	GetAllTables     pulumi.StringPtrOutput                            `pulumi:"getAllTables"`
	LoginPassword    pulumi.StringPtrOutput                            `pulumi:"loginPassword"`
	Modem1           ExtenderControllerExtender1Modem1Output           `pulumi:"modem1"`
	Modem2           ExtenderControllerExtender1Modem2Output           `pulumi:"modem2"`
	Name             pulumi.StringOutput                               `pulumi:"name"`
	Vdom             pulumi.IntOutput                                  `pulumi:"vdom"`
	Vdomparam        pulumi.StringPtrOutput                            `pulumi:"vdomparam"`
}

// NewExtenderControllerExtender1 registers a new resource with the given unique name, arguments, and options.
func NewExtenderControllerExtender1(ctx *pulumi.Context,
	name string, args *ExtenderControllerExtender1Args, opts ...pulumi.ResourceOption) (*ExtenderControllerExtender1, error) {
	if args == nil {
		return nil, errors.New("missing one or more required arguments")
	}

	if args.Authorized == nil {
		return nil, errors.New("invalid value for required argument 'Authorized'")
	}
	if args.LoginPassword != nil {
		args.LoginPassword = pulumi.ToSecret(args.LoginPassword).(pulumi.StringPtrInput)
	}
	secrets := pulumi.AdditionalSecretOutputs([]string{
		"loginPassword",
	})
	opts = append(opts, secrets)
	opts = internal.PkgResourceDefaultOpts(opts)
	var resource ExtenderControllerExtender1
	err := ctx.RegisterResource("fortios:index/extenderControllerExtender1:ExtenderControllerExtender1", name, args, &resource, opts...)
	if err != nil {
		return nil, err
	}
	return &resource, nil
}

// GetExtenderControllerExtender1 gets an existing ExtenderControllerExtender1 resource's state with the given name, ID, and optional
// state properties that are used to uniquely qualify the lookup (nil if not required).
func GetExtenderControllerExtender1(ctx *pulumi.Context,
	name string, id pulumi.IDInput, state *ExtenderControllerExtender1State, opts ...pulumi.ResourceOption) (*ExtenderControllerExtender1, error) {
	var resource ExtenderControllerExtender1
	err := ctx.ReadResource("fortios:index/extenderControllerExtender1:ExtenderControllerExtender1", name, id, state, &resource, opts...)
	if err != nil {
		return nil, err
	}
	return &resource, nil
}

// Input properties used for looking up and filtering ExtenderControllerExtender1 resources.
type extenderControllerExtender1State struct {
	Authorized       *string                                      `pulumi:"authorized"`
	ControllerReport *ExtenderControllerExtender1ControllerReport `pulumi:"controllerReport"`
	Description      *string                                      `pulumi:"description"`
	ExtName          *string                                      `pulumi:"extName"`
	Fosid            *string                                      `pulumi:"fosid"`
	GetAllTables     *string                                      `pulumi:"getAllTables"`
	LoginPassword    *string                                      `pulumi:"loginPassword"`
	Modem1           *ExtenderControllerExtender1Modem1           `pulumi:"modem1"`
	Modem2           *ExtenderControllerExtender1Modem2           `pulumi:"modem2"`
	Name             *string                                      `pulumi:"name"`
	Vdom             *int                                         `pulumi:"vdom"`
	Vdomparam        *string                                      `pulumi:"vdomparam"`
}

type ExtenderControllerExtender1State struct {
	Authorized       pulumi.StringPtrInput
	ControllerReport ExtenderControllerExtender1ControllerReportPtrInput
	Description      pulumi.StringPtrInput
	ExtName          pulumi.StringPtrInput
	Fosid            pulumi.StringPtrInput
	GetAllTables     pulumi.StringPtrInput
	LoginPassword    pulumi.StringPtrInput
	Modem1           ExtenderControllerExtender1Modem1PtrInput
	Modem2           ExtenderControllerExtender1Modem2PtrInput
	Name             pulumi.StringPtrInput
	Vdom             pulumi.IntPtrInput
	Vdomparam        pulumi.StringPtrInput
}

func (ExtenderControllerExtender1State) ElementType() reflect.Type {
	return reflect.TypeOf((*extenderControllerExtender1State)(nil)).Elem()
}

type extenderControllerExtender1Args struct {
	Authorized       string                                       `pulumi:"authorized"`
	ControllerReport *ExtenderControllerExtender1ControllerReport `pulumi:"controllerReport"`
	Description      *string                                      `pulumi:"description"`
	ExtName          *string                                      `pulumi:"extName"`
	Fosid            *string                                      `pulumi:"fosid"`
	GetAllTables     *string                                      `pulumi:"getAllTables"`
	LoginPassword    *string                                      `pulumi:"loginPassword"`
	Modem1           *ExtenderControllerExtender1Modem1           `pulumi:"modem1"`
	Modem2           *ExtenderControllerExtender1Modem2           `pulumi:"modem2"`
	Name             *string                                      `pulumi:"name"`
	Vdom             *int                                         `pulumi:"vdom"`
	Vdomparam        *string                                      `pulumi:"vdomparam"`
}

// The set of arguments for constructing a ExtenderControllerExtender1 resource.
type ExtenderControllerExtender1Args struct {
	Authorized       pulumi.StringInput
	ControllerReport ExtenderControllerExtender1ControllerReportPtrInput
	Description      pulumi.StringPtrInput
	ExtName          pulumi.StringPtrInput
	Fosid            pulumi.StringPtrInput
	GetAllTables     pulumi.StringPtrInput
	LoginPassword    pulumi.StringPtrInput
	Modem1           ExtenderControllerExtender1Modem1PtrInput
	Modem2           ExtenderControllerExtender1Modem2PtrInput
	Name             pulumi.StringPtrInput
	Vdom             pulumi.IntPtrInput
	Vdomparam        pulumi.StringPtrInput
}

func (ExtenderControllerExtender1Args) ElementType() reflect.Type {
	return reflect.TypeOf((*extenderControllerExtender1Args)(nil)).Elem()
}

type ExtenderControllerExtender1Input interface {
	pulumi.Input

	ToExtenderControllerExtender1Output() ExtenderControllerExtender1Output
	ToExtenderControllerExtender1OutputWithContext(ctx context.Context) ExtenderControllerExtender1Output
}

func (*ExtenderControllerExtender1) ElementType() reflect.Type {
	return reflect.TypeOf((**ExtenderControllerExtender1)(nil)).Elem()
}

func (i *ExtenderControllerExtender1) ToExtenderControllerExtender1Output() ExtenderControllerExtender1Output {
	return i.ToExtenderControllerExtender1OutputWithContext(context.Background())
}

func (i *ExtenderControllerExtender1) ToExtenderControllerExtender1OutputWithContext(ctx context.Context) ExtenderControllerExtender1Output {
	return pulumi.ToOutputWithContext(ctx, i).(ExtenderControllerExtender1Output)
}

func (i *ExtenderControllerExtender1) ToOutput(ctx context.Context) pulumix.Output[*ExtenderControllerExtender1] {
	return pulumix.Output[*ExtenderControllerExtender1]{
		OutputState: i.ToExtenderControllerExtender1OutputWithContext(ctx).OutputState,
	}
}

// ExtenderControllerExtender1ArrayInput is an input type that accepts ExtenderControllerExtender1Array and ExtenderControllerExtender1ArrayOutput values.
// You can construct a concrete instance of `ExtenderControllerExtender1ArrayInput` via:
//
//	ExtenderControllerExtender1Array{ ExtenderControllerExtender1Args{...} }
type ExtenderControllerExtender1ArrayInput interface {
	pulumi.Input

	ToExtenderControllerExtender1ArrayOutput() ExtenderControllerExtender1ArrayOutput
	ToExtenderControllerExtender1ArrayOutputWithContext(context.Context) ExtenderControllerExtender1ArrayOutput
}

type ExtenderControllerExtender1Array []ExtenderControllerExtender1Input

func (ExtenderControllerExtender1Array) ElementType() reflect.Type {
	return reflect.TypeOf((*[]*ExtenderControllerExtender1)(nil)).Elem()
}

func (i ExtenderControllerExtender1Array) ToExtenderControllerExtender1ArrayOutput() ExtenderControllerExtender1ArrayOutput {
	return i.ToExtenderControllerExtender1ArrayOutputWithContext(context.Background())
}

func (i ExtenderControllerExtender1Array) ToExtenderControllerExtender1ArrayOutputWithContext(ctx context.Context) ExtenderControllerExtender1ArrayOutput {
	return pulumi.ToOutputWithContext(ctx, i).(ExtenderControllerExtender1ArrayOutput)
}

func (i ExtenderControllerExtender1Array) ToOutput(ctx context.Context) pulumix.Output[[]*ExtenderControllerExtender1] {
	return pulumix.Output[[]*ExtenderControllerExtender1]{
		OutputState: i.ToExtenderControllerExtender1ArrayOutputWithContext(ctx).OutputState,
	}
}

// ExtenderControllerExtender1MapInput is an input type that accepts ExtenderControllerExtender1Map and ExtenderControllerExtender1MapOutput values.
// You can construct a concrete instance of `ExtenderControllerExtender1MapInput` via:
//
//	ExtenderControllerExtender1Map{ "key": ExtenderControllerExtender1Args{...} }
type ExtenderControllerExtender1MapInput interface {
	pulumi.Input

	ToExtenderControllerExtender1MapOutput() ExtenderControllerExtender1MapOutput
	ToExtenderControllerExtender1MapOutputWithContext(context.Context) ExtenderControllerExtender1MapOutput
}

type ExtenderControllerExtender1Map map[string]ExtenderControllerExtender1Input

func (ExtenderControllerExtender1Map) ElementType() reflect.Type {
	return reflect.TypeOf((*map[string]*ExtenderControllerExtender1)(nil)).Elem()
}

func (i ExtenderControllerExtender1Map) ToExtenderControllerExtender1MapOutput() ExtenderControllerExtender1MapOutput {
	return i.ToExtenderControllerExtender1MapOutputWithContext(context.Background())
}

func (i ExtenderControllerExtender1Map) ToExtenderControllerExtender1MapOutputWithContext(ctx context.Context) ExtenderControllerExtender1MapOutput {
	return pulumi.ToOutputWithContext(ctx, i).(ExtenderControllerExtender1MapOutput)
}

func (i ExtenderControllerExtender1Map) ToOutput(ctx context.Context) pulumix.Output[map[string]*ExtenderControllerExtender1] {
	return pulumix.Output[map[string]*ExtenderControllerExtender1]{
		OutputState: i.ToExtenderControllerExtender1MapOutputWithContext(ctx).OutputState,
	}
}

type ExtenderControllerExtender1Output struct{ *pulumi.OutputState }

func (ExtenderControllerExtender1Output) ElementType() reflect.Type {
	return reflect.TypeOf((**ExtenderControllerExtender1)(nil)).Elem()
}

func (o ExtenderControllerExtender1Output) ToExtenderControllerExtender1Output() ExtenderControllerExtender1Output {
	return o
}

func (o ExtenderControllerExtender1Output) ToExtenderControllerExtender1OutputWithContext(ctx context.Context) ExtenderControllerExtender1Output {
	return o
}

func (o ExtenderControllerExtender1Output) ToOutput(ctx context.Context) pulumix.Output[*ExtenderControllerExtender1] {
	return pulumix.Output[*ExtenderControllerExtender1]{
		OutputState: o.OutputState,
	}
}

func (o ExtenderControllerExtender1Output) Authorized() pulumi.StringOutput {
	return o.ApplyT(func(v *ExtenderControllerExtender1) pulumi.StringOutput { return v.Authorized }).(pulumi.StringOutput)
}

func (o ExtenderControllerExtender1Output) ControllerReport() ExtenderControllerExtender1ControllerReportOutput {
	return o.ApplyT(func(v *ExtenderControllerExtender1) ExtenderControllerExtender1ControllerReportOutput {
		return v.ControllerReport
	}).(ExtenderControllerExtender1ControllerReportOutput)
}

func (o ExtenderControllerExtender1Output) Description() pulumi.StringOutput {
	return o.ApplyT(func(v *ExtenderControllerExtender1) pulumi.StringOutput { return v.Description }).(pulumi.StringOutput)
}

func (o ExtenderControllerExtender1Output) ExtName() pulumi.StringOutput {
	return o.ApplyT(func(v *ExtenderControllerExtender1) pulumi.StringOutput { return v.ExtName }).(pulumi.StringOutput)
}

func (o ExtenderControllerExtender1Output) Fosid() pulumi.StringOutput {
	return o.ApplyT(func(v *ExtenderControllerExtender1) pulumi.StringOutput { return v.Fosid }).(pulumi.StringOutput)
}

func (o ExtenderControllerExtender1Output) GetAllTables() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *ExtenderControllerExtender1) pulumi.StringPtrOutput { return v.GetAllTables }).(pulumi.StringPtrOutput)
}

func (o ExtenderControllerExtender1Output) LoginPassword() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *ExtenderControllerExtender1) pulumi.StringPtrOutput { return v.LoginPassword }).(pulumi.StringPtrOutput)
}

func (o ExtenderControllerExtender1Output) Modem1() ExtenderControllerExtender1Modem1Output {
	return o.ApplyT(func(v *ExtenderControllerExtender1) ExtenderControllerExtender1Modem1Output { return v.Modem1 }).(ExtenderControllerExtender1Modem1Output)
}

func (o ExtenderControllerExtender1Output) Modem2() ExtenderControllerExtender1Modem2Output {
	return o.ApplyT(func(v *ExtenderControllerExtender1) ExtenderControllerExtender1Modem2Output { return v.Modem2 }).(ExtenderControllerExtender1Modem2Output)
}

func (o ExtenderControllerExtender1Output) Name() pulumi.StringOutput {
	return o.ApplyT(func(v *ExtenderControllerExtender1) pulumi.StringOutput { return v.Name }).(pulumi.StringOutput)
}

func (o ExtenderControllerExtender1Output) Vdom() pulumi.IntOutput {
	return o.ApplyT(func(v *ExtenderControllerExtender1) pulumi.IntOutput { return v.Vdom }).(pulumi.IntOutput)
}

func (o ExtenderControllerExtender1Output) Vdomparam() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *ExtenderControllerExtender1) pulumi.StringPtrOutput { return v.Vdomparam }).(pulumi.StringPtrOutput)
}

type ExtenderControllerExtender1ArrayOutput struct{ *pulumi.OutputState }

func (ExtenderControllerExtender1ArrayOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*[]*ExtenderControllerExtender1)(nil)).Elem()
}

func (o ExtenderControllerExtender1ArrayOutput) ToExtenderControllerExtender1ArrayOutput() ExtenderControllerExtender1ArrayOutput {
	return o
}

func (o ExtenderControllerExtender1ArrayOutput) ToExtenderControllerExtender1ArrayOutputWithContext(ctx context.Context) ExtenderControllerExtender1ArrayOutput {
	return o
}

func (o ExtenderControllerExtender1ArrayOutput) ToOutput(ctx context.Context) pulumix.Output[[]*ExtenderControllerExtender1] {
	return pulumix.Output[[]*ExtenderControllerExtender1]{
		OutputState: o.OutputState,
	}
}

func (o ExtenderControllerExtender1ArrayOutput) Index(i pulumi.IntInput) ExtenderControllerExtender1Output {
	return pulumi.All(o, i).ApplyT(func(vs []interface{}) *ExtenderControllerExtender1 {
		return vs[0].([]*ExtenderControllerExtender1)[vs[1].(int)]
	}).(ExtenderControllerExtender1Output)
}

type ExtenderControllerExtender1MapOutput struct{ *pulumi.OutputState }

func (ExtenderControllerExtender1MapOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*map[string]*ExtenderControllerExtender1)(nil)).Elem()
}

func (o ExtenderControllerExtender1MapOutput) ToExtenderControllerExtender1MapOutput() ExtenderControllerExtender1MapOutput {
	return o
}

func (o ExtenderControllerExtender1MapOutput) ToExtenderControllerExtender1MapOutputWithContext(ctx context.Context) ExtenderControllerExtender1MapOutput {
	return o
}

func (o ExtenderControllerExtender1MapOutput) ToOutput(ctx context.Context) pulumix.Output[map[string]*ExtenderControllerExtender1] {
	return pulumix.Output[map[string]*ExtenderControllerExtender1]{
		OutputState: o.OutputState,
	}
}

func (o ExtenderControllerExtender1MapOutput) MapIndex(k pulumi.StringInput) ExtenderControllerExtender1Output {
	return pulumi.All(o, k).ApplyT(func(vs []interface{}) *ExtenderControllerExtender1 {
		return vs[0].(map[string]*ExtenderControllerExtender1)[vs[1].(string)]
	}).(ExtenderControllerExtender1Output)
}

func init() {
	pulumi.RegisterInputType(reflect.TypeOf((*ExtenderControllerExtender1Input)(nil)).Elem(), &ExtenderControllerExtender1{})
	pulumi.RegisterInputType(reflect.TypeOf((*ExtenderControllerExtender1ArrayInput)(nil)).Elem(), ExtenderControllerExtender1Array{})
	pulumi.RegisterInputType(reflect.TypeOf((*ExtenderControllerExtender1MapInput)(nil)).Elem(), ExtenderControllerExtender1Map{})
	pulumi.RegisterOutputType(ExtenderControllerExtender1Output{})
	pulumi.RegisterOutputType(ExtenderControllerExtender1ArrayOutput{})
	pulumi.RegisterOutputType(ExtenderControllerExtender1MapOutput{})
}
