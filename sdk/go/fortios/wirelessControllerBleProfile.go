// Code generated by the Pulumi Terraform Bridge (tfgen) Tool DO NOT EDIT.
// *** WARNING: Do not edit by hand unless you're certain you know what you are doing! ***

package fortios

import (
	"context"
	"reflect"

	"github.com/lubyou/pulumi-fortios/sdk/go/fortios/internal"
	"github.com/pulumi/pulumi/sdk/v3/go/pulumi"
	"github.com/pulumi/pulumi/sdk/v3/go/pulumix"
)

type WirelessControllerBleProfile struct {
	pulumi.CustomResourceState

	Advertising           pulumi.StringOutput    `pulumi:"advertising"`
	BeaconInterval        pulumi.IntOutput       `pulumi:"beaconInterval"`
	BleScanning           pulumi.StringOutput    `pulumi:"bleScanning"`
	Comment               pulumi.StringOutput    `pulumi:"comment"`
	EddystoneInstance     pulumi.StringOutput    `pulumi:"eddystoneInstance"`
	EddystoneNamespace    pulumi.StringOutput    `pulumi:"eddystoneNamespace"`
	EddystoneUrl          pulumi.StringOutput    `pulumi:"eddystoneUrl"`
	EddystoneUrlEncodeHex pulumi.StringOutput    `pulumi:"eddystoneUrlEncodeHex"`
	IbeaconUuid           pulumi.StringOutput    `pulumi:"ibeaconUuid"`
	MajorId               pulumi.IntOutput       `pulumi:"majorId"`
	MinorId               pulumi.IntOutput       `pulumi:"minorId"`
	Name                  pulumi.StringOutput    `pulumi:"name"`
	ScanInterval          pulumi.IntOutput       `pulumi:"scanInterval"`
	ScanPeriod            pulumi.IntOutput       `pulumi:"scanPeriod"`
	ScanThreshold         pulumi.StringOutput    `pulumi:"scanThreshold"`
	ScanTime              pulumi.IntOutput       `pulumi:"scanTime"`
	ScanType              pulumi.StringOutput    `pulumi:"scanType"`
	ScanWindow            pulumi.IntOutput       `pulumi:"scanWindow"`
	Txpower               pulumi.StringOutput    `pulumi:"txpower"`
	Vdomparam             pulumi.StringPtrOutput `pulumi:"vdomparam"`
}

// NewWirelessControllerBleProfile registers a new resource with the given unique name, arguments, and options.
func NewWirelessControllerBleProfile(ctx *pulumi.Context,
	name string, args *WirelessControllerBleProfileArgs, opts ...pulumi.ResourceOption) (*WirelessControllerBleProfile, error) {
	if args == nil {
		args = &WirelessControllerBleProfileArgs{}
	}

	opts = internal.PkgResourceDefaultOpts(opts)
	var resource WirelessControllerBleProfile
	err := ctx.RegisterResource("fortios:index/wirelessControllerBleProfile:WirelessControllerBleProfile", name, args, &resource, opts...)
	if err != nil {
		return nil, err
	}
	return &resource, nil
}

// GetWirelessControllerBleProfile gets an existing WirelessControllerBleProfile resource's state with the given name, ID, and optional
// state properties that are used to uniquely qualify the lookup (nil if not required).
func GetWirelessControllerBleProfile(ctx *pulumi.Context,
	name string, id pulumi.IDInput, state *WirelessControllerBleProfileState, opts ...pulumi.ResourceOption) (*WirelessControllerBleProfile, error) {
	var resource WirelessControllerBleProfile
	err := ctx.ReadResource("fortios:index/wirelessControllerBleProfile:WirelessControllerBleProfile", name, id, state, &resource, opts...)
	if err != nil {
		return nil, err
	}
	return &resource, nil
}

// Input properties used for looking up and filtering WirelessControllerBleProfile resources.
type wirelessControllerBleProfileState struct {
	Advertising           *string `pulumi:"advertising"`
	BeaconInterval        *int    `pulumi:"beaconInterval"`
	BleScanning           *string `pulumi:"bleScanning"`
	Comment               *string `pulumi:"comment"`
	EddystoneInstance     *string `pulumi:"eddystoneInstance"`
	EddystoneNamespace    *string `pulumi:"eddystoneNamespace"`
	EddystoneUrl          *string `pulumi:"eddystoneUrl"`
	EddystoneUrlEncodeHex *string `pulumi:"eddystoneUrlEncodeHex"`
	IbeaconUuid           *string `pulumi:"ibeaconUuid"`
	MajorId               *int    `pulumi:"majorId"`
	MinorId               *int    `pulumi:"minorId"`
	Name                  *string `pulumi:"name"`
	ScanInterval          *int    `pulumi:"scanInterval"`
	ScanPeriod            *int    `pulumi:"scanPeriod"`
	ScanThreshold         *string `pulumi:"scanThreshold"`
	ScanTime              *int    `pulumi:"scanTime"`
	ScanType              *string `pulumi:"scanType"`
	ScanWindow            *int    `pulumi:"scanWindow"`
	Txpower               *string `pulumi:"txpower"`
	Vdomparam             *string `pulumi:"vdomparam"`
}

type WirelessControllerBleProfileState struct {
	Advertising           pulumi.StringPtrInput
	BeaconInterval        pulumi.IntPtrInput
	BleScanning           pulumi.StringPtrInput
	Comment               pulumi.StringPtrInput
	EddystoneInstance     pulumi.StringPtrInput
	EddystoneNamespace    pulumi.StringPtrInput
	EddystoneUrl          pulumi.StringPtrInput
	EddystoneUrlEncodeHex pulumi.StringPtrInput
	IbeaconUuid           pulumi.StringPtrInput
	MajorId               pulumi.IntPtrInput
	MinorId               pulumi.IntPtrInput
	Name                  pulumi.StringPtrInput
	ScanInterval          pulumi.IntPtrInput
	ScanPeriod            pulumi.IntPtrInput
	ScanThreshold         pulumi.StringPtrInput
	ScanTime              pulumi.IntPtrInput
	ScanType              pulumi.StringPtrInput
	ScanWindow            pulumi.IntPtrInput
	Txpower               pulumi.StringPtrInput
	Vdomparam             pulumi.StringPtrInput
}

func (WirelessControllerBleProfileState) ElementType() reflect.Type {
	return reflect.TypeOf((*wirelessControllerBleProfileState)(nil)).Elem()
}

type wirelessControllerBleProfileArgs struct {
	Advertising           *string `pulumi:"advertising"`
	BeaconInterval        *int    `pulumi:"beaconInterval"`
	BleScanning           *string `pulumi:"bleScanning"`
	Comment               *string `pulumi:"comment"`
	EddystoneInstance     *string `pulumi:"eddystoneInstance"`
	EddystoneNamespace    *string `pulumi:"eddystoneNamespace"`
	EddystoneUrl          *string `pulumi:"eddystoneUrl"`
	EddystoneUrlEncodeHex *string `pulumi:"eddystoneUrlEncodeHex"`
	IbeaconUuid           *string `pulumi:"ibeaconUuid"`
	MajorId               *int    `pulumi:"majorId"`
	MinorId               *int    `pulumi:"minorId"`
	Name                  *string `pulumi:"name"`
	ScanInterval          *int    `pulumi:"scanInterval"`
	ScanPeriod            *int    `pulumi:"scanPeriod"`
	ScanThreshold         *string `pulumi:"scanThreshold"`
	ScanTime              *int    `pulumi:"scanTime"`
	ScanType              *string `pulumi:"scanType"`
	ScanWindow            *int    `pulumi:"scanWindow"`
	Txpower               *string `pulumi:"txpower"`
	Vdomparam             *string `pulumi:"vdomparam"`
}

// The set of arguments for constructing a WirelessControllerBleProfile resource.
type WirelessControllerBleProfileArgs struct {
	Advertising           pulumi.StringPtrInput
	BeaconInterval        pulumi.IntPtrInput
	BleScanning           pulumi.StringPtrInput
	Comment               pulumi.StringPtrInput
	EddystoneInstance     pulumi.StringPtrInput
	EddystoneNamespace    pulumi.StringPtrInput
	EddystoneUrl          pulumi.StringPtrInput
	EddystoneUrlEncodeHex pulumi.StringPtrInput
	IbeaconUuid           pulumi.StringPtrInput
	MajorId               pulumi.IntPtrInput
	MinorId               pulumi.IntPtrInput
	Name                  pulumi.StringPtrInput
	ScanInterval          pulumi.IntPtrInput
	ScanPeriod            pulumi.IntPtrInput
	ScanThreshold         pulumi.StringPtrInput
	ScanTime              pulumi.IntPtrInput
	ScanType              pulumi.StringPtrInput
	ScanWindow            pulumi.IntPtrInput
	Txpower               pulumi.StringPtrInput
	Vdomparam             pulumi.StringPtrInput
}

func (WirelessControllerBleProfileArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*wirelessControllerBleProfileArgs)(nil)).Elem()
}

type WirelessControllerBleProfileInput interface {
	pulumi.Input

	ToWirelessControllerBleProfileOutput() WirelessControllerBleProfileOutput
	ToWirelessControllerBleProfileOutputWithContext(ctx context.Context) WirelessControllerBleProfileOutput
}

func (*WirelessControllerBleProfile) ElementType() reflect.Type {
	return reflect.TypeOf((**WirelessControllerBleProfile)(nil)).Elem()
}

func (i *WirelessControllerBleProfile) ToWirelessControllerBleProfileOutput() WirelessControllerBleProfileOutput {
	return i.ToWirelessControllerBleProfileOutputWithContext(context.Background())
}

func (i *WirelessControllerBleProfile) ToWirelessControllerBleProfileOutputWithContext(ctx context.Context) WirelessControllerBleProfileOutput {
	return pulumi.ToOutputWithContext(ctx, i).(WirelessControllerBleProfileOutput)
}

func (i *WirelessControllerBleProfile) ToOutput(ctx context.Context) pulumix.Output[*WirelessControllerBleProfile] {
	return pulumix.Output[*WirelessControllerBleProfile]{
		OutputState: i.ToWirelessControllerBleProfileOutputWithContext(ctx).OutputState,
	}
}

// WirelessControllerBleProfileArrayInput is an input type that accepts WirelessControllerBleProfileArray and WirelessControllerBleProfileArrayOutput values.
// You can construct a concrete instance of `WirelessControllerBleProfileArrayInput` via:
//
//	WirelessControllerBleProfileArray{ WirelessControllerBleProfileArgs{...} }
type WirelessControllerBleProfileArrayInput interface {
	pulumi.Input

	ToWirelessControllerBleProfileArrayOutput() WirelessControllerBleProfileArrayOutput
	ToWirelessControllerBleProfileArrayOutputWithContext(context.Context) WirelessControllerBleProfileArrayOutput
}

type WirelessControllerBleProfileArray []WirelessControllerBleProfileInput

func (WirelessControllerBleProfileArray) ElementType() reflect.Type {
	return reflect.TypeOf((*[]*WirelessControllerBleProfile)(nil)).Elem()
}

func (i WirelessControllerBleProfileArray) ToWirelessControllerBleProfileArrayOutput() WirelessControllerBleProfileArrayOutput {
	return i.ToWirelessControllerBleProfileArrayOutputWithContext(context.Background())
}

func (i WirelessControllerBleProfileArray) ToWirelessControllerBleProfileArrayOutputWithContext(ctx context.Context) WirelessControllerBleProfileArrayOutput {
	return pulumi.ToOutputWithContext(ctx, i).(WirelessControllerBleProfileArrayOutput)
}

func (i WirelessControllerBleProfileArray) ToOutput(ctx context.Context) pulumix.Output[[]*WirelessControllerBleProfile] {
	return pulumix.Output[[]*WirelessControllerBleProfile]{
		OutputState: i.ToWirelessControllerBleProfileArrayOutputWithContext(ctx).OutputState,
	}
}

// WirelessControllerBleProfileMapInput is an input type that accepts WirelessControllerBleProfileMap and WirelessControllerBleProfileMapOutput values.
// You can construct a concrete instance of `WirelessControllerBleProfileMapInput` via:
//
//	WirelessControllerBleProfileMap{ "key": WirelessControllerBleProfileArgs{...} }
type WirelessControllerBleProfileMapInput interface {
	pulumi.Input

	ToWirelessControllerBleProfileMapOutput() WirelessControllerBleProfileMapOutput
	ToWirelessControllerBleProfileMapOutputWithContext(context.Context) WirelessControllerBleProfileMapOutput
}

type WirelessControllerBleProfileMap map[string]WirelessControllerBleProfileInput

func (WirelessControllerBleProfileMap) ElementType() reflect.Type {
	return reflect.TypeOf((*map[string]*WirelessControllerBleProfile)(nil)).Elem()
}

func (i WirelessControllerBleProfileMap) ToWirelessControllerBleProfileMapOutput() WirelessControllerBleProfileMapOutput {
	return i.ToWirelessControllerBleProfileMapOutputWithContext(context.Background())
}

func (i WirelessControllerBleProfileMap) ToWirelessControllerBleProfileMapOutputWithContext(ctx context.Context) WirelessControllerBleProfileMapOutput {
	return pulumi.ToOutputWithContext(ctx, i).(WirelessControllerBleProfileMapOutput)
}

func (i WirelessControllerBleProfileMap) ToOutput(ctx context.Context) pulumix.Output[map[string]*WirelessControllerBleProfile] {
	return pulumix.Output[map[string]*WirelessControllerBleProfile]{
		OutputState: i.ToWirelessControllerBleProfileMapOutputWithContext(ctx).OutputState,
	}
}

type WirelessControllerBleProfileOutput struct{ *pulumi.OutputState }

func (WirelessControllerBleProfileOutput) ElementType() reflect.Type {
	return reflect.TypeOf((**WirelessControllerBleProfile)(nil)).Elem()
}

func (o WirelessControllerBleProfileOutput) ToWirelessControllerBleProfileOutput() WirelessControllerBleProfileOutput {
	return o
}

func (o WirelessControllerBleProfileOutput) ToWirelessControllerBleProfileOutputWithContext(ctx context.Context) WirelessControllerBleProfileOutput {
	return o
}

func (o WirelessControllerBleProfileOutput) ToOutput(ctx context.Context) pulumix.Output[*WirelessControllerBleProfile] {
	return pulumix.Output[*WirelessControllerBleProfile]{
		OutputState: o.OutputState,
	}
}

func (o WirelessControllerBleProfileOutput) Advertising() pulumi.StringOutput {
	return o.ApplyT(func(v *WirelessControllerBleProfile) pulumi.StringOutput { return v.Advertising }).(pulumi.StringOutput)
}

func (o WirelessControllerBleProfileOutput) BeaconInterval() pulumi.IntOutput {
	return o.ApplyT(func(v *WirelessControllerBleProfile) pulumi.IntOutput { return v.BeaconInterval }).(pulumi.IntOutput)
}

func (o WirelessControllerBleProfileOutput) BleScanning() pulumi.StringOutput {
	return o.ApplyT(func(v *WirelessControllerBleProfile) pulumi.StringOutput { return v.BleScanning }).(pulumi.StringOutput)
}

func (o WirelessControllerBleProfileOutput) Comment() pulumi.StringOutput {
	return o.ApplyT(func(v *WirelessControllerBleProfile) pulumi.StringOutput { return v.Comment }).(pulumi.StringOutput)
}

func (o WirelessControllerBleProfileOutput) EddystoneInstance() pulumi.StringOutput {
	return o.ApplyT(func(v *WirelessControllerBleProfile) pulumi.StringOutput { return v.EddystoneInstance }).(pulumi.StringOutput)
}

func (o WirelessControllerBleProfileOutput) EddystoneNamespace() pulumi.StringOutput {
	return o.ApplyT(func(v *WirelessControllerBleProfile) pulumi.StringOutput { return v.EddystoneNamespace }).(pulumi.StringOutput)
}

func (o WirelessControllerBleProfileOutput) EddystoneUrl() pulumi.StringOutput {
	return o.ApplyT(func(v *WirelessControllerBleProfile) pulumi.StringOutput { return v.EddystoneUrl }).(pulumi.StringOutput)
}

func (o WirelessControllerBleProfileOutput) EddystoneUrlEncodeHex() pulumi.StringOutput {
	return o.ApplyT(func(v *WirelessControllerBleProfile) pulumi.StringOutput { return v.EddystoneUrlEncodeHex }).(pulumi.StringOutput)
}

func (o WirelessControllerBleProfileOutput) IbeaconUuid() pulumi.StringOutput {
	return o.ApplyT(func(v *WirelessControllerBleProfile) pulumi.StringOutput { return v.IbeaconUuid }).(pulumi.StringOutput)
}

func (o WirelessControllerBleProfileOutput) MajorId() pulumi.IntOutput {
	return o.ApplyT(func(v *WirelessControllerBleProfile) pulumi.IntOutput { return v.MajorId }).(pulumi.IntOutput)
}

func (o WirelessControllerBleProfileOutput) MinorId() pulumi.IntOutput {
	return o.ApplyT(func(v *WirelessControllerBleProfile) pulumi.IntOutput { return v.MinorId }).(pulumi.IntOutput)
}

func (o WirelessControllerBleProfileOutput) Name() pulumi.StringOutput {
	return o.ApplyT(func(v *WirelessControllerBleProfile) pulumi.StringOutput { return v.Name }).(pulumi.StringOutput)
}

func (o WirelessControllerBleProfileOutput) ScanInterval() pulumi.IntOutput {
	return o.ApplyT(func(v *WirelessControllerBleProfile) pulumi.IntOutput { return v.ScanInterval }).(pulumi.IntOutput)
}

func (o WirelessControllerBleProfileOutput) ScanPeriod() pulumi.IntOutput {
	return o.ApplyT(func(v *WirelessControllerBleProfile) pulumi.IntOutput { return v.ScanPeriod }).(pulumi.IntOutput)
}

func (o WirelessControllerBleProfileOutput) ScanThreshold() pulumi.StringOutput {
	return o.ApplyT(func(v *WirelessControllerBleProfile) pulumi.StringOutput { return v.ScanThreshold }).(pulumi.StringOutput)
}

func (o WirelessControllerBleProfileOutput) ScanTime() pulumi.IntOutput {
	return o.ApplyT(func(v *WirelessControllerBleProfile) pulumi.IntOutput { return v.ScanTime }).(pulumi.IntOutput)
}

func (o WirelessControllerBleProfileOutput) ScanType() pulumi.StringOutput {
	return o.ApplyT(func(v *WirelessControllerBleProfile) pulumi.StringOutput { return v.ScanType }).(pulumi.StringOutput)
}

func (o WirelessControllerBleProfileOutput) ScanWindow() pulumi.IntOutput {
	return o.ApplyT(func(v *WirelessControllerBleProfile) pulumi.IntOutput { return v.ScanWindow }).(pulumi.IntOutput)
}

func (o WirelessControllerBleProfileOutput) Txpower() pulumi.StringOutput {
	return o.ApplyT(func(v *WirelessControllerBleProfile) pulumi.StringOutput { return v.Txpower }).(pulumi.StringOutput)
}

func (o WirelessControllerBleProfileOutput) Vdomparam() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *WirelessControllerBleProfile) pulumi.StringPtrOutput { return v.Vdomparam }).(pulumi.StringPtrOutput)
}

type WirelessControllerBleProfileArrayOutput struct{ *pulumi.OutputState }

func (WirelessControllerBleProfileArrayOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*[]*WirelessControllerBleProfile)(nil)).Elem()
}

func (o WirelessControllerBleProfileArrayOutput) ToWirelessControllerBleProfileArrayOutput() WirelessControllerBleProfileArrayOutput {
	return o
}

func (o WirelessControllerBleProfileArrayOutput) ToWirelessControllerBleProfileArrayOutputWithContext(ctx context.Context) WirelessControllerBleProfileArrayOutput {
	return o
}

func (o WirelessControllerBleProfileArrayOutput) ToOutput(ctx context.Context) pulumix.Output[[]*WirelessControllerBleProfile] {
	return pulumix.Output[[]*WirelessControllerBleProfile]{
		OutputState: o.OutputState,
	}
}

func (o WirelessControllerBleProfileArrayOutput) Index(i pulumi.IntInput) WirelessControllerBleProfileOutput {
	return pulumi.All(o, i).ApplyT(func(vs []interface{}) *WirelessControllerBleProfile {
		return vs[0].([]*WirelessControllerBleProfile)[vs[1].(int)]
	}).(WirelessControllerBleProfileOutput)
}

type WirelessControllerBleProfileMapOutput struct{ *pulumi.OutputState }

func (WirelessControllerBleProfileMapOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*map[string]*WirelessControllerBleProfile)(nil)).Elem()
}

func (o WirelessControllerBleProfileMapOutput) ToWirelessControllerBleProfileMapOutput() WirelessControllerBleProfileMapOutput {
	return o
}

func (o WirelessControllerBleProfileMapOutput) ToWirelessControllerBleProfileMapOutputWithContext(ctx context.Context) WirelessControllerBleProfileMapOutput {
	return o
}

func (o WirelessControllerBleProfileMapOutput) ToOutput(ctx context.Context) pulumix.Output[map[string]*WirelessControllerBleProfile] {
	return pulumix.Output[map[string]*WirelessControllerBleProfile]{
		OutputState: o.OutputState,
	}
}

func (o WirelessControllerBleProfileMapOutput) MapIndex(k pulumi.StringInput) WirelessControllerBleProfileOutput {
	return pulumi.All(o, k).ApplyT(func(vs []interface{}) *WirelessControllerBleProfile {
		return vs[0].(map[string]*WirelessControllerBleProfile)[vs[1].(string)]
	}).(WirelessControllerBleProfileOutput)
}

func init() {
	pulumi.RegisterInputType(reflect.TypeOf((*WirelessControllerBleProfileInput)(nil)).Elem(), &WirelessControllerBleProfile{})
	pulumi.RegisterInputType(reflect.TypeOf((*WirelessControllerBleProfileArrayInput)(nil)).Elem(), WirelessControllerBleProfileArray{})
	pulumi.RegisterInputType(reflect.TypeOf((*WirelessControllerBleProfileMapInput)(nil)).Elem(), WirelessControllerBleProfileMap{})
	pulumi.RegisterOutputType(WirelessControllerBleProfileOutput{})
	pulumi.RegisterOutputType(WirelessControllerBleProfileArrayOutput{})
	pulumi.RegisterOutputType(WirelessControllerBleProfileMapOutput{})
}
