// Code generated by the Pulumi Terraform Bridge (tfgen) Tool DO NOT EDIT.
// *** WARNING: Do not edit by hand unless you're certain you know what you are doing! ***

package fortios

import (
	"context"
	"reflect"

	"github.com/pulumi/pulumi/sdk/v3/go/pulumi"
)

type UserTacacs struct {
	pulumi.CustomResourceState

	AuthenType            pulumi.StringOutput    `pulumi:"authenType"`
	Authorization         pulumi.StringOutput    `pulumi:"authorization"`
	Interface             pulumi.StringOutput    `pulumi:"interface"`
	InterfaceSelectMethod pulumi.StringOutput    `pulumi:"interfaceSelectMethod"`
	Key                   pulumi.StringPtrOutput `pulumi:"key"`
	Name                  pulumi.StringOutput    `pulumi:"name"`
	Port                  pulumi.IntOutput       `pulumi:"port"`
	SecondaryKey          pulumi.StringPtrOutput `pulumi:"secondaryKey"`
	SecondaryServer       pulumi.StringOutput    `pulumi:"secondaryServer"`
	Server                pulumi.StringOutput    `pulumi:"server"`
	SourceIp              pulumi.StringOutput    `pulumi:"sourceIp"`
	TertiaryKey           pulumi.StringPtrOutput `pulumi:"tertiaryKey"`
	TertiaryServer        pulumi.StringOutput    `pulumi:"tertiaryServer"`
	Vdomparam             pulumi.StringPtrOutput `pulumi:"vdomparam"`
}

// NewUserTacacs registers a new resource with the given unique name, arguments, and options.
func NewUserTacacs(ctx *pulumi.Context,
	name string, args *UserTacacsArgs, opts ...pulumi.ResourceOption) (*UserTacacs, error) {
	if args == nil {
		args = &UserTacacsArgs{}
	}

	if args.Key != nil {
		args.Key = pulumi.ToSecret(args.Key).(pulumi.StringPtrInput)
	}
	if args.SecondaryKey != nil {
		args.SecondaryKey = pulumi.ToSecret(args.SecondaryKey).(pulumi.StringPtrInput)
	}
	if args.TertiaryKey != nil {
		args.TertiaryKey = pulumi.ToSecret(args.TertiaryKey).(pulumi.StringPtrInput)
	}
	secrets := pulumi.AdditionalSecretOutputs([]string{
		"key",
		"secondaryKey",
		"tertiaryKey",
	})
	opts = append(opts, secrets)
	opts = pkgResourceDefaultOpts(opts)
	var resource UserTacacs
	err := ctx.RegisterResource("fortios:index/userTacacs:UserTacacs", name, args, &resource, opts...)
	if err != nil {
		return nil, err
	}
	return &resource, nil
}

// GetUserTacacs gets an existing UserTacacs resource's state with the given name, ID, and optional
// state properties that are used to uniquely qualify the lookup (nil if not required).
func GetUserTacacs(ctx *pulumi.Context,
	name string, id pulumi.IDInput, state *UserTacacsState, opts ...pulumi.ResourceOption) (*UserTacacs, error) {
	var resource UserTacacs
	err := ctx.ReadResource("fortios:index/userTacacs:UserTacacs", name, id, state, &resource, opts...)
	if err != nil {
		return nil, err
	}
	return &resource, nil
}

// Input properties used for looking up and filtering UserTacacs resources.
type userTacacsState struct {
	AuthenType            *string `pulumi:"authenType"`
	Authorization         *string `pulumi:"authorization"`
	Interface             *string `pulumi:"interface"`
	InterfaceSelectMethod *string `pulumi:"interfaceSelectMethod"`
	Key                   *string `pulumi:"key"`
	Name                  *string `pulumi:"name"`
	Port                  *int    `pulumi:"port"`
	SecondaryKey          *string `pulumi:"secondaryKey"`
	SecondaryServer       *string `pulumi:"secondaryServer"`
	Server                *string `pulumi:"server"`
	SourceIp              *string `pulumi:"sourceIp"`
	TertiaryKey           *string `pulumi:"tertiaryKey"`
	TertiaryServer        *string `pulumi:"tertiaryServer"`
	Vdomparam             *string `pulumi:"vdomparam"`
}

type UserTacacsState struct {
	AuthenType            pulumi.StringPtrInput
	Authorization         pulumi.StringPtrInput
	Interface             pulumi.StringPtrInput
	InterfaceSelectMethod pulumi.StringPtrInput
	Key                   pulumi.StringPtrInput
	Name                  pulumi.StringPtrInput
	Port                  pulumi.IntPtrInput
	SecondaryKey          pulumi.StringPtrInput
	SecondaryServer       pulumi.StringPtrInput
	Server                pulumi.StringPtrInput
	SourceIp              pulumi.StringPtrInput
	TertiaryKey           pulumi.StringPtrInput
	TertiaryServer        pulumi.StringPtrInput
	Vdomparam             pulumi.StringPtrInput
}

func (UserTacacsState) ElementType() reflect.Type {
	return reflect.TypeOf((*userTacacsState)(nil)).Elem()
}

type userTacacsArgs struct {
	AuthenType            *string `pulumi:"authenType"`
	Authorization         *string `pulumi:"authorization"`
	Interface             *string `pulumi:"interface"`
	InterfaceSelectMethod *string `pulumi:"interfaceSelectMethod"`
	Key                   *string `pulumi:"key"`
	Name                  *string `pulumi:"name"`
	Port                  *int    `pulumi:"port"`
	SecondaryKey          *string `pulumi:"secondaryKey"`
	SecondaryServer       *string `pulumi:"secondaryServer"`
	Server                *string `pulumi:"server"`
	SourceIp              *string `pulumi:"sourceIp"`
	TertiaryKey           *string `pulumi:"tertiaryKey"`
	TertiaryServer        *string `pulumi:"tertiaryServer"`
	Vdomparam             *string `pulumi:"vdomparam"`
}

// The set of arguments for constructing a UserTacacs resource.
type UserTacacsArgs struct {
	AuthenType            pulumi.StringPtrInput
	Authorization         pulumi.StringPtrInput
	Interface             pulumi.StringPtrInput
	InterfaceSelectMethod pulumi.StringPtrInput
	Key                   pulumi.StringPtrInput
	Name                  pulumi.StringPtrInput
	Port                  pulumi.IntPtrInput
	SecondaryKey          pulumi.StringPtrInput
	SecondaryServer       pulumi.StringPtrInput
	Server                pulumi.StringPtrInput
	SourceIp              pulumi.StringPtrInput
	TertiaryKey           pulumi.StringPtrInput
	TertiaryServer        pulumi.StringPtrInput
	Vdomparam             pulumi.StringPtrInput
}

func (UserTacacsArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*userTacacsArgs)(nil)).Elem()
}

type UserTacacsInput interface {
	pulumi.Input

	ToUserTacacsOutput() UserTacacsOutput
	ToUserTacacsOutputWithContext(ctx context.Context) UserTacacsOutput
}

func (*UserTacacs) ElementType() reflect.Type {
	return reflect.TypeOf((**UserTacacs)(nil)).Elem()
}

func (i *UserTacacs) ToUserTacacsOutput() UserTacacsOutput {
	return i.ToUserTacacsOutputWithContext(context.Background())
}

func (i *UserTacacs) ToUserTacacsOutputWithContext(ctx context.Context) UserTacacsOutput {
	return pulumi.ToOutputWithContext(ctx, i).(UserTacacsOutput)
}

// UserTacacsArrayInput is an input type that accepts UserTacacsArray and UserTacacsArrayOutput values.
// You can construct a concrete instance of `UserTacacsArrayInput` via:
//
//	UserTacacsArray{ UserTacacsArgs{...} }
type UserTacacsArrayInput interface {
	pulumi.Input

	ToUserTacacsArrayOutput() UserTacacsArrayOutput
	ToUserTacacsArrayOutputWithContext(context.Context) UserTacacsArrayOutput
}

type UserTacacsArray []UserTacacsInput

func (UserTacacsArray) ElementType() reflect.Type {
	return reflect.TypeOf((*[]*UserTacacs)(nil)).Elem()
}

func (i UserTacacsArray) ToUserTacacsArrayOutput() UserTacacsArrayOutput {
	return i.ToUserTacacsArrayOutputWithContext(context.Background())
}

func (i UserTacacsArray) ToUserTacacsArrayOutputWithContext(ctx context.Context) UserTacacsArrayOutput {
	return pulumi.ToOutputWithContext(ctx, i).(UserTacacsArrayOutput)
}

// UserTacacsMapInput is an input type that accepts UserTacacsMap and UserTacacsMapOutput values.
// You can construct a concrete instance of `UserTacacsMapInput` via:
//
//	UserTacacsMap{ "key": UserTacacsArgs{...} }
type UserTacacsMapInput interface {
	pulumi.Input

	ToUserTacacsMapOutput() UserTacacsMapOutput
	ToUserTacacsMapOutputWithContext(context.Context) UserTacacsMapOutput
}

type UserTacacsMap map[string]UserTacacsInput

func (UserTacacsMap) ElementType() reflect.Type {
	return reflect.TypeOf((*map[string]*UserTacacs)(nil)).Elem()
}

func (i UserTacacsMap) ToUserTacacsMapOutput() UserTacacsMapOutput {
	return i.ToUserTacacsMapOutputWithContext(context.Background())
}

func (i UserTacacsMap) ToUserTacacsMapOutputWithContext(ctx context.Context) UserTacacsMapOutput {
	return pulumi.ToOutputWithContext(ctx, i).(UserTacacsMapOutput)
}

type UserTacacsOutput struct{ *pulumi.OutputState }

func (UserTacacsOutput) ElementType() reflect.Type {
	return reflect.TypeOf((**UserTacacs)(nil)).Elem()
}

func (o UserTacacsOutput) ToUserTacacsOutput() UserTacacsOutput {
	return o
}

func (o UserTacacsOutput) ToUserTacacsOutputWithContext(ctx context.Context) UserTacacsOutput {
	return o
}

func (o UserTacacsOutput) AuthenType() pulumi.StringOutput {
	return o.ApplyT(func(v *UserTacacs) pulumi.StringOutput { return v.AuthenType }).(pulumi.StringOutput)
}

func (o UserTacacsOutput) Authorization() pulumi.StringOutput {
	return o.ApplyT(func(v *UserTacacs) pulumi.StringOutput { return v.Authorization }).(pulumi.StringOutput)
}

func (o UserTacacsOutput) Interface() pulumi.StringOutput {
	return o.ApplyT(func(v *UserTacacs) pulumi.StringOutput { return v.Interface }).(pulumi.StringOutput)
}

func (o UserTacacsOutput) InterfaceSelectMethod() pulumi.StringOutput {
	return o.ApplyT(func(v *UserTacacs) pulumi.StringOutput { return v.InterfaceSelectMethod }).(pulumi.StringOutput)
}

func (o UserTacacsOutput) Key() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *UserTacacs) pulumi.StringPtrOutput { return v.Key }).(pulumi.StringPtrOutput)
}

func (o UserTacacsOutput) Name() pulumi.StringOutput {
	return o.ApplyT(func(v *UserTacacs) pulumi.StringOutput { return v.Name }).(pulumi.StringOutput)
}

func (o UserTacacsOutput) Port() pulumi.IntOutput {
	return o.ApplyT(func(v *UserTacacs) pulumi.IntOutput { return v.Port }).(pulumi.IntOutput)
}

func (o UserTacacsOutput) SecondaryKey() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *UserTacacs) pulumi.StringPtrOutput { return v.SecondaryKey }).(pulumi.StringPtrOutput)
}

func (o UserTacacsOutput) SecondaryServer() pulumi.StringOutput {
	return o.ApplyT(func(v *UserTacacs) pulumi.StringOutput { return v.SecondaryServer }).(pulumi.StringOutput)
}

func (o UserTacacsOutput) Server() pulumi.StringOutput {
	return o.ApplyT(func(v *UserTacacs) pulumi.StringOutput { return v.Server }).(pulumi.StringOutput)
}

func (o UserTacacsOutput) SourceIp() pulumi.StringOutput {
	return o.ApplyT(func(v *UserTacacs) pulumi.StringOutput { return v.SourceIp }).(pulumi.StringOutput)
}

func (o UserTacacsOutput) TertiaryKey() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *UserTacacs) pulumi.StringPtrOutput { return v.TertiaryKey }).(pulumi.StringPtrOutput)
}

func (o UserTacacsOutput) TertiaryServer() pulumi.StringOutput {
	return o.ApplyT(func(v *UserTacacs) pulumi.StringOutput { return v.TertiaryServer }).(pulumi.StringOutput)
}

func (o UserTacacsOutput) Vdomparam() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *UserTacacs) pulumi.StringPtrOutput { return v.Vdomparam }).(pulumi.StringPtrOutput)
}

type UserTacacsArrayOutput struct{ *pulumi.OutputState }

func (UserTacacsArrayOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*[]*UserTacacs)(nil)).Elem()
}

func (o UserTacacsArrayOutput) ToUserTacacsArrayOutput() UserTacacsArrayOutput {
	return o
}

func (o UserTacacsArrayOutput) ToUserTacacsArrayOutputWithContext(ctx context.Context) UserTacacsArrayOutput {
	return o
}

func (o UserTacacsArrayOutput) Index(i pulumi.IntInput) UserTacacsOutput {
	return pulumi.All(o, i).ApplyT(func(vs []interface{}) *UserTacacs {
		return vs[0].([]*UserTacacs)[vs[1].(int)]
	}).(UserTacacsOutput)
}

type UserTacacsMapOutput struct{ *pulumi.OutputState }

func (UserTacacsMapOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*map[string]*UserTacacs)(nil)).Elem()
}

func (o UserTacacsMapOutput) ToUserTacacsMapOutput() UserTacacsMapOutput {
	return o
}

func (o UserTacacsMapOutput) ToUserTacacsMapOutputWithContext(ctx context.Context) UserTacacsMapOutput {
	return o
}

func (o UserTacacsMapOutput) MapIndex(k pulumi.StringInput) UserTacacsOutput {
	return pulumi.All(o, k).ApplyT(func(vs []interface{}) *UserTacacs {
		return vs[0].(map[string]*UserTacacs)[vs[1].(string)]
	}).(UserTacacsOutput)
}

func init() {
	pulumi.RegisterInputType(reflect.TypeOf((*UserTacacsInput)(nil)).Elem(), &UserTacacs{})
	pulumi.RegisterInputType(reflect.TypeOf((*UserTacacsArrayInput)(nil)).Elem(), UserTacacsArray{})
	pulumi.RegisterInputType(reflect.TypeOf((*UserTacacsMapInput)(nil)).Elem(), UserTacacsMap{})
	pulumi.RegisterOutputType(UserTacacsOutput{})
	pulumi.RegisterOutputType(UserTacacsArrayOutput{})
	pulumi.RegisterOutputType(UserTacacsMapOutput{})
}
