// *** WARNING: this file was generated by the Pulumi Terraform Bridge (tfgen) Tool. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

package fortios

import (
	"context"
	"reflect"

	"github.com/pulumi/pulumi/sdk/v3/go/pulumi"
)

// Configure TACACS+ server entries.
//
// ## Example Usage
//
// ```go
// package main
//
// import (
// 	"github.com/pulumi/pulumi-fortios/sdk/go/fortios"
// 	"github.com/pulumi/pulumi/sdk/v3/go/pulumi"
// )
//
// func main() {
// 	pulumi.Run(func(ctx *pulumi.Context) error {
// 		_, err := fortios.NewUserTacacs(ctx, "trname", &fortios.UserTacacsArgs{
// 			AuthenType:    pulumi.String("auto"),
// 			Authorization: pulumi.String("disable"),
// 			Port:          pulumi.Int(2342),
// 			Server:        pulumi.String("1.1.1.1"),
// 		})
// 		if err != nil {
// 			return err
// 		}
// 		return nil
// 	})
// }
// ```
//
// ## Import
//
// User Tacacs can be imported using any of these accepted formats$ export "FORTIOS_IMPORT_TABLE"="true"
//
// ```sh
//  $ pulumi import fortios:index/userTacacs:UserTacacs labelname {{name}}
// ```
//
//  $ unset "FORTIOS_IMPORT_TABLE"
type UserTacacs struct {
	pulumi.CustomResourceState

	// Allowed authentication protocols/methods. Valid values: `mschap`, `chap`, `pap`, `ascii`, `auto`.
	AuthenType pulumi.StringOutput `pulumi:"authenType"`
	// Enable/disable TACACS+ authorization. Valid values: `enable`, `disable`.
	Authorization pulumi.StringOutput `pulumi:"authorization"`
	// Specify outgoing interface to reach server.
	Interface pulumi.StringOutput `pulumi:"interface"`
	// Specify how to select outgoing interface to reach server. Valid values: `auto`, `sdwan`, `specify`.
	InterfaceSelectMethod pulumi.StringOutput `pulumi:"interfaceSelectMethod"`
	// Key to access the primary server.
	Key pulumi.StringPtrOutput `pulumi:"key"`
	// TACACS+ server entry name.
	Name pulumi.StringOutput `pulumi:"name"`
	// Port number of the TACACS+ server.
	Port pulumi.IntOutput `pulumi:"port"`
	// Key to access the secondary server.
	SecondaryKey pulumi.StringPtrOutput `pulumi:"secondaryKey"`
	// Secondary TACACS+ server CN domain name or IP address.
	SecondaryServer pulumi.StringOutput `pulumi:"secondaryServer"`
	// Primary TACACS+ server CN domain name or IP address.
	Server pulumi.StringOutput `pulumi:"server"`
	// source IP for communications to TACACS+ server.
	SourceIp pulumi.StringOutput `pulumi:"sourceIp"`
	// Key to access the tertiary server.
	TertiaryKey pulumi.StringPtrOutput `pulumi:"tertiaryKey"`
	// Tertiary TACACS+ server CN domain name or IP address.
	TertiaryServer pulumi.StringOutput `pulumi:"tertiaryServer"`
	// Specifies the vdom to which the resource will be applied when the FortiGate unit is running in VDOM mode. Only one vdom can be specified. If you want to inherit the vdom configuration of the provider, please do not set this parameter.
	Vdomparam pulumi.StringPtrOutput `pulumi:"vdomparam"`
}

// NewUserTacacs registers a new resource with the given unique name, arguments, and options.
func NewUserTacacs(ctx *pulumi.Context,
	name string, args *UserTacacsArgs, opts ...pulumi.ResourceOption) (*UserTacacs, error) {
	if args == nil {
		args = &UserTacacsArgs{}
	}

	var resource UserTacacs
	err := ctx.RegisterResource("fortios:index/userTacacs:UserTacacs", name, args, &resource, opts...)
	if err != nil {
		return nil, err
	}
	return &resource, nil
}

// GetUserTacacs gets an existing UserTacacs resource's state with the given name, ID, and optional
// state properties that are used to uniquely qualify the lookup (nil if not required).
func GetUserTacacs(ctx *pulumi.Context,
	name string, id pulumi.IDInput, state *UserTacacsState, opts ...pulumi.ResourceOption) (*UserTacacs, error) {
	var resource UserTacacs
	err := ctx.ReadResource("fortios:index/userTacacs:UserTacacs", name, id, state, &resource, opts...)
	if err != nil {
		return nil, err
	}
	return &resource, nil
}

// Input properties used for looking up and filtering UserTacacs resources.
type userTacacsState struct {
	// Allowed authentication protocols/methods. Valid values: `mschap`, `chap`, `pap`, `ascii`, `auto`.
	AuthenType *string `pulumi:"authenType"`
	// Enable/disable TACACS+ authorization. Valid values: `enable`, `disable`.
	Authorization *string `pulumi:"authorization"`
	// Specify outgoing interface to reach server.
	Interface *string `pulumi:"interface"`
	// Specify how to select outgoing interface to reach server. Valid values: `auto`, `sdwan`, `specify`.
	InterfaceSelectMethod *string `pulumi:"interfaceSelectMethod"`
	// Key to access the primary server.
	Key *string `pulumi:"key"`
	// TACACS+ server entry name.
	Name *string `pulumi:"name"`
	// Port number of the TACACS+ server.
	Port *int `pulumi:"port"`
	// Key to access the secondary server.
	SecondaryKey *string `pulumi:"secondaryKey"`
	// Secondary TACACS+ server CN domain name or IP address.
	SecondaryServer *string `pulumi:"secondaryServer"`
	// Primary TACACS+ server CN domain name or IP address.
	Server *string `pulumi:"server"`
	// source IP for communications to TACACS+ server.
	SourceIp *string `pulumi:"sourceIp"`
	// Key to access the tertiary server.
	TertiaryKey *string `pulumi:"tertiaryKey"`
	// Tertiary TACACS+ server CN domain name or IP address.
	TertiaryServer *string `pulumi:"tertiaryServer"`
	// Specifies the vdom to which the resource will be applied when the FortiGate unit is running in VDOM mode. Only one vdom can be specified. If you want to inherit the vdom configuration of the provider, please do not set this parameter.
	Vdomparam *string `pulumi:"vdomparam"`
}

type UserTacacsState struct {
	// Allowed authentication protocols/methods. Valid values: `mschap`, `chap`, `pap`, `ascii`, `auto`.
	AuthenType pulumi.StringPtrInput
	// Enable/disable TACACS+ authorization. Valid values: `enable`, `disable`.
	Authorization pulumi.StringPtrInput
	// Specify outgoing interface to reach server.
	Interface pulumi.StringPtrInput
	// Specify how to select outgoing interface to reach server. Valid values: `auto`, `sdwan`, `specify`.
	InterfaceSelectMethod pulumi.StringPtrInput
	// Key to access the primary server.
	Key pulumi.StringPtrInput
	// TACACS+ server entry name.
	Name pulumi.StringPtrInput
	// Port number of the TACACS+ server.
	Port pulumi.IntPtrInput
	// Key to access the secondary server.
	SecondaryKey pulumi.StringPtrInput
	// Secondary TACACS+ server CN domain name or IP address.
	SecondaryServer pulumi.StringPtrInput
	// Primary TACACS+ server CN domain name or IP address.
	Server pulumi.StringPtrInput
	// source IP for communications to TACACS+ server.
	SourceIp pulumi.StringPtrInput
	// Key to access the tertiary server.
	TertiaryKey pulumi.StringPtrInput
	// Tertiary TACACS+ server CN domain name or IP address.
	TertiaryServer pulumi.StringPtrInput
	// Specifies the vdom to which the resource will be applied when the FortiGate unit is running in VDOM mode. Only one vdom can be specified. If you want to inherit the vdom configuration of the provider, please do not set this parameter.
	Vdomparam pulumi.StringPtrInput
}

func (UserTacacsState) ElementType() reflect.Type {
	return reflect.TypeOf((*userTacacsState)(nil)).Elem()
}

type userTacacsArgs struct {
	// Allowed authentication protocols/methods. Valid values: `mschap`, `chap`, `pap`, `ascii`, `auto`.
	AuthenType *string `pulumi:"authenType"`
	// Enable/disable TACACS+ authorization. Valid values: `enable`, `disable`.
	Authorization *string `pulumi:"authorization"`
	// Specify outgoing interface to reach server.
	Interface *string `pulumi:"interface"`
	// Specify how to select outgoing interface to reach server. Valid values: `auto`, `sdwan`, `specify`.
	InterfaceSelectMethod *string `pulumi:"interfaceSelectMethod"`
	// Key to access the primary server.
	Key *string `pulumi:"key"`
	// TACACS+ server entry name.
	Name *string `pulumi:"name"`
	// Port number of the TACACS+ server.
	Port *int `pulumi:"port"`
	// Key to access the secondary server.
	SecondaryKey *string `pulumi:"secondaryKey"`
	// Secondary TACACS+ server CN domain name or IP address.
	SecondaryServer *string `pulumi:"secondaryServer"`
	// Primary TACACS+ server CN domain name or IP address.
	Server *string `pulumi:"server"`
	// source IP for communications to TACACS+ server.
	SourceIp *string `pulumi:"sourceIp"`
	// Key to access the tertiary server.
	TertiaryKey *string `pulumi:"tertiaryKey"`
	// Tertiary TACACS+ server CN domain name or IP address.
	TertiaryServer *string `pulumi:"tertiaryServer"`
	// Specifies the vdom to which the resource will be applied when the FortiGate unit is running in VDOM mode. Only one vdom can be specified. If you want to inherit the vdom configuration of the provider, please do not set this parameter.
	Vdomparam *string `pulumi:"vdomparam"`
}

// The set of arguments for constructing a UserTacacs resource.
type UserTacacsArgs struct {
	// Allowed authentication protocols/methods. Valid values: `mschap`, `chap`, `pap`, `ascii`, `auto`.
	AuthenType pulumi.StringPtrInput
	// Enable/disable TACACS+ authorization. Valid values: `enable`, `disable`.
	Authorization pulumi.StringPtrInput
	// Specify outgoing interface to reach server.
	Interface pulumi.StringPtrInput
	// Specify how to select outgoing interface to reach server. Valid values: `auto`, `sdwan`, `specify`.
	InterfaceSelectMethod pulumi.StringPtrInput
	// Key to access the primary server.
	Key pulumi.StringPtrInput
	// TACACS+ server entry name.
	Name pulumi.StringPtrInput
	// Port number of the TACACS+ server.
	Port pulumi.IntPtrInput
	// Key to access the secondary server.
	SecondaryKey pulumi.StringPtrInput
	// Secondary TACACS+ server CN domain name or IP address.
	SecondaryServer pulumi.StringPtrInput
	// Primary TACACS+ server CN domain name or IP address.
	Server pulumi.StringPtrInput
	// source IP for communications to TACACS+ server.
	SourceIp pulumi.StringPtrInput
	// Key to access the tertiary server.
	TertiaryKey pulumi.StringPtrInput
	// Tertiary TACACS+ server CN domain name or IP address.
	TertiaryServer pulumi.StringPtrInput
	// Specifies the vdom to which the resource will be applied when the FortiGate unit is running in VDOM mode. Only one vdom can be specified. If you want to inherit the vdom configuration of the provider, please do not set this parameter.
	Vdomparam pulumi.StringPtrInput
}

func (UserTacacsArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*userTacacsArgs)(nil)).Elem()
}

type UserTacacsInput interface {
	pulumi.Input

	ToUserTacacsOutput() UserTacacsOutput
	ToUserTacacsOutputWithContext(ctx context.Context) UserTacacsOutput
}

func (*UserTacacs) ElementType() reflect.Type {
	return reflect.TypeOf((*UserTacacs)(nil))
}

func (i *UserTacacs) ToUserTacacsOutput() UserTacacsOutput {
	return i.ToUserTacacsOutputWithContext(context.Background())
}

func (i *UserTacacs) ToUserTacacsOutputWithContext(ctx context.Context) UserTacacsOutput {
	return pulumi.ToOutputWithContext(ctx, i).(UserTacacsOutput)
}

func (i *UserTacacs) ToUserTacacsPtrOutput() UserTacacsPtrOutput {
	return i.ToUserTacacsPtrOutputWithContext(context.Background())
}

func (i *UserTacacs) ToUserTacacsPtrOutputWithContext(ctx context.Context) UserTacacsPtrOutput {
	return pulumi.ToOutputWithContext(ctx, i).(UserTacacsPtrOutput)
}

type UserTacacsPtrInput interface {
	pulumi.Input

	ToUserTacacsPtrOutput() UserTacacsPtrOutput
	ToUserTacacsPtrOutputWithContext(ctx context.Context) UserTacacsPtrOutput
}

type userTacacsPtrType UserTacacsArgs

func (*userTacacsPtrType) ElementType() reflect.Type {
	return reflect.TypeOf((**UserTacacs)(nil))
}

func (i *userTacacsPtrType) ToUserTacacsPtrOutput() UserTacacsPtrOutput {
	return i.ToUserTacacsPtrOutputWithContext(context.Background())
}

func (i *userTacacsPtrType) ToUserTacacsPtrOutputWithContext(ctx context.Context) UserTacacsPtrOutput {
	return pulumi.ToOutputWithContext(ctx, i).(UserTacacsPtrOutput)
}

// UserTacacsArrayInput is an input type that accepts UserTacacsArray and UserTacacsArrayOutput values.
// You can construct a concrete instance of `UserTacacsArrayInput` via:
//
//          UserTacacsArray{ UserTacacsArgs{...} }
type UserTacacsArrayInput interface {
	pulumi.Input

	ToUserTacacsArrayOutput() UserTacacsArrayOutput
	ToUserTacacsArrayOutputWithContext(context.Context) UserTacacsArrayOutput
}

type UserTacacsArray []UserTacacsInput

func (UserTacacsArray) ElementType() reflect.Type {
	return reflect.TypeOf(([]*UserTacacs)(nil))
}

func (i UserTacacsArray) ToUserTacacsArrayOutput() UserTacacsArrayOutput {
	return i.ToUserTacacsArrayOutputWithContext(context.Background())
}

func (i UserTacacsArray) ToUserTacacsArrayOutputWithContext(ctx context.Context) UserTacacsArrayOutput {
	return pulumi.ToOutputWithContext(ctx, i).(UserTacacsArrayOutput)
}

// UserTacacsMapInput is an input type that accepts UserTacacsMap and UserTacacsMapOutput values.
// You can construct a concrete instance of `UserTacacsMapInput` via:
//
//          UserTacacsMap{ "key": UserTacacsArgs{...} }
type UserTacacsMapInput interface {
	pulumi.Input

	ToUserTacacsMapOutput() UserTacacsMapOutput
	ToUserTacacsMapOutputWithContext(context.Context) UserTacacsMapOutput
}

type UserTacacsMap map[string]UserTacacsInput

func (UserTacacsMap) ElementType() reflect.Type {
	return reflect.TypeOf((map[string]*UserTacacs)(nil))
}

func (i UserTacacsMap) ToUserTacacsMapOutput() UserTacacsMapOutput {
	return i.ToUserTacacsMapOutputWithContext(context.Background())
}

func (i UserTacacsMap) ToUserTacacsMapOutputWithContext(ctx context.Context) UserTacacsMapOutput {
	return pulumi.ToOutputWithContext(ctx, i).(UserTacacsMapOutput)
}

type UserTacacsOutput struct {
	*pulumi.OutputState
}

func (UserTacacsOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*UserTacacs)(nil))
}

func (o UserTacacsOutput) ToUserTacacsOutput() UserTacacsOutput {
	return o
}

func (o UserTacacsOutput) ToUserTacacsOutputWithContext(ctx context.Context) UserTacacsOutput {
	return o
}

func (o UserTacacsOutput) ToUserTacacsPtrOutput() UserTacacsPtrOutput {
	return o.ToUserTacacsPtrOutputWithContext(context.Background())
}

func (o UserTacacsOutput) ToUserTacacsPtrOutputWithContext(ctx context.Context) UserTacacsPtrOutput {
	return o.ApplyT(func(v UserTacacs) *UserTacacs {
		return &v
	}).(UserTacacsPtrOutput)
}

type UserTacacsPtrOutput struct {
	*pulumi.OutputState
}

func (UserTacacsPtrOutput) ElementType() reflect.Type {
	return reflect.TypeOf((**UserTacacs)(nil))
}

func (o UserTacacsPtrOutput) ToUserTacacsPtrOutput() UserTacacsPtrOutput {
	return o
}

func (o UserTacacsPtrOutput) ToUserTacacsPtrOutputWithContext(ctx context.Context) UserTacacsPtrOutput {
	return o
}

type UserTacacsArrayOutput struct{ *pulumi.OutputState }

func (UserTacacsArrayOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*[]UserTacacs)(nil))
}

func (o UserTacacsArrayOutput) ToUserTacacsArrayOutput() UserTacacsArrayOutput {
	return o
}

func (o UserTacacsArrayOutput) ToUserTacacsArrayOutputWithContext(ctx context.Context) UserTacacsArrayOutput {
	return o
}

func (o UserTacacsArrayOutput) Index(i pulumi.IntInput) UserTacacsOutput {
	return pulumi.All(o, i).ApplyT(func(vs []interface{}) UserTacacs {
		return vs[0].([]UserTacacs)[vs[1].(int)]
	}).(UserTacacsOutput)
}

type UserTacacsMapOutput struct{ *pulumi.OutputState }

func (UserTacacsMapOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*map[string]UserTacacs)(nil))
}

func (o UserTacacsMapOutput) ToUserTacacsMapOutput() UserTacacsMapOutput {
	return o
}

func (o UserTacacsMapOutput) ToUserTacacsMapOutputWithContext(ctx context.Context) UserTacacsMapOutput {
	return o
}

func (o UserTacacsMapOutput) MapIndex(k pulumi.StringInput) UserTacacsOutput {
	return pulumi.All(o, k).ApplyT(func(vs []interface{}) UserTacacs {
		return vs[0].(map[string]UserTacacs)[vs[1].(string)]
	}).(UserTacacsOutput)
}

func init() {
	pulumi.RegisterOutputType(UserTacacsOutput{})
	pulumi.RegisterOutputType(UserTacacsPtrOutput{})
	pulumi.RegisterOutputType(UserTacacsArrayOutput{})
	pulumi.RegisterOutputType(UserTacacsMapOutput{})
}
