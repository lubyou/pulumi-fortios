// Code generated by the Pulumi Terraform Bridge (tfgen) Tool DO NOT EDIT.
// *** WARNING: Do not edit by hand unless you're certain you know what you are doing! ***

package fortios

import (
	"context"
	"reflect"

	"github.com/lubyou/pulumi-fortios/sdk/go/fortios/internal"
	"github.com/pulumi/pulumi/sdk/v3/go/pulumi"
	"github.com/pulumi/pulumi/sdk/v3/go/pulumix"
)

type VideofilterProfile struct {
	pulumi.CustomResourceState

	Comment              pulumi.StringPtrOutput                     `pulumi:"comment"`
	Dailymotion          pulumi.StringOutput                        `pulumi:"dailymotion"`
	DefaultAction        pulumi.StringOutput                        `pulumi:"defaultAction"`
	FortiguardCategory   VideofilterProfileFortiguardCategoryOutput `pulumi:"fortiguardCategory"`
	GetAllTables         pulumi.StringPtrOutput                     `pulumi:"getAllTables"`
	Log                  pulumi.StringOutput                        `pulumi:"log"`
	Name                 pulumi.StringOutput                        `pulumi:"name"`
	ReplacemsgGroup      pulumi.StringOutput                        `pulumi:"replacemsgGroup"`
	Vdomparam            pulumi.StringPtrOutput                     `pulumi:"vdomparam"`
	Vimeo                pulumi.StringOutput                        `pulumi:"vimeo"`
	Youtube              pulumi.StringOutput                        `pulumi:"youtube"`
	YoutubeChannelFilter pulumi.IntOutput                           `pulumi:"youtubeChannelFilter"`
}

// NewVideofilterProfile registers a new resource with the given unique name, arguments, and options.
func NewVideofilterProfile(ctx *pulumi.Context,
	name string, args *VideofilterProfileArgs, opts ...pulumi.ResourceOption) (*VideofilterProfile, error) {
	if args == nil {
		args = &VideofilterProfileArgs{}
	}

	opts = internal.PkgResourceDefaultOpts(opts)
	var resource VideofilterProfile
	err := ctx.RegisterResource("fortios:index/videofilterProfile:VideofilterProfile", name, args, &resource, opts...)
	if err != nil {
		return nil, err
	}
	return &resource, nil
}

// GetVideofilterProfile gets an existing VideofilterProfile resource's state with the given name, ID, and optional
// state properties that are used to uniquely qualify the lookup (nil if not required).
func GetVideofilterProfile(ctx *pulumi.Context,
	name string, id pulumi.IDInput, state *VideofilterProfileState, opts ...pulumi.ResourceOption) (*VideofilterProfile, error) {
	var resource VideofilterProfile
	err := ctx.ReadResource("fortios:index/videofilterProfile:VideofilterProfile", name, id, state, &resource, opts...)
	if err != nil {
		return nil, err
	}
	return &resource, nil
}

// Input properties used for looking up and filtering VideofilterProfile resources.
type videofilterProfileState struct {
	Comment              *string                               `pulumi:"comment"`
	Dailymotion          *string                               `pulumi:"dailymotion"`
	DefaultAction        *string                               `pulumi:"defaultAction"`
	FortiguardCategory   *VideofilterProfileFortiguardCategory `pulumi:"fortiguardCategory"`
	GetAllTables         *string                               `pulumi:"getAllTables"`
	Log                  *string                               `pulumi:"log"`
	Name                 *string                               `pulumi:"name"`
	ReplacemsgGroup      *string                               `pulumi:"replacemsgGroup"`
	Vdomparam            *string                               `pulumi:"vdomparam"`
	Vimeo                *string                               `pulumi:"vimeo"`
	Youtube              *string                               `pulumi:"youtube"`
	YoutubeChannelFilter *int                                  `pulumi:"youtubeChannelFilter"`
}

type VideofilterProfileState struct {
	Comment              pulumi.StringPtrInput
	Dailymotion          pulumi.StringPtrInput
	DefaultAction        pulumi.StringPtrInput
	FortiguardCategory   VideofilterProfileFortiguardCategoryPtrInput
	GetAllTables         pulumi.StringPtrInput
	Log                  pulumi.StringPtrInput
	Name                 pulumi.StringPtrInput
	ReplacemsgGroup      pulumi.StringPtrInput
	Vdomparam            pulumi.StringPtrInput
	Vimeo                pulumi.StringPtrInput
	Youtube              pulumi.StringPtrInput
	YoutubeChannelFilter pulumi.IntPtrInput
}

func (VideofilterProfileState) ElementType() reflect.Type {
	return reflect.TypeOf((*videofilterProfileState)(nil)).Elem()
}

type videofilterProfileArgs struct {
	Comment              *string                               `pulumi:"comment"`
	Dailymotion          *string                               `pulumi:"dailymotion"`
	DefaultAction        *string                               `pulumi:"defaultAction"`
	FortiguardCategory   *VideofilterProfileFortiguardCategory `pulumi:"fortiguardCategory"`
	GetAllTables         *string                               `pulumi:"getAllTables"`
	Log                  *string                               `pulumi:"log"`
	Name                 *string                               `pulumi:"name"`
	ReplacemsgGroup      *string                               `pulumi:"replacemsgGroup"`
	Vdomparam            *string                               `pulumi:"vdomparam"`
	Vimeo                *string                               `pulumi:"vimeo"`
	Youtube              *string                               `pulumi:"youtube"`
	YoutubeChannelFilter *int                                  `pulumi:"youtubeChannelFilter"`
}

// The set of arguments for constructing a VideofilterProfile resource.
type VideofilterProfileArgs struct {
	Comment              pulumi.StringPtrInput
	Dailymotion          pulumi.StringPtrInput
	DefaultAction        pulumi.StringPtrInput
	FortiguardCategory   VideofilterProfileFortiguardCategoryPtrInput
	GetAllTables         pulumi.StringPtrInput
	Log                  pulumi.StringPtrInput
	Name                 pulumi.StringPtrInput
	ReplacemsgGroup      pulumi.StringPtrInput
	Vdomparam            pulumi.StringPtrInput
	Vimeo                pulumi.StringPtrInput
	Youtube              pulumi.StringPtrInput
	YoutubeChannelFilter pulumi.IntPtrInput
}

func (VideofilterProfileArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*videofilterProfileArgs)(nil)).Elem()
}

type VideofilterProfileInput interface {
	pulumi.Input

	ToVideofilterProfileOutput() VideofilterProfileOutput
	ToVideofilterProfileOutputWithContext(ctx context.Context) VideofilterProfileOutput
}

func (*VideofilterProfile) ElementType() reflect.Type {
	return reflect.TypeOf((**VideofilterProfile)(nil)).Elem()
}

func (i *VideofilterProfile) ToVideofilterProfileOutput() VideofilterProfileOutput {
	return i.ToVideofilterProfileOutputWithContext(context.Background())
}

func (i *VideofilterProfile) ToVideofilterProfileOutputWithContext(ctx context.Context) VideofilterProfileOutput {
	return pulumi.ToOutputWithContext(ctx, i).(VideofilterProfileOutput)
}

func (i *VideofilterProfile) ToOutput(ctx context.Context) pulumix.Output[*VideofilterProfile] {
	return pulumix.Output[*VideofilterProfile]{
		OutputState: i.ToVideofilterProfileOutputWithContext(ctx).OutputState,
	}
}

// VideofilterProfileArrayInput is an input type that accepts VideofilterProfileArray and VideofilterProfileArrayOutput values.
// You can construct a concrete instance of `VideofilterProfileArrayInput` via:
//
//	VideofilterProfileArray{ VideofilterProfileArgs{...} }
type VideofilterProfileArrayInput interface {
	pulumi.Input

	ToVideofilterProfileArrayOutput() VideofilterProfileArrayOutput
	ToVideofilterProfileArrayOutputWithContext(context.Context) VideofilterProfileArrayOutput
}

type VideofilterProfileArray []VideofilterProfileInput

func (VideofilterProfileArray) ElementType() reflect.Type {
	return reflect.TypeOf((*[]*VideofilterProfile)(nil)).Elem()
}

func (i VideofilterProfileArray) ToVideofilterProfileArrayOutput() VideofilterProfileArrayOutput {
	return i.ToVideofilterProfileArrayOutputWithContext(context.Background())
}

func (i VideofilterProfileArray) ToVideofilterProfileArrayOutputWithContext(ctx context.Context) VideofilterProfileArrayOutput {
	return pulumi.ToOutputWithContext(ctx, i).(VideofilterProfileArrayOutput)
}

func (i VideofilterProfileArray) ToOutput(ctx context.Context) pulumix.Output[[]*VideofilterProfile] {
	return pulumix.Output[[]*VideofilterProfile]{
		OutputState: i.ToVideofilterProfileArrayOutputWithContext(ctx).OutputState,
	}
}

// VideofilterProfileMapInput is an input type that accepts VideofilterProfileMap and VideofilterProfileMapOutput values.
// You can construct a concrete instance of `VideofilterProfileMapInput` via:
//
//	VideofilterProfileMap{ "key": VideofilterProfileArgs{...} }
type VideofilterProfileMapInput interface {
	pulumi.Input

	ToVideofilterProfileMapOutput() VideofilterProfileMapOutput
	ToVideofilterProfileMapOutputWithContext(context.Context) VideofilterProfileMapOutput
}

type VideofilterProfileMap map[string]VideofilterProfileInput

func (VideofilterProfileMap) ElementType() reflect.Type {
	return reflect.TypeOf((*map[string]*VideofilterProfile)(nil)).Elem()
}

func (i VideofilterProfileMap) ToVideofilterProfileMapOutput() VideofilterProfileMapOutput {
	return i.ToVideofilterProfileMapOutputWithContext(context.Background())
}

func (i VideofilterProfileMap) ToVideofilterProfileMapOutputWithContext(ctx context.Context) VideofilterProfileMapOutput {
	return pulumi.ToOutputWithContext(ctx, i).(VideofilterProfileMapOutput)
}

func (i VideofilterProfileMap) ToOutput(ctx context.Context) pulumix.Output[map[string]*VideofilterProfile] {
	return pulumix.Output[map[string]*VideofilterProfile]{
		OutputState: i.ToVideofilterProfileMapOutputWithContext(ctx).OutputState,
	}
}

type VideofilterProfileOutput struct{ *pulumi.OutputState }

func (VideofilterProfileOutput) ElementType() reflect.Type {
	return reflect.TypeOf((**VideofilterProfile)(nil)).Elem()
}

func (o VideofilterProfileOutput) ToVideofilterProfileOutput() VideofilterProfileOutput {
	return o
}

func (o VideofilterProfileOutput) ToVideofilterProfileOutputWithContext(ctx context.Context) VideofilterProfileOutput {
	return o
}

func (o VideofilterProfileOutput) ToOutput(ctx context.Context) pulumix.Output[*VideofilterProfile] {
	return pulumix.Output[*VideofilterProfile]{
		OutputState: o.OutputState,
	}
}

func (o VideofilterProfileOutput) Comment() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *VideofilterProfile) pulumi.StringPtrOutput { return v.Comment }).(pulumi.StringPtrOutput)
}

func (o VideofilterProfileOutput) Dailymotion() pulumi.StringOutput {
	return o.ApplyT(func(v *VideofilterProfile) pulumi.StringOutput { return v.Dailymotion }).(pulumi.StringOutput)
}

func (o VideofilterProfileOutput) DefaultAction() pulumi.StringOutput {
	return o.ApplyT(func(v *VideofilterProfile) pulumi.StringOutput { return v.DefaultAction }).(pulumi.StringOutput)
}

func (o VideofilterProfileOutput) FortiguardCategory() VideofilterProfileFortiguardCategoryOutput {
	return o.ApplyT(func(v *VideofilterProfile) VideofilterProfileFortiguardCategoryOutput { return v.FortiguardCategory }).(VideofilterProfileFortiguardCategoryOutput)
}

func (o VideofilterProfileOutput) GetAllTables() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *VideofilterProfile) pulumi.StringPtrOutput { return v.GetAllTables }).(pulumi.StringPtrOutput)
}

func (o VideofilterProfileOutput) Log() pulumi.StringOutput {
	return o.ApplyT(func(v *VideofilterProfile) pulumi.StringOutput { return v.Log }).(pulumi.StringOutput)
}

func (o VideofilterProfileOutput) Name() pulumi.StringOutput {
	return o.ApplyT(func(v *VideofilterProfile) pulumi.StringOutput { return v.Name }).(pulumi.StringOutput)
}

func (o VideofilterProfileOutput) ReplacemsgGroup() pulumi.StringOutput {
	return o.ApplyT(func(v *VideofilterProfile) pulumi.StringOutput { return v.ReplacemsgGroup }).(pulumi.StringOutput)
}

func (o VideofilterProfileOutput) Vdomparam() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *VideofilterProfile) pulumi.StringPtrOutput { return v.Vdomparam }).(pulumi.StringPtrOutput)
}

func (o VideofilterProfileOutput) Vimeo() pulumi.StringOutput {
	return o.ApplyT(func(v *VideofilterProfile) pulumi.StringOutput { return v.Vimeo }).(pulumi.StringOutput)
}

func (o VideofilterProfileOutput) Youtube() pulumi.StringOutput {
	return o.ApplyT(func(v *VideofilterProfile) pulumi.StringOutput { return v.Youtube }).(pulumi.StringOutput)
}

func (o VideofilterProfileOutput) YoutubeChannelFilter() pulumi.IntOutput {
	return o.ApplyT(func(v *VideofilterProfile) pulumi.IntOutput { return v.YoutubeChannelFilter }).(pulumi.IntOutput)
}

type VideofilterProfileArrayOutput struct{ *pulumi.OutputState }

func (VideofilterProfileArrayOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*[]*VideofilterProfile)(nil)).Elem()
}

func (o VideofilterProfileArrayOutput) ToVideofilterProfileArrayOutput() VideofilterProfileArrayOutput {
	return o
}

func (o VideofilterProfileArrayOutput) ToVideofilterProfileArrayOutputWithContext(ctx context.Context) VideofilterProfileArrayOutput {
	return o
}

func (o VideofilterProfileArrayOutput) ToOutput(ctx context.Context) pulumix.Output[[]*VideofilterProfile] {
	return pulumix.Output[[]*VideofilterProfile]{
		OutputState: o.OutputState,
	}
}

func (o VideofilterProfileArrayOutput) Index(i pulumi.IntInput) VideofilterProfileOutput {
	return pulumi.All(o, i).ApplyT(func(vs []interface{}) *VideofilterProfile {
		return vs[0].([]*VideofilterProfile)[vs[1].(int)]
	}).(VideofilterProfileOutput)
}

type VideofilterProfileMapOutput struct{ *pulumi.OutputState }

func (VideofilterProfileMapOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*map[string]*VideofilterProfile)(nil)).Elem()
}

func (o VideofilterProfileMapOutput) ToVideofilterProfileMapOutput() VideofilterProfileMapOutput {
	return o
}

func (o VideofilterProfileMapOutput) ToVideofilterProfileMapOutputWithContext(ctx context.Context) VideofilterProfileMapOutput {
	return o
}

func (o VideofilterProfileMapOutput) ToOutput(ctx context.Context) pulumix.Output[map[string]*VideofilterProfile] {
	return pulumix.Output[map[string]*VideofilterProfile]{
		OutputState: o.OutputState,
	}
}

func (o VideofilterProfileMapOutput) MapIndex(k pulumi.StringInput) VideofilterProfileOutput {
	return pulumi.All(o, k).ApplyT(func(vs []interface{}) *VideofilterProfile {
		return vs[0].(map[string]*VideofilterProfile)[vs[1].(string)]
	}).(VideofilterProfileOutput)
}

func init() {
	pulumi.RegisterInputType(reflect.TypeOf((*VideofilterProfileInput)(nil)).Elem(), &VideofilterProfile{})
	pulumi.RegisterInputType(reflect.TypeOf((*VideofilterProfileArrayInput)(nil)).Elem(), VideofilterProfileArray{})
	pulumi.RegisterInputType(reflect.TypeOf((*VideofilterProfileMapInput)(nil)).Elem(), VideofilterProfileMap{})
	pulumi.RegisterOutputType(VideofilterProfileOutput{})
	pulumi.RegisterOutputType(VideofilterProfileArrayOutput{})
	pulumi.RegisterOutputType(VideofilterProfileMapOutput{})
}
