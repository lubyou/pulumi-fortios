// Code generated by the Pulumi Terraform Bridge (tfgen) Tool DO NOT EDIT.
// *** WARNING: Do not edit by hand unless you're certain you know what you are doing! ***

package fortios

import (
	"context"
	"reflect"

	"github.com/pulumi/pulumi/sdk/v3/go/pulumi"
)

// Configure VideoFilter profile. Applies to FortiOS Version `>= 7.0.1`.
//
// ## Import
//
// Videofilter Profile can be imported using any of these accepted formats
//
// ```sh
//  $ pulumi import fortios:index/videofilterProfile:VideofilterProfile labelname {{name}}
// ```
//
//  If you do not want to import arguments of block$ export "FORTIOS_IMPORT_TABLE"="false"
//
// ```sh
//  $ pulumi import fortios:index/videofilterProfile:VideofilterProfile labelname {{name}}
// ```
//
//  $ unset "FORTIOS_IMPORT_TABLE"
type VideofilterProfile struct {
	pulumi.CustomResourceState

	// Comment.
	Comment pulumi.StringPtrOutput `pulumi:"comment"`
	// Enable/disable Dailymotion video source. Valid values: `enable`, `disable`.
	Dailymotion pulumi.StringOutput `pulumi:"dailymotion"`
	// Configure FortiGuard categories. The structure of `fortiguardCategory` block is documented below.
	FortiguardCategory VideofilterProfileFortiguardCategoryPtrOutput `pulumi:"fortiguardCategory"`
	// Name.
	Name pulumi.StringOutput `pulumi:"name"`
	// Replacement message group.
	ReplacemsgGroup pulumi.StringOutput `pulumi:"replacemsgGroup"`
	// Specifies the vdom to which the resource will be applied when the FortiGate unit is running in VDOM mode. Only one vdom can be specified. If you want to inherit the vdom configuration of the provider, please do not set this parameter.
	Vdomparam pulumi.StringPtrOutput `pulumi:"vdomparam"`
	// Enable/disable Vimeo video source. Valid values: `enable`, `disable`.
	Vimeo pulumi.StringOutput `pulumi:"vimeo"`
	// Enable/disable YouTube video source. Valid values: `enable`, `disable`.
	Youtube pulumi.StringOutput `pulumi:"youtube"`
	// Set YouTube channel filter.
	YoutubeChannelFilter pulumi.IntOutput `pulumi:"youtubeChannelFilter"`
}

// NewVideofilterProfile registers a new resource with the given unique name, arguments, and options.
func NewVideofilterProfile(ctx *pulumi.Context,
	name string, args *VideofilterProfileArgs, opts ...pulumi.ResourceOption) (*VideofilterProfile, error) {
	if args == nil {
		args = &VideofilterProfileArgs{}
	}

	opts = pkgResourceDefaultOpts(opts)
	var resource VideofilterProfile
	err := ctx.RegisterResource("fortios:index/videofilterProfile:VideofilterProfile", name, args, &resource, opts...)
	if err != nil {
		return nil, err
	}
	return &resource, nil
}

// GetVideofilterProfile gets an existing VideofilterProfile resource's state with the given name, ID, and optional
// state properties that are used to uniquely qualify the lookup (nil if not required).
func GetVideofilterProfile(ctx *pulumi.Context,
	name string, id pulumi.IDInput, state *VideofilterProfileState, opts ...pulumi.ResourceOption) (*VideofilterProfile, error) {
	var resource VideofilterProfile
	err := ctx.ReadResource("fortios:index/videofilterProfile:VideofilterProfile", name, id, state, &resource, opts...)
	if err != nil {
		return nil, err
	}
	return &resource, nil
}

// Input properties used for looking up and filtering VideofilterProfile resources.
type videofilterProfileState struct {
	// Comment.
	Comment *string `pulumi:"comment"`
	// Enable/disable Dailymotion video source. Valid values: `enable`, `disable`.
	Dailymotion *string `pulumi:"dailymotion"`
	// Configure FortiGuard categories. The structure of `fortiguardCategory` block is documented below.
	FortiguardCategory *VideofilterProfileFortiguardCategory `pulumi:"fortiguardCategory"`
	// Name.
	Name *string `pulumi:"name"`
	// Replacement message group.
	ReplacemsgGroup *string `pulumi:"replacemsgGroup"`
	// Specifies the vdom to which the resource will be applied when the FortiGate unit is running in VDOM mode. Only one vdom can be specified. If you want to inherit the vdom configuration of the provider, please do not set this parameter.
	Vdomparam *string `pulumi:"vdomparam"`
	// Enable/disable Vimeo video source. Valid values: `enable`, `disable`.
	Vimeo *string `pulumi:"vimeo"`
	// Enable/disable YouTube video source. Valid values: `enable`, `disable`.
	Youtube *string `pulumi:"youtube"`
	// Set YouTube channel filter.
	YoutubeChannelFilter *int `pulumi:"youtubeChannelFilter"`
}

type VideofilterProfileState struct {
	// Comment.
	Comment pulumi.StringPtrInput
	// Enable/disable Dailymotion video source. Valid values: `enable`, `disable`.
	Dailymotion pulumi.StringPtrInput
	// Configure FortiGuard categories. The structure of `fortiguardCategory` block is documented below.
	FortiguardCategory VideofilterProfileFortiguardCategoryPtrInput
	// Name.
	Name pulumi.StringPtrInput
	// Replacement message group.
	ReplacemsgGroup pulumi.StringPtrInput
	// Specifies the vdom to which the resource will be applied when the FortiGate unit is running in VDOM mode. Only one vdom can be specified. If you want to inherit the vdom configuration of the provider, please do not set this parameter.
	Vdomparam pulumi.StringPtrInput
	// Enable/disable Vimeo video source. Valid values: `enable`, `disable`.
	Vimeo pulumi.StringPtrInput
	// Enable/disable YouTube video source. Valid values: `enable`, `disable`.
	Youtube pulumi.StringPtrInput
	// Set YouTube channel filter.
	YoutubeChannelFilter pulumi.IntPtrInput
}

func (VideofilterProfileState) ElementType() reflect.Type {
	return reflect.TypeOf((*videofilterProfileState)(nil)).Elem()
}

type videofilterProfileArgs struct {
	// Comment.
	Comment *string `pulumi:"comment"`
	// Enable/disable Dailymotion video source. Valid values: `enable`, `disable`.
	Dailymotion *string `pulumi:"dailymotion"`
	// Configure FortiGuard categories. The structure of `fortiguardCategory` block is documented below.
	FortiguardCategory *VideofilterProfileFortiguardCategory `pulumi:"fortiguardCategory"`
	// Name.
	Name *string `pulumi:"name"`
	// Replacement message group.
	ReplacemsgGroup *string `pulumi:"replacemsgGroup"`
	// Specifies the vdom to which the resource will be applied when the FortiGate unit is running in VDOM mode. Only one vdom can be specified. If you want to inherit the vdom configuration of the provider, please do not set this parameter.
	Vdomparam *string `pulumi:"vdomparam"`
	// Enable/disable Vimeo video source. Valid values: `enable`, `disable`.
	Vimeo *string `pulumi:"vimeo"`
	// Enable/disable YouTube video source. Valid values: `enable`, `disable`.
	Youtube *string `pulumi:"youtube"`
	// Set YouTube channel filter.
	YoutubeChannelFilter *int `pulumi:"youtubeChannelFilter"`
}

// The set of arguments for constructing a VideofilterProfile resource.
type VideofilterProfileArgs struct {
	// Comment.
	Comment pulumi.StringPtrInput
	// Enable/disable Dailymotion video source. Valid values: `enable`, `disable`.
	Dailymotion pulumi.StringPtrInput
	// Configure FortiGuard categories. The structure of `fortiguardCategory` block is documented below.
	FortiguardCategory VideofilterProfileFortiguardCategoryPtrInput
	// Name.
	Name pulumi.StringPtrInput
	// Replacement message group.
	ReplacemsgGroup pulumi.StringPtrInput
	// Specifies the vdom to which the resource will be applied when the FortiGate unit is running in VDOM mode. Only one vdom can be specified. If you want to inherit the vdom configuration of the provider, please do not set this parameter.
	Vdomparam pulumi.StringPtrInput
	// Enable/disable Vimeo video source. Valid values: `enable`, `disable`.
	Vimeo pulumi.StringPtrInput
	// Enable/disable YouTube video source. Valid values: `enable`, `disable`.
	Youtube pulumi.StringPtrInput
	// Set YouTube channel filter.
	YoutubeChannelFilter pulumi.IntPtrInput
}

func (VideofilterProfileArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*videofilterProfileArgs)(nil)).Elem()
}

type VideofilterProfileInput interface {
	pulumi.Input

	ToVideofilterProfileOutput() VideofilterProfileOutput
	ToVideofilterProfileOutputWithContext(ctx context.Context) VideofilterProfileOutput
}

func (*VideofilterProfile) ElementType() reflect.Type {
	return reflect.TypeOf((**VideofilterProfile)(nil)).Elem()
}

func (i *VideofilterProfile) ToVideofilterProfileOutput() VideofilterProfileOutput {
	return i.ToVideofilterProfileOutputWithContext(context.Background())
}

func (i *VideofilterProfile) ToVideofilterProfileOutputWithContext(ctx context.Context) VideofilterProfileOutput {
	return pulumi.ToOutputWithContext(ctx, i).(VideofilterProfileOutput)
}

// VideofilterProfileArrayInput is an input type that accepts VideofilterProfileArray and VideofilterProfileArrayOutput values.
// You can construct a concrete instance of `VideofilterProfileArrayInput` via:
//
//          VideofilterProfileArray{ VideofilterProfileArgs{...} }
type VideofilterProfileArrayInput interface {
	pulumi.Input

	ToVideofilterProfileArrayOutput() VideofilterProfileArrayOutput
	ToVideofilterProfileArrayOutputWithContext(context.Context) VideofilterProfileArrayOutput
}

type VideofilterProfileArray []VideofilterProfileInput

func (VideofilterProfileArray) ElementType() reflect.Type {
	return reflect.TypeOf((*[]*VideofilterProfile)(nil)).Elem()
}

func (i VideofilterProfileArray) ToVideofilterProfileArrayOutput() VideofilterProfileArrayOutput {
	return i.ToVideofilterProfileArrayOutputWithContext(context.Background())
}

func (i VideofilterProfileArray) ToVideofilterProfileArrayOutputWithContext(ctx context.Context) VideofilterProfileArrayOutput {
	return pulumi.ToOutputWithContext(ctx, i).(VideofilterProfileArrayOutput)
}

// VideofilterProfileMapInput is an input type that accepts VideofilterProfileMap and VideofilterProfileMapOutput values.
// You can construct a concrete instance of `VideofilterProfileMapInput` via:
//
//          VideofilterProfileMap{ "key": VideofilterProfileArgs{...} }
type VideofilterProfileMapInput interface {
	pulumi.Input

	ToVideofilterProfileMapOutput() VideofilterProfileMapOutput
	ToVideofilterProfileMapOutputWithContext(context.Context) VideofilterProfileMapOutput
}

type VideofilterProfileMap map[string]VideofilterProfileInput

func (VideofilterProfileMap) ElementType() reflect.Type {
	return reflect.TypeOf((*map[string]*VideofilterProfile)(nil)).Elem()
}

func (i VideofilterProfileMap) ToVideofilterProfileMapOutput() VideofilterProfileMapOutput {
	return i.ToVideofilterProfileMapOutputWithContext(context.Background())
}

func (i VideofilterProfileMap) ToVideofilterProfileMapOutputWithContext(ctx context.Context) VideofilterProfileMapOutput {
	return pulumi.ToOutputWithContext(ctx, i).(VideofilterProfileMapOutput)
}

type VideofilterProfileOutput struct{ *pulumi.OutputState }

func (VideofilterProfileOutput) ElementType() reflect.Type {
	return reflect.TypeOf((**VideofilterProfile)(nil)).Elem()
}

func (o VideofilterProfileOutput) ToVideofilterProfileOutput() VideofilterProfileOutput {
	return o
}

func (o VideofilterProfileOutput) ToVideofilterProfileOutputWithContext(ctx context.Context) VideofilterProfileOutput {
	return o
}

type VideofilterProfileArrayOutput struct{ *pulumi.OutputState }

func (VideofilterProfileArrayOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*[]*VideofilterProfile)(nil)).Elem()
}

func (o VideofilterProfileArrayOutput) ToVideofilterProfileArrayOutput() VideofilterProfileArrayOutput {
	return o
}

func (o VideofilterProfileArrayOutput) ToVideofilterProfileArrayOutputWithContext(ctx context.Context) VideofilterProfileArrayOutput {
	return o
}

func (o VideofilterProfileArrayOutput) Index(i pulumi.IntInput) VideofilterProfileOutput {
	return pulumi.All(o, i).ApplyT(func(vs []interface{}) *VideofilterProfile {
		return vs[0].([]*VideofilterProfile)[vs[1].(int)]
	}).(VideofilterProfileOutput)
}

type VideofilterProfileMapOutput struct{ *pulumi.OutputState }

func (VideofilterProfileMapOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*map[string]*VideofilterProfile)(nil)).Elem()
}

func (o VideofilterProfileMapOutput) ToVideofilterProfileMapOutput() VideofilterProfileMapOutput {
	return o
}

func (o VideofilterProfileMapOutput) ToVideofilterProfileMapOutputWithContext(ctx context.Context) VideofilterProfileMapOutput {
	return o
}

func (o VideofilterProfileMapOutput) MapIndex(k pulumi.StringInput) VideofilterProfileOutput {
	return pulumi.All(o, k).ApplyT(func(vs []interface{}) *VideofilterProfile {
		return vs[0].(map[string]*VideofilterProfile)[vs[1].(string)]
	}).(VideofilterProfileOutput)
}

func init() {
	pulumi.RegisterInputType(reflect.TypeOf((*VideofilterProfileInput)(nil)).Elem(), &VideofilterProfile{})
	pulumi.RegisterInputType(reflect.TypeOf((*VideofilterProfileArrayInput)(nil)).Elem(), VideofilterProfileArray{})
	pulumi.RegisterInputType(reflect.TypeOf((*VideofilterProfileMapInput)(nil)).Elem(), VideofilterProfileMap{})
	pulumi.RegisterOutputType(VideofilterProfileOutput{})
	pulumi.RegisterOutputType(VideofilterProfileArrayOutput{})
	pulumi.RegisterOutputType(VideofilterProfileMapOutput{})
}
