// Code generated by the Pulumi Terraform Bridge (tfgen) Tool DO NOT EDIT.
// *** WARNING: Do not edit by hand unless you're certain you know what you are doing! ***

package fortios

import (
	"context"
	"reflect"

	"github.com/lubyou/pulumi-fortios/sdk/go/fortios/internal"
	"github.com/pulumi/pulumi/sdk/v3/go/pulumi"
	"github.com/pulumi/pulumi/sdk/v3/go/pulumix"
)

type SystemIke struct {
	pulumi.CustomResourceState

	DhGroup1          SystemIkeDhGroup1Output  `pulumi:"dhGroup1"`
	DhGroup14         SystemIkeDhGroup14Output `pulumi:"dhGroup14"`
	DhGroup15         SystemIkeDhGroup15Output `pulumi:"dhGroup15"`
	DhGroup16         SystemIkeDhGroup16Output `pulumi:"dhGroup16"`
	DhGroup17         SystemIkeDhGroup17Output `pulumi:"dhGroup17"`
	DhGroup18         SystemIkeDhGroup18Output `pulumi:"dhGroup18"`
	DhGroup19         SystemIkeDhGroup19Output `pulumi:"dhGroup19"`
	DhGroup2          SystemIkeDhGroup2Output  `pulumi:"dhGroup2"`
	DhGroup20         SystemIkeDhGroup20Output `pulumi:"dhGroup20"`
	DhGroup21         SystemIkeDhGroup21Output `pulumi:"dhGroup21"`
	DhGroup27         SystemIkeDhGroup27Output `pulumi:"dhGroup27"`
	DhGroup28         SystemIkeDhGroup28Output `pulumi:"dhGroup28"`
	DhGroup29         SystemIkeDhGroup29Output `pulumi:"dhGroup29"`
	DhGroup30         SystemIkeDhGroup30Output `pulumi:"dhGroup30"`
	DhGroup31         SystemIkeDhGroup31Output `pulumi:"dhGroup31"`
	DhGroup32         SystemIkeDhGroup32Output `pulumi:"dhGroup32"`
	DhGroup5          SystemIkeDhGroup5Output  `pulumi:"dhGroup5"`
	DhKeypairCache    pulumi.StringOutput      `pulumi:"dhKeypairCache"`
	DhKeypairCount    pulumi.IntOutput         `pulumi:"dhKeypairCount"`
	DhKeypairThrottle pulumi.StringOutput      `pulumi:"dhKeypairThrottle"`
	DhMode            pulumi.StringOutput      `pulumi:"dhMode"`
	DhMultiprocess    pulumi.StringOutput      `pulumi:"dhMultiprocess"`
	DhWorkerCount     pulumi.IntOutput         `pulumi:"dhWorkerCount"`
	EmbryonicLimit    pulumi.IntOutput         `pulumi:"embryonicLimit"`
	GetAllTables      pulumi.StringPtrOutput   `pulumi:"getAllTables"`
	Vdomparam         pulumi.StringPtrOutput   `pulumi:"vdomparam"`
}

// NewSystemIke registers a new resource with the given unique name, arguments, and options.
func NewSystemIke(ctx *pulumi.Context,
	name string, args *SystemIkeArgs, opts ...pulumi.ResourceOption) (*SystemIke, error) {
	if args == nil {
		args = &SystemIkeArgs{}
	}

	opts = internal.PkgResourceDefaultOpts(opts)
	var resource SystemIke
	err := ctx.RegisterResource("fortios:index/systemIke:SystemIke", name, args, &resource, opts...)
	if err != nil {
		return nil, err
	}
	return &resource, nil
}

// GetSystemIke gets an existing SystemIke resource's state with the given name, ID, and optional
// state properties that are used to uniquely qualify the lookup (nil if not required).
func GetSystemIke(ctx *pulumi.Context,
	name string, id pulumi.IDInput, state *SystemIkeState, opts ...pulumi.ResourceOption) (*SystemIke, error) {
	var resource SystemIke
	err := ctx.ReadResource("fortios:index/systemIke:SystemIke", name, id, state, &resource, opts...)
	if err != nil {
		return nil, err
	}
	return &resource, nil
}

// Input properties used for looking up and filtering SystemIke resources.
type systemIkeState struct {
	DhGroup1          *SystemIkeDhGroup1  `pulumi:"dhGroup1"`
	DhGroup14         *SystemIkeDhGroup14 `pulumi:"dhGroup14"`
	DhGroup15         *SystemIkeDhGroup15 `pulumi:"dhGroup15"`
	DhGroup16         *SystemIkeDhGroup16 `pulumi:"dhGroup16"`
	DhGroup17         *SystemIkeDhGroup17 `pulumi:"dhGroup17"`
	DhGroup18         *SystemIkeDhGroup18 `pulumi:"dhGroup18"`
	DhGroup19         *SystemIkeDhGroup19 `pulumi:"dhGroup19"`
	DhGroup2          *SystemIkeDhGroup2  `pulumi:"dhGroup2"`
	DhGroup20         *SystemIkeDhGroup20 `pulumi:"dhGroup20"`
	DhGroup21         *SystemIkeDhGroup21 `pulumi:"dhGroup21"`
	DhGroup27         *SystemIkeDhGroup27 `pulumi:"dhGroup27"`
	DhGroup28         *SystemIkeDhGroup28 `pulumi:"dhGroup28"`
	DhGroup29         *SystemIkeDhGroup29 `pulumi:"dhGroup29"`
	DhGroup30         *SystemIkeDhGroup30 `pulumi:"dhGroup30"`
	DhGroup31         *SystemIkeDhGroup31 `pulumi:"dhGroup31"`
	DhGroup32         *SystemIkeDhGroup32 `pulumi:"dhGroup32"`
	DhGroup5          *SystemIkeDhGroup5  `pulumi:"dhGroup5"`
	DhKeypairCache    *string             `pulumi:"dhKeypairCache"`
	DhKeypairCount    *int                `pulumi:"dhKeypairCount"`
	DhKeypairThrottle *string             `pulumi:"dhKeypairThrottle"`
	DhMode            *string             `pulumi:"dhMode"`
	DhMultiprocess    *string             `pulumi:"dhMultiprocess"`
	DhWorkerCount     *int                `pulumi:"dhWorkerCount"`
	EmbryonicLimit    *int                `pulumi:"embryonicLimit"`
	GetAllTables      *string             `pulumi:"getAllTables"`
	Vdomparam         *string             `pulumi:"vdomparam"`
}

type SystemIkeState struct {
	DhGroup1          SystemIkeDhGroup1PtrInput
	DhGroup14         SystemIkeDhGroup14PtrInput
	DhGroup15         SystemIkeDhGroup15PtrInput
	DhGroup16         SystemIkeDhGroup16PtrInput
	DhGroup17         SystemIkeDhGroup17PtrInput
	DhGroup18         SystemIkeDhGroup18PtrInput
	DhGroup19         SystemIkeDhGroup19PtrInput
	DhGroup2          SystemIkeDhGroup2PtrInput
	DhGroup20         SystemIkeDhGroup20PtrInput
	DhGroup21         SystemIkeDhGroup21PtrInput
	DhGroup27         SystemIkeDhGroup27PtrInput
	DhGroup28         SystemIkeDhGroup28PtrInput
	DhGroup29         SystemIkeDhGroup29PtrInput
	DhGroup30         SystemIkeDhGroup30PtrInput
	DhGroup31         SystemIkeDhGroup31PtrInput
	DhGroup32         SystemIkeDhGroup32PtrInput
	DhGroup5          SystemIkeDhGroup5PtrInput
	DhKeypairCache    pulumi.StringPtrInput
	DhKeypairCount    pulumi.IntPtrInput
	DhKeypairThrottle pulumi.StringPtrInput
	DhMode            pulumi.StringPtrInput
	DhMultiprocess    pulumi.StringPtrInput
	DhWorkerCount     pulumi.IntPtrInput
	EmbryonicLimit    pulumi.IntPtrInput
	GetAllTables      pulumi.StringPtrInput
	Vdomparam         pulumi.StringPtrInput
}

func (SystemIkeState) ElementType() reflect.Type {
	return reflect.TypeOf((*systemIkeState)(nil)).Elem()
}

type systemIkeArgs struct {
	DhGroup1          *SystemIkeDhGroup1  `pulumi:"dhGroup1"`
	DhGroup14         *SystemIkeDhGroup14 `pulumi:"dhGroup14"`
	DhGroup15         *SystemIkeDhGroup15 `pulumi:"dhGroup15"`
	DhGroup16         *SystemIkeDhGroup16 `pulumi:"dhGroup16"`
	DhGroup17         *SystemIkeDhGroup17 `pulumi:"dhGroup17"`
	DhGroup18         *SystemIkeDhGroup18 `pulumi:"dhGroup18"`
	DhGroup19         *SystemIkeDhGroup19 `pulumi:"dhGroup19"`
	DhGroup2          *SystemIkeDhGroup2  `pulumi:"dhGroup2"`
	DhGroup20         *SystemIkeDhGroup20 `pulumi:"dhGroup20"`
	DhGroup21         *SystemIkeDhGroup21 `pulumi:"dhGroup21"`
	DhGroup27         *SystemIkeDhGroup27 `pulumi:"dhGroup27"`
	DhGroup28         *SystemIkeDhGroup28 `pulumi:"dhGroup28"`
	DhGroup29         *SystemIkeDhGroup29 `pulumi:"dhGroup29"`
	DhGroup30         *SystemIkeDhGroup30 `pulumi:"dhGroup30"`
	DhGroup31         *SystemIkeDhGroup31 `pulumi:"dhGroup31"`
	DhGroup32         *SystemIkeDhGroup32 `pulumi:"dhGroup32"`
	DhGroup5          *SystemIkeDhGroup5  `pulumi:"dhGroup5"`
	DhKeypairCache    *string             `pulumi:"dhKeypairCache"`
	DhKeypairCount    *int                `pulumi:"dhKeypairCount"`
	DhKeypairThrottle *string             `pulumi:"dhKeypairThrottle"`
	DhMode            *string             `pulumi:"dhMode"`
	DhMultiprocess    *string             `pulumi:"dhMultiprocess"`
	DhWorkerCount     *int                `pulumi:"dhWorkerCount"`
	EmbryonicLimit    *int                `pulumi:"embryonicLimit"`
	GetAllTables      *string             `pulumi:"getAllTables"`
	Vdomparam         *string             `pulumi:"vdomparam"`
}

// The set of arguments for constructing a SystemIke resource.
type SystemIkeArgs struct {
	DhGroup1          SystemIkeDhGroup1PtrInput
	DhGroup14         SystemIkeDhGroup14PtrInput
	DhGroup15         SystemIkeDhGroup15PtrInput
	DhGroup16         SystemIkeDhGroup16PtrInput
	DhGroup17         SystemIkeDhGroup17PtrInput
	DhGroup18         SystemIkeDhGroup18PtrInput
	DhGroup19         SystemIkeDhGroup19PtrInput
	DhGroup2          SystemIkeDhGroup2PtrInput
	DhGroup20         SystemIkeDhGroup20PtrInput
	DhGroup21         SystemIkeDhGroup21PtrInput
	DhGroup27         SystemIkeDhGroup27PtrInput
	DhGroup28         SystemIkeDhGroup28PtrInput
	DhGroup29         SystemIkeDhGroup29PtrInput
	DhGroup30         SystemIkeDhGroup30PtrInput
	DhGroup31         SystemIkeDhGroup31PtrInput
	DhGroup32         SystemIkeDhGroup32PtrInput
	DhGroup5          SystemIkeDhGroup5PtrInput
	DhKeypairCache    pulumi.StringPtrInput
	DhKeypairCount    pulumi.IntPtrInput
	DhKeypairThrottle pulumi.StringPtrInput
	DhMode            pulumi.StringPtrInput
	DhMultiprocess    pulumi.StringPtrInput
	DhWorkerCount     pulumi.IntPtrInput
	EmbryonicLimit    pulumi.IntPtrInput
	GetAllTables      pulumi.StringPtrInput
	Vdomparam         pulumi.StringPtrInput
}

func (SystemIkeArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*systemIkeArgs)(nil)).Elem()
}

type SystemIkeInput interface {
	pulumi.Input

	ToSystemIkeOutput() SystemIkeOutput
	ToSystemIkeOutputWithContext(ctx context.Context) SystemIkeOutput
}

func (*SystemIke) ElementType() reflect.Type {
	return reflect.TypeOf((**SystemIke)(nil)).Elem()
}

func (i *SystemIke) ToSystemIkeOutput() SystemIkeOutput {
	return i.ToSystemIkeOutputWithContext(context.Background())
}

func (i *SystemIke) ToSystemIkeOutputWithContext(ctx context.Context) SystemIkeOutput {
	return pulumi.ToOutputWithContext(ctx, i).(SystemIkeOutput)
}

func (i *SystemIke) ToOutput(ctx context.Context) pulumix.Output[*SystemIke] {
	return pulumix.Output[*SystemIke]{
		OutputState: i.ToSystemIkeOutputWithContext(ctx).OutputState,
	}
}

// SystemIkeArrayInput is an input type that accepts SystemIkeArray and SystemIkeArrayOutput values.
// You can construct a concrete instance of `SystemIkeArrayInput` via:
//
//	SystemIkeArray{ SystemIkeArgs{...} }
type SystemIkeArrayInput interface {
	pulumi.Input

	ToSystemIkeArrayOutput() SystemIkeArrayOutput
	ToSystemIkeArrayOutputWithContext(context.Context) SystemIkeArrayOutput
}

type SystemIkeArray []SystemIkeInput

func (SystemIkeArray) ElementType() reflect.Type {
	return reflect.TypeOf((*[]*SystemIke)(nil)).Elem()
}

func (i SystemIkeArray) ToSystemIkeArrayOutput() SystemIkeArrayOutput {
	return i.ToSystemIkeArrayOutputWithContext(context.Background())
}

func (i SystemIkeArray) ToSystemIkeArrayOutputWithContext(ctx context.Context) SystemIkeArrayOutput {
	return pulumi.ToOutputWithContext(ctx, i).(SystemIkeArrayOutput)
}

func (i SystemIkeArray) ToOutput(ctx context.Context) pulumix.Output[[]*SystemIke] {
	return pulumix.Output[[]*SystemIke]{
		OutputState: i.ToSystemIkeArrayOutputWithContext(ctx).OutputState,
	}
}

// SystemIkeMapInput is an input type that accepts SystemIkeMap and SystemIkeMapOutput values.
// You can construct a concrete instance of `SystemIkeMapInput` via:
//
//	SystemIkeMap{ "key": SystemIkeArgs{...} }
type SystemIkeMapInput interface {
	pulumi.Input

	ToSystemIkeMapOutput() SystemIkeMapOutput
	ToSystemIkeMapOutputWithContext(context.Context) SystemIkeMapOutput
}

type SystemIkeMap map[string]SystemIkeInput

func (SystemIkeMap) ElementType() reflect.Type {
	return reflect.TypeOf((*map[string]*SystemIke)(nil)).Elem()
}

func (i SystemIkeMap) ToSystemIkeMapOutput() SystemIkeMapOutput {
	return i.ToSystemIkeMapOutputWithContext(context.Background())
}

func (i SystemIkeMap) ToSystemIkeMapOutputWithContext(ctx context.Context) SystemIkeMapOutput {
	return pulumi.ToOutputWithContext(ctx, i).(SystemIkeMapOutput)
}

func (i SystemIkeMap) ToOutput(ctx context.Context) pulumix.Output[map[string]*SystemIke] {
	return pulumix.Output[map[string]*SystemIke]{
		OutputState: i.ToSystemIkeMapOutputWithContext(ctx).OutputState,
	}
}

type SystemIkeOutput struct{ *pulumi.OutputState }

func (SystemIkeOutput) ElementType() reflect.Type {
	return reflect.TypeOf((**SystemIke)(nil)).Elem()
}

func (o SystemIkeOutput) ToSystemIkeOutput() SystemIkeOutput {
	return o
}

func (o SystemIkeOutput) ToSystemIkeOutputWithContext(ctx context.Context) SystemIkeOutput {
	return o
}

func (o SystemIkeOutput) ToOutput(ctx context.Context) pulumix.Output[*SystemIke] {
	return pulumix.Output[*SystemIke]{
		OutputState: o.OutputState,
	}
}

func (o SystemIkeOutput) DhGroup1() SystemIkeDhGroup1Output {
	return o.ApplyT(func(v *SystemIke) SystemIkeDhGroup1Output { return v.DhGroup1 }).(SystemIkeDhGroup1Output)
}

func (o SystemIkeOutput) DhGroup14() SystemIkeDhGroup14Output {
	return o.ApplyT(func(v *SystemIke) SystemIkeDhGroup14Output { return v.DhGroup14 }).(SystemIkeDhGroup14Output)
}

func (o SystemIkeOutput) DhGroup15() SystemIkeDhGroup15Output {
	return o.ApplyT(func(v *SystemIke) SystemIkeDhGroup15Output { return v.DhGroup15 }).(SystemIkeDhGroup15Output)
}

func (o SystemIkeOutput) DhGroup16() SystemIkeDhGroup16Output {
	return o.ApplyT(func(v *SystemIke) SystemIkeDhGroup16Output { return v.DhGroup16 }).(SystemIkeDhGroup16Output)
}

func (o SystemIkeOutput) DhGroup17() SystemIkeDhGroup17Output {
	return o.ApplyT(func(v *SystemIke) SystemIkeDhGroup17Output { return v.DhGroup17 }).(SystemIkeDhGroup17Output)
}

func (o SystemIkeOutput) DhGroup18() SystemIkeDhGroup18Output {
	return o.ApplyT(func(v *SystemIke) SystemIkeDhGroup18Output { return v.DhGroup18 }).(SystemIkeDhGroup18Output)
}

func (o SystemIkeOutput) DhGroup19() SystemIkeDhGroup19Output {
	return o.ApplyT(func(v *SystemIke) SystemIkeDhGroup19Output { return v.DhGroup19 }).(SystemIkeDhGroup19Output)
}

func (o SystemIkeOutput) DhGroup2() SystemIkeDhGroup2Output {
	return o.ApplyT(func(v *SystemIke) SystemIkeDhGroup2Output { return v.DhGroup2 }).(SystemIkeDhGroup2Output)
}

func (o SystemIkeOutput) DhGroup20() SystemIkeDhGroup20Output {
	return o.ApplyT(func(v *SystemIke) SystemIkeDhGroup20Output { return v.DhGroup20 }).(SystemIkeDhGroup20Output)
}

func (o SystemIkeOutput) DhGroup21() SystemIkeDhGroup21Output {
	return o.ApplyT(func(v *SystemIke) SystemIkeDhGroup21Output { return v.DhGroup21 }).(SystemIkeDhGroup21Output)
}

func (o SystemIkeOutput) DhGroup27() SystemIkeDhGroup27Output {
	return o.ApplyT(func(v *SystemIke) SystemIkeDhGroup27Output { return v.DhGroup27 }).(SystemIkeDhGroup27Output)
}

func (o SystemIkeOutput) DhGroup28() SystemIkeDhGroup28Output {
	return o.ApplyT(func(v *SystemIke) SystemIkeDhGroup28Output { return v.DhGroup28 }).(SystemIkeDhGroup28Output)
}

func (o SystemIkeOutput) DhGroup29() SystemIkeDhGroup29Output {
	return o.ApplyT(func(v *SystemIke) SystemIkeDhGroup29Output { return v.DhGroup29 }).(SystemIkeDhGroup29Output)
}

func (o SystemIkeOutput) DhGroup30() SystemIkeDhGroup30Output {
	return o.ApplyT(func(v *SystemIke) SystemIkeDhGroup30Output { return v.DhGroup30 }).(SystemIkeDhGroup30Output)
}

func (o SystemIkeOutput) DhGroup31() SystemIkeDhGroup31Output {
	return o.ApplyT(func(v *SystemIke) SystemIkeDhGroup31Output { return v.DhGroup31 }).(SystemIkeDhGroup31Output)
}

func (o SystemIkeOutput) DhGroup32() SystemIkeDhGroup32Output {
	return o.ApplyT(func(v *SystemIke) SystemIkeDhGroup32Output { return v.DhGroup32 }).(SystemIkeDhGroup32Output)
}

func (o SystemIkeOutput) DhGroup5() SystemIkeDhGroup5Output {
	return o.ApplyT(func(v *SystemIke) SystemIkeDhGroup5Output { return v.DhGroup5 }).(SystemIkeDhGroup5Output)
}

func (o SystemIkeOutput) DhKeypairCache() pulumi.StringOutput {
	return o.ApplyT(func(v *SystemIke) pulumi.StringOutput { return v.DhKeypairCache }).(pulumi.StringOutput)
}

func (o SystemIkeOutput) DhKeypairCount() pulumi.IntOutput {
	return o.ApplyT(func(v *SystemIke) pulumi.IntOutput { return v.DhKeypairCount }).(pulumi.IntOutput)
}

func (o SystemIkeOutput) DhKeypairThrottle() pulumi.StringOutput {
	return o.ApplyT(func(v *SystemIke) pulumi.StringOutput { return v.DhKeypairThrottle }).(pulumi.StringOutput)
}

func (o SystemIkeOutput) DhMode() pulumi.StringOutput {
	return o.ApplyT(func(v *SystemIke) pulumi.StringOutput { return v.DhMode }).(pulumi.StringOutput)
}

func (o SystemIkeOutput) DhMultiprocess() pulumi.StringOutput {
	return o.ApplyT(func(v *SystemIke) pulumi.StringOutput { return v.DhMultiprocess }).(pulumi.StringOutput)
}

func (o SystemIkeOutput) DhWorkerCount() pulumi.IntOutput {
	return o.ApplyT(func(v *SystemIke) pulumi.IntOutput { return v.DhWorkerCount }).(pulumi.IntOutput)
}

func (o SystemIkeOutput) EmbryonicLimit() pulumi.IntOutput {
	return o.ApplyT(func(v *SystemIke) pulumi.IntOutput { return v.EmbryonicLimit }).(pulumi.IntOutput)
}

func (o SystemIkeOutput) GetAllTables() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *SystemIke) pulumi.StringPtrOutput { return v.GetAllTables }).(pulumi.StringPtrOutput)
}

func (o SystemIkeOutput) Vdomparam() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *SystemIke) pulumi.StringPtrOutput { return v.Vdomparam }).(pulumi.StringPtrOutput)
}

type SystemIkeArrayOutput struct{ *pulumi.OutputState }

func (SystemIkeArrayOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*[]*SystemIke)(nil)).Elem()
}

func (o SystemIkeArrayOutput) ToSystemIkeArrayOutput() SystemIkeArrayOutput {
	return o
}

func (o SystemIkeArrayOutput) ToSystemIkeArrayOutputWithContext(ctx context.Context) SystemIkeArrayOutput {
	return o
}

func (o SystemIkeArrayOutput) ToOutput(ctx context.Context) pulumix.Output[[]*SystemIke] {
	return pulumix.Output[[]*SystemIke]{
		OutputState: o.OutputState,
	}
}

func (o SystemIkeArrayOutput) Index(i pulumi.IntInput) SystemIkeOutput {
	return pulumi.All(o, i).ApplyT(func(vs []interface{}) *SystemIke {
		return vs[0].([]*SystemIke)[vs[1].(int)]
	}).(SystemIkeOutput)
}

type SystemIkeMapOutput struct{ *pulumi.OutputState }

func (SystemIkeMapOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*map[string]*SystemIke)(nil)).Elem()
}

func (o SystemIkeMapOutput) ToSystemIkeMapOutput() SystemIkeMapOutput {
	return o
}

func (o SystemIkeMapOutput) ToSystemIkeMapOutputWithContext(ctx context.Context) SystemIkeMapOutput {
	return o
}

func (o SystemIkeMapOutput) ToOutput(ctx context.Context) pulumix.Output[map[string]*SystemIke] {
	return pulumix.Output[map[string]*SystemIke]{
		OutputState: o.OutputState,
	}
}

func (o SystemIkeMapOutput) MapIndex(k pulumi.StringInput) SystemIkeOutput {
	return pulumi.All(o, k).ApplyT(func(vs []interface{}) *SystemIke {
		return vs[0].(map[string]*SystemIke)[vs[1].(string)]
	}).(SystemIkeOutput)
}

func init() {
	pulumi.RegisterInputType(reflect.TypeOf((*SystemIkeInput)(nil)).Elem(), &SystemIke{})
	pulumi.RegisterInputType(reflect.TypeOf((*SystemIkeArrayInput)(nil)).Elem(), SystemIkeArray{})
	pulumi.RegisterInputType(reflect.TypeOf((*SystemIkeMapInput)(nil)).Elem(), SystemIkeMap{})
	pulumi.RegisterOutputType(SystemIkeOutput{})
	pulumi.RegisterOutputType(SystemIkeArrayOutput{})
	pulumi.RegisterOutputType(SystemIkeMapOutput{})
}
