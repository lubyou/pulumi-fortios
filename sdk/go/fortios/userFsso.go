// Code generated by the Pulumi Terraform Bridge (tfgen) Tool DO NOT EDIT.
// *** WARNING: Do not edit by hand unless you're certain you know what you are doing! ***

package fortios

import (
	"context"
	"reflect"

	"errors"
	"github.com/lubyou/pulumi-fortios/sdk/go/fortios/internal"
	"github.com/pulumi/pulumi/sdk/v3/go/pulumi"
)

type UserFsso struct {
	pulumi.CustomResourceState

	GroupPollInterval     pulumi.IntOutput       `pulumi:"groupPollInterval"`
	Interface             pulumi.StringOutput    `pulumi:"interface"`
	InterfaceSelectMethod pulumi.StringOutput    `pulumi:"interfaceSelectMethod"`
	LdapPoll              pulumi.StringOutput    `pulumi:"ldapPoll"`
	LdapPollFilter        pulumi.StringOutput    `pulumi:"ldapPollFilter"`
	LdapPollInterval      pulumi.IntOutput       `pulumi:"ldapPollInterval"`
	LdapServer            pulumi.StringOutput    `pulumi:"ldapServer"`
	LogonTimeout          pulumi.IntOutput       `pulumi:"logonTimeout"`
	Name                  pulumi.StringOutput    `pulumi:"name"`
	Password              pulumi.StringPtrOutput `pulumi:"password"`
	Password2             pulumi.StringPtrOutput `pulumi:"password2"`
	Password3             pulumi.StringPtrOutput `pulumi:"password3"`
	Password4             pulumi.StringPtrOutput `pulumi:"password4"`
	Password5             pulumi.StringPtrOutput `pulumi:"password5"`
	Port                  pulumi.IntOutput       `pulumi:"port"`
	Port2                 pulumi.IntOutput       `pulumi:"port2"`
	Port3                 pulumi.IntOutput       `pulumi:"port3"`
	Port4                 pulumi.IntOutput       `pulumi:"port4"`
	Port5                 pulumi.IntOutput       `pulumi:"port5"`
	Server                pulumi.StringOutput    `pulumi:"server"`
	Server2               pulumi.StringOutput    `pulumi:"server2"`
	Server3               pulumi.StringOutput    `pulumi:"server3"`
	Server4               pulumi.StringOutput    `pulumi:"server4"`
	Server5               pulumi.StringOutput    `pulumi:"server5"`
	Sni                   pulumi.StringOutput    `pulumi:"sni"`
	SourceIp              pulumi.StringOutput    `pulumi:"sourceIp"`
	SourceIp6             pulumi.StringOutput    `pulumi:"sourceIp6"`
	Ssl                   pulumi.StringOutput    `pulumi:"ssl"`
	SslServerHostIpCheck  pulumi.StringOutput    `pulumi:"sslServerHostIpCheck"`
	SslTrustedCert        pulumi.StringOutput    `pulumi:"sslTrustedCert"`
	Type                  pulumi.StringOutput    `pulumi:"type"`
	UserInfoServer        pulumi.StringOutput    `pulumi:"userInfoServer"`
	Vdomparam             pulumi.StringPtrOutput `pulumi:"vdomparam"`
}

// NewUserFsso registers a new resource with the given unique name, arguments, and options.
func NewUserFsso(ctx *pulumi.Context,
	name string, args *UserFssoArgs, opts ...pulumi.ResourceOption) (*UserFsso, error) {
	if args == nil {
		return nil, errors.New("missing one or more required arguments")
	}

	if args.Server == nil {
		return nil, errors.New("invalid value for required argument 'Server'")
	}
	if args.Password != nil {
		args.Password = pulumi.ToSecret(args.Password).(pulumi.StringPtrInput)
	}
	if args.Password2 != nil {
		args.Password2 = pulumi.ToSecret(args.Password2).(pulumi.StringPtrInput)
	}
	if args.Password3 != nil {
		args.Password3 = pulumi.ToSecret(args.Password3).(pulumi.StringPtrInput)
	}
	if args.Password4 != nil {
		args.Password4 = pulumi.ToSecret(args.Password4).(pulumi.StringPtrInput)
	}
	if args.Password5 != nil {
		args.Password5 = pulumi.ToSecret(args.Password5).(pulumi.StringPtrInput)
	}
	secrets := pulumi.AdditionalSecretOutputs([]string{
		"password",
		"password2",
		"password3",
		"password4",
		"password5",
	})
	opts = append(opts, secrets)
	opts = internal.PkgResourceDefaultOpts(opts)
	var resource UserFsso
	err := ctx.RegisterResource("fortios:index/userFsso:UserFsso", name, args, &resource, opts...)
	if err != nil {
		return nil, err
	}
	return &resource, nil
}

// GetUserFsso gets an existing UserFsso resource's state with the given name, ID, and optional
// state properties that are used to uniquely qualify the lookup (nil if not required).
func GetUserFsso(ctx *pulumi.Context,
	name string, id pulumi.IDInput, state *UserFssoState, opts ...pulumi.ResourceOption) (*UserFsso, error) {
	var resource UserFsso
	err := ctx.ReadResource("fortios:index/userFsso:UserFsso", name, id, state, &resource, opts...)
	if err != nil {
		return nil, err
	}
	return &resource, nil
}

// Input properties used for looking up and filtering UserFsso resources.
type userFssoState struct {
	GroupPollInterval     *int    `pulumi:"groupPollInterval"`
	Interface             *string `pulumi:"interface"`
	InterfaceSelectMethod *string `pulumi:"interfaceSelectMethod"`
	LdapPoll              *string `pulumi:"ldapPoll"`
	LdapPollFilter        *string `pulumi:"ldapPollFilter"`
	LdapPollInterval      *int    `pulumi:"ldapPollInterval"`
	LdapServer            *string `pulumi:"ldapServer"`
	LogonTimeout          *int    `pulumi:"logonTimeout"`
	Name                  *string `pulumi:"name"`
	Password              *string `pulumi:"password"`
	Password2             *string `pulumi:"password2"`
	Password3             *string `pulumi:"password3"`
	Password4             *string `pulumi:"password4"`
	Password5             *string `pulumi:"password5"`
	Port                  *int    `pulumi:"port"`
	Port2                 *int    `pulumi:"port2"`
	Port3                 *int    `pulumi:"port3"`
	Port4                 *int    `pulumi:"port4"`
	Port5                 *int    `pulumi:"port5"`
	Server                *string `pulumi:"server"`
	Server2               *string `pulumi:"server2"`
	Server3               *string `pulumi:"server3"`
	Server4               *string `pulumi:"server4"`
	Server5               *string `pulumi:"server5"`
	Sni                   *string `pulumi:"sni"`
	SourceIp              *string `pulumi:"sourceIp"`
	SourceIp6             *string `pulumi:"sourceIp6"`
	Ssl                   *string `pulumi:"ssl"`
	SslServerHostIpCheck  *string `pulumi:"sslServerHostIpCheck"`
	SslTrustedCert        *string `pulumi:"sslTrustedCert"`
	Type                  *string `pulumi:"type"`
	UserInfoServer        *string `pulumi:"userInfoServer"`
	Vdomparam             *string `pulumi:"vdomparam"`
}

type UserFssoState struct {
	GroupPollInterval     pulumi.IntPtrInput
	Interface             pulumi.StringPtrInput
	InterfaceSelectMethod pulumi.StringPtrInput
	LdapPoll              pulumi.StringPtrInput
	LdapPollFilter        pulumi.StringPtrInput
	LdapPollInterval      pulumi.IntPtrInput
	LdapServer            pulumi.StringPtrInput
	LogonTimeout          pulumi.IntPtrInput
	Name                  pulumi.StringPtrInput
	Password              pulumi.StringPtrInput
	Password2             pulumi.StringPtrInput
	Password3             pulumi.StringPtrInput
	Password4             pulumi.StringPtrInput
	Password5             pulumi.StringPtrInput
	Port                  pulumi.IntPtrInput
	Port2                 pulumi.IntPtrInput
	Port3                 pulumi.IntPtrInput
	Port4                 pulumi.IntPtrInput
	Port5                 pulumi.IntPtrInput
	Server                pulumi.StringPtrInput
	Server2               pulumi.StringPtrInput
	Server3               pulumi.StringPtrInput
	Server4               pulumi.StringPtrInput
	Server5               pulumi.StringPtrInput
	Sni                   pulumi.StringPtrInput
	SourceIp              pulumi.StringPtrInput
	SourceIp6             pulumi.StringPtrInput
	Ssl                   pulumi.StringPtrInput
	SslServerHostIpCheck  pulumi.StringPtrInput
	SslTrustedCert        pulumi.StringPtrInput
	Type                  pulumi.StringPtrInput
	UserInfoServer        pulumi.StringPtrInput
	Vdomparam             pulumi.StringPtrInput
}

func (UserFssoState) ElementType() reflect.Type {
	return reflect.TypeOf((*userFssoState)(nil)).Elem()
}

type userFssoArgs struct {
	GroupPollInterval     *int    `pulumi:"groupPollInterval"`
	Interface             *string `pulumi:"interface"`
	InterfaceSelectMethod *string `pulumi:"interfaceSelectMethod"`
	LdapPoll              *string `pulumi:"ldapPoll"`
	LdapPollFilter        *string `pulumi:"ldapPollFilter"`
	LdapPollInterval      *int    `pulumi:"ldapPollInterval"`
	LdapServer            *string `pulumi:"ldapServer"`
	LogonTimeout          *int    `pulumi:"logonTimeout"`
	Name                  *string `pulumi:"name"`
	Password              *string `pulumi:"password"`
	Password2             *string `pulumi:"password2"`
	Password3             *string `pulumi:"password3"`
	Password4             *string `pulumi:"password4"`
	Password5             *string `pulumi:"password5"`
	Port                  *int    `pulumi:"port"`
	Port2                 *int    `pulumi:"port2"`
	Port3                 *int    `pulumi:"port3"`
	Port4                 *int    `pulumi:"port4"`
	Port5                 *int    `pulumi:"port5"`
	Server                string  `pulumi:"server"`
	Server2               *string `pulumi:"server2"`
	Server3               *string `pulumi:"server3"`
	Server4               *string `pulumi:"server4"`
	Server5               *string `pulumi:"server5"`
	Sni                   *string `pulumi:"sni"`
	SourceIp              *string `pulumi:"sourceIp"`
	SourceIp6             *string `pulumi:"sourceIp6"`
	Ssl                   *string `pulumi:"ssl"`
	SslServerHostIpCheck  *string `pulumi:"sslServerHostIpCheck"`
	SslTrustedCert        *string `pulumi:"sslTrustedCert"`
	Type                  *string `pulumi:"type"`
	UserInfoServer        *string `pulumi:"userInfoServer"`
	Vdomparam             *string `pulumi:"vdomparam"`
}

// The set of arguments for constructing a UserFsso resource.
type UserFssoArgs struct {
	GroupPollInterval     pulumi.IntPtrInput
	Interface             pulumi.StringPtrInput
	InterfaceSelectMethod pulumi.StringPtrInput
	LdapPoll              pulumi.StringPtrInput
	LdapPollFilter        pulumi.StringPtrInput
	LdapPollInterval      pulumi.IntPtrInput
	LdapServer            pulumi.StringPtrInput
	LogonTimeout          pulumi.IntPtrInput
	Name                  pulumi.StringPtrInput
	Password              pulumi.StringPtrInput
	Password2             pulumi.StringPtrInput
	Password3             pulumi.StringPtrInput
	Password4             pulumi.StringPtrInput
	Password5             pulumi.StringPtrInput
	Port                  pulumi.IntPtrInput
	Port2                 pulumi.IntPtrInput
	Port3                 pulumi.IntPtrInput
	Port4                 pulumi.IntPtrInput
	Port5                 pulumi.IntPtrInput
	Server                pulumi.StringInput
	Server2               pulumi.StringPtrInput
	Server3               pulumi.StringPtrInput
	Server4               pulumi.StringPtrInput
	Server5               pulumi.StringPtrInput
	Sni                   pulumi.StringPtrInput
	SourceIp              pulumi.StringPtrInput
	SourceIp6             pulumi.StringPtrInput
	Ssl                   pulumi.StringPtrInput
	SslServerHostIpCheck  pulumi.StringPtrInput
	SslTrustedCert        pulumi.StringPtrInput
	Type                  pulumi.StringPtrInput
	UserInfoServer        pulumi.StringPtrInput
	Vdomparam             pulumi.StringPtrInput
}

func (UserFssoArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*userFssoArgs)(nil)).Elem()
}

type UserFssoInput interface {
	pulumi.Input

	ToUserFssoOutput() UserFssoOutput
	ToUserFssoOutputWithContext(ctx context.Context) UserFssoOutput
}

func (*UserFsso) ElementType() reflect.Type {
	return reflect.TypeOf((**UserFsso)(nil)).Elem()
}

func (i *UserFsso) ToUserFssoOutput() UserFssoOutput {
	return i.ToUserFssoOutputWithContext(context.Background())
}

func (i *UserFsso) ToUserFssoOutputWithContext(ctx context.Context) UserFssoOutput {
	return pulumi.ToOutputWithContext(ctx, i).(UserFssoOutput)
}

// UserFssoArrayInput is an input type that accepts UserFssoArray and UserFssoArrayOutput values.
// You can construct a concrete instance of `UserFssoArrayInput` via:
//
//	UserFssoArray{ UserFssoArgs{...} }
type UserFssoArrayInput interface {
	pulumi.Input

	ToUserFssoArrayOutput() UserFssoArrayOutput
	ToUserFssoArrayOutputWithContext(context.Context) UserFssoArrayOutput
}

type UserFssoArray []UserFssoInput

func (UserFssoArray) ElementType() reflect.Type {
	return reflect.TypeOf((*[]*UserFsso)(nil)).Elem()
}

func (i UserFssoArray) ToUserFssoArrayOutput() UserFssoArrayOutput {
	return i.ToUserFssoArrayOutputWithContext(context.Background())
}

func (i UserFssoArray) ToUserFssoArrayOutputWithContext(ctx context.Context) UserFssoArrayOutput {
	return pulumi.ToOutputWithContext(ctx, i).(UserFssoArrayOutput)
}

// UserFssoMapInput is an input type that accepts UserFssoMap and UserFssoMapOutput values.
// You can construct a concrete instance of `UserFssoMapInput` via:
//
//	UserFssoMap{ "key": UserFssoArgs{...} }
type UserFssoMapInput interface {
	pulumi.Input

	ToUserFssoMapOutput() UserFssoMapOutput
	ToUserFssoMapOutputWithContext(context.Context) UserFssoMapOutput
}

type UserFssoMap map[string]UserFssoInput

func (UserFssoMap) ElementType() reflect.Type {
	return reflect.TypeOf((*map[string]*UserFsso)(nil)).Elem()
}

func (i UserFssoMap) ToUserFssoMapOutput() UserFssoMapOutput {
	return i.ToUserFssoMapOutputWithContext(context.Background())
}

func (i UserFssoMap) ToUserFssoMapOutputWithContext(ctx context.Context) UserFssoMapOutput {
	return pulumi.ToOutputWithContext(ctx, i).(UserFssoMapOutput)
}

type UserFssoOutput struct{ *pulumi.OutputState }

func (UserFssoOutput) ElementType() reflect.Type {
	return reflect.TypeOf((**UserFsso)(nil)).Elem()
}

func (o UserFssoOutput) ToUserFssoOutput() UserFssoOutput {
	return o
}

func (o UserFssoOutput) ToUserFssoOutputWithContext(ctx context.Context) UserFssoOutput {
	return o
}

func (o UserFssoOutput) GroupPollInterval() pulumi.IntOutput {
	return o.ApplyT(func(v *UserFsso) pulumi.IntOutput { return v.GroupPollInterval }).(pulumi.IntOutput)
}

func (o UserFssoOutput) Interface() pulumi.StringOutput {
	return o.ApplyT(func(v *UserFsso) pulumi.StringOutput { return v.Interface }).(pulumi.StringOutput)
}

func (o UserFssoOutput) InterfaceSelectMethod() pulumi.StringOutput {
	return o.ApplyT(func(v *UserFsso) pulumi.StringOutput { return v.InterfaceSelectMethod }).(pulumi.StringOutput)
}

func (o UserFssoOutput) LdapPoll() pulumi.StringOutput {
	return o.ApplyT(func(v *UserFsso) pulumi.StringOutput { return v.LdapPoll }).(pulumi.StringOutput)
}

func (o UserFssoOutput) LdapPollFilter() pulumi.StringOutput {
	return o.ApplyT(func(v *UserFsso) pulumi.StringOutput { return v.LdapPollFilter }).(pulumi.StringOutput)
}

func (o UserFssoOutput) LdapPollInterval() pulumi.IntOutput {
	return o.ApplyT(func(v *UserFsso) pulumi.IntOutput { return v.LdapPollInterval }).(pulumi.IntOutput)
}

func (o UserFssoOutput) LdapServer() pulumi.StringOutput {
	return o.ApplyT(func(v *UserFsso) pulumi.StringOutput { return v.LdapServer }).(pulumi.StringOutput)
}

func (o UserFssoOutput) LogonTimeout() pulumi.IntOutput {
	return o.ApplyT(func(v *UserFsso) pulumi.IntOutput { return v.LogonTimeout }).(pulumi.IntOutput)
}

func (o UserFssoOutput) Name() pulumi.StringOutput {
	return o.ApplyT(func(v *UserFsso) pulumi.StringOutput { return v.Name }).(pulumi.StringOutput)
}

func (o UserFssoOutput) Password() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *UserFsso) pulumi.StringPtrOutput { return v.Password }).(pulumi.StringPtrOutput)
}

func (o UserFssoOutput) Password2() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *UserFsso) pulumi.StringPtrOutput { return v.Password2 }).(pulumi.StringPtrOutput)
}

func (o UserFssoOutput) Password3() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *UserFsso) pulumi.StringPtrOutput { return v.Password3 }).(pulumi.StringPtrOutput)
}

func (o UserFssoOutput) Password4() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *UserFsso) pulumi.StringPtrOutput { return v.Password4 }).(pulumi.StringPtrOutput)
}

func (o UserFssoOutput) Password5() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *UserFsso) pulumi.StringPtrOutput { return v.Password5 }).(pulumi.StringPtrOutput)
}

func (o UserFssoOutput) Port() pulumi.IntOutput {
	return o.ApplyT(func(v *UserFsso) pulumi.IntOutput { return v.Port }).(pulumi.IntOutput)
}

func (o UserFssoOutput) Port2() pulumi.IntOutput {
	return o.ApplyT(func(v *UserFsso) pulumi.IntOutput { return v.Port2 }).(pulumi.IntOutput)
}

func (o UserFssoOutput) Port3() pulumi.IntOutput {
	return o.ApplyT(func(v *UserFsso) pulumi.IntOutput { return v.Port3 }).(pulumi.IntOutput)
}

func (o UserFssoOutput) Port4() pulumi.IntOutput {
	return o.ApplyT(func(v *UserFsso) pulumi.IntOutput { return v.Port4 }).(pulumi.IntOutput)
}

func (o UserFssoOutput) Port5() pulumi.IntOutput {
	return o.ApplyT(func(v *UserFsso) pulumi.IntOutput { return v.Port5 }).(pulumi.IntOutput)
}

func (o UserFssoOutput) Server() pulumi.StringOutput {
	return o.ApplyT(func(v *UserFsso) pulumi.StringOutput { return v.Server }).(pulumi.StringOutput)
}

func (o UserFssoOutput) Server2() pulumi.StringOutput {
	return o.ApplyT(func(v *UserFsso) pulumi.StringOutput { return v.Server2 }).(pulumi.StringOutput)
}

func (o UserFssoOutput) Server3() pulumi.StringOutput {
	return o.ApplyT(func(v *UserFsso) pulumi.StringOutput { return v.Server3 }).(pulumi.StringOutput)
}

func (o UserFssoOutput) Server4() pulumi.StringOutput {
	return o.ApplyT(func(v *UserFsso) pulumi.StringOutput { return v.Server4 }).(pulumi.StringOutput)
}

func (o UserFssoOutput) Server5() pulumi.StringOutput {
	return o.ApplyT(func(v *UserFsso) pulumi.StringOutput { return v.Server5 }).(pulumi.StringOutput)
}

func (o UserFssoOutput) Sni() pulumi.StringOutput {
	return o.ApplyT(func(v *UserFsso) pulumi.StringOutput { return v.Sni }).(pulumi.StringOutput)
}

func (o UserFssoOutput) SourceIp() pulumi.StringOutput {
	return o.ApplyT(func(v *UserFsso) pulumi.StringOutput { return v.SourceIp }).(pulumi.StringOutput)
}

func (o UserFssoOutput) SourceIp6() pulumi.StringOutput {
	return o.ApplyT(func(v *UserFsso) pulumi.StringOutput { return v.SourceIp6 }).(pulumi.StringOutput)
}

func (o UserFssoOutput) Ssl() pulumi.StringOutput {
	return o.ApplyT(func(v *UserFsso) pulumi.StringOutput { return v.Ssl }).(pulumi.StringOutput)
}

func (o UserFssoOutput) SslServerHostIpCheck() pulumi.StringOutput {
	return o.ApplyT(func(v *UserFsso) pulumi.StringOutput { return v.SslServerHostIpCheck }).(pulumi.StringOutput)
}

func (o UserFssoOutput) SslTrustedCert() pulumi.StringOutput {
	return o.ApplyT(func(v *UserFsso) pulumi.StringOutput { return v.SslTrustedCert }).(pulumi.StringOutput)
}

func (o UserFssoOutput) Type() pulumi.StringOutput {
	return o.ApplyT(func(v *UserFsso) pulumi.StringOutput { return v.Type }).(pulumi.StringOutput)
}

func (o UserFssoOutput) UserInfoServer() pulumi.StringOutput {
	return o.ApplyT(func(v *UserFsso) pulumi.StringOutput { return v.UserInfoServer }).(pulumi.StringOutput)
}

func (o UserFssoOutput) Vdomparam() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *UserFsso) pulumi.StringPtrOutput { return v.Vdomparam }).(pulumi.StringPtrOutput)
}

type UserFssoArrayOutput struct{ *pulumi.OutputState }

func (UserFssoArrayOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*[]*UserFsso)(nil)).Elem()
}

func (o UserFssoArrayOutput) ToUserFssoArrayOutput() UserFssoArrayOutput {
	return o
}

func (o UserFssoArrayOutput) ToUserFssoArrayOutputWithContext(ctx context.Context) UserFssoArrayOutput {
	return o
}

func (o UserFssoArrayOutput) Index(i pulumi.IntInput) UserFssoOutput {
	return pulumi.All(o, i).ApplyT(func(vs []interface{}) *UserFsso {
		return vs[0].([]*UserFsso)[vs[1].(int)]
	}).(UserFssoOutput)
}

type UserFssoMapOutput struct{ *pulumi.OutputState }

func (UserFssoMapOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*map[string]*UserFsso)(nil)).Elem()
}

func (o UserFssoMapOutput) ToUserFssoMapOutput() UserFssoMapOutput {
	return o
}

func (o UserFssoMapOutput) ToUserFssoMapOutputWithContext(ctx context.Context) UserFssoMapOutput {
	return o
}

func (o UserFssoMapOutput) MapIndex(k pulumi.StringInput) UserFssoOutput {
	return pulumi.All(o, k).ApplyT(func(vs []interface{}) *UserFsso {
		return vs[0].(map[string]*UserFsso)[vs[1].(string)]
	}).(UserFssoOutput)
}

func init() {
	pulumi.RegisterInputType(reflect.TypeOf((*UserFssoInput)(nil)).Elem(), &UserFsso{})
	pulumi.RegisterInputType(reflect.TypeOf((*UserFssoArrayInput)(nil)).Elem(), UserFssoArray{})
	pulumi.RegisterInputType(reflect.TypeOf((*UserFssoMapInput)(nil)).Elem(), UserFssoMap{})
	pulumi.RegisterOutputType(UserFssoOutput{})
	pulumi.RegisterOutputType(UserFssoArrayOutput{})
	pulumi.RegisterOutputType(UserFssoMapOutput{})
}
