// *** WARNING: this file was generated by the Pulumi Terraform Bridge (tfgen) Tool. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

package fortios

import (
	"context"
	"reflect"

	"github.com/pulumi/pulumi/sdk/v3/go/pulumi"
)

// Configure Forward Error Correction (FEC) mapping profiles. Applies to FortiOS Version `>= 7.0.2`.
//
// ## Import
//
// VpnIpsec Fec can be imported using any of these accepted formats$ export "FORTIOS_IMPORT_TABLE"="true"
//
// ```sh
//  $ pulumi import fortios:index/vpnIpsecFec:VpnIpsecFec labelname {{name}}
// ```
//
//  $ unset "FORTIOS_IMPORT_TABLE"
type VpnIpsecFec struct {
	pulumi.CustomResourceState

	// true or false, set this parameter to true when using dynamic forEach + toset to configure and sort sub-tables, please do not set this parameter when configuring static sub-tables.
	DynamicSortSubtable pulumi.StringPtrOutput `pulumi:"dynamicSortSubtable"`
	// FEC redundancy mapping table. The structure of `mappings` block is documented below.
	Mappings VpnIpsecFecMappingArrayOutput `pulumi:"mappings"`
	// Profile name.
	Name pulumi.StringOutput `pulumi:"name"`
	// Specifies the vdom to which the resource will be applied when the FortiGate unit is running in VDOM mode. Only one vdom can be specified. If you want to inherit the vdom configuration of the provider, please do not set this parameter.
	Vdomparam pulumi.StringPtrOutput `pulumi:"vdomparam"`
}

// NewVpnIpsecFec registers a new resource with the given unique name, arguments, and options.
func NewVpnIpsecFec(ctx *pulumi.Context,
	name string, args *VpnIpsecFecArgs, opts ...pulumi.ResourceOption) (*VpnIpsecFec, error) {
	if args == nil {
		args = &VpnIpsecFecArgs{}
	}

	opts = pkgResourceDefaultOpts(opts)
	var resource VpnIpsecFec
	err := ctx.RegisterResource("fortios:index/vpnIpsecFec:VpnIpsecFec", name, args, &resource, opts...)
	if err != nil {
		return nil, err
	}
	return &resource, nil
}

// GetVpnIpsecFec gets an existing VpnIpsecFec resource's state with the given name, ID, and optional
// state properties that are used to uniquely qualify the lookup (nil if not required).
func GetVpnIpsecFec(ctx *pulumi.Context,
	name string, id pulumi.IDInput, state *VpnIpsecFecState, opts ...pulumi.ResourceOption) (*VpnIpsecFec, error) {
	var resource VpnIpsecFec
	err := ctx.ReadResource("fortios:index/vpnIpsecFec:VpnIpsecFec", name, id, state, &resource, opts...)
	if err != nil {
		return nil, err
	}
	return &resource, nil
}

// Input properties used for looking up and filtering VpnIpsecFec resources.
type vpnIpsecFecState struct {
	// true or false, set this parameter to true when using dynamic forEach + toset to configure and sort sub-tables, please do not set this parameter when configuring static sub-tables.
	DynamicSortSubtable *string `pulumi:"dynamicSortSubtable"`
	// FEC redundancy mapping table. The structure of `mappings` block is documented below.
	Mappings []VpnIpsecFecMapping `pulumi:"mappings"`
	// Profile name.
	Name *string `pulumi:"name"`
	// Specifies the vdom to which the resource will be applied when the FortiGate unit is running in VDOM mode. Only one vdom can be specified. If you want to inherit the vdom configuration of the provider, please do not set this parameter.
	Vdomparam *string `pulumi:"vdomparam"`
}

type VpnIpsecFecState struct {
	// true or false, set this parameter to true when using dynamic forEach + toset to configure and sort sub-tables, please do not set this parameter when configuring static sub-tables.
	DynamicSortSubtable pulumi.StringPtrInput
	// FEC redundancy mapping table. The structure of `mappings` block is documented below.
	Mappings VpnIpsecFecMappingArrayInput
	// Profile name.
	Name pulumi.StringPtrInput
	// Specifies the vdom to which the resource will be applied when the FortiGate unit is running in VDOM mode. Only one vdom can be specified. If you want to inherit the vdom configuration of the provider, please do not set this parameter.
	Vdomparam pulumi.StringPtrInput
}

func (VpnIpsecFecState) ElementType() reflect.Type {
	return reflect.TypeOf((*vpnIpsecFecState)(nil)).Elem()
}

type vpnIpsecFecArgs struct {
	// true or false, set this parameter to true when using dynamic forEach + toset to configure and sort sub-tables, please do not set this parameter when configuring static sub-tables.
	DynamicSortSubtable *string `pulumi:"dynamicSortSubtable"`
	// FEC redundancy mapping table. The structure of `mappings` block is documented below.
	Mappings []VpnIpsecFecMapping `pulumi:"mappings"`
	// Profile name.
	Name *string `pulumi:"name"`
	// Specifies the vdom to which the resource will be applied when the FortiGate unit is running in VDOM mode. Only one vdom can be specified. If you want to inherit the vdom configuration of the provider, please do not set this parameter.
	Vdomparam *string `pulumi:"vdomparam"`
}

// The set of arguments for constructing a VpnIpsecFec resource.
type VpnIpsecFecArgs struct {
	// true or false, set this parameter to true when using dynamic forEach + toset to configure and sort sub-tables, please do not set this parameter when configuring static sub-tables.
	DynamicSortSubtable pulumi.StringPtrInput
	// FEC redundancy mapping table. The structure of `mappings` block is documented below.
	Mappings VpnIpsecFecMappingArrayInput
	// Profile name.
	Name pulumi.StringPtrInput
	// Specifies the vdom to which the resource will be applied when the FortiGate unit is running in VDOM mode. Only one vdom can be specified. If you want to inherit the vdom configuration of the provider, please do not set this parameter.
	Vdomparam pulumi.StringPtrInput
}

func (VpnIpsecFecArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*vpnIpsecFecArgs)(nil)).Elem()
}

type VpnIpsecFecInput interface {
	pulumi.Input

	ToVpnIpsecFecOutput() VpnIpsecFecOutput
	ToVpnIpsecFecOutputWithContext(ctx context.Context) VpnIpsecFecOutput
}

func (*VpnIpsecFec) ElementType() reflect.Type {
	return reflect.TypeOf((**VpnIpsecFec)(nil)).Elem()
}

func (i *VpnIpsecFec) ToVpnIpsecFecOutput() VpnIpsecFecOutput {
	return i.ToVpnIpsecFecOutputWithContext(context.Background())
}

func (i *VpnIpsecFec) ToVpnIpsecFecOutputWithContext(ctx context.Context) VpnIpsecFecOutput {
	return pulumi.ToOutputWithContext(ctx, i).(VpnIpsecFecOutput)
}

// VpnIpsecFecArrayInput is an input type that accepts VpnIpsecFecArray and VpnIpsecFecArrayOutput values.
// You can construct a concrete instance of `VpnIpsecFecArrayInput` via:
//
//          VpnIpsecFecArray{ VpnIpsecFecArgs{...} }
type VpnIpsecFecArrayInput interface {
	pulumi.Input

	ToVpnIpsecFecArrayOutput() VpnIpsecFecArrayOutput
	ToVpnIpsecFecArrayOutputWithContext(context.Context) VpnIpsecFecArrayOutput
}

type VpnIpsecFecArray []VpnIpsecFecInput

func (VpnIpsecFecArray) ElementType() reflect.Type {
	return reflect.TypeOf((*[]*VpnIpsecFec)(nil)).Elem()
}

func (i VpnIpsecFecArray) ToVpnIpsecFecArrayOutput() VpnIpsecFecArrayOutput {
	return i.ToVpnIpsecFecArrayOutputWithContext(context.Background())
}

func (i VpnIpsecFecArray) ToVpnIpsecFecArrayOutputWithContext(ctx context.Context) VpnIpsecFecArrayOutput {
	return pulumi.ToOutputWithContext(ctx, i).(VpnIpsecFecArrayOutput)
}

// VpnIpsecFecMapInput is an input type that accepts VpnIpsecFecMap and VpnIpsecFecMapOutput values.
// You can construct a concrete instance of `VpnIpsecFecMapInput` via:
//
//          VpnIpsecFecMap{ "key": VpnIpsecFecArgs{...} }
type VpnIpsecFecMapInput interface {
	pulumi.Input

	ToVpnIpsecFecMapOutput() VpnIpsecFecMapOutput
	ToVpnIpsecFecMapOutputWithContext(context.Context) VpnIpsecFecMapOutput
}

type VpnIpsecFecMap map[string]VpnIpsecFecInput

func (VpnIpsecFecMap) ElementType() reflect.Type {
	return reflect.TypeOf((*map[string]*VpnIpsecFec)(nil)).Elem()
}

func (i VpnIpsecFecMap) ToVpnIpsecFecMapOutput() VpnIpsecFecMapOutput {
	return i.ToVpnIpsecFecMapOutputWithContext(context.Background())
}

func (i VpnIpsecFecMap) ToVpnIpsecFecMapOutputWithContext(ctx context.Context) VpnIpsecFecMapOutput {
	return pulumi.ToOutputWithContext(ctx, i).(VpnIpsecFecMapOutput)
}

type VpnIpsecFecOutput struct{ *pulumi.OutputState }

func (VpnIpsecFecOutput) ElementType() reflect.Type {
	return reflect.TypeOf((**VpnIpsecFec)(nil)).Elem()
}

func (o VpnIpsecFecOutput) ToVpnIpsecFecOutput() VpnIpsecFecOutput {
	return o
}

func (o VpnIpsecFecOutput) ToVpnIpsecFecOutputWithContext(ctx context.Context) VpnIpsecFecOutput {
	return o
}

type VpnIpsecFecArrayOutput struct{ *pulumi.OutputState }

func (VpnIpsecFecArrayOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*[]*VpnIpsecFec)(nil)).Elem()
}

func (o VpnIpsecFecArrayOutput) ToVpnIpsecFecArrayOutput() VpnIpsecFecArrayOutput {
	return o
}

func (o VpnIpsecFecArrayOutput) ToVpnIpsecFecArrayOutputWithContext(ctx context.Context) VpnIpsecFecArrayOutput {
	return o
}

func (o VpnIpsecFecArrayOutput) Index(i pulumi.IntInput) VpnIpsecFecOutput {
	return pulumi.All(o, i).ApplyT(func(vs []interface{}) *VpnIpsecFec {
		return vs[0].([]*VpnIpsecFec)[vs[1].(int)]
	}).(VpnIpsecFecOutput)
}

type VpnIpsecFecMapOutput struct{ *pulumi.OutputState }

func (VpnIpsecFecMapOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*map[string]*VpnIpsecFec)(nil)).Elem()
}

func (o VpnIpsecFecMapOutput) ToVpnIpsecFecMapOutput() VpnIpsecFecMapOutput {
	return o
}

func (o VpnIpsecFecMapOutput) ToVpnIpsecFecMapOutputWithContext(ctx context.Context) VpnIpsecFecMapOutput {
	return o
}

func (o VpnIpsecFecMapOutput) MapIndex(k pulumi.StringInput) VpnIpsecFecOutput {
	return pulumi.All(o, k).ApplyT(func(vs []interface{}) *VpnIpsecFec {
		return vs[0].(map[string]*VpnIpsecFec)[vs[1].(string)]
	}).(VpnIpsecFecOutput)
}

func init() {
	pulumi.RegisterInputType(reflect.TypeOf((*VpnIpsecFecInput)(nil)).Elem(), &VpnIpsecFec{})
	pulumi.RegisterInputType(reflect.TypeOf((*VpnIpsecFecArrayInput)(nil)).Elem(), VpnIpsecFecArray{})
	pulumi.RegisterInputType(reflect.TypeOf((*VpnIpsecFecMapInput)(nil)).Elem(), VpnIpsecFecMap{})
	pulumi.RegisterOutputType(VpnIpsecFecOutput{})
	pulumi.RegisterOutputType(VpnIpsecFecArrayOutput{})
	pulumi.RegisterOutputType(VpnIpsecFecMapOutput{})
}
