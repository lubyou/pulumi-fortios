// Code generated by the Pulumi Terraform Bridge (tfgen) Tool DO NOT EDIT.
// *** WARNING: Do not edit by hand unless you're certain you know what you are doing! ***

package fortios

import (
	"context"
	"reflect"

	"errors"
	"github.com/lubyou/pulumi-fortios/sdk/go/fortios/internal"
	"github.com/pulumi/pulumi/sdk/v3/go/pulumi"
)

type FirewallSslServer struct {
	pulumi.CustomResourceState

	AddHeaderXForwardedProto pulumi.StringOutput    `pulumi:"addHeaderXForwardedProto"`
	Ip                       pulumi.StringOutput    `pulumi:"ip"`
	MappedPort               pulumi.IntOutput       `pulumi:"mappedPort"`
	Name                     pulumi.StringOutput    `pulumi:"name"`
	Port                     pulumi.IntOutput       `pulumi:"port"`
	SslAlgorithm             pulumi.StringOutput    `pulumi:"sslAlgorithm"`
	SslCert                  pulumi.StringOutput    `pulumi:"sslCert"`
	SslClientRenegotiation   pulumi.StringOutput    `pulumi:"sslClientRenegotiation"`
	SslDhBits                pulumi.StringOutput    `pulumi:"sslDhBits"`
	SslMaxVersion            pulumi.StringOutput    `pulumi:"sslMaxVersion"`
	SslMinVersion            pulumi.StringOutput    `pulumi:"sslMinVersion"`
	SslMode                  pulumi.StringOutput    `pulumi:"sslMode"`
	SslSendEmptyFrags        pulumi.StringOutput    `pulumi:"sslSendEmptyFrags"`
	UrlRewrite               pulumi.StringOutput    `pulumi:"urlRewrite"`
	Vdomparam                pulumi.StringPtrOutput `pulumi:"vdomparam"`
}

// NewFirewallSslServer registers a new resource with the given unique name, arguments, and options.
func NewFirewallSslServer(ctx *pulumi.Context,
	name string, args *FirewallSslServerArgs, opts ...pulumi.ResourceOption) (*FirewallSslServer, error) {
	if args == nil {
		return nil, errors.New("missing one or more required arguments")
	}

	if args.Ip == nil {
		return nil, errors.New("invalid value for required argument 'Ip'")
	}
	if args.Port == nil {
		return nil, errors.New("invalid value for required argument 'Port'")
	}
	if args.SslCert == nil {
		return nil, errors.New("invalid value for required argument 'SslCert'")
	}
	opts = internal.PkgResourceDefaultOpts(opts)
	var resource FirewallSslServer
	err := ctx.RegisterResource("fortios:index/firewallSslServer:FirewallSslServer", name, args, &resource, opts...)
	if err != nil {
		return nil, err
	}
	return &resource, nil
}

// GetFirewallSslServer gets an existing FirewallSslServer resource's state with the given name, ID, and optional
// state properties that are used to uniquely qualify the lookup (nil if not required).
func GetFirewallSslServer(ctx *pulumi.Context,
	name string, id pulumi.IDInput, state *FirewallSslServerState, opts ...pulumi.ResourceOption) (*FirewallSslServer, error) {
	var resource FirewallSslServer
	err := ctx.ReadResource("fortios:index/firewallSslServer:FirewallSslServer", name, id, state, &resource, opts...)
	if err != nil {
		return nil, err
	}
	return &resource, nil
}

// Input properties used for looking up and filtering FirewallSslServer resources.
type firewallSslServerState struct {
	AddHeaderXForwardedProto *string `pulumi:"addHeaderXForwardedProto"`
	Ip                       *string `pulumi:"ip"`
	MappedPort               *int    `pulumi:"mappedPort"`
	Name                     *string `pulumi:"name"`
	Port                     *int    `pulumi:"port"`
	SslAlgorithm             *string `pulumi:"sslAlgorithm"`
	SslCert                  *string `pulumi:"sslCert"`
	SslClientRenegotiation   *string `pulumi:"sslClientRenegotiation"`
	SslDhBits                *string `pulumi:"sslDhBits"`
	SslMaxVersion            *string `pulumi:"sslMaxVersion"`
	SslMinVersion            *string `pulumi:"sslMinVersion"`
	SslMode                  *string `pulumi:"sslMode"`
	SslSendEmptyFrags        *string `pulumi:"sslSendEmptyFrags"`
	UrlRewrite               *string `pulumi:"urlRewrite"`
	Vdomparam                *string `pulumi:"vdomparam"`
}

type FirewallSslServerState struct {
	AddHeaderXForwardedProto pulumi.StringPtrInput
	Ip                       pulumi.StringPtrInput
	MappedPort               pulumi.IntPtrInput
	Name                     pulumi.StringPtrInput
	Port                     pulumi.IntPtrInput
	SslAlgorithm             pulumi.StringPtrInput
	SslCert                  pulumi.StringPtrInput
	SslClientRenegotiation   pulumi.StringPtrInput
	SslDhBits                pulumi.StringPtrInput
	SslMaxVersion            pulumi.StringPtrInput
	SslMinVersion            pulumi.StringPtrInput
	SslMode                  pulumi.StringPtrInput
	SslSendEmptyFrags        pulumi.StringPtrInput
	UrlRewrite               pulumi.StringPtrInput
	Vdomparam                pulumi.StringPtrInput
}

func (FirewallSslServerState) ElementType() reflect.Type {
	return reflect.TypeOf((*firewallSslServerState)(nil)).Elem()
}

type firewallSslServerArgs struct {
	AddHeaderXForwardedProto *string `pulumi:"addHeaderXForwardedProto"`
	Ip                       string  `pulumi:"ip"`
	MappedPort               *int    `pulumi:"mappedPort"`
	Name                     *string `pulumi:"name"`
	Port                     int     `pulumi:"port"`
	SslAlgorithm             *string `pulumi:"sslAlgorithm"`
	SslCert                  string  `pulumi:"sslCert"`
	SslClientRenegotiation   *string `pulumi:"sslClientRenegotiation"`
	SslDhBits                *string `pulumi:"sslDhBits"`
	SslMaxVersion            *string `pulumi:"sslMaxVersion"`
	SslMinVersion            *string `pulumi:"sslMinVersion"`
	SslMode                  *string `pulumi:"sslMode"`
	SslSendEmptyFrags        *string `pulumi:"sslSendEmptyFrags"`
	UrlRewrite               *string `pulumi:"urlRewrite"`
	Vdomparam                *string `pulumi:"vdomparam"`
}

// The set of arguments for constructing a FirewallSslServer resource.
type FirewallSslServerArgs struct {
	AddHeaderXForwardedProto pulumi.StringPtrInput
	Ip                       pulumi.StringInput
	MappedPort               pulumi.IntPtrInput
	Name                     pulumi.StringPtrInput
	Port                     pulumi.IntInput
	SslAlgorithm             pulumi.StringPtrInput
	SslCert                  pulumi.StringInput
	SslClientRenegotiation   pulumi.StringPtrInput
	SslDhBits                pulumi.StringPtrInput
	SslMaxVersion            pulumi.StringPtrInput
	SslMinVersion            pulumi.StringPtrInput
	SslMode                  pulumi.StringPtrInput
	SslSendEmptyFrags        pulumi.StringPtrInput
	UrlRewrite               pulumi.StringPtrInput
	Vdomparam                pulumi.StringPtrInput
}

func (FirewallSslServerArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*firewallSslServerArgs)(nil)).Elem()
}

type FirewallSslServerInput interface {
	pulumi.Input

	ToFirewallSslServerOutput() FirewallSslServerOutput
	ToFirewallSslServerOutputWithContext(ctx context.Context) FirewallSslServerOutput
}

func (*FirewallSslServer) ElementType() reflect.Type {
	return reflect.TypeOf((**FirewallSslServer)(nil)).Elem()
}

func (i *FirewallSslServer) ToFirewallSslServerOutput() FirewallSslServerOutput {
	return i.ToFirewallSslServerOutputWithContext(context.Background())
}

func (i *FirewallSslServer) ToFirewallSslServerOutputWithContext(ctx context.Context) FirewallSslServerOutput {
	return pulumi.ToOutputWithContext(ctx, i).(FirewallSslServerOutput)
}

// FirewallSslServerArrayInput is an input type that accepts FirewallSslServerArray and FirewallSslServerArrayOutput values.
// You can construct a concrete instance of `FirewallSslServerArrayInput` via:
//
//	FirewallSslServerArray{ FirewallSslServerArgs{...} }
type FirewallSslServerArrayInput interface {
	pulumi.Input

	ToFirewallSslServerArrayOutput() FirewallSslServerArrayOutput
	ToFirewallSslServerArrayOutputWithContext(context.Context) FirewallSslServerArrayOutput
}

type FirewallSslServerArray []FirewallSslServerInput

func (FirewallSslServerArray) ElementType() reflect.Type {
	return reflect.TypeOf((*[]*FirewallSslServer)(nil)).Elem()
}

func (i FirewallSslServerArray) ToFirewallSslServerArrayOutput() FirewallSslServerArrayOutput {
	return i.ToFirewallSslServerArrayOutputWithContext(context.Background())
}

func (i FirewallSslServerArray) ToFirewallSslServerArrayOutputWithContext(ctx context.Context) FirewallSslServerArrayOutput {
	return pulumi.ToOutputWithContext(ctx, i).(FirewallSslServerArrayOutput)
}

// FirewallSslServerMapInput is an input type that accepts FirewallSslServerMap and FirewallSslServerMapOutput values.
// You can construct a concrete instance of `FirewallSslServerMapInput` via:
//
//	FirewallSslServerMap{ "key": FirewallSslServerArgs{...} }
type FirewallSslServerMapInput interface {
	pulumi.Input

	ToFirewallSslServerMapOutput() FirewallSslServerMapOutput
	ToFirewallSslServerMapOutputWithContext(context.Context) FirewallSslServerMapOutput
}

type FirewallSslServerMap map[string]FirewallSslServerInput

func (FirewallSslServerMap) ElementType() reflect.Type {
	return reflect.TypeOf((*map[string]*FirewallSslServer)(nil)).Elem()
}

func (i FirewallSslServerMap) ToFirewallSslServerMapOutput() FirewallSslServerMapOutput {
	return i.ToFirewallSslServerMapOutputWithContext(context.Background())
}

func (i FirewallSslServerMap) ToFirewallSslServerMapOutputWithContext(ctx context.Context) FirewallSslServerMapOutput {
	return pulumi.ToOutputWithContext(ctx, i).(FirewallSslServerMapOutput)
}

type FirewallSslServerOutput struct{ *pulumi.OutputState }

func (FirewallSslServerOutput) ElementType() reflect.Type {
	return reflect.TypeOf((**FirewallSslServer)(nil)).Elem()
}

func (o FirewallSslServerOutput) ToFirewallSslServerOutput() FirewallSslServerOutput {
	return o
}

func (o FirewallSslServerOutput) ToFirewallSslServerOutputWithContext(ctx context.Context) FirewallSslServerOutput {
	return o
}

func (o FirewallSslServerOutput) AddHeaderXForwardedProto() pulumi.StringOutput {
	return o.ApplyT(func(v *FirewallSslServer) pulumi.StringOutput { return v.AddHeaderXForwardedProto }).(pulumi.StringOutput)
}

func (o FirewallSslServerOutput) Ip() pulumi.StringOutput {
	return o.ApplyT(func(v *FirewallSslServer) pulumi.StringOutput { return v.Ip }).(pulumi.StringOutput)
}

func (o FirewallSslServerOutput) MappedPort() pulumi.IntOutput {
	return o.ApplyT(func(v *FirewallSslServer) pulumi.IntOutput { return v.MappedPort }).(pulumi.IntOutput)
}

func (o FirewallSslServerOutput) Name() pulumi.StringOutput {
	return o.ApplyT(func(v *FirewallSslServer) pulumi.StringOutput { return v.Name }).(pulumi.StringOutput)
}

func (o FirewallSslServerOutput) Port() pulumi.IntOutput {
	return o.ApplyT(func(v *FirewallSslServer) pulumi.IntOutput { return v.Port }).(pulumi.IntOutput)
}

func (o FirewallSslServerOutput) SslAlgorithm() pulumi.StringOutput {
	return o.ApplyT(func(v *FirewallSslServer) pulumi.StringOutput { return v.SslAlgorithm }).(pulumi.StringOutput)
}

func (o FirewallSslServerOutput) SslCert() pulumi.StringOutput {
	return o.ApplyT(func(v *FirewallSslServer) pulumi.StringOutput { return v.SslCert }).(pulumi.StringOutput)
}

func (o FirewallSslServerOutput) SslClientRenegotiation() pulumi.StringOutput {
	return o.ApplyT(func(v *FirewallSslServer) pulumi.StringOutput { return v.SslClientRenegotiation }).(pulumi.StringOutput)
}

func (o FirewallSslServerOutput) SslDhBits() pulumi.StringOutput {
	return o.ApplyT(func(v *FirewallSslServer) pulumi.StringOutput { return v.SslDhBits }).(pulumi.StringOutput)
}

func (o FirewallSslServerOutput) SslMaxVersion() pulumi.StringOutput {
	return o.ApplyT(func(v *FirewallSslServer) pulumi.StringOutput { return v.SslMaxVersion }).(pulumi.StringOutput)
}

func (o FirewallSslServerOutput) SslMinVersion() pulumi.StringOutput {
	return o.ApplyT(func(v *FirewallSslServer) pulumi.StringOutput { return v.SslMinVersion }).(pulumi.StringOutput)
}

func (o FirewallSslServerOutput) SslMode() pulumi.StringOutput {
	return o.ApplyT(func(v *FirewallSslServer) pulumi.StringOutput { return v.SslMode }).(pulumi.StringOutput)
}

func (o FirewallSslServerOutput) SslSendEmptyFrags() pulumi.StringOutput {
	return o.ApplyT(func(v *FirewallSslServer) pulumi.StringOutput { return v.SslSendEmptyFrags }).(pulumi.StringOutput)
}

func (o FirewallSslServerOutput) UrlRewrite() pulumi.StringOutput {
	return o.ApplyT(func(v *FirewallSslServer) pulumi.StringOutput { return v.UrlRewrite }).(pulumi.StringOutput)
}

func (o FirewallSslServerOutput) Vdomparam() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *FirewallSslServer) pulumi.StringPtrOutput { return v.Vdomparam }).(pulumi.StringPtrOutput)
}

type FirewallSslServerArrayOutput struct{ *pulumi.OutputState }

func (FirewallSslServerArrayOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*[]*FirewallSslServer)(nil)).Elem()
}

func (o FirewallSslServerArrayOutput) ToFirewallSslServerArrayOutput() FirewallSslServerArrayOutput {
	return o
}

func (o FirewallSslServerArrayOutput) ToFirewallSslServerArrayOutputWithContext(ctx context.Context) FirewallSslServerArrayOutput {
	return o
}

func (o FirewallSslServerArrayOutput) Index(i pulumi.IntInput) FirewallSslServerOutput {
	return pulumi.All(o, i).ApplyT(func(vs []interface{}) *FirewallSslServer {
		return vs[0].([]*FirewallSslServer)[vs[1].(int)]
	}).(FirewallSslServerOutput)
}

type FirewallSslServerMapOutput struct{ *pulumi.OutputState }

func (FirewallSslServerMapOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*map[string]*FirewallSslServer)(nil)).Elem()
}

func (o FirewallSslServerMapOutput) ToFirewallSslServerMapOutput() FirewallSslServerMapOutput {
	return o
}

func (o FirewallSslServerMapOutput) ToFirewallSslServerMapOutputWithContext(ctx context.Context) FirewallSslServerMapOutput {
	return o
}

func (o FirewallSslServerMapOutput) MapIndex(k pulumi.StringInput) FirewallSslServerOutput {
	return pulumi.All(o, k).ApplyT(func(vs []interface{}) *FirewallSslServer {
		return vs[0].(map[string]*FirewallSslServer)[vs[1].(string)]
	}).(FirewallSslServerOutput)
}

func init() {
	pulumi.RegisterInputType(reflect.TypeOf((*FirewallSslServerInput)(nil)).Elem(), &FirewallSslServer{})
	pulumi.RegisterInputType(reflect.TypeOf((*FirewallSslServerArrayInput)(nil)).Elem(), FirewallSslServerArray{})
	pulumi.RegisterInputType(reflect.TypeOf((*FirewallSslServerMapInput)(nil)).Elem(), FirewallSslServerMap{})
	pulumi.RegisterOutputType(FirewallSslServerOutput{})
	pulumi.RegisterOutputType(FirewallSslServerArrayOutput{})
	pulumi.RegisterOutputType(FirewallSslServerMapOutput{})
}
