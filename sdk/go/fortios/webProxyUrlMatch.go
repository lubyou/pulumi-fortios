// Code generated by the Pulumi Terraform Bridge (tfgen) Tool DO NOT EDIT.
// *** WARNING: Do not edit by hand unless you're certain you know what you are doing! ***

package fortios

import (
	"context"
	"reflect"

	"github.com/pkg/errors"
	"github.com/pulumi/pulumi/sdk/v3/go/pulumi"
)

// Exempt URLs from web proxy forwarding and caching.
//
// ## Example Usage
//
// ```go
// package main
//
// import (
// 	"github.com/lubyou/pulumi-fortios/sdk/go/fortios"
// 	"github.com/pulumi/pulumi/sdk/v3/go/pulumi"
// )
//
// func main() {
// 	pulumi.Run(func(ctx *pulumi.Context) error {
// 		trname2, err := fortios.NewWebProxyForwardServer(ctx, "trname2", &fortios.WebProxyForwardServerArgs{
// 			AddrType:         pulumi.String("fqdn"),
// 			Healthcheck:      pulumi.String("disable"),
// 			Ip:               pulumi.String("0.0.0.0"),
// 			Monitor:          pulumi.String("http://www.google.com"),
// 			Port:             pulumi.Int(3128),
// 			ServerDownOption: pulumi.String("block"),
// 		})
// 		if err != nil {
// 			return err
// 		}
// 		_, err = fortios.NewWebProxyUrlMatch(ctx, "trname", &fortios.WebProxyUrlMatchArgs{
// 			CacheExemption: pulumi.String("disable"),
// 			ForwardServer:  trname2.Name,
// 			Status:         pulumi.String("enable"),
// 			UrlPattern:     pulumi.String("/examples/servlet/*Servlet"),
// 		})
// 		if err != nil {
// 			return err
// 		}
// 		return nil
// 	})
// }
// ```
//
// ## Import
//
// WebProxy UrlMatch can be imported using any of these accepted formats
//
// ```sh
//  $ pulumi import fortios:index/webProxyUrlMatch:WebProxyUrlMatch labelname {{name}}
// ```
//
//  If you do not want to import arguments of block$ export "FORTIOS_IMPORT_TABLE"="false"
//
// ```sh
//  $ pulumi import fortios:index/webProxyUrlMatch:WebProxyUrlMatch labelname {{name}}
// ```
//
//  $ unset "FORTIOS_IMPORT_TABLE"
type WebProxyUrlMatch struct {
	pulumi.CustomResourceState

	// Enable/disable exempting this URL pattern from caching. Valid values: `enable`, `disable`.
	CacheExemption pulumi.StringOutput `pulumi:"cacheExemption"`
	// Comment.
	Comment pulumi.StringPtrOutput `pulumi:"comment"`
	// Forward server name.
	ForwardServer pulumi.StringOutput `pulumi:"forwardServer"`
	// Configure a name for the URL to be exempted.
	Name pulumi.StringOutput `pulumi:"name"`
	// Enable/disable exempting the URLs matching the URL pattern from web proxy forwarding and caching. Valid values: `enable`, `disable`.
	Status pulumi.StringOutput `pulumi:"status"`
	// URL pattern to be exempted from web proxy forwarding and caching.
	UrlPattern pulumi.StringOutput `pulumi:"urlPattern"`
	// Specifies the vdom to which the resource will be applied when the FortiGate unit is running in VDOM mode. Only one vdom can be specified. If you want to inherit the vdom configuration of the provider, please do not set this parameter.
	Vdomparam pulumi.StringPtrOutput `pulumi:"vdomparam"`
}

// NewWebProxyUrlMatch registers a new resource with the given unique name, arguments, and options.
func NewWebProxyUrlMatch(ctx *pulumi.Context,
	name string, args *WebProxyUrlMatchArgs, opts ...pulumi.ResourceOption) (*WebProxyUrlMatch, error) {
	if args == nil {
		return nil, errors.New("missing one or more required arguments")
	}

	if args.UrlPattern == nil {
		return nil, errors.New("invalid value for required argument 'UrlPattern'")
	}
	opts = pkgResourceDefaultOpts(opts)
	var resource WebProxyUrlMatch
	err := ctx.RegisterResource("fortios:index/webProxyUrlMatch:WebProxyUrlMatch", name, args, &resource, opts...)
	if err != nil {
		return nil, err
	}
	return &resource, nil
}

// GetWebProxyUrlMatch gets an existing WebProxyUrlMatch resource's state with the given name, ID, and optional
// state properties that are used to uniquely qualify the lookup (nil if not required).
func GetWebProxyUrlMatch(ctx *pulumi.Context,
	name string, id pulumi.IDInput, state *WebProxyUrlMatchState, opts ...pulumi.ResourceOption) (*WebProxyUrlMatch, error) {
	var resource WebProxyUrlMatch
	err := ctx.ReadResource("fortios:index/webProxyUrlMatch:WebProxyUrlMatch", name, id, state, &resource, opts...)
	if err != nil {
		return nil, err
	}
	return &resource, nil
}

// Input properties used for looking up and filtering WebProxyUrlMatch resources.
type webProxyUrlMatchState struct {
	// Enable/disable exempting this URL pattern from caching. Valid values: `enable`, `disable`.
	CacheExemption *string `pulumi:"cacheExemption"`
	// Comment.
	Comment *string `pulumi:"comment"`
	// Forward server name.
	ForwardServer *string `pulumi:"forwardServer"`
	// Configure a name for the URL to be exempted.
	Name *string `pulumi:"name"`
	// Enable/disable exempting the URLs matching the URL pattern from web proxy forwarding and caching. Valid values: `enable`, `disable`.
	Status *string `pulumi:"status"`
	// URL pattern to be exempted from web proxy forwarding and caching.
	UrlPattern *string `pulumi:"urlPattern"`
	// Specifies the vdom to which the resource will be applied when the FortiGate unit is running in VDOM mode. Only one vdom can be specified. If you want to inherit the vdom configuration of the provider, please do not set this parameter.
	Vdomparam *string `pulumi:"vdomparam"`
}

type WebProxyUrlMatchState struct {
	// Enable/disable exempting this URL pattern from caching. Valid values: `enable`, `disable`.
	CacheExemption pulumi.StringPtrInput
	// Comment.
	Comment pulumi.StringPtrInput
	// Forward server name.
	ForwardServer pulumi.StringPtrInput
	// Configure a name for the URL to be exempted.
	Name pulumi.StringPtrInput
	// Enable/disable exempting the URLs matching the URL pattern from web proxy forwarding and caching. Valid values: `enable`, `disable`.
	Status pulumi.StringPtrInput
	// URL pattern to be exempted from web proxy forwarding and caching.
	UrlPattern pulumi.StringPtrInput
	// Specifies the vdom to which the resource will be applied when the FortiGate unit is running in VDOM mode. Only one vdom can be specified. If you want to inherit the vdom configuration of the provider, please do not set this parameter.
	Vdomparam pulumi.StringPtrInput
}

func (WebProxyUrlMatchState) ElementType() reflect.Type {
	return reflect.TypeOf((*webProxyUrlMatchState)(nil)).Elem()
}

type webProxyUrlMatchArgs struct {
	// Enable/disable exempting this URL pattern from caching. Valid values: `enable`, `disable`.
	CacheExemption *string `pulumi:"cacheExemption"`
	// Comment.
	Comment *string `pulumi:"comment"`
	// Forward server name.
	ForwardServer *string `pulumi:"forwardServer"`
	// Configure a name for the URL to be exempted.
	Name *string `pulumi:"name"`
	// Enable/disable exempting the URLs matching the URL pattern from web proxy forwarding and caching. Valid values: `enable`, `disable`.
	Status *string `pulumi:"status"`
	// URL pattern to be exempted from web proxy forwarding and caching.
	UrlPattern string `pulumi:"urlPattern"`
	// Specifies the vdom to which the resource will be applied when the FortiGate unit is running in VDOM mode. Only one vdom can be specified. If you want to inherit the vdom configuration of the provider, please do not set this parameter.
	Vdomparam *string `pulumi:"vdomparam"`
}

// The set of arguments for constructing a WebProxyUrlMatch resource.
type WebProxyUrlMatchArgs struct {
	// Enable/disable exempting this URL pattern from caching. Valid values: `enable`, `disable`.
	CacheExemption pulumi.StringPtrInput
	// Comment.
	Comment pulumi.StringPtrInput
	// Forward server name.
	ForwardServer pulumi.StringPtrInput
	// Configure a name for the URL to be exempted.
	Name pulumi.StringPtrInput
	// Enable/disable exempting the URLs matching the URL pattern from web proxy forwarding and caching. Valid values: `enable`, `disable`.
	Status pulumi.StringPtrInput
	// URL pattern to be exempted from web proxy forwarding and caching.
	UrlPattern pulumi.StringInput
	// Specifies the vdom to which the resource will be applied when the FortiGate unit is running in VDOM mode. Only one vdom can be specified. If you want to inherit the vdom configuration of the provider, please do not set this parameter.
	Vdomparam pulumi.StringPtrInput
}

func (WebProxyUrlMatchArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*webProxyUrlMatchArgs)(nil)).Elem()
}

type WebProxyUrlMatchInput interface {
	pulumi.Input

	ToWebProxyUrlMatchOutput() WebProxyUrlMatchOutput
	ToWebProxyUrlMatchOutputWithContext(ctx context.Context) WebProxyUrlMatchOutput
}

func (*WebProxyUrlMatch) ElementType() reflect.Type {
	return reflect.TypeOf((**WebProxyUrlMatch)(nil)).Elem()
}

func (i *WebProxyUrlMatch) ToWebProxyUrlMatchOutput() WebProxyUrlMatchOutput {
	return i.ToWebProxyUrlMatchOutputWithContext(context.Background())
}

func (i *WebProxyUrlMatch) ToWebProxyUrlMatchOutputWithContext(ctx context.Context) WebProxyUrlMatchOutput {
	return pulumi.ToOutputWithContext(ctx, i).(WebProxyUrlMatchOutput)
}

// WebProxyUrlMatchArrayInput is an input type that accepts WebProxyUrlMatchArray and WebProxyUrlMatchArrayOutput values.
// You can construct a concrete instance of `WebProxyUrlMatchArrayInput` via:
//
//          WebProxyUrlMatchArray{ WebProxyUrlMatchArgs{...} }
type WebProxyUrlMatchArrayInput interface {
	pulumi.Input

	ToWebProxyUrlMatchArrayOutput() WebProxyUrlMatchArrayOutput
	ToWebProxyUrlMatchArrayOutputWithContext(context.Context) WebProxyUrlMatchArrayOutput
}

type WebProxyUrlMatchArray []WebProxyUrlMatchInput

func (WebProxyUrlMatchArray) ElementType() reflect.Type {
	return reflect.TypeOf((*[]*WebProxyUrlMatch)(nil)).Elem()
}

func (i WebProxyUrlMatchArray) ToWebProxyUrlMatchArrayOutput() WebProxyUrlMatchArrayOutput {
	return i.ToWebProxyUrlMatchArrayOutputWithContext(context.Background())
}

func (i WebProxyUrlMatchArray) ToWebProxyUrlMatchArrayOutputWithContext(ctx context.Context) WebProxyUrlMatchArrayOutput {
	return pulumi.ToOutputWithContext(ctx, i).(WebProxyUrlMatchArrayOutput)
}

// WebProxyUrlMatchMapInput is an input type that accepts WebProxyUrlMatchMap and WebProxyUrlMatchMapOutput values.
// You can construct a concrete instance of `WebProxyUrlMatchMapInput` via:
//
//          WebProxyUrlMatchMap{ "key": WebProxyUrlMatchArgs{...} }
type WebProxyUrlMatchMapInput interface {
	pulumi.Input

	ToWebProxyUrlMatchMapOutput() WebProxyUrlMatchMapOutput
	ToWebProxyUrlMatchMapOutputWithContext(context.Context) WebProxyUrlMatchMapOutput
}

type WebProxyUrlMatchMap map[string]WebProxyUrlMatchInput

func (WebProxyUrlMatchMap) ElementType() reflect.Type {
	return reflect.TypeOf((*map[string]*WebProxyUrlMatch)(nil)).Elem()
}

func (i WebProxyUrlMatchMap) ToWebProxyUrlMatchMapOutput() WebProxyUrlMatchMapOutput {
	return i.ToWebProxyUrlMatchMapOutputWithContext(context.Background())
}

func (i WebProxyUrlMatchMap) ToWebProxyUrlMatchMapOutputWithContext(ctx context.Context) WebProxyUrlMatchMapOutput {
	return pulumi.ToOutputWithContext(ctx, i).(WebProxyUrlMatchMapOutput)
}

type WebProxyUrlMatchOutput struct{ *pulumi.OutputState }

func (WebProxyUrlMatchOutput) ElementType() reflect.Type {
	return reflect.TypeOf((**WebProxyUrlMatch)(nil)).Elem()
}

func (o WebProxyUrlMatchOutput) ToWebProxyUrlMatchOutput() WebProxyUrlMatchOutput {
	return o
}

func (o WebProxyUrlMatchOutput) ToWebProxyUrlMatchOutputWithContext(ctx context.Context) WebProxyUrlMatchOutput {
	return o
}

type WebProxyUrlMatchArrayOutput struct{ *pulumi.OutputState }

func (WebProxyUrlMatchArrayOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*[]*WebProxyUrlMatch)(nil)).Elem()
}

func (o WebProxyUrlMatchArrayOutput) ToWebProxyUrlMatchArrayOutput() WebProxyUrlMatchArrayOutput {
	return o
}

func (o WebProxyUrlMatchArrayOutput) ToWebProxyUrlMatchArrayOutputWithContext(ctx context.Context) WebProxyUrlMatchArrayOutput {
	return o
}

func (o WebProxyUrlMatchArrayOutput) Index(i pulumi.IntInput) WebProxyUrlMatchOutput {
	return pulumi.All(o, i).ApplyT(func(vs []interface{}) *WebProxyUrlMatch {
		return vs[0].([]*WebProxyUrlMatch)[vs[1].(int)]
	}).(WebProxyUrlMatchOutput)
}

type WebProxyUrlMatchMapOutput struct{ *pulumi.OutputState }

func (WebProxyUrlMatchMapOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*map[string]*WebProxyUrlMatch)(nil)).Elem()
}

func (o WebProxyUrlMatchMapOutput) ToWebProxyUrlMatchMapOutput() WebProxyUrlMatchMapOutput {
	return o
}

func (o WebProxyUrlMatchMapOutput) ToWebProxyUrlMatchMapOutputWithContext(ctx context.Context) WebProxyUrlMatchMapOutput {
	return o
}

func (o WebProxyUrlMatchMapOutput) MapIndex(k pulumi.StringInput) WebProxyUrlMatchOutput {
	return pulumi.All(o, k).ApplyT(func(vs []interface{}) *WebProxyUrlMatch {
		return vs[0].(map[string]*WebProxyUrlMatch)[vs[1].(string)]
	}).(WebProxyUrlMatchOutput)
}

func init() {
	pulumi.RegisterInputType(reflect.TypeOf((*WebProxyUrlMatchInput)(nil)).Elem(), &WebProxyUrlMatch{})
	pulumi.RegisterInputType(reflect.TypeOf((*WebProxyUrlMatchArrayInput)(nil)).Elem(), WebProxyUrlMatchArray{})
	pulumi.RegisterInputType(reflect.TypeOf((*WebProxyUrlMatchMapInput)(nil)).Elem(), WebProxyUrlMatchMap{})
	pulumi.RegisterOutputType(WebProxyUrlMatchOutput{})
	pulumi.RegisterOutputType(WebProxyUrlMatchArrayOutput{})
	pulumi.RegisterOutputType(WebProxyUrlMatchMapOutput{})
}
