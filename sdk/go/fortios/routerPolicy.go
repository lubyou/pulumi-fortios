// *** WARNING: this file was generated by the Pulumi Terraform Bridge (tfgen) Tool. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

package fortios

import (
	"context"
	"reflect"

	"github.com/pulumi/pulumi/sdk/v3/go/pulumi"
)

// Configure IPv4 routing policies.
//
// ## Example Usage
//
// ```go
// package main
//
// import (
// 	"github.com/pulumi/pulumi-fortios/sdk/go/fortios"
// 	"github.com/pulumi/pulumi/sdk/v3/go/pulumi"
// )
//
// func main() {
// 	pulumi.Run(func(ctx *pulumi.Context) error {
// 		_, err := fortios.NewRouterPolicy(ctx, "trname", &fortios.RouterPolicyArgs{
// 			Action:        pulumi.String("permit"),
// 			DstNegate:     pulumi.String("disable"),
// 			EndPort:       pulumi.Int(25),
// 			EndSourcePort: pulumi.Int(65535),
// 			Gateway:       pulumi.String("0.0.0.0"),
// 			InputDevices: fortios.RouterPolicyInputDeviceArray{
// 				&fortios.RouterPolicyInputDeviceArgs{
// 					Name: pulumi.String("port1"),
// 				},
// 			},
// 			OutputDevice:    pulumi.String("port2"),
// 			Protocol:        pulumi.Int(6),
// 			SeqNum:          pulumi.Int(1),
// 			SrcNegate:       pulumi.String("disable"),
// 			StartPort:       pulumi.Int(25),
// 			StartSourcePort: pulumi.Int(0),
// 			Status:          pulumi.String("enable"),
// 			Tos:             pulumi.String("0x00"),
// 			TosMask:         pulumi.String("0x00"),
// 		})
// 		if err != nil {
// 			return err
// 		}
// 		return nil
// 	})
// }
// ```
//
// ## Import
//
// Router Policy can be imported using any of these accepted formats$ export "FORTIOS_IMPORT_TABLE"="true"
//
// ```sh
//  $ pulumi import fortios:index/routerPolicy:RouterPolicy labelname {{seq_num}}
// ```
//
//  $ unset "FORTIOS_IMPORT_TABLE"
type RouterPolicy struct {
	pulumi.CustomResourceState

	// Action of the policy route. Valid values: `deny`, `permit`.
	Action pulumi.StringOutput `pulumi:"action"`
	// Optional comments.
	Comments pulumi.StringPtrOutput `pulumi:"comments"`
	// Enable/disable negating destination address match. Valid values: `enable`, `disable`.
	DstNegate pulumi.StringOutput `pulumi:"dstNegate"`
	// Destination address name. The structure of `dstaddr` block is documented below.
	Dstaddrs RouterPolicyDstaddrArrayOutput `pulumi:"dstaddrs"`
	// Destination IP and mask (x.x.x.x/x). The structure of `dst` block is documented below.
	Dsts RouterPolicyDstArrayOutput `pulumi:"dsts"`
	// true or false, set this parameter to true when using dynamic forEach + toset to configure and sort sub-tables, please do not set this parameter when configuring static sub-tables.
	DynamicSortSubtable pulumi.StringPtrOutput `pulumi:"dynamicSortSubtable"`
	// End destination port number (0 - 65535).
	EndPort pulumi.IntOutput `pulumi:"endPort"`
	// End source port number (0 - 65535).
	EndSourcePort pulumi.IntOutput `pulumi:"endSourcePort"`
	// IP address of the gateway.
	Gateway pulumi.StringOutput `pulumi:"gateway"`
	// Enable/disable negation of input device match. Valid values: `enable`, `disable`.
	InputDeviceNegate pulumi.StringOutput `pulumi:"inputDeviceNegate"`
	// Incoming interface name. The structure of `inputDevice` block is documented below.
	InputDevices RouterPolicyInputDeviceArrayOutput `pulumi:"inputDevices"`
	// Custom Destination Internet Service name. The structure of `internetServiceCustom` block is documented below.
	InternetServiceCustoms RouterPolicyInternetServiceCustomArrayOutput `pulumi:"internetServiceCustoms"`
	// Destination Internet Service ID. The structure of `internetServiceId` block is documented below.
	InternetServiceIds RouterPolicyInternetServiceIdArrayOutput `pulumi:"internetServiceIds"`
	// Outgoing interface name.
	OutputDevice pulumi.StringOutput `pulumi:"outputDevice"`
	// Protocol number (0 - 255).
	Protocol pulumi.IntOutput `pulumi:"protocol"`
	// Sequence number.
	SeqNum pulumi.IntOutput `pulumi:"seqNum"`
	// Enable/disable negating source address match. Valid values: `enable`, `disable`.
	SrcNegate pulumi.StringOutput `pulumi:"srcNegate"`
	// Source address name. The structure of `srcaddr` block is documented below.
	Srcaddrs RouterPolicySrcaddrArrayOutput `pulumi:"srcaddrs"`
	// Source IP and mask (x.x.x.x/x). The structure of `src` block is documented below.
	Srcs RouterPolicySrcArrayOutput `pulumi:"srcs"`
	// Start destination port number (0 - 65535).
	StartPort pulumi.IntOutput `pulumi:"startPort"`
	// Start source port number (0 - 65535).
	StartSourcePort pulumi.IntOutput `pulumi:"startSourcePort"`
	// Enable/disable this policy route. Valid values: `enable`, `disable`.
	Status pulumi.StringOutput `pulumi:"status"`
	// Type of service bit pattern.
	Tos pulumi.StringOutput `pulumi:"tos"`
	// Type of service evaluated bits.
	TosMask pulumi.StringOutput `pulumi:"tosMask"`
	// Specifies the vdom to which the resource will be applied when the FortiGate unit is running in VDOM mode. Only one vdom can be specified. If you want to inherit the vdom configuration of the provider, please do not set this parameter.
	Vdomparam pulumi.StringPtrOutput `pulumi:"vdomparam"`
}

// NewRouterPolicy registers a new resource with the given unique name, arguments, and options.
func NewRouterPolicy(ctx *pulumi.Context,
	name string, args *RouterPolicyArgs, opts ...pulumi.ResourceOption) (*RouterPolicy, error) {
	if args == nil {
		args = &RouterPolicyArgs{}
	}

	var resource RouterPolicy
	err := ctx.RegisterResource("fortios:index/routerPolicy:RouterPolicy", name, args, &resource, opts...)
	if err != nil {
		return nil, err
	}
	return &resource, nil
}

// GetRouterPolicy gets an existing RouterPolicy resource's state with the given name, ID, and optional
// state properties that are used to uniquely qualify the lookup (nil if not required).
func GetRouterPolicy(ctx *pulumi.Context,
	name string, id pulumi.IDInput, state *RouterPolicyState, opts ...pulumi.ResourceOption) (*RouterPolicy, error) {
	var resource RouterPolicy
	err := ctx.ReadResource("fortios:index/routerPolicy:RouterPolicy", name, id, state, &resource, opts...)
	if err != nil {
		return nil, err
	}
	return &resource, nil
}

// Input properties used for looking up and filtering RouterPolicy resources.
type routerPolicyState struct {
	// Action of the policy route. Valid values: `deny`, `permit`.
	Action *string `pulumi:"action"`
	// Optional comments.
	Comments *string `pulumi:"comments"`
	// Enable/disable negating destination address match. Valid values: `enable`, `disable`.
	DstNegate *string `pulumi:"dstNegate"`
	// Destination address name. The structure of `dstaddr` block is documented below.
	Dstaddrs []RouterPolicyDstaddr `pulumi:"dstaddrs"`
	// Destination IP and mask (x.x.x.x/x). The structure of `dst` block is documented below.
	Dsts []RouterPolicyDst `pulumi:"dsts"`
	// true or false, set this parameter to true when using dynamic forEach + toset to configure and sort sub-tables, please do not set this parameter when configuring static sub-tables.
	DynamicSortSubtable *string `pulumi:"dynamicSortSubtable"`
	// End destination port number (0 - 65535).
	EndPort *int `pulumi:"endPort"`
	// End source port number (0 - 65535).
	EndSourcePort *int `pulumi:"endSourcePort"`
	// IP address of the gateway.
	Gateway *string `pulumi:"gateway"`
	// Enable/disable negation of input device match. Valid values: `enable`, `disable`.
	InputDeviceNegate *string `pulumi:"inputDeviceNegate"`
	// Incoming interface name. The structure of `inputDevice` block is documented below.
	InputDevices []RouterPolicyInputDevice `pulumi:"inputDevices"`
	// Custom Destination Internet Service name. The structure of `internetServiceCustom` block is documented below.
	InternetServiceCustoms []RouterPolicyInternetServiceCustom `pulumi:"internetServiceCustoms"`
	// Destination Internet Service ID. The structure of `internetServiceId` block is documented below.
	InternetServiceIds []RouterPolicyInternetServiceId `pulumi:"internetServiceIds"`
	// Outgoing interface name.
	OutputDevice *string `pulumi:"outputDevice"`
	// Protocol number (0 - 255).
	Protocol *int `pulumi:"protocol"`
	// Sequence number.
	SeqNum *int `pulumi:"seqNum"`
	// Enable/disable negating source address match. Valid values: `enable`, `disable`.
	SrcNegate *string `pulumi:"srcNegate"`
	// Source address name. The structure of `srcaddr` block is documented below.
	Srcaddrs []RouterPolicySrcaddr `pulumi:"srcaddrs"`
	// Source IP and mask (x.x.x.x/x). The structure of `src` block is documented below.
	Srcs []RouterPolicySrc `pulumi:"srcs"`
	// Start destination port number (0 - 65535).
	StartPort *int `pulumi:"startPort"`
	// Start source port number (0 - 65535).
	StartSourcePort *int `pulumi:"startSourcePort"`
	// Enable/disable this policy route. Valid values: `enable`, `disable`.
	Status *string `pulumi:"status"`
	// Type of service bit pattern.
	Tos *string `pulumi:"tos"`
	// Type of service evaluated bits.
	TosMask *string `pulumi:"tosMask"`
	// Specifies the vdom to which the resource will be applied when the FortiGate unit is running in VDOM mode. Only one vdom can be specified. If you want to inherit the vdom configuration of the provider, please do not set this parameter.
	Vdomparam *string `pulumi:"vdomparam"`
}

type RouterPolicyState struct {
	// Action of the policy route. Valid values: `deny`, `permit`.
	Action pulumi.StringPtrInput
	// Optional comments.
	Comments pulumi.StringPtrInput
	// Enable/disable negating destination address match. Valid values: `enable`, `disable`.
	DstNegate pulumi.StringPtrInput
	// Destination address name. The structure of `dstaddr` block is documented below.
	Dstaddrs RouterPolicyDstaddrArrayInput
	// Destination IP and mask (x.x.x.x/x). The structure of `dst` block is documented below.
	Dsts RouterPolicyDstArrayInput
	// true or false, set this parameter to true when using dynamic forEach + toset to configure and sort sub-tables, please do not set this parameter when configuring static sub-tables.
	DynamicSortSubtable pulumi.StringPtrInput
	// End destination port number (0 - 65535).
	EndPort pulumi.IntPtrInput
	// End source port number (0 - 65535).
	EndSourcePort pulumi.IntPtrInput
	// IP address of the gateway.
	Gateway pulumi.StringPtrInput
	// Enable/disable negation of input device match. Valid values: `enable`, `disable`.
	InputDeviceNegate pulumi.StringPtrInput
	// Incoming interface name. The structure of `inputDevice` block is documented below.
	InputDevices RouterPolicyInputDeviceArrayInput
	// Custom Destination Internet Service name. The structure of `internetServiceCustom` block is documented below.
	InternetServiceCustoms RouterPolicyInternetServiceCustomArrayInput
	// Destination Internet Service ID. The structure of `internetServiceId` block is documented below.
	InternetServiceIds RouterPolicyInternetServiceIdArrayInput
	// Outgoing interface name.
	OutputDevice pulumi.StringPtrInput
	// Protocol number (0 - 255).
	Protocol pulumi.IntPtrInput
	// Sequence number.
	SeqNum pulumi.IntPtrInput
	// Enable/disable negating source address match. Valid values: `enable`, `disable`.
	SrcNegate pulumi.StringPtrInput
	// Source address name. The structure of `srcaddr` block is documented below.
	Srcaddrs RouterPolicySrcaddrArrayInput
	// Source IP and mask (x.x.x.x/x). The structure of `src` block is documented below.
	Srcs RouterPolicySrcArrayInput
	// Start destination port number (0 - 65535).
	StartPort pulumi.IntPtrInput
	// Start source port number (0 - 65535).
	StartSourcePort pulumi.IntPtrInput
	// Enable/disable this policy route. Valid values: `enable`, `disable`.
	Status pulumi.StringPtrInput
	// Type of service bit pattern.
	Tos pulumi.StringPtrInput
	// Type of service evaluated bits.
	TosMask pulumi.StringPtrInput
	// Specifies the vdom to which the resource will be applied when the FortiGate unit is running in VDOM mode. Only one vdom can be specified. If you want to inherit the vdom configuration of the provider, please do not set this parameter.
	Vdomparam pulumi.StringPtrInput
}

func (RouterPolicyState) ElementType() reflect.Type {
	return reflect.TypeOf((*routerPolicyState)(nil)).Elem()
}

type routerPolicyArgs struct {
	// Action of the policy route. Valid values: `deny`, `permit`.
	Action *string `pulumi:"action"`
	// Optional comments.
	Comments *string `pulumi:"comments"`
	// Enable/disable negating destination address match. Valid values: `enable`, `disable`.
	DstNegate *string `pulumi:"dstNegate"`
	// Destination address name. The structure of `dstaddr` block is documented below.
	Dstaddrs []RouterPolicyDstaddr `pulumi:"dstaddrs"`
	// Destination IP and mask (x.x.x.x/x). The structure of `dst` block is documented below.
	Dsts []RouterPolicyDst `pulumi:"dsts"`
	// true or false, set this parameter to true when using dynamic forEach + toset to configure and sort sub-tables, please do not set this parameter when configuring static sub-tables.
	DynamicSortSubtable *string `pulumi:"dynamicSortSubtable"`
	// End destination port number (0 - 65535).
	EndPort *int `pulumi:"endPort"`
	// End source port number (0 - 65535).
	EndSourcePort *int `pulumi:"endSourcePort"`
	// IP address of the gateway.
	Gateway *string `pulumi:"gateway"`
	// Enable/disable negation of input device match. Valid values: `enable`, `disable`.
	InputDeviceNegate *string `pulumi:"inputDeviceNegate"`
	// Incoming interface name. The structure of `inputDevice` block is documented below.
	InputDevices []RouterPolicyInputDevice `pulumi:"inputDevices"`
	// Custom Destination Internet Service name. The structure of `internetServiceCustom` block is documented below.
	InternetServiceCustoms []RouterPolicyInternetServiceCustom `pulumi:"internetServiceCustoms"`
	// Destination Internet Service ID. The structure of `internetServiceId` block is documented below.
	InternetServiceIds []RouterPolicyInternetServiceId `pulumi:"internetServiceIds"`
	// Outgoing interface name.
	OutputDevice *string `pulumi:"outputDevice"`
	// Protocol number (0 - 255).
	Protocol *int `pulumi:"protocol"`
	// Sequence number.
	SeqNum *int `pulumi:"seqNum"`
	// Enable/disable negating source address match. Valid values: `enable`, `disable`.
	SrcNegate *string `pulumi:"srcNegate"`
	// Source address name. The structure of `srcaddr` block is documented below.
	Srcaddrs []RouterPolicySrcaddr `pulumi:"srcaddrs"`
	// Source IP and mask (x.x.x.x/x). The structure of `src` block is documented below.
	Srcs []RouterPolicySrc `pulumi:"srcs"`
	// Start destination port number (0 - 65535).
	StartPort *int `pulumi:"startPort"`
	// Start source port number (0 - 65535).
	StartSourcePort *int `pulumi:"startSourcePort"`
	// Enable/disable this policy route. Valid values: `enable`, `disable`.
	Status *string `pulumi:"status"`
	// Type of service bit pattern.
	Tos *string `pulumi:"tos"`
	// Type of service evaluated bits.
	TosMask *string `pulumi:"tosMask"`
	// Specifies the vdom to which the resource will be applied when the FortiGate unit is running in VDOM mode. Only one vdom can be specified. If you want to inherit the vdom configuration of the provider, please do not set this parameter.
	Vdomparam *string `pulumi:"vdomparam"`
}

// The set of arguments for constructing a RouterPolicy resource.
type RouterPolicyArgs struct {
	// Action of the policy route. Valid values: `deny`, `permit`.
	Action pulumi.StringPtrInput
	// Optional comments.
	Comments pulumi.StringPtrInput
	// Enable/disable negating destination address match. Valid values: `enable`, `disable`.
	DstNegate pulumi.StringPtrInput
	// Destination address name. The structure of `dstaddr` block is documented below.
	Dstaddrs RouterPolicyDstaddrArrayInput
	// Destination IP and mask (x.x.x.x/x). The structure of `dst` block is documented below.
	Dsts RouterPolicyDstArrayInput
	// true or false, set this parameter to true when using dynamic forEach + toset to configure and sort sub-tables, please do not set this parameter when configuring static sub-tables.
	DynamicSortSubtable pulumi.StringPtrInput
	// End destination port number (0 - 65535).
	EndPort pulumi.IntPtrInput
	// End source port number (0 - 65535).
	EndSourcePort pulumi.IntPtrInput
	// IP address of the gateway.
	Gateway pulumi.StringPtrInput
	// Enable/disable negation of input device match. Valid values: `enable`, `disable`.
	InputDeviceNegate pulumi.StringPtrInput
	// Incoming interface name. The structure of `inputDevice` block is documented below.
	InputDevices RouterPolicyInputDeviceArrayInput
	// Custom Destination Internet Service name. The structure of `internetServiceCustom` block is documented below.
	InternetServiceCustoms RouterPolicyInternetServiceCustomArrayInput
	// Destination Internet Service ID. The structure of `internetServiceId` block is documented below.
	InternetServiceIds RouterPolicyInternetServiceIdArrayInput
	// Outgoing interface name.
	OutputDevice pulumi.StringPtrInput
	// Protocol number (0 - 255).
	Protocol pulumi.IntPtrInput
	// Sequence number.
	SeqNum pulumi.IntPtrInput
	// Enable/disable negating source address match. Valid values: `enable`, `disable`.
	SrcNegate pulumi.StringPtrInput
	// Source address name. The structure of `srcaddr` block is documented below.
	Srcaddrs RouterPolicySrcaddrArrayInput
	// Source IP and mask (x.x.x.x/x). The structure of `src` block is documented below.
	Srcs RouterPolicySrcArrayInput
	// Start destination port number (0 - 65535).
	StartPort pulumi.IntPtrInput
	// Start source port number (0 - 65535).
	StartSourcePort pulumi.IntPtrInput
	// Enable/disable this policy route. Valid values: `enable`, `disable`.
	Status pulumi.StringPtrInput
	// Type of service bit pattern.
	Tos pulumi.StringPtrInput
	// Type of service evaluated bits.
	TosMask pulumi.StringPtrInput
	// Specifies the vdom to which the resource will be applied when the FortiGate unit is running in VDOM mode. Only one vdom can be specified. If you want to inherit the vdom configuration of the provider, please do not set this parameter.
	Vdomparam pulumi.StringPtrInput
}

func (RouterPolicyArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*routerPolicyArgs)(nil)).Elem()
}

type RouterPolicyInput interface {
	pulumi.Input

	ToRouterPolicyOutput() RouterPolicyOutput
	ToRouterPolicyOutputWithContext(ctx context.Context) RouterPolicyOutput
}

func (*RouterPolicy) ElementType() reflect.Type {
	return reflect.TypeOf((*RouterPolicy)(nil))
}

func (i *RouterPolicy) ToRouterPolicyOutput() RouterPolicyOutput {
	return i.ToRouterPolicyOutputWithContext(context.Background())
}

func (i *RouterPolicy) ToRouterPolicyOutputWithContext(ctx context.Context) RouterPolicyOutput {
	return pulumi.ToOutputWithContext(ctx, i).(RouterPolicyOutput)
}

func (i *RouterPolicy) ToRouterPolicyPtrOutput() RouterPolicyPtrOutput {
	return i.ToRouterPolicyPtrOutputWithContext(context.Background())
}

func (i *RouterPolicy) ToRouterPolicyPtrOutputWithContext(ctx context.Context) RouterPolicyPtrOutput {
	return pulumi.ToOutputWithContext(ctx, i).(RouterPolicyPtrOutput)
}

type RouterPolicyPtrInput interface {
	pulumi.Input

	ToRouterPolicyPtrOutput() RouterPolicyPtrOutput
	ToRouterPolicyPtrOutputWithContext(ctx context.Context) RouterPolicyPtrOutput
}

type routerPolicyPtrType RouterPolicyArgs

func (*routerPolicyPtrType) ElementType() reflect.Type {
	return reflect.TypeOf((**RouterPolicy)(nil))
}

func (i *routerPolicyPtrType) ToRouterPolicyPtrOutput() RouterPolicyPtrOutput {
	return i.ToRouterPolicyPtrOutputWithContext(context.Background())
}

func (i *routerPolicyPtrType) ToRouterPolicyPtrOutputWithContext(ctx context.Context) RouterPolicyPtrOutput {
	return pulumi.ToOutputWithContext(ctx, i).(RouterPolicyPtrOutput)
}

// RouterPolicyArrayInput is an input type that accepts RouterPolicyArray and RouterPolicyArrayOutput values.
// You can construct a concrete instance of `RouterPolicyArrayInput` via:
//
//          RouterPolicyArray{ RouterPolicyArgs{...} }
type RouterPolicyArrayInput interface {
	pulumi.Input

	ToRouterPolicyArrayOutput() RouterPolicyArrayOutput
	ToRouterPolicyArrayOutputWithContext(context.Context) RouterPolicyArrayOutput
}

type RouterPolicyArray []RouterPolicyInput

func (RouterPolicyArray) ElementType() reflect.Type {
	return reflect.TypeOf(([]*RouterPolicy)(nil))
}

func (i RouterPolicyArray) ToRouterPolicyArrayOutput() RouterPolicyArrayOutput {
	return i.ToRouterPolicyArrayOutputWithContext(context.Background())
}

func (i RouterPolicyArray) ToRouterPolicyArrayOutputWithContext(ctx context.Context) RouterPolicyArrayOutput {
	return pulumi.ToOutputWithContext(ctx, i).(RouterPolicyArrayOutput)
}

// RouterPolicyMapInput is an input type that accepts RouterPolicyMap and RouterPolicyMapOutput values.
// You can construct a concrete instance of `RouterPolicyMapInput` via:
//
//          RouterPolicyMap{ "key": RouterPolicyArgs{...} }
type RouterPolicyMapInput interface {
	pulumi.Input

	ToRouterPolicyMapOutput() RouterPolicyMapOutput
	ToRouterPolicyMapOutputWithContext(context.Context) RouterPolicyMapOutput
}

type RouterPolicyMap map[string]RouterPolicyInput

func (RouterPolicyMap) ElementType() reflect.Type {
	return reflect.TypeOf((map[string]*RouterPolicy)(nil))
}

func (i RouterPolicyMap) ToRouterPolicyMapOutput() RouterPolicyMapOutput {
	return i.ToRouterPolicyMapOutputWithContext(context.Background())
}

func (i RouterPolicyMap) ToRouterPolicyMapOutputWithContext(ctx context.Context) RouterPolicyMapOutput {
	return pulumi.ToOutputWithContext(ctx, i).(RouterPolicyMapOutput)
}

type RouterPolicyOutput struct {
	*pulumi.OutputState
}

func (RouterPolicyOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*RouterPolicy)(nil))
}

func (o RouterPolicyOutput) ToRouterPolicyOutput() RouterPolicyOutput {
	return o
}

func (o RouterPolicyOutput) ToRouterPolicyOutputWithContext(ctx context.Context) RouterPolicyOutput {
	return o
}

func (o RouterPolicyOutput) ToRouterPolicyPtrOutput() RouterPolicyPtrOutput {
	return o.ToRouterPolicyPtrOutputWithContext(context.Background())
}

func (o RouterPolicyOutput) ToRouterPolicyPtrOutputWithContext(ctx context.Context) RouterPolicyPtrOutput {
	return o.ApplyT(func(v RouterPolicy) *RouterPolicy {
		return &v
	}).(RouterPolicyPtrOutput)
}

type RouterPolicyPtrOutput struct {
	*pulumi.OutputState
}

func (RouterPolicyPtrOutput) ElementType() reflect.Type {
	return reflect.TypeOf((**RouterPolicy)(nil))
}

func (o RouterPolicyPtrOutput) ToRouterPolicyPtrOutput() RouterPolicyPtrOutput {
	return o
}

func (o RouterPolicyPtrOutput) ToRouterPolicyPtrOutputWithContext(ctx context.Context) RouterPolicyPtrOutput {
	return o
}

type RouterPolicyArrayOutput struct{ *pulumi.OutputState }

func (RouterPolicyArrayOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*[]RouterPolicy)(nil))
}

func (o RouterPolicyArrayOutput) ToRouterPolicyArrayOutput() RouterPolicyArrayOutput {
	return o
}

func (o RouterPolicyArrayOutput) ToRouterPolicyArrayOutputWithContext(ctx context.Context) RouterPolicyArrayOutput {
	return o
}

func (o RouterPolicyArrayOutput) Index(i pulumi.IntInput) RouterPolicyOutput {
	return pulumi.All(o, i).ApplyT(func(vs []interface{}) RouterPolicy {
		return vs[0].([]RouterPolicy)[vs[1].(int)]
	}).(RouterPolicyOutput)
}

type RouterPolicyMapOutput struct{ *pulumi.OutputState }

func (RouterPolicyMapOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*map[string]RouterPolicy)(nil))
}

func (o RouterPolicyMapOutput) ToRouterPolicyMapOutput() RouterPolicyMapOutput {
	return o
}

func (o RouterPolicyMapOutput) ToRouterPolicyMapOutputWithContext(ctx context.Context) RouterPolicyMapOutput {
	return o
}

func (o RouterPolicyMapOutput) MapIndex(k pulumi.StringInput) RouterPolicyOutput {
	return pulumi.All(o, k).ApplyT(func(vs []interface{}) RouterPolicy {
		return vs[0].(map[string]RouterPolicy)[vs[1].(string)]
	}).(RouterPolicyOutput)
}

func init() {
	pulumi.RegisterOutputType(RouterPolicyOutput{})
	pulumi.RegisterOutputType(RouterPolicyPtrOutput{})
	pulumi.RegisterOutputType(RouterPolicyArrayOutput{})
	pulumi.RegisterOutputType(RouterPolicyMapOutput{})
}
