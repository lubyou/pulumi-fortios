// Code generated by the Pulumi Terraform Bridge (tfgen) Tool DO NOT EDIT.
// *** WARNING: Do not edit by hand unless you're certain you know what you are doing! ***

package fortios

import (
	"context"
	"reflect"

	"github.com/lubyou/pulumi-fortios/sdk/go/fortios/internal"
	"github.com/pulumi/pulumi/sdk/v3/go/pulumi"
	"github.com/pulumi/pulumi/sdk/v3/go/pulumix"
)

type RouterPolicy struct {
	pulumi.CustomResourceState

	Action                 pulumi.StringOutput                          `pulumi:"action"`
	Comments               pulumi.StringPtrOutput                       `pulumi:"comments"`
	DstNegate              pulumi.StringOutput                          `pulumi:"dstNegate"`
	Dstaddrs               RouterPolicyDstaddrArrayOutput               `pulumi:"dstaddrs"`
	Dsts                   RouterPolicyDstArrayOutput                   `pulumi:"dsts"`
	DynamicSortSubtable    pulumi.StringPtrOutput                       `pulumi:"dynamicSortSubtable"`
	EndPort                pulumi.IntOutput                             `pulumi:"endPort"`
	EndSourcePort          pulumi.IntOutput                             `pulumi:"endSourcePort"`
	Gateway                pulumi.StringOutput                          `pulumi:"gateway"`
	GetAllTables           pulumi.StringPtrOutput                       `pulumi:"getAllTables"`
	InputDeviceNegate      pulumi.StringOutput                          `pulumi:"inputDeviceNegate"`
	InputDevices           RouterPolicyInputDeviceArrayOutput           `pulumi:"inputDevices"`
	InternetServiceCustoms RouterPolicyInternetServiceCustomArrayOutput `pulumi:"internetServiceCustoms"`
	InternetServiceIds     RouterPolicyInternetServiceIdArrayOutput     `pulumi:"internetServiceIds"`
	OutputDevice           pulumi.StringOutput                          `pulumi:"outputDevice"`
	Protocol               pulumi.IntOutput                             `pulumi:"protocol"`
	SeqNum                 pulumi.IntOutput                             `pulumi:"seqNum"`
	SrcNegate              pulumi.StringOutput                          `pulumi:"srcNegate"`
	Srcaddrs               RouterPolicySrcaddrArrayOutput               `pulumi:"srcaddrs"`
	Srcs                   RouterPolicySrcArrayOutput                   `pulumi:"srcs"`
	StartPort              pulumi.IntOutput                             `pulumi:"startPort"`
	StartSourcePort        pulumi.IntOutput                             `pulumi:"startSourcePort"`
	Status                 pulumi.StringOutput                          `pulumi:"status"`
	Tos                    pulumi.StringOutput                          `pulumi:"tos"`
	TosMask                pulumi.StringOutput                          `pulumi:"tosMask"`
	Vdomparam              pulumi.StringPtrOutput                       `pulumi:"vdomparam"`
}

// NewRouterPolicy registers a new resource with the given unique name, arguments, and options.
func NewRouterPolicy(ctx *pulumi.Context,
	name string, args *RouterPolicyArgs, opts ...pulumi.ResourceOption) (*RouterPolicy, error) {
	if args == nil {
		args = &RouterPolicyArgs{}
	}

	opts = internal.PkgResourceDefaultOpts(opts)
	var resource RouterPolicy
	err := ctx.RegisterResource("fortios:index/routerPolicy:RouterPolicy", name, args, &resource, opts...)
	if err != nil {
		return nil, err
	}
	return &resource, nil
}

// GetRouterPolicy gets an existing RouterPolicy resource's state with the given name, ID, and optional
// state properties that are used to uniquely qualify the lookup (nil if not required).
func GetRouterPolicy(ctx *pulumi.Context,
	name string, id pulumi.IDInput, state *RouterPolicyState, opts ...pulumi.ResourceOption) (*RouterPolicy, error) {
	var resource RouterPolicy
	err := ctx.ReadResource("fortios:index/routerPolicy:RouterPolicy", name, id, state, &resource, opts...)
	if err != nil {
		return nil, err
	}
	return &resource, nil
}

// Input properties used for looking up and filtering RouterPolicy resources.
type routerPolicyState struct {
	Action                 *string                             `pulumi:"action"`
	Comments               *string                             `pulumi:"comments"`
	DstNegate              *string                             `pulumi:"dstNegate"`
	Dstaddrs               []RouterPolicyDstaddr               `pulumi:"dstaddrs"`
	Dsts                   []RouterPolicyDst                   `pulumi:"dsts"`
	DynamicSortSubtable    *string                             `pulumi:"dynamicSortSubtable"`
	EndPort                *int                                `pulumi:"endPort"`
	EndSourcePort          *int                                `pulumi:"endSourcePort"`
	Gateway                *string                             `pulumi:"gateway"`
	GetAllTables           *string                             `pulumi:"getAllTables"`
	InputDeviceNegate      *string                             `pulumi:"inputDeviceNegate"`
	InputDevices           []RouterPolicyInputDevice           `pulumi:"inputDevices"`
	InternetServiceCustoms []RouterPolicyInternetServiceCustom `pulumi:"internetServiceCustoms"`
	InternetServiceIds     []RouterPolicyInternetServiceId     `pulumi:"internetServiceIds"`
	OutputDevice           *string                             `pulumi:"outputDevice"`
	Protocol               *int                                `pulumi:"protocol"`
	SeqNum                 *int                                `pulumi:"seqNum"`
	SrcNegate              *string                             `pulumi:"srcNegate"`
	Srcaddrs               []RouterPolicySrcaddr               `pulumi:"srcaddrs"`
	Srcs                   []RouterPolicySrc                   `pulumi:"srcs"`
	StartPort              *int                                `pulumi:"startPort"`
	StartSourcePort        *int                                `pulumi:"startSourcePort"`
	Status                 *string                             `pulumi:"status"`
	Tos                    *string                             `pulumi:"tos"`
	TosMask                *string                             `pulumi:"tosMask"`
	Vdomparam              *string                             `pulumi:"vdomparam"`
}

type RouterPolicyState struct {
	Action                 pulumi.StringPtrInput
	Comments               pulumi.StringPtrInput
	DstNegate              pulumi.StringPtrInput
	Dstaddrs               RouterPolicyDstaddrArrayInput
	Dsts                   RouterPolicyDstArrayInput
	DynamicSortSubtable    pulumi.StringPtrInput
	EndPort                pulumi.IntPtrInput
	EndSourcePort          pulumi.IntPtrInput
	Gateway                pulumi.StringPtrInput
	GetAllTables           pulumi.StringPtrInput
	InputDeviceNegate      pulumi.StringPtrInput
	InputDevices           RouterPolicyInputDeviceArrayInput
	InternetServiceCustoms RouterPolicyInternetServiceCustomArrayInput
	InternetServiceIds     RouterPolicyInternetServiceIdArrayInput
	OutputDevice           pulumi.StringPtrInput
	Protocol               pulumi.IntPtrInput
	SeqNum                 pulumi.IntPtrInput
	SrcNegate              pulumi.StringPtrInput
	Srcaddrs               RouterPolicySrcaddrArrayInput
	Srcs                   RouterPolicySrcArrayInput
	StartPort              pulumi.IntPtrInput
	StartSourcePort        pulumi.IntPtrInput
	Status                 pulumi.StringPtrInput
	Tos                    pulumi.StringPtrInput
	TosMask                pulumi.StringPtrInput
	Vdomparam              pulumi.StringPtrInput
}

func (RouterPolicyState) ElementType() reflect.Type {
	return reflect.TypeOf((*routerPolicyState)(nil)).Elem()
}

type routerPolicyArgs struct {
	Action                 *string                             `pulumi:"action"`
	Comments               *string                             `pulumi:"comments"`
	DstNegate              *string                             `pulumi:"dstNegate"`
	Dstaddrs               []RouterPolicyDstaddr               `pulumi:"dstaddrs"`
	Dsts                   []RouterPolicyDst                   `pulumi:"dsts"`
	DynamicSortSubtable    *string                             `pulumi:"dynamicSortSubtable"`
	EndPort                *int                                `pulumi:"endPort"`
	EndSourcePort          *int                                `pulumi:"endSourcePort"`
	Gateway                *string                             `pulumi:"gateway"`
	GetAllTables           *string                             `pulumi:"getAllTables"`
	InputDeviceNegate      *string                             `pulumi:"inputDeviceNegate"`
	InputDevices           []RouterPolicyInputDevice           `pulumi:"inputDevices"`
	InternetServiceCustoms []RouterPolicyInternetServiceCustom `pulumi:"internetServiceCustoms"`
	InternetServiceIds     []RouterPolicyInternetServiceId     `pulumi:"internetServiceIds"`
	OutputDevice           *string                             `pulumi:"outputDevice"`
	Protocol               *int                                `pulumi:"protocol"`
	SeqNum                 *int                                `pulumi:"seqNum"`
	SrcNegate              *string                             `pulumi:"srcNegate"`
	Srcaddrs               []RouterPolicySrcaddr               `pulumi:"srcaddrs"`
	Srcs                   []RouterPolicySrc                   `pulumi:"srcs"`
	StartPort              *int                                `pulumi:"startPort"`
	StartSourcePort        *int                                `pulumi:"startSourcePort"`
	Status                 *string                             `pulumi:"status"`
	Tos                    *string                             `pulumi:"tos"`
	TosMask                *string                             `pulumi:"tosMask"`
	Vdomparam              *string                             `pulumi:"vdomparam"`
}

// The set of arguments for constructing a RouterPolicy resource.
type RouterPolicyArgs struct {
	Action                 pulumi.StringPtrInput
	Comments               pulumi.StringPtrInput
	DstNegate              pulumi.StringPtrInput
	Dstaddrs               RouterPolicyDstaddrArrayInput
	Dsts                   RouterPolicyDstArrayInput
	DynamicSortSubtable    pulumi.StringPtrInput
	EndPort                pulumi.IntPtrInput
	EndSourcePort          pulumi.IntPtrInput
	Gateway                pulumi.StringPtrInput
	GetAllTables           pulumi.StringPtrInput
	InputDeviceNegate      pulumi.StringPtrInput
	InputDevices           RouterPolicyInputDeviceArrayInput
	InternetServiceCustoms RouterPolicyInternetServiceCustomArrayInput
	InternetServiceIds     RouterPolicyInternetServiceIdArrayInput
	OutputDevice           pulumi.StringPtrInput
	Protocol               pulumi.IntPtrInput
	SeqNum                 pulumi.IntPtrInput
	SrcNegate              pulumi.StringPtrInput
	Srcaddrs               RouterPolicySrcaddrArrayInput
	Srcs                   RouterPolicySrcArrayInput
	StartPort              pulumi.IntPtrInput
	StartSourcePort        pulumi.IntPtrInput
	Status                 pulumi.StringPtrInput
	Tos                    pulumi.StringPtrInput
	TosMask                pulumi.StringPtrInput
	Vdomparam              pulumi.StringPtrInput
}

func (RouterPolicyArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*routerPolicyArgs)(nil)).Elem()
}

type RouterPolicyInput interface {
	pulumi.Input

	ToRouterPolicyOutput() RouterPolicyOutput
	ToRouterPolicyOutputWithContext(ctx context.Context) RouterPolicyOutput
}

func (*RouterPolicy) ElementType() reflect.Type {
	return reflect.TypeOf((**RouterPolicy)(nil)).Elem()
}

func (i *RouterPolicy) ToRouterPolicyOutput() RouterPolicyOutput {
	return i.ToRouterPolicyOutputWithContext(context.Background())
}

func (i *RouterPolicy) ToRouterPolicyOutputWithContext(ctx context.Context) RouterPolicyOutput {
	return pulumi.ToOutputWithContext(ctx, i).(RouterPolicyOutput)
}

func (i *RouterPolicy) ToOutput(ctx context.Context) pulumix.Output[*RouterPolicy] {
	return pulumix.Output[*RouterPolicy]{
		OutputState: i.ToRouterPolicyOutputWithContext(ctx).OutputState,
	}
}

// RouterPolicyArrayInput is an input type that accepts RouterPolicyArray and RouterPolicyArrayOutput values.
// You can construct a concrete instance of `RouterPolicyArrayInput` via:
//
//	RouterPolicyArray{ RouterPolicyArgs{...} }
type RouterPolicyArrayInput interface {
	pulumi.Input

	ToRouterPolicyArrayOutput() RouterPolicyArrayOutput
	ToRouterPolicyArrayOutputWithContext(context.Context) RouterPolicyArrayOutput
}

type RouterPolicyArray []RouterPolicyInput

func (RouterPolicyArray) ElementType() reflect.Type {
	return reflect.TypeOf((*[]*RouterPolicy)(nil)).Elem()
}

func (i RouterPolicyArray) ToRouterPolicyArrayOutput() RouterPolicyArrayOutput {
	return i.ToRouterPolicyArrayOutputWithContext(context.Background())
}

func (i RouterPolicyArray) ToRouterPolicyArrayOutputWithContext(ctx context.Context) RouterPolicyArrayOutput {
	return pulumi.ToOutputWithContext(ctx, i).(RouterPolicyArrayOutput)
}

func (i RouterPolicyArray) ToOutput(ctx context.Context) pulumix.Output[[]*RouterPolicy] {
	return pulumix.Output[[]*RouterPolicy]{
		OutputState: i.ToRouterPolicyArrayOutputWithContext(ctx).OutputState,
	}
}

// RouterPolicyMapInput is an input type that accepts RouterPolicyMap and RouterPolicyMapOutput values.
// You can construct a concrete instance of `RouterPolicyMapInput` via:
//
//	RouterPolicyMap{ "key": RouterPolicyArgs{...} }
type RouterPolicyMapInput interface {
	pulumi.Input

	ToRouterPolicyMapOutput() RouterPolicyMapOutput
	ToRouterPolicyMapOutputWithContext(context.Context) RouterPolicyMapOutput
}

type RouterPolicyMap map[string]RouterPolicyInput

func (RouterPolicyMap) ElementType() reflect.Type {
	return reflect.TypeOf((*map[string]*RouterPolicy)(nil)).Elem()
}

func (i RouterPolicyMap) ToRouterPolicyMapOutput() RouterPolicyMapOutput {
	return i.ToRouterPolicyMapOutputWithContext(context.Background())
}

func (i RouterPolicyMap) ToRouterPolicyMapOutputWithContext(ctx context.Context) RouterPolicyMapOutput {
	return pulumi.ToOutputWithContext(ctx, i).(RouterPolicyMapOutput)
}

func (i RouterPolicyMap) ToOutput(ctx context.Context) pulumix.Output[map[string]*RouterPolicy] {
	return pulumix.Output[map[string]*RouterPolicy]{
		OutputState: i.ToRouterPolicyMapOutputWithContext(ctx).OutputState,
	}
}

type RouterPolicyOutput struct{ *pulumi.OutputState }

func (RouterPolicyOutput) ElementType() reflect.Type {
	return reflect.TypeOf((**RouterPolicy)(nil)).Elem()
}

func (o RouterPolicyOutput) ToRouterPolicyOutput() RouterPolicyOutput {
	return o
}

func (o RouterPolicyOutput) ToRouterPolicyOutputWithContext(ctx context.Context) RouterPolicyOutput {
	return o
}

func (o RouterPolicyOutput) ToOutput(ctx context.Context) pulumix.Output[*RouterPolicy] {
	return pulumix.Output[*RouterPolicy]{
		OutputState: o.OutputState,
	}
}

func (o RouterPolicyOutput) Action() pulumi.StringOutput {
	return o.ApplyT(func(v *RouterPolicy) pulumi.StringOutput { return v.Action }).(pulumi.StringOutput)
}

func (o RouterPolicyOutput) Comments() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *RouterPolicy) pulumi.StringPtrOutput { return v.Comments }).(pulumi.StringPtrOutput)
}

func (o RouterPolicyOutput) DstNegate() pulumi.StringOutput {
	return o.ApplyT(func(v *RouterPolicy) pulumi.StringOutput { return v.DstNegate }).(pulumi.StringOutput)
}

func (o RouterPolicyOutput) Dstaddrs() RouterPolicyDstaddrArrayOutput {
	return o.ApplyT(func(v *RouterPolicy) RouterPolicyDstaddrArrayOutput { return v.Dstaddrs }).(RouterPolicyDstaddrArrayOutput)
}

func (o RouterPolicyOutput) Dsts() RouterPolicyDstArrayOutput {
	return o.ApplyT(func(v *RouterPolicy) RouterPolicyDstArrayOutput { return v.Dsts }).(RouterPolicyDstArrayOutput)
}

func (o RouterPolicyOutput) DynamicSortSubtable() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *RouterPolicy) pulumi.StringPtrOutput { return v.DynamicSortSubtable }).(pulumi.StringPtrOutput)
}

func (o RouterPolicyOutput) EndPort() pulumi.IntOutput {
	return o.ApplyT(func(v *RouterPolicy) pulumi.IntOutput { return v.EndPort }).(pulumi.IntOutput)
}

func (o RouterPolicyOutput) EndSourcePort() pulumi.IntOutput {
	return o.ApplyT(func(v *RouterPolicy) pulumi.IntOutput { return v.EndSourcePort }).(pulumi.IntOutput)
}

func (o RouterPolicyOutput) Gateway() pulumi.StringOutput {
	return o.ApplyT(func(v *RouterPolicy) pulumi.StringOutput { return v.Gateway }).(pulumi.StringOutput)
}

func (o RouterPolicyOutput) GetAllTables() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *RouterPolicy) pulumi.StringPtrOutput { return v.GetAllTables }).(pulumi.StringPtrOutput)
}

func (o RouterPolicyOutput) InputDeviceNegate() pulumi.StringOutput {
	return o.ApplyT(func(v *RouterPolicy) pulumi.StringOutput { return v.InputDeviceNegate }).(pulumi.StringOutput)
}

func (o RouterPolicyOutput) InputDevices() RouterPolicyInputDeviceArrayOutput {
	return o.ApplyT(func(v *RouterPolicy) RouterPolicyInputDeviceArrayOutput { return v.InputDevices }).(RouterPolicyInputDeviceArrayOutput)
}

func (o RouterPolicyOutput) InternetServiceCustoms() RouterPolicyInternetServiceCustomArrayOutput {
	return o.ApplyT(func(v *RouterPolicy) RouterPolicyInternetServiceCustomArrayOutput { return v.InternetServiceCustoms }).(RouterPolicyInternetServiceCustomArrayOutput)
}

func (o RouterPolicyOutput) InternetServiceIds() RouterPolicyInternetServiceIdArrayOutput {
	return o.ApplyT(func(v *RouterPolicy) RouterPolicyInternetServiceIdArrayOutput { return v.InternetServiceIds }).(RouterPolicyInternetServiceIdArrayOutput)
}

func (o RouterPolicyOutput) OutputDevice() pulumi.StringOutput {
	return o.ApplyT(func(v *RouterPolicy) pulumi.StringOutput { return v.OutputDevice }).(pulumi.StringOutput)
}

func (o RouterPolicyOutput) Protocol() pulumi.IntOutput {
	return o.ApplyT(func(v *RouterPolicy) pulumi.IntOutput { return v.Protocol }).(pulumi.IntOutput)
}

func (o RouterPolicyOutput) SeqNum() pulumi.IntOutput {
	return o.ApplyT(func(v *RouterPolicy) pulumi.IntOutput { return v.SeqNum }).(pulumi.IntOutput)
}

func (o RouterPolicyOutput) SrcNegate() pulumi.StringOutput {
	return o.ApplyT(func(v *RouterPolicy) pulumi.StringOutput { return v.SrcNegate }).(pulumi.StringOutput)
}

func (o RouterPolicyOutput) Srcaddrs() RouterPolicySrcaddrArrayOutput {
	return o.ApplyT(func(v *RouterPolicy) RouterPolicySrcaddrArrayOutput { return v.Srcaddrs }).(RouterPolicySrcaddrArrayOutput)
}

func (o RouterPolicyOutput) Srcs() RouterPolicySrcArrayOutput {
	return o.ApplyT(func(v *RouterPolicy) RouterPolicySrcArrayOutput { return v.Srcs }).(RouterPolicySrcArrayOutput)
}

func (o RouterPolicyOutput) StartPort() pulumi.IntOutput {
	return o.ApplyT(func(v *RouterPolicy) pulumi.IntOutput { return v.StartPort }).(pulumi.IntOutput)
}

func (o RouterPolicyOutput) StartSourcePort() pulumi.IntOutput {
	return o.ApplyT(func(v *RouterPolicy) pulumi.IntOutput { return v.StartSourcePort }).(pulumi.IntOutput)
}

func (o RouterPolicyOutput) Status() pulumi.StringOutput {
	return o.ApplyT(func(v *RouterPolicy) pulumi.StringOutput { return v.Status }).(pulumi.StringOutput)
}

func (o RouterPolicyOutput) Tos() pulumi.StringOutput {
	return o.ApplyT(func(v *RouterPolicy) pulumi.StringOutput { return v.Tos }).(pulumi.StringOutput)
}

func (o RouterPolicyOutput) TosMask() pulumi.StringOutput {
	return o.ApplyT(func(v *RouterPolicy) pulumi.StringOutput { return v.TosMask }).(pulumi.StringOutput)
}

func (o RouterPolicyOutput) Vdomparam() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *RouterPolicy) pulumi.StringPtrOutput { return v.Vdomparam }).(pulumi.StringPtrOutput)
}

type RouterPolicyArrayOutput struct{ *pulumi.OutputState }

func (RouterPolicyArrayOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*[]*RouterPolicy)(nil)).Elem()
}

func (o RouterPolicyArrayOutput) ToRouterPolicyArrayOutput() RouterPolicyArrayOutput {
	return o
}

func (o RouterPolicyArrayOutput) ToRouterPolicyArrayOutputWithContext(ctx context.Context) RouterPolicyArrayOutput {
	return o
}

func (o RouterPolicyArrayOutput) ToOutput(ctx context.Context) pulumix.Output[[]*RouterPolicy] {
	return pulumix.Output[[]*RouterPolicy]{
		OutputState: o.OutputState,
	}
}

func (o RouterPolicyArrayOutput) Index(i pulumi.IntInput) RouterPolicyOutput {
	return pulumi.All(o, i).ApplyT(func(vs []interface{}) *RouterPolicy {
		return vs[0].([]*RouterPolicy)[vs[1].(int)]
	}).(RouterPolicyOutput)
}

type RouterPolicyMapOutput struct{ *pulumi.OutputState }

func (RouterPolicyMapOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*map[string]*RouterPolicy)(nil)).Elem()
}

func (o RouterPolicyMapOutput) ToRouterPolicyMapOutput() RouterPolicyMapOutput {
	return o
}

func (o RouterPolicyMapOutput) ToRouterPolicyMapOutputWithContext(ctx context.Context) RouterPolicyMapOutput {
	return o
}

func (o RouterPolicyMapOutput) ToOutput(ctx context.Context) pulumix.Output[map[string]*RouterPolicy] {
	return pulumix.Output[map[string]*RouterPolicy]{
		OutputState: o.OutputState,
	}
}

func (o RouterPolicyMapOutput) MapIndex(k pulumi.StringInput) RouterPolicyOutput {
	return pulumi.All(o, k).ApplyT(func(vs []interface{}) *RouterPolicy {
		return vs[0].(map[string]*RouterPolicy)[vs[1].(string)]
	}).(RouterPolicyOutput)
}

func init() {
	pulumi.RegisterInputType(reflect.TypeOf((*RouterPolicyInput)(nil)).Elem(), &RouterPolicy{})
	pulumi.RegisterInputType(reflect.TypeOf((*RouterPolicyArrayInput)(nil)).Elem(), RouterPolicyArray{})
	pulumi.RegisterInputType(reflect.TypeOf((*RouterPolicyMapInput)(nil)).Elem(), RouterPolicyMap{})
	pulumi.RegisterOutputType(RouterPolicyOutput{})
	pulumi.RegisterOutputType(RouterPolicyArrayOutput{})
	pulumi.RegisterOutputType(RouterPolicyMapOutput{})
}
