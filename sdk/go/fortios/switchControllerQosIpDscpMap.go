// Code generated by the Pulumi Terraform Bridge (tfgen) Tool DO NOT EDIT.
// *** WARNING: Do not edit by hand unless you're certain you know what you are doing! ***

package fortios

import (
	"context"
	"reflect"

	"github.com/lubyou/pulumi-fortios/sdk/go/fortios/internal"
	"github.com/pulumi/pulumi/sdk/v3/go/pulumi"
	"github.com/pulumi/pulumi/sdk/v3/go/pulumix"
)

type SwitchControllerQosIpDscpMap struct {
	pulumi.CustomResourceState

	Description         pulumi.StringOutput                            `pulumi:"description"`
	DynamicSortSubtable pulumi.StringPtrOutput                         `pulumi:"dynamicSortSubtable"`
	GetAllTables        pulumi.StringPtrOutput                         `pulumi:"getAllTables"`
	Maps                SwitchControllerQosIpDscpMapMapTypeArrayOutput `pulumi:"maps"`
	Name                pulumi.StringOutput                            `pulumi:"name"`
	Vdomparam           pulumi.StringPtrOutput                         `pulumi:"vdomparam"`
}

// NewSwitchControllerQosIpDscpMap registers a new resource with the given unique name, arguments, and options.
func NewSwitchControllerQosIpDscpMap(ctx *pulumi.Context,
	name string, args *SwitchControllerQosIpDscpMapArgs, opts ...pulumi.ResourceOption) (*SwitchControllerQosIpDscpMap, error) {
	if args == nil {
		args = &SwitchControllerQosIpDscpMapArgs{}
	}

	opts = internal.PkgResourceDefaultOpts(opts)
	var resource SwitchControllerQosIpDscpMap
	err := ctx.RegisterResource("fortios:index/switchControllerQosIpDscpMap:SwitchControllerQosIpDscpMap", name, args, &resource, opts...)
	if err != nil {
		return nil, err
	}
	return &resource, nil
}

// GetSwitchControllerQosIpDscpMap gets an existing SwitchControllerQosIpDscpMap resource's state with the given name, ID, and optional
// state properties that are used to uniquely qualify the lookup (nil if not required).
func GetSwitchControllerQosIpDscpMap(ctx *pulumi.Context,
	name string, id pulumi.IDInput, state *SwitchControllerQosIpDscpMapState, opts ...pulumi.ResourceOption) (*SwitchControllerQosIpDscpMap, error) {
	var resource SwitchControllerQosIpDscpMap
	err := ctx.ReadResource("fortios:index/switchControllerQosIpDscpMap:SwitchControllerQosIpDscpMap", name, id, state, &resource, opts...)
	if err != nil {
		return nil, err
	}
	return &resource, nil
}

// Input properties used for looking up and filtering SwitchControllerQosIpDscpMap resources.
type switchControllerQosIpDscpMapState struct {
	Description         *string                               `pulumi:"description"`
	DynamicSortSubtable *string                               `pulumi:"dynamicSortSubtable"`
	GetAllTables        *string                               `pulumi:"getAllTables"`
	Maps                []SwitchControllerQosIpDscpMapMapType `pulumi:"maps"`
	Name                *string                               `pulumi:"name"`
	Vdomparam           *string                               `pulumi:"vdomparam"`
}

type SwitchControllerQosIpDscpMapState struct {
	Description         pulumi.StringPtrInput
	DynamicSortSubtable pulumi.StringPtrInput
	GetAllTables        pulumi.StringPtrInput
	Maps                SwitchControllerQosIpDscpMapMapTypeArrayInput
	Name                pulumi.StringPtrInput
	Vdomparam           pulumi.StringPtrInput
}

func (SwitchControllerQosIpDscpMapState) ElementType() reflect.Type {
	return reflect.TypeOf((*switchControllerQosIpDscpMapState)(nil)).Elem()
}

type switchControllerQosIpDscpMapArgs struct {
	Description         *string                               `pulumi:"description"`
	DynamicSortSubtable *string                               `pulumi:"dynamicSortSubtable"`
	GetAllTables        *string                               `pulumi:"getAllTables"`
	Maps                []SwitchControllerQosIpDscpMapMapType `pulumi:"maps"`
	Name                *string                               `pulumi:"name"`
	Vdomparam           *string                               `pulumi:"vdomparam"`
}

// The set of arguments for constructing a SwitchControllerQosIpDscpMap resource.
type SwitchControllerQosIpDscpMapArgs struct {
	Description         pulumi.StringPtrInput
	DynamicSortSubtable pulumi.StringPtrInput
	GetAllTables        pulumi.StringPtrInput
	Maps                SwitchControllerQosIpDscpMapMapTypeArrayInput
	Name                pulumi.StringPtrInput
	Vdomparam           pulumi.StringPtrInput
}

func (SwitchControllerQosIpDscpMapArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*switchControllerQosIpDscpMapArgs)(nil)).Elem()
}

type SwitchControllerQosIpDscpMapInput interface {
	pulumi.Input

	ToSwitchControllerQosIpDscpMapOutput() SwitchControllerQosIpDscpMapOutput
	ToSwitchControllerQosIpDscpMapOutputWithContext(ctx context.Context) SwitchControllerQosIpDscpMapOutput
}

func (*SwitchControllerQosIpDscpMap) ElementType() reflect.Type {
	return reflect.TypeOf((**SwitchControllerQosIpDscpMap)(nil)).Elem()
}

func (i *SwitchControllerQosIpDscpMap) ToSwitchControllerQosIpDscpMapOutput() SwitchControllerQosIpDscpMapOutput {
	return i.ToSwitchControllerQosIpDscpMapOutputWithContext(context.Background())
}

func (i *SwitchControllerQosIpDscpMap) ToSwitchControllerQosIpDscpMapOutputWithContext(ctx context.Context) SwitchControllerQosIpDscpMapOutput {
	return pulumi.ToOutputWithContext(ctx, i).(SwitchControllerQosIpDscpMapOutput)
}

func (i *SwitchControllerQosIpDscpMap) ToOutput(ctx context.Context) pulumix.Output[*SwitchControllerQosIpDscpMap] {
	return pulumix.Output[*SwitchControllerQosIpDscpMap]{
		OutputState: i.ToSwitchControllerQosIpDscpMapOutputWithContext(ctx).OutputState,
	}
}

// SwitchControllerQosIpDscpMapArrayInput is an input type that accepts SwitchControllerQosIpDscpMapArray and SwitchControllerQosIpDscpMapArrayOutput values.
// You can construct a concrete instance of `SwitchControllerQosIpDscpMapArrayInput` via:
//
//	SwitchControllerQosIpDscpMapArray{ SwitchControllerQosIpDscpMapArgs{...} }
type SwitchControllerQosIpDscpMapArrayInput interface {
	pulumi.Input

	ToSwitchControllerQosIpDscpMapArrayOutput() SwitchControllerQosIpDscpMapArrayOutput
	ToSwitchControllerQosIpDscpMapArrayOutputWithContext(context.Context) SwitchControllerQosIpDscpMapArrayOutput
}

type SwitchControllerQosIpDscpMapArray []SwitchControllerQosIpDscpMapInput

func (SwitchControllerQosIpDscpMapArray) ElementType() reflect.Type {
	return reflect.TypeOf((*[]*SwitchControllerQosIpDscpMap)(nil)).Elem()
}

func (i SwitchControllerQosIpDscpMapArray) ToSwitchControllerQosIpDscpMapArrayOutput() SwitchControllerQosIpDscpMapArrayOutput {
	return i.ToSwitchControllerQosIpDscpMapArrayOutputWithContext(context.Background())
}

func (i SwitchControllerQosIpDscpMapArray) ToSwitchControllerQosIpDscpMapArrayOutputWithContext(ctx context.Context) SwitchControllerQosIpDscpMapArrayOutput {
	return pulumi.ToOutputWithContext(ctx, i).(SwitchControllerQosIpDscpMapArrayOutput)
}

func (i SwitchControllerQosIpDscpMapArray) ToOutput(ctx context.Context) pulumix.Output[[]*SwitchControllerQosIpDscpMap] {
	return pulumix.Output[[]*SwitchControllerQosIpDscpMap]{
		OutputState: i.ToSwitchControllerQosIpDscpMapArrayOutputWithContext(ctx).OutputState,
	}
}

// SwitchControllerQosIpDscpMapMapInput is an input type that accepts SwitchControllerQosIpDscpMapMap and SwitchControllerQosIpDscpMapMapOutput values.
// You can construct a concrete instance of `SwitchControllerQosIpDscpMapMapInput` via:
//
//	SwitchControllerQosIpDscpMapMap{ "key": SwitchControllerQosIpDscpMapArgs{...} }
type SwitchControllerQosIpDscpMapMapInput interface {
	pulumi.Input

	ToSwitchControllerQosIpDscpMapMapOutput() SwitchControllerQosIpDscpMapMapOutput
	ToSwitchControllerQosIpDscpMapMapOutputWithContext(context.Context) SwitchControllerQosIpDscpMapMapOutput
}

type SwitchControllerQosIpDscpMapMap map[string]SwitchControllerQosIpDscpMapInput

func (SwitchControllerQosIpDscpMapMap) ElementType() reflect.Type {
	return reflect.TypeOf((*map[string]*SwitchControllerQosIpDscpMap)(nil)).Elem()
}

func (i SwitchControllerQosIpDscpMapMap) ToSwitchControllerQosIpDscpMapMapOutput() SwitchControllerQosIpDscpMapMapOutput {
	return i.ToSwitchControllerQosIpDscpMapMapOutputWithContext(context.Background())
}

func (i SwitchControllerQosIpDscpMapMap) ToSwitchControllerQosIpDscpMapMapOutputWithContext(ctx context.Context) SwitchControllerQosIpDscpMapMapOutput {
	return pulumi.ToOutputWithContext(ctx, i).(SwitchControllerQosIpDscpMapMapOutput)
}

func (i SwitchControllerQosIpDscpMapMap) ToOutput(ctx context.Context) pulumix.Output[map[string]*SwitchControllerQosIpDscpMap] {
	return pulumix.Output[map[string]*SwitchControllerQosIpDscpMap]{
		OutputState: i.ToSwitchControllerQosIpDscpMapMapOutputWithContext(ctx).OutputState,
	}
}

type SwitchControllerQosIpDscpMapOutput struct{ *pulumi.OutputState }

func (SwitchControllerQosIpDscpMapOutput) ElementType() reflect.Type {
	return reflect.TypeOf((**SwitchControllerQosIpDscpMap)(nil)).Elem()
}

func (o SwitchControllerQosIpDscpMapOutput) ToSwitchControllerQosIpDscpMapOutput() SwitchControllerQosIpDscpMapOutput {
	return o
}

func (o SwitchControllerQosIpDscpMapOutput) ToSwitchControllerQosIpDscpMapOutputWithContext(ctx context.Context) SwitchControllerQosIpDscpMapOutput {
	return o
}

func (o SwitchControllerQosIpDscpMapOutput) ToOutput(ctx context.Context) pulumix.Output[*SwitchControllerQosIpDscpMap] {
	return pulumix.Output[*SwitchControllerQosIpDscpMap]{
		OutputState: o.OutputState,
	}
}

func (o SwitchControllerQosIpDscpMapOutput) Description() pulumi.StringOutput {
	return o.ApplyT(func(v *SwitchControllerQosIpDscpMap) pulumi.StringOutput { return v.Description }).(pulumi.StringOutput)
}

func (o SwitchControllerQosIpDscpMapOutput) DynamicSortSubtable() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *SwitchControllerQosIpDscpMap) pulumi.StringPtrOutput { return v.DynamicSortSubtable }).(pulumi.StringPtrOutput)
}

func (o SwitchControllerQosIpDscpMapOutput) GetAllTables() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *SwitchControllerQosIpDscpMap) pulumi.StringPtrOutput { return v.GetAllTables }).(pulumi.StringPtrOutput)
}

func (o SwitchControllerQosIpDscpMapOutput) Maps() SwitchControllerQosIpDscpMapMapTypeArrayOutput {
	return o.ApplyT(func(v *SwitchControllerQosIpDscpMap) SwitchControllerQosIpDscpMapMapTypeArrayOutput { return v.Maps }).(SwitchControllerQosIpDscpMapMapTypeArrayOutput)
}

func (o SwitchControllerQosIpDscpMapOutput) Name() pulumi.StringOutput {
	return o.ApplyT(func(v *SwitchControllerQosIpDscpMap) pulumi.StringOutput { return v.Name }).(pulumi.StringOutput)
}

func (o SwitchControllerQosIpDscpMapOutput) Vdomparam() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *SwitchControllerQosIpDscpMap) pulumi.StringPtrOutput { return v.Vdomparam }).(pulumi.StringPtrOutput)
}

type SwitchControllerQosIpDscpMapArrayOutput struct{ *pulumi.OutputState }

func (SwitchControllerQosIpDscpMapArrayOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*[]*SwitchControllerQosIpDscpMap)(nil)).Elem()
}

func (o SwitchControllerQosIpDscpMapArrayOutput) ToSwitchControllerQosIpDscpMapArrayOutput() SwitchControllerQosIpDscpMapArrayOutput {
	return o
}

func (o SwitchControllerQosIpDscpMapArrayOutput) ToSwitchControllerQosIpDscpMapArrayOutputWithContext(ctx context.Context) SwitchControllerQosIpDscpMapArrayOutput {
	return o
}

func (o SwitchControllerQosIpDscpMapArrayOutput) ToOutput(ctx context.Context) pulumix.Output[[]*SwitchControllerQosIpDscpMap] {
	return pulumix.Output[[]*SwitchControllerQosIpDscpMap]{
		OutputState: o.OutputState,
	}
}

func (o SwitchControllerQosIpDscpMapArrayOutput) Index(i pulumi.IntInput) SwitchControllerQosIpDscpMapOutput {
	return pulumi.All(o, i).ApplyT(func(vs []interface{}) *SwitchControllerQosIpDscpMap {
		return vs[0].([]*SwitchControllerQosIpDscpMap)[vs[1].(int)]
	}).(SwitchControllerQosIpDscpMapOutput)
}

type SwitchControllerQosIpDscpMapMapOutput struct{ *pulumi.OutputState }

func (SwitchControllerQosIpDscpMapMapOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*map[string]*SwitchControllerQosIpDscpMap)(nil)).Elem()
}

func (o SwitchControllerQosIpDscpMapMapOutput) ToSwitchControllerQosIpDscpMapMapOutput() SwitchControllerQosIpDscpMapMapOutput {
	return o
}

func (o SwitchControllerQosIpDscpMapMapOutput) ToSwitchControllerQosIpDscpMapMapOutputWithContext(ctx context.Context) SwitchControllerQosIpDscpMapMapOutput {
	return o
}

func (o SwitchControllerQosIpDscpMapMapOutput) ToOutput(ctx context.Context) pulumix.Output[map[string]*SwitchControllerQosIpDscpMap] {
	return pulumix.Output[map[string]*SwitchControllerQosIpDscpMap]{
		OutputState: o.OutputState,
	}
}

func (o SwitchControllerQosIpDscpMapMapOutput) MapIndex(k pulumi.StringInput) SwitchControllerQosIpDscpMapOutput {
	return pulumi.All(o, k).ApplyT(func(vs []interface{}) *SwitchControllerQosIpDscpMap {
		return vs[0].(map[string]*SwitchControllerQosIpDscpMap)[vs[1].(string)]
	}).(SwitchControllerQosIpDscpMapOutput)
}

func init() {
	pulumi.RegisterInputType(reflect.TypeOf((*SwitchControllerQosIpDscpMapInput)(nil)).Elem(), &SwitchControllerQosIpDscpMap{})
	pulumi.RegisterInputType(reflect.TypeOf((*SwitchControllerQosIpDscpMapArrayInput)(nil)).Elem(), SwitchControllerQosIpDscpMapArray{})
	pulumi.RegisterInputType(reflect.TypeOf((*SwitchControllerQosIpDscpMapMapInput)(nil)).Elem(), SwitchControllerQosIpDscpMapMap{})
	pulumi.RegisterOutputType(SwitchControllerQosIpDscpMapOutput{})
	pulumi.RegisterOutputType(SwitchControllerQosIpDscpMapArrayOutput{})
	pulumi.RegisterOutputType(SwitchControllerQosIpDscpMapMapOutput{})
}
