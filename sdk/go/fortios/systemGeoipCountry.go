// Code generated by the Pulumi Terraform Bridge (tfgen) Tool DO NOT EDIT.
// *** WARNING: Do not edit by hand unless you're certain you know what you are doing! ***

package fortios

import (
	"context"
	"reflect"

	"github.com/pulumi/pulumi/sdk/v3/go/pulumi"
)

type SystemGeoipCountry struct {
	pulumi.CustomResourceState

	Fosid     pulumi.StringOutput    `pulumi:"fosid"`
	Name      pulumi.StringOutput    `pulumi:"name"`
	Vdomparam pulumi.StringPtrOutput `pulumi:"vdomparam"`
}

// NewSystemGeoipCountry registers a new resource with the given unique name, arguments, and options.
func NewSystemGeoipCountry(ctx *pulumi.Context,
	name string, args *SystemGeoipCountryArgs, opts ...pulumi.ResourceOption) (*SystemGeoipCountry, error) {
	if args == nil {
		args = &SystemGeoipCountryArgs{}
	}

	opts = pkgResourceDefaultOpts(opts)
	var resource SystemGeoipCountry
	err := ctx.RegisterResource("fortios:index/systemGeoipCountry:SystemGeoipCountry", name, args, &resource, opts...)
	if err != nil {
		return nil, err
	}
	return &resource, nil
}

// GetSystemGeoipCountry gets an existing SystemGeoipCountry resource's state with the given name, ID, and optional
// state properties that are used to uniquely qualify the lookup (nil if not required).
func GetSystemGeoipCountry(ctx *pulumi.Context,
	name string, id pulumi.IDInput, state *SystemGeoipCountryState, opts ...pulumi.ResourceOption) (*SystemGeoipCountry, error) {
	var resource SystemGeoipCountry
	err := ctx.ReadResource("fortios:index/systemGeoipCountry:SystemGeoipCountry", name, id, state, &resource, opts...)
	if err != nil {
		return nil, err
	}
	return &resource, nil
}

// Input properties used for looking up and filtering SystemGeoipCountry resources.
type systemGeoipCountryState struct {
	Fosid     *string `pulumi:"fosid"`
	Name      *string `pulumi:"name"`
	Vdomparam *string `pulumi:"vdomparam"`
}

type SystemGeoipCountryState struct {
	Fosid     pulumi.StringPtrInput
	Name      pulumi.StringPtrInput
	Vdomparam pulumi.StringPtrInput
}

func (SystemGeoipCountryState) ElementType() reflect.Type {
	return reflect.TypeOf((*systemGeoipCountryState)(nil)).Elem()
}

type systemGeoipCountryArgs struct {
	Fosid     *string `pulumi:"fosid"`
	Name      *string `pulumi:"name"`
	Vdomparam *string `pulumi:"vdomparam"`
}

// The set of arguments for constructing a SystemGeoipCountry resource.
type SystemGeoipCountryArgs struct {
	Fosid     pulumi.StringPtrInput
	Name      pulumi.StringPtrInput
	Vdomparam pulumi.StringPtrInput
}

func (SystemGeoipCountryArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*systemGeoipCountryArgs)(nil)).Elem()
}

type SystemGeoipCountryInput interface {
	pulumi.Input

	ToSystemGeoipCountryOutput() SystemGeoipCountryOutput
	ToSystemGeoipCountryOutputWithContext(ctx context.Context) SystemGeoipCountryOutput
}

func (*SystemGeoipCountry) ElementType() reflect.Type {
	return reflect.TypeOf((**SystemGeoipCountry)(nil)).Elem()
}

func (i *SystemGeoipCountry) ToSystemGeoipCountryOutput() SystemGeoipCountryOutput {
	return i.ToSystemGeoipCountryOutputWithContext(context.Background())
}

func (i *SystemGeoipCountry) ToSystemGeoipCountryOutputWithContext(ctx context.Context) SystemGeoipCountryOutput {
	return pulumi.ToOutputWithContext(ctx, i).(SystemGeoipCountryOutput)
}

// SystemGeoipCountryArrayInput is an input type that accepts SystemGeoipCountryArray and SystemGeoipCountryArrayOutput values.
// You can construct a concrete instance of `SystemGeoipCountryArrayInput` via:
//
//	SystemGeoipCountryArray{ SystemGeoipCountryArgs{...} }
type SystemGeoipCountryArrayInput interface {
	pulumi.Input

	ToSystemGeoipCountryArrayOutput() SystemGeoipCountryArrayOutput
	ToSystemGeoipCountryArrayOutputWithContext(context.Context) SystemGeoipCountryArrayOutput
}

type SystemGeoipCountryArray []SystemGeoipCountryInput

func (SystemGeoipCountryArray) ElementType() reflect.Type {
	return reflect.TypeOf((*[]*SystemGeoipCountry)(nil)).Elem()
}

func (i SystemGeoipCountryArray) ToSystemGeoipCountryArrayOutput() SystemGeoipCountryArrayOutput {
	return i.ToSystemGeoipCountryArrayOutputWithContext(context.Background())
}

func (i SystemGeoipCountryArray) ToSystemGeoipCountryArrayOutputWithContext(ctx context.Context) SystemGeoipCountryArrayOutput {
	return pulumi.ToOutputWithContext(ctx, i).(SystemGeoipCountryArrayOutput)
}

// SystemGeoipCountryMapInput is an input type that accepts SystemGeoipCountryMap and SystemGeoipCountryMapOutput values.
// You can construct a concrete instance of `SystemGeoipCountryMapInput` via:
//
//	SystemGeoipCountryMap{ "key": SystemGeoipCountryArgs{...} }
type SystemGeoipCountryMapInput interface {
	pulumi.Input

	ToSystemGeoipCountryMapOutput() SystemGeoipCountryMapOutput
	ToSystemGeoipCountryMapOutputWithContext(context.Context) SystemGeoipCountryMapOutput
}

type SystemGeoipCountryMap map[string]SystemGeoipCountryInput

func (SystemGeoipCountryMap) ElementType() reflect.Type {
	return reflect.TypeOf((*map[string]*SystemGeoipCountry)(nil)).Elem()
}

func (i SystemGeoipCountryMap) ToSystemGeoipCountryMapOutput() SystemGeoipCountryMapOutput {
	return i.ToSystemGeoipCountryMapOutputWithContext(context.Background())
}

func (i SystemGeoipCountryMap) ToSystemGeoipCountryMapOutputWithContext(ctx context.Context) SystemGeoipCountryMapOutput {
	return pulumi.ToOutputWithContext(ctx, i).(SystemGeoipCountryMapOutput)
}

type SystemGeoipCountryOutput struct{ *pulumi.OutputState }

func (SystemGeoipCountryOutput) ElementType() reflect.Type {
	return reflect.TypeOf((**SystemGeoipCountry)(nil)).Elem()
}

func (o SystemGeoipCountryOutput) ToSystemGeoipCountryOutput() SystemGeoipCountryOutput {
	return o
}

func (o SystemGeoipCountryOutput) ToSystemGeoipCountryOutputWithContext(ctx context.Context) SystemGeoipCountryOutput {
	return o
}

func (o SystemGeoipCountryOutput) Fosid() pulumi.StringOutput {
	return o.ApplyT(func(v *SystemGeoipCountry) pulumi.StringOutput { return v.Fosid }).(pulumi.StringOutput)
}

func (o SystemGeoipCountryOutput) Name() pulumi.StringOutput {
	return o.ApplyT(func(v *SystemGeoipCountry) pulumi.StringOutput { return v.Name }).(pulumi.StringOutput)
}

func (o SystemGeoipCountryOutput) Vdomparam() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *SystemGeoipCountry) pulumi.StringPtrOutput { return v.Vdomparam }).(pulumi.StringPtrOutput)
}

type SystemGeoipCountryArrayOutput struct{ *pulumi.OutputState }

func (SystemGeoipCountryArrayOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*[]*SystemGeoipCountry)(nil)).Elem()
}

func (o SystemGeoipCountryArrayOutput) ToSystemGeoipCountryArrayOutput() SystemGeoipCountryArrayOutput {
	return o
}

func (o SystemGeoipCountryArrayOutput) ToSystemGeoipCountryArrayOutputWithContext(ctx context.Context) SystemGeoipCountryArrayOutput {
	return o
}

func (o SystemGeoipCountryArrayOutput) Index(i pulumi.IntInput) SystemGeoipCountryOutput {
	return pulumi.All(o, i).ApplyT(func(vs []interface{}) *SystemGeoipCountry {
		return vs[0].([]*SystemGeoipCountry)[vs[1].(int)]
	}).(SystemGeoipCountryOutput)
}

type SystemGeoipCountryMapOutput struct{ *pulumi.OutputState }

func (SystemGeoipCountryMapOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*map[string]*SystemGeoipCountry)(nil)).Elem()
}

func (o SystemGeoipCountryMapOutput) ToSystemGeoipCountryMapOutput() SystemGeoipCountryMapOutput {
	return o
}

func (o SystemGeoipCountryMapOutput) ToSystemGeoipCountryMapOutputWithContext(ctx context.Context) SystemGeoipCountryMapOutput {
	return o
}

func (o SystemGeoipCountryMapOutput) MapIndex(k pulumi.StringInput) SystemGeoipCountryOutput {
	return pulumi.All(o, k).ApplyT(func(vs []interface{}) *SystemGeoipCountry {
		return vs[0].(map[string]*SystemGeoipCountry)[vs[1].(string)]
	}).(SystemGeoipCountryOutput)
}

func init() {
	pulumi.RegisterInputType(reflect.TypeOf((*SystemGeoipCountryInput)(nil)).Elem(), &SystemGeoipCountry{})
	pulumi.RegisterInputType(reflect.TypeOf((*SystemGeoipCountryArrayInput)(nil)).Elem(), SystemGeoipCountryArray{})
	pulumi.RegisterInputType(reflect.TypeOf((*SystemGeoipCountryMapInput)(nil)).Elem(), SystemGeoipCountryMap{})
	pulumi.RegisterOutputType(SystemGeoipCountryOutput{})
	pulumi.RegisterOutputType(SystemGeoipCountryArrayOutput{})
	pulumi.RegisterOutputType(SystemGeoipCountryMapOutput{})
}
