// Code generated by the Pulumi Terraform Bridge (tfgen) Tool DO NOT EDIT.
// *** WARNING: Do not edit by hand unless you're certain you know what you are doing! ***

package fortios

import (
	"context"
	"reflect"

	"errors"
	"github.com/lubyou/pulumi-fortios/sdk/go/fortios/internal"
	"github.com/pulumi/pulumi/sdk/v3/go/pulumi"
	"github.com/pulumi/pulumi/sdk/v3/go/pulumix"
)

type FirewallScheduleRecurring struct {
	pulumi.CustomResourceState

	Color        pulumi.IntOutput       `pulumi:"color"`
	Day          pulumi.StringOutput    `pulumi:"day"`
	End          pulumi.StringOutput    `pulumi:"end"`
	FabricObject pulumi.StringOutput    `pulumi:"fabricObject"`
	Name         pulumi.StringOutput    `pulumi:"name"`
	Start        pulumi.StringOutput    `pulumi:"start"`
	Vdomparam    pulumi.StringPtrOutput `pulumi:"vdomparam"`
}

// NewFirewallScheduleRecurring registers a new resource with the given unique name, arguments, and options.
func NewFirewallScheduleRecurring(ctx *pulumi.Context,
	name string, args *FirewallScheduleRecurringArgs, opts ...pulumi.ResourceOption) (*FirewallScheduleRecurring, error) {
	if args == nil {
		return nil, errors.New("missing one or more required arguments")
	}

	if args.End == nil {
		return nil, errors.New("invalid value for required argument 'End'")
	}
	if args.Start == nil {
		return nil, errors.New("invalid value for required argument 'Start'")
	}
	opts = internal.PkgResourceDefaultOpts(opts)
	var resource FirewallScheduleRecurring
	err := ctx.RegisterResource("fortios:index/firewallScheduleRecurring:FirewallScheduleRecurring", name, args, &resource, opts...)
	if err != nil {
		return nil, err
	}
	return &resource, nil
}

// GetFirewallScheduleRecurring gets an existing FirewallScheduleRecurring resource's state with the given name, ID, and optional
// state properties that are used to uniquely qualify the lookup (nil if not required).
func GetFirewallScheduleRecurring(ctx *pulumi.Context,
	name string, id pulumi.IDInput, state *FirewallScheduleRecurringState, opts ...pulumi.ResourceOption) (*FirewallScheduleRecurring, error) {
	var resource FirewallScheduleRecurring
	err := ctx.ReadResource("fortios:index/firewallScheduleRecurring:FirewallScheduleRecurring", name, id, state, &resource, opts...)
	if err != nil {
		return nil, err
	}
	return &resource, nil
}

// Input properties used for looking up and filtering FirewallScheduleRecurring resources.
type firewallScheduleRecurringState struct {
	Color        *int    `pulumi:"color"`
	Day          *string `pulumi:"day"`
	End          *string `pulumi:"end"`
	FabricObject *string `pulumi:"fabricObject"`
	Name         *string `pulumi:"name"`
	Start        *string `pulumi:"start"`
	Vdomparam    *string `pulumi:"vdomparam"`
}

type FirewallScheduleRecurringState struct {
	Color        pulumi.IntPtrInput
	Day          pulumi.StringPtrInput
	End          pulumi.StringPtrInput
	FabricObject pulumi.StringPtrInput
	Name         pulumi.StringPtrInput
	Start        pulumi.StringPtrInput
	Vdomparam    pulumi.StringPtrInput
}

func (FirewallScheduleRecurringState) ElementType() reflect.Type {
	return reflect.TypeOf((*firewallScheduleRecurringState)(nil)).Elem()
}

type firewallScheduleRecurringArgs struct {
	Color        *int    `pulumi:"color"`
	Day          *string `pulumi:"day"`
	End          string  `pulumi:"end"`
	FabricObject *string `pulumi:"fabricObject"`
	Name         *string `pulumi:"name"`
	Start        string  `pulumi:"start"`
	Vdomparam    *string `pulumi:"vdomparam"`
}

// The set of arguments for constructing a FirewallScheduleRecurring resource.
type FirewallScheduleRecurringArgs struct {
	Color        pulumi.IntPtrInput
	Day          pulumi.StringPtrInput
	End          pulumi.StringInput
	FabricObject pulumi.StringPtrInput
	Name         pulumi.StringPtrInput
	Start        pulumi.StringInput
	Vdomparam    pulumi.StringPtrInput
}

func (FirewallScheduleRecurringArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*firewallScheduleRecurringArgs)(nil)).Elem()
}

type FirewallScheduleRecurringInput interface {
	pulumi.Input

	ToFirewallScheduleRecurringOutput() FirewallScheduleRecurringOutput
	ToFirewallScheduleRecurringOutputWithContext(ctx context.Context) FirewallScheduleRecurringOutput
}

func (*FirewallScheduleRecurring) ElementType() reflect.Type {
	return reflect.TypeOf((**FirewallScheduleRecurring)(nil)).Elem()
}

func (i *FirewallScheduleRecurring) ToFirewallScheduleRecurringOutput() FirewallScheduleRecurringOutput {
	return i.ToFirewallScheduleRecurringOutputWithContext(context.Background())
}

func (i *FirewallScheduleRecurring) ToFirewallScheduleRecurringOutputWithContext(ctx context.Context) FirewallScheduleRecurringOutput {
	return pulumi.ToOutputWithContext(ctx, i).(FirewallScheduleRecurringOutput)
}

func (i *FirewallScheduleRecurring) ToOutput(ctx context.Context) pulumix.Output[*FirewallScheduleRecurring] {
	return pulumix.Output[*FirewallScheduleRecurring]{
		OutputState: i.ToFirewallScheduleRecurringOutputWithContext(ctx).OutputState,
	}
}

// FirewallScheduleRecurringArrayInput is an input type that accepts FirewallScheduleRecurringArray and FirewallScheduleRecurringArrayOutput values.
// You can construct a concrete instance of `FirewallScheduleRecurringArrayInput` via:
//
//	FirewallScheduleRecurringArray{ FirewallScheduleRecurringArgs{...} }
type FirewallScheduleRecurringArrayInput interface {
	pulumi.Input

	ToFirewallScheduleRecurringArrayOutput() FirewallScheduleRecurringArrayOutput
	ToFirewallScheduleRecurringArrayOutputWithContext(context.Context) FirewallScheduleRecurringArrayOutput
}

type FirewallScheduleRecurringArray []FirewallScheduleRecurringInput

func (FirewallScheduleRecurringArray) ElementType() reflect.Type {
	return reflect.TypeOf((*[]*FirewallScheduleRecurring)(nil)).Elem()
}

func (i FirewallScheduleRecurringArray) ToFirewallScheduleRecurringArrayOutput() FirewallScheduleRecurringArrayOutput {
	return i.ToFirewallScheduleRecurringArrayOutputWithContext(context.Background())
}

func (i FirewallScheduleRecurringArray) ToFirewallScheduleRecurringArrayOutputWithContext(ctx context.Context) FirewallScheduleRecurringArrayOutput {
	return pulumi.ToOutputWithContext(ctx, i).(FirewallScheduleRecurringArrayOutput)
}

func (i FirewallScheduleRecurringArray) ToOutput(ctx context.Context) pulumix.Output[[]*FirewallScheduleRecurring] {
	return pulumix.Output[[]*FirewallScheduleRecurring]{
		OutputState: i.ToFirewallScheduleRecurringArrayOutputWithContext(ctx).OutputState,
	}
}

// FirewallScheduleRecurringMapInput is an input type that accepts FirewallScheduleRecurringMap and FirewallScheduleRecurringMapOutput values.
// You can construct a concrete instance of `FirewallScheduleRecurringMapInput` via:
//
//	FirewallScheduleRecurringMap{ "key": FirewallScheduleRecurringArgs{...} }
type FirewallScheduleRecurringMapInput interface {
	pulumi.Input

	ToFirewallScheduleRecurringMapOutput() FirewallScheduleRecurringMapOutput
	ToFirewallScheduleRecurringMapOutputWithContext(context.Context) FirewallScheduleRecurringMapOutput
}

type FirewallScheduleRecurringMap map[string]FirewallScheduleRecurringInput

func (FirewallScheduleRecurringMap) ElementType() reflect.Type {
	return reflect.TypeOf((*map[string]*FirewallScheduleRecurring)(nil)).Elem()
}

func (i FirewallScheduleRecurringMap) ToFirewallScheduleRecurringMapOutput() FirewallScheduleRecurringMapOutput {
	return i.ToFirewallScheduleRecurringMapOutputWithContext(context.Background())
}

func (i FirewallScheduleRecurringMap) ToFirewallScheduleRecurringMapOutputWithContext(ctx context.Context) FirewallScheduleRecurringMapOutput {
	return pulumi.ToOutputWithContext(ctx, i).(FirewallScheduleRecurringMapOutput)
}

func (i FirewallScheduleRecurringMap) ToOutput(ctx context.Context) pulumix.Output[map[string]*FirewallScheduleRecurring] {
	return pulumix.Output[map[string]*FirewallScheduleRecurring]{
		OutputState: i.ToFirewallScheduleRecurringMapOutputWithContext(ctx).OutputState,
	}
}

type FirewallScheduleRecurringOutput struct{ *pulumi.OutputState }

func (FirewallScheduleRecurringOutput) ElementType() reflect.Type {
	return reflect.TypeOf((**FirewallScheduleRecurring)(nil)).Elem()
}

func (o FirewallScheduleRecurringOutput) ToFirewallScheduleRecurringOutput() FirewallScheduleRecurringOutput {
	return o
}

func (o FirewallScheduleRecurringOutput) ToFirewallScheduleRecurringOutputWithContext(ctx context.Context) FirewallScheduleRecurringOutput {
	return o
}

func (o FirewallScheduleRecurringOutput) ToOutput(ctx context.Context) pulumix.Output[*FirewallScheduleRecurring] {
	return pulumix.Output[*FirewallScheduleRecurring]{
		OutputState: o.OutputState,
	}
}

func (o FirewallScheduleRecurringOutput) Color() pulumi.IntOutput {
	return o.ApplyT(func(v *FirewallScheduleRecurring) pulumi.IntOutput { return v.Color }).(pulumi.IntOutput)
}

func (o FirewallScheduleRecurringOutput) Day() pulumi.StringOutput {
	return o.ApplyT(func(v *FirewallScheduleRecurring) pulumi.StringOutput { return v.Day }).(pulumi.StringOutput)
}

func (o FirewallScheduleRecurringOutput) End() pulumi.StringOutput {
	return o.ApplyT(func(v *FirewallScheduleRecurring) pulumi.StringOutput { return v.End }).(pulumi.StringOutput)
}

func (o FirewallScheduleRecurringOutput) FabricObject() pulumi.StringOutput {
	return o.ApplyT(func(v *FirewallScheduleRecurring) pulumi.StringOutput { return v.FabricObject }).(pulumi.StringOutput)
}

func (o FirewallScheduleRecurringOutput) Name() pulumi.StringOutput {
	return o.ApplyT(func(v *FirewallScheduleRecurring) pulumi.StringOutput { return v.Name }).(pulumi.StringOutput)
}

func (o FirewallScheduleRecurringOutput) Start() pulumi.StringOutput {
	return o.ApplyT(func(v *FirewallScheduleRecurring) pulumi.StringOutput { return v.Start }).(pulumi.StringOutput)
}

func (o FirewallScheduleRecurringOutput) Vdomparam() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *FirewallScheduleRecurring) pulumi.StringPtrOutput { return v.Vdomparam }).(pulumi.StringPtrOutput)
}

type FirewallScheduleRecurringArrayOutput struct{ *pulumi.OutputState }

func (FirewallScheduleRecurringArrayOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*[]*FirewallScheduleRecurring)(nil)).Elem()
}

func (o FirewallScheduleRecurringArrayOutput) ToFirewallScheduleRecurringArrayOutput() FirewallScheduleRecurringArrayOutput {
	return o
}

func (o FirewallScheduleRecurringArrayOutput) ToFirewallScheduleRecurringArrayOutputWithContext(ctx context.Context) FirewallScheduleRecurringArrayOutput {
	return o
}

func (o FirewallScheduleRecurringArrayOutput) ToOutput(ctx context.Context) pulumix.Output[[]*FirewallScheduleRecurring] {
	return pulumix.Output[[]*FirewallScheduleRecurring]{
		OutputState: o.OutputState,
	}
}

func (o FirewallScheduleRecurringArrayOutput) Index(i pulumi.IntInput) FirewallScheduleRecurringOutput {
	return pulumi.All(o, i).ApplyT(func(vs []interface{}) *FirewallScheduleRecurring {
		return vs[0].([]*FirewallScheduleRecurring)[vs[1].(int)]
	}).(FirewallScheduleRecurringOutput)
}

type FirewallScheduleRecurringMapOutput struct{ *pulumi.OutputState }

func (FirewallScheduleRecurringMapOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*map[string]*FirewallScheduleRecurring)(nil)).Elem()
}

func (o FirewallScheduleRecurringMapOutput) ToFirewallScheduleRecurringMapOutput() FirewallScheduleRecurringMapOutput {
	return o
}

func (o FirewallScheduleRecurringMapOutput) ToFirewallScheduleRecurringMapOutputWithContext(ctx context.Context) FirewallScheduleRecurringMapOutput {
	return o
}

func (o FirewallScheduleRecurringMapOutput) ToOutput(ctx context.Context) pulumix.Output[map[string]*FirewallScheduleRecurring] {
	return pulumix.Output[map[string]*FirewallScheduleRecurring]{
		OutputState: o.OutputState,
	}
}

func (o FirewallScheduleRecurringMapOutput) MapIndex(k pulumi.StringInput) FirewallScheduleRecurringOutput {
	return pulumi.All(o, k).ApplyT(func(vs []interface{}) *FirewallScheduleRecurring {
		return vs[0].(map[string]*FirewallScheduleRecurring)[vs[1].(string)]
	}).(FirewallScheduleRecurringOutput)
}

func init() {
	pulumi.RegisterInputType(reflect.TypeOf((*FirewallScheduleRecurringInput)(nil)).Elem(), &FirewallScheduleRecurring{})
	pulumi.RegisterInputType(reflect.TypeOf((*FirewallScheduleRecurringArrayInput)(nil)).Elem(), FirewallScheduleRecurringArray{})
	pulumi.RegisterInputType(reflect.TypeOf((*FirewallScheduleRecurringMapInput)(nil)).Elem(), FirewallScheduleRecurringMap{})
	pulumi.RegisterOutputType(FirewallScheduleRecurringOutput{})
	pulumi.RegisterOutputType(FirewallScheduleRecurringArrayOutput{})
	pulumi.RegisterOutputType(FirewallScheduleRecurringMapOutput{})
}
