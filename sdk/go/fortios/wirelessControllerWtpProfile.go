// *** WARNING: this file was generated by the Pulumi Terraform Bridge (tfgen) Tool. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

package fortios

import (
	"context"
	"reflect"

	"github.com/pulumi/pulumi/sdk/v3/go/pulumi"
)

// Configure WTP profiles or FortiAP profiles that define radio settings for manageable FortiAP platforms.
//
// ## Import
//
// WirelessController WtpProfile can be imported using any of these accepted formats$ export "FORTIOS_IMPORT_TABLE"="true"
//
// ```sh
//  $ pulumi import fortios:index/wirelessControllerWtpProfile:WirelessControllerWtpProfile labelname {{name}}
// ```
//
//  $ unset "FORTIOS_IMPORT_TABLE"
type WirelessControllerWtpProfile struct {
	pulumi.CustomResourceState

	// Control management access to the managed WTP, FortiAP, or AP. Separate entries with a space.
	Allowaccess pulumi.StringOutput `pulumi:"allowaccess"`
	// Country in which this WTP, FortiAP or AP will operate (default = NA, automatically use the country configured for the current VDOM).
	ApCountry pulumi.StringOutput `pulumi:"apCountry"`
	// Enable/disable AP handoff of clients to other APs (default = disable). Valid values: `enable`, `disable`.
	ApHandoff pulumi.StringOutput `pulumi:"apHandoff"`
	// AP local configuration profile name.
	ApcfgProfile pulumi.StringOutput `pulumi:"apcfgProfile"`
	// Bluetooth Low Energy profile name.
	BleProfile pulumi.StringOutput `pulumi:"bleProfile"`
	// Comment.
	Comment pulumi.StringPtrOutput `pulumi:"comment"`
	// Enable/disable CAPWAP control message data channel offload.
	ControlMessageOffload pulumi.StringOutput `pulumi:"controlMessageOffload"`
	// List of MAC addresses that are denied access to this WTP, FortiAP, or AP. The structure of `denyMacList` block is documented below.
	DenyMacLists WirelessControllerWtpProfileDenyMacListArrayOutput `pulumi:"denyMacLists"`
	// Enable/disable data channel DTLS in kernel. Valid values: `enable`, `disable`.
	DtlsInKernel pulumi.StringOutput `pulumi:"dtlsInKernel"`
	// WTP data channel DTLS policy (default = clear-text). Valid values: `clear-text`, `dtls-enabled`, `ipsec-vpn`.
	DtlsPolicy pulumi.StringOutput `pulumi:"dtlsPolicy"`
	// true or false, set this parameter to true when using dynamic forEach + toset to configure and sort sub-tables, please do not set this parameter when configuring static sub-tables.
	DynamicSortSubtable pulumi.StringPtrOutput `pulumi:"dynamicSortSubtable"`
	// Enable/disable use of energy efficient Ethernet on WTP. Valid values: `enable`, `disable`.
	EnergyEfficientEthernet pulumi.StringOutput `pulumi:"energyEfficientEthernet"`
	// Enable/disable station/VAP/radio extension information. Valid values: `enable`, `disable`.
	ExtInfoEnable pulumi.StringOutput `pulumi:"extInfoEnable"`
	// Enable/disable frequency handoff of clients to other channels (default = disable). Valid values: `enable`, `disable`.
	FrequencyHandoff pulumi.StringOutput `pulumi:"frequencyHandoff"`
	// Enable/disable client load balancing during roaming to avoid roaming delay (default = disable). Valid values: `enable`, `disable`.
	HandoffRoaming pulumi.StringOutput `pulumi:"handoffRoaming"`
	// Minimum received signal strength indicator (RSSI) value for handoff (20 - 30, default = 25).
	HandoffRssi pulumi.IntOutput `pulumi:"handoffRssi"`
	// Threshold value for AP handoff.
	HandoffStaThresh pulumi.IntOutput `pulumi:"handoffStaThresh"`
	// Select how to prevent IP fragmentation for CAPWAP tunneled control and data packets (default = tcp-mss-adjust). Valid values: `tcp-mss-adjust`, `icmp-unreachable`.
	IpFragmentPreventing pulumi.StringOutput `pulumi:"ipFragmentPreventing"`
	// WTP LAN port mapping. The structure of `lan` block is documented below.
	Lan WirelessControllerWtpProfileLanPtrOutput `pulumi:"lan"`
	// Set various location based service (LBS) options. The structure of `lbs` block is documented below.
	Lbs WirelessControllerWtpProfileLbsPtrOutput `pulumi:"lbs"`
	// Recurring firewall schedules for illuminating LEDs on the FortiAP. If led-state is enabled, LEDs will be visible when at least one of the schedules is valid. Separate multiple schedule names with a space. The structure of `ledSchedules` block is documented below.
	LedSchedules WirelessControllerWtpProfileLedScheduleArrayOutput `pulumi:"ledSchedules"`
	// Enable/disable use of LEDs on WTP (default = disable). Valid values: `enable`, `disable`.
	LedState pulumi.StringOutput `pulumi:"ledState"`
	// Enable/disable Link Layer Discovery Protocol (LLDP) for the WTP, FortiAP, or AP (default = disable). Valid values: `enable`, `disable`.
	Lldp pulumi.StringOutput `pulumi:"lldp"`
	// Set the managed WTP, FortiAP, or AP's administrator password.
	LoginPasswd pulumi.StringPtrOutput `pulumi:"loginPasswd"`
	// Change or reset the administrator password of a managed WTP, FortiAP or AP (yes, default, or no, default = no). Valid values: `yes`, `default`, `no`.
	LoginPasswdChange pulumi.StringOutput `pulumi:"loginPasswdChange"`
	// Maximum number of stations (STAs) or WiFi clients supported by the radio. Range depends on the hardware.
	MaxClients pulumi.IntOutput `pulumi:"maxClients"`
	// Virtual Access Point (VAP) name.
	Name pulumi.StringOutput `pulumi:"name"`
	// WTP, FortiAP, or AP platform. The structure of `platform` block is documented below.
	Platform WirelessControllerWtpProfilePlatformPtrOutput `pulumi:"platform"`
	// Set the WTP, FortiAP, or AP's PoE mode.
	PoeMode pulumi.StringOutput `pulumi:"poeMode"`
	// Configuration options for radio 1. The structure of `radio1` block is documented below.
	Radio1 WirelessControllerWtpProfileRadio1PtrOutput `pulumi:"radio1"`
	// Configuration options for radio 2. The structure of `radio2` block is documented below.
	Radio2 WirelessControllerWtpProfileRadio2PtrOutput `pulumi:"radio2"`
	// Configuration options for radio 3. The structure of `radio3` block is documented below.
	Radio3 WirelessControllerWtpProfileRadio3PtrOutput `pulumi:"radio3"`
	// Configuration options for radio 4. The structure of `radio4` block is documented below.
	Radio4 WirelessControllerWtpProfileRadio4PtrOutput `pulumi:"radio4"`
	// Enable/disable automatically adding local subnetwork of FortiAP to split-tunneling ACL (default = disable). Valid values: `enable`, `disable`.
	SplitTunnelingAclLocalApSubnet pulumi.StringOutput `pulumi:"splitTunnelingAclLocalApSubnet"`
	// Split tunneling ACL path is local/tunnel. Valid values: `tunnel`, `local`.
	SplitTunnelingAclPath pulumi.StringOutput `pulumi:"splitTunnelingAclPath"`
	// Split tunneling ACL filter list. The structure of `splitTunnelingAcl` block is documented below.
	SplitTunnelingAcls WirelessControllerWtpProfileSplitTunnelingAclArrayOutput `pulumi:"splitTunnelingAcls"`
	// Downlink CAPWAP tunnel MTU (0, 576, or 1500 bytes, default = 0).
	TunMtuDownlink pulumi.IntOutput `pulumi:"tunMtuDownlink"`
	// Uplink CAPWAP tunnel MTU (0, 576, or 1500 bytes, default = 0).
	TunMtuUplink pulumi.IntOutput `pulumi:"tunMtuUplink"`
	// Specifies the vdom to which the resource will be applied when the FortiGate unit is running in VDOM mode. Only one vdom can be specified. If you want to inherit the vdom configuration of the provider, please do not set this parameter.
	Vdomparam pulumi.StringPtrOutput `pulumi:"vdomparam"`
	// Enable/disable using a WAN port as a LAN port. Valid values: `wan-lan`, `wan-only`.
	WanPortMode pulumi.StringOutput `pulumi:"wanPortMode"`
}

// NewWirelessControllerWtpProfile registers a new resource with the given unique name, arguments, and options.
func NewWirelessControllerWtpProfile(ctx *pulumi.Context,
	name string, args *WirelessControllerWtpProfileArgs, opts ...pulumi.ResourceOption) (*WirelessControllerWtpProfile, error) {
	if args == nil {
		args = &WirelessControllerWtpProfileArgs{}
	}

	var resource WirelessControllerWtpProfile
	err := ctx.RegisterResource("fortios:index/wirelessControllerWtpProfile:WirelessControllerWtpProfile", name, args, &resource, opts...)
	if err != nil {
		return nil, err
	}
	return &resource, nil
}

// GetWirelessControllerWtpProfile gets an existing WirelessControllerWtpProfile resource's state with the given name, ID, and optional
// state properties that are used to uniquely qualify the lookup (nil if not required).
func GetWirelessControllerWtpProfile(ctx *pulumi.Context,
	name string, id pulumi.IDInput, state *WirelessControllerWtpProfileState, opts ...pulumi.ResourceOption) (*WirelessControllerWtpProfile, error) {
	var resource WirelessControllerWtpProfile
	err := ctx.ReadResource("fortios:index/wirelessControllerWtpProfile:WirelessControllerWtpProfile", name, id, state, &resource, opts...)
	if err != nil {
		return nil, err
	}
	return &resource, nil
}

// Input properties used for looking up and filtering WirelessControllerWtpProfile resources.
type wirelessControllerWtpProfileState struct {
	// Control management access to the managed WTP, FortiAP, or AP. Separate entries with a space.
	Allowaccess *string `pulumi:"allowaccess"`
	// Country in which this WTP, FortiAP or AP will operate (default = NA, automatically use the country configured for the current VDOM).
	ApCountry *string `pulumi:"apCountry"`
	// Enable/disable AP handoff of clients to other APs (default = disable). Valid values: `enable`, `disable`.
	ApHandoff *string `pulumi:"apHandoff"`
	// AP local configuration profile name.
	ApcfgProfile *string `pulumi:"apcfgProfile"`
	// Bluetooth Low Energy profile name.
	BleProfile *string `pulumi:"bleProfile"`
	// Comment.
	Comment *string `pulumi:"comment"`
	// Enable/disable CAPWAP control message data channel offload.
	ControlMessageOffload *string `pulumi:"controlMessageOffload"`
	// List of MAC addresses that are denied access to this WTP, FortiAP, or AP. The structure of `denyMacList` block is documented below.
	DenyMacLists []WirelessControllerWtpProfileDenyMacList `pulumi:"denyMacLists"`
	// Enable/disable data channel DTLS in kernel. Valid values: `enable`, `disable`.
	DtlsInKernel *string `pulumi:"dtlsInKernel"`
	// WTP data channel DTLS policy (default = clear-text). Valid values: `clear-text`, `dtls-enabled`, `ipsec-vpn`.
	DtlsPolicy *string `pulumi:"dtlsPolicy"`
	// true or false, set this parameter to true when using dynamic forEach + toset to configure and sort sub-tables, please do not set this parameter when configuring static sub-tables.
	DynamicSortSubtable *string `pulumi:"dynamicSortSubtable"`
	// Enable/disable use of energy efficient Ethernet on WTP. Valid values: `enable`, `disable`.
	EnergyEfficientEthernet *string `pulumi:"energyEfficientEthernet"`
	// Enable/disable station/VAP/radio extension information. Valid values: `enable`, `disable`.
	ExtInfoEnable *string `pulumi:"extInfoEnable"`
	// Enable/disable frequency handoff of clients to other channels (default = disable). Valid values: `enable`, `disable`.
	FrequencyHandoff *string `pulumi:"frequencyHandoff"`
	// Enable/disable client load balancing during roaming to avoid roaming delay (default = disable). Valid values: `enable`, `disable`.
	HandoffRoaming *string `pulumi:"handoffRoaming"`
	// Minimum received signal strength indicator (RSSI) value for handoff (20 - 30, default = 25).
	HandoffRssi *int `pulumi:"handoffRssi"`
	// Threshold value for AP handoff.
	HandoffStaThresh *int `pulumi:"handoffStaThresh"`
	// Select how to prevent IP fragmentation for CAPWAP tunneled control and data packets (default = tcp-mss-adjust). Valid values: `tcp-mss-adjust`, `icmp-unreachable`.
	IpFragmentPreventing *string `pulumi:"ipFragmentPreventing"`
	// WTP LAN port mapping. The structure of `lan` block is documented below.
	Lan *WirelessControllerWtpProfileLan `pulumi:"lan"`
	// Set various location based service (LBS) options. The structure of `lbs` block is documented below.
	Lbs *WirelessControllerWtpProfileLbs `pulumi:"lbs"`
	// Recurring firewall schedules for illuminating LEDs on the FortiAP. If led-state is enabled, LEDs will be visible when at least one of the schedules is valid. Separate multiple schedule names with a space. The structure of `ledSchedules` block is documented below.
	LedSchedules []WirelessControllerWtpProfileLedSchedule `pulumi:"ledSchedules"`
	// Enable/disable use of LEDs on WTP (default = disable). Valid values: `enable`, `disable`.
	LedState *string `pulumi:"ledState"`
	// Enable/disable Link Layer Discovery Protocol (LLDP) for the WTP, FortiAP, or AP (default = disable). Valid values: `enable`, `disable`.
	Lldp *string `pulumi:"lldp"`
	// Set the managed WTP, FortiAP, or AP's administrator password.
	LoginPasswd *string `pulumi:"loginPasswd"`
	// Change or reset the administrator password of a managed WTP, FortiAP or AP (yes, default, or no, default = no). Valid values: `yes`, `default`, `no`.
	LoginPasswdChange *string `pulumi:"loginPasswdChange"`
	// Maximum number of stations (STAs) or WiFi clients supported by the radio. Range depends on the hardware.
	MaxClients *int `pulumi:"maxClients"`
	// Virtual Access Point (VAP) name.
	Name *string `pulumi:"name"`
	// WTP, FortiAP, or AP platform. The structure of `platform` block is documented below.
	Platform *WirelessControllerWtpProfilePlatform `pulumi:"platform"`
	// Set the WTP, FortiAP, or AP's PoE mode.
	PoeMode *string `pulumi:"poeMode"`
	// Configuration options for radio 1. The structure of `radio1` block is documented below.
	Radio1 *WirelessControllerWtpProfileRadio1 `pulumi:"radio1"`
	// Configuration options for radio 2. The structure of `radio2` block is documented below.
	Radio2 *WirelessControllerWtpProfileRadio2 `pulumi:"radio2"`
	// Configuration options for radio 3. The structure of `radio3` block is documented below.
	Radio3 *WirelessControllerWtpProfileRadio3 `pulumi:"radio3"`
	// Configuration options for radio 4. The structure of `radio4` block is documented below.
	Radio4 *WirelessControllerWtpProfileRadio4 `pulumi:"radio4"`
	// Enable/disable automatically adding local subnetwork of FortiAP to split-tunneling ACL (default = disable). Valid values: `enable`, `disable`.
	SplitTunnelingAclLocalApSubnet *string `pulumi:"splitTunnelingAclLocalApSubnet"`
	// Split tunneling ACL path is local/tunnel. Valid values: `tunnel`, `local`.
	SplitTunnelingAclPath *string `pulumi:"splitTunnelingAclPath"`
	// Split tunneling ACL filter list. The structure of `splitTunnelingAcl` block is documented below.
	SplitTunnelingAcls []WirelessControllerWtpProfileSplitTunnelingAcl `pulumi:"splitTunnelingAcls"`
	// Downlink CAPWAP tunnel MTU (0, 576, or 1500 bytes, default = 0).
	TunMtuDownlink *int `pulumi:"tunMtuDownlink"`
	// Uplink CAPWAP tunnel MTU (0, 576, or 1500 bytes, default = 0).
	TunMtuUplink *int `pulumi:"tunMtuUplink"`
	// Specifies the vdom to which the resource will be applied when the FortiGate unit is running in VDOM mode. Only one vdom can be specified. If you want to inherit the vdom configuration of the provider, please do not set this parameter.
	Vdomparam *string `pulumi:"vdomparam"`
	// Enable/disable using a WAN port as a LAN port. Valid values: `wan-lan`, `wan-only`.
	WanPortMode *string `pulumi:"wanPortMode"`
}

type WirelessControllerWtpProfileState struct {
	// Control management access to the managed WTP, FortiAP, or AP. Separate entries with a space.
	Allowaccess pulumi.StringPtrInput
	// Country in which this WTP, FortiAP or AP will operate (default = NA, automatically use the country configured for the current VDOM).
	ApCountry pulumi.StringPtrInput
	// Enable/disable AP handoff of clients to other APs (default = disable). Valid values: `enable`, `disable`.
	ApHandoff pulumi.StringPtrInput
	// AP local configuration profile name.
	ApcfgProfile pulumi.StringPtrInput
	// Bluetooth Low Energy profile name.
	BleProfile pulumi.StringPtrInput
	// Comment.
	Comment pulumi.StringPtrInput
	// Enable/disable CAPWAP control message data channel offload.
	ControlMessageOffload pulumi.StringPtrInput
	// List of MAC addresses that are denied access to this WTP, FortiAP, or AP. The structure of `denyMacList` block is documented below.
	DenyMacLists WirelessControllerWtpProfileDenyMacListArrayInput
	// Enable/disable data channel DTLS in kernel. Valid values: `enable`, `disable`.
	DtlsInKernel pulumi.StringPtrInput
	// WTP data channel DTLS policy (default = clear-text). Valid values: `clear-text`, `dtls-enabled`, `ipsec-vpn`.
	DtlsPolicy pulumi.StringPtrInput
	// true or false, set this parameter to true when using dynamic forEach + toset to configure and sort sub-tables, please do not set this parameter when configuring static sub-tables.
	DynamicSortSubtable pulumi.StringPtrInput
	// Enable/disable use of energy efficient Ethernet on WTP. Valid values: `enable`, `disable`.
	EnergyEfficientEthernet pulumi.StringPtrInput
	// Enable/disable station/VAP/radio extension information. Valid values: `enable`, `disable`.
	ExtInfoEnable pulumi.StringPtrInput
	// Enable/disable frequency handoff of clients to other channels (default = disable). Valid values: `enable`, `disable`.
	FrequencyHandoff pulumi.StringPtrInput
	// Enable/disable client load balancing during roaming to avoid roaming delay (default = disable). Valid values: `enable`, `disable`.
	HandoffRoaming pulumi.StringPtrInput
	// Minimum received signal strength indicator (RSSI) value for handoff (20 - 30, default = 25).
	HandoffRssi pulumi.IntPtrInput
	// Threshold value for AP handoff.
	HandoffStaThresh pulumi.IntPtrInput
	// Select how to prevent IP fragmentation for CAPWAP tunneled control and data packets (default = tcp-mss-adjust). Valid values: `tcp-mss-adjust`, `icmp-unreachable`.
	IpFragmentPreventing pulumi.StringPtrInput
	// WTP LAN port mapping. The structure of `lan` block is documented below.
	Lan WirelessControllerWtpProfileLanPtrInput
	// Set various location based service (LBS) options. The structure of `lbs` block is documented below.
	Lbs WirelessControllerWtpProfileLbsPtrInput
	// Recurring firewall schedules for illuminating LEDs on the FortiAP. If led-state is enabled, LEDs will be visible when at least one of the schedules is valid. Separate multiple schedule names with a space. The structure of `ledSchedules` block is documented below.
	LedSchedules WirelessControllerWtpProfileLedScheduleArrayInput
	// Enable/disable use of LEDs on WTP (default = disable). Valid values: `enable`, `disable`.
	LedState pulumi.StringPtrInput
	// Enable/disable Link Layer Discovery Protocol (LLDP) for the WTP, FortiAP, or AP (default = disable). Valid values: `enable`, `disable`.
	Lldp pulumi.StringPtrInput
	// Set the managed WTP, FortiAP, or AP's administrator password.
	LoginPasswd pulumi.StringPtrInput
	// Change or reset the administrator password of a managed WTP, FortiAP or AP (yes, default, or no, default = no). Valid values: `yes`, `default`, `no`.
	LoginPasswdChange pulumi.StringPtrInput
	// Maximum number of stations (STAs) or WiFi clients supported by the radio. Range depends on the hardware.
	MaxClients pulumi.IntPtrInput
	// Virtual Access Point (VAP) name.
	Name pulumi.StringPtrInput
	// WTP, FortiAP, or AP platform. The structure of `platform` block is documented below.
	Platform WirelessControllerWtpProfilePlatformPtrInput
	// Set the WTP, FortiAP, or AP's PoE mode.
	PoeMode pulumi.StringPtrInput
	// Configuration options for radio 1. The structure of `radio1` block is documented below.
	Radio1 WirelessControllerWtpProfileRadio1PtrInput
	// Configuration options for radio 2. The structure of `radio2` block is documented below.
	Radio2 WirelessControllerWtpProfileRadio2PtrInput
	// Configuration options for radio 3. The structure of `radio3` block is documented below.
	Radio3 WirelessControllerWtpProfileRadio3PtrInput
	// Configuration options for radio 4. The structure of `radio4` block is documented below.
	Radio4 WirelessControllerWtpProfileRadio4PtrInput
	// Enable/disable automatically adding local subnetwork of FortiAP to split-tunneling ACL (default = disable). Valid values: `enable`, `disable`.
	SplitTunnelingAclLocalApSubnet pulumi.StringPtrInput
	// Split tunneling ACL path is local/tunnel. Valid values: `tunnel`, `local`.
	SplitTunnelingAclPath pulumi.StringPtrInput
	// Split tunneling ACL filter list. The structure of `splitTunnelingAcl` block is documented below.
	SplitTunnelingAcls WirelessControllerWtpProfileSplitTunnelingAclArrayInput
	// Downlink CAPWAP tunnel MTU (0, 576, or 1500 bytes, default = 0).
	TunMtuDownlink pulumi.IntPtrInput
	// Uplink CAPWAP tunnel MTU (0, 576, or 1500 bytes, default = 0).
	TunMtuUplink pulumi.IntPtrInput
	// Specifies the vdom to which the resource will be applied when the FortiGate unit is running in VDOM mode. Only one vdom can be specified. If you want to inherit the vdom configuration of the provider, please do not set this parameter.
	Vdomparam pulumi.StringPtrInput
	// Enable/disable using a WAN port as a LAN port. Valid values: `wan-lan`, `wan-only`.
	WanPortMode pulumi.StringPtrInput
}

func (WirelessControllerWtpProfileState) ElementType() reflect.Type {
	return reflect.TypeOf((*wirelessControllerWtpProfileState)(nil)).Elem()
}

type wirelessControllerWtpProfileArgs struct {
	// Control management access to the managed WTP, FortiAP, or AP. Separate entries with a space.
	Allowaccess *string `pulumi:"allowaccess"`
	// Country in which this WTP, FortiAP or AP will operate (default = NA, automatically use the country configured for the current VDOM).
	ApCountry *string `pulumi:"apCountry"`
	// Enable/disable AP handoff of clients to other APs (default = disable). Valid values: `enable`, `disable`.
	ApHandoff *string `pulumi:"apHandoff"`
	// AP local configuration profile name.
	ApcfgProfile *string `pulumi:"apcfgProfile"`
	// Bluetooth Low Energy profile name.
	BleProfile *string `pulumi:"bleProfile"`
	// Comment.
	Comment *string `pulumi:"comment"`
	// Enable/disable CAPWAP control message data channel offload.
	ControlMessageOffload *string `pulumi:"controlMessageOffload"`
	// List of MAC addresses that are denied access to this WTP, FortiAP, or AP. The structure of `denyMacList` block is documented below.
	DenyMacLists []WirelessControllerWtpProfileDenyMacList `pulumi:"denyMacLists"`
	// Enable/disable data channel DTLS in kernel. Valid values: `enable`, `disable`.
	DtlsInKernel *string `pulumi:"dtlsInKernel"`
	// WTP data channel DTLS policy (default = clear-text). Valid values: `clear-text`, `dtls-enabled`, `ipsec-vpn`.
	DtlsPolicy *string `pulumi:"dtlsPolicy"`
	// true or false, set this parameter to true when using dynamic forEach + toset to configure and sort sub-tables, please do not set this parameter when configuring static sub-tables.
	DynamicSortSubtable *string `pulumi:"dynamicSortSubtable"`
	// Enable/disable use of energy efficient Ethernet on WTP. Valid values: `enable`, `disable`.
	EnergyEfficientEthernet *string `pulumi:"energyEfficientEthernet"`
	// Enable/disable station/VAP/radio extension information. Valid values: `enable`, `disable`.
	ExtInfoEnable *string `pulumi:"extInfoEnable"`
	// Enable/disable frequency handoff of clients to other channels (default = disable). Valid values: `enable`, `disable`.
	FrequencyHandoff *string `pulumi:"frequencyHandoff"`
	// Enable/disable client load balancing during roaming to avoid roaming delay (default = disable). Valid values: `enable`, `disable`.
	HandoffRoaming *string `pulumi:"handoffRoaming"`
	// Minimum received signal strength indicator (RSSI) value for handoff (20 - 30, default = 25).
	HandoffRssi *int `pulumi:"handoffRssi"`
	// Threshold value for AP handoff.
	HandoffStaThresh *int `pulumi:"handoffStaThresh"`
	// Select how to prevent IP fragmentation for CAPWAP tunneled control and data packets (default = tcp-mss-adjust). Valid values: `tcp-mss-adjust`, `icmp-unreachable`.
	IpFragmentPreventing *string `pulumi:"ipFragmentPreventing"`
	// WTP LAN port mapping. The structure of `lan` block is documented below.
	Lan *WirelessControllerWtpProfileLan `pulumi:"lan"`
	// Set various location based service (LBS) options. The structure of `lbs` block is documented below.
	Lbs *WirelessControllerWtpProfileLbs `pulumi:"lbs"`
	// Recurring firewall schedules for illuminating LEDs on the FortiAP. If led-state is enabled, LEDs will be visible when at least one of the schedules is valid. Separate multiple schedule names with a space. The structure of `ledSchedules` block is documented below.
	LedSchedules []WirelessControllerWtpProfileLedSchedule `pulumi:"ledSchedules"`
	// Enable/disable use of LEDs on WTP (default = disable). Valid values: `enable`, `disable`.
	LedState *string `pulumi:"ledState"`
	// Enable/disable Link Layer Discovery Protocol (LLDP) for the WTP, FortiAP, or AP (default = disable). Valid values: `enable`, `disable`.
	Lldp *string `pulumi:"lldp"`
	// Set the managed WTP, FortiAP, or AP's administrator password.
	LoginPasswd *string `pulumi:"loginPasswd"`
	// Change or reset the administrator password of a managed WTP, FortiAP or AP (yes, default, or no, default = no). Valid values: `yes`, `default`, `no`.
	LoginPasswdChange *string `pulumi:"loginPasswdChange"`
	// Maximum number of stations (STAs) or WiFi clients supported by the radio. Range depends on the hardware.
	MaxClients *int `pulumi:"maxClients"`
	// Virtual Access Point (VAP) name.
	Name *string `pulumi:"name"`
	// WTP, FortiAP, or AP platform. The structure of `platform` block is documented below.
	Platform *WirelessControllerWtpProfilePlatform `pulumi:"platform"`
	// Set the WTP, FortiAP, or AP's PoE mode.
	PoeMode *string `pulumi:"poeMode"`
	// Configuration options for radio 1. The structure of `radio1` block is documented below.
	Radio1 *WirelessControllerWtpProfileRadio1 `pulumi:"radio1"`
	// Configuration options for radio 2. The structure of `radio2` block is documented below.
	Radio2 *WirelessControllerWtpProfileRadio2 `pulumi:"radio2"`
	// Configuration options for radio 3. The structure of `radio3` block is documented below.
	Radio3 *WirelessControllerWtpProfileRadio3 `pulumi:"radio3"`
	// Configuration options for radio 4. The structure of `radio4` block is documented below.
	Radio4 *WirelessControllerWtpProfileRadio4 `pulumi:"radio4"`
	// Enable/disable automatically adding local subnetwork of FortiAP to split-tunneling ACL (default = disable). Valid values: `enable`, `disable`.
	SplitTunnelingAclLocalApSubnet *string `pulumi:"splitTunnelingAclLocalApSubnet"`
	// Split tunneling ACL path is local/tunnel. Valid values: `tunnel`, `local`.
	SplitTunnelingAclPath *string `pulumi:"splitTunnelingAclPath"`
	// Split tunneling ACL filter list. The structure of `splitTunnelingAcl` block is documented below.
	SplitTunnelingAcls []WirelessControllerWtpProfileSplitTunnelingAcl `pulumi:"splitTunnelingAcls"`
	// Downlink CAPWAP tunnel MTU (0, 576, or 1500 bytes, default = 0).
	TunMtuDownlink *int `pulumi:"tunMtuDownlink"`
	// Uplink CAPWAP tunnel MTU (0, 576, or 1500 bytes, default = 0).
	TunMtuUplink *int `pulumi:"tunMtuUplink"`
	// Specifies the vdom to which the resource will be applied when the FortiGate unit is running in VDOM mode. Only one vdom can be specified. If you want to inherit the vdom configuration of the provider, please do not set this parameter.
	Vdomparam *string `pulumi:"vdomparam"`
	// Enable/disable using a WAN port as a LAN port. Valid values: `wan-lan`, `wan-only`.
	WanPortMode *string `pulumi:"wanPortMode"`
}

// The set of arguments for constructing a WirelessControllerWtpProfile resource.
type WirelessControllerWtpProfileArgs struct {
	// Control management access to the managed WTP, FortiAP, or AP. Separate entries with a space.
	Allowaccess pulumi.StringPtrInput
	// Country in which this WTP, FortiAP or AP will operate (default = NA, automatically use the country configured for the current VDOM).
	ApCountry pulumi.StringPtrInput
	// Enable/disable AP handoff of clients to other APs (default = disable). Valid values: `enable`, `disable`.
	ApHandoff pulumi.StringPtrInput
	// AP local configuration profile name.
	ApcfgProfile pulumi.StringPtrInput
	// Bluetooth Low Energy profile name.
	BleProfile pulumi.StringPtrInput
	// Comment.
	Comment pulumi.StringPtrInput
	// Enable/disable CAPWAP control message data channel offload.
	ControlMessageOffload pulumi.StringPtrInput
	// List of MAC addresses that are denied access to this WTP, FortiAP, or AP. The structure of `denyMacList` block is documented below.
	DenyMacLists WirelessControllerWtpProfileDenyMacListArrayInput
	// Enable/disable data channel DTLS in kernel. Valid values: `enable`, `disable`.
	DtlsInKernel pulumi.StringPtrInput
	// WTP data channel DTLS policy (default = clear-text). Valid values: `clear-text`, `dtls-enabled`, `ipsec-vpn`.
	DtlsPolicy pulumi.StringPtrInput
	// true or false, set this parameter to true when using dynamic forEach + toset to configure and sort sub-tables, please do not set this parameter when configuring static sub-tables.
	DynamicSortSubtable pulumi.StringPtrInput
	// Enable/disable use of energy efficient Ethernet on WTP. Valid values: `enable`, `disable`.
	EnergyEfficientEthernet pulumi.StringPtrInput
	// Enable/disable station/VAP/radio extension information. Valid values: `enable`, `disable`.
	ExtInfoEnable pulumi.StringPtrInput
	// Enable/disable frequency handoff of clients to other channels (default = disable). Valid values: `enable`, `disable`.
	FrequencyHandoff pulumi.StringPtrInput
	// Enable/disable client load balancing during roaming to avoid roaming delay (default = disable). Valid values: `enable`, `disable`.
	HandoffRoaming pulumi.StringPtrInput
	// Minimum received signal strength indicator (RSSI) value for handoff (20 - 30, default = 25).
	HandoffRssi pulumi.IntPtrInput
	// Threshold value for AP handoff.
	HandoffStaThresh pulumi.IntPtrInput
	// Select how to prevent IP fragmentation for CAPWAP tunneled control and data packets (default = tcp-mss-adjust). Valid values: `tcp-mss-adjust`, `icmp-unreachable`.
	IpFragmentPreventing pulumi.StringPtrInput
	// WTP LAN port mapping. The structure of `lan` block is documented below.
	Lan WirelessControllerWtpProfileLanPtrInput
	// Set various location based service (LBS) options. The structure of `lbs` block is documented below.
	Lbs WirelessControllerWtpProfileLbsPtrInput
	// Recurring firewall schedules for illuminating LEDs on the FortiAP. If led-state is enabled, LEDs will be visible when at least one of the schedules is valid. Separate multiple schedule names with a space. The structure of `ledSchedules` block is documented below.
	LedSchedules WirelessControllerWtpProfileLedScheduleArrayInput
	// Enable/disable use of LEDs on WTP (default = disable). Valid values: `enable`, `disable`.
	LedState pulumi.StringPtrInput
	// Enable/disable Link Layer Discovery Protocol (LLDP) for the WTP, FortiAP, or AP (default = disable). Valid values: `enable`, `disable`.
	Lldp pulumi.StringPtrInput
	// Set the managed WTP, FortiAP, or AP's administrator password.
	LoginPasswd pulumi.StringPtrInput
	// Change or reset the administrator password of a managed WTP, FortiAP or AP (yes, default, or no, default = no). Valid values: `yes`, `default`, `no`.
	LoginPasswdChange pulumi.StringPtrInput
	// Maximum number of stations (STAs) or WiFi clients supported by the radio. Range depends on the hardware.
	MaxClients pulumi.IntPtrInput
	// Virtual Access Point (VAP) name.
	Name pulumi.StringPtrInput
	// WTP, FortiAP, or AP platform. The structure of `platform` block is documented below.
	Platform WirelessControllerWtpProfilePlatformPtrInput
	// Set the WTP, FortiAP, or AP's PoE mode.
	PoeMode pulumi.StringPtrInput
	// Configuration options for radio 1. The structure of `radio1` block is documented below.
	Radio1 WirelessControllerWtpProfileRadio1PtrInput
	// Configuration options for radio 2. The structure of `radio2` block is documented below.
	Radio2 WirelessControllerWtpProfileRadio2PtrInput
	// Configuration options for radio 3. The structure of `radio3` block is documented below.
	Radio3 WirelessControllerWtpProfileRadio3PtrInput
	// Configuration options for radio 4. The structure of `radio4` block is documented below.
	Radio4 WirelessControllerWtpProfileRadio4PtrInput
	// Enable/disable automatically adding local subnetwork of FortiAP to split-tunneling ACL (default = disable). Valid values: `enable`, `disable`.
	SplitTunnelingAclLocalApSubnet pulumi.StringPtrInput
	// Split tunneling ACL path is local/tunnel. Valid values: `tunnel`, `local`.
	SplitTunnelingAclPath pulumi.StringPtrInput
	// Split tunneling ACL filter list. The structure of `splitTunnelingAcl` block is documented below.
	SplitTunnelingAcls WirelessControllerWtpProfileSplitTunnelingAclArrayInput
	// Downlink CAPWAP tunnel MTU (0, 576, or 1500 bytes, default = 0).
	TunMtuDownlink pulumi.IntPtrInput
	// Uplink CAPWAP tunnel MTU (0, 576, or 1500 bytes, default = 0).
	TunMtuUplink pulumi.IntPtrInput
	// Specifies the vdom to which the resource will be applied when the FortiGate unit is running in VDOM mode. Only one vdom can be specified. If you want to inherit the vdom configuration of the provider, please do not set this parameter.
	Vdomparam pulumi.StringPtrInput
	// Enable/disable using a WAN port as a LAN port. Valid values: `wan-lan`, `wan-only`.
	WanPortMode pulumi.StringPtrInput
}

func (WirelessControllerWtpProfileArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*wirelessControllerWtpProfileArgs)(nil)).Elem()
}

type WirelessControllerWtpProfileInput interface {
	pulumi.Input

	ToWirelessControllerWtpProfileOutput() WirelessControllerWtpProfileOutput
	ToWirelessControllerWtpProfileOutputWithContext(ctx context.Context) WirelessControllerWtpProfileOutput
}

func (*WirelessControllerWtpProfile) ElementType() reflect.Type {
	return reflect.TypeOf((*WirelessControllerWtpProfile)(nil))
}

func (i *WirelessControllerWtpProfile) ToWirelessControllerWtpProfileOutput() WirelessControllerWtpProfileOutput {
	return i.ToWirelessControllerWtpProfileOutputWithContext(context.Background())
}

func (i *WirelessControllerWtpProfile) ToWirelessControllerWtpProfileOutputWithContext(ctx context.Context) WirelessControllerWtpProfileOutput {
	return pulumi.ToOutputWithContext(ctx, i).(WirelessControllerWtpProfileOutput)
}

func (i *WirelessControllerWtpProfile) ToWirelessControllerWtpProfilePtrOutput() WirelessControllerWtpProfilePtrOutput {
	return i.ToWirelessControllerWtpProfilePtrOutputWithContext(context.Background())
}

func (i *WirelessControllerWtpProfile) ToWirelessControllerWtpProfilePtrOutputWithContext(ctx context.Context) WirelessControllerWtpProfilePtrOutput {
	return pulumi.ToOutputWithContext(ctx, i).(WirelessControllerWtpProfilePtrOutput)
}

type WirelessControllerWtpProfilePtrInput interface {
	pulumi.Input

	ToWirelessControllerWtpProfilePtrOutput() WirelessControllerWtpProfilePtrOutput
	ToWirelessControllerWtpProfilePtrOutputWithContext(ctx context.Context) WirelessControllerWtpProfilePtrOutput
}

type wirelessControllerWtpProfilePtrType WirelessControllerWtpProfileArgs

func (*wirelessControllerWtpProfilePtrType) ElementType() reflect.Type {
	return reflect.TypeOf((**WirelessControllerWtpProfile)(nil))
}

func (i *wirelessControllerWtpProfilePtrType) ToWirelessControllerWtpProfilePtrOutput() WirelessControllerWtpProfilePtrOutput {
	return i.ToWirelessControllerWtpProfilePtrOutputWithContext(context.Background())
}

func (i *wirelessControllerWtpProfilePtrType) ToWirelessControllerWtpProfilePtrOutputWithContext(ctx context.Context) WirelessControllerWtpProfilePtrOutput {
	return pulumi.ToOutputWithContext(ctx, i).(WirelessControllerWtpProfilePtrOutput)
}

// WirelessControllerWtpProfileArrayInput is an input type that accepts WirelessControllerWtpProfileArray and WirelessControllerWtpProfileArrayOutput values.
// You can construct a concrete instance of `WirelessControllerWtpProfileArrayInput` via:
//
//          WirelessControllerWtpProfileArray{ WirelessControllerWtpProfileArgs{...} }
type WirelessControllerWtpProfileArrayInput interface {
	pulumi.Input

	ToWirelessControllerWtpProfileArrayOutput() WirelessControllerWtpProfileArrayOutput
	ToWirelessControllerWtpProfileArrayOutputWithContext(context.Context) WirelessControllerWtpProfileArrayOutput
}

type WirelessControllerWtpProfileArray []WirelessControllerWtpProfileInput

func (WirelessControllerWtpProfileArray) ElementType() reflect.Type {
	return reflect.TypeOf(([]*WirelessControllerWtpProfile)(nil))
}

func (i WirelessControllerWtpProfileArray) ToWirelessControllerWtpProfileArrayOutput() WirelessControllerWtpProfileArrayOutput {
	return i.ToWirelessControllerWtpProfileArrayOutputWithContext(context.Background())
}

func (i WirelessControllerWtpProfileArray) ToWirelessControllerWtpProfileArrayOutputWithContext(ctx context.Context) WirelessControllerWtpProfileArrayOutput {
	return pulumi.ToOutputWithContext(ctx, i).(WirelessControllerWtpProfileArrayOutput)
}

// WirelessControllerWtpProfileMapInput is an input type that accepts WirelessControllerWtpProfileMap and WirelessControllerWtpProfileMapOutput values.
// You can construct a concrete instance of `WirelessControllerWtpProfileMapInput` via:
//
//          WirelessControllerWtpProfileMap{ "key": WirelessControllerWtpProfileArgs{...} }
type WirelessControllerWtpProfileMapInput interface {
	pulumi.Input

	ToWirelessControllerWtpProfileMapOutput() WirelessControllerWtpProfileMapOutput
	ToWirelessControllerWtpProfileMapOutputWithContext(context.Context) WirelessControllerWtpProfileMapOutput
}

type WirelessControllerWtpProfileMap map[string]WirelessControllerWtpProfileInput

func (WirelessControllerWtpProfileMap) ElementType() reflect.Type {
	return reflect.TypeOf((map[string]*WirelessControllerWtpProfile)(nil))
}

func (i WirelessControllerWtpProfileMap) ToWirelessControllerWtpProfileMapOutput() WirelessControllerWtpProfileMapOutput {
	return i.ToWirelessControllerWtpProfileMapOutputWithContext(context.Background())
}

func (i WirelessControllerWtpProfileMap) ToWirelessControllerWtpProfileMapOutputWithContext(ctx context.Context) WirelessControllerWtpProfileMapOutput {
	return pulumi.ToOutputWithContext(ctx, i).(WirelessControllerWtpProfileMapOutput)
}

type WirelessControllerWtpProfileOutput struct {
	*pulumi.OutputState
}

func (WirelessControllerWtpProfileOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*WirelessControllerWtpProfile)(nil))
}

func (o WirelessControllerWtpProfileOutput) ToWirelessControllerWtpProfileOutput() WirelessControllerWtpProfileOutput {
	return o
}

func (o WirelessControllerWtpProfileOutput) ToWirelessControllerWtpProfileOutputWithContext(ctx context.Context) WirelessControllerWtpProfileOutput {
	return o
}

func (o WirelessControllerWtpProfileOutput) ToWirelessControllerWtpProfilePtrOutput() WirelessControllerWtpProfilePtrOutput {
	return o.ToWirelessControllerWtpProfilePtrOutputWithContext(context.Background())
}

func (o WirelessControllerWtpProfileOutput) ToWirelessControllerWtpProfilePtrOutputWithContext(ctx context.Context) WirelessControllerWtpProfilePtrOutput {
	return o.ApplyT(func(v WirelessControllerWtpProfile) *WirelessControllerWtpProfile {
		return &v
	}).(WirelessControllerWtpProfilePtrOutput)
}

type WirelessControllerWtpProfilePtrOutput struct {
	*pulumi.OutputState
}

func (WirelessControllerWtpProfilePtrOutput) ElementType() reflect.Type {
	return reflect.TypeOf((**WirelessControllerWtpProfile)(nil))
}

func (o WirelessControllerWtpProfilePtrOutput) ToWirelessControllerWtpProfilePtrOutput() WirelessControllerWtpProfilePtrOutput {
	return o
}

func (o WirelessControllerWtpProfilePtrOutput) ToWirelessControllerWtpProfilePtrOutputWithContext(ctx context.Context) WirelessControllerWtpProfilePtrOutput {
	return o
}

type WirelessControllerWtpProfileArrayOutput struct{ *pulumi.OutputState }

func (WirelessControllerWtpProfileArrayOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*[]WirelessControllerWtpProfile)(nil))
}

func (o WirelessControllerWtpProfileArrayOutput) ToWirelessControllerWtpProfileArrayOutput() WirelessControllerWtpProfileArrayOutput {
	return o
}

func (o WirelessControllerWtpProfileArrayOutput) ToWirelessControllerWtpProfileArrayOutputWithContext(ctx context.Context) WirelessControllerWtpProfileArrayOutput {
	return o
}

func (o WirelessControllerWtpProfileArrayOutput) Index(i pulumi.IntInput) WirelessControllerWtpProfileOutput {
	return pulumi.All(o, i).ApplyT(func(vs []interface{}) WirelessControllerWtpProfile {
		return vs[0].([]WirelessControllerWtpProfile)[vs[1].(int)]
	}).(WirelessControllerWtpProfileOutput)
}

type WirelessControllerWtpProfileMapOutput struct{ *pulumi.OutputState }

func (WirelessControllerWtpProfileMapOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*map[string]WirelessControllerWtpProfile)(nil))
}

func (o WirelessControllerWtpProfileMapOutput) ToWirelessControllerWtpProfileMapOutput() WirelessControllerWtpProfileMapOutput {
	return o
}

func (o WirelessControllerWtpProfileMapOutput) ToWirelessControllerWtpProfileMapOutputWithContext(ctx context.Context) WirelessControllerWtpProfileMapOutput {
	return o
}

func (o WirelessControllerWtpProfileMapOutput) MapIndex(k pulumi.StringInput) WirelessControllerWtpProfileOutput {
	return pulumi.All(o, k).ApplyT(func(vs []interface{}) WirelessControllerWtpProfile {
		return vs[0].(map[string]WirelessControllerWtpProfile)[vs[1].(string)]
	}).(WirelessControllerWtpProfileOutput)
}

func init() {
	pulumi.RegisterOutputType(WirelessControllerWtpProfileOutput{})
	pulumi.RegisterOutputType(WirelessControllerWtpProfilePtrOutput{})
	pulumi.RegisterOutputType(WirelessControllerWtpProfileArrayOutput{})
	pulumi.RegisterOutputType(WirelessControllerWtpProfileMapOutput{})
}
