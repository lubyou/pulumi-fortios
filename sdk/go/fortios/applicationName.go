// *** WARNING: this file was generated by the Pulumi Terraform Bridge (tfgen) Tool. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

package fortios

import (
	"context"
	"reflect"

	"github.com/pkg/errors"
	"github.com/pulumi/pulumi/sdk/v3/go/pulumi"
)

// Configure application signatures.
//
// ## Import
//
// Application Name can be imported using any of these accepted formats$ export "FORTIOS_IMPORT_TABLE"="true"
//
// ```sh
//  $ pulumi import fortios:index/applicationName:ApplicationName labelname {{name}}
// ```
//
//  $ unset "FORTIOS_IMPORT_TABLE"
type ApplicationName struct {
	pulumi.CustomResourceState

	// Application behavior.
	Behavior pulumi.StringOutput `pulumi:"behavior"`
	// Application category ID.
	Category pulumi.IntOutput `pulumi:"category"`
	// true or false, set this parameter to true when using dynamic forEach + toset to configure and sort sub-tables, please do not set this parameter when configuring static sub-tables.
	DynamicSortSubtable pulumi.StringPtrOutput `pulumi:"dynamicSortSubtable"`
	// Application ID.
	Fosid pulumi.IntOutput `pulumi:"fosid"`
	// Meta data. The structure of `metadata` block is documented below.
	Metadatas ApplicationNameMetadataArrayOutput `pulumi:"metadatas"`
	// Parameter name.
	Name pulumi.StringOutput `pulumi:"name"`
	// Application parameter name.
	Parameter pulumi.StringOutput `pulumi:"parameter"`
	// Application parameters. The structure of `parameters` block is documented below.
	Parameters ApplicationNameParameterArrayOutput `pulumi:"parameters"`
	// Application popularity.
	Popularity pulumi.IntOutput `pulumi:"popularity"`
	// Application protocol.
	Protocol pulumi.StringOutput `pulumi:"protocol"`
	// Application risk.
	Risk pulumi.IntOutput `pulumi:"risk"`
	// Application sub-category ID.
	SubCategory pulumi.IntOutput `pulumi:"subCategory"`
	// Application technology.
	Technology pulumi.StringOutput `pulumi:"technology"`
	// Specifies the vdom to which the resource will be applied when the FortiGate unit is running in VDOM mode. Only one vdom can be specified. If you want to inherit the vdom configuration of the provider, please do not set this parameter.
	Vdomparam pulumi.StringPtrOutput `pulumi:"vdomparam"`
	// Application vendor.
	Vendor pulumi.StringOutput `pulumi:"vendor"`
	// Application weight.
	Weight pulumi.IntOutput `pulumi:"weight"`
}

// NewApplicationName registers a new resource with the given unique name, arguments, and options.
func NewApplicationName(ctx *pulumi.Context,
	name string, args *ApplicationNameArgs, opts ...pulumi.ResourceOption) (*ApplicationName, error) {
	if args == nil {
		return nil, errors.New("missing one or more required arguments")
	}

	if args.Category == nil {
		return nil, errors.New("invalid value for required argument 'Category'")
	}
	opts = pkgResourceDefaultOpts(opts)
	var resource ApplicationName
	err := ctx.RegisterResource("fortios:index/applicationName:ApplicationName", name, args, &resource, opts...)
	if err != nil {
		return nil, err
	}
	return &resource, nil
}

// GetApplicationName gets an existing ApplicationName resource's state with the given name, ID, and optional
// state properties that are used to uniquely qualify the lookup (nil if not required).
func GetApplicationName(ctx *pulumi.Context,
	name string, id pulumi.IDInput, state *ApplicationNameState, opts ...pulumi.ResourceOption) (*ApplicationName, error) {
	var resource ApplicationName
	err := ctx.ReadResource("fortios:index/applicationName:ApplicationName", name, id, state, &resource, opts...)
	if err != nil {
		return nil, err
	}
	return &resource, nil
}

// Input properties used for looking up and filtering ApplicationName resources.
type applicationNameState struct {
	// Application behavior.
	Behavior *string `pulumi:"behavior"`
	// Application category ID.
	Category *int `pulumi:"category"`
	// true or false, set this parameter to true when using dynamic forEach + toset to configure and sort sub-tables, please do not set this parameter when configuring static sub-tables.
	DynamicSortSubtable *string `pulumi:"dynamicSortSubtable"`
	// Application ID.
	Fosid *int `pulumi:"fosid"`
	// Meta data. The structure of `metadata` block is documented below.
	Metadatas []ApplicationNameMetadata `pulumi:"metadatas"`
	// Parameter name.
	Name *string `pulumi:"name"`
	// Application parameter name.
	Parameter *string `pulumi:"parameter"`
	// Application parameters. The structure of `parameters` block is documented below.
	Parameters []ApplicationNameParameter `pulumi:"parameters"`
	// Application popularity.
	Popularity *int `pulumi:"popularity"`
	// Application protocol.
	Protocol *string `pulumi:"protocol"`
	// Application risk.
	Risk *int `pulumi:"risk"`
	// Application sub-category ID.
	SubCategory *int `pulumi:"subCategory"`
	// Application technology.
	Technology *string `pulumi:"technology"`
	// Specifies the vdom to which the resource will be applied when the FortiGate unit is running in VDOM mode. Only one vdom can be specified. If you want to inherit the vdom configuration of the provider, please do not set this parameter.
	Vdomparam *string `pulumi:"vdomparam"`
	// Application vendor.
	Vendor *string `pulumi:"vendor"`
	// Application weight.
	Weight *int `pulumi:"weight"`
}

type ApplicationNameState struct {
	// Application behavior.
	Behavior pulumi.StringPtrInput
	// Application category ID.
	Category pulumi.IntPtrInput
	// true or false, set this parameter to true when using dynamic forEach + toset to configure and sort sub-tables, please do not set this parameter when configuring static sub-tables.
	DynamicSortSubtable pulumi.StringPtrInput
	// Application ID.
	Fosid pulumi.IntPtrInput
	// Meta data. The structure of `metadata` block is documented below.
	Metadatas ApplicationNameMetadataArrayInput
	// Parameter name.
	Name pulumi.StringPtrInput
	// Application parameter name.
	Parameter pulumi.StringPtrInput
	// Application parameters. The structure of `parameters` block is documented below.
	Parameters ApplicationNameParameterArrayInput
	// Application popularity.
	Popularity pulumi.IntPtrInput
	// Application protocol.
	Protocol pulumi.StringPtrInput
	// Application risk.
	Risk pulumi.IntPtrInput
	// Application sub-category ID.
	SubCategory pulumi.IntPtrInput
	// Application technology.
	Technology pulumi.StringPtrInput
	// Specifies the vdom to which the resource will be applied when the FortiGate unit is running in VDOM mode. Only one vdom can be specified. If you want to inherit the vdom configuration of the provider, please do not set this parameter.
	Vdomparam pulumi.StringPtrInput
	// Application vendor.
	Vendor pulumi.StringPtrInput
	// Application weight.
	Weight pulumi.IntPtrInput
}

func (ApplicationNameState) ElementType() reflect.Type {
	return reflect.TypeOf((*applicationNameState)(nil)).Elem()
}

type applicationNameArgs struct {
	// Application behavior.
	Behavior *string `pulumi:"behavior"`
	// Application category ID.
	Category int `pulumi:"category"`
	// true or false, set this parameter to true when using dynamic forEach + toset to configure and sort sub-tables, please do not set this parameter when configuring static sub-tables.
	DynamicSortSubtable *string `pulumi:"dynamicSortSubtable"`
	// Application ID.
	Fosid *int `pulumi:"fosid"`
	// Meta data. The structure of `metadata` block is documented below.
	Metadatas []ApplicationNameMetadata `pulumi:"metadatas"`
	// Parameter name.
	Name *string `pulumi:"name"`
	// Application parameter name.
	Parameter *string `pulumi:"parameter"`
	// Application parameters. The structure of `parameters` block is documented below.
	Parameters []ApplicationNameParameter `pulumi:"parameters"`
	// Application popularity.
	Popularity *int `pulumi:"popularity"`
	// Application protocol.
	Protocol *string `pulumi:"protocol"`
	// Application risk.
	Risk *int `pulumi:"risk"`
	// Application sub-category ID.
	SubCategory *int `pulumi:"subCategory"`
	// Application technology.
	Technology *string `pulumi:"technology"`
	// Specifies the vdom to which the resource will be applied when the FortiGate unit is running in VDOM mode. Only one vdom can be specified. If you want to inherit the vdom configuration of the provider, please do not set this parameter.
	Vdomparam *string `pulumi:"vdomparam"`
	// Application vendor.
	Vendor *string `pulumi:"vendor"`
	// Application weight.
	Weight *int `pulumi:"weight"`
}

// The set of arguments for constructing a ApplicationName resource.
type ApplicationNameArgs struct {
	// Application behavior.
	Behavior pulumi.StringPtrInput
	// Application category ID.
	Category pulumi.IntInput
	// true or false, set this parameter to true when using dynamic forEach + toset to configure and sort sub-tables, please do not set this parameter when configuring static sub-tables.
	DynamicSortSubtable pulumi.StringPtrInput
	// Application ID.
	Fosid pulumi.IntPtrInput
	// Meta data. The structure of `metadata` block is documented below.
	Metadatas ApplicationNameMetadataArrayInput
	// Parameter name.
	Name pulumi.StringPtrInput
	// Application parameter name.
	Parameter pulumi.StringPtrInput
	// Application parameters. The structure of `parameters` block is documented below.
	Parameters ApplicationNameParameterArrayInput
	// Application popularity.
	Popularity pulumi.IntPtrInput
	// Application protocol.
	Protocol pulumi.StringPtrInput
	// Application risk.
	Risk pulumi.IntPtrInput
	// Application sub-category ID.
	SubCategory pulumi.IntPtrInput
	// Application technology.
	Technology pulumi.StringPtrInput
	// Specifies the vdom to which the resource will be applied when the FortiGate unit is running in VDOM mode. Only one vdom can be specified. If you want to inherit the vdom configuration of the provider, please do not set this parameter.
	Vdomparam pulumi.StringPtrInput
	// Application vendor.
	Vendor pulumi.StringPtrInput
	// Application weight.
	Weight pulumi.IntPtrInput
}

func (ApplicationNameArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*applicationNameArgs)(nil)).Elem()
}

type ApplicationNameInput interface {
	pulumi.Input

	ToApplicationNameOutput() ApplicationNameOutput
	ToApplicationNameOutputWithContext(ctx context.Context) ApplicationNameOutput
}

func (*ApplicationName) ElementType() reflect.Type {
	return reflect.TypeOf((**ApplicationName)(nil)).Elem()
}

func (i *ApplicationName) ToApplicationNameOutput() ApplicationNameOutput {
	return i.ToApplicationNameOutputWithContext(context.Background())
}

func (i *ApplicationName) ToApplicationNameOutputWithContext(ctx context.Context) ApplicationNameOutput {
	return pulumi.ToOutputWithContext(ctx, i).(ApplicationNameOutput)
}

// ApplicationNameArrayInput is an input type that accepts ApplicationNameArray and ApplicationNameArrayOutput values.
// You can construct a concrete instance of `ApplicationNameArrayInput` via:
//
//          ApplicationNameArray{ ApplicationNameArgs{...} }
type ApplicationNameArrayInput interface {
	pulumi.Input

	ToApplicationNameArrayOutput() ApplicationNameArrayOutput
	ToApplicationNameArrayOutputWithContext(context.Context) ApplicationNameArrayOutput
}

type ApplicationNameArray []ApplicationNameInput

func (ApplicationNameArray) ElementType() reflect.Type {
	return reflect.TypeOf((*[]*ApplicationName)(nil)).Elem()
}

func (i ApplicationNameArray) ToApplicationNameArrayOutput() ApplicationNameArrayOutput {
	return i.ToApplicationNameArrayOutputWithContext(context.Background())
}

func (i ApplicationNameArray) ToApplicationNameArrayOutputWithContext(ctx context.Context) ApplicationNameArrayOutput {
	return pulumi.ToOutputWithContext(ctx, i).(ApplicationNameArrayOutput)
}

// ApplicationNameMapInput is an input type that accepts ApplicationNameMap and ApplicationNameMapOutput values.
// You can construct a concrete instance of `ApplicationNameMapInput` via:
//
//          ApplicationNameMap{ "key": ApplicationNameArgs{...} }
type ApplicationNameMapInput interface {
	pulumi.Input

	ToApplicationNameMapOutput() ApplicationNameMapOutput
	ToApplicationNameMapOutputWithContext(context.Context) ApplicationNameMapOutput
}

type ApplicationNameMap map[string]ApplicationNameInput

func (ApplicationNameMap) ElementType() reflect.Type {
	return reflect.TypeOf((*map[string]*ApplicationName)(nil)).Elem()
}

func (i ApplicationNameMap) ToApplicationNameMapOutput() ApplicationNameMapOutput {
	return i.ToApplicationNameMapOutputWithContext(context.Background())
}

func (i ApplicationNameMap) ToApplicationNameMapOutputWithContext(ctx context.Context) ApplicationNameMapOutput {
	return pulumi.ToOutputWithContext(ctx, i).(ApplicationNameMapOutput)
}

type ApplicationNameOutput struct{ *pulumi.OutputState }

func (ApplicationNameOutput) ElementType() reflect.Type {
	return reflect.TypeOf((**ApplicationName)(nil)).Elem()
}

func (o ApplicationNameOutput) ToApplicationNameOutput() ApplicationNameOutput {
	return o
}

func (o ApplicationNameOutput) ToApplicationNameOutputWithContext(ctx context.Context) ApplicationNameOutput {
	return o
}

type ApplicationNameArrayOutput struct{ *pulumi.OutputState }

func (ApplicationNameArrayOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*[]*ApplicationName)(nil)).Elem()
}

func (o ApplicationNameArrayOutput) ToApplicationNameArrayOutput() ApplicationNameArrayOutput {
	return o
}

func (o ApplicationNameArrayOutput) ToApplicationNameArrayOutputWithContext(ctx context.Context) ApplicationNameArrayOutput {
	return o
}

func (o ApplicationNameArrayOutput) Index(i pulumi.IntInput) ApplicationNameOutput {
	return pulumi.All(o, i).ApplyT(func(vs []interface{}) *ApplicationName {
		return vs[0].([]*ApplicationName)[vs[1].(int)]
	}).(ApplicationNameOutput)
}

type ApplicationNameMapOutput struct{ *pulumi.OutputState }

func (ApplicationNameMapOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*map[string]*ApplicationName)(nil)).Elem()
}

func (o ApplicationNameMapOutput) ToApplicationNameMapOutput() ApplicationNameMapOutput {
	return o
}

func (o ApplicationNameMapOutput) ToApplicationNameMapOutputWithContext(ctx context.Context) ApplicationNameMapOutput {
	return o
}

func (o ApplicationNameMapOutput) MapIndex(k pulumi.StringInput) ApplicationNameOutput {
	return pulumi.All(o, k).ApplyT(func(vs []interface{}) *ApplicationName {
		return vs[0].(map[string]*ApplicationName)[vs[1].(string)]
	}).(ApplicationNameOutput)
}

func init() {
	pulumi.RegisterInputType(reflect.TypeOf((*ApplicationNameInput)(nil)).Elem(), &ApplicationName{})
	pulumi.RegisterInputType(reflect.TypeOf((*ApplicationNameArrayInput)(nil)).Elem(), ApplicationNameArray{})
	pulumi.RegisterInputType(reflect.TypeOf((*ApplicationNameMapInput)(nil)).Elem(), ApplicationNameMap{})
	pulumi.RegisterOutputType(ApplicationNameOutput{})
	pulumi.RegisterOutputType(ApplicationNameArrayOutput{})
	pulumi.RegisterOutputType(ApplicationNameMapOutput{})
}
