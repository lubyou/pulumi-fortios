// Code generated by the Pulumi Terraform Bridge (tfgen) Tool DO NOT EDIT.
// *** WARNING: Do not edit by hand unless you're certain you know what you are doing! ***

package fortios

import (
	"context"
	"reflect"

	"errors"
	"github.com/pulumi/pulumi/sdk/v3/go/pulumi"
)

type UserKrbKeytab struct {
	pulumi.CustomResourceState

	Keytab     pulumi.StringOutput    `pulumi:"keytab"`
	LdapServer pulumi.StringOutput    `pulumi:"ldapServer"`
	Name       pulumi.StringOutput    `pulumi:"name"`
	PacData    pulumi.StringOutput    `pulumi:"pacData"`
	Principal  pulumi.StringOutput    `pulumi:"principal"`
	Vdomparam  pulumi.StringPtrOutput `pulumi:"vdomparam"`
}

// NewUserKrbKeytab registers a new resource with the given unique name, arguments, and options.
func NewUserKrbKeytab(ctx *pulumi.Context,
	name string, args *UserKrbKeytabArgs, opts ...pulumi.ResourceOption) (*UserKrbKeytab, error) {
	if args == nil {
		return nil, errors.New("missing one or more required arguments")
	}

	if args.Keytab == nil {
		return nil, errors.New("invalid value for required argument 'Keytab'")
	}
	if args.LdapServer == nil {
		return nil, errors.New("invalid value for required argument 'LdapServer'")
	}
	if args.Principal == nil {
		return nil, errors.New("invalid value for required argument 'Principal'")
	}
	if args.Keytab != nil {
		args.Keytab = pulumi.ToSecret(args.Keytab).(pulumi.StringInput)
	}
	secrets := pulumi.AdditionalSecretOutputs([]string{
		"keytab",
	})
	opts = append(opts, secrets)
	opts = pkgResourceDefaultOpts(opts)
	var resource UserKrbKeytab
	err := ctx.RegisterResource("fortios:index/userKrbKeytab:UserKrbKeytab", name, args, &resource, opts...)
	if err != nil {
		return nil, err
	}
	return &resource, nil
}

// GetUserKrbKeytab gets an existing UserKrbKeytab resource's state with the given name, ID, and optional
// state properties that are used to uniquely qualify the lookup (nil if not required).
func GetUserKrbKeytab(ctx *pulumi.Context,
	name string, id pulumi.IDInput, state *UserKrbKeytabState, opts ...pulumi.ResourceOption) (*UserKrbKeytab, error) {
	var resource UserKrbKeytab
	err := ctx.ReadResource("fortios:index/userKrbKeytab:UserKrbKeytab", name, id, state, &resource, opts...)
	if err != nil {
		return nil, err
	}
	return &resource, nil
}

// Input properties used for looking up and filtering UserKrbKeytab resources.
type userKrbKeytabState struct {
	Keytab     *string `pulumi:"keytab"`
	LdapServer *string `pulumi:"ldapServer"`
	Name       *string `pulumi:"name"`
	PacData    *string `pulumi:"pacData"`
	Principal  *string `pulumi:"principal"`
	Vdomparam  *string `pulumi:"vdomparam"`
}

type UserKrbKeytabState struct {
	Keytab     pulumi.StringPtrInput
	LdapServer pulumi.StringPtrInput
	Name       pulumi.StringPtrInput
	PacData    pulumi.StringPtrInput
	Principal  pulumi.StringPtrInput
	Vdomparam  pulumi.StringPtrInput
}

func (UserKrbKeytabState) ElementType() reflect.Type {
	return reflect.TypeOf((*userKrbKeytabState)(nil)).Elem()
}

type userKrbKeytabArgs struct {
	Keytab     string  `pulumi:"keytab"`
	LdapServer string  `pulumi:"ldapServer"`
	Name       *string `pulumi:"name"`
	PacData    *string `pulumi:"pacData"`
	Principal  string  `pulumi:"principal"`
	Vdomparam  *string `pulumi:"vdomparam"`
}

// The set of arguments for constructing a UserKrbKeytab resource.
type UserKrbKeytabArgs struct {
	Keytab     pulumi.StringInput
	LdapServer pulumi.StringInput
	Name       pulumi.StringPtrInput
	PacData    pulumi.StringPtrInput
	Principal  pulumi.StringInput
	Vdomparam  pulumi.StringPtrInput
}

func (UserKrbKeytabArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*userKrbKeytabArgs)(nil)).Elem()
}

type UserKrbKeytabInput interface {
	pulumi.Input

	ToUserKrbKeytabOutput() UserKrbKeytabOutput
	ToUserKrbKeytabOutputWithContext(ctx context.Context) UserKrbKeytabOutput
}

func (*UserKrbKeytab) ElementType() reflect.Type {
	return reflect.TypeOf((**UserKrbKeytab)(nil)).Elem()
}

func (i *UserKrbKeytab) ToUserKrbKeytabOutput() UserKrbKeytabOutput {
	return i.ToUserKrbKeytabOutputWithContext(context.Background())
}

func (i *UserKrbKeytab) ToUserKrbKeytabOutputWithContext(ctx context.Context) UserKrbKeytabOutput {
	return pulumi.ToOutputWithContext(ctx, i).(UserKrbKeytabOutput)
}

// UserKrbKeytabArrayInput is an input type that accepts UserKrbKeytabArray and UserKrbKeytabArrayOutput values.
// You can construct a concrete instance of `UserKrbKeytabArrayInput` via:
//
//	UserKrbKeytabArray{ UserKrbKeytabArgs{...} }
type UserKrbKeytabArrayInput interface {
	pulumi.Input

	ToUserKrbKeytabArrayOutput() UserKrbKeytabArrayOutput
	ToUserKrbKeytabArrayOutputWithContext(context.Context) UserKrbKeytabArrayOutput
}

type UserKrbKeytabArray []UserKrbKeytabInput

func (UserKrbKeytabArray) ElementType() reflect.Type {
	return reflect.TypeOf((*[]*UserKrbKeytab)(nil)).Elem()
}

func (i UserKrbKeytabArray) ToUserKrbKeytabArrayOutput() UserKrbKeytabArrayOutput {
	return i.ToUserKrbKeytabArrayOutputWithContext(context.Background())
}

func (i UserKrbKeytabArray) ToUserKrbKeytabArrayOutputWithContext(ctx context.Context) UserKrbKeytabArrayOutput {
	return pulumi.ToOutputWithContext(ctx, i).(UserKrbKeytabArrayOutput)
}

// UserKrbKeytabMapInput is an input type that accepts UserKrbKeytabMap and UserKrbKeytabMapOutput values.
// You can construct a concrete instance of `UserKrbKeytabMapInput` via:
//
//	UserKrbKeytabMap{ "key": UserKrbKeytabArgs{...} }
type UserKrbKeytabMapInput interface {
	pulumi.Input

	ToUserKrbKeytabMapOutput() UserKrbKeytabMapOutput
	ToUserKrbKeytabMapOutputWithContext(context.Context) UserKrbKeytabMapOutput
}

type UserKrbKeytabMap map[string]UserKrbKeytabInput

func (UserKrbKeytabMap) ElementType() reflect.Type {
	return reflect.TypeOf((*map[string]*UserKrbKeytab)(nil)).Elem()
}

func (i UserKrbKeytabMap) ToUserKrbKeytabMapOutput() UserKrbKeytabMapOutput {
	return i.ToUserKrbKeytabMapOutputWithContext(context.Background())
}

func (i UserKrbKeytabMap) ToUserKrbKeytabMapOutputWithContext(ctx context.Context) UserKrbKeytabMapOutput {
	return pulumi.ToOutputWithContext(ctx, i).(UserKrbKeytabMapOutput)
}

type UserKrbKeytabOutput struct{ *pulumi.OutputState }

func (UserKrbKeytabOutput) ElementType() reflect.Type {
	return reflect.TypeOf((**UserKrbKeytab)(nil)).Elem()
}

func (o UserKrbKeytabOutput) ToUserKrbKeytabOutput() UserKrbKeytabOutput {
	return o
}

func (o UserKrbKeytabOutput) ToUserKrbKeytabOutputWithContext(ctx context.Context) UserKrbKeytabOutput {
	return o
}

func (o UserKrbKeytabOutput) Keytab() pulumi.StringOutput {
	return o.ApplyT(func(v *UserKrbKeytab) pulumi.StringOutput { return v.Keytab }).(pulumi.StringOutput)
}

func (o UserKrbKeytabOutput) LdapServer() pulumi.StringOutput {
	return o.ApplyT(func(v *UserKrbKeytab) pulumi.StringOutput { return v.LdapServer }).(pulumi.StringOutput)
}

func (o UserKrbKeytabOutput) Name() pulumi.StringOutput {
	return o.ApplyT(func(v *UserKrbKeytab) pulumi.StringOutput { return v.Name }).(pulumi.StringOutput)
}

func (o UserKrbKeytabOutput) PacData() pulumi.StringOutput {
	return o.ApplyT(func(v *UserKrbKeytab) pulumi.StringOutput { return v.PacData }).(pulumi.StringOutput)
}

func (o UserKrbKeytabOutput) Principal() pulumi.StringOutput {
	return o.ApplyT(func(v *UserKrbKeytab) pulumi.StringOutput { return v.Principal }).(pulumi.StringOutput)
}

func (o UserKrbKeytabOutput) Vdomparam() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *UserKrbKeytab) pulumi.StringPtrOutput { return v.Vdomparam }).(pulumi.StringPtrOutput)
}

type UserKrbKeytabArrayOutput struct{ *pulumi.OutputState }

func (UserKrbKeytabArrayOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*[]*UserKrbKeytab)(nil)).Elem()
}

func (o UserKrbKeytabArrayOutput) ToUserKrbKeytabArrayOutput() UserKrbKeytabArrayOutput {
	return o
}

func (o UserKrbKeytabArrayOutput) ToUserKrbKeytabArrayOutputWithContext(ctx context.Context) UserKrbKeytabArrayOutput {
	return o
}

func (o UserKrbKeytabArrayOutput) Index(i pulumi.IntInput) UserKrbKeytabOutput {
	return pulumi.All(o, i).ApplyT(func(vs []interface{}) *UserKrbKeytab {
		return vs[0].([]*UserKrbKeytab)[vs[1].(int)]
	}).(UserKrbKeytabOutput)
}

type UserKrbKeytabMapOutput struct{ *pulumi.OutputState }

func (UserKrbKeytabMapOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*map[string]*UserKrbKeytab)(nil)).Elem()
}

func (o UserKrbKeytabMapOutput) ToUserKrbKeytabMapOutput() UserKrbKeytabMapOutput {
	return o
}

func (o UserKrbKeytabMapOutput) ToUserKrbKeytabMapOutputWithContext(ctx context.Context) UserKrbKeytabMapOutput {
	return o
}

func (o UserKrbKeytabMapOutput) MapIndex(k pulumi.StringInput) UserKrbKeytabOutput {
	return pulumi.All(o, k).ApplyT(func(vs []interface{}) *UserKrbKeytab {
		return vs[0].(map[string]*UserKrbKeytab)[vs[1].(string)]
	}).(UserKrbKeytabOutput)
}

func init() {
	pulumi.RegisterInputType(reflect.TypeOf((*UserKrbKeytabInput)(nil)).Elem(), &UserKrbKeytab{})
	pulumi.RegisterInputType(reflect.TypeOf((*UserKrbKeytabArrayInput)(nil)).Elem(), UserKrbKeytabArray{})
	pulumi.RegisterInputType(reflect.TypeOf((*UserKrbKeytabMapInput)(nil)).Elem(), UserKrbKeytabMap{})
	pulumi.RegisterOutputType(UserKrbKeytabOutput{})
	pulumi.RegisterOutputType(UserKrbKeytabArrayOutput{})
	pulumi.RegisterOutputType(UserKrbKeytabMapOutput{})
}
