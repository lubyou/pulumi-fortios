// Code generated by the Pulumi Terraform Bridge (tfgen) Tool DO NOT EDIT.
// *** WARNING: Do not edit by hand unless you're certain you know what you are doing! ***

package fortios

import (
	"context"
	"reflect"

	"github.com/lubyou/pulumi-fortios/sdk/go/fortios/internal"
	"github.com/pulumi/pulumi/sdk/v3/go/pulumi"
)

type WebProxyForwardServer struct {
	pulumi.CustomResourceState

	AddrType         pulumi.StringOutput    `pulumi:"addrType"`
	Comment          pulumi.StringOutput    `pulumi:"comment"`
	Fqdn             pulumi.StringOutput    `pulumi:"fqdn"`
	Healthcheck      pulumi.StringOutput    `pulumi:"healthcheck"`
	Ip               pulumi.StringOutput    `pulumi:"ip"`
	Monitor          pulumi.StringOutput    `pulumi:"monitor"`
	Name             pulumi.StringOutput    `pulumi:"name"`
	Password         pulumi.StringPtrOutput `pulumi:"password"`
	Port             pulumi.IntOutput       `pulumi:"port"`
	ServerDownOption pulumi.StringOutput    `pulumi:"serverDownOption"`
	Username         pulumi.StringOutput    `pulumi:"username"`
	Vdomparam        pulumi.StringPtrOutput `pulumi:"vdomparam"`
}

// NewWebProxyForwardServer registers a new resource with the given unique name, arguments, and options.
func NewWebProxyForwardServer(ctx *pulumi.Context,
	name string, args *WebProxyForwardServerArgs, opts ...pulumi.ResourceOption) (*WebProxyForwardServer, error) {
	if args == nil {
		args = &WebProxyForwardServerArgs{}
	}

	if args.Password != nil {
		args.Password = pulumi.ToSecret(args.Password).(pulumi.StringPtrInput)
	}
	secrets := pulumi.AdditionalSecretOutputs([]string{
		"password",
	})
	opts = append(opts, secrets)
	opts = internal.PkgResourceDefaultOpts(opts)
	var resource WebProxyForwardServer
	err := ctx.RegisterResource("fortios:index/webProxyForwardServer:WebProxyForwardServer", name, args, &resource, opts...)
	if err != nil {
		return nil, err
	}
	return &resource, nil
}

// GetWebProxyForwardServer gets an existing WebProxyForwardServer resource's state with the given name, ID, and optional
// state properties that are used to uniquely qualify the lookup (nil if not required).
func GetWebProxyForwardServer(ctx *pulumi.Context,
	name string, id pulumi.IDInput, state *WebProxyForwardServerState, opts ...pulumi.ResourceOption) (*WebProxyForwardServer, error) {
	var resource WebProxyForwardServer
	err := ctx.ReadResource("fortios:index/webProxyForwardServer:WebProxyForwardServer", name, id, state, &resource, opts...)
	if err != nil {
		return nil, err
	}
	return &resource, nil
}

// Input properties used for looking up and filtering WebProxyForwardServer resources.
type webProxyForwardServerState struct {
	AddrType         *string `pulumi:"addrType"`
	Comment          *string `pulumi:"comment"`
	Fqdn             *string `pulumi:"fqdn"`
	Healthcheck      *string `pulumi:"healthcheck"`
	Ip               *string `pulumi:"ip"`
	Monitor          *string `pulumi:"monitor"`
	Name             *string `pulumi:"name"`
	Password         *string `pulumi:"password"`
	Port             *int    `pulumi:"port"`
	ServerDownOption *string `pulumi:"serverDownOption"`
	Username         *string `pulumi:"username"`
	Vdomparam        *string `pulumi:"vdomparam"`
}

type WebProxyForwardServerState struct {
	AddrType         pulumi.StringPtrInput
	Comment          pulumi.StringPtrInput
	Fqdn             pulumi.StringPtrInput
	Healthcheck      pulumi.StringPtrInput
	Ip               pulumi.StringPtrInput
	Monitor          pulumi.StringPtrInput
	Name             pulumi.StringPtrInput
	Password         pulumi.StringPtrInput
	Port             pulumi.IntPtrInput
	ServerDownOption pulumi.StringPtrInput
	Username         pulumi.StringPtrInput
	Vdomparam        pulumi.StringPtrInput
}

func (WebProxyForwardServerState) ElementType() reflect.Type {
	return reflect.TypeOf((*webProxyForwardServerState)(nil)).Elem()
}

type webProxyForwardServerArgs struct {
	AddrType         *string `pulumi:"addrType"`
	Comment          *string `pulumi:"comment"`
	Fqdn             *string `pulumi:"fqdn"`
	Healthcheck      *string `pulumi:"healthcheck"`
	Ip               *string `pulumi:"ip"`
	Monitor          *string `pulumi:"monitor"`
	Name             *string `pulumi:"name"`
	Password         *string `pulumi:"password"`
	Port             *int    `pulumi:"port"`
	ServerDownOption *string `pulumi:"serverDownOption"`
	Username         *string `pulumi:"username"`
	Vdomparam        *string `pulumi:"vdomparam"`
}

// The set of arguments for constructing a WebProxyForwardServer resource.
type WebProxyForwardServerArgs struct {
	AddrType         pulumi.StringPtrInput
	Comment          pulumi.StringPtrInput
	Fqdn             pulumi.StringPtrInput
	Healthcheck      pulumi.StringPtrInput
	Ip               pulumi.StringPtrInput
	Monitor          pulumi.StringPtrInput
	Name             pulumi.StringPtrInput
	Password         pulumi.StringPtrInput
	Port             pulumi.IntPtrInput
	ServerDownOption pulumi.StringPtrInput
	Username         pulumi.StringPtrInput
	Vdomparam        pulumi.StringPtrInput
}

func (WebProxyForwardServerArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*webProxyForwardServerArgs)(nil)).Elem()
}

type WebProxyForwardServerInput interface {
	pulumi.Input

	ToWebProxyForwardServerOutput() WebProxyForwardServerOutput
	ToWebProxyForwardServerOutputWithContext(ctx context.Context) WebProxyForwardServerOutput
}

func (*WebProxyForwardServer) ElementType() reflect.Type {
	return reflect.TypeOf((**WebProxyForwardServer)(nil)).Elem()
}

func (i *WebProxyForwardServer) ToWebProxyForwardServerOutput() WebProxyForwardServerOutput {
	return i.ToWebProxyForwardServerOutputWithContext(context.Background())
}

func (i *WebProxyForwardServer) ToWebProxyForwardServerOutputWithContext(ctx context.Context) WebProxyForwardServerOutput {
	return pulumi.ToOutputWithContext(ctx, i).(WebProxyForwardServerOutput)
}

// WebProxyForwardServerArrayInput is an input type that accepts WebProxyForwardServerArray and WebProxyForwardServerArrayOutput values.
// You can construct a concrete instance of `WebProxyForwardServerArrayInput` via:
//
//	WebProxyForwardServerArray{ WebProxyForwardServerArgs{...} }
type WebProxyForwardServerArrayInput interface {
	pulumi.Input

	ToWebProxyForwardServerArrayOutput() WebProxyForwardServerArrayOutput
	ToWebProxyForwardServerArrayOutputWithContext(context.Context) WebProxyForwardServerArrayOutput
}

type WebProxyForwardServerArray []WebProxyForwardServerInput

func (WebProxyForwardServerArray) ElementType() reflect.Type {
	return reflect.TypeOf((*[]*WebProxyForwardServer)(nil)).Elem()
}

func (i WebProxyForwardServerArray) ToWebProxyForwardServerArrayOutput() WebProxyForwardServerArrayOutput {
	return i.ToWebProxyForwardServerArrayOutputWithContext(context.Background())
}

func (i WebProxyForwardServerArray) ToWebProxyForwardServerArrayOutputWithContext(ctx context.Context) WebProxyForwardServerArrayOutput {
	return pulumi.ToOutputWithContext(ctx, i).(WebProxyForwardServerArrayOutput)
}

// WebProxyForwardServerMapInput is an input type that accepts WebProxyForwardServerMap and WebProxyForwardServerMapOutput values.
// You can construct a concrete instance of `WebProxyForwardServerMapInput` via:
//
//	WebProxyForwardServerMap{ "key": WebProxyForwardServerArgs{...} }
type WebProxyForwardServerMapInput interface {
	pulumi.Input

	ToWebProxyForwardServerMapOutput() WebProxyForwardServerMapOutput
	ToWebProxyForwardServerMapOutputWithContext(context.Context) WebProxyForwardServerMapOutput
}

type WebProxyForwardServerMap map[string]WebProxyForwardServerInput

func (WebProxyForwardServerMap) ElementType() reflect.Type {
	return reflect.TypeOf((*map[string]*WebProxyForwardServer)(nil)).Elem()
}

func (i WebProxyForwardServerMap) ToWebProxyForwardServerMapOutput() WebProxyForwardServerMapOutput {
	return i.ToWebProxyForwardServerMapOutputWithContext(context.Background())
}

func (i WebProxyForwardServerMap) ToWebProxyForwardServerMapOutputWithContext(ctx context.Context) WebProxyForwardServerMapOutput {
	return pulumi.ToOutputWithContext(ctx, i).(WebProxyForwardServerMapOutput)
}

type WebProxyForwardServerOutput struct{ *pulumi.OutputState }

func (WebProxyForwardServerOutput) ElementType() reflect.Type {
	return reflect.TypeOf((**WebProxyForwardServer)(nil)).Elem()
}

func (o WebProxyForwardServerOutput) ToWebProxyForwardServerOutput() WebProxyForwardServerOutput {
	return o
}

func (o WebProxyForwardServerOutput) ToWebProxyForwardServerOutputWithContext(ctx context.Context) WebProxyForwardServerOutput {
	return o
}

func (o WebProxyForwardServerOutput) AddrType() pulumi.StringOutput {
	return o.ApplyT(func(v *WebProxyForwardServer) pulumi.StringOutput { return v.AddrType }).(pulumi.StringOutput)
}

func (o WebProxyForwardServerOutput) Comment() pulumi.StringOutput {
	return o.ApplyT(func(v *WebProxyForwardServer) pulumi.StringOutput { return v.Comment }).(pulumi.StringOutput)
}

func (o WebProxyForwardServerOutput) Fqdn() pulumi.StringOutput {
	return o.ApplyT(func(v *WebProxyForwardServer) pulumi.StringOutput { return v.Fqdn }).(pulumi.StringOutput)
}

func (o WebProxyForwardServerOutput) Healthcheck() pulumi.StringOutput {
	return o.ApplyT(func(v *WebProxyForwardServer) pulumi.StringOutput { return v.Healthcheck }).(pulumi.StringOutput)
}

func (o WebProxyForwardServerOutput) Ip() pulumi.StringOutput {
	return o.ApplyT(func(v *WebProxyForwardServer) pulumi.StringOutput { return v.Ip }).(pulumi.StringOutput)
}

func (o WebProxyForwardServerOutput) Monitor() pulumi.StringOutput {
	return o.ApplyT(func(v *WebProxyForwardServer) pulumi.StringOutput { return v.Monitor }).(pulumi.StringOutput)
}

func (o WebProxyForwardServerOutput) Name() pulumi.StringOutput {
	return o.ApplyT(func(v *WebProxyForwardServer) pulumi.StringOutput { return v.Name }).(pulumi.StringOutput)
}

func (o WebProxyForwardServerOutput) Password() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *WebProxyForwardServer) pulumi.StringPtrOutput { return v.Password }).(pulumi.StringPtrOutput)
}

func (o WebProxyForwardServerOutput) Port() pulumi.IntOutput {
	return o.ApplyT(func(v *WebProxyForwardServer) pulumi.IntOutput { return v.Port }).(pulumi.IntOutput)
}

func (o WebProxyForwardServerOutput) ServerDownOption() pulumi.StringOutput {
	return o.ApplyT(func(v *WebProxyForwardServer) pulumi.StringOutput { return v.ServerDownOption }).(pulumi.StringOutput)
}

func (o WebProxyForwardServerOutput) Username() pulumi.StringOutput {
	return o.ApplyT(func(v *WebProxyForwardServer) pulumi.StringOutput { return v.Username }).(pulumi.StringOutput)
}

func (o WebProxyForwardServerOutput) Vdomparam() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *WebProxyForwardServer) pulumi.StringPtrOutput { return v.Vdomparam }).(pulumi.StringPtrOutput)
}

type WebProxyForwardServerArrayOutput struct{ *pulumi.OutputState }

func (WebProxyForwardServerArrayOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*[]*WebProxyForwardServer)(nil)).Elem()
}

func (o WebProxyForwardServerArrayOutput) ToWebProxyForwardServerArrayOutput() WebProxyForwardServerArrayOutput {
	return o
}

func (o WebProxyForwardServerArrayOutput) ToWebProxyForwardServerArrayOutputWithContext(ctx context.Context) WebProxyForwardServerArrayOutput {
	return o
}

func (o WebProxyForwardServerArrayOutput) Index(i pulumi.IntInput) WebProxyForwardServerOutput {
	return pulumi.All(o, i).ApplyT(func(vs []interface{}) *WebProxyForwardServer {
		return vs[0].([]*WebProxyForwardServer)[vs[1].(int)]
	}).(WebProxyForwardServerOutput)
}

type WebProxyForwardServerMapOutput struct{ *pulumi.OutputState }

func (WebProxyForwardServerMapOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*map[string]*WebProxyForwardServer)(nil)).Elem()
}

func (o WebProxyForwardServerMapOutput) ToWebProxyForwardServerMapOutput() WebProxyForwardServerMapOutput {
	return o
}

func (o WebProxyForwardServerMapOutput) ToWebProxyForwardServerMapOutputWithContext(ctx context.Context) WebProxyForwardServerMapOutput {
	return o
}

func (o WebProxyForwardServerMapOutput) MapIndex(k pulumi.StringInput) WebProxyForwardServerOutput {
	return pulumi.All(o, k).ApplyT(func(vs []interface{}) *WebProxyForwardServer {
		return vs[0].(map[string]*WebProxyForwardServer)[vs[1].(string)]
	}).(WebProxyForwardServerOutput)
}

func init() {
	pulumi.RegisterInputType(reflect.TypeOf((*WebProxyForwardServerInput)(nil)).Elem(), &WebProxyForwardServer{})
	pulumi.RegisterInputType(reflect.TypeOf((*WebProxyForwardServerArrayInput)(nil)).Elem(), WebProxyForwardServerArray{})
	pulumi.RegisterInputType(reflect.TypeOf((*WebProxyForwardServerMapInput)(nil)).Elem(), WebProxyForwardServerMap{})
	pulumi.RegisterOutputType(WebProxyForwardServerOutput{})
	pulumi.RegisterOutputType(WebProxyForwardServerArrayOutput{})
	pulumi.RegisterOutputType(WebProxyForwardServerMapOutput{})
}
