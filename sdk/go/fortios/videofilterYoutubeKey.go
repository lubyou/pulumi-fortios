// Code generated by the Pulumi Terraform Bridge (tfgen) Tool DO NOT EDIT.
// *** WARNING: Do not edit by hand unless you're certain you know what you are doing! ***

package fortios

import (
	"context"
	"reflect"

	"github.com/lubyou/pulumi-fortios/sdk/go/fortios/internal"
	"github.com/pulumi/pulumi/sdk/v3/go/pulumi"
	"github.com/pulumi/pulumi/sdk/v3/go/pulumix"
)

type VideofilterYoutubeKey struct {
	pulumi.CustomResourceState

	Fosid     pulumi.IntOutput       `pulumi:"fosid"`
	Key       pulumi.StringOutput    `pulumi:"key"`
	Vdomparam pulumi.StringPtrOutput `pulumi:"vdomparam"`
}

// NewVideofilterYoutubeKey registers a new resource with the given unique name, arguments, and options.
func NewVideofilterYoutubeKey(ctx *pulumi.Context,
	name string, args *VideofilterYoutubeKeyArgs, opts ...pulumi.ResourceOption) (*VideofilterYoutubeKey, error) {
	if args == nil {
		args = &VideofilterYoutubeKeyArgs{}
	}

	opts = internal.PkgResourceDefaultOpts(opts)
	var resource VideofilterYoutubeKey
	err := ctx.RegisterResource("fortios:index/videofilterYoutubeKey:VideofilterYoutubeKey", name, args, &resource, opts...)
	if err != nil {
		return nil, err
	}
	return &resource, nil
}

// GetVideofilterYoutubeKey gets an existing VideofilterYoutubeKey resource's state with the given name, ID, and optional
// state properties that are used to uniquely qualify the lookup (nil if not required).
func GetVideofilterYoutubeKey(ctx *pulumi.Context,
	name string, id pulumi.IDInput, state *VideofilterYoutubeKeyState, opts ...pulumi.ResourceOption) (*VideofilterYoutubeKey, error) {
	var resource VideofilterYoutubeKey
	err := ctx.ReadResource("fortios:index/videofilterYoutubeKey:VideofilterYoutubeKey", name, id, state, &resource, opts...)
	if err != nil {
		return nil, err
	}
	return &resource, nil
}

// Input properties used for looking up and filtering VideofilterYoutubeKey resources.
type videofilterYoutubeKeyState struct {
	Fosid     *int    `pulumi:"fosid"`
	Key       *string `pulumi:"key"`
	Vdomparam *string `pulumi:"vdomparam"`
}

type VideofilterYoutubeKeyState struct {
	Fosid     pulumi.IntPtrInput
	Key       pulumi.StringPtrInput
	Vdomparam pulumi.StringPtrInput
}

func (VideofilterYoutubeKeyState) ElementType() reflect.Type {
	return reflect.TypeOf((*videofilterYoutubeKeyState)(nil)).Elem()
}

type videofilterYoutubeKeyArgs struct {
	Fosid     *int    `pulumi:"fosid"`
	Key       *string `pulumi:"key"`
	Vdomparam *string `pulumi:"vdomparam"`
}

// The set of arguments for constructing a VideofilterYoutubeKey resource.
type VideofilterYoutubeKeyArgs struct {
	Fosid     pulumi.IntPtrInput
	Key       pulumi.StringPtrInput
	Vdomparam pulumi.StringPtrInput
}

func (VideofilterYoutubeKeyArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*videofilterYoutubeKeyArgs)(nil)).Elem()
}

type VideofilterYoutubeKeyInput interface {
	pulumi.Input

	ToVideofilterYoutubeKeyOutput() VideofilterYoutubeKeyOutput
	ToVideofilterYoutubeKeyOutputWithContext(ctx context.Context) VideofilterYoutubeKeyOutput
}

func (*VideofilterYoutubeKey) ElementType() reflect.Type {
	return reflect.TypeOf((**VideofilterYoutubeKey)(nil)).Elem()
}

func (i *VideofilterYoutubeKey) ToVideofilterYoutubeKeyOutput() VideofilterYoutubeKeyOutput {
	return i.ToVideofilterYoutubeKeyOutputWithContext(context.Background())
}

func (i *VideofilterYoutubeKey) ToVideofilterYoutubeKeyOutputWithContext(ctx context.Context) VideofilterYoutubeKeyOutput {
	return pulumi.ToOutputWithContext(ctx, i).(VideofilterYoutubeKeyOutput)
}

func (i *VideofilterYoutubeKey) ToOutput(ctx context.Context) pulumix.Output[*VideofilterYoutubeKey] {
	return pulumix.Output[*VideofilterYoutubeKey]{
		OutputState: i.ToVideofilterYoutubeKeyOutputWithContext(ctx).OutputState,
	}
}

// VideofilterYoutubeKeyArrayInput is an input type that accepts VideofilterYoutubeKeyArray and VideofilterYoutubeKeyArrayOutput values.
// You can construct a concrete instance of `VideofilterYoutubeKeyArrayInput` via:
//
//	VideofilterYoutubeKeyArray{ VideofilterYoutubeKeyArgs{...} }
type VideofilterYoutubeKeyArrayInput interface {
	pulumi.Input

	ToVideofilterYoutubeKeyArrayOutput() VideofilterYoutubeKeyArrayOutput
	ToVideofilterYoutubeKeyArrayOutputWithContext(context.Context) VideofilterYoutubeKeyArrayOutput
}

type VideofilterYoutubeKeyArray []VideofilterYoutubeKeyInput

func (VideofilterYoutubeKeyArray) ElementType() reflect.Type {
	return reflect.TypeOf((*[]*VideofilterYoutubeKey)(nil)).Elem()
}

func (i VideofilterYoutubeKeyArray) ToVideofilterYoutubeKeyArrayOutput() VideofilterYoutubeKeyArrayOutput {
	return i.ToVideofilterYoutubeKeyArrayOutputWithContext(context.Background())
}

func (i VideofilterYoutubeKeyArray) ToVideofilterYoutubeKeyArrayOutputWithContext(ctx context.Context) VideofilterYoutubeKeyArrayOutput {
	return pulumi.ToOutputWithContext(ctx, i).(VideofilterYoutubeKeyArrayOutput)
}

func (i VideofilterYoutubeKeyArray) ToOutput(ctx context.Context) pulumix.Output[[]*VideofilterYoutubeKey] {
	return pulumix.Output[[]*VideofilterYoutubeKey]{
		OutputState: i.ToVideofilterYoutubeKeyArrayOutputWithContext(ctx).OutputState,
	}
}

// VideofilterYoutubeKeyMapInput is an input type that accepts VideofilterYoutubeKeyMap and VideofilterYoutubeKeyMapOutput values.
// You can construct a concrete instance of `VideofilterYoutubeKeyMapInput` via:
//
//	VideofilterYoutubeKeyMap{ "key": VideofilterYoutubeKeyArgs{...} }
type VideofilterYoutubeKeyMapInput interface {
	pulumi.Input

	ToVideofilterYoutubeKeyMapOutput() VideofilterYoutubeKeyMapOutput
	ToVideofilterYoutubeKeyMapOutputWithContext(context.Context) VideofilterYoutubeKeyMapOutput
}

type VideofilterYoutubeKeyMap map[string]VideofilterYoutubeKeyInput

func (VideofilterYoutubeKeyMap) ElementType() reflect.Type {
	return reflect.TypeOf((*map[string]*VideofilterYoutubeKey)(nil)).Elem()
}

func (i VideofilterYoutubeKeyMap) ToVideofilterYoutubeKeyMapOutput() VideofilterYoutubeKeyMapOutput {
	return i.ToVideofilterYoutubeKeyMapOutputWithContext(context.Background())
}

func (i VideofilterYoutubeKeyMap) ToVideofilterYoutubeKeyMapOutputWithContext(ctx context.Context) VideofilterYoutubeKeyMapOutput {
	return pulumi.ToOutputWithContext(ctx, i).(VideofilterYoutubeKeyMapOutput)
}

func (i VideofilterYoutubeKeyMap) ToOutput(ctx context.Context) pulumix.Output[map[string]*VideofilterYoutubeKey] {
	return pulumix.Output[map[string]*VideofilterYoutubeKey]{
		OutputState: i.ToVideofilterYoutubeKeyMapOutputWithContext(ctx).OutputState,
	}
}

type VideofilterYoutubeKeyOutput struct{ *pulumi.OutputState }

func (VideofilterYoutubeKeyOutput) ElementType() reflect.Type {
	return reflect.TypeOf((**VideofilterYoutubeKey)(nil)).Elem()
}

func (o VideofilterYoutubeKeyOutput) ToVideofilterYoutubeKeyOutput() VideofilterYoutubeKeyOutput {
	return o
}

func (o VideofilterYoutubeKeyOutput) ToVideofilterYoutubeKeyOutputWithContext(ctx context.Context) VideofilterYoutubeKeyOutput {
	return o
}

func (o VideofilterYoutubeKeyOutput) ToOutput(ctx context.Context) pulumix.Output[*VideofilterYoutubeKey] {
	return pulumix.Output[*VideofilterYoutubeKey]{
		OutputState: o.OutputState,
	}
}

func (o VideofilterYoutubeKeyOutput) Fosid() pulumi.IntOutput {
	return o.ApplyT(func(v *VideofilterYoutubeKey) pulumi.IntOutput { return v.Fosid }).(pulumi.IntOutput)
}

func (o VideofilterYoutubeKeyOutput) Key() pulumi.StringOutput {
	return o.ApplyT(func(v *VideofilterYoutubeKey) pulumi.StringOutput { return v.Key }).(pulumi.StringOutput)
}

func (o VideofilterYoutubeKeyOutput) Vdomparam() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *VideofilterYoutubeKey) pulumi.StringPtrOutput { return v.Vdomparam }).(pulumi.StringPtrOutput)
}

type VideofilterYoutubeKeyArrayOutput struct{ *pulumi.OutputState }

func (VideofilterYoutubeKeyArrayOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*[]*VideofilterYoutubeKey)(nil)).Elem()
}

func (o VideofilterYoutubeKeyArrayOutput) ToVideofilterYoutubeKeyArrayOutput() VideofilterYoutubeKeyArrayOutput {
	return o
}

func (o VideofilterYoutubeKeyArrayOutput) ToVideofilterYoutubeKeyArrayOutputWithContext(ctx context.Context) VideofilterYoutubeKeyArrayOutput {
	return o
}

func (o VideofilterYoutubeKeyArrayOutput) ToOutput(ctx context.Context) pulumix.Output[[]*VideofilterYoutubeKey] {
	return pulumix.Output[[]*VideofilterYoutubeKey]{
		OutputState: o.OutputState,
	}
}

func (o VideofilterYoutubeKeyArrayOutput) Index(i pulumi.IntInput) VideofilterYoutubeKeyOutput {
	return pulumi.All(o, i).ApplyT(func(vs []interface{}) *VideofilterYoutubeKey {
		return vs[0].([]*VideofilterYoutubeKey)[vs[1].(int)]
	}).(VideofilterYoutubeKeyOutput)
}

type VideofilterYoutubeKeyMapOutput struct{ *pulumi.OutputState }

func (VideofilterYoutubeKeyMapOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*map[string]*VideofilterYoutubeKey)(nil)).Elem()
}

func (o VideofilterYoutubeKeyMapOutput) ToVideofilterYoutubeKeyMapOutput() VideofilterYoutubeKeyMapOutput {
	return o
}

func (o VideofilterYoutubeKeyMapOutput) ToVideofilterYoutubeKeyMapOutputWithContext(ctx context.Context) VideofilterYoutubeKeyMapOutput {
	return o
}

func (o VideofilterYoutubeKeyMapOutput) ToOutput(ctx context.Context) pulumix.Output[map[string]*VideofilterYoutubeKey] {
	return pulumix.Output[map[string]*VideofilterYoutubeKey]{
		OutputState: o.OutputState,
	}
}

func (o VideofilterYoutubeKeyMapOutput) MapIndex(k pulumi.StringInput) VideofilterYoutubeKeyOutput {
	return pulumi.All(o, k).ApplyT(func(vs []interface{}) *VideofilterYoutubeKey {
		return vs[0].(map[string]*VideofilterYoutubeKey)[vs[1].(string)]
	}).(VideofilterYoutubeKeyOutput)
}

func init() {
	pulumi.RegisterInputType(reflect.TypeOf((*VideofilterYoutubeKeyInput)(nil)).Elem(), &VideofilterYoutubeKey{})
	pulumi.RegisterInputType(reflect.TypeOf((*VideofilterYoutubeKeyArrayInput)(nil)).Elem(), VideofilterYoutubeKeyArray{})
	pulumi.RegisterInputType(reflect.TypeOf((*VideofilterYoutubeKeyMapInput)(nil)).Elem(), VideofilterYoutubeKeyMap{})
	pulumi.RegisterOutputType(VideofilterYoutubeKeyOutput{})
	pulumi.RegisterOutputType(VideofilterYoutubeKeyArrayOutput{})
	pulumi.RegisterOutputType(VideofilterYoutubeKeyMapOutput{})
}
