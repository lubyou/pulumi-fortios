// *** WARNING: this file was generated by the Pulumi Terraform Bridge (tfgen) Tool. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

package fortios

import (
	"context"
	"reflect"

	"github.com/pulumi/pulumi/sdk/v3/go/pulumi"
)

// Configure YouTube API keys. Applies to FortiOS Version `>= 7.0.1`.
//
// ## Import
//
// Videofilter YoutubeKey can be imported using any of these accepted formats$ export "FORTIOS_IMPORT_TABLE"="true"
//
// ```sh
//  $ pulumi import fortios:index/videofilterYoutubeKey:VideofilterYoutubeKey labelname {{fosid}}
// ```
//
//  $ unset "FORTIOS_IMPORT_TABLE"
type VideofilterYoutubeKey struct {
	pulumi.CustomResourceState

	// ID.
	Fosid pulumi.IntOutput `pulumi:"fosid"`
	// Key.
	Key pulumi.StringOutput `pulumi:"key"`
	// Specifies the vdom to which the resource will be applied when the FortiGate unit is running in VDOM mode. Only one vdom can be specified. If you want to inherit the vdom configuration of the provider, please do not set this parameter.
	Vdomparam pulumi.StringPtrOutput `pulumi:"vdomparam"`
}

// NewVideofilterYoutubeKey registers a new resource with the given unique name, arguments, and options.
func NewVideofilterYoutubeKey(ctx *pulumi.Context,
	name string, args *VideofilterYoutubeKeyArgs, opts ...pulumi.ResourceOption) (*VideofilterYoutubeKey, error) {
	if args == nil {
		args = &VideofilterYoutubeKeyArgs{}
	}

	opts = pkgResourceDefaultOpts(opts)
	var resource VideofilterYoutubeKey
	err := ctx.RegisterResource("fortios:index/videofilterYoutubeKey:VideofilterYoutubeKey", name, args, &resource, opts...)
	if err != nil {
		return nil, err
	}
	return &resource, nil
}

// GetVideofilterYoutubeKey gets an existing VideofilterYoutubeKey resource's state with the given name, ID, and optional
// state properties that are used to uniquely qualify the lookup (nil if not required).
func GetVideofilterYoutubeKey(ctx *pulumi.Context,
	name string, id pulumi.IDInput, state *VideofilterYoutubeKeyState, opts ...pulumi.ResourceOption) (*VideofilterYoutubeKey, error) {
	var resource VideofilterYoutubeKey
	err := ctx.ReadResource("fortios:index/videofilterYoutubeKey:VideofilterYoutubeKey", name, id, state, &resource, opts...)
	if err != nil {
		return nil, err
	}
	return &resource, nil
}

// Input properties used for looking up and filtering VideofilterYoutubeKey resources.
type videofilterYoutubeKeyState struct {
	// ID.
	Fosid *int `pulumi:"fosid"`
	// Key.
	Key *string `pulumi:"key"`
	// Specifies the vdom to which the resource will be applied when the FortiGate unit is running in VDOM mode. Only one vdom can be specified. If you want to inherit the vdom configuration of the provider, please do not set this parameter.
	Vdomparam *string `pulumi:"vdomparam"`
}

type VideofilterYoutubeKeyState struct {
	// ID.
	Fosid pulumi.IntPtrInput
	// Key.
	Key pulumi.StringPtrInput
	// Specifies the vdom to which the resource will be applied when the FortiGate unit is running in VDOM mode. Only one vdom can be specified. If you want to inherit the vdom configuration of the provider, please do not set this parameter.
	Vdomparam pulumi.StringPtrInput
}

func (VideofilterYoutubeKeyState) ElementType() reflect.Type {
	return reflect.TypeOf((*videofilterYoutubeKeyState)(nil)).Elem()
}

type videofilterYoutubeKeyArgs struct {
	// ID.
	Fosid *int `pulumi:"fosid"`
	// Key.
	Key *string `pulumi:"key"`
	// Specifies the vdom to which the resource will be applied when the FortiGate unit is running in VDOM mode. Only one vdom can be specified. If you want to inherit the vdom configuration of the provider, please do not set this parameter.
	Vdomparam *string `pulumi:"vdomparam"`
}

// The set of arguments for constructing a VideofilterYoutubeKey resource.
type VideofilterYoutubeKeyArgs struct {
	// ID.
	Fosid pulumi.IntPtrInput
	// Key.
	Key pulumi.StringPtrInput
	// Specifies the vdom to which the resource will be applied when the FortiGate unit is running in VDOM mode. Only one vdom can be specified. If you want to inherit the vdom configuration of the provider, please do not set this parameter.
	Vdomparam pulumi.StringPtrInput
}

func (VideofilterYoutubeKeyArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*videofilterYoutubeKeyArgs)(nil)).Elem()
}

type VideofilterYoutubeKeyInput interface {
	pulumi.Input

	ToVideofilterYoutubeKeyOutput() VideofilterYoutubeKeyOutput
	ToVideofilterYoutubeKeyOutputWithContext(ctx context.Context) VideofilterYoutubeKeyOutput
}

func (*VideofilterYoutubeKey) ElementType() reflect.Type {
	return reflect.TypeOf((**VideofilterYoutubeKey)(nil)).Elem()
}

func (i *VideofilterYoutubeKey) ToVideofilterYoutubeKeyOutput() VideofilterYoutubeKeyOutput {
	return i.ToVideofilterYoutubeKeyOutputWithContext(context.Background())
}

func (i *VideofilterYoutubeKey) ToVideofilterYoutubeKeyOutputWithContext(ctx context.Context) VideofilterYoutubeKeyOutput {
	return pulumi.ToOutputWithContext(ctx, i).(VideofilterYoutubeKeyOutput)
}

// VideofilterYoutubeKeyArrayInput is an input type that accepts VideofilterYoutubeKeyArray and VideofilterYoutubeKeyArrayOutput values.
// You can construct a concrete instance of `VideofilterYoutubeKeyArrayInput` via:
//
//          VideofilterYoutubeKeyArray{ VideofilterYoutubeKeyArgs{...} }
type VideofilterYoutubeKeyArrayInput interface {
	pulumi.Input

	ToVideofilterYoutubeKeyArrayOutput() VideofilterYoutubeKeyArrayOutput
	ToVideofilterYoutubeKeyArrayOutputWithContext(context.Context) VideofilterYoutubeKeyArrayOutput
}

type VideofilterYoutubeKeyArray []VideofilterYoutubeKeyInput

func (VideofilterYoutubeKeyArray) ElementType() reflect.Type {
	return reflect.TypeOf((*[]*VideofilterYoutubeKey)(nil)).Elem()
}

func (i VideofilterYoutubeKeyArray) ToVideofilterYoutubeKeyArrayOutput() VideofilterYoutubeKeyArrayOutput {
	return i.ToVideofilterYoutubeKeyArrayOutputWithContext(context.Background())
}

func (i VideofilterYoutubeKeyArray) ToVideofilterYoutubeKeyArrayOutputWithContext(ctx context.Context) VideofilterYoutubeKeyArrayOutput {
	return pulumi.ToOutputWithContext(ctx, i).(VideofilterYoutubeKeyArrayOutput)
}

// VideofilterYoutubeKeyMapInput is an input type that accepts VideofilterYoutubeKeyMap and VideofilterYoutubeKeyMapOutput values.
// You can construct a concrete instance of `VideofilterYoutubeKeyMapInput` via:
//
//          VideofilterYoutubeKeyMap{ "key": VideofilterYoutubeKeyArgs{...} }
type VideofilterYoutubeKeyMapInput interface {
	pulumi.Input

	ToVideofilterYoutubeKeyMapOutput() VideofilterYoutubeKeyMapOutput
	ToVideofilterYoutubeKeyMapOutputWithContext(context.Context) VideofilterYoutubeKeyMapOutput
}

type VideofilterYoutubeKeyMap map[string]VideofilterYoutubeKeyInput

func (VideofilterYoutubeKeyMap) ElementType() reflect.Type {
	return reflect.TypeOf((*map[string]*VideofilterYoutubeKey)(nil)).Elem()
}

func (i VideofilterYoutubeKeyMap) ToVideofilterYoutubeKeyMapOutput() VideofilterYoutubeKeyMapOutput {
	return i.ToVideofilterYoutubeKeyMapOutputWithContext(context.Background())
}

func (i VideofilterYoutubeKeyMap) ToVideofilterYoutubeKeyMapOutputWithContext(ctx context.Context) VideofilterYoutubeKeyMapOutput {
	return pulumi.ToOutputWithContext(ctx, i).(VideofilterYoutubeKeyMapOutput)
}

type VideofilterYoutubeKeyOutput struct{ *pulumi.OutputState }

func (VideofilterYoutubeKeyOutput) ElementType() reflect.Type {
	return reflect.TypeOf((**VideofilterYoutubeKey)(nil)).Elem()
}

func (o VideofilterYoutubeKeyOutput) ToVideofilterYoutubeKeyOutput() VideofilterYoutubeKeyOutput {
	return o
}

func (o VideofilterYoutubeKeyOutput) ToVideofilterYoutubeKeyOutputWithContext(ctx context.Context) VideofilterYoutubeKeyOutput {
	return o
}

type VideofilterYoutubeKeyArrayOutput struct{ *pulumi.OutputState }

func (VideofilterYoutubeKeyArrayOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*[]*VideofilterYoutubeKey)(nil)).Elem()
}

func (o VideofilterYoutubeKeyArrayOutput) ToVideofilterYoutubeKeyArrayOutput() VideofilterYoutubeKeyArrayOutput {
	return o
}

func (o VideofilterYoutubeKeyArrayOutput) ToVideofilterYoutubeKeyArrayOutputWithContext(ctx context.Context) VideofilterYoutubeKeyArrayOutput {
	return o
}

func (o VideofilterYoutubeKeyArrayOutput) Index(i pulumi.IntInput) VideofilterYoutubeKeyOutput {
	return pulumi.All(o, i).ApplyT(func(vs []interface{}) *VideofilterYoutubeKey {
		return vs[0].([]*VideofilterYoutubeKey)[vs[1].(int)]
	}).(VideofilterYoutubeKeyOutput)
}

type VideofilterYoutubeKeyMapOutput struct{ *pulumi.OutputState }

func (VideofilterYoutubeKeyMapOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*map[string]*VideofilterYoutubeKey)(nil)).Elem()
}

func (o VideofilterYoutubeKeyMapOutput) ToVideofilterYoutubeKeyMapOutput() VideofilterYoutubeKeyMapOutput {
	return o
}

func (o VideofilterYoutubeKeyMapOutput) ToVideofilterYoutubeKeyMapOutputWithContext(ctx context.Context) VideofilterYoutubeKeyMapOutput {
	return o
}

func (o VideofilterYoutubeKeyMapOutput) MapIndex(k pulumi.StringInput) VideofilterYoutubeKeyOutput {
	return pulumi.All(o, k).ApplyT(func(vs []interface{}) *VideofilterYoutubeKey {
		return vs[0].(map[string]*VideofilterYoutubeKey)[vs[1].(string)]
	}).(VideofilterYoutubeKeyOutput)
}

func init() {
	pulumi.RegisterInputType(reflect.TypeOf((*VideofilterYoutubeKeyInput)(nil)).Elem(), &VideofilterYoutubeKey{})
	pulumi.RegisterInputType(reflect.TypeOf((*VideofilterYoutubeKeyArrayInput)(nil)).Elem(), VideofilterYoutubeKeyArray{})
	pulumi.RegisterInputType(reflect.TypeOf((*VideofilterYoutubeKeyMapInput)(nil)).Elem(), VideofilterYoutubeKeyMap{})
	pulumi.RegisterOutputType(VideofilterYoutubeKeyOutput{})
	pulumi.RegisterOutputType(VideofilterYoutubeKeyArrayOutput{})
	pulumi.RegisterOutputType(VideofilterYoutubeKeyMapOutput{})
}
