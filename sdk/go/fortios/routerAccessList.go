// Code generated by the Pulumi Terraform Bridge (tfgen) Tool DO NOT EDIT.
// *** WARNING: Do not edit by hand unless you're certain you know what you are doing! ***

package fortios

import (
	"context"
	"reflect"

	"github.com/lubyou/pulumi-fortios/sdk/go/fortios/internal"
	"github.com/pulumi/pulumi/sdk/v3/go/pulumi"
	"github.com/pulumi/pulumi/sdk/v3/go/pulumix"
)

type RouterAccessList struct {
	pulumi.CustomResourceState

	Comments            pulumi.StringOutput             `pulumi:"comments"`
	DynamicSortSubtable pulumi.StringPtrOutput          `pulumi:"dynamicSortSubtable"`
	GetAllTables        pulumi.StringPtrOutput          `pulumi:"getAllTables"`
	Name                pulumi.StringOutput             `pulumi:"name"`
	Rules               RouterAccessListRuleArrayOutput `pulumi:"rules"`
	Vdomparam           pulumi.StringPtrOutput          `pulumi:"vdomparam"`
}

// NewRouterAccessList registers a new resource with the given unique name, arguments, and options.
func NewRouterAccessList(ctx *pulumi.Context,
	name string, args *RouterAccessListArgs, opts ...pulumi.ResourceOption) (*RouterAccessList, error) {
	if args == nil {
		args = &RouterAccessListArgs{}
	}

	opts = internal.PkgResourceDefaultOpts(opts)
	var resource RouterAccessList
	err := ctx.RegisterResource("fortios:index/routerAccessList:RouterAccessList", name, args, &resource, opts...)
	if err != nil {
		return nil, err
	}
	return &resource, nil
}

// GetRouterAccessList gets an existing RouterAccessList resource's state with the given name, ID, and optional
// state properties that are used to uniquely qualify the lookup (nil if not required).
func GetRouterAccessList(ctx *pulumi.Context,
	name string, id pulumi.IDInput, state *RouterAccessListState, opts ...pulumi.ResourceOption) (*RouterAccessList, error) {
	var resource RouterAccessList
	err := ctx.ReadResource("fortios:index/routerAccessList:RouterAccessList", name, id, state, &resource, opts...)
	if err != nil {
		return nil, err
	}
	return &resource, nil
}

// Input properties used for looking up and filtering RouterAccessList resources.
type routerAccessListState struct {
	Comments            *string                `pulumi:"comments"`
	DynamicSortSubtable *string                `pulumi:"dynamicSortSubtable"`
	GetAllTables        *string                `pulumi:"getAllTables"`
	Name                *string                `pulumi:"name"`
	Rules               []RouterAccessListRule `pulumi:"rules"`
	Vdomparam           *string                `pulumi:"vdomparam"`
}

type RouterAccessListState struct {
	Comments            pulumi.StringPtrInput
	DynamicSortSubtable pulumi.StringPtrInput
	GetAllTables        pulumi.StringPtrInput
	Name                pulumi.StringPtrInput
	Rules               RouterAccessListRuleArrayInput
	Vdomparam           pulumi.StringPtrInput
}

func (RouterAccessListState) ElementType() reflect.Type {
	return reflect.TypeOf((*routerAccessListState)(nil)).Elem()
}

type routerAccessListArgs struct {
	Comments            *string                `pulumi:"comments"`
	DynamicSortSubtable *string                `pulumi:"dynamicSortSubtable"`
	GetAllTables        *string                `pulumi:"getAllTables"`
	Name                *string                `pulumi:"name"`
	Rules               []RouterAccessListRule `pulumi:"rules"`
	Vdomparam           *string                `pulumi:"vdomparam"`
}

// The set of arguments for constructing a RouterAccessList resource.
type RouterAccessListArgs struct {
	Comments            pulumi.StringPtrInput
	DynamicSortSubtable pulumi.StringPtrInput
	GetAllTables        pulumi.StringPtrInput
	Name                pulumi.StringPtrInput
	Rules               RouterAccessListRuleArrayInput
	Vdomparam           pulumi.StringPtrInput
}

func (RouterAccessListArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*routerAccessListArgs)(nil)).Elem()
}

type RouterAccessListInput interface {
	pulumi.Input

	ToRouterAccessListOutput() RouterAccessListOutput
	ToRouterAccessListOutputWithContext(ctx context.Context) RouterAccessListOutput
}

func (*RouterAccessList) ElementType() reflect.Type {
	return reflect.TypeOf((**RouterAccessList)(nil)).Elem()
}

func (i *RouterAccessList) ToRouterAccessListOutput() RouterAccessListOutput {
	return i.ToRouterAccessListOutputWithContext(context.Background())
}

func (i *RouterAccessList) ToRouterAccessListOutputWithContext(ctx context.Context) RouterAccessListOutput {
	return pulumi.ToOutputWithContext(ctx, i).(RouterAccessListOutput)
}

func (i *RouterAccessList) ToOutput(ctx context.Context) pulumix.Output[*RouterAccessList] {
	return pulumix.Output[*RouterAccessList]{
		OutputState: i.ToRouterAccessListOutputWithContext(ctx).OutputState,
	}
}

// RouterAccessListArrayInput is an input type that accepts RouterAccessListArray and RouterAccessListArrayOutput values.
// You can construct a concrete instance of `RouterAccessListArrayInput` via:
//
//	RouterAccessListArray{ RouterAccessListArgs{...} }
type RouterAccessListArrayInput interface {
	pulumi.Input

	ToRouterAccessListArrayOutput() RouterAccessListArrayOutput
	ToRouterAccessListArrayOutputWithContext(context.Context) RouterAccessListArrayOutput
}

type RouterAccessListArray []RouterAccessListInput

func (RouterAccessListArray) ElementType() reflect.Type {
	return reflect.TypeOf((*[]*RouterAccessList)(nil)).Elem()
}

func (i RouterAccessListArray) ToRouterAccessListArrayOutput() RouterAccessListArrayOutput {
	return i.ToRouterAccessListArrayOutputWithContext(context.Background())
}

func (i RouterAccessListArray) ToRouterAccessListArrayOutputWithContext(ctx context.Context) RouterAccessListArrayOutput {
	return pulumi.ToOutputWithContext(ctx, i).(RouterAccessListArrayOutput)
}

func (i RouterAccessListArray) ToOutput(ctx context.Context) pulumix.Output[[]*RouterAccessList] {
	return pulumix.Output[[]*RouterAccessList]{
		OutputState: i.ToRouterAccessListArrayOutputWithContext(ctx).OutputState,
	}
}

// RouterAccessListMapInput is an input type that accepts RouterAccessListMap and RouterAccessListMapOutput values.
// You can construct a concrete instance of `RouterAccessListMapInput` via:
//
//	RouterAccessListMap{ "key": RouterAccessListArgs{...} }
type RouterAccessListMapInput interface {
	pulumi.Input

	ToRouterAccessListMapOutput() RouterAccessListMapOutput
	ToRouterAccessListMapOutputWithContext(context.Context) RouterAccessListMapOutput
}

type RouterAccessListMap map[string]RouterAccessListInput

func (RouterAccessListMap) ElementType() reflect.Type {
	return reflect.TypeOf((*map[string]*RouterAccessList)(nil)).Elem()
}

func (i RouterAccessListMap) ToRouterAccessListMapOutput() RouterAccessListMapOutput {
	return i.ToRouterAccessListMapOutputWithContext(context.Background())
}

func (i RouterAccessListMap) ToRouterAccessListMapOutputWithContext(ctx context.Context) RouterAccessListMapOutput {
	return pulumi.ToOutputWithContext(ctx, i).(RouterAccessListMapOutput)
}

func (i RouterAccessListMap) ToOutput(ctx context.Context) pulumix.Output[map[string]*RouterAccessList] {
	return pulumix.Output[map[string]*RouterAccessList]{
		OutputState: i.ToRouterAccessListMapOutputWithContext(ctx).OutputState,
	}
}

type RouterAccessListOutput struct{ *pulumi.OutputState }

func (RouterAccessListOutput) ElementType() reflect.Type {
	return reflect.TypeOf((**RouterAccessList)(nil)).Elem()
}

func (o RouterAccessListOutput) ToRouterAccessListOutput() RouterAccessListOutput {
	return o
}

func (o RouterAccessListOutput) ToRouterAccessListOutputWithContext(ctx context.Context) RouterAccessListOutput {
	return o
}

func (o RouterAccessListOutput) ToOutput(ctx context.Context) pulumix.Output[*RouterAccessList] {
	return pulumix.Output[*RouterAccessList]{
		OutputState: o.OutputState,
	}
}

func (o RouterAccessListOutput) Comments() pulumi.StringOutput {
	return o.ApplyT(func(v *RouterAccessList) pulumi.StringOutput { return v.Comments }).(pulumi.StringOutput)
}

func (o RouterAccessListOutput) DynamicSortSubtable() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *RouterAccessList) pulumi.StringPtrOutput { return v.DynamicSortSubtable }).(pulumi.StringPtrOutput)
}

func (o RouterAccessListOutput) GetAllTables() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *RouterAccessList) pulumi.StringPtrOutput { return v.GetAllTables }).(pulumi.StringPtrOutput)
}

func (o RouterAccessListOutput) Name() pulumi.StringOutput {
	return o.ApplyT(func(v *RouterAccessList) pulumi.StringOutput { return v.Name }).(pulumi.StringOutput)
}

func (o RouterAccessListOutput) Rules() RouterAccessListRuleArrayOutput {
	return o.ApplyT(func(v *RouterAccessList) RouterAccessListRuleArrayOutput { return v.Rules }).(RouterAccessListRuleArrayOutput)
}

func (o RouterAccessListOutput) Vdomparam() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *RouterAccessList) pulumi.StringPtrOutput { return v.Vdomparam }).(pulumi.StringPtrOutput)
}

type RouterAccessListArrayOutput struct{ *pulumi.OutputState }

func (RouterAccessListArrayOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*[]*RouterAccessList)(nil)).Elem()
}

func (o RouterAccessListArrayOutput) ToRouterAccessListArrayOutput() RouterAccessListArrayOutput {
	return o
}

func (o RouterAccessListArrayOutput) ToRouterAccessListArrayOutputWithContext(ctx context.Context) RouterAccessListArrayOutput {
	return o
}

func (o RouterAccessListArrayOutput) ToOutput(ctx context.Context) pulumix.Output[[]*RouterAccessList] {
	return pulumix.Output[[]*RouterAccessList]{
		OutputState: o.OutputState,
	}
}

func (o RouterAccessListArrayOutput) Index(i pulumi.IntInput) RouterAccessListOutput {
	return pulumi.All(o, i).ApplyT(func(vs []interface{}) *RouterAccessList {
		return vs[0].([]*RouterAccessList)[vs[1].(int)]
	}).(RouterAccessListOutput)
}

type RouterAccessListMapOutput struct{ *pulumi.OutputState }

func (RouterAccessListMapOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*map[string]*RouterAccessList)(nil)).Elem()
}

func (o RouterAccessListMapOutput) ToRouterAccessListMapOutput() RouterAccessListMapOutput {
	return o
}

func (o RouterAccessListMapOutput) ToRouterAccessListMapOutputWithContext(ctx context.Context) RouterAccessListMapOutput {
	return o
}

func (o RouterAccessListMapOutput) ToOutput(ctx context.Context) pulumix.Output[map[string]*RouterAccessList] {
	return pulumix.Output[map[string]*RouterAccessList]{
		OutputState: o.OutputState,
	}
}

func (o RouterAccessListMapOutput) MapIndex(k pulumi.StringInput) RouterAccessListOutput {
	return pulumi.All(o, k).ApplyT(func(vs []interface{}) *RouterAccessList {
		return vs[0].(map[string]*RouterAccessList)[vs[1].(string)]
	}).(RouterAccessListOutput)
}

func init() {
	pulumi.RegisterInputType(reflect.TypeOf((*RouterAccessListInput)(nil)).Elem(), &RouterAccessList{})
	pulumi.RegisterInputType(reflect.TypeOf((*RouterAccessListArrayInput)(nil)).Elem(), RouterAccessListArray{})
	pulumi.RegisterInputType(reflect.TypeOf((*RouterAccessListMapInput)(nil)).Elem(), RouterAccessListMap{})
	pulumi.RegisterOutputType(RouterAccessListOutput{})
	pulumi.RegisterOutputType(RouterAccessListArrayOutput{})
	pulumi.RegisterOutputType(RouterAccessListMapOutput{})
}
