// Code generated by the Pulumi Terraform Bridge (tfgen) Tool DO NOT EDIT.
// *** WARNING: Do not edit by hand unless you're certain you know what you are doing! ***

package fortios

import (
	"context"
	"reflect"

	"github.com/pulumi/pulumi/sdk/v3/go/pulumi"
)

type IpsDecoder struct {
	pulumi.CustomResourceState

	DynamicSortSubtable pulumi.StringPtrOutput         `pulumi:"dynamicSortSubtable"`
	Name                pulumi.StringOutput            `pulumi:"name"`
	Parameters          IpsDecoderParameterArrayOutput `pulumi:"parameters"`
	Vdomparam           pulumi.StringPtrOutput         `pulumi:"vdomparam"`
}

// NewIpsDecoder registers a new resource with the given unique name, arguments, and options.
func NewIpsDecoder(ctx *pulumi.Context,
	name string, args *IpsDecoderArgs, opts ...pulumi.ResourceOption) (*IpsDecoder, error) {
	if args == nil {
		args = &IpsDecoderArgs{}
	}

	opts = pkgResourceDefaultOpts(opts)
	var resource IpsDecoder
	err := ctx.RegisterResource("fortios:index/ipsDecoder:IpsDecoder", name, args, &resource, opts...)
	if err != nil {
		return nil, err
	}
	return &resource, nil
}

// GetIpsDecoder gets an existing IpsDecoder resource's state with the given name, ID, and optional
// state properties that are used to uniquely qualify the lookup (nil if not required).
func GetIpsDecoder(ctx *pulumi.Context,
	name string, id pulumi.IDInput, state *IpsDecoderState, opts ...pulumi.ResourceOption) (*IpsDecoder, error) {
	var resource IpsDecoder
	err := ctx.ReadResource("fortios:index/ipsDecoder:IpsDecoder", name, id, state, &resource, opts...)
	if err != nil {
		return nil, err
	}
	return &resource, nil
}

// Input properties used for looking up and filtering IpsDecoder resources.
type ipsDecoderState struct {
	DynamicSortSubtable *string               `pulumi:"dynamicSortSubtable"`
	Name                *string               `pulumi:"name"`
	Parameters          []IpsDecoderParameter `pulumi:"parameters"`
	Vdomparam           *string               `pulumi:"vdomparam"`
}

type IpsDecoderState struct {
	DynamicSortSubtable pulumi.StringPtrInput
	Name                pulumi.StringPtrInput
	Parameters          IpsDecoderParameterArrayInput
	Vdomparam           pulumi.StringPtrInput
}

func (IpsDecoderState) ElementType() reflect.Type {
	return reflect.TypeOf((*ipsDecoderState)(nil)).Elem()
}

type ipsDecoderArgs struct {
	DynamicSortSubtable *string               `pulumi:"dynamicSortSubtable"`
	Name                *string               `pulumi:"name"`
	Parameters          []IpsDecoderParameter `pulumi:"parameters"`
	Vdomparam           *string               `pulumi:"vdomparam"`
}

// The set of arguments for constructing a IpsDecoder resource.
type IpsDecoderArgs struct {
	DynamicSortSubtable pulumi.StringPtrInput
	Name                pulumi.StringPtrInput
	Parameters          IpsDecoderParameterArrayInput
	Vdomparam           pulumi.StringPtrInput
}

func (IpsDecoderArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*ipsDecoderArgs)(nil)).Elem()
}

type IpsDecoderInput interface {
	pulumi.Input

	ToIpsDecoderOutput() IpsDecoderOutput
	ToIpsDecoderOutputWithContext(ctx context.Context) IpsDecoderOutput
}

func (*IpsDecoder) ElementType() reflect.Type {
	return reflect.TypeOf((**IpsDecoder)(nil)).Elem()
}

func (i *IpsDecoder) ToIpsDecoderOutput() IpsDecoderOutput {
	return i.ToIpsDecoderOutputWithContext(context.Background())
}

func (i *IpsDecoder) ToIpsDecoderOutputWithContext(ctx context.Context) IpsDecoderOutput {
	return pulumi.ToOutputWithContext(ctx, i).(IpsDecoderOutput)
}

// IpsDecoderArrayInput is an input type that accepts IpsDecoderArray and IpsDecoderArrayOutput values.
// You can construct a concrete instance of `IpsDecoderArrayInput` via:
//
//	IpsDecoderArray{ IpsDecoderArgs{...} }
type IpsDecoderArrayInput interface {
	pulumi.Input

	ToIpsDecoderArrayOutput() IpsDecoderArrayOutput
	ToIpsDecoderArrayOutputWithContext(context.Context) IpsDecoderArrayOutput
}

type IpsDecoderArray []IpsDecoderInput

func (IpsDecoderArray) ElementType() reflect.Type {
	return reflect.TypeOf((*[]*IpsDecoder)(nil)).Elem()
}

func (i IpsDecoderArray) ToIpsDecoderArrayOutput() IpsDecoderArrayOutput {
	return i.ToIpsDecoderArrayOutputWithContext(context.Background())
}

func (i IpsDecoderArray) ToIpsDecoderArrayOutputWithContext(ctx context.Context) IpsDecoderArrayOutput {
	return pulumi.ToOutputWithContext(ctx, i).(IpsDecoderArrayOutput)
}

// IpsDecoderMapInput is an input type that accepts IpsDecoderMap and IpsDecoderMapOutput values.
// You can construct a concrete instance of `IpsDecoderMapInput` via:
//
//	IpsDecoderMap{ "key": IpsDecoderArgs{...} }
type IpsDecoderMapInput interface {
	pulumi.Input

	ToIpsDecoderMapOutput() IpsDecoderMapOutput
	ToIpsDecoderMapOutputWithContext(context.Context) IpsDecoderMapOutput
}

type IpsDecoderMap map[string]IpsDecoderInput

func (IpsDecoderMap) ElementType() reflect.Type {
	return reflect.TypeOf((*map[string]*IpsDecoder)(nil)).Elem()
}

func (i IpsDecoderMap) ToIpsDecoderMapOutput() IpsDecoderMapOutput {
	return i.ToIpsDecoderMapOutputWithContext(context.Background())
}

func (i IpsDecoderMap) ToIpsDecoderMapOutputWithContext(ctx context.Context) IpsDecoderMapOutput {
	return pulumi.ToOutputWithContext(ctx, i).(IpsDecoderMapOutput)
}

type IpsDecoderOutput struct{ *pulumi.OutputState }

func (IpsDecoderOutput) ElementType() reflect.Type {
	return reflect.TypeOf((**IpsDecoder)(nil)).Elem()
}

func (o IpsDecoderOutput) ToIpsDecoderOutput() IpsDecoderOutput {
	return o
}

func (o IpsDecoderOutput) ToIpsDecoderOutputWithContext(ctx context.Context) IpsDecoderOutput {
	return o
}

func (o IpsDecoderOutput) DynamicSortSubtable() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *IpsDecoder) pulumi.StringPtrOutput { return v.DynamicSortSubtable }).(pulumi.StringPtrOutput)
}

func (o IpsDecoderOutput) Name() pulumi.StringOutput {
	return o.ApplyT(func(v *IpsDecoder) pulumi.StringOutput { return v.Name }).(pulumi.StringOutput)
}

func (o IpsDecoderOutput) Parameters() IpsDecoderParameterArrayOutput {
	return o.ApplyT(func(v *IpsDecoder) IpsDecoderParameterArrayOutput { return v.Parameters }).(IpsDecoderParameterArrayOutput)
}

func (o IpsDecoderOutput) Vdomparam() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *IpsDecoder) pulumi.StringPtrOutput { return v.Vdomparam }).(pulumi.StringPtrOutput)
}

type IpsDecoderArrayOutput struct{ *pulumi.OutputState }

func (IpsDecoderArrayOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*[]*IpsDecoder)(nil)).Elem()
}

func (o IpsDecoderArrayOutput) ToIpsDecoderArrayOutput() IpsDecoderArrayOutput {
	return o
}

func (o IpsDecoderArrayOutput) ToIpsDecoderArrayOutputWithContext(ctx context.Context) IpsDecoderArrayOutput {
	return o
}

func (o IpsDecoderArrayOutput) Index(i pulumi.IntInput) IpsDecoderOutput {
	return pulumi.All(o, i).ApplyT(func(vs []interface{}) *IpsDecoder {
		return vs[0].([]*IpsDecoder)[vs[1].(int)]
	}).(IpsDecoderOutput)
}

type IpsDecoderMapOutput struct{ *pulumi.OutputState }

func (IpsDecoderMapOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*map[string]*IpsDecoder)(nil)).Elem()
}

func (o IpsDecoderMapOutput) ToIpsDecoderMapOutput() IpsDecoderMapOutput {
	return o
}

func (o IpsDecoderMapOutput) ToIpsDecoderMapOutputWithContext(ctx context.Context) IpsDecoderMapOutput {
	return o
}

func (o IpsDecoderMapOutput) MapIndex(k pulumi.StringInput) IpsDecoderOutput {
	return pulumi.All(o, k).ApplyT(func(vs []interface{}) *IpsDecoder {
		return vs[0].(map[string]*IpsDecoder)[vs[1].(string)]
	}).(IpsDecoderOutput)
}

func init() {
	pulumi.RegisterInputType(reflect.TypeOf((*IpsDecoderInput)(nil)).Elem(), &IpsDecoder{})
	pulumi.RegisterInputType(reflect.TypeOf((*IpsDecoderArrayInput)(nil)).Elem(), IpsDecoderArray{})
	pulumi.RegisterInputType(reflect.TypeOf((*IpsDecoderMapInput)(nil)).Elem(), IpsDecoderMap{})
	pulumi.RegisterOutputType(IpsDecoderOutput{})
	pulumi.RegisterOutputType(IpsDecoderArrayOutput{})
	pulumi.RegisterOutputType(IpsDecoderMapOutput{})
}
