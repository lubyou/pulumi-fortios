// *** WARNING: this file was generated by the Pulumi Terraform Bridge (tfgen) Tool. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

package fortios

import (
	"context"
	"reflect"

	"github.com/pulumi/pulumi/sdk/v3/go/pulumi"
)

// Configure IPS decoder.
//
// ## Import
//
// Ips Decoder can be imported using any of these accepted formats$ export "FORTIOS_IMPORT_TABLE"="true"
//
// ```sh
//  $ pulumi import fortios:index/ipsDecoder:IpsDecoder labelname {{name}}
// ```
//
//  $ unset "FORTIOS_IMPORT_TABLE"
type IpsDecoder struct {
	pulumi.CustomResourceState

	// true or false, set this parameter to true when using dynamic forEach + toset to configure and sort sub-tables, please do not set this parameter when configuring static sub-tables.
	DynamicSortSubtable pulumi.StringPtrOutput `pulumi:"dynamicSortSubtable"`
	// Parameter name.
	Name pulumi.StringOutput `pulumi:"name"`
	// IPS group parameters. The structure of `parameter` block is documented below.
	Parameters IpsDecoderParameterArrayOutput `pulumi:"parameters"`
	// Specifies the vdom to which the resource will be applied when the FortiGate unit is running in VDOM mode. Only one vdom can be specified. If you want to inherit the vdom configuration of the provider, please do not set this parameter.
	Vdomparam pulumi.StringPtrOutput `pulumi:"vdomparam"`
}

// NewIpsDecoder registers a new resource with the given unique name, arguments, and options.
func NewIpsDecoder(ctx *pulumi.Context,
	name string, args *IpsDecoderArgs, opts ...pulumi.ResourceOption) (*IpsDecoder, error) {
	if args == nil {
		args = &IpsDecoderArgs{}
	}

	var resource IpsDecoder
	err := ctx.RegisterResource("fortios:index/ipsDecoder:IpsDecoder", name, args, &resource, opts...)
	if err != nil {
		return nil, err
	}
	return &resource, nil
}

// GetIpsDecoder gets an existing IpsDecoder resource's state with the given name, ID, and optional
// state properties that are used to uniquely qualify the lookup (nil if not required).
func GetIpsDecoder(ctx *pulumi.Context,
	name string, id pulumi.IDInput, state *IpsDecoderState, opts ...pulumi.ResourceOption) (*IpsDecoder, error) {
	var resource IpsDecoder
	err := ctx.ReadResource("fortios:index/ipsDecoder:IpsDecoder", name, id, state, &resource, opts...)
	if err != nil {
		return nil, err
	}
	return &resource, nil
}

// Input properties used for looking up and filtering IpsDecoder resources.
type ipsDecoderState struct {
	// true or false, set this parameter to true when using dynamic forEach + toset to configure and sort sub-tables, please do not set this parameter when configuring static sub-tables.
	DynamicSortSubtable *string `pulumi:"dynamicSortSubtable"`
	// Parameter name.
	Name *string `pulumi:"name"`
	// IPS group parameters. The structure of `parameter` block is documented below.
	Parameters []IpsDecoderParameter `pulumi:"parameters"`
	// Specifies the vdom to which the resource will be applied when the FortiGate unit is running in VDOM mode. Only one vdom can be specified. If you want to inherit the vdom configuration of the provider, please do not set this parameter.
	Vdomparam *string `pulumi:"vdomparam"`
}

type IpsDecoderState struct {
	// true or false, set this parameter to true when using dynamic forEach + toset to configure and sort sub-tables, please do not set this parameter when configuring static sub-tables.
	DynamicSortSubtable pulumi.StringPtrInput
	// Parameter name.
	Name pulumi.StringPtrInput
	// IPS group parameters. The structure of `parameter` block is documented below.
	Parameters IpsDecoderParameterArrayInput
	// Specifies the vdom to which the resource will be applied when the FortiGate unit is running in VDOM mode. Only one vdom can be specified. If you want to inherit the vdom configuration of the provider, please do not set this parameter.
	Vdomparam pulumi.StringPtrInput
}

func (IpsDecoderState) ElementType() reflect.Type {
	return reflect.TypeOf((*ipsDecoderState)(nil)).Elem()
}

type ipsDecoderArgs struct {
	// true or false, set this parameter to true when using dynamic forEach + toset to configure and sort sub-tables, please do not set this parameter when configuring static sub-tables.
	DynamicSortSubtable *string `pulumi:"dynamicSortSubtable"`
	// Parameter name.
	Name *string `pulumi:"name"`
	// IPS group parameters. The structure of `parameter` block is documented below.
	Parameters []IpsDecoderParameter `pulumi:"parameters"`
	// Specifies the vdom to which the resource will be applied when the FortiGate unit is running in VDOM mode. Only one vdom can be specified. If you want to inherit the vdom configuration of the provider, please do not set this parameter.
	Vdomparam *string `pulumi:"vdomparam"`
}

// The set of arguments for constructing a IpsDecoder resource.
type IpsDecoderArgs struct {
	// true or false, set this parameter to true when using dynamic forEach + toset to configure and sort sub-tables, please do not set this parameter when configuring static sub-tables.
	DynamicSortSubtable pulumi.StringPtrInput
	// Parameter name.
	Name pulumi.StringPtrInput
	// IPS group parameters. The structure of `parameter` block is documented below.
	Parameters IpsDecoderParameterArrayInput
	// Specifies the vdom to which the resource will be applied when the FortiGate unit is running in VDOM mode. Only one vdom can be specified. If you want to inherit the vdom configuration of the provider, please do not set this parameter.
	Vdomparam pulumi.StringPtrInput
}

func (IpsDecoderArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*ipsDecoderArgs)(nil)).Elem()
}

type IpsDecoderInput interface {
	pulumi.Input

	ToIpsDecoderOutput() IpsDecoderOutput
	ToIpsDecoderOutputWithContext(ctx context.Context) IpsDecoderOutput
}

func (*IpsDecoder) ElementType() reflect.Type {
	return reflect.TypeOf((*IpsDecoder)(nil))
}

func (i *IpsDecoder) ToIpsDecoderOutput() IpsDecoderOutput {
	return i.ToIpsDecoderOutputWithContext(context.Background())
}

func (i *IpsDecoder) ToIpsDecoderOutputWithContext(ctx context.Context) IpsDecoderOutput {
	return pulumi.ToOutputWithContext(ctx, i).(IpsDecoderOutput)
}

func (i *IpsDecoder) ToIpsDecoderPtrOutput() IpsDecoderPtrOutput {
	return i.ToIpsDecoderPtrOutputWithContext(context.Background())
}

func (i *IpsDecoder) ToIpsDecoderPtrOutputWithContext(ctx context.Context) IpsDecoderPtrOutput {
	return pulumi.ToOutputWithContext(ctx, i).(IpsDecoderPtrOutput)
}

type IpsDecoderPtrInput interface {
	pulumi.Input

	ToIpsDecoderPtrOutput() IpsDecoderPtrOutput
	ToIpsDecoderPtrOutputWithContext(ctx context.Context) IpsDecoderPtrOutput
}

type ipsDecoderPtrType IpsDecoderArgs

func (*ipsDecoderPtrType) ElementType() reflect.Type {
	return reflect.TypeOf((**IpsDecoder)(nil))
}

func (i *ipsDecoderPtrType) ToIpsDecoderPtrOutput() IpsDecoderPtrOutput {
	return i.ToIpsDecoderPtrOutputWithContext(context.Background())
}

func (i *ipsDecoderPtrType) ToIpsDecoderPtrOutputWithContext(ctx context.Context) IpsDecoderPtrOutput {
	return pulumi.ToOutputWithContext(ctx, i).(IpsDecoderPtrOutput)
}

// IpsDecoderArrayInput is an input type that accepts IpsDecoderArray and IpsDecoderArrayOutput values.
// You can construct a concrete instance of `IpsDecoderArrayInput` via:
//
//          IpsDecoderArray{ IpsDecoderArgs{...} }
type IpsDecoderArrayInput interface {
	pulumi.Input

	ToIpsDecoderArrayOutput() IpsDecoderArrayOutput
	ToIpsDecoderArrayOutputWithContext(context.Context) IpsDecoderArrayOutput
}

type IpsDecoderArray []IpsDecoderInput

func (IpsDecoderArray) ElementType() reflect.Type {
	return reflect.TypeOf(([]*IpsDecoder)(nil))
}

func (i IpsDecoderArray) ToIpsDecoderArrayOutput() IpsDecoderArrayOutput {
	return i.ToIpsDecoderArrayOutputWithContext(context.Background())
}

func (i IpsDecoderArray) ToIpsDecoderArrayOutputWithContext(ctx context.Context) IpsDecoderArrayOutput {
	return pulumi.ToOutputWithContext(ctx, i).(IpsDecoderArrayOutput)
}

// IpsDecoderMapInput is an input type that accepts IpsDecoderMap and IpsDecoderMapOutput values.
// You can construct a concrete instance of `IpsDecoderMapInput` via:
//
//          IpsDecoderMap{ "key": IpsDecoderArgs{...} }
type IpsDecoderMapInput interface {
	pulumi.Input

	ToIpsDecoderMapOutput() IpsDecoderMapOutput
	ToIpsDecoderMapOutputWithContext(context.Context) IpsDecoderMapOutput
}

type IpsDecoderMap map[string]IpsDecoderInput

func (IpsDecoderMap) ElementType() reflect.Type {
	return reflect.TypeOf((map[string]*IpsDecoder)(nil))
}

func (i IpsDecoderMap) ToIpsDecoderMapOutput() IpsDecoderMapOutput {
	return i.ToIpsDecoderMapOutputWithContext(context.Background())
}

func (i IpsDecoderMap) ToIpsDecoderMapOutputWithContext(ctx context.Context) IpsDecoderMapOutput {
	return pulumi.ToOutputWithContext(ctx, i).(IpsDecoderMapOutput)
}

type IpsDecoderOutput struct {
	*pulumi.OutputState
}

func (IpsDecoderOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*IpsDecoder)(nil))
}

func (o IpsDecoderOutput) ToIpsDecoderOutput() IpsDecoderOutput {
	return o
}

func (o IpsDecoderOutput) ToIpsDecoderOutputWithContext(ctx context.Context) IpsDecoderOutput {
	return o
}

func (o IpsDecoderOutput) ToIpsDecoderPtrOutput() IpsDecoderPtrOutput {
	return o.ToIpsDecoderPtrOutputWithContext(context.Background())
}

func (o IpsDecoderOutput) ToIpsDecoderPtrOutputWithContext(ctx context.Context) IpsDecoderPtrOutput {
	return o.ApplyT(func(v IpsDecoder) *IpsDecoder {
		return &v
	}).(IpsDecoderPtrOutput)
}

type IpsDecoderPtrOutput struct {
	*pulumi.OutputState
}

func (IpsDecoderPtrOutput) ElementType() reflect.Type {
	return reflect.TypeOf((**IpsDecoder)(nil))
}

func (o IpsDecoderPtrOutput) ToIpsDecoderPtrOutput() IpsDecoderPtrOutput {
	return o
}

func (o IpsDecoderPtrOutput) ToIpsDecoderPtrOutputWithContext(ctx context.Context) IpsDecoderPtrOutput {
	return o
}

type IpsDecoderArrayOutput struct{ *pulumi.OutputState }

func (IpsDecoderArrayOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*[]IpsDecoder)(nil))
}

func (o IpsDecoderArrayOutput) ToIpsDecoderArrayOutput() IpsDecoderArrayOutput {
	return o
}

func (o IpsDecoderArrayOutput) ToIpsDecoderArrayOutputWithContext(ctx context.Context) IpsDecoderArrayOutput {
	return o
}

func (o IpsDecoderArrayOutput) Index(i pulumi.IntInput) IpsDecoderOutput {
	return pulumi.All(o, i).ApplyT(func(vs []interface{}) IpsDecoder {
		return vs[0].([]IpsDecoder)[vs[1].(int)]
	}).(IpsDecoderOutput)
}

type IpsDecoderMapOutput struct{ *pulumi.OutputState }

func (IpsDecoderMapOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*map[string]IpsDecoder)(nil))
}

func (o IpsDecoderMapOutput) ToIpsDecoderMapOutput() IpsDecoderMapOutput {
	return o
}

func (o IpsDecoderMapOutput) ToIpsDecoderMapOutputWithContext(ctx context.Context) IpsDecoderMapOutput {
	return o
}

func (o IpsDecoderMapOutput) MapIndex(k pulumi.StringInput) IpsDecoderOutput {
	return pulumi.All(o, k).ApplyT(func(vs []interface{}) IpsDecoder {
		return vs[0].(map[string]IpsDecoder)[vs[1].(string)]
	}).(IpsDecoderOutput)
}

func init() {
	pulumi.RegisterOutputType(IpsDecoderOutput{})
	pulumi.RegisterOutputType(IpsDecoderPtrOutput{})
	pulumi.RegisterOutputType(IpsDecoderArrayOutput{})
	pulumi.RegisterOutputType(IpsDecoderMapOutput{})
}
