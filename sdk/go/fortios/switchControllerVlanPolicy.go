// Code generated by the Pulumi Terraform Bridge (tfgen) Tool DO NOT EDIT.
// *** WARNING: Do not edit by hand unless you're certain you know what you are doing! ***

package fortios

import (
	"context"
	"reflect"

	"github.com/lubyou/pulumi-fortios/sdk/go/fortios/internal"
	"github.com/pulumi/pulumi/sdk/v3/go/pulumi"
	"github.com/pulumi/pulumi/sdk/v3/go/pulumix"
)

type SwitchControllerVlanPolicy struct {
	pulumi.CustomResourceState

	AllowedVlans        SwitchControllerVlanPolicyAllowedVlanArrayOutput  `pulumi:"allowedVlans"`
	AllowedVlansAll     pulumi.StringOutput                               `pulumi:"allowedVlansAll"`
	Description         pulumi.StringOutput                               `pulumi:"description"`
	DiscardMode         pulumi.StringOutput                               `pulumi:"discardMode"`
	DynamicSortSubtable pulumi.StringPtrOutput                            `pulumi:"dynamicSortSubtable"`
	Fortilink           pulumi.StringOutput                               `pulumi:"fortilink"`
	GetAllTables        pulumi.StringPtrOutput                            `pulumi:"getAllTables"`
	Name                pulumi.StringOutput                               `pulumi:"name"`
	UntaggedVlans       SwitchControllerVlanPolicyUntaggedVlanArrayOutput `pulumi:"untaggedVlans"`
	Vdomparam           pulumi.StringPtrOutput                            `pulumi:"vdomparam"`
	Vlan                pulumi.StringOutput                               `pulumi:"vlan"`
}

// NewSwitchControllerVlanPolicy registers a new resource with the given unique name, arguments, and options.
func NewSwitchControllerVlanPolicy(ctx *pulumi.Context,
	name string, args *SwitchControllerVlanPolicyArgs, opts ...pulumi.ResourceOption) (*SwitchControllerVlanPolicy, error) {
	if args == nil {
		args = &SwitchControllerVlanPolicyArgs{}
	}

	opts = internal.PkgResourceDefaultOpts(opts)
	var resource SwitchControllerVlanPolicy
	err := ctx.RegisterResource("fortios:index/switchControllerVlanPolicy:SwitchControllerVlanPolicy", name, args, &resource, opts...)
	if err != nil {
		return nil, err
	}
	return &resource, nil
}

// GetSwitchControllerVlanPolicy gets an existing SwitchControllerVlanPolicy resource's state with the given name, ID, and optional
// state properties that are used to uniquely qualify the lookup (nil if not required).
func GetSwitchControllerVlanPolicy(ctx *pulumi.Context,
	name string, id pulumi.IDInput, state *SwitchControllerVlanPolicyState, opts ...pulumi.ResourceOption) (*SwitchControllerVlanPolicy, error) {
	var resource SwitchControllerVlanPolicy
	err := ctx.ReadResource("fortios:index/switchControllerVlanPolicy:SwitchControllerVlanPolicy", name, id, state, &resource, opts...)
	if err != nil {
		return nil, err
	}
	return &resource, nil
}

// Input properties used for looking up and filtering SwitchControllerVlanPolicy resources.
type switchControllerVlanPolicyState struct {
	AllowedVlans        []SwitchControllerVlanPolicyAllowedVlan  `pulumi:"allowedVlans"`
	AllowedVlansAll     *string                                  `pulumi:"allowedVlansAll"`
	Description         *string                                  `pulumi:"description"`
	DiscardMode         *string                                  `pulumi:"discardMode"`
	DynamicSortSubtable *string                                  `pulumi:"dynamicSortSubtable"`
	Fortilink           *string                                  `pulumi:"fortilink"`
	GetAllTables        *string                                  `pulumi:"getAllTables"`
	Name                *string                                  `pulumi:"name"`
	UntaggedVlans       []SwitchControllerVlanPolicyUntaggedVlan `pulumi:"untaggedVlans"`
	Vdomparam           *string                                  `pulumi:"vdomparam"`
	Vlan                *string                                  `pulumi:"vlan"`
}

type SwitchControllerVlanPolicyState struct {
	AllowedVlans        SwitchControllerVlanPolicyAllowedVlanArrayInput
	AllowedVlansAll     pulumi.StringPtrInput
	Description         pulumi.StringPtrInput
	DiscardMode         pulumi.StringPtrInput
	DynamicSortSubtable pulumi.StringPtrInput
	Fortilink           pulumi.StringPtrInput
	GetAllTables        pulumi.StringPtrInput
	Name                pulumi.StringPtrInput
	UntaggedVlans       SwitchControllerVlanPolicyUntaggedVlanArrayInput
	Vdomparam           pulumi.StringPtrInput
	Vlan                pulumi.StringPtrInput
}

func (SwitchControllerVlanPolicyState) ElementType() reflect.Type {
	return reflect.TypeOf((*switchControllerVlanPolicyState)(nil)).Elem()
}

type switchControllerVlanPolicyArgs struct {
	AllowedVlans        []SwitchControllerVlanPolicyAllowedVlan  `pulumi:"allowedVlans"`
	AllowedVlansAll     *string                                  `pulumi:"allowedVlansAll"`
	Description         *string                                  `pulumi:"description"`
	DiscardMode         *string                                  `pulumi:"discardMode"`
	DynamicSortSubtable *string                                  `pulumi:"dynamicSortSubtable"`
	Fortilink           *string                                  `pulumi:"fortilink"`
	GetAllTables        *string                                  `pulumi:"getAllTables"`
	Name                *string                                  `pulumi:"name"`
	UntaggedVlans       []SwitchControllerVlanPolicyUntaggedVlan `pulumi:"untaggedVlans"`
	Vdomparam           *string                                  `pulumi:"vdomparam"`
	Vlan                *string                                  `pulumi:"vlan"`
}

// The set of arguments for constructing a SwitchControllerVlanPolicy resource.
type SwitchControllerVlanPolicyArgs struct {
	AllowedVlans        SwitchControllerVlanPolicyAllowedVlanArrayInput
	AllowedVlansAll     pulumi.StringPtrInput
	Description         pulumi.StringPtrInput
	DiscardMode         pulumi.StringPtrInput
	DynamicSortSubtable pulumi.StringPtrInput
	Fortilink           pulumi.StringPtrInput
	GetAllTables        pulumi.StringPtrInput
	Name                pulumi.StringPtrInput
	UntaggedVlans       SwitchControllerVlanPolicyUntaggedVlanArrayInput
	Vdomparam           pulumi.StringPtrInput
	Vlan                pulumi.StringPtrInput
}

func (SwitchControllerVlanPolicyArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*switchControllerVlanPolicyArgs)(nil)).Elem()
}

type SwitchControllerVlanPolicyInput interface {
	pulumi.Input

	ToSwitchControllerVlanPolicyOutput() SwitchControllerVlanPolicyOutput
	ToSwitchControllerVlanPolicyOutputWithContext(ctx context.Context) SwitchControllerVlanPolicyOutput
}

func (*SwitchControllerVlanPolicy) ElementType() reflect.Type {
	return reflect.TypeOf((**SwitchControllerVlanPolicy)(nil)).Elem()
}

func (i *SwitchControllerVlanPolicy) ToSwitchControllerVlanPolicyOutput() SwitchControllerVlanPolicyOutput {
	return i.ToSwitchControllerVlanPolicyOutputWithContext(context.Background())
}

func (i *SwitchControllerVlanPolicy) ToSwitchControllerVlanPolicyOutputWithContext(ctx context.Context) SwitchControllerVlanPolicyOutput {
	return pulumi.ToOutputWithContext(ctx, i).(SwitchControllerVlanPolicyOutput)
}

func (i *SwitchControllerVlanPolicy) ToOutput(ctx context.Context) pulumix.Output[*SwitchControllerVlanPolicy] {
	return pulumix.Output[*SwitchControllerVlanPolicy]{
		OutputState: i.ToSwitchControllerVlanPolicyOutputWithContext(ctx).OutputState,
	}
}

// SwitchControllerVlanPolicyArrayInput is an input type that accepts SwitchControllerVlanPolicyArray and SwitchControllerVlanPolicyArrayOutput values.
// You can construct a concrete instance of `SwitchControllerVlanPolicyArrayInput` via:
//
//	SwitchControllerVlanPolicyArray{ SwitchControllerVlanPolicyArgs{...} }
type SwitchControllerVlanPolicyArrayInput interface {
	pulumi.Input

	ToSwitchControllerVlanPolicyArrayOutput() SwitchControllerVlanPolicyArrayOutput
	ToSwitchControllerVlanPolicyArrayOutputWithContext(context.Context) SwitchControllerVlanPolicyArrayOutput
}

type SwitchControllerVlanPolicyArray []SwitchControllerVlanPolicyInput

func (SwitchControllerVlanPolicyArray) ElementType() reflect.Type {
	return reflect.TypeOf((*[]*SwitchControllerVlanPolicy)(nil)).Elem()
}

func (i SwitchControllerVlanPolicyArray) ToSwitchControllerVlanPolicyArrayOutput() SwitchControllerVlanPolicyArrayOutput {
	return i.ToSwitchControllerVlanPolicyArrayOutputWithContext(context.Background())
}

func (i SwitchControllerVlanPolicyArray) ToSwitchControllerVlanPolicyArrayOutputWithContext(ctx context.Context) SwitchControllerVlanPolicyArrayOutput {
	return pulumi.ToOutputWithContext(ctx, i).(SwitchControllerVlanPolicyArrayOutput)
}

func (i SwitchControllerVlanPolicyArray) ToOutput(ctx context.Context) pulumix.Output[[]*SwitchControllerVlanPolicy] {
	return pulumix.Output[[]*SwitchControllerVlanPolicy]{
		OutputState: i.ToSwitchControllerVlanPolicyArrayOutputWithContext(ctx).OutputState,
	}
}

// SwitchControllerVlanPolicyMapInput is an input type that accepts SwitchControllerVlanPolicyMap and SwitchControllerVlanPolicyMapOutput values.
// You can construct a concrete instance of `SwitchControllerVlanPolicyMapInput` via:
//
//	SwitchControllerVlanPolicyMap{ "key": SwitchControllerVlanPolicyArgs{...} }
type SwitchControllerVlanPolicyMapInput interface {
	pulumi.Input

	ToSwitchControllerVlanPolicyMapOutput() SwitchControllerVlanPolicyMapOutput
	ToSwitchControllerVlanPolicyMapOutputWithContext(context.Context) SwitchControllerVlanPolicyMapOutput
}

type SwitchControllerVlanPolicyMap map[string]SwitchControllerVlanPolicyInput

func (SwitchControllerVlanPolicyMap) ElementType() reflect.Type {
	return reflect.TypeOf((*map[string]*SwitchControllerVlanPolicy)(nil)).Elem()
}

func (i SwitchControllerVlanPolicyMap) ToSwitchControllerVlanPolicyMapOutput() SwitchControllerVlanPolicyMapOutput {
	return i.ToSwitchControllerVlanPolicyMapOutputWithContext(context.Background())
}

func (i SwitchControllerVlanPolicyMap) ToSwitchControllerVlanPolicyMapOutputWithContext(ctx context.Context) SwitchControllerVlanPolicyMapOutput {
	return pulumi.ToOutputWithContext(ctx, i).(SwitchControllerVlanPolicyMapOutput)
}

func (i SwitchControllerVlanPolicyMap) ToOutput(ctx context.Context) pulumix.Output[map[string]*SwitchControllerVlanPolicy] {
	return pulumix.Output[map[string]*SwitchControllerVlanPolicy]{
		OutputState: i.ToSwitchControllerVlanPolicyMapOutputWithContext(ctx).OutputState,
	}
}

type SwitchControllerVlanPolicyOutput struct{ *pulumi.OutputState }

func (SwitchControllerVlanPolicyOutput) ElementType() reflect.Type {
	return reflect.TypeOf((**SwitchControllerVlanPolicy)(nil)).Elem()
}

func (o SwitchControllerVlanPolicyOutput) ToSwitchControllerVlanPolicyOutput() SwitchControllerVlanPolicyOutput {
	return o
}

func (o SwitchControllerVlanPolicyOutput) ToSwitchControllerVlanPolicyOutputWithContext(ctx context.Context) SwitchControllerVlanPolicyOutput {
	return o
}

func (o SwitchControllerVlanPolicyOutput) ToOutput(ctx context.Context) pulumix.Output[*SwitchControllerVlanPolicy] {
	return pulumix.Output[*SwitchControllerVlanPolicy]{
		OutputState: o.OutputState,
	}
}

func (o SwitchControllerVlanPolicyOutput) AllowedVlans() SwitchControllerVlanPolicyAllowedVlanArrayOutput {
	return o.ApplyT(func(v *SwitchControllerVlanPolicy) SwitchControllerVlanPolicyAllowedVlanArrayOutput {
		return v.AllowedVlans
	}).(SwitchControllerVlanPolicyAllowedVlanArrayOutput)
}

func (o SwitchControllerVlanPolicyOutput) AllowedVlansAll() pulumi.StringOutput {
	return o.ApplyT(func(v *SwitchControllerVlanPolicy) pulumi.StringOutput { return v.AllowedVlansAll }).(pulumi.StringOutput)
}

func (o SwitchControllerVlanPolicyOutput) Description() pulumi.StringOutput {
	return o.ApplyT(func(v *SwitchControllerVlanPolicy) pulumi.StringOutput { return v.Description }).(pulumi.StringOutput)
}

func (o SwitchControllerVlanPolicyOutput) DiscardMode() pulumi.StringOutput {
	return o.ApplyT(func(v *SwitchControllerVlanPolicy) pulumi.StringOutput { return v.DiscardMode }).(pulumi.StringOutput)
}

func (o SwitchControllerVlanPolicyOutput) DynamicSortSubtable() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *SwitchControllerVlanPolicy) pulumi.StringPtrOutput { return v.DynamicSortSubtable }).(pulumi.StringPtrOutput)
}

func (o SwitchControllerVlanPolicyOutput) Fortilink() pulumi.StringOutput {
	return o.ApplyT(func(v *SwitchControllerVlanPolicy) pulumi.StringOutput { return v.Fortilink }).(pulumi.StringOutput)
}

func (o SwitchControllerVlanPolicyOutput) GetAllTables() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *SwitchControllerVlanPolicy) pulumi.StringPtrOutput { return v.GetAllTables }).(pulumi.StringPtrOutput)
}

func (o SwitchControllerVlanPolicyOutput) Name() pulumi.StringOutput {
	return o.ApplyT(func(v *SwitchControllerVlanPolicy) pulumi.StringOutput { return v.Name }).(pulumi.StringOutput)
}

func (o SwitchControllerVlanPolicyOutput) UntaggedVlans() SwitchControllerVlanPolicyUntaggedVlanArrayOutput {
	return o.ApplyT(func(v *SwitchControllerVlanPolicy) SwitchControllerVlanPolicyUntaggedVlanArrayOutput {
		return v.UntaggedVlans
	}).(SwitchControllerVlanPolicyUntaggedVlanArrayOutput)
}

func (o SwitchControllerVlanPolicyOutput) Vdomparam() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *SwitchControllerVlanPolicy) pulumi.StringPtrOutput { return v.Vdomparam }).(pulumi.StringPtrOutput)
}

func (o SwitchControllerVlanPolicyOutput) Vlan() pulumi.StringOutput {
	return o.ApplyT(func(v *SwitchControllerVlanPolicy) pulumi.StringOutput { return v.Vlan }).(pulumi.StringOutput)
}

type SwitchControllerVlanPolicyArrayOutput struct{ *pulumi.OutputState }

func (SwitchControllerVlanPolicyArrayOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*[]*SwitchControllerVlanPolicy)(nil)).Elem()
}

func (o SwitchControllerVlanPolicyArrayOutput) ToSwitchControllerVlanPolicyArrayOutput() SwitchControllerVlanPolicyArrayOutput {
	return o
}

func (o SwitchControllerVlanPolicyArrayOutput) ToSwitchControllerVlanPolicyArrayOutputWithContext(ctx context.Context) SwitchControllerVlanPolicyArrayOutput {
	return o
}

func (o SwitchControllerVlanPolicyArrayOutput) ToOutput(ctx context.Context) pulumix.Output[[]*SwitchControllerVlanPolicy] {
	return pulumix.Output[[]*SwitchControllerVlanPolicy]{
		OutputState: o.OutputState,
	}
}

func (o SwitchControllerVlanPolicyArrayOutput) Index(i pulumi.IntInput) SwitchControllerVlanPolicyOutput {
	return pulumi.All(o, i).ApplyT(func(vs []interface{}) *SwitchControllerVlanPolicy {
		return vs[0].([]*SwitchControllerVlanPolicy)[vs[1].(int)]
	}).(SwitchControllerVlanPolicyOutput)
}

type SwitchControllerVlanPolicyMapOutput struct{ *pulumi.OutputState }

func (SwitchControllerVlanPolicyMapOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*map[string]*SwitchControllerVlanPolicy)(nil)).Elem()
}

func (o SwitchControllerVlanPolicyMapOutput) ToSwitchControllerVlanPolicyMapOutput() SwitchControllerVlanPolicyMapOutput {
	return o
}

func (o SwitchControllerVlanPolicyMapOutput) ToSwitchControllerVlanPolicyMapOutputWithContext(ctx context.Context) SwitchControllerVlanPolicyMapOutput {
	return o
}

func (o SwitchControllerVlanPolicyMapOutput) ToOutput(ctx context.Context) pulumix.Output[map[string]*SwitchControllerVlanPolicy] {
	return pulumix.Output[map[string]*SwitchControllerVlanPolicy]{
		OutputState: o.OutputState,
	}
}

func (o SwitchControllerVlanPolicyMapOutput) MapIndex(k pulumi.StringInput) SwitchControllerVlanPolicyOutput {
	return pulumi.All(o, k).ApplyT(func(vs []interface{}) *SwitchControllerVlanPolicy {
		return vs[0].(map[string]*SwitchControllerVlanPolicy)[vs[1].(string)]
	}).(SwitchControllerVlanPolicyOutput)
}

func init() {
	pulumi.RegisterInputType(reflect.TypeOf((*SwitchControllerVlanPolicyInput)(nil)).Elem(), &SwitchControllerVlanPolicy{})
	pulumi.RegisterInputType(reflect.TypeOf((*SwitchControllerVlanPolicyArrayInput)(nil)).Elem(), SwitchControllerVlanPolicyArray{})
	pulumi.RegisterInputType(reflect.TypeOf((*SwitchControllerVlanPolicyMapInput)(nil)).Elem(), SwitchControllerVlanPolicyMap{})
	pulumi.RegisterOutputType(SwitchControllerVlanPolicyOutput{})
	pulumi.RegisterOutputType(SwitchControllerVlanPolicyArrayOutput{})
	pulumi.RegisterOutputType(SwitchControllerVlanPolicyMapOutput{})
}
