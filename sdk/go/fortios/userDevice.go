// Code generated by the Pulumi Terraform Bridge (tfgen) Tool DO NOT EDIT.
// *** WARNING: Do not edit by hand unless you're certain you know what you are doing! ***

package fortios

import (
	"context"
	"reflect"

	"github.com/lubyou/pulumi-fortios/sdk/go/fortios/internal"
	"github.com/pulumi/pulumi/sdk/v3/go/pulumi"
)

type UserDevice struct {
	pulumi.CustomResourceState

	Alias               pulumi.StringOutput          `pulumi:"alias"`
	Avatar              pulumi.StringPtrOutput       `pulumi:"avatar"`
	Category            pulumi.StringOutput          `pulumi:"category"`
	Comment             pulumi.StringPtrOutput       `pulumi:"comment"`
	DynamicSortSubtable pulumi.StringPtrOutput       `pulumi:"dynamicSortSubtable"`
	GetAllTables        pulumi.StringPtrOutput       `pulumi:"getAllTables"`
	Mac                 pulumi.StringOutput          `pulumi:"mac"`
	MasterDevice        pulumi.StringOutput          `pulumi:"masterDevice"`
	Taggings            UserDeviceTaggingArrayOutput `pulumi:"taggings"`
	Type                pulumi.StringOutput          `pulumi:"type"`
	User                pulumi.StringOutput          `pulumi:"user"`
	Vdomparam           pulumi.StringPtrOutput       `pulumi:"vdomparam"`
}

// NewUserDevice registers a new resource with the given unique name, arguments, and options.
func NewUserDevice(ctx *pulumi.Context,
	name string, args *UserDeviceArgs, opts ...pulumi.ResourceOption) (*UserDevice, error) {
	if args == nil {
		args = &UserDeviceArgs{}
	}

	opts = internal.PkgResourceDefaultOpts(opts)
	var resource UserDevice
	err := ctx.RegisterResource("fortios:index/userDevice:UserDevice", name, args, &resource, opts...)
	if err != nil {
		return nil, err
	}
	return &resource, nil
}

// GetUserDevice gets an existing UserDevice resource's state with the given name, ID, and optional
// state properties that are used to uniquely qualify the lookup (nil if not required).
func GetUserDevice(ctx *pulumi.Context,
	name string, id pulumi.IDInput, state *UserDeviceState, opts ...pulumi.ResourceOption) (*UserDevice, error) {
	var resource UserDevice
	err := ctx.ReadResource("fortios:index/userDevice:UserDevice", name, id, state, &resource, opts...)
	if err != nil {
		return nil, err
	}
	return &resource, nil
}

// Input properties used for looking up and filtering UserDevice resources.
type userDeviceState struct {
	Alias               *string             `pulumi:"alias"`
	Avatar              *string             `pulumi:"avatar"`
	Category            *string             `pulumi:"category"`
	Comment             *string             `pulumi:"comment"`
	DynamicSortSubtable *string             `pulumi:"dynamicSortSubtable"`
	GetAllTables        *string             `pulumi:"getAllTables"`
	Mac                 *string             `pulumi:"mac"`
	MasterDevice        *string             `pulumi:"masterDevice"`
	Taggings            []UserDeviceTagging `pulumi:"taggings"`
	Type                *string             `pulumi:"type"`
	User                *string             `pulumi:"user"`
	Vdomparam           *string             `pulumi:"vdomparam"`
}

type UserDeviceState struct {
	Alias               pulumi.StringPtrInput
	Avatar              pulumi.StringPtrInput
	Category            pulumi.StringPtrInput
	Comment             pulumi.StringPtrInput
	DynamicSortSubtable pulumi.StringPtrInput
	GetAllTables        pulumi.StringPtrInput
	Mac                 pulumi.StringPtrInput
	MasterDevice        pulumi.StringPtrInput
	Taggings            UserDeviceTaggingArrayInput
	Type                pulumi.StringPtrInput
	User                pulumi.StringPtrInput
	Vdomparam           pulumi.StringPtrInput
}

func (UserDeviceState) ElementType() reflect.Type {
	return reflect.TypeOf((*userDeviceState)(nil)).Elem()
}

type userDeviceArgs struct {
	Alias               *string             `pulumi:"alias"`
	Avatar              *string             `pulumi:"avatar"`
	Category            *string             `pulumi:"category"`
	Comment             *string             `pulumi:"comment"`
	DynamicSortSubtable *string             `pulumi:"dynamicSortSubtable"`
	GetAllTables        *string             `pulumi:"getAllTables"`
	Mac                 *string             `pulumi:"mac"`
	MasterDevice        *string             `pulumi:"masterDevice"`
	Taggings            []UserDeviceTagging `pulumi:"taggings"`
	Type                *string             `pulumi:"type"`
	User                *string             `pulumi:"user"`
	Vdomparam           *string             `pulumi:"vdomparam"`
}

// The set of arguments for constructing a UserDevice resource.
type UserDeviceArgs struct {
	Alias               pulumi.StringPtrInput
	Avatar              pulumi.StringPtrInput
	Category            pulumi.StringPtrInput
	Comment             pulumi.StringPtrInput
	DynamicSortSubtable pulumi.StringPtrInput
	GetAllTables        pulumi.StringPtrInput
	Mac                 pulumi.StringPtrInput
	MasterDevice        pulumi.StringPtrInput
	Taggings            UserDeviceTaggingArrayInput
	Type                pulumi.StringPtrInput
	User                pulumi.StringPtrInput
	Vdomparam           pulumi.StringPtrInput
}

func (UserDeviceArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*userDeviceArgs)(nil)).Elem()
}

type UserDeviceInput interface {
	pulumi.Input

	ToUserDeviceOutput() UserDeviceOutput
	ToUserDeviceOutputWithContext(ctx context.Context) UserDeviceOutput
}

func (*UserDevice) ElementType() reflect.Type {
	return reflect.TypeOf((**UserDevice)(nil)).Elem()
}

func (i *UserDevice) ToUserDeviceOutput() UserDeviceOutput {
	return i.ToUserDeviceOutputWithContext(context.Background())
}

func (i *UserDevice) ToUserDeviceOutputWithContext(ctx context.Context) UserDeviceOutput {
	return pulumi.ToOutputWithContext(ctx, i).(UserDeviceOutput)
}

// UserDeviceArrayInput is an input type that accepts UserDeviceArray and UserDeviceArrayOutput values.
// You can construct a concrete instance of `UserDeviceArrayInput` via:
//
//	UserDeviceArray{ UserDeviceArgs{...} }
type UserDeviceArrayInput interface {
	pulumi.Input

	ToUserDeviceArrayOutput() UserDeviceArrayOutput
	ToUserDeviceArrayOutputWithContext(context.Context) UserDeviceArrayOutput
}

type UserDeviceArray []UserDeviceInput

func (UserDeviceArray) ElementType() reflect.Type {
	return reflect.TypeOf((*[]*UserDevice)(nil)).Elem()
}

func (i UserDeviceArray) ToUserDeviceArrayOutput() UserDeviceArrayOutput {
	return i.ToUserDeviceArrayOutputWithContext(context.Background())
}

func (i UserDeviceArray) ToUserDeviceArrayOutputWithContext(ctx context.Context) UserDeviceArrayOutput {
	return pulumi.ToOutputWithContext(ctx, i).(UserDeviceArrayOutput)
}

// UserDeviceMapInput is an input type that accepts UserDeviceMap and UserDeviceMapOutput values.
// You can construct a concrete instance of `UserDeviceMapInput` via:
//
//	UserDeviceMap{ "key": UserDeviceArgs{...} }
type UserDeviceMapInput interface {
	pulumi.Input

	ToUserDeviceMapOutput() UserDeviceMapOutput
	ToUserDeviceMapOutputWithContext(context.Context) UserDeviceMapOutput
}

type UserDeviceMap map[string]UserDeviceInput

func (UserDeviceMap) ElementType() reflect.Type {
	return reflect.TypeOf((*map[string]*UserDevice)(nil)).Elem()
}

func (i UserDeviceMap) ToUserDeviceMapOutput() UserDeviceMapOutput {
	return i.ToUserDeviceMapOutputWithContext(context.Background())
}

func (i UserDeviceMap) ToUserDeviceMapOutputWithContext(ctx context.Context) UserDeviceMapOutput {
	return pulumi.ToOutputWithContext(ctx, i).(UserDeviceMapOutput)
}

type UserDeviceOutput struct{ *pulumi.OutputState }

func (UserDeviceOutput) ElementType() reflect.Type {
	return reflect.TypeOf((**UserDevice)(nil)).Elem()
}

func (o UserDeviceOutput) ToUserDeviceOutput() UserDeviceOutput {
	return o
}

func (o UserDeviceOutput) ToUserDeviceOutputWithContext(ctx context.Context) UserDeviceOutput {
	return o
}

func (o UserDeviceOutput) Alias() pulumi.StringOutput {
	return o.ApplyT(func(v *UserDevice) pulumi.StringOutput { return v.Alias }).(pulumi.StringOutput)
}

func (o UserDeviceOutput) Avatar() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *UserDevice) pulumi.StringPtrOutput { return v.Avatar }).(pulumi.StringPtrOutput)
}

func (o UserDeviceOutput) Category() pulumi.StringOutput {
	return o.ApplyT(func(v *UserDevice) pulumi.StringOutput { return v.Category }).(pulumi.StringOutput)
}

func (o UserDeviceOutput) Comment() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *UserDevice) pulumi.StringPtrOutput { return v.Comment }).(pulumi.StringPtrOutput)
}

func (o UserDeviceOutput) DynamicSortSubtable() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *UserDevice) pulumi.StringPtrOutput { return v.DynamicSortSubtable }).(pulumi.StringPtrOutput)
}

func (o UserDeviceOutput) GetAllTables() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *UserDevice) pulumi.StringPtrOutput { return v.GetAllTables }).(pulumi.StringPtrOutput)
}

func (o UserDeviceOutput) Mac() pulumi.StringOutput {
	return o.ApplyT(func(v *UserDevice) pulumi.StringOutput { return v.Mac }).(pulumi.StringOutput)
}

func (o UserDeviceOutput) MasterDevice() pulumi.StringOutput {
	return o.ApplyT(func(v *UserDevice) pulumi.StringOutput { return v.MasterDevice }).(pulumi.StringOutput)
}

func (o UserDeviceOutput) Taggings() UserDeviceTaggingArrayOutput {
	return o.ApplyT(func(v *UserDevice) UserDeviceTaggingArrayOutput { return v.Taggings }).(UserDeviceTaggingArrayOutput)
}

func (o UserDeviceOutput) Type() pulumi.StringOutput {
	return o.ApplyT(func(v *UserDevice) pulumi.StringOutput { return v.Type }).(pulumi.StringOutput)
}

func (o UserDeviceOutput) User() pulumi.StringOutput {
	return o.ApplyT(func(v *UserDevice) pulumi.StringOutput { return v.User }).(pulumi.StringOutput)
}

func (o UserDeviceOutput) Vdomparam() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *UserDevice) pulumi.StringPtrOutput { return v.Vdomparam }).(pulumi.StringPtrOutput)
}

type UserDeviceArrayOutput struct{ *pulumi.OutputState }

func (UserDeviceArrayOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*[]*UserDevice)(nil)).Elem()
}

func (o UserDeviceArrayOutput) ToUserDeviceArrayOutput() UserDeviceArrayOutput {
	return o
}

func (o UserDeviceArrayOutput) ToUserDeviceArrayOutputWithContext(ctx context.Context) UserDeviceArrayOutput {
	return o
}

func (o UserDeviceArrayOutput) Index(i pulumi.IntInput) UserDeviceOutput {
	return pulumi.All(o, i).ApplyT(func(vs []interface{}) *UserDevice {
		return vs[0].([]*UserDevice)[vs[1].(int)]
	}).(UserDeviceOutput)
}

type UserDeviceMapOutput struct{ *pulumi.OutputState }

func (UserDeviceMapOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*map[string]*UserDevice)(nil)).Elem()
}

func (o UserDeviceMapOutput) ToUserDeviceMapOutput() UserDeviceMapOutput {
	return o
}

func (o UserDeviceMapOutput) ToUserDeviceMapOutputWithContext(ctx context.Context) UserDeviceMapOutput {
	return o
}

func (o UserDeviceMapOutput) MapIndex(k pulumi.StringInput) UserDeviceOutput {
	return pulumi.All(o, k).ApplyT(func(vs []interface{}) *UserDevice {
		return vs[0].(map[string]*UserDevice)[vs[1].(string)]
	}).(UserDeviceOutput)
}

func init() {
	pulumi.RegisterInputType(reflect.TypeOf((*UserDeviceInput)(nil)).Elem(), &UserDevice{})
	pulumi.RegisterInputType(reflect.TypeOf((*UserDeviceArrayInput)(nil)).Elem(), UserDeviceArray{})
	pulumi.RegisterInputType(reflect.TypeOf((*UserDeviceMapInput)(nil)).Elem(), UserDeviceMap{})
	pulumi.RegisterOutputType(UserDeviceOutput{})
	pulumi.RegisterOutputType(UserDeviceArrayOutput{})
	pulumi.RegisterOutputType(UserDeviceMapOutput{})
}
