// Code generated by the Pulumi Terraform Bridge (tfgen) Tool DO NOT EDIT.
// *** WARNING: Do not edit by hand unless you're certain you know what you are doing! ***

package fortios

import (
	"context"
	"reflect"

	"github.com/lubyou/pulumi-fortios/sdk/go/fortios/internal"
	"github.com/pulumi/pulumi/sdk/v3/go/pulumi"
	"github.com/pulumi/pulumi/sdk/v3/go/pulumix"
)

type VpnCertificateOcspServer struct {
	pulumi.CustomResourceState

	Cert          pulumi.StringOutput    `pulumi:"cert"`
	Name          pulumi.StringOutput    `pulumi:"name"`
	SecondaryCert pulumi.StringOutput    `pulumi:"secondaryCert"`
	SecondaryUrl  pulumi.StringOutput    `pulumi:"secondaryUrl"`
	SourceIp      pulumi.StringOutput    `pulumi:"sourceIp"`
	UnavailAction pulumi.StringOutput    `pulumi:"unavailAction"`
	Url           pulumi.StringOutput    `pulumi:"url"`
	Vdomparam     pulumi.StringPtrOutput `pulumi:"vdomparam"`
}

// NewVpnCertificateOcspServer registers a new resource with the given unique name, arguments, and options.
func NewVpnCertificateOcspServer(ctx *pulumi.Context,
	name string, args *VpnCertificateOcspServerArgs, opts ...pulumi.ResourceOption) (*VpnCertificateOcspServer, error) {
	if args == nil {
		args = &VpnCertificateOcspServerArgs{}
	}

	opts = internal.PkgResourceDefaultOpts(opts)
	var resource VpnCertificateOcspServer
	err := ctx.RegisterResource("fortios:index/vpnCertificateOcspServer:VpnCertificateOcspServer", name, args, &resource, opts...)
	if err != nil {
		return nil, err
	}
	return &resource, nil
}

// GetVpnCertificateOcspServer gets an existing VpnCertificateOcspServer resource's state with the given name, ID, and optional
// state properties that are used to uniquely qualify the lookup (nil if not required).
func GetVpnCertificateOcspServer(ctx *pulumi.Context,
	name string, id pulumi.IDInput, state *VpnCertificateOcspServerState, opts ...pulumi.ResourceOption) (*VpnCertificateOcspServer, error) {
	var resource VpnCertificateOcspServer
	err := ctx.ReadResource("fortios:index/vpnCertificateOcspServer:VpnCertificateOcspServer", name, id, state, &resource, opts...)
	if err != nil {
		return nil, err
	}
	return &resource, nil
}

// Input properties used for looking up and filtering VpnCertificateOcspServer resources.
type vpnCertificateOcspServerState struct {
	Cert          *string `pulumi:"cert"`
	Name          *string `pulumi:"name"`
	SecondaryCert *string `pulumi:"secondaryCert"`
	SecondaryUrl  *string `pulumi:"secondaryUrl"`
	SourceIp      *string `pulumi:"sourceIp"`
	UnavailAction *string `pulumi:"unavailAction"`
	Url           *string `pulumi:"url"`
	Vdomparam     *string `pulumi:"vdomparam"`
}

type VpnCertificateOcspServerState struct {
	Cert          pulumi.StringPtrInput
	Name          pulumi.StringPtrInput
	SecondaryCert pulumi.StringPtrInput
	SecondaryUrl  pulumi.StringPtrInput
	SourceIp      pulumi.StringPtrInput
	UnavailAction pulumi.StringPtrInput
	Url           pulumi.StringPtrInput
	Vdomparam     pulumi.StringPtrInput
}

func (VpnCertificateOcspServerState) ElementType() reflect.Type {
	return reflect.TypeOf((*vpnCertificateOcspServerState)(nil)).Elem()
}

type vpnCertificateOcspServerArgs struct {
	Cert          *string `pulumi:"cert"`
	Name          *string `pulumi:"name"`
	SecondaryCert *string `pulumi:"secondaryCert"`
	SecondaryUrl  *string `pulumi:"secondaryUrl"`
	SourceIp      *string `pulumi:"sourceIp"`
	UnavailAction *string `pulumi:"unavailAction"`
	Url           *string `pulumi:"url"`
	Vdomparam     *string `pulumi:"vdomparam"`
}

// The set of arguments for constructing a VpnCertificateOcspServer resource.
type VpnCertificateOcspServerArgs struct {
	Cert          pulumi.StringPtrInput
	Name          pulumi.StringPtrInput
	SecondaryCert pulumi.StringPtrInput
	SecondaryUrl  pulumi.StringPtrInput
	SourceIp      pulumi.StringPtrInput
	UnavailAction pulumi.StringPtrInput
	Url           pulumi.StringPtrInput
	Vdomparam     pulumi.StringPtrInput
}

func (VpnCertificateOcspServerArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*vpnCertificateOcspServerArgs)(nil)).Elem()
}

type VpnCertificateOcspServerInput interface {
	pulumi.Input

	ToVpnCertificateOcspServerOutput() VpnCertificateOcspServerOutput
	ToVpnCertificateOcspServerOutputWithContext(ctx context.Context) VpnCertificateOcspServerOutput
}

func (*VpnCertificateOcspServer) ElementType() reflect.Type {
	return reflect.TypeOf((**VpnCertificateOcspServer)(nil)).Elem()
}

func (i *VpnCertificateOcspServer) ToVpnCertificateOcspServerOutput() VpnCertificateOcspServerOutput {
	return i.ToVpnCertificateOcspServerOutputWithContext(context.Background())
}

func (i *VpnCertificateOcspServer) ToVpnCertificateOcspServerOutputWithContext(ctx context.Context) VpnCertificateOcspServerOutput {
	return pulumi.ToOutputWithContext(ctx, i).(VpnCertificateOcspServerOutput)
}

func (i *VpnCertificateOcspServer) ToOutput(ctx context.Context) pulumix.Output[*VpnCertificateOcspServer] {
	return pulumix.Output[*VpnCertificateOcspServer]{
		OutputState: i.ToVpnCertificateOcspServerOutputWithContext(ctx).OutputState,
	}
}

// VpnCertificateOcspServerArrayInput is an input type that accepts VpnCertificateOcspServerArray and VpnCertificateOcspServerArrayOutput values.
// You can construct a concrete instance of `VpnCertificateOcspServerArrayInput` via:
//
//	VpnCertificateOcspServerArray{ VpnCertificateOcspServerArgs{...} }
type VpnCertificateOcspServerArrayInput interface {
	pulumi.Input

	ToVpnCertificateOcspServerArrayOutput() VpnCertificateOcspServerArrayOutput
	ToVpnCertificateOcspServerArrayOutputWithContext(context.Context) VpnCertificateOcspServerArrayOutput
}

type VpnCertificateOcspServerArray []VpnCertificateOcspServerInput

func (VpnCertificateOcspServerArray) ElementType() reflect.Type {
	return reflect.TypeOf((*[]*VpnCertificateOcspServer)(nil)).Elem()
}

func (i VpnCertificateOcspServerArray) ToVpnCertificateOcspServerArrayOutput() VpnCertificateOcspServerArrayOutput {
	return i.ToVpnCertificateOcspServerArrayOutputWithContext(context.Background())
}

func (i VpnCertificateOcspServerArray) ToVpnCertificateOcspServerArrayOutputWithContext(ctx context.Context) VpnCertificateOcspServerArrayOutput {
	return pulumi.ToOutputWithContext(ctx, i).(VpnCertificateOcspServerArrayOutput)
}

func (i VpnCertificateOcspServerArray) ToOutput(ctx context.Context) pulumix.Output[[]*VpnCertificateOcspServer] {
	return pulumix.Output[[]*VpnCertificateOcspServer]{
		OutputState: i.ToVpnCertificateOcspServerArrayOutputWithContext(ctx).OutputState,
	}
}

// VpnCertificateOcspServerMapInput is an input type that accepts VpnCertificateOcspServerMap and VpnCertificateOcspServerMapOutput values.
// You can construct a concrete instance of `VpnCertificateOcspServerMapInput` via:
//
//	VpnCertificateOcspServerMap{ "key": VpnCertificateOcspServerArgs{...} }
type VpnCertificateOcspServerMapInput interface {
	pulumi.Input

	ToVpnCertificateOcspServerMapOutput() VpnCertificateOcspServerMapOutput
	ToVpnCertificateOcspServerMapOutputWithContext(context.Context) VpnCertificateOcspServerMapOutput
}

type VpnCertificateOcspServerMap map[string]VpnCertificateOcspServerInput

func (VpnCertificateOcspServerMap) ElementType() reflect.Type {
	return reflect.TypeOf((*map[string]*VpnCertificateOcspServer)(nil)).Elem()
}

func (i VpnCertificateOcspServerMap) ToVpnCertificateOcspServerMapOutput() VpnCertificateOcspServerMapOutput {
	return i.ToVpnCertificateOcspServerMapOutputWithContext(context.Background())
}

func (i VpnCertificateOcspServerMap) ToVpnCertificateOcspServerMapOutputWithContext(ctx context.Context) VpnCertificateOcspServerMapOutput {
	return pulumi.ToOutputWithContext(ctx, i).(VpnCertificateOcspServerMapOutput)
}

func (i VpnCertificateOcspServerMap) ToOutput(ctx context.Context) pulumix.Output[map[string]*VpnCertificateOcspServer] {
	return pulumix.Output[map[string]*VpnCertificateOcspServer]{
		OutputState: i.ToVpnCertificateOcspServerMapOutputWithContext(ctx).OutputState,
	}
}

type VpnCertificateOcspServerOutput struct{ *pulumi.OutputState }

func (VpnCertificateOcspServerOutput) ElementType() reflect.Type {
	return reflect.TypeOf((**VpnCertificateOcspServer)(nil)).Elem()
}

func (o VpnCertificateOcspServerOutput) ToVpnCertificateOcspServerOutput() VpnCertificateOcspServerOutput {
	return o
}

func (o VpnCertificateOcspServerOutput) ToVpnCertificateOcspServerOutputWithContext(ctx context.Context) VpnCertificateOcspServerOutput {
	return o
}

func (o VpnCertificateOcspServerOutput) ToOutput(ctx context.Context) pulumix.Output[*VpnCertificateOcspServer] {
	return pulumix.Output[*VpnCertificateOcspServer]{
		OutputState: o.OutputState,
	}
}

func (o VpnCertificateOcspServerOutput) Cert() pulumi.StringOutput {
	return o.ApplyT(func(v *VpnCertificateOcspServer) pulumi.StringOutput { return v.Cert }).(pulumi.StringOutput)
}

func (o VpnCertificateOcspServerOutput) Name() pulumi.StringOutput {
	return o.ApplyT(func(v *VpnCertificateOcspServer) pulumi.StringOutput { return v.Name }).(pulumi.StringOutput)
}

func (o VpnCertificateOcspServerOutput) SecondaryCert() pulumi.StringOutput {
	return o.ApplyT(func(v *VpnCertificateOcspServer) pulumi.StringOutput { return v.SecondaryCert }).(pulumi.StringOutput)
}

func (o VpnCertificateOcspServerOutput) SecondaryUrl() pulumi.StringOutput {
	return o.ApplyT(func(v *VpnCertificateOcspServer) pulumi.StringOutput { return v.SecondaryUrl }).(pulumi.StringOutput)
}

func (o VpnCertificateOcspServerOutput) SourceIp() pulumi.StringOutput {
	return o.ApplyT(func(v *VpnCertificateOcspServer) pulumi.StringOutput { return v.SourceIp }).(pulumi.StringOutput)
}

func (o VpnCertificateOcspServerOutput) UnavailAction() pulumi.StringOutput {
	return o.ApplyT(func(v *VpnCertificateOcspServer) pulumi.StringOutput { return v.UnavailAction }).(pulumi.StringOutput)
}

func (o VpnCertificateOcspServerOutput) Url() pulumi.StringOutput {
	return o.ApplyT(func(v *VpnCertificateOcspServer) pulumi.StringOutput { return v.Url }).(pulumi.StringOutput)
}

func (o VpnCertificateOcspServerOutput) Vdomparam() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *VpnCertificateOcspServer) pulumi.StringPtrOutput { return v.Vdomparam }).(pulumi.StringPtrOutput)
}

type VpnCertificateOcspServerArrayOutput struct{ *pulumi.OutputState }

func (VpnCertificateOcspServerArrayOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*[]*VpnCertificateOcspServer)(nil)).Elem()
}

func (o VpnCertificateOcspServerArrayOutput) ToVpnCertificateOcspServerArrayOutput() VpnCertificateOcspServerArrayOutput {
	return o
}

func (o VpnCertificateOcspServerArrayOutput) ToVpnCertificateOcspServerArrayOutputWithContext(ctx context.Context) VpnCertificateOcspServerArrayOutput {
	return o
}

func (o VpnCertificateOcspServerArrayOutput) ToOutput(ctx context.Context) pulumix.Output[[]*VpnCertificateOcspServer] {
	return pulumix.Output[[]*VpnCertificateOcspServer]{
		OutputState: o.OutputState,
	}
}

func (o VpnCertificateOcspServerArrayOutput) Index(i pulumi.IntInput) VpnCertificateOcspServerOutput {
	return pulumi.All(o, i).ApplyT(func(vs []interface{}) *VpnCertificateOcspServer {
		return vs[0].([]*VpnCertificateOcspServer)[vs[1].(int)]
	}).(VpnCertificateOcspServerOutput)
}

type VpnCertificateOcspServerMapOutput struct{ *pulumi.OutputState }

func (VpnCertificateOcspServerMapOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*map[string]*VpnCertificateOcspServer)(nil)).Elem()
}

func (o VpnCertificateOcspServerMapOutput) ToVpnCertificateOcspServerMapOutput() VpnCertificateOcspServerMapOutput {
	return o
}

func (o VpnCertificateOcspServerMapOutput) ToVpnCertificateOcspServerMapOutputWithContext(ctx context.Context) VpnCertificateOcspServerMapOutput {
	return o
}

func (o VpnCertificateOcspServerMapOutput) ToOutput(ctx context.Context) pulumix.Output[map[string]*VpnCertificateOcspServer] {
	return pulumix.Output[map[string]*VpnCertificateOcspServer]{
		OutputState: o.OutputState,
	}
}

func (o VpnCertificateOcspServerMapOutput) MapIndex(k pulumi.StringInput) VpnCertificateOcspServerOutput {
	return pulumi.All(o, k).ApplyT(func(vs []interface{}) *VpnCertificateOcspServer {
		return vs[0].(map[string]*VpnCertificateOcspServer)[vs[1].(string)]
	}).(VpnCertificateOcspServerOutput)
}

func init() {
	pulumi.RegisterInputType(reflect.TypeOf((*VpnCertificateOcspServerInput)(nil)).Elem(), &VpnCertificateOcspServer{})
	pulumi.RegisterInputType(reflect.TypeOf((*VpnCertificateOcspServerArrayInput)(nil)).Elem(), VpnCertificateOcspServerArray{})
	pulumi.RegisterInputType(reflect.TypeOf((*VpnCertificateOcspServerMapInput)(nil)).Elem(), VpnCertificateOcspServerMap{})
	pulumi.RegisterOutputType(VpnCertificateOcspServerOutput{})
	pulumi.RegisterOutputType(VpnCertificateOcspServerArrayOutput{})
	pulumi.RegisterOutputType(VpnCertificateOcspServerMapOutput{})
}
