// Code generated by the Pulumi Terraform Bridge (tfgen) Tool DO NOT EDIT.
// *** WARNING: Do not edit by hand unless you're certain you know what you are doing! ***

package fortios

import (
	"context"
	"reflect"

	"github.com/pulumi/pulumi/sdk/v3/go/pulumi"
)

// Filters for remote system server.
//
// ## Example Usage
//
// ```go
// package main
//
// import (
// 	"github.com/lubyou/pulumi-fortios/sdk/go/fortios"
// 	"github.com/pulumi/pulumi/sdk/v3/go/pulumi"
// )
//
// func main() {
// 	pulumi.Run(func(ctx *pulumi.Context) error {
// 		_, err := fortios.NewLogSyslogdFilter(ctx, "trname", &fortios.LogSyslogdFilterArgs{
// 			Anomaly:          pulumi.String("enable"),
// 			Dns:              pulumi.String("enable"),
// 			FilterType:       pulumi.String("include"),
// 			ForwardTraffic:   pulumi.String("enable"),
// 			Gtp:              pulumi.String("enable"),
// 			LocalTraffic:     pulumi.String("enable"),
// 			MulticastTraffic: pulumi.String("enable"),
// 			Severity:         pulumi.String("information"),
// 			SnifferTraffic:   pulumi.String("enable"),
// 			Ssh:              pulumi.String("enable"),
// 			Voip:             pulumi.String("enable"),
// 		})
// 		if err != nil {
// 			return err
// 		}
// 		return nil
// 	})
// }
// ```
//
// ## Import
//
// LogSyslogd Filter can be imported using any of these accepted formats
//
// ```sh
//  $ pulumi import fortios:index/logSyslogdFilter:LogSyslogdFilter labelname LogSyslogdFilter
// ```
//
//  If you do not want to import arguments of block$ export "FORTIOS_IMPORT_TABLE"="false"
//
// ```sh
//  $ pulumi import fortios:index/logSyslogdFilter:LogSyslogdFilter labelname LogSyslogdFilter
// ```
//
//  $ unset "FORTIOS_IMPORT_TABLE"
type LogSyslogdFilter struct {
	pulumi.CustomResourceState

	// Enable/disable anomaly logging. Valid values: `enable`, `disable`.
	Anomaly pulumi.StringOutput `pulumi:"anomaly"`
	// Enable/disable detailed DNS event logging. Valid values: `enable`, `disable`.
	Dns pulumi.StringOutput `pulumi:"dns"`
	// true or false, set this parameter to true when using dynamic forEach + toset to configure and sort sub-tables, please do not set this parameter when configuring static sub-tables.
	DynamicSortSubtable pulumi.StringPtrOutput `pulumi:"dynamicSortSubtable"`
	// Free style filter string.
	Filter pulumi.StringOutput `pulumi:"filter"`
	// Include/exclude logs that match the filter. Valid values: `include`, `exclude`.
	FilterType pulumi.StringOutput `pulumi:"filterType"`
	// Enable/disable forward traffic logging. Valid values: `enable`, `disable`.
	ForwardTraffic pulumi.StringOutput `pulumi:"forwardTraffic"`
	// Free Style Filters The structure of `freeStyle` block is documented below.
	FreeStyles LogSyslogdFilterFreeStyleArrayOutput `pulumi:"freeStyles"`
	// Enable/disable GTP messages logging. Valid values: `enable`, `disable`.
	Gtp pulumi.StringOutput `pulumi:"gtp"`
	// Enable/disable local in or out traffic logging. Valid values: `enable`, `disable`.
	LocalTraffic pulumi.StringOutput `pulumi:"localTraffic"`
	// Enable/disable multicast traffic logging. Valid values: `enable`, `disable`.
	MulticastTraffic pulumi.StringOutput `pulumi:"multicastTraffic"`
	// Enable/disable netscan discovery event logging.
	NetscanDiscovery pulumi.StringOutput `pulumi:"netscanDiscovery"`
	// Enable/disable netscan vulnerability event logging.
	NetscanVulnerability pulumi.StringOutput `pulumi:"netscanVulnerability"`
	// Lowest severity level to log. Valid values: `emergency`, `alert`, `critical`, `error`, `warning`, `notification`, `information`, `debug`.
	Severity pulumi.StringOutput `pulumi:"severity"`
	// Enable/disable sniffer traffic logging. Valid values: `enable`, `disable`.
	SnifferTraffic pulumi.StringOutput `pulumi:"snifferTraffic"`
	// Enable/disable SSH logging. Valid values: `enable`, `disable`.
	Ssh pulumi.StringOutput `pulumi:"ssh"`
	// Specifies the vdom to which the resource will be applied when the FortiGate unit is running in VDOM mode. Only one vdom can be specified. If you want to inherit the vdom configuration of the provider, please do not set this parameter.
	Vdomparam pulumi.StringPtrOutput `pulumi:"vdomparam"`
	// Enable/disable VoIP logging. Valid values: `enable`, `disable`.
	Voip pulumi.StringOutput `pulumi:"voip"`
	// Enable/disable ztna traffic logging. Valid values: `enable`, `disable`.
	ZtnaTraffic pulumi.StringOutput `pulumi:"ztnaTraffic"`
}

// NewLogSyslogdFilter registers a new resource with the given unique name, arguments, and options.
func NewLogSyslogdFilter(ctx *pulumi.Context,
	name string, args *LogSyslogdFilterArgs, opts ...pulumi.ResourceOption) (*LogSyslogdFilter, error) {
	if args == nil {
		args = &LogSyslogdFilterArgs{}
	}

	opts = pkgResourceDefaultOpts(opts)
	var resource LogSyslogdFilter
	err := ctx.RegisterResource("fortios:index/logSyslogdFilter:LogSyslogdFilter", name, args, &resource, opts...)
	if err != nil {
		return nil, err
	}
	return &resource, nil
}

// GetLogSyslogdFilter gets an existing LogSyslogdFilter resource's state with the given name, ID, and optional
// state properties that are used to uniquely qualify the lookup (nil if not required).
func GetLogSyslogdFilter(ctx *pulumi.Context,
	name string, id pulumi.IDInput, state *LogSyslogdFilterState, opts ...pulumi.ResourceOption) (*LogSyslogdFilter, error) {
	var resource LogSyslogdFilter
	err := ctx.ReadResource("fortios:index/logSyslogdFilter:LogSyslogdFilter", name, id, state, &resource, opts...)
	if err != nil {
		return nil, err
	}
	return &resource, nil
}

// Input properties used for looking up and filtering LogSyslogdFilter resources.
type logSyslogdFilterState struct {
	// Enable/disable anomaly logging. Valid values: `enable`, `disable`.
	Anomaly *string `pulumi:"anomaly"`
	// Enable/disable detailed DNS event logging. Valid values: `enable`, `disable`.
	Dns *string `pulumi:"dns"`
	// true or false, set this parameter to true when using dynamic forEach + toset to configure and sort sub-tables, please do not set this parameter when configuring static sub-tables.
	DynamicSortSubtable *string `pulumi:"dynamicSortSubtable"`
	// Free style filter string.
	Filter *string `pulumi:"filter"`
	// Include/exclude logs that match the filter. Valid values: `include`, `exclude`.
	FilterType *string `pulumi:"filterType"`
	// Enable/disable forward traffic logging. Valid values: `enable`, `disable`.
	ForwardTraffic *string `pulumi:"forwardTraffic"`
	// Free Style Filters The structure of `freeStyle` block is documented below.
	FreeStyles []LogSyslogdFilterFreeStyle `pulumi:"freeStyles"`
	// Enable/disable GTP messages logging. Valid values: `enable`, `disable`.
	Gtp *string `pulumi:"gtp"`
	// Enable/disable local in or out traffic logging. Valid values: `enable`, `disable`.
	LocalTraffic *string `pulumi:"localTraffic"`
	// Enable/disable multicast traffic logging. Valid values: `enable`, `disable`.
	MulticastTraffic *string `pulumi:"multicastTraffic"`
	// Enable/disable netscan discovery event logging.
	NetscanDiscovery *string `pulumi:"netscanDiscovery"`
	// Enable/disable netscan vulnerability event logging.
	NetscanVulnerability *string `pulumi:"netscanVulnerability"`
	// Lowest severity level to log. Valid values: `emergency`, `alert`, `critical`, `error`, `warning`, `notification`, `information`, `debug`.
	Severity *string `pulumi:"severity"`
	// Enable/disable sniffer traffic logging. Valid values: `enable`, `disable`.
	SnifferTraffic *string `pulumi:"snifferTraffic"`
	// Enable/disable SSH logging. Valid values: `enable`, `disable`.
	Ssh *string `pulumi:"ssh"`
	// Specifies the vdom to which the resource will be applied when the FortiGate unit is running in VDOM mode. Only one vdom can be specified. If you want to inherit the vdom configuration of the provider, please do not set this parameter.
	Vdomparam *string `pulumi:"vdomparam"`
	// Enable/disable VoIP logging. Valid values: `enable`, `disable`.
	Voip *string `pulumi:"voip"`
	// Enable/disable ztna traffic logging. Valid values: `enable`, `disable`.
	ZtnaTraffic *string `pulumi:"ztnaTraffic"`
}

type LogSyslogdFilterState struct {
	// Enable/disable anomaly logging. Valid values: `enable`, `disable`.
	Anomaly pulumi.StringPtrInput
	// Enable/disable detailed DNS event logging. Valid values: `enable`, `disable`.
	Dns pulumi.StringPtrInput
	// true or false, set this parameter to true when using dynamic forEach + toset to configure and sort sub-tables, please do not set this parameter when configuring static sub-tables.
	DynamicSortSubtable pulumi.StringPtrInput
	// Free style filter string.
	Filter pulumi.StringPtrInput
	// Include/exclude logs that match the filter. Valid values: `include`, `exclude`.
	FilterType pulumi.StringPtrInput
	// Enable/disable forward traffic logging. Valid values: `enable`, `disable`.
	ForwardTraffic pulumi.StringPtrInput
	// Free Style Filters The structure of `freeStyle` block is documented below.
	FreeStyles LogSyslogdFilterFreeStyleArrayInput
	// Enable/disable GTP messages logging. Valid values: `enable`, `disable`.
	Gtp pulumi.StringPtrInput
	// Enable/disable local in or out traffic logging. Valid values: `enable`, `disable`.
	LocalTraffic pulumi.StringPtrInput
	// Enable/disable multicast traffic logging. Valid values: `enable`, `disable`.
	MulticastTraffic pulumi.StringPtrInput
	// Enable/disable netscan discovery event logging.
	NetscanDiscovery pulumi.StringPtrInput
	// Enable/disable netscan vulnerability event logging.
	NetscanVulnerability pulumi.StringPtrInput
	// Lowest severity level to log. Valid values: `emergency`, `alert`, `critical`, `error`, `warning`, `notification`, `information`, `debug`.
	Severity pulumi.StringPtrInput
	// Enable/disable sniffer traffic logging. Valid values: `enable`, `disable`.
	SnifferTraffic pulumi.StringPtrInput
	// Enable/disable SSH logging. Valid values: `enable`, `disable`.
	Ssh pulumi.StringPtrInput
	// Specifies the vdom to which the resource will be applied when the FortiGate unit is running in VDOM mode. Only one vdom can be specified. If you want to inherit the vdom configuration of the provider, please do not set this parameter.
	Vdomparam pulumi.StringPtrInput
	// Enable/disable VoIP logging. Valid values: `enable`, `disable`.
	Voip pulumi.StringPtrInput
	// Enable/disable ztna traffic logging. Valid values: `enable`, `disable`.
	ZtnaTraffic pulumi.StringPtrInput
}

func (LogSyslogdFilterState) ElementType() reflect.Type {
	return reflect.TypeOf((*logSyslogdFilterState)(nil)).Elem()
}

type logSyslogdFilterArgs struct {
	// Enable/disable anomaly logging. Valid values: `enable`, `disable`.
	Anomaly *string `pulumi:"anomaly"`
	// Enable/disable detailed DNS event logging. Valid values: `enable`, `disable`.
	Dns *string `pulumi:"dns"`
	// true or false, set this parameter to true when using dynamic forEach + toset to configure and sort sub-tables, please do not set this parameter when configuring static sub-tables.
	DynamicSortSubtable *string `pulumi:"dynamicSortSubtable"`
	// Free style filter string.
	Filter *string `pulumi:"filter"`
	// Include/exclude logs that match the filter. Valid values: `include`, `exclude`.
	FilterType *string `pulumi:"filterType"`
	// Enable/disable forward traffic logging. Valid values: `enable`, `disable`.
	ForwardTraffic *string `pulumi:"forwardTraffic"`
	// Free Style Filters The structure of `freeStyle` block is documented below.
	FreeStyles []LogSyslogdFilterFreeStyle `pulumi:"freeStyles"`
	// Enable/disable GTP messages logging. Valid values: `enable`, `disable`.
	Gtp *string `pulumi:"gtp"`
	// Enable/disable local in or out traffic logging. Valid values: `enable`, `disable`.
	LocalTraffic *string `pulumi:"localTraffic"`
	// Enable/disable multicast traffic logging. Valid values: `enable`, `disable`.
	MulticastTraffic *string `pulumi:"multicastTraffic"`
	// Enable/disable netscan discovery event logging.
	NetscanDiscovery *string `pulumi:"netscanDiscovery"`
	// Enable/disable netscan vulnerability event logging.
	NetscanVulnerability *string `pulumi:"netscanVulnerability"`
	// Lowest severity level to log. Valid values: `emergency`, `alert`, `critical`, `error`, `warning`, `notification`, `information`, `debug`.
	Severity *string `pulumi:"severity"`
	// Enable/disable sniffer traffic logging. Valid values: `enable`, `disable`.
	SnifferTraffic *string `pulumi:"snifferTraffic"`
	// Enable/disable SSH logging. Valid values: `enable`, `disable`.
	Ssh *string `pulumi:"ssh"`
	// Specifies the vdom to which the resource will be applied when the FortiGate unit is running in VDOM mode. Only one vdom can be specified. If you want to inherit the vdom configuration of the provider, please do not set this parameter.
	Vdomparam *string `pulumi:"vdomparam"`
	// Enable/disable VoIP logging. Valid values: `enable`, `disable`.
	Voip *string `pulumi:"voip"`
	// Enable/disable ztna traffic logging. Valid values: `enable`, `disable`.
	ZtnaTraffic *string `pulumi:"ztnaTraffic"`
}

// The set of arguments for constructing a LogSyslogdFilter resource.
type LogSyslogdFilterArgs struct {
	// Enable/disable anomaly logging. Valid values: `enable`, `disable`.
	Anomaly pulumi.StringPtrInput
	// Enable/disable detailed DNS event logging. Valid values: `enable`, `disable`.
	Dns pulumi.StringPtrInput
	// true or false, set this parameter to true when using dynamic forEach + toset to configure and sort sub-tables, please do not set this parameter when configuring static sub-tables.
	DynamicSortSubtable pulumi.StringPtrInput
	// Free style filter string.
	Filter pulumi.StringPtrInput
	// Include/exclude logs that match the filter. Valid values: `include`, `exclude`.
	FilterType pulumi.StringPtrInput
	// Enable/disable forward traffic logging. Valid values: `enable`, `disable`.
	ForwardTraffic pulumi.StringPtrInput
	// Free Style Filters The structure of `freeStyle` block is documented below.
	FreeStyles LogSyslogdFilterFreeStyleArrayInput
	// Enable/disable GTP messages logging. Valid values: `enable`, `disable`.
	Gtp pulumi.StringPtrInput
	// Enable/disable local in or out traffic logging. Valid values: `enable`, `disable`.
	LocalTraffic pulumi.StringPtrInput
	// Enable/disable multicast traffic logging. Valid values: `enable`, `disable`.
	MulticastTraffic pulumi.StringPtrInput
	// Enable/disable netscan discovery event logging.
	NetscanDiscovery pulumi.StringPtrInput
	// Enable/disable netscan vulnerability event logging.
	NetscanVulnerability pulumi.StringPtrInput
	// Lowest severity level to log. Valid values: `emergency`, `alert`, `critical`, `error`, `warning`, `notification`, `information`, `debug`.
	Severity pulumi.StringPtrInput
	// Enable/disable sniffer traffic logging. Valid values: `enable`, `disable`.
	SnifferTraffic pulumi.StringPtrInput
	// Enable/disable SSH logging. Valid values: `enable`, `disable`.
	Ssh pulumi.StringPtrInput
	// Specifies the vdom to which the resource will be applied when the FortiGate unit is running in VDOM mode. Only one vdom can be specified. If you want to inherit the vdom configuration of the provider, please do not set this parameter.
	Vdomparam pulumi.StringPtrInput
	// Enable/disable VoIP logging. Valid values: `enable`, `disable`.
	Voip pulumi.StringPtrInput
	// Enable/disable ztna traffic logging. Valid values: `enable`, `disable`.
	ZtnaTraffic pulumi.StringPtrInput
}

func (LogSyslogdFilterArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*logSyslogdFilterArgs)(nil)).Elem()
}

type LogSyslogdFilterInput interface {
	pulumi.Input

	ToLogSyslogdFilterOutput() LogSyslogdFilterOutput
	ToLogSyslogdFilterOutputWithContext(ctx context.Context) LogSyslogdFilterOutput
}

func (*LogSyslogdFilter) ElementType() reflect.Type {
	return reflect.TypeOf((**LogSyslogdFilter)(nil)).Elem()
}

func (i *LogSyslogdFilter) ToLogSyslogdFilterOutput() LogSyslogdFilterOutput {
	return i.ToLogSyslogdFilterOutputWithContext(context.Background())
}

func (i *LogSyslogdFilter) ToLogSyslogdFilterOutputWithContext(ctx context.Context) LogSyslogdFilterOutput {
	return pulumi.ToOutputWithContext(ctx, i).(LogSyslogdFilterOutput)
}

// LogSyslogdFilterArrayInput is an input type that accepts LogSyslogdFilterArray and LogSyslogdFilterArrayOutput values.
// You can construct a concrete instance of `LogSyslogdFilterArrayInput` via:
//
//          LogSyslogdFilterArray{ LogSyslogdFilterArgs{...} }
type LogSyslogdFilterArrayInput interface {
	pulumi.Input

	ToLogSyslogdFilterArrayOutput() LogSyslogdFilterArrayOutput
	ToLogSyslogdFilterArrayOutputWithContext(context.Context) LogSyslogdFilterArrayOutput
}

type LogSyslogdFilterArray []LogSyslogdFilterInput

func (LogSyslogdFilterArray) ElementType() reflect.Type {
	return reflect.TypeOf((*[]*LogSyslogdFilter)(nil)).Elem()
}

func (i LogSyslogdFilterArray) ToLogSyslogdFilterArrayOutput() LogSyslogdFilterArrayOutput {
	return i.ToLogSyslogdFilterArrayOutputWithContext(context.Background())
}

func (i LogSyslogdFilterArray) ToLogSyslogdFilterArrayOutputWithContext(ctx context.Context) LogSyslogdFilterArrayOutput {
	return pulumi.ToOutputWithContext(ctx, i).(LogSyslogdFilterArrayOutput)
}

// LogSyslogdFilterMapInput is an input type that accepts LogSyslogdFilterMap and LogSyslogdFilterMapOutput values.
// You can construct a concrete instance of `LogSyslogdFilterMapInput` via:
//
//          LogSyslogdFilterMap{ "key": LogSyslogdFilterArgs{...} }
type LogSyslogdFilterMapInput interface {
	pulumi.Input

	ToLogSyslogdFilterMapOutput() LogSyslogdFilterMapOutput
	ToLogSyslogdFilterMapOutputWithContext(context.Context) LogSyslogdFilterMapOutput
}

type LogSyslogdFilterMap map[string]LogSyslogdFilterInput

func (LogSyslogdFilterMap) ElementType() reflect.Type {
	return reflect.TypeOf((*map[string]*LogSyslogdFilter)(nil)).Elem()
}

func (i LogSyslogdFilterMap) ToLogSyslogdFilterMapOutput() LogSyslogdFilterMapOutput {
	return i.ToLogSyslogdFilterMapOutputWithContext(context.Background())
}

func (i LogSyslogdFilterMap) ToLogSyslogdFilterMapOutputWithContext(ctx context.Context) LogSyslogdFilterMapOutput {
	return pulumi.ToOutputWithContext(ctx, i).(LogSyslogdFilterMapOutput)
}

type LogSyslogdFilterOutput struct{ *pulumi.OutputState }

func (LogSyslogdFilterOutput) ElementType() reflect.Type {
	return reflect.TypeOf((**LogSyslogdFilter)(nil)).Elem()
}

func (o LogSyslogdFilterOutput) ToLogSyslogdFilterOutput() LogSyslogdFilterOutput {
	return o
}

func (o LogSyslogdFilterOutput) ToLogSyslogdFilterOutputWithContext(ctx context.Context) LogSyslogdFilterOutput {
	return o
}

type LogSyslogdFilterArrayOutput struct{ *pulumi.OutputState }

func (LogSyslogdFilterArrayOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*[]*LogSyslogdFilter)(nil)).Elem()
}

func (o LogSyslogdFilterArrayOutput) ToLogSyslogdFilterArrayOutput() LogSyslogdFilterArrayOutput {
	return o
}

func (o LogSyslogdFilterArrayOutput) ToLogSyslogdFilterArrayOutputWithContext(ctx context.Context) LogSyslogdFilterArrayOutput {
	return o
}

func (o LogSyslogdFilterArrayOutput) Index(i pulumi.IntInput) LogSyslogdFilterOutput {
	return pulumi.All(o, i).ApplyT(func(vs []interface{}) *LogSyslogdFilter {
		return vs[0].([]*LogSyslogdFilter)[vs[1].(int)]
	}).(LogSyslogdFilterOutput)
}

type LogSyslogdFilterMapOutput struct{ *pulumi.OutputState }

func (LogSyslogdFilterMapOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*map[string]*LogSyslogdFilter)(nil)).Elem()
}

func (o LogSyslogdFilterMapOutput) ToLogSyslogdFilterMapOutput() LogSyslogdFilterMapOutput {
	return o
}

func (o LogSyslogdFilterMapOutput) ToLogSyslogdFilterMapOutputWithContext(ctx context.Context) LogSyslogdFilterMapOutput {
	return o
}

func (o LogSyslogdFilterMapOutput) MapIndex(k pulumi.StringInput) LogSyslogdFilterOutput {
	return pulumi.All(o, k).ApplyT(func(vs []interface{}) *LogSyslogdFilter {
		return vs[0].(map[string]*LogSyslogdFilter)[vs[1].(string)]
	}).(LogSyslogdFilterOutput)
}

func init() {
	pulumi.RegisterInputType(reflect.TypeOf((*LogSyslogdFilterInput)(nil)).Elem(), &LogSyslogdFilter{})
	pulumi.RegisterInputType(reflect.TypeOf((*LogSyslogdFilterArrayInput)(nil)).Elem(), LogSyslogdFilterArray{})
	pulumi.RegisterInputType(reflect.TypeOf((*LogSyslogdFilterMapInput)(nil)).Elem(), LogSyslogdFilterMap{})
	pulumi.RegisterOutputType(LogSyslogdFilterOutput{})
	pulumi.RegisterOutputType(LogSyslogdFilterArrayOutput{})
	pulumi.RegisterOutputType(LogSyslogdFilterMapOutput{})
}
