// Code generated by the Pulumi Terraform Bridge (tfgen) Tool DO NOT EDIT.
// *** WARNING: Do not edit by hand unless you're certain you know what you are doing! ***

package fortios

import (
	"context"
	"reflect"

	"github.com/lubyou/pulumi-fortios/sdk/go/fortios/internal"
	"github.com/pulumi/pulumi/sdk/v3/go/pulumi"
)

type CredentialStoreDomainController struct {
	pulumi.CustomResourceState

	DomainName pulumi.StringOutput    `pulumi:"domainName"`
	Hostname   pulumi.StringOutput    `pulumi:"hostname"`
	Ip         pulumi.StringOutput    `pulumi:"ip"`
	Ip6        pulumi.StringOutput    `pulumi:"ip6"`
	Password   pulumi.StringPtrOutput `pulumi:"password"`
	Port       pulumi.IntOutput       `pulumi:"port"`
	ServerName pulumi.StringOutput    `pulumi:"serverName"`
	Username   pulumi.StringOutput    `pulumi:"username"`
	Vdomparam  pulumi.StringPtrOutput `pulumi:"vdomparam"`
}

// NewCredentialStoreDomainController registers a new resource with the given unique name, arguments, and options.
func NewCredentialStoreDomainController(ctx *pulumi.Context,
	name string, args *CredentialStoreDomainControllerArgs, opts ...pulumi.ResourceOption) (*CredentialStoreDomainController, error) {
	if args == nil {
		args = &CredentialStoreDomainControllerArgs{}
	}

	if args.Password != nil {
		args.Password = pulumi.ToSecret(args.Password).(pulumi.StringPtrInput)
	}
	secrets := pulumi.AdditionalSecretOutputs([]string{
		"password",
	})
	opts = append(opts, secrets)
	opts = internal.PkgResourceDefaultOpts(opts)
	var resource CredentialStoreDomainController
	err := ctx.RegisterResource("fortios:index/credentialStoreDomainController:CredentialStoreDomainController", name, args, &resource, opts...)
	if err != nil {
		return nil, err
	}
	return &resource, nil
}

// GetCredentialStoreDomainController gets an existing CredentialStoreDomainController resource's state with the given name, ID, and optional
// state properties that are used to uniquely qualify the lookup (nil if not required).
func GetCredentialStoreDomainController(ctx *pulumi.Context,
	name string, id pulumi.IDInput, state *CredentialStoreDomainControllerState, opts ...pulumi.ResourceOption) (*CredentialStoreDomainController, error) {
	var resource CredentialStoreDomainController
	err := ctx.ReadResource("fortios:index/credentialStoreDomainController:CredentialStoreDomainController", name, id, state, &resource, opts...)
	if err != nil {
		return nil, err
	}
	return &resource, nil
}

// Input properties used for looking up and filtering CredentialStoreDomainController resources.
type credentialStoreDomainControllerState struct {
	DomainName *string `pulumi:"domainName"`
	Hostname   *string `pulumi:"hostname"`
	Ip         *string `pulumi:"ip"`
	Ip6        *string `pulumi:"ip6"`
	Password   *string `pulumi:"password"`
	Port       *int    `pulumi:"port"`
	ServerName *string `pulumi:"serverName"`
	Username   *string `pulumi:"username"`
	Vdomparam  *string `pulumi:"vdomparam"`
}

type CredentialStoreDomainControllerState struct {
	DomainName pulumi.StringPtrInput
	Hostname   pulumi.StringPtrInput
	Ip         pulumi.StringPtrInput
	Ip6        pulumi.StringPtrInput
	Password   pulumi.StringPtrInput
	Port       pulumi.IntPtrInput
	ServerName pulumi.StringPtrInput
	Username   pulumi.StringPtrInput
	Vdomparam  pulumi.StringPtrInput
}

func (CredentialStoreDomainControllerState) ElementType() reflect.Type {
	return reflect.TypeOf((*credentialStoreDomainControllerState)(nil)).Elem()
}

type credentialStoreDomainControllerArgs struct {
	DomainName *string `pulumi:"domainName"`
	Hostname   *string `pulumi:"hostname"`
	Ip         *string `pulumi:"ip"`
	Ip6        *string `pulumi:"ip6"`
	Password   *string `pulumi:"password"`
	Port       *int    `pulumi:"port"`
	ServerName *string `pulumi:"serverName"`
	Username   *string `pulumi:"username"`
	Vdomparam  *string `pulumi:"vdomparam"`
}

// The set of arguments for constructing a CredentialStoreDomainController resource.
type CredentialStoreDomainControllerArgs struct {
	DomainName pulumi.StringPtrInput
	Hostname   pulumi.StringPtrInput
	Ip         pulumi.StringPtrInput
	Ip6        pulumi.StringPtrInput
	Password   pulumi.StringPtrInput
	Port       pulumi.IntPtrInput
	ServerName pulumi.StringPtrInput
	Username   pulumi.StringPtrInput
	Vdomparam  pulumi.StringPtrInput
}

func (CredentialStoreDomainControllerArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*credentialStoreDomainControllerArgs)(nil)).Elem()
}

type CredentialStoreDomainControllerInput interface {
	pulumi.Input

	ToCredentialStoreDomainControllerOutput() CredentialStoreDomainControllerOutput
	ToCredentialStoreDomainControllerOutputWithContext(ctx context.Context) CredentialStoreDomainControllerOutput
}

func (*CredentialStoreDomainController) ElementType() reflect.Type {
	return reflect.TypeOf((**CredentialStoreDomainController)(nil)).Elem()
}

func (i *CredentialStoreDomainController) ToCredentialStoreDomainControllerOutput() CredentialStoreDomainControllerOutput {
	return i.ToCredentialStoreDomainControllerOutputWithContext(context.Background())
}

func (i *CredentialStoreDomainController) ToCredentialStoreDomainControllerOutputWithContext(ctx context.Context) CredentialStoreDomainControllerOutput {
	return pulumi.ToOutputWithContext(ctx, i).(CredentialStoreDomainControllerOutput)
}

// CredentialStoreDomainControllerArrayInput is an input type that accepts CredentialStoreDomainControllerArray and CredentialStoreDomainControllerArrayOutput values.
// You can construct a concrete instance of `CredentialStoreDomainControllerArrayInput` via:
//
//	CredentialStoreDomainControllerArray{ CredentialStoreDomainControllerArgs{...} }
type CredentialStoreDomainControllerArrayInput interface {
	pulumi.Input

	ToCredentialStoreDomainControllerArrayOutput() CredentialStoreDomainControllerArrayOutput
	ToCredentialStoreDomainControllerArrayOutputWithContext(context.Context) CredentialStoreDomainControllerArrayOutput
}

type CredentialStoreDomainControllerArray []CredentialStoreDomainControllerInput

func (CredentialStoreDomainControllerArray) ElementType() reflect.Type {
	return reflect.TypeOf((*[]*CredentialStoreDomainController)(nil)).Elem()
}

func (i CredentialStoreDomainControllerArray) ToCredentialStoreDomainControllerArrayOutput() CredentialStoreDomainControllerArrayOutput {
	return i.ToCredentialStoreDomainControllerArrayOutputWithContext(context.Background())
}

func (i CredentialStoreDomainControllerArray) ToCredentialStoreDomainControllerArrayOutputWithContext(ctx context.Context) CredentialStoreDomainControllerArrayOutput {
	return pulumi.ToOutputWithContext(ctx, i).(CredentialStoreDomainControllerArrayOutput)
}

// CredentialStoreDomainControllerMapInput is an input type that accepts CredentialStoreDomainControllerMap and CredentialStoreDomainControllerMapOutput values.
// You can construct a concrete instance of `CredentialStoreDomainControllerMapInput` via:
//
//	CredentialStoreDomainControllerMap{ "key": CredentialStoreDomainControllerArgs{...} }
type CredentialStoreDomainControllerMapInput interface {
	pulumi.Input

	ToCredentialStoreDomainControllerMapOutput() CredentialStoreDomainControllerMapOutput
	ToCredentialStoreDomainControllerMapOutputWithContext(context.Context) CredentialStoreDomainControllerMapOutput
}

type CredentialStoreDomainControllerMap map[string]CredentialStoreDomainControllerInput

func (CredentialStoreDomainControllerMap) ElementType() reflect.Type {
	return reflect.TypeOf((*map[string]*CredentialStoreDomainController)(nil)).Elem()
}

func (i CredentialStoreDomainControllerMap) ToCredentialStoreDomainControllerMapOutput() CredentialStoreDomainControllerMapOutput {
	return i.ToCredentialStoreDomainControllerMapOutputWithContext(context.Background())
}

func (i CredentialStoreDomainControllerMap) ToCredentialStoreDomainControllerMapOutputWithContext(ctx context.Context) CredentialStoreDomainControllerMapOutput {
	return pulumi.ToOutputWithContext(ctx, i).(CredentialStoreDomainControllerMapOutput)
}

type CredentialStoreDomainControllerOutput struct{ *pulumi.OutputState }

func (CredentialStoreDomainControllerOutput) ElementType() reflect.Type {
	return reflect.TypeOf((**CredentialStoreDomainController)(nil)).Elem()
}

func (o CredentialStoreDomainControllerOutput) ToCredentialStoreDomainControllerOutput() CredentialStoreDomainControllerOutput {
	return o
}

func (o CredentialStoreDomainControllerOutput) ToCredentialStoreDomainControllerOutputWithContext(ctx context.Context) CredentialStoreDomainControllerOutput {
	return o
}

func (o CredentialStoreDomainControllerOutput) DomainName() pulumi.StringOutput {
	return o.ApplyT(func(v *CredentialStoreDomainController) pulumi.StringOutput { return v.DomainName }).(pulumi.StringOutput)
}

func (o CredentialStoreDomainControllerOutput) Hostname() pulumi.StringOutput {
	return o.ApplyT(func(v *CredentialStoreDomainController) pulumi.StringOutput { return v.Hostname }).(pulumi.StringOutput)
}

func (o CredentialStoreDomainControllerOutput) Ip() pulumi.StringOutput {
	return o.ApplyT(func(v *CredentialStoreDomainController) pulumi.StringOutput { return v.Ip }).(pulumi.StringOutput)
}

func (o CredentialStoreDomainControllerOutput) Ip6() pulumi.StringOutput {
	return o.ApplyT(func(v *CredentialStoreDomainController) pulumi.StringOutput { return v.Ip6 }).(pulumi.StringOutput)
}

func (o CredentialStoreDomainControllerOutput) Password() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *CredentialStoreDomainController) pulumi.StringPtrOutput { return v.Password }).(pulumi.StringPtrOutput)
}

func (o CredentialStoreDomainControllerOutput) Port() pulumi.IntOutput {
	return o.ApplyT(func(v *CredentialStoreDomainController) pulumi.IntOutput { return v.Port }).(pulumi.IntOutput)
}

func (o CredentialStoreDomainControllerOutput) ServerName() pulumi.StringOutput {
	return o.ApplyT(func(v *CredentialStoreDomainController) pulumi.StringOutput { return v.ServerName }).(pulumi.StringOutput)
}

func (o CredentialStoreDomainControllerOutput) Username() pulumi.StringOutput {
	return o.ApplyT(func(v *CredentialStoreDomainController) pulumi.StringOutput { return v.Username }).(pulumi.StringOutput)
}

func (o CredentialStoreDomainControllerOutput) Vdomparam() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *CredentialStoreDomainController) pulumi.StringPtrOutput { return v.Vdomparam }).(pulumi.StringPtrOutput)
}

type CredentialStoreDomainControllerArrayOutput struct{ *pulumi.OutputState }

func (CredentialStoreDomainControllerArrayOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*[]*CredentialStoreDomainController)(nil)).Elem()
}

func (o CredentialStoreDomainControllerArrayOutput) ToCredentialStoreDomainControllerArrayOutput() CredentialStoreDomainControllerArrayOutput {
	return o
}

func (o CredentialStoreDomainControllerArrayOutput) ToCredentialStoreDomainControllerArrayOutputWithContext(ctx context.Context) CredentialStoreDomainControllerArrayOutput {
	return o
}

func (o CredentialStoreDomainControllerArrayOutput) Index(i pulumi.IntInput) CredentialStoreDomainControllerOutput {
	return pulumi.All(o, i).ApplyT(func(vs []interface{}) *CredentialStoreDomainController {
		return vs[0].([]*CredentialStoreDomainController)[vs[1].(int)]
	}).(CredentialStoreDomainControllerOutput)
}

type CredentialStoreDomainControllerMapOutput struct{ *pulumi.OutputState }

func (CredentialStoreDomainControllerMapOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*map[string]*CredentialStoreDomainController)(nil)).Elem()
}

func (o CredentialStoreDomainControllerMapOutput) ToCredentialStoreDomainControllerMapOutput() CredentialStoreDomainControllerMapOutput {
	return o
}

func (o CredentialStoreDomainControllerMapOutput) ToCredentialStoreDomainControllerMapOutputWithContext(ctx context.Context) CredentialStoreDomainControllerMapOutput {
	return o
}

func (o CredentialStoreDomainControllerMapOutput) MapIndex(k pulumi.StringInput) CredentialStoreDomainControllerOutput {
	return pulumi.All(o, k).ApplyT(func(vs []interface{}) *CredentialStoreDomainController {
		return vs[0].(map[string]*CredentialStoreDomainController)[vs[1].(string)]
	}).(CredentialStoreDomainControllerOutput)
}

func init() {
	pulumi.RegisterInputType(reflect.TypeOf((*CredentialStoreDomainControllerInput)(nil)).Elem(), &CredentialStoreDomainController{})
	pulumi.RegisterInputType(reflect.TypeOf((*CredentialStoreDomainControllerArrayInput)(nil)).Elem(), CredentialStoreDomainControllerArray{})
	pulumi.RegisterInputType(reflect.TypeOf((*CredentialStoreDomainControllerMapInput)(nil)).Elem(), CredentialStoreDomainControllerMap{})
	pulumi.RegisterOutputType(CredentialStoreDomainControllerOutput{})
	pulumi.RegisterOutputType(CredentialStoreDomainControllerArrayOutput{})
	pulumi.RegisterOutputType(CredentialStoreDomainControllerMapOutput{})
}
