// Code generated by the Pulumi Terraform Bridge (tfgen) Tool DO NOT EDIT.
// *** WARNING: Do not edit by hand unless you're certain you know what you are doing! ***

package fortios

import (
	"context"
	"reflect"

	"errors"
	"github.com/pulumi/pulumi/sdk/v3/go/pulumi"
)

type UserFssoPolling struct {
	pulumi.CustomResourceState

	Adgrps              UserFssoPollingAdgrpArrayOutput `pulumi:"adgrps"`
	DefaultDomain       pulumi.StringOutput             `pulumi:"defaultDomain"`
	DynamicSortSubtable pulumi.StringPtrOutput          `pulumi:"dynamicSortSubtable"`
	Fosid               pulumi.IntOutput                `pulumi:"fosid"`
	LdapServer          pulumi.StringOutput             `pulumi:"ldapServer"`
	LogonHistory        pulumi.IntOutput                `pulumi:"logonHistory"`
	Password            pulumi.StringPtrOutput          `pulumi:"password"`
	PollingFrequency    pulumi.IntOutput                `pulumi:"pollingFrequency"`
	Port                pulumi.IntOutput                `pulumi:"port"`
	Server              pulumi.StringOutput             `pulumi:"server"`
	SmbNtlmv1Auth       pulumi.StringOutput             `pulumi:"smbNtlmv1Auth"`
	Smbv1               pulumi.StringOutput             `pulumi:"smbv1"`
	Status              pulumi.StringOutput             `pulumi:"status"`
	User                pulumi.StringOutput             `pulumi:"user"`
	Vdomparam           pulumi.StringPtrOutput          `pulumi:"vdomparam"`
}

// NewUserFssoPolling registers a new resource with the given unique name, arguments, and options.
func NewUserFssoPolling(ctx *pulumi.Context,
	name string, args *UserFssoPollingArgs, opts ...pulumi.ResourceOption) (*UserFssoPolling, error) {
	if args == nil {
		return nil, errors.New("missing one or more required arguments")
	}

	if args.LdapServer == nil {
		return nil, errors.New("invalid value for required argument 'LdapServer'")
	}
	if args.Server == nil {
		return nil, errors.New("invalid value for required argument 'Server'")
	}
	if args.User == nil {
		return nil, errors.New("invalid value for required argument 'User'")
	}
	if args.Password != nil {
		args.Password = pulumi.ToSecret(args.Password).(pulumi.StringPtrInput)
	}
	secrets := pulumi.AdditionalSecretOutputs([]string{
		"password",
	})
	opts = append(opts, secrets)
	opts = pkgResourceDefaultOpts(opts)
	var resource UserFssoPolling
	err := ctx.RegisterResource("fortios:index/userFssoPolling:UserFssoPolling", name, args, &resource, opts...)
	if err != nil {
		return nil, err
	}
	return &resource, nil
}

// GetUserFssoPolling gets an existing UserFssoPolling resource's state with the given name, ID, and optional
// state properties that are used to uniquely qualify the lookup (nil if not required).
func GetUserFssoPolling(ctx *pulumi.Context,
	name string, id pulumi.IDInput, state *UserFssoPollingState, opts ...pulumi.ResourceOption) (*UserFssoPolling, error) {
	var resource UserFssoPolling
	err := ctx.ReadResource("fortios:index/userFssoPolling:UserFssoPolling", name, id, state, &resource, opts...)
	if err != nil {
		return nil, err
	}
	return &resource, nil
}

// Input properties used for looking up and filtering UserFssoPolling resources.
type userFssoPollingState struct {
	Adgrps              []UserFssoPollingAdgrp `pulumi:"adgrps"`
	DefaultDomain       *string                `pulumi:"defaultDomain"`
	DynamicSortSubtable *string                `pulumi:"dynamicSortSubtable"`
	Fosid               *int                   `pulumi:"fosid"`
	LdapServer          *string                `pulumi:"ldapServer"`
	LogonHistory        *int                   `pulumi:"logonHistory"`
	Password            *string                `pulumi:"password"`
	PollingFrequency    *int                   `pulumi:"pollingFrequency"`
	Port                *int                   `pulumi:"port"`
	Server              *string                `pulumi:"server"`
	SmbNtlmv1Auth       *string                `pulumi:"smbNtlmv1Auth"`
	Smbv1               *string                `pulumi:"smbv1"`
	Status              *string                `pulumi:"status"`
	User                *string                `pulumi:"user"`
	Vdomparam           *string                `pulumi:"vdomparam"`
}

type UserFssoPollingState struct {
	Adgrps              UserFssoPollingAdgrpArrayInput
	DefaultDomain       pulumi.StringPtrInput
	DynamicSortSubtable pulumi.StringPtrInput
	Fosid               pulumi.IntPtrInput
	LdapServer          pulumi.StringPtrInput
	LogonHistory        pulumi.IntPtrInput
	Password            pulumi.StringPtrInput
	PollingFrequency    pulumi.IntPtrInput
	Port                pulumi.IntPtrInput
	Server              pulumi.StringPtrInput
	SmbNtlmv1Auth       pulumi.StringPtrInput
	Smbv1               pulumi.StringPtrInput
	Status              pulumi.StringPtrInput
	User                pulumi.StringPtrInput
	Vdomparam           pulumi.StringPtrInput
}

func (UserFssoPollingState) ElementType() reflect.Type {
	return reflect.TypeOf((*userFssoPollingState)(nil)).Elem()
}

type userFssoPollingArgs struct {
	Adgrps              []UserFssoPollingAdgrp `pulumi:"adgrps"`
	DefaultDomain       *string                `pulumi:"defaultDomain"`
	DynamicSortSubtable *string                `pulumi:"dynamicSortSubtable"`
	Fosid               *int                   `pulumi:"fosid"`
	LdapServer          string                 `pulumi:"ldapServer"`
	LogonHistory        *int                   `pulumi:"logonHistory"`
	Password            *string                `pulumi:"password"`
	PollingFrequency    *int                   `pulumi:"pollingFrequency"`
	Port                *int                   `pulumi:"port"`
	Server              string                 `pulumi:"server"`
	SmbNtlmv1Auth       *string                `pulumi:"smbNtlmv1Auth"`
	Smbv1               *string                `pulumi:"smbv1"`
	Status              *string                `pulumi:"status"`
	User                string                 `pulumi:"user"`
	Vdomparam           *string                `pulumi:"vdomparam"`
}

// The set of arguments for constructing a UserFssoPolling resource.
type UserFssoPollingArgs struct {
	Adgrps              UserFssoPollingAdgrpArrayInput
	DefaultDomain       pulumi.StringPtrInput
	DynamicSortSubtable pulumi.StringPtrInput
	Fosid               pulumi.IntPtrInput
	LdapServer          pulumi.StringInput
	LogonHistory        pulumi.IntPtrInput
	Password            pulumi.StringPtrInput
	PollingFrequency    pulumi.IntPtrInput
	Port                pulumi.IntPtrInput
	Server              pulumi.StringInput
	SmbNtlmv1Auth       pulumi.StringPtrInput
	Smbv1               pulumi.StringPtrInput
	Status              pulumi.StringPtrInput
	User                pulumi.StringInput
	Vdomparam           pulumi.StringPtrInput
}

func (UserFssoPollingArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*userFssoPollingArgs)(nil)).Elem()
}

type UserFssoPollingInput interface {
	pulumi.Input

	ToUserFssoPollingOutput() UserFssoPollingOutput
	ToUserFssoPollingOutputWithContext(ctx context.Context) UserFssoPollingOutput
}

func (*UserFssoPolling) ElementType() reflect.Type {
	return reflect.TypeOf((**UserFssoPolling)(nil)).Elem()
}

func (i *UserFssoPolling) ToUserFssoPollingOutput() UserFssoPollingOutput {
	return i.ToUserFssoPollingOutputWithContext(context.Background())
}

func (i *UserFssoPolling) ToUserFssoPollingOutputWithContext(ctx context.Context) UserFssoPollingOutput {
	return pulumi.ToOutputWithContext(ctx, i).(UserFssoPollingOutput)
}

// UserFssoPollingArrayInput is an input type that accepts UserFssoPollingArray and UserFssoPollingArrayOutput values.
// You can construct a concrete instance of `UserFssoPollingArrayInput` via:
//
//	UserFssoPollingArray{ UserFssoPollingArgs{...} }
type UserFssoPollingArrayInput interface {
	pulumi.Input

	ToUserFssoPollingArrayOutput() UserFssoPollingArrayOutput
	ToUserFssoPollingArrayOutputWithContext(context.Context) UserFssoPollingArrayOutput
}

type UserFssoPollingArray []UserFssoPollingInput

func (UserFssoPollingArray) ElementType() reflect.Type {
	return reflect.TypeOf((*[]*UserFssoPolling)(nil)).Elem()
}

func (i UserFssoPollingArray) ToUserFssoPollingArrayOutput() UserFssoPollingArrayOutput {
	return i.ToUserFssoPollingArrayOutputWithContext(context.Background())
}

func (i UserFssoPollingArray) ToUserFssoPollingArrayOutputWithContext(ctx context.Context) UserFssoPollingArrayOutput {
	return pulumi.ToOutputWithContext(ctx, i).(UserFssoPollingArrayOutput)
}

// UserFssoPollingMapInput is an input type that accepts UserFssoPollingMap and UserFssoPollingMapOutput values.
// You can construct a concrete instance of `UserFssoPollingMapInput` via:
//
//	UserFssoPollingMap{ "key": UserFssoPollingArgs{...} }
type UserFssoPollingMapInput interface {
	pulumi.Input

	ToUserFssoPollingMapOutput() UserFssoPollingMapOutput
	ToUserFssoPollingMapOutputWithContext(context.Context) UserFssoPollingMapOutput
}

type UserFssoPollingMap map[string]UserFssoPollingInput

func (UserFssoPollingMap) ElementType() reflect.Type {
	return reflect.TypeOf((*map[string]*UserFssoPolling)(nil)).Elem()
}

func (i UserFssoPollingMap) ToUserFssoPollingMapOutput() UserFssoPollingMapOutput {
	return i.ToUserFssoPollingMapOutputWithContext(context.Background())
}

func (i UserFssoPollingMap) ToUserFssoPollingMapOutputWithContext(ctx context.Context) UserFssoPollingMapOutput {
	return pulumi.ToOutputWithContext(ctx, i).(UserFssoPollingMapOutput)
}

type UserFssoPollingOutput struct{ *pulumi.OutputState }

func (UserFssoPollingOutput) ElementType() reflect.Type {
	return reflect.TypeOf((**UserFssoPolling)(nil)).Elem()
}

func (o UserFssoPollingOutput) ToUserFssoPollingOutput() UserFssoPollingOutput {
	return o
}

func (o UserFssoPollingOutput) ToUserFssoPollingOutputWithContext(ctx context.Context) UserFssoPollingOutput {
	return o
}

func (o UserFssoPollingOutput) Adgrps() UserFssoPollingAdgrpArrayOutput {
	return o.ApplyT(func(v *UserFssoPolling) UserFssoPollingAdgrpArrayOutput { return v.Adgrps }).(UserFssoPollingAdgrpArrayOutput)
}

func (o UserFssoPollingOutput) DefaultDomain() pulumi.StringOutput {
	return o.ApplyT(func(v *UserFssoPolling) pulumi.StringOutput { return v.DefaultDomain }).(pulumi.StringOutput)
}

func (o UserFssoPollingOutput) DynamicSortSubtable() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *UserFssoPolling) pulumi.StringPtrOutput { return v.DynamicSortSubtable }).(pulumi.StringPtrOutput)
}

func (o UserFssoPollingOutput) Fosid() pulumi.IntOutput {
	return o.ApplyT(func(v *UserFssoPolling) pulumi.IntOutput { return v.Fosid }).(pulumi.IntOutput)
}

func (o UserFssoPollingOutput) LdapServer() pulumi.StringOutput {
	return o.ApplyT(func(v *UserFssoPolling) pulumi.StringOutput { return v.LdapServer }).(pulumi.StringOutput)
}

func (o UserFssoPollingOutput) LogonHistory() pulumi.IntOutput {
	return o.ApplyT(func(v *UserFssoPolling) pulumi.IntOutput { return v.LogonHistory }).(pulumi.IntOutput)
}

func (o UserFssoPollingOutput) Password() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *UserFssoPolling) pulumi.StringPtrOutput { return v.Password }).(pulumi.StringPtrOutput)
}

func (o UserFssoPollingOutput) PollingFrequency() pulumi.IntOutput {
	return o.ApplyT(func(v *UserFssoPolling) pulumi.IntOutput { return v.PollingFrequency }).(pulumi.IntOutput)
}

func (o UserFssoPollingOutput) Port() pulumi.IntOutput {
	return o.ApplyT(func(v *UserFssoPolling) pulumi.IntOutput { return v.Port }).(pulumi.IntOutput)
}

func (o UserFssoPollingOutput) Server() pulumi.StringOutput {
	return o.ApplyT(func(v *UserFssoPolling) pulumi.StringOutput { return v.Server }).(pulumi.StringOutput)
}

func (o UserFssoPollingOutput) SmbNtlmv1Auth() pulumi.StringOutput {
	return o.ApplyT(func(v *UserFssoPolling) pulumi.StringOutput { return v.SmbNtlmv1Auth }).(pulumi.StringOutput)
}

func (o UserFssoPollingOutput) Smbv1() pulumi.StringOutput {
	return o.ApplyT(func(v *UserFssoPolling) pulumi.StringOutput { return v.Smbv1 }).(pulumi.StringOutput)
}

func (o UserFssoPollingOutput) Status() pulumi.StringOutput {
	return o.ApplyT(func(v *UserFssoPolling) pulumi.StringOutput { return v.Status }).(pulumi.StringOutput)
}

func (o UserFssoPollingOutput) User() pulumi.StringOutput {
	return o.ApplyT(func(v *UserFssoPolling) pulumi.StringOutput { return v.User }).(pulumi.StringOutput)
}

func (o UserFssoPollingOutput) Vdomparam() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *UserFssoPolling) pulumi.StringPtrOutput { return v.Vdomparam }).(pulumi.StringPtrOutput)
}

type UserFssoPollingArrayOutput struct{ *pulumi.OutputState }

func (UserFssoPollingArrayOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*[]*UserFssoPolling)(nil)).Elem()
}

func (o UserFssoPollingArrayOutput) ToUserFssoPollingArrayOutput() UserFssoPollingArrayOutput {
	return o
}

func (o UserFssoPollingArrayOutput) ToUserFssoPollingArrayOutputWithContext(ctx context.Context) UserFssoPollingArrayOutput {
	return o
}

func (o UserFssoPollingArrayOutput) Index(i pulumi.IntInput) UserFssoPollingOutput {
	return pulumi.All(o, i).ApplyT(func(vs []interface{}) *UserFssoPolling {
		return vs[0].([]*UserFssoPolling)[vs[1].(int)]
	}).(UserFssoPollingOutput)
}

type UserFssoPollingMapOutput struct{ *pulumi.OutputState }

func (UserFssoPollingMapOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*map[string]*UserFssoPolling)(nil)).Elem()
}

func (o UserFssoPollingMapOutput) ToUserFssoPollingMapOutput() UserFssoPollingMapOutput {
	return o
}

func (o UserFssoPollingMapOutput) ToUserFssoPollingMapOutputWithContext(ctx context.Context) UserFssoPollingMapOutput {
	return o
}

func (o UserFssoPollingMapOutput) MapIndex(k pulumi.StringInput) UserFssoPollingOutput {
	return pulumi.All(o, k).ApplyT(func(vs []interface{}) *UserFssoPolling {
		return vs[0].(map[string]*UserFssoPolling)[vs[1].(string)]
	}).(UserFssoPollingOutput)
}

func init() {
	pulumi.RegisterInputType(reflect.TypeOf((*UserFssoPollingInput)(nil)).Elem(), &UserFssoPolling{})
	pulumi.RegisterInputType(reflect.TypeOf((*UserFssoPollingArrayInput)(nil)).Elem(), UserFssoPollingArray{})
	pulumi.RegisterInputType(reflect.TypeOf((*UserFssoPollingMapInput)(nil)).Elem(), UserFssoPollingMap{})
	pulumi.RegisterOutputType(UserFssoPollingOutput{})
	pulumi.RegisterOutputType(UserFssoPollingArrayOutput{})
	pulumi.RegisterOutputType(UserFssoPollingMapOutput{})
}
