// Code generated by the Pulumi Terraform Bridge (tfgen) Tool DO NOT EDIT.
// *** WARNING: Do not edit by hand unless you're certain you know what you are doing! ***

package fortios

import (
	"context"
	"reflect"

	"errors"
	"github.com/lubyou/pulumi-fortios/sdk/go/fortios/internal"
	"github.com/pulumi/pulumi/sdk/v3/go/pulumi"
)

type SystemLicenseVDOM struct {
	pulumi.CustomResourceState

	License pulumi.StringOutput `pulumi:"license"`
}

// NewSystemLicenseVDOM registers a new resource with the given unique name, arguments, and options.
func NewSystemLicenseVDOM(ctx *pulumi.Context,
	name string, args *SystemLicenseVDOMArgs, opts ...pulumi.ResourceOption) (*SystemLicenseVDOM, error) {
	if args == nil {
		return nil, errors.New("missing one or more required arguments")
	}

	if args.License == nil {
		return nil, errors.New("invalid value for required argument 'License'")
	}
	opts = internal.PkgResourceDefaultOpts(opts)
	var resource SystemLicenseVDOM
	err := ctx.RegisterResource("fortios:index/systemLicenseVDOM:SystemLicenseVDOM", name, args, &resource, opts...)
	if err != nil {
		return nil, err
	}
	return &resource, nil
}

// GetSystemLicenseVDOM gets an existing SystemLicenseVDOM resource's state with the given name, ID, and optional
// state properties that are used to uniquely qualify the lookup (nil if not required).
func GetSystemLicenseVDOM(ctx *pulumi.Context,
	name string, id pulumi.IDInput, state *SystemLicenseVDOMState, opts ...pulumi.ResourceOption) (*SystemLicenseVDOM, error) {
	var resource SystemLicenseVDOM
	err := ctx.ReadResource("fortios:index/systemLicenseVDOM:SystemLicenseVDOM", name, id, state, &resource, opts...)
	if err != nil {
		return nil, err
	}
	return &resource, nil
}

// Input properties used for looking up and filtering SystemLicenseVDOM resources.
type systemLicenseVDOMState struct {
	License *string `pulumi:"license"`
}

type SystemLicenseVDOMState struct {
	License pulumi.StringPtrInput
}

func (SystemLicenseVDOMState) ElementType() reflect.Type {
	return reflect.TypeOf((*systemLicenseVDOMState)(nil)).Elem()
}

type systemLicenseVDOMArgs struct {
	License string `pulumi:"license"`
}

// The set of arguments for constructing a SystemLicenseVDOM resource.
type SystemLicenseVDOMArgs struct {
	License pulumi.StringInput
}

func (SystemLicenseVDOMArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*systemLicenseVDOMArgs)(nil)).Elem()
}

type SystemLicenseVDOMInput interface {
	pulumi.Input

	ToSystemLicenseVDOMOutput() SystemLicenseVDOMOutput
	ToSystemLicenseVDOMOutputWithContext(ctx context.Context) SystemLicenseVDOMOutput
}

func (*SystemLicenseVDOM) ElementType() reflect.Type {
	return reflect.TypeOf((**SystemLicenseVDOM)(nil)).Elem()
}

func (i *SystemLicenseVDOM) ToSystemLicenseVDOMOutput() SystemLicenseVDOMOutput {
	return i.ToSystemLicenseVDOMOutputWithContext(context.Background())
}

func (i *SystemLicenseVDOM) ToSystemLicenseVDOMOutputWithContext(ctx context.Context) SystemLicenseVDOMOutput {
	return pulumi.ToOutputWithContext(ctx, i).(SystemLicenseVDOMOutput)
}

// SystemLicenseVDOMArrayInput is an input type that accepts SystemLicenseVDOMArray and SystemLicenseVDOMArrayOutput values.
// You can construct a concrete instance of `SystemLicenseVDOMArrayInput` via:
//
//	SystemLicenseVDOMArray{ SystemLicenseVDOMArgs{...} }
type SystemLicenseVDOMArrayInput interface {
	pulumi.Input

	ToSystemLicenseVDOMArrayOutput() SystemLicenseVDOMArrayOutput
	ToSystemLicenseVDOMArrayOutputWithContext(context.Context) SystemLicenseVDOMArrayOutput
}

type SystemLicenseVDOMArray []SystemLicenseVDOMInput

func (SystemLicenseVDOMArray) ElementType() reflect.Type {
	return reflect.TypeOf((*[]*SystemLicenseVDOM)(nil)).Elem()
}

func (i SystemLicenseVDOMArray) ToSystemLicenseVDOMArrayOutput() SystemLicenseVDOMArrayOutput {
	return i.ToSystemLicenseVDOMArrayOutputWithContext(context.Background())
}

func (i SystemLicenseVDOMArray) ToSystemLicenseVDOMArrayOutputWithContext(ctx context.Context) SystemLicenseVDOMArrayOutput {
	return pulumi.ToOutputWithContext(ctx, i).(SystemLicenseVDOMArrayOutput)
}

// SystemLicenseVDOMMapInput is an input type that accepts SystemLicenseVDOMMap and SystemLicenseVDOMMapOutput values.
// You can construct a concrete instance of `SystemLicenseVDOMMapInput` via:
//
//	SystemLicenseVDOMMap{ "key": SystemLicenseVDOMArgs{...} }
type SystemLicenseVDOMMapInput interface {
	pulumi.Input

	ToSystemLicenseVDOMMapOutput() SystemLicenseVDOMMapOutput
	ToSystemLicenseVDOMMapOutputWithContext(context.Context) SystemLicenseVDOMMapOutput
}

type SystemLicenseVDOMMap map[string]SystemLicenseVDOMInput

func (SystemLicenseVDOMMap) ElementType() reflect.Type {
	return reflect.TypeOf((*map[string]*SystemLicenseVDOM)(nil)).Elem()
}

func (i SystemLicenseVDOMMap) ToSystemLicenseVDOMMapOutput() SystemLicenseVDOMMapOutput {
	return i.ToSystemLicenseVDOMMapOutputWithContext(context.Background())
}

func (i SystemLicenseVDOMMap) ToSystemLicenseVDOMMapOutputWithContext(ctx context.Context) SystemLicenseVDOMMapOutput {
	return pulumi.ToOutputWithContext(ctx, i).(SystemLicenseVDOMMapOutput)
}

type SystemLicenseVDOMOutput struct{ *pulumi.OutputState }

func (SystemLicenseVDOMOutput) ElementType() reflect.Type {
	return reflect.TypeOf((**SystemLicenseVDOM)(nil)).Elem()
}

func (o SystemLicenseVDOMOutput) ToSystemLicenseVDOMOutput() SystemLicenseVDOMOutput {
	return o
}

func (o SystemLicenseVDOMOutput) ToSystemLicenseVDOMOutputWithContext(ctx context.Context) SystemLicenseVDOMOutput {
	return o
}

func (o SystemLicenseVDOMOutput) License() pulumi.StringOutput {
	return o.ApplyT(func(v *SystemLicenseVDOM) pulumi.StringOutput { return v.License }).(pulumi.StringOutput)
}

type SystemLicenseVDOMArrayOutput struct{ *pulumi.OutputState }

func (SystemLicenseVDOMArrayOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*[]*SystemLicenseVDOM)(nil)).Elem()
}

func (o SystemLicenseVDOMArrayOutput) ToSystemLicenseVDOMArrayOutput() SystemLicenseVDOMArrayOutput {
	return o
}

func (o SystemLicenseVDOMArrayOutput) ToSystemLicenseVDOMArrayOutputWithContext(ctx context.Context) SystemLicenseVDOMArrayOutput {
	return o
}

func (o SystemLicenseVDOMArrayOutput) Index(i pulumi.IntInput) SystemLicenseVDOMOutput {
	return pulumi.All(o, i).ApplyT(func(vs []interface{}) *SystemLicenseVDOM {
		return vs[0].([]*SystemLicenseVDOM)[vs[1].(int)]
	}).(SystemLicenseVDOMOutput)
}

type SystemLicenseVDOMMapOutput struct{ *pulumi.OutputState }

func (SystemLicenseVDOMMapOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*map[string]*SystemLicenseVDOM)(nil)).Elem()
}

func (o SystemLicenseVDOMMapOutput) ToSystemLicenseVDOMMapOutput() SystemLicenseVDOMMapOutput {
	return o
}

func (o SystemLicenseVDOMMapOutput) ToSystemLicenseVDOMMapOutputWithContext(ctx context.Context) SystemLicenseVDOMMapOutput {
	return o
}

func (o SystemLicenseVDOMMapOutput) MapIndex(k pulumi.StringInput) SystemLicenseVDOMOutput {
	return pulumi.All(o, k).ApplyT(func(vs []interface{}) *SystemLicenseVDOM {
		return vs[0].(map[string]*SystemLicenseVDOM)[vs[1].(string)]
	}).(SystemLicenseVDOMOutput)
}

func init() {
	pulumi.RegisterInputType(reflect.TypeOf((*SystemLicenseVDOMInput)(nil)).Elem(), &SystemLicenseVDOM{})
	pulumi.RegisterInputType(reflect.TypeOf((*SystemLicenseVDOMArrayInput)(nil)).Elem(), SystemLicenseVDOMArray{})
	pulumi.RegisterInputType(reflect.TypeOf((*SystemLicenseVDOMMapInput)(nil)).Elem(), SystemLicenseVDOMMap{})
	pulumi.RegisterOutputType(SystemLicenseVDOMOutput{})
	pulumi.RegisterOutputType(SystemLicenseVDOMArrayOutput{})
	pulumi.RegisterOutputType(SystemLicenseVDOMMapOutput{})
}
