// Code generated by the Pulumi Terraform Bridge (tfgen) Tool DO NOT EDIT.
// *** WARNING: Do not edit by hand unless you're certain you know what you are doing! ***

package fortios

import (
	"context"
	"reflect"

	"github.com/pulumi/pulumi/sdk/v3/go/pulumi"
)

type LogTacacsAccounting2Filter struct {
	pulumi.CustomResourceState

	CliCmdAudit       pulumi.StringOutput    `pulumi:"cliCmdAudit"`
	ConfigChangeAudit pulumi.StringOutput    `pulumi:"configChangeAudit"`
	LoginAudit        pulumi.StringOutput    `pulumi:"loginAudit"`
	Vdomparam         pulumi.StringPtrOutput `pulumi:"vdomparam"`
}

// NewLogTacacsAccounting2Filter registers a new resource with the given unique name, arguments, and options.
func NewLogTacacsAccounting2Filter(ctx *pulumi.Context,
	name string, args *LogTacacsAccounting2FilterArgs, opts ...pulumi.ResourceOption) (*LogTacacsAccounting2Filter, error) {
	if args == nil {
		args = &LogTacacsAccounting2FilterArgs{}
	}

	opts = pkgResourceDefaultOpts(opts)
	var resource LogTacacsAccounting2Filter
	err := ctx.RegisterResource("fortios:index/logTacacsAccounting2Filter:LogTacacsAccounting2Filter", name, args, &resource, opts...)
	if err != nil {
		return nil, err
	}
	return &resource, nil
}

// GetLogTacacsAccounting2Filter gets an existing LogTacacsAccounting2Filter resource's state with the given name, ID, and optional
// state properties that are used to uniquely qualify the lookup (nil if not required).
func GetLogTacacsAccounting2Filter(ctx *pulumi.Context,
	name string, id pulumi.IDInput, state *LogTacacsAccounting2FilterState, opts ...pulumi.ResourceOption) (*LogTacacsAccounting2Filter, error) {
	var resource LogTacacsAccounting2Filter
	err := ctx.ReadResource("fortios:index/logTacacsAccounting2Filter:LogTacacsAccounting2Filter", name, id, state, &resource, opts...)
	if err != nil {
		return nil, err
	}
	return &resource, nil
}

// Input properties used for looking up and filtering LogTacacsAccounting2Filter resources.
type logTacacsAccounting2FilterState struct {
	CliCmdAudit       *string `pulumi:"cliCmdAudit"`
	ConfigChangeAudit *string `pulumi:"configChangeAudit"`
	LoginAudit        *string `pulumi:"loginAudit"`
	Vdomparam         *string `pulumi:"vdomparam"`
}

type LogTacacsAccounting2FilterState struct {
	CliCmdAudit       pulumi.StringPtrInput
	ConfigChangeAudit pulumi.StringPtrInput
	LoginAudit        pulumi.StringPtrInput
	Vdomparam         pulumi.StringPtrInput
}

func (LogTacacsAccounting2FilterState) ElementType() reflect.Type {
	return reflect.TypeOf((*logTacacsAccounting2FilterState)(nil)).Elem()
}

type logTacacsAccounting2FilterArgs struct {
	CliCmdAudit       *string `pulumi:"cliCmdAudit"`
	ConfigChangeAudit *string `pulumi:"configChangeAudit"`
	LoginAudit        *string `pulumi:"loginAudit"`
	Vdomparam         *string `pulumi:"vdomparam"`
}

// The set of arguments for constructing a LogTacacsAccounting2Filter resource.
type LogTacacsAccounting2FilterArgs struct {
	CliCmdAudit       pulumi.StringPtrInput
	ConfigChangeAudit pulumi.StringPtrInput
	LoginAudit        pulumi.StringPtrInput
	Vdomparam         pulumi.StringPtrInput
}

func (LogTacacsAccounting2FilterArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*logTacacsAccounting2FilterArgs)(nil)).Elem()
}

type LogTacacsAccounting2FilterInput interface {
	pulumi.Input

	ToLogTacacsAccounting2FilterOutput() LogTacacsAccounting2FilterOutput
	ToLogTacacsAccounting2FilterOutputWithContext(ctx context.Context) LogTacacsAccounting2FilterOutput
}

func (*LogTacacsAccounting2Filter) ElementType() reflect.Type {
	return reflect.TypeOf((**LogTacacsAccounting2Filter)(nil)).Elem()
}

func (i *LogTacacsAccounting2Filter) ToLogTacacsAccounting2FilterOutput() LogTacacsAccounting2FilterOutput {
	return i.ToLogTacacsAccounting2FilterOutputWithContext(context.Background())
}

func (i *LogTacacsAccounting2Filter) ToLogTacacsAccounting2FilterOutputWithContext(ctx context.Context) LogTacacsAccounting2FilterOutput {
	return pulumi.ToOutputWithContext(ctx, i).(LogTacacsAccounting2FilterOutput)
}

// LogTacacsAccounting2FilterArrayInput is an input type that accepts LogTacacsAccounting2FilterArray and LogTacacsAccounting2FilterArrayOutput values.
// You can construct a concrete instance of `LogTacacsAccounting2FilterArrayInput` via:
//
//	LogTacacsAccounting2FilterArray{ LogTacacsAccounting2FilterArgs{...} }
type LogTacacsAccounting2FilterArrayInput interface {
	pulumi.Input

	ToLogTacacsAccounting2FilterArrayOutput() LogTacacsAccounting2FilterArrayOutput
	ToLogTacacsAccounting2FilterArrayOutputWithContext(context.Context) LogTacacsAccounting2FilterArrayOutput
}

type LogTacacsAccounting2FilterArray []LogTacacsAccounting2FilterInput

func (LogTacacsAccounting2FilterArray) ElementType() reflect.Type {
	return reflect.TypeOf((*[]*LogTacacsAccounting2Filter)(nil)).Elem()
}

func (i LogTacacsAccounting2FilterArray) ToLogTacacsAccounting2FilterArrayOutput() LogTacacsAccounting2FilterArrayOutput {
	return i.ToLogTacacsAccounting2FilterArrayOutputWithContext(context.Background())
}

func (i LogTacacsAccounting2FilterArray) ToLogTacacsAccounting2FilterArrayOutputWithContext(ctx context.Context) LogTacacsAccounting2FilterArrayOutput {
	return pulumi.ToOutputWithContext(ctx, i).(LogTacacsAccounting2FilterArrayOutput)
}

// LogTacacsAccounting2FilterMapInput is an input type that accepts LogTacacsAccounting2FilterMap and LogTacacsAccounting2FilterMapOutput values.
// You can construct a concrete instance of `LogTacacsAccounting2FilterMapInput` via:
//
//	LogTacacsAccounting2FilterMap{ "key": LogTacacsAccounting2FilterArgs{...} }
type LogTacacsAccounting2FilterMapInput interface {
	pulumi.Input

	ToLogTacacsAccounting2FilterMapOutput() LogTacacsAccounting2FilterMapOutput
	ToLogTacacsAccounting2FilterMapOutputWithContext(context.Context) LogTacacsAccounting2FilterMapOutput
}

type LogTacacsAccounting2FilterMap map[string]LogTacacsAccounting2FilterInput

func (LogTacacsAccounting2FilterMap) ElementType() reflect.Type {
	return reflect.TypeOf((*map[string]*LogTacacsAccounting2Filter)(nil)).Elem()
}

func (i LogTacacsAccounting2FilterMap) ToLogTacacsAccounting2FilterMapOutput() LogTacacsAccounting2FilterMapOutput {
	return i.ToLogTacacsAccounting2FilterMapOutputWithContext(context.Background())
}

func (i LogTacacsAccounting2FilterMap) ToLogTacacsAccounting2FilterMapOutputWithContext(ctx context.Context) LogTacacsAccounting2FilterMapOutput {
	return pulumi.ToOutputWithContext(ctx, i).(LogTacacsAccounting2FilterMapOutput)
}

type LogTacacsAccounting2FilterOutput struct{ *pulumi.OutputState }

func (LogTacacsAccounting2FilterOutput) ElementType() reflect.Type {
	return reflect.TypeOf((**LogTacacsAccounting2Filter)(nil)).Elem()
}

func (o LogTacacsAccounting2FilterOutput) ToLogTacacsAccounting2FilterOutput() LogTacacsAccounting2FilterOutput {
	return o
}

func (o LogTacacsAccounting2FilterOutput) ToLogTacacsAccounting2FilterOutputWithContext(ctx context.Context) LogTacacsAccounting2FilterOutput {
	return o
}

func (o LogTacacsAccounting2FilterOutput) CliCmdAudit() pulumi.StringOutput {
	return o.ApplyT(func(v *LogTacacsAccounting2Filter) pulumi.StringOutput { return v.CliCmdAudit }).(pulumi.StringOutput)
}

func (o LogTacacsAccounting2FilterOutput) ConfigChangeAudit() pulumi.StringOutput {
	return o.ApplyT(func(v *LogTacacsAccounting2Filter) pulumi.StringOutput { return v.ConfigChangeAudit }).(pulumi.StringOutput)
}

func (o LogTacacsAccounting2FilterOutput) LoginAudit() pulumi.StringOutput {
	return o.ApplyT(func(v *LogTacacsAccounting2Filter) pulumi.StringOutput { return v.LoginAudit }).(pulumi.StringOutput)
}

func (o LogTacacsAccounting2FilterOutput) Vdomparam() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *LogTacacsAccounting2Filter) pulumi.StringPtrOutput { return v.Vdomparam }).(pulumi.StringPtrOutput)
}

type LogTacacsAccounting2FilterArrayOutput struct{ *pulumi.OutputState }

func (LogTacacsAccounting2FilterArrayOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*[]*LogTacacsAccounting2Filter)(nil)).Elem()
}

func (o LogTacacsAccounting2FilterArrayOutput) ToLogTacacsAccounting2FilterArrayOutput() LogTacacsAccounting2FilterArrayOutput {
	return o
}

func (o LogTacacsAccounting2FilterArrayOutput) ToLogTacacsAccounting2FilterArrayOutputWithContext(ctx context.Context) LogTacacsAccounting2FilterArrayOutput {
	return o
}

func (o LogTacacsAccounting2FilterArrayOutput) Index(i pulumi.IntInput) LogTacacsAccounting2FilterOutput {
	return pulumi.All(o, i).ApplyT(func(vs []interface{}) *LogTacacsAccounting2Filter {
		return vs[0].([]*LogTacacsAccounting2Filter)[vs[1].(int)]
	}).(LogTacacsAccounting2FilterOutput)
}

type LogTacacsAccounting2FilterMapOutput struct{ *pulumi.OutputState }

func (LogTacacsAccounting2FilterMapOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*map[string]*LogTacacsAccounting2Filter)(nil)).Elem()
}

func (o LogTacacsAccounting2FilterMapOutput) ToLogTacacsAccounting2FilterMapOutput() LogTacacsAccounting2FilterMapOutput {
	return o
}

func (o LogTacacsAccounting2FilterMapOutput) ToLogTacacsAccounting2FilterMapOutputWithContext(ctx context.Context) LogTacacsAccounting2FilterMapOutput {
	return o
}

func (o LogTacacsAccounting2FilterMapOutput) MapIndex(k pulumi.StringInput) LogTacacsAccounting2FilterOutput {
	return pulumi.All(o, k).ApplyT(func(vs []interface{}) *LogTacacsAccounting2Filter {
		return vs[0].(map[string]*LogTacacsAccounting2Filter)[vs[1].(string)]
	}).(LogTacacsAccounting2FilterOutput)
}

func init() {
	pulumi.RegisterInputType(reflect.TypeOf((*LogTacacsAccounting2FilterInput)(nil)).Elem(), &LogTacacsAccounting2Filter{})
	pulumi.RegisterInputType(reflect.TypeOf((*LogTacacsAccounting2FilterArrayInput)(nil)).Elem(), LogTacacsAccounting2FilterArray{})
	pulumi.RegisterInputType(reflect.TypeOf((*LogTacacsAccounting2FilterMapInput)(nil)).Elem(), LogTacacsAccounting2FilterMap{})
	pulumi.RegisterOutputType(LogTacacsAccounting2FilterOutput{})
	pulumi.RegisterOutputType(LogTacacsAccounting2FilterArrayOutput{})
	pulumi.RegisterOutputType(LogTacacsAccounting2FilterMapOutput{})
}
