// Code generated by the Pulumi Terraform Bridge (tfgen) Tool DO NOT EDIT.
// *** WARNING: Do not edit by hand unless you're certain you know what you are doing! ***

package fortios

import (
	"context"
	"reflect"

	"github.com/pulumi/pulumi/sdk/v3/go/pulumi"
)

type RouterospfNetwork struct {
	pulumi.CustomResourceState

	Area      pulumi.StringOutput    `pulumi:"area"`
	Comments  pulumi.StringPtrOutput `pulumi:"comments"`
	Fosid     pulumi.IntOutput       `pulumi:"fosid"`
	Prefix    pulumi.StringOutput    `pulumi:"prefix"`
	Vdomparam pulumi.StringPtrOutput `pulumi:"vdomparam"`
}

// NewRouterospfNetwork registers a new resource with the given unique name, arguments, and options.
func NewRouterospfNetwork(ctx *pulumi.Context,
	name string, args *RouterospfNetworkArgs, opts ...pulumi.ResourceOption) (*RouterospfNetwork, error) {
	if args == nil {
		args = &RouterospfNetworkArgs{}
	}

	opts = pkgResourceDefaultOpts(opts)
	var resource RouterospfNetwork
	err := ctx.RegisterResource("fortios:index/routerospfNetwork:RouterospfNetwork", name, args, &resource, opts...)
	if err != nil {
		return nil, err
	}
	return &resource, nil
}

// GetRouterospfNetwork gets an existing RouterospfNetwork resource's state with the given name, ID, and optional
// state properties that are used to uniquely qualify the lookup (nil if not required).
func GetRouterospfNetwork(ctx *pulumi.Context,
	name string, id pulumi.IDInput, state *RouterospfNetworkState, opts ...pulumi.ResourceOption) (*RouterospfNetwork, error) {
	var resource RouterospfNetwork
	err := ctx.ReadResource("fortios:index/routerospfNetwork:RouterospfNetwork", name, id, state, &resource, opts...)
	if err != nil {
		return nil, err
	}
	return &resource, nil
}

// Input properties used for looking up and filtering RouterospfNetwork resources.
type routerospfNetworkState struct {
	Area      *string `pulumi:"area"`
	Comments  *string `pulumi:"comments"`
	Fosid     *int    `pulumi:"fosid"`
	Prefix    *string `pulumi:"prefix"`
	Vdomparam *string `pulumi:"vdomparam"`
}

type RouterospfNetworkState struct {
	Area      pulumi.StringPtrInput
	Comments  pulumi.StringPtrInput
	Fosid     pulumi.IntPtrInput
	Prefix    pulumi.StringPtrInput
	Vdomparam pulumi.StringPtrInput
}

func (RouterospfNetworkState) ElementType() reflect.Type {
	return reflect.TypeOf((*routerospfNetworkState)(nil)).Elem()
}

type routerospfNetworkArgs struct {
	Area      *string `pulumi:"area"`
	Comments  *string `pulumi:"comments"`
	Fosid     *int    `pulumi:"fosid"`
	Prefix    *string `pulumi:"prefix"`
	Vdomparam *string `pulumi:"vdomparam"`
}

// The set of arguments for constructing a RouterospfNetwork resource.
type RouterospfNetworkArgs struct {
	Area      pulumi.StringPtrInput
	Comments  pulumi.StringPtrInput
	Fosid     pulumi.IntPtrInput
	Prefix    pulumi.StringPtrInput
	Vdomparam pulumi.StringPtrInput
}

func (RouterospfNetworkArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*routerospfNetworkArgs)(nil)).Elem()
}

type RouterospfNetworkInput interface {
	pulumi.Input

	ToRouterospfNetworkOutput() RouterospfNetworkOutput
	ToRouterospfNetworkOutputWithContext(ctx context.Context) RouterospfNetworkOutput
}

func (*RouterospfNetwork) ElementType() reflect.Type {
	return reflect.TypeOf((**RouterospfNetwork)(nil)).Elem()
}

func (i *RouterospfNetwork) ToRouterospfNetworkOutput() RouterospfNetworkOutput {
	return i.ToRouterospfNetworkOutputWithContext(context.Background())
}

func (i *RouterospfNetwork) ToRouterospfNetworkOutputWithContext(ctx context.Context) RouterospfNetworkOutput {
	return pulumi.ToOutputWithContext(ctx, i).(RouterospfNetworkOutput)
}

// RouterospfNetworkArrayInput is an input type that accepts RouterospfNetworkArray and RouterospfNetworkArrayOutput values.
// You can construct a concrete instance of `RouterospfNetworkArrayInput` via:
//
//	RouterospfNetworkArray{ RouterospfNetworkArgs{...} }
type RouterospfNetworkArrayInput interface {
	pulumi.Input

	ToRouterospfNetworkArrayOutput() RouterospfNetworkArrayOutput
	ToRouterospfNetworkArrayOutputWithContext(context.Context) RouterospfNetworkArrayOutput
}

type RouterospfNetworkArray []RouterospfNetworkInput

func (RouterospfNetworkArray) ElementType() reflect.Type {
	return reflect.TypeOf((*[]*RouterospfNetwork)(nil)).Elem()
}

func (i RouterospfNetworkArray) ToRouterospfNetworkArrayOutput() RouterospfNetworkArrayOutput {
	return i.ToRouterospfNetworkArrayOutputWithContext(context.Background())
}

func (i RouterospfNetworkArray) ToRouterospfNetworkArrayOutputWithContext(ctx context.Context) RouterospfNetworkArrayOutput {
	return pulumi.ToOutputWithContext(ctx, i).(RouterospfNetworkArrayOutput)
}

// RouterospfNetworkMapInput is an input type that accepts RouterospfNetworkMap and RouterospfNetworkMapOutput values.
// You can construct a concrete instance of `RouterospfNetworkMapInput` via:
//
//	RouterospfNetworkMap{ "key": RouterospfNetworkArgs{...} }
type RouterospfNetworkMapInput interface {
	pulumi.Input

	ToRouterospfNetworkMapOutput() RouterospfNetworkMapOutput
	ToRouterospfNetworkMapOutputWithContext(context.Context) RouterospfNetworkMapOutput
}

type RouterospfNetworkMap map[string]RouterospfNetworkInput

func (RouterospfNetworkMap) ElementType() reflect.Type {
	return reflect.TypeOf((*map[string]*RouterospfNetwork)(nil)).Elem()
}

func (i RouterospfNetworkMap) ToRouterospfNetworkMapOutput() RouterospfNetworkMapOutput {
	return i.ToRouterospfNetworkMapOutputWithContext(context.Background())
}

func (i RouterospfNetworkMap) ToRouterospfNetworkMapOutputWithContext(ctx context.Context) RouterospfNetworkMapOutput {
	return pulumi.ToOutputWithContext(ctx, i).(RouterospfNetworkMapOutput)
}

type RouterospfNetworkOutput struct{ *pulumi.OutputState }

func (RouterospfNetworkOutput) ElementType() reflect.Type {
	return reflect.TypeOf((**RouterospfNetwork)(nil)).Elem()
}

func (o RouterospfNetworkOutput) ToRouterospfNetworkOutput() RouterospfNetworkOutput {
	return o
}

func (o RouterospfNetworkOutput) ToRouterospfNetworkOutputWithContext(ctx context.Context) RouterospfNetworkOutput {
	return o
}

func (o RouterospfNetworkOutput) Area() pulumi.StringOutput {
	return o.ApplyT(func(v *RouterospfNetwork) pulumi.StringOutput { return v.Area }).(pulumi.StringOutput)
}

func (o RouterospfNetworkOutput) Comments() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *RouterospfNetwork) pulumi.StringPtrOutput { return v.Comments }).(pulumi.StringPtrOutput)
}

func (o RouterospfNetworkOutput) Fosid() pulumi.IntOutput {
	return o.ApplyT(func(v *RouterospfNetwork) pulumi.IntOutput { return v.Fosid }).(pulumi.IntOutput)
}

func (o RouterospfNetworkOutput) Prefix() pulumi.StringOutput {
	return o.ApplyT(func(v *RouterospfNetwork) pulumi.StringOutput { return v.Prefix }).(pulumi.StringOutput)
}

func (o RouterospfNetworkOutput) Vdomparam() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *RouterospfNetwork) pulumi.StringPtrOutput { return v.Vdomparam }).(pulumi.StringPtrOutput)
}

type RouterospfNetworkArrayOutput struct{ *pulumi.OutputState }

func (RouterospfNetworkArrayOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*[]*RouterospfNetwork)(nil)).Elem()
}

func (o RouterospfNetworkArrayOutput) ToRouterospfNetworkArrayOutput() RouterospfNetworkArrayOutput {
	return o
}

func (o RouterospfNetworkArrayOutput) ToRouterospfNetworkArrayOutputWithContext(ctx context.Context) RouterospfNetworkArrayOutput {
	return o
}

func (o RouterospfNetworkArrayOutput) Index(i pulumi.IntInput) RouterospfNetworkOutput {
	return pulumi.All(o, i).ApplyT(func(vs []interface{}) *RouterospfNetwork {
		return vs[0].([]*RouterospfNetwork)[vs[1].(int)]
	}).(RouterospfNetworkOutput)
}

type RouterospfNetworkMapOutput struct{ *pulumi.OutputState }

func (RouterospfNetworkMapOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*map[string]*RouterospfNetwork)(nil)).Elem()
}

func (o RouterospfNetworkMapOutput) ToRouterospfNetworkMapOutput() RouterospfNetworkMapOutput {
	return o
}

func (o RouterospfNetworkMapOutput) ToRouterospfNetworkMapOutputWithContext(ctx context.Context) RouterospfNetworkMapOutput {
	return o
}

func (o RouterospfNetworkMapOutput) MapIndex(k pulumi.StringInput) RouterospfNetworkOutput {
	return pulumi.All(o, k).ApplyT(func(vs []interface{}) *RouterospfNetwork {
		return vs[0].(map[string]*RouterospfNetwork)[vs[1].(string)]
	}).(RouterospfNetworkOutput)
}

func init() {
	pulumi.RegisterInputType(reflect.TypeOf((*RouterospfNetworkInput)(nil)).Elem(), &RouterospfNetwork{})
	pulumi.RegisterInputType(reflect.TypeOf((*RouterospfNetworkArrayInput)(nil)).Elem(), RouterospfNetworkArray{})
	pulumi.RegisterInputType(reflect.TypeOf((*RouterospfNetworkMapInput)(nil)).Elem(), RouterospfNetworkMap{})
	pulumi.RegisterOutputType(RouterospfNetworkOutput{})
	pulumi.RegisterOutputType(RouterospfNetworkArrayOutput{})
	pulumi.RegisterOutputType(RouterospfNetworkMapOutput{})
}
