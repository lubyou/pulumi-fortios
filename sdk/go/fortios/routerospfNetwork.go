// *** WARNING: this file was generated by the Pulumi Terraform Bridge (tfgen) Tool. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

package fortios

import (
	"context"
	"reflect"

	"github.com/pulumi/pulumi/sdk/v3/go/pulumi"
)

// OSPF network configuration.
//
// > The provider supports the definition of Network in Router Ospf `RouterOspf`, and also allows the definition of separate Network resources `RouterospfNetwork`, but do not use a `RouterOspf` with in-line Network in conjunction with any `RouterospfNetwork` resources, otherwise conflicts and overwrite will occur.
//
// ## Import
//
// Routerospf Network can be imported using any of these accepted formats$ export "FORTIOS_IMPORT_TABLE"="true"
//
// ```sh
//  $ pulumi import fortios:index/routerospfNetwork:RouterospfNetwork labelname {{fosid}}
// ```
//
//  $ unset "FORTIOS_IMPORT_TABLE"
type RouterospfNetwork struct {
	pulumi.CustomResourceState

	// Attach the network to area.
	Area pulumi.StringOutput `pulumi:"area"`
	// Network entry ID.
	Fosid pulumi.IntOutput `pulumi:"fosid"`
	// Prefix.
	Prefix pulumi.StringOutput `pulumi:"prefix"`
	// Specifies the vdom to which the resource will be applied when the FortiGate unit is running in VDOM mode. Only one vdom can be specified. If you want to inherit the vdom configuration of the provider, please do not set this parameter.
	Vdomparam pulumi.StringPtrOutput `pulumi:"vdomparam"`
}

// NewRouterospfNetwork registers a new resource with the given unique name, arguments, and options.
func NewRouterospfNetwork(ctx *pulumi.Context,
	name string, args *RouterospfNetworkArgs, opts ...pulumi.ResourceOption) (*RouterospfNetwork, error) {
	if args == nil {
		args = &RouterospfNetworkArgs{}
	}

	var resource RouterospfNetwork
	err := ctx.RegisterResource("fortios:index/routerospfNetwork:RouterospfNetwork", name, args, &resource, opts...)
	if err != nil {
		return nil, err
	}
	return &resource, nil
}

// GetRouterospfNetwork gets an existing RouterospfNetwork resource's state with the given name, ID, and optional
// state properties that are used to uniquely qualify the lookup (nil if not required).
func GetRouterospfNetwork(ctx *pulumi.Context,
	name string, id pulumi.IDInput, state *RouterospfNetworkState, opts ...pulumi.ResourceOption) (*RouterospfNetwork, error) {
	var resource RouterospfNetwork
	err := ctx.ReadResource("fortios:index/routerospfNetwork:RouterospfNetwork", name, id, state, &resource, opts...)
	if err != nil {
		return nil, err
	}
	return &resource, nil
}

// Input properties used for looking up and filtering RouterospfNetwork resources.
type routerospfNetworkState struct {
	// Attach the network to area.
	Area *string `pulumi:"area"`
	// Network entry ID.
	Fosid *int `pulumi:"fosid"`
	// Prefix.
	Prefix *string `pulumi:"prefix"`
	// Specifies the vdom to which the resource will be applied when the FortiGate unit is running in VDOM mode. Only one vdom can be specified. If you want to inherit the vdom configuration of the provider, please do not set this parameter.
	Vdomparam *string `pulumi:"vdomparam"`
}

type RouterospfNetworkState struct {
	// Attach the network to area.
	Area pulumi.StringPtrInput
	// Network entry ID.
	Fosid pulumi.IntPtrInput
	// Prefix.
	Prefix pulumi.StringPtrInput
	// Specifies the vdom to which the resource will be applied when the FortiGate unit is running in VDOM mode. Only one vdom can be specified. If you want to inherit the vdom configuration of the provider, please do not set this parameter.
	Vdomparam pulumi.StringPtrInput
}

func (RouterospfNetworkState) ElementType() reflect.Type {
	return reflect.TypeOf((*routerospfNetworkState)(nil)).Elem()
}

type routerospfNetworkArgs struct {
	// Attach the network to area.
	Area *string `pulumi:"area"`
	// Network entry ID.
	Fosid *int `pulumi:"fosid"`
	// Prefix.
	Prefix *string `pulumi:"prefix"`
	// Specifies the vdom to which the resource will be applied when the FortiGate unit is running in VDOM mode. Only one vdom can be specified. If you want to inherit the vdom configuration of the provider, please do not set this parameter.
	Vdomparam *string `pulumi:"vdomparam"`
}

// The set of arguments for constructing a RouterospfNetwork resource.
type RouterospfNetworkArgs struct {
	// Attach the network to area.
	Area pulumi.StringPtrInput
	// Network entry ID.
	Fosid pulumi.IntPtrInput
	// Prefix.
	Prefix pulumi.StringPtrInput
	// Specifies the vdom to which the resource will be applied when the FortiGate unit is running in VDOM mode. Only one vdom can be specified. If you want to inherit the vdom configuration of the provider, please do not set this parameter.
	Vdomparam pulumi.StringPtrInput
}

func (RouterospfNetworkArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*routerospfNetworkArgs)(nil)).Elem()
}

type RouterospfNetworkInput interface {
	pulumi.Input

	ToRouterospfNetworkOutput() RouterospfNetworkOutput
	ToRouterospfNetworkOutputWithContext(ctx context.Context) RouterospfNetworkOutput
}

func (*RouterospfNetwork) ElementType() reflect.Type {
	return reflect.TypeOf((*RouterospfNetwork)(nil))
}

func (i *RouterospfNetwork) ToRouterospfNetworkOutput() RouterospfNetworkOutput {
	return i.ToRouterospfNetworkOutputWithContext(context.Background())
}

func (i *RouterospfNetwork) ToRouterospfNetworkOutputWithContext(ctx context.Context) RouterospfNetworkOutput {
	return pulumi.ToOutputWithContext(ctx, i).(RouterospfNetworkOutput)
}

func (i *RouterospfNetwork) ToRouterospfNetworkPtrOutput() RouterospfNetworkPtrOutput {
	return i.ToRouterospfNetworkPtrOutputWithContext(context.Background())
}

func (i *RouterospfNetwork) ToRouterospfNetworkPtrOutputWithContext(ctx context.Context) RouterospfNetworkPtrOutput {
	return pulumi.ToOutputWithContext(ctx, i).(RouterospfNetworkPtrOutput)
}

type RouterospfNetworkPtrInput interface {
	pulumi.Input

	ToRouterospfNetworkPtrOutput() RouterospfNetworkPtrOutput
	ToRouterospfNetworkPtrOutputWithContext(ctx context.Context) RouterospfNetworkPtrOutput
}

type routerospfNetworkPtrType RouterospfNetworkArgs

func (*routerospfNetworkPtrType) ElementType() reflect.Type {
	return reflect.TypeOf((**RouterospfNetwork)(nil))
}

func (i *routerospfNetworkPtrType) ToRouterospfNetworkPtrOutput() RouterospfNetworkPtrOutput {
	return i.ToRouterospfNetworkPtrOutputWithContext(context.Background())
}

func (i *routerospfNetworkPtrType) ToRouterospfNetworkPtrOutputWithContext(ctx context.Context) RouterospfNetworkPtrOutput {
	return pulumi.ToOutputWithContext(ctx, i).(RouterospfNetworkPtrOutput)
}

// RouterospfNetworkArrayInput is an input type that accepts RouterospfNetworkArray and RouterospfNetworkArrayOutput values.
// You can construct a concrete instance of `RouterospfNetworkArrayInput` via:
//
//          RouterospfNetworkArray{ RouterospfNetworkArgs{...} }
type RouterospfNetworkArrayInput interface {
	pulumi.Input

	ToRouterospfNetworkArrayOutput() RouterospfNetworkArrayOutput
	ToRouterospfNetworkArrayOutputWithContext(context.Context) RouterospfNetworkArrayOutput
}

type RouterospfNetworkArray []RouterospfNetworkInput

func (RouterospfNetworkArray) ElementType() reflect.Type {
	return reflect.TypeOf(([]*RouterospfNetwork)(nil))
}

func (i RouterospfNetworkArray) ToRouterospfNetworkArrayOutput() RouterospfNetworkArrayOutput {
	return i.ToRouterospfNetworkArrayOutputWithContext(context.Background())
}

func (i RouterospfNetworkArray) ToRouterospfNetworkArrayOutputWithContext(ctx context.Context) RouterospfNetworkArrayOutput {
	return pulumi.ToOutputWithContext(ctx, i).(RouterospfNetworkArrayOutput)
}

// RouterospfNetworkMapInput is an input type that accepts RouterospfNetworkMap and RouterospfNetworkMapOutput values.
// You can construct a concrete instance of `RouterospfNetworkMapInput` via:
//
//          RouterospfNetworkMap{ "key": RouterospfNetworkArgs{...} }
type RouterospfNetworkMapInput interface {
	pulumi.Input

	ToRouterospfNetworkMapOutput() RouterospfNetworkMapOutput
	ToRouterospfNetworkMapOutputWithContext(context.Context) RouterospfNetworkMapOutput
}

type RouterospfNetworkMap map[string]RouterospfNetworkInput

func (RouterospfNetworkMap) ElementType() reflect.Type {
	return reflect.TypeOf((map[string]*RouterospfNetwork)(nil))
}

func (i RouterospfNetworkMap) ToRouterospfNetworkMapOutput() RouterospfNetworkMapOutput {
	return i.ToRouterospfNetworkMapOutputWithContext(context.Background())
}

func (i RouterospfNetworkMap) ToRouterospfNetworkMapOutputWithContext(ctx context.Context) RouterospfNetworkMapOutput {
	return pulumi.ToOutputWithContext(ctx, i).(RouterospfNetworkMapOutput)
}

type RouterospfNetworkOutput struct {
	*pulumi.OutputState
}

func (RouterospfNetworkOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*RouterospfNetwork)(nil))
}

func (o RouterospfNetworkOutput) ToRouterospfNetworkOutput() RouterospfNetworkOutput {
	return o
}

func (o RouterospfNetworkOutput) ToRouterospfNetworkOutputWithContext(ctx context.Context) RouterospfNetworkOutput {
	return o
}

func (o RouterospfNetworkOutput) ToRouterospfNetworkPtrOutput() RouterospfNetworkPtrOutput {
	return o.ToRouterospfNetworkPtrOutputWithContext(context.Background())
}

func (o RouterospfNetworkOutput) ToRouterospfNetworkPtrOutputWithContext(ctx context.Context) RouterospfNetworkPtrOutput {
	return o.ApplyT(func(v RouterospfNetwork) *RouterospfNetwork {
		return &v
	}).(RouterospfNetworkPtrOutput)
}

type RouterospfNetworkPtrOutput struct {
	*pulumi.OutputState
}

func (RouterospfNetworkPtrOutput) ElementType() reflect.Type {
	return reflect.TypeOf((**RouterospfNetwork)(nil))
}

func (o RouterospfNetworkPtrOutput) ToRouterospfNetworkPtrOutput() RouterospfNetworkPtrOutput {
	return o
}

func (o RouterospfNetworkPtrOutput) ToRouterospfNetworkPtrOutputWithContext(ctx context.Context) RouterospfNetworkPtrOutput {
	return o
}

type RouterospfNetworkArrayOutput struct{ *pulumi.OutputState }

func (RouterospfNetworkArrayOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*[]RouterospfNetwork)(nil))
}

func (o RouterospfNetworkArrayOutput) ToRouterospfNetworkArrayOutput() RouterospfNetworkArrayOutput {
	return o
}

func (o RouterospfNetworkArrayOutput) ToRouterospfNetworkArrayOutputWithContext(ctx context.Context) RouterospfNetworkArrayOutput {
	return o
}

func (o RouterospfNetworkArrayOutput) Index(i pulumi.IntInput) RouterospfNetworkOutput {
	return pulumi.All(o, i).ApplyT(func(vs []interface{}) RouterospfNetwork {
		return vs[0].([]RouterospfNetwork)[vs[1].(int)]
	}).(RouterospfNetworkOutput)
}

type RouterospfNetworkMapOutput struct{ *pulumi.OutputState }

func (RouterospfNetworkMapOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*map[string]RouterospfNetwork)(nil))
}

func (o RouterospfNetworkMapOutput) ToRouterospfNetworkMapOutput() RouterospfNetworkMapOutput {
	return o
}

func (o RouterospfNetworkMapOutput) ToRouterospfNetworkMapOutputWithContext(ctx context.Context) RouterospfNetworkMapOutput {
	return o
}

func (o RouterospfNetworkMapOutput) MapIndex(k pulumi.StringInput) RouterospfNetworkOutput {
	return pulumi.All(o, k).ApplyT(func(vs []interface{}) RouterospfNetwork {
		return vs[0].(map[string]RouterospfNetwork)[vs[1].(string)]
	}).(RouterospfNetworkOutput)
}

func init() {
	pulumi.RegisterOutputType(RouterospfNetworkOutput{})
	pulumi.RegisterOutputType(RouterospfNetworkPtrOutput{})
	pulumi.RegisterOutputType(RouterospfNetworkArrayOutput{})
	pulumi.RegisterOutputType(RouterospfNetworkMapOutput{})
}
