// Code generated by the Pulumi Terraform Bridge (tfgen) Tool DO NOT EDIT.
// *** WARNING: Do not edit by hand unless you're certain you know what you are doing! ***

package fortios

import (
	"context"
	"reflect"

	"github.com/lubyou/pulumi-fortios/sdk/go/fortios/internal"
	"github.com/pulumi/pulumi/sdk/v3/go/pulumi"
	"github.com/pulumi/pulumi/sdk/v3/go/pulumix"
)

type CasbSaasApplication struct {
	pulumi.CustomResourceState

	CasbName            pulumi.StringOutput                  `pulumi:"casbName"`
	Description         pulumi.StringOutput                  `pulumi:"description"`
	Domains             CasbSaasApplicationDomainArrayOutput `pulumi:"domains"`
	DynamicSortSubtable pulumi.StringPtrOutput               `pulumi:"dynamicSortSubtable"`
	GetAllTables        pulumi.StringPtrOutput               `pulumi:"getAllTables"`
	Name                pulumi.StringOutput                  `pulumi:"name"`
	Type                pulumi.StringOutput                  `pulumi:"type"`
	Uuid                pulumi.StringOutput                  `pulumi:"uuid"`
	Vdomparam           pulumi.StringPtrOutput               `pulumi:"vdomparam"`
}

// NewCasbSaasApplication registers a new resource with the given unique name, arguments, and options.
func NewCasbSaasApplication(ctx *pulumi.Context,
	name string, args *CasbSaasApplicationArgs, opts ...pulumi.ResourceOption) (*CasbSaasApplication, error) {
	if args == nil {
		args = &CasbSaasApplicationArgs{}
	}

	opts = internal.PkgResourceDefaultOpts(opts)
	var resource CasbSaasApplication
	err := ctx.RegisterResource("fortios:index/casbSaasApplication:CasbSaasApplication", name, args, &resource, opts...)
	if err != nil {
		return nil, err
	}
	return &resource, nil
}

// GetCasbSaasApplication gets an existing CasbSaasApplication resource's state with the given name, ID, and optional
// state properties that are used to uniquely qualify the lookup (nil if not required).
func GetCasbSaasApplication(ctx *pulumi.Context,
	name string, id pulumi.IDInput, state *CasbSaasApplicationState, opts ...pulumi.ResourceOption) (*CasbSaasApplication, error) {
	var resource CasbSaasApplication
	err := ctx.ReadResource("fortios:index/casbSaasApplication:CasbSaasApplication", name, id, state, &resource, opts...)
	if err != nil {
		return nil, err
	}
	return &resource, nil
}

// Input properties used for looking up and filtering CasbSaasApplication resources.
type casbSaasApplicationState struct {
	CasbName            *string                     `pulumi:"casbName"`
	Description         *string                     `pulumi:"description"`
	Domains             []CasbSaasApplicationDomain `pulumi:"domains"`
	DynamicSortSubtable *string                     `pulumi:"dynamicSortSubtable"`
	GetAllTables        *string                     `pulumi:"getAllTables"`
	Name                *string                     `pulumi:"name"`
	Type                *string                     `pulumi:"type"`
	Uuid                *string                     `pulumi:"uuid"`
	Vdomparam           *string                     `pulumi:"vdomparam"`
}

type CasbSaasApplicationState struct {
	CasbName            pulumi.StringPtrInput
	Description         pulumi.StringPtrInput
	Domains             CasbSaasApplicationDomainArrayInput
	DynamicSortSubtable pulumi.StringPtrInput
	GetAllTables        pulumi.StringPtrInput
	Name                pulumi.StringPtrInput
	Type                pulumi.StringPtrInput
	Uuid                pulumi.StringPtrInput
	Vdomparam           pulumi.StringPtrInput
}

func (CasbSaasApplicationState) ElementType() reflect.Type {
	return reflect.TypeOf((*casbSaasApplicationState)(nil)).Elem()
}

type casbSaasApplicationArgs struct {
	CasbName            *string                     `pulumi:"casbName"`
	Description         *string                     `pulumi:"description"`
	Domains             []CasbSaasApplicationDomain `pulumi:"domains"`
	DynamicSortSubtable *string                     `pulumi:"dynamicSortSubtable"`
	GetAllTables        *string                     `pulumi:"getAllTables"`
	Name                *string                     `pulumi:"name"`
	Type                *string                     `pulumi:"type"`
	Uuid                *string                     `pulumi:"uuid"`
	Vdomparam           *string                     `pulumi:"vdomparam"`
}

// The set of arguments for constructing a CasbSaasApplication resource.
type CasbSaasApplicationArgs struct {
	CasbName            pulumi.StringPtrInput
	Description         pulumi.StringPtrInput
	Domains             CasbSaasApplicationDomainArrayInput
	DynamicSortSubtable pulumi.StringPtrInput
	GetAllTables        pulumi.StringPtrInput
	Name                pulumi.StringPtrInput
	Type                pulumi.StringPtrInput
	Uuid                pulumi.StringPtrInput
	Vdomparam           pulumi.StringPtrInput
}

func (CasbSaasApplicationArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*casbSaasApplicationArgs)(nil)).Elem()
}

type CasbSaasApplicationInput interface {
	pulumi.Input

	ToCasbSaasApplicationOutput() CasbSaasApplicationOutput
	ToCasbSaasApplicationOutputWithContext(ctx context.Context) CasbSaasApplicationOutput
}

func (*CasbSaasApplication) ElementType() reflect.Type {
	return reflect.TypeOf((**CasbSaasApplication)(nil)).Elem()
}

func (i *CasbSaasApplication) ToCasbSaasApplicationOutput() CasbSaasApplicationOutput {
	return i.ToCasbSaasApplicationOutputWithContext(context.Background())
}

func (i *CasbSaasApplication) ToCasbSaasApplicationOutputWithContext(ctx context.Context) CasbSaasApplicationOutput {
	return pulumi.ToOutputWithContext(ctx, i).(CasbSaasApplicationOutput)
}

func (i *CasbSaasApplication) ToOutput(ctx context.Context) pulumix.Output[*CasbSaasApplication] {
	return pulumix.Output[*CasbSaasApplication]{
		OutputState: i.ToCasbSaasApplicationOutputWithContext(ctx).OutputState,
	}
}

// CasbSaasApplicationArrayInput is an input type that accepts CasbSaasApplicationArray and CasbSaasApplicationArrayOutput values.
// You can construct a concrete instance of `CasbSaasApplicationArrayInput` via:
//
//	CasbSaasApplicationArray{ CasbSaasApplicationArgs{...} }
type CasbSaasApplicationArrayInput interface {
	pulumi.Input

	ToCasbSaasApplicationArrayOutput() CasbSaasApplicationArrayOutput
	ToCasbSaasApplicationArrayOutputWithContext(context.Context) CasbSaasApplicationArrayOutput
}

type CasbSaasApplicationArray []CasbSaasApplicationInput

func (CasbSaasApplicationArray) ElementType() reflect.Type {
	return reflect.TypeOf((*[]*CasbSaasApplication)(nil)).Elem()
}

func (i CasbSaasApplicationArray) ToCasbSaasApplicationArrayOutput() CasbSaasApplicationArrayOutput {
	return i.ToCasbSaasApplicationArrayOutputWithContext(context.Background())
}

func (i CasbSaasApplicationArray) ToCasbSaasApplicationArrayOutputWithContext(ctx context.Context) CasbSaasApplicationArrayOutput {
	return pulumi.ToOutputWithContext(ctx, i).(CasbSaasApplicationArrayOutput)
}

func (i CasbSaasApplicationArray) ToOutput(ctx context.Context) pulumix.Output[[]*CasbSaasApplication] {
	return pulumix.Output[[]*CasbSaasApplication]{
		OutputState: i.ToCasbSaasApplicationArrayOutputWithContext(ctx).OutputState,
	}
}

// CasbSaasApplicationMapInput is an input type that accepts CasbSaasApplicationMap and CasbSaasApplicationMapOutput values.
// You can construct a concrete instance of `CasbSaasApplicationMapInput` via:
//
//	CasbSaasApplicationMap{ "key": CasbSaasApplicationArgs{...} }
type CasbSaasApplicationMapInput interface {
	pulumi.Input

	ToCasbSaasApplicationMapOutput() CasbSaasApplicationMapOutput
	ToCasbSaasApplicationMapOutputWithContext(context.Context) CasbSaasApplicationMapOutput
}

type CasbSaasApplicationMap map[string]CasbSaasApplicationInput

func (CasbSaasApplicationMap) ElementType() reflect.Type {
	return reflect.TypeOf((*map[string]*CasbSaasApplication)(nil)).Elem()
}

func (i CasbSaasApplicationMap) ToCasbSaasApplicationMapOutput() CasbSaasApplicationMapOutput {
	return i.ToCasbSaasApplicationMapOutputWithContext(context.Background())
}

func (i CasbSaasApplicationMap) ToCasbSaasApplicationMapOutputWithContext(ctx context.Context) CasbSaasApplicationMapOutput {
	return pulumi.ToOutputWithContext(ctx, i).(CasbSaasApplicationMapOutput)
}

func (i CasbSaasApplicationMap) ToOutput(ctx context.Context) pulumix.Output[map[string]*CasbSaasApplication] {
	return pulumix.Output[map[string]*CasbSaasApplication]{
		OutputState: i.ToCasbSaasApplicationMapOutputWithContext(ctx).OutputState,
	}
}

type CasbSaasApplicationOutput struct{ *pulumi.OutputState }

func (CasbSaasApplicationOutput) ElementType() reflect.Type {
	return reflect.TypeOf((**CasbSaasApplication)(nil)).Elem()
}

func (o CasbSaasApplicationOutput) ToCasbSaasApplicationOutput() CasbSaasApplicationOutput {
	return o
}

func (o CasbSaasApplicationOutput) ToCasbSaasApplicationOutputWithContext(ctx context.Context) CasbSaasApplicationOutput {
	return o
}

func (o CasbSaasApplicationOutput) ToOutput(ctx context.Context) pulumix.Output[*CasbSaasApplication] {
	return pulumix.Output[*CasbSaasApplication]{
		OutputState: o.OutputState,
	}
}

func (o CasbSaasApplicationOutput) CasbName() pulumi.StringOutput {
	return o.ApplyT(func(v *CasbSaasApplication) pulumi.StringOutput { return v.CasbName }).(pulumi.StringOutput)
}

func (o CasbSaasApplicationOutput) Description() pulumi.StringOutput {
	return o.ApplyT(func(v *CasbSaasApplication) pulumi.StringOutput { return v.Description }).(pulumi.StringOutput)
}

func (o CasbSaasApplicationOutput) Domains() CasbSaasApplicationDomainArrayOutput {
	return o.ApplyT(func(v *CasbSaasApplication) CasbSaasApplicationDomainArrayOutput { return v.Domains }).(CasbSaasApplicationDomainArrayOutput)
}

func (o CasbSaasApplicationOutput) DynamicSortSubtable() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *CasbSaasApplication) pulumi.StringPtrOutput { return v.DynamicSortSubtable }).(pulumi.StringPtrOutput)
}

func (o CasbSaasApplicationOutput) GetAllTables() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *CasbSaasApplication) pulumi.StringPtrOutput { return v.GetAllTables }).(pulumi.StringPtrOutput)
}

func (o CasbSaasApplicationOutput) Name() pulumi.StringOutput {
	return o.ApplyT(func(v *CasbSaasApplication) pulumi.StringOutput { return v.Name }).(pulumi.StringOutput)
}

func (o CasbSaasApplicationOutput) Type() pulumi.StringOutput {
	return o.ApplyT(func(v *CasbSaasApplication) pulumi.StringOutput { return v.Type }).(pulumi.StringOutput)
}

func (o CasbSaasApplicationOutput) Uuid() pulumi.StringOutput {
	return o.ApplyT(func(v *CasbSaasApplication) pulumi.StringOutput { return v.Uuid }).(pulumi.StringOutput)
}

func (o CasbSaasApplicationOutput) Vdomparam() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *CasbSaasApplication) pulumi.StringPtrOutput { return v.Vdomparam }).(pulumi.StringPtrOutput)
}

type CasbSaasApplicationArrayOutput struct{ *pulumi.OutputState }

func (CasbSaasApplicationArrayOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*[]*CasbSaasApplication)(nil)).Elem()
}

func (o CasbSaasApplicationArrayOutput) ToCasbSaasApplicationArrayOutput() CasbSaasApplicationArrayOutput {
	return o
}

func (o CasbSaasApplicationArrayOutput) ToCasbSaasApplicationArrayOutputWithContext(ctx context.Context) CasbSaasApplicationArrayOutput {
	return o
}

func (o CasbSaasApplicationArrayOutput) ToOutput(ctx context.Context) pulumix.Output[[]*CasbSaasApplication] {
	return pulumix.Output[[]*CasbSaasApplication]{
		OutputState: o.OutputState,
	}
}

func (o CasbSaasApplicationArrayOutput) Index(i pulumi.IntInput) CasbSaasApplicationOutput {
	return pulumi.All(o, i).ApplyT(func(vs []interface{}) *CasbSaasApplication {
		return vs[0].([]*CasbSaasApplication)[vs[1].(int)]
	}).(CasbSaasApplicationOutput)
}

type CasbSaasApplicationMapOutput struct{ *pulumi.OutputState }

func (CasbSaasApplicationMapOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*map[string]*CasbSaasApplication)(nil)).Elem()
}

func (o CasbSaasApplicationMapOutput) ToCasbSaasApplicationMapOutput() CasbSaasApplicationMapOutput {
	return o
}

func (o CasbSaasApplicationMapOutput) ToCasbSaasApplicationMapOutputWithContext(ctx context.Context) CasbSaasApplicationMapOutput {
	return o
}

func (o CasbSaasApplicationMapOutput) ToOutput(ctx context.Context) pulumix.Output[map[string]*CasbSaasApplication] {
	return pulumix.Output[map[string]*CasbSaasApplication]{
		OutputState: o.OutputState,
	}
}

func (o CasbSaasApplicationMapOutput) MapIndex(k pulumi.StringInput) CasbSaasApplicationOutput {
	return pulumi.All(o, k).ApplyT(func(vs []interface{}) *CasbSaasApplication {
		return vs[0].(map[string]*CasbSaasApplication)[vs[1].(string)]
	}).(CasbSaasApplicationOutput)
}

func init() {
	pulumi.RegisterInputType(reflect.TypeOf((*CasbSaasApplicationInput)(nil)).Elem(), &CasbSaasApplication{})
	pulumi.RegisterInputType(reflect.TypeOf((*CasbSaasApplicationArrayInput)(nil)).Elem(), CasbSaasApplicationArray{})
	pulumi.RegisterInputType(reflect.TypeOf((*CasbSaasApplicationMapInput)(nil)).Elem(), CasbSaasApplicationMap{})
	pulumi.RegisterOutputType(CasbSaasApplicationOutput{})
	pulumi.RegisterOutputType(CasbSaasApplicationArrayOutput{})
	pulumi.RegisterOutputType(CasbSaasApplicationMapOutput{})
}
