// Code generated by the Pulumi Terraform Bridge (tfgen) Tool DO NOT EDIT.
// *** WARNING: Do not edit by hand unless you're certain you know what you are doing! ***

package fortios

import (
	"context"
	"reflect"

	"github.com/lubyou/pulumi-fortios/sdk/go/fortios/internal"
	"github.com/pulumi/pulumi/sdk/v3/go/pulumi"
	"github.com/pulumi/pulumi/sdk/v3/go/pulumix"
)

type LogGuiDisplay struct {
	pulumi.CustomResourceState

	FortiviewUnscannedApps pulumi.StringOutput    `pulumi:"fortiviewUnscannedApps"`
	ResolveApps            pulumi.StringOutput    `pulumi:"resolveApps"`
	ResolveHosts           pulumi.StringOutput    `pulumi:"resolveHosts"`
	Vdomparam              pulumi.StringPtrOutput `pulumi:"vdomparam"`
}

// NewLogGuiDisplay registers a new resource with the given unique name, arguments, and options.
func NewLogGuiDisplay(ctx *pulumi.Context,
	name string, args *LogGuiDisplayArgs, opts ...pulumi.ResourceOption) (*LogGuiDisplay, error) {
	if args == nil {
		args = &LogGuiDisplayArgs{}
	}

	opts = internal.PkgResourceDefaultOpts(opts)
	var resource LogGuiDisplay
	err := ctx.RegisterResource("fortios:index/logGuiDisplay:LogGuiDisplay", name, args, &resource, opts...)
	if err != nil {
		return nil, err
	}
	return &resource, nil
}

// GetLogGuiDisplay gets an existing LogGuiDisplay resource's state with the given name, ID, and optional
// state properties that are used to uniquely qualify the lookup (nil if not required).
func GetLogGuiDisplay(ctx *pulumi.Context,
	name string, id pulumi.IDInput, state *LogGuiDisplayState, opts ...pulumi.ResourceOption) (*LogGuiDisplay, error) {
	var resource LogGuiDisplay
	err := ctx.ReadResource("fortios:index/logGuiDisplay:LogGuiDisplay", name, id, state, &resource, opts...)
	if err != nil {
		return nil, err
	}
	return &resource, nil
}

// Input properties used for looking up and filtering LogGuiDisplay resources.
type logGuiDisplayState struct {
	FortiviewUnscannedApps *string `pulumi:"fortiviewUnscannedApps"`
	ResolveApps            *string `pulumi:"resolveApps"`
	ResolveHosts           *string `pulumi:"resolveHosts"`
	Vdomparam              *string `pulumi:"vdomparam"`
}

type LogGuiDisplayState struct {
	FortiviewUnscannedApps pulumi.StringPtrInput
	ResolveApps            pulumi.StringPtrInput
	ResolveHosts           pulumi.StringPtrInput
	Vdomparam              pulumi.StringPtrInput
}

func (LogGuiDisplayState) ElementType() reflect.Type {
	return reflect.TypeOf((*logGuiDisplayState)(nil)).Elem()
}

type logGuiDisplayArgs struct {
	FortiviewUnscannedApps *string `pulumi:"fortiviewUnscannedApps"`
	ResolveApps            *string `pulumi:"resolveApps"`
	ResolveHosts           *string `pulumi:"resolveHosts"`
	Vdomparam              *string `pulumi:"vdomparam"`
}

// The set of arguments for constructing a LogGuiDisplay resource.
type LogGuiDisplayArgs struct {
	FortiviewUnscannedApps pulumi.StringPtrInput
	ResolveApps            pulumi.StringPtrInput
	ResolveHosts           pulumi.StringPtrInput
	Vdomparam              pulumi.StringPtrInput
}

func (LogGuiDisplayArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*logGuiDisplayArgs)(nil)).Elem()
}

type LogGuiDisplayInput interface {
	pulumi.Input

	ToLogGuiDisplayOutput() LogGuiDisplayOutput
	ToLogGuiDisplayOutputWithContext(ctx context.Context) LogGuiDisplayOutput
}

func (*LogGuiDisplay) ElementType() reflect.Type {
	return reflect.TypeOf((**LogGuiDisplay)(nil)).Elem()
}

func (i *LogGuiDisplay) ToLogGuiDisplayOutput() LogGuiDisplayOutput {
	return i.ToLogGuiDisplayOutputWithContext(context.Background())
}

func (i *LogGuiDisplay) ToLogGuiDisplayOutputWithContext(ctx context.Context) LogGuiDisplayOutput {
	return pulumi.ToOutputWithContext(ctx, i).(LogGuiDisplayOutput)
}

func (i *LogGuiDisplay) ToOutput(ctx context.Context) pulumix.Output[*LogGuiDisplay] {
	return pulumix.Output[*LogGuiDisplay]{
		OutputState: i.ToLogGuiDisplayOutputWithContext(ctx).OutputState,
	}
}

// LogGuiDisplayArrayInput is an input type that accepts LogGuiDisplayArray and LogGuiDisplayArrayOutput values.
// You can construct a concrete instance of `LogGuiDisplayArrayInput` via:
//
//	LogGuiDisplayArray{ LogGuiDisplayArgs{...} }
type LogGuiDisplayArrayInput interface {
	pulumi.Input

	ToLogGuiDisplayArrayOutput() LogGuiDisplayArrayOutput
	ToLogGuiDisplayArrayOutputWithContext(context.Context) LogGuiDisplayArrayOutput
}

type LogGuiDisplayArray []LogGuiDisplayInput

func (LogGuiDisplayArray) ElementType() reflect.Type {
	return reflect.TypeOf((*[]*LogGuiDisplay)(nil)).Elem()
}

func (i LogGuiDisplayArray) ToLogGuiDisplayArrayOutput() LogGuiDisplayArrayOutput {
	return i.ToLogGuiDisplayArrayOutputWithContext(context.Background())
}

func (i LogGuiDisplayArray) ToLogGuiDisplayArrayOutputWithContext(ctx context.Context) LogGuiDisplayArrayOutput {
	return pulumi.ToOutputWithContext(ctx, i).(LogGuiDisplayArrayOutput)
}

func (i LogGuiDisplayArray) ToOutput(ctx context.Context) pulumix.Output[[]*LogGuiDisplay] {
	return pulumix.Output[[]*LogGuiDisplay]{
		OutputState: i.ToLogGuiDisplayArrayOutputWithContext(ctx).OutputState,
	}
}

// LogGuiDisplayMapInput is an input type that accepts LogGuiDisplayMap and LogGuiDisplayMapOutput values.
// You can construct a concrete instance of `LogGuiDisplayMapInput` via:
//
//	LogGuiDisplayMap{ "key": LogGuiDisplayArgs{...} }
type LogGuiDisplayMapInput interface {
	pulumi.Input

	ToLogGuiDisplayMapOutput() LogGuiDisplayMapOutput
	ToLogGuiDisplayMapOutputWithContext(context.Context) LogGuiDisplayMapOutput
}

type LogGuiDisplayMap map[string]LogGuiDisplayInput

func (LogGuiDisplayMap) ElementType() reflect.Type {
	return reflect.TypeOf((*map[string]*LogGuiDisplay)(nil)).Elem()
}

func (i LogGuiDisplayMap) ToLogGuiDisplayMapOutput() LogGuiDisplayMapOutput {
	return i.ToLogGuiDisplayMapOutputWithContext(context.Background())
}

func (i LogGuiDisplayMap) ToLogGuiDisplayMapOutputWithContext(ctx context.Context) LogGuiDisplayMapOutput {
	return pulumi.ToOutputWithContext(ctx, i).(LogGuiDisplayMapOutput)
}

func (i LogGuiDisplayMap) ToOutput(ctx context.Context) pulumix.Output[map[string]*LogGuiDisplay] {
	return pulumix.Output[map[string]*LogGuiDisplay]{
		OutputState: i.ToLogGuiDisplayMapOutputWithContext(ctx).OutputState,
	}
}

type LogGuiDisplayOutput struct{ *pulumi.OutputState }

func (LogGuiDisplayOutput) ElementType() reflect.Type {
	return reflect.TypeOf((**LogGuiDisplay)(nil)).Elem()
}

func (o LogGuiDisplayOutput) ToLogGuiDisplayOutput() LogGuiDisplayOutput {
	return o
}

func (o LogGuiDisplayOutput) ToLogGuiDisplayOutputWithContext(ctx context.Context) LogGuiDisplayOutput {
	return o
}

func (o LogGuiDisplayOutput) ToOutput(ctx context.Context) pulumix.Output[*LogGuiDisplay] {
	return pulumix.Output[*LogGuiDisplay]{
		OutputState: o.OutputState,
	}
}

func (o LogGuiDisplayOutput) FortiviewUnscannedApps() pulumi.StringOutput {
	return o.ApplyT(func(v *LogGuiDisplay) pulumi.StringOutput { return v.FortiviewUnscannedApps }).(pulumi.StringOutput)
}

func (o LogGuiDisplayOutput) ResolveApps() pulumi.StringOutput {
	return o.ApplyT(func(v *LogGuiDisplay) pulumi.StringOutput { return v.ResolveApps }).(pulumi.StringOutput)
}

func (o LogGuiDisplayOutput) ResolveHosts() pulumi.StringOutput {
	return o.ApplyT(func(v *LogGuiDisplay) pulumi.StringOutput { return v.ResolveHosts }).(pulumi.StringOutput)
}

func (o LogGuiDisplayOutput) Vdomparam() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *LogGuiDisplay) pulumi.StringPtrOutput { return v.Vdomparam }).(pulumi.StringPtrOutput)
}

type LogGuiDisplayArrayOutput struct{ *pulumi.OutputState }

func (LogGuiDisplayArrayOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*[]*LogGuiDisplay)(nil)).Elem()
}

func (o LogGuiDisplayArrayOutput) ToLogGuiDisplayArrayOutput() LogGuiDisplayArrayOutput {
	return o
}

func (o LogGuiDisplayArrayOutput) ToLogGuiDisplayArrayOutputWithContext(ctx context.Context) LogGuiDisplayArrayOutput {
	return o
}

func (o LogGuiDisplayArrayOutput) ToOutput(ctx context.Context) pulumix.Output[[]*LogGuiDisplay] {
	return pulumix.Output[[]*LogGuiDisplay]{
		OutputState: o.OutputState,
	}
}

func (o LogGuiDisplayArrayOutput) Index(i pulumi.IntInput) LogGuiDisplayOutput {
	return pulumi.All(o, i).ApplyT(func(vs []interface{}) *LogGuiDisplay {
		return vs[0].([]*LogGuiDisplay)[vs[1].(int)]
	}).(LogGuiDisplayOutput)
}

type LogGuiDisplayMapOutput struct{ *pulumi.OutputState }

func (LogGuiDisplayMapOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*map[string]*LogGuiDisplay)(nil)).Elem()
}

func (o LogGuiDisplayMapOutput) ToLogGuiDisplayMapOutput() LogGuiDisplayMapOutput {
	return o
}

func (o LogGuiDisplayMapOutput) ToLogGuiDisplayMapOutputWithContext(ctx context.Context) LogGuiDisplayMapOutput {
	return o
}

func (o LogGuiDisplayMapOutput) ToOutput(ctx context.Context) pulumix.Output[map[string]*LogGuiDisplay] {
	return pulumix.Output[map[string]*LogGuiDisplay]{
		OutputState: o.OutputState,
	}
}

func (o LogGuiDisplayMapOutput) MapIndex(k pulumi.StringInput) LogGuiDisplayOutput {
	return pulumi.All(o, k).ApplyT(func(vs []interface{}) *LogGuiDisplay {
		return vs[0].(map[string]*LogGuiDisplay)[vs[1].(string)]
	}).(LogGuiDisplayOutput)
}

func init() {
	pulumi.RegisterInputType(reflect.TypeOf((*LogGuiDisplayInput)(nil)).Elem(), &LogGuiDisplay{})
	pulumi.RegisterInputType(reflect.TypeOf((*LogGuiDisplayArrayInput)(nil)).Elem(), LogGuiDisplayArray{})
	pulumi.RegisterInputType(reflect.TypeOf((*LogGuiDisplayMapInput)(nil)).Elem(), LogGuiDisplayMap{})
	pulumi.RegisterOutputType(LogGuiDisplayOutput{})
	pulumi.RegisterOutputType(LogGuiDisplayArrayOutput{})
	pulumi.RegisterOutputType(LogGuiDisplayMapOutput{})
}
