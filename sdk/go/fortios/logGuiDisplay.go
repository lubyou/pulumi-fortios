// *** WARNING: this file was generated by the Pulumi Terraform Bridge (tfgen) Tool. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

package fortios

import (
	"context"
	"reflect"

	"github.com/pulumi/pulumi/sdk/v3/go/pulumi"
)

// Configure how log messages are displayed on the GUI.
//
// ## Example Usage
//
// ```go
// package main
//
// import (
// 	"github.com/lubyou/pulumi-fortios/sdk/go/fortios"
// 	"github.com/pulumi/pulumi/sdk/v3/go/pulumi"
// )
//
// func main() {
// 	pulumi.Run(func(ctx *pulumi.Context) error {
// 		_, err := fortios.NewLogGuiDisplay(ctx, "trname", &fortios.LogGuiDisplayArgs{
// 			FortiviewUnscannedApps: pulumi.String("disable"),
// 			ResolveApps:            pulumi.String("enable"),
// 			ResolveHosts:           pulumi.String("enable"),
// 		})
// 		if err != nil {
// 			return err
// 		}
// 		return nil
// 	})
// }
// ```
//
// ## Import
//
// Log GuiDisplay can be imported using any of these accepted formats$ export "FORTIOS_IMPORT_TABLE"="true"
//
// ```sh
//  $ pulumi import fortios:index/logGuiDisplay:LogGuiDisplay labelname LogGuiDisplay
// ```
//
//  $ unset "FORTIOS_IMPORT_TABLE"
type LogGuiDisplay struct {
	pulumi.CustomResourceState

	// Enable/disable showing unscanned traffic in FortiView application charts. Valid values: `enable`, `disable`.
	FortiviewUnscannedApps pulumi.StringOutput `pulumi:"fortiviewUnscannedApps"`
	// Resolve unknown applications on the GUI using Fortinet's remote application database. Valid values: `enable`, `disable`.
	ResolveApps pulumi.StringOutput `pulumi:"resolveApps"`
	// Enable/disable resolving IP addresses to hostname in log messages on the GUI using reverse DNS lookup Valid values: `enable`, `disable`.
	ResolveHosts pulumi.StringOutput `pulumi:"resolveHosts"`
	// Specifies the vdom to which the resource will be applied when the FortiGate unit is running in VDOM mode. Only one vdom can be specified. If you want to inherit the vdom configuration of the provider, please do not set this parameter.
	Vdomparam pulumi.StringPtrOutput `pulumi:"vdomparam"`
}

// NewLogGuiDisplay registers a new resource with the given unique name, arguments, and options.
func NewLogGuiDisplay(ctx *pulumi.Context,
	name string, args *LogGuiDisplayArgs, opts ...pulumi.ResourceOption) (*LogGuiDisplay, error) {
	if args == nil {
		args = &LogGuiDisplayArgs{}
	}

	opts = pkgResourceDefaultOpts(opts)
	var resource LogGuiDisplay
	err := ctx.RegisterResource("fortios:index/logGuiDisplay:LogGuiDisplay", name, args, &resource, opts...)
	if err != nil {
		return nil, err
	}
	return &resource, nil
}

// GetLogGuiDisplay gets an existing LogGuiDisplay resource's state with the given name, ID, and optional
// state properties that are used to uniquely qualify the lookup (nil if not required).
func GetLogGuiDisplay(ctx *pulumi.Context,
	name string, id pulumi.IDInput, state *LogGuiDisplayState, opts ...pulumi.ResourceOption) (*LogGuiDisplay, error) {
	var resource LogGuiDisplay
	err := ctx.ReadResource("fortios:index/logGuiDisplay:LogGuiDisplay", name, id, state, &resource, opts...)
	if err != nil {
		return nil, err
	}
	return &resource, nil
}

// Input properties used for looking up and filtering LogGuiDisplay resources.
type logGuiDisplayState struct {
	// Enable/disable showing unscanned traffic in FortiView application charts. Valid values: `enable`, `disable`.
	FortiviewUnscannedApps *string `pulumi:"fortiviewUnscannedApps"`
	// Resolve unknown applications on the GUI using Fortinet's remote application database. Valid values: `enable`, `disable`.
	ResolveApps *string `pulumi:"resolveApps"`
	// Enable/disable resolving IP addresses to hostname in log messages on the GUI using reverse DNS lookup Valid values: `enable`, `disable`.
	ResolveHosts *string `pulumi:"resolveHosts"`
	// Specifies the vdom to which the resource will be applied when the FortiGate unit is running in VDOM mode. Only one vdom can be specified. If you want to inherit the vdom configuration of the provider, please do not set this parameter.
	Vdomparam *string `pulumi:"vdomparam"`
}

type LogGuiDisplayState struct {
	// Enable/disable showing unscanned traffic in FortiView application charts. Valid values: `enable`, `disable`.
	FortiviewUnscannedApps pulumi.StringPtrInput
	// Resolve unknown applications on the GUI using Fortinet's remote application database. Valid values: `enable`, `disable`.
	ResolveApps pulumi.StringPtrInput
	// Enable/disable resolving IP addresses to hostname in log messages on the GUI using reverse DNS lookup Valid values: `enable`, `disable`.
	ResolveHosts pulumi.StringPtrInput
	// Specifies the vdom to which the resource will be applied when the FortiGate unit is running in VDOM mode. Only one vdom can be specified. If you want to inherit the vdom configuration of the provider, please do not set this parameter.
	Vdomparam pulumi.StringPtrInput
}

func (LogGuiDisplayState) ElementType() reflect.Type {
	return reflect.TypeOf((*logGuiDisplayState)(nil)).Elem()
}

type logGuiDisplayArgs struct {
	// Enable/disable showing unscanned traffic in FortiView application charts. Valid values: `enable`, `disable`.
	FortiviewUnscannedApps *string `pulumi:"fortiviewUnscannedApps"`
	// Resolve unknown applications on the GUI using Fortinet's remote application database. Valid values: `enable`, `disable`.
	ResolveApps *string `pulumi:"resolveApps"`
	// Enable/disable resolving IP addresses to hostname in log messages on the GUI using reverse DNS lookup Valid values: `enable`, `disable`.
	ResolveHosts *string `pulumi:"resolveHosts"`
	// Specifies the vdom to which the resource will be applied when the FortiGate unit is running in VDOM mode. Only one vdom can be specified. If you want to inherit the vdom configuration of the provider, please do not set this parameter.
	Vdomparam *string `pulumi:"vdomparam"`
}

// The set of arguments for constructing a LogGuiDisplay resource.
type LogGuiDisplayArgs struct {
	// Enable/disable showing unscanned traffic in FortiView application charts. Valid values: `enable`, `disable`.
	FortiviewUnscannedApps pulumi.StringPtrInput
	// Resolve unknown applications on the GUI using Fortinet's remote application database. Valid values: `enable`, `disable`.
	ResolveApps pulumi.StringPtrInput
	// Enable/disable resolving IP addresses to hostname in log messages on the GUI using reverse DNS lookup Valid values: `enable`, `disable`.
	ResolveHosts pulumi.StringPtrInput
	// Specifies the vdom to which the resource will be applied when the FortiGate unit is running in VDOM mode. Only one vdom can be specified. If you want to inherit the vdom configuration of the provider, please do not set this parameter.
	Vdomparam pulumi.StringPtrInput
}

func (LogGuiDisplayArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*logGuiDisplayArgs)(nil)).Elem()
}

type LogGuiDisplayInput interface {
	pulumi.Input

	ToLogGuiDisplayOutput() LogGuiDisplayOutput
	ToLogGuiDisplayOutputWithContext(ctx context.Context) LogGuiDisplayOutput
}

func (*LogGuiDisplay) ElementType() reflect.Type {
	return reflect.TypeOf((**LogGuiDisplay)(nil)).Elem()
}

func (i *LogGuiDisplay) ToLogGuiDisplayOutput() LogGuiDisplayOutput {
	return i.ToLogGuiDisplayOutputWithContext(context.Background())
}

func (i *LogGuiDisplay) ToLogGuiDisplayOutputWithContext(ctx context.Context) LogGuiDisplayOutput {
	return pulumi.ToOutputWithContext(ctx, i).(LogGuiDisplayOutput)
}

// LogGuiDisplayArrayInput is an input type that accepts LogGuiDisplayArray and LogGuiDisplayArrayOutput values.
// You can construct a concrete instance of `LogGuiDisplayArrayInput` via:
//
//          LogGuiDisplayArray{ LogGuiDisplayArgs{...} }
type LogGuiDisplayArrayInput interface {
	pulumi.Input

	ToLogGuiDisplayArrayOutput() LogGuiDisplayArrayOutput
	ToLogGuiDisplayArrayOutputWithContext(context.Context) LogGuiDisplayArrayOutput
}

type LogGuiDisplayArray []LogGuiDisplayInput

func (LogGuiDisplayArray) ElementType() reflect.Type {
	return reflect.TypeOf((*[]*LogGuiDisplay)(nil)).Elem()
}

func (i LogGuiDisplayArray) ToLogGuiDisplayArrayOutput() LogGuiDisplayArrayOutput {
	return i.ToLogGuiDisplayArrayOutputWithContext(context.Background())
}

func (i LogGuiDisplayArray) ToLogGuiDisplayArrayOutputWithContext(ctx context.Context) LogGuiDisplayArrayOutput {
	return pulumi.ToOutputWithContext(ctx, i).(LogGuiDisplayArrayOutput)
}

// LogGuiDisplayMapInput is an input type that accepts LogGuiDisplayMap and LogGuiDisplayMapOutput values.
// You can construct a concrete instance of `LogGuiDisplayMapInput` via:
//
//          LogGuiDisplayMap{ "key": LogGuiDisplayArgs{...} }
type LogGuiDisplayMapInput interface {
	pulumi.Input

	ToLogGuiDisplayMapOutput() LogGuiDisplayMapOutput
	ToLogGuiDisplayMapOutputWithContext(context.Context) LogGuiDisplayMapOutput
}

type LogGuiDisplayMap map[string]LogGuiDisplayInput

func (LogGuiDisplayMap) ElementType() reflect.Type {
	return reflect.TypeOf((*map[string]*LogGuiDisplay)(nil)).Elem()
}

func (i LogGuiDisplayMap) ToLogGuiDisplayMapOutput() LogGuiDisplayMapOutput {
	return i.ToLogGuiDisplayMapOutputWithContext(context.Background())
}

func (i LogGuiDisplayMap) ToLogGuiDisplayMapOutputWithContext(ctx context.Context) LogGuiDisplayMapOutput {
	return pulumi.ToOutputWithContext(ctx, i).(LogGuiDisplayMapOutput)
}

type LogGuiDisplayOutput struct{ *pulumi.OutputState }

func (LogGuiDisplayOutput) ElementType() reflect.Type {
	return reflect.TypeOf((**LogGuiDisplay)(nil)).Elem()
}

func (o LogGuiDisplayOutput) ToLogGuiDisplayOutput() LogGuiDisplayOutput {
	return o
}

func (o LogGuiDisplayOutput) ToLogGuiDisplayOutputWithContext(ctx context.Context) LogGuiDisplayOutput {
	return o
}

type LogGuiDisplayArrayOutput struct{ *pulumi.OutputState }

func (LogGuiDisplayArrayOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*[]*LogGuiDisplay)(nil)).Elem()
}

func (o LogGuiDisplayArrayOutput) ToLogGuiDisplayArrayOutput() LogGuiDisplayArrayOutput {
	return o
}

func (o LogGuiDisplayArrayOutput) ToLogGuiDisplayArrayOutputWithContext(ctx context.Context) LogGuiDisplayArrayOutput {
	return o
}

func (o LogGuiDisplayArrayOutput) Index(i pulumi.IntInput) LogGuiDisplayOutput {
	return pulumi.All(o, i).ApplyT(func(vs []interface{}) *LogGuiDisplay {
		return vs[0].([]*LogGuiDisplay)[vs[1].(int)]
	}).(LogGuiDisplayOutput)
}

type LogGuiDisplayMapOutput struct{ *pulumi.OutputState }

func (LogGuiDisplayMapOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*map[string]*LogGuiDisplay)(nil)).Elem()
}

func (o LogGuiDisplayMapOutput) ToLogGuiDisplayMapOutput() LogGuiDisplayMapOutput {
	return o
}

func (o LogGuiDisplayMapOutput) ToLogGuiDisplayMapOutputWithContext(ctx context.Context) LogGuiDisplayMapOutput {
	return o
}

func (o LogGuiDisplayMapOutput) MapIndex(k pulumi.StringInput) LogGuiDisplayOutput {
	return pulumi.All(o, k).ApplyT(func(vs []interface{}) *LogGuiDisplay {
		return vs[0].(map[string]*LogGuiDisplay)[vs[1].(string)]
	}).(LogGuiDisplayOutput)
}

func init() {
	pulumi.RegisterInputType(reflect.TypeOf((*LogGuiDisplayInput)(nil)).Elem(), &LogGuiDisplay{})
	pulumi.RegisterInputType(reflect.TypeOf((*LogGuiDisplayArrayInput)(nil)).Elem(), LogGuiDisplayArray{})
	pulumi.RegisterInputType(reflect.TypeOf((*LogGuiDisplayMapInput)(nil)).Elem(), LogGuiDisplayMap{})
	pulumi.RegisterOutputType(LogGuiDisplayOutput{})
	pulumi.RegisterOutputType(LogGuiDisplayArrayOutput{})
	pulumi.RegisterOutputType(LogGuiDisplayMapOutput{})
}
