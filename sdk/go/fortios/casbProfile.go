// Code generated by the Pulumi Terraform Bridge (tfgen) Tool DO NOT EDIT.
// *** WARNING: Do not edit by hand unless you're certain you know what you are doing! ***

package fortios

import (
	"context"
	"reflect"

	"github.com/lubyou/pulumi-fortios/sdk/go/fortios/internal"
	"github.com/pulumi/pulumi/sdk/v3/go/pulumi"
	"github.com/pulumi/pulumi/sdk/v3/go/pulumix"
)

type CasbProfile struct {
	pulumi.CustomResourceState

	DynamicSortSubtable pulumi.StringPtrOutput                `pulumi:"dynamicSortSubtable"`
	GetAllTables        pulumi.StringPtrOutput                `pulumi:"getAllTables"`
	Name                pulumi.StringOutput                   `pulumi:"name"`
	SaasApplications    CasbProfileSaasApplicationArrayOutput `pulumi:"saasApplications"`
	Vdomparam           pulumi.StringPtrOutput                `pulumi:"vdomparam"`
}

// NewCasbProfile registers a new resource with the given unique name, arguments, and options.
func NewCasbProfile(ctx *pulumi.Context,
	name string, args *CasbProfileArgs, opts ...pulumi.ResourceOption) (*CasbProfile, error) {
	if args == nil {
		args = &CasbProfileArgs{}
	}

	opts = internal.PkgResourceDefaultOpts(opts)
	var resource CasbProfile
	err := ctx.RegisterResource("fortios:index/casbProfile:CasbProfile", name, args, &resource, opts...)
	if err != nil {
		return nil, err
	}
	return &resource, nil
}

// GetCasbProfile gets an existing CasbProfile resource's state with the given name, ID, and optional
// state properties that are used to uniquely qualify the lookup (nil if not required).
func GetCasbProfile(ctx *pulumi.Context,
	name string, id pulumi.IDInput, state *CasbProfileState, opts ...pulumi.ResourceOption) (*CasbProfile, error) {
	var resource CasbProfile
	err := ctx.ReadResource("fortios:index/casbProfile:CasbProfile", name, id, state, &resource, opts...)
	if err != nil {
		return nil, err
	}
	return &resource, nil
}

// Input properties used for looking up and filtering CasbProfile resources.
type casbProfileState struct {
	DynamicSortSubtable *string                      `pulumi:"dynamicSortSubtable"`
	GetAllTables        *string                      `pulumi:"getAllTables"`
	Name                *string                      `pulumi:"name"`
	SaasApplications    []CasbProfileSaasApplication `pulumi:"saasApplications"`
	Vdomparam           *string                      `pulumi:"vdomparam"`
}

type CasbProfileState struct {
	DynamicSortSubtable pulumi.StringPtrInput
	GetAllTables        pulumi.StringPtrInput
	Name                pulumi.StringPtrInput
	SaasApplications    CasbProfileSaasApplicationArrayInput
	Vdomparam           pulumi.StringPtrInput
}

func (CasbProfileState) ElementType() reflect.Type {
	return reflect.TypeOf((*casbProfileState)(nil)).Elem()
}

type casbProfileArgs struct {
	DynamicSortSubtable *string                      `pulumi:"dynamicSortSubtable"`
	GetAllTables        *string                      `pulumi:"getAllTables"`
	Name                *string                      `pulumi:"name"`
	SaasApplications    []CasbProfileSaasApplication `pulumi:"saasApplications"`
	Vdomparam           *string                      `pulumi:"vdomparam"`
}

// The set of arguments for constructing a CasbProfile resource.
type CasbProfileArgs struct {
	DynamicSortSubtable pulumi.StringPtrInput
	GetAllTables        pulumi.StringPtrInput
	Name                pulumi.StringPtrInput
	SaasApplications    CasbProfileSaasApplicationArrayInput
	Vdomparam           pulumi.StringPtrInput
}

func (CasbProfileArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*casbProfileArgs)(nil)).Elem()
}

type CasbProfileInput interface {
	pulumi.Input

	ToCasbProfileOutput() CasbProfileOutput
	ToCasbProfileOutputWithContext(ctx context.Context) CasbProfileOutput
}

func (*CasbProfile) ElementType() reflect.Type {
	return reflect.TypeOf((**CasbProfile)(nil)).Elem()
}

func (i *CasbProfile) ToCasbProfileOutput() CasbProfileOutput {
	return i.ToCasbProfileOutputWithContext(context.Background())
}

func (i *CasbProfile) ToCasbProfileOutputWithContext(ctx context.Context) CasbProfileOutput {
	return pulumi.ToOutputWithContext(ctx, i).(CasbProfileOutput)
}

func (i *CasbProfile) ToOutput(ctx context.Context) pulumix.Output[*CasbProfile] {
	return pulumix.Output[*CasbProfile]{
		OutputState: i.ToCasbProfileOutputWithContext(ctx).OutputState,
	}
}

// CasbProfileArrayInput is an input type that accepts CasbProfileArray and CasbProfileArrayOutput values.
// You can construct a concrete instance of `CasbProfileArrayInput` via:
//
//	CasbProfileArray{ CasbProfileArgs{...} }
type CasbProfileArrayInput interface {
	pulumi.Input

	ToCasbProfileArrayOutput() CasbProfileArrayOutput
	ToCasbProfileArrayOutputWithContext(context.Context) CasbProfileArrayOutput
}

type CasbProfileArray []CasbProfileInput

func (CasbProfileArray) ElementType() reflect.Type {
	return reflect.TypeOf((*[]*CasbProfile)(nil)).Elem()
}

func (i CasbProfileArray) ToCasbProfileArrayOutput() CasbProfileArrayOutput {
	return i.ToCasbProfileArrayOutputWithContext(context.Background())
}

func (i CasbProfileArray) ToCasbProfileArrayOutputWithContext(ctx context.Context) CasbProfileArrayOutput {
	return pulumi.ToOutputWithContext(ctx, i).(CasbProfileArrayOutput)
}

func (i CasbProfileArray) ToOutput(ctx context.Context) pulumix.Output[[]*CasbProfile] {
	return pulumix.Output[[]*CasbProfile]{
		OutputState: i.ToCasbProfileArrayOutputWithContext(ctx).OutputState,
	}
}

// CasbProfileMapInput is an input type that accepts CasbProfileMap and CasbProfileMapOutput values.
// You can construct a concrete instance of `CasbProfileMapInput` via:
//
//	CasbProfileMap{ "key": CasbProfileArgs{...} }
type CasbProfileMapInput interface {
	pulumi.Input

	ToCasbProfileMapOutput() CasbProfileMapOutput
	ToCasbProfileMapOutputWithContext(context.Context) CasbProfileMapOutput
}

type CasbProfileMap map[string]CasbProfileInput

func (CasbProfileMap) ElementType() reflect.Type {
	return reflect.TypeOf((*map[string]*CasbProfile)(nil)).Elem()
}

func (i CasbProfileMap) ToCasbProfileMapOutput() CasbProfileMapOutput {
	return i.ToCasbProfileMapOutputWithContext(context.Background())
}

func (i CasbProfileMap) ToCasbProfileMapOutputWithContext(ctx context.Context) CasbProfileMapOutput {
	return pulumi.ToOutputWithContext(ctx, i).(CasbProfileMapOutput)
}

func (i CasbProfileMap) ToOutput(ctx context.Context) pulumix.Output[map[string]*CasbProfile] {
	return pulumix.Output[map[string]*CasbProfile]{
		OutputState: i.ToCasbProfileMapOutputWithContext(ctx).OutputState,
	}
}

type CasbProfileOutput struct{ *pulumi.OutputState }

func (CasbProfileOutput) ElementType() reflect.Type {
	return reflect.TypeOf((**CasbProfile)(nil)).Elem()
}

func (o CasbProfileOutput) ToCasbProfileOutput() CasbProfileOutput {
	return o
}

func (o CasbProfileOutput) ToCasbProfileOutputWithContext(ctx context.Context) CasbProfileOutput {
	return o
}

func (o CasbProfileOutput) ToOutput(ctx context.Context) pulumix.Output[*CasbProfile] {
	return pulumix.Output[*CasbProfile]{
		OutputState: o.OutputState,
	}
}

func (o CasbProfileOutput) DynamicSortSubtable() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *CasbProfile) pulumi.StringPtrOutput { return v.DynamicSortSubtable }).(pulumi.StringPtrOutput)
}

func (o CasbProfileOutput) GetAllTables() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *CasbProfile) pulumi.StringPtrOutput { return v.GetAllTables }).(pulumi.StringPtrOutput)
}

func (o CasbProfileOutput) Name() pulumi.StringOutput {
	return o.ApplyT(func(v *CasbProfile) pulumi.StringOutput { return v.Name }).(pulumi.StringOutput)
}

func (o CasbProfileOutput) SaasApplications() CasbProfileSaasApplicationArrayOutput {
	return o.ApplyT(func(v *CasbProfile) CasbProfileSaasApplicationArrayOutput { return v.SaasApplications }).(CasbProfileSaasApplicationArrayOutput)
}

func (o CasbProfileOutput) Vdomparam() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *CasbProfile) pulumi.StringPtrOutput { return v.Vdomparam }).(pulumi.StringPtrOutput)
}

type CasbProfileArrayOutput struct{ *pulumi.OutputState }

func (CasbProfileArrayOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*[]*CasbProfile)(nil)).Elem()
}

func (o CasbProfileArrayOutput) ToCasbProfileArrayOutput() CasbProfileArrayOutput {
	return o
}

func (o CasbProfileArrayOutput) ToCasbProfileArrayOutputWithContext(ctx context.Context) CasbProfileArrayOutput {
	return o
}

func (o CasbProfileArrayOutput) ToOutput(ctx context.Context) pulumix.Output[[]*CasbProfile] {
	return pulumix.Output[[]*CasbProfile]{
		OutputState: o.OutputState,
	}
}

func (o CasbProfileArrayOutput) Index(i pulumi.IntInput) CasbProfileOutput {
	return pulumi.All(o, i).ApplyT(func(vs []interface{}) *CasbProfile {
		return vs[0].([]*CasbProfile)[vs[1].(int)]
	}).(CasbProfileOutput)
}

type CasbProfileMapOutput struct{ *pulumi.OutputState }

func (CasbProfileMapOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*map[string]*CasbProfile)(nil)).Elem()
}

func (o CasbProfileMapOutput) ToCasbProfileMapOutput() CasbProfileMapOutput {
	return o
}

func (o CasbProfileMapOutput) ToCasbProfileMapOutputWithContext(ctx context.Context) CasbProfileMapOutput {
	return o
}

func (o CasbProfileMapOutput) ToOutput(ctx context.Context) pulumix.Output[map[string]*CasbProfile] {
	return pulumix.Output[map[string]*CasbProfile]{
		OutputState: o.OutputState,
	}
}

func (o CasbProfileMapOutput) MapIndex(k pulumi.StringInput) CasbProfileOutput {
	return pulumi.All(o, k).ApplyT(func(vs []interface{}) *CasbProfile {
		return vs[0].(map[string]*CasbProfile)[vs[1].(string)]
	}).(CasbProfileOutput)
}

func init() {
	pulumi.RegisterInputType(reflect.TypeOf((*CasbProfileInput)(nil)).Elem(), &CasbProfile{})
	pulumi.RegisterInputType(reflect.TypeOf((*CasbProfileArrayInput)(nil)).Elem(), CasbProfileArray{})
	pulumi.RegisterInputType(reflect.TypeOf((*CasbProfileMapInput)(nil)).Elem(), CasbProfileMap{})
	pulumi.RegisterOutputType(CasbProfileOutput{})
	pulumi.RegisterOutputType(CasbProfileArrayOutput{})
	pulumi.RegisterOutputType(CasbProfileMapOutput{})
}
