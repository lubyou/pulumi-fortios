// Code generated by the Pulumi Terraform Bridge (tfgen) Tool DO NOT EDIT.
// *** WARNING: Do not edit by hand unless you're certain you know what you are doing! ***

package fortios

import (
	"context"
	"reflect"

	"github.com/lubyou/pulumi-fortios/sdk/go/fortios/internal"
	"github.com/pulumi/pulumi/sdk/v3/go/pulumi"
)

type VpnSslClient struct {
	pulumi.CustomResourceState

	Certificate pulumi.StringOutput    `pulumi:"certificate"`
	ClassId     pulumi.IntOutput       `pulumi:"classId"`
	Comment     pulumi.StringPtrOutput `pulumi:"comment"`
	Distance    pulumi.IntOutput       `pulumi:"distance"`
	Interface   pulumi.StringOutput    `pulumi:"interface"`
	Ipv4Subnets pulumi.StringOutput    `pulumi:"ipv4Subnets"`
	Ipv6Subnets pulumi.StringOutput    `pulumi:"ipv6Subnets"`
	Name        pulumi.StringOutput    `pulumi:"name"`
	Peer        pulumi.StringOutput    `pulumi:"peer"`
	Port        pulumi.IntOutput       `pulumi:"port"`
	Priority    pulumi.IntOutput       `pulumi:"priority"`
	Psk         pulumi.StringPtrOutput `pulumi:"psk"`
	Realm       pulumi.StringOutput    `pulumi:"realm"`
	Server      pulumi.StringOutput    `pulumi:"server"`
	SourceIp    pulumi.StringOutput    `pulumi:"sourceIp"`
	Status      pulumi.StringOutput    `pulumi:"status"`
	User        pulumi.StringOutput    `pulumi:"user"`
	Vdomparam   pulumi.StringPtrOutput `pulumi:"vdomparam"`
}

// NewVpnSslClient registers a new resource with the given unique name, arguments, and options.
func NewVpnSslClient(ctx *pulumi.Context,
	name string, args *VpnSslClientArgs, opts ...pulumi.ResourceOption) (*VpnSslClient, error) {
	if args == nil {
		args = &VpnSslClientArgs{}
	}

	opts = internal.PkgResourceDefaultOpts(opts)
	var resource VpnSslClient
	err := ctx.RegisterResource("fortios:index/vpnSslClient:VpnSslClient", name, args, &resource, opts...)
	if err != nil {
		return nil, err
	}
	return &resource, nil
}

// GetVpnSslClient gets an existing VpnSslClient resource's state with the given name, ID, and optional
// state properties that are used to uniquely qualify the lookup (nil if not required).
func GetVpnSslClient(ctx *pulumi.Context,
	name string, id pulumi.IDInput, state *VpnSslClientState, opts ...pulumi.ResourceOption) (*VpnSslClient, error) {
	var resource VpnSslClient
	err := ctx.ReadResource("fortios:index/vpnSslClient:VpnSslClient", name, id, state, &resource, opts...)
	if err != nil {
		return nil, err
	}
	return &resource, nil
}

// Input properties used for looking up and filtering VpnSslClient resources.
type vpnSslClientState struct {
	Certificate *string `pulumi:"certificate"`
	ClassId     *int    `pulumi:"classId"`
	Comment     *string `pulumi:"comment"`
	Distance    *int    `pulumi:"distance"`
	Interface   *string `pulumi:"interface"`
	Ipv4Subnets *string `pulumi:"ipv4Subnets"`
	Ipv6Subnets *string `pulumi:"ipv6Subnets"`
	Name        *string `pulumi:"name"`
	Peer        *string `pulumi:"peer"`
	Port        *int    `pulumi:"port"`
	Priority    *int    `pulumi:"priority"`
	Psk         *string `pulumi:"psk"`
	Realm       *string `pulumi:"realm"`
	Server      *string `pulumi:"server"`
	SourceIp    *string `pulumi:"sourceIp"`
	Status      *string `pulumi:"status"`
	User        *string `pulumi:"user"`
	Vdomparam   *string `pulumi:"vdomparam"`
}

type VpnSslClientState struct {
	Certificate pulumi.StringPtrInput
	ClassId     pulumi.IntPtrInput
	Comment     pulumi.StringPtrInput
	Distance    pulumi.IntPtrInput
	Interface   pulumi.StringPtrInput
	Ipv4Subnets pulumi.StringPtrInput
	Ipv6Subnets pulumi.StringPtrInput
	Name        pulumi.StringPtrInput
	Peer        pulumi.StringPtrInput
	Port        pulumi.IntPtrInput
	Priority    pulumi.IntPtrInput
	Psk         pulumi.StringPtrInput
	Realm       pulumi.StringPtrInput
	Server      pulumi.StringPtrInput
	SourceIp    pulumi.StringPtrInput
	Status      pulumi.StringPtrInput
	User        pulumi.StringPtrInput
	Vdomparam   pulumi.StringPtrInput
}

func (VpnSslClientState) ElementType() reflect.Type {
	return reflect.TypeOf((*vpnSslClientState)(nil)).Elem()
}

type vpnSslClientArgs struct {
	Certificate *string `pulumi:"certificate"`
	ClassId     *int    `pulumi:"classId"`
	Comment     *string `pulumi:"comment"`
	Distance    *int    `pulumi:"distance"`
	Interface   *string `pulumi:"interface"`
	Ipv4Subnets *string `pulumi:"ipv4Subnets"`
	Ipv6Subnets *string `pulumi:"ipv6Subnets"`
	Name        *string `pulumi:"name"`
	Peer        *string `pulumi:"peer"`
	Port        *int    `pulumi:"port"`
	Priority    *int    `pulumi:"priority"`
	Psk         *string `pulumi:"psk"`
	Realm       *string `pulumi:"realm"`
	Server      *string `pulumi:"server"`
	SourceIp    *string `pulumi:"sourceIp"`
	Status      *string `pulumi:"status"`
	User        *string `pulumi:"user"`
	Vdomparam   *string `pulumi:"vdomparam"`
}

// The set of arguments for constructing a VpnSslClient resource.
type VpnSslClientArgs struct {
	Certificate pulumi.StringPtrInput
	ClassId     pulumi.IntPtrInput
	Comment     pulumi.StringPtrInput
	Distance    pulumi.IntPtrInput
	Interface   pulumi.StringPtrInput
	Ipv4Subnets pulumi.StringPtrInput
	Ipv6Subnets pulumi.StringPtrInput
	Name        pulumi.StringPtrInput
	Peer        pulumi.StringPtrInput
	Port        pulumi.IntPtrInput
	Priority    pulumi.IntPtrInput
	Psk         pulumi.StringPtrInput
	Realm       pulumi.StringPtrInput
	Server      pulumi.StringPtrInput
	SourceIp    pulumi.StringPtrInput
	Status      pulumi.StringPtrInput
	User        pulumi.StringPtrInput
	Vdomparam   pulumi.StringPtrInput
}

func (VpnSslClientArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*vpnSslClientArgs)(nil)).Elem()
}

type VpnSslClientInput interface {
	pulumi.Input

	ToVpnSslClientOutput() VpnSslClientOutput
	ToVpnSslClientOutputWithContext(ctx context.Context) VpnSslClientOutput
}

func (*VpnSslClient) ElementType() reflect.Type {
	return reflect.TypeOf((**VpnSslClient)(nil)).Elem()
}

func (i *VpnSslClient) ToVpnSslClientOutput() VpnSslClientOutput {
	return i.ToVpnSslClientOutputWithContext(context.Background())
}

func (i *VpnSslClient) ToVpnSslClientOutputWithContext(ctx context.Context) VpnSslClientOutput {
	return pulumi.ToOutputWithContext(ctx, i).(VpnSslClientOutput)
}

// VpnSslClientArrayInput is an input type that accepts VpnSslClientArray and VpnSslClientArrayOutput values.
// You can construct a concrete instance of `VpnSslClientArrayInput` via:
//
//	VpnSslClientArray{ VpnSslClientArgs{...} }
type VpnSslClientArrayInput interface {
	pulumi.Input

	ToVpnSslClientArrayOutput() VpnSslClientArrayOutput
	ToVpnSslClientArrayOutputWithContext(context.Context) VpnSslClientArrayOutput
}

type VpnSslClientArray []VpnSslClientInput

func (VpnSslClientArray) ElementType() reflect.Type {
	return reflect.TypeOf((*[]*VpnSslClient)(nil)).Elem()
}

func (i VpnSslClientArray) ToVpnSslClientArrayOutput() VpnSslClientArrayOutput {
	return i.ToVpnSslClientArrayOutputWithContext(context.Background())
}

func (i VpnSslClientArray) ToVpnSslClientArrayOutputWithContext(ctx context.Context) VpnSslClientArrayOutput {
	return pulumi.ToOutputWithContext(ctx, i).(VpnSslClientArrayOutput)
}

// VpnSslClientMapInput is an input type that accepts VpnSslClientMap and VpnSslClientMapOutput values.
// You can construct a concrete instance of `VpnSslClientMapInput` via:
//
//	VpnSslClientMap{ "key": VpnSslClientArgs{...} }
type VpnSslClientMapInput interface {
	pulumi.Input

	ToVpnSslClientMapOutput() VpnSslClientMapOutput
	ToVpnSslClientMapOutputWithContext(context.Context) VpnSslClientMapOutput
}

type VpnSslClientMap map[string]VpnSslClientInput

func (VpnSslClientMap) ElementType() reflect.Type {
	return reflect.TypeOf((*map[string]*VpnSslClient)(nil)).Elem()
}

func (i VpnSslClientMap) ToVpnSslClientMapOutput() VpnSslClientMapOutput {
	return i.ToVpnSslClientMapOutputWithContext(context.Background())
}

func (i VpnSslClientMap) ToVpnSslClientMapOutputWithContext(ctx context.Context) VpnSslClientMapOutput {
	return pulumi.ToOutputWithContext(ctx, i).(VpnSslClientMapOutput)
}

type VpnSslClientOutput struct{ *pulumi.OutputState }

func (VpnSslClientOutput) ElementType() reflect.Type {
	return reflect.TypeOf((**VpnSslClient)(nil)).Elem()
}

func (o VpnSslClientOutput) ToVpnSslClientOutput() VpnSslClientOutput {
	return o
}

func (o VpnSslClientOutput) ToVpnSslClientOutputWithContext(ctx context.Context) VpnSslClientOutput {
	return o
}

func (o VpnSslClientOutput) Certificate() pulumi.StringOutput {
	return o.ApplyT(func(v *VpnSslClient) pulumi.StringOutput { return v.Certificate }).(pulumi.StringOutput)
}

func (o VpnSslClientOutput) ClassId() pulumi.IntOutput {
	return o.ApplyT(func(v *VpnSslClient) pulumi.IntOutput { return v.ClassId }).(pulumi.IntOutput)
}

func (o VpnSslClientOutput) Comment() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *VpnSslClient) pulumi.StringPtrOutput { return v.Comment }).(pulumi.StringPtrOutput)
}

func (o VpnSslClientOutput) Distance() pulumi.IntOutput {
	return o.ApplyT(func(v *VpnSslClient) pulumi.IntOutput { return v.Distance }).(pulumi.IntOutput)
}

func (o VpnSslClientOutput) Interface() pulumi.StringOutput {
	return o.ApplyT(func(v *VpnSslClient) pulumi.StringOutput { return v.Interface }).(pulumi.StringOutput)
}

func (o VpnSslClientOutput) Ipv4Subnets() pulumi.StringOutput {
	return o.ApplyT(func(v *VpnSslClient) pulumi.StringOutput { return v.Ipv4Subnets }).(pulumi.StringOutput)
}

func (o VpnSslClientOutput) Ipv6Subnets() pulumi.StringOutput {
	return o.ApplyT(func(v *VpnSslClient) pulumi.StringOutput { return v.Ipv6Subnets }).(pulumi.StringOutput)
}

func (o VpnSslClientOutput) Name() pulumi.StringOutput {
	return o.ApplyT(func(v *VpnSslClient) pulumi.StringOutput { return v.Name }).(pulumi.StringOutput)
}

func (o VpnSslClientOutput) Peer() pulumi.StringOutput {
	return o.ApplyT(func(v *VpnSslClient) pulumi.StringOutput { return v.Peer }).(pulumi.StringOutput)
}

func (o VpnSslClientOutput) Port() pulumi.IntOutput {
	return o.ApplyT(func(v *VpnSslClient) pulumi.IntOutput { return v.Port }).(pulumi.IntOutput)
}

func (o VpnSslClientOutput) Priority() pulumi.IntOutput {
	return o.ApplyT(func(v *VpnSslClient) pulumi.IntOutput { return v.Priority }).(pulumi.IntOutput)
}

func (o VpnSslClientOutput) Psk() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *VpnSslClient) pulumi.StringPtrOutput { return v.Psk }).(pulumi.StringPtrOutput)
}

func (o VpnSslClientOutput) Realm() pulumi.StringOutput {
	return o.ApplyT(func(v *VpnSslClient) pulumi.StringOutput { return v.Realm }).(pulumi.StringOutput)
}

func (o VpnSslClientOutput) Server() pulumi.StringOutput {
	return o.ApplyT(func(v *VpnSslClient) pulumi.StringOutput { return v.Server }).(pulumi.StringOutput)
}

func (o VpnSslClientOutput) SourceIp() pulumi.StringOutput {
	return o.ApplyT(func(v *VpnSslClient) pulumi.StringOutput { return v.SourceIp }).(pulumi.StringOutput)
}

func (o VpnSslClientOutput) Status() pulumi.StringOutput {
	return o.ApplyT(func(v *VpnSslClient) pulumi.StringOutput { return v.Status }).(pulumi.StringOutput)
}

func (o VpnSslClientOutput) User() pulumi.StringOutput {
	return o.ApplyT(func(v *VpnSslClient) pulumi.StringOutput { return v.User }).(pulumi.StringOutput)
}

func (o VpnSslClientOutput) Vdomparam() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *VpnSslClient) pulumi.StringPtrOutput { return v.Vdomparam }).(pulumi.StringPtrOutput)
}

type VpnSslClientArrayOutput struct{ *pulumi.OutputState }

func (VpnSslClientArrayOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*[]*VpnSslClient)(nil)).Elem()
}

func (o VpnSslClientArrayOutput) ToVpnSslClientArrayOutput() VpnSslClientArrayOutput {
	return o
}

func (o VpnSslClientArrayOutput) ToVpnSslClientArrayOutputWithContext(ctx context.Context) VpnSslClientArrayOutput {
	return o
}

func (o VpnSslClientArrayOutput) Index(i pulumi.IntInput) VpnSslClientOutput {
	return pulumi.All(o, i).ApplyT(func(vs []interface{}) *VpnSslClient {
		return vs[0].([]*VpnSslClient)[vs[1].(int)]
	}).(VpnSslClientOutput)
}

type VpnSslClientMapOutput struct{ *pulumi.OutputState }

func (VpnSslClientMapOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*map[string]*VpnSslClient)(nil)).Elem()
}

func (o VpnSslClientMapOutput) ToVpnSslClientMapOutput() VpnSslClientMapOutput {
	return o
}

func (o VpnSslClientMapOutput) ToVpnSslClientMapOutputWithContext(ctx context.Context) VpnSslClientMapOutput {
	return o
}

func (o VpnSslClientMapOutput) MapIndex(k pulumi.StringInput) VpnSslClientOutput {
	return pulumi.All(o, k).ApplyT(func(vs []interface{}) *VpnSslClient {
		return vs[0].(map[string]*VpnSslClient)[vs[1].(string)]
	}).(VpnSslClientOutput)
}

func init() {
	pulumi.RegisterInputType(reflect.TypeOf((*VpnSslClientInput)(nil)).Elem(), &VpnSslClient{})
	pulumi.RegisterInputType(reflect.TypeOf((*VpnSslClientArrayInput)(nil)).Elem(), VpnSslClientArray{})
	pulumi.RegisterInputType(reflect.TypeOf((*VpnSslClientMapInput)(nil)).Elem(), VpnSslClientMap{})
	pulumi.RegisterOutputType(VpnSslClientOutput{})
	pulumi.RegisterOutputType(VpnSslClientArrayOutput{})
	pulumi.RegisterOutputType(VpnSslClientMapOutput{})
}
