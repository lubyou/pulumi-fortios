// *** WARNING: this file was generated by the Pulumi Terraform Bridge (tfgen) Tool. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

package fortios

import (
	"context"
	"reflect"

	"github.com/pkg/errors"
	"github.com/pulumi/pulumi/sdk/v3/go/pulumi"
)

// Configure content types used by Web filter.
//
// ## Example Usage
//
// ```go
// package main
//
// import (
// 	"github.com/pulumi/pulumi-fortios/sdk/go/fortios"
// 	"github.com/pulumi/pulumi/sdk/v3/go/pulumi"
// )
//
// func main() {
// 	pulumi.Run(func(ctx *pulumi.Context) error {
// 		_, err := fortios.NewWebfilterContentHeader(ctx, "trname", &fortios.WebfilterContentHeaderArgs{
// 			Fosid: pulumi.Int(1),
// 		})
// 		if err != nil {
// 			return err
// 		}
// 		return nil
// 	})
// }
// ```
//
// ## Import
//
// Webfilter ContentHeader can be imported using any of these accepted formats
//
// ```sh
//  $ pulumi import fortios:index/webfilterContentHeader:WebfilterContentHeader labelname {{fosid}}
// ```
//
//  If you do not want to import arguments of block$ export "FORTIOS_IMPORT_TABLE"="false"
//
// ```sh
//  $ pulumi import fortios:index/webfilterContentHeader:WebfilterContentHeader labelname {{fosid}}
// ```
//
//  $ unset "FORTIOS_IMPORT_TABLE"
type WebfilterContentHeader struct {
	pulumi.CustomResourceState

	// Optional comments.
	Comment pulumi.StringPtrOutput `pulumi:"comment"`
	// true or false, set this parameter to true when using dynamic forEach + toset to configure and sort sub-tables, please do not set this parameter when configuring static sub-tables.
	DynamicSortSubtable pulumi.StringPtrOutput `pulumi:"dynamicSortSubtable"`
	// Configure content types used by web filter. The structure of `entries` block is documented below.
	Entries WebfilterContentHeaderEntryArrayOutput `pulumi:"entries"`
	// ID.
	Fosid pulumi.IntOutput `pulumi:"fosid"`
	// Name of table.
	Name pulumi.StringOutput `pulumi:"name"`
	// Specifies the vdom to which the resource will be applied when the FortiGate unit is running in VDOM mode. Only one vdom can be specified. If you want to inherit the vdom configuration of the provider, please do not set this parameter.
	Vdomparam pulumi.StringPtrOutput `pulumi:"vdomparam"`
}

// NewWebfilterContentHeader registers a new resource with the given unique name, arguments, and options.
func NewWebfilterContentHeader(ctx *pulumi.Context,
	name string, args *WebfilterContentHeaderArgs, opts ...pulumi.ResourceOption) (*WebfilterContentHeader, error) {
	if args == nil {
		return nil, errors.New("missing one or more required arguments")
	}

	if args.Fosid == nil {
		return nil, errors.New("invalid value for required argument 'Fosid'")
	}
	opts = pkgResourceDefaultOpts(opts)
	var resource WebfilterContentHeader
	err := ctx.RegisterResource("fortios:index/webfilterContentHeader:WebfilterContentHeader", name, args, &resource, opts...)
	if err != nil {
		return nil, err
	}
	return &resource, nil
}

// GetWebfilterContentHeader gets an existing WebfilterContentHeader resource's state with the given name, ID, and optional
// state properties that are used to uniquely qualify the lookup (nil if not required).
func GetWebfilterContentHeader(ctx *pulumi.Context,
	name string, id pulumi.IDInput, state *WebfilterContentHeaderState, opts ...pulumi.ResourceOption) (*WebfilterContentHeader, error) {
	var resource WebfilterContentHeader
	err := ctx.ReadResource("fortios:index/webfilterContentHeader:WebfilterContentHeader", name, id, state, &resource, opts...)
	if err != nil {
		return nil, err
	}
	return &resource, nil
}

// Input properties used for looking up and filtering WebfilterContentHeader resources.
type webfilterContentHeaderState struct {
	// Optional comments.
	Comment *string `pulumi:"comment"`
	// true or false, set this parameter to true when using dynamic forEach + toset to configure and sort sub-tables, please do not set this parameter when configuring static sub-tables.
	DynamicSortSubtable *string `pulumi:"dynamicSortSubtable"`
	// Configure content types used by web filter. The structure of `entries` block is documented below.
	Entries []WebfilterContentHeaderEntry `pulumi:"entries"`
	// ID.
	Fosid *int `pulumi:"fosid"`
	// Name of table.
	Name *string `pulumi:"name"`
	// Specifies the vdom to which the resource will be applied when the FortiGate unit is running in VDOM mode. Only one vdom can be specified. If you want to inherit the vdom configuration of the provider, please do not set this parameter.
	Vdomparam *string `pulumi:"vdomparam"`
}

type WebfilterContentHeaderState struct {
	// Optional comments.
	Comment pulumi.StringPtrInput
	// true or false, set this parameter to true when using dynamic forEach + toset to configure and sort sub-tables, please do not set this parameter when configuring static sub-tables.
	DynamicSortSubtable pulumi.StringPtrInput
	// Configure content types used by web filter. The structure of `entries` block is documented below.
	Entries WebfilterContentHeaderEntryArrayInput
	// ID.
	Fosid pulumi.IntPtrInput
	// Name of table.
	Name pulumi.StringPtrInput
	// Specifies the vdom to which the resource will be applied when the FortiGate unit is running in VDOM mode. Only one vdom can be specified. If you want to inherit the vdom configuration of the provider, please do not set this parameter.
	Vdomparam pulumi.StringPtrInput
}

func (WebfilterContentHeaderState) ElementType() reflect.Type {
	return reflect.TypeOf((*webfilterContentHeaderState)(nil)).Elem()
}

type webfilterContentHeaderArgs struct {
	// Optional comments.
	Comment *string `pulumi:"comment"`
	// true or false, set this parameter to true when using dynamic forEach + toset to configure and sort sub-tables, please do not set this parameter when configuring static sub-tables.
	DynamicSortSubtable *string `pulumi:"dynamicSortSubtable"`
	// Configure content types used by web filter. The structure of `entries` block is documented below.
	Entries []WebfilterContentHeaderEntry `pulumi:"entries"`
	// ID.
	Fosid int `pulumi:"fosid"`
	// Name of table.
	Name *string `pulumi:"name"`
	// Specifies the vdom to which the resource will be applied when the FortiGate unit is running in VDOM mode. Only one vdom can be specified. If you want to inherit the vdom configuration of the provider, please do not set this parameter.
	Vdomparam *string `pulumi:"vdomparam"`
}

// The set of arguments for constructing a WebfilterContentHeader resource.
type WebfilterContentHeaderArgs struct {
	// Optional comments.
	Comment pulumi.StringPtrInput
	// true or false, set this parameter to true when using dynamic forEach + toset to configure and sort sub-tables, please do not set this parameter when configuring static sub-tables.
	DynamicSortSubtable pulumi.StringPtrInput
	// Configure content types used by web filter. The structure of `entries` block is documented below.
	Entries WebfilterContentHeaderEntryArrayInput
	// ID.
	Fosid pulumi.IntInput
	// Name of table.
	Name pulumi.StringPtrInput
	// Specifies the vdom to which the resource will be applied when the FortiGate unit is running in VDOM mode. Only one vdom can be specified. If you want to inherit the vdom configuration of the provider, please do not set this parameter.
	Vdomparam pulumi.StringPtrInput
}

func (WebfilterContentHeaderArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*webfilterContentHeaderArgs)(nil)).Elem()
}

type WebfilterContentHeaderInput interface {
	pulumi.Input

	ToWebfilterContentHeaderOutput() WebfilterContentHeaderOutput
	ToWebfilterContentHeaderOutputWithContext(ctx context.Context) WebfilterContentHeaderOutput
}

func (*WebfilterContentHeader) ElementType() reflect.Type {
	return reflect.TypeOf((**WebfilterContentHeader)(nil)).Elem()
}

func (i *WebfilterContentHeader) ToWebfilterContentHeaderOutput() WebfilterContentHeaderOutput {
	return i.ToWebfilterContentHeaderOutputWithContext(context.Background())
}

func (i *WebfilterContentHeader) ToWebfilterContentHeaderOutputWithContext(ctx context.Context) WebfilterContentHeaderOutput {
	return pulumi.ToOutputWithContext(ctx, i).(WebfilterContentHeaderOutput)
}

// WebfilterContentHeaderArrayInput is an input type that accepts WebfilterContentHeaderArray and WebfilterContentHeaderArrayOutput values.
// You can construct a concrete instance of `WebfilterContentHeaderArrayInput` via:
//
//          WebfilterContentHeaderArray{ WebfilterContentHeaderArgs{...} }
type WebfilterContentHeaderArrayInput interface {
	pulumi.Input

	ToWebfilterContentHeaderArrayOutput() WebfilterContentHeaderArrayOutput
	ToWebfilterContentHeaderArrayOutputWithContext(context.Context) WebfilterContentHeaderArrayOutput
}

type WebfilterContentHeaderArray []WebfilterContentHeaderInput

func (WebfilterContentHeaderArray) ElementType() reflect.Type {
	return reflect.TypeOf((*[]*WebfilterContentHeader)(nil)).Elem()
}

func (i WebfilterContentHeaderArray) ToWebfilterContentHeaderArrayOutput() WebfilterContentHeaderArrayOutput {
	return i.ToWebfilterContentHeaderArrayOutputWithContext(context.Background())
}

func (i WebfilterContentHeaderArray) ToWebfilterContentHeaderArrayOutputWithContext(ctx context.Context) WebfilterContentHeaderArrayOutput {
	return pulumi.ToOutputWithContext(ctx, i).(WebfilterContentHeaderArrayOutput)
}

// WebfilterContentHeaderMapInput is an input type that accepts WebfilterContentHeaderMap and WebfilterContentHeaderMapOutput values.
// You can construct a concrete instance of `WebfilterContentHeaderMapInput` via:
//
//          WebfilterContentHeaderMap{ "key": WebfilterContentHeaderArgs{...} }
type WebfilterContentHeaderMapInput interface {
	pulumi.Input

	ToWebfilterContentHeaderMapOutput() WebfilterContentHeaderMapOutput
	ToWebfilterContentHeaderMapOutputWithContext(context.Context) WebfilterContentHeaderMapOutput
}

type WebfilterContentHeaderMap map[string]WebfilterContentHeaderInput

func (WebfilterContentHeaderMap) ElementType() reflect.Type {
	return reflect.TypeOf((*map[string]*WebfilterContentHeader)(nil)).Elem()
}

func (i WebfilterContentHeaderMap) ToWebfilterContentHeaderMapOutput() WebfilterContentHeaderMapOutput {
	return i.ToWebfilterContentHeaderMapOutputWithContext(context.Background())
}

func (i WebfilterContentHeaderMap) ToWebfilterContentHeaderMapOutputWithContext(ctx context.Context) WebfilterContentHeaderMapOutput {
	return pulumi.ToOutputWithContext(ctx, i).(WebfilterContentHeaderMapOutput)
}

type WebfilterContentHeaderOutput struct{ *pulumi.OutputState }

func (WebfilterContentHeaderOutput) ElementType() reflect.Type {
	return reflect.TypeOf((**WebfilterContentHeader)(nil)).Elem()
}

func (o WebfilterContentHeaderOutput) ToWebfilterContentHeaderOutput() WebfilterContentHeaderOutput {
	return o
}

func (o WebfilterContentHeaderOutput) ToWebfilterContentHeaderOutputWithContext(ctx context.Context) WebfilterContentHeaderOutput {
	return o
}

type WebfilterContentHeaderArrayOutput struct{ *pulumi.OutputState }

func (WebfilterContentHeaderArrayOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*[]*WebfilterContentHeader)(nil)).Elem()
}

func (o WebfilterContentHeaderArrayOutput) ToWebfilterContentHeaderArrayOutput() WebfilterContentHeaderArrayOutput {
	return o
}

func (o WebfilterContentHeaderArrayOutput) ToWebfilterContentHeaderArrayOutputWithContext(ctx context.Context) WebfilterContentHeaderArrayOutput {
	return o
}

func (o WebfilterContentHeaderArrayOutput) Index(i pulumi.IntInput) WebfilterContentHeaderOutput {
	return pulumi.All(o, i).ApplyT(func(vs []interface{}) *WebfilterContentHeader {
		return vs[0].([]*WebfilterContentHeader)[vs[1].(int)]
	}).(WebfilterContentHeaderOutput)
}

type WebfilterContentHeaderMapOutput struct{ *pulumi.OutputState }

func (WebfilterContentHeaderMapOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*map[string]*WebfilterContentHeader)(nil)).Elem()
}

func (o WebfilterContentHeaderMapOutput) ToWebfilterContentHeaderMapOutput() WebfilterContentHeaderMapOutput {
	return o
}

func (o WebfilterContentHeaderMapOutput) ToWebfilterContentHeaderMapOutputWithContext(ctx context.Context) WebfilterContentHeaderMapOutput {
	return o
}

func (o WebfilterContentHeaderMapOutput) MapIndex(k pulumi.StringInput) WebfilterContentHeaderOutput {
	return pulumi.All(o, k).ApplyT(func(vs []interface{}) *WebfilterContentHeader {
		return vs[0].(map[string]*WebfilterContentHeader)[vs[1].(string)]
	}).(WebfilterContentHeaderOutput)
}

func init() {
	pulumi.RegisterInputType(reflect.TypeOf((*WebfilterContentHeaderInput)(nil)).Elem(), &WebfilterContentHeader{})
	pulumi.RegisterInputType(reflect.TypeOf((*WebfilterContentHeaderArrayInput)(nil)).Elem(), WebfilterContentHeaderArray{})
	pulumi.RegisterInputType(reflect.TypeOf((*WebfilterContentHeaderMapInput)(nil)).Elem(), WebfilterContentHeaderMap{})
	pulumi.RegisterOutputType(WebfilterContentHeaderOutput{})
	pulumi.RegisterOutputType(WebfilterContentHeaderArrayOutput{})
	pulumi.RegisterOutputType(WebfilterContentHeaderMapOutput{})
}
