// Code generated by the Pulumi Terraform Bridge (tfgen) Tool DO NOT EDIT.
// *** WARNING: Do not edit by hand unless you're certain you know what you are doing! ***

package fortios

import (
	"context"
	"reflect"

	"errors"
	"github.com/pulumi/pulumi/sdk/v3/go/pulumi"
)

type WebfilterContentHeader struct {
	pulumi.CustomResourceState

	Comment             pulumi.StringPtrOutput                 `pulumi:"comment"`
	DynamicSortSubtable pulumi.StringPtrOutput                 `pulumi:"dynamicSortSubtable"`
	Entries             WebfilterContentHeaderEntryArrayOutput `pulumi:"entries"`
	Fosid               pulumi.IntOutput                       `pulumi:"fosid"`
	Name                pulumi.StringOutput                    `pulumi:"name"`
	Vdomparam           pulumi.StringPtrOutput                 `pulumi:"vdomparam"`
}

// NewWebfilterContentHeader registers a new resource with the given unique name, arguments, and options.
func NewWebfilterContentHeader(ctx *pulumi.Context,
	name string, args *WebfilterContentHeaderArgs, opts ...pulumi.ResourceOption) (*WebfilterContentHeader, error) {
	if args == nil {
		return nil, errors.New("missing one or more required arguments")
	}

	if args.Fosid == nil {
		return nil, errors.New("invalid value for required argument 'Fosid'")
	}
	opts = pkgResourceDefaultOpts(opts)
	var resource WebfilterContentHeader
	err := ctx.RegisterResource("fortios:index/webfilterContentHeader:WebfilterContentHeader", name, args, &resource, opts...)
	if err != nil {
		return nil, err
	}
	return &resource, nil
}

// GetWebfilterContentHeader gets an existing WebfilterContentHeader resource's state with the given name, ID, and optional
// state properties that are used to uniquely qualify the lookup (nil if not required).
func GetWebfilterContentHeader(ctx *pulumi.Context,
	name string, id pulumi.IDInput, state *WebfilterContentHeaderState, opts ...pulumi.ResourceOption) (*WebfilterContentHeader, error) {
	var resource WebfilterContentHeader
	err := ctx.ReadResource("fortios:index/webfilterContentHeader:WebfilterContentHeader", name, id, state, &resource, opts...)
	if err != nil {
		return nil, err
	}
	return &resource, nil
}

// Input properties used for looking up and filtering WebfilterContentHeader resources.
type webfilterContentHeaderState struct {
	Comment             *string                       `pulumi:"comment"`
	DynamicSortSubtable *string                       `pulumi:"dynamicSortSubtable"`
	Entries             []WebfilterContentHeaderEntry `pulumi:"entries"`
	Fosid               *int                          `pulumi:"fosid"`
	Name                *string                       `pulumi:"name"`
	Vdomparam           *string                       `pulumi:"vdomparam"`
}

type WebfilterContentHeaderState struct {
	Comment             pulumi.StringPtrInput
	DynamicSortSubtable pulumi.StringPtrInput
	Entries             WebfilterContentHeaderEntryArrayInput
	Fosid               pulumi.IntPtrInput
	Name                pulumi.StringPtrInput
	Vdomparam           pulumi.StringPtrInput
}

func (WebfilterContentHeaderState) ElementType() reflect.Type {
	return reflect.TypeOf((*webfilterContentHeaderState)(nil)).Elem()
}

type webfilterContentHeaderArgs struct {
	Comment             *string                       `pulumi:"comment"`
	DynamicSortSubtable *string                       `pulumi:"dynamicSortSubtable"`
	Entries             []WebfilterContentHeaderEntry `pulumi:"entries"`
	Fosid               int                           `pulumi:"fosid"`
	Name                *string                       `pulumi:"name"`
	Vdomparam           *string                       `pulumi:"vdomparam"`
}

// The set of arguments for constructing a WebfilterContentHeader resource.
type WebfilterContentHeaderArgs struct {
	Comment             pulumi.StringPtrInput
	DynamicSortSubtable pulumi.StringPtrInput
	Entries             WebfilterContentHeaderEntryArrayInput
	Fosid               pulumi.IntInput
	Name                pulumi.StringPtrInput
	Vdomparam           pulumi.StringPtrInput
}

func (WebfilterContentHeaderArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*webfilterContentHeaderArgs)(nil)).Elem()
}

type WebfilterContentHeaderInput interface {
	pulumi.Input

	ToWebfilterContentHeaderOutput() WebfilterContentHeaderOutput
	ToWebfilterContentHeaderOutputWithContext(ctx context.Context) WebfilterContentHeaderOutput
}

func (*WebfilterContentHeader) ElementType() reflect.Type {
	return reflect.TypeOf((**WebfilterContentHeader)(nil)).Elem()
}

func (i *WebfilterContentHeader) ToWebfilterContentHeaderOutput() WebfilterContentHeaderOutput {
	return i.ToWebfilterContentHeaderOutputWithContext(context.Background())
}

func (i *WebfilterContentHeader) ToWebfilterContentHeaderOutputWithContext(ctx context.Context) WebfilterContentHeaderOutput {
	return pulumi.ToOutputWithContext(ctx, i).(WebfilterContentHeaderOutput)
}

// WebfilterContentHeaderArrayInput is an input type that accepts WebfilterContentHeaderArray and WebfilterContentHeaderArrayOutput values.
// You can construct a concrete instance of `WebfilterContentHeaderArrayInput` via:
//
//	WebfilterContentHeaderArray{ WebfilterContentHeaderArgs{...} }
type WebfilterContentHeaderArrayInput interface {
	pulumi.Input

	ToWebfilterContentHeaderArrayOutput() WebfilterContentHeaderArrayOutput
	ToWebfilterContentHeaderArrayOutputWithContext(context.Context) WebfilterContentHeaderArrayOutput
}

type WebfilterContentHeaderArray []WebfilterContentHeaderInput

func (WebfilterContentHeaderArray) ElementType() reflect.Type {
	return reflect.TypeOf((*[]*WebfilterContentHeader)(nil)).Elem()
}

func (i WebfilterContentHeaderArray) ToWebfilterContentHeaderArrayOutput() WebfilterContentHeaderArrayOutput {
	return i.ToWebfilterContentHeaderArrayOutputWithContext(context.Background())
}

func (i WebfilterContentHeaderArray) ToWebfilterContentHeaderArrayOutputWithContext(ctx context.Context) WebfilterContentHeaderArrayOutput {
	return pulumi.ToOutputWithContext(ctx, i).(WebfilterContentHeaderArrayOutput)
}

// WebfilterContentHeaderMapInput is an input type that accepts WebfilterContentHeaderMap and WebfilterContentHeaderMapOutput values.
// You can construct a concrete instance of `WebfilterContentHeaderMapInput` via:
//
//	WebfilterContentHeaderMap{ "key": WebfilterContentHeaderArgs{...} }
type WebfilterContentHeaderMapInput interface {
	pulumi.Input

	ToWebfilterContentHeaderMapOutput() WebfilterContentHeaderMapOutput
	ToWebfilterContentHeaderMapOutputWithContext(context.Context) WebfilterContentHeaderMapOutput
}

type WebfilterContentHeaderMap map[string]WebfilterContentHeaderInput

func (WebfilterContentHeaderMap) ElementType() reflect.Type {
	return reflect.TypeOf((*map[string]*WebfilterContentHeader)(nil)).Elem()
}

func (i WebfilterContentHeaderMap) ToWebfilterContentHeaderMapOutput() WebfilterContentHeaderMapOutput {
	return i.ToWebfilterContentHeaderMapOutputWithContext(context.Background())
}

func (i WebfilterContentHeaderMap) ToWebfilterContentHeaderMapOutputWithContext(ctx context.Context) WebfilterContentHeaderMapOutput {
	return pulumi.ToOutputWithContext(ctx, i).(WebfilterContentHeaderMapOutput)
}

type WebfilterContentHeaderOutput struct{ *pulumi.OutputState }

func (WebfilterContentHeaderOutput) ElementType() reflect.Type {
	return reflect.TypeOf((**WebfilterContentHeader)(nil)).Elem()
}

func (o WebfilterContentHeaderOutput) ToWebfilterContentHeaderOutput() WebfilterContentHeaderOutput {
	return o
}

func (o WebfilterContentHeaderOutput) ToWebfilterContentHeaderOutputWithContext(ctx context.Context) WebfilterContentHeaderOutput {
	return o
}

func (o WebfilterContentHeaderOutput) Comment() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *WebfilterContentHeader) pulumi.StringPtrOutput { return v.Comment }).(pulumi.StringPtrOutput)
}

func (o WebfilterContentHeaderOutput) DynamicSortSubtable() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *WebfilterContentHeader) pulumi.StringPtrOutput { return v.DynamicSortSubtable }).(pulumi.StringPtrOutput)
}

func (o WebfilterContentHeaderOutput) Entries() WebfilterContentHeaderEntryArrayOutput {
	return o.ApplyT(func(v *WebfilterContentHeader) WebfilterContentHeaderEntryArrayOutput { return v.Entries }).(WebfilterContentHeaderEntryArrayOutput)
}

func (o WebfilterContentHeaderOutput) Fosid() pulumi.IntOutput {
	return o.ApplyT(func(v *WebfilterContentHeader) pulumi.IntOutput { return v.Fosid }).(pulumi.IntOutput)
}

func (o WebfilterContentHeaderOutput) Name() pulumi.StringOutput {
	return o.ApplyT(func(v *WebfilterContentHeader) pulumi.StringOutput { return v.Name }).(pulumi.StringOutput)
}

func (o WebfilterContentHeaderOutput) Vdomparam() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *WebfilterContentHeader) pulumi.StringPtrOutput { return v.Vdomparam }).(pulumi.StringPtrOutput)
}

type WebfilterContentHeaderArrayOutput struct{ *pulumi.OutputState }

func (WebfilterContentHeaderArrayOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*[]*WebfilterContentHeader)(nil)).Elem()
}

func (o WebfilterContentHeaderArrayOutput) ToWebfilterContentHeaderArrayOutput() WebfilterContentHeaderArrayOutput {
	return o
}

func (o WebfilterContentHeaderArrayOutput) ToWebfilterContentHeaderArrayOutputWithContext(ctx context.Context) WebfilterContentHeaderArrayOutput {
	return o
}

func (o WebfilterContentHeaderArrayOutput) Index(i pulumi.IntInput) WebfilterContentHeaderOutput {
	return pulumi.All(o, i).ApplyT(func(vs []interface{}) *WebfilterContentHeader {
		return vs[0].([]*WebfilterContentHeader)[vs[1].(int)]
	}).(WebfilterContentHeaderOutput)
}

type WebfilterContentHeaderMapOutput struct{ *pulumi.OutputState }

func (WebfilterContentHeaderMapOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*map[string]*WebfilterContentHeader)(nil)).Elem()
}

func (o WebfilterContentHeaderMapOutput) ToWebfilterContentHeaderMapOutput() WebfilterContentHeaderMapOutput {
	return o
}

func (o WebfilterContentHeaderMapOutput) ToWebfilterContentHeaderMapOutputWithContext(ctx context.Context) WebfilterContentHeaderMapOutput {
	return o
}

func (o WebfilterContentHeaderMapOutput) MapIndex(k pulumi.StringInput) WebfilterContentHeaderOutput {
	return pulumi.All(o, k).ApplyT(func(vs []interface{}) *WebfilterContentHeader {
		return vs[0].(map[string]*WebfilterContentHeader)[vs[1].(string)]
	}).(WebfilterContentHeaderOutput)
}

func init() {
	pulumi.RegisterInputType(reflect.TypeOf((*WebfilterContentHeaderInput)(nil)).Elem(), &WebfilterContentHeader{})
	pulumi.RegisterInputType(reflect.TypeOf((*WebfilterContentHeaderArrayInput)(nil)).Elem(), WebfilterContentHeaderArray{})
	pulumi.RegisterInputType(reflect.TypeOf((*WebfilterContentHeaderMapInput)(nil)).Elem(), WebfilterContentHeaderMap{})
	pulumi.RegisterOutputType(WebfilterContentHeaderOutput{})
	pulumi.RegisterOutputType(WebfilterContentHeaderArrayOutput{})
	pulumi.RegisterOutputType(WebfilterContentHeaderMapOutput{})
}
