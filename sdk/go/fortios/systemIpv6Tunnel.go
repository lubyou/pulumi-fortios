// Code generated by the Pulumi Terraform Bridge (tfgen) Tool DO NOT EDIT.
// *** WARNING: Do not edit by hand unless you're certain you know what you are doing! ***

package fortios

import (
	"context"
	"reflect"

	"errors"
	"github.com/lubyou/pulumi-fortios/sdk/go/fortios/internal"
	"github.com/pulumi/pulumi/sdk/v3/go/pulumi"
	"github.com/pulumi/pulumi/sdk/v3/go/pulumix"
)

type SystemIpv6Tunnel struct {
	pulumi.CustomResourceState

	AutoAsicOffload pulumi.StringOutput    `pulumi:"autoAsicOffload"`
	Destination     pulumi.StringOutput    `pulumi:"destination"`
	Interface       pulumi.StringOutput    `pulumi:"interface"`
	Name            pulumi.StringOutput    `pulumi:"name"`
	Source          pulumi.StringOutput    `pulumi:"source"`
	UseSdwan        pulumi.StringOutput    `pulumi:"useSdwan"`
	Vdomparam       pulumi.StringPtrOutput `pulumi:"vdomparam"`
}

// NewSystemIpv6Tunnel registers a new resource with the given unique name, arguments, and options.
func NewSystemIpv6Tunnel(ctx *pulumi.Context,
	name string, args *SystemIpv6TunnelArgs, opts ...pulumi.ResourceOption) (*SystemIpv6Tunnel, error) {
	if args == nil {
		return nil, errors.New("missing one or more required arguments")
	}

	if args.Destination == nil {
		return nil, errors.New("invalid value for required argument 'Destination'")
	}
	opts = internal.PkgResourceDefaultOpts(opts)
	var resource SystemIpv6Tunnel
	err := ctx.RegisterResource("fortios:index/systemIpv6Tunnel:SystemIpv6Tunnel", name, args, &resource, opts...)
	if err != nil {
		return nil, err
	}
	return &resource, nil
}

// GetSystemIpv6Tunnel gets an existing SystemIpv6Tunnel resource's state with the given name, ID, and optional
// state properties that are used to uniquely qualify the lookup (nil if not required).
func GetSystemIpv6Tunnel(ctx *pulumi.Context,
	name string, id pulumi.IDInput, state *SystemIpv6TunnelState, opts ...pulumi.ResourceOption) (*SystemIpv6Tunnel, error) {
	var resource SystemIpv6Tunnel
	err := ctx.ReadResource("fortios:index/systemIpv6Tunnel:SystemIpv6Tunnel", name, id, state, &resource, opts...)
	if err != nil {
		return nil, err
	}
	return &resource, nil
}

// Input properties used for looking up and filtering SystemIpv6Tunnel resources.
type systemIpv6TunnelState struct {
	AutoAsicOffload *string `pulumi:"autoAsicOffload"`
	Destination     *string `pulumi:"destination"`
	Interface       *string `pulumi:"interface"`
	Name            *string `pulumi:"name"`
	Source          *string `pulumi:"source"`
	UseSdwan        *string `pulumi:"useSdwan"`
	Vdomparam       *string `pulumi:"vdomparam"`
}

type SystemIpv6TunnelState struct {
	AutoAsicOffload pulumi.StringPtrInput
	Destination     pulumi.StringPtrInput
	Interface       pulumi.StringPtrInput
	Name            pulumi.StringPtrInput
	Source          pulumi.StringPtrInput
	UseSdwan        pulumi.StringPtrInput
	Vdomparam       pulumi.StringPtrInput
}

func (SystemIpv6TunnelState) ElementType() reflect.Type {
	return reflect.TypeOf((*systemIpv6TunnelState)(nil)).Elem()
}

type systemIpv6TunnelArgs struct {
	AutoAsicOffload *string `pulumi:"autoAsicOffload"`
	Destination     string  `pulumi:"destination"`
	Interface       *string `pulumi:"interface"`
	Name            *string `pulumi:"name"`
	Source          *string `pulumi:"source"`
	UseSdwan        *string `pulumi:"useSdwan"`
	Vdomparam       *string `pulumi:"vdomparam"`
}

// The set of arguments for constructing a SystemIpv6Tunnel resource.
type SystemIpv6TunnelArgs struct {
	AutoAsicOffload pulumi.StringPtrInput
	Destination     pulumi.StringInput
	Interface       pulumi.StringPtrInput
	Name            pulumi.StringPtrInput
	Source          pulumi.StringPtrInput
	UseSdwan        pulumi.StringPtrInput
	Vdomparam       pulumi.StringPtrInput
}

func (SystemIpv6TunnelArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*systemIpv6TunnelArgs)(nil)).Elem()
}

type SystemIpv6TunnelInput interface {
	pulumi.Input

	ToSystemIpv6TunnelOutput() SystemIpv6TunnelOutput
	ToSystemIpv6TunnelOutputWithContext(ctx context.Context) SystemIpv6TunnelOutput
}

func (*SystemIpv6Tunnel) ElementType() reflect.Type {
	return reflect.TypeOf((**SystemIpv6Tunnel)(nil)).Elem()
}

func (i *SystemIpv6Tunnel) ToSystemIpv6TunnelOutput() SystemIpv6TunnelOutput {
	return i.ToSystemIpv6TunnelOutputWithContext(context.Background())
}

func (i *SystemIpv6Tunnel) ToSystemIpv6TunnelOutputWithContext(ctx context.Context) SystemIpv6TunnelOutput {
	return pulumi.ToOutputWithContext(ctx, i).(SystemIpv6TunnelOutput)
}

func (i *SystemIpv6Tunnel) ToOutput(ctx context.Context) pulumix.Output[*SystemIpv6Tunnel] {
	return pulumix.Output[*SystemIpv6Tunnel]{
		OutputState: i.ToSystemIpv6TunnelOutputWithContext(ctx).OutputState,
	}
}

// SystemIpv6TunnelArrayInput is an input type that accepts SystemIpv6TunnelArray and SystemIpv6TunnelArrayOutput values.
// You can construct a concrete instance of `SystemIpv6TunnelArrayInput` via:
//
//	SystemIpv6TunnelArray{ SystemIpv6TunnelArgs{...} }
type SystemIpv6TunnelArrayInput interface {
	pulumi.Input

	ToSystemIpv6TunnelArrayOutput() SystemIpv6TunnelArrayOutput
	ToSystemIpv6TunnelArrayOutputWithContext(context.Context) SystemIpv6TunnelArrayOutput
}

type SystemIpv6TunnelArray []SystemIpv6TunnelInput

func (SystemIpv6TunnelArray) ElementType() reflect.Type {
	return reflect.TypeOf((*[]*SystemIpv6Tunnel)(nil)).Elem()
}

func (i SystemIpv6TunnelArray) ToSystemIpv6TunnelArrayOutput() SystemIpv6TunnelArrayOutput {
	return i.ToSystemIpv6TunnelArrayOutputWithContext(context.Background())
}

func (i SystemIpv6TunnelArray) ToSystemIpv6TunnelArrayOutputWithContext(ctx context.Context) SystemIpv6TunnelArrayOutput {
	return pulumi.ToOutputWithContext(ctx, i).(SystemIpv6TunnelArrayOutput)
}

func (i SystemIpv6TunnelArray) ToOutput(ctx context.Context) pulumix.Output[[]*SystemIpv6Tunnel] {
	return pulumix.Output[[]*SystemIpv6Tunnel]{
		OutputState: i.ToSystemIpv6TunnelArrayOutputWithContext(ctx).OutputState,
	}
}

// SystemIpv6TunnelMapInput is an input type that accepts SystemIpv6TunnelMap and SystemIpv6TunnelMapOutput values.
// You can construct a concrete instance of `SystemIpv6TunnelMapInput` via:
//
//	SystemIpv6TunnelMap{ "key": SystemIpv6TunnelArgs{...} }
type SystemIpv6TunnelMapInput interface {
	pulumi.Input

	ToSystemIpv6TunnelMapOutput() SystemIpv6TunnelMapOutput
	ToSystemIpv6TunnelMapOutputWithContext(context.Context) SystemIpv6TunnelMapOutput
}

type SystemIpv6TunnelMap map[string]SystemIpv6TunnelInput

func (SystemIpv6TunnelMap) ElementType() reflect.Type {
	return reflect.TypeOf((*map[string]*SystemIpv6Tunnel)(nil)).Elem()
}

func (i SystemIpv6TunnelMap) ToSystemIpv6TunnelMapOutput() SystemIpv6TunnelMapOutput {
	return i.ToSystemIpv6TunnelMapOutputWithContext(context.Background())
}

func (i SystemIpv6TunnelMap) ToSystemIpv6TunnelMapOutputWithContext(ctx context.Context) SystemIpv6TunnelMapOutput {
	return pulumi.ToOutputWithContext(ctx, i).(SystemIpv6TunnelMapOutput)
}

func (i SystemIpv6TunnelMap) ToOutput(ctx context.Context) pulumix.Output[map[string]*SystemIpv6Tunnel] {
	return pulumix.Output[map[string]*SystemIpv6Tunnel]{
		OutputState: i.ToSystemIpv6TunnelMapOutputWithContext(ctx).OutputState,
	}
}

type SystemIpv6TunnelOutput struct{ *pulumi.OutputState }

func (SystemIpv6TunnelOutput) ElementType() reflect.Type {
	return reflect.TypeOf((**SystemIpv6Tunnel)(nil)).Elem()
}

func (o SystemIpv6TunnelOutput) ToSystemIpv6TunnelOutput() SystemIpv6TunnelOutput {
	return o
}

func (o SystemIpv6TunnelOutput) ToSystemIpv6TunnelOutputWithContext(ctx context.Context) SystemIpv6TunnelOutput {
	return o
}

func (o SystemIpv6TunnelOutput) ToOutput(ctx context.Context) pulumix.Output[*SystemIpv6Tunnel] {
	return pulumix.Output[*SystemIpv6Tunnel]{
		OutputState: o.OutputState,
	}
}

func (o SystemIpv6TunnelOutput) AutoAsicOffload() pulumi.StringOutput {
	return o.ApplyT(func(v *SystemIpv6Tunnel) pulumi.StringOutput { return v.AutoAsicOffload }).(pulumi.StringOutput)
}

func (o SystemIpv6TunnelOutput) Destination() pulumi.StringOutput {
	return o.ApplyT(func(v *SystemIpv6Tunnel) pulumi.StringOutput { return v.Destination }).(pulumi.StringOutput)
}

func (o SystemIpv6TunnelOutput) Interface() pulumi.StringOutput {
	return o.ApplyT(func(v *SystemIpv6Tunnel) pulumi.StringOutput { return v.Interface }).(pulumi.StringOutput)
}

func (o SystemIpv6TunnelOutput) Name() pulumi.StringOutput {
	return o.ApplyT(func(v *SystemIpv6Tunnel) pulumi.StringOutput { return v.Name }).(pulumi.StringOutput)
}

func (o SystemIpv6TunnelOutput) Source() pulumi.StringOutput {
	return o.ApplyT(func(v *SystemIpv6Tunnel) pulumi.StringOutput { return v.Source }).(pulumi.StringOutput)
}

func (o SystemIpv6TunnelOutput) UseSdwan() pulumi.StringOutput {
	return o.ApplyT(func(v *SystemIpv6Tunnel) pulumi.StringOutput { return v.UseSdwan }).(pulumi.StringOutput)
}

func (o SystemIpv6TunnelOutput) Vdomparam() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *SystemIpv6Tunnel) pulumi.StringPtrOutput { return v.Vdomparam }).(pulumi.StringPtrOutput)
}

type SystemIpv6TunnelArrayOutput struct{ *pulumi.OutputState }

func (SystemIpv6TunnelArrayOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*[]*SystemIpv6Tunnel)(nil)).Elem()
}

func (o SystemIpv6TunnelArrayOutput) ToSystemIpv6TunnelArrayOutput() SystemIpv6TunnelArrayOutput {
	return o
}

func (o SystemIpv6TunnelArrayOutput) ToSystemIpv6TunnelArrayOutputWithContext(ctx context.Context) SystemIpv6TunnelArrayOutput {
	return o
}

func (o SystemIpv6TunnelArrayOutput) ToOutput(ctx context.Context) pulumix.Output[[]*SystemIpv6Tunnel] {
	return pulumix.Output[[]*SystemIpv6Tunnel]{
		OutputState: o.OutputState,
	}
}

func (o SystemIpv6TunnelArrayOutput) Index(i pulumi.IntInput) SystemIpv6TunnelOutput {
	return pulumi.All(o, i).ApplyT(func(vs []interface{}) *SystemIpv6Tunnel {
		return vs[0].([]*SystemIpv6Tunnel)[vs[1].(int)]
	}).(SystemIpv6TunnelOutput)
}

type SystemIpv6TunnelMapOutput struct{ *pulumi.OutputState }

func (SystemIpv6TunnelMapOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*map[string]*SystemIpv6Tunnel)(nil)).Elem()
}

func (o SystemIpv6TunnelMapOutput) ToSystemIpv6TunnelMapOutput() SystemIpv6TunnelMapOutput {
	return o
}

func (o SystemIpv6TunnelMapOutput) ToSystemIpv6TunnelMapOutputWithContext(ctx context.Context) SystemIpv6TunnelMapOutput {
	return o
}

func (o SystemIpv6TunnelMapOutput) ToOutput(ctx context.Context) pulumix.Output[map[string]*SystemIpv6Tunnel] {
	return pulumix.Output[map[string]*SystemIpv6Tunnel]{
		OutputState: o.OutputState,
	}
}

func (o SystemIpv6TunnelMapOutput) MapIndex(k pulumi.StringInput) SystemIpv6TunnelOutput {
	return pulumi.All(o, k).ApplyT(func(vs []interface{}) *SystemIpv6Tunnel {
		return vs[0].(map[string]*SystemIpv6Tunnel)[vs[1].(string)]
	}).(SystemIpv6TunnelOutput)
}

func init() {
	pulumi.RegisterInputType(reflect.TypeOf((*SystemIpv6TunnelInput)(nil)).Elem(), &SystemIpv6Tunnel{})
	pulumi.RegisterInputType(reflect.TypeOf((*SystemIpv6TunnelArrayInput)(nil)).Elem(), SystemIpv6TunnelArray{})
	pulumi.RegisterInputType(reflect.TypeOf((*SystemIpv6TunnelMapInput)(nil)).Elem(), SystemIpv6TunnelMap{})
	pulumi.RegisterOutputType(SystemIpv6TunnelOutput{})
	pulumi.RegisterOutputType(SystemIpv6TunnelArrayOutput{})
	pulumi.RegisterOutputType(SystemIpv6TunnelMapOutput{})
}
