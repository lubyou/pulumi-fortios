// *** WARNING: this file was generated by the Pulumi Terraform Bridge (tfgen) Tool. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

package fortios

import (
	"context"
	"reflect"

	"github.com/pkg/errors"
	"github.com/pulumi/pulumi/sdk/v3/go/pulumi"
)

// Configure IPv6/IPv4 in IPv6 tunnel.
//
// ## Example Usage
//
// ```go
// package main
//
// import (
// 	"github.com/pulumi/pulumi-fortios/sdk/go/fortios"
// 	"github.com/pulumi/pulumi/sdk/v3/go/pulumi"
// )
//
// func main() {
// 	pulumi.Run(func(ctx *pulumi.Context) error {
// 		_, err := fortios.NewSystemIpv6Tunnel(ctx, "trname", &fortios.SystemIpv6TunnelArgs{
// 			Destination: pulumi.String("2001:db8:85a3::8a2e:370:7324"),
// 			Interface:   pulumi.String("port3"),
// 			Source:      pulumi.String("2001:db8:85a3::8a2e:370:7334"),
// 		})
// 		if err != nil {
// 			return err
// 		}
// 		return nil
// 	})
// }
// ```
//
// ## Import
//
// System Ipv6Tunnel can be imported using any of these accepted formats$ export "FORTIOS_IMPORT_TABLE"="true"
//
// ```sh
//  $ pulumi import fortios:index/systemIpv6Tunnel:SystemIpv6Tunnel labelname {{name}}
// ```
//
//  $ unset "FORTIOS_IMPORT_TABLE"
type SystemIpv6Tunnel struct {
	pulumi.CustomResourceState

	// Enable/disable tunnel ASIC offloading. Valid values: `enable`, `disable`.
	AutoAsicOffload pulumi.StringOutput `pulumi:"autoAsicOffload"`
	// Remote IPv6 address of the tunnel.
	Destination pulumi.StringOutput `pulumi:"destination"`
	// Interface name.
	Interface pulumi.StringOutput `pulumi:"interface"`
	// IPv6 tunnel name.
	Name pulumi.StringOutput `pulumi:"name"`
	// Local IPv6 address of the tunnel.
	Source pulumi.StringOutput `pulumi:"source"`
	// Enable/disable use of SD-WAN to reach remote gateway. Valid values: `disable`, `enable`.
	UseSdwan pulumi.StringOutput `pulumi:"useSdwan"`
	// Specifies the vdom to which the resource will be applied when the FortiGate unit is running in VDOM mode. Only one vdom can be specified. If you want to inherit the vdom configuration of the provider, please do not set this parameter.
	Vdomparam pulumi.StringPtrOutput `pulumi:"vdomparam"`
}

// NewSystemIpv6Tunnel registers a new resource with the given unique name, arguments, and options.
func NewSystemIpv6Tunnel(ctx *pulumi.Context,
	name string, args *SystemIpv6TunnelArgs, opts ...pulumi.ResourceOption) (*SystemIpv6Tunnel, error) {
	if args == nil {
		return nil, errors.New("missing one or more required arguments")
	}

	if args.Destination == nil {
		return nil, errors.New("invalid value for required argument 'Destination'")
	}
	opts = pkgResourceDefaultOpts(opts)
	var resource SystemIpv6Tunnel
	err := ctx.RegisterResource("fortios:index/systemIpv6Tunnel:SystemIpv6Tunnel", name, args, &resource, opts...)
	if err != nil {
		return nil, err
	}
	return &resource, nil
}

// GetSystemIpv6Tunnel gets an existing SystemIpv6Tunnel resource's state with the given name, ID, and optional
// state properties that are used to uniquely qualify the lookup (nil if not required).
func GetSystemIpv6Tunnel(ctx *pulumi.Context,
	name string, id pulumi.IDInput, state *SystemIpv6TunnelState, opts ...pulumi.ResourceOption) (*SystemIpv6Tunnel, error) {
	var resource SystemIpv6Tunnel
	err := ctx.ReadResource("fortios:index/systemIpv6Tunnel:SystemIpv6Tunnel", name, id, state, &resource, opts...)
	if err != nil {
		return nil, err
	}
	return &resource, nil
}

// Input properties used for looking up and filtering SystemIpv6Tunnel resources.
type systemIpv6TunnelState struct {
	// Enable/disable tunnel ASIC offloading. Valid values: `enable`, `disable`.
	AutoAsicOffload *string `pulumi:"autoAsicOffload"`
	// Remote IPv6 address of the tunnel.
	Destination *string `pulumi:"destination"`
	// Interface name.
	Interface *string `pulumi:"interface"`
	// IPv6 tunnel name.
	Name *string `pulumi:"name"`
	// Local IPv6 address of the tunnel.
	Source *string `pulumi:"source"`
	// Enable/disable use of SD-WAN to reach remote gateway. Valid values: `disable`, `enable`.
	UseSdwan *string `pulumi:"useSdwan"`
	// Specifies the vdom to which the resource will be applied when the FortiGate unit is running in VDOM mode. Only one vdom can be specified. If you want to inherit the vdom configuration of the provider, please do not set this parameter.
	Vdomparam *string `pulumi:"vdomparam"`
}

type SystemIpv6TunnelState struct {
	// Enable/disable tunnel ASIC offloading. Valid values: `enable`, `disable`.
	AutoAsicOffload pulumi.StringPtrInput
	// Remote IPv6 address of the tunnel.
	Destination pulumi.StringPtrInput
	// Interface name.
	Interface pulumi.StringPtrInput
	// IPv6 tunnel name.
	Name pulumi.StringPtrInput
	// Local IPv6 address of the tunnel.
	Source pulumi.StringPtrInput
	// Enable/disable use of SD-WAN to reach remote gateway. Valid values: `disable`, `enable`.
	UseSdwan pulumi.StringPtrInput
	// Specifies the vdom to which the resource will be applied when the FortiGate unit is running in VDOM mode. Only one vdom can be specified. If you want to inherit the vdom configuration of the provider, please do not set this parameter.
	Vdomparam pulumi.StringPtrInput
}

func (SystemIpv6TunnelState) ElementType() reflect.Type {
	return reflect.TypeOf((*systemIpv6TunnelState)(nil)).Elem()
}

type systemIpv6TunnelArgs struct {
	// Enable/disable tunnel ASIC offloading. Valid values: `enable`, `disable`.
	AutoAsicOffload *string `pulumi:"autoAsicOffload"`
	// Remote IPv6 address of the tunnel.
	Destination string `pulumi:"destination"`
	// Interface name.
	Interface *string `pulumi:"interface"`
	// IPv6 tunnel name.
	Name *string `pulumi:"name"`
	// Local IPv6 address of the tunnel.
	Source *string `pulumi:"source"`
	// Enable/disable use of SD-WAN to reach remote gateway. Valid values: `disable`, `enable`.
	UseSdwan *string `pulumi:"useSdwan"`
	// Specifies the vdom to which the resource will be applied when the FortiGate unit is running in VDOM mode. Only one vdom can be specified. If you want to inherit the vdom configuration of the provider, please do not set this parameter.
	Vdomparam *string `pulumi:"vdomparam"`
}

// The set of arguments for constructing a SystemIpv6Tunnel resource.
type SystemIpv6TunnelArgs struct {
	// Enable/disable tunnel ASIC offloading. Valid values: `enable`, `disable`.
	AutoAsicOffload pulumi.StringPtrInput
	// Remote IPv6 address of the tunnel.
	Destination pulumi.StringInput
	// Interface name.
	Interface pulumi.StringPtrInput
	// IPv6 tunnel name.
	Name pulumi.StringPtrInput
	// Local IPv6 address of the tunnel.
	Source pulumi.StringPtrInput
	// Enable/disable use of SD-WAN to reach remote gateway. Valid values: `disable`, `enable`.
	UseSdwan pulumi.StringPtrInput
	// Specifies the vdom to which the resource will be applied when the FortiGate unit is running in VDOM mode. Only one vdom can be specified. If you want to inherit the vdom configuration of the provider, please do not set this parameter.
	Vdomparam pulumi.StringPtrInput
}

func (SystemIpv6TunnelArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*systemIpv6TunnelArgs)(nil)).Elem()
}

type SystemIpv6TunnelInput interface {
	pulumi.Input

	ToSystemIpv6TunnelOutput() SystemIpv6TunnelOutput
	ToSystemIpv6TunnelOutputWithContext(ctx context.Context) SystemIpv6TunnelOutput
}

func (*SystemIpv6Tunnel) ElementType() reflect.Type {
	return reflect.TypeOf((**SystemIpv6Tunnel)(nil)).Elem()
}

func (i *SystemIpv6Tunnel) ToSystemIpv6TunnelOutput() SystemIpv6TunnelOutput {
	return i.ToSystemIpv6TunnelOutputWithContext(context.Background())
}

func (i *SystemIpv6Tunnel) ToSystemIpv6TunnelOutputWithContext(ctx context.Context) SystemIpv6TunnelOutput {
	return pulumi.ToOutputWithContext(ctx, i).(SystemIpv6TunnelOutput)
}

// SystemIpv6TunnelArrayInput is an input type that accepts SystemIpv6TunnelArray and SystemIpv6TunnelArrayOutput values.
// You can construct a concrete instance of `SystemIpv6TunnelArrayInput` via:
//
//          SystemIpv6TunnelArray{ SystemIpv6TunnelArgs{...} }
type SystemIpv6TunnelArrayInput interface {
	pulumi.Input

	ToSystemIpv6TunnelArrayOutput() SystemIpv6TunnelArrayOutput
	ToSystemIpv6TunnelArrayOutputWithContext(context.Context) SystemIpv6TunnelArrayOutput
}

type SystemIpv6TunnelArray []SystemIpv6TunnelInput

func (SystemIpv6TunnelArray) ElementType() reflect.Type {
	return reflect.TypeOf((*[]*SystemIpv6Tunnel)(nil)).Elem()
}

func (i SystemIpv6TunnelArray) ToSystemIpv6TunnelArrayOutput() SystemIpv6TunnelArrayOutput {
	return i.ToSystemIpv6TunnelArrayOutputWithContext(context.Background())
}

func (i SystemIpv6TunnelArray) ToSystemIpv6TunnelArrayOutputWithContext(ctx context.Context) SystemIpv6TunnelArrayOutput {
	return pulumi.ToOutputWithContext(ctx, i).(SystemIpv6TunnelArrayOutput)
}

// SystemIpv6TunnelMapInput is an input type that accepts SystemIpv6TunnelMap and SystemIpv6TunnelMapOutput values.
// You can construct a concrete instance of `SystemIpv6TunnelMapInput` via:
//
//          SystemIpv6TunnelMap{ "key": SystemIpv6TunnelArgs{...} }
type SystemIpv6TunnelMapInput interface {
	pulumi.Input

	ToSystemIpv6TunnelMapOutput() SystemIpv6TunnelMapOutput
	ToSystemIpv6TunnelMapOutputWithContext(context.Context) SystemIpv6TunnelMapOutput
}

type SystemIpv6TunnelMap map[string]SystemIpv6TunnelInput

func (SystemIpv6TunnelMap) ElementType() reflect.Type {
	return reflect.TypeOf((*map[string]*SystemIpv6Tunnel)(nil)).Elem()
}

func (i SystemIpv6TunnelMap) ToSystemIpv6TunnelMapOutput() SystemIpv6TunnelMapOutput {
	return i.ToSystemIpv6TunnelMapOutputWithContext(context.Background())
}

func (i SystemIpv6TunnelMap) ToSystemIpv6TunnelMapOutputWithContext(ctx context.Context) SystemIpv6TunnelMapOutput {
	return pulumi.ToOutputWithContext(ctx, i).(SystemIpv6TunnelMapOutput)
}

type SystemIpv6TunnelOutput struct{ *pulumi.OutputState }

func (SystemIpv6TunnelOutput) ElementType() reflect.Type {
	return reflect.TypeOf((**SystemIpv6Tunnel)(nil)).Elem()
}

func (o SystemIpv6TunnelOutput) ToSystemIpv6TunnelOutput() SystemIpv6TunnelOutput {
	return o
}

func (o SystemIpv6TunnelOutput) ToSystemIpv6TunnelOutputWithContext(ctx context.Context) SystemIpv6TunnelOutput {
	return o
}

type SystemIpv6TunnelArrayOutput struct{ *pulumi.OutputState }

func (SystemIpv6TunnelArrayOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*[]*SystemIpv6Tunnel)(nil)).Elem()
}

func (o SystemIpv6TunnelArrayOutput) ToSystemIpv6TunnelArrayOutput() SystemIpv6TunnelArrayOutput {
	return o
}

func (o SystemIpv6TunnelArrayOutput) ToSystemIpv6TunnelArrayOutputWithContext(ctx context.Context) SystemIpv6TunnelArrayOutput {
	return o
}

func (o SystemIpv6TunnelArrayOutput) Index(i pulumi.IntInput) SystemIpv6TunnelOutput {
	return pulumi.All(o, i).ApplyT(func(vs []interface{}) *SystemIpv6Tunnel {
		return vs[0].([]*SystemIpv6Tunnel)[vs[1].(int)]
	}).(SystemIpv6TunnelOutput)
}

type SystemIpv6TunnelMapOutput struct{ *pulumi.OutputState }

func (SystemIpv6TunnelMapOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*map[string]*SystemIpv6Tunnel)(nil)).Elem()
}

func (o SystemIpv6TunnelMapOutput) ToSystemIpv6TunnelMapOutput() SystemIpv6TunnelMapOutput {
	return o
}

func (o SystemIpv6TunnelMapOutput) ToSystemIpv6TunnelMapOutputWithContext(ctx context.Context) SystemIpv6TunnelMapOutput {
	return o
}

func (o SystemIpv6TunnelMapOutput) MapIndex(k pulumi.StringInput) SystemIpv6TunnelOutput {
	return pulumi.All(o, k).ApplyT(func(vs []interface{}) *SystemIpv6Tunnel {
		return vs[0].(map[string]*SystemIpv6Tunnel)[vs[1].(string)]
	}).(SystemIpv6TunnelOutput)
}

func init() {
	pulumi.RegisterInputType(reflect.TypeOf((*SystemIpv6TunnelInput)(nil)).Elem(), &SystemIpv6Tunnel{})
	pulumi.RegisterInputType(reflect.TypeOf((*SystemIpv6TunnelArrayInput)(nil)).Elem(), SystemIpv6TunnelArray{})
	pulumi.RegisterInputType(reflect.TypeOf((*SystemIpv6TunnelMapInput)(nil)).Elem(), SystemIpv6TunnelMap{})
	pulumi.RegisterOutputType(SystemIpv6TunnelOutput{})
	pulumi.RegisterOutputType(SystemIpv6TunnelArrayOutput{})
	pulumi.RegisterOutputType(SystemIpv6TunnelMapOutput{})
}
