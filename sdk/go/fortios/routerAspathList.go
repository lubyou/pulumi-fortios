// Code generated by the Pulumi Terraform Bridge (tfgen) Tool DO NOT EDIT.
// *** WARNING: Do not edit by hand unless you're certain you know what you are doing! ***

package fortios

import (
	"context"
	"reflect"

	"github.com/lubyou/pulumi-fortios/sdk/go/fortios/internal"
	"github.com/pulumi/pulumi/sdk/v3/go/pulumi"
)

type RouterAspathList struct {
	pulumi.CustomResourceState

	DynamicSortSubtable pulumi.StringPtrOutput          `pulumi:"dynamicSortSubtable"`
	GetAllTables        pulumi.StringPtrOutput          `pulumi:"getAllTables"`
	Name                pulumi.StringOutput             `pulumi:"name"`
	Rules               RouterAspathListRuleArrayOutput `pulumi:"rules"`
	Vdomparam           pulumi.StringPtrOutput          `pulumi:"vdomparam"`
}

// NewRouterAspathList registers a new resource with the given unique name, arguments, and options.
func NewRouterAspathList(ctx *pulumi.Context,
	name string, args *RouterAspathListArgs, opts ...pulumi.ResourceOption) (*RouterAspathList, error) {
	if args == nil {
		args = &RouterAspathListArgs{}
	}

	opts = internal.PkgResourceDefaultOpts(opts)
	var resource RouterAspathList
	err := ctx.RegisterResource("fortios:index/routerAspathList:RouterAspathList", name, args, &resource, opts...)
	if err != nil {
		return nil, err
	}
	return &resource, nil
}

// GetRouterAspathList gets an existing RouterAspathList resource's state with the given name, ID, and optional
// state properties that are used to uniquely qualify the lookup (nil if not required).
func GetRouterAspathList(ctx *pulumi.Context,
	name string, id pulumi.IDInput, state *RouterAspathListState, opts ...pulumi.ResourceOption) (*RouterAspathList, error) {
	var resource RouterAspathList
	err := ctx.ReadResource("fortios:index/routerAspathList:RouterAspathList", name, id, state, &resource, opts...)
	if err != nil {
		return nil, err
	}
	return &resource, nil
}

// Input properties used for looking up and filtering RouterAspathList resources.
type routerAspathListState struct {
	DynamicSortSubtable *string                `pulumi:"dynamicSortSubtable"`
	GetAllTables        *string                `pulumi:"getAllTables"`
	Name                *string                `pulumi:"name"`
	Rules               []RouterAspathListRule `pulumi:"rules"`
	Vdomparam           *string                `pulumi:"vdomparam"`
}

type RouterAspathListState struct {
	DynamicSortSubtable pulumi.StringPtrInput
	GetAllTables        pulumi.StringPtrInput
	Name                pulumi.StringPtrInput
	Rules               RouterAspathListRuleArrayInput
	Vdomparam           pulumi.StringPtrInput
}

func (RouterAspathListState) ElementType() reflect.Type {
	return reflect.TypeOf((*routerAspathListState)(nil)).Elem()
}

type routerAspathListArgs struct {
	DynamicSortSubtable *string                `pulumi:"dynamicSortSubtable"`
	GetAllTables        *string                `pulumi:"getAllTables"`
	Name                *string                `pulumi:"name"`
	Rules               []RouterAspathListRule `pulumi:"rules"`
	Vdomparam           *string                `pulumi:"vdomparam"`
}

// The set of arguments for constructing a RouterAspathList resource.
type RouterAspathListArgs struct {
	DynamicSortSubtable pulumi.StringPtrInput
	GetAllTables        pulumi.StringPtrInput
	Name                pulumi.StringPtrInput
	Rules               RouterAspathListRuleArrayInput
	Vdomparam           pulumi.StringPtrInput
}

func (RouterAspathListArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*routerAspathListArgs)(nil)).Elem()
}

type RouterAspathListInput interface {
	pulumi.Input

	ToRouterAspathListOutput() RouterAspathListOutput
	ToRouterAspathListOutputWithContext(ctx context.Context) RouterAspathListOutput
}

func (*RouterAspathList) ElementType() reflect.Type {
	return reflect.TypeOf((**RouterAspathList)(nil)).Elem()
}

func (i *RouterAspathList) ToRouterAspathListOutput() RouterAspathListOutput {
	return i.ToRouterAspathListOutputWithContext(context.Background())
}

func (i *RouterAspathList) ToRouterAspathListOutputWithContext(ctx context.Context) RouterAspathListOutput {
	return pulumi.ToOutputWithContext(ctx, i).(RouterAspathListOutput)
}

// RouterAspathListArrayInput is an input type that accepts RouterAspathListArray and RouterAspathListArrayOutput values.
// You can construct a concrete instance of `RouterAspathListArrayInput` via:
//
//	RouterAspathListArray{ RouterAspathListArgs{...} }
type RouterAspathListArrayInput interface {
	pulumi.Input

	ToRouterAspathListArrayOutput() RouterAspathListArrayOutput
	ToRouterAspathListArrayOutputWithContext(context.Context) RouterAspathListArrayOutput
}

type RouterAspathListArray []RouterAspathListInput

func (RouterAspathListArray) ElementType() reflect.Type {
	return reflect.TypeOf((*[]*RouterAspathList)(nil)).Elem()
}

func (i RouterAspathListArray) ToRouterAspathListArrayOutput() RouterAspathListArrayOutput {
	return i.ToRouterAspathListArrayOutputWithContext(context.Background())
}

func (i RouterAspathListArray) ToRouterAspathListArrayOutputWithContext(ctx context.Context) RouterAspathListArrayOutput {
	return pulumi.ToOutputWithContext(ctx, i).(RouterAspathListArrayOutput)
}

// RouterAspathListMapInput is an input type that accepts RouterAspathListMap and RouterAspathListMapOutput values.
// You can construct a concrete instance of `RouterAspathListMapInput` via:
//
//	RouterAspathListMap{ "key": RouterAspathListArgs{...} }
type RouterAspathListMapInput interface {
	pulumi.Input

	ToRouterAspathListMapOutput() RouterAspathListMapOutput
	ToRouterAspathListMapOutputWithContext(context.Context) RouterAspathListMapOutput
}

type RouterAspathListMap map[string]RouterAspathListInput

func (RouterAspathListMap) ElementType() reflect.Type {
	return reflect.TypeOf((*map[string]*RouterAspathList)(nil)).Elem()
}

func (i RouterAspathListMap) ToRouterAspathListMapOutput() RouterAspathListMapOutput {
	return i.ToRouterAspathListMapOutputWithContext(context.Background())
}

func (i RouterAspathListMap) ToRouterAspathListMapOutputWithContext(ctx context.Context) RouterAspathListMapOutput {
	return pulumi.ToOutputWithContext(ctx, i).(RouterAspathListMapOutput)
}

type RouterAspathListOutput struct{ *pulumi.OutputState }

func (RouterAspathListOutput) ElementType() reflect.Type {
	return reflect.TypeOf((**RouterAspathList)(nil)).Elem()
}

func (o RouterAspathListOutput) ToRouterAspathListOutput() RouterAspathListOutput {
	return o
}

func (o RouterAspathListOutput) ToRouterAspathListOutputWithContext(ctx context.Context) RouterAspathListOutput {
	return o
}

func (o RouterAspathListOutput) DynamicSortSubtable() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *RouterAspathList) pulumi.StringPtrOutput { return v.DynamicSortSubtable }).(pulumi.StringPtrOutput)
}

func (o RouterAspathListOutput) GetAllTables() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *RouterAspathList) pulumi.StringPtrOutput { return v.GetAllTables }).(pulumi.StringPtrOutput)
}

func (o RouterAspathListOutput) Name() pulumi.StringOutput {
	return o.ApplyT(func(v *RouterAspathList) pulumi.StringOutput { return v.Name }).(pulumi.StringOutput)
}

func (o RouterAspathListOutput) Rules() RouterAspathListRuleArrayOutput {
	return o.ApplyT(func(v *RouterAspathList) RouterAspathListRuleArrayOutput { return v.Rules }).(RouterAspathListRuleArrayOutput)
}

func (o RouterAspathListOutput) Vdomparam() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *RouterAspathList) pulumi.StringPtrOutput { return v.Vdomparam }).(pulumi.StringPtrOutput)
}

type RouterAspathListArrayOutput struct{ *pulumi.OutputState }

func (RouterAspathListArrayOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*[]*RouterAspathList)(nil)).Elem()
}

func (o RouterAspathListArrayOutput) ToRouterAspathListArrayOutput() RouterAspathListArrayOutput {
	return o
}

func (o RouterAspathListArrayOutput) ToRouterAspathListArrayOutputWithContext(ctx context.Context) RouterAspathListArrayOutput {
	return o
}

func (o RouterAspathListArrayOutput) Index(i pulumi.IntInput) RouterAspathListOutput {
	return pulumi.All(o, i).ApplyT(func(vs []interface{}) *RouterAspathList {
		return vs[0].([]*RouterAspathList)[vs[1].(int)]
	}).(RouterAspathListOutput)
}

type RouterAspathListMapOutput struct{ *pulumi.OutputState }

func (RouterAspathListMapOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*map[string]*RouterAspathList)(nil)).Elem()
}

func (o RouterAspathListMapOutput) ToRouterAspathListMapOutput() RouterAspathListMapOutput {
	return o
}

func (o RouterAspathListMapOutput) ToRouterAspathListMapOutputWithContext(ctx context.Context) RouterAspathListMapOutput {
	return o
}

func (o RouterAspathListMapOutput) MapIndex(k pulumi.StringInput) RouterAspathListOutput {
	return pulumi.All(o, k).ApplyT(func(vs []interface{}) *RouterAspathList {
		return vs[0].(map[string]*RouterAspathList)[vs[1].(string)]
	}).(RouterAspathListOutput)
}

func init() {
	pulumi.RegisterInputType(reflect.TypeOf((*RouterAspathListInput)(nil)).Elem(), &RouterAspathList{})
	pulumi.RegisterInputType(reflect.TypeOf((*RouterAspathListArrayInput)(nil)).Elem(), RouterAspathListArray{})
	pulumi.RegisterInputType(reflect.TypeOf((*RouterAspathListMapInput)(nil)).Elem(), RouterAspathListMap{})
	pulumi.RegisterOutputType(RouterAspathListOutput{})
	pulumi.RegisterOutputType(RouterAspathListArrayOutput{})
	pulumi.RegisterOutputType(RouterAspathListMapOutput{})
}
