// *** WARNING: this file was generated by the Pulumi Terraform Bridge (tfgen) Tool. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

package fortios

import (
	"context"
	"reflect"

	"github.com/pkg/errors"
	"github.com/pulumi/pulumi/sdk/v3/go/pulumi"
)

// CA certificate.
//
// ## Import
//
// VpnCertificate Ca can be imported using any of these accepted formats$ export "FORTIOS_IMPORT_TABLE"="true"
//
// ```sh
//  $ pulumi import fortios:index/vpnCertificateCa:VpnCertificateCa labelname {{name}}
// ```
//
//  $ unset "FORTIOS_IMPORT_TABLE"
type VpnCertificateCa struct {
	pulumi.CustomResourceState

	// Number of days to wait before requesting an updated CA certificate (0 - 4294967295, 0 = disabled).
	AutoUpdateDays pulumi.IntOutput `pulumi:"autoUpdateDays"`
	// Number of days before an expiry-warning message is generated (0 - 4294967295, 0 = disabled).
	AutoUpdateDaysWarning pulumi.IntOutput `pulumi:"autoUpdateDaysWarning"`
	// CA certificate as a PEM file.
	Ca pulumi.StringOutput `pulumi:"ca"`
	// Time at which CA was last updated.
	LastUpdated pulumi.IntOutput `pulumi:"lastUpdated"`
	// Name.
	Name pulumi.StringOutput `pulumi:"name"`
	// Either global or VDOM IP address range for the CA certificate. Valid values: `global`, `vdom`.
	Range pulumi.StringOutput `pulumi:"range"`
	// URL of the SCEP server.
	ScepUrl pulumi.StringOutput `pulumi:"scepUrl"`
	// CA certificate source type.
	Source pulumi.StringOutput `pulumi:"source"`
	// Source IP address for communications to the SCEP server.
	SourceIp pulumi.StringOutput `pulumi:"sourceIp"`
	// Enable/disable this CA as a trusted CA for SSL inspection. Valid values: `enable`, `disable`.
	SslInspectionTrusted pulumi.StringOutput `pulumi:"sslInspectionTrusted"`
	// Enable/disable as a trusted CA. Valid values: `enable`, `disable`.
	Trusted pulumi.StringOutput `pulumi:"trusted"`
	// Specifies the vdom to which the resource will be applied when the FortiGate unit is running in VDOM mode. Only one vdom can be specified. If you want to inherit the vdom configuration of the provider, please do not set this parameter.
	Vdomparam pulumi.StringPtrOutput `pulumi:"vdomparam"`
}

// NewVpnCertificateCa registers a new resource with the given unique name, arguments, and options.
func NewVpnCertificateCa(ctx *pulumi.Context,
	name string, args *VpnCertificateCaArgs, opts ...pulumi.ResourceOption) (*VpnCertificateCa, error) {
	if args == nil {
		return nil, errors.New("missing one or more required arguments")
	}

	if args.Ca == nil {
		return nil, errors.New("invalid value for required argument 'Ca'")
	}
	var resource VpnCertificateCa
	err := ctx.RegisterResource("fortios:index/vpnCertificateCa:VpnCertificateCa", name, args, &resource, opts...)
	if err != nil {
		return nil, err
	}
	return &resource, nil
}

// GetVpnCertificateCa gets an existing VpnCertificateCa resource's state with the given name, ID, and optional
// state properties that are used to uniquely qualify the lookup (nil if not required).
func GetVpnCertificateCa(ctx *pulumi.Context,
	name string, id pulumi.IDInput, state *VpnCertificateCaState, opts ...pulumi.ResourceOption) (*VpnCertificateCa, error) {
	var resource VpnCertificateCa
	err := ctx.ReadResource("fortios:index/vpnCertificateCa:VpnCertificateCa", name, id, state, &resource, opts...)
	if err != nil {
		return nil, err
	}
	return &resource, nil
}

// Input properties used for looking up and filtering VpnCertificateCa resources.
type vpnCertificateCaState struct {
	// Number of days to wait before requesting an updated CA certificate (0 - 4294967295, 0 = disabled).
	AutoUpdateDays *int `pulumi:"autoUpdateDays"`
	// Number of days before an expiry-warning message is generated (0 - 4294967295, 0 = disabled).
	AutoUpdateDaysWarning *int `pulumi:"autoUpdateDaysWarning"`
	// CA certificate as a PEM file.
	Ca *string `pulumi:"ca"`
	// Time at which CA was last updated.
	LastUpdated *int `pulumi:"lastUpdated"`
	// Name.
	Name *string `pulumi:"name"`
	// Either global or VDOM IP address range for the CA certificate. Valid values: `global`, `vdom`.
	Range *string `pulumi:"range"`
	// URL of the SCEP server.
	ScepUrl *string `pulumi:"scepUrl"`
	// CA certificate source type.
	Source *string `pulumi:"source"`
	// Source IP address for communications to the SCEP server.
	SourceIp *string `pulumi:"sourceIp"`
	// Enable/disable this CA as a trusted CA for SSL inspection. Valid values: `enable`, `disable`.
	SslInspectionTrusted *string `pulumi:"sslInspectionTrusted"`
	// Enable/disable as a trusted CA. Valid values: `enable`, `disable`.
	Trusted *string `pulumi:"trusted"`
	// Specifies the vdom to which the resource will be applied when the FortiGate unit is running in VDOM mode. Only one vdom can be specified. If you want to inherit the vdom configuration of the provider, please do not set this parameter.
	Vdomparam *string `pulumi:"vdomparam"`
}

type VpnCertificateCaState struct {
	// Number of days to wait before requesting an updated CA certificate (0 - 4294967295, 0 = disabled).
	AutoUpdateDays pulumi.IntPtrInput
	// Number of days before an expiry-warning message is generated (0 - 4294967295, 0 = disabled).
	AutoUpdateDaysWarning pulumi.IntPtrInput
	// CA certificate as a PEM file.
	Ca pulumi.StringPtrInput
	// Time at which CA was last updated.
	LastUpdated pulumi.IntPtrInput
	// Name.
	Name pulumi.StringPtrInput
	// Either global or VDOM IP address range for the CA certificate. Valid values: `global`, `vdom`.
	Range pulumi.StringPtrInput
	// URL of the SCEP server.
	ScepUrl pulumi.StringPtrInput
	// CA certificate source type.
	Source pulumi.StringPtrInput
	// Source IP address for communications to the SCEP server.
	SourceIp pulumi.StringPtrInput
	// Enable/disable this CA as a trusted CA for SSL inspection. Valid values: `enable`, `disable`.
	SslInspectionTrusted pulumi.StringPtrInput
	// Enable/disable as a trusted CA. Valid values: `enable`, `disable`.
	Trusted pulumi.StringPtrInput
	// Specifies the vdom to which the resource will be applied when the FortiGate unit is running in VDOM mode. Only one vdom can be specified. If you want to inherit the vdom configuration of the provider, please do not set this parameter.
	Vdomparam pulumi.StringPtrInput
}

func (VpnCertificateCaState) ElementType() reflect.Type {
	return reflect.TypeOf((*vpnCertificateCaState)(nil)).Elem()
}

type vpnCertificateCaArgs struct {
	// Number of days to wait before requesting an updated CA certificate (0 - 4294967295, 0 = disabled).
	AutoUpdateDays *int `pulumi:"autoUpdateDays"`
	// Number of days before an expiry-warning message is generated (0 - 4294967295, 0 = disabled).
	AutoUpdateDaysWarning *int `pulumi:"autoUpdateDaysWarning"`
	// CA certificate as a PEM file.
	Ca string `pulumi:"ca"`
	// Time at which CA was last updated.
	LastUpdated *int `pulumi:"lastUpdated"`
	// Name.
	Name *string `pulumi:"name"`
	// Either global or VDOM IP address range for the CA certificate. Valid values: `global`, `vdom`.
	Range *string `pulumi:"range"`
	// URL of the SCEP server.
	ScepUrl *string `pulumi:"scepUrl"`
	// CA certificate source type.
	Source *string `pulumi:"source"`
	// Source IP address for communications to the SCEP server.
	SourceIp *string `pulumi:"sourceIp"`
	// Enable/disable this CA as a trusted CA for SSL inspection. Valid values: `enable`, `disable`.
	SslInspectionTrusted *string `pulumi:"sslInspectionTrusted"`
	// Enable/disable as a trusted CA. Valid values: `enable`, `disable`.
	Trusted *string `pulumi:"trusted"`
	// Specifies the vdom to which the resource will be applied when the FortiGate unit is running in VDOM mode. Only one vdom can be specified. If you want to inherit the vdom configuration of the provider, please do not set this parameter.
	Vdomparam *string `pulumi:"vdomparam"`
}

// The set of arguments for constructing a VpnCertificateCa resource.
type VpnCertificateCaArgs struct {
	// Number of days to wait before requesting an updated CA certificate (0 - 4294967295, 0 = disabled).
	AutoUpdateDays pulumi.IntPtrInput
	// Number of days before an expiry-warning message is generated (0 - 4294967295, 0 = disabled).
	AutoUpdateDaysWarning pulumi.IntPtrInput
	// CA certificate as a PEM file.
	Ca pulumi.StringInput
	// Time at which CA was last updated.
	LastUpdated pulumi.IntPtrInput
	// Name.
	Name pulumi.StringPtrInput
	// Either global or VDOM IP address range for the CA certificate. Valid values: `global`, `vdom`.
	Range pulumi.StringPtrInput
	// URL of the SCEP server.
	ScepUrl pulumi.StringPtrInput
	// CA certificate source type.
	Source pulumi.StringPtrInput
	// Source IP address for communications to the SCEP server.
	SourceIp pulumi.StringPtrInput
	// Enable/disable this CA as a trusted CA for SSL inspection. Valid values: `enable`, `disable`.
	SslInspectionTrusted pulumi.StringPtrInput
	// Enable/disable as a trusted CA. Valid values: `enable`, `disable`.
	Trusted pulumi.StringPtrInput
	// Specifies the vdom to which the resource will be applied when the FortiGate unit is running in VDOM mode. Only one vdom can be specified. If you want to inherit the vdom configuration of the provider, please do not set this parameter.
	Vdomparam pulumi.StringPtrInput
}

func (VpnCertificateCaArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*vpnCertificateCaArgs)(nil)).Elem()
}

type VpnCertificateCaInput interface {
	pulumi.Input

	ToVpnCertificateCaOutput() VpnCertificateCaOutput
	ToVpnCertificateCaOutputWithContext(ctx context.Context) VpnCertificateCaOutput
}

func (*VpnCertificateCa) ElementType() reflect.Type {
	return reflect.TypeOf((*VpnCertificateCa)(nil))
}

func (i *VpnCertificateCa) ToVpnCertificateCaOutput() VpnCertificateCaOutput {
	return i.ToVpnCertificateCaOutputWithContext(context.Background())
}

func (i *VpnCertificateCa) ToVpnCertificateCaOutputWithContext(ctx context.Context) VpnCertificateCaOutput {
	return pulumi.ToOutputWithContext(ctx, i).(VpnCertificateCaOutput)
}

func (i *VpnCertificateCa) ToVpnCertificateCaPtrOutput() VpnCertificateCaPtrOutput {
	return i.ToVpnCertificateCaPtrOutputWithContext(context.Background())
}

func (i *VpnCertificateCa) ToVpnCertificateCaPtrOutputWithContext(ctx context.Context) VpnCertificateCaPtrOutput {
	return pulumi.ToOutputWithContext(ctx, i).(VpnCertificateCaPtrOutput)
}

type VpnCertificateCaPtrInput interface {
	pulumi.Input

	ToVpnCertificateCaPtrOutput() VpnCertificateCaPtrOutput
	ToVpnCertificateCaPtrOutputWithContext(ctx context.Context) VpnCertificateCaPtrOutput
}

type vpnCertificateCaPtrType VpnCertificateCaArgs

func (*vpnCertificateCaPtrType) ElementType() reflect.Type {
	return reflect.TypeOf((**VpnCertificateCa)(nil))
}

func (i *vpnCertificateCaPtrType) ToVpnCertificateCaPtrOutput() VpnCertificateCaPtrOutput {
	return i.ToVpnCertificateCaPtrOutputWithContext(context.Background())
}

func (i *vpnCertificateCaPtrType) ToVpnCertificateCaPtrOutputWithContext(ctx context.Context) VpnCertificateCaPtrOutput {
	return pulumi.ToOutputWithContext(ctx, i).(VpnCertificateCaPtrOutput)
}

// VpnCertificateCaArrayInput is an input type that accepts VpnCertificateCaArray and VpnCertificateCaArrayOutput values.
// You can construct a concrete instance of `VpnCertificateCaArrayInput` via:
//
//          VpnCertificateCaArray{ VpnCertificateCaArgs{...} }
type VpnCertificateCaArrayInput interface {
	pulumi.Input

	ToVpnCertificateCaArrayOutput() VpnCertificateCaArrayOutput
	ToVpnCertificateCaArrayOutputWithContext(context.Context) VpnCertificateCaArrayOutput
}

type VpnCertificateCaArray []VpnCertificateCaInput

func (VpnCertificateCaArray) ElementType() reflect.Type {
	return reflect.TypeOf(([]*VpnCertificateCa)(nil))
}

func (i VpnCertificateCaArray) ToVpnCertificateCaArrayOutput() VpnCertificateCaArrayOutput {
	return i.ToVpnCertificateCaArrayOutputWithContext(context.Background())
}

func (i VpnCertificateCaArray) ToVpnCertificateCaArrayOutputWithContext(ctx context.Context) VpnCertificateCaArrayOutput {
	return pulumi.ToOutputWithContext(ctx, i).(VpnCertificateCaArrayOutput)
}

// VpnCertificateCaMapInput is an input type that accepts VpnCertificateCaMap and VpnCertificateCaMapOutput values.
// You can construct a concrete instance of `VpnCertificateCaMapInput` via:
//
//          VpnCertificateCaMap{ "key": VpnCertificateCaArgs{...} }
type VpnCertificateCaMapInput interface {
	pulumi.Input

	ToVpnCertificateCaMapOutput() VpnCertificateCaMapOutput
	ToVpnCertificateCaMapOutputWithContext(context.Context) VpnCertificateCaMapOutput
}

type VpnCertificateCaMap map[string]VpnCertificateCaInput

func (VpnCertificateCaMap) ElementType() reflect.Type {
	return reflect.TypeOf((map[string]*VpnCertificateCa)(nil))
}

func (i VpnCertificateCaMap) ToVpnCertificateCaMapOutput() VpnCertificateCaMapOutput {
	return i.ToVpnCertificateCaMapOutputWithContext(context.Background())
}

func (i VpnCertificateCaMap) ToVpnCertificateCaMapOutputWithContext(ctx context.Context) VpnCertificateCaMapOutput {
	return pulumi.ToOutputWithContext(ctx, i).(VpnCertificateCaMapOutput)
}

type VpnCertificateCaOutput struct {
	*pulumi.OutputState
}

func (VpnCertificateCaOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*VpnCertificateCa)(nil))
}

func (o VpnCertificateCaOutput) ToVpnCertificateCaOutput() VpnCertificateCaOutput {
	return o
}

func (o VpnCertificateCaOutput) ToVpnCertificateCaOutputWithContext(ctx context.Context) VpnCertificateCaOutput {
	return o
}

func (o VpnCertificateCaOutput) ToVpnCertificateCaPtrOutput() VpnCertificateCaPtrOutput {
	return o.ToVpnCertificateCaPtrOutputWithContext(context.Background())
}

func (o VpnCertificateCaOutput) ToVpnCertificateCaPtrOutputWithContext(ctx context.Context) VpnCertificateCaPtrOutput {
	return o.ApplyT(func(v VpnCertificateCa) *VpnCertificateCa {
		return &v
	}).(VpnCertificateCaPtrOutput)
}

type VpnCertificateCaPtrOutput struct {
	*pulumi.OutputState
}

func (VpnCertificateCaPtrOutput) ElementType() reflect.Type {
	return reflect.TypeOf((**VpnCertificateCa)(nil))
}

func (o VpnCertificateCaPtrOutput) ToVpnCertificateCaPtrOutput() VpnCertificateCaPtrOutput {
	return o
}

func (o VpnCertificateCaPtrOutput) ToVpnCertificateCaPtrOutputWithContext(ctx context.Context) VpnCertificateCaPtrOutput {
	return o
}

type VpnCertificateCaArrayOutput struct{ *pulumi.OutputState }

func (VpnCertificateCaArrayOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*[]VpnCertificateCa)(nil))
}

func (o VpnCertificateCaArrayOutput) ToVpnCertificateCaArrayOutput() VpnCertificateCaArrayOutput {
	return o
}

func (o VpnCertificateCaArrayOutput) ToVpnCertificateCaArrayOutputWithContext(ctx context.Context) VpnCertificateCaArrayOutput {
	return o
}

func (o VpnCertificateCaArrayOutput) Index(i pulumi.IntInput) VpnCertificateCaOutput {
	return pulumi.All(o, i).ApplyT(func(vs []interface{}) VpnCertificateCa {
		return vs[0].([]VpnCertificateCa)[vs[1].(int)]
	}).(VpnCertificateCaOutput)
}

type VpnCertificateCaMapOutput struct{ *pulumi.OutputState }

func (VpnCertificateCaMapOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*map[string]VpnCertificateCa)(nil))
}

func (o VpnCertificateCaMapOutput) ToVpnCertificateCaMapOutput() VpnCertificateCaMapOutput {
	return o
}

func (o VpnCertificateCaMapOutput) ToVpnCertificateCaMapOutputWithContext(ctx context.Context) VpnCertificateCaMapOutput {
	return o
}

func (o VpnCertificateCaMapOutput) MapIndex(k pulumi.StringInput) VpnCertificateCaOutput {
	return pulumi.All(o, k).ApplyT(func(vs []interface{}) VpnCertificateCa {
		return vs[0].(map[string]VpnCertificateCa)[vs[1].(string)]
	}).(VpnCertificateCaOutput)
}

func init() {
	pulumi.RegisterOutputType(VpnCertificateCaOutput{})
	pulumi.RegisterOutputType(VpnCertificateCaPtrOutput{})
	pulumi.RegisterOutputType(VpnCertificateCaArrayOutput{})
	pulumi.RegisterOutputType(VpnCertificateCaMapOutput{})
}
