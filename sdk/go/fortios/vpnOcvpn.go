// Code generated by the Pulumi Terraform Bridge (tfgen) Tool DO NOT EDIT.
// *** WARNING: Do not edit by hand unless you're certain you know what you are doing! ***

package fortios

import (
	"context"
	"reflect"

	"github.com/lubyou/pulumi-fortios/sdk/go/fortios/internal"
	"github.com/pulumi/pulumi/sdk/v3/go/pulumi"
)

type VpnOcvpn struct {
	pulumi.CustomResourceState

	AutoDiscovery             pulumi.StringOutput             `pulumi:"autoDiscovery"`
	AutoDiscoveryShortcutMode pulumi.StringOutput             `pulumi:"autoDiscoveryShortcutMode"`
	DynamicSortSubtable       pulumi.StringPtrOutput          `pulumi:"dynamicSortSubtable"`
	Eap                       pulumi.StringOutput             `pulumi:"eap"`
	EapUsers                  pulumi.StringOutput             `pulumi:"eapUsers"`
	ForticlientAccess         VpnOcvpnForticlientAccessOutput `pulumi:"forticlientAccess"`
	GetAllTables              pulumi.StringPtrOutput          `pulumi:"getAllTables"`
	IpAllocationBlock         pulumi.StringOutput             `pulumi:"ipAllocationBlock"`
	Multipath                 pulumi.StringOutput             `pulumi:"multipath"`
	Nat                       pulumi.StringOutput             `pulumi:"nat"`
	Overlays                  VpnOcvpnOverlayArrayOutput      `pulumi:"overlays"`
	PollInterval              pulumi.IntOutput                `pulumi:"pollInterval"`
	Role                      pulumi.StringOutput             `pulumi:"role"`
	Sdwan                     pulumi.StringOutput             `pulumi:"sdwan"`
	SdwanZone                 pulumi.StringOutput             `pulumi:"sdwanZone"`
	Status                    pulumi.StringOutput             `pulumi:"status"`
	Vdomparam                 pulumi.StringPtrOutput          `pulumi:"vdomparam"`
	WanInterfaces             VpnOcvpnWanInterfaceArrayOutput `pulumi:"wanInterfaces"`
}

// NewVpnOcvpn registers a new resource with the given unique name, arguments, and options.
func NewVpnOcvpn(ctx *pulumi.Context,
	name string, args *VpnOcvpnArgs, opts ...pulumi.ResourceOption) (*VpnOcvpn, error) {
	if args == nil {
		args = &VpnOcvpnArgs{}
	}

	opts = internal.PkgResourceDefaultOpts(opts)
	var resource VpnOcvpn
	err := ctx.RegisterResource("fortios:index/vpnOcvpn:VpnOcvpn", name, args, &resource, opts...)
	if err != nil {
		return nil, err
	}
	return &resource, nil
}

// GetVpnOcvpn gets an existing VpnOcvpn resource's state with the given name, ID, and optional
// state properties that are used to uniquely qualify the lookup (nil if not required).
func GetVpnOcvpn(ctx *pulumi.Context,
	name string, id pulumi.IDInput, state *VpnOcvpnState, opts ...pulumi.ResourceOption) (*VpnOcvpn, error) {
	var resource VpnOcvpn
	err := ctx.ReadResource("fortios:index/vpnOcvpn:VpnOcvpn", name, id, state, &resource, opts...)
	if err != nil {
		return nil, err
	}
	return &resource, nil
}

// Input properties used for looking up and filtering VpnOcvpn resources.
type vpnOcvpnState struct {
	AutoDiscovery             *string                    `pulumi:"autoDiscovery"`
	AutoDiscoveryShortcutMode *string                    `pulumi:"autoDiscoveryShortcutMode"`
	DynamicSortSubtable       *string                    `pulumi:"dynamicSortSubtable"`
	Eap                       *string                    `pulumi:"eap"`
	EapUsers                  *string                    `pulumi:"eapUsers"`
	ForticlientAccess         *VpnOcvpnForticlientAccess `pulumi:"forticlientAccess"`
	GetAllTables              *string                    `pulumi:"getAllTables"`
	IpAllocationBlock         *string                    `pulumi:"ipAllocationBlock"`
	Multipath                 *string                    `pulumi:"multipath"`
	Nat                       *string                    `pulumi:"nat"`
	Overlays                  []VpnOcvpnOverlay          `pulumi:"overlays"`
	PollInterval              *int                       `pulumi:"pollInterval"`
	Role                      *string                    `pulumi:"role"`
	Sdwan                     *string                    `pulumi:"sdwan"`
	SdwanZone                 *string                    `pulumi:"sdwanZone"`
	Status                    *string                    `pulumi:"status"`
	Vdomparam                 *string                    `pulumi:"vdomparam"`
	WanInterfaces             []VpnOcvpnWanInterface     `pulumi:"wanInterfaces"`
}

type VpnOcvpnState struct {
	AutoDiscovery             pulumi.StringPtrInput
	AutoDiscoveryShortcutMode pulumi.StringPtrInput
	DynamicSortSubtable       pulumi.StringPtrInput
	Eap                       pulumi.StringPtrInput
	EapUsers                  pulumi.StringPtrInput
	ForticlientAccess         VpnOcvpnForticlientAccessPtrInput
	GetAllTables              pulumi.StringPtrInput
	IpAllocationBlock         pulumi.StringPtrInput
	Multipath                 pulumi.StringPtrInput
	Nat                       pulumi.StringPtrInput
	Overlays                  VpnOcvpnOverlayArrayInput
	PollInterval              pulumi.IntPtrInput
	Role                      pulumi.StringPtrInput
	Sdwan                     pulumi.StringPtrInput
	SdwanZone                 pulumi.StringPtrInput
	Status                    pulumi.StringPtrInput
	Vdomparam                 pulumi.StringPtrInput
	WanInterfaces             VpnOcvpnWanInterfaceArrayInput
}

func (VpnOcvpnState) ElementType() reflect.Type {
	return reflect.TypeOf((*vpnOcvpnState)(nil)).Elem()
}

type vpnOcvpnArgs struct {
	AutoDiscovery             *string                    `pulumi:"autoDiscovery"`
	AutoDiscoveryShortcutMode *string                    `pulumi:"autoDiscoveryShortcutMode"`
	DynamicSortSubtable       *string                    `pulumi:"dynamicSortSubtable"`
	Eap                       *string                    `pulumi:"eap"`
	EapUsers                  *string                    `pulumi:"eapUsers"`
	ForticlientAccess         *VpnOcvpnForticlientAccess `pulumi:"forticlientAccess"`
	GetAllTables              *string                    `pulumi:"getAllTables"`
	IpAllocationBlock         *string                    `pulumi:"ipAllocationBlock"`
	Multipath                 *string                    `pulumi:"multipath"`
	Nat                       *string                    `pulumi:"nat"`
	Overlays                  []VpnOcvpnOverlay          `pulumi:"overlays"`
	PollInterval              *int                       `pulumi:"pollInterval"`
	Role                      *string                    `pulumi:"role"`
	Sdwan                     *string                    `pulumi:"sdwan"`
	SdwanZone                 *string                    `pulumi:"sdwanZone"`
	Status                    *string                    `pulumi:"status"`
	Vdomparam                 *string                    `pulumi:"vdomparam"`
	WanInterfaces             []VpnOcvpnWanInterface     `pulumi:"wanInterfaces"`
}

// The set of arguments for constructing a VpnOcvpn resource.
type VpnOcvpnArgs struct {
	AutoDiscovery             pulumi.StringPtrInput
	AutoDiscoveryShortcutMode pulumi.StringPtrInput
	DynamicSortSubtable       pulumi.StringPtrInput
	Eap                       pulumi.StringPtrInput
	EapUsers                  pulumi.StringPtrInput
	ForticlientAccess         VpnOcvpnForticlientAccessPtrInput
	GetAllTables              pulumi.StringPtrInput
	IpAllocationBlock         pulumi.StringPtrInput
	Multipath                 pulumi.StringPtrInput
	Nat                       pulumi.StringPtrInput
	Overlays                  VpnOcvpnOverlayArrayInput
	PollInterval              pulumi.IntPtrInput
	Role                      pulumi.StringPtrInput
	Sdwan                     pulumi.StringPtrInput
	SdwanZone                 pulumi.StringPtrInput
	Status                    pulumi.StringPtrInput
	Vdomparam                 pulumi.StringPtrInput
	WanInterfaces             VpnOcvpnWanInterfaceArrayInput
}

func (VpnOcvpnArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*vpnOcvpnArgs)(nil)).Elem()
}

type VpnOcvpnInput interface {
	pulumi.Input

	ToVpnOcvpnOutput() VpnOcvpnOutput
	ToVpnOcvpnOutputWithContext(ctx context.Context) VpnOcvpnOutput
}

func (*VpnOcvpn) ElementType() reflect.Type {
	return reflect.TypeOf((**VpnOcvpn)(nil)).Elem()
}

func (i *VpnOcvpn) ToVpnOcvpnOutput() VpnOcvpnOutput {
	return i.ToVpnOcvpnOutputWithContext(context.Background())
}

func (i *VpnOcvpn) ToVpnOcvpnOutputWithContext(ctx context.Context) VpnOcvpnOutput {
	return pulumi.ToOutputWithContext(ctx, i).(VpnOcvpnOutput)
}

// VpnOcvpnArrayInput is an input type that accepts VpnOcvpnArray and VpnOcvpnArrayOutput values.
// You can construct a concrete instance of `VpnOcvpnArrayInput` via:
//
//	VpnOcvpnArray{ VpnOcvpnArgs{...} }
type VpnOcvpnArrayInput interface {
	pulumi.Input

	ToVpnOcvpnArrayOutput() VpnOcvpnArrayOutput
	ToVpnOcvpnArrayOutputWithContext(context.Context) VpnOcvpnArrayOutput
}

type VpnOcvpnArray []VpnOcvpnInput

func (VpnOcvpnArray) ElementType() reflect.Type {
	return reflect.TypeOf((*[]*VpnOcvpn)(nil)).Elem()
}

func (i VpnOcvpnArray) ToVpnOcvpnArrayOutput() VpnOcvpnArrayOutput {
	return i.ToVpnOcvpnArrayOutputWithContext(context.Background())
}

func (i VpnOcvpnArray) ToVpnOcvpnArrayOutputWithContext(ctx context.Context) VpnOcvpnArrayOutput {
	return pulumi.ToOutputWithContext(ctx, i).(VpnOcvpnArrayOutput)
}

// VpnOcvpnMapInput is an input type that accepts VpnOcvpnMap and VpnOcvpnMapOutput values.
// You can construct a concrete instance of `VpnOcvpnMapInput` via:
//
//	VpnOcvpnMap{ "key": VpnOcvpnArgs{...} }
type VpnOcvpnMapInput interface {
	pulumi.Input

	ToVpnOcvpnMapOutput() VpnOcvpnMapOutput
	ToVpnOcvpnMapOutputWithContext(context.Context) VpnOcvpnMapOutput
}

type VpnOcvpnMap map[string]VpnOcvpnInput

func (VpnOcvpnMap) ElementType() reflect.Type {
	return reflect.TypeOf((*map[string]*VpnOcvpn)(nil)).Elem()
}

func (i VpnOcvpnMap) ToVpnOcvpnMapOutput() VpnOcvpnMapOutput {
	return i.ToVpnOcvpnMapOutputWithContext(context.Background())
}

func (i VpnOcvpnMap) ToVpnOcvpnMapOutputWithContext(ctx context.Context) VpnOcvpnMapOutput {
	return pulumi.ToOutputWithContext(ctx, i).(VpnOcvpnMapOutput)
}

type VpnOcvpnOutput struct{ *pulumi.OutputState }

func (VpnOcvpnOutput) ElementType() reflect.Type {
	return reflect.TypeOf((**VpnOcvpn)(nil)).Elem()
}

func (o VpnOcvpnOutput) ToVpnOcvpnOutput() VpnOcvpnOutput {
	return o
}

func (o VpnOcvpnOutput) ToVpnOcvpnOutputWithContext(ctx context.Context) VpnOcvpnOutput {
	return o
}

func (o VpnOcvpnOutput) AutoDiscovery() pulumi.StringOutput {
	return o.ApplyT(func(v *VpnOcvpn) pulumi.StringOutput { return v.AutoDiscovery }).(pulumi.StringOutput)
}

func (o VpnOcvpnOutput) AutoDiscoveryShortcutMode() pulumi.StringOutput {
	return o.ApplyT(func(v *VpnOcvpn) pulumi.StringOutput { return v.AutoDiscoveryShortcutMode }).(pulumi.StringOutput)
}

func (o VpnOcvpnOutput) DynamicSortSubtable() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *VpnOcvpn) pulumi.StringPtrOutput { return v.DynamicSortSubtable }).(pulumi.StringPtrOutput)
}

func (o VpnOcvpnOutput) Eap() pulumi.StringOutput {
	return o.ApplyT(func(v *VpnOcvpn) pulumi.StringOutput { return v.Eap }).(pulumi.StringOutput)
}

func (o VpnOcvpnOutput) EapUsers() pulumi.StringOutput {
	return o.ApplyT(func(v *VpnOcvpn) pulumi.StringOutput { return v.EapUsers }).(pulumi.StringOutput)
}

func (o VpnOcvpnOutput) ForticlientAccess() VpnOcvpnForticlientAccessOutput {
	return o.ApplyT(func(v *VpnOcvpn) VpnOcvpnForticlientAccessOutput { return v.ForticlientAccess }).(VpnOcvpnForticlientAccessOutput)
}

func (o VpnOcvpnOutput) GetAllTables() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *VpnOcvpn) pulumi.StringPtrOutput { return v.GetAllTables }).(pulumi.StringPtrOutput)
}

func (o VpnOcvpnOutput) IpAllocationBlock() pulumi.StringOutput {
	return o.ApplyT(func(v *VpnOcvpn) pulumi.StringOutput { return v.IpAllocationBlock }).(pulumi.StringOutput)
}

func (o VpnOcvpnOutput) Multipath() pulumi.StringOutput {
	return o.ApplyT(func(v *VpnOcvpn) pulumi.StringOutput { return v.Multipath }).(pulumi.StringOutput)
}

func (o VpnOcvpnOutput) Nat() pulumi.StringOutput {
	return o.ApplyT(func(v *VpnOcvpn) pulumi.StringOutput { return v.Nat }).(pulumi.StringOutput)
}

func (o VpnOcvpnOutput) Overlays() VpnOcvpnOverlayArrayOutput {
	return o.ApplyT(func(v *VpnOcvpn) VpnOcvpnOverlayArrayOutput { return v.Overlays }).(VpnOcvpnOverlayArrayOutput)
}

func (o VpnOcvpnOutput) PollInterval() pulumi.IntOutput {
	return o.ApplyT(func(v *VpnOcvpn) pulumi.IntOutput { return v.PollInterval }).(pulumi.IntOutput)
}

func (o VpnOcvpnOutput) Role() pulumi.StringOutput {
	return o.ApplyT(func(v *VpnOcvpn) pulumi.StringOutput { return v.Role }).(pulumi.StringOutput)
}

func (o VpnOcvpnOutput) Sdwan() pulumi.StringOutput {
	return o.ApplyT(func(v *VpnOcvpn) pulumi.StringOutput { return v.Sdwan }).(pulumi.StringOutput)
}

func (o VpnOcvpnOutput) SdwanZone() pulumi.StringOutput {
	return o.ApplyT(func(v *VpnOcvpn) pulumi.StringOutput { return v.SdwanZone }).(pulumi.StringOutput)
}

func (o VpnOcvpnOutput) Status() pulumi.StringOutput {
	return o.ApplyT(func(v *VpnOcvpn) pulumi.StringOutput { return v.Status }).(pulumi.StringOutput)
}

func (o VpnOcvpnOutput) Vdomparam() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *VpnOcvpn) pulumi.StringPtrOutput { return v.Vdomparam }).(pulumi.StringPtrOutput)
}

func (o VpnOcvpnOutput) WanInterfaces() VpnOcvpnWanInterfaceArrayOutput {
	return o.ApplyT(func(v *VpnOcvpn) VpnOcvpnWanInterfaceArrayOutput { return v.WanInterfaces }).(VpnOcvpnWanInterfaceArrayOutput)
}

type VpnOcvpnArrayOutput struct{ *pulumi.OutputState }

func (VpnOcvpnArrayOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*[]*VpnOcvpn)(nil)).Elem()
}

func (o VpnOcvpnArrayOutput) ToVpnOcvpnArrayOutput() VpnOcvpnArrayOutput {
	return o
}

func (o VpnOcvpnArrayOutput) ToVpnOcvpnArrayOutputWithContext(ctx context.Context) VpnOcvpnArrayOutput {
	return o
}

func (o VpnOcvpnArrayOutput) Index(i pulumi.IntInput) VpnOcvpnOutput {
	return pulumi.All(o, i).ApplyT(func(vs []interface{}) *VpnOcvpn {
		return vs[0].([]*VpnOcvpn)[vs[1].(int)]
	}).(VpnOcvpnOutput)
}

type VpnOcvpnMapOutput struct{ *pulumi.OutputState }

func (VpnOcvpnMapOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*map[string]*VpnOcvpn)(nil)).Elem()
}

func (o VpnOcvpnMapOutput) ToVpnOcvpnMapOutput() VpnOcvpnMapOutput {
	return o
}

func (o VpnOcvpnMapOutput) ToVpnOcvpnMapOutputWithContext(ctx context.Context) VpnOcvpnMapOutput {
	return o
}

func (o VpnOcvpnMapOutput) MapIndex(k pulumi.StringInput) VpnOcvpnOutput {
	return pulumi.All(o, k).ApplyT(func(vs []interface{}) *VpnOcvpn {
		return vs[0].(map[string]*VpnOcvpn)[vs[1].(string)]
	}).(VpnOcvpnOutput)
}

func init() {
	pulumi.RegisterInputType(reflect.TypeOf((*VpnOcvpnInput)(nil)).Elem(), &VpnOcvpn{})
	pulumi.RegisterInputType(reflect.TypeOf((*VpnOcvpnArrayInput)(nil)).Elem(), VpnOcvpnArray{})
	pulumi.RegisterInputType(reflect.TypeOf((*VpnOcvpnMapInput)(nil)).Elem(), VpnOcvpnMap{})
	pulumi.RegisterOutputType(VpnOcvpnOutput{})
	pulumi.RegisterOutputType(VpnOcvpnArrayOutput{})
	pulumi.RegisterOutputType(VpnOcvpnMapOutput{})
}
