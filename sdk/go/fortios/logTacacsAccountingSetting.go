// Code generated by the Pulumi Terraform Bridge (tfgen) Tool DO NOT EDIT.
// *** WARNING: Do not edit by hand unless you're certain you know what you are doing! ***

package fortios

import (
	"context"
	"reflect"

	"github.com/pulumi/pulumi/sdk/v3/go/pulumi"
)

type LogTacacsAccountingSetting struct {
	pulumi.CustomResourceState

	Server    pulumi.StringOutput    `pulumi:"server"`
	ServerKey pulumi.StringPtrOutput `pulumi:"serverKey"`
	Status    pulumi.StringOutput    `pulumi:"status"`
	Vdomparam pulumi.StringPtrOutput `pulumi:"vdomparam"`
}

// NewLogTacacsAccountingSetting registers a new resource with the given unique name, arguments, and options.
func NewLogTacacsAccountingSetting(ctx *pulumi.Context,
	name string, args *LogTacacsAccountingSettingArgs, opts ...pulumi.ResourceOption) (*LogTacacsAccountingSetting, error) {
	if args == nil {
		args = &LogTacacsAccountingSettingArgs{}
	}

	opts = pkgResourceDefaultOpts(opts)
	var resource LogTacacsAccountingSetting
	err := ctx.RegisterResource("fortios:index/logTacacsAccountingSetting:LogTacacsAccountingSetting", name, args, &resource, opts...)
	if err != nil {
		return nil, err
	}
	return &resource, nil
}

// GetLogTacacsAccountingSetting gets an existing LogTacacsAccountingSetting resource's state with the given name, ID, and optional
// state properties that are used to uniquely qualify the lookup (nil if not required).
func GetLogTacacsAccountingSetting(ctx *pulumi.Context,
	name string, id pulumi.IDInput, state *LogTacacsAccountingSettingState, opts ...pulumi.ResourceOption) (*LogTacacsAccountingSetting, error) {
	var resource LogTacacsAccountingSetting
	err := ctx.ReadResource("fortios:index/logTacacsAccountingSetting:LogTacacsAccountingSetting", name, id, state, &resource, opts...)
	if err != nil {
		return nil, err
	}
	return &resource, nil
}

// Input properties used for looking up and filtering LogTacacsAccountingSetting resources.
type logTacacsAccountingSettingState struct {
	Server    *string `pulumi:"server"`
	ServerKey *string `pulumi:"serverKey"`
	Status    *string `pulumi:"status"`
	Vdomparam *string `pulumi:"vdomparam"`
}

type LogTacacsAccountingSettingState struct {
	Server    pulumi.StringPtrInput
	ServerKey pulumi.StringPtrInput
	Status    pulumi.StringPtrInput
	Vdomparam pulumi.StringPtrInput
}

func (LogTacacsAccountingSettingState) ElementType() reflect.Type {
	return reflect.TypeOf((*logTacacsAccountingSettingState)(nil)).Elem()
}

type logTacacsAccountingSettingArgs struct {
	Server    *string `pulumi:"server"`
	ServerKey *string `pulumi:"serverKey"`
	Status    *string `pulumi:"status"`
	Vdomparam *string `pulumi:"vdomparam"`
}

// The set of arguments for constructing a LogTacacsAccountingSetting resource.
type LogTacacsAccountingSettingArgs struct {
	Server    pulumi.StringPtrInput
	ServerKey pulumi.StringPtrInput
	Status    pulumi.StringPtrInput
	Vdomparam pulumi.StringPtrInput
}

func (LogTacacsAccountingSettingArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*logTacacsAccountingSettingArgs)(nil)).Elem()
}

type LogTacacsAccountingSettingInput interface {
	pulumi.Input

	ToLogTacacsAccountingSettingOutput() LogTacacsAccountingSettingOutput
	ToLogTacacsAccountingSettingOutputWithContext(ctx context.Context) LogTacacsAccountingSettingOutput
}

func (*LogTacacsAccountingSetting) ElementType() reflect.Type {
	return reflect.TypeOf((**LogTacacsAccountingSetting)(nil)).Elem()
}

func (i *LogTacacsAccountingSetting) ToLogTacacsAccountingSettingOutput() LogTacacsAccountingSettingOutput {
	return i.ToLogTacacsAccountingSettingOutputWithContext(context.Background())
}

func (i *LogTacacsAccountingSetting) ToLogTacacsAccountingSettingOutputWithContext(ctx context.Context) LogTacacsAccountingSettingOutput {
	return pulumi.ToOutputWithContext(ctx, i).(LogTacacsAccountingSettingOutput)
}

// LogTacacsAccountingSettingArrayInput is an input type that accepts LogTacacsAccountingSettingArray and LogTacacsAccountingSettingArrayOutput values.
// You can construct a concrete instance of `LogTacacsAccountingSettingArrayInput` via:
//
//	LogTacacsAccountingSettingArray{ LogTacacsAccountingSettingArgs{...} }
type LogTacacsAccountingSettingArrayInput interface {
	pulumi.Input

	ToLogTacacsAccountingSettingArrayOutput() LogTacacsAccountingSettingArrayOutput
	ToLogTacacsAccountingSettingArrayOutputWithContext(context.Context) LogTacacsAccountingSettingArrayOutput
}

type LogTacacsAccountingSettingArray []LogTacacsAccountingSettingInput

func (LogTacacsAccountingSettingArray) ElementType() reflect.Type {
	return reflect.TypeOf((*[]*LogTacacsAccountingSetting)(nil)).Elem()
}

func (i LogTacacsAccountingSettingArray) ToLogTacacsAccountingSettingArrayOutput() LogTacacsAccountingSettingArrayOutput {
	return i.ToLogTacacsAccountingSettingArrayOutputWithContext(context.Background())
}

func (i LogTacacsAccountingSettingArray) ToLogTacacsAccountingSettingArrayOutputWithContext(ctx context.Context) LogTacacsAccountingSettingArrayOutput {
	return pulumi.ToOutputWithContext(ctx, i).(LogTacacsAccountingSettingArrayOutput)
}

// LogTacacsAccountingSettingMapInput is an input type that accepts LogTacacsAccountingSettingMap and LogTacacsAccountingSettingMapOutput values.
// You can construct a concrete instance of `LogTacacsAccountingSettingMapInput` via:
//
//	LogTacacsAccountingSettingMap{ "key": LogTacacsAccountingSettingArgs{...} }
type LogTacacsAccountingSettingMapInput interface {
	pulumi.Input

	ToLogTacacsAccountingSettingMapOutput() LogTacacsAccountingSettingMapOutput
	ToLogTacacsAccountingSettingMapOutputWithContext(context.Context) LogTacacsAccountingSettingMapOutput
}

type LogTacacsAccountingSettingMap map[string]LogTacacsAccountingSettingInput

func (LogTacacsAccountingSettingMap) ElementType() reflect.Type {
	return reflect.TypeOf((*map[string]*LogTacacsAccountingSetting)(nil)).Elem()
}

func (i LogTacacsAccountingSettingMap) ToLogTacacsAccountingSettingMapOutput() LogTacacsAccountingSettingMapOutput {
	return i.ToLogTacacsAccountingSettingMapOutputWithContext(context.Background())
}

func (i LogTacacsAccountingSettingMap) ToLogTacacsAccountingSettingMapOutputWithContext(ctx context.Context) LogTacacsAccountingSettingMapOutput {
	return pulumi.ToOutputWithContext(ctx, i).(LogTacacsAccountingSettingMapOutput)
}

type LogTacacsAccountingSettingOutput struct{ *pulumi.OutputState }

func (LogTacacsAccountingSettingOutput) ElementType() reflect.Type {
	return reflect.TypeOf((**LogTacacsAccountingSetting)(nil)).Elem()
}

func (o LogTacacsAccountingSettingOutput) ToLogTacacsAccountingSettingOutput() LogTacacsAccountingSettingOutput {
	return o
}

func (o LogTacacsAccountingSettingOutput) ToLogTacacsAccountingSettingOutputWithContext(ctx context.Context) LogTacacsAccountingSettingOutput {
	return o
}

func (o LogTacacsAccountingSettingOutput) Server() pulumi.StringOutput {
	return o.ApplyT(func(v *LogTacacsAccountingSetting) pulumi.StringOutput { return v.Server }).(pulumi.StringOutput)
}

func (o LogTacacsAccountingSettingOutput) ServerKey() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *LogTacacsAccountingSetting) pulumi.StringPtrOutput { return v.ServerKey }).(pulumi.StringPtrOutput)
}

func (o LogTacacsAccountingSettingOutput) Status() pulumi.StringOutput {
	return o.ApplyT(func(v *LogTacacsAccountingSetting) pulumi.StringOutput { return v.Status }).(pulumi.StringOutput)
}

func (o LogTacacsAccountingSettingOutput) Vdomparam() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *LogTacacsAccountingSetting) pulumi.StringPtrOutput { return v.Vdomparam }).(pulumi.StringPtrOutput)
}

type LogTacacsAccountingSettingArrayOutput struct{ *pulumi.OutputState }

func (LogTacacsAccountingSettingArrayOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*[]*LogTacacsAccountingSetting)(nil)).Elem()
}

func (o LogTacacsAccountingSettingArrayOutput) ToLogTacacsAccountingSettingArrayOutput() LogTacacsAccountingSettingArrayOutput {
	return o
}

func (o LogTacacsAccountingSettingArrayOutput) ToLogTacacsAccountingSettingArrayOutputWithContext(ctx context.Context) LogTacacsAccountingSettingArrayOutput {
	return o
}

func (o LogTacacsAccountingSettingArrayOutput) Index(i pulumi.IntInput) LogTacacsAccountingSettingOutput {
	return pulumi.All(o, i).ApplyT(func(vs []interface{}) *LogTacacsAccountingSetting {
		return vs[0].([]*LogTacacsAccountingSetting)[vs[1].(int)]
	}).(LogTacacsAccountingSettingOutput)
}

type LogTacacsAccountingSettingMapOutput struct{ *pulumi.OutputState }

func (LogTacacsAccountingSettingMapOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*map[string]*LogTacacsAccountingSetting)(nil)).Elem()
}

func (o LogTacacsAccountingSettingMapOutput) ToLogTacacsAccountingSettingMapOutput() LogTacacsAccountingSettingMapOutput {
	return o
}

func (o LogTacacsAccountingSettingMapOutput) ToLogTacacsAccountingSettingMapOutputWithContext(ctx context.Context) LogTacacsAccountingSettingMapOutput {
	return o
}

func (o LogTacacsAccountingSettingMapOutput) MapIndex(k pulumi.StringInput) LogTacacsAccountingSettingOutput {
	return pulumi.All(o, k).ApplyT(func(vs []interface{}) *LogTacacsAccountingSetting {
		return vs[0].(map[string]*LogTacacsAccountingSetting)[vs[1].(string)]
	}).(LogTacacsAccountingSettingOutput)
}

func init() {
	pulumi.RegisterInputType(reflect.TypeOf((*LogTacacsAccountingSettingInput)(nil)).Elem(), &LogTacacsAccountingSetting{})
	pulumi.RegisterInputType(reflect.TypeOf((*LogTacacsAccountingSettingArrayInput)(nil)).Elem(), LogTacacsAccountingSettingArray{})
	pulumi.RegisterInputType(reflect.TypeOf((*LogTacacsAccountingSettingMapInput)(nil)).Elem(), LogTacacsAccountingSettingMap{})
	pulumi.RegisterOutputType(LogTacacsAccountingSettingOutput{})
	pulumi.RegisterOutputType(LogTacacsAccountingSettingArrayOutput{})
	pulumi.RegisterOutputType(LogTacacsAccountingSettingMapOutput{})
}
