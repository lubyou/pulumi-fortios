// Code generated by the Pulumi Terraform Bridge (tfgen) Tool DO NOT EDIT.
// *** WARNING: Do not edit by hand unless you're certain you know what you are doing! ***

package fortios

import (
	"context"
	"reflect"

	"github.com/lubyou/pulumi-fortios/sdk/go/fortios/internal"
	"github.com/pulumi/pulumi/sdk/v3/go/pulumi"
)

type UserDeviceGroup struct {
	pulumi.CustomResourceState

	Comment             pulumi.StringPtrOutput            `pulumi:"comment"`
	DynamicSortSubtable pulumi.StringPtrOutput            `pulumi:"dynamicSortSubtable"`
	GetAllTables        pulumi.StringPtrOutput            `pulumi:"getAllTables"`
	Members             UserDeviceGroupMemberArrayOutput  `pulumi:"members"`
	Name                pulumi.StringOutput               `pulumi:"name"`
	Taggings            UserDeviceGroupTaggingArrayOutput `pulumi:"taggings"`
	Vdomparam           pulumi.StringPtrOutput            `pulumi:"vdomparam"`
}

// NewUserDeviceGroup registers a new resource with the given unique name, arguments, and options.
func NewUserDeviceGroup(ctx *pulumi.Context,
	name string, args *UserDeviceGroupArgs, opts ...pulumi.ResourceOption) (*UserDeviceGroup, error) {
	if args == nil {
		args = &UserDeviceGroupArgs{}
	}

	opts = internal.PkgResourceDefaultOpts(opts)
	var resource UserDeviceGroup
	err := ctx.RegisterResource("fortios:index/userDeviceGroup:UserDeviceGroup", name, args, &resource, opts...)
	if err != nil {
		return nil, err
	}
	return &resource, nil
}

// GetUserDeviceGroup gets an existing UserDeviceGroup resource's state with the given name, ID, and optional
// state properties that are used to uniquely qualify the lookup (nil if not required).
func GetUserDeviceGroup(ctx *pulumi.Context,
	name string, id pulumi.IDInput, state *UserDeviceGroupState, opts ...pulumi.ResourceOption) (*UserDeviceGroup, error) {
	var resource UserDeviceGroup
	err := ctx.ReadResource("fortios:index/userDeviceGroup:UserDeviceGroup", name, id, state, &resource, opts...)
	if err != nil {
		return nil, err
	}
	return &resource, nil
}

// Input properties used for looking up and filtering UserDeviceGroup resources.
type userDeviceGroupState struct {
	Comment             *string                  `pulumi:"comment"`
	DynamicSortSubtable *string                  `pulumi:"dynamicSortSubtable"`
	GetAllTables        *string                  `pulumi:"getAllTables"`
	Members             []UserDeviceGroupMember  `pulumi:"members"`
	Name                *string                  `pulumi:"name"`
	Taggings            []UserDeviceGroupTagging `pulumi:"taggings"`
	Vdomparam           *string                  `pulumi:"vdomparam"`
}

type UserDeviceGroupState struct {
	Comment             pulumi.StringPtrInput
	DynamicSortSubtable pulumi.StringPtrInput
	GetAllTables        pulumi.StringPtrInput
	Members             UserDeviceGroupMemberArrayInput
	Name                pulumi.StringPtrInput
	Taggings            UserDeviceGroupTaggingArrayInput
	Vdomparam           pulumi.StringPtrInput
}

func (UserDeviceGroupState) ElementType() reflect.Type {
	return reflect.TypeOf((*userDeviceGroupState)(nil)).Elem()
}

type userDeviceGroupArgs struct {
	Comment             *string                  `pulumi:"comment"`
	DynamicSortSubtable *string                  `pulumi:"dynamicSortSubtable"`
	GetAllTables        *string                  `pulumi:"getAllTables"`
	Members             []UserDeviceGroupMember  `pulumi:"members"`
	Name                *string                  `pulumi:"name"`
	Taggings            []UserDeviceGroupTagging `pulumi:"taggings"`
	Vdomparam           *string                  `pulumi:"vdomparam"`
}

// The set of arguments for constructing a UserDeviceGroup resource.
type UserDeviceGroupArgs struct {
	Comment             pulumi.StringPtrInput
	DynamicSortSubtable pulumi.StringPtrInput
	GetAllTables        pulumi.StringPtrInput
	Members             UserDeviceGroupMemberArrayInput
	Name                pulumi.StringPtrInput
	Taggings            UserDeviceGroupTaggingArrayInput
	Vdomparam           pulumi.StringPtrInput
}

func (UserDeviceGroupArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*userDeviceGroupArgs)(nil)).Elem()
}

type UserDeviceGroupInput interface {
	pulumi.Input

	ToUserDeviceGroupOutput() UserDeviceGroupOutput
	ToUserDeviceGroupOutputWithContext(ctx context.Context) UserDeviceGroupOutput
}

func (*UserDeviceGroup) ElementType() reflect.Type {
	return reflect.TypeOf((**UserDeviceGroup)(nil)).Elem()
}

func (i *UserDeviceGroup) ToUserDeviceGroupOutput() UserDeviceGroupOutput {
	return i.ToUserDeviceGroupOutputWithContext(context.Background())
}

func (i *UserDeviceGroup) ToUserDeviceGroupOutputWithContext(ctx context.Context) UserDeviceGroupOutput {
	return pulumi.ToOutputWithContext(ctx, i).(UserDeviceGroupOutput)
}

// UserDeviceGroupArrayInput is an input type that accepts UserDeviceGroupArray and UserDeviceGroupArrayOutput values.
// You can construct a concrete instance of `UserDeviceGroupArrayInput` via:
//
//	UserDeviceGroupArray{ UserDeviceGroupArgs{...} }
type UserDeviceGroupArrayInput interface {
	pulumi.Input

	ToUserDeviceGroupArrayOutput() UserDeviceGroupArrayOutput
	ToUserDeviceGroupArrayOutputWithContext(context.Context) UserDeviceGroupArrayOutput
}

type UserDeviceGroupArray []UserDeviceGroupInput

func (UserDeviceGroupArray) ElementType() reflect.Type {
	return reflect.TypeOf((*[]*UserDeviceGroup)(nil)).Elem()
}

func (i UserDeviceGroupArray) ToUserDeviceGroupArrayOutput() UserDeviceGroupArrayOutput {
	return i.ToUserDeviceGroupArrayOutputWithContext(context.Background())
}

func (i UserDeviceGroupArray) ToUserDeviceGroupArrayOutputWithContext(ctx context.Context) UserDeviceGroupArrayOutput {
	return pulumi.ToOutputWithContext(ctx, i).(UserDeviceGroupArrayOutput)
}

// UserDeviceGroupMapInput is an input type that accepts UserDeviceGroupMap and UserDeviceGroupMapOutput values.
// You can construct a concrete instance of `UserDeviceGroupMapInput` via:
//
//	UserDeviceGroupMap{ "key": UserDeviceGroupArgs{...} }
type UserDeviceGroupMapInput interface {
	pulumi.Input

	ToUserDeviceGroupMapOutput() UserDeviceGroupMapOutput
	ToUserDeviceGroupMapOutputWithContext(context.Context) UserDeviceGroupMapOutput
}

type UserDeviceGroupMap map[string]UserDeviceGroupInput

func (UserDeviceGroupMap) ElementType() reflect.Type {
	return reflect.TypeOf((*map[string]*UserDeviceGroup)(nil)).Elem()
}

func (i UserDeviceGroupMap) ToUserDeviceGroupMapOutput() UserDeviceGroupMapOutput {
	return i.ToUserDeviceGroupMapOutputWithContext(context.Background())
}

func (i UserDeviceGroupMap) ToUserDeviceGroupMapOutputWithContext(ctx context.Context) UserDeviceGroupMapOutput {
	return pulumi.ToOutputWithContext(ctx, i).(UserDeviceGroupMapOutput)
}

type UserDeviceGroupOutput struct{ *pulumi.OutputState }

func (UserDeviceGroupOutput) ElementType() reflect.Type {
	return reflect.TypeOf((**UserDeviceGroup)(nil)).Elem()
}

func (o UserDeviceGroupOutput) ToUserDeviceGroupOutput() UserDeviceGroupOutput {
	return o
}

func (o UserDeviceGroupOutput) ToUserDeviceGroupOutputWithContext(ctx context.Context) UserDeviceGroupOutput {
	return o
}

func (o UserDeviceGroupOutput) Comment() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *UserDeviceGroup) pulumi.StringPtrOutput { return v.Comment }).(pulumi.StringPtrOutput)
}

func (o UserDeviceGroupOutput) DynamicSortSubtable() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *UserDeviceGroup) pulumi.StringPtrOutput { return v.DynamicSortSubtable }).(pulumi.StringPtrOutput)
}

func (o UserDeviceGroupOutput) GetAllTables() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *UserDeviceGroup) pulumi.StringPtrOutput { return v.GetAllTables }).(pulumi.StringPtrOutput)
}

func (o UserDeviceGroupOutput) Members() UserDeviceGroupMemberArrayOutput {
	return o.ApplyT(func(v *UserDeviceGroup) UserDeviceGroupMemberArrayOutput { return v.Members }).(UserDeviceGroupMemberArrayOutput)
}

func (o UserDeviceGroupOutput) Name() pulumi.StringOutput {
	return o.ApplyT(func(v *UserDeviceGroup) pulumi.StringOutput { return v.Name }).(pulumi.StringOutput)
}

func (o UserDeviceGroupOutput) Taggings() UserDeviceGroupTaggingArrayOutput {
	return o.ApplyT(func(v *UserDeviceGroup) UserDeviceGroupTaggingArrayOutput { return v.Taggings }).(UserDeviceGroupTaggingArrayOutput)
}

func (o UserDeviceGroupOutput) Vdomparam() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *UserDeviceGroup) pulumi.StringPtrOutput { return v.Vdomparam }).(pulumi.StringPtrOutput)
}

type UserDeviceGroupArrayOutput struct{ *pulumi.OutputState }

func (UserDeviceGroupArrayOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*[]*UserDeviceGroup)(nil)).Elem()
}

func (o UserDeviceGroupArrayOutput) ToUserDeviceGroupArrayOutput() UserDeviceGroupArrayOutput {
	return o
}

func (o UserDeviceGroupArrayOutput) ToUserDeviceGroupArrayOutputWithContext(ctx context.Context) UserDeviceGroupArrayOutput {
	return o
}

func (o UserDeviceGroupArrayOutput) Index(i pulumi.IntInput) UserDeviceGroupOutput {
	return pulumi.All(o, i).ApplyT(func(vs []interface{}) *UserDeviceGroup {
		return vs[0].([]*UserDeviceGroup)[vs[1].(int)]
	}).(UserDeviceGroupOutput)
}

type UserDeviceGroupMapOutput struct{ *pulumi.OutputState }

func (UserDeviceGroupMapOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*map[string]*UserDeviceGroup)(nil)).Elem()
}

func (o UserDeviceGroupMapOutput) ToUserDeviceGroupMapOutput() UserDeviceGroupMapOutput {
	return o
}

func (o UserDeviceGroupMapOutput) ToUserDeviceGroupMapOutputWithContext(ctx context.Context) UserDeviceGroupMapOutput {
	return o
}

func (o UserDeviceGroupMapOutput) MapIndex(k pulumi.StringInput) UserDeviceGroupOutput {
	return pulumi.All(o, k).ApplyT(func(vs []interface{}) *UserDeviceGroup {
		return vs[0].(map[string]*UserDeviceGroup)[vs[1].(string)]
	}).(UserDeviceGroupOutput)
}

func init() {
	pulumi.RegisterInputType(reflect.TypeOf((*UserDeviceGroupInput)(nil)).Elem(), &UserDeviceGroup{})
	pulumi.RegisterInputType(reflect.TypeOf((*UserDeviceGroupArrayInput)(nil)).Elem(), UserDeviceGroupArray{})
	pulumi.RegisterInputType(reflect.TypeOf((*UserDeviceGroupMapInput)(nil)).Elem(), UserDeviceGroupMap{})
	pulumi.RegisterOutputType(UserDeviceGroupOutput{})
	pulumi.RegisterOutputType(UserDeviceGroupArrayOutput{})
	pulumi.RegisterOutputType(UserDeviceGroupMapOutput{})
}
