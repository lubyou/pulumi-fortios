// *** WARNING: this file was generated by the Pulumi Terraform Bridge (tfgen) Tool. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

package fortios

import (
	"context"
	"reflect"

	"github.com/pulumi/pulumi/sdk/v3/go/pulumi"
)

// Configure FortiSwitch switch groups.
//
// ## Import
//
// SwitchController SwitchGroup can be imported using any of these accepted formats$ export "FORTIOS_IMPORT_TABLE"="true"
//
// ```sh
//  $ pulumi import fortios:index/switchControllerSwitchGroup:SwitchControllerSwitchGroup labelname {{name}}
// ```
//
//  $ unset "FORTIOS_IMPORT_TABLE"
type SwitchControllerSwitchGroup struct {
	pulumi.CustomResourceState

	// Optional switch group description.
	Description pulumi.StringOutput `pulumi:"description"`
	// true or false, set this parameter to true when using dynamic forEach + toset to configure and sort sub-tables, please do not set this parameter when configuring static sub-tables.
	DynamicSortSubtable pulumi.StringPtrOutput `pulumi:"dynamicSortSubtable"`
	// FortiLink interface to which switch group members belong.
	Fortilink pulumi.StringOutput `pulumi:"fortilink"`
	// FortiSwitch members belonging to this switch group. The structure of `members` block is documented below.
	Members SwitchControllerSwitchGroupMemberArrayOutput `pulumi:"members"`
	// Managed device ID.
	Name pulumi.StringOutput `pulumi:"name"`
	// Specifies the vdom to which the resource will be applied when the FortiGate unit is running in VDOM mode. Only one vdom can be specified. If you want to inherit the vdom configuration of the provider, please do not set this parameter.
	Vdomparam pulumi.StringPtrOutput `pulumi:"vdomparam"`
}

// NewSwitchControllerSwitchGroup registers a new resource with the given unique name, arguments, and options.
func NewSwitchControllerSwitchGroup(ctx *pulumi.Context,
	name string, args *SwitchControllerSwitchGroupArgs, opts ...pulumi.ResourceOption) (*SwitchControllerSwitchGroup, error) {
	if args == nil {
		args = &SwitchControllerSwitchGroupArgs{}
	}

	var resource SwitchControllerSwitchGroup
	err := ctx.RegisterResource("fortios:index/switchControllerSwitchGroup:SwitchControllerSwitchGroup", name, args, &resource, opts...)
	if err != nil {
		return nil, err
	}
	return &resource, nil
}

// GetSwitchControllerSwitchGroup gets an existing SwitchControllerSwitchGroup resource's state with the given name, ID, and optional
// state properties that are used to uniquely qualify the lookup (nil if not required).
func GetSwitchControllerSwitchGroup(ctx *pulumi.Context,
	name string, id pulumi.IDInput, state *SwitchControllerSwitchGroupState, opts ...pulumi.ResourceOption) (*SwitchControllerSwitchGroup, error) {
	var resource SwitchControllerSwitchGroup
	err := ctx.ReadResource("fortios:index/switchControllerSwitchGroup:SwitchControllerSwitchGroup", name, id, state, &resource, opts...)
	if err != nil {
		return nil, err
	}
	return &resource, nil
}

// Input properties used for looking up and filtering SwitchControllerSwitchGroup resources.
type switchControllerSwitchGroupState struct {
	// Optional switch group description.
	Description *string `pulumi:"description"`
	// true or false, set this parameter to true when using dynamic forEach + toset to configure and sort sub-tables, please do not set this parameter when configuring static sub-tables.
	DynamicSortSubtable *string `pulumi:"dynamicSortSubtable"`
	// FortiLink interface to which switch group members belong.
	Fortilink *string `pulumi:"fortilink"`
	// FortiSwitch members belonging to this switch group. The structure of `members` block is documented below.
	Members []SwitchControllerSwitchGroupMember `pulumi:"members"`
	// Managed device ID.
	Name *string `pulumi:"name"`
	// Specifies the vdom to which the resource will be applied when the FortiGate unit is running in VDOM mode. Only one vdom can be specified. If you want to inherit the vdom configuration of the provider, please do not set this parameter.
	Vdomparam *string `pulumi:"vdomparam"`
}

type SwitchControllerSwitchGroupState struct {
	// Optional switch group description.
	Description pulumi.StringPtrInput
	// true or false, set this parameter to true when using dynamic forEach + toset to configure and sort sub-tables, please do not set this parameter when configuring static sub-tables.
	DynamicSortSubtable pulumi.StringPtrInput
	// FortiLink interface to which switch group members belong.
	Fortilink pulumi.StringPtrInput
	// FortiSwitch members belonging to this switch group. The structure of `members` block is documented below.
	Members SwitchControllerSwitchGroupMemberArrayInput
	// Managed device ID.
	Name pulumi.StringPtrInput
	// Specifies the vdom to which the resource will be applied when the FortiGate unit is running in VDOM mode. Only one vdom can be specified. If you want to inherit the vdom configuration of the provider, please do not set this parameter.
	Vdomparam pulumi.StringPtrInput
}

func (SwitchControllerSwitchGroupState) ElementType() reflect.Type {
	return reflect.TypeOf((*switchControllerSwitchGroupState)(nil)).Elem()
}

type switchControllerSwitchGroupArgs struct {
	// Optional switch group description.
	Description *string `pulumi:"description"`
	// true or false, set this parameter to true when using dynamic forEach + toset to configure and sort sub-tables, please do not set this parameter when configuring static sub-tables.
	DynamicSortSubtable *string `pulumi:"dynamicSortSubtable"`
	// FortiLink interface to which switch group members belong.
	Fortilink *string `pulumi:"fortilink"`
	// FortiSwitch members belonging to this switch group. The structure of `members` block is documented below.
	Members []SwitchControllerSwitchGroupMember `pulumi:"members"`
	// Managed device ID.
	Name *string `pulumi:"name"`
	// Specifies the vdom to which the resource will be applied when the FortiGate unit is running in VDOM mode. Only one vdom can be specified. If you want to inherit the vdom configuration of the provider, please do not set this parameter.
	Vdomparam *string `pulumi:"vdomparam"`
}

// The set of arguments for constructing a SwitchControllerSwitchGroup resource.
type SwitchControllerSwitchGroupArgs struct {
	// Optional switch group description.
	Description pulumi.StringPtrInput
	// true or false, set this parameter to true when using dynamic forEach + toset to configure and sort sub-tables, please do not set this parameter when configuring static sub-tables.
	DynamicSortSubtable pulumi.StringPtrInput
	// FortiLink interface to which switch group members belong.
	Fortilink pulumi.StringPtrInput
	// FortiSwitch members belonging to this switch group. The structure of `members` block is documented below.
	Members SwitchControllerSwitchGroupMemberArrayInput
	// Managed device ID.
	Name pulumi.StringPtrInput
	// Specifies the vdom to which the resource will be applied when the FortiGate unit is running in VDOM mode. Only one vdom can be specified. If you want to inherit the vdom configuration of the provider, please do not set this parameter.
	Vdomparam pulumi.StringPtrInput
}

func (SwitchControllerSwitchGroupArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*switchControllerSwitchGroupArgs)(nil)).Elem()
}

type SwitchControllerSwitchGroupInput interface {
	pulumi.Input

	ToSwitchControllerSwitchGroupOutput() SwitchControllerSwitchGroupOutput
	ToSwitchControllerSwitchGroupOutputWithContext(ctx context.Context) SwitchControllerSwitchGroupOutput
}

func (*SwitchControllerSwitchGroup) ElementType() reflect.Type {
	return reflect.TypeOf((*SwitchControllerSwitchGroup)(nil))
}

func (i *SwitchControllerSwitchGroup) ToSwitchControllerSwitchGroupOutput() SwitchControllerSwitchGroupOutput {
	return i.ToSwitchControllerSwitchGroupOutputWithContext(context.Background())
}

func (i *SwitchControllerSwitchGroup) ToSwitchControllerSwitchGroupOutputWithContext(ctx context.Context) SwitchControllerSwitchGroupOutput {
	return pulumi.ToOutputWithContext(ctx, i).(SwitchControllerSwitchGroupOutput)
}

func (i *SwitchControllerSwitchGroup) ToSwitchControllerSwitchGroupPtrOutput() SwitchControllerSwitchGroupPtrOutput {
	return i.ToSwitchControllerSwitchGroupPtrOutputWithContext(context.Background())
}

func (i *SwitchControllerSwitchGroup) ToSwitchControllerSwitchGroupPtrOutputWithContext(ctx context.Context) SwitchControllerSwitchGroupPtrOutput {
	return pulumi.ToOutputWithContext(ctx, i).(SwitchControllerSwitchGroupPtrOutput)
}

type SwitchControllerSwitchGroupPtrInput interface {
	pulumi.Input

	ToSwitchControllerSwitchGroupPtrOutput() SwitchControllerSwitchGroupPtrOutput
	ToSwitchControllerSwitchGroupPtrOutputWithContext(ctx context.Context) SwitchControllerSwitchGroupPtrOutput
}

type switchControllerSwitchGroupPtrType SwitchControllerSwitchGroupArgs

func (*switchControllerSwitchGroupPtrType) ElementType() reflect.Type {
	return reflect.TypeOf((**SwitchControllerSwitchGroup)(nil))
}

func (i *switchControllerSwitchGroupPtrType) ToSwitchControllerSwitchGroupPtrOutput() SwitchControllerSwitchGroupPtrOutput {
	return i.ToSwitchControllerSwitchGroupPtrOutputWithContext(context.Background())
}

func (i *switchControllerSwitchGroupPtrType) ToSwitchControllerSwitchGroupPtrOutputWithContext(ctx context.Context) SwitchControllerSwitchGroupPtrOutput {
	return pulumi.ToOutputWithContext(ctx, i).(SwitchControllerSwitchGroupPtrOutput)
}

// SwitchControllerSwitchGroupArrayInput is an input type that accepts SwitchControllerSwitchGroupArray and SwitchControllerSwitchGroupArrayOutput values.
// You can construct a concrete instance of `SwitchControllerSwitchGroupArrayInput` via:
//
//          SwitchControllerSwitchGroupArray{ SwitchControllerSwitchGroupArgs{...} }
type SwitchControllerSwitchGroupArrayInput interface {
	pulumi.Input

	ToSwitchControllerSwitchGroupArrayOutput() SwitchControllerSwitchGroupArrayOutput
	ToSwitchControllerSwitchGroupArrayOutputWithContext(context.Context) SwitchControllerSwitchGroupArrayOutput
}

type SwitchControllerSwitchGroupArray []SwitchControllerSwitchGroupInput

func (SwitchControllerSwitchGroupArray) ElementType() reflect.Type {
	return reflect.TypeOf(([]*SwitchControllerSwitchGroup)(nil))
}

func (i SwitchControllerSwitchGroupArray) ToSwitchControllerSwitchGroupArrayOutput() SwitchControllerSwitchGroupArrayOutput {
	return i.ToSwitchControllerSwitchGroupArrayOutputWithContext(context.Background())
}

func (i SwitchControllerSwitchGroupArray) ToSwitchControllerSwitchGroupArrayOutputWithContext(ctx context.Context) SwitchControllerSwitchGroupArrayOutput {
	return pulumi.ToOutputWithContext(ctx, i).(SwitchControllerSwitchGroupArrayOutput)
}

// SwitchControllerSwitchGroupMapInput is an input type that accepts SwitchControllerSwitchGroupMap and SwitchControllerSwitchGroupMapOutput values.
// You can construct a concrete instance of `SwitchControllerSwitchGroupMapInput` via:
//
//          SwitchControllerSwitchGroupMap{ "key": SwitchControllerSwitchGroupArgs{...} }
type SwitchControllerSwitchGroupMapInput interface {
	pulumi.Input

	ToSwitchControllerSwitchGroupMapOutput() SwitchControllerSwitchGroupMapOutput
	ToSwitchControllerSwitchGroupMapOutputWithContext(context.Context) SwitchControllerSwitchGroupMapOutput
}

type SwitchControllerSwitchGroupMap map[string]SwitchControllerSwitchGroupInput

func (SwitchControllerSwitchGroupMap) ElementType() reflect.Type {
	return reflect.TypeOf((map[string]*SwitchControllerSwitchGroup)(nil))
}

func (i SwitchControllerSwitchGroupMap) ToSwitchControllerSwitchGroupMapOutput() SwitchControllerSwitchGroupMapOutput {
	return i.ToSwitchControllerSwitchGroupMapOutputWithContext(context.Background())
}

func (i SwitchControllerSwitchGroupMap) ToSwitchControllerSwitchGroupMapOutputWithContext(ctx context.Context) SwitchControllerSwitchGroupMapOutput {
	return pulumi.ToOutputWithContext(ctx, i).(SwitchControllerSwitchGroupMapOutput)
}

type SwitchControllerSwitchGroupOutput struct {
	*pulumi.OutputState
}

func (SwitchControllerSwitchGroupOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*SwitchControllerSwitchGroup)(nil))
}

func (o SwitchControllerSwitchGroupOutput) ToSwitchControllerSwitchGroupOutput() SwitchControllerSwitchGroupOutput {
	return o
}

func (o SwitchControllerSwitchGroupOutput) ToSwitchControllerSwitchGroupOutputWithContext(ctx context.Context) SwitchControllerSwitchGroupOutput {
	return o
}

func (o SwitchControllerSwitchGroupOutput) ToSwitchControllerSwitchGroupPtrOutput() SwitchControllerSwitchGroupPtrOutput {
	return o.ToSwitchControllerSwitchGroupPtrOutputWithContext(context.Background())
}

func (o SwitchControllerSwitchGroupOutput) ToSwitchControllerSwitchGroupPtrOutputWithContext(ctx context.Context) SwitchControllerSwitchGroupPtrOutput {
	return o.ApplyT(func(v SwitchControllerSwitchGroup) *SwitchControllerSwitchGroup {
		return &v
	}).(SwitchControllerSwitchGroupPtrOutput)
}

type SwitchControllerSwitchGroupPtrOutput struct {
	*pulumi.OutputState
}

func (SwitchControllerSwitchGroupPtrOutput) ElementType() reflect.Type {
	return reflect.TypeOf((**SwitchControllerSwitchGroup)(nil))
}

func (o SwitchControllerSwitchGroupPtrOutput) ToSwitchControllerSwitchGroupPtrOutput() SwitchControllerSwitchGroupPtrOutput {
	return o
}

func (o SwitchControllerSwitchGroupPtrOutput) ToSwitchControllerSwitchGroupPtrOutputWithContext(ctx context.Context) SwitchControllerSwitchGroupPtrOutput {
	return o
}

type SwitchControllerSwitchGroupArrayOutput struct{ *pulumi.OutputState }

func (SwitchControllerSwitchGroupArrayOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*[]SwitchControllerSwitchGroup)(nil))
}

func (o SwitchControllerSwitchGroupArrayOutput) ToSwitchControllerSwitchGroupArrayOutput() SwitchControllerSwitchGroupArrayOutput {
	return o
}

func (o SwitchControllerSwitchGroupArrayOutput) ToSwitchControllerSwitchGroupArrayOutputWithContext(ctx context.Context) SwitchControllerSwitchGroupArrayOutput {
	return o
}

func (o SwitchControllerSwitchGroupArrayOutput) Index(i pulumi.IntInput) SwitchControllerSwitchGroupOutput {
	return pulumi.All(o, i).ApplyT(func(vs []interface{}) SwitchControllerSwitchGroup {
		return vs[0].([]SwitchControllerSwitchGroup)[vs[1].(int)]
	}).(SwitchControllerSwitchGroupOutput)
}

type SwitchControllerSwitchGroupMapOutput struct{ *pulumi.OutputState }

func (SwitchControllerSwitchGroupMapOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*map[string]SwitchControllerSwitchGroup)(nil))
}

func (o SwitchControllerSwitchGroupMapOutput) ToSwitchControllerSwitchGroupMapOutput() SwitchControllerSwitchGroupMapOutput {
	return o
}

func (o SwitchControllerSwitchGroupMapOutput) ToSwitchControllerSwitchGroupMapOutputWithContext(ctx context.Context) SwitchControllerSwitchGroupMapOutput {
	return o
}

func (o SwitchControllerSwitchGroupMapOutput) MapIndex(k pulumi.StringInput) SwitchControllerSwitchGroupOutput {
	return pulumi.All(o, k).ApplyT(func(vs []interface{}) SwitchControllerSwitchGroup {
		return vs[0].(map[string]SwitchControllerSwitchGroup)[vs[1].(string)]
	}).(SwitchControllerSwitchGroupOutput)
}

func init() {
	pulumi.RegisterOutputType(SwitchControllerSwitchGroupOutput{})
	pulumi.RegisterOutputType(SwitchControllerSwitchGroupPtrOutput{})
	pulumi.RegisterOutputType(SwitchControllerSwitchGroupArrayOutput{})
	pulumi.RegisterOutputType(SwitchControllerSwitchGroupMapOutput{})
}
