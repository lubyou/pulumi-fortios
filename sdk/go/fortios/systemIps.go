// Code generated by the Pulumi Terraform Bridge (tfgen) Tool DO NOT EDIT.
// *** WARNING: Do not edit by hand unless you're certain you know what you are doing! ***

package fortios

import (
	"context"
	"reflect"

	"github.com/lubyou/pulumi-fortios/sdk/go/fortios/internal"
	"github.com/pulumi/pulumi/sdk/v3/go/pulumi"
	"github.com/pulumi/pulumi/sdk/v3/go/pulumix"
)

type SystemIps struct {
	pulumi.CustomResourceState

	OverrideSignatureHoldById pulumi.StringOutput    `pulumi:"overrideSignatureHoldById"`
	SignatureHoldTime         pulumi.StringOutput    `pulumi:"signatureHoldTime"`
	Vdomparam                 pulumi.StringPtrOutput `pulumi:"vdomparam"`
}

// NewSystemIps registers a new resource with the given unique name, arguments, and options.
func NewSystemIps(ctx *pulumi.Context,
	name string, args *SystemIpsArgs, opts ...pulumi.ResourceOption) (*SystemIps, error) {
	if args == nil {
		args = &SystemIpsArgs{}
	}

	opts = internal.PkgResourceDefaultOpts(opts)
	var resource SystemIps
	err := ctx.RegisterResource("fortios:index/systemIps:SystemIps", name, args, &resource, opts...)
	if err != nil {
		return nil, err
	}
	return &resource, nil
}

// GetSystemIps gets an existing SystemIps resource's state with the given name, ID, and optional
// state properties that are used to uniquely qualify the lookup (nil if not required).
func GetSystemIps(ctx *pulumi.Context,
	name string, id pulumi.IDInput, state *SystemIpsState, opts ...pulumi.ResourceOption) (*SystemIps, error) {
	var resource SystemIps
	err := ctx.ReadResource("fortios:index/systemIps:SystemIps", name, id, state, &resource, opts...)
	if err != nil {
		return nil, err
	}
	return &resource, nil
}

// Input properties used for looking up and filtering SystemIps resources.
type systemIpsState struct {
	OverrideSignatureHoldById *string `pulumi:"overrideSignatureHoldById"`
	SignatureHoldTime         *string `pulumi:"signatureHoldTime"`
	Vdomparam                 *string `pulumi:"vdomparam"`
}

type SystemIpsState struct {
	OverrideSignatureHoldById pulumi.StringPtrInput
	SignatureHoldTime         pulumi.StringPtrInput
	Vdomparam                 pulumi.StringPtrInput
}

func (SystemIpsState) ElementType() reflect.Type {
	return reflect.TypeOf((*systemIpsState)(nil)).Elem()
}

type systemIpsArgs struct {
	OverrideSignatureHoldById *string `pulumi:"overrideSignatureHoldById"`
	SignatureHoldTime         *string `pulumi:"signatureHoldTime"`
	Vdomparam                 *string `pulumi:"vdomparam"`
}

// The set of arguments for constructing a SystemIps resource.
type SystemIpsArgs struct {
	OverrideSignatureHoldById pulumi.StringPtrInput
	SignatureHoldTime         pulumi.StringPtrInput
	Vdomparam                 pulumi.StringPtrInput
}

func (SystemIpsArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*systemIpsArgs)(nil)).Elem()
}

type SystemIpsInput interface {
	pulumi.Input

	ToSystemIpsOutput() SystemIpsOutput
	ToSystemIpsOutputWithContext(ctx context.Context) SystemIpsOutput
}

func (*SystemIps) ElementType() reflect.Type {
	return reflect.TypeOf((**SystemIps)(nil)).Elem()
}

func (i *SystemIps) ToSystemIpsOutput() SystemIpsOutput {
	return i.ToSystemIpsOutputWithContext(context.Background())
}

func (i *SystemIps) ToSystemIpsOutputWithContext(ctx context.Context) SystemIpsOutput {
	return pulumi.ToOutputWithContext(ctx, i).(SystemIpsOutput)
}

func (i *SystemIps) ToOutput(ctx context.Context) pulumix.Output[*SystemIps] {
	return pulumix.Output[*SystemIps]{
		OutputState: i.ToSystemIpsOutputWithContext(ctx).OutputState,
	}
}

// SystemIpsArrayInput is an input type that accepts SystemIpsArray and SystemIpsArrayOutput values.
// You can construct a concrete instance of `SystemIpsArrayInput` via:
//
//	SystemIpsArray{ SystemIpsArgs{...} }
type SystemIpsArrayInput interface {
	pulumi.Input

	ToSystemIpsArrayOutput() SystemIpsArrayOutput
	ToSystemIpsArrayOutputWithContext(context.Context) SystemIpsArrayOutput
}

type SystemIpsArray []SystemIpsInput

func (SystemIpsArray) ElementType() reflect.Type {
	return reflect.TypeOf((*[]*SystemIps)(nil)).Elem()
}

func (i SystemIpsArray) ToSystemIpsArrayOutput() SystemIpsArrayOutput {
	return i.ToSystemIpsArrayOutputWithContext(context.Background())
}

func (i SystemIpsArray) ToSystemIpsArrayOutputWithContext(ctx context.Context) SystemIpsArrayOutput {
	return pulumi.ToOutputWithContext(ctx, i).(SystemIpsArrayOutput)
}

func (i SystemIpsArray) ToOutput(ctx context.Context) pulumix.Output[[]*SystemIps] {
	return pulumix.Output[[]*SystemIps]{
		OutputState: i.ToSystemIpsArrayOutputWithContext(ctx).OutputState,
	}
}

// SystemIpsMapInput is an input type that accepts SystemIpsMap and SystemIpsMapOutput values.
// You can construct a concrete instance of `SystemIpsMapInput` via:
//
//	SystemIpsMap{ "key": SystemIpsArgs{...} }
type SystemIpsMapInput interface {
	pulumi.Input

	ToSystemIpsMapOutput() SystemIpsMapOutput
	ToSystemIpsMapOutputWithContext(context.Context) SystemIpsMapOutput
}

type SystemIpsMap map[string]SystemIpsInput

func (SystemIpsMap) ElementType() reflect.Type {
	return reflect.TypeOf((*map[string]*SystemIps)(nil)).Elem()
}

func (i SystemIpsMap) ToSystemIpsMapOutput() SystemIpsMapOutput {
	return i.ToSystemIpsMapOutputWithContext(context.Background())
}

func (i SystemIpsMap) ToSystemIpsMapOutputWithContext(ctx context.Context) SystemIpsMapOutput {
	return pulumi.ToOutputWithContext(ctx, i).(SystemIpsMapOutput)
}

func (i SystemIpsMap) ToOutput(ctx context.Context) pulumix.Output[map[string]*SystemIps] {
	return pulumix.Output[map[string]*SystemIps]{
		OutputState: i.ToSystemIpsMapOutputWithContext(ctx).OutputState,
	}
}

type SystemIpsOutput struct{ *pulumi.OutputState }

func (SystemIpsOutput) ElementType() reflect.Type {
	return reflect.TypeOf((**SystemIps)(nil)).Elem()
}

func (o SystemIpsOutput) ToSystemIpsOutput() SystemIpsOutput {
	return o
}

func (o SystemIpsOutput) ToSystemIpsOutputWithContext(ctx context.Context) SystemIpsOutput {
	return o
}

func (o SystemIpsOutput) ToOutput(ctx context.Context) pulumix.Output[*SystemIps] {
	return pulumix.Output[*SystemIps]{
		OutputState: o.OutputState,
	}
}

func (o SystemIpsOutput) OverrideSignatureHoldById() pulumi.StringOutput {
	return o.ApplyT(func(v *SystemIps) pulumi.StringOutput { return v.OverrideSignatureHoldById }).(pulumi.StringOutput)
}

func (o SystemIpsOutput) SignatureHoldTime() pulumi.StringOutput {
	return o.ApplyT(func(v *SystemIps) pulumi.StringOutput { return v.SignatureHoldTime }).(pulumi.StringOutput)
}

func (o SystemIpsOutput) Vdomparam() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *SystemIps) pulumi.StringPtrOutput { return v.Vdomparam }).(pulumi.StringPtrOutput)
}

type SystemIpsArrayOutput struct{ *pulumi.OutputState }

func (SystemIpsArrayOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*[]*SystemIps)(nil)).Elem()
}

func (o SystemIpsArrayOutput) ToSystemIpsArrayOutput() SystemIpsArrayOutput {
	return o
}

func (o SystemIpsArrayOutput) ToSystemIpsArrayOutputWithContext(ctx context.Context) SystemIpsArrayOutput {
	return o
}

func (o SystemIpsArrayOutput) ToOutput(ctx context.Context) pulumix.Output[[]*SystemIps] {
	return pulumix.Output[[]*SystemIps]{
		OutputState: o.OutputState,
	}
}

func (o SystemIpsArrayOutput) Index(i pulumi.IntInput) SystemIpsOutput {
	return pulumi.All(o, i).ApplyT(func(vs []interface{}) *SystemIps {
		return vs[0].([]*SystemIps)[vs[1].(int)]
	}).(SystemIpsOutput)
}

type SystemIpsMapOutput struct{ *pulumi.OutputState }

func (SystemIpsMapOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*map[string]*SystemIps)(nil)).Elem()
}

func (o SystemIpsMapOutput) ToSystemIpsMapOutput() SystemIpsMapOutput {
	return o
}

func (o SystemIpsMapOutput) ToSystemIpsMapOutputWithContext(ctx context.Context) SystemIpsMapOutput {
	return o
}

func (o SystemIpsMapOutput) ToOutput(ctx context.Context) pulumix.Output[map[string]*SystemIps] {
	return pulumix.Output[map[string]*SystemIps]{
		OutputState: o.OutputState,
	}
}

func (o SystemIpsMapOutput) MapIndex(k pulumi.StringInput) SystemIpsOutput {
	return pulumi.All(o, k).ApplyT(func(vs []interface{}) *SystemIps {
		return vs[0].(map[string]*SystemIps)[vs[1].(string)]
	}).(SystemIpsOutput)
}

func init() {
	pulumi.RegisterInputType(reflect.TypeOf((*SystemIpsInput)(nil)).Elem(), &SystemIps{})
	pulumi.RegisterInputType(reflect.TypeOf((*SystemIpsArrayInput)(nil)).Elem(), SystemIpsArray{})
	pulumi.RegisterInputType(reflect.TypeOf((*SystemIpsMapInput)(nil)).Elem(), SystemIpsMap{})
	pulumi.RegisterOutputType(SystemIpsOutput{})
	pulumi.RegisterOutputType(SystemIpsArrayOutput{})
	pulumi.RegisterOutputType(SystemIpsMapOutput{})
}
