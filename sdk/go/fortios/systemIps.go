// *** WARNING: this file was generated by the Pulumi Terraform Bridge (tfgen) Tool. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

package fortios

import (
	"context"
	"reflect"

	"github.com/pulumi/pulumi/sdk/v3/go/pulumi"
)

// Configure IPS system settings. Applies to FortiOS Version `>= 6.4.2`.
//
// ## Import
//
// System Ips can be imported using any of these accepted formats$ export "FORTIOS_IMPORT_TABLE"="true"
//
// ```sh
//  $ pulumi import fortios:index/systemIps:SystemIps labelname SystemIps
// ```
//
//  $ unset "FORTIOS_IMPORT_TABLE"
type SystemIps struct {
	pulumi.CustomResourceState

	// Enable/disable override of hold of triggering signatures that are specified by IDs regardless of hold. Valid values: `enable`, `disable`.
	OverrideSignatureHoldById pulumi.StringOutput `pulumi:"overrideSignatureHoldById"`
	// Time to hold and monitor IPS signatures. Format <#d##h> (day range: 0 - 7, hour range: 0 - 23, max hold time: 7d0h, default hold time: 0d0h).
	SignatureHoldTime pulumi.StringOutput `pulumi:"signatureHoldTime"`
	// Specifies the vdom to which the resource will be applied when the FortiGate unit is running in VDOM mode. Only one vdom can be specified. If you want to inherit the vdom configuration of the provider, please do not set this parameter.
	Vdomparam pulumi.StringPtrOutput `pulumi:"vdomparam"`
}

// NewSystemIps registers a new resource with the given unique name, arguments, and options.
func NewSystemIps(ctx *pulumi.Context,
	name string, args *SystemIpsArgs, opts ...pulumi.ResourceOption) (*SystemIps, error) {
	if args == nil {
		args = &SystemIpsArgs{}
	}

	opts = pkgResourceDefaultOpts(opts)
	var resource SystemIps
	err := ctx.RegisterResource("fortios:index/systemIps:SystemIps", name, args, &resource, opts...)
	if err != nil {
		return nil, err
	}
	return &resource, nil
}

// GetSystemIps gets an existing SystemIps resource's state with the given name, ID, and optional
// state properties that are used to uniquely qualify the lookup (nil if not required).
func GetSystemIps(ctx *pulumi.Context,
	name string, id pulumi.IDInput, state *SystemIpsState, opts ...pulumi.ResourceOption) (*SystemIps, error) {
	var resource SystemIps
	err := ctx.ReadResource("fortios:index/systemIps:SystemIps", name, id, state, &resource, opts...)
	if err != nil {
		return nil, err
	}
	return &resource, nil
}

// Input properties used for looking up and filtering SystemIps resources.
type systemIpsState struct {
	// Enable/disable override of hold of triggering signatures that are specified by IDs regardless of hold. Valid values: `enable`, `disable`.
	OverrideSignatureHoldById *string `pulumi:"overrideSignatureHoldById"`
	// Time to hold and monitor IPS signatures. Format <#d##h> (day range: 0 - 7, hour range: 0 - 23, max hold time: 7d0h, default hold time: 0d0h).
	SignatureHoldTime *string `pulumi:"signatureHoldTime"`
	// Specifies the vdom to which the resource will be applied when the FortiGate unit is running in VDOM mode. Only one vdom can be specified. If you want to inherit the vdom configuration of the provider, please do not set this parameter.
	Vdomparam *string `pulumi:"vdomparam"`
}

type SystemIpsState struct {
	// Enable/disable override of hold of triggering signatures that are specified by IDs regardless of hold. Valid values: `enable`, `disable`.
	OverrideSignatureHoldById pulumi.StringPtrInput
	// Time to hold and monitor IPS signatures. Format <#d##h> (day range: 0 - 7, hour range: 0 - 23, max hold time: 7d0h, default hold time: 0d0h).
	SignatureHoldTime pulumi.StringPtrInput
	// Specifies the vdom to which the resource will be applied when the FortiGate unit is running in VDOM mode. Only one vdom can be specified. If you want to inherit the vdom configuration of the provider, please do not set this parameter.
	Vdomparam pulumi.StringPtrInput
}

func (SystemIpsState) ElementType() reflect.Type {
	return reflect.TypeOf((*systemIpsState)(nil)).Elem()
}

type systemIpsArgs struct {
	// Enable/disable override of hold of triggering signatures that are specified by IDs regardless of hold. Valid values: `enable`, `disable`.
	OverrideSignatureHoldById *string `pulumi:"overrideSignatureHoldById"`
	// Time to hold and monitor IPS signatures. Format <#d##h> (day range: 0 - 7, hour range: 0 - 23, max hold time: 7d0h, default hold time: 0d0h).
	SignatureHoldTime *string `pulumi:"signatureHoldTime"`
	// Specifies the vdom to which the resource will be applied when the FortiGate unit is running in VDOM mode. Only one vdom can be specified. If you want to inherit the vdom configuration of the provider, please do not set this parameter.
	Vdomparam *string `pulumi:"vdomparam"`
}

// The set of arguments for constructing a SystemIps resource.
type SystemIpsArgs struct {
	// Enable/disable override of hold of triggering signatures that are specified by IDs regardless of hold. Valid values: `enable`, `disable`.
	OverrideSignatureHoldById pulumi.StringPtrInput
	// Time to hold and monitor IPS signatures. Format <#d##h> (day range: 0 - 7, hour range: 0 - 23, max hold time: 7d0h, default hold time: 0d0h).
	SignatureHoldTime pulumi.StringPtrInput
	// Specifies the vdom to which the resource will be applied when the FortiGate unit is running in VDOM mode. Only one vdom can be specified. If you want to inherit the vdom configuration of the provider, please do not set this parameter.
	Vdomparam pulumi.StringPtrInput
}

func (SystemIpsArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*systemIpsArgs)(nil)).Elem()
}

type SystemIpsInput interface {
	pulumi.Input

	ToSystemIpsOutput() SystemIpsOutput
	ToSystemIpsOutputWithContext(ctx context.Context) SystemIpsOutput
}

func (*SystemIps) ElementType() reflect.Type {
	return reflect.TypeOf((**SystemIps)(nil)).Elem()
}

func (i *SystemIps) ToSystemIpsOutput() SystemIpsOutput {
	return i.ToSystemIpsOutputWithContext(context.Background())
}

func (i *SystemIps) ToSystemIpsOutputWithContext(ctx context.Context) SystemIpsOutput {
	return pulumi.ToOutputWithContext(ctx, i).(SystemIpsOutput)
}

// SystemIpsArrayInput is an input type that accepts SystemIpsArray and SystemIpsArrayOutput values.
// You can construct a concrete instance of `SystemIpsArrayInput` via:
//
//          SystemIpsArray{ SystemIpsArgs{...} }
type SystemIpsArrayInput interface {
	pulumi.Input

	ToSystemIpsArrayOutput() SystemIpsArrayOutput
	ToSystemIpsArrayOutputWithContext(context.Context) SystemIpsArrayOutput
}

type SystemIpsArray []SystemIpsInput

func (SystemIpsArray) ElementType() reflect.Type {
	return reflect.TypeOf((*[]*SystemIps)(nil)).Elem()
}

func (i SystemIpsArray) ToSystemIpsArrayOutput() SystemIpsArrayOutput {
	return i.ToSystemIpsArrayOutputWithContext(context.Background())
}

func (i SystemIpsArray) ToSystemIpsArrayOutputWithContext(ctx context.Context) SystemIpsArrayOutput {
	return pulumi.ToOutputWithContext(ctx, i).(SystemIpsArrayOutput)
}

// SystemIpsMapInput is an input type that accepts SystemIpsMap and SystemIpsMapOutput values.
// You can construct a concrete instance of `SystemIpsMapInput` via:
//
//          SystemIpsMap{ "key": SystemIpsArgs{...} }
type SystemIpsMapInput interface {
	pulumi.Input

	ToSystemIpsMapOutput() SystemIpsMapOutput
	ToSystemIpsMapOutputWithContext(context.Context) SystemIpsMapOutput
}

type SystemIpsMap map[string]SystemIpsInput

func (SystemIpsMap) ElementType() reflect.Type {
	return reflect.TypeOf((*map[string]*SystemIps)(nil)).Elem()
}

func (i SystemIpsMap) ToSystemIpsMapOutput() SystemIpsMapOutput {
	return i.ToSystemIpsMapOutputWithContext(context.Background())
}

func (i SystemIpsMap) ToSystemIpsMapOutputWithContext(ctx context.Context) SystemIpsMapOutput {
	return pulumi.ToOutputWithContext(ctx, i).(SystemIpsMapOutput)
}

type SystemIpsOutput struct{ *pulumi.OutputState }

func (SystemIpsOutput) ElementType() reflect.Type {
	return reflect.TypeOf((**SystemIps)(nil)).Elem()
}

func (o SystemIpsOutput) ToSystemIpsOutput() SystemIpsOutput {
	return o
}

func (o SystemIpsOutput) ToSystemIpsOutputWithContext(ctx context.Context) SystemIpsOutput {
	return o
}

type SystemIpsArrayOutput struct{ *pulumi.OutputState }

func (SystemIpsArrayOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*[]*SystemIps)(nil)).Elem()
}

func (o SystemIpsArrayOutput) ToSystemIpsArrayOutput() SystemIpsArrayOutput {
	return o
}

func (o SystemIpsArrayOutput) ToSystemIpsArrayOutputWithContext(ctx context.Context) SystemIpsArrayOutput {
	return o
}

func (o SystemIpsArrayOutput) Index(i pulumi.IntInput) SystemIpsOutput {
	return pulumi.All(o, i).ApplyT(func(vs []interface{}) *SystemIps {
		return vs[0].([]*SystemIps)[vs[1].(int)]
	}).(SystemIpsOutput)
}

type SystemIpsMapOutput struct{ *pulumi.OutputState }

func (SystemIpsMapOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*map[string]*SystemIps)(nil)).Elem()
}

func (o SystemIpsMapOutput) ToSystemIpsMapOutput() SystemIpsMapOutput {
	return o
}

func (o SystemIpsMapOutput) ToSystemIpsMapOutputWithContext(ctx context.Context) SystemIpsMapOutput {
	return o
}

func (o SystemIpsMapOutput) MapIndex(k pulumi.StringInput) SystemIpsOutput {
	return pulumi.All(o, k).ApplyT(func(vs []interface{}) *SystemIps {
		return vs[0].(map[string]*SystemIps)[vs[1].(string)]
	}).(SystemIpsOutput)
}

func init() {
	pulumi.RegisterInputType(reflect.TypeOf((*SystemIpsInput)(nil)).Elem(), &SystemIps{})
	pulumi.RegisterInputType(reflect.TypeOf((*SystemIpsArrayInput)(nil)).Elem(), SystemIpsArray{})
	pulumi.RegisterInputType(reflect.TypeOf((*SystemIpsMapInput)(nil)).Elem(), SystemIpsMap{})
	pulumi.RegisterOutputType(SystemIpsOutput{})
	pulumi.RegisterOutputType(SystemIpsArrayOutput{})
	pulumi.RegisterOutputType(SystemIpsMapOutput{})
}
