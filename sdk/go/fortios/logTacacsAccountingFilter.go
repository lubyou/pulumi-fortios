// Code generated by the Pulumi Terraform Bridge (tfgen) Tool DO NOT EDIT.
// *** WARNING: Do not edit by hand unless you're certain you know what you are doing! ***

package fortios

import (
	"context"
	"reflect"

	"github.com/lubyou/pulumi-fortios/sdk/go/fortios/internal"
	"github.com/pulumi/pulumi/sdk/v3/go/pulumi"
	"github.com/pulumi/pulumi/sdk/v3/go/pulumix"
)

type LogTacacsAccountingFilter struct {
	pulumi.CustomResourceState

	CliCmdAudit       pulumi.StringOutput    `pulumi:"cliCmdAudit"`
	ConfigChangeAudit pulumi.StringOutput    `pulumi:"configChangeAudit"`
	LoginAudit        pulumi.StringOutput    `pulumi:"loginAudit"`
	Vdomparam         pulumi.StringPtrOutput `pulumi:"vdomparam"`
}

// NewLogTacacsAccountingFilter registers a new resource with the given unique name, arguments, and options.
func NewLogTacacsAccountingFilter(ctx *pulumi.Context,
	name string, args *LogTacacsAccountingFilterArgs, opts ...pulumi.ResourceOption) (*LogTacacsAccountingFilter, error) {
	if args == nil {
		args = &LogTacacsAccountingFilterArgs{}
	}

	opts = internal.PkgResourceDefaultOpts(opts)
	var resource LogTacacsAccountingFilter
	err := ctx.RegisterResource("fortios:index/logTacacsAccountingFilter:LogTacacsAccountingFilter", name, args, &resource, opts...)
	if err != nil {
		return nil, err
	}
	return &resource, nil
}

// GetLogTacacsAccountingFilter gets an existing LogTacacsAccountingFilter resource's state with the given name, ID, and optional
// state properties that are used to uniquely qualify the lookup (nil if not required).
func GetLogTacacsAccountingFilter(ctx *pulumi.Context,
	name string, id pulumi.IDInput, state *LogTacacsAccountingFilterState, opts ...pulumi.ResourceOption) (*LogTacacsAccountingFilter, error) {
	var resource LogTacacsAccountingFilter
	err := ctx.ReadResource("fortios:index/logTacacsAccountingFilter:LogTacacsAccountingFilter", name, id, state, &resource, opts...)
	if err != nil {
		return nil, err
	}
	return &resource, nil
}

// Input properties used for looking up and filtering LogTacacsAccountingFilter resources.
type logTacacsAccountingFilterState struct {
	CliCmdAudit       *string `pulumi:"cliCmdAudit"`
	ConfigChangeAudit *string `pulumi:"configChangeAudit"`
	LoginAudit        *string `pulumi:"loginAudit"`
	Vdomparam         *string `pulumi:"vdomparam"`
}

type LogTacacsAccountingFilterState struct {
	CliCmdAudit       pulumi.StringPtrInput
	ConfigChangeAudit pulumi.StringPtrInput
	LoginAudit        pulumi.StringPtrInput
	Vdomparam         pulumi.StringPtrInput
}

func (LogTacacsAccountingFilterState) ElementType() reflect.Type {
	return reflect.TypeOf((*logTacacsAccountingFilterState)(nil)).Elem()
}

type logTacacsAccountingFilterArgs struct {
	CliCmdAudit       *string `pulumi:"cliCmdAudit"`
	ConfigChangeAudit *string `pulumi:"configChangeAudit"`
	LoginAudit        *string `pulumi:"loginAudit"`
	Vdomparam         *string `pulumi:"vdomparam"`
}

// The set of arguments for constructing a LogTacacsAccountingFilter resource.
type LogTacacsAccountingFilterArgs struct {
	CliCmdAudit       pulumi.StringPtrInput
	ConfigChangeAudit pulumi.StringPtrInput
	LoginAudit        pulumi.StringPtrInput
	Vdomparam         pulumi.StringPtrInput
}

func (LogTacacsAccountingFilterArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*logTacacsAccountingFilterArgs)(nil)).Elem()
}

type LogTacacsAccountingFilterInput interface {
	pulumi.Input

	ToLogTacacsAccountingFilterOutput() LogTacacsAccountingFilterOutput
	ToLogTacacsAccountingFilterOutputWithContext(ctx context.Context) LogTacacsAccountingFilterOutput
}

func (*LogTacacsAccountingFilter) ElementType() reflect.Type {
	return reflect.TypeOf((**LogTacacsAccountingFilter)(nil)).Elem()
}

func (i *LogTacacsAccountingFilter) ToLogTacacsAccountingFilterOutput() LogTacacsAccountingFilterOutput {
	return i.ToLogTacacsAccountingFilterOutputWithContext(context.Background())
}

func (i *LogTacacsAccountingFilter) ToLogTacacsAccountingFilterOutputWithContext(ctx context.Context) LogTacacsAccountingFilterOutput {
	return pulumi.ToOutputWithContext(ctx, i).(LogTacacsAccountingFilterOutput)
}

func (i *LogTacacsAccountingFilter) ToOutput(ctx context.Context) pulumix.Output[*LogTacacsAccountingFilter] {
	return pulumix.Output[*LogTacacsAccountingFilter]{
		OutputState: i.ToLogTacacsAccountingFilterOutputWithContext(ctx).OutputState,
	}
}

// LogTacacsAccountingFilterArrayInput is an input type that accepts LogTacacsAccountingFilterArray and LogTacacsAccountingFilterArrayOutput values.
// You can construct a concrete instance of `LogTacacsAccountingFilterArrayInput` via:
//
//	LogTacacsAccountingFilterArray{ LogTacacsAccountingFilterArgs{...} }
type LogTacacsAccountingFilterArrayInput interface {
	pulumi.Input

	ToLogTacacsAccountingFilterArrayOutput() LogTacacsAccountingFilterArrayOutput
	ToLogTacacsAccountingFilterArrayOutputWithContext(context.Context) LogTacacsAccountingFilterArrayOutput
}

type LogTacacsAccountingFilterArray []LogTacacsAccountingFilterInput

func (LogTacacsAccountingFilterArray) ElementType() reflect.Type {
	return reflect.TypeOf((*[]*LogTacacsAccountingFilter)(nil)).Elem()
}

func (i LogTacacsAccountingFilterArray) ToLogTacacsAccountingFilterArrayOutput() LogTacacsAccountingFilterArrayOutput {
	return i.ToLogTacacsAccountingFilterArrayOutputWithContext(context.Background())
}

func (i LogTacacsAccountingFilterArray) ToLogTacacsAccountingFilterArrayOutputWithContext(ctx context.Context) LogTacacsAccountingFilterArrayOutput {
	return pulumi.ToOutputWithContext(ctx, i).(LogTacacsAccountingFilterArrayOutput)
}

func (i LogTacacsAccountingFilterArray) ToOutput(ctx context.Context) pulumix.Output[[]*LogTacacsAccountingFilter] {
	return pulumix.Output[[]*LogTacacsAccountingFilter]{
		OutputState: i.ToLogTacacsAccountingFilterArrayOutputWithContext(ctx).OutputState,
	}
}

// LogTacacsAccountingFilterMapInput is an input type that accepts LogTacacsAccountingFilterMap and LogTacacsAccountingFilterMapOutput values.
// You can construct a concrete instance of `LogTacacsAccountingFilterMapInput` via:
//
//	LogTacacsAccountingFilterMap{ "key": LogTacacsAccountingFilterArgs{...} }
type LogTacacsAccountingFilterMapInput interface {
	pulumi.Input

	ToLogTacacsAccountingFilterMapOutput() LogTacacsAccountingFilterMapOutput
	ToLogTacacsAccountingFilterMapOutputWithContext(context.Context) LogTacacsAccountingFilterMapOutput
}

type LogTacacsAccountingFilterMap map[string]LogTacacsAccountingFilterInput

func (LogTacacsAccountingFilterMap) ElementType() reflect.Type {
	return reflect.TypeOf((*map[string]*LogTacacsAccountingFilter)(nil)).Elem()
}

func (i LogTacacsAccountingFilterMap) ToLogTacacsAccountingFilterMapOutput() LogTacacsAccountingFilterMapOutput {
	return i.ToLogTacacsAccountingFilterMapOutputWithContext(context.Background())
}

func (i LogTacacsAccountingFilterMap) ToLogTacacsAccountingFilterMapOutputWithContext(ctx context.Context) LogTacacsAccountingFilterMapOutput {
	return pulumi.ToOutputWithContext(ctx, i).(LogTacacsAccountingFilterMapOutput)
}

func (i LogTacacsAccountingFilterMap) ToOutput(ctx context.Context) pulumix.Output[map[string]*LogTacacsAccountingFilter] {
	return pulumix.Output[map[string]*LogTacacsAccountingFilter]{
		OutputState: i.ToLogTacacsAccountingFilterMapOutputWithContext(ctx).OutputState,
	}
}

type LogTacacsAccountingFilterOutput struct{ *pulumi.OutputState }

func (LogTacacsAccountingFilterOutput) ElementType() reflect.Type {
	return reflect.TypeOf((**LogTacacsAccountingFilter)(nil)).Elem()
}

func (o LogTacacsAccountingFilterOutput) ToLogTacacsAccountingFilterOutput() LogTacacsAccountingFilterOutput {
	return o
}

func (o LogTacacsAccountingFilterOutput) ToLogTacacsAccountingFilterOutputWithContext(ctx context.Context) LogTacacsAccountingFilterOutput {
	return o
}

func (o LogTacacsAccountingFilterOutput) ToOutput(ctx context.Context) pulumix.Output[*LogTacacsAccountingFilter] {
	return pulumix.Output[*LogTacacsAccountingFilter]{
		OutputState: o.OutputState,
	}
}

func (o LogTacacsAccountingFilterOutput) CliCmdAudit() pulumi.StringOutput {
	return o.ApplyT(func(v *LogTacacsAccountingFilter) pulumi.StringOutput { return v.CliCmdAudit }).(pulumi.StringOutput)
}

func (o LogTacacsAccountingFilterOutput) ConfigChangeAudit() pulumi.StringOutput {
	return o.ApplyT(func(v *LogTacacsAccountingFilter) pulumi.StringOutput { return v.ConfigChangeAudit }).(pulumi.StringOutput)
}

func (o LogTacacsAccountingFilterOutput) LoginAudit() pulumi.StringOutput {
	return o.ApplyT(func(v *LogTacacsAccountingFilter) pulumi.StringOutput { return v.LoginAudit }).(pulumi.StringOutput)
}

func (o LogTacacsAccountingFilterOutput) Vdomparam() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *LogTacacsAccountingFilter) pulumi.StringPtrOutput { return v.Vdomparam }).(pulumi.StringPtrOutput)
}

type LogTacacsAccountingFilterArrayOutput struct{ *pulumi.OutputState }

func (LogTacacsAccountingFilterArrayOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*[]*LogTacacsAccountingFilter)(nil)).Elem()
}

func (o LogTacacsAccountingFilterArrayOutput) ToLogTacacsAccountingFilterArrayOutput() LogTacacsAccountingFilterArrayOutput {
	return o
}

func (o LogTacacsAccountingFilterArrayOutput) ToLogTacacsAccountingFilterArrayOutputWithContext(ctx context.Context) LogTacacsAccountingFilterArrayOutput {
	return o
}

func (o LogTacacsAccountingFilterArrayOutput) ToOutput(ctx context.Context) pulumix.Output[[]*LogTacacsAccountingFilter] {
	return pulumix.Output[[]*LogTacacsAccountingFilter]{
		OutputState: o.OutputState,
	}
}

func (o LogTacacsAccountingFilterArrayOutput) Index(i pulumi.IntInput) LogTacacsAccountingFilterOutput {
	return pulumi.All(o, i).ApplyT(func(vs []interface{}) *LogTacacsAccountingFilter {
		return vs[0].([]*LogTacacsAccountingFilter)[vs[1].(int)]
	}).(LogTacacsAccountingFilterOutput)
}

type LogTacacsAccountingFilterMapOutput struct{ *pulumi.OutputState }

func (LogTacacsAccountingFilterMapOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*map[string]*LogTacacsAccountingFilter)(nil)).Elem()
}

func (o LogTacacsAccountingFilterMapOutput) ToLogTacacsAccountingFilterMapOutput() LogTacacsAccountingFilterMapOutput {
	return o
}

func (o LogTacacsAccountingFilterMapOutput) ToLogTacacsAccountingFilterMapOutputWithContext(ctx context.Context) LogTacacsAccountingFilterMapOutput {
	return o
}

func (o LogTacacsAccountingFilterMapOutput) ToOutput(ctx context.Context) pulumix.Output[map[string]*LogTacacsAccountingFilter] {
	return pulumix.Output[map[string]*LogTacacsAccountingFilter]{
		OutputState: o.OutputState,
	}
}

func (o LogTacacsAccountingFilterMapOutput) MapIndex(k pulumi.StringInput) LogTacacsAccountingFilterOutput {
	return pulumi.All(o, k).ApplyT(func(vs []interface{}) *LogTacacsAccountingFilter {
		return vs[0].(map[string]*LogTacacsAccountingFilter)[vs[1].(string)]
	}).(LogTacacsAccountingFilterOutput)
}

func init() {
	pulumi.RegisterInputType(reflect.TypeOf((*LogTacacsAccountingFilterInput)(nil)).Elem(), &LogTacacsAccountingFilter{})
	pulumi.RegisterInputType(reflect.TypeOf((*LogTacacsAccountingFilterArrayInput)(nil)).Elem(), LogTacacsAccountingFilterArray{})
	pulumi.RegisterInputType(reflect.TypeOf((*LogTacacsAccountingFilterMapInput)(nil)).Elem(), LogTacacsAccountingFilterMap{})
	pulumi.RegisterOutputType(LogTacacsAccountingFilterOutput{})
	pulumi.RegisterOutputType(LogTacacsAccountingFilterArrayOutput{})
	pulumi.RegisterOutputType(LogTacacsAccountingFilterMapOutput{})
}
