// Code generated by the Pulumi Terraform Bridge (tfgen) Tool DO NOT EDIT.
// *** WARNING: Do not edit by hand unless you're certain you know what you are doing! ***

package fortios

import (
	"context"
	"reflect"

	"github.com/pkg/errors"
	"github.com/pulumi/pulumi/sdk/v3/go/pulumi"
)

// Provides a resource to configure firewall policies of FortiOS.
//
// !> **Warning:** The resource will be deprecated and replaced by new resource `FirewallPolicy`, we recommend that you use the new resource.
//
// ## Example Usage
// ### 1
// ```go
// package main
//
// import (
// 	"github.com/lubyou/pulumi-fortios/sdk/go/fortios"
// 	"github.com/pulumi/pulumi/sdk/v3/go/pulumi"
// )
//
// func main() {
// 	pulumi.Run(func(ctx *pulumi.Context) error {
// 		_, err := fortios.NewFirewallSecurityPolicy1(ctx, "test1", &fortios.FirewallSecurityPolicy1Args{
// 			Action:          pulumi.String("accept"),
// 			ApplicationList: pulumi.String("block-high-risk"),
// 			AvProfile:       pulumi.String("wifi-default"),
// 			CapturePacket:   pulumi.String("enable"),
// 			Comments:        pulumi.String("security policy"),
// 			Devices: pulumi.StringArray{
// 				pulumi.String("android-phone"),
// 				pulumi.String("android-tablet"),
// 			},
// 			DnsfilterProfile: pulumi.String("default"),
// 			Dstaddrs: pulumi.StringArray{
// 				pulumi.String("swscan.apple.com"),
// 				pulumi.String("update.microsoft.com"),
// 			},
// 			Dstintfs: pulumi.StringArray{
// 				pulumi.String("port1"),
// 			},
// 			Groups: pulumi.StringArray{
// 				pulumi.String("Guest-group"),
// 				pulumi.String("SSO_Guest_Users"),
// 			},
// 			InternetService:    pulumi.String("disable"),
// 			InternetServiceIds: pulumi.IntArray{},
// 			Ippool:             pulumi.String("enable"),
// 			IpsSensor:          pulumi.String("protect_client"),
// 			Logtraffic:         pulumi.String("all"),
// 			LogtrafficStart:    pulumi.String("enable"),
// 			Nat:                pulumi.String("enable"),
// 			Poolnames: pulumi.StringArray{
// 				pulumi.String("rewq"),
// 				pulumi.String("rbb"),
// 			},
// 			Schedule: pulumi.String("always"),
// 			Services: pulumi.StringArray{
// 				pulumi.String("ALL_ICMP"),
// 				pulumi.String("FTP"),
// 			},
// 			Srcaddrs: pulumi.StringArray{
// 				pulumi.String("swscan.apple.com"),
// 				pulumi.String("google-play"),
// 			},
// 			Srcintfs: pulumi.StringArray{
// 				pulumi.String("port2"),
// 			},
// 			SslSshProfile:    pulumi.String("certificate-inspection"),
// 			UtmStatus:        pulumi.String("enable"),
// 			WebfilterProfile: pulumi.String("monitor-all"),
// 		})
// 		if err != nil {
// 			return err
// 		}
// 		return nil
// 	})
// }
// ```
// ### 2
// ```go
// package main
//
// import (
// 	"github.com/lubyou/pulumi-fortios/sdk/go/fortios"
// 	"github.com/pulumi/pulumi/sdk/v3/go/pulumi"
// )
//
// func main() {
// 	pulumi.Run(func(ctx *pulumi.Context) error {
// 		_, err := fortios.NewFirewallSecurityPolicy1(ctx, "test2", &fortios.FirewallSecurityPolicy1Args{
// 			Action:          pulumi.String("accept"),
// 			ApplicationList: pulumi.String("block-high-risk"),
// 			AvProfile:       pulumi.String("wifi-default"),
// 			CapturePacket:   pulumi.String("enable"),
// 			Comments:        pulumi.String("security policy"),
// 			Devices: pulumi.StringArray{
// 				pulumi.String("android-phone"),
// 				pulumi.String("android-tablet"),
// 			},
// 			DnsfilterProfile: pulumi.String("default"),
// 			Dstaddrs: pulumi.StringArray{
// 				pulumi.String("swscan.apple.com"),
// 				pulumi.String("update.microsoft.com"),
// 			},
// 			Dstintfs: pulumi.StringArray{
// 				pulumi.String("port1"),
// 			},
// 			Groups: pulumi.StringArray{
// 				pulumi.String("Guest-group"),
// 				pulumi.String("SSO_Guest_Users"),
// 			},
// 			InternetService: pulumi.String("enable"),
// 			InternetServiceIds: pulumi.IntArray{
// 				pulumi.Int(917520),
// 				pulumi.Int(6881402),
// 				pulumi.Int(393219),
// 			},
// 			Ippool:          pulumi.String("enable"),
// 			IpsSensor:       pulumi.String("protect_client"),
// 			Logtraffic:      pulumi.String("all"),
// 			LogtrafficStart: pulumi.String("enable"),
// 			Nat:             pulumi.String("enable"),
// 			Poolnames: pulumi.StringArray{
// 				pulumi.String("rewq"),
// 				pulumi.String("rbb"),
// 			},
// 			Schedule: pulumi.String("always"),
// 			Services: pulumi.StringArray{},
// 			Srcaddrs: pulumi.StringArray{
// 				pulumi.String("swscan.apple.com"),
// 				pulumi.String("google-play"),
// 			},
// 			Srcintfs: pulumi.StringArray{
// 				pulumi.String("port2"),
// 			},
// 			SslSshProfile:    pulumi.String("certificate-inspection"),
// 			UtmStatus:        pulumi.String("enable"),
// 			WebfilterProfile: pulumi.String("monitor-all"),
// 		})
// 		if err != nil {
// 			return err
// 		}
// 		return nil
// 	})
// }
// ```
// ### 3
// ```go
// package main
//
// import (
// 	"github.com/lubyou/pulumi-fortios/sdk/go/fortios"
// 	"github.com/pulumi/pulumi/sdk/v3/go/pulumi"
// )
//
// func main() {
// 	pulumi.Run(func(ctx *pulumi.Context) error {
// 		_, err := fortios.NewFirewallSecurityPolicy1(ctx, "test1", &fortios.FirewallSecurityPolicy1Args{
// 			Action:           pulumi.String("accept"),
// 			ApplicationList:  pulumi.String("block-high-risk"),
// 			AvProfile:        pulumi.String("wifi-default"),
// 			CapturePacket:    pulumi.String("enable"),
// 			Comments:         pulumi.String("security policy"),
// 			Devices:          pulumi.StringArray{},
// 			DnsfilterProfile: pulumi.String("default"),
// 			Dstaddrs:         pulumi.StringArray{},
// 			Dstintfs: pulumi.StringArray{
// 				pulumi.String("port4"),
// 			},
// 			Groups: pulumi.StringArray{
// 				pulumi.String("Guest-group"),
// 				pulumi.String("SSO_Guest_Users"),
// 			},
// 			InternetService: pulumi.String("enable"),
// 			InternetServiceIds: pulumi.IntArray{
// 				pulumi.Int(5242880),
// 			},
// 			InternetServiceSrc: pulumi.String("enable"),
// 			InternetServiceSrcIds: pulumi.IntArray{
// 				pulumi.Int(65643),
// 			},
// 			Ippool:                 pulumi.String("disable"),
// 			IpsSensor:              pulumi.String("protect_client"),
// 			Logtraffic:             pulumi.String("all"),
// 			LogtrafficStart:        pulumi.String("enable"),
// 			Nat:                    pulumi.String("enable"),
// 			Poolnames:              pulumi.StringArray{},
// 			ProfileProtocolOptions: pulumi.String("default"),
// 			Schedule:               pulumi.String("always"),
// 			Services:               pulumi.StringArray{},
// 			Srcaddrs:               pulumi.StringArray{},
// 			Srcintfs: pulumi.StringArray{
// 				pulumi.String("port3"),
// 			},
// 			SslSshProfile: pulumi.String("certificate-inspection"),
// 			Status:        pulumi.String("enable"),
// 			Users: pulumi.StringArray{
// 				pulumi.String("guest"),
// 			},
// 			UtmStatus:        pulumi.String("enable"),
// 			WebfilterProfile: pulumi.String("monitor-all"),
// 		})
// 		if err != nil {
// 			return err
// 		}
// 		return nil
// 	})
// }
// ```
type FirewallSecurityPolicy1 struct {
	pulumi.CustomResourceState

	// Policy action.
	Action pulumi.StringOutput `pulumi:"action"`
	// Name of an existing Application list.
	ApplicationList pulumi.StringOutput `pulumi:"applicationList"`
	// Name of an existing Antivirus profile.
	AvProfile pulumi.StringOutput `pulumi:"avProfile"`
	// Enable/disable capture packets.
	CapturePacket pulumi.StringOutput `pulumi:"capturePacket"`
	// Comment.
	Comments pulumi.StringPtrOutput `pulumi:"comments"`
	// Device type category.
	Devices pulumi.StringArrayOutput `pulumi:"devices"`
	// Name of an existing DNS filter profile.
	DnsfilterProfile pulumi.StringOutput `pulumi:"dnsfilterProfile"`
	// Destination address and address group names.
	Dstaddrs pulumi.StringArrayOutput `pulumi:"dstaddrs"`
	// Outgoing (egress) interface.
	Dstintfs pulumi.StringArrayOutput `pulumi:"dstintfs"`
	// Names of user groups that can authenticate with this policy.
	Groups pulumi.StringArrayOutput `pulumi:"groups"`
	// Enable/disable use of Internet Services for this policy. If enabled, destination address and service are not used.
	InternetService pulumi.StringOutput `pulumi:"internetService"`
	// Internet Service ID.
	InternetServiceIds pulumi.IntArrayOutput `pulumi:"internetServiceIds"`
	// Enable/disable use of Internet Services in source for this policy. If enabled, source address is not used.
	InternetServiceSrc pulumi.StringOutput `pulumi:"internetServiceSrc"`
	// Internet Service source ID.
	InternetServiceSrcIds pulumi.IntArrayOutput `pulumi:"internetServiceSrcIds"`
	// Enable to use IP Pools for source NAT.
	Ippool pulumi.StringOutput `pulumi:"ippool"`
	// Name of an existing IPS sensor.
	IpsSensor pulumi.StringOutput `pulumi:"ipsSensor"`
	// Enable or disable logging. Log all sessions or security profile sessions.
	Logtraffic pulumi.StringOutput `pulumi:"logtraffic"`
	// Record logs when a session starts and ends.
	LogtrafficStart pulumi.StringOutput `pulumi:"logtrafficStart"`
	// Policy name.
	Name pulumi.StringOutput `pulumi:"name"`
	// Enable/disable source NAT.
	Nat pulumi.StringOutput `pulumi:"nat"`
	// IP Pool names.
	Poolnames pulumi.StringArrayOutput `pulumi:"poolnames"`
	// Name of an existing Protocol options profile.
	ProfileProtocolOptions pulumi.StringOutput `pulumi:"profileProtocolOptions"`
	// Schedule name.
	Schedule pulumi.StringOutput `pulumi:"schedule"`
	// Service and service group names..
	Services pulumi.StringArrayOutput `pulumi:"services"`
	// Source address and address group names.
	Srcaddrs pulumi.StringArrayOutput `pulumi:"srcaddrs"`
	// Incoming (ingress) interface.
	Srcintfs pulumi.StringArrayOutput `pulumi:"srcintfs"`
	// Name of an existing SSL SSH profile.
	SslSshProfile pulumi.StringOutput `pulumi:"sslSshProfile"`
	// Enable or disable this policy.
	Status pulumi.StringOutput `pulumi:"status"`
	// Names of individual users that can authenticate with this policy.
	Users pulumi.StringArrayOutput `pulumi:"users"`
	// Enable to add one or more security profiles (AV, IPS, etc.) to the firewall policy.
	UtmStatus pulumi.StringOutput `pulumi:"utmStatus"`
	// Name of an existing Web filter profile.
	WebfilterProfile pulumi.StringOutput `pulumi:"webfilterProfile"`
}

// NewFirewallSecurityPolicy1 registers a new resource with the given unique name, arguments, and options.
func NewFirewallSecurityPolicy1(ctx *pulumi.Context,
	name string, args *FirewallSecurityPolicy1Args, opts ...pulumi.ResourceOption) (*FirewallSecurityPolicy1, error) {
	if args == nil {
		return nil, errors.New("missing one or more required arguments")
	}

	if args.Action == nil {
		return nil, errors.New("invalid value for required argument 'Action'")
	}
	if args.Dstaddrs == nil {
		return nil, errors.New("invalid value for required argument 'Dstaddrs'")
	}
	if args.Dstintfs == nil {
		return nil, errors.New("invalid value for required argument 'Dstintfs'")
	}
	if args.Schedule == nil {
		return nil, errors.New("invalid value for required argument 'Schedule'")
	}
	if args.Services == nil {
		return nil, errors.New("invalid value for required argument 'Services'")
	}
	if args.Srcaddrs == nil {
		return nil, errors.New("invalid value for required argument 'Srcaddrs'")
	}
	if args.Srcintfs == nil {
		return nil, errors.New("invalid value for required argument 'Srcintfs'")
	}
	opts = pkgResourceDefaultOpts(opts)
	var resource FirewallSecurityPolicy1
	err := ctx.RegisterResource("fortios:index/firewallSecurityPolicy1:FirewallSecurityPolicy1", name, args, &resource, opts...)
	if err != nil {
		return nil, err
	}
	return &resource, nil
}

// GetFirewallSecurityPolicy1 gets an existing FirewallSecurityPolicy1 resource's state with the given name, ID, and optional
// state properties that are used to uniquely qualify the lookup (nil if not required).
func GetFirewallSecurityPolicy1(ctx *pulumi.Context,
	name string, id pulumi.IDInput, state *FirewallSecurityPolicy1State, opts ...pulumi.ResourceOption) (*FirewallSecurityPolicy1, error) {
	var resource FirewallSecurityPolicy1
	err := ctx.ReadResource("fortios:index/firewallSecurityPolicy1:FirewallSecurityPolicy1", name, id, state, &resource, opts...)
	if err != nil {
		return nil, err
	}
	return &resource, nil
}

// Input properties used for looking up and filtering FirewallSecurityPolicy1 resources.
type firewallSecurityPolicy1State struct {
	// Policy action.
	Action *string `pulumi:"action"`
	// Name of an existing Application list.
	ApplicationList *string `pulumi:"applicationList"`
	// Name of an existing Antivirus profile.
	AvProfile *string `pulumi:"avProfile"`
	// Enable/disable capture packets.
	CapturePacket *string `pulumi:"capturePacket"`
	// Comment.
	Comments *string `pulumi:"comments"`
	// Device type category.
	Devices []string `pulumi:"devices"`
	// Name of an existing DNS filter profile.
	DnsfilterProfile *string `pulumi:"dnsfilterProfile"`
	// Destination address and address group names.
	Dstaddrs []string `pulumi:"dstaddrs"`
	// Outgoing (egress) interface.
	Dstintfs []string `pulumi:"dstintfs"`
	// Names of user groups that can authenticate with this policy.
	Groups []string `pulumi:"groups"`
	// Enable/disable use of Internet Services for this policy. If enabled, destination address and service are not used.
	InternetService *string `pulumi:"internetService"`
	// Internet Service ID.
	InternetServiceIds []int `pulumi:"internetServiceIds"`
	// Enable/disable use of Internet Services in source for this policy. If enabled, source address is not used.
	InternetServiceSrc *string `pulumi:"internetServiceSrc"`
	// Internet Service source ID.
	InternetServiceSrcIds []int `pulumi:"internetServiceSrcIds"`
	// Enable to use IP Pools for source NAT.
	Ippool *string `pulumi:"ippool"`
	// Name of an existing IPS sensor.
	IpsSensor *string `pulumi:"ipsSensor"`
	// Enable or disable logging. Log all sessions or security profile sessions.
	Logtraffic *string `pulumi:"logtraffic"`
	// Record logs when a session starts and ends.
	LogtrafficStart *string `pulumi:"logtrafficStart"`
	// Policy name.
	Name *string `pulumi:"name"`
	// Enable/disable source NAT.
	Nat *string `pulumi:"nat"`
	// IP Pool names.
	Poolnames []string `pulumi:"poolnames"`
	// Name of an existing Protocol options profile.
	ProfileProtocolOptions *string `pulumi:"profileProtocolOptions"`
	// Schedule name.
	Schedule *string `pulumi:"schedule"`
	// Service and service group names..
	Services []string `pulumi:"services"`
	// Source address and address group names.
	Srcaddrs []string `pulumi:"srcaddrs"`
	// Incoming (ingress) interface.
	Srcintfs []string `pulumi:"srcintfs"`
	// Name of an existing SSL SSH profile.
	SslSshProfile *string `pulumi:"sslSshProfile"`
	// Enable or disable this policy.
	Status *string `pulumi:"status"`
	// Names of individual users that can authenticate with this policy.
	Users []string `pulumi:"users"`
	// Enable to add one or more security profiles (AV, IPS, etc.) to the firewall policy.
	UtmStatus *string `pulumi:"utmStatus"`
	// Name of an existing Web filter profile.
	WebfilterProfile *string `pulumi:"webfilterProfile"`
}

type FirewallSecurityPolicy1State struct {
	// Policy action.
	Action pulumi.StringPtrInput
	// Name of an existing Application list.
	ApplicationList pulumi.StringPtrInput
	// Name of an existing Antivirus profile.
	AvProfile pulumi.StringPtrInput
	// Enable/disable capture packets.
	CapturePacket pulumi.StringPtrInput
	// Comment.
	Comments pulumi.StringPtrInput
	// Device type category.
	Devices pulumi.StringArrayInput
	// Name of an existing DNS filter profile.
	DnsfilterProfile pulumi.StringPtrInput
	// Destination address and address group names.
	Dstaddrs pulumi.StringArrayInput
	// Outgoing (egress) interface.
	Dstintfs pulumi.StringArrayInput
	// Names of user groups that can authenticate with this policy.
	Groups pulumi.StringArrayInput
	// Enable/disable use of Internet Services for this policy. If enabled, destination address and service are not used.
	InternetService pulumi.StringPtrInput
	// Internet Service ID.
	InternetServiceIds pulumi.IntArrayInput
	// Enable/disable use of Internet Services in source for this policy. If enabled, source address is not used.
	InternetServiceSrc pulumi.StringPtrInput
	// Internet Service source ID.
	InternetServiceSrcIds pulumi.IntArrayInput
	// Enable to use IP Pools for source NAT.
	Ippool pulumi.StringPtrInput
	// Name of an existing IPS sensor.
	IpsSensor pulumi.StringPtrInput
	// Enable or disable logging. Log all sessions or security profile sessions.
	Logtraffic pulumi.StringPtrInput
	// Record logs when a session starts and ends.
	LogtrafficStart pulumi.StringPtrInput
	// Policy name.
	Name pulumi.StringPtrInput
	// Enable/disable source NAT.
	Nat pulumi.StringPtrInput
	// IP Pool names.
	Poolnames pulumi.StringArrayInput
	// Name of an existing Protocol options profile.
	ProfileProtocolOptions pulumi.StringPtrInput
	// Schedule name.
	Schedule pulumi.StringPtrInput
	// Service and service group names..
	Services pulumi.StringArrayInput
	// Source address and address group names.
	Srcaddrs pulumi.StringArrayInput
	// Incoming (ingress) interface.
	Srcintfs pulumi.StringArrayInput
	// Name of an existing SSL SSH profile.
	SslSshProfile pulumi.StringPtrInput
	// Enable or disable this policy.
	Status pulumi.StringPtrInput
	// Names of individual users that can authenticate with this policy.
	Users pulumi.StringArrayInput
	// Enable to add one or more security profiles (AV, IPS, etc.) to the firewall policy.
	UtmStatus pulumi.StringPtrInput
	// Name of an existing Web filter profile.
	WebfilterProfile pulumi.StringPtrInput
}

func (FirewallSecurityPolicy1State) ElementType() reflect.Type {
	return reflect.TypeOf((*firewallSecurityPolicy1State)(nil)).Elem()
}

type firewallSecurityPolicy1Args struct {
	// Policy action.
	Action string `pulumi:"action"`
	// Name of an existing Application list.
	ApplicationList *string `pulumi:"applicationList"`
	// Name of an existing Antivirus profile.
	AvProfile *string `pulumi:"avProfile"`
	// Enable/disable capture packets.
	CapturePacket *string `pulumi:"capturePacket"`
	// Comment.
	Comments *string `pulumi:"comments"`
	// Device type category.
	Devices []string `pulumi:"devices"`
	// Name of an existing DNS filter profile.
	DnsfilterProfile *string `pulumi:"dnsfilterProfile"`
	// Destination address and address group names.
	Dstaddrs []string `pulumi:"dstaddrs"`
	// Outgoing (egress) interface.
	Dstintfs []string `pulumi:"dstintfs"`
	// Names of user groups that can authenticate with this policy.
	Groups []string `pulumi:"groups"`
	// Enable/disable use of Internet Services for this policy. If enabled, destination address and service are not used.
	InternetService *string `pulumi:"internetService"`
	// Internet Service ID.
	InternetServiceIds []int `pulumi:"internetServiceIds"`
	// Enable/disable use of Internet Services in source for this policy. If enabled, source address is not used.
	InternetServiceSrc *string `pulumi:"internetServiceSrc"`
	// Internet Service source ID.
	InternetServiceSrcIds []int `pulumi:"internetServiceSrcIds"`
	// Enable to use IP Pools for source NAT.
	Ippool *string `pulumi:"ippool"`
	// Name of an existing IPS sensor.
	IpsSensor *string `pulumi:"ipsSensor"`
	// Enable or disable logging. Log all sessions or security profile sessions.
	Logtraffic *string `pulumi:"logtraffic"`
	// Record logs when a session starts and ends.
	LogtrafficStart *string `pulumi:"logtrafficStart"`
	// Policy name.
	Name *string `pulumi:"name"`
	// Enable/disable source NAT.
	Nat *string `pulumi:"nat"`
	// IP Pool names.
	Poolnames []string `pulumi:"poolnames"`
	// Name of an existing Protocol options profile.
	ProfileProtocolOptions *string `pulumi:"profileProtocolOptions"`
	// Schedule name.
	Schedule string `pulumi:"schedule"`
	// Service and service group names..
	Services []string `pulumi:"services"`
	// Source address and address group names.
	Srcaddrs []string `pulumi:"srcaddrs"`
	// Incoming (ingress) interface.
	Srcintfs []string `pulumi:"srcintfs"`
	// Name of an existing SSL SSH profile.
	SslSshProfile *string `pulumi:"sslSshProfile"`
	// Enable or disable this policy.
	Status *string `pulumi:"status"`
	// Names of individual users that can authenticate with this policy.
	Users []string `pulumi:"users"`
	// Enable to add one or more security profiles (AV, IPS, etc.) to the firewall policy.
	UtmStatus *string `pulumi:"utmStatus"`
	// Name of an existing Web filter profile.
	WebfilterProfile *string `pulumi:"webfilterProfile"`
}

// The set of arguments for constructing a FirewallSecurityPolicy1 resource.
type FirewallSecurityPolicy1Args struct {
	// Policy action.
	Action pulumi.StringInput
	// Name of an existing Application list.
	ApplicationList pulumi.StringPtrInput
	// Name of an existing Antivirus profile.
	AvProfile pulumi.StringPtrInput
	// Enable/disable capture packets.
	CapturePacket pulumi.StringPtrInput
	// Comment.
	Comments pulumi.StringPtrInput
	// Device type category.
	Devices pulumi.StringArrayInput
	// Name of an existing DNS filter profile.
	DnsfilterProfile pulumi.StringPtrInput
	// Destination address and address group names.
	Dstaddrs pulumi.StringArrayInput
	// Outgoing (egress) interface.
	Dstintfs pulumi.StringArrayInput
	// Names of user groups that can authenticate with this policy.
	Groups pulumi.StringArrayInput
	// Enable/disable use of Internet Services for this policy. If enabled, destination address and service are not used.
	InternetService pulumi.StringPtrInput
	// Internet Service ID.
	InternetServiceIds pulumi.IntArrayInput
	// Enable/disable use of Internet Services in source for this policy. If enabled, source address is not used.
	InternetServiceSrc pulumi.StringPtrInput
	// Internet Service source ID.
	InternetServiceSrcIds pulumi.IntArrayInput
	// Enable to use IP Pools for source NAT.
	Ippool pulumi.StringPtrInput
	// Name of an existing IPS sensor.
	IpsSensor pulumi.StringPtrInput
	// Enable or disable logging. Log all sessions or security profile sessions.
	Logtraffic pulumi.StringPtrInput
	// Record logs when a session starts and ends.
	LogtrafficStart pulumi.StringPtrInput
	// Policy name.
	Name pulumi.StringPtrInput
	// Enable/disable source NAT.
	Nat pulumi.StringPtrInput
	// IP Pool names.
	Poolnames pulumi.StringArrayInput
	// Name of an existing Protocol options profile.
	ProfileProtocolOptions pulumi.StringPtrInput
	// Schedule name.
	Schedule pulumi.StringInput
	// Service and service group names..
	Services pulumi.StringArrayInput
	// Source address and address group names.
	Srcaddrs pulumi.StringArrayInput
	// Incoming (ingress) interface.
	Srcintfs pulumi.StringArrayInput
	// Name of an existing SSL SSH profile.
	SslSshProfile pulumi.StringPtrInput
	// Enable or disable this policy.
	Status pulumi.StringPtrInput
	// Names of individual users that can authenticate with this policy.
	Users pulumi.StringArrayInput
	// Enable to add one or more security profiles (AV, IPS, etc.) to the firewall policy.
	UtmStatus pulumi.StringPtrInput
	// Name of an existing Web filter profile.
	WebfilterProfile pulumi.StringPtrInput
}

func (FirewallSecurityPolicy1Args) ElementType() reflect.Type {
	return reflect.TypeOf((*firewallSecurityPolicy1Args)(nil)).Elem()
}

type FirewallSecurityPolicy1Input interface {
	pulumi.Input

	ToFirewallSecurityPolicy1Output() FirewallSecurityPolicy1Output
	ToFirewallSecurityPolicy1OutputWithContext(ctx context.Context) FirewallSecurityPolicy1Output
}

func (*FirewallSecurityPolicy1) ElementType() reflect.Type {
	return reflect.TypeOf((**FirewallSecurityPolicy1)(nil)).Elem()
}

func (i *FirewallSecurityPolicy1) ToFirewallSecurityPolicy1Output() FirewallSecurityPolicy1Output {
	return i.ToFirewallSecurityPolicy1OutputWithContext(context.Background())
}

func (i *FirewallSecurityPolicy1) ToFirewallSecurityPolicy1OutputWithContext(ctx context.Context) FirewallSecurityPolicy1Output {
	return pulumi.ToOutputWithContext(ctx, i).(FirewallSecurityPolicy1Output)
}

// FirewallSecurityPolicy1ArrayInput is an input type that accepts FirewallSecurityPolicy1Array and FirewallSecurityPolicy1ArrayOutput values.
// You can construct a concrete instance of `FirewallSecurityPolicy1ArrayInput` via:
//
//          FirewallSecurityPolicy1Array{ FirewallSecurityPolicy1Args{...} }
type FirewallSecurityPolicy1ArrayInput interface {
	pulumi.Input

	ToFirewallSecurityPolicy1ArrayOutput() FirewallSecurityPolicy1ArrayOutput
	ToFirewallSecurityPolicy1ArrayOutputWithContext(context.Context) FirewallSecurityPolicy1ArrayOutput
}

type FirewallSecurityPolicy1Array []FirewallSecurityPolicy1Input

func (FirewallSecurityPolicy1Array) ElementType() reflect.Type {
	return reflect.TypeOf((*[]*FirewallSecurityPolicy1)(nil)).Elem()
}

func (i FirewallSecurityPolicy1Array) ToFirewallSecurityPolicy1ArrayOutput() FirewallSecurityPolicy1ArrayOutput {
	return i.ToFirewallSecurityPolicy1ArrayOutputWithContext(context.Background())
}

func (i FirewallSecurityPolicy1Array) ToFirewallSecurityPolicy1ArrayOutputWithContext(ctx context.Context) FirewallSecurityPolicy1ArrayOutput {
	return pulumi.ToOutputWithContext(ctx, i).(FirewallSecurityPolicy1ArrayOutput)
}

// FirewallSecurityPolicy1MapInput is an input type that accepts FirewallSecurityPolicy1Map and FirewallSecurityPolicy1MapOutput values.
// You can construct a concrete instance of `FirewallSecurityPolicy1MapInput` via:
//
//          FirewallSecurityPolicy1Map{ "key": FirewallSecurityPolicy1Args{...} }
type FirewallSecurityPolicy1MapInput interface {
	pulumi.Input

	ToFirewallSecurityPolicy1MapOutput() FirewallSecurityPolicy1MapOutput
	ToFirewallSecurityPolicy1MapOutputWithContext(context.Context) FirewallSecurityPolicy1MapOutput
}

type FirewallSecurityPolicy1Map map[string]FirewallSecurityPolicy1Input

func (FirewallSecurityPolicy1Map) ElementType() reflect.Type {
	return reflect.TypeOf((*map[string]*FirewallSecurityPolicy1)(nil)).Elem()
}

func (i FirewallSecurityPolicy1Map) ToFirewallSecurityPolicy1MapOutput() FirewallSecurityPolicy1MapOutput {
	return i.ToFirewallSecurityPolicy1MapOutputWithContext(context.Background())
}

func (i FirewallSecurityPolicy1Map) ToFirewallSecurityPolicy1MapOutputWithContext(ctx context.Context) FirewallSecurityPolicy1MapOutput {
	return pulumi.ToOutputWithContext(ctx, i).(FirewallSecurityPolicy1MapOutput)
}

type FirewallSecurityPolicy1Output struct{ *pulumi.OutputState }

func (FirewallSecurityPolicy1Output) ElementType() reflect.Type {
	return reflect.TypeOf((**FirewallSecurityPolicy1)(nil)).Elem()
}

func (o FirewallSecurityPolicy1Output) ToFirewallSecurityPolicy1Output() FirewallSecurityPolicy1Output {
	return o
}

func (o FirewallSecurityPolicy1Output) ToFirewallSecurityPolicy1OutputWithContext(ctx context.Context) FirewallSecurityPolicy1Output {
	return o
}

type FirewallSecurityPolicy1ArrayOutput struct{ *pulumi.OutputState }

func (FirewallSecurityPolicy1ArrayOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*[]*FirewallSecurityPolicy1)(nil)).Elem()
}

func (o FirewallSecurityPolicy1ArrayOutput) ToFirewallSecurityPolicy1ArrayOutput() FirewallSecurityPolicy1ArrayOutput {
	return o
}

func (o FirewallSecurityPolicy1ArrayOutput) ToFirewallSecurityPolicy1ArrayOutputWithContext(ctx context.Context) FirewallSecurityPolicy1ArrayOutput {
	return o
}

func (o FirewallSecurityPolicy1ArrayOutput) Index(i pulumi.IntInput) FirewallSecurityPolicy1Output {
	return pulumi.All(o, i).ApplyT(func(vs []interface{}) *FirewallSecurityPolicy1 {
		return vs[0].([]*FirewallSecurityPolicy1)[vs[1].(int)]
	}).(FirewallSecurityPolicy1Output)
}

type FirewallSecurityPolicy1MapOutput struct{ *pulumi.OutputState }

func (FirewallSecurityPolicy1MapOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*map[string]*FirewallSecurityPolicy1)(nil)).Elem()
}

func (o FirewallSecurityPolicy1MapOutput) ToFirewallSecurityPolicy1MapOutput() FirewallSecurityPolicy1MapOutput {
	return o
}

func (o FirewallSecurityPolicy1MapOutput) ToFirewallSecurityPolicy1MapOutputWithContext(ctx context.Context) FirewallSecurityPolicy1MapOutput {
	return o
}

func (o FirewallSecurityPolicy1MapOutput) MapIndex(k pulumi.StringInput) FirewallSecurityPolicy1Output {
	return pulumi.All(o, k).ApplyT(func(vs []interface{}) *FirewallSecurityPolicy1 {
		return vs[0].(map[string]*FirewallSecurityPolicy1)[vs[1].(string)]
	}).(FirewallSecurityPolicy1Output)
}

func init() {
	pulumi.RegisterInputType(reflect.TypeOf((*FirewallSecurityPolicy1Input)(nil)).Elem(), &FirewallSecurityPolicy1{})
	pulumi.RegisterInputType(reflect.TypeOf((*FirewallSecurityPolicy1ArrayInput)(nil)).Elem(), FirewallSecurityPolicy1Array{})
	pulumi.RegisterInputType(reflect.TypeOf((*FirewallSecurityPolicy1MapInput)(nil)).Elem(), FirewallSecurityPolicy1Map{})
	pulumi.RegisterOutputType(FirewallSecurityPolicy1Output{})
	pulumi.RegisterOutputType(FirewallSecurityPolicy1ArrayOutput{})
	pulumi.RegisterOutputType(FirewallSecurityPolicy1MapOutput{})
}
