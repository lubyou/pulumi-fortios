// Code generated by the Pulumi Terraform Bridge (tfgen) Tool DO NOT EDIT.
// *** WARNING: Do not edit by hand unless you're certain you know what you are doing! ***

package fortios

import (
	"context"
	"reflect"

	"github.com/pulumi/pulumi/sdk/v3/go/pulumi"
)

type IpsCustom struct {
	pulumi.CustomResourceState

	Action      pulumi.StringOutput    `pulumi:"action"`
	Application pulumi.StringOutput    `pulumi:"application"`
	Comment     pulumi.StringOutput    `pulumi:"comment"`
	Location    pulumi.StringOutput    `pulumi:"location"`
	Log         pulumi.StringOutput    `pulumi:"log"`
	LogPacket   pulumi.StringOutput    `pulumi:"logPacket"`
	Os          pulumi.StringOutput    `pulumi:"os"`
	Protocol    pulumi.StringOutput    `pulumi:"protocol"`
	RuleId      pulumi.IntOutput       `pulumi:"ruleId"`
	Severity    pulumi.StringOutput    `pulumi:"severity"`
	SigName     pulumi.StringOutput    `pulumi:"sigName"`
	Signature   pulumi.StringOutput    `pulumi:"signature"`
	Status      pulumi.StringOutput    `pulumi:"status"`
	Tag         pulumi.StringOutput    `pulumi:"tag"`
	Vdomparam   pulumi.StringPtrOutput `pulumi:"vdomparam"`
}

// NewIpsCustom registers a new resource with the given unique name, arguments, and options.
func NewIpsCustom(ctx *pulumi.Context,
	name string, args *IpsCustomArgs, opts ...pulumi.ResourceOption) (*IpsCustom, error) {
	if args == nil {
		args = &IpsCustomArgs{}
	}

	opts = pkgResourceDefaultOpts(opts)
	var resource IpsCustom
	err := ctx.RegisterResource("fortios:index/ipsCustom:IpsCustom", name, args, &resource, opts...)
	if err != nil {
		return nil, err
	}
	return &resource, nil
}

// GetIpsCustom gets an existing IpsCustom resource's state with the given name, ID, and optional
// state properties that are used to uniquely qualify the lookup (nil if not required).
func GetIpsCustom(ctx *pulumi.Context,
	name string, id pulumi.IDInput, state *IpsCustomState, opts ...pulumi.ResourceOption) (*IpsCustom, error) {
	var resource IpsCustom
	err := ctx.ReadResource("fortios:index/ipsCustom:IpsCustom", name, id, state, &resource, opts...)
	if err != nil {
		return nil, err
	}
	return &resource, nil
}

// Input properties used for looking up and filtering IpsCustom resources.
type ipsCustomState struct {
	Action      *string `pulumi:"action"`
	Application *string `pulumi:"application"`
	Comment     *string `pulumi:"comment"`
	Location    *string `pulumi:"location"`
	Log         *string `pulumi:"log"`
	LogPacket   *string `pulumi:"logPacket"`
	Os          *string `pulumi:"os"`
	Protocol    *string `pulumi:"protocol"`
	RuleId      *int    `pulumi:"ruleId"`
	Severity    *string `pulumi:"severity"`
	SigName     *string `pulumi:"sigName"`
	Signature   *string `pulumi:"signature"`
	Status      *string `pulumi:"status"`
	Tag         *string `pulumi:"tag"`
	Vdomparam   *string `pulumi:"vdomparam"`
}

type IpsCustomState struct {
	Action      pulumi.StringPtrInput
	Application pulumi.StringPtrInput
	Comment     pulumi.StringPtrInput
	Location    pulumi.StringPtrInput
	Log         pulumi.StringPtrInput
	LogPacket   pulumi.StringPtrInput
	Os          pulumi.StringPtrInput
	Protocol    pulumi.StringPtrInput
	RuleId      pulumi.IntPtrInput
	Severity    pulumi.StringPtrInput
	SigName     pulumi.StringPtrInput
	Signature   pulumi.StringPtrInput
	Status      pulumi.StringPtrInput
	Tag         pulumi.StringPtrInput
	Vdomparam   pulumi.StringPtrInput
}

func (IpsCustomState) ElementType() reflect.Type {
	return reflect.TypeOf((*ipsCustomState)(nil)).Elem()
}

type ipsCustomArgs struct {
	Action      *string `pulumi:"action"`
	Application *string `pulumi:"application"`
	Comment     *string `pulumi:"comment"`
	Location    *string `pulumi:"location"`
	Log         *string `pulumi:"log"`
	LogPacket   *string `pulumi:"logPacket"`
	Os          *string `pulumi:"os"`
	Protocol    *string `pulumi:"protocol"`
	RuleId      *int    `pulumi:"ruleId"`
	Severity    *string `pulumi:"severity"`
	SigName     *string `pulumi:"sigName"`
	Signature   *string `pulumi:"signature"`
	Status      *string `pulumi:"status"`
	Tag         *string `pulumi:"tag"`
	Vdomparam   *string `pulumi:"vdomparam"`
}

// The set of arguments for constructing a IpsCustom resource.
type IpsCustomArgs struct {
	Action      pulumi.StringPtrInput
	Application pulumi.StringPtrInput
	Comment     pulumi.StringPtrInput
	Location    pulumi.StringPtrInput
	Log         pulumi.StringPtrInput
	LogPacket   pulumi.StringPtrInput
	Os          pulumi.StringPtrInput
	Protocol    pulumi.StringPtrInput
	RuleId      pulumi.IntPtrInput
	Severity    pulumi.StringPtrInput
	SigName     pulumi.StringPtrInput
	Signature   pulumi.StringPtrInput
	Status      pulumi.StringPtrInput
	Tag         pulumi.StringPtrInput
	Vdomparam   pulumi.StringPtrInput
}

func (IpsCustomArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*ipsCustomArgs)(nil)).Elem()
}

type IpsCustomInput interface {
	pulumi.Input

	ToIpsCustomOutput() IpsCustomOutput
	ToIpsCustomOutputWithContext(ctx context.Context) IpsCustomOutput
}

func (*IpsCustom) ElementType() reflect.Type {
	return reflect.TypeOf((**IpsCustom)(nil)).Elem()
}

func (i *IpsCustom) ToIpsCustomOutput() IpsCustomOutput {
	return i.ToIpsCustomOutputWithContext(context.Background())
}

func (i *IpsCustom) ToIpsCustomOutputWithContext(ctx context.Context) IpsCustomOutput {
	return pulumi.ToOutputWithContext(ctx, i).(IpsCustomOutput)
}

// IpsCustomArrayInput is an input type that accepts IpsCustomArray and IpsCustomArrayOutput values.
// You can construct a concrete instance of `IpsCustomArrayInput` via:
//
//	IpsCustomArray{ IpsCustomArgs{...} }
type IpsCustomArrayInput interface {
	pulumi.Input

	ToIpsCustomArrayOutput() IpsCustomArrayOutput
	ToIpsCustomArrayOutputWithContext(context.Context) IpsCustomArrayOutput
}

type IpsCustomArray []IpsCustomInput

func (IpsCustomArray) ElementType() reflect.Type {
	return reflect.TypeOf((*[]*IpsCustom)(nil)).Elem()
}

func (i IpsCustomArray) ToIpsCustomArrayOutput() IpsCustomArrayOutput {
	return i.ToIpsCustomArrayOutputWithContext(context.Background())
}

func (i IpsCustomArray) ToIpsCustomArrayOutputWithContext(ctx context.Context) IpsCustomArrayOutput {
	return pulumi.ToOutputWithContext(ctx, i).(IpsCustomArrayOutput)
}

// IpsCustomMapInput is an input type that accepts IpsCustomMap and IpsCustomMapOutput values.
// You can construct a concrete instance of `IpsCustomMapInput` via:
//
//	IpsCustomMap{ "key": IpsCustomArgs{...} }
type IpsCustomMapInput interface {
	pulumi.Input

	ToIpsCustomMapOutput() IpsCustomMapOutput
	ToIpsCustomMapOutputWithContext(context.Context) IpsCustomMapOutput
}

type IpsCustomMap map[string]IpsCustomInput

func (IpsCustomMap) ElementType() reflect.Type {
	return reflect.TypeOf((*map[string]*IpsCustom)(nil)).Elem()
}

func (i IpsCustomMap) ToIpsCustomMapOutput() IpsCustomMapOutput {
	return i.ToIpsCustomMapOutputWithContext(context.Background())
}

func (i IpsCustomMap) ToIpsCustomMapOutputWithContext(ctx context.Context) IpsCustomMapOutput {
	return pulumi.ToOutputWithContext(ctx, i).(IpsCustomMapOutput)
}

type IpsCustomOutput struct{ *pulumi.OutputState }

func (IpsCustomOutput) ElementType() reflect.Type {
	return reflect.TypeOf((**IpsCustom)(nil)).Elem()
}

func (o IpsCustomOutput) ToIpsCustomOutput() IpsCustomOutput {
	return o
}

func (o IpsCustomOutput) ToIpsCustomOutputWithContext(ctx context.Context) IpsCustomOutput {
	return o
}

func (o IpsCustomOutput) Action() pulumi.StringOutput {
	return o.ApplyT(func(v *IpsCustom) pulumi.StringOutput { return v.Action }).(pulumi.StringOutput)
}

func (o IpsCustomOutput) Application() pulumi.StringOutput {
	return o.ApplyT(func(v *IpsCustom) pulumi.StringOutput { return v.Application }).(pulumi.StringOutput)
}

func (o IpsCustomOutput) Comment() pulumi.StringOutput {
	return o.ApplyT(func(v *IpsCustom) pulumi.StringOutput { return v.Comment }).(pulumi.StringOutput)
}

func (o IpsCustomOutput) Location() pulumi.StringOutput {
	return o.ApplyT(func(v *IpsCustom) pulumi.StringOutput { return v.Location }).(pulumi.StringOutput)
}

func (o IpsCustomOutput) Log() pulumi.StringOutput {
	return o.ApplyT(func(v *IpsCustom) pulumi.StringOutput { return v.Log }).(pulumi.StringOutput)
}

func (o IpsCustomOutput) LogPacket() pulumi.StringOutput {
	return o.ApplyT(func(v *IpsCustom) pulumi.StringOutput { return v.LogPacket }).(pulumi.StringOutput)
}

func (o IpsCustomOutput) Os() pulumi.StringOutput {
	return o.ApplyT(func(v *IpsCustom) pulumi.StringOutput { return v.Os }).(pulumi.StringOutput)
}

func (o IpsCustomOutput) Protocol() pulumi.StringOutput {
	return o.ApplyT(func(v *IpsCustom) pulumi.StringOutput { return v.Protocol }).(pulumi.StringOutput)
}

func (o IpsCustomOutput) RuleId() pulumi.IntOutput {
	return o.ApplyT(func(v *IpsCustom) pulumi.IntOutput { return v.RuleId }).(pulumi.IntOutput)
}

func (o IpsCustomOutput) Severity() pulumi.StringOutput {
	return o.ApplyT(func(v *IpsCustom) pulumi.StringOutput { return v.Severity }).(pulumi.StringOutput)
}

func (o IpsCustomOutput) SigName() pulumi.StringOutput {
	return o.ApplyT(func(v *IpsCustom) pulumi.StringOutput { return v.SigName }).(pulumi.StringOutput)
}

func (o IpsCustomOutput) Signature() pulumi.StringOutput {
	return o.ApplyT(func(v *IpsCustom) pulumi.StringOutput { return v.Signature }).(pulumi.StringOutput)
}

func (o IpsCustomOutput) Status() pulumi.StringOutput {
	return o.ApplyT(func(v *IpsCustom) pulumi.StringOutput { return v.Status }).(pulumi.StringOutput)
}

func (o IpsCustomOutput) Tag() pulumi.StringOutput {
	return o.ApplyT(func(v *IpsCustom) pulumi.StringOutput { return v.Tag }).(pulumi.StringOutput)
}

func (o IpsCustomOutput) Vdomparam() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *IpsCustom) pulumi.StringPtrOutput { return v.Vdomparam }).(pulumi.StringPtrOutput)
}

type IpsCustomArrayOutput struct{ *pulumi.OutputState }

func (IpsCustomArrayOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*[]*IpsCustom)(nil)).Elem()
}

func (o IpsCustomArrayOutput) ToIpsCustomArrayOutput() IpsCustomArrayOutput {
	return o
}

func (o IpsCustomArrayOutput) ToIpsCustomArrayOutputWithContext(ctx context.Context) IpsCustomArrayOutput {
	return o
}

func (o IpsCustomArrayOutput) Index(i pulumi.IntInput) IpsCustomOutput {
	return pulumi.All(o, i).ApplyT(func(vs []interface{}) *IpsCustom {
		return vs[0].([]*IpsCustom)[vs[1].(int)]
	}).(IpsCustomOutput)
}

type IpsCustomMapOutput struct{ *pulumi.OutputState }

func (IpsCustomMapOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*map[string]*IpsCustom)(nil)).Elem()
}

func (o IpsCustomMapOutput) ToIpsCustomMapOutput() IpsCustomMapOutput {
	return o
}

func (o IpsCustomMapOutput) ToIpsCustomMapOutputWithContext(ctx context.Context) IpsCustomMapOutput {
	return o
}

func (o IpsCustomMapOutput) MapIndex(k pulumi.StringInput) IpsCustomOutput {
	return pulumi.All(o, k).ApplyT(func(vs []interface{}) *IpsCustom {
		return vs[0].(map[string]*IpsCustom)[vs[1].(string)]
	}).(IpsCustomOutput)
}

func init() {
	pulumi.RegisterInputType(reflect.TypeOf((*IpsCustomInput)(nil)).Elem(), &IpsCustom{})
	pulumi.RegisterInputType(reflect.TypeOf((*IpsCustomArrayInput)(nil)).Elem(), IpsCustomArray{})
	pulumi.RegisterInputType(reflect.TypeOf((*IpsCustomMapInput)(nil)).Elem(), IpsCustomMap{})
	pulumi.RegisterOutputType(IpsCustomOutput{})
	pulumi.RegisterOutputType(IpsCustomArrayOutput{})
	pulumi.RegisterOutputType(IpsCustomMapOutput{})
}
