// Code generated by the Pulumi Terraform Bridge (tfgen) Tool DO NOT EDIT.
// *** WARNING: Do not edit by hand unless you're certain you know what you are doing! ***

package fortios

import (
	"context"
	"reflect"

	"github.com/lubyou/pulumi-fortios/sdk/go/fortios/internal"
	"github.com/pulumi/pulumi/sdk/v3/go/pulumi"
	"github.com/pulumi/pulumi/sdk/v3/go/pulumix"
)

type UserPasswordPolicy struct {
	pulumi.CustomResourceState

	ExpireDays             pulumi.IntOutput       `pulumi:"expireDays"`
	ExpireStatus           pulumi.StringOutput    `pulumi:"expireStatus"`
	ExpiredPasswordRenewal pulumi.StringOutput    `pulumi:"expiredPasswordRenewal"`
	MinChangeCharacters    pulumi.IntOutput       `pulumi:"minChangeCharacters"`
	MinLowerCaseLetter     pulumi.IntOutput       `pulumi:"minLowerCaseLetter"`
	MinNonAlphanumeric     pulumi.IntOutput       `pulumi:"minNonAlphanumeric"`
	MinNumber              pulumi.IntOutput       `pulumi:"minNumber"`
	MinUpperCaseLetter     pulumi.IntOutput       `pulumi:"minUpperCaseLetter"`
	MinimumLength          pulumi.IntOutput       `pulumi:"minimumLength"`
	Name                   pulumi.StringOutput    `pulumi:"name"`
	ReusePassword          pulumi.StringOutput    `pulumi:"reusePassword"`
	Vdomparam              pulumi.StringPtrOutput `pulumi:"vdomparam"`
	WarnDays               pulumi.IntOutput       `pulumi:"warnDays"`
}

// NewUserPasswordPolicy registers a new resource with the given unique name, arguments, and options.
func NewUserPasswordPolicy(ctx *pulumi.Context,
	name string, args *UserPasswordPolicyArgs, opts ...pulumi.ResourceOption) (*UserPasswordPolicy, error) {
	if args == nil {
		args = &UserPasswordPolicyArgs{}
	}

	opts = internal.PkgResourceDefaultOpts(opts)
	var resource UserPasswordPolicy
	err := ctx.RegisterResource("fortios:index/userPasswordPolicy:UserPasswordPolicy", name, args, &resource, opts...)
	if err != nil {
		return nil, err
	}
	return &resource, nil
}

// GetUserPasswordPolicy gets an existing UserPasswordPolicy resource's state with the given name, ID, and optional
// state properties that are used to uniquely qualify the lookup (nil if not required).
func GetUserPasswordPolicy(ctx *pulumi.Context,
	name string, id pulumi.IDInput, state *UserPasswordPolicyState, opts ...pulumi.ResourceOption) (*UserPasswordPolicy, error) {
	var resource UserPasswordPolicy
	err := ctx.ReadResource("fortios:index/userPasswordPolicy:UserPasswordPolicy", name, id, state, &resource, opts...)
	if err != nil {
		return nil, err
	}
	return &resource, nil
}

// Input properties used for looking up and filtering UserPasswordPolicy resources.
type userPasswordPolicyState struct {
	ExpireDays             *int    `pulumi:"expireDays"`
	ExpireStatus           *string `pulumi:"expireStatus"`
	ExpiredPasswordRenewal *string `pulumi:"expiredPasswordRenewal"`
	MinChangeCharacters    *int    `pulumi:"minChangeCharacters"`
	MinLowerCaseLetter     *int    `pulumi:"minLowerCaseLetter"`
	MinNonAlphanumeric     *int    `pulumi:"minNonAlphanumeric"`
	MinNumber              *int    `pulumi:"minNumber"`
	MinUpperCaseLetter     *int    `pulumi:"minUpperCaseLetter"`
	MinimumLength          *int    `pulumi:"minimumLength"`
	Name                   *string `pulumi:"name"`
	ReusePassword          *string `pulumi:"reusePassword"`
	Vdomparam              *string `pulumi:"vdomparam"`
	WarnDays               *int    `pulumi:"warnDays"`
}

type UserPasswordPolicyState struct {
	ExpireDays             pulumi.IntPtrInput
	ExpireStatus           pulumi.StringPtrInput
	ExpiredPasswordRenewal pulumi.StringPtrInput
	MinChangeCharacters    pulumi.IntPtrInput
	MinLowerCaseLetter     pulumi.IntPtrInput
	MinNonAlphanumeric     pulumi.IntPtrInput
	MinNumber              pulumi.IntPtrInput
	MinUpperCaseLetter     pulumi.IntPtrInput
	MinimumLength          pulumi.IntPtrInput
	Name                   pulumi.StringPtrInput
	ReusePassword          pulumi.StringPtrInput
	Vdomparam              pulumi.StringPtrInput
	WarnDays               pulumi.IntPtrInput
}

func (UserPasswordPolicyState) ElementType() reflect.Type {
	return reflect.TypeOf((*userPasswordPolicyState)(nil)).Elem()
}

type userPasswordPolicyArgs struct {
	ExpireDays             *int    `pulumi:"expireDays"`
	ExpireStatus           *string `pulumi:"expireStatus"`
	ExpiredPasswordRenewal *string `pulumi:"expiredPasswordRenewal"`
	MinChangeCharacters    *int    `pulumi:"minChangeCharacters"`
	MinLowerCaseLetter     *int    `pulumi:"minLowerCaseLetter"`
	MinNonAlphanumeric     *int    `pulumi:"minNonAlphanumeric"`
	MinNumber              *int    `pulumi:"minNumber"`
	MinUpperCaseLetter     *int    `pulumi:"minUpperCaseLetter"`
	MinimumLength          *int    `pulumi:"minimumLength"`
	Name                   *string `pulumi:"name"`
	ReusePassword          *string `pulumi:"reusePassword"`
	Vdomparam              *string `pulumi:"vdomparam"`
	WarnDays               *int    `pulumi:"warnDays"`
}

// The set of arguments for constructing a UserPasswordPolicy resource.
type UserPasswordPolicyArgs struct {
	ExpireDays             pulumi.IntPtrInput
	ExpireStatus           pulumi.StringPtrInput
	ExpiredPasswordRenewal pulumi.StringPtrInput
	MinChangeCharacters    pulumi.IntPtrInput
	MinLowerCaseLetter     pulumi.IntPtrInput
	MinNonAlphanumeric     pulumi.IntPtrInput
	MinNumber              pulumi.IntPtrInput
	MinUpperCaseLetter     pulumi.IntPtrInput
	MinimumLength          pulumi.IntPtrInput
	Name                   pulumi.StringPtrInput
	ReusePassword          pulumi.StringPtrInput
	Vdomparam              pulumi.StringPtrInput
	WarnDays               pulumi.IntPtrInput
}

func (UserPasswordPolicyArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*userPasswordPolicyArgs)(nil)).Elem()
}

type UserPasswordPolicyInput interface {
	pulumi.Input

	ToUserPasswordPolicyOutput() UserPasswordPolicyOutput
	ToUserPasswordPolicyOutputWithContext(ctx context.Context) UserPasswordPolicyOutput
}

func (*UserPasswordPolicy) ElementType() reflect.Type {
	return reflect.TypeOf((**UserPasswordPolicy)(nil)).Elem()
}

func (i *UserPasswordPolicy) ToUserPasswordPolicyOutput() UserPasswordPolicyOutput {
	return i.ToUserPasswordPolicyOutputWithContext(context.Background())
}

func (i *UserPasswordPolicy) ToUserPasswordPolicyOutputWithContext(ctx context.Context) UserPasswordPolicyOutput {
	return pulumi.ToOutputWithContext(ctx, i).(UserPasswordPolicyOutput)
}

func (i *UserPasswordPolicy) ToOutput(ctx context.Context) pulumix.Output[*UserPasswordPolicy] {
	return pulumix.Output[*UserPasswordPolicy]{
		OutputState: i.ToUserPasswordPolicyOutputWithContext(ctx).OutputState,
	}
}

// UserPasswordPolicyArrayInput is an input type that accepts UserPasswordPolicyArray and UserPasswordPolicyArrayOutput values.
// You can construct a concrete instance of `UserPasswordPolicyArrayInput` via:
//
//	UserPasswordPolicyArray{ UserPasswordPolicyArgs{...} }
type UserPasswordPolicyArrayInput interface {
	pulumi.Input

	ToUserPasswordPolicyArrayOutput() UserPasswordPolicyArrayOutput
	ToUserPasswordPolicyArrayOutputWithContext(context.Context) UserPasswordPolicyArrayOutput
}

type UserPasswordPolicyArray []UserPasswordPolicyInput

func (UserPasswordPolicyArray) ElementType() reflect.Type {
	return reflect.TypeOf((*[]*UserPasswordPolicy)(nil)).Elem()
}

func (i UserPasswordPolicyArray) ToUserPasswordPolicyArrayOutput() UserPasswordPolicyArrayOutput {
	return i.ToUserPasswordPolicyArrayOutputWithContext(context.Background())
}

func (i UserPasswordPolicyArray) ToUserPasswordPolicyArrayOutputWithContext(ctx context.Context) UserPasswordPolicyArrayOutput {
	return pulumi.ToOutputWithContext(ctx, i).(UserPasswordPolicyArrayOutput)
}

func (i UserPasswordPolicyArray) ToOutput(ctx context.Context) pulumix.Output[[]*UserPasswordPolicy] {
	return pulumix.Output[[]*UserPasswordPolicy]{
		OutputState: i.ToUserPasswordPolicyArrayOutputWithContext(ctx).OutputState,
	}
}

// UserPasswordPolicyMapInput is an input type that accepts UserPasswordPolicyMap and UserPasswordPolicyMapOutput values.
// You can construct a concrete instance of `UserPasswordPolicyMapInput` via:
//
//	UserPasswordPolicyMap{ "key": UserPasswordPolicyArgs{...} }
type UserPasswordPolicyMapInput interface {
	pulumi.Input

	ToUserPasswordPolicyMapOutput() UserPasswordPolicyMapOutput
	ToUserPasswordPolicyMapOutputWithContext(context.Context) UserPasswordPolicyMapOutput
}

type UserPasswordPolicyMap map[string]UserPasswordPolicyInput

func (UserPasswordPolicyMap) ElementType() reflect.Type {
	return reflect.TypeOf((*map[string]*UserPasswordPolicy)(nil)).Elem()
}

func (i UserPasswordPolicyMap) ToUserPasswordPolicyMapOutput() UserPasswordPolicyMapOutput {
	return i.ToUserPasswordPolicyMapOutputWithContext(context.Background())
}

func (i UserPasswordPolicyMap) ToUserPasswordPolicyMapOutputWithContext(ctx context.Context) UserPasswordPolicyMapOutput {
	return pulumi.ToOutputWithContext(ctx, i).(UserPasswordPolicyMapOutput)
}

func (i UserPasswordPolicyMap) ToOutput(ctx context.Context) pulumix.Output[map[string]*UserPasswordPolicy] {
	return pulumix.Output[map[string]*UserPasswordPolicy]{
		OutputState: i.ToUserPasswordPolicyMapOutputWithContext(ctx).OutputState,
	}
}

type UserPasswordPolicyOutput struct{ *pulumi.OutputState }

func (UserPasswordPolicyOutput) ElementType() reflect.Type {
	return reflect.TypeOf((**UserPasswordPolicy)(nil)).Elem()
}

func (o UserPasswordPolicyOutput) ToUserPasswordPolicyOutput() UserPasswordPolicyOutput {
	return o
}

func (o UserPasswordPolicyOutput) ToUserPasswordPolicyOutputWithContext(ctx context.Context) UserPasswordPolicyOutput {
	return o
}

func (o UserPasswordPolicyOutput) ToOutput(ctx context.Context) pulumix.Output[*UserPasswordPolicy] {
	return pulumix.Output[*UserPasswordPolicy]{
		OutputState: o.OutputState,
	}
}

func (o UserPasswordPolicyOutput) ExpireDays() pulumi.IntOutput {
	return o.ApplyT(func(v *UserPasswordPolicy) pulumi.IntOutput { return v.ExpireDays }).(pulumi.IntOutput)
}

func (o UserPasswordPolicyOutput) ExpireStatus() pulumi.StringOutput {
	return o.ApplyT(func(v *UserPasswordPolicy) pulumi.StringOutput { return v.ExpireStatus }).(pulumi.StringOutput)
}

func (o UserPasswordPolicyOutput) ExpiredPasswordRenewal() pulumi.StringOutput {
	return o.ApplyT(func(v *UserPasswordPolicy) pulumi.StringOutput { return v.ExpiredPasswordRenewal }).(pulumi.StringOutput)
}

func (o UserPasswordPolicyOutput) MinChangeCharacters() pulumi.IntOutput {
	return o.ApplyT(func(v *UserPasswordPolicy) pulumi.IntOutput { return v.MinChangeCharacters }).(pulumi.IntOutput)
}

func (o UserPasswordPolicyOutput) MinLowerCaseLetter() pulumi.IntOutput {
	return o.ApplyT(func(v *UserPasswordPolicy) pulumi.IntOutput { return v.MinLowerCaseLetter }).(pulumi.IntOutput)
}

func (o UserPasswordPolicyOutput) MinNonAlphanumeric() pulumi.IntOutput {
	return o.ApplyT(func(v *UserPasswordPolicy) pulumi.IntOutput { return v.MinNonAlphanumeric }).(pulumi.IntOutput)
}

func (o UserPasswordPolicyOutput) MinNumber() pulumi.IntOutput {
	return o.ApplyT(func(v *UserPasswordPolicy) pulumi.IntOutput { return v.MinNumber }).(pulumi.IntOutput)
}

func (o UserPasswordPolicyOutput) MinUpperCaseLetter() pulumi.IntOutput {
	return o.ApplyT(func(v *UserPasswordPolicy) pulumi.IntOutput { return v.MinUpperCaseLetter }).(pulumi.IntOutput)
}

func (o UserPasswordPolicyOutput) MinimumLength() pulumi.IntOutput {
	return o.ApplyT(func(v *UserPasswordPolicy) pulumi.IntOutput { return v.MinimumLength }).(pulumi.IntOutput)
}

func (o UserPasswordPolicyOutput) Name() pulumi.StringOutput {
	return o.ApplyT(func(v *UserPasswordPolicy) pulumi.StringOutput { return v.Name }).(pulumi.StringOutput)
}

func (o UserPasswordPolicyOutput) ReusePassword() pulumi.StringOutput {
	return o.ApplyT(func(v *UserPasswordPolicy) pulumi.StringOutput { return v.ReusePassword }).(pulumi.StringOutput)
}

func (o UserPasswordPolicyOutput) Vdomparam() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *UserPasswordPolicy) pulumi.StringPtrOutput { return v.Vdomparam }).(pulumi.StringPtrOutput)
}

func (o UserPasswordPolicyOutput) WarnDays() pulumi.IntOutput {
	return o.ApplyT(func(v *UserPasswordPolicy) pulumi.IntOutput { return v.WarnDays }).(pulumi.IntOutput)
}

type UserPasswordPolicyArrayOutput struct{ *pulumi.OutputState }

func (UserPasswordPolicyArrayOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*[]*UserPasswordPolicy)(nil)).Elem()
}

func (o UserPasswordPolicyArrayOutput) ToUserPasswordPolicyArrayOutput() UserPasswordPolicyArrayOutput {
	return o
}

func (o UserPasswordPolicyArrayOutput) ToUserPasswordPolicyArrayOutputWithContext(ctx context.Context) UserPasswordPolicyArrayOutput {
	return o
}

func (o UserPasswordPolicyArrayOutput) ToOutput(ctx context.Context) pulumix.Output[[]*UserPasswordPolicy] {
	return pulumix.Output[[]*UserPasswordPolicy]{
		OutputState: o.OutputState,
	}
}

func (o UserPasswordPolicyArrayOutput) Index(i pulumi.IntInput) UserPasswordPolicyOutput {
	return pulumi.All(o, i).ApplyT(func(vs []interface{}) *UserPasswordPolicy {
		return vs[0].([]*UserPasswordPolicy)[vs[1].(int)]
	}).(UserPasswordPolicyOutput)
}

type UserPasswordPolicyMapOutput struct{ *pulumi.OutputState }

func (UserPasswordPolicyMapOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*map[string]*UserPasswordPolicy)(nil)).Elem()
}

func (o UserPasswordPolicyMapOutput) ToUserPasswordPolicyMapOutput() UserPasswordPolicyMapOutput {
	return o
}

func (o UserPasswordPolicyMapOutput) ToUserPasswordPolicyMapOutputWithContext(ctx context.Context) UserPasswordPolicyMapOutput {
	return o
}

func (o UserPasswordPolicyMapOutput) ToOutput(ctx context.Context) pulumix.Output[map[string]*UserPasswordPolicy] {
	return pulumix.Output[map[string]*UserPasswordPolicy]{
		OutputState: o.OutputState,
	}
}

func (o UserPasswordPolicyMapOutput) MapIndex(k pulumi.StringInput) UserPasswordPolicyOutput {
	return pulumi.All(o, k).ApplyT(func(vs []interface{}) *UserPasswordPolicy {
		return vs[0].(map[string]*UserPasswordPolicy)[vs[1].(string)]
	}).(UserPasswordPolicyOutput)
}

func init() {
	pulumi.RegisterInputType(reflect.TypeOf((*UserPasswordPolicyInput)(nil)).Elem(), &UserPasswordPolicy{})
	pulumi.RegisterInputType(reflect.TypeOf((*UserPasswordPolicyArrayInput)(nil)).Elem(), UserPasswordPolicyArray{})
	pulumi.RegisterInputType(reflect.TypeOf((*UserPasswordPolicyMapInput)(nil)).Elem(), UserPasswordPolicyMap{})
	pulumi.RegisterOutputType(UserPasswordPolicyOutput{})
	pulumi.RegisterOutputType(UserPasswordPolicyArrayOutput{})
	pulumi.RegisterOutputType(UserPasswordPolicyMapOutput{})
}
