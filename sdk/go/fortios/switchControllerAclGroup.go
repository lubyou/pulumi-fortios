// Code generated by the Pulumi Terraform Bridge (tfgen) Tool DO NOT EDIT.
// *** WARNING: Do not edit by hand unless you're certain you know what you are doing! ***

package fortios

import (
	"context"
	"reflect"

	"github.com/lubyou/pulumi-fortios/sdk/go/fortios/internal"
	"github.com/pulumi/pulumi/sdk/v3/go/pulumi"
)

type SwitchControllerAclGroup struct {
	pulumi.CustomResourceState

	DynamicSortSubtable pulumi.StringPtrOutput                     `pulumi:"dynamicSortSubtable"`
	GetAllTables        pulumi.StringPtrOutput                     `pulumi:"getAllTables"`
	Ingresses           SwitchControllerAclGroupIngressArrayOutput `pulumi:"ingresses"`
	Name                pulumi.StringOutput                        `pulumi:"name"`
	Vdomparam           pulumi.StringPtrOutput                     `pulumi:"vdomparam"`
}

// NewSwitchControllerAclGroup registers a new resource with the given unique name, arguments, and options.
func NewSwitchControllerAclGroup(ctx *pulumi.Context,
	name string, args *SwitchControllerAclGroupArgs, opts ...pulumi.ResourceOption) (*SwitchControllerAclGroup, error) {
	if args == nil {
		args = &SwitchControllerAclGroupArgs{}
	}

	opts = internal.PkgResourceDefaultOpts(opts)
	var resource SwitchControllerAclGroup
	err := ctx.RegisterResource("fortios:index/switchControllerAclGroup:SwitchControllerAclGroup", name, args, &resource, opts...)
	if err != nil {
		return nil, err
	}
	return &resource, nil
}

// GetSwitchControllerAclGroup gets an existing SwitchControllerAclGroup resource's state with the given name, ID, and optional
// state properties that are used to uniquely qualify the lookup (nil if not required).
func GetSwitchControllerAclGroup(ctx *pulumi.Context,
	name string, id pulumi.IDInput, state *SwitchControllerAclGroupState, opts ...pulumi.ResourceOption) (*SwitchControllerAclGroup, error) {
	var resource SwitchControllerAclGroup
	err := ctx.ReadResource("fortios:index/switchControllerAclGroup:SwitchControllerAclGroup", name, id, state, &resource, opts...)
	if err != nil {
		return nil, err
	}
	return &resource, nil
}

// Input properties used for looking up and filtering SwitchControllerAclGroup resources.
type switchControllerAclGroupState struct {
	DynamicSortSubtable *string                           `pulumi:"dynamicSortSubtable"`
	GetAllTables        *string                           `pulumi:"getAllTables"`
	Ingresses           []SwitchControllerAclGroupIngress `pulumi:"ingresses"`
	Name                *string                           `pulumi:"name"`
	Vdomparam           *string                           `pulumi:"vdomparam"`
}

type SwitchControllerAclGroupState struct {
	DynamicSortSubtable pulumi.StringPtrInput
	GetAllTables        pulumi.StringPtrInput
	Ingresses           SwitchControllerAclGroupIngressArrayInput
	Name                pulumi.StringPtrInput
	Vdomparam           pulumi.StringPtrInput
}

func (SwitchControllerAclGroupState) ElementType() reflect.Type {
	return reflect.TypeOf((*switchControllerAclGroupState)(nil)).Elem()
}

type switchControllerAclGroupArgs struct {
	DynamicSortSubtable *string                           `pulumi:"dynamicSortSubtable"`
	GetAllTables        *string                           `pulumi:"getAllTables"`
	Ingresses           []SwitchControllerAclGroupIngress `pulumi:"ingresses"`
	Name                *string                           `pulumi:"name"`
	Vdomparam           *string                           `pulumi:"vdomparam"`
}

// The set of arguments for constructing a SwitchControllerAclGroup resource.
type SwitchControllerAclGroupArgs struct {
	DynamicSortSubtable pulumi.StringPtrInput
	GetAllTables        pulumi.StringPtrInput
	Ingresses           SwitchControllerAclGroupIngressArrayInput
	Name                pulumi.StringPtrInput
	Vdomparam           pulumi.StringPtrInput
}

func (SwitchControllerAclGroupArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*switchControllerAclGroupArgs)(nil)).Elem()
}

type SwitchControllerAclGroupInput interface {
	pulumi.Input

	ToSwitchControllerAclGroupOutput() SwitchControllerAclGroupOutput
	ToSwitchControllerAclGroupOutputWithContext(ctx context.Context) SwitchControllerAclGroupOutput
}

func (*SwitchControllerAclGroup) ElementType() reflect.Type {
	return reflect.TypeOf((**SwitchControllerAclGroup)(nil)).Elem()
}

func (i *SwitchControllerAclGroup) ToSwitchControllerAclGroupOutput() SwitchControllerAclGroupOutput {
	return i.ToSwitchControllerAclGroupOutputWithContext(context.Background())
}

func (i *SwitchControllerAclGroup) ToSwitchControllerAclGroupOutputWithContext(ctx context.Context) SwitchControllerAclGroupOutput {
	return pulumi.ToOutputWithContext(ctx, i).(SwitchControllerAclGroupOutput)
}

// SwitchControllerAclGroupArrayInput is an input type that accepts SwitchControllerAclGroupArray and SwitchControllerAclGroupArrayOutput values.
// You can construct a concrete instance of `SwitchControllerAclGroupArrayInput` via:
//
//	SwitchControllerAclGroupArray{ SwitchControllerAclGroupArgs{...} }
type SwitchControllerAclGroupArrayInput interface {
	pulumi.Input

	ToSwitchControllerAclGroupArrayOutput() SwitchControllerAclGroupArrayOutput
	ToSwitchControllerAclGroupArrayOutputWithContext(context.Context) SwitchControllerAclGroupArrayOutput
}

type SwitchControllerAclGroupArray []SwitchControllerAclGroupInput

func (SwitchControllerAclGroupArray) ElementType() reflect.Type {
	return reflect.TypeOf((*[]*SwitchControllerAclGroup)(nil)).Elem()
}

func (i SwitchControllerAclGroupArray) ToSwitchControllerAclGroupArrayOutput() SwitchControllerAclGroupArrayOutput {
	return i.ToSwitchControllerAclGroupArrayOutputWithContext(context.Background())
}

func (i SwitchControllerAclGroupArray) ToSwitchControllerAclGroupArrayOutputWithContext(ctx context.Context) SwitchControllerAclGroupArrayOutput {
	return pulumi.ToOutputWithContext(ctx, i).(SwitchControllerAclGroupArrayOutput)
}

// SwitchControllerAclGroupMapInput is an input type that accepts SwitchControllerAclGroupMap and SwitchControllerAclGroupMapOutput values.
// You can construct a concrete instance of `SwitchControllerAclGroupMapInput` via:
//
//	SwitchControllerAclGroupMap{ "key": SwitchControllerAclGroupArgs{...} }
type SwitchControllerAclGroupMapInput interface {
	pulumi.Input

	ToSwitchControllerAclGroupMapOutput() SwitchControllerAclGroupMapOutput
	ToSwitchControllerAclGroupMapOutputWithContext(context.Context) SwitchControllerAclGroupMapOutput
}

type SwitchControllerAclGroupMap map[string]SwitchControllerAclGroupInput

func (SwitchControllerAclGroupMap) ElementType() reflect.Type {
	return reflect.TypeOf((*map[string]*SwitchControllerAclGroup)(nil)).Elem()
}

func (i SwitchControllerAclGroupMap) ToSwitchControllerAclGroupMapOutput() SwitchControllerAclGroupMapOutput {
	return i.ToSwitchControllerAclGroupMapOutputWithContext(context.Background())
}

func (i SwitchControllerAclGroupMap) ToSwitchControllerAclGroupMapOutputWithContext(ctx context.Context) SwitchControllerAclGroupMapOutput {
	return pulumi.ToOutputWithContext(ctx, i).(SwitchControllerAclGroupMapOutput)
}

type SwitchControllerAclGroupOutput struct{ *pulumi.OutputState }

func (SwitchControllerAclGroupOutput) ElementType() reflect.Type {
	return reflect.TypeOf((**SwitchControllerAclGroup)(nil)).Elem()
}

func (o SwitchControllerAclGroupOutput) ToSwitchControllerAclGroupOutput() SwitchControllerAclGroupOutput {
	return o
}

func (o SwitchControllerAclGroupOutput) ToSwitchControllerAclGroupOutputWithContext(ctx context.Context) SwitchControllerAclGroupOutput {
	return o
}

func (o SwitchControllerAclGroupOutput) DynamicSortSubtable() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *SwitchControllerAclGroup) pulumi.StringPtrOutput { return v.DynamicSortSubtable }).(pulumi.StringPtrOutput)
}

func (o SwitchControllerAclGroupOutput) GetAllTables() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *SwitchControllerAclGroup) pulumi.StringPtrOutput { return v.GetAllTables }).(pulumi.StringPtrOutput)
}

func (o SwitchControllerAclGroupOutput) Ingresses() SwitchControllerAclGroupIngressArrayOutput {
	return o.ApplyT(func(v *SwitchControllerAclGroup) SwitchControllerAclGroupIngressArrayOutput { return v.Ingresses }).(SwitchControllerAclGroupIngressArrayOutput)
}

func (o SwitchControllerAclGroupOutput) Name() pulumi.StringOutput {
	return o.ApplyT(func(v *SwitchControllerAclGroup) pulumi.StringOutput { return v.Name }).(pulumi.StringOutput)
}

func (o SwitchControllerAclGroupOutput) Vdomparam() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *SwitchControllerAclGroup) pulumi.StringPtrOutput { return v.Vdomparam }).(pulumi.StringPtrOutput)
}

type SwitchControllerAclGroupArrayOutput struct{ *pulumi.OutputState }

func (SwitchControllerAclGroupArrayOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*[]*SwitchControllerAclGroup)(nil)).Elem()
}

func (o SwitchControllerAclGroupArrayOutput) ToSwitchControllerAclGroupArrayOutput() SwitchControllerAclGroupArrayOutput {
	return o
}

func (o SwitchControllerAclGroupArrayOutput) ToSwitchControllerAclGroupArrayOutputWithContext(ctx context.Context) SwitchControllerAclGroupArrayOutput {
	return o
}

func (o SwitchControllerAclGroupArrayOutput) Index(i pulumi.IntInput) SwitchControllerAclGroupOutput {
	return pulumi.All(o, i).ApplyT(func(vs []interface{}) *SwitchControllerAclGroup {
		return vs[0].([]*SwitchControllerAclGroup)[vs[1].(int)]
	}).(SwitchControllerAclGroupOutput)
}

type SwitchControllerAclGroupMapOutput struct{ *pulumi.OutputState }

func (SwitchControllerAclGroupMapOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*map[string]*SwitchControllerAclGroup)(nil)).Elem()
}

func (o SwitchControllerAclGroupMapOutput) ToSwitchControllerAclGroupMapOutput() SwitchControllerAclGroupMapOutput {
	return o
}

func (o SwitchControllerAclGroupMapOutput) ToSwitchControllerAclGroupMapOutputWithContext(ctx context.Context) SwitchControllerAclGroupMapOutput {
	return o
}

func (o SwitchControllerAclGroupMapOutput) MapIndex(k pulumi.StringInput) SwitchControllerAclGroupOutput {
	return pulumi.All(o, k).ApplyT(func(vs []interface{}) *SwitchControllerAclGroup {
		return vs[0].(map[string]*SwitchControllerAclGroup)[vs[1].(string)]
	}).(SwitchControllerAclGroupOutput)
}

func init() {
	pulumi.RegisterInputType(reflect.TypeOf((*SwitchControllerAclGroupInput)(nil)).Elem(), &SwitchControllerAclGroup{})
	pulumi.RegisterInputType(reflect.TypeOf((*SwitchControllerAclGroupArrayInput)(nil)).Elem(), SwitchControllerAclGroupArray{})
	pulumi.RegisterInputType(reflect.TypeOf((*SwitchControllerAclGroupMapInput)(nil)).Elem(), SwitchControllerAclGroupMap{})
	pulumi.RegisterOutputType(SwitchControllerAclGroupOutput{})
	pulumi.RegisterOutputType(SwitchControllerAclGroupArrayOutput{})
	pulumi.RegisterOutputType(SwitchControllerAclGroupMapOutput{})
}
