// Code generated by the Pulumi Terraform Bridge (tfgen) Tool DO NOT EDIT.
// *** WARNING: Do not edit by hand unless you're certain you know what you are doing! ***

package fortios

import (
	"context"
	"reflect"

	"github.com/lubyou/pulumi-fortios/sdk/go/fortios/internal"
	"github.com/pulumi/pulumi/sdk/v3/go/pulumi"
	"github.com/pulumi/pulumi/sdk/v3/go/pulumix"
)

type FileFilterProfile struct {
	pulumi.CustomResourceState

	Comment             pulumi.StringPtrOutput           `pulumi:"comment"`
	DynamicSortSubtable pulumi.StringPtrOutput           `pulumi:"dynamicSortSubtable"`
	ExtendedLog         pulumi.StringOutput              `pulumi:"extendedLog"`
	FeatureSet          pulumi.StringOutput              `pulumi:"featureSet"`
	GetAllTables        pulumi.StringPtrOutput           `pulumi:"getAllTables"`
	Log                 pulumi.StringOutput              `pulumi:"log"`
	Name                pulumi.StringOutput              `pulumi:"name"`
	ReplacemsgGroup     pulumi.StringOutput              `pulumi:"replacemsgGroup"`
	Rules               FileFilterProfileRuleArrayOutput `pulumi:"rules"`
	ScanArchiveContents pulumi.StringOutput              `pulumi:"scanArchiveContents"`
	Vdomparam           pulumi.StringPtrOutput           `pulumi:"vdomparam"`
}

// NewFileFilterProfile registers a new resource with the given unique name, arguments, and options.
func NewFileFilterProfile(ctx *pulumi.Context,
	name string, args *FileFilterProfileArgs, opts ...pulumi.ResourceOption) (*FileFilterProfile, error) {
	if args == nil {
		args = &FileFilterProfileArgs{}
	}

	opts = internal.PkgResourceDefaultOpts(opts)
	var resource FileFilterProfile
	err := ctx.RegisterResource("fortios:index/fileFilterProfile:FileFilterProfile", name, args, &resource, opts...)
	if err != nil {
		return nil, err
	}
	return &resource, nil
}

// GetFileFilterProfile gets an existing FileFilterProfile resource's state with the given name, ID, and optional
// state properties that are used to uniquely qualify the lookup (nil if not required).
func GetFileFilterProfile(ctx *pulumi.Context,
	name string, id pulumi.IDInput, state *FileFilterProfileState, opts ...pulumi.ResourceOption) (*FileFilterProfile, error) {
	var resource FileFilterProfile
	err := ctx.ReadResource("fortios:index/fileFilterProfile:FileFilterProfile", name, id, state, &resource, opts...)
	if err != nil {
		return nil, err
	}
	return &resource, nil
}

// Input properties used for looking up and filtering FileFilterProfile resources.
type fileFilterProfileState struct {
	Comment             *string                 `pulumi:"comment"`
	DynamicSortSubtable *string                 `pulumi:"dynamicSortSubtable"`
	ExtendedLog         *string                 `pulumi:"extendedLog"`
	FeatureSet          *string                 `pulumi:"featureSet"`
	GetAllTables        *string                 `pulumi:"getAllTables"`
	Log                 *string                 `pulumi:"log"`
	Name                *string                 `pulumi:"name"`
	ReplacemsgGroup     *string                 `pulumi:"replacemsgGroup"`
	Rules               []FileFilterProfileRule `pulumi:"rules"`
	ScanArchiveContents *string                 `pulumi:"scanArchiveContents"`
	Vdomparam           *string                 `pulumi:"vdomparam"`
}

type FileFilterProfileState struct {
	Comment             pulumi.StringPtrInput
	DynamicSortSubtable pulumi.StringPtrInput
	ExtendedLog         pulumi.StringPtrInput
	FeatureSet          pulumi.StringPtrInput
	GetAllTables        pulumi.StringPtrInput
	Log                 pulumi.StringPtrInput
	Name                pulumi.StringPtrInput
	ReplacemsgGroup     pulumi.StringPtrInput
	Rules               FileFilterProfileRuleArrayInput
	ScanArchiveContents pulumi.StringPtrInput
	Vdomparam           pulumi.StringPtrInput
}

func (FileFilterProfileState) ElementType() reflect.Type {
	return reflect.TypeOf((*fileFilterProfileState)(nil)).Elem()
}

type fileFilterProfileArgs struct {
	Comment             *string                 `pulumi:"comment"`
	DynamicSortSubtable *string                 `pulumi:"dynamicSortSubtable"`
	ExtendedLog         *string                 `pulumi:"extendedLog"`
	FeatureSet          *string                 `pulumi:"featureSet"`
	GetAllTables        *string                 `pulumi:"getAllTables"`
	Log                 *string                 `pulumi:"log"`
	Name                *string                 `pulumi:"name"`
	ReplacemsgGroup     *string                 `pulumi:"replacemsgGroup"`
	Rules               []FileFilterProfileRule `pulumi:"rules"`
	ScanArchiveContents *string                 `pulumi:"scanArchiveContents"`
	Vdomparam           *string                 `pulumi:"vdomparam"`
}

// The set of arguments for constructing a FileFilterProfile resource.
type FileFilterProfileArgs struct {
	Comment             pulumi.StringPtrInput
	DynamicSortSubtable pulumi.StringPtrInput
	ExtendedLog         pulumi.StringPtrInput
	FeatureSet          pulumi.StringPtrInput
	GetAllTables        pulumi.StringPtrInput
	Log                 pulumi.StringPtrInput
	Name                pulumi.StringPtrInput
	ReplacemsgGroup     pulumi.StringPtrInput
	Rules               FileFilterProfileRuleArrayInput
	ScanArchiveContents pulumi.StringPtrInput
	Vdomparam           pulumi.StringPtrInput
}

func (FileFilterProfileArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*fileFilterProfileArgs)(nil)).Elem()
}

type FileFilterProfileInput interface {
	pulumi.Input

	ToFileFilterProfileOutput() FileFilterProfileOutput
	ToFileFilterProfileOutputWithContext(ctx context.Context) FileFilterProfileOutput
}

func (*FileFilterProfile) ElementType() reflect.Type {
	return reflect.TypeOf((**FileFilterProfile)(nil)).Elem()
}

func (i *FileFilterProfile) ToFileFilterProfileOutput() FileFilterProfileOutput {
	return i.ToFileFilterProfileOutputWithContext(context.Background())
}

func (i *FileFilterProfile) ToFileFilterProfileOutputWithContext(ctx context.Context) FileFilterProfileOutput {
	return pulumi.ToOutputWithContext(ctx, i).(FileFilterProfileOutput)
}

func (i *FileFilterProfile) ToOutput(ctx context.Context) pulumix.Output[*FileFilterProfile] {
	return pulumix.Output[*FileFilterProfile]{
		OutputState: i.ToFileFilterProfileOutputWithContext(ctx).OutputState,
	}
}

// FileFilterProfileArrayInput is an input type that accepts FileFilterProfileArray and FileFilterProfileArrayOutput values.
// You can construct a concrete instance of `FileFilterProfileArrayInput` via:
//
//	FileFilterProfileArray{ FileFilterProfileArgs{...} }
type FileFilterProfileArrayInput interface {
	pulumi.Input

	ToFileFilterProfileArrayOutput() FileFilterProfileArrayOutput
	ToFileFilterProfileArrayOutputWithContext(context.Context) FileFilterProfileArrayOutput
}

type FileFilterProfileArray []FileFilterProfileInput

func (FileFilterProfileArray) ElementType() reflect.Type {
	return reflect.TypeOf((*[]*FileFilterProfile)(nil)).Elem()
}

func (i FileFilterProfileArray) ToFileFilterProfileArrayOutput() FileFilterProfileArrayOutput {
	return i.ToFileFilterProfileArrayOutputWithContext(context.Background())
}

func (i FileFilterProfileArray) ToFileFilterProfileArrayOutputWithContext(ctx context.Context) FileFilterProfileArrayOutput {
	return pulumi.ToOutputWithContext(ctx, i).(FileFilterProfileArrayOutput)
}

func (i FileFilterProfileArray) ToOutput(ctx context.Context) pulumix.Output[[]*FileFilterProfile] {
	return pulumix.Output[[]*FileFilterProfile]{
		OutputState: i.ToFileFilterProfileArrayOutputWithContext(ctx).OutputState,
	}
}

// FileFilterProfileMapInput is an input type that accepts FileFilterProfileMap and FileFilterProfileMapOutput values.
// You can construct a concrete instance of `FileFilterProfileMapInput` via:
//
//	FileFilterProfileMap{ "key": FileFilterProfileArgs{...} }
type FileFilterProfileMapInput interface {
	pulumi.Input

	ToFileFilterProfileMapOutput() FileFilterProfileMapOutput
	ToFileFilterProfileMapOutputWithContext(context.Context) FileFilterProfileMapOutput
}

type FileFilterProfileMap map[string]FileFilterProfileInput

func (FileFilterProfileMap) ElementType() reflect.Type {
	return reflect.TypeOf((*map[string]*FileFilterProfile)(nil)).Elem()
}

func (i FileFilterProfileMap) ToFileFilterProfileMapOutput() FileFilterProfileMapOutput {
	return i.ToFileFilterProfileMapOutputWithContext(context.Background())
}

func (i FileFilterProfileMap) ToFileFilterProfileMapOutputWithContext(ctx context.Context) FileFilterProfileMapOutput {
	return pulumi.ToOutputWithContext(ctx, i).(FileFilterProfileMapOutput)
}

func (i FileFilterProfileMap) ToOutput(ctx context.Context) pulumix.Output[map[string]*FileFilterProfile] {
	return pulumix.Output[map[string]*FileFilterProfile]{
		OutputState: i.ToFileFilterProfileMapOutputWithContext(ctx).OutputState,
	}
}

type FileFilterProfileOutput struct{ *pulumi.OutputState }

func (FileFilterProfileOutput) ElementType() reflect.Type {
	return reflect.TypeOf((**FileFilterProfile)(nil)).Elem()
}

func (o FileFilterProfileOutput) ToFileFilterProfileOutput() FileFilterProfileOutput {
	return o
}

func (o FileFilterProfileOutput) ToFileFilterProfileOutputWithContext(ctx context.Context) FileFilterProfileOutput {
	return o
}

func (o FileFilterProfileOutput) ToOutput(ctx context.Context) pulumix.Output[*FileFilterProfile] {
	return pulumix.Output[*FileFilterProfile]{
		OutputState: o.OutputState,
	}
}

func (o FileFilterProfileOutput) Comment() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *FileFilterProfile) pulumi.StringPtrOutput { return v.Comment }).(pulumi.StringPtrOutput)
}

func (o FileFilterProfileOutput) DynamicSortSubtable() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *FileFilterProfile) pulumi.StringPtrOutput { return v.DynamicSortSubtable }).(pulumi.StringPtrOutput)
}

func (o FileFilterProfileOutput) ExtendedLog() pulumi.StringOutput {
	return o.ApplyT(func(v *FileFilterProfile) pulumi.StringOutput { return v.ExtendedLog }).(pulumi.StringOutput)
}

func (o FileFilterProfileOutput) FeatureSet() pulumi.StringOutput {
	return o.ApplyT(func(v *FileFilterProfile) pulumi.StringOutput { return v.FeatureSet }).(pulumi.StringOutput)
}

func (o FileFilterProfileOutput) GetAllTables() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *FileFilterProfile) pulumi.StringPtrOutput { return v.GetAllTables }).(pulumi.StringPtrOutput)
}

func (o FileFilterProfileOutput) Log() pulumi.StringOutput {
	return o.ApplyT(func(v *FileFilterProfile) pulumi.StringOutput { return v.Log }).(pulumi.StringOutput)
}

func (o FileFilterProfileOutput) Name() pulumi.StringOutput {
	return o.ApplyT(func(v *FileFilterProfile) pulumi.StringOutput { return v.Name }).(pulumi.StringOutput)
}

func (o FileFilterProfileOutput) ReplacemsgGroup() pulumi.StringOutput {
	return o.ApplyT(func(v *FileFilterProfile) pulumi.StringOutput { return v.ReplacemsgGroup }).(pulumi.StringOutput)
}

func (o FileFilterProfileOutput) Rules() FileFilterProfileRuleArrayOutput {
	return o.ApplyT(func(v *FileFilterProfile) FileFilterProfileRuleArrayOutput { return v.Rules }).(FileFilterProfileRuleArrayOutput)
}

func (o FileFilterProfileOutput) ScanArchiveContents() pulumi.StringOutput {
	return o.ApplyT(func(v *FileFilterProfile) pulumi.StringOutput { return v.ScanArchiveContents }).(pulumi.StringOutput)
}

func (o FileFilterProfileOutput) Vdomparam() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *FileFilterProfile) pulumi.StringPtrOutput { return v.Vdomparam }).(pulumi.StringPtrOutput)
}

type FileFilterProfileArrayOutput struct{ *pulumi.OutputState }

func (FileFilterProfileArrayOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*[]*FileFilterProfile)(nil)).Elem()
}

func (o FileFilterProfileArrayOutput) ToFileFilterProfileArrayOutput() FileFilterProfileArrayOutput {
	return o
}

func (o FileFilterProfileArrayOutput) ToFileFilterProfileArrayOutputWithContext(ctx context.Context) FileFilterProfileArrayOutput {
	return o
}

func (o FileFilterProfileArrayOutput) ToOutput(ctx context.Context) pulumix.Output[[]*FileFilterProfile] {
	return pulumix.Output[[]*FileFilterProfile]{
		OutputState: o.OutputState,
	}
}

func (o FileFilterProfileArrayOutput) Index(i pulumi.IntInput) FileFilterProfileOutput {
	return pulumi.All(o, i).ApplyT(func(vs []interface{}) *FileFilterProfile {
		return vs[0].([]*FileFilterProfile)[vs[1].(int)]
	}).(FileFilterProfileOutput)
}

type FileFilterProfileMapOutput struct{ *pulumi.OutputState }

func (FileFilterProfileMapOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*map[string]*FileFilterProfile)(nil)).Elem()
}

func (o FileFilterProfileMapOutput) ToFileFilterProfileMapOutput() FileFilterProfileMapOutput {
	return o
}

func (o FileFilterProfileMapOutput) ToFileFilterProfileMapOutputWithContext(ctx context.Context) FileFilterProfileMapOutput {
	return o
}

func (o FileFilterProfileMapOutput) ToOutput(ctx context.Context) pulumix.Output[map[string]*FileFilterProfile] {
	return pulumix.Output[map[string]*FileFilterProfile]{
		OutputState: o.OutputState,
	}
}

func (o FileFilterProfileMapOutput) MapIndex(k pulumi.StringInput) FileFilterProfileOutput {
	return pulumi.All(o, k).ApplyT(func(vs []interface{}) *FileFilterProfile {
		return vs[0].(map[string]*FileFilterProfile)[vs[1].(string)]
	}).(FileFilterProfileOutput)
}

func init() {
	pulumi.RegisterInputType(reflect.TypeOf((*FileFilterProfileInput)(nil)).Elem(), &FileFilterProfile{})
	pulumi.RegisterInputType(reflect.TypeOf((*FileFilterProfileArrayInput)(nil)).Elem(), FileFilterProfileArray{})
	pulumi.RegisterInputType(reflect.TypeOf((*FileFilterProfileMapInput)(nil)).Elem(), FileFilterProfileMap{})
	pulumi.RegisterOutputType(FileFilterProfileOutput{})
	pulumi.RegisterOutputType(FileFilterProfileArrayOutput{})
	pulumi.RegisterOutputType(FileFilterProfileMapOutput{})
}
