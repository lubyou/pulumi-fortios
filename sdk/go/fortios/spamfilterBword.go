// *** WARNING: this file was generated by the Pulumi Terraform Bridge (tfgen) Tool. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

package fortios

import (
	"context"
	"reflect"

	"github.com/pkg/errors"
	"github.com/pulumi/pulumi/sdk/v3/go/pulumi"
)

// Configure AntiSpam banned word list. Applies to FortiOS Version `<= 6.2.0`.
//
// ## Example Usage
//
// ```go
// package main
//
// import (
// 	"github.com/pulumi/pulumi-fortios/sdk/go/fortios"
// 	"github.com/pulumi/pulumi/sdk/v3/go/pulumi"
// )
//
// func main() {
// 	pulumi.Run(func(ctx *pulumi.Context) error {
// 		_, err := fortios.NewSpamfilterBword(ctx, "trname", &fortios.SpamfilterBwordArgs{
// 			Comment: pulumi.String("test"),
// 			Entries: SpamfilterBwordEntryArray{
// 				&SpamfilterBwordEntryArgs{
// 					Action:      pulumi.String("clear"),
// 					Language:    pulumi.String("western"),
// 					Pattern:     pulumi.String("test*patten"),
// 					PatternType: pulumi.String("wildcard"),
// 					Score:       pulumi.Int(10),
// 					Status:      pulumi.String("enable"),
// 					Where:       pulumi.String("subject"),
// 				},
// 			},
// 			Fosid: pulumi.Int(1),
// 		})
// 		if err != nil {
// 			return err
// 		}
// 		return nil
// 	})
// }
// ```
//
// ## Import
//
// Spamfilter Bword can be imported using any of these accepted formats$ export "FORTIOS_IMPORT_TABLE"="true"
//
// ```sh
//  $ pulumi import fortios:index/spamfilterBword:SpamfilterBword labelname {{fosid}}
// ```
//
//  $ unset "FORTIOS_IMPORT_TABLE"
type SpamfilterBword struct {
	pulumi.CustomResourceState

	// Optional comments.
	Comment pulumi.StringPtrOutput `pulumi:"comment"`
	// true or false, set this parameter to true when using dynamic forEach + toset to configure and sort sub-tables, please do not set this parameter when configuring static sub-tables.
	DynamicSortSubtable pulumi.StringPtrOutput `pulumi:"dynamicSortSubtable"`
	// Spam filter banned word. The structure of `entries` block is documented below.
	Entries SpamfilterBwordEntryArrayOutput `pulumi:"entries"`
	// ID.
	Fosid pulumi.IntOutput `pulumi:"fosid"`
	// Name of table.
	Name pulumi.StringOutput `pulumi:"name"`
	// Specifies the vdom to which the resource will be applied when the FortiGate unit is running in VDOM mode. Only one vdom can be specified. If you want to inherit the vdom configuration of the provider, please do not set this parameter.
	Vdomparam pulumi.StringPtrOutput `pulumi:"vdomparam"`
}

// NewSpamfilterBword registers a new resource with the given unique name, arguments, and options.
func NewSpamfilterBword(ctx *pulumi.Context,
	name string, args *SpamfilterBwordArgs, opts ...pulumi.ResourceOption) (*SpamfilterBword, error) {
	if args == nil {
		return nil, errors.New("missing one or more required arguments")
	}

	if args.Fosid == nil {
		return nil, errors.New("invalid value for required argument 'Fosid'")
	}
	opts = pkgResourceDefaultOpts(opts)
	var resource SpamfilterBword
	err := ctx.RegisterResource("fortios:index/spamfilterBword:SpamfilterBword", name, args, &resource, opts...)
	if err != nil {
		return nil, err
	}
	return &resource, nil
}

// GetSpamfilterBword gets an existing SpamfilterBword resource's state with the given name, ID, and optional
// state properties that are used to uniquely qualify the lookup (nil if not required).
func GetSpamfilterBword(ctx *pulumi.Context,
	name string, id pulumi.IDInput, state *SpamfilterBwordState, opts ...pulumi.ResourceOption) (*SpamfilterBword, error) {
	var resource SpamfilterBword
	err := ctx.ReadResource("fortios:index/spamfilterBword:SpamfilterBword", name, id, state, &resource, opts...)
	if err != nil {
		return nil, err
	}
	return &resource, nil
}

// Input properties used for looking up and filtering SpamfilterBword resources.
type spamfilterBwordState struct {
	// Optional comments.
	Comment *string `pulumi:"comment"`
	// true or false, set this parameter to true when using dynamic forEach + toset to configure and sort sub-tables, please do not set this parameter when configuring static sub-tables.
	DynamicSortSubtable *string `pulumi:"dynamicSortSubtable"`
	// Spam filter banned word. The structure of `entries` block is documented below.
	Entries []SpamfilterBwordEntry `pulumi:"entries"`
	// ID.
	Fosid *int `pulumi:"fosid"`
	// Name of table.
	Name *string `pulumi:"name"`
	// Specifies the vdom to which the resource will be applied when the FortiGate unit is running in VDOM mode. Only one vdom can be specified. If you want to inherit the vdom configuration of the provider, please do not set this parameter.
	Vdomparam *string `pulumi:"vdomparam"`
}

type SpamfilterBwordState struct {
	// Optional comments.
	Comment pulumi.StringPtrInput
	// true or false, set this parameter to true when using dynamic forEach + toset to configure and sort sub-tables, please do not set this parameter when configuring static sub-tables.
	DynamicSortSubtable pulumi.StringPtrInput
	// Spam filter banned word. The structure of `entries` block is documented below.
	Entries SpamfilterBwordEntryArrayInput
	// ID.
	Fosid pulumi.IntPtrInput
	// Name of table.
	Name pulumi.StringPtrInput
	// Specifies the vdom to which the resource will be applied when the FortiGate unit is running in VDOM mode. Only one vdom can be specified. If you want to inherit the vdom configuration of the provider, please do not set this parameter.
	Vdomparam pulumi.StringPtrInput
}

func (SpamfilterBwordState) ElementType() reflect.Type {
	return reflect.TypeOf((*spamfilterBwordState)(nil)).Elem()
}

type spamfilterBwordArgs struct {
	// Optional comments.
	Comment *string `pulumi:"comment"`
	// true or false, set this parameter to true when using dynamic forEach + toset to configure and sort sub-tables, please do not set this parameter when configuring static sub-tables.
	DynamicSortSubtable *string `pulumi:"dynamicSortSubtable"`
	// Spam filter banned word. The structure of `entries` block is documented below.
	Entries []SpamfilterBwordEntry `pulumi:"entries"`
	// ID.
	Fosid int `pulumi:"fosid"`
	// Name of table.
	Name *string `pulumi:"name"`
	// Specifies the vdom to which the resource will be applied when the FortiGate unit is running in VDOM mode. Only one vdom can be specified. If you want to inherit the vdom configuration of the provider, please do not set this parameter.
	Vdomparam *string `pulumi:"vdomparam"`
}

// The set of arguments for constructing a SpamfilterBword resource.
type SpamfilterBwordArgs struct {
	// Optional comments.
	Comment pulumi.StringPtrInput
	// true or false, set this parameter to true when using dynamic forEach + toset to configure and sort sub-tables, please do not set this parameter when configuring static sub-tables.
	DynamicSortSubtable pulumi.StringPtrInput
	// Spam filter banned word. The structure of `entries` block is documented below.
	Entries SpamfilterBwordEntryArrayInput
	// ID.
	Fosid pulumi.IntInput
	// Name of table.
	Name pulumi.StringPtrInput
	// Specifies the vdom to which the resource will be applied when the FortiGate unit is running in VDOM mode. Only one vdom can be specified. If you want to inherit the vdom configuration of the provider, please do not set this parameter.
	Vdomparam pulumi.StringPtrInput
}

func (SpamfilterBwordArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*spamfilterBwordArgs)(nil)).Elem()
}

type SpamfilterBwordInput interface {
	pulumi.Input

	ToSpamfilterBwordOutput() SpamfilterBwordOutput
	ToSpamfilterBwordOutputWithContext(ctx context.Context) SpamfilterBwordOutput
}

func (*SpamfilterBword) ElementType() reflect.Type {
	return reflect.TypeOf((**SpamfilterBword)(nil)).Elem()
}

func (i *SpamfilterBword) ToSpamfilterBwordOutput() SpamfilterBwordOutput {
	return i.ToSpamfilterBwordOutputWithContext(context.Background())
}

func (i *SpamfilterBword) ToSpamfilterBwordOutputWithContext(ctx context.Context) SpamfilterBwordOutput {
	return pulumi.ToOutputWithContext(ctx, i).(SpamfilterBwordOutput)
}

// SpamfilterBwordArrayInput is an input type that accepts SpamfilterBwordArray and SpamfilterBwordArrayOutput values.
// You can construct a concrete instance of `SpamfilterBwordArrayInput` via:
//
//          SpamfilterBwordArray{ SpamfilterBwordArgs{...} }
type SpamfilterBwordArrayInput interface {
	pulumi.Input

	ToSpamfilterBwordArrayOutput() SpamfilterBwordArrayOutput
	ToSpamfilterBwordArrayOutputWithContext(context.Context) SpamfilterBwordArrayOutput
}

type SpamfilterBwordArray []SpamfilterBwordInput

func (SpamfilterBwordArray) ElementType() reflect.Type {
	return reflect.TypeOf((*[]*SpamfilterBword)(nil)).Elem()
}

func (i SpamfilterBwordArray) ToSpamfilterBwordArrayOutput() SpamfilterBwordArrayOutput {
	return i.ToSpamfilterBwordArrayOutputWithContext(context.Background())
}

func (i SpamfilterBwordArray) ToSpamfilterBwordArrayOutputWithContext(ctx context.Context) SpamfilterBwordArrayOutput {
	return pulumi.ToOutputWithContext(ctx, i).(SpamfilterBwordArrayOutput)
}

// SpamfilterBwordMapInput is an input type that accepts SpamfilterBwordMap and SpamfilterBwordMapOutput values.
// You can construct a concrete instance of `SpamfilterBwordMapInput` via:
//
//          SpamfilterBwordMap{ "key": SpamfilterBwordArgs{...} }
type SpamfilterBwordMapInput interface {
	pulumi.Input

	ToSpamfilterBwordMapOutput() SpamfilterBwordMapOutput
	ToSpamfilterBwordMapOutputWithContext(context.Context) SpamfilterBwordMapOutput
}

type SpamfilterBwordMap map[string]SpamfilterBwordInput

func (SpamfilterBwordMap) ElementType() reflect.Type {
	return reflect.TypeOf((*map[string]*SpamfilterBword)(nil)).Elem()
}

func (i SpamfilterBwordMap) ToSpamfilterBwordMapOutput() SpamfilterBwordMapOutput {
	return i.ToSpamfilterBwordMapOutputWithContext(context.Background())
}

func (i SpamfilterBwordMap) ToSpamfilterBwordMapOutputWithContext(ctx context.Context) SpamfilterBwordMapOutput {
	return pulumi.ToOutputWithContext(ctx, i).(SpamfilterBwordMapOutput)
}

type SpamfilterBwordOutput struct{ *pulumi.OutputState }

func (SpamfilterBwordOutput) ElementType() reflect.Type {
	return reflect.TypeOf((**SpamfilterBword)(nil)).Elem()
}

func (o SpamfilterBwordOutput) ToSpamfilterBwordOutput() SpamfilterBwordOutput {
	return o
}

func (o SpamfilterBwordOutput) ToSpamfilterBwordOutputWithContext(ctx context.Context) SpamfilterBwordOutput {
	return o
}

type SpamfilterBwordArrayOutput struct{ *pulumi.OutputState }

func (SpamfilterBwordArrayOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*[]*SpamfilterBword)(nil)).Elem()
}

func (o SpamfilterBwordArrayOutput) ToSpamfilterBwordArrayOutput() SpamfilterBwordArrayOutput {
	return o
}

func (o SpamfilterBwordArrayOutput) ToSpamfilterBwordArrayOutputWithContext(ctx context.Context) SpamfilterBwordArrayOutput {
	return o
}

func (o SpamfilterBwordArrayOutput) Index(i pulumi.IntInput) SpamfilterBwordOutput {
	return pulumi.All(o, i).ApplyT(func(vs []interface{}) *SpamfilterBword {
		return vs[0].([]*SpamfilterBword)[vs[1].(int)]
	}).(SpamfilterBwordOutput)
}

type SpamfilterBwordMapOutput struct{ *pulumi.OutputState }

func (SpamfilterBwordMapOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*map[string]*SpamfilterBword)(nil)).Elem()
}

func (o SpamfilterBwordMapOutput) ToSpamfilterBwordMapOutput() SpamfilterBwordMapOutput {
	return o
}

func (o SpamfilterBwordMapOutput) ToSpamfilterBwordMapOutputWithContext(ctx context.Context) SpamfilterBwordMapOutput {
	return o
}

func (o SpamfilterBwordMapOutput) MapIndex(k pulumi.StringInput) SpamfilterBwordOutput {
	return pulumi.All(o, k).ApplyT(func(vs []interface{}) *SpamfilterBword {
		return vs[0].(map[string]*SpamfilterBword)[vs[1].(string)]
	}).(SpamfilterBwordOutput)
}

func init() {
	pulumi.RegisterInputType(reflect.TypeOf((*SpamfilterBwordInput)(nil)).Elem(), &SpamfilterBword{})
	pulumi.RegisterInputType(reflect.TypeOf((*SpamfilterBwordArrayInput)(nil)).Elem(), SpamfilterBwordArray{})
	pulumi.RegisterInputType(reflect.TypeOf((*SpamfilterBwordMapInput)(nil)).Elem(), SpamfilterBwordMap{})
	pulumi.RegisterOutputType(SpamfilterBwordOutput{})
	pulumi.RegisterOutputType(SpamfilterBwordArrayOutput{})
	pulumi.RegisterOutputType(SpamfilterBwordMapOutput{})
}
