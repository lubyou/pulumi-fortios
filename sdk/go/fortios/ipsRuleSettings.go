// *** WARNING: this file was generated by the Pulumi Terraform Bridge (tfgen) Tool. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

package fortios

import (
	"context"
	"reflect"

	"github.com/pulumi/pulumi/sdk/v3/go/pulumi"
)

// Configure IPS rule setting.
//
// ## Import
//
// Ips RuleSettings can be imported using any of these accepted formats
//
// ```sh
//  $ pulumi import fortios:index/ipsRuleSettings:IpsRuleSettings labelname {{fosid}}
// ```
//
//  If you do not want to import arguments of block$ export "FORTIOS_IMPORT_TABLE"="false"
//
// ```sh
//  $ pulumi import fortios:index/ipsRuleSettings:IpsRuleSettings labelname {{fosid}}
// ```
//
//  $ unset "FORTIOS_IMPORT_TABLE"
type IpsRuleSettings struct {
	pulumi.CustomResourceState

	// Rule ID.
	Fosid pulumi.IntOutput `pulumi:"fosid"`
	// Specifies the vdom to which the resource will be applied when the FortiGate unit is running in VDOM mode. Only one vdom can be specified. If you want to inherit the vdom configuration of the provider, please do not set this parameter.
	Vdomparam pulumi.StringPtrOutput `pulumi:"vdomparam"`
}

// NewIpsRuleSettings registers a new resource with the given unique name, arguments, and options.
func NewIpsRuleSettings(ctx *pulumi.Context,
	name string, args *IpsRuleSettingsArgs, opts ...pulumi.ResourceOption) (*IpsRuleSettings, error) {
	if args == nil {
		args = &IpsRuleSettingsArgs{}
	}

	opts = pkgResourceDefaultOpts(opts)
	var resource IpsRuleSettings
	err := ctx.RegisterResource("fortios:index/ipsRuleSettings:IpsRuleSettings", name, args, &resource, opts...)
	if err != nil {
		return nil, err
	}
	return &resource, nil
}

// GetIpsRuleSettings gets an existing IpsRuleSettings resource's state with the given name, ID, and optional
// state properties that are used to uniquely qualify the lookup (nil if not required).
func GetIpsRuleSettings(ctx *pulumi.Context,
	name string, id pulumi.IDInput, state *IpsRuleSettingsState, opts ...pulumi.ResourceOption) (*IpsRuleSettings, error) {
	var resource IpsRuleSettings
	err := ctx.ReadResource("fortios:index/ipsRuleSettings:IpsRuleSettings", name, id, state, &resource, opts...)
	if err != nil {
		return nil, err
	}
	return &resource, nil
}

// Input properties used for looking up and filtering IpsRuleSettings resources.
type ipsRuleSettingsState struct {
	// Rule ID.
	Fosid *int `pulumi:"fosid"`
	// Specifies the vdom to which the resource will be applied when the FortiGate unit is running in VDOM mode. Only one vdom can be specified. If you want to inherit the vdom configuration of the provider, please do not set this parameter.
	Vdomparam *string `pulumi:"vdomparam"`
}

type IpsRuleSettingsState struct {
	// Rule ID.
	Fosid pulumi.IntPtrInput
	// Specifies the vdom to which the resource will be applied when the FortiGate unit is running in VDOM mode. Only one vdom can be specified. If you want to inherit the vdom configuration of the provider, please do not set this parameter.
	Vdomparam pulumi.StringPtrInput
}

func (IpsRuleSettingsState) ElementType() reflect.Type {
	return reflect.TypeOf((*ipsRuleSettingsState)(nil)).Elem()
}

type ipsRuleSettingsArgs struct {
	// Rule ID.
	Fosid *int `pulumi:"fosid"`
	// Specifies the vdom to which the resource will be applied when the FortiGate unit is running in VDOM mode. Only one vdom can be specified. If you want to inherit the vdom configuration of the provider, please do not set this parameter.
	Vdomparam *string `pulumi:"vdomparam"`
}

// The set of arguments for constructing a IpsRuleSettings resource.
type IpsRuleSettingsArgs struct {
	// Rule ID.
	Fosid pulumi.IntPtrInput
	// Specifies the vdom to which the resource will be applied when the FortiGate unit is running in VDOM mode. Only one vdom can be specified. If you want to inherit the vdom configuration of the provider, please do not set this parameter.
	Vdomparam pulumi.StringPtrInput
}

func (IpsRuleSettingsArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*ipsRuleSettingsArgs)(nil)).Elem()
}

type IpsRuleSettingsInput interface {
	pulumi.Input

	ToIpsRuleSettingsOutput() IpsRuleSettingsOutput
	ToIpsRuleSettingsOutputWithContext(ctx context.Context) IpsRuleSettingsOutput
}

func (*IpsRuleSettings) ElementType() reflect.Type {
	return reflect.TypeOf((**IpsRuleSettings)(nil)).Elem()
}

func (i *IpsRuleSettings) ToIpsRuleSettingsOutput() IpsRuleSettingsOutput {
	return i.ToIpsRuleSettingsOutputWithContext(context.Background())
}

func (i *IpsRuleSettings) ToIpsRuleSettingsOutputWithContext(ctx context.Context) IpsRuleSettingsOutput {
	return pulumi.ToOutputWithContext(ctx, i).(IpsRuleSettingsOutput)
}

// IpsRuleSettingsArrayInput is an input type that accepts IpsRuleSettingsArray and IpsRuleSettingsArrayOutput values.
// You can construct a concrete instance of `IpsRuleSettingsArrayInput` via:
//
//          IpsRuleSettingsArray{ IpsRuleSettingsArgs{...} }
type IpsRuleSettingsArrayInput interface {
	pulumi.Input

	ToIpsRuleSettingsArrayOutput() IpsRuleSettingsArrayOutput
	ToIpsRuleSettingsArrayOutputWithContext(context.Context) IpsRuleSettingsArrayOutput
}

type IpsRuleSettingsArray []IpsRuleSettingsInput

func (IpsRuleSettingsArray) ElementType() reflect.Type {
	return reflect.TypeOf((*[]*IpsRuleSettings)(nil)).Elem()
}

func (i IpsRuleSettingsArray) ToIpsRuleSettingsArrayOutput() IpsRuleSettingsArrayOutput {
	return i.ToIpsRuleSettingsArrayOutputWithContext(context.Background())
}

func (i IpsRuleSettingsArray) ToIpsRuleSettingsArrayOutputWithContext(ctx context.Context) IpsRuleSettingsArrayOutput {
	return pulumi.ToOutputWithContext(ctx, i).(IpsRuleSettingsArrayOutput)
}

// IpsRuleSettingsMapInput is an input type that accepts IpsRuleSettingsMap and IpsRuleSettingsMapOutput values.
// You can construct a concrete instance of `IpsRuleSettingsMapInput` via:
//
//          IpsRuleSettingsMap{ "key": IpsRuleSettingsArgs{...} }
type IpsRuleSettingsMapInput interface {
	pulumi.Input

	ToIpsRuleSettingsMapOutput() IpsRuleSettingsMapOutput
	ToIpsRuleSettingsMapOutputWithContext(context.Context) IpsRuleSettingsMapOutput
}

type IpsRuleSettingsMap map[string]IpsRuleSettingsInput

func (IpsRuleSettingsMap) ElementType() reflect.Type {
	return reflect.TypeOf((*map[string]*IpsRuleSettings)(nil)).Elem()
}

func (i IpsRuleSettingsMap) ToIpsRuleSettingsMapOutput() IpsRuleSettingsMapOutput {
	return i.ToIpsRuleSettingsMapOutputWithContext(context.Background())
}

func (i IpsRuleSettingsMap) ToIpsRuleSettingsMapOutputWithContext(ctx context.Context) IpsRuleSettingsMapOutput {
	return pulumi.ToOutputWithContext(ctx, i).(IpsRuleSettingsMapOutput)
}

type IpsRuleSettingsOutput struct{ *pulumi.OutputState }

func (IpsRuleSettingsOutput) ElementType() reflect.Type {
	return reflect.TypeOf((**IpsRuleSettings)(nil)).Elem()
}

func (o IpsRuleSettingsOutput) ToIpsRuleSettingsOutput() IpsRuleSettingsOutput {
	return o
}

func (o IpsRuleSettingsOutput) ToIpsRuleSettingsOutputWithContext(ctx context.Context) IpsRuleSettingsOutput {
	return o
}

type IpsRuleSettingsArrayOutput struct{ *pulumi.OutputState }

func (IpsRuleSettingsArrayOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*[]*IpsRuleSettings)(nil)).Elem()
}

func (o IpsRuleSettingsArrayOutput) ToIpsRuleSettingsArrayOutput() IpsRuleSettingsArrayOutput {
	return o
}

func (o IpsRuleSettingsArrayOutput) ToIpsRuleSettingsArrayOutputWithContext(ctx context.Context) IpsRuleSettingsArrayOutput {
	return o
}

func (o IpsRuleSettingsArrayOutput) Index(i pulumi.IntInput) IpsRuleSettingsOutput {
	return pulumi.All(o, i).ApplyT(func(vs []interface{}) *IpsRuleSettings {
		return vs[0].([]*IpsRuleSettings)[vs[1].(int)]
	}).(IpsRuleSettingsOutput)
}

type IpsRuleSettingsMapOutput struct{ *pulumi.OutputState }

func (IpsRuleSettingsMapOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*map[string]*IpsRuleSettings)(nil)).Elem()
}

func (o IpsRuleSettingsMapOutput) ToIpsRuleSettingsMapOutput() IpsRuleSettingsMapOutput {
	return o
}

func (o IpsRuleSettingsMapOutput) ToIpsRuleSettingsMapOutputWithContext(ctx context.Context) IpsRuleSettingsMapOutput {
	return o
}

func (o IpsRuleSettingsMapOutput) MapIndex(k pulumi.StringInput) IpsRuleSettingsOutput {
	return pulumi.All(o, k).ApplyT(func(vs []interface{}) *IpsRuleSettings {
		return vs[0].(map[string]*IpsRuleSettings)[vs[1].(string)]
	}).(IpsRuleSettingsOutput)
}

func init() {
	pulumi.RegisterInputType(reflect.TypeOf((*IpsRuleSettingsInput)(nil)).Elem(), &IpsRuleSettings{})
	pulumi.RegisterInputType(reflect.TypeOf((*IpsRuleSettingsArrayInput)(nil)).Elem(), IpsRuleSettingsArray{})
	pulumi.RegisterInputType(reflect.TypeOf((*IpsRuleSettingsMapInput)(nil)).Elem(), IpsRuleSettingsMap{})
	pulumi.RegisterOutputType(IpsRuleSettingsOutput{})
	pulumi.RegisterOutputType(IpsRuleSettingsArrayOutput{})
	pulumi.RegisterOutputType(IpsRuleSettingsMapOutput{})
}
