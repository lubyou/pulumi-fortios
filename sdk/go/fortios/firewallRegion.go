// Code generated by the Pulumi Terraform Bridge (tfgen) Tool DO NOT EDIT.
// *** WARNING: Do not edit by hand unless you're certain you know what you are doing! ***

package fortios

import (
	"context"
	"reflect"

	"github.com/pulumi/pulumi/sdk/v3/go/pulumi"
)

type FirewallRegion struct {
	pulumi.CustomResourceState

	Cities              FirewallRegionCityArrayOutput `pulumi:"cities"`
	DynamicSortSubtable pulumi.StringPtrOutput        `pulumi:"dynamicSortSubtable"`
	Fosid               pulumi.IntOutput              `pulumi:"fosid"`
	Name                pulumi.StringOutput           `pulumi:"name"`
	Vdomparam           pulumi.StringPtrOutput        `pulumi:"vdomparam"`
}

// NewFirewallRegion registers a new resource with the given unique name, arguments, and options.
func NewFirewallRegion(ctx *pulumi.Context,
	name string, args *FirewallRegionArgs, opts ...pulumi.ResourceOption) (*FirewallRegion, error) {
	if args == nil {
		args = &FirewallRegionArgs{}
	}

	opts = pkgResourceDefaultOpts(opts)
	var resource FirewallRegion
	err := ctx.RegisterResource("fortios:index/firewallRegion:FirewallRegion", name, args, &resource, opts...)
	if err != nil {
		return nil, err
	}
	return &resource, nil
}

// GetFirewallRegion gets an existing FirewallRegion resource's state with the given name, ID, and optional
// state properties that are used to uniquely qualify the lookup (nil if not required).
func GetFirewallRegion(ctx *pulumi.Context,
	name string, id pulumi.IDInput, state *FirewallRegionState, opts ...pulumi.ResourceOption) (*FirewallRegion, error) {
	var resource FirewallRegion
	err := ctx.ReadResource("fortios:index/firewallRegion:FirewallRegion", name, id, state, &resource, opts...)
	if err != nil {
		return nil, err
	}
	return &resource, nil
}

// Input properties used for looking up and filtering FirewallRegion resources.
type firewallRegionState struct {
	Cities              []FirewallRegionCity `pulumi:"cities"`
	DynamicSortSubtable *string              `pulumi:"dynamicSortSubtable"`
	Fosid               *int                 `pulumi:"fosid"`
	Name                *string              `pulumi:"name"`
	Vdomparam           *string              `pulumi:"vdomparam"`
}

type FirewallRegionState struct {
	Cities              FirewallRegionCityArrayInput
	DynamicSortSubtable pulumi.StringPtrInput
	Fosid               pulumi.IntPtrInput
	Name                pulumi.StringPtrInput
	Vdomparam           pulumi.StringPtrInput
}

func (FirewallRegionState) ElementType() reflect.Type {
	return reflect.TypeOf((*firewallRegionState)(nil)).Elem()
}

type firewallRegionArgs struct {
	Cities              []FirewallRegionCity `pulumi:"cities"`
	DynamicSortSubtable *string              `pulumi:"dynamicSortSubtable"`
	Fosid               *int                 `pulumi:"fosid"`
	Name                *string              `pulumi:"name"`
	Vdomparam           *string              `pulumi:"vdomparam"`
}

// The set of arguments for constructing a FirewallRegion resource.
type FirewallRegionArgs struct {
	Cities              FirewallRegionCityArrayInput
	DynamicSortSubtable pulumi.StringPtrInput
	Fosid               pulumi.IntPtrInput
	Name                pulumi.StringPtrInput
	Vdomparam           pulumi.StringPtrInput
}

func (FirewallRegionArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*firewallRegionArgs)(nil)).Elem()
}

type FirewallRegionInput interface {
	pulumi.Input

	ToFirewallRegionOutput() FirewallRegionOutput
	ToFirewallRegionOutputWithContext(ctx context.Context) FirewallRegionOutput
}

func (*FirewallRegion) ElementType() reflect.Type {
	return reflect.TypeOf((**FirewallRegion)(nil)).Elem()
}

func (i *FirewallRegion) ToFirewallRegionOutput() FirewallRegionOutput {
	return i.ToFirewallRegionOutputWithContext(context.Background())
}

func (i *FirewallRegion) ToFirewallRegionOutputWithContext(ctx context.Context) FirewallRegionOutput {
	return pulumi.ToOutputWithContext(ctx, i).(FirewallRegionOutput)
}

// FirewallRegionArrayInput is an input type that accepts FirewallRegionArray and FirewallRegionArrayOutput values.
// You can construct a concrete instance of `FirewallRegionArrayInput` via:
//
//	FirewallRegionArray{ FirewallRegionArgs{...} }
type FirewallRegionArrayInput interface {
	pulumi.Input

	ToFirewallRegionArrayOutput() FirewallRegionArrayOutput
	ToFirewallRegionArrayOutputWithContext(context.Context) FirewallRegionArrayOutput
}

type FirewallRegionArray []FirewallRegionInput

func (FirewallRegionArray) ElementType() reflect.Type {
	return reflect.TypeOf((*[]*FirewallRegion)(nil)).Elem()
}

func (i FirewallRegionArray) ToFirewallRegionArrayOutput() FirewallRegionArrayOutput {
	return i.ToFirewallRegionArrayOutputWithContext(context.Background())
}

func (i FirewallRegionArray) ToFirewallRegionArrayOutputWithContext(ctx context.Context) FirewallRegionArrayOutput {
	return pulumi.ToOutputWithContext(ctx, i).(FirewallRegionArrayOutput)
}

// FirewallRegionMapInput is an input type that accepts FirewallRegionMap and FirewallRegionMapOutput values.
// You can construct a concrete instance of `FirewallRegionMapInput` via:
//
//	FirewallRegionMap{ "key": FirewallRegionArgs{...} }
type FirewallRegionMapInput interface {
	pulumi.Input

	ToFirewallRegionMapOutput() FirewallRegionMapOutput
	ToFirewallRegionMapOutputWithContext(context.Context) FirewallRegionMapOutput
}

type FirewallRegionMap map[string]FirewallRegionInput

func (FirewallRegionMap) ElementType() reflect.Type {
	return reflect.TypeOf((*map[string]*FirewallRegion)(nil)).Elem()
}

func (i FirewallRegionMap) ToFirewallRegionMapOutput() FirewallRegionMapOutput {
	return i.ToFirewallRegionMapOutputWithContext(context.Background())
}

func (i FirewallRegionMap) ToFirewallRegionMapOutputWithContext(ctx context.Context) FirewallRegionMapOutput {
	return pulumi.ToOutputWithContext(ctx, i).(FirewallRegionMapOutput)
}

type FirewallRegionOutput struct{ *pulumi.OutputState }

func (FirewallRegionOutput) ElementType() reflect.Type {
	return reflect.TypeOf((**FirewallRegion)(nil)).Elem()
}

func (o FirewallRegionOutput) ToFirewallRegionOutput() FirewallRegionOutput {
	return o
}

func (o FirewallRegionOutput) ToFirewallRegionOutputWithContext(ctx context.Context) FirewallRegionOutput {
	return o
}

func (o FirewallRegionOutput) Cities() FirewallRegionCityArrayOutput {
	return o.ApplyT(func(v *FirewallRegion) FirewallRegionCityArrayOutput { return v.Cities }).(FirewallRegionCityArrayOutput)
}

func (o FirewallRegionOutput) DynamicSortSubtable() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *FirewallRegion) pulumi.StringPtrOutput { return v.DynamicSortSubtable }).(pulumi.StringPtrOutput)
}

func (o FirewallRegionOutput) Fosid() pulumi.IntOutput {
	return o.ApplyT(func(v *FirewallRegion) pulumi.IntOutput { return v.Fosid }).(pulumi.IntOutput)
}

func (o FirewallRegionOutput) Name() pulumi.StringOutput {
	return o.ApplyT(func(v *FirewallRegion) pulumi.StringOutput { return v.Name }).(pulumi.StringOutput)
}

func (o FirewallRegionOutput) Vdomparam() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *FirewallRegion) pulumi.StringPtrOutput { return v.Vdomparam }).(pulumi.StringPtrOutput)
}

type FirewallRegionArrayOutput struct{ *pulumi.OutputState }

func (FirewallRegionArrayOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*[]*FirewallRegion)(nil)).Elem()
}

func (o FirewallRegionArrayOutput) ToFirewallRegionArrayOutput() FirewallRegionArrayOutput {
	return o
}

func (o FirewallRegionArrayOutput) ToFirewallRegionArrayOutputWithContext(ctx context.Context) FirewallRegionArrayOutput {
	return o
}

func (o FirewallRegionArrayOutput) Index(i pulumi.IntInput) FirewallRegionOutput {
	return pulumi.All(o, i).ApplyT(func(vs []interface{}) *FirewallRegion {
		return vs[0].([]*FirewallRegion)[vs[1].(int)]
	}).(FirewallRegionOutput)
}

type FirewallRegionMapOutput struct{ *pulumi.OutputState }

func (FirewallRegionMapOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*map[string]*FirewallRegion)(nil)).Elem()
}

func (o FirewallRegionMapOutput) ToFirewallRegionMapOutput() FirewallRegionMapOutput {
	return o
}

func (o FirewallRegionMapOutput) ToFirewallRegionMapOutputWithContext(ctx context.Context) FirewallRegionMapOutput {
	return o
}

func (o FirewallRegionMapOutput) MapIndex(k pulumi.StringInput) FirewallRegionOutput {
	return pulumi.All(o, k).ApplyT(func(vs []interface{}) *FirewallRegion {
		return vs[0].(map[string]*FirewallRegion)[vs[1].(string)]
	}).(FirewallRegionOutput)
}

func init() {
	pulumi.RegisterInputType(reflect.TypeOf((*FirewallRegionInput)(nil)).Elem(), &FirewallRegion{})
	pulumi.RegisterInputType(reflect.TypeOf((*FirewallRegionArrayInput)(nil)).Elem(), FirewallRegionArray{})
	pulumi.RegisterInputType(reflect.TypeOf((*FirewallRegionMapInput)(nil)).Elem(), FirewallRegionMap{})
	pulumi.RegisterOutputType(FirewallRegionOutput{})
	pulumi.RegisterOutputType(FirewallRegionArrayOutput{})
	pulumi.RegisterOutputType(FirewallRegionMapOutput{})
}
