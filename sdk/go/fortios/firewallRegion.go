// *** WARNING: this file was generated by the Pulumi Terraform Bridge (tfgen) Tool. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

package fortios

import (
	"context"
	"reflect"

	"github.com/pulumi/pulumi/sdk/v3/go/pulumi"
)

// Define region table. Applies to FortiOS Version `>= 6.4.0`.
//
// ## Import
//
// Firewall Region can be imported using any of these accepted formats$ export "FORTIOS_IMPORT_TABLE"="true"
//
// ```sh
//  $ pulumi import fortios:index/firewallRegion:FirewallRegion labelname {{fosid}}
// ```
//
//  $ unset "FORTIOS_IMPORT_TABLE"
type FirewallRegion struct {
	pulumi.CustomResourceState

	// City ID list. The structure of `city` block is documented below.
	Cities FirewallRegionCityArrayOutput `pulumi:"cities"`
	// true or false, set this parameter to true when using dynamic forEach + toset to configure and sort sub-tables, please do not set this parameter when configuring static sub-tables.
	DynamicSortSubtable pulumi.StringPtrOutput `pulumi:"dynamicSortSubtable"`
	// Region ID.
	Fosid pulumi.IntOutput `pulumi:"fosid"`
	// Region name.
	Name pulumi.StringOutput `pulumi:"name"`
	// Specifies the vdom to which the resource will be applied when the FortiGate unit is running in VDOM mode. Only one vdom can be specified. If you want to inherit the vdom configuration of the provider, please do not set this parameter.
	Vdomparam pulumi.StringPtrOutput `pulumi:"vdomparam"`
}

// NewFirewallRegion registers a new resource with the given unique name, arguments, and options.
func NewFirewallRegion(ctx *pulumi.Context,
	name string, args *FirewallRegionArgs, opts ...pulumi.ResourceOption) (*FirewallRegion, error) {
	if args == nil {
		args = &FirewallRegionArgs{}
	}

	var resource FirewallRegion
	err := ctx.RegisterResource("fortios:index/firewallRegion:FirewallRegion", name, args, &resource, opts...)
	if err != nil {
		return nil, err
	}
	return &resource, nil
}

// GetFirewallRegion gets an existing FirewallRegion resource's state with the given name, ID, and optional
// state properties that are used to uniquely qualify the lookup (nil if not required).
func GetFirewallRegion(ctx *pulumi.Context,
	name string, id pulumi.IDInput, state *FirewallRegionState, opts ...pulumi.ResourceOption) (*FirewallRegion, error) {
	var resource FirewallRegion
	err := ctx.ReadResource("fortios:index/firewallRegion:FirewallRegion", name, id, state, &resource, opts...)
	if err != nil {
		return nil, err
	}
	return &resource, nil
}

// Input properties used for looking up and filtering FirewallRegion resources.
type firewallRegionState struct {
	// City ID list. The structure of `city` block is documented below.
	Cities []FirewallRegionCity `pulumi:"cities"`
	// true or false, set this parameter to true when using dynamic forEach + toset to configure and sort sub-tables, please do not set this parameter when configuring static sub-tables.
	DynamicSortSubtable *string `pulumi:"dynamicSortSubtable"`
	// Region ID.
	Fosid *int `pulumi:"fosid"`
	// Region name.
	Name *string `pulumi:"name"`
	// Specifies the vdom to which the resource will be applied when the FortiGate unit is running in VDOM mode. Only one vdom can be specified. If you want to inherit the vdom configuration of the provider, please do not set this parameter.
	Vdomparam *string `pulumi:"vdomparam"`
}

type FirewallRegionState struct {
	// City ID list. The structure of `city` block is documented below.
	Cities FirewallRegionCityArrayInput
	// true or false, set this parameter to true when using dynamic forEach + toset to configure and sort sub-tables, please do not set this parameter when configuring static sub-tables.
	DynamicSortSubtable pulumi.StringPtrInput
	// Region ID.
	Fosid pulumi.IntPtrInput
	// Region name.
	Name pulumi.StringPtrInput
	// Specifies the vdom to which the resource will be applied when the FortiGate unit is running in VDOM mode. Only one vdom can be specified. If you want to inherit the vdom configuration of the provider, please do not set this parameter.
	Vdomparam pulumi.StringPtrInput
}

func (FirewallRegionState) ElementType() reflect.Type {
	return reflect.TypeOf((*firewallRegionState)(nil)).Elem()
}

type firewallRegionArgs struct {
	// City ID list. The structure of `city` block is documented below.
	Cities []FirewallRegionCity `pulumi:"cities"`
	// true or false, set this parameter to true when using dynamic forEach + toset to configure and sort sub-tables, please do not set this parameter when configuring static sub-tables.
	DynamicSortSubtable *string `pulumi:"dynamicSortSubtable"`
	// Region ID.
	Fosid *int `pulumi:"fosid"`
	// Region name.
	Name *string `pulumi:"name"`
	// Specifies the vdom to which the resource will be applied when the FortiGate unit is running in VDOM mode. Only one vdom can be specified. If you want to inherit the vdom configuration of the provider, please do not set this parameter.
	Vdomparam *string `pulumi:"vdomparam"`
}

// The set of arguments for constructing a FirewallRegion resource.
type FirewallRegionArgs struct {
	// City ID list. The structure of `city` block is documented below.
	Cities FirewallRegionCityArrayInput
	// true or false, set this parameter to true when using dynamic forEach + toset to configure and sort sub-tables, please do not set this parameter when configuring static sub-tables.
	DynamicSortSubtable pulumi.StringPtrInput
	// Region ID.
	Fosid pulumi.IntPtrInput
	// Region name.
	Name pulumi.StringPtrInput
	// Specifies the vdom to which the resource will be applied when the FortiGate unit is running in VDOM mode. Only one vdom can be specified. If you want to inherit the vdom configuration of the provider, please do not set this parameter.
	Vdomparam pulumi.StringPtrInput
}

func (FirewallRegionArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*firewallRegionArgs)(nil)).Elem()
}

type FirewallRegionInput interface {
	pulumi.Input

	ToFirewallRegionOutput() FirewallRegionOutput
	ToFirewallRegionOutputWithContext(ctx context.Context) FirewallRegionOutput
}

func (*FirewallRegion) ElementType() reflect.Type {
	return reflect.TypeOf((*FirewallRegion)(nil))
}

func (i *FirewallRegion) ToFirewallRegionOutput() FirewallRegionOutput {
	return i.ToFirewallRegionOutputWithContext(context.Background())
}

func (i *FirewallRegion) ToFirewallRegionOutputWithContext(ctx context.Context) FirewallRegionOutput {
	return pulumi.ToOutputWithContext(ctx, i).(FirewallRegionOutput)
}

func (i *FirewallRegion) ToFirewallRegionPtrOutput() FirewallRegionPtrOutput {
	return i.ToFirewallRegionPtrOutputWithContext(context.Background())
}

func (i *FirewallRegion) ToFirewallRegionPtrOutputWithContext(ctx context.Context) FirewallRegionPtrOutput {
	return pulumi.ToOutputWithContext(ctx, i).(FirewallRegionPtrOutput)
}

type FirewallRegionPtrInput interface {
	pulumi.Input

	ToFirewallRegionPtrOutput() FirewallRegionPtrOutput
	ToFirewallRegionPtrOutputWithContext(ctx context.Context) FirewallRegionPtrOutput
}

type firewallRegionPtrType FirewallRegionArgs

func (*firewallRegionPtrType) ElementType() reflect.Type {
	return reflect.TypeOf((**FirewallRegion)(nil))
}

func (i *firewallRegionPtrType) ToFirewallRegionPtrOutput() FirewallRegionPtrOutput {
	return i.ToFirewallRegionPtrOutputWithContext(context.Background())
}

func (i *firewallRegionPtrType) ToFirewallRegionPtrOutputWithContext(ctx context.Context) FirewallRegionPtrOutput {
	return pulumi.ToOutputWithContext(ctx, i).(FirewallRegionPtrOutput)
}

// FirewallRegionArrayInput is an input type that accepts FirewallRegionArray and FirewallRegionArrayOutput values.
// You can construct a concrete instance of `FirewallRegionArrayInput` via:
//
//          FirewallRegionArray{ FirewallRegionArgs{...} }
type FirewallRegionArrayInput interface {
	pulumi.Input

	ToFirewallRegionArrayOutput() FirewallRegionArrayOutput
	ToFirewallRegionArrayOutputWithContext(context.Context) FirewallRegionArrayOutput
}

type FirewallRegionArray []FirewallRegionInput

func (FirewallRegionArray) ElementType() reflect.Type {
	return reflect.TypeOf(([]*FirewallRegion)(nil))
}

func (i FirewallRegionArray) ToFirewallRegionArrayOutput() FirewallRegionArrayOutput {
	return i.ToFirewallRegionArrayOutputWithContext(context.Background())
}

func (i FirewallRegionArray) ToFirewallRegionArrayOutputWithContext(ctx context.Context) FirewallRegionArrayOutput {
	return pulumi.ToOutputWithContext(ctx, i).(FirewallRegionArrayOutput)
}

// FirewallRegionMapInput is an input type that accepts FirewallRegionMap and FirewallRegionMapOutput values.
// You can construct a concrete instance of `FirewallRegionMapInput` via:
//
//          FirewallRegionMap{ "key": FirewallRegionArgs{...} }
type FirewallRegionMapInput interface {
	pulumi.Input

	ToFirewallRegionMapOutput() FirewallRegionMapOutput
	ToFirewallRegionMapOutputWithContext(context.Context) FirewallRegionMapOutput
}

type FirewallRegionMap map[string]FirewallRegionInput

func (FirewallRegionMap) ElementType() reflect.Type {
	return reflect.TypeOf((map[string]*FirewallRegion)(nil))
}

func (i FirewallRegionMap) ToFirewallRegionMapOutput() FirewallRegionMapOutput {
	return i.ToFirewallRegionMapOutputWithContext(context.Background())
}

func (i FirewallRegionMap) ToFirewallRegionMapOutputWithContext(ctx context.Context) FirewallRegionMapOutput {
	return pulumi.ToOutputWithContext(ctx, i).(FirewallRegionMapOutput)
}

type FirewallRegionOutput struct {
	*pulumi.OutputState
}

func (FirewallRegionOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*FirewallRegion)(nil))
}

func (o FirewallRegionOutput) ToFirewallRegionOutput() FirewallRegionOutput {
	return o
}

func (o FirewallRegionOutput) ToFirewallRegionOutputWithContext(ctx context.Context) FirewallRegionOutput {
	return o
}

func (o FirewallRegionOutput) ToFirewallRegionPtrOutput() FirewallRegionPtrOutput {
	return o.ToFirewallRegionPtrOutputWithContext(context.Background())
}

func (o FirewallRegionOutput) ToFirewallRegionPtrOutputWithContext(ctx context.Context) FirewallRegionPtrOutput {
	return o.ApplyT(func(v FirewallRegion) *FirewallRegion {
		return &v
	}).(FirewallRegionPtrOutput)
}

type FirewallRegionPtrOutput struct {
	*pulumi.OutputState
}

func (FirewallRegionPtrOutput) ElementType() reflect.Type {
	return reflect.TypeOf((**FirewallRegion)(nil))
}

func (o FirewallRegionPtrOutput) ToFirewallRegionPtrOutput() FirewallRegionPtrOutput {
	return o
}

func (o FirewallRegionPtrOutput) ToFirewallRegionPtrOutputWithContext(ctx context.Context) FirewallRegionPtrOutput {
	return o
}

type FirewallRegionArrayOutput struct{ *pulumi.OutputState }

func (FirewallRegionArrayOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*[]FirewallRegion)(nil))
}

func (o FirewallRegionArrayOutput) ToFirewallRegionArrayOutput() FirewallRegionArrayOutput {
	return o
}

func (o FirewallRegionArrayOutput) ToFirewallRegionArrayOutputWithContext(ctx context.Context) FirewallRegionArrayOutput {
	return o
}

func (o FirewallRegionArrayOutput) Index(i pulumi.IntInput) FirewallRegionOutput {
	return pulumi.All(o, i).ApplyT(func(vs []interface{}) FirewallRegion {
		return vs[0].([]FirewallRegion)[vs[1].(int)]
	}).(FirewallRegionOutput)
}

type FirewallRegionMapOutput struct{ *pulumi.OutputState }

func (FirewallRegionMapOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*map[string]FirewallRegion)(nil))
}

func (o FirewallRegionMapOutput) ToFirewallRegionMapOutput() FirewallRegionMapOutput {
	return o
}

func (o FirewallRegionMapOutput) ToFirewallRegionMapOutputWithContext(ctx context.Context) FirewallRegionMapOutput {
	return o
}

func (o FirewallRegionMapOutput) MapIndex(k pulumi.StringInput) FirewallRegionOutput {
	return pulumi.All(o, k).ApplyT(func(vs []interface{}) FirewallRegion {
		return vs[0].(map[string]FirewallRegion)[vs[1].(string)]
	}).(FirewallRegionOutput)
}

func init() {
	pulumi.RegisterOutputType(FirewallRegionOutput{})
	pulumi.RegisterOutputType(FirewallRegionPtrOutput{})
	pulumi.RegisterOutputType(FirewallRegionArrayOutput{})
	pulumi.RegisterOutputType(FirewallRegionMapOutput{})
}
