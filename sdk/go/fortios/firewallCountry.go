// Code generated by the Pulumi Terraform Bridge (tfgen) Tool DO NOT EDIT.
// *** WARNING: Do not edit by hand unless you're certain you know what you are doing! ***

package fortios

import (
	"context"
	"reflect"

	"github.com/lubyou/pulumi-fortios/sdk/go/fortios/internal"
	"github.com/pulumi/pulumi/sdk/v3/go/pulumi"
)

type FirewallCountry struct {
	pulumi.CustomResourceState

	DynamicSortSubtable pulumi.StringPtrOutput           `pulumi:"dynamicSortSubtable"`
	Fosid               pulumi.IntOutput                 `pulumi:"fosid"`
	GetAllTables        pulumi.StringPtrOutput           `pulumi:"getAllTables"`
	Name                pulumi.StringOutput              `pulumi:"name"`
	Regions             FirewallCountryRegionArrayOutput `pulumi:"regions"`
	Vdomparam           pulumi.StringPtrOutput           `pulumi:"vdomparam"`
}

// NewFirewallCountry registers a new resource with the given unique name, arguments, and options.
func NewFirewallCountry(ctx *pulumi.Context,
	name string, args *FirewallCountryArgs, opts ...pulumi.ResourceOption) (*FirewallCountry, error) {
	if args == nil {
		args = &FirewallCountryArgs{}
	}

	opts = internal.PkgResourceDefaultOpts(opts)
	var resource FirewallCountry
	err := ctx.RegisterResource("fortios:index/firewallCountry:FirewallCountry", name, args, &resource, opts...)
	if err != nil {
		return nil, err
	}
	return &resource, nil
}

// GetFirewallCountry gets an existing FirewallCountry resource's state with the given name, ID, and optional
// state properties that are used to uniquely qualify the lookup (nil if not required).
func GetFirewallCountry(ctx *pulumi.Context,
	name string, id pulumi.IDInput, state *FirewallCountryState, opts ...pulumi.ResourceOption) (*FirewallCountry, error) {
	var resource FirewallCountry
	err := ctx.ReadResource("fortios:index/firewallCountry:FirewallCountry", name, id, state, &resource, opts...)
	if err != nil {
		return nil, err
	}
	return &resource, nil
}

// Input properties used for looking up and filtering FirewallCountry resources.
type firewallCountryState struct {
	DynamicSortSubtable *string                 `pulumi:"dynamicSortSubtable"`
	Fosid               *int                    `pulumi:"fosid"`
	GetAllTables        *string                 `pulumi:"getAllTables"`
	Name                *string                 `pulumi:"name"`
	Regions             []FirewallCountryRegion `pulumi:"regions"`
	Vdomparam           *string                 `pulumi:"vdomparam"`
}

type FirewallCountryState struct {
	DynamicSortSubtable pulumi.StringPtrInput
	Fosid               pulumi.IntPtrInput
	GetAllTables        pulumi.StringPtrInput
	Name                pulumi.StringPtrInput
	Regions             FirewallCountryRegionArrayInput
	Vdomparam           pulumi.StringPtrInput
}

func (FirewallCountryState) ElementType() reflect.Type {
	return reflect.TypeOf((*firewallCountryState)(nil)).Elem()
}

type firewallCountryArgs struct {
	DynamicSortSubtable *string                 `pulumi:"dynamicSortSubtable"`
	Fosid               *int                    `pulumi:"fosid"`
	GetAllTables        *string                 `pulumi:"getAllTables"`
	Name                *string                 `pulumi:"name"`
	Regions             []FirewallCountryRegion `pulumi:"regions"`
	Vdomparam           *string                 `pulumi:"vdomparam"`
}

// The set of arguments for constructing a FirewallCountry resource.
type FirewallCountryArgs struct {
	DynamicSortSubtable pulumi.StringPtrInput
	Fosid               pulumi.IntPtrInput
	GetAllTables        pulumi.StringPtrInput
	Name                pulumi.StringPtrInput
	Regions             FirewallCountryRegionArrayInput
	Vdomparam           pulumi.StringPtrInput
}

func (FirewallCountryArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*firewallCountryArgs)(nil)).Elem()
}

type FirewallCountryInput interface {
	pulumi.Input

	ToFirewallCountryOutput() FirewallCountryOutput
	ToFirewallCountryOutputWithContext(ctx context.Context) FirewallCountryOutput
}

func (*FirewallCountry) ElementType() reflect.Type {
	return reflect.TypeOf((**FirewallCountry)(nil)).Elem()
}

func (i *FirewallCountry) ToFirewallCountryOutput() FirewallCountryOutput {
	return i.ToFirewallCountryOutputWithContext(context.Background())
}

func (i *FirewallCountry) ToFirewallCountryOutputWithContext(ctx context.Context) FirewallCountryOutput {
	return pulumi.ToOutputWithContext(ctx, i).(FirewallCountryOutput)
}

// FirewallCountryArrayInput is an input type that accepts FirewallCountryArray and FirewallCountryArrayOutput values.
// You can construct a concrete instance of `FirewallCountryArrayInput` via:
//
//	FirewallCountryArray{ FirewallCountryArgs{...} }
type FirewallCountryArrayInput interface {
	pulumi.Input

	ToFirewallCountryArrayOutput() FirewallCountryArrayOutput
	ToFirewallCountryArrayOutputWithContext(context.Context) FirewallCountryArrayOutput
}

type FirewallCountryArray []FirewallCountryInput

func (FirewallCountryArray) ElementType() reflect.Type {
	return reflect.TypeOf((*[]*FirewallCountry)(nil)).Elem()
}

func (i FirewallCountryArray) ToFirewallCountryArrayOutput() FirewallCountryArrayOutput {
	return i.ToFirewallCountryArrayOutputWithContext(context.Background())
}

func (i FirewallCountryArray) ToFirewallCountryArrayOutputWithContext(ctx context.Context) FirewallCountryArrayOutput {
	return pulumi.ToOutputWithContext(ctx, i).(FirewallCountryArrayOutput)
}

// FirewallCountryMapInput is an input type that accepts FirewallCountryMap and FirewallCountryMapOutput values.
// You can construct a concrete instance of `FirewallCountryMapInput` via:
//
//	FirewallCountryMap{ "key": FirewallCountryArgs{...} }
type FirewallCountryMapInput interface {
	pulumi.Input

	ToFirewallCountryMapOutput() FirewallCountryMapOutput
	ToFirewallCountryMapOutputWithContext(context.Context) FirewallCountryMapOutput
}

type FirewallCountryMap map[string]FirewallCountryInput

func (FirewallCountryMap) ElementType() reflect.Type {
	return reflect.TypeOf((*map[string]*FirewallCountry)(nil)).Elem()
}

func (i FirewallCountryMap) ToFirewallCountryMapOutput() FirewallCountryMapOutput {
	return i.ToFirewallCountryMapOutputWithContext(context.Background())
}

func (i FirewallCountryMap) ToFirewallCountryMapOutputWithContext(ctx context.Context) FirewallCountryMapOutput {
	return pulumi.ToOutputWithContext(ctx, i).(FirewallCountryMapOutput)
}

type FirewallCountryOutput struct{ *pulumi.OutputState }

func (FirewallCountryOutput) ElementType() reflect.Type {
	return reflect.TypeOf((**FirewallCountry)(nil)).Elem()
}

func (o FirewallCountryOutput) ToFirewallCountryOutput() FirewallCountryOutput {
	return o
}

func (o FirewallCountryOutput) ToFirewallCountryOutputWithContext(ctx context.Context) FirewallCountryOutput {
	return o
}

func (o FirewallCountryOutput) DynamicSortSubtable() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *FirewallCountry) pulumi.StringPtrOutput { return v.DynamicSortSubtable }).(pulumi.StringPtrOutput)
}

func (o FirewallCountryOutput) Fosid() pulumi.IntOutput {
	return o.ApplyT(func(v *FirewallCountry) pulumi.IntOutput { return v.Fosid }).(pulumi.IntOutput)
}

func (o FirewallCountryOutput) GetAllTables() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *FirewallCountry) pulumi.StringPtrOutput { return v.GetAllTables }).(pulumi.StringPtrOutput)
}

func (o FirewallCountryOutput) Name() pulumi.StringOutput {
	return o.ApplyT(func(v *FirewallCountry) pulumi.StringOutput { return v.Name }).(pulumi.StringOutput)
}

func (o FirewallCountryOutput) Regions() FirewallCountryRegionArrayOutput {
	return o.ApplyT(func(v *FirewallCountry) FirewallCountryRegionArrayOutput { return v.Regions }).(FirewallCountryRegionArrayOutput)
}

func (o FirewallCountryOutput) Vdomparam() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *FirewallCountry) pulumi.StringPtrOutput { return v.Vdomparam }).(pulumi.StringPtrOutput)
}

type FirewallCountryArrayOutput struct{ *pulumi.OutputState }

func (FirewallCountryArrayOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*[]*FirewallCountry)(nil)).Elem()
}

func (o FirewallCountryArrayOutput) ToFirewallCountryArrayOutput() FirewallCountryArrayOutput {
	return o
}

func (o FirewallCountryArrayOutput) ToFirewallCountryArrayOutputWithContext(ctx context.Context) FirewallCountryArrayOutput {
	return o
}

func (o FirewallCountryArrayOutput) Index(i pulumi.IntInput) FirewallCountryOutput {
	return pulumi.All(o, i).ApplyT(func(vs []interface{}) *FirewallCountry {
		return vs[0].([]*FirewallCountry)[vs[1].(int)]
	}).(FirewallCountryOutput)
}

type FirewallCountryMapOutput struct{ *pulumi.OutputState }

func (FirewallCountryMapOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*map[string]*FirewallCountry)(nil)).Elem()
}

func (o FirewallCountryMapOutput) ToFirewallCountryMapOutput() FirewallCountryMapOutput {
	return o
}

func (o FirewallCountryMapOutput) ToFirewallCountryMapOutputWithContext(ctx context.Context) FirewallCountryMapOutput {
	return o
}

func (o FirewallCountryMapOutput) MapIndex(k pulumi.StringInput) FirewallCountryOutput {
	return pulumi.All(o, k).ApplyT(func(vs []interface{}) *FirewallCountry {
		return vs[0].(map[string]*FirewallCountry)[vs[1].(string)]
	}).(FirewallCountryOutput)
}

func init() {
	pulumi.RegisterInputType(reflect.TypeOf((*FirewallCountryInput)(nil)).Elem(), &FirewallCountry{})
	pulumi.RegisterInputType(reflect.TypeOf((*FirewallCountryArrayInput)(nil)).Elem(), FirewallCountryArray{})
	pulumi.RegisterInputType(reflect.TypeOf((*FirewallCountryMapInput)(nil)).Elem(), FirewallCountryMap{})
	pulumi.RegisterOutputType(FirewallCountryOutput{})
	pulumi.RegisterOutputType(FirewallCountryArrayOutput{})
	pulumi.RegisterOutputType(FirewallCountryMapOutput{})
}
