// *** WARNING: this file was generated by the Pulumi Terraform Bridge (tfgen) Tool. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

package fortios

import (
	"context"
	"reflect"

	"github.com/pulumi/pulumi/sdk/v3/go/pulumi"
)

// Global PTP settings. Applies to FortiOS Version `>= 6.4.2`.
//
// ## Import
//
// SwitchControllerPtp Settings can be imported using any of these accepted formats
//
// ```sh
//  $ pulumi import fortios:index/switchControllerPtpSettings:SwitchControllerPtpSettings labelname SwitchControllerPtpSettings
// ```
//
//  If you do not want to import arguments of block$ export "FORTIOS_IMPORT_TABLE"="false"
//
// ```sh
//  $ pulumi import fortios:index/switchControllerPtpSettings:SwitchControllerPtpSettings labelname SwitchControllerPtpSettings
// ```
//
//  $ unset "FORTIOS_IMPORT_TABLE"
type SwitchControllerPtpSettings struct {
	pulumi.CustomResourceState

	// Enable/disable PTP mode. Valid values: `disable`, `transparent-e2e`, `transparent-p2p`.
	Mode pulumi.StringOutput `pulumi:"mode"`
	// Specifies the vdom to which the resource will be applied when the FortiGate unit is running in VDOM mode. Only one vdom can be specified. If you want to inherit the vdom configuration of the provider, please do not set this parameter.
	Vdomparam pulumi.StringPtrOutput `pulumi:"vdomparam"`
}

// NewSwitchControllerPtpSettings registers a new resource with the given unique name, arguments, and options.
func NewSwitchControllerPtpSettings(ctx *pulumi.Context,
	name string, args *SwitchControllerPtpSettingsArgs, opts ...pulumi.ResourceOption) (*SwitchControllerPtpSettings, error) {
	if args == nil {
		args = &SwitchControllerPtpSettingsArgs{}
	}

	opts = pkgResourceDefaultOpts(opts)
	var resource SwitchControllerPtpSettings
	err := ctx.RegisterResource("fortios:index/switchControllerPtpSettings:SwitchControllerPtpSettings", name, args, &resource, opts...)
	if err != nil {
		return nil, err
	}
	return &resource, nil
}

// GetSwitchControllerPtpSettings gets an existing SwitchControllerPtpSettings resource's state with the given name, ID, and optional
// state properties that are used to uniquely qualify the lookup (nil if not required).
func GetSwitchControllerPtpSettings(ctx *pulumi.Context,
	name string, id pulumi.IDInput, state *SwitchControllerPtpSettingsState, opts ...pulumi.ResourceOption) (*SwitchControllerPtpSettings, error) {
	var resource SwitchControllerPtpSettings
	err := ctx.ReadResource("fortios:index/switchControllerPtpSettings:SwitchControllerPtpSettings", name, id, state, &resource, opts...)
	if err != nil {
		return nil, err
	}
	return &resource, nil
}

// Input properties used for looking up and filtering SwitchControllerPtpSettings resources.
type switchControllerPtpSettingsState struct {
	// Enable/disable PTP mode. Valid values: `disable`, `transparent-e2e`, `transparent-p2p`.
	Mode *string `pulumi:"mode"`
	// Specifies the vdom to which the resource will be applied when the FortiGate unit is running in VDOM mode. Only one vdom can be specified. If you want to inherit the vdom configuration of the provider, please do not set this parameter.
	Vdomparam *string `pulumi:"vdomparam"`
}

type SwitchControllerPtpSettingsState struct {
	// Enable/disable PTP mode. Valid values: `disable`, `transparent-e2e`, `transparent-p2p`.
	Mode pulumi.StringPtrInput
	// Specifies the vdom to which the resource will be applied when the FortiGate unit is running in VDOM mode. Only one vdom can be specified. If you want to inherit the vdom configuration of the provider, please do not set this parameter.
	Vdomparam pulumi.StringPtrInput
}

func (SwitchControllerPtpSettingsState) ElementType() reflect.Type {
	return reflect.TypeOf((*switchControllerPtpSettingsState)(nil)).Elem()
}

type switchControllerPtpSettingsArgs struct {
	// Enable/disable PTP mode. Valid values: `disable`, `transparent-e2e`, `transparent-p2p`.
	Mode *string `pulumi:"mode"`
	// Specifies the vdom to which the resource will be applied when the FortiGate unit is running in VDOM mode. Only one vdom can be specified. If you want to inherit the vdom configuration of the provider, please do not set this parameter.
	Vdomparam *string `pulumi:"vdomparam"`
}

// The set of arguments for constructing a SwitchControllerPtpSettings resource.
type SwitchControllerPtpSettingsArgs struct {
	// Enable/disable PTP mode. Valid values: `disable`, `transparent-e2e`, `transparent-p2p`.
	Mode pulumi.StringPtrInput
	// Specifies the vdom to which the resource will be applied when the FortiGate unit is running in VDOM mode. Only one vdom can be specified. If you want to inherit the vdom configuration of the provider, please do not set this parameter.
	Vdomparam pulumi.StringPtrInput
}

func (SwitchControllerPtpSettingsArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*switchControllerPtpSettingsArgs)(nil)).Elem()
}

type SwitchControllerPtpSettingsInput interface {
	pulumi.Input

	ToSwitchControllerPtpSettingsOutput() SwitchControllerPtpSettingsOutput
	ToSwitchControllerPtpSettingsOutputWithContext(ctx context.Context) SwitchControllerPtpSettingsOutput
}

func (*SwitchControllerPtpSettings) ElementType() reflect.Type {
	return reflect.TypeOf((**SwitchControllerPtpSettings)(nil)).Elem()
}

func (i *SwitchControllerPtpSettings) ToSwitchControllerPtpSettingsOutput() SwitchControllerPtpSettingsOutput {
	return i.ToSwitchControllerPtpSettingsOutputWithContext(context.Background())
}

func (i *SwitchControllerPtpSettings) ToSwitchControllerPtpSettingsOutputWithContext(ctx context.Context) SwitchControllerPtpSettingsOutput {
	return pulumi.ToOutputWithContext(ctx, i).(SwitchControllerPtpSettingsOutput)
}

// SwitchControllerPtpSettingsArrayInput is an input type that accepts SwitchControllerPtpSettingsArray and SwitchControllerPtpSettingsArrayOutput values.
// You can construct a concrete instance of `SwitchControllerPtpSettingsArrayInput` via:
//
//          SwitchControllerPtpSettingsArray{ SwitchControllerPtpSettingsArgs{...} }
type SwitchControllerPtpSettingsArrayInput interface {
	pulumi.Input

	ToSwitchControllerPtpSettingsArrayOutput() SwitchControllerPtpSettingsArrayOutput
	ToSwitchControllerPtpSettingsArrayOutputWithContext(context.Context) SwitchControllerPtpSettingsArrayOutput
}

type SwitchControllerPtpSettingsArray []SwitchControllerPtpSettingsInput

func (SwitchControllerPtpSettingsArray) ElementType() reflect.Type {
	return reflect.TypeOf((*[]*SwitchControllerPtpSettings)(nil)).Elem()
}

func (i SwitchControllerPtpSettingsArray) ToSwitchControllerPtpSettingsArrayOutput() SwitchControllerPtpSettingsArrayOutput {
	return i.ToSwitchControllerPtpSettingsArrayOutputWithContext(context.Background())
}

func (i SwitchControllerPtpSettingsArray) ToSwitchControllerPtpSettingsArrayOutputWithContext(ctx context.Context) SwitchControllerPtpSettingsArrayOutput {
	return pulumi.ToOutputWithContext(ctx, i).(SwitchControllerPtpSettingsArrayOutput)
}

// SwitchControllerPtpSettingsMapInput is an input type that accepts SwitchControllerPtpSettingsMap and SwitchControllerPtpSettingsMapOutput values.
// You can construct a concrete instance of `SwitchControllerPtpSettingsMapInput` via:
//
//          SwitchControllerPtpSettingsMap{ "key": SwitchControllerPtpSettingsArgs{...} }
type SwitchControllerPtpSettingsMapInput interface {
	pulumi.Input

	ToSwitchControllerPtpSettingsMapOutput() SwitchControllerPtpSettingsMapOutput
	ToSwitchControllerPtpSettingsMapOutputWithContext(context.Context) SwitchControllerPtpSettingsMapOutput
}

type SwitchControllerPtpSettingsMap map[string]SwitchControllerPtpSettingsInput

func (SwitchControllerPtpSettingsMap) ElementType() reflect.Type {
	return reflect.TypeOf((*map[string]*SwitchControllerPtpSettings)(nil)).Elem()
}

func (i SwitchControllerPtpSettingsMap) ToSwitchControllerPtpSettingsMapOutput() SwitchControllerPtpSettingsMapOutput {
	return i.ToSwitchControllerPtpSettingsMapOutputWithContext(context.Background())
}

func (i SwitchControllerPtpSettingsMap) ToSwitchControllerPtpSettingsMapOutputWithContext(ctx context.Context) SwitchControllerPtpSettingsMapOutput {
	return pulumi.ToOutputWithContext(ctx, i).(SwitchControllerPtpSettingsMapOutput)
}

type SwitchControllerPtpSettingsOutput struct{ *pulumi.OutputState }

func (SwitchControllerPtpSettingsOutput) ElementType() reflect.Type {
	return reflect.TypeOf((**SwitchControllerPtpSettings)(nil)).Elem()
}

func (o SwitchControllerPtpSettingsOutput) ToSwitchControllerPtpSettingsOutput() SwitchControllerPtpSettingsOutput {
	return o
}

func (o SwitchControllerPtpSettingsOutput) ToSwitchControllerPtpSettingsOutputWithContext(ctx context.Context) SwitchControllerPtpSettingsOutput {
	return o
}

type SwitchControllerPtpSettingsArrayOutput struct{ *pulumi.OutputState }

func (SwitchControllerPtpSettingsArrayOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*[]*SwitchControllerPtpSettings)(nil)).Elem()
}

func (o SwitchControllerPtpSettingsArrayOutput) ToSwitchControllerPtpSettingsArrayOutput() SwitchControllerPtpSettingsArrayOutput {
	return o
}

func (o SwitchControllerPtpSettingsArrayOutput) ToSwitchControllerPtpSettingsArrayOutputWithContext(ctx context.Context) SwitchControllerPtpSettingsArrayOutput {
	return o
}

func (o SwitchControllerPtpSettingsArrayOutput) Index(i pulumi.IntInput) SwitchControllerPtpSettingsOutput {
	return pulumi.All(o, i).ApplyT(func(vs []interface{}) *SwitchControllerPtpSettings {
		return vs[0].([]*SwitchControllerPtpSettings)[vs[1].(int)]
	}).(SwitchControllerPtpSettingsOutput)
}

type SwitchControllerPtpSettingsMapOutput struct{ *pulumi.OutputState }

func (SwitchControllerPtpSettingsMapOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*map[string]*SwitchControllerPtpSettings)(nil)).Elem()
}

func (o SwitchControllerPtpSettingsMapOutput) ToSwitchControllerPtpSettingsMapOutput() SwitchControllerPtpSettingsMapOutput {
	return o
}

func (o SwitchControllerPtpSettingsMapOutput) ToSwitchControllerPtpSettingsMapOutputWithContext(ctx context.Context) SwitchControllerPtpSettingsMapOutput {
	return o
}

func (o SwitchControllerPtpSettingsMapOutput) MapIndex(k pulumi.StringInput) SwitchControllerPtpSettingsOutput {
	return pulumi.All(o, k).ApplyT(func(vs []interface{}) *SwitchControllerPtpSettings {
		return vs[0].(map[string]*SwitchControllerPtpSettings)[vs[1].(string)]
	}).(SwitchControllerPtpSettingsOutput)
}

func init() {
	pulumi.RegisterInputType(reflect.TypeOf((*SwitchControllerPtpSettingsInput)(nil)).Elem(), &SwitchControllerPtpSettings{})
	pulumi.RegisterInputType(reflect.TypeOf((*SwitchControllerPtpSettingsArrayInput)(nil)).Elem(), SwitchControllerPtpSettingsArray{})
	pulumi.RegisterInputType(reflect.TypeOf((*SwitchControllerPtpSettingsMapInput)(nil)).Elem(), SwitchControllerPtpSettingsMap{})
	pulumi.RegisterOutputType(SwitchControllerPtpSettingsOutput{})
	pulumi.RegisterOutputType(SwitchControllerPtpSettingsArrayOutput{})
	pulumi.RegisterOutputType(SwitchControllerPtpSettingsMapOutput{})
}
