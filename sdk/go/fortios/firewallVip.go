// *** WARNING: this file was generated by the Pulumi Terraform Bridge (tfgen) Tool. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

package fortios

import (
	"context"
	"reflect"

	"github.com/pulumi/pulumi/sdk/v3/go/pulumi"
)

// Configure virtual IP for IPv4.
//
// ## Example Usage
//
// ```go
// package main
//
// import (
// 	"github.com/pulumi/pulumi-fortios/sdk/go/fortios"
// 	"github.com/pulumi/pulumi/sdk/v3/go/pulumi"
// )
//
// func main() {
// 	pulumi.Run(func(ctx *pulumi.Context) error {
// 		_, err := fortios.NewFirewallVip(ctx, "trname", &fortios.FirewallVipArgs{
// 			ArpReply:                 pulumi.String("enable"),
// 			Color:                    pulumi.Int(0),
// 			DnsMappingTtl:            pulumi.Int(0),
// 			Extintf:                  pulumi.String("any"),
// 			Extip:                    pulumi.String("1.0.0.1-1.0.0.2"),
// 			Extport:                  pulumi.String("0-65535"),
// 			Fosid:                    pulumi.Int(0),
// 			HttpCookieAge:            pulumi.Int(60),
// 			HttpCookieDomainFromHost: pulumi.String("disable"),
// 			HttpCookieGeneration:     pulumi.Int(0),
// 			HttpCookieShare:          pulumi.String("same-ip"),
// 			HttpIpHeader:             pulumi.String("disable"),
// 			HttpMultiplex:            pulumi.String("disable"),
// 			HttpsCookieSecure:        pulumi.String("disable"),
// 			LdbMethod:                pulumi.String("static"),
// 			Mappedips: FirewallVipMappedipArray{
// 				&FirewallVipMappedipArgs{
// 					Range: pulumi.String("3.0.0.0-3.0.0.1"),
// 				},
// 			},
// 			Mappedport:                   pulumi.String("0-65535"),
// 			MaxEmbryonicConnections:      pulumi.Int(1000),
// 			NatSourceVip:                 pulumi.String("disable"),
// 			OutlookWebAccess:             pulumi.String("disable"),
// 			Persistence:                  pulumi.String("none"),
// 			Portforward:                  pulumi.String("disable"),
// 			PortmappingType:              pulumi.String("1-to-1"),
// 			Protocol:                     pulumi.String("tcp"),
// 			SslAlgorithm:                 pulumi.String("high"),
// 			SslClientFallback:            pulumi.String("enable"),
// 			SslClientRenegotiation:       pulumi.String("secure"),
// 			SslClientSessionStateMax:     pulumi.Int(1000),
// 			SslClientSessionStateTimeout: pulumi.Int(30),
// 			SslClientSessionStateType:    pulumi.String("both"),
// 			SslDhBits:                    pulumi.String("2048"),
// 			SslHpkp:                      pulumi.String("disable"),
// 			SslHpkpAge:                   pulumi.Int(5184000),
// 			SslHpkpIncludeSubdomains:     pulumi.String("disable"),
// 			SslHsts:                      pulumi.String("disable"),
// 			SslHstsAge:                   pulumi.Int(5184000),
// 			SslHstsIncludeSubdomains:     pulumi.String("disable"),
// 			SslHttpLocationConversion:    pulumi.String("disable"),
// 			SslHttpMatchHost:             pulumi.String("enable"),
// 			SslMaxVersion:                pulumi.String("tls-1.2"),
// 			SslMinVersion:                pulumi.String("tls-1.1"),
// 			SslMode:                      pulumi.String("half"),
// 			SslPfs:                       pulumi.String("require"),
// 			SslSendEmptyFrags:            pulumi.String("enable"),
// 			SslServerAlgorithm:           pulumi.String("client"),
// 			SslServerMaxVersion:          pulumi.String("client"),
// 			SslServerMinVersion:          pulumi.String("client"),
// 			SslServerSessionStateMax:     pulumi.Int(100),
// 			SslServerSessionStateTimeout: pulumi.Int(60),
// 			SslServerSessionStateType:    pulumi.String("both"),
// 			Type:                         pulumi.String("static-nat"),
// 			WeblogicServer:               pulumi.String("disable"),
// 			WebsphereServer:              pulumi.String("disable"),
// 		})
// 		if err != nil {
// 			return err
// 		}
// 		return nil
// 	})
// }
// ```
//
// ## Import
//
// Firewall Vip can be imported using any of these accepted formats
//
// ```sh
//  $ pulumi import fortios:index/firewallVip:FirewallVip labelname {{name}}
// ```
//
//  If you do not want to import arguments of block$ export "FORTIOS_IMPORT_TABLE"="false"
//
// ```sh
//  $ pulumi import fortios:index/firewallVip:FirewallVip labelname {{name}}
// ```
//
//  $ unset "FORTIOS_IMPORT_TABLE"
type FirewallVip struct {
	pulumi.CustomResourceState

	// Enable/disable adding NAT46 route. Valid values: `disable`, `enable`.
	AddNat46Route pulumi.StringOutput `pulumi:"addNat46Route"`
	// Enable to respond to ARP requests for this virtual IP address. Enabled by default. Valid values: `disable`, `enable`.
	ArpReply pulumi.StringOutput `pulumi:"arpReply"`
	// Color of icon on the GUI.
	Color pulumi.IntOutput `pulumi:"color"`
	// Comment.
	Comment pulumi.StringPtrOutput `pulumi:"comment"`
	// DNS mapping TTL (Set to zero to use TTL in DNS response, default = 0).
	DnsMappingTtl pulumi.IntOutput `pulumi:"dnsMappingTtl"`
	// true or false, set this parameter to true when using dynamic forEach + toset to configure and sort sub-tables, please do not set this parameter when configuring static sub-tables.
	DynamicSortSubtable pulumi.StringPtrOutput `pulumi:"dynamicSortSubtable"`
	// External FQDN address name. The structure of `extaddr` block is documented below.
	Extaddrs FirewallVipExtaddrArrayOutput `pulumi:"extaddrs"`
	// Interface connected to the source network that receives the packets that will be forwarded to the destination network.
	Extintf pulumi.StringOutput `pulumi:"extintf"`
	// IP address or address range on the external interface that you want to map to an address or address range on the destination network.
	Extip pulumi.StringOutput `pulumi:"extip"`
	// Incoming port number range that you want to map to a port number range on the destination network.
	Extport pulumi.StringOutput `pulumi:"extport"`
	// Custom defined ID.
	Fosid pulumi.IntOutput `pulumi:"fosid"`
	// Enable to have the VIP send gratuitous ARPs. 0=disabled. Set from 5 up to 8640000 seconds to enable.
	GratuitousArpInterval pulumi.IntOutput `pulumi:"gratuitousArpInterval"`
	// Time in minutes that client web browsers should keep a cookie. Default is 60 seconds. 0 = no time limit.
	HttpCookieAge pulumi.IntOutput `pulumi:"httpCookieAge"`
	// Domain that HTTP cookie persistence should apply to.
	HttpCookieDomain pulumi.StringOutput `pulumi:"httpCookieDomain"`
	// Enable/disable use of HTTP cookie domain from host field in HTTP. Valid values: `disable`, `enable`.
	HttpCookieDomainFromHost pulumi.StringOutput `pulumi:"httpCookieDomainFromHost"`
	// Generation of HTTP cookie to be accepted. Changing invalidates all existing cookies.
	HttpCookieGeneration pulumi.IntOutput `pulumi:"httpCookieGeneration"`
	// Limit HTTP cookie persistence to the specified path.
	HttpCookiePath pulumi.StringOutput `pulumi:"httpCookiePath"`
	// Control sharing of cookies across virtual servers. same-ip means a cookie from one virtual server can be used by another. Disable stops cookie sharing. Valid values: `disable`, `same-ip`.
	HttpCookieShare pulumi.StringOutput `pulumi:"httpCookieShare"`
	// For HTTP multiplexing, enable to add the original client IP address in the XForwarded-For HTTP header. Valid values: `enable`, `disable`.
	HttpIpHeader pulumi.StringOutput `pulumi:"httpIpHeader"`
	// For HTTP multiplexing, enter a custom HTTPS header name. The original client IP address is added to this header. If empty, X-Forwarded-For is used.
	HttpIpHeaderName pulumi.StringOutput `pulumi:"httpIpHeaderName"`
	// Enable/disable HTTP multiplexing. Valid values: `enable`, `disable`.
	HttpMultiplex pulumi.StringOutput `pulumi:"httpMultiplex"`
	// Enable/disable redirection of HTTP to HTTPS Valid values: `enable`, `disable`.
	HttpRedirect pulumi.StringOutput `pulumi:"httpRedirect"`
	// Enable/disable verification that inserted HTTPS cookies are secure. Valid values: `disable`, `enable`.
	HttpsCookieSecure pulumi.StringOutput `pulumi:"httpsCookieSecure"`
	// Start-mapped-IPv6-address [-end mapped-IPv6-address].
	Ipv6Mappedip pulumi.StringOutput `pulumi:"ipv6Mappedip"`
	// IPv6 port number range on the destination network to which the external port number range is mapped.
	Ipv6Mappedport pulumi.StringOutput `pulumi:"ipv6Mappedport"`
	// Method used to distribute sessions to real servers. Valid values: `static`, `round-robin`, `weighted`, `least-session`, `least-rtt`, `first-alive`, `http-host`.
	LdbMethod pulumi.StringOutput `pulumi:"ldbMethod"`
	// Mapped FQDN address name.
	MappedAddr pulumi.StringOutput `pulumi:"mappedAddr"`
	// IP address or address range on the destination network to which the external IP address is mapped. The structure of `mappedip` block is documented below.
	Mappedips FirewallVipMappedipArrayOutput `pulumi:"mappedips"`
	// Port number range on the destination network to which the external port number range is mapped.
	Mappedport pulumi.StringOutput `pulumi:"mappedport"`
	// Maximum number of incomplete connections.
	MaxEmbryonicConnections pulumi.IntOutput `pulumi:"maxEmbryonicConnections"`
	// Name of the health check monitor to use when polling to determine a virtual server's connectivity status.
	Monitors FirewallVipMonitorArrayOutput `pulumi:"monitors"`
	// Health monitor name.
	Name pulumi.StringOutput `pulumi:"name"`
	// Enable/disable NAT44. Valid values: `disable`, `enable`.
	Nat44 pulumi.StringOutput `pulumi:"nat44"`
	// Enable/disable NAT46. Valid values: `disable`, `enable`.
	Nat46 pulumi.StringOutput `pulumi:"nat46"`
	// Enable/disable forcing the source NAT mapped IP to the external IP for all traffic. Valid values: `disable`, `enable`.
	NatSourceVip pulumi.StringOutput `pulumi:"natSourceVip"`
	// Enable to add the Front-End-Https header for Microsoft Outlook Web Access. Valid values: `disable`, `enable`.
	OutlookWebAccess pulumi.StringOutput `pulumi:"outlookWebAccess"`
	// Configure how to make sure that clients connect to the same server every time they make a request that is part of the same session. Valid values: `none`, `http-cookie`, `ssl-session-id`.
	Persistence pulumi.StringOutput `pulumi:"persistence"`
	// Enable/disable port forwarding. Valid values: `disable`, `enable`.
	Portforward pulumi.StringOutput `pulumi:"portforward"`
	// Port mapping type. Valid values: `1-to-1`, `m-to-n`.
	PortmappingType pulumi.StringOutput `pulumi:"portmappingType"`
	// Protocol to use when forwarding packets. Valid values: `tcp`, `udp`, `sctp`, `icmp`.
	Protocol pulumi.StringOutput `pulumi:"protocol"`
	// Select the real servers that this server load balancing VIP will distribute traffic to. The structure of `realservers` block is documented below.
	Realservers FirewallVipRealserverArrayOutput `pulumi:"realservers"`
	// Protocol to be load balanced by the virtual server (also called the server load balance virtual IP). Valid values: `http`, `https`, `imaps`, `pop3s`, `smtps`, `ssl`, `tcp`, `udp`, `ip`.
	ServerType pulumi.StringOutput `pulumi:"serverType"`
	// Service name. The structure of `service` block is documented below.
	Services FirewallVipServiceArrayOutput `pulumi:"services"`
	// Source address filter. Each address must be either an IP/subnet (x.x.x.x/n) or a range (x.x.x.x-y.y.y.y). Separate addresses with spaces. The structure of `srcFilter` block is documented below.
	SrcFilters FirewallVipSrcFilterArrayOutput `pulumi:"srcFilters"`
	// Interfaces to which the VIP applies. Separate the names with spaces. The structure of `srcintfFilter` block is documented below.
	SrcintfFilters FirewallVipSrcintfFilterArrayOutput `pulumi:"srcintfFilters"`
	// Enable/disable FFDHE cipher suite for SSL key exchange. Valid values: `enable`, `disable`.
	SslAcceptFfdheGroups pulumi.StringOutput `pulumi:"sslAcceptFfdheGroups"`
	// Permitted encryption algorithms for SSL sessions according to encryption strength. Valid values: `high`, `medium`, `low`, `custom`.
	SslAlgorithm pulumi.StringOutput `pulumi:"sslAlgorithm"`
	// The name of the SSL certificate to use for SSL acceleration.
	SslCertificate pulumi.StringOutput `pulumi:"sslCertificate"`
	// SSL/TLS cipher suites acceptable from a client, ordered by priority. The structure of `sslCipherSuites` block is documented below.
	SslCipherSuites FirewallVipSslCipherSuiteArrayOutput `pulumi:"sslCipherSuites"`
	// Enable/disable support for preventing Downgrade Attacks on client connections (RFC 7507). Valid values: `disable`, `enable`.
	SslClientFallback pulumi.StringOutput `pulumi:"sslClientFallback"`
	// Maximum length of data in MB before triggering a client rekey (0 = disable).
	SslClientRekeyCount pulumi.IntOutput `pulumi:"sslClientRekeyCount"`
	// Allow, deny, or require secure renegotiation of client sessions to comply with RFC 5746. Valid values: `allow`, `deny`, `secure`.
	SslClientRenegotiation pulumi.StringOutput `pulumi:"sslClientRenegotiation"`
	// Maximum number of client to FortiGate SSL session states to keep.
	SslClientSessionStateMax pulumi.IntOutput `pulumi:"sslClientSessionStateMax"`
	// Number of minutes to keep client to FortiGate SSL session state.
	SslClientSessionStateTimeout pulumi.IntOutput `pulumi:"sslClientSessionStateTimeout"`
	// How to expire SSL sessions for the segment of the SSL connection between the client and the FortiGate. Valid values: `disable`, `time`, `count`, `both`.
	SslClientSessionStateType pulumi.StringOutput `pulumi:"sslClientSessionStateType"`
	// Number of bits to use in the Diffie-Hellman exchange for RSA encryption of SSL sessions. Valid values: `768`, `1024`, `1536`, `2048`, `3072`, `4096`.
	SslDhBits pulumi.StringOutput `pulumi:"sslDhBits"`
	// Enable/disable including HPKP header in response. Valid values: `disable`, `enable`, `report-only`.
	SslHpkp pulumi.StringOutput `pulumi:"sslHpkp"`
	// Number of seconds the client should honour the HPKP setting.
	SslHpkpAge pulumi.IntOutput `pulumi:"sslHpkpAge"`
	// Certificate to generate backup HPKP pin from.
	SslHpkpBackup pulumi.StringOutput `pulumi:"sslHpkpBackup"`
	// Indicate that HPKP header applies to all subdomains. Valid values: `disable`, `enable`.
	SslHpkpIncludeSubdomains pulumi.StringOutput `pulumi:"sslHpkpIncludeSubdomains"`
	// Certificate to generate primary HPKP pin from.
	SslHpkpPrimary pulumi.StringOutput `pulumi:"sslHpkpPrimary"`
	// URL to report HPKP violations to.
	SslHpkpReportUri pulumi.StringPtrOutput `pulumi:"sslHpkpReportUri"`
	// Enable/disable including HSTS header in response. Valid values: `disable`, `enable`.
	SslHsts pulumi.StringOutput `pulumi:"sslHsts"`
	// Number of seconds the client should honour the HSTS setting.
	SslHstsAge pulumi.IntOutput `pulumi:"sslHstsAge"`
	// Indicate that HSTS header applies to all subdomains. Valid values: `disable`, `enable`.
	SslHstsIncludeSubdomains pulumi.StringOutput `pulumi:"sslHstsIncludeSubdomains"`
	// Enable to replace HTTP with HTTPS in the reply's Location HTTP header field. Valid values: `enable`, `disable`.
	SslHttpLocationConversion pulumi.StringOutput `pulumi:"sslHttpLocationConversion"`
	// Enable/disable HTTP host matching for location conversion. Valid values: `enable`, `disable`.
	SslHttpMatchHost pulumi.StringOutput `pulumi:"sslHttpMatchHost"`
	// Highest SSL/TLS version acceptable from a client.
	SslMaxVersion pulumi.StringOutput `pulumi:"sslMaxVersion"`
	// Lowest SSL/TLS version acceptable from a client.
	SslMinVersion pulumi.StringOutput `pulumi:"sslMinVersion"`
	// Apply SSL offloading between the client and the FortiGate (half) or from the client to the FortiGate and from the FortiGate to the server (full). Valid values: `half`, `full`.
	SslMode pulumi.StringOutput `pulumi:"sslMode"`
	// Select the cipher suites that can be used for SSL perfect forward secrecy (PFS). Applies to both client and server sessions. Valid values: `require`, `deny`, `allow`.
	SslPfs pulumi.StringOutput `pulumi:"sslPfs"`
	// Enable/disable sending empty fragments to avoid CBC IV attacks (SSL 3.0 & TLS 1.0 only). May need to be disabled for compatibility with older systems. Valid values: `enable`, `disable`.
	SslSendEmptyFrags pulumi.StringOutput `pulumi:"sslSendEmptyFrags"`
	// Permitted encryption algorithms for the server side of SSL full mode sessions according to encryption strength. Valid values: `high`, `medium`, `low`, `custom`, `client`.
	SslServerAlgorithm pulumi.StringOutput `pulumi:"sslServerAlgorithm"`
	// SSL/TLS cipher suites to offer to a server, ordered by priority. The structure of `sslServerCipherSuites` block is documented below.
	SslServerCipherSuites FirewallVipSslServerCipherSuiteArrayOutput `pulumi:"sslServerCipherSuites"`
	// Highest SSL/TLS version acceptable from a server. Use the client setting by default.
	SslServerMaxVersion pulumi.StringOutput `pulumi:"sslServerMaxVersion"`
	// Lowest SSL/TLS version acceptable from a server. Use the client setting by default.
	SslServerMinVersion pulumi.StringOutput `pulumi:"sslServerMinVersion"`
	// Maximum number of FortiGate to Server SSL session states to keep.
	SslServerSessionStateMax pulumi.IntOutput `pulumi:"sslServerSessionStateMax"`
	// Number of minutes to keep FortiGate to Server SSL session state.
	SslServerSessionStateTimeout pulumi.IntOutput `pulumi:"sslServerSessionStateTimeout"`
	// How to expire SSL sessions for the segment of the SSL connection between the server and the FortiGate. Valid values: `disable`, `time`, `count`, `both`.
	SslServerSessionStateType pulumi.StringOutput `pulumi:"sslServerSessionStateType"`
	// Set the status of the real server to active so that it can accept traffic, or on standby or disabled so no traffic is sent. Valid values: `active`, `standby`, `disable`.
	Status pulumi.StringOutput `pulumi:"status"`
	// Type of address. Valid values: `ip`, `address`.
	Type pulumi.StringOutput `pulumi:"type"`
	// Universally Unique Identifier (UUID; automatically assigned but can be manually reset).
	Uuid pulumi.StringOutput `pulumi:"uuid"`
	// Specifies the vdom to which the resource will be applied when the FortiGate unit is running in VDOM mode. Only one vdom can be specified. If you want to inherit the vdom configuration of the provider, please do not set this parameter.
	Vdomparam pulumi.StringPtrOutput `pulumi:"vdomparam"`
	// Enable to add an HTTP header to indicate SSL offloading for a WebLogic server. Valid values: `disable`, `enable`.
	WeblogicServer pulumi.StringOutput `pulumi:"weblogicServer"`
	// Enable to add an HTTP header to indicate SSL offloading for a WebSphere server. Valid values: `disable`, `enable`.
	WebsphereServer pulumi.StringOutput `pulumi:"websphereServer"`
}

// NewFirewallVip registers a new resource with the given unique name, arguments, and options.
func NewFirewallVip(ctx *pulumi.Context,
	name string, args *FirewallVipArgs, opts ...pulumi.ResourceOption) (*FirewallVip, error) {
	if args == nil {
		args = &FirewallVipArgs{}
	}

	opts = pkgResourceDefaultOpts(opts)
	var resource FirewallVip
	err := ctx.RegisterResource("fortios:index/firewallVip:FirewallVip", name, args, &resource, opts...)
	if err != nil {
		return nil, err
	}
	return &resource, nil
}

// GetFirewallVip gets an existing FirewallVip resource's state with the given name, ID, and optional
// state properties that are used to uniquely qualify the lookup (nil if not required).
func GetFirewallVip(ctx *pulumi.Context,
	name string, id pulumi.IDInput, state *FirewallVipState, opts ...pulumi.ResourceOption) (*FirewallVip, error) {
	var resource FirewallVip
	err := ctx.ReadResource("fortios:index/firewallVip:FirewallVip", name, id, state, &resource, opts...)
	if err != nil {
		return nil, err
	}
	return &resource, nil
}

// Input properties used for looking up and filtering FirewallVip resources.
type firewallVipState struct {
	// Enable/disable adding NAT46 route. Valid values: `disable`, `enable`.
	AddNat46Route *string `pulumi:"addNat46Route"`
	// Enable to respond to ARP requests for this virtual IP address. Enabled by default. Valid values: `disable`, `enable`.
	ArpReply *string `pulumi:"arpReply"`
	// Color of icon on the GUI.
	Color *int `pulumi:"color"`
	// Comment.
	Comment *string `pulumi:"comment"`
	// DNS mapping TTL (Set to zero to use TTL in DNS response, default = 0).
	DnsMappingTtl *int `pulumi:"dnsMappingTtl"`
	// true or false, set this parameter to true when using dynamic forEach + toset to configure and sort sub-tables, please do not set this parameter when configuring static sub-tables.
	DynamicSortSubtable *string `pulumi:"dynamicSortSubtable"`
	// External FQDN address name. The structure of `extaddr` block is documented below.
	Extaddrs []FirewallVipExtaddr `pulumi:"extaddrs"`
	// Interface connected to the source network that receives the packets that will be forwarded to the destination network.
	Extintf *string `pulumi:"extintf"`
	// IP address or address range on the external interface that you want to map to an address or address range on the destination network.
	Extip *string `pulumi:"extip"`
	// Incoming port number range that you want to map to a port number range on the destination network.
	Extport *string `pulumi:"extport"`
	// Custom defined ID.
	Fosid *int `pulumi:"fosid"`
	// Enable to have the VIP send gratuitous ARPs. 0=disabled. Set from 5 up to 8640000 seconds to enable.
	GratuitousArpInterval *int `pulumi:"gratuitousArpInterval"`
	// Time in minutes that client web browsers should keep a cookie. Default is 60 seconds. 0 = no time limit.
	HttpCookieAge *int `pulumi:"httpCookieAge"`
	// Domain that HTTP cookie persistence should apply to.
	HttpCookieDomain *string `pulumi:"httpCookieDomain"`
	// Enable/disable use of HTTP cookie domain from host field in HTTP. Valid values: `disable`, `enable`.
	HttpCookieDomainFromHost *string `pulumi:"httpCookieDomainFromHost"`
	// Generation of HTTP cookie to be accepted. Changing invalidates all existing cookies.
	HttpCookieGeneration *int `pulumi:"httpCookieGeneration"`
	// Limit HTTP cookie persistence to the specified path.
	HttpCookiePath *string `pulumi:"httpCookiePath"`
	// Control sharing of cookies across virtual servers. same-ip means a cookie from one virtual server can be used by another. Disable stops cookie sharing. Valid values: `disable`, `same-ip`.
	HttpCookieShare *string `pulumi:"httpCookieShare"`
	// For HTTP multiplexing, enable to add the original client IP address in the XForwarded-For HTTP header. Valid values: `enable`, `disable`.
	HttpIpHeader *string `pulumi:"httpIpHeader"`
	// For HTTP multiplexing, enter a custom HTTPS header name. The original client IP address is added to this header. If empty, X-Forwarded-For is used.
	HttpIpHeaderName *string `pulumi:"httpIpHeaderName"`
	// Enable/disable HTTP multiplexing. Valid values: `enable`, `disable`.
	HttpMultiplex *string `pulumi:"httpMultiplex"`
	// Enable/disable redirection of HTTP to HTTPS Valid values: `enable`, `disable`.
	HttpRedirect *string `pulumi:"httpRedirect"`
	// Enable/disable verification that inserted HTTPS cookies are secure. Valid values: `disable`, `enable`.
	HttpsCookieSecure *string `pulumi:"httpsCookieSecure"`
	// Start-mapped-IPv6-address [-end mapped-IPv6-address].
	Ipv6Mappedip *string `pulumi:"ipv6Mappedip"`
	// IPv6 port number range on the destination network to which the external port number range is mapped.
	Ipv6Mappedport *string `pulumi:"ipv6Mappedport"`
	// Method used to distribute sessions to real servers. Valid values: `static`, `round-robin`, `weighted`, `least-session`, `least-rtt`, `first-alive`, `http-host`.
	LdbMethod *string `pulumi:"ldbMethod"`
	// Mapped FQDN address name.
	MappedAddr *string `pulumi:"mappedAddr"`
	// IP address or address range on the destination network to which the external IP address is mapped. The structure of `mappedip` block is documented below.
	Mappedips []FirewallVipMappedip `pulumi:"mappedips"`
	// Port number range on the destination network to which the external port number range is mapped.
	Mappedport *string `pulumi:"mappedport"`
	// Maximum number of incomplete connections.
	MaxEmbryonicConnections *int `pulumi:"maxEmbryonicConnections"`
	// Name of the health check monitor to use when polling to determine a virtual server's connectivity status.
	Monitors []FirewallVipMonitor `pulumi:"monitors"`
	// Health monitor name.
	Name *string `pulumi:"name"`
	// Enable/disable NAT44. Valid values: `disable`, `enable`.
	Nat44 *string `pulumi:"nat44"`
	// Enable/disable NAT46. Valid values: `disable`, `enable`.
	Nat46 *string `pulumi:"nat46"`
	// Enable/disable forcing the source NAT mapped IP to the external IP for all traffic. Valid values: `disable`, `enable`.
	NatSourceVip *string `pulumi:"natSourceVip"`
	// Enable to add the Front-End-Https header for Microsoft Outlook Web Access. Valid values: `disable`, `enable`.
	OutlookWebAccess *string `pulumi:"outlookWebAccess"`
	// Configure how to make sure that clients connect to the same server every time they make a request that is part of the same session. Valid values: `none`, `http-cookie`, `ssl-session-id`.
	Persistence *string `pulumi:"persistence"`
	// Enable/disable port forwarding. Valid values: `disable`, `enable`.
	Portforward *string `pulumi:"portforward"`
	// Port mapping type. Valid values: `1-to-1`, `m-to-n`.
	PortmappingType *string `pulumi:"portmappingType"`
	// Protocol to use when forwarding packets. Valid values: `tcp`, `udp`, `sctp`, `icmp`.
	Protocol *string `pulumi:"protocol"`
	// Select the real servers that this server load balancing VIP will distribute traffic to. The structure of `realservers` block is documented below.
	Realservers []FirewallVipRealserver `pulumi:"realservers"`
	// Protocol to be load balanced by the virtual server (also called the server load balance virtual IP). Valid values: `http`, `https`, `imaps`, `pop3s`, `smtps`, `ssl`, `tcp`, `udp`, `ip`.
	ServerType *string `pulumi:"serverType"`
	// Service name. The structure of `service` block is documented below.
	Services []FirewallVipService `pulumi:"services"`
	// Source address filter. Each address must be either an IP/subnet (x.x.x.x/n) or a range (x.x.x.x-y.y.y.y). Separate addresses with spaces. The structure of `srcFilter` block is documented below.
	SrcFilters []FirewallVipSrcFilter `pulumi:"srcFilters"`
	// Interfaces to which the VIP applies. Separate the names with spaces. The structure of `srcintfFilter` block is documented below.
	SrcintfFilters []FirewallVipSrcintfFilter `pulumi:"srcintfFilters"`
	// Enable/disable FFDHE cipher suite for SSL key exchange. Valid values: `enable`, `disable`.
	SslAcceptFfdheGroups *string `pulumi:"sslAcceptFfdheGroups"`
	// Permitted encryption algorithms for SSL sessions according to encryption strength. Valid values: `high`, `medium`, `low`, `custom`.
	SslAlgorithm *string `pulumi:"sslAlgorithm"`
	// The name of the SSL certificate to use for SSL acceleration.
	SslCertificate *string `pulumi:"sslCertificate"`
	// SSL/TLS cipher suites acceptable from a client, ordered by priority. The structure of `sslCipherSuites` block is documented below.
	SslCipherSuites []FirewallVipSslCipherSuite `pulumi:"sslCipherSuites"`
	// Enable/disable support for preventing Downgrade Attacks on client connections (RFC 7507). Valid values: `disable`, `enable`.
	SslClientFallback *string `pulumi:"sslClientFallback"`
	// Maximum length of data in MB before triggering a client rekey (0 = disable).
	SslClientRekeyCount *int `pulumi:"sslClientRekeyCount"`
	// Allow, deny, or require secure renegotiation of client sessions to comply with RFC 5746. Valid values: `allow`, `deny`, `secure`.
	SslClientRenegotiation *string `pulumi:"sslClientRenegotiation"`
	// Maximum number of client to FortiGate SSL session states to keep.
	SslClientSessionStateMax *int `pulumi:"sslClientSessionStateMax"`
	// Number of minutes to keep client to FortiGate SSL session state.
	SslClientSessionStateTimeout *int `pulumi:"sslClientSessionStateTimeout"`
	// How to expire SSL sessions for the segment of the SSL connection between the client and the FortiGate. Valid values: `disable`, `time`, `count`, `both`.
	SslClientSessionStateType *string `pulumi:"sslClientSessionStateType"`
	// Number of bits to use in the Diffie-Hellman exchange for RSA encryption of SSL sessions. Valid values: `768`, `1024`, `1536`, `2048`, `3072`, `4096`.
	SslDhBits *string `pulumi:"sslDhBits"`
	// Enable/disable including HPKP header in response. Valid values: `disable`, `enable`, `report-only`.
	SslHpkp *string `pulumi:"sslHpkp"`
	// Number of seconds the client should honour the HPKP setting.
	SslHpkpAge *int `pulumi:"sslHpkpAge"`
	// Certificate to generate backup HPKP pin from.
	SslHpkpBackup *string `pulumi:"sslHpkpBackup"`
	// Indicate that HPKP header applies to all subdomains. Valid values: `disable`, `enable`.
	SslHpkpIncludeSubdomains *string `pulumi:"sslHpkpIncludeSubdomains"`
	// Certificate to generate primary HPKP pin from.
	SslHpkpPrimary *string `pulumi:"sslHpkpPrimary"`
	// URL to report HPKP violations to.
	SslHpkpReportUri *string `pulumi:"sslHpkpReportUri"`
	// Enable/disable including HSTS header in response. Valid values: `disable`, `enable`.
	SslHsts *string `pulumi:"sslHsts"`
	// Number of seconds the client should honour the HSTS setting.
	SslHstsAge *int `pulumi:"sslHstsAge"`
	// Indicate that HSTS header applies to all subdomains. Valid values: `disable`, `enable`.
	SslHstsIncludeSubdomains *string `pulumi:"sslHstsIncludeSubdomains"`
	// Enable to replace HTTP with HTTPS in the reply's Location HTTP header field. Valid values: `enable`, `disable`.
	SslHttpLocationConversion *string `pulumi:"sslHttpLocationConversion"`
	// Enable/disable HTTP host matching for location conversion. Valid values: `enable`, `disable`.
	SslHttpMatchHost *string `pulumi:"sslHttpMatchHost"`
	// Highest SSL/TLS version acceptable from a client.
	SslMaxVersion *string `pulumi:"sslMaxVersion"`
	// Lowest SSL/TLS version acceptable from a client.
	SslMinVersion *string `pulumi:"sslMinVersion"`
	// Apply SSL offloading between the client and the FortiGate (half) or from the client to the FortiGate and from the FortiGate to the server (full). Valid values: `half`, `full`.
	SslMode *string `pulumi:"sslMode"`
	// Select the cipher suites that can be used for SSL perfect forward secrecy (PFS). Applies to both client and server sessions. Valid values: `require`, `deny`, `allow`.
	SslPfs *string `pulumi:"sslPfs"`
	// Enable/disable sending empty fragments to avoid CBC IV attacks (SSL 3.0 & TLS 1.0 only). May need to be disabled for compatibility with older systems. Valid values: `enable`, `disable`.
	SslSendEmptyFrags *string `pulumi:"sslSendEmptyFrags"`
	// Permitted encryption algorithms for the server side of SSL full mode sessions according to encryption strength. Valid values: `high`, `medium`, `low`, `custom`, `client`.
	SslServerAlgorithm *string `pulumi:"sslServerAlgorithm"`
	// SSL/TLS cipher suites to offer to a server, ordered by priority. The structure of `sslServerCipherSuites` block is documented below.
	SslServerCipherSuites []FirewallVipSslServerCipherSuite `pulumi:"sslServerCipherSuites"`
	// Highest SSL/TLS version acceptable from a server. Use the client setting by default.
	SslServerMaxVersion *string `pulumi:"sslServerMaxVersion"`
	// Lowest SSL/TLS version acceptable from a server. Use the client setting by default.
	SslServerMinVersion *string `pulumi:"sslServerMinVersion"`
	// Maximum number of FortiGate to Server SSL session states to keep.
	SslServerSessionStateMax *int `pulumi:"sslServerSessionStateMax"`
	// Number of minutes to keep FortiGate to Server SSL session state.
	SslServerSessionStateTimeout *int `pulumi:"sslServerSessionStateTimeout"`
	// How to expire SSL sessions for the segment of the SSL connection between the server and the FortiGate. Valid values: `disable`, `time`, `count`, `both`.
	SslServerSessionStateType *string `pulumi:"sslServerSessionStateType"`
	// Set the status of the real server to active so that it can accept traffic, or on standby or disabled so no traffic is sent. Valid values: `active`, `standby`, `disable`.
	Status *string `pulumi:"status"`
	// Type of address. Valid values: `ip`, `address`.
	Type *string `pulumi:"type"`
	// Universally Unique Identifier (UUID; automatically assigned but can be manually reset).
	Uuid *string `pulumi:"uuid"`
	// Specifies the vdom to which the resource will be applied when the FortiGate unit is running in VDOM mode. Only one vdom can be specified. If you want to inherit the vdom configuration of the provider, please do not set this parameter.
	Vdomparam *string `pulumi:"vdomparam"`
	// Enable to add an HTTP header to indicate SSL offloading for a WebLogic server. Valid values: `disable`, `enable`.
	WeblogicServer *string `pulumi:"weblogicServer"`
	// Enable to add an HTTP header to indicate SSL offloading for a WebSphere server. Valid values: `disable`, `enable`.
	WebsphereServer *string `pulumi:"websphereServer"`
}

type FirewallVipState struct {
	// Enable/disable adding NAT46 route. Valid values: `disable`, `enable`.
	AddNat46Route pulumi.StringPtrInput
	// Enable to respond to ARP requests for this virtual IP address. Enabled by default. Valid values: `disable`, `enable`.
	ArpReply pulumi.StringPtrInput
	// Color of icon on the GUI.
	Color pulumi.IntPtrInput
	// Comment.
	Comment pulumi.StringPtrInput
	// DNS mapping TTL (Set to zero to use TTL in DNS response, default = 0).
	DnsMappingTtl pulumi.IntPtrInput
	// true or false, set this parameter to true when using dynamic forEach + toset to configure and sort sub-tables, please do not set this parameter when configuring static sub-tables.
	DynamicSortSubtable pulumi.StringPtrInput
	// External FQDN address name. The structure of `extaddr` block is documented below.
	Extaddrs FirewallVipExtaddrArrayInput
	// Interface connected to the source network that receives the packets that will be forwarded to the destination network.
	Extintf pulumi.StringPtrInput
	// IP address or address range on the external interface that you want to map to an address or address range on the destination network.
	Extip pulumi.StringPtrInput
	// Incoming port number range that you want to map to a port number range on the destination network.
	Extport pulumi.StringPtrInput
	// Custom defined ID.
	Fosid pulumi.IntPtrInput
	// Enable to have the VIP send gratuitous ARPs. 0=disabled. Set from 5 up to 8640000 seconds to enable.
	GratuitousArpInterval pulumi.IntPtrInput
	// Time in minutes that client web browsers should keep a cookie. Default is 60 seconds. 0 = no time limit.
	HttpCookieAge pulumi.IntPtrInput
	// Domain that HTTP cookie persistence should apply to.
	HttpCookieDomain pulumi.StringPtrInput
	// Enable/disable use of HTTP cookie domain from host field in HTTP. Valid values: `disable`, `enable`.
	HttpCookieDomainFromHost pulumi.StringPtrInput
	// Generation of HTTP cookie to be accepted. Changing invalidates all existing cookies.
	HttpCookieGeneration pulumi.IntPtrInput
	// Limit HTTP cookie persistence to the specified path.
	HttpCookiePath pulumi.StringPtrInput
	// Control sharing of cookies across virtual servers. same-ip means a cookie from one virtual server can be used by another. Disable stops cookie sharing. Valid values: `disable`, `same-ip`.
	HttpCookieShare pulumi.StringPtrInput
	// For HTTP multiplexing, enable to add the original client IP address in the XForwarded-For HTTP header. Valid values: `enable`, `disable`.
	HttpIpHeader pulumi.StringPtrInput
	// For HTTP multiplexing, enter a custom HTTPS header name. The original client IP address is added to this header. If empty, X-Forwarded-For is used.
	HttpIpHeaderName pulumi.StringPtrInput
	// Enable/disable HTTP multiplexing. Valid values: `enable`, `disable`.
	HttpMultiplex pulumi.StringPtrInput
	// Enable/disable redirection of HTTP to HTTPS Valid values: `enable`, `disable`.
	HttpRedirect pulumi.StringPtrInput
	// Enable/disable verification that inserted HTTPS cookies are secure. Valid values: `disable`, `enable`.
	HttpsCookieSecure pulumi.StringPtrInput
	// Start-mapped-IPv6-address [-end mapped-IPv6-address].
	Ipv6Mappedip pulumi.StringPtrInput
	// IPv6 port number range on the destination network to which the external port number range is mapped.
	Ipv6Mappedport pulumi.StringPtrInput
	// Method used to distribute sessions to real servers. Valid values: `static`, `round-robin`, `weighted`, `least-session`, `least-rtt`, `first-alive`, `http-host`.
	LdbMethod pulumi.StringPtrInput
	// Mapped FQDN address name.
	MappedAddr pulumi.StringPtrInput
	// IP address or address range on the destination network to which the external IP address is mapped. The structure of `mappedip` block is documented below.
	Mappedips FirewallVipMappedipArrayInput
	// Port number range on the destination network to which the external port number range is mapped.
	Mappedport pulumi.StringPtrInput
	// Maximum number of incomplete connections.
	MaxEmbryonicConnections pulumi.IntPtrInput
	// Name of the health check monitor to use when polling to determine a virtual server's connectivity status.
	Monitors FirewallVipMonitorArrayInput
	// Health monitor name.
	Name pulumi.StringPtrInput
	// Enable/disable NAT44. Valid values: `disable`, `enable`.
	Nat44 pulumi.StringPtrInput
	// Enable/disable NAT46. Valid values: `disable`, `enable`.
	Nat46 pulumi.StringPtrInput
	// Enable/disable forcing the source NAT mapped IP to the external IP for all traffic. Valid values: `disable`, `enable`.
	NatSourceVip pulumi.StringPtrInput
	// Enable to add the Front-End-Https header for Microsoft Outlook Web Access. Valid values: `disable`, `enable`.
	OutlookWebAccess pulumi.StringPtrInput
	// Configure how to make sure that clients connect to the same server every time they make a request that is part of the same session. Valid values: `none`, `http-cookie`, `ssl-session-id`.
	Persistence pulumi.StringPtrInput
	// Enable/disable port forwarding. Valid values: `disable`, `enable`.
	Portforward pulumi.StringPtrInput
	// Port mapping type. Valid values: `1-to-1`, `m-to-n`.
	PortmappingType pulumi.StringPtrInput
	// Protocol to use when forwarding packets. Valid values: `tcp`, `udp`, `sctp`, `icmp`.
	Protocol pulumi.StringPtrInput
	// Select the real servers that this server load balancing VIP will distribute traffic to. The structure of `realservers` block is documented below.
	Realservers FirewallVipRealserverArrayInput
	// Protocol to be load balanced by the virtual server (also called the server load balance virtual IP). Valid values: `http`, `https`, `imaps`, `pop3s`, `smtps`, `ssl`, `tcp`, `udp`, `ip`.
	ServerType pulumi.StringPtrInput
	// Service name. The structure of `service` block is documented below.
	Services FirewallVipServiceArrayInput
	// Source address filter. Each address must be either an IP/subnet (x.x.x.x/n) or a range (x.x.x.x-y.y.y.y). Separate addresses with spaces. The structure of `srcFilter` block is documented below.
	SrcFilters FirewallVipSrcFilterArrayInput
	// Interfaces to which the VIP applies. Separate the names with spaces. The structure of `srcintfFilter` block is documented below.
	SrcintfFilters FirewallVipSrcintfFilterArrayInput
	// Enable/disable FFDHE cipher suite for SSL key exchange. Valid values: `enable`, `disable`.
	SslAcceptFfdheGroups pulumi.StringPtrInput
	// Permitted encryption algorithms for SSL sessions according to encryption strength. Valid values: `high`, `medium`, `low`, `custom`.
	SslAlgorithm pulumi.StringPtrInput
	// The name of the SSL certificate to use for SSL acceleration.
	SslCertificate pulumi.StringPtrInput
	// SSL/TLS cipher suites acceptable from a client, ordered by priority. The structure of `sslCipherSuites` block is documented below.
	SslCipherSuites FirewallVipSslCipherSuiteArrayInput
	// Enable/disable support for preventing Downgrade Attacks on client connections (RFC 7507). Valid values: `disable`, `enable`.
	SslClientFallback pulumi.StringPtrInput
	// Maximum length of data in MB before triggering a client rekey (0 = disable).
	SslClientRekeyCount pulumi.IntPtrInput
	// Allow, deny, or require secure renegotiation of client sessions to comply with RFC 5746. Valid values: `allow`, `deny`, `secure`.
	SslClientRenegotiation pulumi.StringPtrInput
	// Maximum number of client to FortiGate SSL session states to keep.
	SslClientSessionStateMax pulumi.IntPtrInput
	// Number of minutes to keep client to FortiGate SSL session state.
	SslClientSessionStateTimeout pulumi.IntPtrInput
	// How to expire SSL sessions for the segment of the SSL connection between the client and the FortiGate. Valid values: `disable`, `time`, `count`, `both`.
	SslClientSessionStateType pulumi.StringPtrInput
	// Number of bits to use in the Diffie-Hellman exchange for RSA encryption of SSL sessions. Valid values: `768`, `1024`, `1536`, `2048`, `3072`, `4096`.
	SslDhBits pulumi.StringPtrInput
	// Enable/disable including HPKP header in response. Valid values: `disable`, `enable`, `report-only`.
	SslHpkp pulumi.StringPtrInput
	// Number of seconds the client should honour the HPKP setting.
	SslHpkpAge pulumi.IntPtrInput
	// Certificate to generate backup HPKP pin from.
	SslHpkpBackup pulumi.StringPtrInput
	// Indicate that HPKP header applies to all subdomains. Valid values: `disable`, `enable`.
	SslHpkpIncludeSubdomains pulumi.StringPtrInput
	// Certificate to generate primary HPKP pin from.
	SslHpkpPrimary pulumi.StringPtrInput
	// URL to report HPKP violations to.
	SslHpkpReportUri pulumi.StringPtrInput
	// Enable/disable including HSTS header in response. Valid values: `disable`, `enable`.
	SslHsts pulumi.StringPtrInput
	// Number of seconds the client should honour the HSTS setting.
	SslHstsAge pulumi.IntPtrInput
	// Indicate that HSTS header applies to all subdomains. Valid values: `disable`, `enable`.
	SslHstsIncludeSubdomains pulumi.StringPtrInput
	// Enable to replace HTTP with HTTPS in the reply's Location HTTP header field. Valid values: `enable`, `disable`.
	SslHttpLocationConversion pulumi.StringPtrInput
	// Enable/disable HTTP host matching for location conversion. Valid values: `enable`, `disable`.
	SslHttpMatchHost pulumi.StringPtrInput
	// Highest SSL/TLS version acceptable from a client.
	SslMaxVersion pulumi.StringPtrInput
	// Lowest SSL/TLS version acceptable from a client.
	SslMinVersion pulumi.StringPtrInput
	// Apply SSL offloading between the client and the FortiGate (half) or from the client to the FortiGate and from the FortiGate to the server (full). Valid values: `half`, `full`.
	SslMode pulumi.StringPtrInput
	// Select the cipher suites that can be used for SSL perfect forward secrecy (PFS). Applies to both client and server sessions. Valid values: `require`, `deny`, `allow`.
	SslPfs pulumi.StringPtrInput
	// Enable/disable sending empty fragments to avoid CBC IV attacks (SSL 3.0 & TLS 1.0 only). May need to be disabled for compatibility with older systems. Valid values: `enable`, `disable`.
	SslSendEmptyFrags pulumi.StringPtrInput
	// Permitted encryption algorithms for the server side of SSL full mode sessions according to encryption strength. Valid values: `high`, `medium`, `low`, `custom`, `client`.
	SslServerAlgorithm pulumi.StringPtrInput
	// SSL/TLS cipher suites to offer to a server, ordered by priority. The structure of `sslServerCipherSuites` block is documented below.
	SslServerCipherSuites FirewallVipSslServerCipherSuiteArrayInput
	// Highest SSL/TLS version acceptable from a server. Use the client setting by default.
	SslServerMaxVersion pulumi.StringPtrInput
	// Lowest SSL/TLS version acceptable from a server. Use the client setting by default.
	SslServerMinVersion pulumi.StringPtrInput
	// Maximum number of FortiGate to Server SSL session states to keep.
	SslServerSessionStateMax pulumi.IntPtrInput
	// Number of minutes to keep FortiGate to Server SSL session state.
	SslServerSessionStateTimeout pulumi.IntPtrInput
	// How to expire SSL sessions for the segment of the SSL connection between the server and the FortiGate. Valid values: `disable`, `time`, `count`, `both`.
	SslServerSessionStateType pulumi.StringPtrInput
	// Set the status of the real server to active so that it can accept traffic, or on standby or disabled so no traffic is sent. Valid values: `active`, `standby`, `disable`.
	Status pulumi.StringPtrInput
	// Type of address. Valid values: `ip`, `address`.
	Type pulumi.StringPtrInput
	// Universally Unique Identifier (UUID; automatically assigned but can be manually reset).
	Uuid pulumi.StringPtrInput
	// Specifies the vdom to which the resource will be applied when the FortiGate unit is running in VDOM mode. Only one vdom can be specified. If you want to inherit the vdom configuration of the provider, please do not set this parameter.
	Vdomparam pulumi.StringPtrInput
	// Enable to add an HTTP header to indicate SSL offloading for a WebLogic server. Valid values: `disable`, `enable`.
	WeblogicServer pulumi.StringPtrInput
	// Enable to add an HTTP header to indicate SSL offloading for a WebSphere server. Valid values: `disable`, `enable`.
	WebsphereServer pulumi.StringPtrInput
}

func (FirewallVipState) ElementType() reflect.Type {
	return reflect.TypeOf((*firewallVipState)(nil)).Elem()
}

type firewallVipArgs struct {
	// Enable/disable adding NAT46 route. Valid values: `disable`, `enable`.
	AddNat46Route *string `pulumi:"addNat46Route"`
	// Enable to respond to ARP requests for this virtual IP address. Enabled by default. Valid values: `disable`, `enable`.
	ArpReply *string `pulumi:"arpReply"`
	// Color of icon on the GUI.
	Color *int `pulumi:"color"`
	// Comment.
	Comment *string `pulumi:"comment"`
	// DNS mapping TTL (Set to zero to use TTL in DNS response, default = 0).
	DnsMappingTtl *int `pulumi:"dnsMappingTtl"`
	// true or false, set this parameter to true when using dynamic forEach + toset to configure and sort sub-tables, please do not set this parameter when configuring static sub-tables.
	DynamicSortSubtable *string `pulumi:"dynamicSortSubtable"`
	// External FQDN address name. The structure of `extaddr` block is documented below.
	Extaddrs []FirewallVipExtaddr `pulumi:"extaddrs"`
	// Interface connected to the source network that receives the packets that will be forwarded to the destination network.
	Extintf *string `pulumi:"extintf"`
	// IP address or address range on the external interface that you want to map to an address or address range on the destination network.
	Extip *string `pulumi:"extip"`
	// Incoming port number range that you want to map to a port number range on the destination network.
	Extport *string `pulumi:"extport"`
	// Custom defined ID.
	Fosid *int `pulumi:"fosid"`
	// Enable to have the VIP send gratuitous ARPs. 0=disabled. Set from 5 up to 8640000 seconds to enable.
	GratuitousArpInterval *int `pulumi:"gratuitousArpInterval"`
	// Time in minutes that client web browsers should keep a cookie. Default is 60 seconds. 0 = no time limit.
	HttpCookieAge *int `pulumi:"httpCookieAge"`
	// Domain that HTTP cookie persistence should apply to.
	HttpCookieDomain *string `pulumi:"httpCookieDomain"`
	// Enable/disable use of HTTP cookie domain from host field in HTTP. Valid values: `disable`, `enable`.
	HttpCookieDomainFromHost *string `pulumi:"httpCookieDomainFromHost"`
	// Generation of HTTP cookie to be accepted. Changing invalidates all existing cookies.
	HttpCookieGeneration *int `pulumi:"httpCookieGeneration"`
	// Limit HTTP cookie persistence to the specified path.
	HttpCookiePath *string `pulumi:"httpCookiePath"`
	// Control sharing of cookies across virtual servers. same-ip means a cookie from one virtual server can be used by another. Disable stops cookie sharing. Valid values: `disable`, `same-ip`.
	HttpCookieShare *string `pulumi:"httpCookieShare"`
	// For HTTP multiplexing, enable to add the original client IP address in the XForwarded-For HTTP header. Valid values: `enable`, `disable`.
	HttpIpHeader *string `pulumi:"httpIpHeader"`
	// For HTTP multiplexing, enter a custom HTTPS header name. The original client IP address is added to this header. If empty, X-Forwarded-For is used.
	HttpIpHeaderName *string `pulumi:"httpIpHeaderName"`
	// Enable/disable HTTP multiplexing. Valid values: `enable`, `disable`.
	HttpMultiplex *string `pulumi:"httpMultiplex"`
	// Enable/disable redirection of HTTP to HTTPS Valid values: `enable`, `disable`.
	HttpRedirect *string `pulumi:"httpRedirect"`
	// Enable/disable verification that inserted HTTPS cookies are secure. Valid values: `disable`, `enable`.
	HttpsCookieSecure *string `pulumi:"httpsCookieSecure"`
	// Start-mapped-IPv6-address [-end mapped-IPv6-address].
	Ipv6Mappedip *string `pulumi:"ipv6Mappedip"`
	// IPv6 port number range on the destination network to which the external port number range is mapped.
	Ipv6Mappedport *string `pulumi:"ipv6Mappedport"`
	// Method used to distribute sessions to real servers. Valid values: `static`, `round-robin`, `weighted`, `least-session`, `least-rtt`, `first-alive`, `http-host`.
	LdbMethod *string `pulumi:"ldbMethod"`
	// Mapped FQDN address name.
	MappedAddr *string `pulumi:"mappedAddr"`
	// IP address or address range on the destination network to which the external IP address is mapped. The structure of `mappedip` block is documented below.
	Mappedips []FirewallVipMappedip `pulumi:"mappedips"`
	// Port number range on the destination network to which the external port number range is mapped.
	Mappedport *string `pulumi:"mappedport"`
	// Maximum number of incomplete connections.
	MaxEmbryonicConnections *int `pulumi:"maxEmbryonicConnections"`
	// Name of the health check monitor to use when polling to determine a virtual server's connectivity status.
	Monitors []FirewallVipMonitor `pulumi:"monitors"`
	// Health monitor name.
	Name *string `pulumi:"name"`
	// Enable/disable NAT44. Valid values: `disable`, `enable`.
	Nat44 *string `pulumi:"nat44"`
	// Enable/disable NAT46. Valid values: `disable`, `enable`.
	Nat46 *string `pulumi:"nat46"`
	// Enable/disable forcing the source NAT mapped IP to the external IP for all traffic. Valid values: `disable`, `enable`.
	NatSourceVip *string `pulumi:"natSourceVip"`
	// Enable to add the Front-End-Https header for Microsoft Outlook Web Access. Valid values: `disable`, `enable`.
	OutlookWebAccess *string `pulumi:"outlookWebAccess"`
	// Configure how to make sure that clients connect to the same server every time they make a request that is part of the same session. Valid values: `none`, `http-cookie`, `ssl-session-id`.
	Persistence *string `pulumi:"persistence"`
	// Enable/disable port forwarding. Valid values: `disable`, `enable`.
	Portforward *string `pulumi:"portforward"`
	// Port mapping type. Valid values: `1-to-1`, `m-to-n`.
	PortmappingType *string `pulumi:"portmappingType"`
	// Protocol to use when forwarding packets. Valid values: `tcp`, `udp`, `sctp`, `icmp`.
	Protocol *string `pulumi:"protocol"`
	// Select the real servers that this server load balancing VIP will distribute traffic to. The structure of `realservers` block is documented below.
	Realservers []FirewallVipRealserver `pulumi:"realservers"`
	// Protocol to be load balanced by the virtual server (also called the server load balance virtual IP). Valid values: `http`, `https`, `imaps`, `pop3s`, `smtps`, `ssl`, `tcp`, `udp`, `ip`.
	ServerType *string `pulumi:"serverType"`
	// Service name. The structure of `service` block is documented below.
	Services []FirewallVipService `pulumi:"services"`
	// Source address filter. Each address must be either an IP/subnet (x.x.x.x/n) or a range (x.x.x.x-y.y.y.y). Separate addresses with spaces. The structure of `srcFilter` block is documented below.
	SrcFilters []FirewallVipSrcFilter `pulumi:"srcFilters"`
	// Interfaces to which the VIP applies. Separate the names with spaces. The structure of `srcintfFilter` block is documented below.
	SrcintfFilters []FirewallVipSrcintfFilter `pulumi:"srcintfFilters"`
	// Enable/disable FFDHE cipher suite for SSL key exchange. Valid values: `enable`, `disable`.
	SslAcceptFfdheGroups *string `pulumi:"sslAcceptFfdheGroups"`
	// Permitted encryption algorithms for SSL sessions according to encryption strength. Valid values: `high`, `medium`, `low`, `custom`.
	SslAlgorithm *string `pulumi:"sslAlgorithm"`
	// The name of the SSL certificate to use for SSL acceleration.
	SslCertificate *string `pulumi:"sslCertificate"`
	// SSL/TLS cipher suites acceptable from a client, ordered by priority. The structure of `sslCipherSuites` block is documented below.
	SslCipherSuites []FirewallVipSslCipherSuite `pulumi:"sslCipherSuites"`
	// Enable/disable support for preventing Downgrade Attacks on client connections (RFC 7507). Valid values: `disable`, `enable`.
	SslClientFallback *string `pulumi:"sslClientFallback"`
	// Maximum length of data in MB before triggering a client rekey (0 = disable).
	SslClientRekeyCount *int `pulumi:"sslClientRekeyCount"`
	// Allow, deny, or require secure renegotiation of client sessions to comply with RFC 5746. Valid values: `allow`, `deny`, `secure`.
	SslClientRenegotiation *string `pulumi:"sslClientRenegotiation"`
	// Maximum number of client to FortiGate SSL session states to keep.
	SslClientSessionStateMax *int `pulumi:"sslClientSessionStateMax"`
	// Number of minutes to keep client to FortiGate SSL session state.
	SslClientSessionStateTimeout *int `pulumi:"sslClientSessionStateTimeout"`
	// How to expire SSL sessions for the segment of the SSL connection between the client and the FortiGate. Valid values: `disable`, `time`, `count`, `both`.
	SslClientSessionStateType *string `pulumi:"sslClientSessionStateType"`
	// Number of bits to use in the Diffie-Hellman exchange for RSA encryption of SSL sessions. Valid values: `768`, `1024`, `1536`, `2048`, `3072`, `4096`.
	SslDhBits *string `pulumi:"sslDhBits"`
	// Enable/disable including HPKP header in response. Valid values: `disable`, `enable`, `report-only`.
	SslHpkp *string `pulumi:"sslHpkp"`
	// Number of seconds the client should honour the HPKP setting.
	SslHpkpAge *int `pulumi:"sslHpkpAge"`
	// Certificate to generate backup HPKP pin from.
	SslHpkpBackup *string `pulumi:"sslHpkpBackup"`
	// Indicate that HPKP header applies to all subdomains. Valid values: `disable`, `enable`.
	SslHpkpIncludeSubdomains *string `pulumi:"sslHpkpIncludeSubdomains"`
	// Certificate to generate primary HPKP pin from.
	SslHpkpPrimary *string `pulumi:"sslHpkpPrimary"`
	// URL to report HPKP violations to.
	SslHpkpReportUri *string `pulumi:"sslHpkpReportUri"`
	// Enable/disable including HSTS header in response. Valid values: `disable`, `enable`.
	SslHsts *string `pulumi:"sslHsts"`
	// Number of seconds the client should honour the HSTS setting.
	SslHstsAge *int `pulumi:"sslHstsAge"`
	// Indicate that HSTS header applies to all subdomains. Valid values: `disable`, `enable`.
	SslHstsIncludeSubdomains *string `pulumi:"sslHstsIncludeSubdomains"`
	// Enable to replace HTTP with HTTPS in the reply's Location HTTP header field. Valid values: `enable`, `disable`.
	SslHttpLocationConversion *string `pulumi:"sslHttpLocationConversion"`
	// Enable/disable HTTP host matching for location conversion. Valid values: `enable`, `disable`.
	SslHttpMatchHost *string `pulumi:"sslHttpMatchHost"`
	// Highest SSL/TLS version acceptable from a client.
	SslMaxVersion *string `pulumi:"sslMaxVersion"`
	// Lowest SSL/TLS version acceptable from a client.
	SslMinVersion *string `pulumi:"sslMinVersion"`
	// Apply SSL offloading between the client and the FortiGate (half) or from the client to the FortiGate and from the FortiGate to the server (full). Valid values: `half`, `full`.
	SslMode *string `pulumi:"sslMode"`
	// Select the cipher suites that can be used for SSL perfect forward secrecy (PFS). Applies to both client and server sessions. Valid values: `require`, `deny`, `allow`.
	SslPfs *string `pulumi:"sslPfs"`
	// Enable/disable sending empty fragments to avoid CBC IV attacks (SSL 3.0 & TLS 1.0 only). May need to be disabled for compatibility with older systems. Valid values: `enable`, `disable`.
	SslSendEmptyFrags *string `pulumi:"sslSendEmptyFrags"`
	// Permitted encryption algorithms for the server side of SSL full mode sessions according to encryption strength. Valid values: `high`, `medium`, `low`, `custom`, `client`.
	SslServerAlgorithm *string `pulumi:"sslServerAlgorithm"`
	// SSL/TLS cipher suites to offer to a server, ordered by priority. The structure of `sslServerCipherSuites` block is documented below.
	SslServerCipherSuites []FirewallVipSslServerCipherSuite `pulumi:"sslServerCipherSuites"`
	// Highest SSL/TLS version acceptable from a server. Use the client setting by default.
	SslServerMaxVersion *string `pulumi:"sslServerMaxVersion"`
	// Lowest SSL/TLS version acceptable from a server. Use the client setting by default.
	SslServerMinVersion *string `pulumi:"sslServerMinVersion"`
	// Maximum number of FortiGate to Server SSL session states to keep.
	SslServerSessionStateMax *int `pulumi:"sslServerSessionStateMax"`
	// Number of minutes to keep FortiGate to Server SSL session state.
	SslServerSessionStateTimeout *int `pulumi:"sslServerSessionStateTimeout"`
	// How to expire SSL sessions for the segment of the SSL connection between the server and the FortiGate. Valid values: `disable`, `time`, `count`, `both`.
	SslServerSessionStateType *string `pulumi:"sslServerSessionStateType"`
	// Set the status of the real server to active so that it can accept traffic, or on standby or disabled so no traffic is sent. Valid values: `active`, `standby`, `disable`.
	Status *string `pulumi:"status"`
	// Type of address. Valid values: `ip`, `address`.
	Type *string `pulumi:"type"`
	// Universally Unique Identifier (UUID; automatically assigned but can be manually reset).
	Uuid *string `pulumi:"uuid"`
	// Specifies the vdom to which the resource will be applied when the FortiGate unit is running in VDOM mode. Only one vdom can be specified. If you want to inherit the vdom configuration of the provider, please do not set this parameter.
	Vdomparam *string `pulumi:"vdomparam"`
	// Enable to add an HTTP header to indicate SSL offloading for a WebLogic server. Valid values: `disable`, `enable`.
	WeblogicServer *string `pulumi:"weblogicServer"`
	// Enable to add an HTTP header to indicate SSL offloading for a WebSphere server. Valid values: `disable`, `enable`.
	WebsphereServer *string `pulumi:"websphereServer"`
}

// The set of arguments for constructing a FirewallVip resource.
type FirewallVipArgs struct {
	// Enable/disable adding NAT46 route. Valid values: `disable`, `enable`.
	AddNat46Route pulumi.StringPtrInput
	// Enable to respond to ARP requests for this virtual IP address. Enabled by default. Valid values: `disable`, `enable`.
	ArpReply pulumi.StringPtrInput
	// Color of icon on the GUI.
	Color pulumi.IntPtrInput
	// Comment.
	Comment pulumi.StringPtrInput
	// DNS mapping TTL (Set to zero to use TTL in DNS response, default = 0).
	DnsMappingTtl pulumi.IntPtrInput
	// true or false, set this parameter to true when using dynamic forEach + toset to configure and sort sub-tables, please do not set this parameter when configuring static sub-tables.
	DynamicSortSubtable pulumi.StringPtrInput
	// External FQDN address name. The structure of `extaddr` block is documented below.
	Extaddrs FirewallVipExtaddrArrayInput
	// Interface connected to the source network that receives the packets that will be forwarded to the destination network.
	Extintf pulumi.StringPtrInput
	// IP address or address range on the external interface that you want to map to an address or address range on the destination network.
	Extip pulumi.StringPtrInput
	// Incoming port number range that you want to map to a port number range on the destination network.
	Extport pulumi.StringPtrInput
	// Custom defined ID.
	Fosid pulumi.IntPtrInput
	// Enable to have the VIP send gratuitous ARPs. 0=disabled. Set from 5 up to 8640000 seconds to enable.
	GratuitousArpInterval pulumi.IntPtrInput
	// Time in minutes that client web browsers should keep a cookie. Default is 60 seconds. 0 = no time limit.
	HttpCookieAge pulumi.IntPtrInput
	// Domain that HTTP cookie persistence should apply to.
	HttpCookieDomain pulumi.StringPtrInput
	// Enable/disable use of HTTP cookie domain from host field in HTTP. Valid values: `disable`, `enable`.
	HttpCookieDomainFromHost pulumi.StringPtrInput
	// Generation of HTTP cookie to be accepted. Changing invalidates all existing cookies.
	HttpCookieGeneration pulumi.IntPtrInput
	// Limit HTTP cookie persistence to the specified path.
	HttpCookiePath pulumi.StringPtrInput
	// Control sharing of cookies across virtual servers. same-ip means a cookie from one virtual server can be used by another. Disable stops cookie sharing. Valid values: `disable`, `same-ip`.
	HttpCookieShare pulumi.StringPtrInput
	// For HTTP multiplexing, enable to add the original client IP address in the XForwarded-For HTTP header. Valid values: `enable`, `disable`.
	HttpIpHeader pulumi.StringPtrInput
	// For HTTP multiplexing, enter a custom HTTPS header name. The original client IP address is added to this header. If empty, X-Forwarded-For is used.
	HttpIpHeaderName pulumi.StringPtrInput
	// Enable/disable HTTP multiplexing. Valid values: `enable`, `disable`.
	HttpMultiplex pulumi.StringPtrInput
	// Enable/disable redirection of HTTP to HTTPS Valid values: `enable`, `disable`.
	HttpRedirect pulumi.StringPtrInput
	// Enable/disable verification that inserted HTTPS cookies are secure. Valid values: `disable`, `enable`.
	HttpsCookieSecure pulumi.StringPtrInput
	// Start-mapped-IPv6-address [-end mapped-IPv6-address].
	Ipv6Mappedip pulumi.StringPtrInput
	// IPv6 port number range on the destination network to which the external port number range is mapped.
	Ipv6Mappedport pulumi.StringPtrInput
	// Method used to distribute sessions to real servers. Valid values: `static`, `round-robin`, `weighted`, `least-session`, `least-rtt`, `first-alive`, `http-host`.
	LdbMethod pulumi.StringPtrInput
	// Mapped FQDN address name.
	MappedAddr pulumi.StringPtrInput
	// IP address or address range on the destination network to which the external IP address is mapped. The structure of `mappedip` block is documented below.
	Mappedips FirewallVipMappedipArrayInput
	// Port number range on the destination network to which the external port number range is mapped.
	Mappedport pulumi.StringPtrInput
	// Maximum number of incomplete connections.
	MaxEmbryonicConnections pulumi.IntPtrInput
	// Name of the health check monitor to use when polling to determine a virtual server's connectivity status.
	Monitors FirewallVipMonitorArrayInput
	// Health monitor name.
	Name pulumi.StringPtrInput
	// Enable/disable NAT44. Valid values: `disable`, `enable`.
	Nat44 pulumi.StringPtrInput
	// Enable/disable NAT46. Valid values: `disable`, `enable`.
	Nat46 pulumi.StringPtrInput
	// Enable/disable forcing the source NAT mapped IP to the external IP for all traffic. Valid values: `disable`, `enable`.
	NatSourceVip pulumi.StringPtrInput
	// Enable to add the Front-End-Https header for Microsoft Outlook Web Access. Valid values: `disable`, `enable`.
	OutlookWebAccess pulumi.StringPtrInput
	// Configure how to make sure that clients connect to the same server every time they make a request that is part of the same session. Valid values: `none`, `http-cookie`, `ssl-session-id`.
	Persistence pulumi.StringPtrInput
	// Enable/disable port forwarding. Valid values: `disable`, `enable`.
	Portforward pulumi.StringPtrInput
	// Port mapping type. Valid values: `1-to-1`, `m-to-n`.
	PortmappingType pulumi.StringPtrInput
	// Protocol to use when forwarding packets. Valid values: `tcp`, `udp`, `sctp`, `icmp`.
	Protocol pulumi.StringPtrInput
	// Select the real servers that this server load balancing VIP will distribute traffic to. The structure of `realservers` block is documented below.
	Realservers FirewallVipRealserverArrayInput
	// Protocol to be load balanced by the virtual server (also called the server load balance virtual IP). Valid values: `http`, `https`, `imaps`, `pop3s`, `smtps`, `ssl`, `tcp`, `udp`, `ip`.
	ServerType pulumi.StringPtrInput
	// Service name. The structure of `service` block is documented below.
	Services FirewallVipServiceArrayInput
	// Source address filter. Each address must be either an IP/subnet (x.x.x.x/n) or a range (x.x.x.x-y.y.y.y). Separate addresses with spaces. The structure of `srcFilter` block is documented below.
	SrcFilters FirewallVipSrcFilterArrayInput
	// Interfaces to which the VIP applies. Separate the names with spaces. The structure of `srcintfFilter` block is documented below.
	SrcintfFilters FirewallVipSrcintfFilterArrayInput
	// Enable/disable FFDHE cipher suite for SSL key exchange. Valid values: `enable`, `disable`.
	SslAcceptFfdheGroups pulumi.StringPtrInput
	// Permitted encryption algorithms for SSL sessions according to encryption strength. Valid values: `high`, `medium`, `low`, `custom`.
	SslAlgorithm pulumi.StringPtrInput
	// The name of the SSL certificate to use for SSL acceleration.
	SslCertificate pulumi.StringPtrInput
	// SSL/TLS cipher suites acceptable from a client, ordered by priority. The structure of `sslCipherSuites` block is documented below.
	SslCipherSuites FirewallVipSslCipherSuiteArrayInput
	// Enable/disable support for preventing Downgrade Attacks on client connections (RFC 7507). Valid values: `disable`, `enable`.
	SslClientFallback pulumi.StringPtrInput
	// Maximum length of data in MB before triggering a client rekey (0 = disable).
	SslClientRekeyCount pulumi.IntPtrInput
	// Allow, deny, or require secure renegotiation of client sessions to comply with RFC 5746. Valid values: `allow`, `deny`, `secure`.
	SslClientRenegotiation pulumi.StringPtrInput
	// Maximum number of client to FortiGate SSL session states to keep.
	SslClientSessionStateMax pulumi.IntPtrInput
	// Number of minutes to keep client to FortiGate SSL session state.
	SslClientSessionStateTimeout pulumi.IntPtrInput
	// How to expire SSL sessions for the segment of the SSL connection between the client and the FortiGate. Valid values: `disable`, `time`, `count`, `both`.
	SslClientSessionStateType pulumi.StringPtrInput
	// Number of bits to use in the Diffie-Hellman exchange for RSA encryption of SSL sessions. Valid values: `768`, `1024`, `1536`, `2048`, `3072`, `4096`.
	SslDhBits pulumi.StringPtrInput
	// Enable/disable including HPKP header in response. Valid values: `disable`, `enable`, `report-only`.
	SslHpkp pulumi.StringPtrInput
	// Number of seconds the client should honour the HPKP setting.
	SslHpkpAge pulumi.IntPtrInput
	// Certificate to generate backup HPKP pin from.
	SslHpkpBackup pulumi.StringPtrInput
	// Indicate that HPKP header applies to all subdomains. Valid values: `disable`, `enable`.
	SslHpkpIncludeSubdomains pulumi.StringPtrInput
	// Certificate to generate primary HPKP pin from.
	SslHpkpPrimary pulumi.StringPtrInput
	// URL to report HPKP violations to.
	SslHpkpReportUri pulumi.StringPtrInput
	// Enable/disable including HSTS header in response. Valid values: `disable`, `enable`.
	SslHsts pulumi.StringPtrInput
	// Number of seconds the client should honour the HSTS setting.
	SslHstsAge pulumi.IntPtrInput
	// Indicate that HSTS header applies to all subdomains. Valid values: `disable`, `enable`.
	SslHstsIncludeSubdomains pulumi.StringPtrInput
	// Enable to replace HTTP with HTTPS in the reply's Location HTTP header field. Valid values: `enable`, `disable`.
	SslHttpLocationConversion pulumi.StringPtrInput
	// Enable/disable HTTP host matching for location conversion. Valid values: `enable`, `disable`.
	SslHttpMatchHost pulumi.StringPtrInput
	// Highest SSL/TLS version acceptable from a client.
	SslMaxVersion pulumi.StringPtrInput
	// Lowest SSL/TLS version acceptable from a client.
	SslMinVersion pulumi.StringPtrInput
	// Apply SSL offloading between the client and the FortiGate (half) or from the client to the FortiGate and from the FortiGate to the server (full). Valid values: `half`, `full`.
	SslMode pulumi.StringPtrInput
	// Select the cipher suites that can be used for SSL perfect forward secrecy (PFS). Applies to both client and server sessions. Valid values: `require`, `deny`, `allow`.
	SslPfs pulumi.StringPtrInput
	// Enable/disable sending empty fragments to avoid CBC IV attacks (SSL 3.0 & TLS 1.0 only). May need to be disabled for compatibility with older systems. Valid values: `enable`, `disable`.
	SslSendEmptyFrags pulumi.StringPtrInput
	// Permitted encryption algorithms for the server side of SSL full mode sessions according to encryption strength. Valid values: `high`, `medium`, `low`, `custom`, `client`.
	SslServerAlgorithm pulumi.StringPtrInput
	// SSL/TLS cipher suites to offer to a server, ordered by priority. The structure of `sslServerCipherSuites` block is documented below.
	SslServerCipherSuites FirewallVipSslServerCipherSuiteArrayInput
	// Highest SSL/TLS version acceptable from a server. Use the client setting by default.
	SslServerMaxVersion pulumi.StringPtrInput
	// Lowest SSL/TLS version acceptable from a server. Use the client setting by default.
	SslServerMinVersion pulumi.StringPtrInput
	// Maximum number of FortiGate to Server SSL session states to keep.
	SslServerSessionStateMax pulumi.IntPtrInput
	// Number of minutes to keep FortiGate to Server SSL session state.
	SslServerSessionStateTimeout pulumi.IntPtrInput
	// How to expire SSL sessions for the segment of the SSL connection between the server and the FortiGate. Valid values: `disable`, `time`, `count`, `both`.
	SslServerSessionStateType pulumi.StringPtrInput
	// Set the status of the real server to active so that it can accept traffic, or on standby or disabled so no traffic is sent. Valid values: `active`, `standby`, `disable`.
	Status pulumi.StringPtrInput
	// Type of address. Valid values: `ip`, `address`.
	Type pulumi.StringPtrInput
	// Universally Unique Identifier (UUID; automatically assigned but can be manually reset).
	Uuid pulumi.StringPtrInput
	// Specifies the vdom to which the resource will be applied when the FortiGate unit is running in VDOM mode. Only one vdom can be specified. If you want to inherit the vdom configuration of the provider, please do not set this parameter.
	Vdomparam pulumi.StringPtrInput
	// Enable to add an HTTP header to indicate SSL offloading for a WebLogic server. Valid values: `disable`, `enable`.
	WeblogicServer pulumi.StringPtrInput
	// Enable to add an HTTP header to indicate SSL offloading for a WebSphere server. Valid values: `disable`, `enable`.
	WebsphereServer pulumi.StringPtrInput
}

func (FirewallVipArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*firewallVipArgs)(nil)).Elem()
}

type FirewallVipInput interface {
	pulumi.Input

	ToFirewallVipOutput() FirewallVipOutput
	ToFirewallVipOutputWithContext(ctx context.Context) FirewallVipOutput
}

func (*FirewallVip) ElementType() reflect.Type {
	return reflect.TypeOf((**FirewallVip)(nil)).Elem()
}

func (i *FirewallVip) ToFirewallVipOutput() FirewallVipOutput {
	return i.ToFirewallVipOutputWithContext(context.Background())
}

func (i *FirewallVip) ToFirewallVipOutputWithContext(ctx context.Context) FirewallVipOutput {
	return pulumi.ToOutputWithContext(ctx, i).(FirewallVipOutput)
}

// FirewallVipArrayInput is an input type that accepts FirewallVipArray and FirewallVipArrayOutput values.
// You can construct a concrete instance of `FirewallVipArrayInput` via:
//
//          FirewallVipArray{ FirewallVipArgs{...} }
type FirewallVipArrayInput interface {
	pulumi.Input

	ToFirewallVipArrayOutput() FirewallVipArrayOutput
	ToFirewallVipArrayOutputWithContext(context.Context) FirewallVipArrayOutput
}

type FirewallVipArray []FirewallVipInput

func (FirewallVipArray) ElementType() reflect.Type {
	return reflect.TypeOf((*[]*FirewallVip)(nil)).Elem()
}

func (i FirewallVipArray) ToFirewallVipArrayOutput() FirewallVipArrayOutput {
	return i.ToFirewallVipArrayOutputWithContext(context.Background())
}

func (i FirewallVipArray) ToFirewallVipArrayOutputWithContext(ctx context.Context) FirewallVipArrayOutput {
	return pulumi.ToOutputWithContext(ctx, i).(FirewallVipArrayOutput)
}

// FirewallVipMapInput is an input type that accepts FirewallVipMap and FirewallVipMapOutput values.
// You can construct a concrete instance of `FirewallVipMapInput` via:
//
//          FirewallVipMap{ "key": FirewallVipArgs{...} }
type FirewallVipMapInput interface {
	pulumi.Input

	ToFirewallVipMapOutput() FirewallVipMapOutput
	ToFirewallVipMapOutputWithContext(context.Context) FirewallVipMapOutput
}

type FirewallVipMap map[string]FirewallVipInput

func (FirewallVipMap) ElementType() reflect.Type {
	return reflect.TypeOf((*map[string]*FirewallVip)(nil)).Elem()
}

func (i FirewallVipMap) ToFirewallVipMapOutput() FirewallVipMapOutput {
	return i.ToFirewallVipMapOutputWithContext(context.Background())
}

func (i FirewallVipMap) ToFirewallVipMapOutputWithContext(ctx context.Context) FirewallVipMapOutput {
	return pulumi.ToOutputWithContext(ctx, i).(FirewallVipMapOutput)
}

type FirewallVipOutput struct{ *pulumi.OutputState }

func (FirewallVipOutput) ElementType() reflect.Type {
	return reflect.TypeOf((**FirewallVip)(nil)).Elem()
}

func (o FirewallVipOutput) ToFirewallVipOutput() FirewallVipOutput {
	return o
}

func (o FirewallVipOutput) ToFirewallVipOutputWithContext(ctx context.Context) FirewallVipOutput {
	return o
}

type FirewallVipArrayOutput struct{ *pulumi.OutputState }

func (FirewallVipArrayOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*[]*FirewallVip)(nil)).Elem()
}

func (o FirewallVipArrayOutput) ToFirewallVipArrayOutput() FirewallVipArrayOutput {
	return o
}

func (o FirewallVipArrayOutput) ToFirewallVipArrayOutputWithContext(ctx context.Context) FirewallVipArrayOutput {
	return o
}

func (o FirewallVipArrayOutput) Index(i pulumi.IntInput) FirewallVipOutput {
	return pulumi.All(o, i).ApplyT(func(vs []interface{}) *FirewallVip {
		return vs[0].([]*FirewallVip)[vs[1].(int)]
	}).(FirewallVipOutput)
}

type FirewallVipMapOutput struct{ *pulumi.OutputState }

func (FirewallVipMapOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*map[string]*FirewallVip)(nil)).Elem()
}

func (o FirewallVipMapOutput) ToFirewallVipMapOutput() FirewallVipMapOutput {
	return o
}

func (o FirewallVipMapOutput) ToFirewallVipMapOutputWithContext(ctx context.Context) FirewallVipMapOutput {
	return o
}

func (o FirewallVipMapOutput) MapIndex(k pulumi.StringInput) FirewallVipOutput {
	return pulumi.All(o, k).ApplyT(func(vs []interface{}) *FirewallVip {
		return vs[0].(map[string]*FirewallVip)[vs[1].(string)]
	}).(FirewallVipOutput)
}

func init() {
	pulumi.RegisterInputType(reflect.TypeOf((*FirewallVipInput)(nil)).Elem(), &FirewallVip{})
	pulumi.RegisterInputType(reflect.TypeOf((*FirewallVipArrayInput)(nil)).Elem(), FirewallVipArray{})
	pulumi.RegisterInputType(reflect.TypeOf((*FirewallVipMapInput)(nil)).Elem(), FirewallVipMap{})
	pulumi.RegisterOutputType(FirewallVipOutput{})
	pulumi.RegisterOutputType(FirewallVipArrayOutput{})
	pulumi.RegisterOutputType(FirewallVipMapOutput{})
}
