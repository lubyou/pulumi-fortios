// Code generated by the Pulumi Terraform Bridge (tfgen) Tool DO NOT EDIT.
// *** WARNING: Do not edit by hand unless you're certain you know what you are doing! ***

package fortios

import (
	"context"
	"reflect"

	"github.com/pulumi/pulumi/sdk/v3/go/pulumi"
)

type SystemConsole struct {
	pulumi.CustomResourceState

	Baudrate      pulumi.StringOutput    `pulumi:"baudrate"`
	Fortiexplorer pulumi.StringOutput    `pulumi:"fortiexplorer"`
	Login         pulumi.StringOutput    `pulumi:"login"`
	Mode          pulumi.StringOutput    `pulumi:"mode"`
	Output        pulumi.StringOutput    `pulumi:"output"`
	Vdomparam     pulumi.StringPtrOutput `pulumi:"vdomparam"`
}

// NewSystemConsole registers a new resource with the given unique name, arguments, and options.
func NewSystemConsole(ctx *pulumi.Context,
	name string, args *SystemConsoleArgs, opts ...pulumi.ResourceOption) (*SystemConsole, error) {
	if args == nil {
		args = &SystemConsoleArgs{}
	}

	opts = pkgResourceDefaultOpts(opts)
	var resource SystemConsole
	err := ctx.RegisterResource("fortios:index/systemConsole:SystemConsole", name, args, &resource, opts...)
	if err != nil {
		return nil, err
	}
	return &resource, nil
}

// GetSystemConsole gets an existing SystemConsole resource's state with the given name, ID, and optional
// state properties that are used to uniquely qualify the lookup (nil if not required).
func GetSystemConsole(ctx *pulumi.Context,
	name string, id pulumi.IDInput, state *SystemConsoleState, opts ...pulumi.ResourceOption) (*SystemConsole, error) {
	var resource SystemConsole
	err := ctx.ReadResource("fortios:index/systemConsole:SystemConsole", name, id, state, &resource, opts...)
	if err != nil {
		return nil, err
	}
	return &resource, nil
}

// Input properties used for looking up and filtering SystemConsole resources.
type systemConsoleState struct {
	Baudrate      *string `pulumi:"baudrate"`
	Fortiexplorer *string `pulumi:"fortiexplorer"`
	Login         *string `pulumi:"login"`
	Mode          *string `pulumi:"mode"`
	Output        *string `pulumi:"output"`
	Vdomparam     *string `pulumi:"vdomparam"`
}

type SystemConsoleState struct {
	Baudrate      pulumi.StringPtrInput
	Fortiexplorer pulumi.StringPtrInput
	Login         pulumi.StringPtrInput
	Mode          pulumi.StringPtrInput
	Output        pulumi.StringPtrInput
	Vdomparam     pulumi.StringPtrInput
}

func (SystemConsoleState) ElementType() reflect.Type {
	return reflect.TypeOf((*systemConsoleState)(nil)).Elem()
}

type systemConsoleArgs struct {
	Baudrate      *string `pulumi:"baudrate"`
	Fortiexplorer *string `pulumi:"fortiexplorer"`
	Login         *string `pulumi:"login"`
	Mode          *string `pulumi:"mode"`
	Output        *string `pulumi:"output"`
	Vdomparam     *string `pulumi:"vdomparam"`
}

// The set of arguments for constructing a SystemConsole resource.
type SystemConsoleArgs struct {
	Baudrate      pulumi.StringPtrInput
	Fortiexplorer pulumi.StringPtrInput
	Login         pulumi.StringPtrInput
	Mode          pulumi.StringPtrInput
	Output        pulumi.StringPtrInput
	Vdomparam     pulumi.StringPtrInput
}

func (SystemConsoleArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*systemConsoleArgs)(nil)).Elem()
}

type SystemConsoleInput interface {
	pulumi.Input

	ToSystemConsoleOutput() SystemConsoleOutput
	ToSystemConsoleOutputWithContext(ctx context.Context) SystemConsoleOutput
}

func (*SystemConsole) ElementType() reflect.Type {
	return reflect.TypeOf((**SystemConsole)(nil)).Elem()
}

func (i *SystemConsole) ToSystemConsoleOutput() SystemConsoleOutput {
	return i.ToSystemConsoleOutputWithContext(context.Background())
}

func (i *SystemConsole) ToSystemConsoleOutputWithContext(ctx context.Context) SystemConsoleOutput {
	return pulumi.ToOutputWithContext(ctx, i).(SystemConsoleOutput)
}

// SystemConsoleArrayInput is an input type that accepts SystemConsoleArray and SystemConsoleArrayOutput values.
// You can construct a concrete instance of `SystemConsoleArrayInput` via:
//
//	SystemConsoleArray{ SystemConsoleArgs{...} }
type SystemConsoleArrayInput interface {
	pulumi.Input

	ToSystemConsoleArrayOutput() SystemConsoleArrayOutput
	ToSystemConsoleArrayOutputWithContext(context.Context) SystemConsoleArrayOutput
}

type SystemConsoleArray []SystemConsoleInput

func (SystemConsoleArray) ElementType() reflect.Type {
	return reflect.TypeOf((*[]*SystemConsole)(nil)).Elem()
}

func (i SystemConsoleArray) ToSystemConsoleArrayOutput() SystemConsoleArrayOutput {
	return i.ToSystemConsoleArrayOutputWithContext(context.Background())
}

func (i SystemConsoleArray) ToSystemConsoleArrayOutputWithContext(ctx context.Context) SystemConsoleArrayOutput {
	return pulumi.ToOutputWithContext(ctx, i).(SystemConsoleArrayOutput)
}

// SystemConsoleMapInput is an input type that accepts SystemConsoleMap and SystemConsoleMapOutput values.
// You can construct a concrete instance of `SystemConsoleMapInput` via:
//
//	SystemConsoleMap{ "key": SystemConsoleArgs{...} }
type SystemConsoleMapInput interface {
	pulumi.Input

	ToSystemConsoleMapOutput() SystemConsoleMapOutput
	ToSystemConsoleMapOutputWithContext(context.Context) SystemConsoleMapOutput
}

type SystemConsoleMap map[string]SystemConsoleInput

func (SystemConsoleMap) ElementType() reflect.Type {
	return reflect.TypeOf((*map[string]*SystemConsole)(nil)).Elem()
}

func (i SystemConsoleMap) ToSystemConsoleMapOutput() SystemConsoleMapOutput {
	return i.ToSystemConsoleMapOutputWithContext(context.Background())
}

func (i SystemConsoleMap) ToSystemConsoleMapOutputWithContext(ctx context.Context) SystemConsoleMapOutput {
	return pulumi.ToOutputWithContext(ctx, i).(SystemConsoleMapOutput)
}

type SystemConsoleOutput struct{ *pulumi.OutputState }

func (SystemConsoleOutput) ElementType() reflect.Type {
	return reflect.TypeOf((**SystemConsole)(nil)).Elem()
}

func (o SystemConsoleOutput) ToSystemConsoleOutput() SystemConsoleOutput {
	return o
}

func (o SystemConsoleOutput) ToSystemConsoleOutputWithContext(ctx context.Context) SystemConsoleOutput {
	return o
}

func (o SystemConsoleOutput) Baudrate() pulumi.StringOutput {
	return o.ApplyT(func(v *SystemConsole) pulumi.StringOutput { return v.Baudrate }).(pulumi.StringOutput)
}

func (o SystemConsoleOutput) Fortiexplorer() pulumi.StringOutput {
	return o.ApplyT(func(v *SystemConsole) pulumi.StringOutput { return v.Fortiexplorer }).(pulumi.StringOutput)
}

func (o SystemConsoleOutput) Login() pulumi.StringOutput {
	return o.ApplyT(func(v *SystemConsole) pulumi.StringOutput { return v.Login }).(pulumi.StringOutput)
}

func (o SystemConsoleOutput) Mode() pulumi.StringOutput {
	return o.ApplyT(func(v *SystemConsole) pulumi.StringOutput { return v.Mode }).(pulumi.StringOutput)
}

func (o SystemConsoleOutput) Output() pulumi.StringOutput {
	return o.ApplyT(func(v *SystemConsole) pulumi.StringOutput { return v.Output }).(pulumi.StringOutput)
}

func (o SystemConsoleOutput) Vdomparam() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *SystemConsole) pulumi.StringPtrOutput { return v.Vdomparam }).(pulumi.StringPtrOutput)
}

type SystemConsoleArrayOutput struct{ *pulumi.OutputState }

func (SystemConsoleArrayOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*[]*SystemConsole)(nil)).Elem()
}

func (o SystemConsoleArrayOutput) ToSystemConsoleArrayOutput() SystemConsoleArrayOutput {
	return o
}

func (o SystemConsoleArrayOutput) ToSystemConsoleArrayOutputWithContext(ctx context.Context) SystemConsoleArrayOutput {
	return o
}

func (o SystemConsoleArrayOutput) Index(i pulumi.IntInput) SystemConsoleOutput {
	return pulumi.All(o, i).ApplyT(func(vs []interface{}) *SystemConsole {
		return vs[0].([]*SystemConsole)[vs[1].(int)]
	}).(SystemConsoleOutput)
}

type SystemConsoleMapOutput struct{ *pulumi.OutputState }

func (SystemConsoleMapOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*map[string]*SystemConsole)(nil)).Elem()
}

func (o SystemConsoleMapOutput) ToSystemConsoleMapOutput() SystemConsoleMapOutput {
	return o
}

func (o SystemConsoleMapOutput) ToSystemConsoleMapOutputWithContext(ctx context.Context) SystemConsoleMapOutput {
	return o
}

func (o SystemConsoleMapOutput) MapIndex(k pulumi.StringInput) SystemConsoleOutput {
	return pulumi.All(o, k).ApplyT(func(vs []interface{}) *SystemConsole {
		return vs[0].(map[string]*SystemConsole)[vs[1].(string)]
	}).(SystemConsoleOutput)
}

func init() {
	pulumi.RegisterInputType(reflect.TypeOf((*SystemConsoleInput)(nil)).Elem(), &SystemConsole{})
	pulumi.RegisterInputType(reflect.TypeOf((*SystemConsoleArrayInput)(nil)).Elem(), SystemConsoleArray{})
	pulumi.RegisterInputType(reflect.TypeOf((*SystemConsoleMapInput)(nil)).Elem(), SystemConsoleMap{})
	pulumi.RegisterOutputType(SystemConsoleOutput{})
	pulumi.RegisterOutputType(SystemConsoleArrayOutput{})
	pulumi.RegisterOutputType(SystemConsoleMapOutput{})
}
