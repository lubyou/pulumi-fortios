// *** WARNING: this file was generated by the Pulumi Terraform Bridge (tfgen) Tool. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

package fortios

import (
	"context"
	"reflect"

	"github.com/pulumi/pulumi/sdk/v3/go/pulumi"
)

// Configure DNS translation.
//
// ## Example Usage
//
// ```go
// package main
//
// import (
// 	"github.com/lubyou/pulumi-fortios/sdk/go/fortios"
// 	"github.com/pulumi/pulumi/sdk/v3/go/pulumi"
// )
//
// func main() {
// 	pulumi.Run(func(ctx *pulumi.Context) error {
// 		_, err := fortios.NewFirewallDnstranslation(ctx, "trname", &fortios.FirewallDnstranslationArgs{
// 			Dst:     pulumi.String("2.2.2.2"),
// 			Fosid:   pulumi.Int(1),
// 			Netmask: pulumi.String("255.0.0.0"),
// 			Src:     pulumi.String("1.1.1.1"),
// 		})
// 		if err != nil {
// 			return err
// 		}
// 		return nil
// 	})
// }
// ```
//
// ## Import
//
// Firewall Dnstranslation can be imported using any of these accepted formats$ export "FORTIOS_IMPORT_TABLE"="true"
//
// ```sh
//  $ pulumi import fortios:index/firewallDnstranslation:FirewallDnstranslation labelname {{fosid}}
// ```
//
//  $ unset "FORTIOS_IMPORT_TABLE"
type FirewallDnstranslation struct {
	pulumi.CustomResourceState

	// IPv4 address or subnet on the external network to substitute for the resolved address in DNS query replies. Can be single IP address or subnet on the external network, but number of addresses must equal number of mapped IP addresses in src.
	Dst pulumi.StringOutput `pulumi:"dst"`
	// ID.
	Fosid pulumi.IntOutput `pulumi:"fosid"`
	// If src and dst are subnets rather than single IP addresses, enter the netmask for both src and dst.
	Netmask pulumi.StringOutput `pulumi:"netmask"`
	// IPv4 address or subnet on the internal network to compare with the resolved address in DNS query replies. If the resolved address matches, the resolved address is substituted with dst.
	Src pulumi.StringOutput `pulumi:"src"`
	// Specifies the vdom to which the resource will be applied when the FortiGate unit is running in VDOM mode. Only one vdom can be specified. If you want to inherit the vdom configuration of the provider, please do not set this parameter.
	Vdomparam pulumi.StringPtrOutput `pulumi:"vdomparam"`
}

// NewFirewallDnstranslation registers a new resource with the given unique name, arguments, and options.
func NewFirewallDnstranslation(ctx *pulumi.Context,
	name string, args *FirewallDnstranslationArgs, opts ...pulumi.ResourceOption) (*FirewallDnstranslation, error) {
	if args == nil {
		args = &FirewallDnstranslationArgs{}
	}

	opts = pkgResourceDefaultOpts(opts)
	var resource FirewallDnstranslation
	err := ctx.RegisterResource("fortios:index/firewallDnstranslation:FirewallDnstranslation", name, args, &resource, opts...)
	if err != nil {
		return nil, err
	}
	return &resource, nil
}

// GetFirewallDnstranslation gets an existing FirewallDnstranslation resource's state with the given name, ID, and optional
// state properties that are used to uniquely qualify the lookup (nil if not required).
func GetFirewallDnstranslation(ctx *pulumi.Context,
	name string, id pulumi.IDInput, state *FirewallDnstranslationState, opts ...pulumi.ResourceOption) (*FirewallDnstranslation, error) {
	var resource FirewallDnstranslation
	err := ctx.ReadResource("fortios:index/firewallDnstranslation:FirewallDnstranslation", name, id, state, &resource, opts...)
	if err != nil {
		return nil, err
	}
	return &resource, nil
}

// Input properties used for looking up and filtering FirewallDnstranslation resources.
type firewallDnstranslationState struct {
	// IPv4 address or subnet on the external network to substitute for the resolved address in DNS query replies. Can be single IP address or subnet on the external network, but number of addresses must equal number of mapped IP addresses in src.
	Dst *string `pulumi:"dst"`
	// ID.
	Fosid *int `pulumi:"fosid"`
	// If src and dst are subnets rather than single IP addresses, enter the netmask for both src and dst.
	Netmask *string `pulumi:"netmask"`
	// IPv4 address or subnet on the internal network to compare with the resolved address in DNS query replies. If the resolved address matches, the resolved address is substituted with dst.
	Src *string `pulumi:"src"`
	// Specifies the vdom to which the resource will be applied when the FortiGate unit is running in VDOM mode. Only one vdom can be specified. If you want to inherit the vdom configuration of the provider, please do not set this parameter.
	Vdomparam *string `pulumi:"vdomparam"`
}

type FirewallDnstranslationState struct {
	// IPv4 address or subnet on the external network to substitute for the resolved address in DNS query replies. Can be single IP address or subnet on the external network, but number of addresses must equal number of mapped IP addresses in src.
	Dst pulumi.StringPtrInput
	// ID.
	Fosid pulumi.IntPtrInput
	// If src and dst are subnets rather than single IP addresses, enter the netmask for both src and dst.
	Netmask pulumi.StringPtrInput
	// IPv4 address or subnet on the internal network to compare with the resolved address in DNS query replies. If the resolved address matches, the resolved address is substituted with dst.
	Src pulumi.StringPtrInput
	// Specifies the vdom to which the resource will be applied when the FortiGate unit is running in VDOM mode. Only one vdom can be specified. If you want to inherit the vdom configuration of the provider, please do not set this parameter.
	Vdomparam pulumi.StringPtrInput
}

func (FirewallDnstranslationState) ElementType() reflect.Type {
	return reflect.TypeOf((*firewallDnstranslationState)(nil)).Elem()
}

type firewallDnstranslationArgs struct {
	// IPv4 address or subnet on the external network to substitute for the resolved address in DNS query replies. Can be single IP address or subnet on the external network, but number of addresses must equal number of mapped IP addresses in src.
	Dst *string `pulumi:"dst"`
	// ID.
	Fosid *int `pulumi:"fosid"`
	// If src and dst are subnets rather than single IP addresses, enter the netmask for both src and dst.
	Netmask *string `pulumi:"netmask"`
	// IPv4 address or subnet on the internal network to compare with the resolved address in DNS query replies. If the resolved address matches, the resolved address is substituted with dst.
	Src *string `pulumi:"src"`
	// Specifies the vdom to which the resource will be applied when the FortiGate unit is running in VDOM mode. Only one vdom can be specified. If you want to inherit the vdom configuration of the provider, please do not set this parameter.
	Vdomparam *string `pulumi:"vdomparam"`
}

// The set of arguments for constructing a FirewallDnstranslation resource.
type FirewallDnstranslationArgs struct {
	// IPv4 address or subnet on the external network to substitute for the resolved address in DNS query replies. Can be single IP address or subnet on the external network, but number of addresses must equal number of mapped IP addresses in src.
	Dst pulumi.StringPtrInput
	// ID.
	Fosid pulumi.IntPtrInput
	// If src and dst are subnets rather than single IP addresses, enter the netmask for both src and dst.
	Netmask pulumi.StringPtrInput
	// IPv4 address or subnet on the internal network to compare with the resolved address in DNS query replies. If the resolved address matches, the resolved address is substituted with dst.
	Src pulumi.StringPtrInput
	// Specifies the vdom to which the resource will be applied when the FortiGate unit is running in VDOM mode. Only one vdom can be specified. If you want to inherit the vdom configuration of the provider, please do not set this parameter.
	Vdomparam pulumi.StringPtrInput
}

func (FirewallDnstranslationArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*firewallDnstranslationArgs)(nil)).Elem()
}

type FirewallDnstranslationInput interface {
	pulumi.Input

	ToFirewallDnstranslationOutput() FirewallDnstranslationOutput
	ToFirewallDnstranslationOutputWithContext(ctx context.Context) FirewallDnstranslationOutput
}

func (*FirewallDnstranslation) ElementType() reflect.Type {
	return reflect.TypeOf((**FirewallDnstranslation)(nil)).Elem()
}

func (i *FirewallDnstranslation) ToFirewallDnstranslationOutput() FirewallDnstranslationOutput {
	return i.ToFirewallDnstranslationOutputWithContext(context.Background())
}

func (i *FirewallDnstranslation) ToFirewallDnstranslationOutputWithContext(ctx context.Context) FirewallDnstranslationOutput {
	return pulumi.ToOutputWithContext(ctx, i).(FirewallDnstranslationOutput)
}

// FirewallDnstranslationArrayInput is an input type that accepts FirewallDnstranslationArray and FirewallDnstranslationArrayOutput values.
// You can construct a concrete instance of `FirewallDnstranslationArrayInput` via:
//
//          FirewallDnstranslationArray{ FirewallDnstranslationArgs{...} }
type FirewallDnstranslationArrayInput interface {
	pulumi.Input

	ToFirewallDnstranslationArrayOutput() FirewallDnstranslationArrayOutput
	ToFirewallDnstranslationArrayOutputWithContext(context.Context) FirewallDnstranslationArrayOutput
}

type FirewallDnstranslationArray []FirewallDnstranslationInput

func (FirewallDnstranslationArray) ElementType() reflect.Type {
	return reflect.TypeOf((*[]*FirewallDnstranslation)(nil)).Elem()
}

func (i FirewallDnstranslationArray) ToFirewallDnstranslationArrayOutput() FirewallDnstranslationArrayOutput {
	return i.ToFirewallDnstranslationArrayOutputWithContext(context.Background())
}

func (i FirewallDnstranslationArray) ToFirewallDnstranslationArrayOutputWithContext(ctx context.Context) FirewallDnstranslationArrayOutput {
	return pulumi.ToOutputWithContext(ctx, i).(FirewallDnstranslationArrayOutput)
}

// FirewallDnstranslationMapInput is an input type that accepts FirewallDnstranslationMap and FirewallDnstranslationMapOutput values.
// You can construct a concrete instance of `FirewallDnstranslationMapInput` via:
//
//          FirewallDnstranslationMap{ "key": FirewallDnstranslationArgs{...} }
type FirewallDnstranslationMapInput interface {
	pulumi.Input

	ToFirewallDnstranslationMapOutput() FirewallDnstranslationMapOutput
	ToFirewallDnstranslationMapOutputWithContext(context.Context) FirewallDnstranslationMapOutput
}

type FirewallDnstranslationMap map[string]FirewallDnstranslationInput

func (FirewallDnstranslationMap) ElementType() reflect.Type {
	return reflect.TypeOf((*map[string]*FirewallDnstranslation)(nil)).Elem()
}

func (i FirewallDnstranslationMap) ToFirewallDnstranslationMapOutput() FirewallDnstranslationMapOutput {
	return i.ToFirewallDnstranslationMapOutputWithContext(context.Background())
}

func (i FirewallDnstranslationMap) ToFirewallDnstranslationMapOutputWithContext(ctx context.Context) FirewallDnstranslationMapOutput {
	return pulumi.ToOutputWithContext(ctx, i).(FirewallDnstranslationMapOutput)
}

type FirewallDnstranslationOutput struct{ *pulumi.OutputState }

func (FirewallDnstranslationOutput) ElementType() reflect.Type {
	return reflect.TypeOf((**FirewallDnstranslation)(nil)).Elem()
}

func (o FirewallDnstranslationOutput) ToFirewallDnstranslationOutput() FirewallDnstranslationOutput {
	return o
}

func (o FirewallDnstranslationOutput) ToFirewallDnstranslationOutputWithContext(ctx context.Context) FirewallDnstranslationOutput {
	return o
}

type FirewallDnstranslationArrayOutput struct{ *pulumi.OutputState }

func (FirewallDnstranslationArrayOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*[]*FirewallDnstranslation)(nil)).Elem()
}

func (o FirewallDnstranslationArrayOutput) ToFirewallDnstranslationArrayOutput() FirewallDnstranslationArrayOutput {
	return o
}

func (o FirewallDnstranslationArrayOutput) ToFirewallDnstranslationArrayOutputWithContext(ctx context.Context) FirewallDnstranslationArrayOutput {
	return o
}

func (o FirewallDnstranslationArrayOutput) Index(i pulumi.IntInput) FirewallDnstranslationOutput {
	return pulumi.All(o, i).ApplyT(func(vs []interface{}) *FirewallDnstranslation {
		return vs[0].([]*FirewallDnstranslation)[vs[1].(int)]
	}).(FirewallDnstranslationOutput)
}

type FirewallDnstranslationMapOutput struct{ *pulumi.OutputState }

func (FirewallDnstranslationMapOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*map[string]*FirewallDnstranslation)(nil)).Elem()
}

func (o FirewallDnstranslationMapOutput) ToFirewallDnstranslationMapOutput() FirewallDnstranslationMapOutput {
	return o
}

func (o FirewallDnstranslationMapOutput) ToFirewallDnstranslationMapOutputWithContext(ctx context.Context) FirewallDnstranslationMapOutput {
	return o
}

func (o FirewallDnstranslationMapOutput) MapIndex(k pulumi.StringInput) FirewallDnstranslationOutput {
	return pulumi.All(o, k).ApplyT(func(vs []interface{}) *FirewallDnstranslation {
		return vs[0].(map[string]*FirewallDnstranslation)[vs[1].(string)]
	}).(FirewallDnstranslationOutput)
}

func init() {
	pulumi.RegisterInputType(reflect.TypeOf((*FirewallDnstranslationInput)(nil)).Elem(), &FirewallDnstranslation{})
	pulumi.RegisterInputType(reflect.TypeOf((*FirewallDnstranslationArrayInput)(nil)).Elem(), FirewallDnstranslationArray{})
	pulumi.RegisterInputType(reflect.TypeOf((*FirewallDnstranslationMapInput)(nil)).Elem(), FirewallDnstranslationMap{})
	pulumi.RegisterOutputType(FirewallDnstranslationOutput{})
	pulumi.RegisterOutputType(FirewallDnstranslationArrayOutput{})
	pulumi.RegisterOutputType(FirewallDnstranslationMapOutput{})
}
