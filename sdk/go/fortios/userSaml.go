// Code generated by the Pulumi Terraform Bridge (tfgen) Tool DO NOT EDIT.
// *** WARNING: Do not edit by hand unless you're certain you know what you are doing! ***

package fortios

import (
	"context"
	"reflect"

	"errors"
	"github.com/pulumi/pulumi/sdk/v3/go/pulumi"
)

type UserSaml struct {
	pulumi.CustomResourceState

	AdfsClaim          pulumi.StringOutput    `pulumi:"adfsClaim"`
	AuthUrl            pulumi.StringPtrOutput `pulumi:"authUrl"`
	Cert               pulumi.StringOutput    `pulumi:"cert"`
	ClockTolerance     pulumi.IntOutput       `pulumi:"clockTolerance"`
	DigestMethod       pulumi.StringOutput    `pulumi:"digestMethod"`
	EntityId           pulumi.StringOutput    `pulumi:"entityId"`
	GroupClaimType     pulumi.StringOutput    `pulumi:"groupClaimType"`
	GroupName          pulumi.StringOutput    `pulumi:"groupName"`
	IdpCert            pulumi.StringOutput    `pulumi:"idpCert"`
	IdpEntityId        pulumi.StringOutput    `pulumi:"idpEntityId"`
	IdpSingleLogoutUrl pulumi.StringOutput    `pulumi:"idpSingleLogoutUrl"`
	IdpSingleSignOnUrl pulumi.StringOutput    `pulumi:"idpSingleSignOnUrl"`
	LimitRelaystate    pulumi.StringOutput    `pulumi:"limitRelaystate"`
	Name               pulumi.StringOutput    `pulumi:"name"`
	SingleLogoutUrl    pulumi.StringOutput    `pulumi:"singleLogoutUrl"`
	SingleSignOnUrl    pulumi.StringOutput    `pulumi:"singleSignOnUrl"`
	UserClaimType      pulumi.StringOutput    `pulumi:"userClaimType"`
	UserName           pulumi.StringOutput    `pulumi:"userName"`
	Vdomparam          pulumi.StringPtrOutput `pulumi:"vdomparam"`
}

// NewUserSaml registers a new resource with the given unique name, arguments, and options.
func NewUserSaml(ctx *pulumi.Context,
	name string, args *UserSamlArgs, opts ...pulumi.ResourceOption) (*UserSaml, error) {
	if args == nil {
		return nil, errors.New("missing one or more required arguments")
	}

	if args.EntityId == nil {
		return nil, errors.New("invalid value for required argument 'EntityId'")
	}
	if args.IdpCert == nil {
		return nil, errors.New("invalid value for required argument 'IdpCert'")
	}
	if args.IdpEntityId == nil {
		return nil, errors.New("invalid value for required argument 'IdpEntityId'")
	}
	if args.IdpSingleSignOnUrl == nil {
		return nil, errors.New("invalid value for required argument 'IdpSingleSignOnUrl'")
	}
	if args.SingleSignOnUrl == nil {
		return nil, errors.New("invalid value for required argument 'SingleSignOnUrl'")
	}
	opts = pkgResourceDefaultOpts(opts)
	var resource UserSaml
	err := ctx.RegisterResource("fortios:index/userSaml:UserSaml", name, args, &resource, opts...)
	if err != nil {
		return nil, err
	}
	return &resource, nil
}

// GetUserSaml gets an existing UserSaml resource's state with the given name, ID, and optional
// state properties that are used to uniquely qualify the lookup (nil if not required).
func GetUserSaml(ctx *pulumi.Context,
	name string, id pulumi.IDInput, state *UserSamlState, opts ...pulumi.ResourceOption) (*UserSaml, error) {
	var resource UserSaml
	err := ctx.ReadResource("fortios:index/userSaml:UserSaml", name, id, state, &resource, opts...)
	if err != nil {
		return nil, err
	}
	return &resource, nil
}

// Input properties used for looking up and filtering UserSaml resources.
type userSamlState struct {
	AdfsClaim          *string `pulumi:"adfsClaim"`
	AuthUrl            *string `pulumi:"authUrl"`
	Cert               *string `pulumi:"cert"`
	ClockTolerance     *int    `pulumi:"clockTolerance"`
	DigestMethod       *string `pulumi:"digestMethod"`
	EntityId           *string `pulumi:"entityId"`
	GroupClaimType     *string `pulumi:"groupClaimType"`
	GroupName          *string `pulumi:"groupName"`
	IdpCert            *string `pulumi:"idpCert"`
	IdpEntityId        *string `pulumi:"idpEntityId"`
	IdpSingleLogoutUrl *string `pulumi:"idpSingleLogoutUrl"`
	IdpSingleSignOnUrl *string `pulumi:"idpSingleSignOnUrl"`
	LimitRelaystate    *string `pulumi:"limitRelaystate"`
	Name               *string `pulumi:"name"`
	SingleLogoutUrl    *string `pulumi:"singleLogoutUrl"`
	SingleSignOnUrl    *string `pulumi:"singleSignOnUrl"`
	UserClaimType      *string `pulumi:"userClaimType"`
	UserName           *string `pulumi:"userName"`
	Vdomparam          *string `pulumi:"vdomparam"`
}

type UserSamlState struct {
	AdfsClaim          pulumi.StringPtrInput
	AuthUrl            pulumi.StringPtrInput
	Cert               pulumi.StringPtrInput
	ClockTolerance     pulumi.IntPtrInput
	DigestMethod       pulumi.StringPtrInput
	EntityId           pulumi.StringPtrInput
	GroupClaimType     pulumi.StringPtrInput
	GroupName          pulumi.StringPtrInput
	IdpCert            pulumi.StringPtrInput
	IdpEntityId        pulumi.StringPtrInput
	IdpSingleLogoutUrl pulumi.StringPtrInput
	IdpSingleSignOnUrl pulumi.StringPtrInput
	LimitRelaystate    pulumi.StringPtrInput
	Name               pulumi.StringPtrInput
	SingleLogoutUrl    pulumi.StringPtrInput
	SingleSignOnUrl    pulumi.StringPtrInput
	UserClaimType      pulumi.StringPtrInput
	UserName           pulumi.StringPtrInput
	Vdomparam          pulumi.StringPtrInput
}

func (UserSamlState) ElementType() reflect.Type {
	return reflect.TypeOf((*userSamlState)(nil)).Elem()
}

type userSamlArgs struct {
	AdfsClaim          *string `pulumi:"adfsClaim"`
	AuthUrl            *string `pulumi:"authUrl"`
	Cert               *string `pulumi:"cert"`
	ClockTolerance     *int    `pulumi:"clockTolerance"`
	DigestMethod       *string `pulumi:"digestMethod"`
	EntityId           string  `pulumi:"entityId"`
	GroupClaimType     *string `pulumi:"groupClaimType"`
	GroupName          *string `pulumi:"groupName"`
	IdpCert            string  `pulumi:"idpCert"`
	IdpEntityId        string  `pulumi:"idpEntityId"`
	IdpSingleLogoutUrl *string `pulumi:"idpSingleLogoutUrl"`
	IdpSingleSignOnUrl string  `pulumi:"idpSingleSignOnUrl"`
	LimitRelaystate    *string `pulumi:"limitRelaystate"`
	Name               *string `pulumi:"name"`
	SingleLogoutUrl    *string `pulumi:"singleLogoutUrl"`
	SingleSignOnUrl    string  `pulumi:"singleSignOnUrl"`
	UserClaimType      *string `pulumi:"userClaimType"`
	UserName           *string `pulumi:"userName"`
	Vdomparam          *string `pulumi:"vdomparam"`
}

// The set of arguments for constructing a UserSaml resource.
type UserSamlArgs struct {
	AdfsClaim          pulumi.StringPtrInput
	AuthUrl            pulumi.StringPtrInput
	Cert               pulumi.StringPtrInput
	ClockTolerance     pulumi.IntPtrInput
	DigestMethod       pulumi.StringPtrInput
	EntityId           pulumi.StringInput
	GroupClaimType     pulumi.StringPtrInput
	GroupName          pulumi.StringPtrInput
	IdpCert            pulumi.StringInput
	IdpEntityId        pulumi.StringInput
	IdpSingleLogoutUrl pulumi.StringPtrInput
	IdpSingleSignOnUrl pulumi.StringInput
	LimitRelaystate    pulumi.StringPtrInput
	Name               pulumi.StringPtrInput
	SingleLogoutUrl    pulumi.StringPtrInput
	SingleSignOnUrl    pulumi.StringInput
	UserClaimType      pulumi.StringPtrInput
	UserName           pulumi.StringPtrInput
	Vdomparam          pulumi.StringPtrInput
}

func (UserSamlArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*userSamlArgs)(nil)).Elem()
}

type UserSamlInput interface {
	pulumi.Input

	ToUserSamlOutput() UserSamlOutput
	ToUserSamlOutputWithContext(ctx context.Context) UserSamlOutput
}

func (*UserSaml) ElementType() reflect.Type {
	return reflect.TypeOf((**UserSaml)(nil)).Elem()
}

func (i *UserSaml) ToUserSamlOutput() UserSamlOutput {
	return i.ToUserSamlOutputWithContext(context.Background())
}

func (i *UserSaml) ToUserSamlOutputWithContext(ctx context.Context) UserSamlOutput {
	return pulumi.ToOutputWithContext(ctx, i).(UserSamlOutput)
}

// UserSamlArrayInput is an input type that accepts UserSamlArray and UserSamlArrayOutput values.
// You can construct a concrete instance of `UserSamlArrayInput` via:
//
//	UserSamlArray{ UserSamlArgs{...} }
type UserSamlArrayInput interface {
	pulumi.Input

	ToUserSamlArrayOutput() UserSamlArrayOutput
	ToUserSamlArrayOutputWithContext(context.Context) UserSamlArrayOutput
}

type UserSamlArray []UserSamlInput

func (UserSamlArray) ElementType() reflect.Type {
	return reflect.TypeOf((*[]*UserSaml)(nil)).Elem()
}

func (i UserSamlArray) ToUserSamlArrayOutput() UserSamlArrayOutput {
	return i.ToUserSamlArrayOutputWithContext(context.Background())
}

func (i UserSamlArray) ToUserSamlArrayOutputWithContext(ctx context.Context) UserSamlArrayOutput {
	return pulumi.ToOutputWithContext(ctx, i).(UserSamlArrayOutput)
}

// UserSamlMapInput is an input type that accepts UserSamlMap and UserSamlMapOutput values.
// You can construct a concrete instance of `UserSamlMapInput` via:
//
//	UserSamlMap{ "key": UserSamlArgs{...} }
type UserSamlMapInput interface {
	pulumi.Input

	ToUserSamlMapOutput() UserSamlMapOutput
	ToUserSamlMapOutputWithContext(context.Context) UserSamlMapOutput
}

type UserSamlMap map[string]UserSamlInput

func (UserSamlMap) ElementType() reflect.Type {
	return reflect.TypeOf((*map[string]*UserSaml)(nil)).Elem()
}

func (i UserSamlMap) ToUserSamlMapOutput() UserSamlMapOutput {
	return i.ToUserSamlMapOutputWithContext(context.Background())
}

func (i UserSamlMap) ToUserSamlMapOutputWithContext(ctx context.Context) UserSamlMapOutput {
	return pulumi.ToOutputWithContext(ctx, i).(UserSamlMapOutput)
}

type UserSamlOutput struct{ *pulumi.OutputState }

func (UserSamlOutput) ElementType() reflect.Type {
	return reflect.TypeOf((**UserSaml)(nil)).Elem()
}

func (o UserSamlOutput) ToUserSamlOutput() UserSamlOutput {
	return o
}

func (o UserSamlOutput) ToUserSamlOutputWithContext(ctx context.Context) UserSamlOutput {
	return o
}

func (o UserSamlOutput) AdfsClaim() pulumi.StringOutput {
	return o.ApplyT(func(v *UserSaml) pulumi.StringOutput { return v.AdfsClaim }).(pulumi.StringOutput)
}

func (o UserSamlOutput) AuthUrl() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *UserSaml) pulumi.StringPtrOutput { return v.AuthUrl }).(pulumi.StringPtrOutput)
}

func (o UserSamlOutput) Cert() pulumi.StringOutput {
	return o.ApplyT(func(v *UserSaml) pulumi.StringOutput { return v.Cert }).(pulumi.StringOutput)
}

func (o UserSamlOutput) ClockTolerance() pulumi.IntOutput {
	return o.ApplyT(func(v *UserSaml) pulumi.IntOutput { return v.ClockTolerance }).(pulumi.IntOutput)
}

func (o UserSamlOutput) DigestMethod() pulumi.StringOutput {
	return o.ApplyT(func(v *UserSaml) pulumi.StringOutput { return v.DigestMethod }).(pulumi.StringOutput)
}

func (o UserSamlOutput) EntityId() pulumi.StringOutput {
	return o.ApplyT(func(v *UserSaml) pulumi.StringOutput { return v.EntityId }).(pulumi.StringOutput)
}

func (o UserSamlOutput) GroupClaimType() pulumi.StringOutput {
	return o.ApplyT(func(v *UserSaml) pulumi.StringOutput { return v.GroupClaimType }).(pulumi.StringOutput)
}

func (o UserSamlOutput) GroupName() pulumi.StringOutput {
	return o.ApplyT(func(v *UserSaml) pulumi.StringOutput { return v.GroupName }).(pulumi.StringOutput)
}

func (o UserSamlOutput) IdpCert() pulumi.StringOutput {
	return o.ApplyT(func(v *UserSaml) pulumi.StringOutput { return v.IdpCert }).(pulumi.StringOutput)
}

func (o UserSamlOutput) IdpEntityId() pulumi.StringOutput {
	return o.ApplyT(func(v *UserSaml) pulumi.StringOutput { return v.IdpEntityId }).(pulumi.StringOutput)
}

func (o UserSamlOutput) IdpSingleLogoutUrl() pulumi.StringOutput {
	return o.ApplyT(func(v *UserSaml) pulumi.StringOutput { return v.IdpSingleLogoutUrl }).(pulumi.StringOutput)
}

func (o UserSamlOutput) IdpSingleSignOnUrl() pulumi.StringOutput {
	return o.ApplyT(func(v *UserSaml) pulumi.StringOutput { return v.IdpSingleSignOnUrl }).(pulumi.StringOutput)
}

func (o UserSamlOutput) LimitRelaystate() pulumi.StringOutput {
	return o.ApplyT(func(v *UserSaml) pulumi.StringOutput { return v.LimitRelaystate }).(pulumi.StringOutput)
}

func (o UserSamlOutput) Name() pulumi.StringOutput {
	return o.ApplyT(func(v *UserSaml) pulumi.StringOutput { return v.Name }).(pulumi.StringOutput)
}

func (o UserSamlOutput) SingleLogoutUrl() pulumi.StringOutput {
	return o.ApplyT(func(v *UserSaml) pulumi.StringOutput { return v.SingleLogoutUrl }).(pulumi.StringOutput)
}

func (o UserSamlOutput) SingleSignOnUrl() pulumi.StringOutput {
	return o.ApplyT(func(v *UserSaml) pulumi.StringOutput { return v.SingleSignOnUrl }).(pulumi.StringOutput)
}

func (o UserSamlOutput) UserClaimType() pulumi.StringOutput {
	return o.ApplyT(func(v *UserSaml) pulumi.StringOutput { return v.UserClaimType }).(pulumi.StringOutput)
}

func (o UserSamlOutput) UserName() pulumi.StringOutput {
	return o.ApplyT(func(v *UserSaml) pulumi.StringOutput { return v.UserName }).(pulumi.StringOutput)
}

func (o UserSamlOutput) Vdomparam() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *UserSaml) pulumi.StringPtrOutput { return v.Vdomparam }).(pulumi.StringPtrOutput)
}

type UserSamlArrayOutput struct{ *pulumi.OutputState }

func (UserSamlArrayOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*[]*UserSaml)(nil)).Elem()
}

func (o UserSamlArrayOutput) ToUserSamlArrayOutput() UserSamlArrayOutput {
	return o
}

func (o UserSamlArrayOutput) ToUserSamlArrayOutputWithContext(ctx context.Context) UserSamlArrayOutput {
	return o
}

func (o UserSamlArrayOutput) Index(i pulumi.IntInput) UserSamlOutput {
	return pulumi.All(o, i).ApplyT(func(vs []interface{}) *UserSaml {
		return vs[0].([]*UserSaml)[vs[1].(int)]
	}).(UserSamlOutput)
}

type UserSamlMapOutput struct{ *pulumi.OutputState }

func (UserSamlMapOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*map[string]*UserSaml)(nil)).Elem()
}

func (o UserSamlMapOutput) ToUserSamlMapOutput() UserSamlMapOutput {
	return o
}

func (o UserSamlMapOutput) ToUserSamlMapOutputWithContext(ctx context.Context) UserSamlMapOutput {
	return o
}

func (o UserSamlMapOutput) MapIndex(k pulumi.StringInput) UserSamlOutput {
	return pulumi.All(o, k).ApplyT(func(vs []interface{}) *UserSaml {
		return vs[0].(map[string]*UserSaml)[vs[1].(string)]
	}).(UserSamlOutput)
}

func init() {
	pulumi.RegisterInputType(reflect.TypeOf((*UserSamlInput)(nil)).Elem(), &UserSaml{})
	pulumi.RegisterInputType(reflect.TypeOf((*UserSamlArrayInput)(nil)).Elem(), UserSamlArray{})
	pulumi.RegisterInputType(reflect.TypeOf((*UserSamlMapInput)(nil)).Elem(), UserSamlMap{})
	pulumi.RegisterOutputType(UserSamlOutput{})
	pulumi.RegisterOutputType(UserSamlArrayOutput{})
	pulumi.RegisterOutputType(UserSamlMapOutput{})
}
