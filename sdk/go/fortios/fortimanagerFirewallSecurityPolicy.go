// Code generated by the Pulumi Terraform Bridge (tfgen) Tool DO NOT EDIT.
// *** WARNING: Do not edit by hand unless you're certain you know what you are doing! ***

package fortios

import (
	"context"
	"reflect"

	"github.com/pkg/errors"
	"github.com/pulumi/pulumi/sdk/v3/go/pulumi"
)

// This resource supports Create/Read/Update/Delete firewall security policy on FortiManager which could be installed to the FortiGate later
//
// ## Example Usage
//
// ```go
// package main
//
// import (
// 	"github.com/lubyou/pulumi-fortios/sdk/go/fortios"
// 	"github.com/pulumi/pulumi/sdk/v3/go/pulumi"
// )
//
// func main() {
// 	pulumi.Run(func(ctx *pulumi.Context) error {
// 		_, err := fortios.NewFortimanagerFirewallSecurityPolicy(ctx, "test1", &fortios.FortimanagerFirewallSecurityPolicyArgs{
// 			Action: pulumi.String("accept"),
// 			AvProfiles: pulumi.StringArray{
// 				pulumi.String("g-default"),
// 			},
// 			CapturePacket: pulumi.String("enable"),
// 			Comments:      pulumi.String("policy test"),
// 			DnsfilterProfiles: pulumi.StringArray{
// 				pulumi.String("default"),
// 			},
// 			Dstaddrs: pulumi.StringArray{
// 				pulumi.String("all"),
// 			},
// 			Dstintfs: pulumi.StringArray{
// 				pulumi.String("any"),
// 			},
// 			Fixedport: pulumi.String("enable"),
// 			Groups: pulumi.StringArray{
// 				pulumi.String("Guest-group"),
// 			},
// 			Ippool:          pulumi.String("disable"),
// 			Logtraffic:      pulumi.String("all"),
// 			LogtrafficStart: pulumi.String("enable"),
// 			Nat:             pulumi.String("enable"),
// 			PackageName:     pulumi.String("dvm-test"),
// 			ProfileType:     pulumi.String("single"),
// 			Schedules: pulumi.StringArray{
// 				pulumi.String("always"),
// 			},
// 			Services: pulumi.StringArray{
// 				pulumi.String("ALL"),
// 			},
// 			Srcaddrs: pulumi.StringArray{
// 				pulumi.String("all"),
// 			},
// 			Srcintfs: pulumi.StringArray{
// 				pulumi.String("any"),
// 			},
// 			TrafficShapers: pulumi.StringArray{
// 				pulumi.String("high-priority"),
// 			},
// 			Users: pulumi.StringArray{
// 				pulumi.String("guest"),
// 			},
// 			UtmStatus: pulumi.String("enable"),
// 		})
// 		if err != nil {
// 			return err
// 		}
// 		return nil
// 	})
// }
// ```
type FortimanagerFirewallSecurityPolicy struct {
	pulumi.CustomResourceState

	// Policy action, default is deny. Enum: [allow, deny, ipsec].
	Action pulumi.StringPtrOutput `pulumi:"action"`
	// ADOM name. default is 'root'.
	Adom pulumi.StringPtrOutput `pulumi:"adom"`
	// Name of an existing Application list.
	ApplicationLists pulumi.StringArrayOutput `pulumi:"applicationLists"`
	// Name of an existing Antivirus profile.
	AvProfiles pulumi.StringArrayOutput `pulumi:"avProfiles"`
	// Enable/disable capture packets.
	CapturePacket pulumi.StringPtrOutput `pulumi:"capturePacket"`
	// Comments.
	Comments pulumi.StringPtrOutput `pulumi:"comments"`
	// Name of an existing DNS filter profile.
	DnsfilterProfiles pulumi.StringArrayOutput `pulumi:"dnsfilterProfiles"`
	// Destination address and adress group names.
	Dstaddrs pulumi.StringArrayOutput `pulumi:"dstaddrs"`
	// Outgoing interface.
	Dstintfs pulumi.StringArrayOutput `pulumi:"dstintfs"`
	// Enable/disable to prevent source NAT from changing a session's source port.
	Fixedport pulumi.StringPtrOutput `pulumi:"fixedport"`
	// Enable/disable Fortinet Single Sign-On.
	Fsso pulumi.StringPtrOutput `pulumi:"fsso"`
	// Names of user groups that can authenticate with this policy.
	Groups pulumi.StringArrayOutput `pulumi:"groups"`
	// Policy-based IPsec VPN: only traffic from the remote network can initiate a VPN. Enum: [disable, enable]
	Inbound pulumi.StringPtrOutput `pulumi:"inbound"`
	// Enable/disable use of Destination Internet Services for this policy.
	InternetService pulumi.StringOutput `pulumi:"internetService"`
	// Destination Internet Service ID.
	InternetServiceIds pulumi.StringArrayOutput `pulumi:"internetServiceIds"`
	// Destination Internet Service Name.
	InternetServiceNames pulumi.StringArrayOutput `pulumi:"internetServiceNames"`
	// Enable/disable use of Source Internet Services for this policy.
	InternetServiceSrc pulumi.StringOutput `pulumi:"internetServiceSrc"`
	// Source Internet Service ID.
	InternetServiceSrcIds pulumi.StringArrayOutput `pulumi:"internetServiceSrcIds"`
	// Source Internet Service Name.
	InternetServiceSrcNames pulumi.StringArrayOutput `pulumi:"internetServiceSrcNames"`
	// Enable/disable to use IP Pools for source NAT.
	Ippool pulumi.StringPtrOutput `pulumi:"ippool"`
	// Name of an existing IPS sensor.
	IpsSensors pulumi.StringArrayOutput `pulumi:"ipsSensors"`
	// Enable or disable logging. Enum: [disable, all, utm]
	Logtraffic pulumi.StringPtrOutput `pulumi:"logtraffic"`
	// Record logs when a session starts and ends. Enum: [disable, enable]
	LogtrafficStart pulumi.StringPtrOutput `pulumi:"logtrafficStart"`
	// Policy name.
	Name pulumi.StringOutput `pulumi:"name"`
	// Enable/disable source NAT.
	Nat pulumi.StringPtrOutput `pulumi:"nat"`
	// The package name which the policy will be added to.
	PackageName pulumi.StringPtrOutput `pulumi:"packageName"`
	// Per-IP traffic shaper.
	PerIpShapers pulumi.StringArrayOutput `pulumi:"perIpShapers"`
	// IP Pool names.
	Poolnames pulumi.StringArrayOutput `pulumi:"poolnames"`
	// Name of profile group.
	ProfileGroups pulumi.StringArrayOutput `pulumi:"profileGroups"`
	// Name of an existing Protocol options profile.
	ProfileProtocolOptions pulumi.StringArrayOutput `pulumi:"profileProtocolOptions"`
	// Determine whether the firewall policy allows security profile groups or single profiles only. Enum: [single, group]
	ProfileType pulumi.StringPtrOutput `pulumi:"profileType"`
	// Enable/disable RADIUS Single Sign-On.
	Rsso pulumi.StringPtrOutput `pulumi:"rsso"`
	// Schedule name.
	Schedules pulumi.StringArrayOutput `pulumi:"schedules"`
	// Service and service group names.
	Services pulumi.StringArrayOutput `pulumi:"services"`
	// Source address and adress group names.
	Srcaddrs pulumi.StringArrayOutput `pulumi:"srcaddrs"`
	// Incoming interface.
	Srcintfs pulumi.StringArrayOutput `pulumi:"srcintfs"`
	// Reverse traffic shaper.
	TrafficShaperReverses pulumi.StringArrayOutput `pulumi:"trafficShaperReverses"`
	// Traffic shaper.
	TrafficShapers pulumi.StringArrayOutput `pulumi:"trafficShapers"`
	// Names of individual users that can authenticate with this policy.
	Users pulumi.StringArrayOutput `pulumi:"users"`
	// Enable/disable to add one or more security profiles (AV, IPS, etc.) to the firewall policy.
	UtmStatus  pulumi.StringPtrOutput   `pulumi:"utmStatus"`
	VpnTunnels pulumi.StringArrayOutput `pulumi:"vpnTunnels"`
	// Name of an existing Web application firewall profile.
	WafProfiles pulumi.StringArrayOutput `pulumi:"wafProfiles"`
	// Name of an existing Web filter profile.
	WebfilterProfiles pulumi.StringArrayOutput `pulumi:"webfilterProfiles"`
}

// NewFortimanagerFirewallSecurityPolicy registers a new resource with the given unique name, arguments, and options.
func NewFortimanagerFirewallSecurityPolicy(ctx *pulumi.Context,
	name string, args *FortimanagerFirewallSecurityPolicyArgs, opts ...pulumi.ResourceOption) (*FortimanagerFirewallSecurityPolicy, error) {
	if args == nil {
		return nil, errors.New("missing one or more required arguments")
	}

	if args.Dstaddrs == nil {
		return nil, errors.New("invalid value for required argument 'Dstaddrs'")
	}
	if args.Dstintfs == nil {
		return nil, errors.New("invalid value for required argument 'Dstintfs'")
	}
	if args.Schedules == nil {
		return nil, errors.New("invalid value for required argument 'Schedules'")
	}
	if args.Services == nil {
		return nil, errors.New("invalid value for required argument 'Services'")
	}
	if args.Srcaddrs == nil {
		return nil, errors.New("invalid value for required argument 'Srcaddrs'")
	}
	if args.Srcintfs == nil {
		return nil, errors.New("invalid value for required argument 'Srcintfs'")
	}
	opts = pkgResourceDefaultOpts(opts)
	var resource FortimanagerFirewallSecurityPolicy
	err := ctx.RegisterResource("fortios:index/fortimanagerFirewallSecurityPolicy:FortimanagerFirewallSecurityPolicy", name, args, &resource, opts...)
	if err != nil {
		return nil, err
	}
	return &resource, nil
}

// GetFortimanagerFirewallSecurityPolicy gets an existing FortimanagerFirewallSecurityPolicy resource's state with the given name, ID, and optional
// state properties that are used to uniquely qualify the lookup (nil if not required).
func GetFortimanagerFirewallSecurityPolicy(ctx *pulumi.Context,
	name string, id pulumi.IDInput, state *FortimanagerFirewallSecurityPolicyState, opts ...pulumi.ResourceOption) (*FortimanagerFirewallSecurityPolicy, error) {
	var resource FortimanagerFirewallSecurityPolicy
	err := ctx.ReadResource("fortios:index/fortimanagerFirewallSecurityPolicy:FortimanagerFirewallSecurityPolicy", name, id, state, &resource, opts...)
	if err != nil {
		return nil, err
	}
	return &resource, nil
}

// Input properties used for looking up and filtering FortimanagerFirewallSecurityPolicy resources.
type fortimanagerFirewallSecurityPolicyState struct {
	// Policy action, default is deny. Enum: [allow, deny, ipsec].
	Action *string `pulumi:"action"`
	// ADOM name. default is 'root'.
	Adom *string `pulumi:"adom"`
	// Name of an existing Application list.
	ApplicationLists []string `pulumi:"applicationLists"`
	// Name of an existing Antivirus profile.
	AvProfiles []string `pulumi:"avProfiles"`
	// Enable/disable capture packets.
	CapturePacket *string `pulumi:"capturePacket"`
	// Comments.
	Comments *string `pulumi:"comments"`
	// Name of an existing DNS filter profile.
	DnsfilterProfiles []string `pulumi:"dnsfilterProfiles"`
	// Destination address and adress group names.
	Dstaddrs []string `pulumi:"dstaddrs"`
	// Outgoing interface.
	Dstintfs []string `pulumi:"dstintfs"`
	// Enable/disable to prevent source NAT from changing a session's source port.
	Fixedport *string `pulumi:"fixedport"`
	// Enable/disable Fortinet Single Sign-On.
	Fsso *string `pulumi:"fsso"`
	// Names of user groups that can authenticate with this policy.
	Groups []string `pulumi:"groups"`
	// Policy-based IPsec VPN: only traffic from the remote network can initiate a VPN. Enum: [disable, enable]
	Inbound *string `pulumi:"inbound"`
	// Enable/disable use of Destination Internet Services for this policy.
	InternetService *string `pulumi:"internetService"`
	// Destination Internet Service ID.
	InternetServiceIds []string `pulumi:"internetServiceIds"`
	// Destination Internet Service Name.
	InternetServiceNames []string `pulumi:"internetServiceNames"`
	// Enable/disable use of Source Internet Services for this policy.
	InternetServiceSrc *string `pulumi:"internetServiceSrc"`
	// Source Internet Service ID.
	InternetServiceSrcIds []string `pulumi:"internetServiceSrcIds"`
	// Source Internet Service Name.
	InternetServiceSrcNames []string `pulumi:"internetServiceSrcNames"`
	// Enable/disable to use IP Pools for source NAT.
	Ippool *string `pulumi:"ippool"`
	// Name of an existing IPS sensor.
	IpsSensors []string `pulumi:"ipsSensors"`
	// Enable or disable logging. Enum: [disable, all, utm]
	Logtraffic *string `pulumi:"logtraffic"`
	// Record logs when a session starts and ends. Enum: [disable, enable]
	LogtrafficStart *string `pulumi:"logtrafficStart"`
	// Policy name.
	Name *string `pulumi:"name"`
	// Enable/disable source NAT.
	Nat *string `pulumi:"nat"`
	// The package name which the policy will be added to.
	PackageName *string `pulumi:"packageName"`
	// Per-IP traffic shaper.
	PerIpShapers []string `pulumi:"perIpShapers"`
	// IP Pool names.
	Poolnames []string `pulumi:"poolnames"`
	// Name of profile group.
	ProfileGroups []string `pulumi:"profileGroups"`
	// Name of an existing Protocol options profile.
	ProfileProtocolOptions []string `pulumi:"profileProtocolOptions"`
	// Determine whether the firewall policy allows security profile groups or single profiles only. Enum: [single, group]
	ProfileType *string `pulumi:"profileType"`
	// Enable/disable RADIUS Single Sign-On.
	Rsso *string `pulumi:"rsso"`
	// Schedule name.
	Schedules []string `pulumi:"schedules"`
	// Service and service group names.
	Services []string `pulumi:"services"`
	// Source address and adress group names.
	Srcaddrs []string `pulumi:"srcaddrs"`
	// Incoming interface.
	Srcintfs []string `pulumi:"srcintfs"`
	// Reverse traffic shaper.
	TrafficShaperReverses []string `pulumi:"trafficShaperReverses"`
	// Traffic shaper.
	TrafficShapers []string `pulumi:"trafficShapers"`
	// Names of individual users that can authenticate with this policy.
	Users []string `pulumi:"users"`
	// Enable/disable to add one or more security profiles (AV, IPS, etc.) to the firewall policy.
	UtmStatus  *string  `pulumi:"utmStatus"`
	VpnTunnels []string `pulumi:"vpnTunnels"`
	// Name of an existing Web application firewall profile.
	WafProfiles []string `pulumi:"wafProfiles"`
	// Name of an existing Web filter profile.
	WebfilterProfiles []string `pulumi:"webfilterProfiles"`
}

type FortimanagerFirewallSecurityPolicyState struct {
	// Policy action, default is deny. Enum: [allow, deny, ipsec].
	Action pulumi.StringPtrInput
	// ADOM name. default is 'root'.
	Adom pulumi.StringPtrInput
	// Name of an existing Application list.
	ApplicationLists pulumi.StringArrayInput
	// Name of an existing Antivirus profile.
	AvProfiles pulumi.StringArrayInput
	// Enable/disable capture packets.
	CapturePacket pulumi.StringPtrInput
	// Comments.
	Comments pulumi.StringPtrInput
	// Name of an existing DNS filter profile.
	DnsfilterProfiles pulumi.StringArrayInput
	// Destination address and adress group names.
	Dstaddrs pulumi.StringArrayInput
	// Outgoing interface.
	Dstintfs pulumi.StringArrayInput
	// Enable/disable to prevent source NAT from changing a session's source port.
	Fixedport pulumi.StringPtrInput
	// Enable/disable Fortinet Single Sign-On.
	Fsso pulumi.StringPtrInput
	// Names of user groups that can authenticate with this policy.
	Groups pulumi.StringArrayInput
	// Policy-based IPsec VPN: only traffic from the remote network can initiate a VPN. Enum: [disable, enable]
	Inbound pulumi.StringPtrInput
	// Enable/disable use of Destination Internet Services for this policy.
	InternetService pulumi.StringPtrInput
	// Destination Internet Service ID.
	InternetServiceIds pulumi.StringArrayInput
	// Destination Internet Service Name.
	InternetServiceNames pulumi.StringArrayInput
	// Enable/disable use of Source Internet Services for this policy.
	InternetServiceSrc pulumi.StringPtrInput
	// Source Internet Service ID.
	InternetServiceSrcIds pulumi.StringArrayInput
	// Source Internet Service Name.
	InternetServiceSrcNames pulumi.StringArrayInput
	// Enable/disable to use IP Pools for source NAT.
	Ippool pulumi.StringPtrInput
	// Name of an existing IPS sensor.
	IpsSensors pulumi.StringArrayInput
	// Enable or disable logging. Enum: [disable, all, utm]
	Logtraffic pulumi.StringPtrInput
	// Record logs when a session starts and ends. Enum: [disable, enable]
	LogtrafficStart pulumi.StringPtrInput
	// Policy name.
	Name pulumi.StringPtrInput
	// Enable/disable source NAT.
	Nat pulumi.StringPtrInput
	// The package name which the policy will be added to.
	PackageName pulumi.StringPtrInput
	// Per-IP traffic shaper.
	PerIpShapers pulumi.StringArrayInput
	// IP Pool names.
	Poolnames pulumi.StringArrayInput
	// Name of profile group.
	ProfileGroups pulumi.StringArrayInput
	// Name of an existing Protocol options profile.
	ProfileProtocolOptions pulumi.StringArrayInput
	// Determine whether the firewall policy allows security profile groups or single profiles only. Enum: [single, group]
	ProfileType pulumi.StringPtrInput
	// Enable/disable RADIUS Single Sign-On.
	Rsso pulumi.StringPtrInput
	// Schedule name.
	Schedules pulumi.StringArrayInput
	// Service and service group names.
	Services pulumi.StringArrayInput
	// Source address and adress group names.
	Srcaddrs pulumi.StringArrayInput
	// Incoming interface.
	Srcintfs pulumi.StringArrayInput
	// Reverse traffic shaper.
	TrafficShaperReverses pulumi.StringArrayInput
	// Traffic shaper.
	TrafficShapers pulumi.StringArrayInput
	// Names of individual users that can authenticate with this policy.
	Users pulumi.StringArrayInput
	// Enable/disable to add one or more security profiles (AV, IPS, etc.) to the firewall policy.
	UtmStatus  pulumi.StringPtrInput
	VpnTunnels pulumi.StringArrayInput
	// Name of an existing Web application firewall profile.
	WafProfiles pulumi.StringArrayInput
	// Name of an existing Web filter profile.
	WebfilterProfiles pulumi.StringArrayInput
}

func (FortimanagerFirewallSecurityPolicyState) ElementType() reflect.Type {
	return reflect.TypeOf((*fortimanagerFirewallSecurityPolicyState)(nil)).Elem()
}

type fortimanagerFirewallSecurityPolicyArgs struct {
	// Policy action, default is deny. Enum: [allow, deny, ipsec].
	Action *string `pulumi:"action"`
	// ADOM name. default is 'root'.
	Adom *string `pulumi:"adom"`
	// Name of an existing Application list.
	ApplicationLists []string `pulumi:"applicationLists"`
	// Name of an existing Antivirus profile.
	AvProfiles []string `pulumi:"avProfiles"`
	// Enable/disable capture packets.
	CapturePacket *string `pulumi:"capturePacket"`
	// Comments.
	Comments *string `pulumi:"comments"`
	// Name of an existing DNS filter profile.
	DnsfilterProfiles []string `pulumi:"dnsfilterProfiles"`
	// Destination address and adress group names.
	Dstaddrs []string `pulumi:"dstaddrs"`
	// Outgoing interface.
	Dstintfs []string `pulumi:"dstintfs"`
	// Enable/disable to prevent source NAT from changing a session's source port.
	Fixedport *string `pulumi:"fixedport"`
	// Enable/disable Fortinet Single Sign-On.
	Fsso *string `pulumi:"fsso"`
	// Names of user groups that can authenticate with this policy.
	Groups []string `pulumi:"groups"`
	// Policy-based IPsec VPN: only traffic from the remote network can initiate a VPN. Enum: [disable, enable]
	Inbound *string `pulumi:"inbound"`
	// Enable/disable use of Destination Internet Services for this policy.
	InternetService *string `pulumi:"internetService"`
	// Destination Internet Service ID.
	InternetServiceIds []string `pulumi:"internetServiceIds"`
	// Destination Internet Service Name.
	InternetServiceNames []string `pulumi:"internetServiceNames"`
	// Enable/disable use of Source Internet Services for this policy.
	InternetServiceSrc *string `pulumi:"internetServiceSrc"`
	// Source Internet Service ID.
	InternetServiceSrcIds []string `pulumi:"internetServiceSrcIds"`
	// Source Internet Service Name.
	InternetServiceSrcNames []string `pulumi:"internetServiceSrcNames"`
	// Enable/disable to use IP Pools for source NAT.
	Ippool *string `pulumi:"ippool"`
	// Name of an existing IPS sensor.
	IpsSensors []string `pulumi:"ipsSensors"`
	// Enable or disable logging. Enum: [disable, all, utm]
	Logtraffic *string `pulumi:"logtraffic"`
	// Record logs when a session starts and ends. Enum: [disable, enable]
	LogtrafficStart *string `pulumi:"logtrafficStart"`
	// Policy name.
	Name *string `pulumi:"name"`
	// Enable/disable source NAT.
	Nat *string `pulumi:"nat"`
	// The package name which the policy will be added to.
	PackageName *string `pulumi:"packageName"`
	// Per-IP traffic shaper.
	PerIpShapers []string `pulumi:"perIpShapers"`
	// IP Pool names.
	Poolnames []string `pulumi:"poolnames"`
	// Name of profile group.
	ProfileGroups []string `pulumi:"profileGroups"`
	// Name of an existing Protocol options profile.
	ProfileProtocolOptions []string `pulumi:"profileProtocolOptions"`
	// Determine whether the firewall policy allows security profile groups or single profiles only. Enum: [single, group]
	ProfileType *string `pulumi:"profileType"`
	// Enable/disable RADIUS Single Sign-On.
	Rsso *string `pulumi:"rsso"`
	// Schedule name.
	Schedules []string `pulumi:"schedules"`
	// Service and service group names.
	Services []string `pulumi:"services"`
	// Source address and adress group names.
	Srcaddrs []string `pulumi:"srcaddrs"`
	// Incoming interface.
	Srcintfs []string `pulumi:"srcintfs"`
	// Reverse traffic shaper.
	TrafficShaperReverses []string `pulumi:"trafficShaperReverses"`
	// Traffic shaper.
	TrafficShapers []string `pulumi:"trafficShapers"`
	// Names of individual users that can authenticate with this policy.
	Users []string `pulumi:"users"`
	// Enable/disable to add one or more security profiles (AV, IPS, etc.) to the firewall policy.
	UtmStatus  *string  `pulumi:"utmStatus"`
	VpnTunnels []string `pulumi:"vpnTunnels"`
	// Name of an existing Web application firewall profile.
	WafProfiles []string `pulumi:"wafProfiles"`
	// Name of an existing Web filter profile.
	WebfilterProfiles []string `pulumi:"webfilterProfiles"`
}

// The set of arguments for constructing a FortimanagerFirewallSecurityPolicy resource.
type FortimanagerFirewallSecurityPolicyArgs struct {
	// Policy action, default is deny. Enum: [allow, deny, ipsec].
	Action pulumi.StringPtrInput
	// ADOM name. default is 'root'.
	Adom pulumi.StringPtrInput
	// Name of an existing Application list.
	ApplicationLists pulumi.StringArrayInput
	// Name of an existing Antivirus profile.
	AvProfiles pulumi.StringArrayInput
	// Enable/disable capture packets.
	CapturePacket pulumi.StringPtrInput
	// Comments.
	Comments pulumi.StringPtrInput
	// Name of an existing DNS filter profile.
	DnsfilterProfiles pulumi.StringArrayInput
	// Destination address and adress group names.
	Dstaddrs pulumi.StringArrayInput
	// Outgoing interface.
	Dstintfs pulumi.StringArrayInput
	// Enable/disable to prevent source NAT from changing a session's source port.
	Fixedport pulumi.StringPtrInput
	// Enable/disable Fortinet Single Sign-On.
	Fsso pulumi.StringPtrInput
	// Names of user groups that can authenticate with this policy.
	Groups pulumi.StringArrayInput
	// Policy-based IPsec VPN: only traffic from the remote network can initiate a VPN. Enum: [disable, enable]
	Inbound pulumi.StringPtrInput
	// Enable/disable use of Destination Internet Services for this policy.
	InternetService pulumi.StringPtrInput
	// Destination Internet Service ID.
	InternetServiceIds pulumi.StringArrayInput
	// Destination Internet Service Name.
	InternetServiceNames pulumi.StringArrayInput
	// Enable/disable use of Source Internet Services for this policy.
	InternetServiceSrc pulumi.StringPtrInput
	// Source Internet Service ID.
	InternetServiceSrcIds pulumi.StringArrayInput
	// Source Internet Service Name.
	InternetServiceSrcNames pulumi.StringArrayInput
	// Enable/disable to use IP Pools for source NAT.
	Ippool pulumi.StringPtrInput
	// Name of an existing IPS sensor.
	IpsSensors pulumi.StringArrayInput
	// Enable or disable logging. Enum: [disable, all, utm]
	Logtraffic pulumi.StringPtrInput
	// Record logs when a session starts and ends. Enum: [disable, enable]
	LogtrafficStart pulumi.StringPtrInput
	// Policy name.
	Name pulumi.StringPtrInput
	// Enable/disable source NAT.
	Nat pulumi.StringPtrInput
	// The package name which the policy will be added to.
	PackageName pulumi.StringPtrInput
	// Per-IP traffic shaper.
	PerIpShapers pulumi.StringArrayInput
	// IP Pool names.
	Poolnames pulumi.StringArrayInput
	// Name of profile group.
	ProfileGroups pulumi.StringArrayInput
	// Name of an existing Protocol options profile.
	ProfileProtocolOptions pulumi.StringArrayInput
	// Determine whether the firewall policy allows security profile groups or single profiles only. Enum: [single, group]
	ProfileType pulumi.StringPtrInput
	// Enable/disable RADIUS Single Sign-On.
	Rsso pulumi.StringPtrInput
	// Schedule name.
	Schedules pulumi.StringArrayInput
	// Service and service group names.
	Services pulumi.StringArrayInput
	// Source address and adress group names.
	Srcaddrs pulumi.StringArrayInput
	// Incoming interface.
	Srcintfs pulumi.StringArrayInput
	// Reverse traffic shaper.
	TrafficShaperReverses pulumi.StringArrayInput
	// Traffic shaper.
	TrafficShapers pulumi.StringArrayInput
	// Names of individual users that can authenticate with this policy.
	Users pulumi.StringArrayInput
	// Enable/disable to add one or more security profiles (AV, IPS, etc.) to the firewall policy.
	UtmStatus  pulumi.StringPtrInput
	VpnTunnels pulumi.StringArrayInput
	// Name of an existing Web application firewall profile.
	WafProfiles pulumi.StringArrayInput
	// Name of an existing Web filter profile.
	WebfilterProfiles pulumi.StringArrayInput
}

func (FortimanagerFirewallSecurityPolicyArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*fortimanagerFirewallSecurityPolicyArgs)(nil)).Elem()
}

type FortimanagerFirewallSecurityPolicyInput interface {
	pulumi.Input

	ToFortimanagerFirewallSecurityPolicyOutput() FortimanagerFirewallSecurityPolicyOutput
	ToFortimanagerFirewallSecurityPolicyOutputWithContext(ctx context.Context) FortimanagerFirewallSecurityPolicyOutput
}

func (*FortimanagerFirewallSecurityPolicy) ElementType() reflect.Type {
	return reflect.TypeOf((**FortimanagerFirewallSecurityPolicy)(nil)).Elem()
}

func (i *FortimanagerFirewallSecurityPolicy) ToFortimanagerFirewallSecurityPolicyOutput() FortimanagerFirewallSecurityPolicyOutput {
	return i.ToFortimanagerFirewallSecurityPolicyOutputWithContext(context.Background())
}

func (i *FortimanagerFirewallSecurityPolicy) ToFortimanagerFirewallSecurityPolicyOutputWithContext(ctx context.Context) FortimanagerFirewallSecurityPolicyOutput {
	return pulumi.ToOutputWithContext(ctx, i).(FortimanagerFirewallSecurityPolicyOutput)
}

// FortimanagerFirewallSecurityPolicyArrayInput is an input type that accepts FortimanagerFirewallSecurityPolicyArray and FortimanagerFirewallSecurityPolicyArrayOutput values.
// You can construct a concrete instance of `FortimanagerFirewallSecurityPolicyArrayInput` via:
//
//          FortimanagerFirewallSecurityPolicyArray{ FortimanagerFirewallSecurityPolicyArgs{...} }
type FortimanagerFirewallSecurityPolicyArrayInput interface {
	pulumi.Input

	ToFortimanagerFirewallSecurityPolicyArrayOutput() FortimanagerFirewallSecurityPolicyArrayOutput
	ToFortimanagerFirewallSecurityPolicyArrayOutputWithContext(context.Context) FortimanagerFirewallSecurityPolicyArrayOutput
}

type FortimanagerFirewallSecurityPolicyArray []FortimanagerFirewallSecurityPolicyInput

func (FortimanagerFirewallSecurityPolicyArray) ElementType() reflect.Type {
	return reflect.TypeOf((*[]*FortimanagerFirewallSecurityPolicy)(nil)).Elem()
}

func (i FortimanagerFirewallSecurityPolicyArray) ToFortimanagerFirewallSecurityPolicyArrayOutput() FortimanagerFirewallSecurityPolicyArrayOutput {
	return i.ToFortimanagerFirewallSecurityPolicyArrayOutputWithContext(context.Background())
}

func (i FortimanagerFirewallSecurityPolicyArray) ToFortimanagerFirewallSecurityPolicyArrayOutputWithContext(ctx context.Context) FortimanagerFirewallSecurityPolicyArrayOutput {
	return pulumi.ToOutputWithContext(ctx, i).(FortimanagerFirewallSecurityPolicyArrayOutput)
}

// FortimanagerFirewallSecurityPolicyMapInput is an input type that accepts FortimanagerFirewallSecurityPolicyMap and FortimanagerFirewallSecurityPolicyMapOutput values.
// You can construct a concrete instance of `FortimanagerFirewallSecurityPolicyMapInput` via:
//
//          FortimanagerFirewallSecurityPolicyMap{ "key": FortimanagerFirewallSecurityPolicyArgs{...} }
type FortimanagerFirewallSecurityPolicyMapInput interface {
	pulumi.Input

	ToFortimanagerFirewallSecurityPolicyMapOutput() FortimanagerFirewallSecurityPolicyMapOutput
	ToFortimanagerFirewallSecurityPolicyMapOutputWithContext(context.Context) FortimanagerFirewallSecurityPolicyMapOutput
}

type FortimanagerFirewallSecurityPolicyMap map[string]FortimanagerFirewallSecurityPolicyInput

func (FortimanagerFirewallSecurityPolicyMap) ElementType() reflect.Type {
	return reflect.TypeOf((*map[string]*FortimanagerFirewallSecurityPolicy)(nil)).Elem()
}

func (i FortimanagerFirewallSecurityPolicyMap) ToFortimanagerFirewallSecurityPolicyMapOutput() FortimanagerFirewallSecurityPolicyMapOutput {
	return i.ToFortimanagerFirewallSecurityPolicyMapOutputWithContext(context.Background())
}

func (i FortimanagerFirewallSecurityPolicyMap) ToFortimanagerFirewallSecurityPolicyMapOutputWithContext(ctx context.Context) FortimanagerFirewallSecurityPolicyMapOutput {
	return pulumi.ToOutputWithContext(ctx, i).(FortimanagerFirewallSecurityPolicyMapOutput)
}

type FortimanagerFirewallSecurityPolicyOutput struct{ *pulumi.OutputState }

func (FortimanagerFirewallSecurityPolicyOutput) ElementType() reflect.Type {
	return reflect.TypeOf((**FortimanagerFirewallSecurityPolicy)(nil)).Elem()
}

func (o FortimanagerFirewallSecurityPolicyOutput) ToFortimanagerFirewallSecurityPolicyOutput() FortimanagerFirewallSecurityPolicyOutput {
	return o
}

func (o FortimanagerFirewallSecurityPolicyOutput) ToFortimanagerFirewallSecurityPolicyOutputWithContext(ctx context.Context) FortimanagerFirewallSecurityPolicyOutput {
	return o
}

type FortimanagerFirewallSecurityPolicyArrayOutput struct{ *pulumi.OutputState }

func (FortimanagerFirewallSecurityPolicyArrayOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*[]*FortimanagerFirewallSecurityPolicy)(nil)).Elem()
}

func (o FortimanagerFirewallSecurityPolicyArrayOutput) ToFortimanagerFirewallSecurityPolicyArrayOutput() FortimanagerFirewallSecurityPolicyArrayOutput {
	return o
}

func (o FortimanagerFirewallSecurityPolicyArrayOutput) ToFortimanagerFirewallSecurityPolicyArrayOutputWithContext(ctx context.Context) FortimanagerFirewallSecurityPolicyArrayOutput {
	return o
}

func (o FortimanagerFirewallSecurityPolicyArrayOutput) Index(i pulumi.IntInput) FortimanagerFirewallSecurityPolicyOutput {
	return pulumi.All(o, i).ApplyT(func(vs []interface{}) *FortimanagerFirewallSecurityPolicy {
		return vs[0].([]*FortimanagerFirewallSecurityPolicy)[vs[1].(int)]
	}).(FortimanagerFirewallSecurityPolicyOutput)
}

type FortimanagerFirewallSecurityPolicyMapOutput struct{ *pulumi.OutputState }

func (FortimanagerFirewallSecurityPolicyMapOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*map[string]*FortimanagerFirewallSecurityPolicy)(nil)).Elem()
}

func (o FortimanagerFirewallSecurityPolicyMapOutput) ToFortimanagerFirewallSecurityPolicyMapOutput() FortimanagerFirewallSecurityPolicyMapOutput {
	return o
}

func (o FortimanagerFirewallSecurityPolicyMapOutput) ToFortimanagerFirewallSecurityPolicyMapOutputWithContext(ctx context.Context) FortimanagerFirewallSecurityPolicyMapOutput {
	return o
}

func (o FortimanagerFirewallSecurityPolicyMapOutput) MapIndex(k pulumi.StringInput) FortimanagerFirewallSecurityPolicyOutput {
	return pulumi.All(o, k).ApplyT(func(vs []interface{}) *FortimanagerFirewallSecurityPolicy {
		return vs[0].(map[string]*FortimanagerFirewallSecurityPolicy)[vs[1].(string)]
	}).(FortimanagerFirewallSecurityPolicyOutput)
}

func init() {
	pulumi.RegisterInputType(reflect.TypeOf((*FortimanagerFirewallSecurityPolicyInput)(nil)).Elem(), &FortimanagerFirewallSecurityPolicy{})
	pulumi.RegisterInputType(reflect.TypeOf((*FortimanagerFirewallSecurityPolicyArrayInput)(nil)).Elem(), FortimanagerFirewallSecurityPolicyArray{})
	pulumi.RegisterInputType(reflect.TypeOf((*FortimanagerFirewallSecurityPolicyMapInput)(nil)).Elem(), FortimanagerFirewallSecurityPolicyMap{})
	pulumi.RegisterOutputType(FortimanagerFirewallSecurityPolicyOutput{})
	pulumi.RegisterOutputType(FortimanagerFirewallSecurityPolicyArrayOutput{})
	pulumi.RegisterOutputType(FortimanagerFirewallSecurityPolicyMapOutput{})
}
