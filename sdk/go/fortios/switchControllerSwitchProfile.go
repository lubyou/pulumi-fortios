// Code generated by the Pulumi Terraform Bridge (tfgen) Tool DO NOT EDIT.
// *** WARNING: Do not edit by hand unless you're certain you know what you are doing! ***

package fortios

import (
	"context"
	"reflect"

	"github.com/lubyou/pulumi-fortios/sdk/go/fortios/internal"
	"github.com/pulumi/pulumi/sdk/v3/go/pulumi"
	"github.com/pulumi/pulumi/sdk/v3/go/pulumix"
)

type SwitchControllerSwitchProfile struct {
	pulumi.CustomResourceState

	Login                   pulumi.StringOutput    `pulumi:"login"`
	LoginPasswd             pulumi.StringPtrOutput `pulumi:"loginPasswd"`
	LoginPasswdOverride     pulumi.StringOutput    `pulumi:"loginPasswdOverride"`
	Name                    pulumi.StringOutput    `pulumi:"name"`
	RevisionBackupOnLogout  pulumi.StringOutput    `pulumi:"revisionBackupOnLogout"`
	RevisionBackupOnUpgrade pulumi.StringOutput    `pulumi:"revisionBackupOnUpgrade"`
	Vdomparam               pulumi.StringPtrOutput `pulumi:"vdomparam"`
}

// NewSwitchControllerSwitchProfile registers a new resource with the given unique name, arguments, and options.
func NewSwitchControllerSwitchProfile(ctx *pulumi.Context,
	name string, args *SwitchControllerSwitchProfileArgs, opts ...pulumi.ResourceOption) (*SwitchControllerSwitchProfile, error) {
	if args == nil {
		args = &SwitchControllerSwitchProfileArgs{}
	}

	if args.LoginPasswd != nil {
		args.LoginPasswd = pulumi.ToSecret(args.LoginPasswd).(pulumi.StringPtrInput)
	}
	secrets := pulumi.AdditionalSecretOutputs([]string{
		"loginPasswd",
	})
	opts = append(opts, secrets)
	opts = internal.PkgResourceDefaultOpts(opts)
	var resource SwitchControllerSwitchProfile
	err := ctx.RegisterResource("fortios:index/switchControllerSwitchProfile:SwitchControllerSwitchProfile", name, args, &resource, opts...)
	if err != nil {
		return nil, err
	}
	return &resource, nil
}

// GetSwitchControllerSwitchProfile gets an existing SwitchControllerSwitchProfile resource's state with the given name, ID, and optional
// state properties that are used to uniquely qualify the lookup (nil if not required).
func GetSwitchControllerSwitchProfile(ctx *pulumi.Context,
	name string, id pulumi.IDInput, state *SwitchControllerSwitchProfileState, opts ...pulumi.ResourceOption) (*SwitchControllerSwitchProfile, error) {
	var resource SwitchControllerSwitchProfile
	err := ctx.ReadResource("fortios:index/switchControllerSwitchProfile:SwitchControllerSwitchProfile", name, id, state, &resource, opts...)
	if err != nil {
		return nil, err
	}
	return &resource, nil
}

// Input properties used for looking up and filtering SwitchControllerSwitchProfile resources.
type switchControllerSwitchProfileState struct {
	Login                   *string `pulumi:"login"`
	LoginPasswd             *string `pulumi:"loginPasswd"`
	LoginPasswdOverride     *string `pulumi:"loginPasswdOverride"`
	Name                    *string `pulumi:"name"`
	RevisionBackupOnLogout  *string `pulumi:"revisionBackupOnLogout"`
	RevisionBackupOnUpgrade *string `pulumi:"revisionBackupOnUpgrade"`
	Vdomparam               *string `pulumi:"vdomparam"`
}

type SwitchControllerSwitchProfileState struct {
	Login                   pulumi.StringPtrInput
	LoginPasswd             pulumi.StringPtrInput
	LoginPasswdOverride     pulumi.StringPtrInput
	Name                    pulumi.StringPtrInput
	RevisionBackupOnLogout  pulumi.StringPtrInput
	RevisionBackupOnUpgrade pulumi.StringPtrInput
	Vdomparam               pulumi.StringPtrInput
}

func (SwitchControllerSwitchProfileState) ElementType() reflect.Type {
	return reflect.TypeOf((*switchControllerSwitchProfileState)(nil)).Elem()
}

type switchControllerSwitchProfileArgs struct {
	Login                   *string `pulumi:"login"`
	LoginPasswd             *string `pulumi:"loginPasswd"`
	LoginPasswdOverride     *string `pulumi:"loginPasswdOverride"`
	Name                    *string `pulumi:"name"`
	RevisionBackupOnLogout  *string `pulumi:"revisionBackupOnLogout"`
	RevisionBackupOnUpgrade *string `pulumi:"revisionBackupOnUpgrade"`
	Vdomparam               *string `pulumi:"vdomparam"`
}

// The set of arguments for constructing a SwitchControllerSwitchProfile resource.
type SwitchControllerSwitchProfileArgs struct {
	Login                   pulumi.StringPtrInput
	LoginPasswd             pulumi.StringPtrInput
	LoginPasswdOverride     pulumi.StringPtrInput
	Name                    pulumi.StringPtrInput
	RevisionBackupOnLogout  pulumi.StringPtrInput
	RevisionBackupOnUpgrade pulumi.StringPtrInput
	Vdomparam               pulumi.StringPtrInput
}

func (SwitchControllerSwitchProfileArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*switchControllerSwitchProfileArgs)(nil)).Elem()
}

type SwitchControllerSwitchProfileInput interface {
	pulumi.Input

	ToSwitchControllerSwitchProfileOutput() SwitchControllerSwitchProfileOutput
	ToSwitchControllerSwitchProfileOutputWithContext(ctx context.Context) SwitchControllerSwitchProfileOutput
}

func (*SwitchControllerSwitchProfile) ElementType() reflect.Type {
	return reflect.TypeOf((**SwitchControllerSwitchProfile)(nil)).Elem()
}

func (i *SwitchControllerSwitchProfile) ToSwitchControllerSwitchProfileOutput() SwitchControllerSwitchProfileOutput {
	return i.ToSwitchControllerSwitchProfileOutputWithContext(context.Background())
}

func (i *SwitchControllerSwitchProfile) ToSwitchControllerSwitchProfileOutputWithContext(ctx context.Context) SwitchControllerSwitchProfileOutput {
	return pulumi.ToOutputWithContext(ctx, i).(SwitchControllerSwitchProfileOutput)
}

func (i *SwitchControllerSwitchProfile) ToOutput(ctx context.Context) pulumix.Output[*SwitchControllerSwitchProfile] {
	return pulumix.Output[*SwitchControllerSwitchProfile]{
		OutputState: i.ToSwitchControllerSwitchProfileOutputWithContext(ctx).OutputState,
	}
}

// SwitchControllerSwitchProfileArrayInput is an input type that accepts SwitchControllerSwitchProfileArray and SwitchControllerSwitchProfileArrayOutput values.
// You can construct a concrete instance of `SwitchControllerSwitchProfileArrayInput` via:
//
//	SwitchControllerSwitchProfileArray{ SwitchControllerSwitchProfileArgs{...} }
type SwitchControllerSwitchProfileArrayInput interface {
	pulumi.Input

	ToSwitchControllerSwitchProfileArrayOutput() SwitchControllerSwitchProfileArrayOutput
	ToSwitchControllerSwitchProfileArrayOutputWithContext(context.Context) SwitchControllerSwitchProfileArrayOutput
}

type SwitchControllerSwitchProfileArray []SwitchControllerSwitchProfileInput

func (SwitchControllerSwitchProfileArray) ElementType() reflect.Type {
	return reflect.TypeOf((*[]*SwitchControllerSwitchProfile)(nil)).Elem()
}

func (i SwitchControllerSwitchProfileArray) ToSwitchControllerSwitchProfileArrayOutput() SwitchControllerSwitchProfileArrayOutput {
	return i.ToSwitchControllerSwitchProfileArrayOutputWithContext(context.Background())
}

func (i SwitchControllerSwitchProfileArray) ToSwitchControllerSwitchProfileArrayOutputWithContext(ctx context.Context) SwitchControllerSwitchProfileArrayOutput {
	return pulumi.ToOutputWithContext(ctx, i).(SwitchControllerSwitchProfileArrayOutput)
}

func (i SwitchControllerSwitchProfileArray) ToOutput(ctx context.Context) pulumix.Output[[]*SwitchControllerSwitchProfile] {
	return pulumix.Output[[]*SwitchControllerSwitchProfile]{
		OutputState: i.ToSwitchControllerSwitchProfileArrayOutputWithContext(ctx).OutputState,
	}
}

// SwitchControllerSwitchProfileMapInput is an input type that accepts SwitchControllerSwitchProfileMap and SwitchControllerSwitchProfileMapOutput values.
// You can construct a concrete instance of `SwitchControllerSwitchProfileMapInput` via:
//
//	SwitchControllerSwitchProfileMap{ "key": SwitchControllerSwitchProfileArgs{...} }
type SwitchControllerSwitchProfileMapInput interface {
	pulumi.Input

	ToSwitchControllerSwitchProfileMapOutput() SwitchControllerSwitchProfileMapOutput
	ToSwitchControllerSwitchProfileMapOutputWithContext(context.Context) SwitchControllerSwitchProfileMapOutput
}

type SwitchControllerSwitchProfileMap map[string]SwitchControllerSwitchProfileInput

func (SwitchControllerSwitchProfileMap) ElementType() reflect.Type {
	return reflect.TypeOf((*map[string]*SwitchControllerSwitchProfile)(nil)).Elem()
}

func (i SwitchControllerSwitchProfileMap) ToSwitchControllerSwitchProfileMapOutput() SwitchControllerSwitchProfileMapOutput {
	return i.ToSwitchControllerSwitchProfileMapOutputWithContext(context.Background())
}

func (i SwitchControllerSwitchProfileMap) ToSwitchControllerSwitchProfileMapOutputWithContext(ctx context.Context) SwitchControllerSwitchProfileMapOutput {
	return pulumi.ToOutputWithContext(ctx, i).(SwitchControllerSwitchProfileMapOutput)
}

func (i SwitchControllerSwitchProfileMap) ToOutput(ctx context.Context) pulumix.Output[map[string]*SwitchControllerSwitchProfile] {
	return pulumix.Output[map[string]*SwitchControllerSwitchProfile]{
		OutputState: i.ToSwitchControllerSwitchProfileMapOutputWithContext(ctx).OutputState,
	}
}

type SwitchControllerSwitchProfileOutput struct{ *pulumi.OutputState }

func (SwitchControllerSwitchProfileOutput) ElementType() reflect.Type {
	return reflect.TypeOf((**SwitchControllerSwitchProfile)(nil)).Elem()
}

func (o SwitchControllerSwitchProfileOutput) ToSwitchControllerSwitchProfileOutput() SwitchControllerSwitchProfileOutput {
	return o
}

func (o SwitchControllerSwitchProfileOutput) ToSwitchControllerSwitchProfileOutputWithContext(ctx context.Context) SwitchControllerSwitchProfileOutput {
	return o
}

func (o SwitchControllerSwitchProfileOutput) ToOutput(ctx context.Context) pulumix.Output[*SwitchControllerSwitchProfile] {
	return pulumix.Output[*SwitchControllerSwitchProfile]{
		OutputState: o.OutputState,
	}
}

func (o SwitchControllerSwitchProfileOutput) Login() pulumi.StringOutput {
	return o.ApplyT(func(v *SwitchControllerSwitchProfile) pulumi.StringOutput { return v.Login }).(pulumi.StringOutput)
}

func (o SwitchControllerSwitchProfileOutput) LoginPasswd() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *SwitchControllerSwitchProfile) pulumi.StringPtrOutput { return v.LoginPasswd }).(pulumi.StringPtrOutput)
}

func (o SwitchControllerSwitchProfileOutput) LoginPasswdOverride() pulumi.StringOutput {
	return o.ApplyT(func(v *SwitchControllerSwitchProfile) pulumi.StringOutput { return v.LoginPasswdOverride }).(pulumi.StringOutput)
}

func (o SwitchControllerSwitchProfileOutput) Name() pulumi.StringOutput {
	return o.ApplyT(func(v *SwitchControllerSwitchProfile) pulumi.StringOutput { return v.Name }).(pulumi.StringOutput)
}

func (o SwitchControllerSwitchProfileOutput) RevisionBackupOnLogout() pulumi.StringOutput {
	return o.ApplyT(func(v *SwitchControllerSwitchProfile) pulumi.StringOutput { return v.RevisionBackupOnLogout }).(pulumi.StringOutput)
}

func (o SwitchControllerSwitchProfileOutput) RevisionBackupOnUpgrade() pulumi.StringOutput {
	return o.ApplyT(func(v *SwitchControllerSwitchProfile) pulumi.StringOutput { return v.RevisionBackupOnUpgrade }).(pulumi.StringOutput)
}

func (o SwitchControllerSwitchProfileOutput) Vdomparam() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *SwitchControllerSwitchProfile) pulumi.StringPtrOutput { return v.Vdomparam }).(pulumi.StringPtrOutput)
}

type SwitchControllerSwitchProfileArrayOutput struct{ *pulumi.OutputState }

func (SwitchControllerSwitchProfileArrayOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*[]*SwitchControllerSwitchProfile)(nil)).Elem()
}

func (o SwitchControllerSwitchProfileArrayOutput) ToSwitchControllerSwitchProfileArrayOutput() SwitchControllerSwitchProfileArrayOutput {
	return o
}

func (o SwitchControllerSwitchProfileArrayOutput) ToSwitchControllerSwitchProfileArrayOutputWithContext(ctx context.Context) SwitchControllerSwitchProfileArrayOutput {
	return o
}

func (o SwitchControllerSwitchProfileArrayOutput) ToOutput(ctx context.Context) pulumix.Output[[]*SwitchControllerSwitchProfile] {
	return pulumix.Output[[]*SwitchControllerSwitchProfile]{
		OutputState: o.OutputState,
	}
}

func (o SwitchControllerSwitchProfileArrayOutput) Index(i pulumi.IntInput) SwitchControllerSwitchProfileOutput {
	return pulumi.All(o, i).ApplyT(func(vs []interface{}) *SwitchControllerSwitchProfile {
		return vs[0].([]*SwitchControllerSwitchProfile)[vs[1].(int)]
	}).(SwitchControllerSwitchProfileOutput)
}

type SwitchControllerSwitchProfileMapOutput struct{ *pulumi.OutputState }

func (SwitchControllerSwitchProfileMapOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*map[string]*SwitchControllerSwitchProfile)(nil)).Elem()
}

func (o SwitchControllerSwitchProfileMapOutput) ToSwitchControllerSwitchProfileMapOutput() SwitchControllerSwitchProfileMapOutput {
	return o
}

func (o SwitchControllerSwitchProfileMapOutput) ToSwitchControllerSwitchProfileMapOutputWithContext(ctx context.Context) SwitchControllerSwitchProfileMapOutput {
	return o
}

func (o SwitchControllerSwitchProfileMapOutput) ToOutput(ctx context.Context) pulumix.Output[map[string]*SwitchControllerSwitchProfile] {
	return pulumix.Output[map[string]*SwitchControllerSwitchProfile]{
		OutputState: o.OutputState,
	}
}

func (o SwitchControllerSwitchProfileMapOutput) MapIndex(k pulumi.StringInput) SwitchControllerSwitchProfileOutput {
	return pulumi.All(o, k).ApplyT(func(vs []interface{}) *SwitchControllerSwitchProfile {
		return vs[0].(map[string]*SwitchControllerSwitchProfile)[vs[1].(string)]
	}).(SwitchControllerSwitchProfileOutput)
}

func init() {
	pulumi.RegisterInputType(reflect.TypeOf((*SwitchControllerSwitchProfileInput)(nil)).Elem(), &SwitchControllerSwitchProfile{})
	pulumi.RegisterInputType(reflect.TypeOf((*SwitchControllerSwitchProfileArrayInput)(nil)).Elem(), SwitchControllerSwitchProfileArray{})
	pulumi.RegisterInputType(reflect.TypeOf((*SwitchControllerSwitchProfileMapInput)(nil)).Elem(), SwitchControllerSwitchProfileMap{})
	pulumi.RegisterOutputType(SwitchControllerSwitchProfileOutput{})
	pulumi.RegisterOutputType(SwitchControllerSwitchProfileArrayOutput{})
	pulumi.RegisterOutputType(SwitchControllerSwitchProfileMapOutput{})
}
