// Code generated by the Pulumi Terraform Bridge (tfgen) Tool DO NOT EDIT.
// *** WARNING: Do not edit by hand unless you're certain you know what you are doing! ***

package fortios

import (
	"context"
	"reflect"

	"github.com/pkg/errors"
	"github.com/pulumi/pulumi/sdk/v3/go/pulumi"
)

// Configure proxy-ARP.
//
// ## Example Usage
//
// ```go
// package main
//
// import (
// 	"github.com/lubyou/pulumi-fortios/sdk/go/fortios"
// 	"github.com/pulumi/pulumi/sdk/v3/go/pulumi"
// )
//
// func main() {
// 	pulumi.Run(func(ctx *pulumi.Context) error {
// 		_, err := fortios.NewSystemProxyArp(ctx, "trname", &fortios.SystemProxyArpArgs{
// 			EndIp:     pulumi.String("1.1.1.3"),
// 			Fosid:     pulumi.Int(1),
// 			Interface: pulumi.String("port4"),
// 			Ip:        pulumi.String("1.1.1.1"),
// 		})
// 		if err != nil {
// 			return err
// 		}
// 		return nil
// 	})
// }
// ```
//
// ## Import
//
// System ProxyArp can be imported using any of these accepted formats
//
// ```sh
//  $ pulumi import fortios:index/systemProxyArp:SystemProxyArp labelname {{fosid}}
// ```
//
//  If you do not want to import arguments of block$ export "FORTIOS_IMPORT_TABLE"="false"
//
// ```sh
//  $ pulumi import fortios:index/systemProxyArp:SystemProxyArp labelname {{fosid}}
// ```
//
//  $ unset "FORTIOS_IMPORT_TABLE"
type SystemProxyArp struct {
	pulumi.CustomResourceState

	// End IP of IP range to be proxied.
	EndIp pulumi.StringOutput `pulumi:"endIp"`
	// Unique integer ID of the entry.
	Fosid pulumi.IntOutput `pulumi:"fosid"`
	// Interface acting proxy-ARP.
	Interface pulumi.StringOutput `pulumi:"interface"`
	// IP address or start IP to be proxied.
	Ip pulumi.StringOutput `pulumi:"ip"`
	// Specifies the vdom to which the resource will be applied when the FortiGate unit is running in VDOM mode. Only one vdom can be specified. If you want to inherit the vdom configuration of the provider, please do not set this parameter.
	Vdomparam pulumi.StringPtrOutput `pulumi:"vdomparam"`
}

// NewSystemProxyArp registers a new resource with the given unique name, arguments, and options.
func NewSystemProxyArp(ctx *pulumi.Context,
	name string, args *SystemProxyArpArgs, opts ...pulumi.ResourceOption) (*SystemProxyArp, error) {
	if args == nil {
		return nil, errors.New("missing one or more required arguments")
	}

	if args.Fosid == nil {
		return nil, errors.New("invalid value for required argument 'Fosid'")
	}
	if args.Interface == nil {
		return nil, errors.New("invalid value for required argument 'Interface'")
	}
	if args.Ip == nil {
		return nil, errors.New("invalid value for required argument 'Ip'")
	}
	opts = pkgResourceDefaultOpts(opts)
	var resource SystemProxyArp
	err := ctx.RegisterResource("fortios:index/systemProxyArp:SystemProxyArp", name, args, &resource, opts...)
	if err != nil {
		return nil, err
	}
	return &resource, nil
}

// GetSystemProxyArp gets an existing SystemProxyArp resource's state with the given name, ID, and optional
// state properties that are used to uniquely qualify the lookup (nil if not required).
func GetSystemProxyArp(ctx *pulumi.Context,
	name string, id pulumi.IDInput, state *SystemProxyArpState, opts ...pulumi.ResourceOption) (*SystemProxyArp, error) {
	var resource SystemProxyArp
	err := ctx.ReadResource("fortios:index/systemProxyArp:SystemProxyArp", name, id, state, &resource, opts...)
	if err != nil {
		return nil, err
	}
	return &resource, nil
}

// Input properties used for looking up and filtering SystemProxyArp resources.
type systemProxyArpState struct {
	// End IP of IP range to be proxied.
	EndIp *string `pulumi:"endIp"`
	// Unique integer ID of the entry.
	Fosid *int `pulumi:"fosid"`
	// Interface acting proxy-ARP.
	Interface *string `pulumi:"interface"`
	// IP address or start IP to be proxied.
	Ip *string `pulumi:"ip"`
	// Specifies the vdom to which the resource will be applied when the FortiGate unit is running in VDOM mode. Only one vdom can be specified. If you want to inherit the vdom configuration of the provider, please do not set this parameter.
	Vdomparam *string `pulumi:"vdomparam"`
}

type SystemProxyArpState struct {
	// End IP of IP range to be proxied.
	EndIp pulumi.StringPtrInput
	// Unique integer ID of the entry.
	Fosid pulumi.IntPtrInput
	// Interface acting proxy-ARP.
	Interface pulumi.StringPtrInput
	// IP address or start IP to be proxied.
	Ip pulumi.StringPtrInput
	// Specifies the vdom to which the resource will be applied when the FortiGate unit is running in VDOM mode. Only one vdom can be specified. If you want to inherit the vdom configuration of the provider, please do not set this parameter.
	Vdomparam pulumi.StringPtrInput
}

func (SystemProxyArpState) ElementType() reflect.Type {
	return reflect.TypeOf((*systemProxyArpState)(nil)).Elem()
}

type systemProxyArpArgs struct {
	// End IP of IP range to be proxied.
	EndIp *string `pulumi:"endIp"`
	// Unique integer ID of the entry.
	Fosid int `pulumi:"fosid"`
	// Interface acting proxy-ARP.
	Interface string `pulumi:"interface"`
	// IP address or start IP to be proxied.
	Ip string `pulumi:"ip"`
	// Specifies the vdom to which the resource will be applied when the FortiGate unit is running in VDOM mode. Only one vdom can be specified. If you want to inherit the vdom configuration of the provider, please do not set this parameter.
	Vdomparam *string `pulumi:"vdomparam"`
}

// The set of arguments for constructing a SystemProxyArp resource.
type SystemProxyArpArgs struct {
	// End IP of IP range to be proxied.
	EndIp pulumi.StringPtrInput
	// Unique integer ID of the entry.
	Fosid pulumi.IntInput
	// Interface acting proxy-ARP.
	Interface pulumi.StringInput
	// IP address or start IP to be proxied.
	Ip pulumi.StringInput
	// Specifies the vdom to which the resource will be applied when the FortiGate unit is running in VDOM mode. Only one vdom can be specified. If you want to inherit the vdom configuration of the provider, please do not set this parameter.
	Vdomparam pulumi.StringPtrInput
}

func (SystemProxyArpArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*systemProxyArpArgs)(nil)).Elem()
}

type SystemProxyArpInput interface {
	pulumi.Input

	ToSystemProxyArpOutput() SystemProxyArpOutput
	ToSystemProxyArpOutputWithContext(ctx context.Context) SystemProxyArpOutput
}

func (*SystemProxyArp) ElementType() reflect.Type {
	return reflect.TypeOf((**SystemProxyArp)(nil)).Elem()
}

func (i *SystemProxyArp) ToSystemProxyArpOutput() SystemProxyArpOutput {
	return i.ToSystemProxyArpOutputWithContext(context.Background())
}

func (i *SystemProxyArp) ToSystemProxyArpOutputWithContext(ctx context.Context) SystemProxyArpOutput {
	return pulumi.ToOutputWithContext(ctx, i).(SystemProxyArpOutput)
}

// SystemProxyArpArrayInput is an input type that accepts SystemProxyArpArray and SystemProxyArpArrayOutput values.
// You can construct a concrete instance of `SystemProxyArpArrayInput` via:
//
//          SystemProxyArpArray{ SystemProxyArpArgs{...} }
type SystemProxyArpArrayInput interface {
	pulumi.Input

	ToSystemProxyArpArrayOutput() SystemProxyArpArrayOutput
	ToSystemProxyArpArrayOutputWithContext(context.Context) SystemProxyArpArrayOutput
}

type SystemProxyArpArray []SystemProxyArpInput

func (SystemProxyArpArray) ElementType() reflect.Type {
	return reflect.TypeOf((*[]*SystemProxyArp)(nil)).Elem()
}

func (i SystemProxyArpArray) ToSystemProxyArpArrayOutput() SystemProxyArpArrayOutput {
	return i.ToSystemProxyArpArrayOutputWithContext(context.Background())
}

func (i SystemProxyArpArray) ToSystemProxyArpArrayOutputWithContext(ctx context.Context) SystemProxyArpArrayOutput {
	return pulumi.ToOutputWithContext(ctx, i).(SystemProxyArpArrayOutput)
}

// SystemProxyArpMapInput is an input type that accepts SystemProxyArpMap and SystemProxyArpMapOutput values.
// You can construct a concrete instance of `SystemProxyArpMapInput` via:
//
//          SystemProxyArpMap{ "key": SystemProxyArpArgs{...} }
type SystemProxyArpMapInput interface {
	pulumi.Input

	ToSystemProxyArpMapOutput() SystemProxyArpMapOutput
	ToSystemProxyArpMapOutputWithContext(context.Context) SystemProxyArpMapOutput
}

type SystemProxyArpMap map[string]SystemProxyArpInput

func (SystemProxyArpMap) ElementType() reflect.Type {
	return reflect.TypeOf((*map[string]*SystemProxyArp)(nil)).Elem()
}

func (i SystemProxyArpMap) ToSystemProxyArpMapOutput() SystemProxyArpMapOutput {
	return i.ToSystemProxyArpMapOutputWithContext(context.Background())
}

func (i SystemProxyArpMap) ToSystemProxyArpMapOutputWithContext(ctx context.Context) SystemProxyArpMapOutput {
	return pulumi.ToOutputWithContext(ctx, i).(SystemProxyArpMapOutput)
}

type SystemProxyArpOutput struct{ *pulumi.OutputState }

func (SystemProxyArpOutput) ElementType() reflect.Type {
	return reflect.TypeOf((**SystemProxyArp)(nil)).Elem()
}

func (o SystemProxyArpOutput) ToSystemProxyArpOutput() SystemProxyArpOutput {
	return o
}

func (o SystemProxyArpOutput) ToSystemProxyArpOutputWithContext(ctx context.Context) SystemProxyArpOutput {
	return o
}

type SystemProxyArpArrayOutput struct{ *pulumi.OutputState }

func (SystemProxyArpArrayOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*[]*SystemProxyArp)(nil)).Elem()
}

func (o SystemProxyArpArrayOutput) ToSystemProxyArpArrayOutput() SystemProxyArpArrayOutput {
	return o
}

func (o SystemProxyArpArrayOutput) ToSystemProxyArpArrayOutputWithContext(ctx context.Context) SystemProxyArpArrayOutput {
	return o
}

func (o SystemProxyArpArrayOutput) Index(i pulumi.IntInput) SystemProxyArpOutput {
	return pulumi.All(o, i).ApplyT(func(vs []interface{}) *SystemProxyArp {
		return vs[0].([]*SystemProxyArp)[vs[1].(int)]
	}).(SystemProxyArpOutput)
}

type SystemProxyArpMapOutput struct{ *pulumi.OutputState }

func (SystemProxyArpMapOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*map[string]*SystemProxyArp)(nil)).Elem()
}

func (o SystemProxyArpMapOutput) ToSystemProxyArpMapOutput() SystemProxyArpMapOutput {
	return o
}

func (o SystemProxyArpMapOutput) ToSystemProxyArpMapOutputWithContext(ctx context.Context) SystemProxyArpMapOutput {
	return o
}

func (o SystemProxyArpMapOutput) MapIndex(k pulumi.StringInput) SystemProxyArpOutput {
	return pulumi.All(o, k).ApplyT(func(vs []interface{}) *SystemProxyArp {
		return vs[0].(map[string]*SystemProxyArp)[vs[1].(string)]
	}).(SystemProxyArpOutput)
}

func init() {
	pulumi.RegisterInputType(reflect.TypeOf((*SystemProxyArpInput)(nil)).Elem(), &SystemProxyArp{})
	pulumi.RegisterInputType(reflect.TypeOf((*SystemProxyArpArrayInput)(nil)).Elem(), SystemProxyArpArray{})
	pulumi.RegisterInputType(reflect.TypeOf((*SystemProxyArpMapInput)(nil)).Elem(), SystemProxyArpMap{})
	pulumi.RegisterOutputType(SystemProxyArpOutput{})
	pulumi.RegisterOutputType(SystemProxyArpArrayOutput{})
	pulumi.RegisterOutputType(SystemProxyArpMapOutput{})
}
