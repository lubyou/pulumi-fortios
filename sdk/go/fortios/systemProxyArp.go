// Code generated by the Pulumi Terraform Bridge (tfgen) Tool DO NOT EDIT.
// *** WARNING: Do not edit by hand unless you're certain you know what you are doing! ***

package fortios

import (
	"context"
	"reflect"

	"errors"
	"github.com/lubyou/pulumi-fortios/sdk/go/fortios/internal"
	"github.com/pulumi/pulumi/sdk/v3/go/pulumi"
)

type SystemProxyArp struct {
	pulumi.CustomResourceState

	EndIp     pulumi.StringOutput    `pulumi:"endIp"`
	Fosid     pulumi.IntOutput       `pulumi:"fosid"`
	Interface pulumi.StringOutput    `pulumi:"interface"`
	Ip        pulumi.StringOutput    `pulumi:"ip"`
	Vdomparam pulumi.StringPtrOutput `pulumi:"vdomparam"`
}

// NewSystemProxyArp registers a new resource with the given unique name, arguments, and options.
func NewSystemProxyArp(ctx *pulumi.Context,
	name string, args *SystemProxyArpArgs, opts ...pulumi.ResourceOption) (*SystemProxyArp, error) {
	if args == nil {
		return nil, errors.New("missing one or more required arguments")
	}

	if args.Fosid == nil {
		return nil, errors.New("invalid value for required argument 'Fosid'")
	}
	if args.Interface == nil {
		return nil, errors.New("invalid value for required argument 'Interface'")
	}
	if args.Ip == nil {
		return nil, errors.New("invalid value for required argument 'Ip'")
	}
	opts = internal.PkgResourceDefaultOpts(opts)
	var resource SystemProxyArp
	err := ctx.RegisterResource("fortios:index/systemProxyArp:SystemProxyArp", name, args, &resource, opts...)
	if err != nil {
		return nil, err
	}
	return &resource, nil
}

// GetSystemProxyArp gets an existing SystemProxyArp resource's state with the given name, ID, and optional
// state properties that are used to uniquely qualify the lookup (nil if not required).
func GetSystemProxyArp(ctx *pulumi.Context,
	name string, id pulumi.IDInput, state *SystemProxyArpState, opts ...pulumi.ResourceOption) (*SystemProxyArp, error) {
	var resource SystemProxyArp
	err := ctx.ReadResource("fortios:index/systemProxyArp:SystemProxyArp", name, id, state, &resource, opts...)
	if err != nil {
		return nil, err
	}
	return &resource, nil
}

// Input properties used for looking up and filtering SystemProxyArp resources.
type systemProxyArpState struct {
	EndIp     *string `pulumi:"endIp"`
	Fosid     *int    `pulumi:"fosid"`
	Interface *string `pulumi:"interface"`
	Ip        *string `pulumi:"ip"`
	Vdomparam *string `pulumi:"vdomparam"`
}

type SystemProxyArpState struct {
	EndIp     pulumi.StringPtrInput
	Fosid     pulumi.IntPtrInput
	Interface pulumi.StringPtrInput
	Ip        pulumi.StringPtrInput
	Vdomparam pulumi.StringPtrInput
}

func (SystemProxyArpState) ElementType() reflect.Type {
	return reflect.TypeOf((*systemProxyArpState)(nil)).Elem()
}

type systemProxyArpArgs struct {
	EndIp     *string `pulumi:"endIp"`
	Fosid     int     `pulumi:"fosid"`
	Interface string  `pulumi:"interface"`
	Ip        string  `pulumi:"ip"`
	Vdomparam *string `pulumi:"vdomparam"`
}

// The set of arguments for constructing a SystemProxyArp resource.
type SystemProxyArpArgs struct {
	EndIp     pulumi.StringPtrInput
	Fosid     pulumi.IntInput
	Interface pulumi.StringInput
	Ip        pulumi.StringInput
	Vdomparam pulumi.StringPtrInput
}

func (SystemProxyArpArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*systemProxyArpArgs)(nil)).Elem()
}

type SystemProxyArpInput interface {
	pulumi.Input

	ToSystemProxyArpOutput() SystemProxyArpOutput
	ToSystemProxyArpOutputWithContext(ctx context.Context) SystemProxyArpOutput
}

func (*SystemProxyArp) ElementType() reflect.Type {
	return reflect.TypeOf((**SystemProxyArp)(nil)).Elem()
}

func (i *SystemProxyArp) ToSystemProxyArpOutput() SystemProxyArpOutput {
	return i.ToSystemProxyArpOutputWithContext(context.Background())
}

func (i *SystemProxyArp) ToSystemProxyArpOutputWithContext(ctx context.Context) SystemProxyArpOutput {
	return pulumi.ToOutputWithContext(ctx, i).(SystemProxyArpOutput)
}

// SystemProxyArpArrayInput is an input type that accepts SystemProxyArpArray and SystemProxyArpArrayOutput values.
// You can construct a concrete instance of `SystemProxyArpArrayInput` via:
//
//	SystemProxyArpArray{ SystemProxyArpArgs{...} }
type SystemProxyArpArrayInput interface {
	pulumi.Input

	ToSystemProxyArpArrayOutput() SystemProxyArpArrayOutput
	ToSystemProxyArpArrayOutputWithContext(context.Context) SystemProxyArpArrayOutput
}

type SystemProxyArpArray []SystemProxyArpInput

func (SystemProxyArpArray) ElementType() reflect.Type {
	return reflect.TypeOf((*[]*SystemProxyArp)(nil)).Elem()
}

func (i SystemProxyArpArray) ToSystemProxyArpArrayOutput() SystemProxyArpArrayOutput {
	return i.ToSystemProxyArpArrayOutputWithContext(context.Background())
}

func (i SystemProxyArpArray) ToSystemProxyArpArrayOutputWithContext(ctx context.Context) SystemProxyArpArrayOutput {
	return pulumi.ToOutputWithContext(ctx, i).(SystemProxyArpArrayOutput)
}

// SystemProxyArpMapInput is an input type that accepts SystemProxyArpMap and SystemProxyArpMapOutput values.
// You can construct a concrete instance of `SystemProxyArpMapInput` via:
//
//	SystemProxyArpMap{ "key": SystemProxyArpArgs{...} }
type SystemProxyArpMapInput interface {
	pulumi.Input

	ToSystemProxyArpMapOutput() SystemProxyArpMapOutput
	ToSystemProxyArpMapOutputWithContext(context.Context) SystemProxyArpMapOutput
}

type SystemProxyArpMap map[string]SystemProxyArpInput

func (SystemProxyArpMap) ElementType() reflect.Type {
	return reflect.TypeOf((*map[string]*SystemProxyArp)(nil)).Elem()
}

func (i SystemProxyArpMap) ToSystemProxyArpMapOutput() SystemProxyArpMapOutput {
	return i.ToSystemProxyArpMapOutputWithContext(context.Background())
}

func (i SystemProxyArpMap) ToSystemProxyArpMapOutputWithContext(ctx context.Context) SystemProxyArpMapOutput {
	return pulumi.ToOutputWithContext(ctx, i).(SystemProxyArpMapOutput)
}

type SystemProxyArpOutput struct{ *pulumi.OutputState }

func (SystemProxyArpOutput) ElementType() reflect.Type {
	return reflect.TypeOf((**SystemProxyArp)(nil)).Elem()
}

func (o SystemProxyArpOutput) ToSystemProxyArpOutput() SystemProxyArpOutput {
	return o
}

func (o SystemProxyArpOutput) ToSystemProxyArpOutputWithContext(ctx context.Context) SystemProxyArpOutput {
	return o
}

func (o SystemProxyArpOutput) EndIp() pulumi.StringOutput {
	return o.ApplyT(func(v *SystemProxyArp) pulumi.StringOutput { return v.EndIp }).(pulumi.StringOutput)
}

func (o SystemProxyArpOutput) Fosid() pulumi.IntOutput {
	return o.ApplyT(func(v *SystemProxyArp) pulumi.IntOutput { return v.Fosid }).(pulumi.IntOutput)
}

func (o SystemProxyArpOutput) Interface() pulumi.StringOutput {
	return o.ApplyT(func(v *SystemProxyArp) pulumi.StringOutput { return v.Interface }).(pulumi.StringOutput)
}

func (o SystemProxyArpOutput) Ip() pulumi.StringOutput {
	return o.ApplyT(func(v *SystemProxyArp) pulumi.StringOutput { return v.Ip }).(pulumi.StringOutput)
}

func (o SystemProxyArpOutput) Vdomparam() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *SystemProxyArp) pulumi.StringPtrOutput { return v.Vdomparam }).(pulumi.StringPtrOutput)
}

type SystemProxyArpArrayOutput struct{ *pulumi.OutputState }

func (SystemProxyArpArrayOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*[]*SystemProxyArp)(nil)).Elem()
}

func (o SystemProxyArpArrayOutput) ToSystemProxyArpArrayOutput() SystemProxyArpArrayOutput {
	return o
}

func (o SystemProxyArpArrayOutput) ToSystemProxyArpArrayOutputWithContext(ctx context.Context) SystemProxyArpArrayOutput {
	return o
}

func (o SystemProxyArpArrayOutput) Index(i pulumi.IntInput) SystemProxyArpOutput {
	return pulumi.All(o, i).ApplyT(func(vs []interface{}) *SystemProxyArp {
		return vs[0].([]*SystemProxyArp)[vs[1].(int)]
	}).(SystemProxyArpOutput)
}

type SystemProxyArpMapOutput struct{ *pulumi.OutputState }

func (SystemProxyArpMapOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*map[string]*SystemProxyArp)(nil)).Elem()
}

func (o SystemProxyArpMapOutput) ToSystemProxyArpMapOutput() SystemProxyArpMapOutput {
	return o
}

func (o SystemProxyArpMapOutput) ToSystemProxyArpMapOutputWithContext(ctx context.Context) SystemProxyArpMapOutput {
	return o
}

func (o SystemProxyArpMapOutput) MapIndex(k pulumi.StringInput) SystemProxyArpOutput {
	return pulumi.All(o, k).ApplyT(func(vs []interface{}) *SystemProxyArp {
		return vs[0].(map[string]*SystemProxyArp)[vs[1].(string)]
	}).(SystemProxyArpOutput)
}

func init() {
	pulumi.RegisterInputType(reflect.TypeOf((*SystemProxyArpInput)(nil)).Elem(), &SystemProxyArp{})
	pulumi.RegisterInputType(reflect.TypeOf((*SystemProxyArpArrayInput)(nil)).Elem(), SystemProxyArpArray{})
	pulumi.RegisterInputType(reflect.TypeOf((*SystemProxyArpMapInput)(nil)).Elem(), SystemProxyArpMap{})
	pulumi.RegisterOutputType(SystemProxyArpOutput{})
	pulumi.RegisterOutputType(SystemProxyArpArrayOutput{})
	pulumi.RegisterOutputType(SystemProxyArpMapOutput{})
}
