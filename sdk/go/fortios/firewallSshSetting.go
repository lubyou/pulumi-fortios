// *** WARNING: this file was generated by the Pulumi Terraform Bridge (tfgen) Tool. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

package fortios

import (
	"context"
	"reflect"

	"github.com/pulumi/pulumi/sdk/v3/go/pulumi"
)

// SSH proxy settings.
//
// ## Example Usage
//
// ```go
// package main
//
// import (
// 	"github.com/pulumi/pulumi-fortios/sdk/go/fortios"
// 	"github.com/pulumi/pulumi/sdk/v3/go/pulumi"
// )
//
// func main() {
// 	pulumi.Run(func(ctx *pulumi.Context) error {
// 		_, err := fortios.NewFirewallSshSetting(ctx, "trname", &fortios.FirewallSshSettingArgs{
// 			Caname:              pulumi.String("Fortinet_SSH_CA"),
// 			HostTrustedChecking: pulumi.String("enable"),
// 			HostkeyDsa1024:      pulumi.String("Fortinet_SSH_DSA1024"),
// 			HostkeyEcdsa256:     pulumi.String("Fortinet_SSH_ECDSA256"),
// 			HostkeyEcdsa384:     pulumi.String("Fortinet_SSH_ECDSA384"),
// 			HostkeyEcdsa521:     pulumi.String("Fortinet_SSH_ECDSA521"),
// 			HostkeyEd25519:      pulumi.String("Fortinet_SSH_ED25519"),
// 			HostkeyRsa2048:      pulumi.String("Fortinet_SSH_RSA2048"),
// 			UntrustedCaname:     pulumi.String("Fortinet_SSH_CA_Untrusted"),
// 		})
// 		if err != nil {
// 			return err
// 		}
// 		return nil
// 	})
// }
// ```
//
// ## Import
//
// FirewallSsh Setting can be imported using any of these accepted formats$ export "FORTIOS_IMPORT_TABLE"="true"
//
// ```sh
//  $ pulumi import fortios:index/firewallSshSetting:FirewallSshSetting labelname FirewallSshSetting
// ```
//
//  $ unset "FORTIOS_IMPORT_TABLE"
type FirewallSshSetting struct {
	pulumi.CustomResourceState

	// CA certificate used by SSH Inspection.
	Caname pulumi.StringOutput `pulumi:"caname"`
	// Enable/disable host trusted checking. Valid values: `enable`, `disable`.
	HostTrustedChecking pulumi.StringOutput `pulumi:"hostTrustedChecking"`
	// DSA certificate used by SSH proxy.
	HostkeyDsa1024 pulumi.StringOutput `pulumi:"hostkeyDsa1024"`
	// ECDSA nid256 certificate used by SSH proxy.
	HostkeyEcdsa256 pulumi.StringOutput `pulumi:"hostkeyEcdsa256"`
	// ECDSA nid384 certificate used by SSH proxy.
	HostkeyEcdsa384 pulumi.StringOutput `pulumi:"hostkeyEcdsa384"`
	// ECDSA nid384 certificate used by SSH proxy.
	HostkeyEcdsa521 pulumi.StringOutput `pulumi:"hostkeyEcdsa521"`
	// ED25519 hostkey used by SSH proxy.
	HostkeyEd25519 pulumi.StringOutput `pulumi:"hostkeyEd25519"`
	// RSA certificate used by SSH proxy.
	HostkeyRsa2048 pulumi.StringOutput `pulumi:"hostkeyRsa2048"`
	// Untrusted CA certificate used by SSH Inspection.
	UntrustedCaname pulumi.StringOutput `pulumi:"untrustedCaname"`
	// Specifies the vdom to which the resource will be applied when the FortiGate unit is running in VDOM mode. Only one vdom can be specified. If you want to inherit the vdom configuration of the provider, please do not set this parameter.
	Vdomparam pulumi.StringPtrOutput `pulumi:"vdomparam"`
}

// NewFirewallSshSetting registers a new resource with the given unique name, arguments, and options.
func NewFirewallSshSetting(ctx *pulumi.Context,
	name string, args *FirewallSshSettingArgs, opts ...pulumi.ResourceOption) (*FirewallSshSetting, error) {
	if args == nil {
		args = &FirewallSshSettingArgs{}
	}

	opts = pkgResourceDefaultOpts(opts)
	var resource FirewallSshSetting
	err := ctx.RegisterResource("fortios:index/firewallSshSetting:FirewallSshSetting", name, args, &resource, opts...)
	if err != nil {
		return nil, err
	}
	return &resource, nil
}

// GetFirewallSshSetting gets an existing FirewallSshSetting resource's state with the given name, ID, and optional
// state properties that are used to uniquely qualify the lookup (nil if not required).
func GetFirewallSshSetting(ctx *pulumi.Context,
	name string, id pulumi.IDInput, state *FirewallSshSettingState, opts ...pulumi.ResourceOption) (*FirewallSshSetting, error) {
	var resource FirewallSshSetting
	err := ctx.ReadResource("fortios:index/firewallSshSetting:FirewallSshSetting", name, id, state, &resource, opts...)
	if err != nil {
		return nil, err
	}
	return &resource, nil
}

// Input properties used for looking up and filtering FirewallSshSetting resources.
type firewallSshSettingState struct {
	// CA certificate used by SSH Inspection.
	Caname *string `pulumi:"caname"`
	// Enable/disable host trusted checking. Valid values: `enable`, `disable`.
	HostTrustedChecking *string `pulumi:"hostTrustedChecking"`
	// DSA certificate used by SSH proxy.
	HostkeyDsa1024 *string `pulumi:"hostkeyDsa1024"`
	// ECDSA nid256 certificate used by SSH proxy.
	HostkeyEcdsa256 *string `pulumi:"hostkeyEcdsa256"`
	// ECDSA nid384 certificate used by SSH proxy.
	HostkeyEcdsa384 *string `pulumi:"hostkeyEcdsa384"`
	// ECDSA nid384 certificate used by SSH proxy.
	HostkeyEcdsa521 *string `pulumi:"hostkeyEcdsa521"`
	// ED25519 hostkey used by SSH proxy.
	HostkeyEd25519 *string `pulumi:"hostkeyEd25519"`
	// RSA certificate used by SSH proxy.
	HostkeyRsa2048 *string `pulumi:"hostkeyRsa2048"`
	// Untrusted CA certificate used by SSH Inspection.
	UntrustedCaname *string `pulumi:"untrustedCaname"`
	// Specifies the vdom to which the resource will be applied when the FortiGate unit is running in VDOM mode. Only one vdom can be specified. If you want to inherit the vdom configuration of the provider, please do not set this parameter.
	Vdomparam *string `pulumi:"vdomparam"`
}

type FirewallSshSettingState struct {
	// CA certificate used by SSH Inspection.
	Caname pulumi.StringPtrInput
	// Enable/disable host trusted checking. Valid values: `enable`, `disable`.
	HostTrustedChecking pulumi.StringPtrInput
	// DSA certificate used by SSH proxy.
	HostkeyDsa1024 pulumi.StringPtrInput
	// ECDSA nid256 certificate used by SSH proxy.
	HostkeyEcdsa256 pulumi.StringPtrInput
	// ECDSA nid384 certificate used by SSH proxy.
	HostkeyEcdsa384 pulumi.StringPtrInput
	// ECDSA nid384 certificate used by SSH proxy.
	HostkeyEcdsa521 pulumi.StringPtrInput
	// ED25519 hostkey used by SSH proxy.
	HostkeyEd25519 pulumi.StringPtrInput
	// RSA certificate used by SSH proxy.
	HostkeyRsa2048 pulumi.StringPtrInput
	// Untrusted CA certificate used by SSH Inspection.
	UntrustedCaname pulumi.StringPtrInput
	// Specifies the vdom to which the resource will be applied when the FortiGate unit is running in VDOM mode. Only one vdom can be specified. If you want to inherit the vdom configuration of the provider, please do not set this parameter.
	Vdomparam pulumi.StringPtrInput
}

func (FirewallSshSettingState) ElementType() reflect.Type {
	return reflect.TypeOf((*firewallSshSettingState)(nil)).Elem()
}

type firewallSshSettingArgs struct {
	// CA certificate used by SSH Inspection.
	Caname *string `pulumi:"caname"`
	// Enable/disable host trusted checking. Valid values: `enable`, `disable`.
	HostTrustedChecking *string `pulumi:"hostTrustedChecking"`
	// DSA certificate used by SSH proxy.
	HostkeyDsa1024 *string `pulumi:"hostkeyDsa1024"`
	// ECDSA nid256 certificate used by SSH proxy.
	HostkeyEcdsa256 *string `pulumi:"hostkeyEcdsa256"`
	// ECDSA nid384 certificate used by SSH proxy.
	HostkeyEcdsa384 *string `pulumi:"hostkeyEcdsa384"`
	// ECDSA nid384 certificate used by SSH proxy.
	HostkeyEcdsa521 *string `pulumi:"hostkeyEcdsa521"`
	// ED25519 hostkey used by SSH proxy.
	HostkeyEd25519 *string `pulumi:"hostkeyEd25519"`
	// RSA certificate used by SSH proxy.
	HostkeyRsa2048 *string `pulumi:"hostkeyRsa2048"`
	// Untrusted CA certificate used by SSH Inspection.
	UntrustedCaname *string `pulumi:"untrustedCaname"`
	// Specifies the vdom to which the resource will be applied when the FortiGate unit is running in VDOM mode. Only one vdom can be specified. If you want to inherit the vdom configuration of the provider, please do not set this parameter.
	Vdomparam *string `pulumi:"vdomparam"`
}

// The set of arguments for constructing a FirewallSshSetting resource.
type FirewallSshSettingArgs struct {
	// CA certificate used by SSH Inspection.
	Caname pulumi.StringPtrInput
	// Enable/disable host trusted checking. Valid values: `enable`, `disable`.
	HostTrustedChecking pulumi.StringPtrInput
	// DSA certificate used by SSH proxy.
	HostkeyDsa1024 pulumi.StringPtrInput
	// ECDSA nid256 certificate used by SSH proxy.
	HostkeyEcdsa256 pulumi.StringPtrInput
	// ECDSA nid384 certificate used by SSH proxy.
	HostkeyEcdsa384 pulumi.StringPtrInput
	// ECDSA nid384 certificate used by SSH proxy.
	HostkeyEcdsa521 pulumi.StringPtrInput
	// ED25519 hostkey used by SSH proxy.
	HostkeyEd25519 pulumi.StringPtrInput
	// RSA certificate used by SSH proxy.
	HostkeyRsa2048 pulumi.StringPtrInput
	// Untrusted CA certificate used by SSH Inspection.
	UntrustedCaname pulumi.StringPtrInput
	// Specifies the vdom to which the resource will be applied when the FortiGate unit is running in VDOM mode. Only one vdom can be specified. If you want to inherit the vdom configuration of the provider, please do not set this parameter.
	Vdomparam pulumi.StringPtrInput
}

func (FirewallSshSettingArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*firewallSshSettingArgs)(nil)).Elem()
}

type FirewallSshSettingInput interface {
	pulumi.Input

	ToFirewallSshSettingOutput() FirewallSshSettingOutput
	ToFirewallSshSettingOutputWithContext(ctx context.Context) FirewallSshSettingOutput
}

func (*FirewallSshSetting) ElementType() reflect.Type {
	return reflect.TypeOf((**FirewallSshSetting)(nil)).Elem()
}

func (i *FirewallSshSetting) ToFirewallSshSettingOutput() FirewallSshSettingOutput {
	return i.ToFirewallSshSettingOutputWithContext(context.Background())
}

func (i *FirewallSshSetting) ToFirewallSshSettingOutputWithContext(ctx context.Context) FirewallSshSettingOutput {
	return pulumi.ToOutputWithContext(ctx, i).(FirewallSshSettingOutput)
}

// FirewallSshSettingArrayInput is an input type that accepts FirewallSshSettingArray and FirewallSshSettingArrayOutput values.
// You can construct a concrete instance of `FirewallSshSettingArrayInput` via:
//
//          FirewallSshSettingArray{ FirewallSshSettingArgs{...} }
type FirewallSshSettingArrayInput interface {
	pulumi.Input

	ToFirewallSshSettingArrayOutput() FirewallSshSettingArrayOutput
	ToFirewallSshSettingArrayOutputWithContext(context.Context) FirewallSshSettingArrayOutput
}

type FirewallSshSettingArray []FirewallSshSettingInput

func (FirewallSshSettingArray) ElementType() reflect.Type {
	return reflect.TypeOf((*[]*FirewallSshSetting)(nil)).Elem()
}

func (i FirewallSshSettingArray) ToFirewallSshSettingArrayOutput() FirewallSshSettingArrayOutput {
	return i.ToFirewallSshSettingArrayOutputWithContext(context.Background())
}

func (i FirewallSshSettingArray) ToFirewallSshSettingArrayOutputWithContext(ctx context.Context) FirewallSshSettingArrayOutput {
	return pulumi.ToOutputWithContext(ctx, i).(FirewallSshSettingArrayOutput)
}

// FirewallSshSettingMapInput is an input type that accepts FirewallSshSettingMap and FirewallSshSettingMapOutput values.
// You can construct a concrete instance of `FirewallSshSettingMapInput` via:
//
//          FirewallSshSettingMap{ "key": FirewallSshSettingArgs{...} }
type FirewallSshSettingMapInput interface {
	pulumi.Input

	ToFirewallSshSettingMapOutput() FirewallSshSettingMapOutput
	ToFirewallSshSettingMapOutputWithContext(context.Context) FirewallSshSettingMapOutput
}

type FirewallSshSettingMap map[string]FirewallSshSettingInput

func (FirewallSshSettingMap) ElementType() reflect.Type {
	return reflect.TypeOf((*map[string]*FirewallSshSetting)(nil)).Elem()
}

func (i FirewallSshSettingMap) ToFirewallSshSettingMapOutput() FirewallSshSettingMapOutput {
	return i.ToFirewallSshSettingMapOutputWithContext(context.Background())
}

func (i FirewallSshSettingMap) ToFirewallSshSettingMapOutputWithContext(ctx context.Context) FirewallSshSettingMapOutput {
	return pulumi.ToOutputWithContext(ctx, i).(FirewallSshSettingMapOutput)
}

type FirewallSshSettingOutput struct{ *pulumi.OutputState }

func (FirewallSshSettingOutput) ElementType() reflect.Type {
	return reflect.TypeOf((**FirewallSshSetting)(nil)).Elem()
}

func (o FirewallSshSettingOutput) ToFirewallSshSettingOutput() FirewallSshSettingOutput {
	return o
}

func (o FirewallSshSettingOutput) ToFirewallSshSettingOutputWithContext(ctx context.Context) FirewallSshSettingOutput {
	return o
}

type FirewallSshSettingArrayOutput struct{ *pulumi.OutputState }

func (FirewallSshSettingArrayOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*[]*FirewallSshSetting)(nil)).Elem()
}

func (o FirewallSshSettingArrayOutput) ToFirewallSshSettingArrayOutput() FirewallSshSettingArrayOutput {
	return o
}

func (o FirewallSshSettingArrayOutput) ToFirewallSshSettingArrayOutputWithContext(ctx context.Context) FirewallSshSettingArrayOutput {
	return o
}

func (o FirewallSshSettingArrayOutput) Index(i pulumi.IntInput) FirewallSshSettingOutput {
	return pulumi.All(o, i).ApplyT(func(vs []interface{}) *FirewallSshSetting {
		return vs[0].([]*FirewallSshSetting)[vs[1].(int)]
	}).(FirewallSshSettingOutput)
}

type FirewallSshSettingMapOutput struct{ *pulumi.OutputState }

func (FirewallSshSettingMapOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*map[string]*FirewallSshSetting)(nil)).Elem()
}

func (o FirewallSshSettingMapOutput) ToFirewallSshSettingMapOutput() FirewallSshSettingMapOutput {
	return o
}

func (o FirewallSshSettingMapOutput) ToFirewallSshSettingMapOutputWithContext(ctx context.Context) FirewallSshSettingMapOutput {
	return o
}

func (o FirewallSshSettingMapOutput) MapIndex(k pulumi.StringInput) FirewallSshSettingOutput {
	return pulumi.All(o, k).ApplyT(func(vs []interface{}) *FirewallSshSetting {
		return vs[0].(map[string]*FirewallSshSetting)[vs[1].(string)]
	}).(FirewallSshSettingOutput)
}

func init() {
	pulumi.RegisterInputType(reflect.TypeOf((*FirewallSshSettingInput)(nil)).Elem(), &FirewallSshSetting{})
	pulumi.RegisterInputType(reflect.TypeOf((*FirewallSshSettingArrayInput)(nil)).Elem(), FirewallSshSettingArray{})
	pulumi.RegisterInputType(reflect.TypeOf((*FirewallSshSettingMapInput)(nil)).Elem(), FirewallSshSettingMap{})
	pulumi.RegisterOutputType(FirewallSshSettingOutput{})
	pulumi.RegisterOutputType(FirewallSshSettingArrayOutput{})
	pulumi.RegisterOutputType(FirewallSshSettingMapOutput{})
}
