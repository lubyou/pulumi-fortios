// Code generated by the Pulumi Terraform Bridge (tfgen) Tool DO NOT EDIT.
// *** WARNING: Do not edit by hand unless you're certain you know what you are doing! ***

package fortios

import (
	"context"
	"reflect"

	"github.com/lubyou/pulumi-fortios/sdk/go/fortios/internal"
	"github.com/pulumi/pulumi/sdk/v3/go/pulumi"
	"github.com/pulumi/pulumi/sdk/v3/go/pulumix"
)

type IcapServerGroup struct {
	pulumi.CustomResourceState

	DynamicSortSubtable pulumi.StringPtrOutput               `pulumi:"dynamicSortSubtable"`
	GetAllTables        pulumi.StringPtrOutput               `pulumi:"getAllTables"`
	LdbMethod           pulumi.StringOutput                  `pulumi:"ldbMethod"`
	Name                pulumi.StringOutput                  `pulumi:"name"`
	ServerLists         IcapServerGroupServerListArrayOutput `pulumi:"serverLists"`
	Vdomparam           pulumi.StringPtrOutput               `pulumi:"vdomparam"`
}

// NewIcapServerGroup registers a new resource with the given unique name, arguments, and options.
func NewIcapServerGroup(ctx *pulumi.Context,
	name string, args *IcapServerGroupArgs, opts ...pulumi.ResourceOption) (*IcapServerGroup, error) {
	if args == nil {
		args = &IcapServerGroupArgs{}
	}

	opts = internal.PkgResourceDefaultOpts(opts)
	var resource IcapServerGroup
	err := ctx.RegisterResource("fortios:index/icapServerGroup:IcapServerGroup", name, args, &resource, opts...)
	if err != nil {
		return nil, err
	}
	return &resource, nil
}

// GetIcapServerGroup gets an existing IcapServerGroup resource's state with the given name, ID, and optional
// state properties that are used to uniquely qualify the lookup (nil if not required).
func GetIcapServerGroup(ctx *pulumi.Context,
	name string, id pulumi.IDInput, state *IcapServerGroupState, opts ...pulumi.ResourceOption) (*IcapServerGroup, error) {
	var resource IcapServerGroup
	err := ctx.ReadResource("fortios:index/icapServerGroup:IcapServerGroup", name, id, state, &resource, opts...)
	if err != nil {
		return nil, err
	}
	return &resource, nil
}

// Input properties used for looking up and filtering IcapServerGroup resources.
type icapServerGroupState struct {
	DynamicSortSubtable *string                     `pulumi:"dynamicSortSubtable"`
	GetAllTables        *string                     `pulumi:"getAllTables"`
	LdbMethod           *string                     `pulumi:"ldbMethod"`
	Name                *string                     `pulumi:"name"`
	ServerLists         []IcapServerGroupServerList `pulumi:"serverLists"`
	Vdomparam           *string                     `pulumi:"vdomparam"`
}

type IcapServerGroupState struct {
	DynamicSortSubtable pulumi.StringPtrInput
	GetAllTables        pulumi.StringPtrInput
	LdbMethod           pulumi.StringPtrInput
	Name                pulumi.StringPtrInput
	ServerLists         IcapServerGroupServerListArrayInput
	Vdomparam           pulumi.StringPtrInput
}

func (IcapServerGroupState) ElementType() reflect.Type {
	return reflect.TypeOf((*icapServerGroupState)(nil)).Elem()
}

type icapServerGroupArgs struct {
	DynamicSortSubtable *string                     `pulumi:"dynamicSortSubtable"`
	GetAllTables        *string                     `pulumi:"getAllTables"`
	LdbMethod           *string                     `pulumi:"ldbMethod"`
	Name                *string                     `pulumi:"name"`
	ServerLists         []IcapServerGroupServerList `pulumi:"serverLists"`
	Vdomparam           *string                     `pulumi:"vdomparam"`
}

// The set of arguments for constructing a IcapServerGroup resource.
type IcapServerGroupArgs struct {
	DynamicSortSubtable pulumi.StringPtrInput
	GetAllTables        pulumi.StringPtrInput
	LdbMethod           pulumi.StringPtrInput
	Name                pulumi.StringPtrInput
	ServerLists         IcapServerGroupServerListArrayInput
	Vdomparam           pulumi.StringPtrInput
}

func (IcapServerGroupArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*icapServerGroupArgs)(nil)).Elem()
}

type IcapServerGroupInput interface {
	pulumi.Input

	ToIcapServerGroupOutput() IcapServerGroupOutput
	ToIcapServerGroupOutputWithContext(ctx context.Context) IcapServerGroupOutput
}

func (*IcapServerGroup) ElementType() reflect.Type {
	return reflect.TypeOf((**IcapServerGroup)(nil)).Elem()
}

func (i *IcapServerGroup) ToIcapServerGroupOutput() IcapServerGroupOutput {
	return i.ToIcapServerGroupOutputWithContext(context.Background())
}

func (i *IcapServerGroup) ToIcapServerGroupOutputWithContext(ctx context.Context) IcapServerGroupOutput {
	return pulumi.ToOutputWithContext(ctx, i).(IcapServerGroupOutput)
}

func (i *IcapServerGroup) ToOutput(ctx context.Context) pulumix.Output[*IcapServerGroup] {
	return pulumix.Output[*IcapServerGroup]{
		OutputState: i.ToIcapServerGroupOutputWithContext(ctx).OutputState,
	}
}

// IcapServerGroupArrayInput is an input type that accepts IcapServerGroupArray and IcapServerGroupArrayOutput values.
// You can construct a concrete instance of `IcapServerGroupArrayInput` via:
//
//	IcapServerGroupArray{ IcapServerGroupArgs{...} }
type IcapServerGroupArrayInput interface {
	pulumi.Input

	ToIcapServerGroupArrayOutput() IcapServerGroupArrayOutput
	ToIcapServerGroupArrayOutputWithContext(context.Context) IcapServerGroupArrayOutput
}

type IcapServerGroupArray []IcapServerGroupInput

func (IcapServerGroupArray) ElementType() reflect.Type {
	return reflect.TypeOf((*[]*IcapServerGroup)(nil)).Elem()
}

func (i IcapServerGroupArray) ToIcapServerGroupArrayOutput() IcapServerGroupArrayOutput {
	return i.ToIcapServerGroupArrayOutputWithContext(context.Background())
}

func (i IcapServerGroupArray) ToIcapServerGroupArrayOutputWithContext(ctx context.Context) IcapServerGroupArrayOutput {
	return pulumi.ToOutputWithContext(ctx, i).(IcapServerGroupArrayOutput)
}

func (i IcapServerGroupArray) ToOutput(ctx context.Context) pulumix.Output[[]*IcapServerGroup] {
	return pulumix.Output[[]*IcapServerGroup]{
		OutputState: i.ToIcapServerGroupArrayOutputWithContext(ctx).OutputState,
	}
}

// IcapServerGroupMapInput is an input type that accepts IcapServerGroupMap and IcapServerGroupMapOutput values.
// You can construct a concrete instance of `IcapServerGroupMapInput` via:
//
//	IcapServerGroupMap{ "key": IcapServerGroupArgs{...} }
type IcapServerGroupMapInput interface {
	pulumi.Input

	ToIcapServerGroupMapOutput() IcapServerGroupMapOutput
	ToIcapServerGroupMapOutputWithContext(context.Context) IcapServerGroupMapOutput
}

type IcapServerGroupMap map[string]IcapServerGroupInput

func (IcapServerGroupMap) ElementType() reflect.Type {
	return reflect.TypeOf((*map[string]*IcapServerGroup)(nil)).Elem()
}

func (i IcapServerGroupMap) ToIcapServerGroupMapOutput() IcapServerGroupMapOutput {
	return i.ToIcapServerGroupMapOutputWithContext(context.Background())
}

func (i IcapServerGroupMap) ToIcapServerGroupMapOutputWithContext(ctx context.Context) IcapServerGroupMapOutput {
	return pulumi.ToOutputWithContext(ctx, i).(IcapServerGroupMapOutput)
}

func (i IcapServerGroupMap) ToOutput(ctx context.Context) pulumix.Output[map[string]*IcapServerGroup] {
	return pulumix.Output[map[string]*IcapServerGroup]{
		OutputState: i.ToIcapServerGroupMapOutputWithContext(ctx).OutputState,
	}
}

type IcapServerGroupOutput struct{ *pulumi.OutputState }

func (IcapServerGroupOutput) ElementType() reflect.Type {
	return reflect.TypeOf((**IcapServerGroup)(nil)).Elem()
}

func (o IcapServerGroupOutput) ToIcapServerGroupOutput() IcapServerGroupOutput {
	return o
}

func (o IcapServerGroupOutput) ToIcapServerGroupOutputWithContext(ctx context.Context) IcapServerGroupOutput {
	return o
}

func (o IcapServerGroupOutput) ToOutput(ctx context.Context) pulumix.Output[*IcapServerGroup] {
	return pulumix.Output[*IcapServerGroup]{
		OutputState: o.OutputState,
	}
}

func (o IcapServerGroupOutput) DynamicSortSubtable() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *IcapServerGroup) pulumi.StringPtrOutput { return v.DynamicSortSubtable }).(pulumi.StringPtrOutput)
}

func (o IcapServerGroupOutput) GetAllTables() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *IcapServerGroup) pulumi.StringPtrOutput { return v.GetAllTables }).(pulumi.StringPtrOutput)
}

func (o IcapServerGroupOutput) LdbMethod() pulumi.StringOutput {
	return o.ApplyT(func(v *IcapServerGroup) pulumi.StringOutput { return v.LdbMethod }).(pulumi.StringOutput)
}

func (o IcapServerGroupOutput) Name() pulumi.StringOutput {
	return o.ApplyT(func(v *IcapServerGroup) pulumi.StringOutput { return v.Name }).(pulumi.StringOutput)
}

func (o IcapServerGroupOutput) ServerLists() IcapServerGroupServerListArrayOutput {
	return o.ApplyT(func(v *IcapServerGroup) IcapServerGroupServerListArrayOutput { return v.ServerLists }).(IcapServerGroupServerListArrayOutput)
}

func (o IcapServerGroupOutput) Vdomparam() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *IcapServerGroup) pulumi.StringPtrOutput { return v.Vdomparam }).(pulumi.StringPtrOutput)
}

type IcapServerGroupArrayOutput struct{ *pulumi.OutputState }

func (IcapServerGroupArrayOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*[]*IcapServerGroup)(nil)).Elem()
}

func (o IcapServerGroupArrayOutput) ToIcapServerGroupArrayOutput() IcapServerGroupArrayOutput {
	return o
}

func (o IcapServerGroupArrayOutput) ToIcapServerGroupArrayOutputWithContext(ctx context.Context) IcapServerGroupArrayOutput {
	return o
}

func (o IcapServerGroupArrayOutput) ToOutput(ctx context.Context) pulumix.Output[[]*IcapServerGroup] {
	return pulumix.Output[[]*IcapServerGroup]{
		OutputState: o.OutputState,
	}
}

func (o IcapServerGroupArrayOutput) Index(i pulumi.IntInput) IcapServerGroupOutput {
	return pulumi.All(o, i).ApplyT(func(vs []interface{}) *IcapServerGroup {
		return vs[0].([]*IcapServerGroup)[vs[1].(int)]
	}).(IcapServerGroupOutput)
}

type IcapServerGroupMapOutput struct{ *pulumi.OutputState }

func (IcapServerGroupMapOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*map[string]*IcapServerGroup)(nil)).Elem()
}

func (o IcapServerGroupMapOutput) ToIcapServerGroupMapOutput() IcapServerGroupMapOutput {
	return o
}

func (o IcapServerGroupMapOutput) ToIcapServerGroupMapOutputWithContext(ctx context.Context) IcapServerGroupMapOutput {
	return o
}

func (o IcapServerGroupMapOutput) ToOutput(ctx context.Context) pulumix.Output[map[string]*IcapServerGroup] {
	return pulumix.Output[map[string]*IcapServerGroup]{
		OutputState: o.OutputState,
	}
}

func (o IcapServerGroupMapOutput) MapIndex(k pulumi.StringInput) IcapServerGroupOutput {
	return pulumi.All(o, k).ApplyT(func(vs []interface{}) *IcapServerGroup {
		return vs[0].(map[string]*IcapServerGroup)[vs[1].(string)]
	}).(IcapServerGroupOutput)
}

func init() {
	pulumi.RegisterInputType(reflect.TypeOf((*IcapServerGroupInput)(nil)).Elem(), &IcapServerGroup{})
	pulumi.RegisterInputType(reflect.TypeOf((*IcapServerGroupArrayInput)(nil)).Elem(), IcapServerGroupArray{})
	pulumi.RegisterInputType(reflect.TypeOf((*IcapServerGroupMapInput)(nil)).Elem(), IcapServerGroupMap{})
	pulumi.RegisterOutputType(IcapServerGroupOutput{})
	pulumi.RegisterOutputType(IcapServerGroupArrayOutput{})
	pulumi.RegisterOutputType(IcapServerGroupMapOutput{})
}
