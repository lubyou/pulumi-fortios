// Code generated by the Pulumi Terraform Bridge (tfgen) Tool DO NOT EDIT.
// *** WARNING: Do not edit by hand unless you're certain you know what you are doing! ***

package fortios

import (
	"context"
	"reflect"

	"errors"
	"github.com/lubyou/pulumi-fortios/sdk/go/fortios/internal"
	"github.com/pulumi/pulumi/sdk/v3/go/pulumi"
	"github.com/pulumi/pulumi/sdk/v3/go/pulumix"
)

type RouterCommunityList struct {
	pulumi.CustomResourceState

	DynamicSortSubtable pulumi.StringPtrOutput             `pulumi:"dynamicSortSubtable"`
	GetAllTables        pulumi.StringPtrOutput             `pulumi:"getAllTables"`
	Name                pulumi.StringOutput                `pulumi:"name"`
	Rules               RouterCommunityListRuleArrayOutput `pulumi:"rules"`
	Type                pulumi.StringOutput                `pulumi:"type"`
	Vdomparam           pulumi.StringPtrOutput             `pulumi:"vdomparam"`
}

// NewRouterCommunityList registers a new resource with the given unique name, arguments, and options.
func NewRouterCommunityList(ctx *pulumi.Context,
	name string, args *RouterCommunityListArgs, opts ...pulumi.ResourceOption) (*RouterCommunityList, error) {
	if args == nil {
		return nil, errors.New("missing one or more required arguments")
	}

	if args.Type == nil {
		return nil, errors.New("invalid value for required argument 'Type'")
	}
	opts = internal.PkgResourceDefaultOpts(opts)
	var resource RouterCommunityList
	err := ctx.RegisterResource("fortios:index/routerCommunityList:RouterCommunityList", name, args, &resource, opts...)
	if err != nil {
		return nil, err
	}
	return &resource, nil
}

// GetRouterCommunityList gets an existing RouterCommunityList resource's state with the given name, ID, and optional
// state properties that are used to uniquely qualify the lookup (nil if not required).
func GetRouterCommunityList(ctx *pulumi.Context,
	name string, id pulumi.IDInput, state *RouterCommunityListState, opts ...pulumi.ResourceOption) (*RouterCommunityList, error) {
	var resource RouterCommunityList
	err := ctx.ReadResource("fortios:index/routerCommunityList:RouterCommunityList", name, id, state, &resource, opts...)
	if err != nil {
		return nil, err
	}
	return &resource, nil
}

// Input properties used for looking up and filtering RouterCommunityList resources.
type routerCommunityListState struct {
	DynamicSortSubtable *string                   `pulumi:"dynamicSortSubtable"`
	GetAllTables        *string                   `pulumi:"getAllTables"`
	Name                *string                   `pulumi:"name"`
	Rules               []RouterCommunityListRule `pulumi:"rules"`
	Type                *string                   `pulumi:"type"`
	Vdomparam           *string                   `pulumi:"vdomparam"`
}

type RouterCommunityListState struct {
	DynamicSortSubtable pulumi.StringPtrInput
	GetAllTables        pulumi.StringPtrInput
	Name                pulumi.StringPtrInput
	Rules               RouterCommunityListRuleArrayInput
	Type                pulumi.StringPtrInput
	Vdomparam           pulumi.StringPtrInput
}

func (RouterCommunityListState) ElementType() reflect.Type {
	return reflect.TypeOf((*routerCommunityListState)(nil)).Elem()
}

type routerCommunityListArgs struct {
	DynamicSortSubtable *string                   `pulumi:"dynamicSortSubtable"`
	GetAllTables        *string                   `pulumi:"getAllTables"`
	Name                *string                   `pulumi:"name"`
	Rules               []RouterCommunityListRule `pulumi:"rules"`
	Type                string                    `pulumi:"type"`
	Vdomparam           *string                   `pulumi:"vdomparam"`
}

// The set of arguments for constructing a RouterCommunityList resource.
type RouterCommunityListArgs struct {
	DynamicSortSubtable pulumi.StringPtrInput
	GetAllTables        pulumi.StringPtrInput
	Name                pulumi.StringPtrInput
	Rules               RouterCommunityListRuleArrayInput
	Type                pulumi.StringInput
	Vdomparam           pulumi.StringPtrInput
}

func (RouterCommunityListArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*routerCommunityListArgs)(nil)).Elem()
}

type RouterCommunityListInput interface {
	pulumi.Input

	ToRouterCommunityListOutput() RouterCommunityListOutput
	ToRouterCommunityListOutputWithContext(ctx context.Context) RouterCommunityListOutput
}

func (*RouterCommunityList) ElementType() reflect.Type {
	return reflect.TypeOf((**RouterCommunityList)(nil)).Elem()
}

func (i *RouterCommunityList) ToRouterCommunityListOutput() RouterCommunityListOutput {
	return i.ToRouterCommunityListOutputWithContext(context.Background())
}

func (i *RouterCommunityList) ToRouterCommunityListOutputWithContext(ctx context.Context) RouterCommunityListOutput {
	return pulumi.ToOutputWithContext(ctx, i).(RouterCommunityListOutput)
}

func (i *RouterCommunityList) ToOutput(ctx context.Context) pulumix.Output[*RouterCommunityList] {
	return pulumix.Output[*RouterCommunityList]{
		OutputState: i.ToRouterCommunityListOutputWithContext(ctx).OutputState,
	}
}

// RouterCommunityListArrayInput is an input type that accepts RouterCommunityListArray and RouterCommunityListArrayOutput values.
// You can construct a concrete instance of `RouterCommunityListArrayInput` via:
//
//	RouterCommunityListArray{ RouterCommunityListArgs{...} }
type RouterCommunityListArrayInput interface {
	pulumi.Input

	ToRouterCommunityListArrayOutput() RouterCommunityListArrayOutput
	ToRouterCommunityListArrayOutputWithContext(context.Context) RouterCommunityListArrayOutput
}

type RouterCommunityListArray []RouterCommunityListInput

func (RouterCommunityListArray) ElementType() reflect.Type {
	return reflect.TypeOf((*[]*RouterCommunityList)(nil)).Elem()
}

func (i RouterCommunityListArray) ToRouterCommunityListArrayOutput() RouterCommunityListArrayOutput {
	return i.ToRouterCommunityListArrayOutputWithContext(context.Background())
}

func (i RouterCommunityListArray) ToRouterCommunityListArrayOutputWithContext(ctx context.Context) RouterCommunityListArrayOutput {
	return pulumi.ToOutputWithContext(ctx, i).(RouterCommunityListArrayOutput)
}

func (i RouterCommunityListArray) ToOutput(ctx context.Context) pulumix.Output[[]*RouterCommunityList] {
	return pulumix.Output[[]*RouterCommunityList]{
		OutputState: i.ToRouterCommunityListArrayOutputWithContext(ctx).OutputState,
	}
}

// RouterCommunityListMapInput is an input type that accepts RouterCommunityListMap and RouterCommunityListMapOutput values.
// You can construct a concrete instance of `RouterCommunityListMapInput` via:
//
//	RouterCommunityListMap{ "key": RouterCommunityListArgs{...} }
type RouterCommunityListMapInput interface {
	pulumi.Input

	ToRouterCommunityListMapOutput() RouterCommunityListMapOutput
	ToRouterCommunityListMapOutputWithContext(context.Context) RouterCommunityListMapOutput
}

type RouterCommunityListMap map[string]RouterCommunityListInput

func (RouterCommunityListMap) ElementType() reflect.Type {
	return reflect.TypeOf((*map[string]*RouterCommunityList)(nil)).Elem()
}

func (i RouterCommunityListMap) ToRouterCommunityListMapOutput() RouterCommunityListMapOutput {
	return i.ToRouterCommunityListMapOutputWithContext(context.Background())
}

func (i RouterCommunityListMap) ToRouterCommunityListMapOutputWithContext(ctx context.Context) RouterCommunityListMapOutput {
	return pulumi.ToOutputWithContext(ctx, i).(RouterCommunityListMapOutput)
}

func (i RouterCommunityListMap) ToOutput(ctx context.Context) pulumix.Output[map[string]*RouterCommunityList] {
	return pulumix.Output[map[string]*RouterCommunityList]{
		OutputState: i.ToRouterCommunityListMapOutputWithContext(ctx).OutputState,
	}
}

type RouterCommunityListOutput struct{ *pulumi.OutputState }

func (RouterCommunityListOutput) ElementType() reflect.Type {
	return reflect.TypeOf((**RouterCommunityList)(nil)).Elem()
}

func (o RouterCommunityListOutput) ToRouterCommunityListOutput() RouterCommunityListOutput {
	return o
}

func (o RouterCommunityListOutput) ToRouterCommunityListOutputWithContext(ctx context.Context) RouterCommunityListOutput {
	return o
}

func (o RouterCommunityListOutput) ToOutput(ctx context.Context) pulumix.Output[*RouterCommunityList] {
	return pulumix.Output[*RouterCommunityList]{
		OutputState: o.OutputState,
	}
}

func (o RouterCommunityListOutput) DynamicSortSubtable() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *RouterCommunityList) pulumi.StringPtrOutput { return v.DynamicSortSubtable }).(pulumi.StringPtrOutput)
}

func (o RouterCommunityListOutput) GetAllTables() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *RouterCommunityList) pulumi.StringPtrOutput { return v.GetAllTables }).(pulumi.StringPtrOutput)
}

func (o RouterCommunityListOutput) Name() pulumi.StringOutput {
	return o.ApplyT(func(v *RouterCommunityList) pulumi.StringOutput { return v.Name }).(pulumi.StringOutput)
}

func (o RouterCommunityListOutput) Rules() RouterCommunityListRuleArrayOutput {
	return o.ApplyT(func(v *RouterCommunityList) RouterCommunityListRuleArrayOutput { return v.Rules }).(RouterCommunityListRuleArrayOutput)
}

func (o RouterCommunityListOutput) Type() pulumi.StringOutput {
	return o.ApplyT(func(v *RouterCommunityList) pulumi.StringOutput { return v.Type }).(pulumi.StringOutput)
}

func (o RouterCommunityListOutput) Vdomparam() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *RouterCommunityList) pulumi.StringPtrOutput { return v.Vdomparam }).(pulumi.StringPtrOutput)
}

type RouterCommunityListArrayOutput struct{ *pulumi.OutputState }

func (RouterCommunityListArrayOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*[]*RouterCommunityList)(nil)).Elem()
}

func (o RouterCommunityListArrayOutput) ToRouterCommunityListArrayOutput() RouterCommunityListArrayOutput {
	return o
}

func (o RouterCommunityListArrayOutput) ToRouterCommunityListArrayOutputWithContext(ctx context.Context) RouterCommunityListArrayOutput {
	return o
}

func (o RouterCommunityListArrayOutput) ToOutput(ctx context.Context) pulumix.Output[[]*RouterCommunityList] {
	return pulumix.Output[[]*RouterCommunityList]{
		OutputState: o.OutputState,
	}
}

func (o RouterCommunityListArrayOutput) Index(i pulumi.IntInput) RouterCommunityListOutput {
	return pulumi.All(o, i).ApplyT(func(vs []interface{}) *RouterCommunityList {
		return vs[0].([]*RouterCommunityList)[vs[1].(int)]
	}).(RouterCommunityListOutput)
}

type RouterCommunityListMapOutput struct{ *pulumi.OutputState }

func (RouterCommunityListMapOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*map[string]*RouterCommunityList)(nil)).Elem()
}

func (o RouterCommunityListMapOutput) ToRouterCommunityListMapOutput() RouterCommunityListMapOutput {
	return o
}

func (o RouterCommunityListMapOutput) ToRouterCommunityListMapOutputWithContext(ctx context.Context) RouterCommunityListMapOutput {
	return o
}

func (o RouterCommunityListMapOutput) ToOutput(ctx context.Context) pulumix.Output[map[string]*RouterCommunityList] {
	return pulumix.Output[map[string]*RouterCommunityList]{
		OutputState: o.OutputState,
	}
}

func (o RouterCommunityListMapOutput) MapIndex(k pulumi.StringInput) RouterCommunityListOutput {
	return pulumi.All(o, k).ApplyT(func(vs []interface{}) *RouterCommunityList {
		return vs[0].(map[string]*RouterCommunityList)[vs[1].(string)]
	}).(RouterCommunityListOutput)
}

func init() {
	pulumi.RegisterInputType(reflect.TypeOf((*RouterCommunityListInput)(nil)).Elem(), &RouterCommunityList{})
	pulumi.RegisterInputType(reflect.TypeOf((*RouterCommunityListArrayInput)(nil)).Elem(), RouterCommunityListArray{})
	pulumi.RegisterInputType(reflect.TypeOf((*RouterCommunityListMapInput)(nil)).Elem(), RouterCommunityListMap{})
	pulumi.RegisterOutputType(RouterCommunityListOutput{})
	pulumi.RegisterOutputType(RouterCommunityListArrayOutput{})
	pulumi.RegisterOutputType(RouterCommunityListMapOutput{})
}
