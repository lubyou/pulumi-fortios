// Code generated by the Pulumi Terraform Bridge (tfgen) Tool DO NOT EDIT.
// *** WARNING: Do not edit by hand unless you're certain you know what you are doing! ***

package fortios

import (
	"context"
	"reflect"

	"github.com/lubyou/pulumi-fortios/sdk/go/fortios/internal"
	"github.com/pulumi/pulumi/sdk/v3/go/pulumi"
)

type ApplicationGroup struct {
	pulumi.CustomResourceState

	Applications        ApplicationGroupApplicationArrayOutput `pulumi:"applications"`
	Behavior            pulumi.StringOutput                    `pulumi:"behavior"`
	Categories          ApplicationGroupCategoryArrayOutput    `pulumi:"categories"`
	Comment             pulumi.StringPtrOutput                 `pulumi:"comment"`
	DynamicSortSubtable pulumi.StringPtrOutput                 `pulumi:"dynamicSortSubtable"`
	GetAllTables        pulumi.StringPtrOutput                 `pulumi:"getAllTables"`
	Name                pulumi.StringOutput                    `pulumi:"name"`
	Popularity          pulumi.StringOutput                    `pulumi:"popularity"`
	Protocols           pulumi.StringOutput                    `pulumi:"protocols"`
	Risks               ApplicationGroupRiskArrayOutput        `pulumi:"risks"`
	Technology          pulumi.StringOutput                    `pulumi:"technology"`
	Type                pulumi.StringOutput                    `pulumi:"type"`
	Vdomparam           pulumi.StringPtrOutput                 `pulumi:"vdomparam"`
	Vendor              pulumi.StringOutput                    `pulumi:"vendor"`
}

// NewApplicationGroup registers a new resource with the given unique name, arguments, and options.
func NewApplicationGroup(ctx *pulumi.Context,
	name string, args *ApplicationGroupArgs, opts ...pulumi.ResourceOption) (*ApplicationGroup, error) {
	if args == nil {
		args = &ApplicationGroupArgs{}
	}

	opts = internal.PkgResourceDefaultOpts(opts)
	var resource ApplicationGroup
	err := ctx.RegisterResource("fortios:index/applicationGroup:ApplicationGroup", name, args, &resource, opts...)
	if err != nil {
		return nil, err
	}
	return &resource, nil
}

// GetApplicationGroup gets an existing ApplicationGroup resource's state with the given name, ID, and optional
// state properties that are used to uniquely qualify the lookup (nil if not required).
func GetApplicationGroup(ctx *pulumi.Context,
	name string, id pulumi.IDInput, state *ApplicationGroupState, opts ...pulumi.ResourceOption) (*ApplicationGroup, error) {
	var resource ApplicationGroup
	err := ctx.ReadResource("fortios:index/applicationGroup:ApplicationGroup", name, id, state, &resource, opts...)
	if err != nil {
		return nil, err
	}
	return &resource, nil
}

// Input properties used for looking up and filtering ApplicationGroup resources.
type applicationGroupState struct {
	Applications        []ApplicationGroupApplication `pulumi:"applications"`
	Behavior            *string                       `pulumi:"behavior"`
	Categories          []ApplicationGroupCategory    `pulumi:"categories"`
	Comment             *string                       `pulumi:"comment"`
	DynamicSortSubtable *string                       `pulumi:"dynamicSortSubtable"`
	GetAllTables        *string                       `pulumi:"getAllTables"`
	Name                *string                       `pulumi:"name"`
	Popularity          *string                       `pulumi:"popularity"`
	Protocols           *string                       `pulumi:"protocols"`
	Risks               []ApplicationGroupRisk        `pulumi:"risks"`
	Technology          *string                       `pulumi:"technology"`
	Type                *string                       `pulumi:"type"`
	Vdomparam           *string                       `pulumi:"vdomparam"`
	Vendor              *string                       `pulumi:"vendor"`
}

type ApplicationGroupState struct {
	Applications        ApplicationGroupApplicationArrayInput
	Behavior            pulumi.StringPtrInput
	Categories          ApplicationGroupCategoryArrayInput
	Comment             pulumi.StringPtrInput
	DynamicSortSubtable pulumi.StringPtrInput
	GetAllTables        pulumi.StringPtrInput
	Name                pulumi.StringPtrInput
	Popularity          pulumi.StringPtrInput
	Protocols           pulumi.StringPtrInput
	Risks               ApplicationGroupRiskArrayInput
	Technology          pulumi.StringPtrInput
	Type                pulumi.StringPtrInput
	Vdomparam           pulumi.StringPtrInput
	Vendor              pulumi.StringPtrInput
}

func (ApplicationGroupState) ElementType() reflect.Type {
	return reflect.TypeOf((*applicationGroupState)(nil)).Elem()
}

type applicationGroupArgs struct {
	Applications        []ApplicationGroupApplication `pulumi:"applications"`
	Behavior            *string                       `pulumi:"behavior"`
	Categories          []ApplicationGroupCategory    `pulumi:"categories"`
	Comment             *string                       `pulumi:"comment"`
	DynamicSortSubtable *string                       `pulumi:"dynamicSortSubtable"`
	GetAllTables        *string                       `pulumi:"getAllTables"`
	Name                *string                       `pulumi:"name"`
	Popularity          *string                       `pulumi:"popularity"`
	Protocols           *string                       `pulumi:"protocols"`
	Risks               []ApplicationGroupRisk        `pulumi:"risks"`
	Technology          *string                       `pulumi:"technology"`
	Type                *string                       `pulumi:"type"`
	Vdomparam           *string                       `pulumi:"vdomparam"`
	Vendor              *string                       `pulumi:"vendor"`
}

// The set of arguments for constructing a ApplicationGroup resource.
type ApplicationGroupArgs struct {
	Applications        ApplicationGroupApplicationArrayInput
	Behavior            pulumi.StringPtrInput
	Categories          ApplicationGroupCategoryArrayInput
	Comment             pulumi.StringPtrInput
	DynamicSortSubtable pulumi.StringPtrInput
	GetAllTables        pulumi.StringPtrInput
	Name                pulumi.StringPtrInput
	Popularity          pulumi.StringPtrInput
	Protocols           pulumi.StringPtrInput
	Risks               ApplicationGroupRiskArrayInput
	Technology          pulumi.StringPtrInput
	Type                pulumi.StringPtrInput
	Vdomparam           pulumi.StringPtrInput
	Vendor              pulumi.StringPtrInput
}

func (ApplicationGroupArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*applicationGroupArgs)(nil)).Elem()
}

type ApplicationGroupInput interface {
	pulumi.Input

	ToApplicationGroupOutput() ApplicationGroupOutput
	ToApplicationGroupOutputWithContext(ctx context.Context) ApplicationGroupOutput
}

func (*ApplicationGroup) ElementType() reflect.Type {
	return reflect.TypeOf((**ApplicationGroup)(nil)).Elem()
}

func (i *ApplicationGroup) ToApplicationGroupOutput() ApplicationGroupOutput {
	return i.ToApplicationGroupOutputWithContext(context.Background())
}

func (i *ApplicationGroup) ToApplicationGroupOutputWithContext(ctx context.Context) ApplicationGroupOutput {
	return pulumi.ToOutputWithContext(ctx, i).(ApplicationGroupOutput)
}

// ApplicationGroupArrayInput is an input type that accepts ApplicationGroupArray and ApplicationGroupArrayOutput values.
// You can construct a concrete instance of `ApplicationGroupArrayInput` via:
//
//	ApplicationGroupArray{ ApplicationGroupArgs{...} }
type ApplicationGroupArrayInput interface {
	pulumi.Input

	ToApplicationGroupArrayOutput() ApplicationGroupArrayOutput
	ToApplicationGroupArrayOutputWithContext(context.Context) ApplicationGroupArrayOutput
}

type ApplicationGroupArray []ApplicationGroupInput

func (ApplicationGroupArray) ElementType() reflect.Type {
	return reflect.TypeOf((*[]*ApplicationGroup)(nil)).Elem()
}

func (i ApplicationGroupArray) ToApplicationGroupArrayOutput() ApplicationGroupArrayOutput {
	return i.ToApplicationGroupArrayOutputWithContext(context.Background())
}

func (i ApplicationGroupArray) ToApplicationGroupArrayOutputWithContext(ctx context.Context) ApplicationGroupArrayOutput {
	return pulumi.ToOutputWithContext(ctx, i).(ApplicationGroupArrayOutput)
}

// ApplicationGroupMapInput is an input type that accepts ApplicationGroupMap and ApplicationGroupMapOutput values.
// You can construct a concrete instance of `ApplicationGroupMapInput` via:
//
//	ApplicationGroupMap{ "key": ApplicationGroupArgs{...} }
type ApplicationGroupMapInput interface {
	pulumi.Input

	ToApplicationGroupMapOutput() ApplicationGroupMapOutput
	ToApplicationGroupMapOutputWithContext(context.Context) ApplicationGroupMapOutput
}

type ApplicationGroupMap map[string]ApplicationGroupInput

func (ApplicationGroupMap) ElementType() reflect.Type {
	return reflect.TypeOf((*map[string]*ApplicationGroup)(nil)).Elem()
}

func (i ApplicationGroupMap) ToApplicationGroupMapOutput() ApplicationGroupMapOutput {
	return i.ToApplicationGroupMapOutputWithContext(context.Background())
}

func (i ApplicationGroupMap) ToApplicationGroupMapOutputWithContext(ctx context.Context) ApplicationGroupMapOutput {
	return pulumi.ToOutputWithContext(ctx, i).(ApplicationGroupMapOutput)
}

type ApplicationGroupOutput struct{ *pulumi.OutputState }

func (ApplicationGroupOutput) ElementType() reflect.Type {
	return reflect.TypeOf((**ApplicationGroup)(nil)).Elem()
}

func (o ApplicationGroupOutput) ToApplicationGroupOutput() ApplicationGroupOutput {
	return o
}

func (o ApplicationGroupOutput) ToApplicationGroupOutputWithContext(ctx context.Context) ApplicationGroupOutput {
	return o
}

func (o ApplicationGroupOutput) Applications() ApplicationGroupApplicationArrayOutput {
	return o.ApplyT(func(v *ApplicationGroup) ApplicationGroupApplicationArrayOutput { return v.Applications }).(ApplicationGroupApplicationArrayOutput)
}

func (o ApplicationGroupOutput) Behavior() pulumi.StringOutput {
	return o.ApplyT(func(v *ApplicationGroup) pulumi.StringOutput { return v.Behavior }).(pulumi.StringOutput)
}

func (o ApplicationGroupOutput) Categories() ApplicationGroupCategoryArrayOutput {
	return o.ApplyT(func(v *ApplicationGroup) ApplicationGroupCategoryArrayOutput { return v.Categories }).(ApplicationGroupCategoryArrayOutput)
}

func (o ApplicationGroupOutput) Comment() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *ApplicationGroup) pulumi.StringPtrOutput { return v.Comment }).(pulumi.StringPtrOutput)
}

func (o ApplicationGroupOutput) DynamicSortSubtable() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *ApplicationGroup) pulumi.StringPtrOutput { return v.DynamicSortSubtable }).(pulumi.StringPtrOutput)
}

func (o ApplicationGroupOutput) GetAllTables() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *ApplicationGroup) pulumi.StringPtrOutput { return v.GetAllTables }).(pulumi.StringPtrOutput)
}

func (o ApplicationGroupOutput) Name() pulumi.StringOutput {
	return o.ApplyT(func(v *ApplicationGroup) pulumi.StringOutput { return v.Name }).(pulumi.StringOutput)
}

func (o ApplicationGroupOutput) Popularity() pulumi.StringOutput {
	return o.ApplyT(func(v *ApplicationGroup) pulumi.StringOutput { return v.Popularity }).(pulumi.StringOutput)
}

func (o ApplicationGroupOutput) Protocols() pulumi.StringOutput {
	return o.ApplyT(func(v *ApplicationGroup) pulumi.StringOutput { return v.Protocols }).(pulumi.StringOutput)
}

func (o ApplicationGroupOutput) Risks() ApplicationGroupRiskArrayOutput {
	return o.ApplyT(func(v *ApplicationGroup) ApplicationGroupRiskArrayOutput { return v.Risks }).(ApplicationGroupRiskArrayOutput)
}

func (o ApplicationGroupOutput) Technology() pulumi.StringOutput {
	return o.ApplyT(func(v *ApplicationGroup) pulumi.StringOutput { return v.Technology }).(pulumi.StringOutput)
}

func (o ApplicationGroupOutput) Type() pulumi.StringOutput {
	return o.ApplyT(func(v *ApplicationGroup) pulumi.StringOutput { return v.Type }).(pulumi.StringOutput)
}

func (o ApplicationGroupOutput) Vdomparam() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *ApplicationGroup) pulumi.StringPtrOutput { return v.Vdomparam }).(pulumi.StringPtrOutput)
}

func (o ApplicationGroupOutput) Vendor() pulumi.StringOutput {
	return o.ApplyT(func(v *ApplicationGroup) pulumi.StringOutput { return v.Vendor }).(pulumi.StringOutput)
}

type ApplicationGroupArrayOutput struct{ *pulumi.OutputState }

func (ApplicationGroupArrayOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*[]*ApplicationGroup)(nil)).Elem()
}

func (o ApplicationGroupArrayOutput) ToApplicationGroupArrayOutput() ApplicationGroupArrayOutput {
	return o
}

func (o ApplicationGroupArrayOutput) ToApplicationGroupArrayOutputWithContext(ctx context.Context) ApplicationGroupArrayOutput {
	return o
}

func (o ApplicationGroupArrayOutput) Index(i pulumi.IntInput) ApplicationGroupOutput {
	return pulumi.All(o, i).ApplyT(func(vs []interface{}) *ApplicationGroup {
		return vs[0].([]*ApplicationGroup)[vs[1].(int)]
	}).(ApplicationGroupOutput)
}

type ApplicationGroupMapOutput struct{ *pulumi.OutputState }

func (ApplicationGroupMapOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*map[string]*ApplicationGroup)(nil)).Elem()
}

func (o ApplicationGroupMapOutput) ToApplicationGroupMapOutput() ApplicationGroupMapOutput {
	return o
}

func (o ApplicationGroupMapOutput) ToApplicationGroupMapOutputWithContext(ctx context.Context) ApplicationGroupMapOutput {
	return o
}

func (o ApplicationGroupMapOutput) MapIndex(k pulumi.StringInput) ApplicationGroupOutput {
	return pulumi.All(o, k).ApplyT(func(vs []interface{}) *ApplicationGroup {
		return vs[0].(map[string]*ApplicationGroup)[vs[1].(string)]
	}).(ApplicationGroupOutput)
}

func init() {
	pulumi.RegisterInputType(reflect.TypeOf((*ApplicationGroupInput)(nil)).Elem(), &ApplicationGroup{})
	pulumi.RegisterInputType(reflect.TypeOf((*ApplicationGroupArrayInput)(nil)).Elem(), ApplicationGroupArray{})
	pulumi.RegisterInputType(reflect.TypeOf((*ApplicationGroupMapInput)(nil)).Elem(), ApplicationGroupMap{})
	pulumi.RegisterOutputType(ApplicationGroupOutput{})
	pulumi.RegisterOutputType(ApplicationGroupArrayOutput{})
	pulumi.RegisterOutputType(ApplicationGroupMapOutput{})
}
