// Code generated by the Pulumi Terraform Bridge (tfgen) Tool DO NOT EDIT.
// *** WARNING: Do not edit by hand unless you're certain you know what you are doing! ***

package fortios

import (
	"context"
	"reflect"

	"github.com/lubyou/pulumi-fortios/sdk/go/fortios/internal"
	"github.com/pulumi/pulumi/sdk/v3/go/pulumi"
	"github.com/pulumi/pulumi/sdk/v3/go/pulumix"
)

type EmailfilterBwl struct {
	pulumi.CustomResourceState

	Comment             pulumi.StringPtrOutput         `pulumi:"comment"`
	DynamicSortSubtable pulumi.StringPtrOutput         `pulumi:"dynamicSortSubtable"`
	Entries             EmailfilterBwlEntryArrayOutput `pulumi:"entries"`
	Fosid               pulumi.IntOutput               `pulumi:"fosid"`
	GetAllTables        pulumi.StringPtrOutput         `pulumi:"getAllTables"`
	Name                pulumi.StringOutput            `pulumi:"name"`
	Vdomparam           pulumi.StringPtrOutput         `pulumi:"vdomparam"`
}

// NewEmailfilterBwl registers a new resource with the given unique name, arguments, and options.
func NewEmailfilterBwl(ctx *pulumi.Context,
	name string, args *EmailfilterBwlArgs, opts ...pulumi.ResourceOption) (*EmailfilterBwl, error) {
	if args == nil {
		args = &EmailfilterBwlArgs{}
	}

	opts = internal.PkgResourceDefaultOpts(opts)
	var resource EmailfilterBwl
	err := ctx.RegisterResource("fortios:index/emailfilterBwl:EmailfilterBwl", name, args, &resource, opts...)
	if err != nil {
		return nil, err
	}
	return &resource, nil
}

// GetEmailfilterBwl gets an existing EmailfilterBwl resource's state with the given name, ID, and optional
// state properties that are used to uniquely qualify the lookup (nil if not required).
func GetEmailfilterBwl(ctx *pulumi.Context,
	name string, id pulumi.IDInput, state *EmailfilterBwlState, opts ...pulumi.ResourceOption) (*EmailfilterBwl, error) {
	var resource EmailfilterBwl
	err := ctx.ReadResource("fortios:index/emailfilterBwl:EmailfilterBwl", name, id, state, &resource, opts...)
	if err != nil {
		return nil, err
	}
	return &resource, nil
}

// Input properties used for looking up and filtering EmailfilterBwl resources.
type emailfilterBwlState struct {
	Comment             *string               `pulumi:"comment"`
	DynamicSortSubtable *string               `pulumi:"dynamicSortSubtable"`
	Entries             []EmailfilterBwlEntry `pulumi:"entries"`
	Fosid               *int                  `pulumi:"fosid"`
	GetAllTables        *string               `pulumi:"getAllTables"`
	Name                *string               `pulumi:"name"`
	Vdomparam           *string               `pulumi:"vdomparam"`
}

type EmailfilterBwlState struct {
	Comment             pulumi.StringPtrInput
	DynamicSortSubtable pulumi.StringPtrInput
	Entries             EmailfilterBwlEntryArrayInput
	Fosid               pulumi.IntPtrInput
	GetAllTables        pulumi.StringPtrInput
	Name                pulumi.StringPtrInput
	Vdomparam           pulumi.StringPtrInput
}

func (EmailfilterBwlState) ElementType() reflect.Type {
	return reflect.TypeOf((*emailfilterBwlState)(nil)).Elem()
}

type emailfilterBwlArgs struct {
	Comment             *string               `pulumi:"comment"`
	DynamicSortSubtable *string               `pulumi:"dynamicSortSubtable"`
	Entries             []EmailfilterBwlEntry `pulumi:"entries"`
	Fosid               *int                  `pulumi:"fosid"`
	GetAllTables        *string               `pulumi:"getAllTables"`
	Name                *string               `pulumi:"name"`
	Vdomparam           *string               `pulumi:"vdomparam"`
}

// The set of arguments for constructing a EmailfilterBwl resource.
type EmailfilterBwlArgs struct {
	Comment             pulumi.StringPtrInput
	DynamicSortSubtable pulumi.StringPtrInput
	Entries             EmailfilterBwlEntryArrayInput
	Fosid               pulumi.IntPtrInput
	GetAllTables        pulumi.StringPtrInput
	Name                pulumi.StringPtrInput
	Vdomparam           pulumi.StringPtrInput
}

func (EmailfilterBwlArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*emailfilterBwlArgs)(nil)).Elem()
}

type EmailfilterBwlInput interface {
	pulumi.Input

	ToEmailfilterBwlOutput() EmailfilterBwlOutput
	ToEmailfilterBwlOutputWithContext(ctx context.Context) EmailfilterBwlOutput
}

func (*EmailfilterBwl) ElementType() reflect.Type {
	return reflect.TypeOf((**EmailfilterBwl)(nil)).Elem()
}

func (i *EmailfilterBwl) ToEmailfilterBwlOutput() EmailfilterBwlOutput {
	return i.ToEmailfilterBwlOutputWithContext(context.Background())
}

func (i *EmailfilterBwl) ToEmailfilterBwlOutputWithContext(ctx context.Context) EmailfilterBwlOutput {
	return pulumi.ToOutputWithContext(ctx, i).(EmailfilterBwlOutput)
}

func (i *EmailfilterBwl) ToOutput(ctx context.Context) pulumix.Output[*EmailfilterBwl] {
	return pulumix.Output[*EmailfilterBwl]{
		OutputState: i.ToEmailfilterBwlOutputWithContext(ctx).OutputState,
	}
}

// EmailfilterBwlArrayInput is an input type that accepts EmailfilterBwlArray and EmailfilterBwlArrayOutput values.
// You can construct a concrete instance of `EmailfilterBwlArrayInput` via:
//
//	EmailfilterBwlArray{ EmailfilterBwlArgs{...} }
type EmailfilterBwlArrayInput interface {
	pulumi.Input

	ToEmailfilterBwlArrayOutput() EmailfilterBwlArrayOutput
	ToEmailfilterBwlArrayOutputWithContext(context.Context) EmailfilterBwlArrayOutput
}

type EmailfilterBwlArray []EmailfilterBwlInput

func (EmailfilterBwlArray) ElementType() reflect.Type {
	return reflect.TypeOf((*[]*EmailfilterBwl)(nil)).Elem()
}

func (i EmailfilterBwlArray) ToEmailfilterBwlArrayOutput() EmailfilterBwlArrayOutput {
	return i.ToEmailfilterBwlArrayOutputWithContext(context.Background())
}

func (i EmailfilterBwlArray) ToEmailfilterBwlArrayOutputWithContext(ctx context.Context) EmailfilterBwlArrayOutput {
	return pulumi.ToOutputWithContext(ctx, i).(EmailfilterBwlArrayOutput)
}

func (i EmailfilterBwlArray) ToOutput(ctx context.Context) pulumix.Output[[]*EmailfilterBwl] {
	return pulumix.Output[[]*EmailfilterBwl]{
		OutputState: i.ToEmailfilterBwlArrayOutputWithContext(ctx).OutputState,
	}
}

// EmailfilterBwlMapInput is an input type that accepts EmailfilterBwlMap and EmailfilterBwlMapOutput values.
// You can construct a concrete instance of `EmailfilterBwlMapInput` via:
//
//	EmailfilterBwlMap{ "key": EmailfilterBwlArgs{...} }
type EmailfilterBwlMapInput interface {
	pulumi.Input

	ToEmailfilterBwlMapOutput() EmailfilterBwlMapOutput
	ToEmailfilterBwlMapOutputWithContext(context.Context) EmailfilterBwlMapOutput
}

type EmailfilterBwlMap map[string]EmailfilterBwlInput

func (EmailfilterBwlMap) ElementType() reflect.Type {
	return reflect.TypeOf((*map[string]*EmailfilterBwl)(nil)).Elem()
}

func (i EmailfilterBwlMap) ToEmailfilterBwlMapOutput() EmailfilterBwlMapOutput {
	return i.ToEmailfilterBwlMapOutputWithContext(context.Background())
}

func (i EmailfilterBwlMap) ToEmailfilterBwlMapOutputWithContext(ctx context.Context) EmailfilterBwlMapOutput {
	return pulumi.ToOutputWithContext(ctx, i).(EmailfilterBwlMapOutput)
}

func (i EmailfilterBwlMap) ToOutput(ctx context.Context) pulumix.Output[map[string]*EmailfilterBwl] {
	return pulumix.Output[map[string]*EmailfilterBwl]{
		OutputState: i.ToEmailfilterBwlMapOutputWithContext(ctx).OutputState,
	}
}

type EmailfilterBwlOutput struct{ *pulumi.OutputState }

func (EmailfilterBwlOutput) ElementType() reflect.Type {
	return reflect.TypeOf((**EmailfilterBwl)(nil)).Elem()
}

func (o EmailfilterBwlOutput) ToEmailfilterBwlOutput() EmailfilterBwlOutput {
	return o
}

func (o EmailfilterBwlOutput) ToEmailfilterBwlOutputWithContext(ctx context.Context) EmailfilterBwlOutput {
	return o
}

func (o EmailfilterBwlOutput) ToOutput(ctx context.Context) pulumix.Output[*EmailfilterBwl] {
	return pulumix.Output[*EmailfilterBwl]{
		OutputState: o.OutputState,
	}
}

func (o EmailfilterBwlOutput) Comment() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *EmailfilterBwl) pulumi.StringPtrOutput { return v.Comment }).(pulumi.StringPtrOutput)
}

func (o EmailfilterBwlOutput) DynamicSortSubtable() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *EmailfilterBwl) pulumi.StringPtrOutput { return v.DynamicSortSubtable }).(pulumi.StringPtrOutput)
}

func (o EmailfilterBwlOutput) Entries() EmailfilterBwlEntryArrayOutput {
	return o.ApplyT(func(v *EmailfilterBwl) EmailfilterBwlEntryArrayOutput { return v.Entries }).(EmailfilterBwlEntryArrayOutput)
}

func (o EmailfilterBwlOutput) Fosid() pulumi.IntOutput {
	return o.ApplyT(func(v *EmailfilterBwl) pulumi.IntOutput { return v.Fosid }).(pulumi.IntOutput)
}

func (o EmailfilterBwlOutput) GetAllTables() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *EmailfilterBwl) pulumi.StringPtrOutput { return v.GetAllTables }).(pulumi.StringPtrOutput)
}

func (o EmailfilterBwlOutput) Name() pulumi.StringOutput {
	return o.ApplyT(func(v *EmailfilterBwl) pulumi.StringOutput { return v.Name }).(pulumi.StringOutput)
}

func (o EmailfilterBwlOutput) Vdomparam() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *EmailfilterBwl) pulumi.StringPtrOutput { return v.Vdomparam }).(pulumi.StringPtrOutput)
}

type EmailfilterBwlArrayOutput struct{ *pulumi.OutputState }

func (EmailfilterBwlArrayOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*[]*EmailfilterBwl)(nil)).Elem()
}

func (o EmailfilterBwlArrayOutput) ToEmailfilterBwlArrayOutput() EmailfilterBwlArrayOutput {
	return o
}

func (o EmailfilterBwlArrayOutput) ToEmailfilterBwlArrayOutputWithContext(ctx context.Context) EmailfilterBwlArrayOutput {
	return o
}

func (o EmailfilterBwlArrayOutput) ToOutput(ctx context.Context) pulumix.Output[[]*EmailfilterBwl] {
	return pulumix.Output[[]*EmailfilterBwl]{
		OutputState: o.OutputState,
	}
}

func (o EmailfilterBwlArrayOutput) Index(i pulumi.IntInput) EmailfilterBwlOutput {
	return pulumi.All(o, i).ApplyT(func(vs []interface{}) *EmailfilterBwl {
		return vs[0].([]*EmailfilterBwl)[vs[1].(int)]
	}).(EmailfilterBwlOutput)
}

type EmailfilterBwlMapOutput struct{ *pulumi.OutputState }

func (EmailfilterBwlMapOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*map[string]*EmailfilterBwl)(nil)).Elem()
}

func (o EmailfilterBwlMapOutput) ToEmailfilterBwlMapOutput() EmailfilterBwlMapOutput {
	return o
}

func (o EmailfilterBwlMapOutput) ToEmailfilterBwlMapOutputWithContext(ctx context.Context) EmailfilterBwlMapOutput {
	return o
}

func (o EmailfilterBwlMapOutput) ToOutput(ctx context.Context) pulumix.Output[map[string]*EmailfilterBwl] {
	return pulumix.Output[map[string]*EmailfilterBwl]{
		OutputState: o.OutputState,
	}
}

func (o EmailfilterBwlMapOutput) MapIndex(k pulumi.StringInput) EmailfilterBwlOutput {
	return pulumi.All(o, k).ApplyT(func(vs []interface{}) *EmailfilterBwl {
		return vs[0].(map[string]*EmailfilterBwl)[vs[1].(string)]
	}).(EmailfilterBwlOutput)
}

func init() {
	pulumi.RegisterInputType(reflect.TypeOf((*EmailfilterBwlInput)(nil)).Elem(), &EmailfilterBwl{})
	pulumi.RegisterInputType(reflect.TypeOf((*EmailfilterBwlArrayInput)(nil)).Elem(), EmailfilterBwlArray{})
	pulumi.RegisterInputType(reflect.TypeOf((*EmailfilterBwlMapInput)(nil)).Elem(), EmailfilterBwlMap{})
	pulumi.RegisterOutputType(EmailfilterBwlOutput{})
	pulumi.RegisterOutputType(EmailfilterBwlArrayOutput{})
	pulumi.RegisterOutputType(EmailfilterBwlMapOutput{})
}
