// Code generated by the Pulumi Terraform Bridge (tfgen) Tool DO NOT EDIT.
// *** WARNING: Do not edit by hand unless you're certain you know what you are doing! ***

package fortios

import (
	"context"
	"reflect"

	"errors"
	"github.com/pulumi/pulumi/sdk/v3/go/pulumi"
)

type RouterbgpNetwork struct {
	pulumi.CustomResourceState

	Backdoor           pulumi.StringOutput    `pulumi:"backdoor"`
	Fosid              pulumi.IntOutput       `pulumi:"fosid"`
	NetworkImportCheck pulumi.StringOutput    `pulumi:"networkImportCheck"`
	Prefix             pulumi.StringOutput    `pulumi:"prefix"`
	RouteMap           pulumi.StringOutput    `pulumi:"routeMap"`
	Vdomparam          pulumi.StringPtrOutput `pulumi:"vdomparam"`
}

// NewRouterbgpNetwork registers a new resource with the given unique name, arguments, and options.
func NewRouterbgpNetwork(ctx *pulumi.Context,
	name string, args *RouterbgpNetworkArgs, opts ...pulumi.ResourceOption) (*RouterbgpNetwork, error) {
	if args == nil {
		return nil, errors.New("missing one or more required arguments")
	}

	if args.Prefix == nil {
		return nil, errors.New("invalid value for required argument 'Prefix'")
	}
	opts = pkgResourceDefaultOpts(opts)
	var resource RouterbgpNetwork
	err := ctx.RegisterResource("fortios:index/routerbgpNetwork:RouterbgpNetwork", name, args, &resource, opts...)
	if err != nil {
		return nil, err
	}
	return &resource, nil
}

// GetRouterbgpNetwork gets an existing RouterbgpNetwork resource's state with the given name, ID, and optional
// state properties that are used to uniquely qualify the lookup (nil if not required).
func GetRouterbgpNetwork(ctx *pulumi.Context,
	name string, id pulumi.IDInput, state *RouterbgpNetworkState, opts ...pulumi.ResourceOption) (*RouterbgpNetwork, error) {
	var resource RouterbgpNetwork
	err := ctx.ReadResource("fortios:index/routerbgpNetwork:RouterbgpNetwork", name, id, state, &resource, opts...)
	if err != nil {
		return nil, err
	}
	return &resource, nil
}

// Input properties used for looking up and filtering RouterbgpNetwork resources.
type routerbgpNetworkState struct {
	Backdoor           *string `pulumi:"backdoor"`
	Fosid              *int    `pulumi:"fosid"`
	NetworkImportCheck *string `pulumi:"networkImportCheck"`
	Prefix             *string `pulumi:"prefix"`
	RouteMap           *string `pulumi:"routeMap"`
	Vdomparam          *string `pulumi:"vdomparam"`
}

type RouterbgpNetworkState struct {
	Backdoor           pulumi.StringPtrInput
	Fosid              pulumi.IntPtrInput
	NetworkImportCheck pulumi.StringPtrInput
	Prefix             pulumi.StringPtrInput
	RouteMap           pulumi.StringPtrInput
	Vdomparam          pulumi.StringPtrInput
}

func (RouterbgpNetworkState) ElementType() reflect.Type {
	return reflect.TypeOf((*routerbgpNetworkState)(nil)).Elem()
}

type routerbgpNetworkArgs struct {
	Backdoor           *string `pulumi:"backdoor"`
	Fosid              *int    `pulumi:"fosid"`
	NetworkImportCheck *string `pulumi:"networkImportCheck"`
	Prefix             string  `pulumi:"prefix"`
	RouteMap           *string `pulumi:"routeMap"`
	Vdomparam          *string `pulumi:"vdomparam"`
}

// The set of arguments for constructing a RouterbgpNetwork resource.
type RouterbgpNetworkArgs struct {
	Backdoor           pulumi.StringPtrInput
	Fosid              pulumi.IntPtrInput
	NetworkImportCheck pulumi.StringPtrInput
	Prefix             pulumi.StringInput
	RouteMap           pulumi.StringPtrInput
	Vdomparam          pulumi.StringPtrInput
}

func (RouterbgpNetworkArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*routerbgpNetworkArgs)(nil)).Elem()
}

type RouterbgpNetworkInput interface {
	pulumi.Input

	ToRouterbgpNetworkOutput() RouterbgpNetworkOutput
	ToRouterbgpNetworkOutputWithContext(ctx context.Context) RouterbgpNetworkOutput
}

func (*RouterbgpNetwork) ElementType() reflect.Type {
	return reflect.TypeOf((**RouterbgpNetwork)(nil)).Elem()
}

func (i *RouterbgpNetwork) ToRouterbgpNetworkOutput() RouterbgpNetworkOutput {
	return i.ToRouterbgpNetworkOutputWithContext(context.Background())
}

func (i *RouterbgpNetwork) ToRouterbgpNetworkOutputWithContext(ctx context.Context) RouterbgpNetworkOutput {
	return pulumi.ToOutputWithContext(ctx, i).(RouterbgpNetworkOutput)
}

// RouterbgpNetworkArrayInput is an input type that accepts RouterbgpNetworkArray and RouterbgpNetworkArrayOutput values.
// You can construct a concrete instance of `RouterbgpNetworkArrayInput` via:
//
//	RouterbgpNetworkArray{ RouterbgpNetworkArgs{...} }
type RouterbgpNetworkArrayInput interface {
	pulumi.Input

	ToRouterbgpNetworkArrayOutput() RouterbgpNetworkArrayOutput
	ToRouterbgpNetworkArrayOutputWithContext(context.Context) RouterbgpNetworkArrayOutput
}

type RouterbgpNetworkArray []RouterbgpNetworkInput

func (RouterbgpNetworkArray) ElementType() reflect.Type {
	return reflect.TypeOf((*[]*RouterbgpNetwork)(nil)).Elem()
}

func (i RouterbgpNetworkArray) ToRouterbgpNetworkArrayOutput() RouterbgpNetworkArrayOutput {
	return i.ToRouterbgpNetworkArrayOutputWithContext(context.Background())
}

func (i RouterbgpNetworkArray) ToRouterbgpNetworkArrayOutputWithContext(ctx context.Context) RouterbgpNetworkArrayOutput {
	return pulumi.ToOutputWithContext(ctx, i).(RouterbgpNetworkArrayOutput)
}

// RouterbgpNetworkMapInput is an input type that accepts RouterbgpNetworkMap and RouterbgpNetworkMapOutput values.
// You can construct a concrete instance of `RouterbgpNetworkMapInput` via:
//
//	RouterbgpNetworkMap{ "key": RouterbgpNetworkArgs{...} }
type RouterbgpNetworkMapInput interface {
	pulumi.Input

	ToRouterbgpNetworkMapOutput() RouterbgpNetworkMapOutput
	ToRouterbgpNetworkMapOutputWithContext(context.Context) RouterbgpNetworkMapOutput
}

type RouterbgpNetworkMap map[string]RouterbgpNetworkInput

func (RouterbgpNetworkMap) ElementType() reflect.Type {
	return reflect.TypeOf((*map[string]*RouterbgpNetwork)(nil)).Elem()
}

func (i RouterbgpNetworkMap) ToRouterbgpNetworkMapOutput() RouterbgpNetworkMapOutput {
	return i.ToRouterbgpNetworkMapOutputWithContext(context.Background())
}

func (i RouterbgpNetworkMap) ToRouterbgpNetworkMapOutputWithContext(ctx context.Context) RouterbgpNetworkMapOutput {
	return pulumi.ToOutputWithContext(ctx, i).(RouterbgpNetworkMapOutput)
}

type RouterbgpNetworkOutput struct{ *pulumi.OutputState }

func (RouterbgpNetworkOutput) ElementType() reflect.Type {
	return reflect.TypeOf((**RouterbgpNetwork)(nil)).Elem()
}

func (o RouterbgpNetworkOutput) ToRouterbgpNetworkOutput() RouterbgpNetworkOutput {
	return o
}

func (o RouterbgpNetworkOutput) ToRouterbgpNetworkOutputWithContext(ctx context.Context) RouterbgpNetworkOutput {
	return o
}

func (o RouterbgpNetworkOutput) Backdoor() pulumi.StringOutput {
	return o.ApplyT(func(v *RouterbgpNetwork) pulumi.StringOutput { return v.Backdoor }).(pulumi.StringOutput)
}

func (o RouterbgpNetworkOutput) Fosid() pulumi.IntOutput {
	return o.ApplyT(func(v *RouterbgpNetwork) pulumi.IntOutput { return v.Fosid }).(pulumi.IntOutput)
}

func (o RouterbgpNetworkOutput) NetworkImportCheck() pulumi.StringOutput {
	return o.ApplyT(func(v *RouterbgpNetwork) pulumi.StringOutput { return v.NetworkImportCheck }).(pulumi.StringOutput)
}

func (o RouterbgpNetworkOutput) Prefix() pulumi.StringOutput {
	return o.ApplyT(func(v *RouterbgpNetwork) pulumi.StringOutput { return v.Prefix }).(pulumi.StringOutput)
}

func (o RouterbgpNetworkOutput) RouteMap() pulumi.StringOutput {
	return o.ApplyT(func(v *RouterbgpNetwork) pulumi.StringOutput { return v.RouteMap }).(pulumi.StringOutput)
}

func (o RouterbgpNetworkOutput) Vdomparam() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *RouterbgpNetwork) pulumi.StringPtrOutput { return v.Vdomparam }).(pulumi.StringPtrOutput)
}

type RouterbgpNetworkArrayOutput struct{ *pulumi.OutputState }

func (RouterbgpNetworkArrayOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*[]*RouterbgpNetwork)(nil)).Elem()
}

func (o RouterbgpNetworkArrayOutput) ToRouterbgpNetworkArrayOutput() RouterbgpNetworkArrayOutput {
	return o
}

func (o RouterbgpNetworkArrayOutput) ToRouterbgpNetworkArrayOutputWithContext(ctx context.Context) RouterbgpNetworkArrayOutput {
	return o
}

func (o RouterbgpNetworkArrayOutput) Index(i pulumi.IntInput) RouterbgpNetworkOutput {
	return pulumi.All(o, i).ApplyT(func(vs []interface{}) *RouterbgpNetwork {
		return vs[0].([]*RouterbgpNetwork)[vs[1].(int)]
	}).(RouterbgpNetworkOutput)
}

type RouterbgpNetworkMapOutput struct{ *pulumi.OutputState }

func (RouterbgpNetworkMapOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*map[string]*RouterbgpNetwork)(nil)).Elem()
}

func (o RouterbgpNetworkMapOutput) ToRouterbgpNetworkMapOutput() RouterbgpNetworkMapOutput {
	return o
}

func (o RouterbgpNetworkMapOutput) ToRouterbgpNetworkMapOutputWithContext(ctx context.Context) RouterbgpNetworkMapOutput {
	return o
}

func (o RouterbgpNetworkMapOutput) MapIndex(k pulumi.StringInput) RouterbgpNetworkOutput {
	return pulumi.All(o, k).ApplyT(func(vs []interface{}) *RouterbgpNetwork {
		return vs[0].(map[string]*RouterbgpNetwork)[vs[1].(string)]
	}).(RouterbgpNetworkOutput)
}

func init() {
	pulumi.RegisterInputType(reflect.TypeOf((*RouterbgpNetworkInput)(nil)).Elem(), &RouterbgpNetwork{})
	pulumi.RegisterInputType(reflect.TypeOf((*RouterbgpNetworkArrayInput)(nil)).Elem(), RouterbgpNetworkArray{})
	pulumi.RegisterInputType(reflect.TypeOf((*RouterbgpNetworkMapInput)(nil)).Elem(), RouterbgpNetworkMap{})
	pulumi.RegisterOutputType(RouterbgpNetworkOutput{})
	pulumi.RegisterOutputType(RouterbgpNetworkArrayOutput{})
	pulumi.RegisterOutputType(RouterbgpNetworkMapOutput{})
}
