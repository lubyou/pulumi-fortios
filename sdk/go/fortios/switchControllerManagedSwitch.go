// *** WARNING: this file was generated by the Pulumi Terraform Bridge (tfgen) Tool. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

package fortios

import (
	"context"
	"reflect"

	"github.com/pkg/errors"
	"github.com/pulumi/pulumi/sdk/v3/go/pulumi"
)

// Configure FortiSwitch devices that are managed by this FortiGate.
//
// ## Import
//
// SwitchController ManagedSwitch can be imported using any of these accepted formats$ export "FORTIOS_IMPORT_TABLE"="true"
//
// ```sh
//  $ pulumi import fortios:index/switchControllerManagedSwitch:SwitchControllerManagedSwitch labelname {{switch_id}}
// ```
//
//  $ unset "FORTIOS_IMPORT_TABLE"
type SwitchControllerManagedSwitch struct {
	pulumi.CustomResourceState

	// FortiSwitch access profile.
	AccessProfile pulumi.StringOutput `pulumi:"accessProfile"`
	// Configuration method to edit FortiSwitch commands to be pushed to this FortiSwitch device upon rebooting the FortiGate switch controller or the FortiSwitch. The structure of `customCommand` block is documented below.
	CustomCommands SwitchControllerManagedSwitchCustomCommandArrayOutput `pulumi:"customCommands"`
	// Delayed restart triggered for this FortiSwitch.
	DelayedRestartTrigger pulumi.IntOutput `pulumi:"delayedRestartTrigger"`
	// Description.
	Description pulumi.StringOutput `pulumi:"description"`
	// DHCP snooping server access list. Valid values: `global`, `enable`, `disable`.
	DhcpServerAccessList pulumi.StringOutput `pulumi:"dhcpServerAccessList"`
	// Directly connected FortiSwitch.
	DirectlyConnected pulumi.IntOutput `pulumi:"directlyConnected"`
	// List of features this FortiSwitch supports (not configurable) that is sent to the FortiGate device for subsequent configuration initiated by the FortiGate device.
	DynamicCapability pulumi.IntOutput `pulumi:"dynamicCapability"`
	// true or false, set this parameter to true when using dynamic forEach + toset to configure and sort sub-tables, please do not set this parameter when configuring static sub-tables.
	DynamicSortSubtable pulumi.StringPtrOutput `pulumi:"dynamicSortSubtable"`
	// Dynamically discovered FortiSwitch.
	DynamicallyDiscovered pulumi.IntOutput `pulumi:"dynamicallyDiscovered"`
	// Enable/disable provisioning of firmware to FortiSwitches on join connection. Valid values: `enable`, `disable`.
	FirmwareProvision pulumi.StringOutput `pulumi:"firmwareProvision"`
	// Enable/disable one-time automatic provisioning of the latest firmware version. Valid values: `disable`, `once`.
	FirmwareProvisionLatest pulumi.StringOutput `pulumi:"firmwareProvisionLatest"`
	// Firmware version to provision to this FortiSwitch on bootup (major.minor.build, i.e. 6.2.1234).
	FirmwareProvisionVersion pulumi.StringOutput `pulumi:"firmwareProvisionVersion"`
	// Flow-tracking netflow ipfix switch identity in hex format(00000000-FFFFFFFF default=0).
	FlowIdentity pulumi.StringOutput `pulumi:"flowIdentity"`
	// FortiSwitch WAN1 admin status; enable to authorize the FortiSwitch as a managed switch. Valid values: `discovered`, `disable`, `enable`.
	FswWan1Admin pulumi.StringOutput `pulumi:"fswWan1Admin"`
	// Fortiswitch WAN1 peer port.
	FswWan1Peer pulumi.StringOutput `pulumi:"fswWan1Peer"`
	// FortiSwitch WAN2 admin status; enable to authorize the FortiSwitch as a managed switch. Valid values: `discovered`, `disable`, `enable`.
	FswWan2Admin pulumi.StringOutput `pulumi:"fswWan2Admin"`
	// FortiSwitch WAN2 peer port.
	FswWan2Peer pulumi.StringOutput `pulumi:"fswWan2Peer"`
	// Set IGMP snooping mode for the physical port interface. Valid values: `enable`, `disable`.
	IgmpSnooping SwitchControllerManagedSwitchIgmpSnoopingPtrOutput `pulumi:"igmpSnooping"`
	// Enable/disable IP source guard. Valid values: `disable`, `enable`.
	IpSourceGuards SwitchControllerManagedSwitchIpSourceGuardArrayOutput `pulumi:"ipSourceGuards"`
	// Layer 3 management discovered.
	L3Discovered pulumi.IntOutput `pulumi:"l3Discovered"`
	// FortiSwitch maximum allowed trunk members.
	MaxAllowedTrunkMembers pulumi.IntOutput `pulumi:"maxAllowedTrunkMembers"`
	// Enable/disable MCLAG IGMP-snooping awareness. Valid values: `enable`, `disable`.
	MclagIgmpSnoopingAware pulumi.StringOutput `pulumi:"mclagIgmpSnoopingAware"`
	// Configuration method to edit FortiSwitch packet mirror. The structure of `mirror` block is documented below.
	Mirrors SwitchControllerManagedSwitchMirrorArrayOutput `pulumi:"mirrors"`
	// Configuration method to edit FortiSwitch 802.1X global settings. The structure of `n8021xSettings` block is documented below.
	N8021xSettings SwitchControllerManagedSwitchN8021xSettingsPtrOutput `pulumi:"n8021xSettings"`
	// Interface name.
	Name pulumi.StringOutput `pulumi:"name"`
	// Enable/disable overriding the global SNMP communities. Valid values: `enable`, `disable`.
	OverrideSnmpCommunity pulumi.StringOutput `pulumi:"overrideSnmpCommunity"`
	// Enable/disable overriding the global SNMP system information. Valid values: `disable`, `enable`.
	OverrideSnmpSysinfo pulumi.StringOutput `pulumi:"overrideSnmpSysinfo"`
	// Enable/disable overriding the global SNMP trap threshold values. Valid values: `enable`, `disable`.
	OverrideSnmpTrapThreshold pulumi.StringOutput `pulumi:"overrideSnmpTrapThreshold"`
	// Enable/disable overriding the global SNMP users. Valid values: `enable`, `disable`.
	OverrideSnmpUser pulumi.StringOutput `pulumi:"overrideSnmpUser"`
	// VDOM which owner of port belongs to.
	OwnerVdom pulumi.StringOutput `pulumi:"ownerVdom"`
	// PoE detection type for FortiSwitch.
	PoeDetectionType pulumi.IntOutput `pulumi:"poeDetectionType"`
	// Enable/disable PoE LLDP detection. Valid values: `enable`, `disable`.
	PoeLldpDetection pulumi.StringOutput `pulumi:"poeLldpDetection"`
	// Enable/disable PoE pre-standard detection. Valid values: `enable`, `disable`.
	PoePreStandardDetection pulumi.StringOutput `pulumi:"poePreStandardDetection"`
	// Managed-switch port list. The structure of `ports` block is documented below.
	Ports SwitchControllerManagedSwitchPortArrayOutput `pulumi:"ports"`
	// Pre-provisioned managed switch.
	PreProvisioned pulumi.IntOutput `pulumi:"preProvisioned"`
	// Set QoS drop-policy. Valid values: `taildrop`, `random-early-detection`.
	QosDropPolicy pulumi.StringOutput `pulumi:"qosDropPolicy"`
	// Set QoS RED/WRED drop probability.
	QosRedProbability pulumi.IntOutput `pulumi:"qosRedProbability"`
	// Configure logging by FortiSwitch device to a remote syslog server. The structure of `remoteLog` block is documented below.
	RemoteLogs SwitchControllerManagedSwitchRemoteLogArrayOutput `pulumi:"remoteLogs"`
	// Configuration method to edit Simple Network Management Protocol (SNMP) communities. The structure of `snmpCommunity` block is documented below.
	SnmpCommunities SwitchControllerManagedSwitchSnmpCommunityArrayOutput `pulumi:"snmpCommunities"`
	// Configuration method to edit Simple Network Management Protocol (SNMP) system info. The structure of `snmpSysinfo` block is documented below.
	SnmpSysinfo SwitchControllerManagedSwitchSnmpSysinfoPtrOutput `pulumi:"snmpSysinfo"`
	// Configuration method to edit Simple Network Management Protocol (SNMP) trap threshold values. The structure of `snmpTrapThreshold` block is documented below.
	SnmpTrapThreshold SwitchControllerManagedSwitchSnmpTrapThresholdPtrOutput `pulumi:"snmpTrapThreshold"`
	// Configuration method to edit Simple Network Management Protocol (SNMP) users. The structure of `snmpUser` block is documented below.
	SnmpUsers SwitchControllerManagedSwitchSnmpUserArrayOutput `pulumi:"snmpUsers"`
	// Staged image version for FortiSwitch.
	StagedImageVersion pulumi.StringOutput `pulumi:"stagedImageVersion"`
	// Configuration method to edit FortiSwitch Static and Sticky MAC. The structure of `staticMac` block is documented below.
	StaticMacs SwitchControllerManagedSwitchStaticMacArrayOutput `pulumi:"staticMacs"`
	// Configuration method to edit FortiSwitch storm control for measuring traffic activity using data rates to prevent traffic disruption. The structure of `stormControl` block is documented below.
	StormControl SwitchControllerManagedSwitchStormControlPtrOutput `pulumi:"stormControl"`
	// Configuration method to edit Spanning Tree Protocol (STP) instances. The structure of `stpInstance` block is documented below.
	StpInstances SwitchControllerManagedSwitchStpInstanceArrayOutput `pulumi:"stpInstances"`
	// Configuration method to edit Spanning Tree Protocol (STP) settings used to prevent bridge loops. The structure of `stpSettings` block is documented below.
	StpSettings SwitchControllerManagedSwitchStpSettingsPtrOutput `pulumi:"stpSettings"`
	// User definable label/tag.
	SwitchDeviceTag pulumi.StringOutput `pulumi:"switchDeviceTag"`
	// DHCP option43 key.
	SwitchDhcpOpt43Key pulumi.StringOutput `pulumi:"switchDhcpOpt43Key"`
	// Switch id.
	SwitchId pulumi.StringOutput `pulumi:"switchId"`
	// Configuration method to edit FortiSwitch logging settings (logs are transferred to and inserted into the FortiGate event log). The structure of `switchLog` block is documented below.
	SwitchLog SwitchControllerManagedSwitchSwitchLogPtrOutput `pulumi:"switchLog"`
	// FortiSwitch profile.
	SwitchProfile pulumi.StringOutput `pulumi:"switchProfile"`
	// Configure spanning tree protocol (STP). The structure of `switchStpSettings` block is documented below.
	SwitchStpSettings SwitchControllerManagedSwitchSwitchStpSettingsPtrOutput `pulumi:"switchStpSettings"`
	// TDR supported.
	TdrSupported pulumi.StringOutput `pulumi:"tdrSupported"`
	// Type. Valid values: `static`, `sticky`.
	Type pulumi.StringOutput `pulumi:"type"`
	// Specifies the vdom to which the resource will be applied when the FortiGate unit is running in VDOM mode. Only one vdom can be specified. If you want to inherit the vdom configuration of the provider, please do not set this parameter.
	Vdomparam pulumi.StringPtrOutput `pulumi:"vdomparam"`
	// IGMP snooping querier version.
	Version pulumi.IntOutput `pulumi:"version"`
}

// NewSwitchControllerManagedSwitch registers a new resource with the given unique name, arguments, and options.
func NewSwitchControllerManagedSwitch(ctx *pulumi.Context,
	name string, args *SwitchControllerManagedSwitchArgs, opts ...pulumi.ResourceOption) (*SwitchControllerManagedSwitch, error) {
	if args == nil {
		return nil, errors.New("missing one or more required arguments")
	}

	if args.FswWan1Peer == nil {
		return nil, errors.New("invalid value for required argument 'FswWan1Peer'")
	}
	if args.SwitchId == nil {
		return nil, errors.New("invalid value for required argument 'SwitchId'")
	}
	opts = pkgResourceDefaultOpts(opts)
	var resource SwitchControllerManagedSwitch
	err := ctx.RegisterResource("fortios:index/switchControllerManagedSwitch:SwitchControllerManagedSwitch", name, args, &resource, opts...)
	if err != nil {
		return nil, err
	}
	return &resource, nil
}

// GetSwitchControllerManagedSwitch gets an existing SwitchControllerManagedSwitch resource's state with the given name, ID, and optional
// state properties that are used to uniquely qualify the lookup (nil if not required).
func GetSwitchControllerManagedSwitch(ctx *pulumi.Context,
	name string, id pulumi.IDInput, state *SwitchControllerManagedSwitchState, opts ...pulumi.ResourceOption) (*SwitchControllerManagedSwitch, error) {
	var resource SwitchControllerManagedSwitch
	err := ctx.ReadResource("fortios:index/switchControllerManagedSwitch:SwitchControllerManagedSwitch", name, id, state, &resource, opts...)
	if err != nil {
		return nil, err
	}
	return &resource, nil
}

// Input properties used for looking up and filtering SwitchControllerManagedSwitch resources.
type switchControllerManagedSwitchState struct {
	// FortiSwitch access profile.
	AccessProfile *string `pulumi:"accessProfile"`
	// Configuration method to edit FortiSwitch commands to be pushed to this FortiSwitch device upon rebooting the FortiGate switch controller or the FortiSwitch. The structure of `customCommand` block is documented below.
	CustomCommands []SwitchControllerManagedSwitchCustomCommand `pulumi:"customCommands"`
	// Delayed restart triggered for this FortiSwitch.
	DelayedRestartTrigger *int `pulumi:"delayedRestartTrigger"`
	// Description.
	Description *string `pulumi:"description"`
	// DHCP snooping server access list. Valid values: `global`, `enable`, `disable`.
	DhcpServerAccessList *string `pulumi:"dhcpServerAccessList"`
	// Directly connected FortiSwitch.
	DirectlyConnected *int `pulumi:"directlyConnected"`
	// List of features this FortiSwitch supports (not configurable) that is sent to the FortiGate device for subsequent configuration initiated by the FortiGate device.
	DynamicCapability *int `pulumi:"dynamicCapability"`
	// true or false, set this parameter to true when using dynamic forEach + toset to configure and sort sub-tables, please do not set this parameter when configuring static sub-tables.
	DynamicSortSubtable *string `pulumi:"dynamicSortSubtable"`
	// Dynamically discovered FortiSwitch.
	DynamicallyDiscovered *int `pulumi:"dynamicallyDiscovered"`
	// Enable/disable provisioning of firmware to FortiSwitches on join connection. Valid values: `enable`, `disable`.
	FirmwareProvision *string `pulumi:"firmwareProvision"`
	// Enable/disable one-time automatic provisioning of the latest firmware version. Valid values: `disable`, `once`.
	FirmwareProvisionLatest *string `pulumi:"firmwareProvisionLatest"`
	// Firmware version to provision to this FortiSwitch on bootup (major.minor.build, i.e. 6.2.1234).
	FirmwareProvisionVersion *string `pulumi:"firmwareProvisionVersion"`
	// Flow-tracking netflow ipfix switch identity in hex format(00000000-FFFFFFFF default=0).
	FlowIdentity *string `pulumi:"flowIdentity"`
	// FortiSwitch WAN1 admin status; enable to authorize the FortiSwitch as a managed switch. Valid values: `discovered`, `disable`, `enable`.
	FswWan1Admin *string `pulumi:"fswWan1Admin"`
	// Fortiswitch WAN1 peer port.
	FswWan1Peer *string `pulumi:"fswWan1Peer"`
	// FortiSwitch WAN2 admin status; enable to authorize the FortiSwitch as a managed switch. Valid values: `discovered`, `disable`, `enable`.
	FswWan2Admin *string `pulumi:"fswWan2Admin"`
	// FortiSwitch WAN2 peer port.
	FswWan2Peer *string `pulumi:"fswWan2Peer"`
	// Set IGMP snooping mode for the physical port interface. Valid values: `enable`, `disable`.
	IgmpSnooping *SwitchControllerManagedSwitchIgmpSnooping `pulumi:"igmpSnooping"`
	// Enable/disable IP source guard. Valid values: `disable`, `enable`.
	IpSourceGuards []SwitchControllerManagedSwitchIpSourceGuard `pulumi:"ipSourceGuards"`
	// Layer 3 management discovered.
	L3Discovered *int `pulumi:"l3Discovered"`
	// FortiSwitch maximum allowed trunk members.
	MaxAllowedTrunkMembers *int `pulumi:"maxAllowedTrunkMembers"`
	// Enable/disable MCLAG IGMP-snooping awareness. Valid values: `enable`, `disable`.
	MclagIgmpSnoopingAware *string `pulumi:"mclagIgmpSnoopingAware"`
	// Configuration method to edit FortiSwitch packet mirror. The structure of `mirror` block is documented below.
	Mirrors []SwitchControllerManagedSwitchMirror `pulumi:"mirrors"`
	// Configuration method to edit FortiSwitch 802.1X global settings. The structure of `n8021xSettings` block is documented below.
	N8021xSettings *SwitchControllerManagedSwitchN8021xSettings `pulumi:"n8021xSettings"`
	// Interface name.
	Name *string `pulumi:"name"`
	// Enable/disable overriding the global SNMP communities. Valid values: `enable`, `disable`.
	OverrideSnmpCommunity *string `pulumi:"overrideSnmpCommunity"`
	// Enable/disable overriding the global SNMP system information. Valid values: `disable`, `enable`.
	OverrideSnmpSysinfo *string `pulumi:"overrideSnmpSysinfo"`
	// Enable/disable overriding the global SNMP trap threshold values. Valid values: `enable`, `disable`.
	OverrideSnmpTrapThreshold *string `pulumi:"overrideSnmpTrapThreshold"`
	// Enable/disable overriding the global SNMP users. Valid values: `enable`, `disable`.
	OverrideSnmpUser *string `pulumi:"overrideSnmpUser"`
	// VDOM which owner of port belongs to.
	OwnerVdom *string `pulumi:"ownerVdom"`
	// PoE detection type for FortiSwitch.
	PoeDetectionType *int `pulumi:"poeDetectionType"`
	// Enable/disable PoE LLDP detection. Valid values: `enable`, `disable`.
	PoeLldpDetection *string `pulumi:"poeLldpDetection"`
	// Enable/disable PoE pre-standard detection. Valid values: `enable`, `disable`.
	PoePreStandardDetection *string `pulumi:"poePreStandardDetection"`
	// Managed-switch port list. The structure of `ports` block is documented below.
	Ports []SwitchControllerManagedSwitchPort `pulumi:"ports"`
	// Pre-provisioned managed switch.
	PreProvisioned *int `pulumi:"preProvisioned"`
	// Set QoS drop-policy. Valid values: `taildrop`, `random-early-detection`.
	QosDropPolicy *string `pulumi:"qosDropPolicy"`
	// Set QoS RED/WRED drop probability.
	QosRedProbability *int `pulumi:"qosRedProbability"`
	// Configure logging by FortiSwitch device to a remote syslog server. The structure of `remoteLog` block is documented below.
	RemoteLogs []SwitchControllerManagedSwitchRemoteLog `pulumi:"remoteLogs"`
	// Configuration method to edit Simple Network Management Protocol (SNMP) communities. The structure of `snmpCommunity` block is documented below.
	SnmpCommunities []SwitchControllerManagedSwitchSnmpCommunity `pulumi:"snmpCommunities"`
	// Configuration method to edit Simple Network Management Protocol (SNMP) system info. The structure of `snmpSysinfo` block is documented below.
	SnmpSysinfo *SwitchControllerManagedSwitchSnmpSysinfo `pulumi:"snmpSysinfo"`
	// Configuration method to edit Simple Network Management Protocol (SNMP) trap threshold values. The structure of `snmpTrapThreshold` block is documented below.
	SnmpTrapThreshold *SwitchControllerManagedSwitchSnmpTrapThreshold `pulumi:"snmpTrapThreshold"`
	// Configuration method to edit Simple Network Management Protocol (SNMP) users. The structure of `snmpUser` block is documented below.
	SnmpUsers []SwitchControllerManagedSwitchSnmpUser `pulumi:"snmpUsers"`
	// Staged image version for FortiSwitch.
	StagedImageVersion *string `pulumi:"stagedImageVersion"`
	// Configuration method to edit FortiSwitch Static and Sticky MAC. The structure of `staticMac` block is documented below.
	StaticMacs []SwitchControllerManagedSwitchStaticMac `pulumi:"staticMacs"`
	// Configuration method to edit FortiSwitch storm control for measuring traffic activity using data rates to prevent traffic disruption. The structure of `stormControl` block is documented below.
	StormControl *SwitchControllerManagedSwitchStormControl `pulumi:"stormControl"`
	// Configuration method to edit Spanning Tree Protocol (STP) instances. The structure of `stpInstance` block is documented below.
	StpInstances []SwitchControllerManagedSwitchStpInstance `pulumi:"stpInstances"`
	// Configuration method to edit Spanning Tree Protocol (STP) settings used to prevent bridge loops. The structure of `stpSettings` block is documented below.
	StpSettings *SwitchControllerManagedSwitchStpSettings `pulumi:"stpSettings"`
	// User definable label/tag.
	SwitchDeviceTag *string `pulumi:"switchDeviceTag"`
	// DHCP option43 key.
	SwitchDhcpOpt43Key *string `pulumi:"switchDhcpOpt43Key"`
	// Switch id.
	SwitchId *string `pulumi:"switchId"`
	// Configuration method to edit FortiSwitch logging settings (logs are transferred to and inserted into the FortiGate event log). The structure of `switchLog` block is documented below.
	SwitchLog *SwitchControllerManagedSwitchSwitchLog `pulumi:"switchLog"`
	// FortiSwitch profile.
	SwitchProfile *string `pulumi:"switchProfile"`
	// Configure spanning tree protocol (STP). The structure of `switchStpSettings` block is documented below.
	SwitchStpSettings *SwitchControllerManagedSwitchSwitchStpSettings `pulumi:"switchStpSettings"`
	// TDR supported.
	TdrSupported *string `pulumi:"tdrSupported"`
	// Type. Valid values: `static`, `sticky`.
	Type *string `pulumi:"type"`
	// Specifies the vdom to which the resource will be applied when the FortiGate unit is running in VDOM mode. Only one vdom can be specified. If you want to inherit the vdom configuration of the provider, please do not set this parameter.
	Vdomparam *string `pulumi:"vdomparam"`
	// IGMP snooping querier version.
	Version *int `pulumi:"version"`
}

type SwitchControllerManagedSwitchState struct {
	// FortiSwitch access profile.
	AccessProfile pulumi.StringPtrInput
	// Configuration method to edit FortiSwitch commands to be pushed to this FortiSwitch device upon rebooting the FortiGate switch controller or the FortiSwitch. The structure of `customCommand` block is documented below.
	CustomCommands SwitchControllerManagedSwitchCustomCommandArrayInput
	// Delayed restart triggered for this FortiSwitch.
	DelayedRestartTrigger pulumi.IntPtrInput
	// Description.
	Description pulumi.StringPtrInput
	// DHCP snooping server access list. Valid values: `global`, `enable`, `disable`.
	DhcpServerAccessList pulumi.StringPtrInput
	// Directly connected FortiSwitch.
	DirectlyConnected pulumi.IntPtrInput
	// List of features this FortiSwitch supports (not configurable) that is sent to the FortiGate device for subsequent configuration initiated by the FortiGate device.
	DynamicCapability pulumi.IntPtrInput
	// true or false, set this parameter to true when using dynamic forEach + toset to configure and sort sub-tables, please do not set this parameter when configuring static sub-tables.
	DynamicSortSubtable pulumi.StringPtrInput
	// Dynamically discovered FortiSwitch.
	DynamicallyDiscovered pulumi.IntPtrInput
	// Enable/disable provisioning of firmware to FortiSwitches on join connection. Valid values: `enable`, `disable`.
	FirmwareProvision pulumi.StringPtrInput
	// Enable/disable one-time automatic provisioning of the latest firmware version. Valid values: `disable`, `once`.
	FirmwareProvisionLatest pulumi.StringPtrInput
	// Firmware version to provision to this FortiSwitch on bootup (major.minor.build, i.e. 6.2.1234).
	FirmwareProvisionVersion pulumi.StringPtrInput
	// Flow-tracking netflow ipfix switch identity in hex format(00000000-FFFFFFFF default=0).
	FlowIdentity pulumi.StringPtrInput
	// FortiSwitch WAN1 admin status; enable to authorize the FortiSwitch as a managed switch. Valid values: `discovered`, `disable`, `enable`.
	FswWan1Admin pulumi.StringPtrInput
	// Fortiswitch WAN1 peer port.
	FswWan1Peer pulumi.StringPtrInput
	// FortiSwitch WAN2 admin status; enable to authorize the FortiSwitch as a managed switch. Valid values: `discovered`, `disable`, `enable`.
	FswWan2Admin pulumi.StringPtrInput
	// FortiSwitch WAN2 peer port.
	FswWan2Peer pulumi.StringPtrInput
	// Set IGMP snooping mode for the physical port interface. Valid values: `enable`, `disable`.
	IgmpSnooping SwitchControllerManagedSwitchIgmpSnoopingPtrInput
	// Enable/disable IP source guard. Valid values: `disable`, `enable`.
	IpSourceGuards SwitchControllerManagedSwitchIpSourceGuardArrayInput
	// Layer 3 management discovered.
	L3Discovered pulumi.IntPtrInput
	// FortiSwitch maximum allowed trunk members.
	MaxAllowedTrunkMembers pulumi.IntPtrInput
	// Enable/disable MCLAG IGMP-snooping awareness. Valid values: `enable`, `disable`.
	MclagIgmpSnoopingAware pulumi.StringPtrInput
	// Configuration method to edit FortiSwitch packet mirror. The structure of `mirror` block is documented below.
	Mirrors SwitchControllerManagedSwitchMirrorArrayInput
	// Configuration method to edit FortiSwitch 802.1X global settings. The structure of `n8021xSettings` block is documented below.
	N8021xSettings SwitchControllerManagedSwitchN8021xSettingsPtrInput
	// Interface name.
	Name pulumi.StringPtrInput
	// Enable/disable overriding the global SNMP communities. Valid values: `enable`, `disable`.
	OverrideSnmpCommunity pulumi.StringPtrInput
	// Enable/disable overriding the global SNMP system information. Valid values: `disable`, `enable`.
	OverrideSnmpSysinfo pulumi.StringPtrInput
	// Enable/disable overriding the global SNMP trap threshold values. Valid values: `enable`, `disable`.
	OverrideSnmpTrapThreshold pulumi.StringPtrInput
	// Enable/disable overriding the global SNMP users. Valid values: `enable`, `disable`.
	OverrideSnmpUser pulumi.StringPtrInput
	// VDOM which owner of port belongs to.
	OwnerVdom pulumi.StringPtrInput
	// PoE detection type for FortiSwitch.
	PoeDetectionType pulumi.IntPtrInput
	// Enable/disable PoE LLDP detection. Valid values: `enable`, `disable`.
	PoeLldpDetection pulumi.StringPtrInput
	// Enable/disable PoE pre-standard detection. Valid values: `enable`, `disable`.
	PoePreStandardDetection pulumi.StringPtrInput
	// Managed-switch port list. The structure of `ports` block is documented below.
	Ports SwitchControllerManagedSwitchPortArrayInput
	// Pre-provisioned managed switch.
	PreProvisioned pulumi.IntPtrInput
	// Set QoS drop-policy. Valid values: `taildrop`, `random-early-detection`.
	QosDropPolicy pulumi.StringPtrInput
	// Set QoS RED/WRED drop probability.
	QosRedProbability pulumi.IntPtrInput
	// Configure logging by FortiSwitch device to a remote syslog server. The structure of `remoteLog` block is documented below.
	RemoteLogs SwitchControllerManagedSwitchRemoteLogArrayInput
	// Configuration method to edit Simple Network Management Protocol (SNMP) communities. The structure of `snmpCommunity` block is documented below.
	SnmpCommunities SwitchControllerManagedSwitchSnmpCommunityArrayInput
	// Configuration method to edit Simple Network Management Protocol (SNMP) system info. The structure of `snmpSysinfo` block is documented below.
	SnmpSysinfo SwitchControllerManagedSwitchSnmpSysinfoPtrInput
	// Configuration method to edit Simple Network Management Protocol (SNMP) trap threshold values. The structure of `snmpTrapThreshold` block is documented below.
	SnmpTrapThreshold SwitchControllerManagedSwitchSnmpTrapThresholdPtrInput
	// Configuration method to edit Simple Network Management Protocol (SNMP) users. The structure of `snmpUser` block is documented below.
	SnmpUsers SwitchControllerManagedSwitchSnmpUserArrayInput
	// Staged image version for FortiSwitch.
	StagedImageVersion pulumi.StringPtrInput
	// Configuration method to edit FortiSwitch Static and Sticky MAC. The structure of `staticMac` block is documented below.
	StaticMacs SwitchControllerManagedSwitchStaticMacArrayInput
	// Configuration method to edit FortiSwitch storm control for measuring traffic activity using data rates to prevent traffic disruption. The structure of `stormControl` block is documented below.
	StormControl SwitchControllerManagedSwitchStormControlPtrInput
	// Configuration method to edit Spanning Tree Protocol (STP) instances. The structure of `stpInstance` block is documented below.
	StpInstances SwitchControllerManagedSwitchStpInstanceArrayInput
	// Configuration method to edit Spanning Tree Protocol (STP) settings used to prevent bridge loops. The structure of `stpSettings` block is documented below.
	StpSettings SwitchControllerManagedSwitchStpSettingsPtrInput
	// User definable label/tag.
	SwitchDeviceTag pulumi.StringPtrInput
	// DHCP option43 key.
	SwitchDhcpOpt43Key pulumi.StringPtrInput
	// Switch id.
	SwitchId pulumi.StringPtrInput
	// Configuration method to edit FortiSwitch logging settings (logs are transferred to and inserted into the FortiGate event log). The structure of `switchLog` block is documented below.
	SwitchLog SwitchControllerManagedSwitchSwitchLogPtrInput
	// FortiSwitch profile.
	SwitchProfile pulumi.StringPtrInput
	// Configure spanning tree protocol (STP). The structure of `switchStpSettings` block is documented below.
	SwitchStpSettings SwitchControllerManagedSwitchSwitchStpSettingsPtrInput
	// TDR supported.
	TdrSupported pulumi.StringPtrInput
	// Type. Valid values: `static`, `sticky`.
	Type pulumi.StringPtrInput
	// Specifies the vdom to which the resource will be applied when the FortiGate unit is running in VDOM mode. Only one vdom can be specified. If you want to inherit the vdom configuration of the provider, please do not set this parameter.
	Vdomparam pulumi.StringPtrInput
	// IGMP snooping querier version.
	Version pulumi.IntPtrInput
}

func (SwitchControllerManagedSwitchState) ElementType() reflect.Type {
	return reflect.TypeOf((*switchControllerManagedSwitchState)(nil)).Elem()
}

type switchControllerManagedSwitchArgs struct {
	// FortiSwitch access profile.
	AccessProfile *string `pulumi:"accessProfile"`
	// Configuration method to edit FortiSwitch commands to be pushed to this FortiSwitch device upon rebooting the FortiGate switch controller or the FortiSwitch. The structure of `customCommand` block is documented below.
	CustomCommands []SwitchControllerManagedSwitchCustomCommand `pulumi:"customCommands"`
	// Delayed restart triggered for this FortiSwitch.
	DelayedRestartTrigger *int `pulumi:"delayedRestartTrigger"`
	// Description.
	Description *string `pulumi:"description"`
	// DHCP snooping server access list. Valid values: `global`, `enable`, `disable`.
	DhcpServerAccessList *string `pulumi:"dhcpServerAccessList"`
	// Directly connected FortiSwitch.
	DirectlyConnected *int `pulumi:"directlyConnected"`
	// List of features this FortiSwitch supports (not configurable) that is sent to the FortiGate device for subsequent configuration initiated by the FortiGate device.
	DynamicCapability *int `pulumi:"dynamicCapability"`
	// true or false, set this parameter to true when using dynamic forEach + toset to configure and sort sub-tables, please do not set this parameter when configuring static sub-tables.
	DynamicSortSubtable *string `pulumi:"dynamicSortSubtable"`
	// Dynamically discovered FortiSwitch.
	DynamicallyDiscovered *int `pulumi:"dynamicallyDiscovered"`
	// Enable/disable provisioning of firmware to FortiSwitches on join connection. Valid values: `enable`, `disable`.
	FirmwareProvision *string `pulumi:"firmwareProvision"`
	// Enable/disable one-time automatic provisioning of the latest firmware version. Valid values: `disable`, `once`.
	FirmwareProvisionLatest *string `pulumi:"firmwareProvisionLatest"`
	// Firmware version to provision to this FortiSwitch on bootup (major.minor.build, i.e. 6.2.1234).
	FirmwareProvisionVersion *string `pulumi:"firmwareProvisionVersion"`
	// Flow-tracking netflow ipfix switch identity in hex format(00000000-FFFFFFFF default=0).
	FlowIdentity *string `pulumi:"flowIdentity"`
	// FortiSwitch WAN1 admin status; enable to authorize the FortiSwitch as a managed switch. Valid values: `discovered`, `disable`, `enable`.
	FswWan1Admin *string `pulumi:"fswWan1Admin"`
	// Fortiswitch WAN1 peer port.
	FswWan1Peer string `pulumi:"fswWan1Peer"`
	// FortiSwitch WAN2 admin status; enable to authorize the FortiSwitch as a managed switch. Valid values: `discovered`, `disable`, `enable`.
	FswWan2Admin *string `pulumi:"fswWan2Admin"`
	// FortiSwitch WAN2 peer port.
	FswWan2Peer *string `pulumi:"fswWan2Peer"`
	// Set IGMP snooping mode for the physical port interface. Valid values: `enable`, `disable`.
	IgmpSnooping *SwitchControllerManagedSwitchIgmpSnooping `pulumi:"igmpSnooping"`
	// Enable/disable IP source guard. Valid values: `disable`, `enable`.
	IpSourceGuards []SwitchControllerManagedSwitchIpSourceGuard `pulumi:"ipSourceGuards"`
	// Layer 3 management discovered.
	L3Discovered *int `pulumi:"l3Discovered"`
	// FortiSwitch maximum allowed trunk members.
	MaxAllowedTrunkMembers *int `pulumi:"maxAllowedTrunkMembers"`
	// Enable/disable MCLAG IGMP-snooping awareness. Valid values: `enable`, `disable`.
	MclagIgmpSnoopingAware *string `pulumi:"mclagIgmpSnoopingAware"`
	// Configuration method to edit FortiSwitch packet mirror. The structure of `mirror` block is documented below.
	Mirrors []SwitchControllerManagedSwitchMirror `pulumi:"mirrors"`
	// Configuration method to edit FortiSwitch 802.1X global settings. The structure of `n8021xSettings` block is documented below.
	N8021xSettings *SwitchControllerManagedSwitchN8021xSettings `pulumi:"n8021xSettings"`
	// Interface name.
	Name *string `pulumi:"name"`
	// Enable/disable overriding the global SNMP communities. Valid values: `enable`, `disable`.
	OverrideSnmpCommunity *string `pulumi:"overrideSnmpCommunity"`
	// Enable/disable overriding the global SNMP system information. Valid values: `disable`, `enable`.
	OverrideSnmpSysinfo *string `pulumi:"overrideSnmpSysinfo"`
	// Enable/disable overriding the global SNMP trap threshold values. Valid values: `enable`, `disable`.
	OverrideSnmpTrapThreshold *string `pulumi:"overrideSnmpTrapThreshold"`
	// Enable/disable overriding the global SNMP users. Valid values: `enable`, `disable`.
	OverrideSnmpUser *string `pulumi:"overrideSnmpUser"`
	// VDOM which owner of port belongs to.
	OwnerVdom *string `pulumi:"ownerVdom"`
	// PoE detection type for FortiSwitch.
	PoeDetectionType *int `pulumi:"poeDetectionType"`
	// Enable/disable PoE LLDP detection. Valid values: `enable`, `disable`.
	PoeLldpDetection *string `pulumi:"poeLldpDetection"`
	// Enable/disable PoE pre-standard detection. Valid values: `enable`, `disable`.
	PoePreStandardDetection *string `pulumi:"poePreStandardDetection"`
	// Managed-switch port list. The structure of `ports` block is documented below.
	Ports []SwitchControllerManagedSwitchPort `pulumi:"ports"`
	// Pre-provisioned managed switch.
	PreProvisioned *int `pulumi:"preProvisioned"`
	// Set QoS drop-policy. Valid values: `taildrop`, `random-early-detection`.
	QosDropPolicy *string `pulumi:"qosDropPolicy"`
	// Set QoS RED/WRED drop probability.
	QosRedProbability *int `pulumi:"qosRedProbability"`
	// Configure logging by FortiSwitch device to a remote syslog server. The structure of `remoteLog` block is documented below.
	RemoteLogs []SwitchControllerManagedSwitchRemoteLog `pulumi:"remoteLogs"`
	// Configuration method to edit Simple Network Management Protocol (SNMP) communities. The structure of `snmpCommunity` block is documented below.
	SnmpCommunities []SwitchControllerManagedSwitchSnmpCommunity `pulumi:"snmpCommunities"`
	// Configuration method to edit Simple Network Management Protocol (SNMP) system info. The structure of `snmpSysinfo` block is documented below.
	SnmpSysinfo *SwitchControllerManagedSwitchSnmpSysinfo `pulumi:"snmpSysinfo"`
	// Configuration method to edit Simple Network Management Protocol (SNMP) trap threshold values. The structure of `snmpTrapThreshold` block is documented below.
	SnmpTrapThreshold *SwitchControllerManagedSwitchSnmpTrapThreshold `pulumi:"snmpTrapThreshold"`
	// Configuration method to edit Simple Network Management Protocol (SNMP) users. The structure of `snmpUser` block is documented below.
	SnmpUsers []SwitchControllerManagedSwitchSnmpUser `pulumi:"snmpUsers"`
	// Staged image version for FortiSwitch.
	StagedImageVersion *string `pulumi:"stagedImageVersion"`
	// Configuration method to edit FortiSwitch Static and Sticky MAC. The structure of `staticMac` block is documented below.
	StaticMacs []SwitchControllerManagedSwitchStaticMac `pulumi:"staticMacs"`
	// Configuration method to edit FortiSwitch storm control for measuring traffic activity using data rates to prevent traffic disruption. The structure of `stormControl` block is documented below.
	StormControl *SwitchControllerManagedSwitchStormControl `pulumi:"stormControl"`
	// Configuration method to edit Spanning Tree Protocol (STP) instances. The structure of `stpInstance` block is documented below.
	StpInstances []SwitchControllerManagedSwitchStpInstance `pulumi:"stpInstances"`
	// Configuration method to edit Spanning Tree Protocol (STP) settings used to prevent bridge loops. The structure of `stpSettings` block is documented below.
	StpSettings *SwitchControllerManagedSwitchStpSettings `pulumi:"stpSettings"`
	// User definable label/tag.
	SwitchDeviceTag *string `pulumi:"switchDeviceTag"`
	// DHCP option43 key.
	SwitchDhcpOpt43Key *string `pulumi:"switchDhcpOpt43Key"`
	// Switch id.
	SwitchId string `pulumi:"switchId"`
	// Configuration method to edit FortiSwitch logging settings (logs are transferred to and inserted into the FortiGate event log). The structure of `switchLog` block is documented below.
	SwitchLog *SwitchControllerManagedSwitchSwitchLog `pulumi:"switchLog"`
	// FortiSwitch profile.
	SwitchProfile *string `pulumi:"switchProfile"`
	// Configure spanning tree protocol (STP). The structure of `switchStpSettings` block is documented below.
	SwitchStpSettings *SwitchControllerManagedSwitchSwitchStpSettings `pulumi:"switchStpSettings"`
	// TDR supported.
	TdrSupported *string `pulumi:"tdrSupported"`
	// Type. Valid values: `static`, `sticky`.
	Type *string `pulumi:"type"`
	// Specifies the vdom to which the resource will be applied when the FortiGate unit is running in VDOM mode. Only one vdom can be specified. If you want to inherit the vdom configuration of the provider, please do not set this parameter.
	Vdomparam *string `pulumi:"vdomparam"`
	// IGMP snooping querier version.
	Version *int `pulumi:"version"`
}

// The set of arguments for constructing a SwitchControllerManagedSwitch resource.
type SwitchControllerManagedSwitchArgs struct {
	// FortiSwitch access profile.
	AccessProfile pulumi.StringPtrInput
	// Configuration method to edit FortiSwitch commands to be pushed to this FortiSwitch device upon rebooting the FortiGate switch controller or the FortiSwitch. The structure of `customCommand` block is documented below.
	CustomCommands SwitchControllerManagedSwitchCustomCommandArrayInput
	// Delayed restart triggered for this FortiSwitch.
	DelayedRestartTrigger pulumi.IntPtrInput
	// Description.
	Description pulumi.StringPtrInput
	// DHCP snooping server access list. Valid values: `global`, `enable`, `disable`.
	DhcpServerAccessList pulumi.StringPtrInput
	// Directly connected FortiSwitch.
	DirectlyConnected pulumi.IntPtrInput
	// List of features this FortiSwitch supports (not configurable) that is sent to the FortiGate device for subsequent configuration initiated by the FortiGate device.
	DynamicCapability pulumi.IntPtrInput
	// true or false, set this parameter to true when using dynamic forEach + toset to configure and sort sub-tables, please do not set this parameter when configuring static sub-tables.
	DynamicSortSubtable pulumi.StringPtrInput
	// Dynamically discovered FortiSwitch.
	DynamicallyDiscovered pulumi.IntPtrInput
	// Enable/disable provisioning of firmware to FortiSwitches on join connection. Valid values: `enable`, `disable`.
	FirmwareProvision pulumi.StringPtrInput
	// Enable/disable one-time automatic provisioning of the latest firmware version. Valid values: `disable`, `once`.
	FirmwareProvisionLatest pulumi.StringPtrInput
	// Firmware version to provision to this FortiSwitch on bootup (major.minor.build, i.e. 6.2.1234).
	FirmwareProvisionVersion pulumi.StringPtrInput
	// Flow-tracking netflow ipfix switch identity in hex format(00000000-FFFFFFFF default=0).
	FlowIdentity pulumi.StringPtrInput
	// FortiSwitch WAN1 admin status; enable to authorize the FortiSwitch as a managed switch. Valid values: `discovered`, `disable`, `enable`.
	FswWan1Admin pulumi.StringPtrInput
	// Fortiswitch WAN1 peer port.
	FswWan1Peer pulumi.StringInput
	// FortiSwitch WAN2 admin status; enable to authorize the FortiSwitch as a managed switch. Valid values: `discovered`, `disable`, `enable`.
	FswWan2Admin pulumi.StringPtrInput
	// FortiSwitch WAN2 peer port.
	FswWan2Peer pulumi.StringPtrInput
	// Set IGMP snooping mode for the physical port interface. Valid values: `enable`, `disable`.
	IgmpSnooping SwitchControllerManagedSwitchIgmpSnoopingPtrInput
	// Enable/disable IP source guard. Valid values: `disable`, `enable`.
	IpSourceGuards SwitchControllerManagedSwitchIpSourceGuardArrayInput
	// Layer 3 management discovered.
	L3Discovered pulumi.IntPtrInput
	// FortiSwitch maximum allowed trunk members.
	MaxAllowedTrunkMembers pulumi.IntPtrInput
	// Enable/disable MCLAG IGMP-snooping awareness. Valid values: `enable`, `disable`.
	MclagIgmpSnoopingAware pulumi.StringPtrInput
	// Configuration method to edit FortiSwitch packet mirror. The structure of `mirror` block is documented below.
	Mirrors SwitchControllerManagedSwitchMirrorArrayInput
	// Configuration method to edit FortiSwitch 802.1X global settings. The structure of `n8021xSettings` block is documented below.
	N8021xSettings SwitchControllerManagedSwitchN8021xSettingsPtrInput
	// Interface name.
	Name pulumi.StringPtrInput
	// Enable/disable overriding the global SNMP communities. Valid values: `enable`, `disable`.
	OverrideSnmpCommunity pulumi.StringPtrInput
	// Enable/disable overriding the global SNMP system information. Valid values: `disable`, `enable`.
	OverrideSnmpSysinfo pulumi.StringPtrInput
	// Enable/disable overriding the global SNMP trap threshold values. Valid values: `enable`, `disable`.
	OverrideSnmpTrapThreshold pulumi.StringPtrInput
	// Enable/disable overriding the global SNMP users. Valid values: `enable`, `disable`.
	OverrideSnmpUser pulumi.StringPtrInput
	// VDOM which owner of port belongs to.
	OwnerVdom pulumi.StringPtrInput
	// PoE detection type for FortiSwitch.
	PoeDetectionType pulumi.IntPtrInput
	// Enable/disable PoE LLDP detection. Valid values: `enable`, `disable`.
	PoeLldpDetection pulumi.StringPtrInput
	// Enable/disable PoE pre-standard detection. Valid values: `enable`, `disable`.
	PoePreStandardDetection pulumi.StringPtrInput
	// Managed-switch port list. The structure of `ports` block is documented below.
	Ports SwitchControllerManagedSwitchPortArrayInput
	// Pre-provisioned managed switch.
	PreProvisioned pulumi.IntPtrInput
	// Set QoS drop-policy. Valid values: `taildrop`, `random-early-detection`.
	QosDropPolicy pulumi.StringPtrInput
	// Set QoS RED/WRED drop probability.
	QosRedProbability pulumi.IntPtrInput
	// Configure logging by FortiSwitch device to a remote syslog server. The structure of `remoteLog` block is documented below.
	RemoteLogs SwitchControllerManagedSwitchRemoteLogArrayInput
	// Configuration method to edit Simple Network Management Protocol (SNMP) communities. The structure of `snmpCommunity` block is documented below.
	SnmpCommunities SwitchControllerManagedSwitchSnmpCommunityArrayInput
	// Configuration method to edit Simple Network Management Protocol (SNMP) system info. The structure of `snmpSysinfo` block is documented below.
	SnmpSysinfo SwitchControllerManagedSwitchSnmpSysinfoPtrInput
	// Configuration method to edit Simple Network Management Protocol (SNMP) trap threshold values. The structure of `snmpTrapThreshold` block is documented below.
	SnmpTrapThreshold SwitchControllerManagedSwitchSnmpTrapThresholdPtrInput
	// Configuration method to edit Simple Network Management Protocol (SNMP) users. The structure of `snmpUser` block is documented below.
	SnmpUsers SwitchControllerManagedSwitchSnmpUserArrayInput
	// Staged image version for FortiSwitch.
	StagedImageVersion pulumi.StringPtrInput
	// Configuration method to edit FortiSwitch Static and Sticky MAC. The structure of `staticMac` block is documented below.
	StaticMacs SwitchControllerManagedSwitchStaticMacArrayInput
	// Configuration method to edit FortiSwitch storm control for measuring traffic activity using data rates to prevent traffic disruption. The structure of `stormControl` block is documented below.
	StormControl SwitchControllerManagedSwitchStormControlPtrInput
	// Configuration method to edit Spanning Tree Protocol (STP) instances. The structure of `stpInstance` block is documented below.
	StpInstances SwitchControllerManagedSwitchStpInstanceArrayInput
	// Configuration method to edit Spanning Tree Protocol (STP) settings used to prevent bridge loops. The structure of `stpSettings` block is documented below.
	StpSettings SwitchControllerManagedSwitchStpSettingsPtrInput
	// User definable label/tag.
	SwitchDeviceTag pulumi.StringPtrInput
	// DHCP option43 key.
	SwitchDhcpOpt43Key pulumi.StringPtrInput
	// Switch id.
	SwitchId pulumi.StringInput
	// Configuration method to edit FortiSwitch logging settings (logs are transferred to and inserted into the FortiGate event log). The structure of `switchLog` block is documented below.
	SwitchLog SwitchControllerManagedSwitchSwitchLogPtrInput
	// FortiSwitch profile.
	SwitchProfile pulumi.StringPtrInput
	// Configure spanning tree protocol (STP). The structure of `switchStpSettings` block is documented below.
	SwitchStpSettings SwitchControllerManagedSwitchSwitchStpSettingsPtrInput
	// TDR supported.
	TdrSupported pulumi.StringPtrInput
	// Type. Valid values: `static`, `sticky`.
	Type pulumi.StringPtrInput
	// Specifies the vdom to which the resource will be applied when the FortiGate unit is running in VDOM mode. Only one vdom can be specified. If you want to inherit the vdom configuration of the provider, please do not set this parameter.
	Vdomparam pulumi.StringPtrInput
	// IGMP snooping querier version.
	Version pulumi.IntPtrInput
}

func (SwitchControllerManagedSwitchArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*switchControllerManagedSwitchArgs)(nil)).Elem()
}

type SwitchControllerManagedSwitchInput interface {
	pulumi.Input

	ToSwitchControllerManagedSwitchOutput() SwitchControllerManagedSwitchOutput
	ToSwitchControllerManagedSwitchOutputWithContext(ctx context.Context) SwitchControllerManagedSwitchOutput
}

func (*SwitchControllerManagedSwitch) ElementType() reflect.Type {
	return reflect.TypeOf((**SwitchControllerManagedSwitch)(nil)).Elem()
}

func (i *SwitchControllerManagedSwitch) ToSwitchControllerManagedSwitchOutput() SwitchControllerManagedSwitchOutput {
	return i.ToSwitchControllerManagedSwitchOutputWithContext(context.Background())
}

func (i *SwitchControllerManagedSwitch) ToSwitchControllerManagedSwitchOutputWithContext(ctx context.Context) SwitchControllerManagedSwitchOutput {
	return pulumi.ToOutputWithContext(ctx, i).(SwitchControllerManagedSwitchOutput)
}

// SwitchControllerManagedSwitchArrayInput is an input type that accepts SwitchControllerManagedSwitchArray and SwitchControllerManagedSwitchArrayOutput values.
// You can construct a concrete instance of `SwitchControllerManagedSwitchArrayInput` via:
//
//          SwitchControllerManagedSwitchArray{ SwitchControllerManagedSwitchArgs{...} }
type SwitchControllerManagedSwitchArrayInput interface {
	pulumi.Input

	ToSwitchControllerManagedSwitchArrayOutput() SwitchControllerManagedSwitchArrayOutput
	ToSwitchControllerManagedSwitchArrayOutputWithContext(context.Context) SwitchControllerManagedSwitchArrayOutput
}

type SwitchControllerManagedSwitchArray []SwitchControllerManagedSwitchInput

func (SwitchControllerManagedSwitchArray) ElementType() reflect.Type {
	return reflect.TypeOf((*[]*SwitchControllerManagedSwitch)(nil)).Elem()
}

func (i SwitchControllerManagedSwitchArray) ToSwitchControllerManagedSwitchArrayOutput() SwitchControllerManagedSwitchArrayOutput {
	return i.ToSwitchControllerManagedSwitchArrayOutputWithContext(context.Background())
}

func (i SwitchControllerManagedSwitchArray) ToSwitchControllerManagedSwitchArrayOutputWithContext(ctx context.Context) SwitchControllerManagedSwitchArrayOutput {
	return pulumi.ToOutputWithContext(ctx, i).(SwitchControllerManagedSwitchArrayOutput)
}

// SwitchControllerManagedSwitchMapInput is an input type that accepts SwitchControllerManagedSwitchMap and SwitchControllerManagedSwitchMapOutput values.
// You can construct a concrete instance of `SwitchControllerManagedSwitchMapInput` via:
//
//          SwitchControllerManagedSwitchMap{ "key": SwitchControllerManagedSwitchArgs{...} }
type SwitchControllerManagedSwitchMapInput interface {
	pulumi.Input

	ToSwitchControllerManagedSwitchMapOutput() SwitchControllerManagedSwitchMapOutput
	ToSwitchControllerManagedSwitchMapOutputWithContext(context.Context) SwitchControllerManagedSwitchMapOutput
}

type SwitchControllerManagedSwitchMap map[string]SwitchControllerManagedSwitchInput

func (SwitchControllerManagedSwitchMap) ElementType() reflect.Type {
	return reflect.TypeOf((*map[string]*SwitchControllerManagedSwitch)(nil)).Elem()
}

func (i SwitchControllerManagedSwitchMap) ToSwitchControllerManagedSwitchMapOutput() SwitchControllerManagedSwitchMapOutput {
	return i.ToSwitchControllerManagedSwitchMapOutputWithContext(context.Background())
}

func (i SwitchControllerManagedSwitchMap) ToSwitchControllerManagedSwitchMapOutputWithContext(ctx context.Context) SwitchControllerManagedSwitchMapOutput {
	return pulumi.ToOutputWithContext(ctx, i).(SwitchControllerManagedSwitchMapOutput)
}

type SwitchControllerManagedSwitchOutput struct{ *pulumi.OutputState }

func (SwitchControllerManagedSwitchOutput) ElementType() reflect.Type {
	return reflect.TypeOf((**SwitchControllerManagedSwitch)(nil)).Elem()
}

func (o SwitchControllerManagedSwitchOutput) ToSwitchControllerManagedSwitchOutput() SwitchControllerManagedSwitchOutput {
	return o
}

func (o SwitchControllerManagedSwitchOutput) ToSwitchControllerManagedSwitchOutputWithContext(ctx context.Context) SwitchControllerManagedSwitchOutput {
	return o
}

type SwitchControllerManagedSwitchArrayOutput struct{ *pulumi.OutputState }

func (SwitchControllerManagedSwitchArrayOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*[]*SwitchControllerManagedSwitch)(nil)).Elem()
}

func (o SwitchControllerManagedSwitchArrayOutput) ToSwitchControllerManagedSwitchArrayOutput() SwitchControllerManagedSwitchArrayOutput {
	return o
}

func (o SwitchControllerManagedSwitchArrayOutput) ToSwitchControllerManagedSwitchArrayOutputWithContext(ctx context.Context) SwitchControllerManagedSwitchArrayOutput {
	return o
}

func (o SwitchControllerManagedSwitchArrayOutput) Index(i pulumi.IntInput) SwitchControllerManagedSwitchOutput {
	return pulumi.All(o, i).ApplyT(func(vs []interface{}) *SwitchControllerManagedSwitch {
		return vs[0].([]*SwitchControllerManagedSwitch)[vs[1].(int)]
	}).(SwitchControllerManagedSwitchOutput)
}

type SwitchControllerManagedSwitchMapOutput struct{ *pulumi.OutputState }

func (SwitchControllerManagedSwitchMapOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*map[string]*SwitchControllerManagedSwitch)(nil)).Elem()
}

func (o SwitchControllerManagedSwitchMapOutput) ToSwitchControllerManagedSwitchMapOutput() SwitchControllerManagedSwitchMapOutput {
	return o
}

func (o SwitchControllerManagedSwitchMapOutput) ToSwitchControllerManagedSwitchMapOutputWithContext(ctx context.Context) SwitchControllerManagedSwitchMapOutput {
	return o
}

func (o SwitchControllerManagedSwitchMapOutput) MapIndex(k pulumi.StringInput) SwitchControllerManagedSwitchOutput {
	return pulumi.All(o, k).ApplyT(func(vs []interface{}) *SwitchControllerManagedSwitch {
		return vs[0].(map[string]*SwitchControllerManagedSwitch)[vs[1].(string)]
	}).(SwitchControllerManagedSwitchOutput)
}

func init() {
	pulumi.RegisterInputType(reflect.TypeOf((*SwitchControllerManagedSwitchInput)(nil)).Elem(), &SwitchControllerManagedSwitch{})
	pulumi.RegisterInputType(reflect.TypeOf((*SwitchControllerManagedSwitchArrayInput)(nil)).Elem(), SwitchControllerManagedSwitchArray{})
	pulumi.RegisterInputType(reflect.TypeOf((*SwitchControllerManagedSwitchMapInput)(nil)).Elem(), SwitchControllerManagedSwitchMap{})
	pulumi.RegisterOutputType(SwitchControllerManagedSwitchOutput{})
	pulumi.RegisterOutputType(SwitchControllerManagedSwitchArrayOutput{})
	pulumi.RegisterOutputType(SwitchControllerManagedSwitchMapOutput{})
}
