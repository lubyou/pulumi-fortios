// Code generated by the Pulumi Terraform Bridge (tfgen) Tool DO NOT EDIT.
// *** WARNING: Do not edit by hand unless you're certain you know what you are doing! ***

package fortios

import (
	"context"
	"reflect"

	"github.com/pulumi/pulumi/sdk/v3/go/pulumi"
)

// Report setting configuration.
//
// ## Example Usage
//
// ```go
// package main
//
// import (
// 	"github.com/lubyou/pulumi-fortios/sdk/go/fortios"
// 	"github.com/pulumi/pulumi/sdk/v3/go/pulumi"
// )
//
// func main() {
// 	pulumi.Run(func(ctx *pulumi.Context) error {
// 		_, err := fortios.NewReportSetting(ctx, "trname", &fortios.ReportSettingArgs{
// 			Fortiview:            pulumi.String("enable"),
// 			PdfReport:            pulumi.String("enable"),
// 			ReportSource:         pulumi.String("forward-traffic"),
// 			TopN:                 pulumi.Int(1000),
// 			WebBrowsingThreshold: pulumi.Int(3),
// 		})
// 		if err != nil {
// 			return err
// 		}
// 		return nil
// 	})
// }
// ```
//
// ## Import
//
// Report Setting can be imported using any of these accepted formats
//
// ```sh
//  $ pulumi import fortios:index/reportSetting:ReportSetting labelname ReportSetting
// ```
//
//  If you do not want to import arguments of block$ export "FORTIOS_IMPORT_TABLE"="false"
//
// ```sh
//  $ pulumi import fortios:index/reportSetting:ReportSetting labelname ReportSetting
// ```
//
//  $ unset "FORTIOS_IMPORT_TABLE"
type ReportSetting struct {
	pulumi.CustomResourceState

	// Enable/disable historical FortiView. Valid values: `enable`, `disable`.
	Fortiview pulumi.StringOutput `pulumi:"fortiview"`
	// Enable/disable PDF report. Valid values: `enable`, `disable`.
	PdfReport pulumi.StringOutput `pulumi:"pdfReport"`
	// Report log source. Valid values: `forward-traffic`, `sniffer-traffic`, `local-deny-traffic`.
	ReportSource pulumi.StringOutput `pulumi:"reportSource"`
	// Number of items to populate (100 - 4000).
	TopN pulumi.IntOutput `pulumi:"topN"`
	// Specifies the vdom to which the resource will be applied when the FortiGate unit is running in VDOM mode. Only one vdom can be specified. If you want to inherit the vdom configuration of the provider, please do not set this parameter.
	Vdomparam pulumi.StringPtrOutput `pulumi:"vdomparam"`
	// Web browsing time calculation threshold (3 - 15 min).
	WebBrowsingThreshold pulumi.IntOutput `pulumi:"webBrowsingThreshold"`
}

// NewReportSetting registers a new resource with the given unique name, arguments, and options.
func NewReportSetting(ctx *pulumi.Context,
	name string, args *ReportSettingArgs, opts ...pulumi.ResourceOption) (*ReportSetting, error) {
	if args == nil {
		args = &ReportSettingArgs{}
	}

	opts = pkgResourceDefaultOpts(opts)
	var resource ReportSetting
	err := ctx.RegisterResource("fortios:index/reportSetting:ReportSetting", name, args, &resource, opts...)
	if err != nil {
		return nil, err
	}
	return &resource, nil
}

// GetReportSetting gets an existing ReportSetting resource's state with the given name, ID, and optional
// state properties that are used to uniquely qualify the lookup (nil if not required).
func GetReportSetting(ctx *pulumi.Context,
	name string, id pulumi.IDInput, state *ReportSettingState, opts ...pulumi.ResourceOption) (*ReportSetting, error) {
	var resource ReportSetting
	err := ctx.ReadResource("fortios:index/reportSetting:ReportSetting", name, id, state, &resource, opts...)
	if err != nil {
		return nil, err
	}
	return &resource, nil
}

// Input properties used for looking up and filtering ReportSetting resources.
type reportSettingState struct {
	// Enable/disable historical FortiView. Valid values: `enable`, `disable`.
	Fortiview *string `pulumi:"fortiview"`
	// Enable/disable PDF report. Valid values: `enable`, `disable`.
	PdfReport *string `pulumi:"pdfReport"`
	// Report log source. Valid values: `forward-traffic`, `sniffer-traffic`, `local-deny-traffic`.
	ReportSource *string `pulumi:"reportSource"`
	// Number of items to populate (100 - 4000).
	TopN *int `pulumi:"topN"`
	// Specifies the vdom to which the resource will be applied when the FortiGate unit is running in VDOM mode. Only one vdom can be specified. If you want to inherit the vdom configuration of the provider, please do not set this parameter.
	Vdomparam *string `pulumi:"vdomparam"`
	// Web browsing time calculation threshold (3 - 15 min).
	WebBrowsingThreshold *int `pulumi:"webBrowsingThreshold"`
}

type ReportSettingState struct {
	// Enable/disable historical FortiView. Valid values: `enable`, `disable`.
	Fortiview pulumi.StringPtrInput
	// Enable/disable PDF report. Valid values: `enable`, `disable`.
	PdfReport pulumi.StringPtrInput
	// Report log source. Valid values: `forward-traffic`, `sniffer-traffic`, `local-deny-traffic`.
	ReportSource pulumi.StringPtrInput
	// Number of items to populate (100 - 4000).
	TopN pulumi.IntPtrInput
	// Specifies the vdom to which the resource will be applied when the FortiGate unit is running in VDOM mode. Only one vdom can be specified. If you want to inherit the vdom configuration of the provider, please do not set this parameter.
	Vdomparam pulumi.StringPtrInput
	// Web browsing time calculation threshold (3 - 15 min).
	WebBrowsingThreshold pulumi.IntPtrInput
}

func (ReportSettingState) ElementType() reflect.Type {
	return reflect.TypeOf((*reportSettingState)(nil)).Elem()
}

type reportSettingArgs struct {
	// Enable/disable historical FortiView. Valid values: `enable`, `disable`.
	Fortiview *string `pulumi:"fortiview"`
	// Enable/disable PDF report. Valid values: `enable`, `disable`.
	PdfReport *string `pulumi:"pdfReport"`
	// Report log source. Valid values: `forward-traffic`, `sniffer-traffic`, `local-deny-traffic`.
	ReportSource *string `pulumi:"reportSource"`
	// Number of items to populate (100 - 4000).
	TopN *int `pulumi:"topN"`
	// Specifies the vdom to which the resource will be applied when the FortiGate unit is running in VDOM mode. Only one vdom can be specified. If you want to inherit the vdom configuration of the provider, please do not set this parameter.
	Vdomparam *string `pulumi:"vdomparam"`
	// Web browsing time calculation threshold (3 - 15 min).
	WebBrowsingThreshold *int `pulumi:"webBrowsingThreshold"`
}

// The set of arguments for constructing a ReportSetting resource.
type ReportSettingArgs struct {
	// Enable/disable historical FortiView. Valid values: `enable`, `disable`.
	Fortiview pulumi.StringPtrInput
	// Enable/disable PDF report. Valid values: `enable`, `disable`.
	PdfReport pulumi.StringPtrInput
	// Report log source. Valid values: `forward-traffic`, `sniffer-traffic`, `local-deny-traffic`.
	ReportSource pulumi.StringPtrInput
	// Number of items to populate (100 - 4000).
	TopN pulumi.IntPtrInput
	// Specifies the vdom to which the resource will be applied when the FortiGate unit is running in VDOM mode. Only one vdom can be specified. If you want to inherit the vdom configuration of the provider, please do not set this parameter.
	Vdomparam pulumi.StringPtrInput
	// Web browsing time calculation threshold (3 - 15 min).
	WebBrowsingThreshold pulumi.IntPtrInput
}

func (ReportSettingArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*reportSettingArgs)(nil)).Elem()
}

type ReportSettingInput interface {
	pulumi.Input

	ToReportSettingOutput() ReportSettingOutput
	ToReportSettingOutputWithContext(ctx context.Context) ReportSettingOutput
}

func (*ReportSetting) ElementType() reflect.Type {
	return reflect.TypeOf((**ReportSetting)(nil)).Elem()
}

func (i *ReportSetting) ToReportSettingOutput() ReportSettingOutput {
	return i.ToReportSettingOutputWithContext(context.Background())
}

func (i *ReportSetting) ToReportSettingOutputWithContext(ctx context.Context) ReportSettingOutput {
	return pulumi.ToOutputWithContext(ctx, i).(ReportSettingOutput)
}

// ReportSettingArrayInput is an input type that accepts ReportSettingArray and ReportSettingArrayOutput values.
// You can construct a concrete instance of `ReportSettingArrayInput` via:
//
//          ReportSettingArray{ ReportSettingArgs{...} }
type ReportSettingArrayInput interface {
	pulumi.Input

	ToReportSettingArrayOutput() ReportSettingArrayOutput
	ToReportSettingArrayOutputWithContext(context.Context) ReportSettingArrayOutput
}

type ReportSettingArray []ReportSettingInput

func (ReportSettingArray) ElementType() reflect.Type {
	return reflect.TypeOf((*[]*ReportSetting)(nil)).Elem()
}

func (i ReportSettingArray) ToReportSettingArrayOutput() ReportSettingArrayOutput {
	return i.ToReportSettingArrayOutputWithContext(context.Background())
}

func (i ReportSettingArray) ToReportSettingArrayOutputWithContext(ctx context.Context) ReportSettingArrayOutput {
	return pulumi.ToOutputWithContext(ctx, i).(ReportSettingArrayOutput)
}

// ReportSettingMapInput is an input type that accepts ReportSettingMap and ReportSettingMapOutput values.
// You can construct a concrete instance of `ReportSettingMapInput` via:
//
//          ReportSettingMap{ "key": ReportSettingArgs{...} }
type ReportSettingMapInput interface {
	pulumi.Input

	ToReportSettingMapOutput() ReportSettingMapOutput
	ToReportSettingMapOutputWithContext(context.Context) ReportSettingMapOutput
}

type ReportSettingMap map[string]ReportSettingInput

func (ReportSettingMap) ElementType() reflect.Type {
	return reflect.TypeOf((*map[string]*ReportSetting)(nil)).Elem()
}

func (i ReportSettingMap) ToReportSettingMapOutput() ReportSettingMapOutput {
	return i.ToReportSettingMapOutputWithContext(context.Background())
}

func (i ReportSettingMap) ToReportSettingMapOutputWithContext(ctx context.Context) ReportSettingMapOutput {
	return pulumi.ToOutputWithContext(ctx, i).(ReportSettingMapOutput)
}

type ReportSettingOutput struct{ *pulumi.OutputState }

func (ReportSettingOutput) ElementType() reflect.Type {
	return reflect.TypeOf((**ReportSetting)(nil)).Elem()
}

func (o ReportSettingOutput) ToReportSettingOutput() ReportSettingOutput {
	return o
}

func (o ReportSettingOutput) ToReportSettingOutputWithContext(ctx context.Context) ReportSettingOutput {
	return o
}

type ReportSettingArrayOutput struct{ *pulumi.OutputState }

func (ReportSettingArrayOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*[]*ReportSetting)(nil)).Elem()
}

func (o ReportSettingArrayOutput) ToReportSettingArrayOutput() ReportSettingArrayOutput {
	return o
}

func (o ReportSettingArrayOutput) ToReportSettingArrayOutputWithContext(ctx context.Context) ReportSettingArrayOutput {
	return o
}

func (o ReportSettingArrayOutput) Index(i pulumi.IntInput) ReportSettingOutput {
	return pulumi.All(o, i).ApplyT(func(vs []interface{}) *ReportSetting {
		return vs[0].([]*ReportSetting)[vs[1].(int)]
	}).(ReportSettingOutput)
}

type ReportSettingMapOutput struct{ *pulumi.OutputState }

func (ReportSettingMapOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*map[string]*ReportSetting)(nil)).Elem()
}

func (o ReportSettingMapOutput) ToReportSettingMapOutput() ReportSettingMapOutput {
	return o
}

func (o ReportSettingMapOutput) ToReportSettingMapOutputWithContext(ctx context.Context) ReportSettingMapOutput {
	return o
}

func (o ReportSettingMapOutput) MapIndex(k pulumi.StringInput) ReportSettingOutput {
	return pulumi.All(o, k).ApplyT(func(vs []interface{}) *ReportSetting {
		return vs[0].(map[string]*ReportSetting)[vs[1].(string)]
	}).(ReportSettingOutput)
}

func init() {
	pulumi.RegisterInputType(reflect.TypeOf((*ReportSettingInput)(nil)).Elem(), &ReportSetting{})
	pulumi.RegisterInputType(reflect.TypeOf((*ReportSettingArrayInput)(nil)).Elem(), ReportSettingArray{})
	pulumi.RegisterInputType(reflect.TypeOf((*ReportSettingMapInput)(nil)).Elem(), ReportSettingMap{})
	pulumi.RegisterOutputType(ReportSettingOutput{})
	pulumi.RegisterOutputType(ReportSettingArrayOutput{})
	pulumi.RegisterOutputType(ReportSettingMapOutput{})
}
