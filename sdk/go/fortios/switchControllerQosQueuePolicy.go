// Code generated by the Pulumi Terraform Bridge (tfgen) Tool DO NOT EDIT.
// *** WARNING: Do not edit by hand unless you're certain you know what you are doing! ***

package fortios

import (
	"context"
	"reflect"

	"errors"
	"github.com/lubyou/pulumi-fortios/sdk/go/fortios/internal"
	"github.com/pulumi/pulumi/sdk/v3/go/pulumi"
)

type SwitchControllerQosQueuePolicy struct {
	pulumi.CustomResourceState

	CosQueues           SwitchControllerQosQueuePolicyCosQueueArrayOutput `pulumi:"cosQueues"`
	DynamicSortSubtable pulumi.StringPtrOutput                            `pulumi:"dynamicSortSubtable"`
	GetAllTables        pulumi.StringPtrOutput                            `pulumi:"getAllTables"`
	Name                pulumi.StringOutput                               `pulumi:"name"`
	RateBy              pulumi.StringOutput                               `pulumi:"rateBy"`
	Schedule            pulumi.StringOutput                               `pulumi:"schedule"`
	Vdomparam           pulumi.StringPtrOutput                            `pulumi:"vdomparam"`
}

// NewSwitchControllerQosQueuePolicy registers a new resource with the given unique name, arguments, and options.
func NewSwitchControllerQosQueuePolicy(ctx *pulumi.Context,
	name string, args *SwitchControllerQosQueuePolicyArgs, opts ...pulumi.ResourceOption) (*SwitchControllerQosQueuePolicy, error) {
	if args == nil {
		return nil, errors.New("missing one or more required arguments")
	}

	if args.RateBy == nil {
		return nil, errors.New("invalid value for required argument 'RateBy'")
	}
	if args.Schedule == nil {
		return nil, errors.New("invalid value for required argument 'Schedule'")
	}
	opts = internal.PkgResourceDefaultOpts(opts)
	var resource SwitchControllerQosQueuePolicy
	err := ctx.RegisterResource("fortios:index/switchControllerQosQueuePolicy:SwitchControllerQosQueuePolicy", name, args, &resource, opts...)
	if err != nil {
		return nil, err
	}
	return &resource, nil
}

// GetSwitchControllerQosQueuePolicy gets an existing SwitchControllerQosQueuePolicy resource's state with the given name, ID, and optional
// state properties that are used to uniquely qualify the lookup (nil if not required).
func GetSwitchControllerQosQueuePolicy(ctx *pulumi.Context,
	name string, id pulumi.IDInput, state *SwitchControllerQosQueuePolicyState, opts ...pulumi.ResourceOption) (*SwitchControllerQosQueuePolicy, error) {
	var resource SwitchControllerQosQueuePolicy
	err := ctx.ReadResource("fortios:index/switchControllerQosQueuePolicy:SwitchControllerQosQueuePolicy", name, id, state, &resource, opts...)
	if err != nil {
		return nil, err
	}
	return &resource, nil
}

// Input properties used for looking up and filtering SwitchControllerQosQueuePolicy resources.
type switchControllerQosQueuePolicyState struct {
	CosQueues           []SwitchControllerQosQueuePolicyCosQueue `pulumi:"cosQueues"`
	DynamicSortSubtable *string                                  `pulumi:"dynamicSortSubtable"`
	GetAllTables        *string                                  `pulumi:"getAllTables"`
	Name                *string                                  `pulumi:"name"`
	RateBy              *string                                  `pulumi:"rateBy"`
	Schedule            *string                                  `pulumi:"schedule"`
	Vdomparam           *string                                  `pulumi:"vdomparam"`
}

type SwitchControllerQosQueuePolicyState struct {
	CosQueues           SwitchControllerQosQueuePolicyCosQueueArrayInput
	DynamicSortSubtable pulumi.StringPtrInput
	GetAllTables        pulumi.StringPtrInput
	Name                pulumi.StringPtrInput
	RateBy              pulumi.StringPtrInput
	Schedule            pulumi.StringPtrInput
	Vdomparam           pulumi.StringPtrInput
}

func (SwitchControllerQosQueuePolicyState) ElementType() reflect.Type {
	return reflect.TypeOf((*switchControllerQosQueuePolicyState)(nil)).Elem()
}

type switchControllerQosQueuePolicyArgs struct {
	CosQueues           []SwitchControllerQosQueuePolicyCosQueue `pulumi:"cosQueues"`
	DynamicSortSubtable *string                                  `pulumi:"dynamicSortSubtable"`
	GetAllTables        *string                                  `pulumi:"getAllTables"`
	Name                *string                                  `pulumi:"name"`
	RateBy              string                                   `pulumi:"rateBy"`
	Schedule            string                                   `pulumi:"schedule"`
	Vdomparam           *string                                  `pulumi:"vdomparam"`
}

// The set of arguments for constructing a SwitchControllerQosQueuePolicy resource.
type SwitchControllerQosQueuePolicyArgs struct {
	CosQueues           SwitchControllerQosQueuePolicyCosQueueArrayInput
	DynamicSortSubtable pulumi.StringPtrInput
	GetAllTables        pulumi.StringPtrInput
	Name                pulumi.StringPtrInput
	RateBy              pulumi.StringInput
	Schedule            pulumi.StringInput
	Vdomparam           pulumi.StringPtrInput
}

func (SwitchControllerQosQueuePolicyArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*switchControllerQosQueuePolicyArgs)(nil)).Elem()
}

type SwitchControllerQosQueuePolicyInput interface {
	pulumi.Input

	ToSwitchControllerQosQueuePolicyOutput() SwitchControllerQosQueuePolicyOutput
	ToSwitchControllerQosQueuePolicyOutputWithContext(ctx context.Context) SwitchControllerQosQueuePolicyOutput
}

func (*SwitchControllerQosQueuePolicy) ElementType() reflect.Type {
	return reflect.TypeOf((**SwitchControllerQosQueuePolicy)(nil)).Elem()
}

func (i *SwitchControllerQosQueuePolicy) ToSwitchControllerQosQueuePolicyOutput() SwitchControllerQosQueuePolicyOutput {
	return i.ToSwitchControllerQosQueuePolicyOutputWithContext(context.Background())
}

func (i *SwitchControllerQosQueuePolicy) ToSwitchControllerQosQueuePolicyOutputWithContext(ctx context.Context) SwitchControllerQosQueuePolicyOutput {
	return pulumi.ToOutputWithContext(ctx, i).(SwitchControllerQosQueuePolicyOutput)
}

// SwitchControllerQosQueuePolicyArrayInput is an input type that accepts SwitchControllerQosQueuePolicyArray and SwitchControllerQosQueuePolicyArrayOutput values.
// You can construct a concrete instance of `SwitchControllerQosQueuePolicyArrayInput` via:
//
//	SwitchControllerQosQueuePolicyArray{ SwitchControllerQosQueuePolicyArgs{...} }
type SwitchControllerQosQueuePolicyArrayInput interface {
	pulumi.Input

	ToSwitchControllerQosQueuePolicyArrayOutput() SwitchControllerQosQueuePolicyArrayOutput
	ToSwitchControllerQosQueuePolicyArrayOutputWithContext(context.Context) SwitchControllerQosQueuePolicyArrayOutput
}

type SwitchControllerQosQueuePolicyArray []SwitchControllerQosQueuePolicyInput

func (SwitchControllerQosQueuePolicyArray) ElementType() reflect.Type {
	return reflect.TypeOf((*[]*SwitchControllerQosQueuePolicy)(nil)).Elem()
}

func (i SwitchControllerQosQueuePolicyArray) ToSwitchControllerQosQueuePolicyArrayOutput() SwitchControllerQosQueuePolicyArrayOutput {
	return i.ToSwitchControllerQosQueuePolicyArrayOutputWithContext(context.Background())
}

func (i SwitchControllerQosQueuePolicyArray) ToSwitchControllerQosQueuePolicyArrayOutputWithContext(ctx context.Context) SwitchControllerQosQueuePolicyArrayOutput {
	return pulumi.ToOutputWithContext(ctx, i).(SwitchControllerQosQueuePolicyArrayOutput)
}

// SwitchControllerQosQueuePolicyMapInput is an input type that accepts SwitchControllerQosQueuePolicyMap and SwitchControllerQosQueuePolicyMapOutput values.
// You can construct a concrete instance of `SwitchControllerQosQueuePolicyMapInput` via:
//
//	SwitchControllerQosQueuePolicyMap{ "key": SwitchControllerQosQueuePolicyArgs{...} }
type SwitchControllerQosQueuePolicyMapInput interface {
	pulumi.Input

	ToSwitchControllerQosQueuePolicyMapOutput() SwitchControllerQosQueuePolicyMapOutput
	ToSwitchControllerQosQueuePolicyMapOutputWithContext(context.Context) SwitchControllerQosQueuePolicyMapOutput
}

type SwitchControllerQosQueuePolicyMap map[string]SwitchControllerQosQueuePolicyInput

func (SwitchControllerQosQueuePolicyMap) ElementType() reflect.Type {
	return reflect.TypeOf((*map[string]*SwitchControllerQosQueuePolicy)(nil)).Elem()
}

func (i SwitchControllerQosQueuePolicyMap) ToSwitchControllerQosQueuePolicyMapOutput() SwitchControllerQosQueuePolicyMapOutput {
	return i.ToSwitchControllerQosQueuePolicyMapOutputWithContext(context.Background())
}

func (i SwitchControllerQosQueuePolicyMap) ToSwitchControllerQosQueuePolicyMapOutputWithContext(ctx context.Context) SwitchControllerQosQueuePolicyMapOutput {
	return pulumi.ToOutputWithContext(ctx, i).(SwitchControllerQosQueuePolicyMapOutput)
}

type SwitchControllerQosQueuePolicyOutput struct{ *pulumi.OutputState }

func (SwitchControllerQosQueuePolicyOutput) ElementType() reflect.Type {
	return reflect.TypeOf((**SwitchControllerQosQueuePolicy)(nil)).Elem()
}

func (o SwitchControllerQosQueuePolicyOutput) ToSwitchControllerQosQueuePolicyOutput() SwitchControllerQosQueuePolicyOutput {
	return o
}

func (o SwitchControllerQosQueuePolicyOutput) ToSwitchControllerQosQueuePolicyOutputWithContext(ctx context.Context) SwitchControllerQosQueuePolicyOutput {
	return o
}

func (o SwitchControllerQosQueuePolicyOutput) CosQueues() SwitchControllerQosQueuePolicyCosQueueArrayOutput {
	return o.ApplyT(func(v *SwitchControllerQosQueuePolicy) SwitchControllerQosQueuePolicyCosQueueArrayOutput {
		return v.CosQueues
	}).(SwitchControllerQosQueuePolicyCosQueueArrayOutput)
}

func (o SwitchControllerQosQueuePolicyOutput) DynamicSortSubtable() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *SwitchControllerQosQueuePolicy) pulumi.StringPtrOutput { return v.DynamicSortSubtable }).(pulumi.StringPtrOutput)
}

func (o SwitchControllerQosQueuePolicyOutput) GetAllTables() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *SwitchControllerQosQueuePolicy) pulumi.StringPtrOutput { return v.GetAllTables }).(pulumi.StringPtrOutput)
}

func (o SwitchControllerQosQueuePolicyOutput) Name() pulumi.StringOutput {
	return o.ApplyT(func(v *SwitchControllerQosQueuePolicy) pulumi.StringOutput { return v.Name }).(pulumi.StringOutput)
}

func (o SwitchControllerQosQueuePolicyOutput) RateBy() pulumi.StringOutput {
	return o.ApplyT(func(v *SwitchControllerQosQueuePolicy) pulumi.StringOutput { return v.RateBy }).(pulumi.StringOutput)
}

func (o SwitchControllerQosQueuePolicyOutput) Schedule() pulumi.StringOutput {
	return o.ApplyT(func(v *SwitchControllerQosQueuePolicy) pulumi.StringOutput { return v.Schedule }).(pulumi.StringOutput)
}

func (o SwitchControllerQosQueuePolicyOutput) Vdomparam() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *SwitchControllerQosQueuePolicy) pulumi.StringPtrOutput { return v.Vdomparam }).(pulumi.StringPtrOutput)
}

type SwitchControllerQosQueuePolicyArrayOutput struct{ *pulumi.OutputState }

func (SwitchControllerQosQueuePolicyArrayOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*[]*SwitchControllerQosQueuePolicy)(nil)).Elem()
}

func (o SwitchControllerQosQueuePolicyArrayOutput) ToSwitchControllerQosQueuePolicyArrayOutput() SwitchControllerQosQueuePolicyArrayOutput {
	return o
}

func (o SwitchControllerQosQueuePolicyArrayOutput) ToSwitchControllerQosQueuePolicyArrayOutputWithContext(ctx context.Context) SwitchControllerQosQueuePolicyArrayOutput {
	return o
}

func (o SwitchControllerQosQueuePolicyArrayOutput) Index(i pulumi.IntInput) SwitchControllerQosQueuePolicyOutput {
	return pulumi.All(o, i).ApplyT(func(vs []interface{}) *SwitchControllerQosQueuePolicy {
		return vs[0].([]*SwitchControllerQosQueuePolicy)[vs[1].(int)]
	}).(SwitchControllerQosQueuePolicyOutput)
}

type SwitchControllerQosQueuePolicyMapOutput struct{ *pulumi.OutputState }

func (SwitchControllerQosQueuePolicyMapOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*map[string]*SwitchControllerQosQueuePolicy)(nil)).Elem()
}

func (o SwitchControllerQosQueuePolicyMapOutput) ToSwitchControllerQosQueuePolicyMapOutput() SwitchControllerQosQueuePolicyMapOutput {
	return o
}

func (o SwitchControllerQosQueuePolicyMapOutput) ToSwitchControllerQosQueuePolicyMapOutputWithContext(ctx context.Context) SwitchControllerQosQueuePolicyMapOutput {
	return o
}

func (o SwitchControllerQosQueuePolicyMapOutput) MapIndex(k pulumi.StringInput) SwitchControllerQosQueuePolicyOutput {
	return pulumi.All(o, k).ApplyT(func(vs []interface{}) *SwitchControllerQosQueuePolicy {
		return vs[0].(map[string]*SwitchControllerQosQueuePolicy)[vs[1].(string)]
	}).(SwitchControllerQosQueuePolicyOutput)
}

func init() {
	pulumi.RegisterInputType(reflect.TypeOf((*SwitchControllerQosQueuePolicyInput)(nil)).Elem(), &SwitchControllerQosQueuePolicy{})
	pulumi.RegisterInputType(reflect.TypeOf((*SwitchControllerQosQueuePolicyArrayInput)(nil)).Elem(), SwitchControllerQosQueuePolicyArray{})
	pulumi.RegisterInputType(reflect.TypeOf((*SwitchControllerQosQueuePolicyMapInput)(nil)).Elem(), SwitchControllerQosQueuePolicyMap{})
	pulumi.RegisterOutputType(SwitchControllerQosQueuePolicyOutput{})
	pulumi.RegisterOutputType(SwitchControllerQosQueuePolicyArrayOutput{})
	pulumi.RegisterOutputType(SwitchControllerQosQueuePolicyMapOutput{})
}
