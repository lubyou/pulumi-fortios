// Code generated by the Pulumi Terraform Bridge (tfgen) Tool DO NOT EDIT.
// *** WARNING: Do not edit by hand unless you're certain you know what you are doing! ***

package fortios

import (
	"context"
	"reflect"

	"github.com/pulumi/pulumi/sdk/v3/go/pulumi"
)

type WirelessControllerSetting struct {
	pulumi.CustomResourceState

	AccountId                        pulumi.StringOutput                                       `pulumi:"accountId"`
	Country                          pulumi.StringOutput                                       `pulumi:"country"`
	DarrpOptimize                    pulumi.IntOutput                                          `pulumi:"darrpOptimize"`
	DarrpOptimizeSchedules           WirelessControllerSettingDarrpOptimizeScheduleArrayOutput `pulumi:"darrpOptimizeSchedules"`
	DeviceHoldoff                    pulumi.IntOutput                                          `pulumi:"deviceHoldoff"`
	DeviceIdle                       pulumi.IntOutput                                          `pulumi:"deviceIdle"`
	DeviceWeight                     pulumi.IntOutput                                          `pulumi:"deviceWeight"`
	DuplicateSsid                    pulumi.StringOutput                                       `pulumi:"duplicateSsid"`
	DynamicSortSubtable              pulumi.StringPtrOutput                                    `pulumi:"dynamicSortSubtable"`
	FakeSsidAction                   pulumi.StringOutput                                       `pulumi:"fakeSsidAction"`
	FapcCompatibility                pulumi.StringOutput                                       `pulumi:"fapcCompatibility"`
	FirmwareProvisionOnAuthorization pulumi.StringOutput                                       `pulumi:"firmwareProvisionOnAuthorization"`
	OffendingSsids                   WirelessControllerSettingOffendingSsidArrayOutput         `pulumi:"offendingSsids"`
	PhishingSsidDetect               pulumi.StringOutput                                       `pulumi:"phishingSsidDetect"`
	Vdomparam                        pulumi.StringPtrOutput                                    `pulumi:"vdomparam"`
	WfaCompatibility                 pulumi.StringOutput                                       `pulumi:"wfaCompatibility"`
}

// NewWirelessControllerSetting registers a new resource with the given unique name, arguments, and options.
func NewWirelessControllerSetting(ctx *pulumi.Context,
	name string, args *WirelessControllerSettingArgs, opts ...pulumi.ResourceOption) (*WirelessControllerSetting, error) {
	if args == nil {
		args = &WirelessControllerSettingArgs{}
	}

	opts = pkgResourceDefaultOpts(opts)
	var resource WirelessControllerSetting
	err := ctx.RegisterResource("fortios:index/wirelessControllerSetting:WirelessControllerSetting", name, args, &resource, opts...)
	if err != nil {
		return nil, err
	}
	return &resource, nil
}

// GetWirelessControllerSetting gets an existing WirelessControllerSetting resource's state with the given name, ID, and optional
// state properties that are used to uniquely qualify the lookup (nil if not required).
func GetWirelessControllerSetting(ctx *pulumi.Context,
	name string, id pulumi.IDInput, state *WirelessControllerSettingState, opts ...pulumi.ResourceOption) (*WirelessControllerSetting, error) {
	var resource WirelessControllerSetting
	err := ctx.ReadResource("fortios:index/wirelessControllerSetting:WirelessControllerSetting", name, id, state, &resource, opts...)
	if err != nil {
		return nil, err
	}
	return &resource, nil
}

// Input properties used for looking up and filtering WirelessControllerSetting resources.
type wirelessControllerSettingState struct {
	AccountId                        *string                                          `pulumi:"accountId"`
	Country                          *string                                          `pulumi:"country"`
	DarrpOptimize                    *int                                             `pulumi:"darrpOptimize"`
	DarrpOptimizeSchedules           []WirelessControllerSettingDarrpOptimizeSchedule `pulumi:"darrpOptimizeSchedules"`
	DeviceHoldoff                    *int                                             `pulumi:"deviceHoldoff"`
	DeviceIdle                       *int                                             `pulumi:"deviceIdle"`
	DeviceWeight                     *int                                             `pulumi:"deviceWeight"`
	DuplicateSsid                    *string                                          `pulumi:"duplicateSsid"`
	DynamicSortSubtable              *string                                          `pulumi:"dynamicSortSubtable"`
	FakeSsidAction                   *string                                          `pulumi:"fakeSsidAction"`
	FapcCompatibility                *string                                          `pulumi:"fapcCompatibility"`
	FirmwareProvisionOnAuthorization *string                                          `pulumi:"firmwareProvisionOnAuthorization"`
	OffendingSsids                   []WirelessControllerSettingOffendingSsid         `pulumi:"offendingSsids"`
	PhishingSsidDetect               *string                                          `pulumi:"phishingSsidDetect"`
	Vdomparam                        *string                                          `pulumi:"vdomparam"`
	WfaCompatibility                 *string                                          `pulumi:"wfaCompatibility"`
}

type WirelessControllerSettingState struct {
	AccountId                        pulumi.StringPtrInput
	Country                          pulumi.StringPtrInput
	DarrpOptimize                    pulumi.IntPtrInput
	DarrpOptimizeSchedules           WirelessControllerSettingDarrpOptimizeScheduleArrayInput
	DeviceHoldoff                    pulumi.IntPtrInput
	DeviceIdle                       pulumi.IntPtrInput
	DeviceWeight                     pulumi.IntPtrInput
	DuplicateSsid                    pulumi.StringPtrInput
	DynamicSortSubtable              pulumi.StringPtrInput
	FakeSsidAction                   pulumi.StringPtrInput
	FapcCompatibility                pulumi.StringPtrInput
	FirmwareProvisionOnAuthorization pulumi.StringPtrInput
	OffendingSsids                   WirelessControllerSettingOffendingSsidArrayInput
	PhishingSsidDetect               pulumi.StringPtrInput
	Vdomparam                        pulumi.StringPtrInput
	WfaCompatibility                 pulumi.StringPtrInput
}

func (WirelessControllerSettingState) ElementType() reflect.Type {
	return reflect.TypeOf((*wirelessControllerSettingState)(nil)).Elem()
}

type wirelessControllerSettingArgs struct {
	AccountId                        *string                                          `pulumi:"accountId"`
	Country                          *string                                          `pulumi:"country"`
	DarrpOptimize                    *int                                             `pulumi:"darrpOptimize"`
	DarrpOptimizeSchedules           []WirelessControllerSettingDarrpOptimizeSchedule `pulumi:"darrpOptimizeSchedules"`
	DeviceHoldoff                    *int                                             `pulumi:"deviceHoldoff"`
	DeviceIdle                       *int                                             `pulumi:"deviceIdle"`
	DeviceWeight                     *int                                             `pulumi:"deviceWeight"`
	DuplicateSsid                    *string                                          `pulumi:"duplicateSsid"`
	DynamicSortSubtable              *string                                          `pulumi:"dynamicSortSubtable"`
	FakeSsidAction                   *string                                          `pulumi:"fakeSsidAction"`
	FapcCompatibility                *string                                          `pulumi:"fapcCompatibility"`
	FirmwareProvisionOnAuthorization *string                                          `pulumi:"firmwareProvisionOnAuthorization"`
	OffendingSsids                   []WirelessControllerSettingOffendingSsid         `pulumi:"offendingSsids"`
	PhishingSsidDetect               *string                                          `pulumi:"phishingSsidDetect"`
	Vdomparam                        *string                                          `pulumi:"vdomparam"`
	WfaCompatibility                 *string                                          `pulumi:"wfaCompatibility"`
}

// The set of arguments for constructing a WirelessControllerSetting resource.
type WirelessControllerSettingArgs struct {
	AccountId                        pulumi.StringPtrInput
	Country                          pulumi.StringPtrInput
	DarrpOptimize                    pulumi.IntPtrInput
	DarrpOptimizeSchedules           WirelessControllerSettingDarrpOptimizeScheduleArrayInput
	DeviceHoldoff                    pulumi.IntPtrInput
	DeviceIdle                       pulumi.IntPtrInput
	DeviceWeight                     pulumi.IntPtrInput
	DuplicateSsid                    pulumi.StringPtrInput
	DynamicSortSubtable              pulumi.StringPtrInput
	FakeSsidAction                   pulumi.StringPtrInput
	FapcCompatibility                pulumi.StringPtrInput
	FirmwareProvisionOnAuthorization pulumi.StringPtrInput
	OffendingSsids                   WirelessControllerSettingOffendingSsidArrayInput
	PhishingSsidDetect               pulumi.StringPtrInput
	Vdomparam                        pulumi.StringPtrInput
	WfaCompatibility                 pulumi.StringPtrInput
}

func (WirelessControllerSettingArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*wirelessControllerSettingArgs)(nil)).Elem()
}

type WirelessControllerSettingInput interface {
	pulumi.Input

	ToWirelessControllerSettingOutput() WirelessControllerSettingOutput
	ToWirelessControllerSettingOutputWithContext(ctx context.Context) WirelessControllerSettingOutput
}

func (*WirelessControllerSetting) ElementType() reflect.Type {
	return reflect.TypeOf((**WirelessControllerSetting)(nil)).Elem()
}

func (i *WirelessControllerSetting) ToWirelessControllerSettingOutput() WirelessControllerSettingOutput {
	return i.ToWirelessControllerSettingOutputWithContext(context.Background())
}

func (i *WirelessControllerSetting) ToWirelessControllerSettingOutputWithContext(ctx context.Context) WirelessControllerSettingOutput {
	return pulumi.ToOutputWithContext(ctx, i).(WirelessControllerSettingOutput)
}

// WirelessControllerSettingArrayInput is an input type that accepts WirelessControllerSettingArray and WirelessControllerSettingArrayOutput values.
// You can construct a concrete instance of `WirelessControllerSettingArrayInput` via:
//
//	WirelessControllerSettingArray{ WirelessControllerSettingArgs{...} }
type WirelessControllerSettingArrayInput interface {
	pulumi.Input

	ToWirelessControllerSettingArrayOutput() WirelessControllerSettingArrayOutput
	ToWirelessControllerSettingArrayOutputWithContext(context.Context) WirelessControllerSettingArrayOutput
}

type WirelessControllerSettingArray []WirelessControllerSettingInput

func (WirelessControllerSettingArray) ElementType() reflect.Type {
	return reflect.TypeOf((*[]*WirelessControllerSetting)(nil)).Elem()
}

func (i WirelessControllerSettingArray) ToWirelessControllerSettingArrayOutput() WirelessControllerSettingArrayOutput {
	return i.ToWirelessControllerSettingArrayOutputWithContext(context.Background())
}

func (i WirelessControllerSettingArray) ToWirelessControllerSettingArrayOutputWithContext(ctx context.Context) WirelessControllerSettingArrayOutput {
	return pulumi.ToOutputWithContext(ctx, i).(WirelessControllerSettingArrayOutput)
}

// WirelessControllerSettingMapInput is an input type that accepts WirelessControllerSettingMap and WirelessControllerSettingMapOutput values.
// You can construct a concrete instance of `WirelessControllerSettingMapInput` via:
//
//	WirelessControllerSettingMap{ "key": WirelessControllerSettingArgs{...} }
type WirelessControllerSettingMapInput interface {
	pulumi.Input

	ToWirelessControllerSettingMapOutput() WirelessControllerSettingMapOutput
	ToWirelessControllerSettingMapOutputWithContext(context.Context) WirelessControllerSettingMapOutput
}

type WirelessControllerSettingMap map[string]WirelessControllerSettingInput

func (WirelessControllerSettingMap) ElementType() reflect.Type {
	return reflect.TypeOf((*map[string]*WirelessControllerSetting)(nil)).Elem()
}

func (i WirelessControllerSettingMap) ToWirelessControllerSettingMapOutput() WirelessControllerSettingMapOutput {
	return i.ToWirelessControllerSettingMapOutputWithContext(context.Background())
}

func (i WirelessControllerSettingMap) ToWirelessControllerSettingMapOutputWithContext(ctx context.Context) WirelessControllerSettingMapOutput {
	return pulumi.ToOutputWithContext(ctx, i).(WirelessControllerSettingMapOutput)
}

type WirelessControllerSettingOutput struct{ *pulumi.OutputState }

func (WirelessControllerSettingOutput) ElementType() reflect.Type {
	return reflect.TypeOf((**WirelessControllerSetting)(nil)).Elem()
}

func (o WirelessControllerSettingOutput) ToWirelessControllerSettingOutput() WirelessControllerSettingOutput {
	return o
}

func (o WirelessControllerSettingOutput) ToWirelessControllerSettingOutputWithContext(ctx context.Context) WirelessControllerSettingOutput {
	return o
}

func (o WirelessControllerSettingOutput) AccountId() pulumi.StringOutput {
	return o.ApplyT(func(v *WirelessControllerSetting) pulumi.StringOutput { return v.AccountId }).(pulumi.StringOutput)
}

func (o WirelessControllerSettingOutput) Country() pulumi.StringOutput {
	return o.ApplyT(func(v *WirelessControllerSetting) pulumi.StringOutput { return v.Country }).(pulumi.StringOutput)
}

func (o WirelessControllerSettingOutput) DarrpOptimize() pulumi.IntOutput {
	return o.ApplyT(func(v *WirelessControllerSetting) pulumi.IntOutput { return v.DarrpOptimize }).(pulumi.IntOutput)
}

func (o WirelessControllerSettingOutput) DarrpOptimizeSchedules() WirelessControllerSettingDarrpOptimizeScheduleArrayOutput {
	return o.ApplyT(func(v *WirelessControllerSetting) WirelessControllerSettingDarrpOptimizeScheduleArrayOutput {
		return v.DarrpOptimizeSchedules
	}).(WirelessControllerSettingDarrpOptimizeScheduleArrayOutput)
}

func (o WirelessControllerSettingOutput) DeviceHoldoff() pulumi.IntOutput {
	return o.ApplyT(func(v *WirelessControllerSetting) pulumi.IntOutput { return v.DeviceHoldoff }).(pulumi.IntOutput)
}

func (o WirelessControllerSettingOutput) DeviceIdle() pulumi.IntOutput {
	return o.ApplyT(func(v *WirelessControllerSetting) pulumi.IntOutput { return v.DeviceIdle }).(pulumi.IntOutput)
}

func (o WirelessControllerSettingOutput) DeviceWeight() pulumi.IntOutput {
	return o.ApplyT(func(v *WirelessControllerSetting) pulumi.IntOutput { return v.DeviceWeight }).(pulumi.IntOutput)
}

func (o WirelessControllerSettingOutput) DuplicateSsid() pulumi.StringOutput {
	return o.ApplyT(func(v *WirelessControllerSetting) pulumi.StringOutput { return v.DuplicateSsid }).(pulumi.StringOutput)
}

func (o WirelessControllerSettingOutput) DynamicSortSubtable() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *WirelessControllerSetting) pulumi.StringPtrOutput { return v.DynamicSortSubtable }).(pulumi.StringPtrOutput)
}

func (o WirelessControllerSettingOutput) FakeSsidAction() pulumi.StringOutput {
	return o.ApplyT(func(v *WirelessControllerSetting) pulumi.StringOutput { return v.FakeSsidAction }).(pulumi.StringOutput)
}

func (o WirelessControllerSettingOutput) FapcCompatibility() pulumi.StringOutput {
	return o.ApplyT(func(v *WirelessControllerSetting) pulumi.StringOutput { return v.FapcCompatibility }).(pulumi.StringOutput)
}

func (o WirelessControllerSettingOutput) FirmwareProvisionOnAuthorization() pulumi.StringOutput {
	return o.ApplyT(func(v *WirelessControllerSetting) pulumi.StringOutput { return v.FirmwareProvisionOnAuthorization }).(pulumi.StringOutput)
}

func (o WirelessControllerSettingOutput) OffendingSsids() WirelessControllerSettingOffendingSsidArrayOutput {
	return o.ApplyT(func(v *WirelessControllerSetting) WirelessControllerSettingOffendingSsidArrayOutput {
		return v.OffendingSsids
	}).(WirelessControllerSettingOffendingSsidArrayOutput)
}

func (o WirelessControllerSettingOutput) PhishingSsidDetect() pulumi.StringOutput {
	return o.ApplyT(func(v *WirelessControllerSetting) pulumi.StringOutput { return v.PhishingSsidDetect }).(pulumi.StringOutput)
}

func (o WirelessControllerSettingOutput) Vdomparam() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *WirelessControllerSetting) pulumi.StringPtrOutput { return v.Vdomparam }).(pulumi.StringPtrOutput)
}

func (o WirelessControllerSettingOutput) WfaCompatibility() pulumi.StringOutput {
	return o.ApplyT(func(v *WirelessControllerSetting) pulumi.StringOutput { return v.WfaCompatibility }).(pulumi.StringOutput)
}

type WirelessControllerSettingArrayOutput struct{ *pulumi.OutputState }

func (WirelessControllerSettingArrayOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*[]*WirelessControllerSetting)(nil)).Elem()
}

func (o WirelessControllerSettingArrayOutput) ToWirelessControllerSettingArrayOutput() WirelessControllerSettingArrayOutput {
	return o
}

func (o WirelessControllerSettingArrayOutput) ToWirelessControllerSettingArrayOutputWithContext(ctx context.Context) WirelessControllerSettingArrayOutput {
	return o
}

func (o WirelessControllerSettingArrayOutput) Index(i pulumi.IntInput) WirelessControllerSettingOutput {
	return pulumi.All(o, i).ApplyT(func(vs []interface{}) *WirelessControllerSetting {
		return vs[0].([]*WirelessControllerSetting)[vs[1].(int)]
	}).(WirelessControllerSettingOutput)
}

type WirelessControllerSettingMapOutput struct{ *pulumi.OutputState }

func (WirelessControllerSettingMapOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*map[string]*WirelessControllerSetting)(nil)).Elem()
}

func (o WirelessControllerSettingMapOutput) ToWirelessControllerSettingMapOutput() WirelessControllerSettingMapOutput {
	return o
}

func (o WirelessControllerSettingMapOutput) ToWirelessControllerSettingMapOutputWithContext(ctx context.Context) WirelessControllerSettingMapOutput {
	return o
}

func (o WirelessControllerSettingMapOutput) MapIndex(k pulumi.StringInput) WirelessControllerSettingOutput {
	return pulumi.All(o, k).ApplyT(func(vs []interface{}) *WirelessControllerSetting {
		return vs[0].(map[string]*WirelessControllerSetting)[vs[1].(string)]
	}).(WirelessControllerSettingOutput)
}

func init() {
	pulumi.RegisterInputType(reflect.TypeOf((*WirelessControllerSettingInput)(nil)).Elem(), &WirelessControllerSetting{})
	pulumi.RegisterInputType(reflect.TypeOf((*WirelessControllerSettingArrayInput)(nil)).Elem(), WirelessControllerSettingArray{})
	pulumi.RegisterInputType(reflect.TypeOf((*WirelessControllerSettingMapInput)(nil)).Elem(), WirelessControllerSettingMap{})
	pulumi.RegisterOutputType(WirelessControllerSettingOutput{})
	pulumi.RegisterOutputType(WirelessControllerSettingArrayOutput{})
	pulumi.RegisterOutputType(WirelessControllerSettingMapOutput{})
}
