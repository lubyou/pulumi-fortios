// Code generated by the Pulumi Terraform Bridge (tfgen) Tool DO NOT EDIT.
// *** WARNING: Do not edit by hand unless you're certain you know what you are doing! ***

package fortios

import (
	"context"
	"reflect"

	"github.com/pkg/errors"
	"github.com/pulumi/pulumi/sdk/v3/go/pulumi"
)

// Configure DNS databases.
//
// ## Example Usage
//
// ```go
// package main
//
// import (
// 	"github.com/lubyou/pulumi-fortios/sdk/go/fortios"
// 	"github.com/pulumi/pulumi-fortios/sdk/go/fortios"
// 	"github.com/pulumi/pulumi/sdk/v3/go/pulumi"
// )
//
// func main() {
// 	pulumi.Run(func(ctx *pulumi.Context) error {
// 		_, err := fortios.NewSystemDnsDatabase(ctx, "trname", &fortios.SystemDnsDatabaseArgs{
// 			Authoritative: pulumi.String("enable"),
// 			Contact:       pulumi.String("hostmaster"),
// 			DnsEntries: SystemDnsDatabaseDnsEntryArray{
// 				&SystemDnsDatabaseDnsEntryArgs{
// 					Hostname: pulumi.String("sghsgh.com"),
// 					Ttl:      pulumi.Int(3),
// 					Type:     pulumi.String("MX"),
// 				},
// 			},
// 			Domain:      pulumi.String("s.com"),
// 			Forwarder:   pulumi.String("\"9.9.9.9\" \"3.3.3.3\" "),
// 			IpMaster:    pulumi.String("0.0.0.0"),
// 			PrimaryName: pulumi.String("dns"),
// 			SourceIp:    pulumi.String("0.0.0.0"),
// 			Status:      pulumi.String("enable"),
// 			Ttl:         pulumi.Int(86400),
// 			Type:        pulumi.String("master"),
// 			View:        pulumi.String("shadow"),
// 		})
// 		if err != nil {
// 			return err
// 		}
// 		return nil
// 	})
// }
// ```
//
// ## Import
//
// System DnsDatabase can be imported using any of these accepted formats
//
// ```sh
//  $ pulumi import fortios:index/systemDnsDatabase:SystemDnsDatabase labelname {{name}}
// ```
//
//  If you do not want to import arguments of block$ export "FORTIOS_IMPORT_TABLE"="false"
//
// ```sh
//  $ pulumi import fortios:index/systemDnsDatabase:SystemDnsDatabase labelname {{name}}
// ```
//
//  $ unset "FORTIOS_IMPORT_TABLE"
type SystemDnsDatabase struct {
	pulumi.CustomResourceState

	// DNS zone transfer IP address list.
	AllowTransfer pulumi.StringOutput `pulumi:"allowTransfer"`
	// Enable/disable authoritative zone. Valid values: `enable`, `disable`.
	Authoritative pulumi.StringOutput `pulumi:"authoritative"`
	// Email address of the administrator for this zone.
	// You can specify only the username (e.g. admin) or full email address (e.g. admin@test.com)
	// When using a simple username, the domain of the email will be this zone.
	Contact pulumi.StringOutput `pulumi:"contact"`
	// DNS entry. The structure of `dnsEntry` block is documented below.
	DnsEntries SystemDnsDatabaseDnsEntryArrayOutput `pulumi:"dnsEntries"`
	// Domain name.
	Domain pulumi.StringOutput `pulumi:"domain"`
	// true or false, set this parameter to true when using dynamic forEach + toset to configure and sort sub-tables, please do not set this parameter when configuring static sub-tables.
	DynamicSortSubtable pulumi.StringPtrOutput `pulumi:"dynamicSortSubtable"`
	// DNS zone forwarder IP address list.
	Forwarder pulumi.StringOutput `pulumi:"forwarder"`
	// IP address of master DNS server. Entries in this master DNS server and imported into the DNS zone.
	IpMaster pulumi.StringOutput `pulumi:"ipMaster"`
	// IP address of primary DNS server. Entries in this primary DNS server and imported into the DNS zone.
	IpPrimary pulumi.StringOutput `pulumi:"ipPrimary"`
	// Zone name.
	Name pulumi.StringOutput `pulumi:"name"`
	// Domain name of the default DNS server for this zone.
	PrimaryName pulumi.StringOutput `pulumi:"primaryName"`
	// Maximum number of resource records (10 - 65536, 0 means infinite).
	RrMax pulumi.IntOutput `pulumi:"rrMax"`
	// Source IP for forwarding to DNS server.
	SourceIp pulumi.StringOutput `pulumi:"sourceIp"`
	// Enable/disable resource record status. Valid values: `enable`, `disable`.
	Status pulumi.StringOutput `pulumi:"status"`
	// Time-to-live for this entry (0 to 2147483647 sec, default = 0).
	Ttl pulumi.IntOutput `pulumi:"ttl"`
	// Resource record type. Valid values: `A`, `NS`, `CNAME`, `MX`, `AAAA`, `PTR`, `PTR_V6`.
	Type pulumi.StringOutput `pulumi:"type"`
	// Specifies the vdom to which the resource will be applied when the FortiGate unit is running in VDOM mode. Only one vdom can be specified. If you want to inherit the vdom configuration of the provider, please do not set this parameter.
	Vdomparam pulumi.StringPtrOutput `pulumi:"vdomparam"`
	// Zone view (public to serve public clients, shadow to serve internal clients). Valid values: `shadow`, `public`.
	View pulumi.StringOutput `pulumi:"view"`
}

// NewSystemDnsDatabase registers a new resource with the given unique name, arguments, and options.
func NewSystemDnsDatabase(ctx *pulumi.Context,
	name string, args *SystemDnsDatabaseArgs, opts ...pulumi.ResourceOption) (*SystemDnsDatabase, error) {
	if args == nil {
		return nil, errors.New("missing one or more required arguments")
	}

	if args.Authoritative == nil {
		return nil, errors.New("invalid value for required argument 'Authoritative'")
	}
	if args.Domain == nil {
		return nil, errors.New("invalid value for required argument 'Domain'")
	}
	if args.Ttl == nil {
		return nil, errors.New("invalid value for required argument 'Ttl'")
	}
	if args.Type == nil {
		return nil, errors.New("invalid value for required argument 'Type'")
	}
	if args.View == nil {
		return nil, errors.New("invalid value for required argument 'View'")
	}
	opts = pkgResourceDefaultOpts(opts)
	var resource SystemDnsDatabase
	err := ctx.RegisterResource("fortios:index/systemDnsDatabase:SystemDnsDatabase", name, args, &resource, opts...)
	if err != nil {
		return nil, err
	}
	return &resource, nil
}

// GetSystemDnsDatabase gets an existing SystemDnsDatabase resource's state with the given name, ID, and optional
// state properties that are used to uniquely qualify the lookup (nil if not required).
func GetSystemDnsDatabase(ctx *pulumi.Context,
	name string, id pulumi.IDInput, state *SystemDnsDatabaseState, opts ...pulumi.ResourceOption) (*SystemDnsDatabase, error) {
	var resource SystemDnsDatabase
	err := ctx.ReadResource("fortios:index/systemDnsDatabase:SystemDnsDatabase", name, id, state, &resource, opts...)
	if err != nil {
		return nil, err
	}
	return &resource, nil
}

// Input properties used for looking up and filtering SystemDnsDatabase resources.
type systemDnsDatabaseState struct {
	// DNS zone transfer IP address list.
	AllowTransfer *string `pulumi:"allowTransfer"`
	// Enable/disable authoritative zone. Valid values: `enable`, `disable`.
	Authoritative *string `pulumi:"authoritative"`
	// Email address of the administrator for this zone.
	// You can specify only the username (e.g. admin) or full email address (e.g. admin@test.com)
	// When using a simple username, the domain of the email will be this zone.
	Contact *string `pulumi:"contact"`
	// DNS entry. The structure of `dnsEntry` block is documented below.
	DnsEntries []SystemDnsDatabaseDnsEntry `pulumi:"dnsEntries"`
	// Domain name.
	Domain *string `pulumi:"domain"`
	// true or false, set this parameter to true when using dynamic forEach + toset to configure and sort sub-tables, please do not set this parameter when configuring static sub-tables.
	DynamicSortSubtable *string `pulumi:"dynamicSortSubtable"`
	// DNS zone forwarder IP address list.
	Forwarder *string `pulumi:"forwarder"`
	// IP address of master DNS server. Entries in this master DNS server and imported into the DNS zone.
	IpMaster *string `pulumi:"ipMaster"`
	// IP address of primary DNS server. Entries in this primary DNS server and imported into the DNS zone.
	IpPrimary *string `pulumi:"ipPrimary"`
	// Zone name.
	Name *string `pulumi:"name"`
	// Domain name of the default DNS server for this zone.
	PrimaryName *string `pulumi:"primaryName"`
	// Maximum number of resource records (10 - 65536, 0 means infinite).
	RrMax *int `pulumi:"rrMax"`
	// Source IP for forwarding to DNS server.
	SourceIp *string `pulumi:"sourceIp"`
	// Enable/disable resource record status. Valid values: `enable`, `disable`.
	Status *string `pulumi:"status"`
	// Time-to-live for this entry (0 to 2147483647 sec, default = 0).
	Ttl *int `pulumi:"ttl"`
	// Resource record type. Valid values: `A`, `NS`, `CNAME`, `MX`, `AAAA`, `PTR`, `PTR_V6`.
	Type *string `pulumi:"type"`
	// Specifies the vdom to which the resource will be applied when the FortiGate unit is running in VDOM mode. Only one vdom can be specified. If you want to inherit the vdom configuration of the provider, please do not set this parameter.
	Vdomparam *string `pulumi:"vdomparam"`
	// Zone view (public to serve public clients, shadow to serve internal clients). Valid values: `shadow`, `public`.
	View *string `pulumi:"view"`
}

type SystemDnsDatabaseState struct {
	// DNS zone transfer IP address list.
	AllowTransfer pulumi.StringPtrInput
	// Enable/disable authoritative zone. Valid values: `enable`, `disable`.
	Authoritative pulumi.StringPtrInput
	// Email address of the administrator for this zone.
	// You can specify only the username (e.g. admin) or full email address (e.g. admin@test.com)
	// When using a simple username, the domain of the email will be this zone.
	Contact pulumi.StringPtrInput
	// DNS entry. The structure of `dnsEntry` block is documented below.
	DnsEntries SystemDnsDatabaseDnsEntryArrayInput
	// Domain name.
	Domain pulumi.StringPtrInput
	// true or false, set this parameter to true when using dynamic forEach + toset to configure and sort sub-tables, please do not set this parameter when configuring static sub-tables.
	DynamicSortSubtable pulumi.StringPtrInput
	// DNS zone forwarder IP address list.
	Forwarder pulumi.StringPtrInput
	// IP address of master DNS server. Entries in this master DNS server and imported into the DNS zone.
	IpMaster pulumi.StringPtrInput
	// IP address of primary DNS server. Entries in this primary DNS server and imported into the DNS zone.
	IpPrimary pulumi.StringPtrInput
	// Zone name.
	Name pulumi.StringPtrInput
	// Domain name of the default DNS server for this zone.
	PrimaryName pulumi.StringPtrInput
	// Maximum number of resource records (10 - 65536, 0 means infinite).
	RrMax pulumi.IntPtrInput
	// Source IP for forwarding to DNS server.
	SourceIp pulumi.StringPtrInput
	// Enable/disable resource record status. Valid values: `enable`, `disable`.
	Status pulumi.StringPtrInput
	// Time-to-live for this entry (0 to 2147483647 sec, default = 0).
	Ttl pulumi.IntPtrInput
	// Resource record type. Valid values: `A`, `NS`, `CNAME`, `MX`, `AAAA`, `PTR`, `PTR_V6`.
	Type pulumi.StringPtrInput
	// Specifies the vdom to which the resource will be applied when the FortiGate unit is running in VDOM mode. Only one vdom can be specified. If you want to inherit the vdom configuration of the provider, please do not set this parameter.
	Vdomparam pulumi.StringPtrInput
	// Zone view (public to serve public clients, shadow to serve internal clients). Valid values: `shadow`, `public`.
	View pulumi.StringPtrInput
}

func (SystemDnsDatabaseState) ElementType() reflect.Type {
	return reflect.TypeOf((*systemDnsDatabaseState)(nil)).Elem()
}

type systemDnsDatabaseArgs struct {
	// DNS zone transfer IP address list.
	AllowTransfer *string `pulumi:"allowTransfer"`
	// Enable/disable authoritative zone. Valid values: `enable`, `disable`.
	Authoritative string `pulumi:"authoritative"`
	// Email address of the administrator for this zone.
	// You can specify only the username (e.g. admin) or full email address (e.g. admin@test.com)
	// When using a simple username, the domain of the email will be this zone.
	Contact *string `pulumi:"contact"`
	// DNS entry. The structure of `dnsEntry` block is documented below.
	DnsEntries []SystemDnsDatabaseDnsEntry `pulumi:"dnsEntries"`
	// Domain name.
	Domain string `pulumi:"domain"`
	// true or false, set this parameter to true when using dynamic forEach + toset to configure and sort sub-tables, please do not set this parameter when configuring static sub-tables.
	DynamicSortSubtable *string `pulumi:"dynamicSortSubtable"`
	// DNS zone forwarder IP address list.
	Forwarder *string `pulumi:"forwarder"`
	// IP address of master DNS server. Entries in this master DNS server and imported into the DNS zone.
	IpMaster *string `pulumi:"ipMaster"`
	// IP address of primary DNS server. Entries in this primary DNS server and imported into the DNS zone.
	IpPrimary *string `pulumi:"ipPrimary"`
	// Zone name.
	Name *string `pulumi:"name"`
	// Domain name of the default DNS server for this zone.
	PrimaryName *string `pulumi:"primaryName"`
	// Maximum number of resource records (10 - 65536, 0 means infinite).
	RrMax *int `pulumi:"rrMax"`
	// Source IP for forwarding to DNS server.
	SourceIp *string `pulumi:"sourceIp"`
	// Enable/disable resource record status. Valid values: `enable`, `disable`.
	Status *string `pulumi:"status"`
	// Time-to-live for this entry (0 to 2147483647 sec, default = 0).
	Ttl int `pulumi:"ttl"`
	// Resource record type. Valid values: `A`, `NS`, `CNAME`, `MX`, `AAAA`, `PTR`, `PTR_V6`.
	Type string `pulumi:"type"`
	// Specifies the vdom to which the resource will be applied when the FortiGate unit is running in VDOM mode. Only one vdom can be specified. If you want to inherit the vdom configuration of the provider, please do not set this parameter.
	Vdomparam *string `pulumi:"vdomparam"`
	// Zone view (public to serve public clients, shadow to serve internal clients). Valid values: `shadow`, `public`.
	View string `pulumi:"view"`
}

// The set of arguments for constructing a SystemDnsDatabase resource.
type SystemDnsDatabaseArgs struct {
	// DNS zone transfer IP address list.
	AllowTransfer pulumi.StringPtrInput
	// Enable/disable authoritative zone. Valid values: `enable`, `disable`.
	Authoritative pulumi.StringInput
	// Email address of the administrator for this zone.
	// You can specify only the username (e.g. admin) or full email address (e.g. admin@test.com)
	// When using a simple username, the domain of the email will be this zone.
	Contact pulumi.StringPtrInput
	// DNS entry. The structure of `dnsEntry` block is documented below.
	DnsEntries SystemDnsDatabaseDnsEntryArrayInput
	// Domain name.
	Domain pulumi.StringInput
	// true or false, set this parameter to true when using dynamic forEach + toset to configure and sort sub-tables, please do not set this parameter when configuring static sub-tables.
	DynamicSortSubtable pulumi.StringPtrInput
	// DNS zone forwarder IP address list.
	Forwarder pulumi.StringPtrInput
	// IP address of master DNS server. Entries in this master DNS server and imported into the DNS zone.
	IpMaster pulumi.StringPtrInput
	// IP address of primary DNS server. Entries in this primary DNS server and imported into the DNS zone.
	IpPrimary pulumi.StringPtrInput
	// Zone name.
	Name pulumi.StringPtrInput
	// Domain name of the default DNS server for this zone.
	PrimaryName pulumi.StringPtrInput
	// Maximum number of resource records (10 - 65536, 0 means infinite).
	RrMax pulumi.IntPtrInput
	// Source IP for forwarding to DNS server.
	SourceIp pulumi.StringPtrInput
	// Enable/disable resource record status. Valid values: `enable`, `disable`.
	Status pulumi.StringPtrInput
	// Time-to-live for this entry (0 to 2147483647 sec, default = 0).
	Ttl pulumi.IntInput
	// Resource record type. Valid values: `A`, `NS`, `CNAME`, `MX`, `AAAA`, `PTR`, `PTR_V6`.
	Type pulumi.StringInput
	// Specifies the vdom to which the resource will be applied when the FortiGate unit is running in VDOM mode. Only one vdom can be specified. If you want to inherit the vdom configuration of the provider, please do not set this parameter.
	Vdomparam pulumi.StringPtrInput
	// Zone view (public to serve public clients, shadow to serve internal clients). Valid values: `shadow`, `public`.
	View pulumi.StringInput
}

func (SystemDnsDatabaseArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*systemDnsDatabaseArgs)(nil)).Elem()
}

type SystemDnsDatabaseInput interface {
	pulumi.Input

	ToSystemDnsDatabaseOutput() SystemDnsDatabaseOutput
	ToSystemDnsDatabaseOutputWithContext(ctx context.Context) SystemDnsDatabaseOutput
}

func (*SystemDnsDatabase) ElementType() reflect.Type {
	return reflect.TypeOf((**SystemDnsDatabase)(nil)).Elem()
}

func (i *SystemDnsDatabase) ToSystemDnsDatabaseOutput() SystemDnsDatabaseOutput {
	return i.ToSystemDnsDatabaseOutputWithContext(context.Background())
}

func (i *SystemDnsDatabase) ToSystemDnsDatabaseOutputWithContext(ctx context.Context) SystemDnsDatabaseOutput {
	return pulumi.ToOutputWithContext(ctx, i).(SystemDnsDatabaseOutput)
}

// SystemDnsDatabaseArrayInput is an input type that accepts SystemDnsDatabaseArray and SystemDnsDatabaseArrayOutput values.
// You can construct a concrete instance of `SystemDnsDatabaseArrayInput` via:
//
//          SystemDnsDatabaseArray{ SystemDnsDatabaseArgs{...} }
type SystemDnsDatabaseArrayInput interface {
	pulumi.Input

	ToSystemDnsDatabaseArrayOutput() SystemDnsDatabaseArrayOutput
	ToSystemDnsDatabaseArrayOutputWithContext(context.Context) SystemDnsDatabaseArrayOutput
}

type SystemDnsDatabaseArray []SystemDnsDatabaseInput

func (SystemDnsDatabaseArray) ElementType() reflect.Type {
	return reflect.TypeOf((*[]*SystemDnsDatabase)(nil)).Elem()
}

func (i SystemDnsDatabaseArray) ToSystemDnsDatabaseArrayOutput() SystemDnsDatabaseArrayOutput {
	return i.ToSystemDnsDatabaseArrayOutputWithContext(context.Background())
}

func (i SystemDnsDatabaseArray) ToSystemDnsDatabaseArrayOutputWithContext(ctx context.Context) SystemDnsDatabaseArrayOutput {
	return pulumi.ToOutputWithContext(ctx, i).(SystemDnsDatabaseArrayOutput)
}

// SystemDnsDatabaseMapInput is an input type that accepts SystemDnsDatabaseMap and SystemDnsDatabaseMapOutput values.
// You can construct a concrete instance of `SystemDnsDatabaseMapInput` via:
//
//          SystemDnsDatabaseMap{ "key": SystemDnsDatabaseArgs{...} }
type SystemDnsDatabaseMapInput interface {
	pulumi.Input

	ToSystemDnsDatabaseMapOutput() SystemDnsDatabaseMapOutput
	ToSystemDnsDatabaseMapOutputWithContext(context.Context) SystemDnsDatabaseMapOutput
}

type SystemDnsDatabaseMap map[string]SystemDnsDatabaseInput

func (SystemDnsDatabaseMap) ElementType() reflect.Type {
	return reflect.TypeOf((*map[string]*SystemDnsDatabase)(nil)).Elem()
}

func (i SystemDnsDatabaseMap) ToSystemDnsDatabaseMapOutput() SystemDnsDatabaseMapOutput {
	return i.ToSystemDnsDatabaseMapOutputWithContext(context.Background())
}

func (i SystemDnsDatabaseMap) ToSystemDnsDatabaseMapOutputWithContext(ctx context.Context) SystemDnsDatabaseMapOutput {
	return pulumi.ToOutputWithContext(ctx, i).(SystemDnsDatabaseMapOutput)
}

type SystemDnsDatabaseOutput struct{ *pulumi.OutputState }

func (SystemDnsDatabaseOutput) ElementType() reflect.Type {
	return reflect.TypeOf((**SystemDnsDatabase)(nil)).Elem()
}

func (o SystemDnsDatabaseOutput) ToSystemDnsDatabaseOutput() SystemDnsDatabaseOutput {
	return o
}

func (o SystemDnsDatabaseOutput) ToSystemDnsDatabaseOutputWithContext(ctx context.Context) SystemDnsDatabaseOutput {
	return o
}

type SystemDnsDatabaseArrayOutput struct{ *pulumi.OutputState }

func (SystemDnsDatabaseArrayOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*[]*SystemDnsDatabase)(nil)).Elem()
}

func (o SystemDnsDatabaseArrayOutput) ToSystemDnsDatabaseArrayOutput() SystemDnsDatabaseArrayOutput {
	return o
}

func (o SystemDnsDatabaseArrayOutput) ToSystemDnsDatabaseArrayOutputWithContext(ctx context.Context) SystemDnsDatabaseArrayOutput {
	return o
}

func (o SystemDnsDatabaseArrayOutput) Index(i pulumi.IntInput) SystemDnsDatabaseOutput {
	return pulumi.All(o, i).ApplyT(func(vs []interface{}) *SystemDnsDatabase {
		return vs[0].([]*SystemDnsDatabase)[vs[1].(int)]
	}).(SystemDnsDatabaseOutput)
}

type SystemDnsDatabaseMapOutput struct{ *pulumi.OutputState }

func (SystemDnsDatabaseMapOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*map[string]*SystemDnsDatabase)(nil)).Elem()
}

func (o SystemDnsDatabaseMapOutput) ToSystemDnsDatabaseMapOutput() SystemDnsDatabaseMapOutput {
	return o
}

func (o SystemDnsDatabaseMapOutput) ToSystemDnsDatabaseMapOutputWithContext(ctx context.Context) SystemDnsDatabaseMapOutput {
	return o
}

func (o SystemDnsDatabaseMapOutput) MapIndex(k pulumi.StringInput) SystemDnsDatabaseOutput {
	return pulumi.All(o, k).ApplyT(func(vs []interface{}) *SystemDnsDatabase {
		return vs[0].(map[string]*SystemDnsDatabase)[vs[1].(string)]
	}).(SystemDnsDatabaseOutput)
}

func init() {
	pulumi.RegisterInputType(reflect.TypeOf((*SystemDnsDatabaseInput)(nil)).Elem(), &SystemDnsDatabase{})
	pulumi.RegisterInputType(reflect.TypeOf((*SystemDnsDatabaseArrayInput)(nil)).Elem(), SystemDnsDatabaseArray{})
	pulumi.RegisterInputType(reflect.TypeOf((*SystemDnsDatabaseMapInput)(nil)).Elem(), SystemDnsDatabaseMap{})
	pulumi.RegisterOutputType(SystemDnsDatabaseOutput{})
	pulumi.RegisterOutputType(SystemDnsDatabaseArrayOutput{})
	pulumi.RegisterOutputType(SystemDnsDatabaseMapOutput{})
}
