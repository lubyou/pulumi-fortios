// *** WARNING: this file was generated by the Pulumi Terraform Bridge (tfgen) Tool. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

package fortios

import (
	"context"
	"reflect"

	"github.com/pulumi/pulumi/sdk/v3/go/pulumi"
)

// Configure MS Exchange server entries. Applies to FortiOS Version `>= 6.2.4`.
//
// ## Import
//
// User Exchange can be imported using any of these accepted formats
//
// ```sh
//  $ pulumi import fortios:index/userExchange:UserExchange labelname {{name}}
// ```
//
//  If you do not want to import arguments of block$ export "FORTIOS_IMPORT_TABLE"="false"
//
// ```sh
//  $ pulumi import fortios:index/userExchange:UserExchange labelname {{name}}
// ```
//
//  $ unset "FORTIOS_IMPORT_TABLE"
type UserExchange struct {
	pulumi.CustomResourceState

	// Authentication security level used for the RPC protocol layer. Valid values: `connect`, `call`, `packet`, `integrity`, `privacy`.
	AuthLevel pulumi.StringOutput `pulumi:"authLevel"`
	// Authentication security type used for the RPC protocol layer. Valid values: `spnego`, `ntlm`, `kerberos`.
	AuthType pulumi.StringOutput `pulumi:"authType"`
	// Enable/disable automatic discovery of KDC IP addresses. Valid values: `enable`, `disable`.
	AutoDiscoverKdc pulumi.StringOutput `pulumi:"autoDiscoverKdc"`
	// Connection protocol used to connect to MS Exchange service. Valid values: `rpc-over-tcp`, `rpc-over-http`, `rpc-over-https`.
	ConnectProtocol pulumi.StringOutput `pulumi:"connectProtocol"`
	// MS Exchange server fully qualified domain name.
	DomainName pulumi.StringOutput `pulumi:"domainName"`
	// true or false, set this parameter to true when using dynamic forEach + toset to configure and sort sub-tables, please do not set this parameter when configuring static sub-tables.
	DynamicSortSubtable pulumi.StringPtrOutput `pulumi:"dynamicSortSubtable"`
	// Authentication security type used for the HTTP transport. Valid values: `basic`, `ntlm`.
	HttpAuthType pulumi.StringOutput `pulumi:"httpAuthType"`
	// Server IPv4 address.
	Ip pulumi.StringOutput `pulumi:"ip"`
	// KDC IPv4 addresses for Kerberos authentication. The structure of `kdcIp` block is documented below.
	KdcIps UserExchangeKdcIpArrayOutput `pulumi:"kdcIps"`
	// MS Exchange server entry name.
	Name pulumi.StringOutput `pulumi:"name"`
	// Password for the specified username.
	Password pulumi.StringPtrOutput `pulumi:"password"`
	// MS Exchange server hostname.
	ServerName pulumi.StringOutput `pulumi:"serverName"`
	// Minimum SSL/TLS protocol version for HTTPS transport (default is to follow system global setting). Valid values: `default`, `SSLv3`, `TLSv1`, `TLSv1-1`, `TLSv1-2`.
	SslMinProtoVersion pulumi.StringOutput `pulumi:"sslMinProtoVersion"`
	// User name used to sign in to the server. Must have proper permissions for service.
	Username pulumi.StringOutput `pulumi:"username"`
	// Specifies the vdom to which the resource will be applied when the FortiGate unit is running in VDOM mode. Only one vdom can be specified. If you want to inherit the vdom configuration of the provider, please do not set this parameter.
	Vdomparam pulumi.StringPtrOutput `pulumi:"vdomparam"`
}

// NewUserExchange registers a new resource with the given unique name, arguments, and options.
func NewUserExchange(ctx *pulumi.Context,
	name string, args *UserExchangeArgs, opts ...pulumi.ResourceOption) (*UserExchange, error) {
	if args == nil {
		args = &UserExchangeArgs{}
	}

	opts = pkgResourceDefaultOpts(opts)
	var resource UserExchange
	err := ctx.RegisterResource("fortios:index/userExchange:UserExchange", name, args, &resource, opts...)
	if err != nil {
		return nil, err
	}
	return &resource, nil
}

// GetUserExchange gets an existing UserExchange resource's state with the given name, ID, and optional
// state properties that are used to uniquely qualify the lookup (nil if not required).
func GetUserExchange(ctx *pulumi.Context,
	name string, id pulumi.IDInput, state *UserExchangeState, opts ...pulumi.ResourceOption) (*UserExchange, error) {
	var resource UserExchange
	err := ctx.ReadResource("fortios:index/userExchange:UserExchange", name, id, state, &resource, opts...)
	if err != nil {
		return nil, err
	}
	return &resource, nil
}

// Input properties used for looking up and filtering UserExchange resources.
type userExchangeState struct {
	// Authentication security level used for the RPC protocol layer. Valid values: `connect`, `call`, `packet`, `integrity`, `privacy`.
	AuthLevel *string `pulumi:"authLevel"`
	// Authentication security type used for the RPC protocol layer. Valid values: `spnego`, `ntlm`, `kerberos`.
	AuthType *string `pulumi:"authType"`
	// Enable/disable automatic discovery of KDC IP addresses. Valid values: `enable`, `disable`.
	AutoDiscoverKdc *string `pulumi:"autoDiscoverKdc"`
	// Connection protocol used to connect to MS Exchange service. Valid values: `rpc-over-tcp`, `rpc-over-http`, `rpc-over-https`.
	ConnectProtocol *string `pulumi:"connectProtocol"`
	// MS Exchange server fully qualified domain name.
	DomainName *string `pulumi:"domainName"`
	// true or false, set this parameter to true when using dynamic forEach + toset to configure and sort sub-tables, please do not set this parameter when configuring static sub-tables.
	DynamicSortSubtable *string `pulumi:"dynamicSortSubtable"`
	// Authentication security type used for the HTTP transport. Valid values: `basic`, `ntlm`.
	HttpAuthType *string `pulumi:"httpAuthType"`
	// Server IPv4 address.
	Ip *string `pulumi:"ip"`
	// KDC IPv4 addresses for Kerberos authentication. The structure of `kdcIp` block is documented below.
	KdcIps []UserExchangeKdcIp `pulumi:"kdcIps"`
	// MS Exchange server entry name.
	Name *string `pulumi:"name"`
	// Password for the specified username.
	Password *string `pulumi:"password"`
	// MS Exchange server hostname.
	ServerName *string `pulumi:"serverName"`
	// Minimum SSL/TLS protocol version for HTTPS transport (default is to follow system global setting). Valid values: `default`, `SSLv3`, `TLSv1`, `TLSv1-1`, `TLSv1-2`.
	SslMinProtoVersion *string `pulumi:"sslMinProtoVersion"`
	// User name used to sign in to the server. Must have proper permissions for service.
	Username *string `pulumi:"username"`
	// Specifies the vdom to which the resource will be applied when the FortiGate unit is running in VDOM mode. Only one vdom can be specified. If you want to inherit the vdom configuration of the provider, please do not set this parameter.
	Vdomparam *string `pulumi:"vdomparam"`
}

type UserExchangeState struct {
	// Authentication security level used for the RPC protocol layer. Valid values: `connect`, `call`, `packet`, `integrity`, `privacy`.
	AuthLevel pulumi.StringPtrInput
	// Authentication security type used for the RPC protocol layer. Valid values: `spnego`, `ntlm`, `kerberos`.
	AuthType pulumi.StringPtrInput
	// Enable/disable automatic discovery of KDC IP addresses. Valid values: `enable`, `disable`.
	AutoDiscoverKdc pulumi.StringPtrInput
	// Connection protocol used to connect to MS Exchange service. Valid values: `rpc-over-tcp`, `rpc-over-http`, `rpc-over-https`.
	ConnectProtocol pulumi.StringPtrInput
	// MS Exchange server fully qualified domain name.
	DomainName pulumi.StringPtrInput
	// true or false, set this parameter to true when using dynamic forEach + toset to configure and sort sub-tables, please do not set this parameter when configuring static sub-tables.
	DynamicSortSubtable pulumi.StringPtrInput
	// Authentication security type used for the HTTP transport. Valid values: `basic`, `ntlm`.
	HttpAuthType pulumi.StringPtrInput
	// Server IPv4 address.
	Ip pulumi.StringPtrInput
	// KDC IPv4 addresses for Kerberos authentication. The structure of `kdcIp` block is documented below.
	KdcIps UserExchangeKdcIpArrayInput
	// MS Exchange server entry name.
	Name pulumi.StringPtrInput
	// Password for the specified username.
	Password pulumi.StringPtrInput
	// MS Exchange server hostname.
	ServerName pulumi.StringPtrInput
	// Minimum SSL/TLS protocol version for HTTPS transport (default is to follow system global setting). Valid values: `default`, `SSLv3`, `TLSv1`, `TLSv1-1`, `TLSv1-2`.
	SslMinProtoVersion pulumi.StringPtrInput
	// User name used to sign in to the server. Must have proper permissions for service.
	Username pulumi.StringPtrInput
	// Specifies the vdom to which the resource will be applied when the FortiGate unit is running in VDOM mode. Only one vdom can be specified. If you want to inherit the vdom configuration of the provider, please do not set this parameter.
	Vdomparam pulumi.StringPtrInput
}

func (UserExchangeState) ElementType() reflect.Type {
	return reflect.TypeOf((*userExchangeState)(nil)).Elem()
}

type userExchangeArgs struct {
	// Authentication security level used for the RPC protocol layer. Valid values: `connect`, `call`, `packet`, `integrity`, `privacy`.
	AuthLevel *string `pulumi:"authLevel"`
	// Authentication security type used for the RPC protocol layer. Valid values: `spnego`, `ntlm`, `kerberos`.
	AuthType *string `pulumi:"authType"`
	// Enable/disable automatic discovery of KDC IP addresses. Valid values: `enable`, `disable`.
	AutoDiscoverKdc *string `pulumi:"autoDiscoverKdc"`
	// Connection protocol used to connect to MS Exchange service. Valid values: `rpc-over-tcp`, `rpc-over-http`, `rpc-over-https`.
	ConnectProtocol *string `pulumi:"connectProtocol"`
	// MS Exchange server fully qualified domain name.
	DomainName *string `pulumi:"domainName"`
	// true or false, set this parameter to true when using dynamic forEach + toset to configure and sort sub-tables, please do not set this parameter when configuring static sub-tables.
	DynamicSortSubtable *string `pulumi:"dynamicSortSubtable"`
	// Authentication security type used for the HTTP transport. Valid values: `basic`, `ntlm`.
	HttpAuthType *string `pulumi:"httpAuthType"`
	// Server IPv4 address.
	Ip *string `pulumi:"ip"`
	// KDC IPv4 addresses for Kerberos authentication. The structure of `kdcIp` block is documented below.
	KdcIps []UserExchangeKdcIp `pulumi:"kdcIps"`
	// MS Exchange server entry name.
	Name *string `pulumi:"name"`
	// Password for the specified username.
	Password *string `pulumi:"password"`
	// MS Exchange server hostname.
	ServerName *string `pulumi:"serverName"`
	// Minimum SSL/TLS protocol version for HTTPS transport (default is to follow system global setting). Valid values: `default`, `SSLv3`, `TLSv1`, `TLSv1-1`, `TLSv1-2`.
	SslMinProtoVersion *string `pulumi:"sslMinProtoVersion"`
	// User name used to sign in to the server. Must have proper permissions for service.
	Username *string `pulumi:"username"`
	// Specifies the vdom to which the resource will be applied when the FortiGate unit is running in VDOM mode. Only one vdom can be specified. If you want to inherit the vdom configuration of the provider, please do not set this parameter.
	Vdomparam *string `pulumi:"vdomparam"`
}

// The set of arguments for constructing a UserExchange resource.
type UserExchangeArgs struct {
	// Authentication security level used for the RPC protocol layer. Valid values: `connect`, `call`, `packet`, `integrity`, `privacy`.
	AuthLevel pulumi.StringPtrInput
	// Authentication security type used for the RPC protocol layer. Valid values: `spnego`, `ntlm`, `kerberos`.
	AuthType pulumi.StringPtrInput
	// Enable/disable automatic discovery of KDC IP addresses. Valid values: `enable`, `disable`.
	AutoDiscoverKdc pulumi.StringPtrInput
	// Connection protocol used to connect to MS Exchange service. Valid values: `rpc-over-tcp`, `rpc-over-http`, `rpc-over-https`.
	ConnectProtocol pulumi.StringPtrInput
	// MS Exchange server fully qualified domain name.
	DomainName pulumi.StringPtrInput
	// true or false, set this parameter to true when using dynamic forEach + toset to configure and sort sub-tables, please do not set this parameter when configuring static sub-tables.
	DynamicSortSubtable pulumi.StringPtrInput
	// Authentication security type used for the HTTP transport. Valid values: `basic`, `ntlm`.
	HttpAuthType pulumi.StringPtrInput
	// Server IPv4 address.
	Ip pulumi.StringPtrInput
	// KDC IPv4 addresses for Kerberos authentication. The structure of `kdcIp` block is documented below.
	KdcIps UserExchangeKdcIpArrayInput
	// MS Exchange server entry name.
	Name pulumi.StringPtrInput
	// Password for the specified username.
	Password pulumi.StringPtrInput
	// MS Exchange server hostname.
	ServerName pulumi.StringPtrInput
	// Minimum SSL/TLS protocol version for HTTPS transport (default is to follow system global setting). Valid values: `default`, `SSLv3`, `TLSv1`, `TLSv1-1`, `TLSv1-2`.
	SslMinProtoVersion pulumi.StringPtrInput
	// User name used to sign in to the server. Must have proper permissions for service.
	Username pulumi.StringPtrInput
	// Specifies the vdom to which the resource will be applied when the FortiGate unit is running in VDOM mode. Only one vdom can be specified. If you want to inherit the vdom configuration of the provider, please do not set this parameter.
	Vdomparam pulumi.StringPtrInput
}

func (UserExchangeArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*userExchangeArgs)(nil)).Elem()
}

type UserExchangeInput interface {
	pulumi.Input

	ToUserExchangeOutput() UserExchangeOutput
	ToUserExchangeOutputWithContext(ctx context.Context) UserExchangeOutput
}

func (*UserExchange) ElementType() reflect.Type {
	return reflect.TypeOf((**UserExchange)(nil)).Elem()
}

func (i *UserExchange) ToUserExchangeOutput() UserExchangeOutput {
	return i.ToUserExchangeOutputWithContext(context.Background())
}

func (i *UserExchange) ToUserExchangeOutputWithContext(ctx context.Context) UserExchangeOutput {
	return pulumi.ToOutputWithContext(ctx, i).(UserExchangeOutput)
}

// UserExchangeArrayInput is an input type that accepts UserExchangeArray and UserExchangeArrayOutput values.
// You can construct a concrete instance of `UserExchangeArrayInput` via:
//
//          UserExchangeArray{ UserExchangeArgs{...} }
type UserExchangeArrayInput interface {
	pulumi.Input

	ToUserExchangeArrayOutput() UserExchangeArrayOutput
	ToUserExchangeArrayOutputWithContext(context.Context) UserExchangeArrayOutput
}

type UserExchangeArray []UserExchangeInput

func (UserExchangeArray) ElementType() reflect.Type {
	return reflect.TypeOf((*[]*UserExchange)(nil)).Elem()
}

func (i UserExchangeArray) ToUserExchangeArrayOutput() UserExchangeArrayOutput {
	return i.ToUserExchangeArrayOutputWithContext(context.Background())
}

func (i UserExchangeArray) ToUserExchangeArrayOutputWithContext(ctx context.Context) UserExchangeArrayOutput {
	return pulumi.ToOutputWithContext(ctx, i).(UserExchangeArrayOutput)
}

// UserExchangeMapInput is an input type that accepts UserExchangeMap and UserExchangeMapOutput values.
// You can construct a concrete instance of `UserExchangeMapInput` via:
//
//          UserExchangeMap{ "key": UserExchangeArgs{...} }
type UserExchangeMapInput interface {
	pulumi.Input

	ToUserExchangeMapOutput() UserExchangeMapOutput
	ToUserExchangeMapOutputWithContext(context.Context) UserExchangeMapOutput
}

type UserExchangeMap map[string]UserExchangeInput

func (UserExchangeMap) ElementType() reflect.Type {
	return reflect.TypeOf((*map[string]*UserExchange)(nil)).Elem()
}

func (i UserExchangeMap) ToUserExchangeMapOutput() UserExchangeMapOutput {
	return i.ToUserExchangeMapOutputWithContext(context.Background())
}

func (i UserExchangeMap) ToUserExchangeMapOutputWithContext(ctx context.Context) UserExchangeMapOutput {
	return pulumi.ToOutputWithContext(ctx, i).(UserExchangeMapOutput)
}

type UserExchangeOutput struct{ *pulumi.OutputState }

func (UserExchangeOutput) ElementType() reflect.Type {
	return reflect.TypeOf((**UserExchange)(nil)).Elem()
}

func (o UserExchangeOutput) ToUserExchangeOutput() UserExchangeOutput {
	return o
}

func (o UserExchangeOutput) ToUserExchangeOutputWithContext(ctx context.Context) UserExchangeOutput {
	return o
}

type UserExchangeArrayOutput struct{ *pulumi.OutputState }

func (UserExchangeArrayOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*[]*UserExchange)(nil)).Elem()
}

func (o UserExchangeArrayOutput) ToUserExchangeArrayOutput() UserExchangeArrayOutput {
	return o
}

func (o UserExchangeArrayOutput) ToUserExchangeArrayOutputWithContext(ctx context.Context) UserExchangeArrayOutput {
	return o
}

func (o UserExchangeArrayOutput) Index(i pulumi.IntInput) UserExchangeOutput {
	return pulumi.All(o, i).ApplyT(func(vs []interface{}) *UserExchange {
		return vs[0].([]*UserExchange)[vs[1].(int)]
	}).(UserExchangeOutput)
}

type UserExchangeMapOutput struct{ *pulumi.OutputState }

func (UserExchangeMapOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*map[string]*UserExchange)(nil)).Elem()
}

func (o UserExchangeMapOutput) ToUserExchangeMapOutput() UserExchangeMapOutput {
	return o
}

func (o UserExchangeMapOutput) ToUserExchangeMapOutputWithContext(ctx context.Context) UserExchangeMapOutput {
	return o
}

func (o UserExchangeMapOutput) MapIndex(k pulumi.StringInput) UserExchangeOutput {
	return pulumi.All(o, k).ApplyT(func(vs []interface{}) *UserExchange {
		return vs[0].(map[string]*UserExchange)[vs[1].(string)]
	}).(UserExchangeOutput)
}

func init() {
	pulumi.RegisterInputType(reflect.TypeOf((*UserExchangeInput)(nil)).Elem(), &UserExchange{})
	pulumi.RegisterInputType(reflect.TypeOf((*UserExchangeArrayInput)(nil)).Elem(), UserExchangeArray{})
	pulumi.RegisterInputType(reflect.TypeOf((*UserExchangeMapInput)(nil)).Elem(), UserExchangeMap{})
	pulumi.RegisterOutputType(UserExchangeOutput{})
	pulumi.RegisterOutputType(UserExchangeArrayOutput{})
	pulumi.RegisterOutputType(UserExchangeMapOutput{})
}
