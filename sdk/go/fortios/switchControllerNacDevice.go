// Code generated by the Pulumi Terraform Bridge (tfgen) Tool DO NOT EDIT.
// *** WARNING: Do not edit by hand unless you're certain you know what you are doing! ***

package fortios

import (
	"context"
	"reflect"

	"github.com/pulumi/pulumi/sdk/v3/go/pulumi"
)

type SwitchControllerNacDevice struct {
	pulumi.CustomResourceState

	Description      pulumi.StringOutput    `pulumi:"description"`
	Fosid            pulumi.IntOutput       `pulumi:"fosid"`
	LastKnownPort    pulumi.StringOutput    `pulumi:"lastKnownPort"`
	LastKnownSwitch  pulumi.StringOutput    `pulumi:"lastKnownSwitch"`
	LastSeen         pulumi.IntOutput       `pulumi:"lastSeen"`
	Mac              pulumi.StringOutput    `pulumi:"mac"`
	MacPolicy        pulumi.StringOutput    `pulumi:"macPolicy"`
	MatchedNacPolicy pulumi.StringOutput    `pulumi:"matchedNacPolicy"`
	PortPolicy       pulumi.StringOutput    `pulumi:"portPolicy"`
	Status           pulumi.StringOutput    `pulumi:"status"`
	Vdomparam        pulumi.StringPtrOutput `pulumi:"vdomparam"`
}

// NewSwitchControllerNacDevice registers a new resource with the given unique name, arguments, and options.
func NewSwitchControllerNacDevice(ctx *pulumi.Context,
	name string, args *SwitchControllerNacDeviceArgs, opts ...pulumi.ResourceOption) (*SwitchControllerNacDevice, error) {
	if args == nil {
		args = &SwitchControllerNacDeviceArgs{}
	}

	opts = pkgResourceDefaultOpts(opts)
	var resource SwitchControllerNacDevice
	err := ctx.RegisterResource("fortios:index/switchControllerNacDevice:SwitchControllerNacDevice", name, args, &resource, opts...)
	if err != nil {
		return nil, err
	}
	return &resource, nil
}

// GetSwitchControllerNacDevice gets an existing SwitchControllerNacDevice resource's state with the given name, ID, and optional
// state properties that are used to uniquely qualify the lookup (nil if not required).
func GetSwitchControllerNacDevice(ctx *pulumi.Context,
	name string, id pulumi.IDInput, state *SwitchControllerNacDeviceState, opts ...pulumi.ResourceOption) (*SwitchControllerNacDevice, error) {
	var resource SwitchControllerNacDevice
	err := ctx.ReadResource("fortios:index/switchControllerNacDevice:SwitchControllerNacDevice", name, id, state, &resource, opts...)
	if err != nil {
		return nil, err
	}
	return &resource, nil
}

// Input properties used for looking up and filtering SwitchControllerNacDevice resources.
type switchControllerNacDeviceState struct {
	Description      *string `pulumi:"description"`
	Fosid            *int    `pulumi:"fosid"`
	LastKnownPort    *string `pulumi:"lastKnownPort"`
	LastKnownSwitch  *string `pulumi:"lastKnownSwitch"`
	LastSeen         *int    `pulumi:"lastSeen"`
	Mac              *string `pulumi:"mac"`
	MacPolicy        *string `pulumi:"macPolicy"`
	MatchedNacPolicy *string `pulumi:"matchedNacPolicy"`
	PortPolicy       *string `pulumi:"portPolicy"`
	Status           *string `pulumi:"status"`
	Vdomparam        *string `pulumi:"vdomparam"`
}

type SwitchControllerNacDeviceState struct {
	Description      pulumi.StringPtrInput
	Fosid            pulumi.IntPtrInput
	LastKnownPort    pulumi.StringPtrInput
	LastKnownSwitch  pulumi.StringPtrInput
	LastSeen         pulumi.IntPtrInput
	Mac              pulumi.StringPtrInput
	MacPolicy        pulumi.StringPtrInput
	MatchedNacPolicy pulumi.StringPtrInput
	PortPolicy       pulumi.StringPtrInput
	Status           pulumi.StringPtrInput
	Vdomparam        pulumi.StringPtrInput
}

func (SwitchControllerNacDeviceState) ElementType() reflect.Type {
	return reflect.TypeOf((*switchControllerNacDeviceState)(nil)).Elem()
}

type switchControllerNacDeviceArgs struct {
	Description      *string `pulumi:"description"`
	Fosid            *int    `pulumi:"fosid"`
	LastKnownPort    *string `pulumi:"lastKnownPort"`
	LastKnownSwitch  *string `pulumi:"lastKnownSwitch"`
	LastSeen         *int    `pulumi:"lastSeen"`
	Mac              *string `pulumi:"mac"`
	MacPolicy        *string `pulumi:"macPolicy"`
	MatchedNacPolicy *string `pulumi:"matchedNacPolicy"`
	PortPolicy       *string `pulumi:"portPolicy"`
	Status           *string `pulumi:"status"`
	Vdomparam        *string `pulumi:"vdomparam"`
}

// The set of arguments for constructing a SwitchControllerNacDevice resource.
type SwitchControllerNacDeviceArgs struct {
	Description      pulumi.StringPtrInput
	Fosid            pulumi.IntPtrInput
	LastKnownPort    pulumi.StringPtrInput
	LastKnownSwitch  pulumi.StringPtrInput
	LastSeen         pulumi.IntPtrInput
	Mac              pulumi.StringPtrInput
	MacPolicy        pulumi.StringPtrInput
	MatchedNacPolicy pulumi.StringPtrInput
	PortPolicy       pulumi.StringPtrInput
	Status           pulumi.StringPtrInput
	Vdomparam        pulumi.StringPtrInput
}

func (SwitchControllerNacDeviceArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*switchControllerNacDeviceArgs)(nil)).Elem()
}

type SwitchControllerNacDeviceInput interface {
	pulumi.Input

	ToSwitchControllerNacDeviceOutput() SwitchControllerNacDeviceOutput
	ToSwitchControllerNacDeviceOutputWithContext(ctx context.Context) SwitchControllerNacDeviceOutput
}

func (*SwitchControllerNacDevice) ElementType() reflect.Type {
	return reflect.TypeOf((**SwitchControllerNacDevice)(nil)).Elem()
}

func (i *SwitchControllerNacDevice) ToSwitchControllerNacDeviceOutput() SwitchControllerNacDeviceOutput {
	return i.ToSwitchControllerNacDeviceOutputWithContext(context.Background())
}

func (i *SwitchControllerNacDevice) ToSwitchControllerNacDeviceOutputWithContext(ctx context.Context) SwitchControllerNacDeviceOutput {
	return pulumi.ToOutputWithContext(ctx, i).(SwitchControllerNacDeviceOutput)
}

// SwitchControllerNacDeviceArrayInput is an input type that accepts SwitchControllerNacDeviceArray and SwitchControllerNacDeviceArrayOutput values.
// You can construct a concrete instance of `SwitchControllerNacDeviceArrayInput` via:
//
//	SwitchControllerNacDeviceArray{ SwitchControllerNacDeviceArgs{...} }
type SwitchControllerNacDeviceArrayInput interface {
	pulumi.Input

	ToSwitchControllerNacDeviceArrayOutput() SwitchControllerNacDeviceArrayOutput
	ToSwitchControllerNacDeviceArrayOutputWithContext(context.Context) SwitchControllerNacDeviceArrayOutput
}

type SwitchControllerNacDeviceArray []SwitchControllerNacDeviceInput

func (SwitchControllerNacDeviceArray) ElementType() reflect.Type {
	return reflect.TypeOf((*[]*SwitchControllerNacDevice)(nil)).Elem()
}

func (i SwitchControllerNacDeviceArray) ToSwitchControllerNacDeviceArrayOutput() SwitchControllerNacDeviceArrayOutput {
	return i.ToSwitchControllerNacDeviceArrayOutputWithContext(context.Background())
}

func (i SwitchControllerNacDeviceArray) ToSwitchControllerNacDeviceArrayOutputWithContext(ctx context.Context) SwitchControllerNacDeviceArrayOutput {
	return pulumi.ToOutputWithContext(ctx, i).(SwitchControllerNacDeviceArrayOutput)
}

// SwitchControllerNacDeviceMapInput is an input type that accepts SwitchControllerNacDeviceMap and SwitchControllerNacDeviceMapOutput values.
// You can construct a concrete instance of `SwitchControllerNacDeviceMapInput` via:
//
//	SwitchControllerNacDeviceMap{ "key": SwitchControllerNacDeviceArgs{...} }
type SwitchControllerNacDeviceMapInput interface {
	pulumi.Input

	ToSwitchControllerNacDeviceMapOutput() SwitchControllerNacDeviceMapOutput
	ToSwitchControllerNacDeviceMapOutputWithContext(context.Context) SwitchControllerNacDeviceMapOutput
}

type SwitchControllerNacDeviceMap map[string]SwitchControllerNacDeviceInput

func (SwitchControllerNacDeviceMap) ElementType() reflect.Type {
	return reflect.TypeOf((*map[string]*SwitchControllerNacDevice)(nil)).Elem()
}

func (i SwitchControllerNacDeviceMap) ToSwitchControllerNacDeviceMapOutput() SwitchControllerNacDeviceMapOutput {
	return i.ToSwitchControllerNacDeviceMapOutputWithContext(context.Background())
}

func (i SwitchControllerNacDeviceMap) ToSwitchControllerNacDeviceMapOutputWithContext(ctx context.Context) SwitchControllerNacDeviceMapOutput {
	return pulumi.ToOutputWithContext(ctx, i).(SwitchControllerNacDeviceMapOutput)
}

type SwitchControllerNacDeviceOutput struct{ *pulumi.OutputState }

func (SwitchControllerNacDeviceOutput) ElementType() reflect.Type {
	return reflect.TypeOf((**SwitchControllerNacDevice)(nil)).Elem()
}

func (o SwitchControllerNacDeviceOutput) ToSwitchControllerNacDeviceOutput() SwitchControllerNacDeviceOutput {
	return o
}

func (o SwitchControllerNacDeviceOutput) ToSwitchControllerNacDeviceOutputWithContext(ctx context.Context) SwitchControllerNacDeviceOutput {
	return o
}

func (o SwitchControllerNacDeviceOutput) Description() pulumi.StringOutput {
	return o.ApplyT(func(v *SwitchControllerNacDevice) pulumi.StringOutput { return v.Description }).(pulumi.StringOutput)
}

func (o SwitchControllerNacDeviceOutput) Fosid() pulumi.IntOutput {
	return o.ApplyT(func(v *SwitchControllerNacDevice) pulumi.IntOutput { return v.Fosid }).(pulumi.IntOutput)
}

func (o SwitchControllerNacDeviceOutput) LastKnownPort() pulumi.StringOutput {
	return o.ApplyT(func(v *SwitchControllerNacDevice) pulumi.StringOutput { return v.LastKnownPort }).(pulumi.StringOutput)
}

func (o SwitchControllerNacDeviceOutput) LastKnownSwitch() pulumi.StringOutput {
	return o.ApplyT(func(v *SwitchControllerNacDevice) pulumi.StringOutput { return v.LastKnownSwitch }).(pulumi.StringOutput)
}

func (o SwitchControllerNacDeviceOutput) LastSeen() pulumi.IntOutput {
	return o.ApplyT(func(v *SwitchControllerNacDevice) pulumi.IntOutput { return v.LastSeen }).(pulumi.IntOutput)
}

func (o SwitchControllerNacDeviceOutput) Mac() pulumi.StringOutput {
	return o.ApplyT(func(v *SwitchControllerNacDevice) pulumi.StringOutput { return v.Mac }).(pulumi.StringOutput)
}

func (o SwitchControllerNacDeviceOutput) MacPolicy() pulumi.StringOutput {
	return o.ApplyT(func(v *SwitchControllerNacDevice) pulumi.StringOutput { return v.MacPolicy }).(pulumi.StringOutput)
}

func (o SwitchControllerNacDeviceOutput) MatchedNacPolicy() pulumi.StringOutput {
	return o.ApplyT(func(v *SwitchControllerNacDevice) pulumi.StringOutput { return v.MatchedNacPolicy }).(pulumi.StringOutput)
}

func (o SwitchControllerNacDeviceOutput) PortPolicy() pulumi.StringOutput {
	return o.ApplyT(func(v *SwitchControllerNacDevice) pulumi.StringOutput { return v.PortPolicy }).(pulumi.StringOutput)
}

func (o SwitchControllerNacDeviceOutput) Status() pulumi.StringOutput {
	return o.ApplyT(func(v *SwitchControllerNacDevice) pulumi.StringOutput { return v.Status }).(pulumi.StringOutput)
}

func (o SwitchControllerNacDeviceOutput) Vdomparam() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *SwitchControllerNacDevice) pulumi.StringPtrOutput { return v.Vdomparam }).(pulumi.StringPtrOutput)
}

type SwitchControllerNacDeviceArrayOutput struct{ *pulumi.OutputState }

func (SwitchControllerNacDeviceArrayOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*[]*SwitchControllerNacDevice)(nil)).Elem()
}

func (o SwitchControllerNacDeviceArrayOutput) ToSwitchControllerNacDeviceArrayOutput() SwitchControllerNacDeviceArrayOutput {
	return o
}

func (o SwitchControllerNacDeviceArrayOutput) ToSwitchControllerNacDeviceArrayOutputWithContext(ctx context.Context) SwitchControllerNacDeviceArrayOutput {
	return o
}

func (o SwitchControllerNacDeviceArrayOutput) Index(i pulumi.IntInput) SwitchControllerNacDeviceOutput {
	return pulumi.All(o, i).ApplyT(func(vs []interface{}) *SwitchControllerNacDevice {
		return vs[0].([]*SwitchControllerNacDevice)[vs[1].(int)]
	}).(SwitchControllerNacDeviceOutput)
}

type SwitchControllerNacDeviceMapOutput struct{ *pulumi.OutputState }

func (SwitchControllerNacDeviceMapOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*map[string]*SwitchControllerNacDevice)(nil)).Elem()
}

func (o SwitchControllerNacDeviceMapOutput) ToSwitchControllerNacDeviceMapOutput() SwitchControllerNacDeviceMapOutput {
	return o
}

func (o SwitchControllerNacDeviceMapOutput) ToSwitchControllerNacDeviceMapOutputWithContext(ctx context.Context) SwitchControllerNacDeviceMapOutput {
	return o
}

func (o SwitchControllerNacDeviceMapOutput) MapIndex(k pulumi.StringInput) SwitchControllerNacDeviceOutput {
	return pulumi.All(o, k).ApplyT(func(vs []interface{}) *SwitchControllerNacDevice {
		return vs[0].(map[string]*SwitchControllerNacDevice)[vs[1].(string)]
	}).(SwitchControllerNacDeviceOutput)
}

func init() {
	pulumi.RegisterInputType(reflect.TypeOf((*SwitchControllerNacDeviceInput)(nil)).Elem(), &SwitchControllerNacDevice{})
	pulumi.RegisterInputType(reflect.TypeOf((*SwitchControllerNacDeviceArrayInput)(nil)).Elem(), SwitchControllerNacDeviceArray{})
	pulumi.RegisterInputType(reflect.TypeOf((*SwitchControllerNacDeviceMapInput)(nil)).Elem(), SwitchControllerNacDeviceMap{})
	pulumi.RegisterOutputType(SwitchControllerNacDeviceOutput{})
	pulumi.RegisterOutputType(SwitchControllerNacDeviceArrayOutput{})
	pulumi.RegisterOutputType(SwitchControllerNacDeviceMapOutput{})
}
