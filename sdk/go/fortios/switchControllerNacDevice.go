// *** WARNING: this file was generated by the Pulumi Terraform Bridge (tfgen) Tool. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

package fortios

import (
	"context"
	"reflect"

	"github.com/pulumi/pulumi/sdk/v3/go/pulumi"
)

// Configure/list NAC devices learned on the managed FortiSwitch ports which matches NAC policy. Applies to FortiOS Version `>= 6.4.0`.
//
// ## Import
//
// SwitchController NacDevice can be imported using any of these accepted formats$ export "FORTIOS_IMPORT_TABLE"="true"
//
// ```sh
//  $ pulumi import fortios:index/switchControllerNacDevice:SwitchControllerNacDevice labelname {{fosid}}
// ```
//
//  $ unset "FORTIOS_IMPORT_TABLE"
type SwitchControllerNacDevice struct {
	pulumi.CustomResourceState

	// Description for the learned NAC device.
	Description pulumi.StringOutput `pulumi:"description"`
	// Device ID.
	Fosid pulumi.IntOutput `pulumi:"fosid"`
	// Managed FortiSwitch port where NAC device is last learned.
	LastKnownPort pulumi.StringOutput `pulumi:"lastKnownPort"`
	// Managed FortiSwitch where NAC device is last learned.
	LastKnownSwitch pulumi.StringOutput `pulumi:"lastKnownSwitch"`
	// Device last seen.
	LastSeen pulumi.IntOutput `pulumi:"lastSeen"`
	// MAC address of the learned NAC device.
	Mac pulumi.StringOutput `pulumi:"mac"`
	// MAC policy to be applied on this learned NAC device.
	MacPolicy pulumi.StringOutput `pulumi:"macPolicy"`
	// Matched NAC policy for the learned NAC device.
	MatchedNacPolicy pulumi.StringOutput `pulumi:"matchedNacPolicy"`
	// Port policy to be applied on this learned NAC device.
	PortPolicy pulumi.StringOutput `pulumi:"portPolicy"`
	// Status of the learned NAC device. Set enable to authorize the NAC device. Valid values: `enable`, `disable`.
	Status pulumi.StringOutput `pulumi:"status"`
	// Specifies the vdom to which the resource will be applied when the FortiGate unit is running in VDOM mode. Only one vdom can be specified. If you want to inherit the vdom configuration of the provider, please do not set this parameter.
	Vdomparam pulumi.StringPtrOutput `pulumi:"vdomparam"`
}

// NewSwitchControllerNacDevice registers a new resource with the given unique name, arguments, and options.
func NewSwitchControllerNacDevice(ctx *pulumi.Context,
	name string, args *SwitchControllerNacDeviceArgs, opts ...pulumi.ResourceOption) (*SwitchControllerNacDevice, error) {
	if args == nil {
		args = &SwitchControllerNacDeviceArgs{}
	}

	var resource SwitchControllerNacDevice
	err := ctx.RegisterResource("fortios:index/switchControllerNacDevice:SwitchControllerNacDevice", name, args, &resource, opts...)
	if err != nil {
		return nil, err
	}
	return &resource, nil
}

// GetSwitchControllerNacDevice gets an existing SwitchControllerNacDevice resource's state with the given name, ID, and optional
// state properties that are used to uniquely qualify the lookup (nil if not required).
func GetSwitchControllerNacDevice(ctx *pulumi.Context,
	name string, id pulumi.IDInput, state *SwitchControllerNacDeviceState, opts ...pulumi.ResourceOption) (*SwitchControllerNacDevice, error) {
	var resource SwitchControllerNacDevice
	err := ctx.ReadResource("fortios:index/switchControllerNacDevice:SwitchControllerNacDevice", name, id, state, &resource, opts...)
	if err != nil {
		return nil, err
	}
	return &resource, nil
}

// Input properties used for looking up and filtering SwitchControllerNacDevice resources.
type switchControllerNacDeviceState struct {
	// Description for the learned NAC device.
	Description *string `pulumi:"description"`
	// Device ID.
	Fosid *int `pulumi:"fosid"`
	// Managed FortiSwitch port where NAC device is last learned.
	LastKnownPort *string `pulumi:"lastKnownPort"`
	// Managed FortiSwitch where NAC device is last learned.
	LastKnownSwitch *string `pulumi:"lastKnownSwitch"`
	// Device last seen.
	LastSeen *int `pulumi:"lastSeen"`
	// MAC address of the learned NAC device.
	Mac *string `pulumi:"mac"`
	// MAC policy to be applied on this learned NAC device.
	MacPolicy *string `pulumi:"macPolicy"`
	// Matched NAC policy for the learned NAC device.
	MatchedNacPolicy *string `pulumi:"matchedNacPolicy"`
	// Port policy to be applied on this learned NAC device.
	PortPolicy *string `pulumi:"portPolicy"`
	// Status of the learned NAC device. Set enable to authorize the NAC device. Valid values: `enable`, `disable`.
	Status *string `pulumi:"status"`
	// Specifies the vdom to which the resource will be applied when the FortiGate unit is running in VDOM mode. Only one vdom can be specified. If you want to inherit the vdom configuration of the provider, please do not set this parameter.
	Vdomparam *string `pulumi:"vdomparam"`
}

type SwitchControllerNacDeviceState struct {
	// Description for the learned NAC device.
	Description pulumi.StringPtrInput
	// Device ID.
	Fosid pulumi.IntPtrInput
	// Managed FortiSwitch port where NAC device is last learned.
	LastKnownPort pulumi.StringPtrInput
	// Managed FortiSwitch where NAC device is last learned.
	LastKnownSwitch pulumi.StringPtrInput
	// Device last seen.
	LastSeen pulumi.IntPtrInput
	// MAC address of the learned NAC device.
	Mac pulumi.StringPtrInput
	// MAC policy to be applied on this learned NAC device.
	MacPolicy pulumi.StringPtrInput
	// Matched NAC policy for the learned NAC device.
	MatchedNacPolicy pulumi.StringPtrInput
	// Port policy to be applied on this learned NAC device.
	PortPolicy pulumi.StringPtrInput
	// Status of the learned NAC device. Set enable to authorize the NAC device. Valid values: `enable`, `disable`.
	Status pulumi.StringPtrInput
	// Specifies the vdom to which the resource will be applied when the FortiGate unit is running in VDOM mode. Only one vdom can be specified. If you want to inherit the vdom configuration of the provider, please do not set this parameter.
	Vdomparam pulumi.StringPtrInput
}

func (SwitchControllerNacDeviceState) ElementType() reflect.Type {
	return reflect.TypeOf((*switchControllerNacDeviceState)(nil)).Elem()
}

type switchControllerNacDeviceArgs struct {
	// Description for the learned NAC device.
	Description *string `pulumi:"description"`
	// Device ID.
	Fosid *int `pulumi:"fosid"`
	// Managed FortiSwitch port where NAC device is last learned.
	LastKnownPort *string `pulumi:"lastKnownPort"`
	// Managed FortiSwitch where NAC device is last learned.
	LastKnownSwitch *string `pulumi:"lastKnownSwitch"`
	// Device last seen.
	LastSeen *int `pulumi:"lastSeen"`
	// MAC address of the learned NAC device.
	Mac *string `pulumi:"mac"`
	// MAC policy to be applied on this learned NAC device.
	MacPolicy *string `pulumi:"macPolicy"`
	// Matched NAC policy for the learned NAC device.
	MatchedNacPolicy *string `pulumi:"matchedNacPolicy"`
	// Port policy to be applied on this learned NAC device.
	PortPolicy *string `pulumi:"portPolicy"`
	// Status of the learned NAC device. Set enable to authorize the NAC device. Valid values: `enable`, `disable`.
	Status *string `pulumi:"status"`
	// Specifies the vdom to which the resource will be applied when the FortiGate unit is running in VDOM mode. Only one vdom can be specified. If you want to inherit the vdom configuration of the provider, please do not set this parameter.
	Vdomparam *string `pulumi:"vdomparam"`
}

// The set of arguments for constructing a SwitchControllerNacDevice resource.
type SwitchControllerNacDeviceArgs struct {
	// Description for the learned NAC device.
	Description pulumi.StringPtrInput
	// Device ID.
	Fosid pulumi.IntPtrInput
	// Managed FortiSwitch port where NAC device is last learned.
	LastKnownPort pulumi.StringPtrInput
	// Managed FortiSwitch where NAC device is last learned.
	LastKnownSwitch pulumi.StringPtrInput
	// Device last seen.
	LastSeen pulumi.IntPtrInput
	// MAC address of the learned NAC device.
	Mac pulumi.StringPtrInput
	// MAC policy to be applied on this learned NAC device.
	MacPolicy pulumi.StringPtrInput
	// Matched NAC policy for the learned NAC device.
	MatchedNacPolicy pulumi.StringPtrInput
	// Port policy to be applied on this learned NAC device.
	PortPolicy pulumi.StringPtrInput
	// Status of the learned NAC device. Set enable to authorize the NAC device. Valid values: `enable`, `disable`.
	Status pulumi.StringPtrInput
	// Specifies the vdom to which the resource will be applied when the FortiGate unit is running in VDOM mode. Only one vdom can be specified. If you want to inherit the vdom configuration of the provider, please do not set this parameter.
	Vdomparam pulumi.StringPtrInput
}

func (SwitchControllerNacDeviceArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*switchControllerNacDeviceArgs)(nil)).Elem()
}

type SwitchControllerNacDeviceInput interface {
	pulumi.Input

	ToSwitchControllerNacDeviceOutput() SwitchControllerNacDeviceOutput
	ToSwitchControllerNacDeviceOutputWithContext(ctx context.Context) SwitchControllerNacDeviceOutput
}

func (*SwitchControllerNacDevice) ElementType() reflect.Type {
	return reflect.TypeOf((*SwitchControllerNacDevice)(nil))
}

func (i *SwitchControllerNacDevice) ToSwitchControllerNacDeviceOutput() SwitchControllerNacDeviceOutput {
	return i.ToSwitchControllerNacDeviceOutputWithContext(context.Background())
}

func (i *SwitchControllerNacDevice) ToSwitchControllerNacDeviceOutputWithContext(ctx context.Context) SwitchControllerNacDeviceOutput {
	return pulumi.ToOutputWithContext(ctx, i).(SwitchControllerNacDeviceOutput)
}

func (i *SwitchControllerNacDevice) ToSwitchControllerNacDevicePtrOutput() SwitchControllerNacDevicePtrOutput {
	return i.ToSwitchControllerNacDevicePtrOutputWithContext(context.Background())
}

func (i *SwitchControllerNacDevice) ToSwitchControllerNacDevicePtrOutputWithContext(ctx context.Context) SwitchControllerNacDevicePtrOutput {
	return pulumi.ToOutputWithContext(ctx, i).(SwitchControllerNacDevicePtrOutput)
}

type SwitchControllerNacDevicePtrInput interface {
	pulumi.Input

	ToSwitchControllerNacDevicePtrOutput() SwitchControllerNacDevicePtrOutput
	ToSwitchControllerNacDevicePtrOutputWithContext(ctx context.Context) SwitchControllerNacDevicePtrOutput
}

type switchControllerNacDevicePtrType SwitchControllerNacDeviceArgs

func (*switchControllerNacDevicePtrType) ElementType() reflect.Type {
	return reflect.TypeOf((**SwitchControllerNacDevice)(nil))
}

func (i *switchControllerNacDevicePtrType) ToSwitchControllerNacDevicePtrOutput() SwitchControllerNacDevicePtrOutput {
	return i.ToSwitchControllerNacDevicePtrOutputWithContext(context.Background())
}

func (i *switchControllerNacDevicePtrType) ToSwitchControllerNacDevicePtrOutputWithContext(ctx context.Context) SwitchControllerNacDevicePtrOutput {
	return pulumi.ToOutputWithContext(ctx, i).(SwitchControllerNacDevicePtrOutput)
}

// SwitchControllerNacDeviceArrayInput is an input type that accepts SwitchControllerNacDeviceArray and SwitchControllerNacDeviceArrayOutput values.
// You can construct a concrete instance of `SwitchControllerNacDeviceArrayInput` via:
//
//          SwitchControllerNacDeviceArray{ SwitchControllerNacDeviceArgs{...} }
type SwitchControllerNacDeviceArrayInput interface {
	pulumi.Input

	ToSwitchControllerNacDeviceArrayOutput() SwitchControllerNacDeviceArrayOutput
	ToSwitchControllerNacDeviceArrayOutputWithContext(context.Context) SwitchControllerNacDeviceArrayOutput
}

type SwitchControllerNacDeviceArray []SwitchControllerNacDeviceInput

func (SwitchControllerNacDeviceArray) ElementType() reflect.Type {
	return reflect.TypeOf(([]*SwitchControllerNacDevice)(nil))
}

func (i SwitchControllerNacDeviceArray) ToSwitchControllerNacDeviceArrayOutput() SwitchControllerNacDeviceArrayOutput {
	return i.ToSwitchControllerNacDeviceArrayOutputWithContext(context.Background())
}

func (i SwitchControllerNacDeviceArray) ToSwitchControllerNacDeviceArrayOutputWithContext(ctx context.Context) SwitchControllerNacDeviceArrayOutput {
	return pulumi.ToOutputWithContext(ctx, i).(SwitchControllerNacDeviceArrayOutput)
}

// SwitchControllerNacDeviceMapInput is an input type that accepts SwitchControllerNacDeviceMap and SwitchControllerNacDeviceMapOutput values.
// You can construct a concrete instance of `SwitchControllerNacDeviceMapInput` via:
//
//          SwitchControllerNacDeviceMap{ "key": SwitchControllerNacDeviceArgs{...} }
type SwitchControllerNacDeviceMapInput interface {
	pulumi.Input

	ToSwitchControllerNacDeviceMapOutput() SwitchControllerNacDeviceMapOutput
	ToSwitchControllerNacDeviceMapOutputWithContext(context.Context) SwitchControllerNacDeviceMapOutput
}

type SwitchControllerNacDeviceMap map[string]SwitchControllerNacDeviceInput

func (SwitchControllerNacDeviceMap) ElementType() reflect.Type {
	return reflect.TypeOf((map[string]*SwitchControllerNacDevice)(nil))
}

func (i SwitchControllerNacDeviceMap) ToSwitchControllerNacDeviceMapOutput() SwitchControllerNacDeviceMapOutput {
	return i.ToSwitchControllerNacDeviceMapOutputWithContext(context.Background())
}

func (i SwitchControllerNacDeviceMap) ToSwitchControllerNacDeviceMapOutputWithContext(ctx context.Context) SwitchControllerNacDeviceMapOutput {
	return pulumi.ToOutputWithContext(ctx, i).(SwitchControllerNacDeviceMapOutput)
}

type SwitchControllerNacDeviceOutput struct {
	*pulumi.OutputState
}

func (SwitchControllerNacDeviceOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*SwitchControllerNacDevice)(nil))
}

func (o SwitchControllerNacDeviceOutput) ToSwitchControllerNacDeviceOutput() SwitchControllerNacDeviceOutput {
	return o
}

func (o SwitchControllerNacDeviceOutput) ToSwitchControllerNacDeviceOutputWithContext(ctx context.Context) SwitchControllerNacDeviceOutput {
	return o
}

func (o SwitchControllerNacDeviceOutput) ToSwitchControllerNacDevicePtrOutput() SwitchControllerNacDevicePtrOutput {
	return o.ToSwitchControllerNacDevicePtrOutputWithContext(context.Background())
}

func (o SwitchControllerNacDeviceOutput) ToSwitchControllerNacDevicePtrOutputWithContext(ctx context.Context) SwitchControllerNacDevicePtrOutput {
	return o.ApplyT(func(v SwitchControllerNacDevice) *SwitchControllerNacDevice {
		return &v
	}).(SwitchControllerNacDevicePtrOutput)
}

type SwitchControllerNacDevicePtrOutput struct {
	*pulumi.OutputState
}

func (SwitchControllerNacDevicePtrOutput) ElementType() reflect.Type {
	return reflect.TypeOf((**SwitchControllerNacDevice)(nil))
}

func (o SwitchControllerNacDevicePtrOutput) ToSwitchControllerNacDevicePtrOutput() SwitchControllerNacDevicePtrOutput {
	return o
}

func (o SwitchControllerNacDevicePtrOutput) ToSwitchControllerNacDevicePtrOutputWithContext(ctx context.Context) SwitchControllerNacDevicePtrOutput {
	return o
}

type SwitchControllerNacDeviceArrayOutput struct{ *pulumi.OutputState }

func (SwitchControllerNacDeviceArrayOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*[]SwitchControllerNacDevice)(nil))
}

func (o SwitchControllerNacDeviceArrayOutput) ToSwitchControllerNacDeviceArrayOutput() SwitchControllerNacDeviceArrayOutput {
	return o
}

func (o SwitchControllerNacDeviceArrayOutput) ToSwitchControllerNacDeviceArrayOutputWithContext(ctx context.Context) SwitchControllerNacDeviceArrayOutput {
	return o
}

func (o SwitchControllerNacDeviceArrayOutput) Index(i pulumi.IntInput) SwitchControllerNacDeviceOutput {
	return pulumi.All(o, i).ApplyT(func(vs []interface{}) SwitchControllerNacDevice {
		return vs[0].([]SwitchControllerNacDevice)[vs[1].(int)]
	}).(SwitchControllerNacDeviceOutput)
}

type SwitchControllerNacDeviceMapOutput struct{ *pulumi.OutputState }

func (SwitchControllerNacDeviceMapOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*map[string]SwitchControllerNacDevice)(nil))
}

func (o SwitchControllerNacDeviceMapOutput) ToSwitchControllerNacDeviceMapOutput() SwitchControllerNacDeviceMapOutput {
	return o
}

func (o SwitchControllerNacDeviceMapOutput) ToSwitchControllerNacDeviceMapOutputWithContext(ctx context.Context) SwitchControllerNacDeviceMapOutput {
	return o
}

func (o SwitchControllerNacDeviceMapOutput) MapIndex(k pulumi.StringInput) SwitchControllerNacDeviceOutput {
	return pulumi.All(o, k).ApplyT(func(vs []interface{}) SwitchControllerNacDevice {
		return vs[0].(map[string]SwitchControllerNacDevice)[vs[1].(string)]
	}).(SwitchControllerNacDeviceOutput)
}

func init() {
	pulumi.RegisterOutputType(SwitchControllerNacDeviceOutput{})
	pulumi.RegisterOutputType(SwitchControllerNacDevicePtrOutput{})
	pulumi.RegisterOutputType(SwitchControllerNacDeviceArrayOutput{})
	pulumi.RegisterOutputType(SwitchControllerNacDeviceMapOutput{})
}
