// *** WARNING: this file was generated by the Pulumi Terraform Bridge (tfgen) Tool. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

package fortios

import (
	"context"
	"reflect"

	"github.com/pulumi/pulumi/sdk/v3/go/pulumi"
)

// Configure Bonjour profiles. Bonjour is Apple's zero configuration networking protocol. Bonjour profiles allow APs and FortiAPs to connnect to networks using Bonjour.
//
// ## Import
//
// WirelessController BonjourProfile can be imported using any of these accepted formats$ export "FORTIOS_IMPORT_TABLE"="true"
//
// ```sh
//  $ pulumi import fortios:index/wirelessControllerBonjourProfile:WirelessControllerBonjourProfile labelname {{name}}
// ```
//
//  $ unset "FORTIOS_IMPORT_TABLE"
type WirelessControllerBonjourProfile struct {
	pulumi.CustomResourceState

	// Comment.
	Comment pulumi.StringOutput `pulumi:"comment"`
	// true or false, set this parameter to true when using dynamic forEach + toset to configure and sort sub-tables, please do not set this parameter when configuring static sub-tables.
	DynamicSortSubtable pulumi.StringPtrOutput `pulumi:"dynamicSortSubtable"`
	// Bonjour profile name.
	Name pulumi.StringOutput `pulumi:"name"`
	// Bonjour policy list. The structure of `policyList` block is documented below.
	PolicyLists WirelessControllerBonjourProfilePolicyListArrayOutput `pulumi:"policyLists"`
	// Specifies the vdom to which the resource will be applied when the FortiGate unit is running in VDOM mode. Only one vdom can be specified. If you want to inherit the vdom configuration of the provider, please do not set this parameter.
	Vdomparam pulumi.StringPtrOutput `pulumi:"vdomparam"`
}

// NewWirelessControllerBonjourProfile registers a new resource with the given unique name, arguments, and options.
func NewWirelessControllerBonjourProfile(ctx *pulumi.Context,
	name string, args *WirelessControllerBonjourProfileArgs, opts ...pulumi.ResourceOption) (*WirelessControllerBonjourProfile, error) {
	if args == nil {
		args = &WirelessControllerBonjourProfileArgs{}
	}

	var resource WirelessControllerBonjourProfile
	err := ctx.RegisterResource("fortios:index/wirelessControllerBonjourProfile:WirelessControllerBonjourProfile", name, args, &resource, opts...)
	if err != nil {
		return nil, err
	}
	return &resource, nil
}

// GetWirelessControllerBonjourProfile gets an existing WirelessControllerBonjourProfile resource's state with the given name, ID, and optional
// state properties that are used to uniquely qualify the lookup (nil if not required).
func GetWirelessControllerBonjourProfile(ctx *pulumi.Context,
	name string, id pulumi.IDInput, state *WirelessControllerBonjourProfileState, opts ...pulumi.ResourceOption) (*WirelessControllerBonjourProfile, error) {
	var resource WirelessControllerBonjourProfile
	err := ctx.ReadResource("fortios:index/wirelessControllerBonjourProfile:WirelessControllerBonjourProfile", name, id, state, &resource, opts...)
	if err != nil {
		return nil, err
	}
	return &resource, nil
}

// Input properties used for looking up and filtering WirelessControllerBonjourProfile resources.
type wirelessControllerBonjourProfileState struct {
	// Comment.
	Comment *string `pulumi:"comment"`
	// true or false, set this parameter to true when using dynamic forEach + toset to configure and sort sub-tables, please do not set this parameter when configuring static sub-tables.
	DynamicSortSubtable *string `pulumi:"dynamicSortSubtable"`
	// Bonjour profile name.
	Name *string `pulumi:"name"`
	// Bonjour policy list. The structure of `policyList` block is documented below.
	PolicyLists []WirelessControllerBonjourProfilePolicyList `pulumi:"policyLists"`
	// Specifies the vdom to which the resource will be applied when the FortiGate unit is running in VDOM mode. Only one vdom can be specified. If you want to inherit the vdom configuration of the provider, please do not set this parameter.
	Vdomparam *string `pulumi:"vdomparam"`
}

type WirelessControllerBonjourProfileState struct {
	// Comment.
	Comment pulumi.StringPtrInput
	// true or false, set this parameter to true when using dynamic forEach + toset to configure and sort sub-tables, please do not set this parameter when configuring static sub-tables.
	DynamicSortSubtable pulumi.StringPtrInput
	// Bonjour profile name.
	Name pulumi.StringPtrInput
	// Bonjour policy list. The structure of `policyList` block is documented below.
	PolicyLists WirelessControllerBonjourProfilePolicyListArrayInput
	// Specifies the vdom to which the resource will be applied when the FortiGate unit is running in VDOM mode. Only one vdom can be specified. If you want to inherit the vdom configuration of the provider, please do not set this parameter.
	Vdomparam pulumi.StringPtrInput
}

func (WirelessControllerBonjourProfileState) ElementType() reflect.Type {
	return reflect.TypeOf((*wirelessControllerBonjourProfileState)(nil)).Elem()
}

type wirelessControllerBonjourProfileArgs struct {
	// Comment.
	Comment *string `pulumi:"comment"`
	// true or false, set this parameter to true when using dynamic forEach + toset to configure and sort sub-tables, please do not set this parameter when configuring static sub-tables.
	DynamicSortSubtable *string `pulumi:"dynamicSortSubtable"`
	// Bonjour profile name.
	Name *string `pulumi:"name"`
	// Bonjour policy list. The structure of `policyList` block is documented below.
	PolicyLists []WirelessControllerBonjourProfilePolicyList `pulumi:"policyLists"`
	// Specifies the vdom to which the resource will be applied when the FortiGate unit is running in VDOM mode. Only one vdom can be specified. If you want to inherit the vdom configuration of the provider, please do not set this parameter.
	Vdomparam *string `pulumi:"vdomparam"`
}

// The set of arguments for constructing a WirelessControllerBonjourProfile resource.
type WirelessControllerBonjourProfileArgs struct {
	// Comment.
	Comment pulumi.StringPtrInput
	// true or false, set this parameter to true when using dynamic forEach + toset to configure and sort sub-tables, please do not set this parameter when configuring static sub-tables.
	DynamicSortSubtable pulumi.StringPtrInput
	// Bonjour profile name.
	Name pulumi.StringPtrInput
	// Bonjour policy list. The structure of `policyList` block is documented below.
	PolicyLists WirelessControllerBonjourProfilePolicyListArrayInput
	// Specifies the vdom to which the resource will be applied when the FortiGate unit is running in VDOM mode. Only one vdom can be specified. If you want to inherit the vdom configuration of the provider, please do not set this parameter.
	Vdomparam pulumi.StringPtrInput
}

func (WirelessControllerBonjourProfileArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*wirelessControllerBonjourProfileArgs)(nil)).Elem()
}

type WirelessControllerBonjourProfileInput interface {
	pulumi.Input

	ToWirelessControllerBonjourProfileOutput() WirelessControllerBonjourProfileOutput
	ToWirelessControllerBonjourProfileOutputWithContext(ctx context.Context) WirelessControllerBonjourProfileOutput
}

func (*WirelessControllerBonjourProfile) ElementType() reflect.Type {
	return reflect.TypeOf((*WirelessControllerBonjourProfile)(nil))
}

func (i *WirelessControllerBonjourProfile) ToWirelessControllerBonjourProfileOutput() WirelessControllerBonjourProfileOutput {
	return i.ToWirelessControllerBonjourProfileOutputWithContext(context.Background())
}

func (i *WirelessControllerBonjourProfile) ToWirelessControllerBonjourProfileOutputWithContext(ctx context.Context) WirelessControllerBonjourProfileOutput {
	return pulumi.ToOutputWithContext(ctx, i).(WirelessControllerBonjourProfileOutput)
}

func (i *WirelessControllerBonjourProfile) ToWirelessControllerBonjourProfilePtrOutput() WirelessControllerBonjourProfilePtrOutput {
	return i.ToWirelessControllerBonjourProfilePtrOutputWithContext(context.Background())
}

func (i *WirelessControllerBonjourProfile) ToWirelessControllerBonjourProfilePtrOutputWithContext(ctx context.Context) WirelessControllerBonjourProfilePtrOutput {
	return pulumi.ToOutputWithContext(ctx, i).(WirelessControllerBonjourProfilePtrOutput)
}

type WirelessControllerBonjourProfilePtrInput interface {
	pulumi.Input

	ToWirelessControllerBonjourProfilePtrOutput() WirelessControllerBonjourProfilePtrOutput
	ToWirelessControllerBonjourProfilePtrOutputWithContext(ctx context.Context) WirelessControllerBonjourProfilePtrOutput
}

type wirelessControllerBonjourProfilePtrType WirelessControllerBonjourProfileArgs

func (*wirelessControllerBonjourProfilePtrType) ElementType() reflect.Type {
	return reflect.TypeOf((**WirelessControllerBonjourProfile)(nil))
}

func (i *wirelessControllerBonjourProfilePtrType) ToWirelessControllerBonjourProfilePtrOutput() WirelessControllerBonjourProfilePtrOutput {
	return i.ToWirelessControllerBonjourProfilePtrOutputWithContext(context.Background())
}

func (i *wirelessControllerBonjourProfilePtrType) ToWirelessControllerBonjourProfilePtrOutputWithContext(ctx context.Context) WirelessControllerBonjourProfilePtrOutput {
	return pulumi.ToOutputWithContext(ctx, i).(WirelessControllerBonjourProfilePtrOutput)
}

// WirelessControllerBonjourProfileArrayInput is an input type that accepts WirelessControllerBonjourProfileArray and WirelessControllerBonjourProfileArrayOutput values.
// You can construct a concrete instance of `WirelessControllerBonjourProfileArrayInput` via:
//
//          WirelessControllerBonjourProfileArray{ WirelessControllerBonjourProfileArgs{...} }
type WirelessControllerBonjourProfileArrayInput interface {
	pulumi.Input

	ToWirelessControllerBonjourProfileArrayOutput() WirelessControllerBonjourProfileArrayOutput
	ToWirelessControllerBonjourProfileArrayOutputWithContext(context.Context) WirelessControllerBonjourProfileArrayOutput
}

type WirelessControllerBonjourProfileArray []WirelessControllerBonjourProfileInput

func (WirelessControllerBonjourProfileArray) ElementType() reflect.Type {
	return reflect.TypeOf(([]*WirelessControllerBonjourProfile)(nil))
}

func (i WirelessControllerBonjourProfileArray) ToWirelessControllerBonjourProfileArrayOutput() WirelessControllerBonjourProfileArrayOutput {
	return i.ToWirelessControllerBonjourProfileArrayOutputWithContext(context.Background())
}

func (i WirelessControllerBonjourProfileArray) ToWirelessControllerBonjourProfileArrayOutputWithContext(ctx context.Context) WirelessControllerBonjourProfileArrayOutput {
	return pulumi.ToOutputWithContext(ctx, i).(WirelessControllerBonjourProfileArrayOutput)
}

// WirelessControllerBonjourProfileMapInput is an input type that accepts WirelessControllerBonjourProfileMap and WirelessControllerBonjourProfileMapOutput values.
// You can construct a concrete instance of `WirelessControllerBonjourProfileMapInput` via:
//
//          WirelessControllerBonjourProfileMap{ "key": WirelessControllerBonjourProfileArgs{...} }
type WirelessControllerBonjourProfileMapInput interface {
	pulumi.Input

	ToWirelessControllerBonjourProfileMapOutput() WirelessControllerBonjourProfileMapOutput
	ToWirelessControllerBonjourProfileMapOutputWithContext(context.Context) WirelessControllerBonjourProfileMapOutput
}

type WirelessControllerBonjourProfileMap map[string]WirelessControllerBonjourProfileInput

func (WirelessControllerBonjourProfileMap) ElementType() reflect.Type {
	return reflect.TypeOf((map[string]*WirelessControllerBonjourProfile)(nil))
}

func (i WirelessControllerBonjourProfileMap) ToWirelessControllerBonjourProfileMapOutput() WirelessControllerBonjourProfileMapOutput {
	return i.ToWirelessControllerBonjourProfileMapOutputWithContext(context.Background())
}

func (i WirelessControllerBonjourProfileMap) ToWirelessControllerBonjourProfileMapOutputWithContext(ctx context.Context) WirelessControllerBonjourProfileMapOutput {
	return pulumi.ToOutputWithContext(ctx, i).(WirelessControllerBonjourProfileMapOutput)
}

type WirelessControllerBonjourProfileOutput struct {
	*pulumi.OutputState
}

func (WirelessControllerBonjourProfileOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*WirelessControllerBonjourProfile)(nil))
}

func (o WirelessControllerBonjourProfileOutput) ToWirelessControllerBonjourProfileOutput() WirelessControllerBonjourProfileOutput {
	return o
}

func (o WirelessControllerBonjourProfileOutput) ToWirelessControllerBonjourProfileOutputWithContext(ctx context.Context) WirelessControllerBonjourProfileOutput {
	return o
}

func (o WirelessControllerBonjourProfileOutput) ToWirelessControllerBonjourProfilePtrOutput() WirelessControllerBonjourProfilePtrOutput {
	return o.ToWirelessControllerBonjourProfilePtrOutputWithContext(context.Background())
}

func (o WirelessControllerBonjourProfileOutput) ToWirelessControllerBonjourProfilePtrOutputWithContext(ctx context.Context) WirelessControllerBonjourProfilePtrOutput {
	return o.ApplyT(func(v WirelessControllerBonjourProfile) *WirelessControllerBonjourProfile {
		return &v
	}).(WirelessControllerBonjourProfilePtrOutput)
}

type WirelessControllerBonjourProfilePtrOutput struct {
	*pulumi.OutputState
}

func (WirelessControllerBonjourProfilePtrOutput) ElementType() reflect.Type {
	return reflect.TypeOf((**WirelessControllerBonjourProfile)(nil))
}

func (o WirelessControllerBonjourProfilePtrOutput) ToWirelessControllerBonjourProfilePtrOutput() WirelessControllerBonjourProfilePtrOutput {
	return o
}

func (o WirelessControllerBonjourProfilePtrOutput) ToWirelessControllerBonjourProfilePtrOutputWithContext(ctx context.Context) WirelessControllerBonjourProfilePtrOutput {
	return o
}

type WirelessControllerBonjourProfileArrayOutput struct{ *pulumi.OutputState }

func (WirelessControllerBonjourProfileArrayOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*[]WirelessControllerBonjourProfile)(nil))
}

func (o WirelessControllerBonjourProfileArrayOutput) ToWirelessControllerBonjourProfileArrayOutput() WirelessControllerBonjourProfileArrayOutput {
	return o
}

func (o WirelessControllerBonjourProfileArrayOutput) ToWirelessControllerBonjourProfileArrayOutputWithContext(ctx context.Context) WirelessControllerBonjourProfileArrayOutput {
	return o
}

func (o WirelessControllerBonjourProfileArrayOutput) Index(i pulumi.IntInput) WirelessControllerBonjourProfileOutput {
	return pulumi.All(o, i).ApplyT(func(vs []interface{}) WirelessControllerBonjourProfile {
		return vs[0].([]WirelessControllerBonjourProfile)[vs[1].(int)]
	}).(WirelessControllerBonjourProfileOutput)
}

type WirelessControllerBonjourProfileMapOutput struct{ *pulumi.OutputState }

func (WirelessControllerBonjourProfileMapOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*map[string]WirelessControllerBonjourProfile)(nil))
}

func (o WirelessControllerBonjourProfileMapOutput) ToWirelessControllerBonjourProfileMapOutput() WirelessControllerBonjourProfileMapOutput {
	return o
}

func (o WirelessControllerBonjourProfileMapOutput) ToWirelessControllerBonjourProfileMapOutputWithContext(ctx context.Context) WirelessControllerBonjourProfileMapOutput {
	return o
}

func (o WirelessControllerBonjourProfileMapOutput) MapIndex(k pulumi.StringInput) WirelessControllerBonjourProfileOutput {
	return pulumi.All(o, k).ApplyT(func(vs []interface{}) WirelessControllerBonjourProfile {
		return vs[0].(map[string]WirelessControllerBonjourProfile)[vs[1].(string)]
	}).(WirelessControllerBonjourProfileOutput)
}

func init() {
	pulumi.RegisterOutputType(WirelessControllerBonjourProfileOutput{})
	pulumi.RegisterOutputType(WirelessControllerBonjourProfilePtrOutput{})
	pulumi.RegisterOutputType(WirelessControllerBonjourProfileArrayOutput{})
	pulumi.RegisterOutputType(WirelessControllerBonjourProfileMapOutput{})
}
