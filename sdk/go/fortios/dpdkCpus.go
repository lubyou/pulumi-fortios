// Code generated by the Pulumi Terraform Bridge (tfgen) Tool DO NOT EDIT.
// *** WARNING: Do not edit by hand unless you're certain you know what you are doing! ***

package fortios

import (
	"context"
	"reflect"

	"github.com/lubyou/pulumi-fortios/sdk/go/fortios/internal"
	"github.com/pulumi/pulumi/sdk/v3/go/pulumi"
	"github.com/pulumi/pulumi/sdk/v3/go/pulumix"
)

type DpdkCpus struct {
	pulumi.CustomResourceState

	IpsCpus      pulumi.StringOutput    `pulumi:"ipsCpus"`
	IsolatedCpus pulumi.StringOutput    `pulumi:"isolatedCpus"`
	RxCpus       pulumi.StringOutput    `pulumi:"rxCpus"`
	TxCpus       pulumi.StringOutput    `pulumi:"txCpus"`
	Vdomparam    pulumi.StringPtrOutput `pulumi:"vdomparam"`
	VnpCpus      pulumi.StringOutput    `pulumi:"vnpCpus"`
}

// NewDpdkCpus registers a new resource with the given unique name, arguments, and options.
func NewDpdkCpus(ctx *pulumi.Context,
	name string, args *DpdkCpusArgs, opts ...pulumi.ResourceOption) (*DpdkCpus, error) {
	if args == nil {
		args = &DpdkCpusArgs{}
	}

	opts = internal.PkgResourceDefaultOpts(opts)
	var resource DpdkCpus
	err := ctx.RegisterResource("fortios:index/dpdkCpus:DpdkCpus", name, args, &resource, opts...)
	if err != nil {
		return nil, err
	}
	return &resource, nil
}

// GetDpdkCpus gets an existing DpdkCpus resource's state with the given name, ID, and optional
// state properties that are used to uniquely qualify the lookup (nil if not required).
func GetDpdkCpus(ctx *pulumi.Context,
	name string, id pulumi.IDInput, state *DpdkCpusState, opts ...pulumi.ResourceOption) (*DpdkCpus, error) {
	var resource DpdkCpus
	err := ctx.ReadResource("fortios:index/dpdkCpus:DpdkCpus", name, id, state, &resource, opts...)
	if err != nil {
		return nil, err
	}
	return &resource, nil
}

// Input properties used for looking up and filtering DpdkCpus resources.
type dpdkCpusState struct {
	IpsCpus      *string `pulumi:"ipsCpus"`
	IsolatedCpus *string `pulumi:"isolatedCpus"`
	RxCpus       *string `pulumi:"rxCpus"`
	TxCpus       *string `pulumi:"txCpus"`
	Vdomparam    *string `pulumi:"vdomparam"`
	VnpCpus      *string `pulumi:"vnpCpus"`
}

type DpdkCpusState struct {
	IpsCpus      pulumi.StringPtrInput
	IsolatedCpus pulumi.StringPtrInput
	RxCpus       pulumi.StringPtrInput
	TxCpus       pulumi.StringPtrInput
	Vdomparam    pulumi.StringPtrInput
	VnpCpus      pulumi.StringPtrInput
}

func (DpdkCpusState) ElementType() reflect.Type {
	return reflect.TypeOf((*dpdkCpusState)(nil)).Elem()
}

type dpdkCpusArgs struct {
	IpsCpus      *string `pulumi:"ipsCpus"`
	IsolatedCpus *string `pulumi:"isolatedCpus"`
	RxCpus       *string `pulumi:"rxCpus"`
	TxCpus       *string `pulumi:"txCpus"`
	Vdomparam    *string `pulumi:"vdomparam"`
	VnpCpus      *string `pulumi:"vnpCpus"`
}

// The set of arguments for constructing a DpdkCpus resource.
type DpdkCpusArgs struct {
	IpsCpus      pulumi.StringPtrInput
	IsolatedCpus pulumi.StringPtrInput
	RxCpus       pulumi.StringPtrInput
	TxCpus       pulumi.StringPtrInput
	Vdomparam    pulumi.StringPtrInput
	VnpCpus      pulumi.StringPtrInput
}

func (DpdkCpusArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*dpdkCpusArgs)(nil)).Elem()
}

type DpdkCpusInput interface {
	pulumi.Input

	ToDpdkCpusOutput() DpdkCpusOutput
	ToDpdkCpusOutputWithContext(ctx context.Context) DpdkCpusOutput
}

func (*DpdkCpus) ElementType() reflect.Type {
	return reflect.TypeOf((**DpdkCpus)(nil)).Elem()
}

func (i *DpdkCpus) ToDpdkCpusOutput() DpdkCpusOutput {
	return i.ToDpdkCpusOutputWithContext(context.Background())
}

func (i *DpdkCpus) ToDpdkCpusOutputWithContext(ctx context.Context) DpdkCpusOutput {
	return pulumi.ToOutputWithContext(ctx, i).(DpdkCpusOutput)
}

func (i *DpdkCpus) ToOutput(ctx context.Context) pulumix.Output[*DpdkCpus] {
	return pulumix.Output[*DpdkCpus]{
		OutputState: i.ToDpdkCpusOutputWithContext(ctx).OutputState,
	}
}

// DpdkCpusArrayInput is an input type that accepts DpdkCpusArray and DpdkCpusArrayOutput values.
// You can construct a concrete instance of `DpdkCpusArrayInput` via:
//
//	DpdkCpusArray{ DpdkCpusArgs{...} }
type DpdkCpusArrayInput interface {
	pulumi.Input

	ToDpdkCpusArrayOutput() DpdkCpusArrayOutput
	ToDpdkCpusArrayOutputWithContext(context.Context) DpdkCpusArrayOutput
}

type DpdkCpusArray []DpdkCpusInput

func (DpdkCpusArray) ElementType() reflect.Type {
	return reflect.TypeOf((*[]*DpdkCpus)(nil)).Elem()
}

func (i DpdkCpusArray) ToDpdkCpusArrayOutput() DpdkCpusArrayOutput {
	return i.ToDpdkCpusArrayOutputWithContext(context.Background())
}

func (i DpdkCpusArray) ToDpdkCpusArrayOutputWithContext(ctx context.Context) DpdkCpusArrayOutput {
	return pulumi.ToOutputWithContext(ctx, i).(DpdkCpusArrayOutput)
}

func (i DpdkCpusArray) ToOutput(ctx context.Context) pulumix.Output[[]*DpdkCpus] {
	return pulumix.Output[[]*DpdkCpus]{
		OutputState: i.ToDpdkCpusArrayOutputWithContext(ctx).OutputState,
	}
}

// DpdkCpusMapInput is an input type that accepts DpdkCpusMap and DpdkCpusMapOutput values.
// You can construct a concrete instance of `DpdkCpusMapInput` via:
//
//	DpdkCpusMap{ "key": DpdkCpusArgs{...} }
type DpdkCpusMapInput interface {
	pulumi.Input

	ToDpdkCpusMapOutput() DpdkCpusMapOutput
	ToDpdkCpusMapOutputWithContext(context.Context) DpdkCpusMapOutput
}

type DpdkCpusMap map[string]DpdkCpusInput

func (DpdkCpusMap) ElementType() reflect.Type {
	return reflect.TypeOf((*map[string]*DpdkCpus)(nil)).Elem()
}

func (i DpdkCpusMap) ToDpdkCpusMapOutput() DpdkCpusMapOutput {
	return i.ToDpdkCpusMapOutputWithContext(context.Background())
}

func (i DpdkCpusMap) ToDpdkCpusMapOutputWithContext(ctx context.Context) DpdkCpusMapOutput {
	return pulumi.ToOutputWithContext(ctx, i).(DpdkCpusMapOutput)
}

func (i DpdkCpusMap) ToOutput(ctx context.Context) pulumix.Output[map[string]*DpdkCpus] {
	return pulumix.Output[map[string]*DpdkCpus]{
		OutputState: i.ToDpdkCpusMapOutputWithContext(ctx).OutputState,
	}
}

type DpdkCpusOutput struct{ *pulumi.OutputState }

func (DpdkCpusOutput) ElementType() reflect.Type {
	return reflect.TypeOf((**DpdkCpus)(nil)).Elem()
}

func (o DpdkCpusOutput) ToDpdkCpusOutput() DpdkCpusOutput {
	return o
}

func (o DpdkCpusOutput) ToDpdkCpusOutputWithContext(ctx context.Context) DpdkCpusOutput {
	return o
}

func (o DpdkCpusOutput) ToOutput(ctx context.Context) pulumix.Output[*DpdkCpus] {
	return pulumix.Output[*DpdkCpus]{
		OutputState: o.OutputState,
	}
}

func (o DpdkCpusOutput) IpsCpus() pulumi.StringOutput {
	return o.ApplyT(func(v *DpdkCpus) pulumi.StringOutput { return v.IpsCpus }).(pulumi.StringOutput)
}

func (o DpdkCpusOutput) IsolatedCpus() pulumi.StringOutput {
	return o.ApplyT(func(v *DpdkCpus) pulumi.StringOutput { return v.IsolatedCpus }).(pulumi.StringOutput)
}

func (o DpdkCpusOutput) RxCpus() pulumi.StringOutput {
	return o.ApplyT(func(v *DpdkCpus) pulumi.StringOutput { return v.RxCpus }).(pulumi.StringOutput)
}

func (o DpdkCpusOutput) TxCpus() pulumi.StringOutput {
	return o.ApplyT(func(v *DpdkCpus) pulumi.StringOutput { return v.TxCpus }).(pulumi.StringOutput)
}

func (o DpdkCpusOutput) Vdomparam() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *DpdkCpus) pulumi.StringPtrOutput { return v.Vdomparam }).(pulumi.StringPtrOutput)
}

func (o DpdkCpusOutput) VnpCpus() pulumi.StringOutput {
	return o.ApplyT(func(v *DpdkCpus) pulumi.StringOutput { return v.VnpCpus }).(pulumi.StringOutput)
}

type DpdkCpusArrayOutput struct{ *pulumi.OutputState }

func (DpdkCpusArrayOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*[]*DpdkCpus)(nil)).Elem()
}

func (o DpdkCpusArrayOutput) ToDpdkCpusArrayOutput() DpdkCpusArrayOutput {
	return o
}

func (o DpdkCpusArrayOutput) ToDpdkCpusArrayOutputWithContext(ctx context.Context) DpdkCpusArrayOutput {
	return o
}

func (o DpdkCpusArrayOutput) ToOutput(ctx context.Context) pulumix.Output[[]*DpdkCpus] {
	return pulumix.Output[[]*DpdkCpus]{
		OutputState: o.OutputState,
	}
}

func (o DpdkCpusArrayOutput) Index(i pulumi.IntInput) DpdkCpusOutput {
	return pulumi.All(o, i).ApplyT(func(vs []interface{}) *DpdkCpus {
		return vs[0].([]*DpdkCpus)[vs[1].(int)]
	}).(DpdkCpusOutput)
}

type DpdkCpusMapOutput struct{ *pulumi.OutputState }

func (DpdkCpusMapOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*map[string]*DpdkCpus)(nil)).Elem()
}

func (o DpdkCpusMapOutput) ToDpdkCpusMapOutput() DpdkCpusMapOutput {
	return o
}

func (o DpdkCpusMapOutput) ToDpdkCpusMapOutputWithContext(ctx context.Context) DpdkCpusMapOutput {
	return o
}

func (o DpdkCpusMapOutput) ToOutput(ctx context.Context) pulumix.Output[map[string]*DpdkCpus] {
	return pulumix.Output[map[string]*DpdkCpus]{
		OutputState: o.OutputState,
	}
}

func (o DpdkCpusMapOutput) MapIndex(k pulumi.StringInput) DpdkCpusOutput {
	return pulumi.All(o, k).ApplyT(func(vs []interface{}) *DpdkCpus {
		return vs[0].(map[string]*DpdkCpus)[vs[1].(string)]
	}).(DpdkCpusOutput)
}

func init() {
	pulumi.RegisterInputType(reflect.TypeOf((*DpdkCpusInput)(nil)).Elem(), &DpdkCpus{})
	pulumi.RegisterInputType(reflect.TypeOf((*DpdkCpusArrayInput)(nil)).Elem(), DpdkCpusArray{})
	pulumi.RegisterInputType(reflect.TypeOf((*DpdkCpusMapInput)(nil)).Elem(), DpdkCpusMap{})
	pulumi.RegisterOutputType(DpdkCpusOutput{})
	pulumi.RegisterOutputType(DpdkCpusArrayOutput{})
	pulumi.RegisterOutputType(DpdkCpusMapOutput{})
}
