// Code generated by the Pulumi Terraform Bridge (tfgen) Tool DO NOT EDIT.
// *** WARNING: Do not edit by hand unless you're certain you know what you are doing! ***

package fortios

import (
	"context"
	"reflect"

	"github.com/lubyou/pulumi-fortios/sdk/go/fortios/internal"
	"github.com/pulumi/pulumi/sdk/v3/go/pulumi"
)

type SystemPcpServer struct {
	pulumi.CustomResourceState

	DynamicSortSubtable pulumi.StringPtrOutput         `pulumi:"dynamicSortSubtable"`
	GetAllTables        pulumi.StringPtrOutput         `pulumi:"getAllTables"`
	Pools               SystemPcpServerPoolArrayOutput `pulumi:"pools"`
	Status              pulumi.StringOutput            `pulumi:"status"`
	Vdomparam           pulumi.StringPtrOutput         `pulumi:"vdomparam"`
}

// NewSystemPcpServer registers a new resource with the given unique name, arguments, and options.
func NewSystemPcpServer(ctx *pulumi.Context,
	name string, args *SystemPcpServerArgs, opts ...pulumi.ResourceOption) (*SystemPcpServer, error) {
	if args == nil {
		args = &SystemPcpServerArgs{}
	}

	opts = internal.PkgResourceDefaultOpts(opts)
	var resource SystemPcpServer
	err := ctx.RegisterResource("fortios:index/systemPcpServer:SystemPcpServer", name, args, &resource, opts...)
	if err != nil {
		return nil, err
	}
	return &resource, nil
}

// GetSystemPcpServer gets an existing SystemPcpServer resource's state with the given name, ID, and optional
// state properties that are used to uniquely qualify the lookup (nil if not required).
func GetSystemPcpServer(ctx *pulumi.Context,
	name string, id pulumi.IDInput, state *SystemPcpServerState, opts ...pulumi.ResourceOption) (*SystemPcpServer, error) {
	var resource SystemPcpServer
	err := ctx.ReadResource("fortios:index/systemPcpServer:SystemPcpServer", name, id, state, &resource, opts...)
	if err != nil {
		return nil, err
	}
	return &resource, nil
}

// Input properties used for looking up and filtering SystemPcpServer resources.
type systemPcpServerState struct {
	DynamicSortSubtable *string               `pulumi:"dynamicSortSubtable"`
	GetAllTables        *string               `pulumi:"getAllTables"`
	Pools               []SystemPcpServerPool `pulumi:"pools"`
	Status              *string               `pulumi:"status"`
	Vdomparam           *string               `pulumi:"vdomparam"`
}

type SystemPcpServerState struct {
	DynamicSortSubtable pulumi.StringPtrInput
	GetAllTables        pulumi.StringPtrInput
	Pools               SystemPcpServerPoolArrayInput
	Status              pulumi.StringPtrInput
	Vdomparam           pulumi.StringPtrInput
}

func (SystemPcpServerState) ElementType() reflect.Type {
	return reflect.TypeOf((*systemPcpServerState)(nil)).Elem()
}

type systemPcpServerArgs struct {
	DynamicSortSubtable *string               `pulumi:"dynamicSortSubtable"`
	GetAllTables        *string               `pulumi:"getAllTables"`
	Pools               []SystemPcpServerPool `pulumi:"pools"`
	Status              *string               `pulumi:"status"`
	Vdomparam           *string               `pulumi:"vdomparam"`
}

// The set of arguments for constructing a SystemPcpServer resource.
type SystemPcpServerArgs struct {
	DynamicSortSubtable pulumi.StringPtrInput
	GetAllTables        pulumi.StringPtrInput
	Pools               SystemPcpServerPoolArrayInput
	Status              pulumi.StringPtrInput
	Vdomparam           pulumi.StringPtrInput
}

func (SystemPcpServerArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*systemPcpServerArgs)(nil)).Elem()
}

type SystemPcpServerInput interface {
	pulumi.Input

	ToSystemPcpServerOutput() SystemPcpServerOutput
	ToSystemPcpServerOutputWithContext(ctx context.Context) SystemPcpServerOutput
}

func (*SystemPcpServer) ElementType() reflect.Type {
	return reflect.TypeOf((**SystemPcpServer)(nil)).Elem()
}

func (i *SystemPcpServer) ToSystemPcpServerOutput() SystemPcpServerOutput {
	return i.ToSystemPcpServerOutputWithContext(context.Background())
}

func (i *SystemPcpServer) ToSystemPcpServerOutputWithContext(ctx context.Context) SystemPcpServerOutput {
	return pulumi.ToOutputWithContext(ctx, i).(SystemPcpServerOutput)
}

// SystemPcpServerArrayInput is an input type that accepts SystemPcpServerArray and SystemPcpServerArrayOutput values.
// You can construct a concrete instance of `SystemPcpServerArrayInput` via:
//
//	SystemPcpServerArray{ SystemPcpServerArgs{...} }
type SystemPcpServerArrayInput interface {
	pulumi.Input

	ToSystemPcpServerArrayOutput() SystemPcpServerArrayOutput
	ToSystemPcpServerArrayOutputWithContext(context.Context) SystemPcpServerArrayOutput
}

type SystemPcpServerArray []SystemPcpServerInput

func (SystemPcpServerArray) ElementType() reflect.Type {
	return reflect.TypeOf((*[]*SystemPcpServer)(nil)).Elem()
}

func (i SystemPcpServerArray) ToSystemPcpServerArrayOutput() SystemPcpServerArrayOutput {
	return i.ToSystemPcpServerArrayOutputWithContext(context.Background())
}

func (i SystemPcpServerArray) ToSystemPcpServerArrayOutputWithContext(ctx context.Context) SystemPcpServerArrayOutput {
	return pulumi.ToOutputWithContext(ctx, i).(SystemPcpServerArrayOutput)
}

// SystemPcpServerMapInput is an input type that accepts SystemPcpServerMap and SystemPcpServerMapOutput values.
// You can construct a concrete instance of `SystemPcpServerMapInput` via:
//
//	SystemPcpServerMap{ "key": SystemPcpServerArgs{...} }
type SystemPcpServerMapInput interface {
	pulumi.Input

	ToSystemPcpServerMapOutput() SystemPcpServerMapOutput
	ToSystemPcpServerMapOutputWithContext(context.Context) SystemPcpServerMapOutput
}

type SystemPcpServerMap map[string]SystemPcpServerInput

func (SystemPcpServerMap) ElementType() reflect.Type {
	return reflect.TypeOf((*map[string]*SystemPcpServer)(nil)).Elem()
}

func (i SystemPcpServerMap) ToSystemPcpServerMapOutput() SystemPcpServerMapOutput {
	return i.ToSystemPcpServerMapOutputWithContext(context.Background())
}

func (i SystemPcpServerMap) ToSystemPcpServerMapOutputWithContext(ctx context.Context) SystemPcpServerMapOutput {
	return pulumi.ToOutputWithContext(ctx, i).(SystemPcpServerMapOutput)
}

type SystemPcpServerOutput struct{ *pulumi.OutputState }

func (SystemPcpServerOutput) ElementType() reflect.Type {
	return reflect.TypeOf((**SystemPcpServer)(nil)).Elem()
}

func (o SystemPcpServerOutput) ToSystemPcpServerOutput() SystemPcpServerOutput {
	return o
}

func (o SystemPcpServerOutput) ToSystemPcpServerOutputWithContext(ctx context.Context) SystemPcpServerOutput {
	return o
}

func (o SystemPcpServerOutput) DynamicSortSubtable() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *SystemPcpServer) pulumi.StringPtrOutput { return v.DynamicSortSubtable }).(pulumi.StringPtrOutput)
}

func (o SystemPcpServerOutput) GetAllTables() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *SystemPcpServer) pulumi.StringPtrOutput { return v.GetAllTables }).(pulumi.StringPtrOutput)
}

func (o SystemPcpServerOutput) Pools() SystemPcpServerPoolArrayOutput {
	return o.ApplyT(func(v *SystemPcpServer) SystemPcpServerPoolArrayOutput { return v.Pools }).(SystemPcpServerPoolArrayOutput)
}

func (o SystemPcpServerOutput) Status() pulumi.StringOutput {
	return o.ApplyT(func(v *SystemPcpServer) pulumi.StringOutput { return v.Status }).(pulumi.StringOutput)
}

func (o SystemPcpServerOutput) Vdomparam() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *SystemPcpServer) pulumi.StringPtrOutput { return v.Vdomparam }).(pulumi.StringPtrOutput)
}

type SystemPcpServerArrayOutput struct{ *pulumi.OutputState }

func (SystemPcpServerArrayOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*[]*SystemPcpServer)(nil)).Elem()
}

func (o SystemPcpServerArrayOutput) ToSystemPcpServerArrayOutput() SystemPcpServerArrayOutput {
	return o
}

func (o SystemPcpServerArrayOutput) ToSystemPcpServerArrayOutputWithContext(ctx context.Context) SystemPcpServerArrayOutput {
	return o
}

func (o SystemPcpServerArrayOutput) Index(i pulumi.IntInput) SystemPcpServerOutput {
	return pulumi.All(o, i).ApplyT(func(vs []interface{}) *SystemPcpServer {
		return vs[0].([]*SystemPcpServer)[vs[1].(int)]
	}).(SystemPcpServerOutput)
}

type SystemPcpServerMapOutput struct{ *pulumi.OutputState }

func (SystemPcpServerMapOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*map[string]*SystemPcpServer)(nil)).Elem()
}

func (o SystemPcpServerMapOutput) ToSystemPcpServerMapOutput() SystemPcpServerMapOutput {
	return o
}

func (o SystemPcpServerMapOutput) ToSystemPcpServerMapOutputWithContext(ctx context.Context) SystemPcpServerMapOutput {
	return o
}

func (o SystemPcpServerMapOutput) MapIndex(k pulumi.StringInput) SystemPcpServerOutput {
	return pulumi.All(o, k).ApplyT(func(vs []interface{}) *SystemPcpServer {
		return vs[0].(map[string]*SystemPcpServer)[vs[1].(string)]
	}).(SystemPcpServerOutput)
}

func init() {
	pulumi.RegisterInputType(reflect.TypeOf((*SystemPcpServerInput)(nil)).Elem(), &SystemPcpServer{})
	pulumi.RegisterInputType(reflect.TypeOf((*SystemPcpServerArrayInput)(nil)).Elem(), SystemPcpServerArray{})
	pulumi.RegisterInputType(reflect.TypeOf((*SystemPcpServerMapInput)(nil)).Elem(), SystemPcpServerMap{})
	pulumi.RegisterOutputType(SystemPcpServerOutput{})
	pulumi.RegisterOutputType(SystemPcpServerArrayOutput{})
	pulumi.RegisterOutputType(SystemPcpServerMapOutput{})
}
