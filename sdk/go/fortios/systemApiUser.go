// Code generated by the Pulumi Terraform Bridge (tfgen) Tool DO NOT EDIT.
// *** WARNING: Do not edit by hand unless you're certain you know what you are doing! ***

package fortios

import (
	"context"
	"reflect"

	"errors"
	"github.com/pulumi/pulumi/sdk/v3/go/pulumi"
)

type SystemApiUser struct {
	pulumi.CustomResourceState

	Accprofile          pulumi.StringOutput               `pulumi:"accprofile"`
	ApiKey              pulumi.StringPtrOutput            `pulumi:"apiKey"`
	Comments            pulumi.StringPtrOutput            `pulumi:"comments"`
	CorsAllowOrigin     pulumi.StringOutput               `pulumi:"corsAllowOrigin"`
	DynamicSortSubtable pulumi.StringPtrOutput            `pulumi:"dynamicSortSubtable"`
	Name                pulumi.StringOutput               `pulumi:"name"`
	PeerAuth            pulumi.StringOutput               `pulumi:"peerAuth"`
	PeerGroup           pulumi.StringOutput               `pulumi:"peerGroup"`
	Schedule            pulumi.StringOutput               `pulumi:"schedule"`
	Trusthosts          SystemApiUserTrusthostArrayOutput `pulumi:"trusthosts"`
	Vdomparam           pulumi.StringPtrOutput            `pulumi:"vdomparam"`
	Vdoms               SystemApiUserVdomArrayOutput      `pulumi:"vdoms"`
}

// NewSystemApiUser registers a new resource with the given unique name, arguments, and options.
func NewSystemApiUser(ctx *pulumi.Context,
	name string, args *SystemApiUserArgs, opts ...pulumi.ResourceOption) (*SystemApiUser, error) {
	if args == nil {
		return nil, errors.New("missing one or more required arguments")
	}

	if args.Accprofile == nil {
		return nil, errors.New("invalid value for required argument 'Accprofile'")
	}
	if args.ApiKey != nil {
		args.ApiKey = pulumi.ToSecret(args.ApiKey).(pulumi.StringPtrInput)
	}
	secrets := pulumi.AdditionalSecretOutputs([]string{
		"apiKey",
	})
	opts = append(opts, secrets)
	opts = pkgResourceDefaultOpts(opts)
	var resource SystemApiUser
	err := ctx.RegisterResource("fortios:index/systemApiUser:SystemApiUser", name, args, &resource, opts...)
	if err != nil {
		return nil, err
	}
	return &resource, nil
}

// GetSystemApiUser gets an existing SystemApiUser resource's state with the given name, ID, and optional
// state properties that are used to uniquely qualify the lookup (nil if not required).
func GetSystemApiUser(ctx *pulumi.Context,
	name string, id pulumi.IDInput, state *SystemApiUserState, opts ...pulumi.ResourceOption) (*SystemApiUser, error) {
	var resource SystemApiUser
	err := ctx.ReadResource("fortios:index/systemApiUser:SystemApiUser", name, id, state, &resource, opts...)
	if err != nil {
		return nil, err
	}
	return &resource, nil
}

// Input properties used for looking up and filtering SystemApiUser resources.
type systemApiUserState struct {
	Accprofile          *string                  `pulumi:"accprofile"`
	ApiKey              *string                  `pulumi:"apiKey"`
	Comments            *string                  `pulumi:"comments"`
	CorsAllowOrigin     *string                  `pulumi:"corsAllowOrigin"`
	DynamicSortSubtable *string                  `pulumi:"dynamicSortSubtable"`
	Name                *string                  `pulumi:"name"`
	PeerAuth            *string                  `pulumi:"peerAuth"`
	PeerGroup           *string                  `pulumi:"peerGroup"`
	Schedule            *string                  `pulumi:"schedule"`
	Trusthosts          []SystemApiUserTrusthost `pulumi:"trusthosts"`
	Vdomparam           *string                  `pulumi:"vdomparam"`
	Vdoms               []SystemApiUserVdom      `pulumi:"vdoms"`
}

type SystemApiUserState struct {
	Accprofile          pulumi.StringPtrInput
	ApiKey              pulumi.StringPtrInput
	Comments            pulumi.StringPtrInput
	CorsAllowOrigin     pulumi.StringPtrInput
	DynamicSortSubtable pulumi.StringPtrInput
	Name                pulumi.StringPtrInput
	PeerAuth            pulumi.StringPtrInput
	PeerGroup           pulumi.StringPtrInput
	Schedule            pulumi.StringPtrInput
	Trusthosts          SystemApiUserTrusthostArrayInput
	Vdomparam           pulumi.StringPtrInput
	Vdoms               SystemApiUserVdomArrayInput
}

func (SystemApiUserState) ElementType() reflect.Type {
	return reflect.TypeOf((*systemApiUserState)(nil)).Elem()
}

type systemApiUserArgs struct {
	Accprofile          string                   `pulumi:"accprofile"`
	ApiKey              *string                  `pulumi:"apiKey"`
	Comments            *string                  `pulumi:"comments"`
	CorsAllowOrigin     *string                  `pulumi:"corsAllowOrigin"`
	DynamicSortSubtable *string                  `pulumi:"dynamicSortSubtable"`
	Name                *string                  `pulumi:"name"`
	PeerAuth            *string                  `pulumi:"peerAuth"`
	PeerGroup           *string                  `pulumi:"peerGroup"`
	Schedule            *string                  `pulumi:"schedule"`
	Trusthosts          []SystemApiUserTrusthost `pulumi:"trusthosts"`
	Vdomparam           *string                  `pulumi:"vdomparam"`
	Vdoms               []SystemApiUserVdom      `pulumi:"vdoms"`
}

// The set of arguments for constructing a SystemApiUser resource.
type SystemApiUserArgs struct {
	Accprofile          pulumi.StringInput
	ApiKey              pulumi.StringPtrInput
	Comments            pulumi.StringPtrInput
	CorsAllowOrigin     pulumi.StringPtrInput
	DynamicSortSubtable pulumi.StringPtrInput
	Name                pulumi.StringPtrInput
	PeerAuth            pulumi.StringPtrInput
	PeerGroup           pulumi.StringPtrInput
	Schedule            pulumi.StringPtrInput
	Trusthosts          SystemApiUserTrusthostArrayInput
	Vdomparam           pulumi.StringPtrInput
	Vdoms               SystemApiUserVdomArrayInput
}

func (SystemApiUserArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*systemApiUserArgs)(nil)).Elem()
}

type SystemApiUserInput interface {
	pulumi.Input

	ToSystemApiUserOutput() SystemApiUserOutput
	ToSystemApiUserOutputWithContext(ctx context.Context) SystemApiUserOutput
}

func (*SystemApiUser) ElementType() reflect.Type {
	return reflect.TypeOf((**SystemApiUser)(nil)).Elem()
}

func (i *SystemApiUser) ToSystemApiUserOutput() SystemApiUserOutput {
	return i.ToSystemApiUserOutputWithContext(context.Background())
}

func (i *SystemApiUser) ToSystemApiUserOutputWithContext(ctx context.Context) SystemApiUserOutput {
	return pulumi.ToOutputWithContext(ctx, i).(SystemApiUserOutput)
}

// SystemApiUserArrayInput is an input type that accepts SystemApiUserArray and SystemApiUserArrayOutput values.
// You can construct a concrete instance of `SystemApiUserArrayInput` via:
//
//	SystemApiUserArray{ SystemApiUserArgs{...} }
type SystemApiUserArrayInput interface {
	pulumi.Input

	ToSystemApiUserArrayOutput() SystemApiUserArrayOutput
	ToSystemApiUserArrayOutputWithContext(context.Context) SystemApiUserArrayOutput
}

type SystemApiUserArray []SystemApiUserInput

func (SystemApiUserArray) ElementType() reflect.Type {
	return reflect.TypeOf((*[]*SystemApiUser)(nil)).Elem()
}

func (i SystemApiUserArray) ToSystemApiUserArrayOutput() SystemApiUserArrayOutput {
	return i.ToSystemApiUserArrayOutputWithContext(context.Background())
}

func (i SystemApiUserArray) ToSystemApiUserArrayOutputWithContext(ctx context.Context) SystemApiUserArrayOutput {
	return pulumi.ToOutputWithContext(ctx, i).(SystemApiUserArrayOutput)
}

// SystemApiUserMapInput is an input type that accepts SystemApiUserMap and SystemApiUserMapOutput values.
// You can construct a concrete instance of `SystemApiUserMapInput` via:
//
//	SystemApiUserMap{ "key": SystemApiUserArgs{...} }
type SystemApiUserMapInput interface {
	pulumi.Input

	ToSystemApiUserMapOutput() SystemApiUserMapOutput
	ToSystemApiUserMapOutputWithContext(context.Context) SystemApiUserMapOutput
}

type SystemApiUserMap map[string]SystemApiUserInput

func (SystemApiUserMap) ElementType() reflect.Type {
	return reflect.TypeOf((*map[string]*SystemApiUser)(nil)).Elem()
}

func (i SystemApiUserMap) ToSystemApiUserMapOutput() SystemApiUserMapOutput {
	return i.ToSystemApiUserMapOutputWithContext(context.Background())
}

func (i SystemApiUserMap) ToSystemApiUserMapOutputWithContext(ctx context.Context) SystemApiUserMapOutput {
	return pulumi.ToOutputWithContext(ctx, i).(SystemApiUserMapOutput)
}

type SystemApiUserOutput struct{ *pulumi.OutputState }

func (SystemApiUserOutput) ElementType() reflect.Type {
	return reflect.TypeOf((**SystemApiUser)(nil)).Elem()
}

func (o SystemApiUserOutput) ToSystemApiUserOutput() SystemApiUserOutput {
	return o
}

func (o SystemApiUserOutput) ToSystemApiUserOutputWithContext(ctx context.Context) SystemApiUserOutput {
	return o
}

func (o SystemApiUserOutput) Accprofile() pulumi.StringOutput {
	return o.ApplyT(func(v *SystemApiUser) pulumi.StringOutput { return v.Accprofile }).(pulumi.StringOutput)
}

func (o SystemApiUserOutput) ApiKey() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *SystemApiUser) pulumi.StringPtrOutput { return v.ApiKey }).(pulumi.StringPtrOutput)
}

func (o SystemApiUserOutput) Comments() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *SystemApiUser) pulumi.StringPtrOutput { return v.Comments }).(pulumi.StringPtrOutput)
}

func (o SystemApiUserOutput) CorsAllowOrigin() pulumi.StringOutput {
	return o.ApplyT(func(v *SystemApiUser) pulumi.StringOutput { return v.CorsAllowOrigin }).(pulumi.StringOutput)
}

func (o SystemApiUserOutput) DynamicSortSubtable() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *SystemApiUser) pulumi.StringPtrOutput { return v.DynamicSortSubtable }).(pulumi.StringPtrOutput)
}

func (o SystemApiUserOutput) Name() pulumi.StringOutput {
	return o.ApplyT(func(v *SystemApiUser) pulumi.StringOutput { return v.Name }).(pulumi.StringOutput)
}

func (o SystemApiUserOutput) PeerAuth() pulumi.StringOutput {
	return o.ApplyT(func(v *SystemApiUser) pulumi.StringOutput { return v.PeerAuth }).(pulumi.StringOutput)
}

func (o SystemApiUserOutput) PeerGroup() pulumi.StringOutput {
	return o.ApplyT(func(v *SystemApiUser) pulumi.StringOutput { return v.PeerGroup }).(pulumi.StringOutput)
}

func (o SystemApiUserOutput) Schedule() pulumi.StringOutput {
	return o.ApplyT(func(v *SystemApiUser) pulumi.StringOutput { return v.Schedule }).(pulumi.StringOutput)
}

func (o SystemApiUserOutput) Trusthosts() SystemApiUserTrusthostArrayOutput {
	return o.ApplyT(func(v *SystemApiUser) SystemApiUserTrusthostArrayOutput { return v.Trusthosts }).(SystemApiUserTrusthostArrayOutput)
}

func (o SystemApiUserOutput) Vdomparam() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *SystemApiUser) pulumi.StringPtrOutput { return v.Vdomparam }).(pulumi.StringPtrOutput)
}

func (o SystemApiUserOutput) Vdoms() SystemApiUserVdomArrayOutput {
	return o.ApplyT(func(v *SystemApiUser) SystemApiUserVdomArrayOutput { return v.Vdoms }).(SystemApiUserVdomArrayOutput)
}

type SystemApiUserArrayOutput struct{ *pulumi.OutputState }

func (SystemApiUserArrayOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*[]*SystemApiUser)(nil)).Elem()
}

func (o SystemApiUserArrayOutput) ToSystemApiUserArrayOutput() SystemApiUserArrayOutput {
	return o
}

func (o SystemApiUserArrayOutput) ToSystemApiUserArrayOutputWithContext(ctx context.Context) SystemApiUserArrayOutput {
	return o
}

func (o SystemApiUserArrayOutput) Index(i pulumi.IntInput) SystemApiUserOutput {
	return pulumi.All(o, i).ApplyT(func(vs []interface{}) *SystemApiUser {
		return vs[0].([]*SystemApiUser)[vs[1].(int)]
	}).(SystemApiUserOutput)
}

type SystemApiUserMapOutput struct{ *pulumi.OutputState }

func (SystemApiUserMapOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*map[string]*SystemApiUser)(nil)).Elem()
}

func (o SystemApiUserMapOutput) ToSystemApiUserMapOutput() SystemApiUserMapOutput {
	return o
}

func (o SystemApiUserMapOutput) ToSystemApiUserMapOutputWithContext(ctx context.Context) SystemApiUserMapOutput {
	return o
}

func (o SystemApiUserMapOutput) MapIndex(k pulumi.StringInput) SystemApiUserOutput {
	return pulumi.All(o, k).ApplyT(func(vs []interface{}) *SystemApiUser {
		return vs[0].(map[string]*SystemApiUser)[vs[1].(string)]
	}).(SystemApiUserOutput)
}

func init() {
	pulumi.RegisterInputType(reflect.TypeOf((*SystemApiUserInput)(nil)).Elem(), &SystemApiUser{})
	pulumi.RegisterInputType(reflect.TypeOf((*SystemApiUserArrayInput)(nil)).Elem(), SystemApiUserArray{})
	pulumi.RegisterInputType(reflect.TypeOf((*SystemApiUserMapInput)(nil)).Elem(), SystemApiUserMap{})
	pulumi.RegisterOutputType(SystemApiUserOutput{})
	pulumi.RegisterOutputType(SystemApiUserArrayOutput{})
	pulumi.RegisterOutputType(SystemApiUserMapOutput{})
}
