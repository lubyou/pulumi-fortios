// Code generated by the Pulumi Terraform Bridge (tfgen) Tool DO NOT EDIT.
// *** WARNING: Do not edit by hand unless you're certain you know what you are doing! ***

package fortios

import (
	"context"
	"reflect"

	"github.com/lubyou/pulumi-fortios/sdk/go/fortios/internal"
	"github.com/pulumi/pulumi/sdk/v3/go/pulumi"
	"github.com/pulumi/pulumi/sdk/v3/go/pulumix"
)

type SystemIpam struct {
	pulumi.CustomResourceState

	AutomaticConflictResolution pulumi.StringOutput       `pulumi:"automaticConflictResolution"`
	DynamicSortSubtable         pulumi.StringPtrOutput    `pulumi:"dynamicSortSubtable"`
	GetAllTables                pulumi.StringPtrOutput    `pulumi:"getAllTables"`
	ManageLanAddresses          pulumi.StringOutput       `pulumi:"manageLanAddresses"`
	ManageLanExtensionAddresses pulumi.StringOutput       `pulumi:"manageLanExtensionAddresses"`
	ManageSsidAddresses         pulumi.StringOutput       `pulumi:"manageSsidAddresses"`
	PoolSubnet                  pulumi.StringOutput       `pulumi:"poolSubnet"`
	Pools                       SystemIpamPoolArrayOutput `pulumi:"pools"`
	Rules                       SystemIpamRuleArrayOutput `pulumi:"rules"`
	ServerType                  pulumi.StringOutput       `pulumi:"serverType"`
	Status                      pulumi.StringOutput       `pulumi:"status"`
	Vdomparam                   pulumi.StringPtrOutput    `pulumi:"vdomparam"`
}

// NewSystemIpam registers a new resource with the given unique name, arguments, and options.
func NewSystemIpam(ctx *pulumi.Context,
	name string, args *SystemIpamArgs, opts ...pulumi.ResourceOption) (*SystemIpam, error) {
	if args == nil {
		args = &SystemIpamArgs{}
	}

	opts = internal.PkgResourceDefaultOpts(opts)
	var resource SystemIpam
	err := ctx.RegisterResource("fortios:index/systemIpam:SystemIpam", name, args, &resource, opts...)
	if err != nil {
		return nil, err
	}
	return &resource, nil
}

// GetSystemIpam gets an existing SystemIpam resource's state with the given name, ID, and optional
// state properties that are used to uniquely qualify the lookup (nil if not required).
func GetSystemIpam(ctx *pulumi.Context,
	name string, id pulumi.IDInput, state *SystemIpamState, opts ...pulumi.ResourceOption) (*SystemIpam, error) {
	var resource SystemIpam
	err := ctx.ReadResource("fortios:index/systemIpam:SystemIpam", name, id, state, &resource, opts...)
	if err != nil {
		return nil, err
	}
	return &resource, nil
}

// Input properties used for looking up and filtering SystemIpam resources.
type systemIpamState struct {
	AutomaticConflictResolution *string          `pulumi:"automaticConflictResolution"`
	DynamicSortSubtable         *string          `pulumi:"dynamicSortSubtable"`
	GetAllTables                *string          `pulumi:"getAllTables"`
	ManageLanAddresses          *string          `pulumi:"manageLanAddresses"`
	ManageLanExtensionAddresses *string          `pulumi:"manageLanExtensionAddresses"`
	ManageSsidAddresses         *string          `pulumi:"manageSsidAddresses"`
	PoolSubnet                  *string          `pulumi:"poolSubnet"`
	Pools                       []SystemIpamPool `pulumi:"pools"`
	Rules                       []SystemIpamRule `pulumi:"rules"`
	ServerType                  *string          `pulumi:"serverType"`
	Status                      *string          `pulumi:"status"`
	Vdomparam                   *string          `pulumi:"vdomparam"`
}

type SystemIpamState struct {
	AutomaticConflictResolution pulumi.StringPtrInput
	DynamicSortSubtable         pulumi.StringPtrInput
	GetAllTables                pulumi.StringPtrInput
	ManageLanAddresses          pulumi.StringPtrInput
	ManageLanExtensionAddresses pulumi.StringPtrInput
	ManageSsidAddresses         pulumi.StringPtrInput
	PoolSubnet                  pulumi.StringPtrInput
	Pools                       SystemIpamPoolArrayInput
	Rules                       SystemIpamRuleArrayInput
	ServerType                  pulumi.StringPtrInput
	Status                      pulumi.StringPtrInput
	Vdomparam                   pulumi.StringPtrInput
}

func (SystemIpamState) ElementType() reflect.Type {
	return reflect.TypeOf((*systemIpamState)(nil)).Elem()
}

type systemIpamArgs struct {
	AutomaticConflictResolution *string          `pulumi:"automaticConflictResolution"`
	DynamicSortSubtable         *string          `pulumi:"dynamicSortSubtable"`
	GetAllTables                *string          `pulumi:"getAllTables"`
	ManageLanAddresses          *string          `pulumi:"manageLanAddresses"`
	ManageLanExtensionAddresses *string          `pulumi:"manageLanExtensionAddresses"`
	ManageSsidAddresses         *string          `pulumi:"manageSsidAddresses"`
	PoolSubnet                  *string          `pulumi:"poolSubnet"`
	Pools                       []SystemIpamPool `pulumi:"pools"`
	Rules                       []SystemIpamRule `pulumi:"rules"`
	ServerType                  *string          `pulumi:"serverType"`
	Status                      *string          `pulumi:"status"`
	Vdomparam                   *string          `pulumi:"vdomparam"`
}

// The set of arguments for constructing a SystemIpam resource.
type SystemIpamArgs struct {
	AutomaticConflictResolution pulumi.StringPtrInput
	DynamicSortSubtable         pulumi.StringPtrInput
	GetAllTables                pulumi.StringPtrInput
	ManageLanAddresses          pulumi.StringPtrInput
	ManageLanExtensionAddresses pulumi.StringPtrInput
	ManageSsidAddresses         pulumi.StringPtrInput
	PoolSubnet                  pulumi.StringPtrInput
	Pools                       SystemIpamPoolArrayInput
	Rules                       SystemIpamRuleArrayInput
	ServerType                  pulumi.StringPtrInput
	Status                      pulumi.StringPtrInput
	Vdomparam                   pulumi.StringPtrInput
}

func (SystemIpamArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*systemIpamArgs)(nil)).Elem()
}

type SystemIpamInput interface {
	pulumi.Input

	ToSystemIpamOutput() SystemIpamOutput
	ToSystemIpamOutputWithContext(ctx context.Context) SystemIpamOutput
}

func (*SystemIpam) ElementType() reflect.Type {
	return reflect.TypeOf((**SystemIpam)(nil)).Elem()
}

func (i *SystemIpam) ToSystemIpamOutput() SystemIpamOutput {
	return i.ToSystemIpamOutputWithContext(context.Background())
}

func (i *SystemIpam) ToSystemIpamOutputWithContext(ctx context.Context) SystemIpamOutput {
	return pulumi.ToOutputWithContext(ctx, i).(SystemIpamOutput)
}

func (i *SystemIpam) ToOutput(ctx context.Context) pulumix.Output[*SystemIpam] {
	return pulumix.Output[*SystemIpam]{
		OutputState: i.ToSystemIpamOutputWithContext(ctx).OutputState,
	}
}

// SystemIpamArrayInput is an input type that accepts SystemIpamArray and SystemIpamArrayOutput values.
// You can construct a concrete instance of `SystemIpamArrayInput` via:
//
//	SystemIpamArray{ SystemIpamArgs{...} }
type SystemIpamArrayInput interface {
	pulumi.Input

	ToSystemIpamArrayOutput() SystemIpamArrayOutput
	ToSystemIpamArrayOutputWithContext(context.Context) SystemIpamArrayOutput
}

type SystemIpamArray []SystemIpamInput

func (SystemIpamArray) ElementType() reflect.Type {
	return reflect.TypeOf((*[]*SystemIpam)(nil)).Elem()
}

func (i SystemIpamArray) ToSystemIpamArrayOutput() SystemIpamArrayOutput {
	return i.ToSystemIpamArrayOutputWithContext(context.Background())
}

func (i SystemIpamArray) ToSystemIpamArrayOutputWithContext(ctx context.Context) SystemIpamArrayOutput {
	return pulumi.ToOutputWithContext(ctx, i).(SystemIpamArrayOutput)
}

func (i SystemIpamArray) ToOutput(ctx context.Context) pulumix.Output[[]*SystemIpam] {
	return pulumix.Output[[]*SystemIpam]{
		OutputState: i.ToSystemIpamArrayOutputWithContext(ctx).OutputState,
	}
}

// SystemIpamMapInput is an input type that accepts SystemIpamMap and SystemIpamMapOutput values.
// You can construct a concrete instance of `SystemIpamMapInput` via:
//
//	SystemIpamMap{ "key": SystemIpamArgs{...} }
type SystemIpamMapInput interface {
	pulumi.Input

	ToSystemIpamMapOutput() SystemIpamMapOutput
	ToSystemIpamMapOutputWithContext(context.Context) SystemIpamMapOutput
}

type SystemIpamMap map[string]SystemIpamInput

func (SystemIpamMap) ElementType() reflect.Type {
	return reflect.TypeOf((*map[string]*SystemIpam)(nil)).Elem()
}

func (i SystemIpamMap) ToSystemIpamMapOutput() SystemIpamMapOutput {
	return i.ToSystemIpamMapOutputWithContext(context.Background())
}

func (i SystemIpamMap) ToSystemIpamMapOutputWithContext(ctx context.Context) SystemIpamMapOutput {
	return pulumi.ToOutputWithContext(ctx, i).(SystemIpamMapOutput)
}

func (i SystemIpamMap) ToOutput(ctx context.Context) pulumix.Output[map[string]*SystemIpam] {
	return pulumix.Output[map[string]*SystemIpam]{
		OutputState: i.ToSystemIpamMapOutputWithContext(ctx).OutputState,
	}
}

type SystemIpamOutput struct{ *pulumi.OutputState }

func (SystemIpamOutput) ElementType() reflect.Type {
	return reflect.TypeOf((**SystemIpam)(nil)).Elem()
}

func (o SystemIpamOutput) ToSystemIpamOutput() SystemIpamOutput {
	return o
}

func (o SystemIpamOutput) ToSystemIpamOutputWithContext(ctx context.Context) SystemIpamOutput {
	return o
}

func (o SystemIpamOutput) ToOutput(ctx context.Context) pulumix.Output[*SystemIpam] {
	return pulumix.Output[*SystemIpam]{
		OutputState: o.OutputState,
	}
}

func (o SystemIpamOutput) AutomaticConflictResolution() pulumi.StringOutput {
	return o.ApplyT(func(v *SystemIpam) pulumi.StringOutput { return v.AutomaticConflictResolution }).(pulumi.StringOutput)
}

func (o SystemIpamOutput) DynamicSortSubtable() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *SystemIpam) pulumi.StringPtrOutput { return v.DynamicSortSubtable }).(pulumi.StringPtrOutput)
}

func (o SystemIpamOutput) GetAllTables() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *SystemIpam) pulumi.StringPtrOutput { return v.GetAllTables }).(pulumi.StringPtrOutput)
}

func (o SystemIpamOutput) ManageLanAddresses() pulumi.StringOutput {
	return o.ApplyT(func(v *SystemIpam) pulumi.StringOutput { return v.ManageLanAddresses }).(pulumi.StringOutput)
}

func (o SystemIpamOutput) ManageLanExtensionAddresses() pulumi.StringOutput {
	return o.ApplyT(func(v *SystemIpam) pulumi.StringOutput { return v.ManageLanExtensionAddresses }).(pulumi.StringOutput)
}

func (o SystemIpamOutput) ManageSsidAddresses() pulumi.StringOutput {
	return o.ApplyT(func(v *SystemIpam) pulumi.StringOutput { return v.ManageSsidAddresses }).(pulumi.StringOutput)
}

func (o SystemIpamOutput) PoolSubnet() pulumi.StringOutput {
	return o.ApplyT(func(v *SystemIpam) pulumi.StringOutput { return v.PoolSubnet }).(pulumi.StringOutput)
}

func (o SystemIpamOutput) Pools() SystemIpamPoolArrayOutput {
	return o.ApplyT(func(v *SystemIpam) SystemIpamPoolArrayOutput { return v.Pools }).(SystemIpamPoolArrayOutput)
}

func (o SystemIpamOutput) Rules() SystemIpamRuleArrayOutput {
	return o.ApplyT(func(v *SystemIpam) SystemIpamRuleArrayOutput { return v.Rules }).(SystemIpamRuleArrayOutput)
}

func (o SystemIpamOutput) ServerType() pulumi.StringOutput {
	return o.ApplyT(func(v *SystemIpam) pulumi.StringOutput { return v.ServerType }).(pulumi.StringOutput)
}

func (o SystemIpamOutput) Status() pulumi.StringOutput {
	return o.ApplyT(func(v *SystemIpam) pulumi.StringOutput { return v.Status }).(pulumi.StringOutput)
}

func (o SystemIpamOutput) Vdomparam() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *SystemIpam) pulumi.StringPtrOutput { return v.Vdomparam }).(pulumi.StringPtrOutput)
}

type SystemIpamArrayOutput struct{ *pulumi.OutputState }

func (SystemIpamArrayOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*[]*SystemIpam)(nil)).Elem()
}

func (o SystemIpamArrayOutput) ToSystemIpamArrayOutput() SystemIpamArrayOutput {
	return o
}

func (o SystemIpamArrayOutput) ToSystemIpamArrayOutputWithContext(ctx context.Context) SystemIpamArrayOutput {
	return o
}

func (o SystemIpamArrayOutput) ToOutput(ctx context.Context) pulumix.Output[[]*SystemIpam] {
	return pulumix.Output[[]*SystemIpam]{
		OutputState: o.OutputState,
	}
}

func (o SystemIpamArrayOutput) Index(i pulumi.IntInput) SystemIpamOutput {
	return pulumi.All(o, i).ApplyT(func(vs []interface{}) *SystemIpam {
		return vs[0].([]*SystemIpam)[vs[1].(int)]
	}).(SystemIpamOutput)
}

type SystemIpamMapOutput struct{ *pulumi.OutputState }

func (SystemIpamMapOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*map[string]*SystemIpam)(nil)).Elem()
}

func (o SystemIpamMapOutput) ToSystemIpamMapOutput() SystemIpamMapOutput {
	return o
}

func (o SystemIpamMapOutput) ToSystemIpamMapOutputWithContext(ctx context.Context) SystemIpamMapOutput {
	return o
}

func (o SystemIpamMapOutput) ToOutput(ctx context.Context) pulumix.Output[map[string]*SystemIpam] {
	return pulumix.Output[map[string]*SystemIpam]{
		OutputState: o.OutputState,
	}
}

func (o SystemIpamMapOutput) MapIndex(k pulumi.StringInput) SystemIpamOutput {
	return pulumi.All(o, k).ApplyT(func(vs []interface{}) *SystemIpam {
		return vs[0].(map[string]*SystemIpam)[vs[1].(string)]
	}).(SystemIpamOutput)
}

func init() {
	pulumi.RegisterInputType(reflect.TypeOf((*SystemIpamInput)(nil)).Elem(), &SystemIpam{})
	pulumi.RegisterInputType(reflect.TypeOf((*SystemIpamArrayInput)(nil)).Elem(), SystemIpamArray{})
	pulumi.RegisterInputType(reflect.TypeOf((*SystemIpamMapInput)(nil)).Elem(), SystemIpamMap{})
	pulumi.RegisterOutputType(SystemIpamOutput{})
	pulumi.RegisterOutputType(SystemIpamArrayOutput{})
	pulumi.RegisterOutputType(SystemIpamMapOutput{})
}
