// Code generated by the Pulumi Terraform Bridge (tfgen) Tool DO NOT EDIT.
// *** WARNING: Do not edit by hand unless you're certain you know what you are doing! ***

package fortios

import (
	"context"
	"reflect"

	"github.com/lubyou/pulumi-fortios/sdk/go/fortios/internal"
	"github.com/pulumi/pulumi/sdk/v3/go/pulumi"
)

type UserAdgrp struct {
	pulumi.CustomResourceState

	ConnectorSource pulumi.StringOutput    `pulumi:"connectorSource"`
	Fosid           pulumi.IntOutput       `pulumi:"fosid"`
	Name            pulumi.StringOutput    `pulumi:"name"`
	ServerName      pulumi.StringOutput    `pulumi:"serverName"`
	Vdomparam       pulumi.StringPtrOutput `pulumi:"vdomparam"`
}

// NewUserAdgrp registers a new resource with the given unique name, arguments, and options.
func NewUserAdgrp(ctx *pulumi.Context,
	name string, args *UserAdgrpArgs, opts ...pulumi.ResourceOption) (*UserAdgrp, error) {
	if args == nil {
		args = &UserAdgrpArgs{}
	}

	opts = internal.PkgResourceDefaultOpts(opts)
	var resource UserAdgrp
	err := ctx.RegisterResource("fortios:index/userAdgrp:UserAdgrp", name, args, &resource, opts...)
	if err != nil {
		return nil, err
	}
	return &resource, nil
}

// GetUserAdgrp gets an existing UserAdgrp resource's state with the given name, ID, and optional
// state properties that are used to uniquely qualify the lookup (nil if not required).
func GetUserAdgrp(ctx *pulumi.Context,
	name string, id pulumi.IDInput, state *UserAdgrpState, opts ...pulumi.ResourceOption) (*UserAdgrp, error) {
	var resource UserAdgrp
	err := ctx.ReadResource("fortios:index/userAdgrp:UserAdgrp", name, id, state, &resource, opts...)
	if err != nil {
		return nil, err
	}
	return &resource, nil
}

// Input properties used for looking up and filtering UserAdgrp resources.
type userAdgrpState struct {
	ConnectorSource *string `pulumi:"connectorSource"`
	Fosid           *int    `pulumi:"fosid"`
	Name            *string `pulumi:"name"`
	ServerName      *string `pulumi:"serverName"`
	Vdomparam       *string `pulumi:"vdomparam"`
}

type UserAdgrpState struct {
	ConnectorSource pulumi.StringPtrInput
	Fosid           pulumi.IntPtrInput
	Name            pulumi.StringPtrInput
	ServerName      pulumi.StringPtrInput
	Vdomparam       pulumi.StringPtrInput
}

func (UserAdgrpState) ElementType() reflect.Type {
	return reflect.TypeOf((*userAdgrpState)(nil)).Elem()
}

type userAdgrpArgs struct {
	ConnectorSource *string `pulumi:"connectorSource"`
	Fosid           *int    `pulumi:"fosid"`
	Name            *string `pulumi:"name"`
	ServerName      *string `pulumi:"serverName"`
	Vdomparam       *string `pulumi:"vdomparam"`
}

// The set of arguments for constructing a UserAdgrp resource.
type UserAdgrpArgs struct {
	ConnectorSource pulumi.StringPtrInput
	Fosid           pulumi.IntPtrInput
	Name            pulumi.StringPtrInput
	ServerName      pulumi.StringPtrInput
	Vdomparam       pulumi.StringPtrInput
}

func (UserAdgrpArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*userAdgrpArgs)(nil)).Elem()
}

type UserAdgrpInput interface {
	pulumi.Input

	ToUserAdgrpOutput() UserAdgrpOutput
	ToUserAdgrpOutputWithContext(ctx context.Context) UserAdgrpOutput
}

func (*UserAdgrp) ElementType() reflect.Type {
	return reflect.TypeOf((**UserAdgrp)(nil)).Elem()
}

func (i *UserAdgrp) ToUserAdgrpOutput() UserAdgrpOutput {
	return i.ToUserAdgrpOutputWithContext(context.Background())
}

func (i *UserAdgrp) ToUserAdgrpOutputWithContext(ctx context.Context) UserAdgrpOutput {
	return pulumi.ToOutputWithContext(ctx, i).(UserAdgrpOutput)
}

// UserAdgrpArrayInput is an input type that accepts UserAdgrpArray and UserAdgrpArrayOutput values.
// You can construct a concrete instance of `UserAdgrpArrayInput` via:
//
//	UserAdgrpArray{ UserAdgrpArgs{...} }
type UserAdgrpArrayInput interface {
	pulumi.Input

	ToUserAdgrpArrayOutput() UserAdgrpArrayOutput
	ToUserAdgrpArrayOutputWithContext(context.Context) UserAdgrpArrayOutput
}

type UserAdgrpArray []UserAdgrpInput

func (UserAdgrpArray) ElementType() reflect.Type {
	return reflect.TypeOf((*[]*UserAdgrp)(nil)).Elem()
}

func (i UserAdgrpArray) ToUserAdgrpArrayOutput() UserAdgrpArrayOutput {
	return i.ToUserAdgrpArrayOutputWithContext(context.Background())
}

func (i UserAdgrpArray) ToUserAdgrpArrayOutputWithContext(ctx context.Context) UserAdgrpArrayOutput {
	return pulumi.ToOutputWithContext(ctx, i).(UserAdgrpArrayOutput)
}

// UserAdgrpMapInput is an input type that accepts UserAdgrpMap and UserAdgrpMapOutput values.
// You can construct a concrete instance of `UserAdgrpMapInput` via:
//
//	UserAdgrpMap{ "key": UserAdgrpArgs{...} }
type UserAdgrpMapInput interface {
	pulumi.Input

	ToUserAdgrpMapOutput() UserAdgrpMapOutput
	ToUserAdgrpMapOutputWithContext(context.Context) UserAdgrpMapOutput
}

type UserAdgrpMap map[string]UserAdgrpInput

func (UserAdgrpMap) ElementType() reflect.Type {
	return reflect.TypeOf((*map[string]*UserAdgrp)(nil)).Elem()
}

func (i UserAdgrpMap) ToUserAdgrpMapOutput() UserAdgrpMapOutput {
	return i.ToUserAdgrpMapOutputWithContext(context.Background())
}

func (i UserAdgrpMap) ToUserAdgrpMapOutputWithContext(ctx context.Context) UserAdgrpMapOutput {
	return pulumi.ToOutputWithContext(ctx, i).(UserAdgrpMapOutput)
}

type UserAdgrpOutput struct{ *pulumi.OutputState }

func (UserAdgrpOutput) ElementType() reflect.Type {
	return reflect.TypeOf((**UserAdgrp)(nil)).Elem()
}

func (o UserAdgrpOutput) ToUserAdgrpOutput() UserAdgrpOutput {
	return o
}

func (o UserAdgrpOutput) ToUserAdgrpOutputWithContext(ctx context.Context) UserAdgrpOutput {
	return o
}

func (o UserAdgrpOutput) ConnectorSource() pulumi.StringOutput {
	return o.ApplyT(func(v *UserAdgrp) pulumi.StringOutput { return v.ConnectorSource }).(pulumi.StringOutput)
}

func (o UserAdgrpOutput) Fosid() pulumi.IntOutput {
	return o.ApplyT(func(v *UserAdgrp) pulumi.IntOutput { return v.Fosid }).(pulumi.IntOutput)
}

func (o UserAdgrpOutput) Name() pulumi.StringOutput {
	return o.ApplyT(func(v *UserAdgrp) pulumi.StringOutput { return v.Name }).(pulumi.StringOutput)
}

func (o UserAdgrpOutput) ServerName() pulumi.StringOutput {
	return o.ApplyT(func(v *UserAdgrp) pulumi.StringOutput { return v.ServerName }).(pulumi.StringOutput)
}

func (o UserAdgrpOutput) Vdomparam() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *UserAdgrp) pulumi.StringPtrOutput { return v.Vdomparam }).(pulumi.StringPtrOutput)
}

type UserAdgrpArrayOutput struct{ *pulumi.OutputState }

func (UserAdgrpArrayOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*[]*UserAdgrp)(nil)).Elem()
}

func (o UserAdgrpArrayOutput) ToUserAdgrpArrayOutput() UserAdgrpArrayOutput {
	return o
}

func (o UserAdgrpArrayOutput) ToUserAdgrpArrayOutputWithContext(ctx context.Context) UserAdgrpArrayOutput {
	return o
}

func (o UserAdgrpArrayOutput) Index(i pulumi.IntInput) UserAdgrpOutput {
	return pulumi.All(o, i).ApplyT(func(vs []interface{}) *UserAdgrp {
		return vs[0].([]*UserAdgrp)[vs[1].(int)]
	}).(UserAdgrpOutput)
}

type UserAdgrpMapOutput struct{ *pulumi.OutputState }

func (UserAdgrpMapOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*map[string]*UserAdgrp)(nil)).Elem()
}

func (o UserAdgrpMapOutput) ToUserAdgrpMapOutput() UserAdgrpMapOutput {
	return o
}

func (o UserAdgrpMapOutput) ToUserAdgrpMapOutputWithContext(ctx context.Context) UserAdgrpMapOutput {
	return o
}

func (o UserAdgrpMapOutput) MapIndex(k pulumi.StringInput) UserAdgrpOutput {
	return pulumi.All(o, k).ApplyT(func(vs []interface{}) *UserAdgrp {
		return vs[0].(map[string]*UserAdgrp)[vs[1].(string)]
	}).(UserAdgrpOutput)
}

func init() {
	pulumi.RegisterInputType(reflect.TypeOf((*UserAdgrpInput)(nil)).Elem(), &UserAdgrp{})
	pulumi.RegisterInputType(reflect.TypeOf((*UserAdgrpArrayInput)(nil)).Elem(), UserAdgrpArray{})
	pulumi.RegisterInputType(reflect.TypeOf((*UserAdgrpMapInput)(nil)).Elem(), UserAdgrpMap{})
	pulumi.RegisterOutputType(UserAdgrpOutput{})
	pulumi.RegisterOutputType(UserAdgrpArrayOutput{})
	pulumi.RegisterOutputType(UserAdgrpMapOutput{})
}
