// Code generated by the Pulumi Terraform Bridge (tfgen) Tool DO NOT EDIT.
// *** WARNING: Do not edit by hand unless you're certain you know what you are doing! ***

package fortios

import (
	"context"
	"reflect"

	"errors"
	"github.com/pulumi/pulumi/sdk/v3/go/pulumi"
)

type VpnIpsecPhase2 struct {
	pulumi.CustomResourceState

	AddRoute          pulumi.StringOutput    `pulumi:"addRoute"`
	AutoNegotiate     pulumi.StringOutput    `pulumi:"autoNegotiate"`
	Comments          pulumi.StringPtrOutput `pulumi:"comments"`
	DhcpIpsec         pulumi.StringOutput    `pulumi:"dhcpIpsec"`
	Dhgrp             pulumi.StringOutput    `pulumi:"dhgrp"`
	Diffserv          pulumi.StringOutput    `pulumi:"diffserv"`
	Diffservcode      pulumi.StringOutput    `pulumi:"diffservcode"`
	DstAddrType       pulumi.StringOutput    `pulumi:"dstAddrType"`
	DstEndIp          pulumi.StringOutput    `pulumi:"dstEndIp"`
	DstEndIp6         pulumi.StringOutput    `pulumi:"dstEndIp6"`
	DstName           pulumi.StringOutput    `pulumi:"dstName"`
	DstName6          pulumi.StringOutput    `pulumi:"dstName6"`
	DstPort           pulumi.IntOutput       `pulumi:"dstPort"`
	DstStartIp        pulumi.StringOutput    `pulumi:"dstStartIp"`
	DstStartIp6       pulumi.StringOutput    `pulumi:"dstStartIp6"`
	DstSubnet         pulumi.StringOutput    `pulumi:"dstSubnet"`
	DstSubnet6        pulumi.StringOutput    `pulumi:"dstSubnet6"`
	Encapsulation     pulumi.StringOutput    `pulumi:"encapsulation"`
	InboundDscpCopy   pulumi.StringOutput    `pulumi:"inboundDscpCopy"`
	InitiatorTsNarrow pulumi.StringOutput    `pulumi:"initiatorTsNarrow"`
	Ipv4Df            pulumi.StringOutput    `pulumi:"ipv4Df"`
	Keepalive         pulumi.StringOutput    `pulumi:"keepalive"`
	KeylifeType       pulumi.StringOutput    `pulumi:"keylifeType"`
	Keylifekbs        pulumi.IntOutput       `pulumi:"keylifekbs"`
	Keylifeseconds    pulumi.IntOutput       `pulumi:"keylifeseconds"`
	L2tp              pulumi.StringOutput    `pulumi:"l2tp"`
	Name              pulumi.StringOutput    `pulumi:"name"`
	Pfs               pulumi.StringOutput    `pulumi:"pfs"`
	Phase1name        pulumi.StringOutput    `pulumi:"phase1name"`
	Proposal          pulumi.StringOutput    `pulumi:"proposal"`
	Protocol          pulumi.IntOutput       `pulumi:"protocol"`
	Replay            pulumi.StringOutput    `pulumi:"replay"`
	RouteOverlap      pulumi.StringOutput    `pulumi:"routeOverlap"`
	SelectorMatch     pulumi.StringOutput    `pulumi:"selectorMatch"`
	SingleSource      pulumi.StringOutput    `pulumi:"singleSource"`
	SrcAddrType       pulumi.StringOutput    `pulumi:"srcAddrType"`
	SrcEndIp          pulumi.StringOutput    `pulumi:"srcEndIp"`
	SrcEndIp6         pulumi.StringOutput    `pulumi:"srcEndIp6"`
	SrcName           pulumi.StringOutput    `pulumi:"srcName"`
	SrcName6          pulumi.StringOutput    `pulumi:"srcName6"`
	SrcPort           pulumi.IntOutput       `pulumi:"srcPort"`
	SrcStartIp        pulumi.StringOutput    `pulumi:"srcStartIp"`
	SrcStartIp6       pulumi.StringOutput    `pulumi:"srcStartIp6"`
	SrcSubnet         pulumi.StringOutput    `pulumi:"srcSubnet"`
	SrcSubnet6        pulumi.StringOutput    `pulumi:"srcSubnet6"`
	UseNatip          pulumi.StringOutput    `pulumi:"useNatip"`
	Vdomparam         pulumi.StringPtrOutput `pulumi:"vdomparam"`
}

// NewVpnIpsecPhase2 registers a new resource with the given unique name, arguments, and options.
func NewVpnIpsecPhase2(ctx *pulumi.Context,
	name string, args *VpnIpsecPhase2Args, opts ...pulumi.ResourceOption) (*VpnIpsecPhase2, error) {
	if args == nil {
		return nil, errors.New("missing one or more required arguments")
	}

	if args.Phase1name == nil {
		return nil, errors.New("invalid value for required argument 'Phase1name'")
	}
	if args.Proposal == nil {
		return nil, errors.New("invalid value for required argument 'Proposal'")
	}
	opts = pkgResourceDefaultOpts(opts)
	var resource VpnIpsecPhase2
	err := ctx.RegisterResource("fortios:index/vpnIpsecPhase2:VpnIpsecPhase2", name, args, &resource, opts...)
	if err != nil {
		return nil, err
	}
	return &resource, nil
}

// GetVpnIpsecPhase2 gets an existing VpnIpsecPhase2 resource's state with the given name, ID, and optional
// state properties that are used to uniquely qualify the lookup (nil if not required).
func GetVpnIpsecPhase2(ctx *pulumi.Context,
	name string, id pulumi.IDInput, state *VpnIpsecPhase2State, opts ...pulumi.ResourceOption) (*VpnIpsecPhase2, error) {
	var resource VpnIpsecPhase2
	err := ctx.ReadResource("fortios:index/vpnIpsecPhase2:VpnIpsecPhase2", name, id, state, &resource, opts...)
	if err != nil {
		return nil, err
	}
	return &resource, nil
}

// Input properties used for looking up and filtering VpnIpsecPhase2 resources.
type vpnIpsecPhase2State struct {
	AddRoute          *string `pulumi:"addRoute"`
	AutoNegotiate     *string `pulumi:"autoNegotiate"`
	Comments          *string `pulumi:"comments"`
	DhcpIpsec         *string `pulumi:"dhcpIpsec"`
	Dhgrp             *string `pulumi:"dhgrp"`
	Diffserv          *string `pulumi:"diffserv"`
	Diffservcode      *string `pulumi:"diffservcode"`
	DstAddrType       *string `pulumi:"dstAddrType"`
	DstEndIp          *string `pulumi:"dstEndIp"`
	DstEndIp6         *string `pulumi:"dstEndIp6"`
	DstName           *string `pulumi:"dstName"`
	DstName6          *string `pulumi:"dstName6"`
	DstPort           *int    `pulumi:"dstPort"`
	DstStartIp        *string `pulumi:"dstStartIp"`
	DstStartIp6       *string `pulumi:"dstStartIp6"`
	DstSubnet         *string `pulumi:"dstSubnet"`
	DstSubnet6        *string `pulumi:"dstSubnet6"`
	Encapsulation     *string `pulumi:"encapsulation"`
	InboundDscpCopy   *string `pulumi:"inboundDscpCopy"`
	InitiatorTsNarrow *string `pulumi:"initiatorTsNarrow"`
	Ipv4Df            *string `pulumi:"ipv4Df"`
	Keepalive         *string `pulumi:"keepalive"`
	KeylifeType       *string `pulumi:"keylifeType"`
	Keylifekbs        *int    `pulumi:"keylifekbs"`
	Keylifeseconds    *int    `pulumi:"keylifeseconds"`
	L2tp              *string `pulumi:"l2tp"`
	Name              *string `pulumi:"name"`
	Pfs               *string `pulumi:"pfs"`
	Phase1name        *string `pulumi:"phase1name"`
	Proposal          *string `pulumi:"proposal"`
	Protocol          *int    `pulumi:"protocol"`
	Replay            *string `pulumi:"replay"`
	RouteOverlap      *string `pulumi:"routeOverlap"`
	SelectorMatch     *string `pulumi:"selectorMatch"`
	SingleSource      *string `pulumi:"singleSource"`
	SrcAddrType       *string `pulumi:"srcAddrType"`
	SrcEndIp          *string `pulumi:"srcEndIp"`
	SrcEndIp6         *string `pulumi:"srcEndIp6"`
	SrcName           *string `pulumi:"srcName"`
	SrcName6          *string `pulumi:"srcName6"`
	SrcPort           *int    `pulumi:"srcPort"`
	SrcStartIp        *string `pulumi:"srcStartIp"`
	SrcStartIp6       *string `pulumi:"srcStartIp6"`
	SrcSubnet         *string `pulumi:"srcSubnet"`
	SrcSubnet6        *string `pulumi:"srcSubnet6"`
	UseNatip          *string `pulumi:"useNatip"`
	Vdomparam         *string `pulumi:"vdomparam"`
}

type VpnIpsecPhase2State struct {
	AddRoute          pulumi.StringPtrInput
	AutoNegotiate     pulumi.StringPtrInput
	Comments          pulumi.StringPtrInput
	DhcpIpsec         pulumi.StringPtrInput
	Dhgrp             pulumi.StringPtrInput
	Diffserv          pulumi.StringPtrInput
	Diffservcode      pulumi.StringPtrInput
	DstAddrType       pulumi.StringPtrInput
	DstEndIp          pulumi.StringPtrInput
	DstEndIp6         pulumi.StringPtrInput
	DstName           pulumi.StringPtrInput
	DstName6          pulumi.StringPtrInput
	DstPort           pulumi.IntPtrInput
	DstStartIp        pulumi.StringPtrInput
	DstStartIp6       pulumi.StringPtrInput
	DstSubnet         pulumi.StringPtrInput
	DstSubnet6        pulumi.StringPtrInput
	Encapsulation     pulumi.StringPtrInput
	InboundDscpCopy   pulumi.StringPtrInput
	InitiatorTsNarrow pulumi.StringPtrInput
	Ipv4Df            pulumi.StringPtrInput
	Keepalive         pulumi.StringPtrInput
	KeylifeType       pulumi.StringPtrInput
	Keylifekbs        pulumi.IntPtrInput
	Keylifeseconds    pulumi.IntPtrInput
	L2tp              pulumi.StringPtrInput
	Name              pulumi.StringPtrInput
	Pfs               pulumi.StringPtrInput
	Phase1name        pulumi.StringPtrInput
	Proposal          pulumi.StringPtrInput
	Protocol          pulumi.IntPtrInput
	Replay            pulumi.StringPtrInput
	RouteOverlap      pulumi.StringPtrInput
	SelectorMatch     pulumi.StringPtrInput
	SingleSource      pulumi.StringPtrInput
	SrcAddrType       pulumi.StringPtrInput
	SrcEndIp          pulumi.StringPtrInput
	SrcEndIp6         pulumi.StringPtrInput
	SrcName           pulumi.StringPtrInput
	SrcName6          pulumi.StringPtrInput
	SrcPort           pulumi.IntPtrInput
	SrcStartIp        pulumi.StringPtrInput
	SrcStartIp6       pulumi.StringPtrInput
	SrcSubnet         pulumi.StringPtrInput
	SrcSubnet6        pulumi.StringPtrInput
	UseNatip          pulumi.StringPtrInput
	Vdomparam         pulumi.StringPtrInput
}

func (VpnIpsecPhase2State) ElementType() reflect.Type {
	return reflect.TypeOf((*vpnIpsecPhase2State)(nil)).Elem()
}

type vpnIpsecPhase2Args struct {
	AddRoute          *string `pulumi:"addRoute"`
	AutoNegotiate     *string `pulumi:"autoNegotiate"`
	Comments          *string `pulumi:"comments"`
	DhcpIpsec         *string `pulumi:"dhcpIpsec"`
	Dhgrp             *string `pulumi:"dhgrp"`
	Diffserv          *string `pulumi:"diffserv"`
	Diffservcode      *string `pulumi:"diffservcode"`
	DstAddrType       *string `pulumi:"dstAddrType"`
	DstEndIp          *string `pulumi:"dstEndIp"`
	DstEndIp6         *string `pulumi:"dstEndIp6"`
	DstName           *string `pulumi:"dstName"`
	DstName6          *string `pulumi:"dstName6"`
	DstPort           *int    `pulumi:"dstPort"`
	DstStartIp        *string `pulumi:"dstStartIp"`
	DstStartIp6       *string `pulumi:"dstStartIp6"`
	DstSubnet         *string `pulumi:"dstSubnet"`
	DstSubnet6        *string `pulumi:"dstSubnet6"`
	Encapsulation     *string `pulumi:"encapsulation"`
	InboundDscpCopy   *string `pulumi:"inboundDscpCopy"`
	InitiatorTsNarrow *string `pulumi:"initiatorTsNarrow"`
	Ipv4Df            *string `pulumi:"ipv4Df"`
	Keepalive         *string `pulumi:"keepalive"`
	KeylifeType       *string `pulumi:"keylifeType"`
	Keylifekbs        *int    `pulumi:"keylifekbs"`
	Keylifeseconds    *int    `pulumi:"keylifeseconds"`
	L2tp              *string `pulumi:"l2tp"`
	Name              *string `pulumi:"name"`
	Pfs               *string `pulumi:"pfs"`
	Phase1name        string  `pulumi:"phase1name"`
	Proposal          string  `pulumi:"proposal"`
	Protocol          *int    `pulumi:"protocol"`
	Replay            *string `pulumi:"replay"`
	RouteOverlap      *string `pulumi:"routeOverlap"`
	SelectorMatch     *string `pulumi:"selectorMatch"`
	SingleSource      *string `pulumi:"singleSource"`
	SrcAddrType       *string `pulumi:"srcAddrType"`
	SrcEndIp          *string `pulumi:"srcEndIp"`
	SrcEndIp6         *string `pulumi:"srcEndIp6"`
	SrcName           *string `pulumi:"srcName"`
	SrcName6          *string `pulumi:"srcName6"`
	SrcPort           *int    `pulumi:"srcPort"`
	SrcStartIp        *string `pulumi:"srcStartIp"`
	SrcStartIp6       *string `pulumi:"srcStartIp6"`
	SrcSubnet         *string `pulumi:"srcSubnet"`
	SrcSubnet6        *string `pulumi:"srcSubnet6"`
	UseNatip          *string `pulumi:"useNatip"`
	Vdomparam         *string `pulumi:"vdomparam"`
}

// The set of arguments for constructing a VpnIpsecPhase2 resource.
type VpnIpsecPhase2Args struct {
	AddRoute          pulumi.StringPtrInput
	AutoNegotiate     pulumi.StringPtrInput
	Comments          pulumi.StringPtrInput
	DhcpIpsec         pulumi.StringPtrInput
	Dhgrp             pulumi.StringPtrInput
	Diffserv          pulumi.StringPtrInput
	Diffservcode      pulumi.StringPtrInput
	DstAddrType       pulumi.StringPtrInput
	DstEndIp          pulumi.StringPtrInput
	DstEndIp6         pulumi.StringPtrInput
	DstName           pulumi.StringPtrInput
	DstName6          pulumi.StringPtrInput
	DstPort           pulumi.IntPtrInput
	DstStartIp        pulumi.StringPtrInput
	DstStartIp6       pulumi.StringPtrInput
	DstSubnet         pulumi.StringPtrInput
	DstSubnet6        pulumi.StringPtrInput
	Encapsulation     pulumi.StringPtrInput
	InboundDscpCopy   pulumi.StringPtrInput
	InitiatorTsNarrow pulumi.StringPtrInput
	Ipv4Df            pulumi.StringPtrInput
	Keepalive         pulumi.StringPtrInput
	KeylifeType       pulumi.StringPtrInput
	Keylifekbs        pulumi.IntPtrInput
	Keylifeseconds    pulumi.IntPtrInput
	L2tp              pulumi.StringPtrInput
	Name              pulumi.StringPtrInput
	Pfs               pulumi.StringPtrInput
	Phase1name        pulumi.StringInput
	Proposal          pulumi.StringInput
	Protocol          pulumi.IntPtrInput
	Replay            pulumi.StringPtrInput
	RouteOverlap      pulumi.StringPtrInput
	SelectorMatch     pulumi.StringPtrInput
	SingleSource      pulumi.StringPtrInput
	SrcAddrType       pulumi.StringPtrInput
	SrcEndIp          pulumi.StringPtrInput
	SrcEndIp6         pulumi.StringPtrInput
	SrcName           pulumi.StringPtrInput
	SrcName6          pulumi.StringPtrInput
	SrcPort           pulumi.IntPtrInput
	SrcStartIp        pulumi.StringPtrInput
	SrcStartIp6       pulumi.StringPtrInput
	SrcSubnet         pulumi.StringPtrInput
	SrcSubnet6        pulumi.StringPtrInput
	UseNatip          pulumi.StringPtrInput
	Vdomparam         pulumi.StringPtrInput
}

func (VpnIpsecPhase2Args) ElementType() reflect.Type {
	return reflect.TypeOf((*vpnIpsecPhase2Args)(nil)).Elem()
}

type VpnIpsecPhase2Input interface {
	pulumi.Input

	ToVpnIpsecPhase2Output() VpnIpsecPhase2Output
	ToVpnIpsecPhase2OutputWithContext(ctx context.Context) VpnIpsecPhase2Output
}

func (*VpnIpsecPhase2) ElementType() reflect.Type {
	return reflect.TypeOf((**VpnIpsecPhase2)(nil)).Elem()
}

func (i *VpnIpsecPhase2) ToVpnIpsecPhase2Output() VpnIpsecPhase2Output {
	return i.ToVpnIpsecPhase2OutputWithContext(context.Background())
}

func (i *VpnIpsecPhase2) ToVpnIpsecPhase2OutputWithContext(ctx context.Context) VpnIpsecPhase2Output {
	return pulumi.ToOutputWithContext(ctx, i).(VpnIpsecPhase2Output)
}

// VpnIpsecPhase2ArrayInput is an input type that accepts VpnIpsecPhase2Array and VpnIpsecPhase2ArrayOutput values.
// You can construct a concrete instance of `VpnIpsecPhase2ArrayInput` via:
//
//	VpnIpsecPhase2Array{ VpnIpsecPhase2Args{...} }
type VpnIpsecPhase2ArrayInput interface {
	pulumi.Input

	ToVpnIpsecPhase2ArrayOutput() VpnIpsecPhase2ArrayOutput
	ToVpnIpsecPhase2ArrayOutputWithContext(context.Context) VpnIpsecPhase2ArrayOutput
}

type VpnIpsecPhase2Array []VpnIpsecPhase2Input

func (VpnIpsecPhase2Array) ElementType() reflect.Type {
	return reflect.TypeOf((*[]*VpnIpsecPhase2)(nil)).Elem()
}

func (i VpnIpsecPhase2Array) ToVpnIpsecPhase2ArrayOutput() VpnIpsecPhase2ArrayOutput {
	return i.ToVpnIpsecPhase2ArrayOutputWithContext(context.Background())
}

func (i VpnIpsecPhase2Array) ToVpnIpsecPhase2ArrayOutputWithContext(ctx context.Context) VpnIpsecPhase2ArrayOutput {
	return pulumi.ToOutputWithContext(ctx, i).(VpnIpsecPhase2ArrayOutput)
}

// VpnIpsecPhase2MapInput is an input type that accepts VpnIpsecPhase2Map and VpnIpsecPhase2MapOutput values.
// You can construct a concrete instance of `VpnIpsecPhase2MapInput` via:
//
//	VpnIpsecPhase2Map{ "key": VpnIpsecPhase2Args{...} }
type VpnIpsecPhase2MapInput interface {
	pulumi.Input

	ToVpnIpsecPhase2MapOutput() VpnIpsecPhase2MapOutput
	ToVpnIpsecPhase2MapOutputWithContext(context.Context) VpnIpsecPhase2MapOutput
}

type VpnIpsecPhase2Map map[string]VpnIpsecPhase2Input

func (VpnIpsecPhase2Map) ElementType() reflect.Type {
	return reflect.TypeOf((*map[string]*VpnIpsecPhase2)(nil)).Elem()
}

func (i VpnIpsecPhase2Map) ToVpnIpsecPhase2MapOutput() VpnIpsecPhase2MapOutput {
	return i.ToVpnIpsecPhase2MapOutputWithContext(context.Background())
}

func (i VpnIpsecPhase2Map) ToVpnIpsecPhase2MapOutputWithContext(ctx context.Context) VpnIpsecPhase2MapOutput {
	return pulumi.ToOutputWithContext(ctx, i).(VpnIpsecPhase2MapOutput)
}

type VpnIpsecPhase2Output struct{ *pulumi.OutputState }

func (VpnIpsecPhase2Output) ElementType() reflect.Type {
	return reflect.TypeOf((**VpnIpsecPhase2)(nil)).Elem()
}

func (o VpnIpsecPhase2Output) ToVpnIpsecPhase2Output() VpnIpsecPhase2Output {
	return o
}

func (o VpnIpsecPhase2Output) ToVpnIpsecPhase2OutputWithContext(ctx context.Context) VpnIpsecPhase2Output {
	return o
}

func (o VpnIpsecPhase2Output) AddRoute() pulumi.StringOutput {
	return o.ApplyT(func(v *VpnIpsecPhase2) pulumi.StringOutput { return v.AddRoute }).(pulumi.StringOutput)
}

func (o VpnIpsecPhase2Output) AutoNegotiate() pulumi.StringOutput {
	return o.ApplyT(func(v *VpnIpsecPhase2) pulumi.StringOutput { return v.AutoNegotiate }).(pulumi.StringOutput)
}

func (o VpnIpsecPhase2Output) Comments() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *VpnIpsecPhase2) pulumi.StringPtrOutput { return v.Comments }).(pulumi.StringPtrOutput)
}

func (o VpnIpsecPhase2Output) DhcpIpsec() pulumi.StringOutput {
	return o.ApplyT(func(v *VpnIpsecPhase2) pulumi.StringOutput { return v.DhcpIpsec }).(pulumi.StringOutput)
}

func (o VpnIpsecPhase2Output) Dhgrp() pulumi.StringOutput {
	return o.ApplyT(func(v *VpnIpsecPhase2) pulumi.StringOutput { return v.Dhgrp }).(pulumi.StringOutput)
}

func (o VpnIpsecPhase2Output) Diffserv() pulumi.StringOutput {
	return o.ApplyT(func(v *VpnIpsecPhase2) pulumi.StringOutput { return v.Diffserv }).(pulumi.StringOutput)
}

func (o VpnIpsecPhase2Output) Diffservcode() pulumi.StringOutput {
	return o.ApplyT(func(v *VpnIpsecPhase2) pulumi.StringOutput { return v.Diffservcode }).(pulumi.StringOutput)
}

func (o VpnIpsecPhase2Output) DstAddrType() pulumi.StringOutput {
	return o.ApplyT(func(v *VpnIpsecPhase2) pulumi.StringOutput { return v.DstAddrType }).(pulumi.StringOutput)
}

func (o VpnIpsecPhase2Output) DstEndIp() pulumi.StringOutput {
	return o.ApplyT(func(v *VpnIpsecPhase2) pulumi.StringOutput { return v.DstEndIp }).(pulumi.StringOutput)
}

func (o VpnIpsecPhase2Output) DstEndIp6() pulumi.StringOutput {
	return o.ApplyT(func(v *VpnIpsecPhase2) pulumi.StringOutput { return v.DstEndIp6 }).(pulumi.StringOutput)
}

func (o VpnIpsecPhase2Output) DstName() pulumi.StringOutput {
	return o.ApplyT(func(v *VpnIpsecPhase2) pulumi.StringOutput { return v.DstName }).(pulumi.StringOutput)
}

func (o VpnIpsecPhase2Output) DstName6() pulumi.StringOutput {
	return o.ApplyT(func(v *VpnIpsecPhase2) pulumi.StringOutput { return v.DstName6 }).(pulumi.StringOutput)
}

func (o VpnIpsecPhase2Output) DstPort() pulumi.IntOutput {
	return o.ApplyT(func(v *VpnIpsecPhase2) pulumi.IntOutput { return v.DstPort }).(pulumi.IntOutput)
}

func (o VpnIpsecPhase2Output) DstStartIp() pulumi.StringOutput {
	return o.ApplyT(func(v *VpnIpsecPhase2) pulumi.StringOutput { return v.DstStartIp }).(pulumi.StringOutput)
}

func (o VpnIpsecPhase2Output) DstStartIp6() pulumi.StringOutput {
	return o.ApplyT(func(v *VpnIpsecPhase2) pulumi.StringOutput { return v.DstStartIp6 }).(pulumi.StringOutput)
}

func (o VpnIpsecPhase2Output) DstSubnet() pulumi.StringOutput {
	return o.ApplyT(func(v *VpnIpsecPhase2) pulumi.StringOutput { return v.DstSubnet }).(pulumi.StringOutput)
}

func (o VpnIpsecPhase2Output) DstSubnet6() pulumi.StringOutput {
	return o.ApplyT(func(v *VpnIpsecPhase2) pulumi.StringOutput { return v.DstSubnet6 }).(pulumi.StringOutput)
}

func (o VpnIpsecPhase2Output) Encapsulation() pulumi.StringOutput {
	return o.ApplyT(func(v *VpnIpsecPhase2) pulumi.StringOutput { return v.Encapsulation }).(pulumi.StringOutput)
}

func (o VpnIpsecPhase2Output) InboundDscpCopy() pulumi.StringOutput {
	return o.ApplyT(func(v *VpnIpsecPhase2) pulumi.StringOutput { return v.InboundDscpCopy }).(pulumi.StringOutput)
}

func (o VpnIpsecPhase2Output) InitiatorTsNarrow() pulumi.StringOutput {
	return o.ApplyT(func(v *VpnIpsecPhase2) pulumi.StringOutput { return v.InitiatorTsNarrow }).(pulumi.StringOutput)
}

func (o VpnIpsecPhase2Output) Ipv4Df() pulumi.StringOutput {
	return o.ApplyT(func(v *VpnIpsecPhase2) pulumi.StringOutput { return v.Ipv4Df }).(pulumi.StringOutput)
}

func (o VpnIpsecPhase2Output) Keepalive() pulumi.StringOutput {
	return o.ApplyT(func(v *VpnIpsecPhase2) pulumi.StringOutput { return v.Keepalive }).(pulumi.StringOutput)
}

func (o VpnIpsecPhase2Output) KeylifeType() pulumi.StringOutput {
	return o.ApplyT(func(v *VpnIpsecPhase2) pulumi.StringOutput { return v.KeylifeType }).(pulumi.StringOutput)
}

func (o VpnIpsecPhase2Output) Keylifekbs() pulumi.IntOutput {
	return o.ApplyT(func(v *VpnIpsecPhase2) pulumi.IntOutput { return v.Keylifekbs }).(pulumi.IntOutput)
}

func (o VpnIpsecPhase2Output) Keylifeseconds() pulumi.IntOutput {
	return o.ApplyT(func(v *VpnIpsecPhase2) pulumi.IntOutput { return v.Keylifeseconds }).(pulumi.IntOutput)
}

func (o VpnIpsecPhase2Output) L2tp() pulumi.StringOutput {
	return o.ApplyT(func(v *VpnIpsecPhase2) pulumi.StringOutput { return v.L2tp }).(pulumi.StringOutput)
}

func (o VpnIpsecPhase2Output) Name() pulumi.StringOutput {
	return o.ApplyT(func(v *VpnIpsecPhase2) pulumi.StringOutput { return v.Name }).(pulumi.StringOutput)
}

func (o VpnIpsecPhase2Output) Pfs() pulumi.StringOutput {
	return o.ApplyT(func(v *VpnIpsecPhase2) pulumi.StringOutput { return v.Pfs }).(pulumi.StringOutput)
}

func (o VpnIpsecPhase2Output) Phase1name() pulumi.StringOutput {
	return o.ApplyT(func(v *VpnIpsecPhase2) pulumi.StringOutput { return v.Phase1name }).(pulumi.StringOutput)
}

func (o VpnIpsecPhase2Output) Proposal() pulumi.StringOutput {
	return o.ApplyT(func(v *VpnIpsecPhase2) pulumi.StringOutput { return v.Proposal }).(pulumi.StringOutput)
}

func (o VpnIpsecPhase2Output) Protocol() pulumi.IntOutput {
	return o.ApplyT(func(v *VpnIpsecPhase2) pulumi.IntOutput { return v.Protocol }).(pulumi.IntOutput)
}

func (o VpnIpsecPhase2Output) Replay() pulumi.StringOutput {
	return o.ApplyT(func(v *VpnIpsecPhase2) pulumi.StringOutput { return v.Replay }).(pulumi.StringOutput)
}

func (o VpnIpsecPhase2Output) RouteOverlap() pulumi.StringOutput {
	return o.ApplyT(func(v *VpnIpsecPhase2) pulumi.StringOutput { return v.RouteOverlap }).(pulumi.StringOutput)
}

func (o VpnIpsecPhase2Output) SelectorMatch() pulumi.StringOutput {
	return o.ApplyT(func(v *VpnIpsecPhase2) pulumi.StringOutput { return v.SelectorMatch }).(pulumi.StringOutput)
}

func (o VpnIpsecPhase2Output) SingleSource() pulumi.StringOutput {
	return o.ApplyT(func(v *VpnIpsecPhase2) pulumi.StringOutput { return v.SingleSource }).(pulumi.StringOutput)
}

func (o VpnIpsecPhase2Output) SrcAddrType() pulumi.StringOutput {
	return o.ApplyT(func(v *VpnIpsecPhase2) pulumi.StringOutput { return v.SrcAddrType }).(pulumi.StringOutput)
}

func (o VpnIpsecPhase2Output) SrcEndIp() pulumi.StringOutput {
	return o.ApplyT(func(v *VpnIpsecPhase2) pulumi.StringOutput { return v.SrcEndIp }).(pulumi.StringOutput)
}

func (o VpnIpsecPhase2Output) SrcEndIp6() pulumi.StringOutput {
	return o.ApplyT(func(v *VpnIpsecPhase2) pulumi.StringOutput { return v.SrcEndIp6 }).(pulumi.StringOutput)
}

func (o VpnIpsecPhase2Output) SrcName() pulumi.StringOutput {
	return o.ApplyT(func(v *VpnIpsecPhase2) pulumi.StringOutput { return v.SrcName }).(pulumi.StringOutput)
}

func (o VpnIpsecPhase2Output) SrcName6() pulumi.StringOutput {
	return o.ApplyT(func(v *VpnIpsecPhase2) pulumi.StringOutput { return v.SrcName6 }).(pulumi.StringOutput)
}

func (o VpnIpsecPhase2Output) SrcPort() pulumi.IntOutput {
	return o.ApplyT(func(v *VpnIpsecPhase2) pulumi.IntOutput { return v.SrcPort }).(pulumi.IntOutput)
}

func (o VpnIpsecPhase2Output) SrcStartIp() pulumi.StringOutput {
	return o.ApplyT(func(v *VpnIpsecPhase2) pulumi.StringOutput { return v.SrcStartIp }).(pulumi.StringOutput)
}

func (o VpnIpsecPhase2Output) SrcStartIp6() pulumi.StringOutput {
	return o.ApplyT(func(v *VpnIpsecPhase2) pulumi.StringOutput { return v.SrcStartIp6 }).(pulumi.StringOutput)
}

func (o VpnIpsecPhase2Output) SrcSubnet() pulumi.StringOutput {
	return o.ApplyT(func(v *VpnIpsecPhase2) pulumi.StringOutput { return v.SrcSubnet }).(pulumi.StringOutput)
}

func (o VpnIpsecPhase2Output) SrcSubnet6() pulumi.StringOutput {
	return o.ApplyT(func(v *VpnIpsecPhase2) pulumi.StringOutput { return v.SrcSubnet6 }).(pulumi.StringOutput)
}

func (o VpnIpsecPhase2Output) UseNatip() pulumi.StringOutput {
	return o.ApplyT(func(v *VpnIpsecPhase2) pulumi.StringOutput { return v.UseNatip }).(pulumi.StringOutput)
}

func (o VpnIpsecPhase2Output) Vdomparam() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *VpnIpsecPhase2) pulumi.StringPtrOutput { return v.Vdomparam }).(pulumi.StringPtrOutput)
}

type VpnIpsecPhase2ArrayOutput struct{ *pulumi.OutputState }

func (VpnIpsecPhase2ArrayOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*[]*VpnIpsecPhase2)(nil)).Elem()
}

func (o VpnIpsecPhase2ArrayOutput) ToVpnIpsecPhase2ArrayOutput() VpnIpsecPhase2ArrayOutput {
	return o
}

func (o VpnIpsecPhase2ArrayOutput) ToVpnIpsecPhase2ArrayOutputWithContext(ctx context.Context) VpnIpsecPhase2ArrayOutput {
	return o
}

func (o VpnIpsecPhase2ArrayOutput) Index(i pulumi.IntInput) VpnIpsecPhase2Output {
	return pulumi.All(o, i).ApplyT(func(vs []interface{}) *VpnIpsecPhase2 {
		return vs[0].([]*VpnIpsecPhase2)[vs[1].(int)]
	}).(VpnIpsecPhase2Output)
}

type VpnIpsecPhase2MapOutput struct{ *pulumi.OutputState }

func (VpnIpsecPhase2MapOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*map[string]*VpnIpsecPhase2)(nil)).Elem()
}

func (o VpnIpsecPhase2MapOutput) ToVpnIpsecPhase2MapOutput() VpnIpsecPhase2MapOutput {
	return o
}

func (o VpnIpsecPhase2MapOutput) ToVpnIpsecPhase2MapOutputWithContext(ctx context.Context) VpnIpsecPhase2MapOutput {
	return o
}

func (o VpnIpsecPhase2MapOutput) MapIndex(k pulumi.StringInput) VpnIpsecPhase2Output {
	return pulumi.All(o, k).ApplyT(func(vs []interface{}) *VpnIpsecPhase2 {
		return vs[0].(map[string]*VpnIpsecPhase2)[vs[1].(string)]
	}).(VpnIpsecPhase2Output)
}

func init() {
	pulumi.RegisterInputType(reflect.TypeOf((*VpnIpsecPhase2Input)(nil)).Elem(), &VpnIpsecPhase2{})
	pulumi.RegisterInputType(reflect.TypeOf((*VpnIpsecPhase2ArrayInput)(nil)).Elem(), VpnIpsecPhase2Array{})
	pulumi.RegisterInputType(reflect.TypeOf((*VpnIpsecPhase2MapInput)(nil)).Elem(), VpnIpsecPhase2Map{})
	pulumi.RegisterOutputType(VpnIpsecPhase2Output{})
	pulumi.RegisterOutputType(VpnIpsecPhase2ArrayOutput{})
	pulumi.RegisterOutputType(VpnIpsecPhase2MapOutput{})
}
