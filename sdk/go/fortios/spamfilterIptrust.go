// Code generated by the Pulumi Terraform Bridge (tfgen) Tool DO NOT EDIT.
// *** WARNING: Do not edit by hand unless you're certain you know what you are doing! ***

package fortios

import (
	"context"
	"reflect"

	"errors"
	"github.com/lubyou/pulumi-fortios/sdk/go/fortios/internal"
	"github.com/pulumi/pulumi/sdk/v3/go/pulumi"
	"github.com/pulumi/pulumi/sdk/v3/go/pulumix"
)

type SpamfilterIptrust struct {
	pulumi.CustomResourceState

	Comment             pulumi.StringPtrOutput            `pulumi:"comment"`
	DynamicSortSubtable pulumi.StringPtrOutput            `pulumi:"dynamicSortSubtable"`
	Entries             SpamfilterIptrustEntryArrayOutput `pulumi:"entries"`
	Fosid               pulumi.IntOutput                  `pulumi:"fosid"`
	GetAllTables        pulumi.StringPtrOutput            `pulumi:"getAllTables"`
	Name                pulumi.StringOutput               `pulumi:"name"`
	Vdomparam           pulumi.StringPtrOutput            `pulumi:"vdomparam"`
}

// NewSpamfilterIptrust registers a new resource with the given unique name, arguments, and options.
func NewSpamfilterIptrust(ctx *pulumi.Context,
	name string, args *SpamfilterIptrustArgs, opts ...pulumi.ResourceOption) (*SpamfilterIptrust, error) {
	if args == nil {
		return nil, errors.New("missing one or more required arguments")
	}

	if args.Fosid == nil {
		return nil, errors.New("invalid value for required argument 'Fosid'")
	}
	opts = internal.PkgResourceDefaultOpts(opts)
	var resource SpamfilterIptrust
	err := ctx.RegisterResource("fortios:index/spamfilterIptrust:SpamfilterIptrust", name, args, &resource, opts...)
	if err != nil {
		return nil, err
	}
	return &resource, nil
}

// GetSpamfilterIptrust gets an existing SpamfilterIptrust resource's state with the given name, ID, and optional
// state properties that are used to uniquely qualify the lookup (nil if not required).
func GetSpamfilterIptrust(ctx *pulumi.Context,
	name string, id pulumi.IDInput, state *SpamfilterIptrustState, opts ...pulumi.ResourceOption) (*SpamfilterIptrust, error) {
	var resource SpamfilterIptrust
	err := ctx.ReadResource("fortios:index/spamfilterIptrust:SpamfilterIptrust", name, id, state, &resource, opts...)
	if err != nil {
		return nil, err
	}
	return &resource, nil
}

// Input properties used for looking up and filtering SpamfilterIptrust resources.
type spamfilterIptrustState struct {
	Comment             *string                  `pulumi:"comment"`
	DynamicSortSubtable *string                  `pulumi:"dynamicSortSubtable"`
	Entries             []SpamfilterIptrustEntry `pulumi:"entries"`
	Fosid               *int                     `pulumi:"fosid"`
	GetAllTables        *string                  `pulumi:"getAllTables"`
	Name                *string                  `pulumi:"name"`
	Vdomparam           *string                  `pulumi:"vdomparam"`
}

type SpamfilterIptrustState struct {
	Comment             pulumi.StringPtrInput
	DynamicSortSubtable pulumi.StringPtrInput
	Entries             SpamfilterIptrustEntryArrayInput
	Fosid               pulumi.IntPtrInput
	GetAllTables        pulumi.StringPtrInput
	Name                pulumi.StringPtrInput
	Vdomparam           pulumi.StringPtrInput
}

func (SpamfilterIptrustState) ElementType() reflect.Type {
	return reflect.TypeOf((*spamfilterIptrustState)(nil)).Elem()
}

type spamfilterIptrustArgs struct {
	Comment             *string                  `pulumi:"comment"`
	DynamicSortSubtable *string                  `pulumi:"dynamicSortSubtable"`
	Entries             []SpamfilterIptrustEntry `pulumi:"entries"`
	Fosid               int                      `pulumi:"fosid"`
	GetAllTables        *string                  `pulumi:"getAllTables"`
	Name                *string                  `pulumi:"name"`
	Vdomparam           *string                  `pulumi:"vdomparam"`
}

// The set of arguments for constructing a SpamfilterIptrust resource.
type SpamfilterIptrustArgs struct {
	Comment             pulumi.StringPtrInput
	DynamicSortSubtable pulumi.StringPtrInput
	Entries             SpamfilterIptrustEntryArrayInput
	Fosid               pulumi.IntInput
	GetAllTables        pulumi.StringPtrInput
	Name                pulumi.StringPtrInput
	Vdomparam           pulumi.StringPtrInput
}

func (SpamfilterIptrustArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*spamfilterIptrustArgs)(nil)).Elem()
}

type SpamfilterIptrustInput interface {
	pulumi.Input

	ToSpamfilterIptrustOutput() SpamfilterIptrustOutput
	ToSpamfilterIptrustOutputWithContext(ctx context.Context) SpamfilterIptrustOutput
}

func (*SpamfilterIptrust) ElementType() reflect.Type {
	return reflect.TypeOf((**SpamfilterIptrust)(nil)).Elem()
}

func (i *SpamfilterIptrust) ToSpamfilterIptrustOutput() SpamfilterIptrustOutput {
	return i.ToSpamfilterIptrustOutputWithContext(context.Background())
}

func (i *SpamfilterIptrust) ToSpamfilterIptrustOutputWithContext(ctx context.Context) SpamfilterIptrustOutput {
	return pulumi.ToOutputWithContext(ctx, i).(SpamfilterIptrustOutput)
}

func (i *SpamfilterIptrust) ToOutput(ctx context.Context) pulumix.Output[*SpamfilterIptrust] {
	return pulumix.Output[*SpamfilterIptrust]{
		OutputState: i.ToSpamfilterIptrustOutputWithContext(ctx).OutputState,
	}
}

// SpamfilterIptrustArrayInput is an input type that accepts SpamfilterIptrustArray and SpamfilterIptrustArrayOutput values.
// You can construct a concrete instance of `SpamfilterIptrustArrayInput` via:
//
//	SpamfilterIptrustArray{ SpamfilterIptrustArgs{...} }
type SpamfilterIptrustArrayInput interface {
	pulumi.Input

	ToSpamfilterIptrustArrayOutput() SpamfilterIptrustArrayOutput
	ToSpamfilterIptrustArrayOutputWithContext(context.Context) SpamfilterIptrustArrayOutput
}

type SpamfilterIptrustArray []SpamfilterIptrustInput

func (SpamfilterIptrustArray) ElementType() reflect.Type {
	return reflect.TypeOf((*[]*SpamfilterIptrust)(nil)).Elem()
}

func (i SpamfilterIptrustArray) ToSpamfilterIptrustArrayOutput() SpamfilterIptrustArrayOutput {
	return i.ToSpamfilterIptrustArrayOutputWithContext(context.Background())
}

func (i SpamfilterIptrustArray) ToSpamfilterIptrustArrayOutputWithContext(ctx context.Context) SpamfilterIptrustArrayOutput {
	return pulumi.ToOutputWithContext(ctx, i).(SpamfilterIptrustArrayOutput)
}

func (i SpamfilterIptrustArray) ToOutput(ctx context.Context) pulumix.Output[[]*SpamfilterIptrust] {
	return pulumix.Output[[]*SpamfilterIptrust]{
		OutputState: i.ToSpamfilterIptrustArrayOutputWithContext(ctx).OutputState,
	}
}

// SpamfilterIptrustMapInput is an input type that accepts SpamfilterIptrustMap and SpamfilterIptrustMapOutput values.
// You can construct a concrete instance of `SpamfilterIptrustMapInput` via:
//
//	SpamfilterIptrustMap{ "key": SpamfilterIptrustArgs{...} }
type SpamfilterIptrustMapInput interface {
	pulumi.Input

	ToSpamfilterIptrustMapOutput() SpamfilterIptrustMapOutput
	ToSpamfilterIptrustMapOutputWithContext(context.Context) SpamfilterIptrustMapOutput
}

type SpamfilterIptrustMap map[string]SpamfilterIptrustInput

func (SpamfilterIptrustMap) ElementType() reflect.Type {
	return reflect.TypeOf((*map[string]*SpamfilterIptrust)(nil)).Elem()
}

func (i SpamfilterIptrustMap) ToSpamfilterIptrustMapOutput() SpamfilterIptrustMapOutput {
	return i.ToSpamfilterIptrustMapOutputWithContext(context.Background())
}

func (i SpamfilterIptrustMap) ToSpamfilterIptrustMapOutputWithContext(ctx context.Context) SpamfilterIptrustMapOutput {
	return pulumi.ToOutputWithContext(ctx, i).(SpamfilterIptrustMapOutput)
}

func (i SpamfilterIptrustMap) ToOutput(ctx context.Context) pulumix.Output[map[string]*SpamfilterIptrust] {
	return pulumix.Output[map[string]*SpamfilterIptrust]{
		OutputState: i.ToSpamfilterIptrustMapOutputWithContext(ctx).OutputState,
	}
}

type SpamfilterIptrustOutput struct{ *pulumi.OutputState }

func (SpamfilterIptrustOutput) ElementType() reflect.Type {
	return reflect.TypeOf((**SpamfilterIptrust)(nil)).Elem()
}

func (o SpamfilterIptrustOutput) ToSpamfilterIptrustOutput() SpamfilterIptrustOutput {
	return o
}

func (o SpamfilterIptrustOutput) ToSpamfilterIptrustOutputWithContext(ctx context.Context) SpamfilterIptrustOutput {
	return o
}

func (o SpamfilterIptrustOutput) ToOutput(ctx context.Context) pulumix.Output[*SpamfilterIptrust] {
	return pulumix.Output[*SpamfilterIptrust]{
		OutputState: o.OutputState,
	}
}

func (o SpamfilterIptrustOutput) Comment() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *SpamfilterIptrust) pulumi.StringPtrOutput { return v.Comment }).(pulumi.StringPtrOutput)
}

func (o SpamfilterIptrustOutput) DynamicSortSubtable() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *SpamfilterIptrust) pulumi.StringPtrOutput { return v.DynamicSortSubtable }).(pulumi.StringPtrOutput)
}

func (o SpamfilterIptrustOutput) Entries() SpamfilterIptrustEntryArrayOutput {
	return o.ApplyT(func(v *SpamfilterIptrust) SpamfilterIptrustEntryArrayOutput { return v.Entries }).(SpamfilterIptrustEntryArrayOutput)
}

func (o SpamfilterIptrustOutput) Fosid() pulumi.IntOutput {
	return o.ApplyT(func(v *SpamfilterIptrust) pulumi.IntOutput { return v.Fosid }).(pulumi.IntOutput)
}

func (o SpamfilterIptrustOutput) GetAllTables() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *SpamfilterIptrust) pulumi.StringPtrOutput { return v.GetAllTables }).(pulumi.StringPtrOutput)
}

func (o SpamfilterIptrustOutput) Name() pulumi.StringOutput {
	return o.ApplyT(func(v *SpamfilterIptrust) pulumi.StringOutput { return v.Name }).(pulumi.StringOutput)
}

func (o SpamfilterIptrustOutput) Vdomparam() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *SpamfilterIptrust) pulumi.StringPtrOutput { return v.Vdomparam }).(pulumi.StringPtrOutput)
}

type SpamfilterIptrustArrayOutput struct{ *pulumi.OutputState }

func (SpamfilterIptrustArrayOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*[]*SpamfilterIptrust)(nil)).Elem()
}

func (o SpamfilterIptrustArrayOutput) ToSpamfilterIptrustArrayOutput() SpamfilterIptrustArrayOutput {
	return o
}

func (o SpamfilterIptrustArrayOutput) ToSpamfilterIptrustArrayOutputWithContext(ctx context.Context) SpamfilterIptrustArrayOutput {
	return o
}

func (o SpamfilterIptrustArrayOutput) ToOutput(ctx context.Context) pulumix.Output[[]*SpamfilterIptrust] {
	return pulumix.Output[[]*SpamfilterIptrust]{
		OutputState: o.OutputState,
	}
}

func (o SpamfilterIptrustArrayOutput) Index(i pulumi.IntInput) SpamfilterIptrustOutput {
	return pulumi.All(o, i).ApplyT(func(vs []interface{}) *SpamfilterIptrust {
		return vs[0].([]*SpamfilterIptrust)[vs[1].(int)]
	}).(SpamfilterIptrustOutput)
}

type SpamfilterIptrustMapOutput struct{ *pulumi.OutputState }

func (SpamfilterIptrustMapOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*map[string]*SpamfilterIptrust)(nil)).Elem()
}

func (o SpamfilterIptrustMapOutput) ToSpamfilterIptrustMapOutput() SpamfilterIptrustMapOutput {
	return o
}

func (o SpamfilterIptrustMapOutput) ToSpamfilterIptrustMapOutputWithContext(ctx context.Context) SpamfilterIptrustMapOutput {
	return o
}

func (o SpamfilterIptrustMapOutput) ToOutput(ctx context.Context) pulumix.Output[map[string]*SpamfilterIptrust] {
	return pulumix.Output[map[string]*SpamfilterIptrust]{
		OutputState: o.OutputState,
	}
}

func (o SpamfilterIptrustMapOutput) MapIndex(k pulumi.StringInput) SpamfilterIptrustOutput {
	return pulumi.All(o, k).ApplyT(func(vs []interface{}) *SpamfilterIptrust {
		return vs[0].(map[string]*SpamfilterIptrust)[vs[1].(string)]
	}).(SpamfilterIptrustOutput)
}

func init() {
	pulumi.RegisterInputType(reflect.TypeOf((*SpamfilterIptrustInput)(nil)).Elem(), &SpamfilterIptrust{})
	pulumi.RegisterInputType(reflect.TypeOf((*SpamfilterIptrustArrayInput)(nil)).Elem(), SpamfilterIptrustArray{})
	pulumi.RegisterInputType(reflect.TypeOf((*SpamfilterIptrustMapInput)(nil)).Elem(), SpamfilterIptrustMap{})
	pulumi.RegisterOutputType(SpamfilterIptrustOutput{})
	pulumi.RegisterOutputType(SpamfilterIptrustArrayOutput{})
	pulumi.RegisterOutputType(SpamfilterIptrustMapOutput{})
}
