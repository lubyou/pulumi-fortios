// Code generated by the Pulumi Terraform Bridge (tfgen) Tool DO NOT EDIT.
// *** WARNING: Do not edit by hand unless you're certain you know what you are doing! ***

package fortios

import (
	"context"
	"reflect"

	"github.com/lubyou/pulumi-fortios/sdk/go/fortios/internal"
	"github.com/pulumi/pulumi/sdk/v3/go/pulumi"
	"github.com/pulumi/pulumi/sdk/v3/go/pulumix"
)

type WirelessControllerWagProfile struct {
	pulumi.CustomResourceState

	Comment             pulumi.StringPtrOutput `pulumi:"comment"`
	DhcpIpAddr          pulumi.StringOutput    `pulumi:"dhcpIpAddr"`
	Name                pulumi.StringOutput    `pulumi:"name"`
	PingInterval        pulumi.IntOutput       `pulumi:"pingInterval"`
	PingNumber          pulumi.IntOutput       `pulumi:"pingNumber"`
	ReturnPacketTimeout pulumi.IntOutput       `pulumi:"returnPacketTimeout"`
	TunnelType          pulumi.StringOutput    `pulumi:"tunnelType"`
	Vdomparam           pulumi.StringPtrOutput `pulumi:"vdomparam"`
	WagIp               pulumi.StringOutput    `pulumi:"wagIp"`
	WagPort             pulumi.IntOutput       `pulumi:"wagPort"`
}

// NewWirelessControllerWagProfile registers a new resource with the given unique name, arguments, and options.
func NewWirelessControllerWagProfile(ctx *pulumi.Context,
	name string, args *WirelessControllerWagProfileArgs, opts ...pulumi.ResourceOption) (*WirelessControllerWagProfile, error) {
	if args == nil {
		args = &WirelessControllerWagProfileArgs{}
	}

	opts = internal.PkgResourceDefaultOpts(opts)
	var resource WirelessControllerWagProfile
	err := ctx.RegisterResource("fortios:index/wirelessControllerWagProfile:WirelessControllerWagProfile", name, args, &resource, opts...)
	if err != nil {
		return nil, err
	}
	return &resource, nil
}

// GetWirelessControllerWagProfile gets an existing WirelessControllerWagProfile resource's state with the given name, ID, and optional
// state properties that are used to uniquely qualify the lookup (nil if not required).
func GetWirelessControllerWagProfile(ctx *pulumi.Context,
	name string, id pulumi.IDInput, state *WirelessControllerWagProfileState, opts ...pulumi.ResourceOption) (*WirelessControllerWagProfile, error) {
	var resource WirelessControllerWagProfile
	err := ctx.ReadResource("fortios:index/wirelessControllerWagProfile:WirelessControllerWagProfile", name, id, state, &resource, opts...)
	if err != nil {
		return nil, err
	}
	return &resource, nil
}

// Input properties used for looking up and filtering WirelessControllerWagProfile resources.
type wirelessControllerWagProfileState struct {
	Comment             *string `pulumi:"comment"`
	DhcpIpAddr          *string `pulumi:"dhcpIpAddr"`
	Name                *string `pulumi:"name"`
	PingInterval        *int    `pulumi:"pingInterval"`
	PingNumber          *int    `pulumi:"pingNumber"`
	ReturnPacketTimeout *int    `pulumi:"returnPacketTimeout"`
	TunnelType          *string `pulumi:"tunnelType"`
	Vdomparam           *string `pulumi:"vdomparam"`
	WagIp               *string `pulumi:"wagIp"`
	WagPort             *int    `pulumi:"wagPort"`
}

type WirelessControllerWagProfileState struct {
	Comment             pulumi.StringPtrInput
	DhcpIpAddr          pulumi.StringPtrInput
	Name                pulumi.StringPtrInput
	PingInterval        pulumi.IntPtrInput
	PingNumber          pulumi.IntPtrInput
	ReturnPacketTimeout pulumi.IntPtrInput
	TunnelType          pulumi.StringPtrInput
	Vdomparam           pulumi.StringPtrInput
	WagIp               pulumi.StringPtrInput
	WagPort             pulumi.IntPtrInput
}

func (WirelessControllerWagProfileState) ElementType() reflect.Type {
	return reflect.TypeOf((*wirelessControllerWagProfileState)(nil)).Elem()
}

type wirelessControllerWagProfileArgs struct {
	Comment             *string `pulumi:"comment"`
	DhcpIpAddr          *string `pulumi:"dhcpIpAddr"`
	Name                *string `pulumi:"name"`
	PingInterval        *int    `pulumi:"pingInterval"`
	PingNumber          *int    `pulumi:"pingNumber"`
	ReturnPacketTimeout *int    `pulumi:"returnPacketTimeout"`
	TunnelType          *string `pulumi:"tunnelType"`
	Vdomparam           *string `pulumi:"vdomparam"`
	WagIp               *string `pulumi:"wagIp"`
	WagPort             *int    `pulumi:"wagPort"`
}

// The set of arguments for constructing a WirelessControllerWagProfile resource.
type WirelessControllerWagProfileArgs struct {
	Comment             pulumi.StringPtrInput
	DhcpIpAddr          pulumi.StringPtrInput
	Name                pulumi.StringPtrInput
	PingInterval        pulumi.IntPtrInput
	PingNumber          pulumi.IntPtrInput
	ReturnPacketTimeout pulumi.IntPtrInput
	TunnelType          pulumi.StringPtrInput
	Vdomparam           pulumi.StringPtrInput
	WagIp               pulumi.StringPtrInput
	WagPort             pulumi.IntPtrInput
}

func (WirelessControllerWagProfileArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*wirelessControllerWagProfileArgs)(nil)).Elem()
}

type WirelessControllerWagProfileInput interface {
	pulumi.Input

	ToWirelessControllerWagProfileOutput() WirelessControllerWagProfileOutput
	ToWirelessControllerWagProfileOutputWithContext(ctx context.Context) WirelessControllerWagProfileOutput
}

func (*WirelessControllerWagProfile) ElementType() reflect.Type {
	return reflect.TypeOf((**WirelessControllerWagProfile)(nil)).Elem()
}

func (i *WirelessControllerWagProfile) ToWirelessControllerWagProfileOutput() WirelessControllerWagProfileOutput {
	return i.ToWirelessControllerWagProfileOutputWithContext(context.Background())
}

func (i *WirelessControllerWagProfile) ToWirelessControllerWagProfileOutputWithContext(ctx context.Context) WirelessControllerWagProfileOutput {
	return pulumi.ToOutputWithContext(ctx, i).(WirelessControllerWagProfileOutput)
}

func (i *WirelessControllerWagProfile) ToOutput(ctx context.Context) pulumix.Output[*WirelessControllerWagProfile] {
	return pulumix.Output[*WirelessControllerWagProfile]{
		OutputState: i.ToWirelessControllerWagProfileOutputWithContext(ctx).OutputState,
	}
}

// WirelessControllerWagProfileArrayInput is an input type that accepts WirelessControllerWagProfileArray and WirelessControllerWagProfileArrayOutput values.
// You can construct a concrete instance of `WirelessControllerWagProfileArrayInput` via:
//
//	WirelessControllerWagProfileArray{ WirelessControllerWagProfileArgs{...} }
type WirelessControllerWagProfileArrayInput interface {
	pulumi.Input

	ToWirelessControllerWagProfileArrayOutput() WirelessControllerWagProfileArrayOutput
	ToWirelessControllerWagProfileArrayOutputWithContext(context.Context) WirelessControllerWagProfileArrayOutput
}

type WirelessControllerWagProfileArray []WirelessControllerWagProfileInput

func (WirelessControllerWagProfileArray) ElementType() reflect.Type {
	return reflect.TypeOf((*[]*WirelessControllerWagProfile)(nil)).Elem()
}

func (i WirelessControllerWagProfileArray) ToWirelessControllerWagProfileArrayOutput() WirelessControllerWagProfileArrayOutput {
	return i.ToWirelessControllerWagProfileArrayOutputWithContext(context.Background())
}

func (i WirelessControllerWagProfileArray) ToWirelessControllerWagProfileArrayOutputWithContext(ctx context.Context) WirelessControllerWagProfileArrayOutput {
	return pulumi.ToOutputWithContext(ctx, i).(WirelessControllerWagProfileArrayOutput)
}

func (i WirelessControllerWagProfileArray) ToOutput(ctx context.Context) pulumix.Output[[]*WirelessControllerWagProfile] {
	return pulumix.Output[[]*WirelessControllerWagProfile]{
		OutputState: i.ToWirelessControllerWagProfileArrayOutputWithContext(ctx).OutputState,
	}
}

// WirelessControllerWagProfileMapInput is an input type that accepts WirelessControllerWagProfileMap and WirelessControllerWagProfileMapOutput values.
// You can construct a concrete instance of `WirelessControllerWagProfileMapInput` via:
//
//	WirelessControllerWagProfileMap{ "key": WirelessControllerWagProfileArgs{...} }
type WirelessControllerWagProfileMapInput interface {
	pulumi.Input

	ToWirelessControllerWagProfileMapOutput() WirelessControllerWagProfileMapOutput
	ToWirelessControllerWagProfileMapOutputWithContext(context.Context) WirelessControllerWagProfileMapOutput
}

type WirelessControllerWagProfileMap map[string]WirelessControllerWagProfileInput

func (WirelessControllerWagProfileMap) ElementType() reflect.Type {
	return reflect.TypeOf((*map[string]*WirelessControllerWagProfile)(nil)).Elem()
}

func (i WirelessControllerWagProfileMap) ToWirelessControllerWagProfileMapOutput() WirelessControllerWagProfileMapOutput {
	return i.ToWirelessControllerWagProfileMapOutputWithContext(context.Background())
}

func (i WirelessControllerWagProfileMap) ToWirelessControllerWagProfileMapOutputWithContext(ctx context.Context) WirelessControllerWagProfileMapOutput {
	return pulumi.ToOutputWithContext(ctx, i).(WirelessControllerWagProfileMapOutput)
}

func (i WirelessControllerWagProfileMap) ToOutput(ctx context.Context) pulumix.Output[map[string]*WirelessControllerWagProfile] {
	return pulumix.Output[map[string]*WirelessControllerWagProfile]{
		OutputState: i.ToWirelessControllerWagProfileMapOutputWithContext(ctx).OutputState,
	}
}

type WirelessControllerWagProfileOutput struct{ *pulumi.OutputState }

func (WirelessControllerWagProfileOutput) ElementType() reflect.Type {
	return reflect.TypeOf((**WirelessControllerWagProfile)(nil)).Elem()
}

func (o WirelessControllerWagProfileOutput) ToWirelessControllerWagProfileOutput() WirelessControllerWagProfileOutput {
	return o
}

func (o WirelessControllerWagProfileOutput) ToWirelessControllerWagProfileOutputWithContext(ctx context.Context) WirelessControllerWagProfileOutput {
	return o
}

func (o WirelessControllerWagProfileOutput) ToOutput(ctx context.Context) pulumix.Output[*WirelessControllerWagProfile] {
	return pulumix.Output[*WirelessControllerWagProfile]{
		OutputState: o.OutputState,
	}
}

func (o WirelessControllerWagProfileOutput) Comment() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *WirelessControllerWagProfile) pulumi.StringPtrOutput { return v.Comment }).(pulumi.StringPtrOutput)
}

func (o WirelessControllerWagProfileOutput) DhcpIpAddr() pulumi.StringOutput {
	return o.ApplyT(func(v *WirelessControllerWagProfile) pulumi.StringOutput { return v.DhcpIpAddr }).(pulumi.StringOutput)
}

func (o WirelessControllerWagProfileOutput) Name() pulumi.StringOutput {
	return o.ApplyT(func(v *WirelessControllerWagProfile) pulumi.StringOutput { return v.Name }).(pulumi.StringOutput)
}

func (o WirelessControllerWagProfileOutput) PingInterval() pulumi.IntOutput {
	return o.ApplyT(func(v *WirelessControllerWagProfile) pulumi.IntOutput { return v.PingInterval }).(pulumi.IntOutput)
}

func (o WirelessControllerWagProfileOutput) PingNumber() pulumi.IntOutput {
	return o.ApplyT(func(v *WirelessControllerWagProfile) pulumi.IntOutput { return v.PingNumber }).(pulumi.IntOutput)
}

func (o WirelessControllerWagProfileOutput) ReturnPacketTimeout() pulumi.IntOutput {
	return o.ApplyT(func(v *WirelessControllerWagProfile) pulumi.IntOutput { return v.ReturnPacketTimeout }).(pulumi.IntOutput)
}

func (o WirelessControllerWagProfileOutput) TunnelType() pulumi.StringOutput {
	return o.ApplyT(func(v *WirelessControllerWagProfile) pulumi.StringOutput { return v.TunnelType }).(pulumi.StringOutput)
}

func (o WirelessControllerWagProfileOutput) Vdomparam() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *WirelessControllerWagProfile) pulumi.StringPtrOutput { return v.Vdomparam }).(pulumi.StringPtrOutput)
}

func (o WirelessControllerWagProfileOutput) WagIp() pulumi.StringOutput {
	return o.ApplyT(func(v *WirelessControllerWagProfile) pulumi.StringOutput { return v.WagIp }).(pulumi.StringOutput)
}

func (o WirelessControllerWagProfileOutput) WagPort() pulumi.IntOutput {
	return o.ApplyT(func(v *WirelessControllerWagProfile) pulumi.IntOutput { return v.WagPort }).(pulumi.IntOutput)
}

type WirelessControllerWagProfileArrayOutput struct{ *pulumi.OutputState }

func (WirelessControllerWagProfileArrayOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*[]*WirelessControllerWagProfile)(nil)).Elem()
}

func (o WirelessControllerWagProfileArrayOutput) ToWirelessControllerWagProfileArrayOutput() WirelessControllerWagProfileArrayOutput {
	return o
}

func (o WirelessControllerWagProfileArrayOutput) ToWirelessControllerWagProfileArrayOutputWithContext(ctx context.Context) WirelessControllerWagProfileArrayOutput {
	return o
}

func (o WirelessControllerWagProfileArrayOutput) ToOutput(ctx context.Context) pulumix.Output[[]*WirelessControllerWagProfile] {
	return pulumix.Output[[]*WirelessControllerWagProfile]{
		OutputState: o.OutputState,
	}
}

func (o WirelessControllerWagProfileArrayOutput) Index(i pulumi.IntInput) WirelessControllerWagProfileOutput {
	return pulumi.All(o, i).ApplyT(func(vs []interface{}) *WirelessControllerWagProfile {
		return vs[0].([]*WirelessControllerWagProfile)[vs[1].(int)]
	}).(WirelessControllerWagProfileOutput)
}

type WirelessControllerWagProfileMapOutput struct{ *pulumi.OutputState }

func (WirelessControllerWagProfileMapOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*map[string]*WirelessControllerWagProfile)(nil)).Elem()
}

func (o WirelessControllerWagProfileMapOutput) ToWirelessControllerWagProfileMapOutput() WirelessControllerWagProfileMapOutput {
	return o
}

func (o WirelessControllerWagProfileMapOutput) ToWirelessControllerWagProfileMapOutputWithContext(ctx context.Context) WirelessControllerWagProfileMapOutput {
	return o
}

func (o WirelessControllerWagProfileMapOutput) ToOutput(ctx context.Context) pulumix.Output[map[string]*WirelessControllerWagProfile] {
	return pulumix.Output[map[string]*WirelessControllerWagProfile]{
		OutputState: o.OutputState,
	}
}

func (o WirelessControllerWagProfileMapOutput) MapIndex(k pulumi.StringInput) WirelessControllerWagProfileOutput {
	return pulumi.All(o, k).ApplyT(func(vs []interface{}) *WirelessControllerWagProfile {
		return vs[0].(map[string]*WirelessControllerWagProfile)[vs[1].(string)]
	}).(WirelessControllerWagProfileOutput)
}

func init() {
	pulumi.RegisterInputType(reflect.TypeOf((*WirelessControllerWagProfileInput)(nil)).Elem(), &WirelessControllerWagProfile{})
	pulumi.RegisterInputType(reflect.TypeOf((*WirelessControllerWagProfileArrayInput)(nil)).Elem(), WirelessControllerWagProfileArray{})
	pulumi.RegisterInputType(reflect.TypeOf((*WirelessControllerWagProfileMapInput)(nil)).Elem(), WirelessControllerWagProfileMap{})
	pulumi.RegisterOutputType(WirelessControllerWagProfileOutput{})
	pulumi.RegisterOutputType(WirelessControllerWagProfileArrayOutput{})
	pulumi.RegisterOutputType(WirelessControllerWagProfileMapOutput{})
}
