// Code generated by the Pulumi Terraform Bridge (tfgen) Tool DO NOT EDIT.
// *** WARNING: Do not edit by hand unless you're certain you know what you are doing! ***

package fortios

import (
	"context"
	"reflect"

	"errors"
	"github.com/lubyou/pulumi-fortios/sdk/go/fortios/internal"
	"github.com/pulumi/pulumi/sdk/v3/go/pulumi"
	"github.com/pulumi/pulumi/sdk/v3/go/pulumix"
)

type WebProxyWisp struct {
	pulumi.CustomResourceState

	Comment        pulumi.StringPtrOutput `pulumi:"comment"`
	MaxConnections pulumi.IntOutput       `pulumi:"maxConnections"`
	Name           pulumi.StringOutput    `pulumi:"name"`
	OutgoingIp     pulumi.StringOutput    `pulumi:"outgoingIp"`
	ServerIp       pulumi.StringOutput    `pulumi:"serverIp"`
	ServerPort     pulumi.IntOutput       `pulumi:"serverPort"`
	Timeout        pulumi.IntOutput       `pulumi:"timeout"`
	Vdomparam      pulumi.StringPtrOutput `pulumi:"vdomparam"`
}

// NewWebProxyWisp registers a new resource with the given unique name, arguments, and options.
func NewWebProxyWisp(ctx *pulumi.Context,
	name string, args *WebProxyWispArgs, opts ...pulumi.ResourceOption) (*WebProxyWisp, error) {
	if args == nil {
		return nil, errors.New("missing one or more required arguments")
	}

	if args.ServerIp == nil {
		return nil, errors.New("invalid value for required argument 'ServerIp'")
	}
	if args.ServerPort == nil {
		return nil, errors.New("invalid value for required argument 'ServerPort'")
	}
	opts = internal.PkgResourceDefaultOpts(opts)
	var resource WebProxyWisp
	err := ctx.RegisterResource("fortios:index/webProxyWisp:WebProxyWisp", name, args, &resource, opts...)
	if err != nil {
		return nil, err
	}
	return &resource, nil
}

// GetWebProxyWisp gets an existing WebProxyWisp resource's state with the given name, ID, and optional
// state properties that are used to uniquely qualify the lookup (nil if not required).
func GetWebProxyWisp(ctx *pulumi.Context,
	name string, id pulumi.IDInput, state *WebProxyWispState, opts ...pulumi.ResourceOption) (*WebProxyWisp, error) {
	var resource WebProxyWisp
	err := ctx.ReadResource("fortios:index/webProxyWisp:WebProxyWisp", name, id, state, &resource, opts...)
	if err != nil {
		return nil, err
	}
	return &resource, nil
}

// Input properties used for looking up and filtering WebProxyWisp resources.
type webProxyWispState struct {
	Comment        *string `pulumi:"comment"`
	MaxConnections *int    `pulumi:"maxConnections"`
	Name           *string `pulumi:"name"`
	OutgoingIp     *string `pulumi:"outgoingIp"`
	ServerIp       *string `pulumi:"serverIp"`
	ServerPort     *int    `pulumi:"serverPort"`
	Timeout        *int    `pulumi:"timeout"`
	Vdomparam      *string `pulumi:"vdomparam"`
}

type WebProxyWispState struct {
	Comment        pulumi.StringPtrInput
	MaxConnections pulumi.IntPtrInput
	Name           pulumi.StringPtrInput
	OutgoingIp     pulumi.StringPtrInput
	ServerIp       pulumi.StringPtrInput
	ServerPort     pulumi.IntPtrInput
	Timeout        pulumi.IntPtrInput
	Vdomparam      pulumi.StringPtrInput
}

func (WebProxyWispState) ElementType() reflect.Type {
	return reflect.TypeOf((*webProxyWispState)(nil)).Elem()
}

type webProxyWispArgs struct {
	Comment        *string `pulumi:"comment"`
	MaxConnections *int    `pulumi:"maxConnections"`
	Name           *string `pulumi:"name"`
	OutgoingIp     *string `pulumi:"outgoingIp"`
	ServerIp       string  `pulumi:"serverIp"`
	ServerPort     int     `pulumi:"serverPort"`
	Timeout        *int    `pulumi:"timeout"`
	Vdomparam      *string `pulumi:"vdomparam"`
}

// The set of arguments for constructing a WebProxyWisp resource.
type WebProxyWispArgs struct {
	Comment        pulumi.StringPtrInput
	MaxConnections pulumi.IntPtrInput
	Name           pulumi.StringPtrInput
	OutgoingIp     pulumi.StringPtrInput
	ServerIp       pulumi.StringInput
	ServerPort     pulumi.IntInput
	Timeout        pulumi.IntPtrInput
	Vdomparam      pulumi.StringPtrInput
}

func (WebProxyWispArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*webProxyWispArgs)(nil)).Elem()
}

type WebProxyWispInput interface {
	pulumi.Input

	ToWebProxyWispOutput() WebProxyWispOutput
	ToWebProxyWispOutputWithContext(ctx context.Context) WebProxyWispOutput
}

func (*WebProxyWisp) ElementType() reflect.Type {
	return reflect.TypeOf((**WebProxyWisp)(nil)).Elem()
}

func (i *WebProxyWisp) ToWebProxyWispOutput() WebProxyWispOutput {
	return i.ToWebProxyWispOutputWithContext(context.Background())
}

func (i *WebProxyWisp) ToWebProxyWispOutputWithContext(ctx context.Context) WebProxyWispOutput {
	return pulumi.ToOutputWithContext(ctx, i).(WebProxyWispOutput)
}

func (i *WebProxyWisp) ToOutput(ctx context.Context) pulumix.Output[*WebProxyWisp] {
	return pulumix.Output[*WebProxyWisp]{
		OutputState: i.ToWebProxyWispOutputWithContext(ctx).OutputState,
	}
}

// WebProxyWispArrayInput is an input type that accepts WebProxyWispArray and WebProxyWispArrayOutput values.
// You can construct a concrete instance of `WebProxyWispArrayInput` via:
//
//	WebProxyWispArray{ WebProxyWispArgs{...} }
type WebProxyWispArrayInput interface {
	pulumi.Input

	ToWebProxyWispArrayOutput() WebProxyWispArrayOutput
	ToWebProxyWispArrayOutputWithContext(context.Context) WebProxyWispArrayOutput
}

type WebProxyWispArray []WebProxyWispInput

func (WebProxyWispArray) ElementType() reflect.Type {
	return reflect.TypeOf((*[]*WebProxyWisp)(nil)).Elem()
}

func (i WebProxyWispArray) ToWebProxyWispArrayOutput() WebProxyWispArrayOutput {
	return i.ToWebProxyWispArrayOutputWithContext(context.Background())
}

func (i WebProxyWispArray) ToWebProxyWispArrayOutputWithContext(ctx context.Context) WebProxyWispArrayOutput {
	return pulumi.ToOutputWithContext(ctx, i).(WebProxyWispArrayOutput)
}

func (i WebProxyWispArray) ToOutput(ctx context.Context) pulumix.Output[[]*WebProxyWisp] {
	return pulumix.Output[[]*WebProxyWisp]{
		OutputState: i.ToWebProxyWispArrayOutputWithContext(ctx).OutputState,
	}
}

// WebProxyWispMapInput is an input type that accepts WebProxyWispMap and WebProxyWispMapOutput values.
// You can construct a concrete instance of `WebProxyWispMapInput` via:
//
//	WebProxyWispMap{ "key": WebProxyWispArgs{...} }
type WebProxyWispMapInput interface {
	pulumi.Input

	ToWebProxyWispMapOutput() WebProxyWispMapOutput
	ToWebProxyWispMapOutputWithContext(context.Context) WebProxyWispMapOutput
}

type WebProxyWispMap map[string]WebProxyWispInput

func (WebProxyWispMap) ElementType() reflect.Type {
	return reflect.TypeOf((*map[string]*WebProxyWisp)(nil)).Elem()
}

func (i WebProxyWispMap) ToWebProxyWispMapOutput() WebProxyWispMapOutput {
	return i.ToWebProxyWispMapOutputWithContext(context.Background())
}

func (i WebProxyWispMap) ToWebProxyWispMapOutputWithContext(ctx context.Context) WebProxyWispMapOutput {
	return pulumi.ToOutputWithContext(ctx, i).(WebProxyWispMapOutput)
}

func (i WebProxyWispMap) ToOutput(ctx context.Context) pulumix.Output[map[string]*WebProxyWisp] {
	return pulumix.Output[map[string]*WebProxyWisp]{
		OutputState: i.ToWebProxyWispMapOutputWithContext(ctx).OutputState,
	}
}

type WebProxyWispOutput struct{ *pulumi.OutputState }

func (WebProxyWispOutput) ElementType() reflect.Type {
	return reflect.TypeOf((**WebProxyWisp)(nil)).Elem()
}

func (o WebProxyWispOutput) ToWebProxyWispOutput() WebProxyWispOutput {
	return o
}

func (o WebProxyWispOutput) ToWebProxyWispOutputWithContext(ctx context.Context) WebProxyWispOutput {
	return o
}

func (o WebProxyWispOutput) ToOutput(ctx context.Context) pulumix.Output[*WebProxyWisp] {
	return pulumix.Output[*WebProxyWisp]{
		OutputState: o.OutputState,
	}
}

func (o WebProxyWispOutput) Comment() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *WebProxyWisp) pulumi.StringPtrOutput { return v.Comment }).(pulumi.StringPtrOutput)
}

func (o WebProxyWispOutput) MaxConnections() pulumi.IntOutput {
	return o.ApplyT(func(v *WebProxyWisp) pulumi.IntOutput { return v.MaxConnections }).(pulumi.IntOutput)
}

func (o WebProxyWispOutput) Name() pulumi.StringOutput {
	return o.ApplyT(func(v *WebProxyWisp) pulumi.StringOutput { return v.Name }).(pulumi.StringOutput)
}

func (o WebProxyWispOutput) OutgoingIp() pulumi.StringOutput {
	return o.ApplyT(func(v *WebProxyWisp) pulumi.StringOutput { return v.OutgoingIp }).(pulumi.StringOutput)
}

func (o WebProxyWispOutput) ServerIp() pulumi.StringOutput {
	return o.ApplyT(func(v *WebProxyWisp) pulumi.StringOutput { return v.ServerIp }).(pulumi.StringOutput)
}

func (o WebProxyWispOutput) ServerPort() pulumi.IntOutput {
	return o.ApplyT(func(v *WebProxyWisp) pulumi.IntOutput { return v.ServerPort }).(pulumi.IntOutput)
}

func (o WebProxyWispOutput) Timeout() pulumi.IntOutput {
	return o.ApplyT(func(v *WebProxyWisp) pulumi.IntOutput { return v.Timeout }).(pulumi.IntOutput)
}

func (o WebProxyWispOutput) Vdomparam() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *WebProxyWisp) pulumi.StringPtrOutput { return v.Vdomparam }).(pulumi.StringPtrOutput)
}

type WebProxyWispArrayOutput struct{ *pulumi.OutputState }

func (WebProxyWispArrayOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*[]*WebProxyWisp)(nil)).Elem()
}

func (o WebProxyWispArrayOutput) ToWebProxyWispArrayOutput() WebProxyWispArrayOutput {
	return o
}

func (o WebProxyWispArrayOutput) ToWebProxyWispArrayOutputWithContext(ctx context.Context) WebProxyWispArrayOutput {
	return o
}

func (o WebProxyWispArrayOutput) ToOutput(ctx context.Context) pulumix.Output[[]*WebProxyWisp] {
	return pulumix.Output[[]*WebProxyWisp]{
		OutputState: o.OutputState,
	}
}

func (o WebProxyWispArrayOutput) Index(i pulumi.IntInput) WebProxyWispOutput {
	return pulumi.All(o, i).ApplyT(func(vs []interface{}) *WebProxyWisp {
		return vs[0].([]*WebProxyWisp)[vs[1].(int)]
	}).(WebProxyWispOutput)
}

type WebProxyWispMapOutput struct{ *pulumi.OutputState }

func (WebProxyWispMapOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*map[string]*WebProxyWisp)(nil)).Elem()
}

func (o WebProxyWispMapOutput) ToWebProxyWispMapOutput() WebProxyWispMapOutput {
	return o
}

func (o WebProxyWispMapOutput) ToWebProxyWispMapOutputWithContext(ctx context.Context) WebProxyWispMapOutput {
	return o
}

func (o WebProxyWispMapOutput) ToOutput(ctx context.Context) pulumix.Output[map[string]*WebProxyWisp] {
	return pulumix.Output[map[string]*WebProxyWisp]{
		OutputState: o.OutputState,
	}
}

func (o WebProxyWispMapOutput) MapIndex(k pulumi.StringInput) WebProxyWispOutput {
	return pulumi.All(o, k).ApplyT(func(vs []interface{}) *WebProxyWisp {
		return vs[0].(map[string]*WebProxyWisp)[vs[1].(string)]
	}).(WebProxyWispOutput)
}

func init() {
	pulumi.RegisterInputType(reflect.TypeOf((*WebProxyWispInput)(nil)).Elem(), &WebProxyWisp{})
	pulumi.RegisterInputType(reflect.TypeOf((*WebProxyWispArrayInput)(nil)).Elem(), WebProxyWispArray{})
	pulumi.RegisterInputType(reflect.TypeOf((*WebProxyWispMapInput)(nil)).Elem(), WebProxyWispMap{})
	pulumi.RegisterOutputType(WebProxyWispOutput{})
	pulumi.RegisterOutputType(WebProxyWispArrayOutput{})
	pulumi.RegisterOutputType(WebProxyWispMapOutput{})
}
