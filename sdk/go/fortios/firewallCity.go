// Code generated by the Pulumi Terraform Bridge (tfgen) Tool DO NOT EDIT.
// *** WARNING: Do not edit by hand unless you're certain you know what you are doing! ***

package fortios

import (
	"context"
	"reflect"

	"github.com/pulumi/pulumi/sdk/v3/go/pulumi"
)

type FirewallCity struct {
	pulumi.CustomResourceState

	Fosid     pulumi.IntOutput       `pulumi:"fosid"`
	Name      pulumi.StringOutput    `pulumi:"name"`
	Vdomparam pulumi.StringPtrOutput `pulumi:"vdomparam"`
}

// NewFirewallCity registers a new resource with the given unique name, arguments, and options.
func NewFirewallCity(ctx *pulumi.Context,
	name string, args *FirewallCityArgs, opts ...pulumi.ResourceOption) (*FirewallCity, error) {
	if args == nil {
		args = &FirewallCityArgs{}
	}

	opts = pkgResourceDefaultOpts(opts)
	var resource FirewallCity
	err := ctx.RegisterResource("fortios:index/firewallCity:FirewallCity", name, args, &resource, opts...)
	if err != nil {
		return nil, err
	}
	return &resource, nil
}

// GetFirewallCity gets an existing FirewallCity resource's state with the given name, ID, and optional
// state properties that are used to uniquely qualify the lookup (nil if not required).
func GetFirewallCity(ctx *pulumi.Context,
	name string, id pulumi.IDInput, state *FirewallCityState, opts ...pulumi.ResourceOption) (*FirewallCity, error) {
	var resource FirewallCity
	err := ctx.ReadResource("fortios:index/firewallCity:FirewallCity", name, id, state, &resource, opts...)
	if err != nil {
		return nil, err
	}
	return &resource, nil
}

// Input properties used for looking up and filtering FirewallCity resources.
type firewallCityState struct {
	Fosid     *int    `pulumi:"fosid"`
	Name      *string `pulumi:"name"`
	Vdomparam *string `pulumi:"vdomparam"`
}

type FirewallCityState struct {
	Fosid     pulumi.IntPtrInput
	Name      pulumi.StringPtrInput
	Vdomparam pulumi.StringPtrInput
}

func (FirewallCityState) ElementType() reflect.Type {
	return reflect.TypeOf((*firewallCityState)(nil)).Elem()
}

type firewallCityArgs struct {
	Fosid     *int    `pulumi:"fosid"`
	Name      *string `pulumi:"name"`
	Vdomparam *string `pulumi:"vdomparam"`
}

// The set of arguments for constructing a FirewallCity resource.
type FirewallCityArgs struct {
	Fosid     pulumi.IntPtrInput
	Name      pulumi.StringPtrInput
	Vdomparam pulumi.StringPtrInput
}

func (FirewallCityArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*firewallCityArgs)(nil)).Elem()
}

type FirewallCityInput interface {
	pulumi.Input

	ToFirewallCityOutput() FirewallCityOutput
	ToFirewallCityOutputWithContext(ctx context.Context) FirewallCityOutput
}

func (*FirewallCity) ElementType() reflect.Type {
	return reflect.TypeOf((**FirewallCity)(nil)).Elem()
}

func (i *FirewallCity) ToFirewallCityOutput() FirewallCityOutput {
	return i.ToFirewallCityOutputWithContext(context.Background())
}

func (i *FirewallCity) ToFirewallCityOutputWithContext(ctx context.Context) FirewallCityOutput {
	return pulumi.ToOutputWithContext(ctx, i).(FirewallCityOutput)
}

// FirewallCityArrayInput is an input type that accepts FirewallCityArray and FirewallCityArrayOutput values.
// You can construct a concrete instance of `FirewallCityArrayInput` via:
//
//	FirewallCityArray{ FirewallCityArgs{...} }
type FirewallCityArrayInput interface {
	pulumi.Input

	ToFirewallCityArrayOutput() FirewallCityArrayOutput
	ToFirewallCityArrayOutputWithContext(context.Context) FirewallCityArrayOutput
}

type FirewallCityArray []FirewallCityInput

func (FirewallCityArray) ElementType() reflect.Type {
	return reflect.TypeOf((*[]*FirewallCity)(nil)).Elem()
}

func (i FirewallCityArray) ToFirewallCityArrayOutput() FirewallCityArrayOutput {
	return i.ToFirewallCityArrayOutputWithContext(context.Background())
}

func (i FirewallCityArray) ToFirewallCityArrayOutputWithContext(ctx context.Context) FirewallCityArrayOutput {
	return pulumi.ToOutputWithContext(ctx, i).(FirewallCityArrayOutput)
}

// FirewallCityMapInput is an input type that accepts FirewallCityMap and FirewallCityMapOutput values.
// You can construct a concrete instance of `FirewallCityMapInput` via:
//
//	FirewallCityMap{ "key": FirewallCityArgs{...} }
type FirewallCityMapInput interface {
	pulumi.Input

	ToFirewallCityMapOutput() FirewallCityMapOutput
	ToFirewallCityMapOutputWithContext(context.Context) FirewallCityMapOutput
}

type FirewallCityMap map[string]FirewallCityInput

func (FirewallCityMap) ElementType() reflect.Type {
	return reflect.TypeOf((*map[string]*FirewallCity)(nil)).Elem()
}

func (i FirewallCityMap) ToFirewallCityMapOutput() FirewallCityMapOutput {
	return i.ToFirewallCityMapOutputWithContext(context.Background())
}

func (i FirewallCityMap) ToFirewallCityMapOutputWithContext(ctx context.Context) FirewallCityMapOutput {
	return pulumi.ToOutputWithContext(ctx, i).(FirewallCityMapOutput)
}

type FirewallCityOutput struct{ *pulumi.OutputState }

func (FirewallCityOutput) ElementType() reflect.Type {
	return reflect.TypeOf((**FirewallCity)(nil)).Elem()
}

func (o FirewallCityOutput) ToFirewallCityOutput() FirewallCityOutput {
	return o
}

func (o FirewallCityOutput) ToFirewallCityOutputWithContext(ctx context.Context) FirewallCityOutput {
	return o
}

func (o FirewallCityOutput) Fosid() pulumi.IntOutput {
	return o.ApplyT(func(v *FirewallCity) pulumi.IntOutput { return v.Fosid }).(pulumi.IntOutput)
}

func (o FirewallCityOutput) Name() pulumi.StringOutput {
	return o.ApplyT(func(v *FirewallCity) pulumi.StringOutput { return v.Name }).(pulumi.StringOutput)
}

func (o FirewallCityOutput) Vdomparam() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *FirewallCity) pulumi.StringPtrOutput { return v.Vdomparam }).(pulumi.StringPtrOutput)
}

type FirewallCityArrayOutput struct{ *pulumi.OutputState }

func (FirewallCityArrayOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*[]*FirewallCity)(nil)).Elem()
}

func (o FirewallCityArrayOutput) ToFirewallCityArrayOutput() FirewallCityArrayOutput {
	return o
}

func (o FirewallCityArrayOutput) ToFirewallCityArrayOutputWithContext(ctx context.Context) FirewallCityArrayOutput {
	return o
}

func (o FirewallCityArrayOutput) Index(i pulumi.IntInput) FirewallCityOutput {
	return pulumi.All(o, i).ApplyT(func(vs []interface{}) *FirewallCity {
		return vs[0].([]*FirewallCity)[vs[1].(int)]
	}).(FirewallCityOutput)
}

type FirewallCityMapOutput struct{ *pulumi.OutputState }

func (FirewallCityMapOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*map[string]*FirewallCity)(nil)).Elem()
}

func (o FirewallCityMapOutput) ToFirewallCityMapOutput() FirewallCityMapOutput {
	return o
}

func (o FirewallCityMapOutput) ToFirewallCityMapOutputWithContext(ctx context.Context) FirewallCityMapOutput {
	return o
}

func (o FirewallCityMapOutput) MapIndex(k pulumi.StringInput) FirewallCityOutput {
	return pulumi.All(o, k).ApplyT(func(vs []interface{}) *FirewallCity {
		return vs[0].(map[string]*FirewallCity)[vs[1].(string)]
	}).(FirewallCityOutput)
}

func init() {
	pulumi.RegisterInputType(reflect.TypeOf((*FirewallCityInput)(nil)).Elem(), &FirewallCity{})
	pulumi.RegisterInputType(reflect.TypeOf((*FirewallCityArrayInput)(nil)).Elem(), FirewallCityArray{})
	pulumi.RegisterInputType(reflect.TypeOf((*FirewallCityMapInput)(nil)).Elem(), FirewallCityMap{})
	pulumi.RegisterOutputType(FirewallCityOutput{})
	pulumi.RegisterOutputType(FirewallCityArrayOutput{})
	pulumi.RegisterOutputType(FirewallCityMapOutput{})
}
