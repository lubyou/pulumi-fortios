// *** WARNING: this file was generated by the Pulumi Terraform Bridge (tfgen) Tool. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

package fortios

import (
	"context"
	"reflect"

	"github.com/pkg/errors"
	"github.com/pulumi/pulumi/sdk/v3/go/pulumi"
)

// Configure virtual wire pairs.
//
// ## Import
//
// System VirtualWirePair can be imported using any of these accepted formats
//
// ```sh
//  $ pulumi import fortios:index/systemVirtualWirePair:SystemVirtualWirePair labelname {{name}}
// ```
//
//  If you do not want to import arguments of block$ export "FORTIOS_IMPORT_TABLE"="false"
//
// ```sh
//  $ pulumi import fortios:index/systemVirtualWirePair:SystemVirtualWirePair labelname {{name}}
// ```
//
//  $ unset "FORTIOS_IMPORT_TABLE"
type SystemVirtualWirePair struct {
	pulumi.CustomResourceState

	// true or false, set this parameter to true when using dynamic forEach + toset to configure and sort sub-tables, please do not set this parameter when configuring static sub-tables.
	DynamicSortSubtable pulumi.StringPtrOutput `pulumi:"dynamicSortSubtable"`
	// Interfaces belong to the virtual-wire-pair. The structure of `member` block is documented below.
	Members SystemVirtualWirePairMemberArrayOutput `pulumi:"members"`
	// Virtual-wire-pair name. Must be a unique interface name.
	Name pulumi.StringOutput `pulumi:"name"`
	// Specifies the vdom to which the resource will be applied when the FortiGate unit is running in VDOM mode. Only one vdom can be specified. If you want to inherit the vdom configuration of the provider, please do not set this parameter.
	Vdomparam pulumi.StringPtrOutput `pulumi:"vdomparam"`
	// Set VLAN filters.
	VlanFilter pulumi.StringOutput `pulumi:"vlanFilter"`
	// Enable/disable wildcard VLAN. Valid values: `enable`, `disable`.
	WildcardVlan pulumi.StringOutput `pulumi:"wildcardVlan"`
}

// NewSystemVirtualWirePair registers a new resource with the given unique name, arguments, and options.
func NewSystemVirtualWirePair(ctx *pulumi.Context,
	name string, args *SystemVirtualWirePairArgs, opts ...pulumi.ResourceOption) (*SystemVirtualWirePair, error) {
	if args == nil {
		return nil, errors.New("missing one or more required arguments")
	}

	if args.Members == nil {
		return nil, errors.New("invalid value for required argument 'Members'")
	}
	opts = pkgResourceDefaultOpts(opts)
	var resource SystemVirtualWirePair
	err := ctx.RegisterResource("fortios:index/systemVirtualWirePair:SystemVirtualWirePair", name, args, &resource, opts...)
	if err != nil {
		return nil, err
	}
	return &resource, nil
}

// GetSystemVirtualWirePair gets an existing SystemVirtualWirePair resource's state with the given name, ID, and optional
// state properties that are used to uniquely qualify the lookup (nil if not required).
func GetSystemVirtualWirePair(ctx *pulumi.Context,
	name string, id pulumi.IDInput, state *SystemVirtualWirePairState, opts ...pulumi.ResourceOption) (*SystemVirtualWirePair, error) {
	var resource SystemVirtualWirePair
	err := ctx.ReadResource("fortios:index/systemVirtualWirePair:SystemVirtualWirePair", name, id, state, &resource, opts...)
	if err != nil {
		return nil, err
	}
	return &resource, nil
}

// Input properties used for looking up and filtering SystemVirtualWirePair resources.
type systemVirtualWirePairState struct {
	// true or false, set this parameter to true when using dynamic forEach + toset to configure and sort sub-tables, please do not set this parameter when configuring static sub-tables.
	DynamicSortSubtable *string `pulumi:"dynamicSortSubtable"`
	// Interfaces belong to the virtual-wire-pair. The structure of `member` block is documented below.
	Members []SystemVirtualWirePairMember `pulumi:"members"`
	// Virtual-wire-pair name. Must be a unique interface name.
	Name *string `pulumi:"name"`
	// Specifies the vdom to which the resource will be applied when the FortiGate unit is running in VDOM mode. Only one vdom can be specified. If you want to inherit the vdom configuration of the provider, please do not set this parameter.
	Vdomparam *string `pulumi:"vdomparam"`
	// Set VLAN filters.
	VlanFilter *string `pulumi:"vlanFilter"`
	// Enable/disable wildcard VLAN. Valid values: `enable`, `disable`.
	WildcardVlan *string `pulumi:"wildcardVlan"`
}

type SystemVirtualWirePairState struct {
	// true or false, set this parameter to true when using dynamic forEach + toset to configure and sort sub-tables, please do not set this parameter when configuring static sub-tables.
	DynamicSortSubtable pulumi.StringPtrInput
	// Interfaces belong to the virtual-wire-pair. The structure of `member` block is documented below.
	Members SystemVirtualWirePairMemberArrayInput
	// Virtual-wire-pair name. Must be a unique interface name.
	Name pulumi.StringPtrInput
	// Specifies the vdom to which the resource will be applied when the FortiGate unit is running in VDOM mode. Only one vdom can be specified. If you want to inherit the vdom configuration of the provider, please do not set this parameter.
	Vdomparam pulumi.StringPtrInput
	// Set VLAN filters.
	VlanFilter pulumi.StringPtrInput
	// Enable/disable wildcard VLAN. Valid values: `enable`, `disable`.
	WildcardVlan pulumi.StringPtrInput
}

func (SystemVirtualWirePairState) ElementType() reflect.Type {
	return reflect.TypeOf((*systemVirtualWirePairState)(nil)).Elem()
}

type systemVirtualWirePairArgs struct {
	// true or false, set this parameter to true when using dynamic forEach + toset to configure and sort sub-tables, please do not set this parameter when configuring static sub-tables.
	DynamicSortSubtable *string `pulumi:"dynamicSortSubtable"`
	// Interfaces belong to the virtual-wire-pair. The structure of `member` block is documented below.
	Members []SystemVirtualWirePairMember `pulumi:"members"`
	// Virtual-wire-pair name. Must be a unique interface name.
	Name *string `pulumi:"name"`
	// Specifies the vdom to which the resource will be applied when the FortiGate unit is running in VDOM mode. Only one vdom can be specified. If you want to inherit the vdom configuration of the provider, please do not set this parameter.
	Vdomparam *string `pulumi:"vdomparam"`
	// Set VLAN filters.
	VlanFilter *string `pulumi:"vlanFilter"`
	// Enable/disable wildcard VLAN. Valid values: `enable`, `disable`.
	WildcardVlan *string `pulumi:"wildcardVlan"`
}

// The set of arguments for constructing a SystemVirtualWirePair resource.
type SystemVirtualWirePairArgs struct {
	// true or false, set this parameter to true when using dynamic forEach + toset to configure and sort sub-tables, please do not set this parameter when configuring static sub-tables.
	DynamicSortSubtable pulumi.StringPtrInput
	// Interfaces belong to the virtual-wire-pair. The structure of `member` block is documented below.
	Members SystemVirtualWirePairMemberArrayInput
	// Virtual-wire-pair name. Must be a unique interface name.
	Name pulumi.StringPtrInput
	// Specifies the vdom to which the resource will be applied when the FortiGate unit is running in VDOM mode. Only one vdom can be specified. If you want to inherit the vdom configuration of the provider, please do not set this parameter.
	Vdomparam pulumi.StringPtrInput
	// Set VLAN filters.
	VlanFilter pulumi.StringPtrInput
	// Enable/disable wildcard VLAN. Valid values: `enable`, `disable`.
	WildcardVlan pulumi.StringPtrInput
}

func (SystemVirtualWirePairArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*systemVirtualWirePairArgs)(nil)).Elem()
}

type SystemVirtualWirePairInput interface {
	pulumi.Input

	ToSystemVirtualWirePairOutput() SystemVirtualWirePairOutput
	ToSystemVirtualWirePairOutputWithContext(ctx context.Context) SystemVirtualWirePairOutput
}

func (*SystemVirtualWirePair) ElementType() reflect.Type {
	return reflect.TypeOf((**SystemVirtualWirePair)(nil)).Elem()
}

func (i *SystemVirtualWirePair) ToSystemVirtualWirePairOutput() SystemVirtualWirePairOutput {
	return i.ToSystemVirtualWirePairOutputWithContext(context.Background())
}

func (i *SystemVirtualWirePair) ToSystemVirtualWirePairOutputWithContext(ctx context.Context) SystemVirtualWirePairOutput {
	return pulumi.ToOutputWithContext(ctx, i).(SystemVirtualWirePairOutput)
}

// SystemVirtualWirePairArrayInput is an input type that accepts SystemVirtualWirePairArray and SystemVirtualWirePairArrayOutput values.
// You can construct a concrete instance of `SystemVirtualWirePairArrayInput` via:
//
//          SystemVirtualWirePairArray{ SystemVirtualWirePairArgs{...} }
type SystemVirtualWirePairArrayInput interface {
	pulumi.Input

	ToSystemVirtualWirePairArrayOutput() SystemVirtualWirePairArrayOutput
	ToSystemVirtualWirePairArrayOutputWithContext(context.Context) SystemVirtualWirePairArrayOutput
}

type SystemVirtualWirePairArray []SystemVirtualWirePairInput

func (SystemVirtualWirePairArray) ElementType() reflect.Type {
	return reflect.TypeOf((*[]*SystemVirtualWirePair)(nil)).Elem()
}

func (i SystemVirtualWirePairArray) ToSystemVirtualWirePairArrayOutput() SystemVirtualWirePairArrayOutput {
	return i.ToSystemVirtualWirePairArrayOutputWithContext(context.Background())
}

func (i SystemVirtualWirePairArray) ToSystemVirtualWirePairArrayOutputWithContext(ctx context.Context) SystemVirtualWirePairArrayOutput {
	return pulumi.ToOutputWithContext(ctx, i).(SystemVirtualWirePairArrayOutput)
}

// SystemVirtualWirePairMapInput is an input type that accepts SystemVirtualWirePairMap and SystemVirtualWirePairMapOutput values.
// You can construct a concrete instance of `SystemVirtualWirePairMapInput` via:
//
//          SystemVirtualWirePairMap{ "key": SystemVirtualWirePairArgs{...} }
type SystemVirtualWirePairMapInput interface {
	pulumi.Input

	ToSystemVirtualWirePairMapOutput() SystemVirtualWirePairMapOutput
	ToSystemVirtualWirePairMapOutputWithContext(context.Context) SystemVirtualWirePairMapOutput
}

type SystemVirtualWirePairMap map[string]SystemVirtualWirePairInput

func (SystemVirtualWirePairMap) ElementType() reflect.Type {
	return reflect.TypeOf((*map[string]*SystemVirtualWirePair)(nil)).Elem()
}

func (i SystemVirtualWirePairMap) ToSystemVirtualWirePairMapOutput() SystemVirtualWirePairMapOutput {
	return i.ToSystemVirtualWirePairMapOutputWithContext(context.Background())
}

func (i SystemVirtualWirePairMap) ToSystemVirtualWirePairMapOutputWithContext(ctx context.Context) SystemVirtualWirePairMapOutput {
	return pulumi.ToOutputWithContext(ctx, i).(SystemVirtualWirePairMapOutput)
}

type SystemVirtualWirePairOutput struct{ *pulumi.OutputState }

func (SystemVirtualWirePairOutput) ElementType() reflect.Type {
	return reflect.TypeOf((**SystemVirtualWirePair)(nil)).Elem()
}

func (o SystemVirtualWirePairOutput) ToSystemVirtualWirePairOutput() SystemVirtualWirePairOutput {
	return o
}

func (o SystemVirtualWirePairOutput) ToSystemVirtualWirePairOutputWithContext(ctx context.Context) SystemVirtualWirePairOutput {
	return o
}

type SystemVirtualWirePairArrayOutput struct{ *pulumi.OutputState }

func (SystemVirtualWirePairArrayOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*[]*SystemVirtualWirePair)(nil)).Elem()
}

func (o SystemVirtualWirePairArrayOutput) ToSystemVirtualWirePairArrayOutput() SystemVirtualWirePairArrayOutput {
	return o
}

func (o SystemVirtualWirePairArrayOutput) ToSystemVirtualWirePairArrayOutputWithContext(ctx context.Context) SystemVirtualWirePairArrayOutput {
	return o
}

func (o SystemVirtualWirePairArrayOutput) Index(i pulumi.IntInput) SystemVirtualWirePairOutput {
	return pulumi.All(o, i).ApplyT(func(vs []interface{}) *SystemVirtualWirePair {
		return vs[0].([]*SystemVirtualWirePair)[vs[1].(int)]
	}).(SystemVirtualWirePairOutput)
}

type SystemVirtualWirePairMapOutput struct{ *pulumi.OutputState }

func (SystemVirtualWirePairMapOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*map[string]*SystemVirtualWirePair)(nil)).Elem()
}

func (o SystemVirtualWirePairMapOutput) ToSystemVirtualWirePairMapOutput() SystemVirtualWirePairMapOutput {
	return o
}

func (o SystemVirtualWirePairMapOutput) ToSystemVirtualWirePairMapOutputWithContext(ctx context.Context) SystemVirtualWirePairMapOutput {
	return o
}

func (o SystemVirtualWirePairMapOutput) MapIndex(k pulumi.StringInput) SystemVirtualWirePairOutput {
	return pulumi.All(o, k).ApplyT(func(vs []interface{}) *SystemVirtualWirePair {
		return vs[0].(map[string]*SystemVirtualWirePair)[vs[1].(string)]
	}).(SystemVirtualWirePairOutput)
}

func init() {
	pulumi.RegisterInputType(reflect.TypeOf((*SystemVirtualWirePairInput)(nil)).Elem(), &SystemVirtualWirePair{})
	pulumi.RegisterInputType(reflect.TypeOf((*SystemVirtualWirePairArrayInput)(nil)).Elem(), SystemVirtualWirePairArray{})
	pulumi.RegisterInputType(reflect.TypeOf((*SystemVirtualWirePairMapInput)(nil)).Elem(), SystemVirtualWirePairMap{})
	pulumi.RegisterOutputType(SystemVirtualWirePairOutput{})
	pulumi.RegisterOutputType(SystemVirtualWirePairArrayOutput{})
	pulumi.RegisterOutputType(SystemVirtualWirePairMapOutput{})
}
