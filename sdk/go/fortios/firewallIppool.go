// Code generated by the Pulumi Terraform Bridge (tfgen) Tool DO NOT EDIT.
// *** WARNING: Do not edit by hand unless you're certain you know what you are doing! ***

package fortios

import (
	"context"
	"reflect"

	"errors"
	"github.com/lubyou/pulumi-fortios/sdk/go/fortios/internal"
	"github.com/pulumi/pulumi/sdk/v3/go/pulumi"
)

type FirewallIppool struct {
	pulumi.CustomResourceState

	AddNat64Route           pulumi.StringOutput    `pulumi:"addNat64Route"`
	ArpIntf                 pulumi.StringOutput    `pulumi:"arpIntf"`
	ArpReply                pulumi.StringOutput    `pulumi:"arpReply"`
	AssociatedInterface     pulumi.StringOutput    `pulumi:"associatedInterface"`
	BlockSize               pulumi.IntOutput       `pulumi:"blockSize"`
	Comments                pulumi.StringPtrOutput `pulumi:"comments"`
	Endip                   pulumi.StringOutput    `pulumi:"endip"`
	Endport                 pulumi.IntOutput       `pulumi:"endport"`
	Name                    pulumi.StringOutput    `pulumi:"name"`
	Nat64                   pulumi.StringOutput    `pulumi:"nat64"`
	NumBlocksPerUser        pulumi.IntOutput       `pulumi:"numBlocksPerUser"`
	PbaTimeout              pulumi.IntOutput       `pulumi:"pbaTimeout"`
	PermitAnyHost           pulumi.StringOutput    `pulumi:"permitAnyHost"`
	PortPerUser             pulumi.IntOutput       `pulumi:"portPerUser"`
	SourceEndip             pulumi.StringOutput    `pulumi:"sourceEndip"`
	SourceStartip           pulumi.StringOutput    `pulumi:"sourceStartip"`
	Startip                 pulumi.StringOutput    `pulumi:"startip"`
	Startport               pulumi.IntOutput       `pulumi:"startport"`
	SubnetBroadcastInIppool pulumi.StringOutput    `pulumi:"subnetBroadcastInIppool"`
	Type                    pulumi.StringOutput    `pulumi:"type"`
	Vdomparam               pulumi.StringPtrOutput `pulumi:"vdomparam"`
}

// NewFirewallIppool registers a new resource with the given unique name, arguments, and options.
func NewFirewallIppool(ctx *pulumi.Context,
	name string, args *FirewallIppoolArgs, opts ...pulumi.ResourceOption) (*FirewallIppool, error) {
	if args == nil {
		return nil, errors.New("missing one or more required arguments")
	}

	if args.Endip == nil {
		return nil, errors.New("invalid value for required argument 'Endip'")
	}
	if args.Startip == nil {
		return nil, errors.New("invalid value for required argument 'Startip'")
	}
	opts = internal.PkgResourceDefaultOpts(opts)
	var resource FirewallIppool
	err := ctx.RegisterResource("fortios:index/firewallIppool:FirewallIppool", name, args, &resource, opts...)
	if err != nil {
		return nil, err
	}
	return &resource, nil
}

// GetFirewallIppool gets an existing FirewallIppool resource's state with the given name, ID, and optional
// state properties that are used to uniquely qualify the lookup (nil if not required).
func GetFirewallIppool(ctx *pulumi.Context,
	name string, id pulumi.IDInput, state *FirewallIppoolState, opts ...pulumi.ResourceOption) (*FirewallIppool, error) {
	var resource FirewallIppool
	err := ctx.ReadResource("fortios:index/firewallIppool:FirewallIppool", name, id, state, &resource, opts...)
	if err != nil {
		return nil, err
	}
	return &resource, nil
}

// Input properties used for looking up and filtering FirewallIppool resources.
type firewallIppoolState struct {
	AddNat64Route           *string `pulumi:"addNat64Route"`
	ArpIntf                 *string `pulumi:"arpIntf"`
	ArpReply                *string `pulumi:"arpReply"`
	AssociatedInterface     *string `pulumi:"associatedInterface"`
	BlockSize               *int    `pulumi:"blockSize"`
	Comments                *string `pulumi:"comments"`
	Endip                   *string `pulumi:"endip"`
	Endport                 *int    `pulumi:"endport"`
	Name                    *string `pulumi:"name"`
	Nat64                   *string `pulumi:"nat64"`
	NumBlocksPerUser        *int    `pulumi:"numBlocksPerUser"`
	PbaTimeout              *int    `pulumi:"pbaTimeout"`
	PermitAnyHost           *string `pulumi:"permitAnyHost"`
	PortPerUser             *int    `pulumi:"portPerUser"`
	SourceEndip             *string `pulumi:"sourceEndip"`
	SourceStartip           *string `pulumi:"sourceStartip"`
	Startip                 *string `pulumi:"startip"`
	Startport               *int    `pulumi:"startport"`
	SubnetBroadcastInIppool *string `pulumi:"subnetBroadcastInIppool"`
	Type                    *string `pulumi:"type"`
	Vdomparam               *string `pulumi:"vdomparam"`
}

type FirewallIppoolState struct {
	AddNat64Route           pulumi.StringPtrInput
	ArpIntf                 pulumi.StringPtrInput
	ArpReply                pulumi.StringPtrInput
	AssociatedInterface     pulumi.StringPtrInput
	BlockSize               pulumi.IntPtrInput
	Comments                pulumi.StringPtrInput
	Endip                   pulumi.StringPtrInput
	Endport                 pulumi.IntPtrInput
	Name                    pulumi.StringPtrInput
	Nat64                   pulumi.StringPtrInput
	NumBlocksPerUser        pulumi.IntPtrInput
	PbaTimeout              pulumi.IntPtrInput
	PermitAnyHost           pulumi.StringPtrInput
	PortPerUser             pulumi.IntPtrInput
	SourceEndip             pulumi.StringPtrInput
	SourceStartip           pulumi.StringPtrInput
	Startip                 pulumi.StringPtrInput
	Startport               pulumi.IntPtrInput
	SubnetBroadcastInIppool pulumi.StringPtrInput
	Type                    pulumi.StringPtrInput
	Vdomparam               pulumi.StringPtrInput
}

func (FirewallIppoolState) ElementType() reflect.Type {
	return reflect.TypeOf((*firewallIppoolState)(nil)).Elem()
}

type firewallIppoolArgs struct {
	AddNat64Route           *string `pulumi:"addNat64Route"`
	ArpIntf                 *string `pulumi:"arpIntf"`
	ArpReply                *string `pulumi:"arpReply"`
	AssociatedInterface     *string `pulumi:"associatedInterface"`
	BlockSize               *int    `pulumi:"blockSize"`
	Comments                *string `pulumi:"comments"`
	Endip                   string  `pulumi:"endip"`
	Endport                 *int    `pulumi:"endport"`
	Name                    *string `pulumi:"name"`
	Nat64                   *string `pulumi:"nat64"`
	NumBlocksPerUser        *int    `pulumi:"numBlocksPerUser"`
	PbaTimeout              *int    `pulumi:"pbaTimeout"`
	PermitAnyHost           *string `pulumi:"permitAnyHost"`
	PortPerUser             *int    `pulumi:"portPerUser"`
	SourceEndip             *string `pulumi:"sourceEndip"`
	SourceStartip           *string `pulumi:"sourceStartip"`
	Startip                 string  `pulumi:"startip"`
	Startport               *int    `pulumi:"startport"`
	SubnetBroadcastInIppool *string `pulumi:"subnetBroadcastInIppool"`
	Type                    *string `pulumi:"type"`
	Vdomparam               *string `pulumi:"vdomparam"`
}

// The set of arguments for constructing a FirewallIppool resource.
type FirewallIppoolArgs struct {
	AddNat64Route           pulumi.StringPtrInput
	ArpIntf                 pulumi.StringPtrInput
	ArpReply                pulumi.StringPtrInput
	AssociatedInterface     pulumi.StringPtrInput
	BlockSize               pulumi.IntPtrInput
	Comments                pulumi.StringPtrInput
	Endip                   pulumi.StringInput
	Endport                 pulumi.IntPtrInput
	Name                    pulumi.StringPtrInput
	Nat64                   pulumi.StringPtrInput
	NumBlocksPerUser        pulumi.IntPtrInput
	PbaTimeout              pulumi.IntPtrInput
	PermitAnyHost           pulumi.StringPtrInput
	PortPerUser             pulumi.IntPtrInput
	SourceEndip             pulumi.StringPtrInput
	SourceStartip           pulumi.StringPtrInput
	Startip                 pulumi.StringInput
	Startport               pulumi.IntPtrInput
	SubnetBroadcastInIppool pulumi.StringPtrInput
	Type                    pulumi.StringPtrInput
	Vdomparam               pulumi.StringPtrInput
}

func (FirewallIppoolArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*firewallIppoolArgs)(nil)).Elem()
}

type FirewallIppoolInput interface {
	pulumi.Input

	ToFirewallIppoolOutput() FirewallIppoolOutput
	ToFirewallIppoolOutputWithContext(ctx context.Context) FirewallIppoolOutput
}

func (*FirewallIppool) ElementType() reflect.Type {
	return reflect.TypeOf((**FirewallIppool)(nil)).Elem()
}

func (i *FirewallIppool) ToFirewallIppoolOutput() FirewallIppoolOutput {
	return i.ToFirewallIppoolOutputWithContext(context.Background())
}

func (i *FirewallIppool) ToFirewallIppoolOutputWithContext(ctx context.Context) FirewallIppoolOutput {
	return pulumi.ToOutputWithContext(ctx, i).(FirewallIppoolOutput)
}

// FirewallIppoolArrayInput is an input type that accepts FirewallIppoolArray and FirewallIppoolArrayOutput values.
// You can construct a concrete instance of `FirewallIppoolArrayInput` via:
//
//	FirewallIppoolArray{ FirewallIppoolArgs{...} }
type FirewallIppoolArrayInput interface {
	pulumi.Input

	ToFirewallIppoolArrayOutput() FirewallIppoolArrayOutput
	ToFirewallIppoolArrayOutputWithContext(context.Context) FirewallIppoolArrayOutput
}

type FirewallIppoolArray []FirewallIppoolInput

func (FirewallIppoolArray) ElementType() reflect.Type {
	return reflect.TypeOf((*[]*FirewallIppool)(nil)).Elem()
}

func (i FirewallIppoolArray) ToFirewallIppoolArrayOutput() FirewallIppoolArrayOutput {
	return i.ToFirewallIppoolArrayOutputWithContext(context.Background())
}

func (i FirewallIppoolArray) ToFirewallIppoolArrayOutputWithContext(ctx context.Context) FirewallIppoolArrayOutput {
	return pulumi.ToOutputWithContext(ctx, i).(FirewallIppoolArrayOutput)
}

// FirewallIppoolMapInput is an input type that accepts FirewallIppoolMap and FirewallIppoolMapOutput values.
// You can construct a concrete instance of `FirewallIppoolMapInput` via:
//
//	FirewallIppoolMap{ "key": FirewallIppoolArgs{...} }
type FirewallIppoolMapInput interface {
	pulumi.Input

	ToFirewallIppoolMapOutput() FirewallIppoolMapOutput
	ToFirewallIppoolMapOutputWithContext(context.Context) FirewallIppoolMapOutput
}

type FirewallIppoolMap map[string]FirewallIppoolInput

func (FirewallIppoolMap) ElementType() reflect.Type {
	return reflect.TypeOf((*map[string]*FirewallIppool)(nil)).Elem()
}

func (i FirewallIppoolMap) ToFirewallIppoolMapOutput() FirewallIppoolMapOutput {
	return i.ToFirewallIppoolMapOutputWithContext(context.Background())
}

func (i FirewallIppoolMap) ToFirewallIppoolMapOutputWithContext(ctx context.Context) FirewallIppoolMapOutput {
	return pulumi.ToOutputWithContext(ctx, i).(FirewallIppoolMapOutput)
}

type FirewallIppoolOutput struct{ *pulumi.OutputState }

func (FirewallIppoolOutput) ElementType() reflect.Type {
	return reflect.TypeOf((**FirewallIppool)(nil)).Elem()
}

func (o FirewallIppoolOutput) ToFirewallIppoolOutput() FirewallIppoolOutput {
	return o
}

func (o FirewallIppoolOutput) ToFirewallIppoolOutputWithContext(ctx context.Context) FirewallIppoolOutput {
	return o
}

func (o FirewallIppoolOutput) AddNat64Route() pulumi.StringOutput {
	return o.ApplyT(func(v *FirewallIppool) pulumi.StringOutput { return v.AddNat64Route }).(pulumi.StringOutput)
}

func (o FirewallIppoolOutput) ArpIntf() pulumi.StringOutput {
	return o.ApplyT(func(v *FirewallIppool) pulumi.StringOutput { return v.ArpIntf }).(pulumi.StringOutput)
}

func (o FirewallIppoolOutput) ArpReply() pulumi.StringOutput {
	return o.ApplyT(func(v *FirewallIppool) pulumi.StringOutput { return v.ArpReply }).(pulumi.StringOutput)
}

func (o FirewallIppoolOutput) AssociatedInterface() pulumi.StringOutput {
	return o.ApplyT(func(v *FirewallIppool) pulumi.StringOutput { return v.AssociatedInterface }).(pulumi.StringOutput)
}

func (o FirewallIppoolOutput) BlockSize() pulumi.IntOutput {
	return o.ApplyT(func(v *FirewallIppool) pulumi.IntOutput { return v.BlockSize }).(pulumi.IntOutput)
}

func (o FirewallIppoolOutput) Comments() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *FirewallIppool) pulumi.StringPtrOutput { return v.Comments }).(pulumi.StringPtrOutput)
}

func (o FirewallIppoolOutput) Endip() pulumi.StringOutput {
	return o.ApplyT(func(v *FirewallIppool) pulumi.StringOutput { return v.Endip }).(pulumi.StringOutput)
}

func (o FirewallIppoolOutput) Endport() pulumi.IntOutput {
	return o.ApplyT(func(v *FirewallIppool) pulumi.IntOutput { return v.Endport }).(pulumi.IntOutput)
}

func (o FirewallIppoolOutput) Name() pulumi.StringOutput {
	return o.ApplyT(func(v *FirewallIppool) pulumi.StringOutput { return v.Name }).(pulumi.StringOutput)
}

func (o FirewallIppoolOutput) Nat64() pulumi.StringOutput {
	return o.ApplyT(func(v *FirewallIppool) pulumi.StringOutput { return v.Nat64 }).(pulumi.StringOutput)
}

func (o FirewallIppoolOutput) NumBlocksPerUser() pulumi.IntOutput {
	return o.ApplyT(func(v *FirewallIppool) pulumi.IntOutput { return v.NumBlocksPerUser }).(pulumi.IntOutput)
}

func (o FirewallIppoolOutput) PbaTimeout() pulumi.IntOutput {
	return o.ApplyT(func(v *FirewallIppool) pulumi.IntOutput { return v.PbaTimeout }).(pulumi.IntOutput)
}

func (o FirewallIppoolOutput) PermitAnyHost() pulumi.StringOutput {
	return o.ApplyT(func(v *FirewallIppool) pulumi.StringOutput { return v.PermitAnyHost }).(pulumi.StringOutput)
}

func (o FirewallIppoolOutput) PortPerUser() pulumi.IntOutput {
	return o.ApplyT(func(v *FirewallIppool) pulumi.IntOutput { return v.PortPerUser }).(pulumi.IntOutput)
}

func (o FirewallIppoolOutput) SourceEndip() pulumi.StringOutput {
	return o.ApplyT(func(v *FirewallIppool) pulumi.StringOutput { return v.SourceEndip }).(pulumi.StringOutput)
}

func (o FirewallIppoolOutput) SourceStartip() pulumi.StringOutput {
	return o.ApplyT(func(v *FirewallIppool) pulumi.StringOutput { return v.SourceStartip }).(pulumi.StringOutput)
}

func (o FirewallIppoolOutput) Startip() pulumi.StringOutput {
	return o.ApplyT(func(v *FirewallIppool) pulumi.StringOutput { return v.Startip }).(pulumi.StringOutput)
}

func (o FirewallIppoolOutput) Startport() pulumi.IntOutput {
	return o.ApplyT(func(v *FirewallIppool) pulumi.IntOutput { return v.Startport }).(pulumi.IntOutput)
}

func (o FirewallIppoolOutput) SubnetBroadcastInIppool() pulumi.StringOutput {
	return o.ApplyT(func(v *FirewallIppool) pulumi.StringOutput { return v.SubnetBroadcastInIppool }).(pulumi.StringOutput)
}

func (o FirewallIppoolOutput) Type() pulumi.StringOutput {
	return o.ApplyT(func(v *FirewallIppool) pulumi.StringOutput { return v.Type }).(pulumi.StringOutput)
}

func (o FirewallIppoolOutput) Vdomparam() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *FirewallIppool) pulumi.StringPtrOutput { return v.Vdomparam }).(pulumi.StringPtrOutput)
}

type FirewallIppoolArrayOutput struct{ *pulumi.OutputState }

func (FirewallIppoolArrayOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*[]*FirewallIppool)(nil)).Elem()
}

func (o FirewallIppoolArrayOutput) ToFirewallIppoolArrayOutput() FirewallIppoolArrayOutput {
	return o
}

func (o FirewallIppoolArrayOutput) ToFirewallIppoolArrayOutputWithContext(ctx context.Context) FirewallIppoolArrayOutput {
	return o
}

func (o FirewallIppoolArrayOutput) Index(i pulumi.IntInput) FirewallIppoolOutput {
	return pulumi.All(o, i).ApplyT(func(vs []interface{}) *FirewallIppool {
		return vs[0].([]*FirewallIppool)[vs[1].(int)]
	}).(FirewallIppoolOutput)
}

type FirewallIppoolMapOutput struct{ *pulumi.OutputState }

func (FirewallIppoolMapOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*map[string]*FirewallIppool)(nil)).Elem()
}

func (o FirewallIppoolMapOutput) ToFirewallIppoolMapOutput() FirewallIppoolMapOutput {
	return o
}

func (o FirewallIppoolMapOutput) ToFirewallIppoolMapOutputWithContext(ctx context.Context) FirewallIppoolMapOutput {
	return o
}

func (o FirewallIppoolMapOutput) MapIndex(k pulumi.StringInput) FirewallIppoolOutput {
	return pulumi.All(o, k).ApplyT(func(vs []interface{}) *FirewallIppool {
		return vs[0].(map[string]*FirewallIppool)[vs[1].(string)]
	}).(FirewallIppoolOutput)
}

func init() {
	pulumi.RegisterInputType(reflect.TypeOf((*FirewallIppoolInput)(nil)).Elem(), &FirewallIppool{})
	pulumi.RegisterInputType(reflect.TypeOf((*FirewallIppoolArrayInput)(nil)).Elem(), FirewallIppoolArray{})
	pulumi.RegisterInputType(reflect.TypeOf((*FirewallIppoolMapInput)(nil)).Elem(), FirewallIppoolMap{})
	pulumi.RegisterOutputType(FirewallIppoolOutput{})
	pulumi.RegisterOutputType(FirewallIppoolArrayOutput{})
	pulumi.RegisterOutputType(FirewallIppoolMapOutput{})
}
