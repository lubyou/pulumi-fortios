// *** WARNING: this file was generated by the Pulumi Terraform Bridge (tfgen) Tool. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

package fortios

import (
	"context"
	"reflect"

	"github.com/pulumi/pulumi/sdk/v3/go/pulumi"
)

// Configure FortiSwitch traffic policy.
//
// ## Example Usage
//
// ```go
// package main
//
// import (
// 	"github.com/pulumi/pulumi-fortios/sdk/go/fortios"
// 	"github.com/pulumi/pulumi/sdk/v3/go/pulumi"
// )
//
// func main() {
// 	pulumi.Run(func(ctx *pulumi.Context) error {
// 		_, err := fortios.NewSwitchControllerTrafficPolicy(ctx, "trname", &fortios.SwitchControllerTrafficPolicyArgs{
// 			GuaranteedBandwidth: pulumi.Int(0),
// 			GuaranteedBurst:     pulumi.Int(0),
// 			MaximumBurst:        pulumi.Int(0),
// 			PolicerStatus:       pulumi.String("enable"),
// 			Type:                pulumi.String("ingress"),
// 		})
// 		if err != nil {
// 			return err
// 		}
// 		return nil
// 	})
// }
// ```
//
// ## Import
//
// SwitchController TrafficPolicy can be imported using any of these accepted formats$ export "FORTIOS_IMPORT_TABLE"="true"
//
// ```sh
//  $ pulumi import fortios:index/switchControllerTrafficPolicy:SwitchControllerTrafficPolicy labelname {{name}}
// ```
//
//  $ unset "FORTIOS_IMPORT_TABLE"
type SwitchControllerTrafficPolicy struct {
	pulumi.CustomResourceState

	// COS queue(0 - 7), or unset to disable.
	Cos pulumi.IntOutput `pulumi:"cos"`
	// COS queue(0 - 7), or unset to disable.
	CosQueue pulumi.IntOutput `pulumi:"cosQueue"`
	// Description of the traffic policy.
	Description pulumi.StringOutput `pulumi:"description"`
	// FSW Policer id
	Fosid pulumi.IntOutput `pulumi:"fosid"`
	// Guaranteed bandwidth in kbps (max value = 524287000).
	GuaranteedBandwidth pulumi.IntOutput `pulumi:"guaranteedBandwidth"`
	// Guaranteed burst size in bytes (max value = 4294967295).
	GuaranteedBurst pulumi.IntOutput `pulumi:"guaranteedBurst"`
	// Maximum burst size in bytes (max value = 4294967295).
	MaximumBurst pulumi.IntOutput `pulumi:"maximumBurst"`
	// Traffic policy name.
	Name pulumi.StringOutput `pulumi:"name"`
	// Enable/disable policer config on the traffic policy. Valid values: `enable`, `disable`.
	PolicerStatus pulumi.StringOutput `pulumi:"policerStatus"`
	// Configure type of policy(ingress/egress). Valid values: `ingress`, `egress`.
	Type pulumi.StringOutput `pulumi:"type"`
	// Specifies the vdom to which the resource will be applied when the FortiGate unit is running in VDOM mode. Only one vdom can be specified. If you want to inherit the vdom configuration of the provider, please do not set this parameter.
	Vdomparam pulumi.StringPtrOutput `pulumi:"vdomparam"`
}

// NewSwitchControllerTrafficPolicy registers a new resource with the given unique name, arguments, and options.
func NewSwitchControllerTrafficPolicy(ctx *pulumi.Context,
	name string, args *SwitchControllerTrafficPolicyArgs, opts ...pulumi.ResourceOption) (*SwitchControllerTrafficPolicy, error) {
	if args == nil {
		args = &SwitchControllerTrafficPolicyArgs{}
	}

	opts = pkgResourceDefaultOpts(opts)
	var resource SwitchControllerTrafficPolicy
	err := ctx.RegisterResource("fortios:index/switchControllerTrafficPolicy:SwitchControllerTrafficPolicy", name, args, &resource, opts...)
	if err != nil {
		return nil, err
	}
	return &resource, nil
}

// GetSwitchControllerTrafficPolicy gets an existing SwitchControllerTrafficPolicy resource's state with the given name, ID, and optional
// state properties that are used to uniquely qualify the lookup (nil if not required).
func GetSwitchControllerTrafficPolicy(ctx *pulumi.Context,
	name string, id pulumi.IDInput, state *SwitchControllerTrafficPolicyState, opts ...pulumi.ResourceOption) (*SwitchControllerTrafficPolicy, error) {
	var resource SwitchControllerTrafficPolicy
	err := ctx.ReadResource("fortios:index/switchControllerTrafficPolicy:SwitchControllerTrafficPolicy", name, id, state, &resource, opts...)
	if err != nil {
		return nil, err
	}
	return &resource, nil
}

// Input properties used for looking up and filtering SwitchControllerTrafficPolicy resources.
type switchControllerTrafficPolicyState struct {
	// COS queue(0 - 7), or unset to disable.
	Cos *int `pulumi:"cos"`
	// COS queue(0 - 7), or unset to disable.
	CosQueue *int `pulumi:"cosQueue"`
	// Description of the traffic policy.
	Description *string `pulumi:"description"`
	// FSW Policer id
	Fosid *int `pulumi:"fosid"`
	// Guaranteed bandwidth in kbps (max value = 524287000).
	GuaranteedBandwidth *int `pulumi:"guaranteedBandwidth"`
	// Guaranteed burst size in bytes (max value = 4294967295).
	GuaranteedBurst *int `pulumi:"guaranteedBurst"`
	// Maximum burst size in bytes (max value = 4294967295).
	MaximumBurst *int `pulumi:"maximumBurst"`
	// Traffic policy name.
	Name *string `pulumi:"name"`
	// Enable/disable policer config on the traffic policy. Valid values: `enable`, `disable`.
	PolicerStatus *string `pulumi:"policerStatus"`
	// Configure type of policy(ingress/egress). Valid values: `ingress`, `egress`.
	Type *string `pulumi:"type"`
	// Specifies the vdom to which the resource will be applied when the FortiGate unit is running in VDOM mode. Only one vdom can be specified. If you want to inherit the vdom configuration of the provider, please do not set this parameter.
	Vdomparam *string `pulumi:"vdomparam"`
}

type SwitchControllerTrafficPolicyState struct {
	// COS queue(0 - 7), or unset to disable.
	Cos pulumi.IntPtrInput
	// COS queue(0 - 7), or unset to disable.
	CosQueue pulumi.IntPtrInput
	// Description of the traffic policy.
	Description pulumi.StringPtrInput
	// FSW Policer id
	Fosid pulumi.IntPtrInput
	// Guaranteed bandwidth in kbps (max value = 524287000).
	GuaranteedBandwidth pulumi.IntPtrInput
	// Guaranteed burst size in bytes (max value = 4294967295).
	GuaranteedBurst pulumi.IntPtrInput
	// Maximum burst size in bytes (max value = 4294967295).
	MaximumBurst pulumi.IntPtrInput
	// Traffic policy name.
	Name pulumi.StringPtrInput
	// Enable/disable policer config on the traffic policy. Valid values: `enable`, `disable`.
	PolicerStatus pulumi.StringPtrInput
	// Configure type of policy(ingress/egress). Valid values: `ingress`, `egress`.
	Type pulumi.StringPtrInput
	// Specifies the vdom to which the resource will be applied when the FortiGate unit is running in VDOM mode. Only one vdom can be specified. If you want to inherit the vdom configuration of the provider, please do not set this parameter.
	Vdomparam pulumi.StringPtrInput
}

func (SwitchControllerTrafficPolicyState) ElementType() reflect.Type {
	return reflect.TypeOf((*switchControllerTrafficPolicyState)(nil)).Elem()
}

type switchControllerTrafficPolicyArgs struct {
	// COS queue(0 - 7), or unset to disable.
	Cos *int `pulumi:"cos"`
	// COS queue(0 - 7), or unset to disable.
	CosQueue *int `pulumi:"cosQueue"`
	// Description of the traffic policy.
	Description *string `pulumi:"description"`
	// FSW Policer id
	Fosid *int `pulumi:"fosid"`
	// Guaranteed bandwidth in kbps (max value = 524287000).
	GuaranteedBandwidth *int `pulumi:"guaranteedBandwidth"`
	// Guaranteed burst size in bytes (max value = 4294967295).
	GuaranteedBurst *int `pulumi:"guaranteedBurst"`
	// Maximum burst size in bytes (max value = 4294967295).
	MaximumBurst *int `pulumi:"maximumBurst"`
	// Traffic policy name.
	Name *string `pulumi:"name"`
	// Enable/disable policer config on the traffic policy. Valid values: `enable`, `disable`.
	PolicerStatus *string `pulumi:"policerStatus"`
	// Configure type of policy(ingress/egress). Valid values: `ingress`, `egress`.
	Type *string `pulumi:"type"`
	// Specifies the vdom to which the resource will be applied when the FortiGate unit is running in VDOM mode. Only one vdom can be specified. If you want to inherit the vdom configuration of the provider, please do not set this parameter.
	Vdomparam *string `pulumi:"vdomparam"`
}

// The set of arguments for constructing a SwitchControllerTrafficPolicy resource.
type SwitchControllerTrafficPolicyArgs struct {
	// COS queue(0 - 7), or unset to disable.
	Cos pulumi.IntPtrInput
	// COS queue(0 - 7), or unset to disable.
	CosQueue pulumi.IntPtrInput
	// Description of the traffic policy.
	Description pulumi.StringPtrInput
	// FSW Policer id
	Fosid pulumi.IntPtrInput
	// Guaranteed bandwidth in kbps (max value = 524287000).
	GuaranteedBandwidth pulumi.IntPtrInput
	// Guaranteed burst size in bytes (max value = 4294967295).
	GuaranteedBurst pulumi.IntPtrInput
	// Maximum burst size in bytes (max value = 4294967295).
	MaximumBurst pulumi.IntPtrInput
	// Traffic policy name.
	Name pulumi.StringPtrInput
	// Enable/disable policer config on the traffic policy. Valid values: `enable`, `disable`.
	PolicerStatus pulumi.StringPtrInput
	// Configure type of policy(ingress/egress). Valid values: `ingress`, `egress`.
	Type pulumi.StringPtrInput
	// Specifies the vdom to which the resource will be applied when the FortiGate unit is running in VDOM mode. Only one vdom can be specified. If you want to inherit the vdom configuration of the provider, please do not set this parameter.
	Vdomparam pulumi.StringPtrInput
}

func (SwitchControllerTrafficPolicyArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*switchControllerTrafficPolicyArgs)(nil)).Elem()
}

type SwitchControllerTrafficPolicyInput interface {
	pulumi.Input

	ToSwitchControllerTrafficPolicyOutput() SwitchControllerTrafficPolicyOutput
	ToSwitchControllerTrafficPolicyOutputWithContext(ctx context.Context) SwitchControllerTrafficPolicyOutput
}

func (*SwitchControllerTrafficPolicy) ElementType() reflect.Type {
	return reflect.TypeOf((**SwitchControllerTrafficPolicy)(nil)).Elem()
}

func (i *SwitchControllerTrafficPolicy) ToSwitchControllerTrafficPolicyOutput() SwitchControllerTrafficPolicyOutput {
	return i.ToSwitchControllerTrafficPolicyOutputWithContext(context.Background())
}

func (i *SwitchControllerTrafficPolicy) ToSwitchControllerTrafficPolicyOutputWithContext(ctx context.Context) SwitchControllerTrafficPolicyOutput {
	return pulumi.ToOutputWithContext(ctx, i).(SwitchControllerTrafficPolicyOutput)
}

// SwitchControllerTrafficPolicyArrayInput is an input type that accepts SwitchControllerTrafficPolicyArray and SwitchControllerTrafficPolicyArrayOutput values.
// You can construct a concrete instance of `SwitchControllerTrafficPolicyArrayInput` via:
//
//          SwitchControllerTrafficPolicyArray{ SwitchControllerTrafficPolicyArgs{...} }
type SwitchControllerTrafficPolicyArrayInput interface {
	pulumi.Input

	ToSwitchControllerTrafficPolicyArrayOutput() SwitchControllerTrafficPolicyArrayOutput
	ToSwitchControllerTrafficPolicyArrayOutputWithContext(context.Context) SwitchControllerTrafficPolicyArrayOutput
}

type SwitchControllerTrafficPolicyArray []SwitchControllerTrafficPolicyInput

func (SwitchControllerTrafficPolicyArray) ElementType() reflect.Type {
	return reflect.TypeOf((*[]*SwitchControllerTrafficPolicy)(nil)).Elem()
}

func (i SwitchControllerTrafficPolicyArray) ToSwitchControllerTrafficPolicyArrayOutput() SwitchControllerTrafficPolicyArrayOutput {
	return i.ToSwitchControllerTrafficPolicyArrayOutputWithContext(context.Background())
}

func (i SwitchControllerTrafficPolicyArray) ToSwitchControllerTrafficPolicyArrayOutputWithContext(ctx context.Context) SwitchControllerTrafficPolicyArrayOutput {
	return pulumi.ToOutputWithContext(ctx, i).(SwitchControllerTrafficPolicyArrayOutput)
}

// SwitchControllerTrafficPolicyMapInput is an input type that accepts SwitchControllerTrafficPolicyMap and SwitchControllerTrafficPolicyMapOutput values.
// You can construct a concrete instance of `SwitchControllerTrafficPolicyMapInput` via:
//
//          SwitchControllerTrafficPolicyMap{ "key": SwitchControllerTrafficPolicyArgs{...} }
type SwitchControllerTrafficPolicyMapInput interface {
	pulumi.Input

	ToSwitchControllerTrafficPolicyMapOutput() SwitchControllerTrafficPolicyMapOutput
	ToSwitchControllerTrafficPolicyMapOutputWithContext(context.Context) SwitchControllerTrafficPolicyMapOutput
}

type SwitchControllerTrafficPolicyMap map[string]SwitchControllerTrafficPolicyInput

func (SwitchControllerTrafficPolicyMap) ElementType() reflect.Type {
	return reflect.TypeOf((*map[string]*SwitchControllerTrafficPolicy)(nil)).Elem()
}

func (i SwitchControllerTrafficPolicyMap) ToSwitchControllerTrafficPolicyMapOutput() SwitchControllerTrafficPolicyMapOutput {
	return i.ToSwitchControllerTrafficPolicyMapOutputWithContext(context.Background())
}

func (i SwitchControllerTrafficPolicyMap) ToSwitchControllerTrafficPolicyMapOutputWithContext(ctx context.Context) SwitchControllerTrafficPolicyMapOutput {
	return pulumi.ToOutputWithContext(ctx, i).(SwitchControllerTrafficPolicyMapOutput)
}

type SwitchControllerTrafficPolicyOutput struct{ *pulumi.OutputState }

func (SwitchControllerTrafficPolicyOutput) ElementType() reflect.Type {
	return reflect.TypeOf((**SwitchControllerTrafficPolicy)(nil)).Elem()
}

func (o SwitchControllerTrafficPolicyOutput) ToSwitchControllerTrafficPolicyOutput() SwitchControllerTrafficPolicyOutput {
	return o
}

func (o SwitchControllerTrafficPolicyOutput) ToSwitchControllerTrafficPolicyOutputWithContext(ctx context.Context) SwitchControllerTrafficPolicyOutput {
	return o
}

type SwitchControllerTrafficPolicyArrayOutput struct{ *pulumi.OutputState }

func (SwitchControllerTrafficPolicyArrayOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*[]*SwitchControllerTrafficPolicy)(nil)).Elem()
}

func (o SwitchControllerTrafficPolicyArrayOutput) ToSwitchControllerTrafficPolicyArrayOutput() SwitchControllerTrafficPolicyArrayOutput {
	return o
}

func (o SwitchControllerTrafficPolicyArrayOutput) ToSwitchControllerTrafficPolicyArrayOutputWithContext(ctx context.Context) SwitchControllerTrafficPolicyArrayOutput {
	return o
}

func (o SwitchControllerTrafficPolicyArrayOutput) Index(i pulumi.IntInput) SwitchControllerTrafficPolicyOutput {
	return pulumi.All(o, i).ApplyT(func(vs []interface{}) *SwitchControllerTrafficPolicy {
		return vs[0].([]*SwitchControllerTrafficPolicy)[vs[1].(int)]
	}).(SwitchControllerTrafficPolicyOutput)
}

type SwitchControllerTrafficPolicyMapOutput struct{ *pulumi.OutputState }

func (SwitchControllerTrafficPolicyMapOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*map[string]*SwitchControllerTrafficPolicy)(nil)).Elem()
}

func (o SwitchControllerTrafficPolicyMapOutput) ToSwitchControllerTrafficPolicyMapOutput() SwitchControllerTrafficPolicyMapOutput {
	return o
}

func (o SwitchControllerTrafficPolicyMapOutput) ToSwitchControllerTrafficPolicyMapOutputWithContext(ctx context.Context) SwitchControllerTrafficPolicyMapOutput {
	return o
}

func (o SwitchControllerTrafficPolicyMapOutput) MapIndex(k pulumi.StringInput) SwitchControllerTrafficPolicyOutput {
	return pulumi.All(o, k).ApplyT(func(vs []interface{}) *SwitchControllerTrafficPolicy {
		return vs[0].(map[string]*SwitchControllerTrafficPolicy)[vs[1].(string)]
	}).(SwitchControllerTrafficPolicyOutput)
}

func init() {
	pulumi.RegisterInputType(reflect.TypeOf((*SwitchControllerTrafficPolicyInput)(nil)).Elem(), &SwitchControllerTrafficPolicy{})
	pulumi.RegisterInputType(reflect.TypeOf((*SwitchControllerTrafficPolicyArrayInput)(nil)).Elem(), SwitchControllerTrafficPolicyArray{})
	pulumi.RegisterInputType(reflect.TypeOf((*SwitchControllerTrafficPolicyMapInput)(nil)).Elem(), SwitchControllerTrafficPolicyMap{})
	pulumi.RegisterOutputType(SwitchControllerTrafficPolicyOutput{})
	pulumi.RegisterOutputType(SwitchControllerTrafficPolicyArrayOutput{})
	pulumi.RegisterOutputType(SwitchControllerTrafficPolicyMapOutput{})
}
