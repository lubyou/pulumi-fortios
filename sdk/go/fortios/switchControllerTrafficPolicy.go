// Code generated by the Pulumi Terraform Bridge (tfgen) Tool DO NOT EDIT.
// *** WARNING: Do not edit by hand unless you're certain you know what you are doing! ***

package fortios

import (
	"context"
	"reflect"

	"github.com/lubyou/pulumi-fortios/sdk/go/fortios/internal"
	"github.com/pulumi/pulumi/sdk/v3/go/pulumi"
)

type SwitchControllerTrafficPolicy struct {
	pulumi.CustomResourceState

	Cos                 pulumi.IntOutput       `pulumi:"cos"`
	CosQueue            pulumi.IntOutput       `pulumi:"cosQueue"`
	Description         pulumi.StringOutput    `pulumi:"description"`
	Fosid               pulumi.IntOutput       `pulumi:"fosid"`
	GuaranteedBandwidth pulumi.IntOutput       `pulumi:"guaranteedBandwidth"`
	GuaranteedBurst     pulumi.IntOutput       `pulumi:"guaranteedBurst"`
	MaximumBurst        pulumi.IntOutput       `pulumi:"maximumBurst"`
	Name                pulumi.StringOutput    `pulumi:"name"`
	PolicerStatus       pulumi.StringOutput    `pulumi:"policerStatus"`
	Type                pulumi.StringOutput    `pulumi:"type"`
	Vdomparam           pulumi.StringPtrOutput `pulumi:"vdomparam"`
}

// NewSwitchControllerTrafficPolicy registers a new resource with the given unique name, arguments, and options.
func NewSwitchControllerTrafficPolicy(ctx *pulumi.Context,
	name string, args *SwitchControllerTrafficPolicyArgs, opts ...pulumi.ResourceOption) (*SwitchControllerTrafficPolicy, error) {
	if args == nil {
		args = &SwitchControllerTrafficPolicyArgs{}
	}

	opts = internal.PkgResourceDefaultOpts(opts)
	var resource SwitchControllerTrafficPolicy
	err := ctx.RegisterResource("fortios:index/switchControllerTrafficPolicy:SwitchControllerTrafficPolicy", name, args, &resource, opts...)
	if err != nil {
		return nil, err
	}
	return &resource, nil
}

// GetSwitchControllerTrafficPolicy gets an existing SwitchControllerTrafficPolicy resource's state with the given name, ID, and optional
// state properties that are used to uniquely qualify the lookup (nil if not required).
func GetSwitchControllerTrafficPolicy(ctx *pulumi.Context,
	name string, id pulumi.IDInput, state *SwitchControllerTrafficPolicyState, opts ...pulumi.ResourceOption) (*SwitchControllerTrafficPolicy, error) {
	var resource SwitchControllerTrafficPolicy
	err := ctx.ReadResource("fortios:index/switchControllerTrafficPolicy:SwitchControllerTrafficPolicy", name, id, state, &resource, opts...)
	if err != nil {
		return nil, err
	}
	return &resource, nil
}

// Input properties used for looking up and filtering SwitchControllerTrafficPolicy resources.
type switchControllerTrafficPolicyState struct {
	Cos                 *int    `pulumi:"cos"`
	CosQueue            *int    `pulumi:"cosQueue"`
	Description         *string `pulumi:"description"`
	Fosid               *int    `pulumi:"fosid"`
	GuaranteedBandwidth *int    `pulumi:"guaranteedBandwidth"`
	GuaranteedBurst     *int    `pulumi:"guaranteedBurst"`
	MaximumBurst        *int    `pulumi:"maximumBurst"`
	Name                *string `pulumi:"name"`
	PolicerStatus       *string `pulumi:"policerStatus"`
	Type                *string `pulumi:"type"`
	Vdomparam           *string `pulumi:"vdomparam"`
}

type SwitchControllerTrafficPolicyState struct {
	Cos                 pulumi.IntPtrInput
	CosQueue            pulumi.IntPtrInput
	Description         pulumi.StringPtrInput
	Fosid               pulumi.IntPtrInput
	GuaranteedBandwidth pulumi.IntPtrInput
	GuaranteedBurst     pulumi.IntPtrInput
	MaximumBurst        pulumi.IntPtrInput
	Name                pulumi.StringPtrInput
	PolicerStatus       pulumi.StringPtrInput
	Type                pulumi.StringPtrInput
	Vdomparam           pulumi.StringPtrInput
}

func (SwitchControllerTrafficPolicyState) ElementType() reflect.Type {
	return reflect.TypeOf((*switchControllerTrafficPolicyState)(nil)).Elem()
}

type switchControllerTrafficPolicyArgs struct {
	Cos                 *int    `pulumi:"cos"`
	CosQueue            *int    `pulumi:"cosQueue"`
	Description         *string `pulumi:"description"`
	Fosid               *int    `pulumi:"fosid"`
	GuaranteedBandwidth *int    `pulumi:"guaranteedBandwidth"`
	GuaranteedBurst     *int    `pulumi:"guaranteedBurst"`
	MaximumBurst        *int    `pulumi:"maximumBurst"`
	Name                *string `pulumi:"name"`
	PolicerStatus       *string `pulumi:"policerStatus"`
	Type                *string `pulumi:"type"`
	Vdomparam           *string `pulumi:"vdomparam"`
}

// The set of arguments for constructing a SwitchControllerTrafficPolicy resource.
type SwitchControllerTrafficPolicyArgs struct {
	Cos                 pulumi.IntPtrInput
	CosQueue            pulumi.IntPtrInput
	Description         pulumi.StringPtrInput
	Fosid               pulumi.IntPtrInput
	GuaranteedBandwidth pulumi.IntPtrInput
	GuaranteedBurst     pulumi.IntPtrInput
	MaximumBurst        pulumi.IntPtrInput
	Name                pulumi.StringPtrInput
	PolicerStatus       pulumi.StringPtrInput
	Type                pulumi.StringPtrInput
	Vdomparam           pulumi.StringPtrInput
}

func (SwitchControllerTrafficPolicyArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*switchControllerTrafficPolicyArgs)(nil)).Elem()
}

type SwitchControllerTrafficPolicyInput interface {
	pulumi.Input

	ToSwitchControllerTrafficPolicyOutput() SwitchControllerTrafficPolicyOutput
	ToSwitchControllerTrafficPolicyOutputWithContext(ctx context.Context) SwitchControllerTrafficPolicyOutput
}

func (*SwitchControllerTrafficPolicy) ElementType() reflect.Type {
	return reflect.TypeOf((**SwitchControllerTrafficPolicy)(nil)).Elem()
}

func (i *SwitchControllerTrafficPolicy) ToSwitchControllerTrafficPolicyOutput() SwitchControllerTrafficPolicyOutput {
	return i.ToSwitchControllerTrafficPolicyOutputWithContext(context.Background())
}

func (i *SwitchControllerTrafficPolicy) ToSwitchControllerTrafficPolicyOutputWithContext(ctx context.Context) SwitchControllerTrafficPolicyOutput {
	return pulumi.ToOutputWithContext(ctx, i).(SwitchControllerTrafficPolicyOutput)
}

// SwitchControllerTrafficPolicyArrayInput is an input type that accepts SwitchControllerTrafficPolicyArray and SwitchControllerTrafficPolicyArrayOutput values.
// You can construct a concrete instance of `SwitchControllerTrafficPolicyArrayInput` via:
//
//	SwitchControllerTrafficPolicyArray{ SwitchControllerTrafficPolicyArgs{...} }
type SwitchControllerTrafficPolicyArrayInput interface {
	pulumi.Input

	ToSwitchControllerTrafficPolicyArrayOutput() SwitchControllerTrafficPolicyArrayOutput
	ToSwitchControllerTrafficPolicyArrayOutputWithContext(context.Context) SwitchControllerTrafficPolicyArrayOutput
}

type SwitchControllerTrafficPolicyArray []SwitchControllerTrafficPolicyInput

func (SwitchControllerTrafficPolicyArray) ElementType() reflect.Type {
	return reflect.TypeOf((*[]*SwitchControllerTrafficPolicy)(nil)).Elem()
}

func (i SwitchControllerTrafficPolicyArray) ToSwitchControllerTrafficPolicyArrayOutput() SwitchControllerTrafficPolicyArrayOutput {
	return i.ToSwitchControllerTrafficPolicyArrayOutputWithContext(context.Background())
}

func (i SwitchControllerTrafficPolicyArray) ToSwitchControllerTrafficPolicyArrayOutputWithContext(ctx context.Context) SwitchControllerTrafficPolicyArrayOutput {
	return pulumi.ToOutputWithContext(ctx, i).(SwitchControllerTrafficPolicyArrayOutput)
}

// SwitchControllerTrafficPolicyMapInput is an input type that accepts SwitchControllerTrafficPolicyMap and SwitchControllerTrafficPolicyMapOutput values.
// You can construct a concrete instance of `SwitchControllerTrafficPolicyMapInput` via:
//
//	SwitchControllerTrafficPolicyMap{ "key": SwitchControllerTrafficPolicyArgs{...} }
type SwitchControllerTrafficPolicyMapInput interface {
	pulumi.Input

	ToSwitchControllerTrafficPolicyMapOutput() SwitchControllerTrafficPolicyMapOutput
	ToSwitchControllerTrafficPolicyMapOutputWithContext(context.Context) SwitchControllerTrafficPolicyMapOutput
}

type SwitchControllerTrafficPolicyMap map[string]SwitchControllerTrafficPolicyInput

func (SwitchControllerTrafficPolicyMap) ElementType() reflect.Type {
	return reflect.TypeOf((*map[string]*SwitchControllerTrafficPolicy)(nil)).Elem()
}

func (i SwitchControllerTrafficPolicyMap) ToSwitchControllerTrafficPolicyMapOutput() SwitchControllerTrafficPolicyMapOutput {
	return i.ToSwitchControllerTrafficPolicyMapOutputWithContext(context.Background())
}

func (i SwitchControllerTrafficPolicyMap) ToSwitchControllerTrafficPolicyMapOutputWithContext(ctx context.Context) SwitchControllerTrafficPolicyMapOutput {
	return pulumi.ToOutputWithContext(ctx, i).(SwitchControllerTrafficPolicyMapOutput)
}

type SwitchControllerTrafficPolicyOutput struct{ *pulumi.OutputState }

func (SwitchControllerTrafficPolicyOutput) ElementType() reflect.Type {
	return reflect.TypeOf((**SwitchControllerTrafficPolicy)(nil)).Elem()
}

func (o SwitchControllerTrafficPolicyOutput) ToSwitchControllerTrafficPolicyOutput() SwitchControllerTrafficPolicyOutput {
	return o
}

func (o SwitchControllerTrafficPolicyOutput) ToSwitchControllerTrafficPolicyOutputWithContext(ctx context.Context) SwitchControllerTrafficPolicyOutput {
	return o
}

func (o SwitchControllerTrafficPolicyOutput) Cos() pulumi.IntOutput {
	return o.ApplyT(func(v *SwitchControllerTrafficPolicy) pulumi.IntOutput { return v.Cos }).(pulumi.IntOutput)
}

func (o SwitchControllerTrafficPolicyOutput) CosQueue() pulumi.IntOutput {
	return o.ApplyT(func(v *SwitchControllerTrafficPolicy) pulumi.IntOutput { return v.CosQueue }).(pulumi.IntOutput)
}

func (o SwitchControllerTrafficPolicyOutput) Description() pulumi.StringOutput {
	return o.ApplyT(func(v *SwitchControllerTrafficPolicy) pulumi.StringOutput { return v.Description }).(pulumi.StringOutput)
}

func (o SwitchControllerTrafficPolicyOutput) Fosid() pulumi.IntOutput {
	return o.ApplyT(func(v *SwitchControllerTrafficPolicy) pulumi.IntOutput { return v.Fosid }).(pulumi.IntOutput)
}

func (o SwitchControllerTrafficPolicyOutput) GuaranteedBandwidth() pulumi.IntOutput {
	return o.ApplyT(func(v *SwitchControllerTrafficPolicy) pulumi.IntOutput { return v.GuaranteedBandwidth }).(pulumi.IntOutput)
}

func (o SwitchControllerTrafficPolicyOutput) GuaranteedBurst() pulumi.IntOutput {
	return o.ApplyT(func(v *SwitchControllerTrafficPolicy) pulumi.IntOutput { return v.GuaranteedBurst }).(pulumi.IntOutput)
}

func (o SwitchControllerTrafficPolicyOutput) MaximumBurst() pulumi.IntOutput {
	return o.ApplyT(func(v *SwitchControllerTrafficPolicy) pulumi.IntOutput { return v.MaximumBurst }).(pulumi.IntOutput)
}

func (o SwitchControllerTrafficPolicyOutput) Name() pulumi.StringOutput {
	return o.ApplyT(func(v *SwitchControllerTrafficPolicy) pulumi.StringOutput { return v.Name }).(pulumi.StringOutput)
}

func (o SwitchControllerTrafficPolicyOutput) PolicerStatus() pulumi.StringOutput {
	return o.ApplyT(func(v *SwitchControllerTrafficPolicy) pulumi.StringOutput { return v.PolicerStatus }).(pulumi.StringOutput)
}

func (o SwitchControllerTrafficPolicyOutput) Type() pulumi.StringOutput {
	return o.ApplyT(func(v *SwitchControllerTrafficPolicy) pulumi.StringOutput { return v.Type }).(pulumi.StringOutput)
}

func (o SwitchControllerTrafficPolicyOutput) Vdomparam() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *SwitchControllerTrafficPolicy) pulumi.StringPtrOutput { return v.Vdomparam }).(pulumi.StringPtrOutput)
}

type SwitchControllerTrafficPolicyArrayOutput struct{ *pulumi.OutputState }

func (SwitchControllerTrafficPolicyArrayOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*[]*SwitchControllerTrafficPolicy)(nil)).Elem()
}

func (o SwitchControllerTrafficPolicyArrayOutput) ToSwitchControllerTrafficPolicyArrayOutput() SwitchControllerTrafficPolicyArrayOutput {
	return o
}

func (o SwitchControllerTrafficPolicyArrayOutput) ToSwitchControllerTrafficPolicyArrayOutputWithContext(ctx context.Context) SwitchControllerTrafficPolicyArrayOutput {
	return o
}

func (o SwitchControllerTrafficPolicyArrayOutput) Index(i pulumi.IntInput) SwitchControllerTrafficPolicyOutput {
	return pulumi.All(o, i).ApplyT(func(vs []interface{}) *SwitchControllerTrafficPolicy {
		return vs[0].([]*SwitchControllerTrafficPolicy)[vs[1].(int)]
	}).(SwitchControllerTrafficPolicyOutput)
}

type SwitchControllerTrafficPolicyMapOutput struct{ *pulumi.OutputState }

func (SwitchControllerTrafficPolicyMapOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*map[string]*SwitchControllerTrafficPolicy)(nil)).Elem()
}

func (o SwitchControllerTrafficPolicyMapOutput) ToSwitchControllerTrafficPolicyMapOutput() SwitchControllerTrafficPolicyMapOutput {
	return o
}

func (o SwitchControllerTrafficPolicyMapOutput) ToSwitchControllerTrafficPolicyMapOutputWithContext(ctx context.Context) SwitchControllerTrafficPolicyMapOutput {
	return o
}

func (o SwitchControllerTrafficPolicyMapOutput) MapIndex(k pulumi.StringInput) SwitchControllerTrafficPolicyOutput {
	return pulumi.All(o, k).ApplyT(func(vs []interface{}) *SwitchControllerTrafficPolicy {
		return vs[0].(map[string]*SwitchControllerTrafficPolicy)[vs[1].(string)]
	}).(SwitchControllerTrafficPolicyOutput)
}

func init() {
	pulumi.RegisterInputType(reflect.TypeOf((*SwitchControllerTrafficPolicyInput)(nil)).Elem(), &SwitchControllerTrafficPolicy{})
	pulumi.RegisterInputType(reflect.TypeOf((*SwitchControllerTrafficPolicyArrayInput)(nil)).Elem(), SwitchControllerTrafficPolicyArray{})
	pulumi.RegisterInputType(reflect.TypeOf((*SwitchControllerTrafficPolicyMapInput)(nil)).Elem(), SwitchControllerTrafficPolicyMap{})
	pulumi.RegisterOutputType(SwitchControllerTrafficPolicyOutput{})
	pulumi.RegisterOutputType(SwitchControllerTrafficPolicyArrayOutput{})
	pulumi.RegisterOutputType(SwitchControllerTrafficPolicyMapOutput{})
}
