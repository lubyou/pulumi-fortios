// Code generated by the Pulumi Terraform Bridge (tfgen) Tool DO NOT EDIT.
// *** WARNING: Do not edit by hand unless you're certain you know what you are doing! ***

package fortios

import (
	"context"
	"reflect"

	"github.com/lubyou/pulumi-fortios/sdk/go/fortios/internal"
	"github.com/pulumi/pulumi/sdk/v3/go/pulumi"
	"github.com/pulumi/pulumi/sdk/v3/go/pulumix"
)

type LogTacacsAccounting2Setting struct {
	pulumi.CustomResourceState

	Interface             pulumi.StringOutput    `pulumi:"interface"`
	InterfaceSelectMethod pulumi.StringOutput    `pulumi:"interfaceSelectMethod"`
	Server                pulumi.StringOutput    `pulumi:"server"`
	ServerKey             pulumi.StringPtrOutput `pulumi:"serverKey"`
	SourceIp              pulumi.StringOutput    `pulumi:"sourceIp"`
	Status                pulumi.StringOutput    `pulumi:"status"`
	Vdomparam             pulumi.StringPtrOutput `pulumi:"vdomparam"`
}

// NewLogTacacsAccounting2Setting registers a new resource with the given unique name, arguments, and options.
func NewLogTacacsAccounting2Setting(ctx *pulumi.Context,
	name string, args *LogTacacsAccounting2SettingArgs, opts ...pulumi.ResourceOption) (*LogTacacsAccounting2Setting, error) {
	if args == nil {
		args = &LogTacacsAccounting2SettingArgs{}
	}

	opts = internal.PkgResourceDefaultOpts(opts)
	var resource LogTacacsAccounting2Setting
	err := ctx.RegisterResource("fortios:index/logTacacsAccounting2Setting:LogTacacsAccounting2Setting", name, args, &resource, opts...)
	if err != nil {
		return nil, err
	}
	return &resource, nil
}

// GetLogTacacsAccounting2Setting gets an existing LogTacacsAccounting2Setting resource's state with the given name, ID, and optional
// state properties that are used to uniquely qualify the lookup (nil if not required).
func GetLogTacacsAccounting2Setting(ctx *pulumi.Context,
	name string, id pulumi.IDInput, state *LogTacacsAccounting2SettingState, opts ...pulumi.ResourceOption) (*LogTacacsAccounting2Setting, error) {
	var resource LogTacacsAccounting2Setting
	err := ctx.ReadResource("fortios:index/logTacacsAccounting2Setting:LogTacacsAccounting2Setting", name, id, state, &resource, opts...)
	if err != nil {
		return nil, err
	}
	return &resource, nil
}

// Input properties used for looking up and filtering LogTacacsAccounting2Setting resources.
type logTacacsAccounting2SettingState struct {
	Interface             *string `pulumi:"interface"`
	InterfaceSelectMethod *string `pulumi:"interfaceSelectMethod"`
	Server                *string `pulumi:"server"`
	ServerKey             *string `pulumi:"serverKey"`
	SourceIp              *string `pulumi:"sourceIp"`
	Status                *string `pulumi:"status"`
	Vdomparam             *string `pulumi:"vdomparam"`
}

type LogTacacsAccounting2SettingState struct {
	Interface             pulumi.StringPtrInput
	InterfaceSelectMethod pulumi.StringPtrInput
	Server                pulumi.StringPtrInput
	ServerKey             pulumi.StringPtrInput
	SourceIp              pulumi.StringPtrInput
	Status                pulumi.StringPtrInput
	Vdomparam             pulumi.StringPtrInput
}

func (LogTacacsAccounting2SettingState) ElementType() reflect.Type {
	return reflect.TypeOf((*logTacacsAccounting2SettingState)(nil)).Elem()
}

type logTacacsAccounting2SettingArgs struct {
	Interface             *string `pulumi:"interface"`
	InterfaceSelectMethod *string `pulumi:"interfaceSelectMethod"`
	Server                *string `pulumi:"server"`
	ServerKey             *string `pulumi:"serverKey"`
	SourceIp              *string `pulumi:"sourceIp"`
	Status                *string `pulumi:"status"`
	Vdomparam             *string `pulumi:"vdomparam"`
}

// The set of arguments for constructing a LogTacacsAccounting2Setting resource.
type LogTacacsAccounting2SettingArgs struct {
	Interface             pulumi.StringPtrInput
	InterfaceSelectMethod pulumi.StringPtrInput
	Server                pulumi.StringPtrInput
	ServerKey             pulumi.StringPtrInput
	SourceIp              pulumi.StringPtrInput
	Status                pulumi.StringPtrInput
	Vdomparam             pulumi.StringPtrInput
}

func (LogTacacsAccounting2SettingArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*logTacacsAccounting2SettingArgs)(nil)).Elem()
}

type LogTacacsAccounting2SettingInput interface {
	pulumi.Input

	ToLogTacacsAccounting2SettingOutput() LogTacacsAccounting2SettingOutput
	ToLogTacacsAccounting2SettingOutputWithContext(ctx context.Context) LogTacacsAccounting2SettingOutput
}

func (*LogTacacsAccounting2Setting) ElementType() reflect.Type {
	return reflect.TypeOf((**LogTacacsAccounting2Setting)(nil)).Elem()
}

func (i *LogTacacsAccounting2Setting) ToLogTacacsAccounting2SettingOutput() LogTacacsAccounting2SettingOutput {
	return i.ToLogTacacsAccounting2SettingOutputWithContext(context.Background())
}

func (i *LogTacacsAccounting2Setting) ToLogTacacsAccounting2SettingOutputWithContext(ctx context.Context) LogTacacsAccounting2SettingOutput {
	return pulumi.ToOutputWithContext(ctx, i).(LogTacacsAccounting2SettingOutput)
}

func (i *LogTacacsAccounting2Setting) ToOutput(ctx context.Context) pulumix.Output[*LogTacacsAccounting2Setting] {
	return pulumix.Output[*LogTacacsAccounting2Setting]{
		OutputState: i.ToLogTacacsAccounting2SettingOutputWithContext(ctx).OutputState,
	}
}

// LogTacacsAccounting2SettingArrayInput is an input type that accepts LogTacacsAccounting2SettingArray and LogTacacsAccounting2SettingArrayOutput values.
// You can construct a concrete instance of `LogTacacsAccounting2SettingArrayInput` via:
//
//	LogTacacsAccounting2SettingArray{ LogTacacsAccounting2SettingArgs{...} }
type LogTacacsAccounting2SettingArrayInput interface {
	pulumi.Input

	ToLogTacacsAccounting2SettingArrayOutput() LogTacacsAccounting2SettingArrayOutput
	ToLogTacacsAccounting2SettingArrayOutputWithContext(context.Context) LogTacacsAccounting2SettingArrayOutput
}

type LogTacacsAccounting2SettingArray []LogTacacsAccounting2SettingInput

func (LogTacacsAccounting2SettingArray) ElementType() reflect.Type {
	return reflect.TypeOf((*[]*LogTacacsAccounting2Setting)(nil)).Elem()
}

func (i LogTacacsAccounting2SettingArray) ToLogTacacsAccounting2SettingArrayOutput() LogTacacsAccounting2SettingArrayOutput {
	return i.ToLogTacacsAccounting2SettingArrayOutputWithContext(context.Background())
}

func (i LogTacacsAccounting2SettingArray) ToLogTacacsAccounting2SettingArrayOutputWithContext(ctx context.Context) LogTacacsAccounting2SettingArrayOutput {
	return pulumi.ToOutputWithContext(ctx, i).(LogTacacsAccounting2SettingArrayOutput)
}

func (i LogTacacsAccounting2SettingArray) ToOutput(ctx context.Context) pulumix.Output[[]*LogTacacsAccounting2Setting] {
	return pulumix.Output[[]*LogTacacsAccounting2Setting]{
		OutputState: i.ToLogTacacsAccounting2SettingArrayOutputWithContext(ctx).OutputState,
	}
}

// LogTacacsAccounting2SettingMapInput is an input type that accepts LogTacacsAccounting2SettingMap and LogTacacsAccounting2SettingMapOutput values.
// You can construct a concrete instance of `LogTacacsAccounting2SettingMapInput` via:
//
//	LogTacacsAccounting2SettingMap{ "key": LogTacacsAccounting2SettingArgs{...} }
type LogTacacsAccounting2SettingMapInput interface {
	pulumi.Input

	ToLogTacacsAccounting2SettingMapOutput() LogTacacsAccounting2SettingMapOutput
	ToLogTacacsAccounting2SettingMapOutputWithContext(context.Context) LogTacacsAccounting2SettingMapOutput
}

type LogTacacsAccounting2SettingMap map[string]LogTacacsAccounting2SettingInput

func (LogTacacsAccounting2SettingMap) ElementType() reflect.Type {
	return reflect.TypeOf((*map[string]*LogTacacsAccounting2Setting)(nil)).Elem()
}

func (i LogTacacsAccounting2SettingMap) ToLogTacacsAccounting2SettingMapOutput() LogTacacsAccounting2SettingMapOutput {
	return i.ToLogTacacsAccounting2SettingMapOutputWithContext(context.Background())
}

func (i LogTacacsAccounting2SettingMap) ToLogTacacsAccounting2SettingMapOutputWithContext(ctx context.Context) LogTacacsAccounting2SettingMapOutput {
	return pulumi.ToOutputWithContext(ctx, i).(LogTacacsAccounting2SettingMapOutput)
}

func (i LogTacacsAccounting2SettingMap) ToOutput(ctx context.Context) pulumix.Output[map[string]*LogTacacsAccounting2Setting] {
	return pulumix.Output[map[string]*LogTacacsAccounting2Setting]{
		OutputState: i.ToLogTacacsAccounting2SettingMapOutputWithContext(ctx).OutputState,
	}
}

type LogTacacsAccounting2SettingOutput struct{ *pulumi.OutputState }

func (LogTacacsAccounting2SettingOutput) ElementType() reflect.Type {
	return reflect.TypeOf((**LogTacacsAccounting2Setting)(nil)).Elem()
}

func (o LogTacacsAccounting2SettingOutput) ToLogTacacsAccounting2SettingOutput() LogTacacsAccounting2SettingOutput {
	return o
}

func (o LogTacacsAccounting2SettingOutput) ToLogTacacsAccounting2SettingOutputWithContext(ctx context.Context) LogTacacsAccounting2SettingOutput {
	return o
}

func (o LogTacacsAccounting2SettingOutput) ToOutput(ctx context.Context) pulumix.Output[*LogTacacsAccounting2Setting] {
	return pulumix.Output[*LogTacacsAccounting2Setting]{
		OutputState: o.OutputState,
	}
}

func (o LogTacacsAccounting2SettingOutput) Interface() pulumi.StringOutput {
	return o.ApplyT(func(v *LogTacacsAccounting2Setting) pulumi.StringOutput { return v.Interface }).(pulumi.StringOutput)
}

func (o LogTacacsAccounting2SettingOutput) InterfaceSelectMethod() pulumi.StringOutput {
	return o.ApplyT(func(v *LogTacacsAccounting2Setting) pulumi.StringOutput { return v.InterfaceSelectMethod }).(pulumi.StringOutput)
}

func (o LogTacacsAccounting2SettingOutput) Server() pulumi.StringOutput {
	return o.ApplyT(func(v *LogTacacsAccounting2Setting) pulumi.StringOutput { return v.Server }).(pulumi.StringOutput)
}

func (o LogTacacsAccounting2SettingOutput) ServerKey() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *LogTacacsAccounting2Setting) pulumi.StringPtrOutput { return v.ServerKey }).(pulumi.StringPtrOutput)
}

func (o LogTacacsAccounting2SettingOutput) SourceIp() pulumi.StringOutput {
	return o.ApplyT(func(v *LogTacacsAccounting2Setting) pulumi.StringOutput { return v.SourceIp }).(pulumi.StringOutput)
}

func (o LogTacacsAccounting2SettingOutput) Status() pulumi.StringOutput {
	return o.ApplyT(func(v *LogTacacsAccounting2Setting) pulumi.StringOutput { return v.Status }).(pulumi.StringOutput)
}

func (o LogTacacsAccounting2SettingOutput) Vdomparam() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *LogTacacsAccounting2Setting) pulumi.StringPtrOutput { return v.Vdomparam }).(pulumi.StringPtrOutput)
}

type LogTacacsAccounting2SettingArrayOutput struct{ *pulumi.OutputState }

func (LogTacacsAccounting2SettingArrayOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*[]*LogTacacsAccounting2Setting)(nil)).Elem()
}

func (o LogTacacsAccounting2SettingArrayOutput) ToLogTacacsAccounting2SettingArrayOutput() LogTacacsAccounting2SettingArrayOutput {
	return o
}

func (o LogTacacsAccounting2SettingArrayOutput) ToLogTacacsAccounting2SettingArrayOutputWithContext(ctx context.Context) LogTacacsAccounting2SettingArrayOutput {
	return o
}

func (o LogTacacsAccounting2SettingArrayOutput) ToOutput(ctx context.Context) pulumix.Output[[]*LogTacacsAccounting2Setting] {
	return pulumix.Output[[]*LogTacacsAccounting2Setting]{
		OutputState: o.OutputState,
	}
}

func (o LogTacacsAccounting2SettingArrayOutput) Index(i pulumi.IntInput) LogTacacsAccounting2SettingOutput {
	return pulumi.All(o, i).ApplyT(func(vs []interface{}) *LogTacacsAccounting2Setting {
		return vs[0].([]*LogTacacsAccounting2Setting)[vs[1].(int)]
	}).(LogTacacsAccounting2SettingOutput)
}

type LogTacacsAccounting2SettingMapOutput struct{ *pulumi.OutputState }

func (LogTacacsAccounting2SettingMapOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*map[string]*LogTacacsAccounting2Setting)(nil)).Elem()
}

func (o LogTacacsAccounting2SettingMapOutput) ToLogTacacsAccounting2SettingMapOutput() LogTacacsAccounting2SettingMapOutput {
	return o
}

func (o LogTacacsAccounting2SettingMapOutput) ToLogTacacsAccounting2SettingMapOutputWithContext(ctx context.Context) LogTacacsAccounting2SettingMapOutput {
	return o
}

func (o LogTacacsAccounting2SettingMapOutput) ToOutput(ctx context.Context) pulumix.Output[map[string]*LogTacacsAccounting2Setting] {
	return pulumix.Output[map[string]*LogTacacsAccounting2Setting]{
		OutputState: o.OutputState,
	}
}

func (o LogTacacsAccounting2SettingMapOutput) MapIndex(k pulumi.StringInput) LogTacacsAccounting2SettingOutput {
	return pulumi.All(o, k).ApplyT(func(vs []interface{}) *LogTacacsAccounting2Setting {
		return vs[0].(map[string]*LogTacacsAccounting2Setting)[vs[1].(string)]
	}).(LogTacacsAccounting2SettingOutput)
}

func init() {
	pulumi.RegisterInputType(reflect.TypeOf((*LogTacacsAccounting2SettingInput)(nil)).Elem(), &LogTacacsAccounting2Setting{})
	pulumi.RegisterInputType(reflect.TypeOf((*LogTacacsAccounting2SettingArrayInput)(nil)).Elem(), LogTacacsAccounting2SettingArray{})
	pulumi.RegisterInputType(reflect.TypeOf((*LogTacacsAccounting2SettingMapInput)(nil)).Elem(), LogTacacsAccounting2SettingMap{})
	pulumi.RegisterOutputType(LogTacacsAccounting2SettingOutput{})
	pulumi.RegisterOutputType(LogTacacsAccounting2SettingArrayOutput{})
	pulumi.RegisterOutputType(LogTacacsAccounting2SettingMapOutput{})
}
