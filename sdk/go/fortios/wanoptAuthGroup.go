// Code generated by the Pulumi Terraform Bridge (tfgen) Tool DO NOT EDIT.
// *** WARNING: Do not edit by hand unless you're certain you know what you are doing! ***

package fortios

import (
	"context"
	"reflect"

	"errors"
	"github.com/lubyou/pulumi-fortios/sdk/go/fortios/internal"
	"github.com/pulumi/pulumi/sdk/v3/go/pulumi"
	"github.com/pulumi/pulumi/sdk/v3/go/pulumix"
)

type WanoptAuthGroup struct {
	pulumi.CustomResourceState

	AuthMethod pulumi.StringOutput    `pulumi:"authMethod"`
	Cert       pulumi.StringOutput    `pulumi:"cert"`
	Name       pulumi.StringOutput    `pulumi:"name"`
	Peer       pulumi.StringOutput    `pulumi:"peer"`
	PeerAccept pulumi.StringOutput    `pulumi:"peerAccept"`
	Psk        pulumi.StringPtrOutput `pulumi:"psk"`
	Vdomparam  pulumi.StringPtrOutput `pulumi:"vdomparam"`
}

// NewWanoptAuthGroup registers a new resource with the given unique name, arguments, and options.
func NewWanoptAuthGroup(ctx *pulumi.Context,
	name string, args *WanoptAuthGroupArgs, opts ...pulumi.ResourceOption) (*WanoptAuthGroup, error) {
	if args == nil {
		return nil, errors.New("missing one or more required arguments")
	}

	if args.Cert == nil {
		return nil, errors.New("invalid value for required argument 'Cert'")
	}
	if args.Psk != nil {
		args.Psk = pulumi.ToSecret(args.Psk).(pulumi.StringPtrInput)
	}
	secrets := pulumi.AdditionalSecretOutputs([]string{
		"psk",
	})
	opts = append(opts, secrets)
	opts = internal.PkgResourceDefaultOpts(opts)
	var resource WanoptAuthGroup
	err := ctx.RegisterResource("fortios:index/wanoptAuthGroup:WanoptAuthGroup", name, args, &resource, opts...)
	if err != nil {
		return nil, err
	}
	return &resource, nil
}

// GetWanoptAuthGroup gets an existing WanoptAuthGroup resource's state with the given name, ID, and optional
// state properties that are used to uniquely qualify the lookup (nil if not required).
func GetWanoptAuthGroup(ctx *pulumi.Context,
	name string, id pulumi.IDInput, state *WanoptAuthGroupState, opts ...pulumi.ResourceOption) (*WanoptAuthGroup, error) {
	var resource WanoptAuthGroup
	err := ctx.ReadResource("fortios:index/wanoptAuthGroup:WanoptAuthGroup", name, id, state, &resource, opts...)
	if err != nil {
		return nil, err
	}
	return &resource, nil
}

// Input properties used for looking up and filtering WanoptAuthGroup resources.
type wanoptAuthGroupState struct {
	AuthMethod *string `pulumi:"authMethod"`
	Cert       *string `pulumi:"cert"`
	Name       *string `pulumi:"name"`
	Peer       *string `pulumi:"peer"`
	PeerAccept *string `pulumi:"peerAccept"`
	Psk        *string `pulumi:"psk"`
	Vdomparam  *string `pulumi:"vdomparam"`
}

type WanoptAuthGroupState struct {
	AuthMethod pulumi.StringPtrInput
	Cert       pulumi.StringPtrInput
	Name       pulumi.StringPtrInput
	Peer       pulumi.StringPtrInput
	PeerAccept pulumi.StringPtrInput
	Psk        pulumi.StringPtrInput
	Vdomparam  pulumi.StringPtrInput
}

func (WanoptAuthGroupState) ElementType() reflect.Type {
	return reflect.TypeOf((*wanoptAuthGroupState)(nil)).Elem()
}

type wanoptAuthGroupArgs struct {
	AuthMethod *string `pulumi:"authMethod"`
	Cert       string  `pulumi:"cert"`
	Name       *string `pulumi:"name"`
	Peer       *string `pulumi:"peer"`
	PeerAccept *string `pulumi:"peerAccept"`
	Psk        *string `pulumi:"psk"`
	Vdomparam  *string `pulumi:"vdomparam"`
}

// The set of arguments for constructing a WanoptAuthGroup resource.
type WanoptAuthGroupArgs struct {
	AuthMethod pulumi.StringPtrInput
	Cert       pulumi.StringInput
	Name       pulumi.StringPtrInput
	Peer       pulumi.StringPtrInput
	PeerAccept pulumi.StringPtrInput
	Psk        pulumi.StringPtrInput
	Vdomparam  pulumi.StringPtrInput
}

func (WanoptAuthGroupArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*wanoptAuthGroupArgs)(nil)).Elem()
}

type WanoptAuthGroupInput interface {
	pulumi.Input

	ToWanoptAuthGroupOutput() WanoptAuthGroupOutput
	ToWanoptAuthGroupOutputWithContext(ctx context.Context) WanoptAuthGroupOutput
}

func (*WanoptAuthGroup) ElementType() reflect.Type {
	return reflect.TypeOf((**WanoptAuthGroup)(nil)).Elem()
}

func (i *WanoptAuthGroup) ToWanoptAuthGroupOutput() WanoptAuthGroupOutput {
	return i.ToWanoptAuthGroupOutputWithContext(context.Background())
}

func (i *WanoptAuthGroup) ToWanoptAuthGroupOutputWithContext(ctx context.Context) WanoptAuthGroupOutput {
	return pulumi.ToOutputWithContext(ctx, i).(WanoptAuthGroupOutput)
}

func (i *WanoptAuthGroup) ToOutput(ctx context.Context) pulumix.Output[*WanoptAuthGroup] {
	return pulumix.Output[*WanoptAuthGroup]{
		OutputState: i.ToWanoptAuthGroupOutputWithContext(ctx).OutputState,
	}
}

// WanoptAuthGroupArrayInput is an input type that accepts WanoptAuthGroupArray and WanoptAuthGroupArrayOutput values.
// You can construct a concrete instance of `WanoptAuthGroupArrayInput` via:
//
//	WanoptAuthGroupArray{ WanoptAuthGroupArgs{...} }
type WanoptAuthGroupArrayInput interface {
	pulumi.Input

	ToWanoptAuthGroupArrayOutput() WanoptAuthGroupArrayOutput
	ToWanoptAuthGroupArrayOutputWithContext(context.Context) WanoptAuthGroupArrayOutput
}

type WanoptAuthGroupArray []WanoptAuthGroupInput

func (WanoptAuthGroupArray) ElementType() reflect.Type {
	return reflect.TypeOf((*[]*WanoptAuthGroup)(nil)).Elem()
}

func (i WanoptAuthGroupArray) ToWanoptAuthGroupArrayOutput() WanoptAuthGroupArrayOutput {
	return i.ToWanoptAuthGroupArrayOutputWithContext(context.Background())
}

func (i WanoptAuthGroupArray) ToWanoptAuthGroupArrayOutputWithContext(ctx context.Context) WanoptAuthGroupArrayOutput {
	return pulumi.ToOutputWithContext(ctx, i).(WanoptAuthGroupArrayOutput)
}

func (i WanoptAuthGroupArray) ToOutput(ctx context.Context) pulumix.Output[[]*WanoptAuthGroup] {
	return pulumix.Output[[]*WanoptAuthGroup]{
		OutputState: i.ToWanoptAuthGroupArrayOutputWithContext(ctx).OutputState,
	}
}

// WanoptAuthGroupMapInput is an input type that accepts WanoptAuthGroupMap and WanoptAuthGroupMapOutput values.
// You can construct a concrete instance of `WanoptAuthGroupMapInput` via:
//
//	WanoptAuthGroupMap{ "key": WanoptAuthGroupArgs{...} }
type WanoptAuthGroupMapInput interface {
	pulumi.Input

	ToWanoptAuthGroupMapOutput() WanoptAuthGroupMapOutput
	ToWanoptAuthGroupMapOutputWithContext(context.Context) WanoptAuthGroupMapOutput
}

type WanoptAuthGroupMap map[string]WanoptAuthGroupInput

func (WanoptAuthGroupMap) ElementType() reflect.Type {
	return reflect.TypeOf((*map[string]*WanoptAuthGroup)(nil)).Elem()
}

func (i WanoptAuthGroupMap) ToWanoptAuthGroupMapOutput() WanoptAuthGroupMapOutput {
	return i.ToWanoptAuthGroupMapOutputWithContext(context.Background())
}

func (i WanoptAuthGroupMap) ToWanoptAuthGroupMapOutputWithContext(ctx context.Context) WanoptAuthGroupMapOutput {
	return pulumi.ToOutputWithContext(ctx, i).(WanoptAuthGroupMapOutput)
}

func (i WanoptAuthGroupMap) ToOutput(ctx context.Context) pulumix.Output[map[string]*WanoptAuthGroup] {
	return pulumix.Output[map[string]*WanoptAuthGroup]{
		OutputState: i.ToWanoptAuthGroupMapOutputWithContext(ctx).OutputState,
	}
}

type WanoptAuthGroupOutput struct{ *pulumi.OutputState }

func (WanoptAuthGroupOutput) ElementType() reflect.Type {
	return reflect.TypeOf((**WanoptAuthGroup)(nil)).Elem()
}

func (o WanoptAuthGroupOutput) ToWanoptAuthGroupOutput() WanoptAuthGroupOutput {
	return o
}

func (o WanoptAuthGroupOutput) ToWanoptAuthGroupOutputWithContext(ctx context.Context) WanoptAuthGroupOutput {
	return o
}

func (o WanoptAuthGroupOutput) ToOutput(ctx context.Context) pulumix.Output[*WanoptAuthGroup] {
	return pulumix.Output[*WanoptAuthGroup]{
		OutputState: o.OutputState,
	}
}

func (o WanoptAuthGroupOutput) AuthMethod() pulumi.StringOutput {
	return o.ApplyT(func(v *WanoptAuthGroup) pulumi.StringOutput { return v.AuthMethod }).(pulumi.StringOutput)
}

func (o WanoptAuthGroupOutput) Cert() pulumi.StringOutput {
	return o.ApplyT(func(v *WanoptAuthGroup) pulumi.StringOutput { return v.Cert }).(pulumi.StringOutput)
}

func (o WanoptAuthGroupOutput) Name() pulumi.StringOutput {
	return o.ApplyT(func(v *WanoptAuthGroup) pulumi.StringOutput { return v.Name }).(pulumi.StringOutput)
}

func (o WanoptAuthGroupOutput) Peer() pulumi.StringOutput {
	return o.ApplyT(func(v *WanoptAuthGroup) pulumi.StringOutput { return v.Peer }).(pulumi.StringOutput)
}

func (o WanoptAuthGroupOutput) PeerAccept() pulumi.StringOutput {
	return o.ApplyT(func(v *WanoptAuthGroup) pulumi.StringOutput { return v.PeerAccept }).(pulumi.StringOutput)
}

func (o WanoptAuthGroupOutput) Psk() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *WanoptAuthGroup) pulumi.StringPtrOutput { return v.Psk }).(pulumi.StringPtrOutput)
}

func (o WanoptAuthGroupOutput) Vdomparam() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *WanoptAuthGroup) pulumi.StringPtrOutput { return v.Vdomparam }).(pulumi.StringPtrOutput)
}

type WanoptAuthGroupArrayOutput struct{ *pulumi.OutputState }

func (WanoptAuthGroupArrayOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*[]*WanoptAuthGroup)(nil)).Elem()
}

func (o WanoptAuthGroupArrayOutput) ToWanoptAuthGroupArrayOutput() WanoptAuthGroupArrayOutput {
	return o
}

func (o WanoptAuthGroupArrayOutput) ToWanoptAuthGroupArrayOutputWithContext(ctx context.Context) WanoptAuthGroupArrayOutput {
	return o
}

func (o WanoptAuthGroupArrayOutput) ToOutput(ctx context.Context) pulumix.Output[[]*WanoptAuthGroup] {
	return pulumix.Output[[]*WanoptAuthGroup]{
		OutputState: o.OutputState,
	}
}

func (o WanoptAuthGroupArrayOutput) Index(i pulumi.IntInput) WanoptAuthGroupOutput {
	return pulumi.All(o, i).ApplyT(func(vs []interface{}) *WanoptAuthGroup {
		return vs[0].([]*WanoptAuthGroup)[vs[1].(int)]
	}).(WanoptAuthGroupOutput)
}

type WanoptAuthGroupMapOutput struct{ *pulumi.OutputState }

func (WanoptAuthGroupMapOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*map[string]*WanoptAuthGroup)(nil)).Elem()
}

func (o WanoptAuthGroupMapOutput) ToWanoptAuthGroupMapOutput() WanoptAuthGroupMapOutput {
	return o
}

func (o WanoptAuthGroupMapOutput) ToWanoptAuthGroupMapOutputWithContext(ctx context.Context) WanoptAuthGroupMapOutput {
	return o
}

func (o WanoptAuthGroupMapOutput) ToOutput(ctx context.Context) pulumix.Output[map[string]*WanoptAuthGroup] {
	return pulumix.Output[map[string]*WanoptAuthGroup]{
		OutputState: o.OutputState,
	}
}

func (o WanoptAuthGroupMapOutput) MapIndex(k pulumi.StringInput) WanoptAuthGroupOutput {
	return pulumi.All(o, k).ApplyT(func(vs []interface{}) *WanoptAuthGroup {
		return vs[0].(map[string]*WanoptAuthGroup)[vs[1].(string)]
	}).(WanoptAuthGroupOutput)
}

func init() {
	pulumi.RegisterInputType(reflect.TypeOf((*WanoptAuthGroupInput)(nil)).Elem(), &WanoptAuthGroup{})
	pulumi.RegisterInputType(reflect.TypeOf((*WanoptAuthGroupArrayInput)(nil)).Elem(), WanoptAuthGroupArray{})
	pulumi.RegisterInputType(reflect.TypeOf((*WanoptAuthGroupMapInput)(nil)).Elem(), WanoptAuthGroupMap{})
	pulumi.RegisterOutputType(WanoptAuthGroupOutput{})
	pulumi.RegisterOutputType(WanoptAuthGroupArrayOutput{})
	pulumi.RegisterOutputType(WanoptAuthGroupMapOutput{})
}
