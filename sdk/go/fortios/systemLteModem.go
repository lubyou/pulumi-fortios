// Code generated by the Pulumi Terraform Bridge (tfgen) Tool DO NOT EDIT.
// *** WARNING: Do not edit by hand unless you're certain you know what you are doing! ***

package fortios

import (
	"context"
	"reflect"

	"github.com/lubyou/pulumi-fortios/sdk/go/fortios/internal"
	"github.com/pulumi/pulumi/sdk/v3/go/pulumi"
	"github.com/pulumi/pulumi/sdk/v3/go/pulumix"
)

type SystemLteModem struct {
	pulumi.CustomResourceState

	Apn           pulumi.StringOutput    `pulumi:"apn"`
	Authtype      pulumi.StringOutput    `pulumi:"authtype"`
	ExtraInit     pulumi.StringOutput    `pulumi:"extraInit"`
	HolddownTimer pulumi.IntOutput       `pulumi:"holddownTimer"`
	Interface     pulumi.StringOutput    `pulumi:"interface"`
	Mode          pulumi.StringOutput    `pulumi:"mode"`
	ModemPort     pulumi.IntOutput       `pulumi:"modemPort"`
	Passwd        pulumi.StringPtrOutput `pulumi:"passwd"`
	Status        pulumi.StringOutput    `pulumi:"status"`
	Username      pulumi.StringOutput    `pulumi:"username"`
	Vdomparam     pulumi.StringPtrOutput `pulumi:"vdomparam"`
}

// NewSystemLteModem registers a new resource with the given unique name, arguments, and options.
func NewSystemLteModem(ctx *pulumi.Context,
	name string, args *SystemLteModemArgs, opts ...pulumi.ResourceOption) (*SystemLteModem, error) {
	if args == nil {
		args = &SystemLteModemArgs{}
	}

	opts = internal.PkgResourceDefaultOpts(opts)
	var resource SystemLteModem
	err := ctx.RegisterResource("fortios:index/systemLteModem:SystemLteModem", name, args, &resource, opts...)
	if err != nil {
		return nil, err
	}
	return &resource, nil
}

// GetSystemLteModem gets an existing SystemLteModem resource's state with the given name, ID, and optional
// state properties that are used to uniquely qualify the lookup (nil if not required).
func GetSystemLteModem(ctx *pulumi.Context,
	name string, id pulumi.IDInput, state *SystemLteModemState, opts ...pulumi.ResourceOption) (*SystemLteModem, error) {
	var resource SystemLteModem
	err := ctx.ReadResource("fortios:index/systemLteModem:SystemLteModem", name, id, state, &resource, opts...)
	if err != nil {
		return nil, err
	}
	return &resource, nil
}

// Input properties used for looking up and filtering SystemLteModem resources.
type systemLteModemState struct {
	Apn           *string `pulumi:"apn"`
	Authtype      *string `pulumi:"authtype"`
	ExtraInit     *string `pulumi:"extraInit"`
	HolddownTimer *int    `pulumi:"holddownTimer"`
	Interface     *string `pulumi:"interface"`
	Mode          *string `pulumi:"mode"`
	ModemPort     *int    `pulumi:"modemPort"`
	Passwd        *string `pulumi:"passwd"`
	Status        *string `pulumi:"status"`
	Username      *string `pulumi:"username"`
	Vdomparam     *string `pulumi:"vdomparam"`
}

type SystemLteModemState struct {
	Apn           pulumi.StringPtrInput
	Authtype      pulumi.StringPtrInput
	ExtraInit     pulumi.StringPtrInput
	HolddownTimer pulumi.IntPtrInput
	Interface     pulumi.StringPtrInput
	Mode          pulumi.StringPtrInput
	ModemPort     pulumi.IntPtrInput
	Passwd        pulumi.StringPtrInput
	Status        pulumi.StringPtrInput
	Username      pulumi.StringPtrInput
	Vdomparam     pulumi.StringPtrInput
}

func (SystemLteModemState) ElementType() reflect.Type {
	return reflect.TypeOf((*systemLteModemState)(nil)).Elem()
}

type systemLteModemArgs struct {
	Apn           *string `pulumi:"apn"`
	Authtype      *string `pulumi:"authtype"`
	ExtraInit     *string `pulumi:"extraInit"`
	HolddownTimer *int    `pulumi:"holddownTimer"`
	Interface     *string `pulumi:"interface"`
	Mode          *string `pulumi:"mode"`
	ModemPort     *int    `pulumi:"modemPort"`
	Passwd        *string `pulumi:"passwd"`
	Status        *string `pulumi:"status"`
	Username      *string `pulumi:"username"`
	Vdomparam     *string `pulumi:"vdomparam"`
}

// The set of arguments for constructing a SystemLteModem resource.
type SystemLteModemArgs struct {
	Apn           pulumi.StringPtrInput
	Authtype      pulumi.StringPtrInput
	ExtraInit     pulumi.StringPtrInput
	HolddownTimer pulumi.IntPtrInput
	Interface     pulumi.StringPtrInput
	Mode          pulumi.StringPtrInput
	ModemPort     pulumi.IntPtrInput
	Passwd        pulumi.StringPtrInput
	Status        pulumi.StringPtrInput
	Username      pulumi.StringPtrInput
	Vdomparam     pulumi.StringPtrInput
}

func (SystemLteModemArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*systemLteModemArgs)(nil)).Elem()
}

type SystemLteModemInput interface {
	pulumi.Input

	ToSystemLteModemOutput() SystemLteModemOutput
	ToSystemLteModemOutputWithContext(ctx context.Context) SystemLteModemOutput
}

func (*SystemLteModem) ElementType() reflect.Type {
	return reflect.TypeOf((**SystemLteModem)(nil)).Elem()
}

func (i *SystemLteModem) ToSystemLteModemOutput() SystemLteModemOutput {
	return i.ToSystemLteModemOutputWithContext(context.Background())
}

func (i *SystemLteModem) ToSystemLteModemOutputWithContext(ctx context.Context) SystemLteModemOutput {
	return pulumi.ToOutputWithContext(ctx, i).(SystemLteModemOutput)
}

func (i *SystemLteModem) ToOutput(ctx context.Context) pulumix.Output[*SystemLteModem] {
	return pulumix.Output[*SystemLteModem]{
		OutputState: i.ToSystemLteModemOutputWithContext(ctx).OutputState,
	}
}

// SystemLteModemArrayInput is an input type that accepts SystemLteModemArray and SystemLteModemArrayOutput values.
// You can construct a concrete instance of `SystemLteModemArrayInput` via:
//
//	SystemLteModemArray{ SystemLteModemArgs{...} }
type SystemLteModemArrayInput interface {
	pulumi.Input

	ToSystemLteModemArrayOutput() SystemLteModemArrayOutput
	ToSystemLteModemArrayOutputWithContext(context.Context) SystemLteModemArrayOutput
}

type SystemLteModemArray []SystemLteModemInput

func (SystemLteModemArray) ElementType() reflect.Type {
	return reflect.TypeOf((*[]*SystemLteModem)(nil)).Elem()
}

func (i SystemLteModemArray) ToSystemLteModemArrayOutput() SystemLteModemArrayOutput {
	return i.ToSystemLteModemArrayOutputWithContext(context.Background())
}

func (i SystemLteModemArray) ToSystemLteModemArrayOutputWithContext(ctx context.Context) SystemLteModemArrayOutput {
	return pulumi.ToOutputWithContext(ctx, i).(SystemLteModemArrayOutput)
}

func (i SystemLteModemArray) ToOutput(ctx context.Context) pulumix.Output[[]*SystemLteModem] {
	return pulumix.Output[[]*SystemLteModem]{
		OutputState: i.ToSystemLteModemArrayOutputWithContext(ctx).OutputState,
	}
}

// SystemLteModemMapInput is an input type that accepts SystemLteModemMap and SystemLteModemMapOutput values.
// You can construct a concrete instance of `SystemLteModemMapInput` via:
//
//	SystemLteModemMap{ "key": SystemLteModemArgs{...} }
type SystemLteModemMapInput interface {
	pulumi.Input

	ToSystemLteModemMapOutput() SystemLteModemMapOutput
	ToSystemLteModemMapOutputWithContext(context.Context) SystemLteModemMapOutput
}

type SystemLteModemMap map[string]SystemLteModemInput

func (SystemLteModemMap) ElementType() reflect.Type {
	return reflect.TypeOf((*map[string]*SystemLteModem)(nil)).Elem()
}

func (i SystemLteModemMap) ToSystemLteModemMapOutput() SystemLteModemMapOutput {
	return i.ToSystemLteModemMapOutputWithContext(context.Background())
}

func (i SystemLteModemMap) ToSystemLteModemMapOutputWithContext(ctx context.Context) SystemLteModemMapOutput {
	return pulumi.ToOutputWithContext(ctx, i).(SystemLteModemMapOutput)
}

func (i SystemLteModemMap) ToOutput(ctx context.Context) pulumix.Output[map[string]*SystemLteModem] {
	return pulumix.Output[map[string]*SystemLteModem]{
		OutputState: i.ToSystemLteModemMapOutputWithContext(ctx).OutputState,
	}
}

type SystemLteModemOutput struct{ *pulumi.OutputState }

func (SystemLteModemOutput) ElementType() reflect.Type {
	return reflect.TypeOf((**SystemLteModem)(nil)).Elem()
}

func (o SystemLteModemOutput) ToSystemLteModemOutput() SystemLteModemOutput {
	return o
}

func (o SystemLteModemOutput) ToSystemLteModemOutputWithContext(ctx context.Context) SystemLteModemOutput {
	return o
}

func (o SystemLteModemOutput) ToOutput(ctx context.Context) pulumix.Output[*SystemLteModem] {
	return pulumix.Output[*SystemLteModem]{
		OutputState: o.OutputState,
	}
}

func (o SystemLteModemOutput) Apn() pulumi.StringOutput {
	return o.ApplyT(func(v *SystemLteModem) pulumi.StringOutput { return v.Apn }).(pulumi.StringOutput)
}

func (o SystemLteModemOutput) Authtype() pulumi.StringOutput {
	return o.ApplyT(func(v *SystemLteModem) pulumi.StringOutput { return v.Authtype }).(pulumi.StringOutput)
}

func (o SystemLteModemOutput) ExtraInit() pulumi.StringOutput {
	return o.ApplyT(func(v *SystemLteModem) pulumi.StringOutput { return v.ExtraInit }).(pulumi.StringOutput)
}

func (o SystemLteModemOutput) HolddownTimer() pulumi.IntOutput {
	return o.ApplyT(func(v *SystemLteModem) pulumi.IntOutput { return v.HolddownTimer }).(pulumi.IntOutput)
}

func (o SystemLteModemOutput) Interface() pulumi.StringOutput {
	return o.ApplyT(func(v *SystemLteModem) pulumi.StringOutput { return v.Interface }).(pulumi.StringOutput)
}

func (o SystemLteModemOutput) Mode() pulumi.StringOutput {
	return o.ApplyT(func(v *SystemLteModem) pulumi.StringOutput { return v.Mode }).(pulumi.StringOutput)
}

func (o SystemLteModemOutput) ModemPort() pulumi.IntOutput {
	return o.ApplyT(func(v *SystemLteModem) pulumi.IntOutput { return v.ModemPort }).(pulumi.IntOutput)
}

func (o SystemLteModemOutput) Passwd() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *SystemLteModem) pulumi.StringPtrOutput { return v.Passwd }).(pulumi.StringPtrOutput)
}

func (o SystemLteModemOutput) Status() pulumi.StringOutput {
	return o.ApplyT(func(v *SystemLteModem) pulumi.StringOutput { return v.Status }).(pulumi.StringOutput)
}

func (o SystemLteModemOutput) Username() pulumi.StringOutput {
	return o.ApplyT(func(v *SystemLteModem) pulumi.StringOutput { return v.Username }).(pulumi.StringOutput)
}

func (o SystemLteModemOutput) Vdomparam() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *SystemLteModem) pulumi.StringPtrOutput { return v.Vdomparam }).(pulumi.StringPtrOutput)
}

type SystemLteModemArrayOutput struct{ *pulumi.OutputState }

func (SystemLteModemArrayOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*[]*SystemLteModem)(nil)).Elem()
}

func (o SystemLteModemArrayOutput) ToSystemLteModemArrayOutput() SystemLteModemArrayOutput {
	return o
}

func (o SystemLteModemArrayOutput) ToSystemLteModemArrayOutputWithContext(ctx context.Context) SystemLteModemArrayOutput {
	return o
}

func (o SystemLteModemArrayOutput) ToOutput(ctx context.Context) pulumix.Output[[]*SystemLteModem] {
	return pulumix.Output[[]*SystemLteModem]{
		OutputState: o.OutputState,
	}
}

func (o SystemLteModemArrayOutput) Index(i pulumi.IntInput) SystemLteModemOutput {
	return pulumi.All(o, i).ApplyT(func(vs []interface{}) *SystemLteModem {
		return vs[0].([]*SystemLteModem)[vs[1].(int)]
	}).(SystemLteModemOutput)
}

type SystemLteModemMapOutput struct{ *pulumi.OutputState }

func (SystemLteModemMapOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*map[string]*SystemLteModem)(nil)).Elem()
}

func (o SystemLteModemMapOutput) ToSystemLteModemMapOutput() SystemLteModemMapOutput {
	return o
}

func (o SystemLteModemMapOutput) ToSystemLteModemMapOutputWithContext(ctx context.Context) SystemLteModemMapOutput {
	return o
}

func (o SystemLteModemMapOutput) ToOutput(ctx context.Context) pulumix.Output[map[string]*SystemLteModem] {
	return pulumix.Output[map[string]*SystemLteModem]{
		OutputState: o.OutputState,
	}
}

func (o SystemLteModemMapOutput) MapIndex(k pulumi.StringInput) SystemLteModemOutput {
	return pulumi.All(o, k).ApplyT(func(vs []interface{}) *SystemLteModem {
		return vs[0].(map[string]*SystemLteModem)[vs[1].(string)]
	}).(SystemLteModemOutput)
}

func init() {
	pulumi.RegisterInputType(reflect.TypeOf((*SystemLteModemInput)(nil)).Elem(), &SystemLteModem{})
	pulumi.RegisterInputType(reflect.TypeOf((*SystemLteModemArrayInput)(nil)).Elem(), SystemLteModemArray{})
	pulumi.RegisterInputType(reflect.TypeOf((*SystemLteModemMapInput)(nil)).Elem(), SystemLteModemMap{})
	pulumi.RegisterOutputType(SystemLteModemOutput{})
	pulumi.RegisterOutputType(SystemLteModemArrayOutput{})
	pulumi.RegisterOutputType(SystemLteModemMapOutput{})
}
