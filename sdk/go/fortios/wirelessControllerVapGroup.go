// Code generated by the Pulumi Terraform Bridge (tfgen) Tool DO NOT EDIT.
// *** WARNING: Do not edit by hand unless you're certain you know what you are doing! ***

package fortios

import (
	"context"
	"reflect"

	"github.com/lubyou/pulumi-fortios/sdk/go/fortios/internal"
	"github.com/pulumi/pulumi/sdk/v3/go/pulumi"
	"github.com/pulumi/pulumi/sdk/v3/go/pulumix"
)

type WirelessControllerVapGroup struct {
	pulumi.CustomResourceState

	Comment             pulumi.StringPtrOutput                   `pulumi:"comment"`
	DynamicSortSubtable pulumi.StringPtrOutput                   `pulumi:"dynamicSortSubtable"`
	GetAllTables        pulumi.StringPtrOutput                   `pulumi:"getAllTables"`
	Name                pulumi.StringOutput                      `pulumi:"name"`
	Vaps                WirelessControllerVapGroupVapArrayOutput `pulumi:"vaps"`
	Vdomparam           pulumi.StringPtrOutput                   `pulumi:"vdomparam"`
}

// NewWirelessControllerVapGroup registers a new resource with the given unique name, arguments, and options.
func NewWirelessControllerVapGroup(ctx *pulumi.Context,
	name string, args *WirelessControllerVapGroupArgs, opts ...pulumi.ResourceOption) (*WirelessControllerVapGroup, error) {
	if args == nil {
		args = &WirelessControllerVapGroupArgs{}
	}

	opts = internal.PkgResourceDefaultOpts(opts)
	var resource WirelessControllerVapGroup
	err := ctx.RegisterResource("fortios:index/wirelessControllerVapGroup:WirelessControllerVapGroup", name, args, &resource, opts...)
	if err != nil {
		return nil, err
	}
	return &resource, nil
}

// GetWirelessControllerVapGroup gets an existing WirelessControllerVapGroup resource's state with the given name, ID, and optional
// state properties that are used to uniquely qualify the lookup (nil if not required).
func GetWirelessControllerVapGroup(ctx *pulumi.Context,
	name string, id pulumi.IDInput, state *WirelessControllerVapGroupState, opts ...pulumi.ResourceOption) (*WirelessControllerVapGroup, error) {
	var resource WirelessControllerVapGroup
	err := ctx.ReadResource("fortios:index/wirelessControllerVapGroup:WirelessControllerVapGroup", name, id, state, &resource, opts...)
	if err != nil {
		return nil, err
	}
	return &resource, nil
}

// Input properties used for looking up and filtering WirelessControllerVapGroup resources.
type wirelessControllerVapGroupState struct {
	Comment             *string                         `pulumi:"comment"`
	DynamicSortSubtable *string                         `pulumi:"dynamicSortSubtable"`
	GetAllTables        *string                         `pulumi:"getAllTables"`
	Name                *string                         `pulumi:"name"`
	Vaps                []WirelessControllerVapGroupVap `pulumi:"vaps"`
	Vdomparam           *string                         `pulumi:"vdomparam"`
}

type WirelessControllerVapGroupState struct {
	Comment             pulumi.StringPtrInput
	DynamicSortSubtable pulumi.StringPtrInput
	GetAllTables        pulumi.StringPtrInput
	Name                pulumi.StringPtrInput
	Vaps                WirelessControllerVapGroupVapArrayInput
	Vdomparam           pulumi.StringPtrInput
}

func (WirelessControllerVapGroupState) ElementType() reflect.Type {
	return reflect.TypeOf((*wirelessControllerVapGroupState)(nil)).Elem()
}

type wirelessControllerVapGroupArgs struct {
	Comment             *string                         `pulumi:"comment"`
	DynamicSortSubtable *string                         `pulumi:"dynamicSortSubtable"`
	GetAllTables        *string                         `pulumi:"getAllTables"`
	Name                *string                         `pulumi:"name"`
	Vaps                []WirelessControllerVapGroupVap `pulumi:"vaps"`
	Vdomparam           *string                         `pulumi:"vdomparam"`
}

// The set of arguments for constructing a WirelessControllerVapGroup resource.
type WirelessControllerVapGroupArgs struct {
	Comment             pulumi.StringPtrInput
	DynamicSortSubtable pulumi.StringPtrInput
	GetAllTables        pulumi.StringPtrInput
	Name                pulumi.StringPtrInput
	Vaps                WirelessControllerVapGroupVapArrayInput
	Vdomparam           pulumi.StringPtrInput
}

func (WirelessControllerVapGroupArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*wirelessControllerVapGroupArgs)(nil)).Elem()
}

type WirelessControllerVapGroupInput interface {
	pulumi.Input

	ToWirelessControllerVapGroupOutput() WirelessControllerVapGroupOutput
	ToWirelessControllerVapGroupOutputWithContext(ctx context.Context) WirelessControllerVapGroupOutput
}

func (*WirelessControllerVapGroup) ElementType() reflect.Type {
	return reflect.TypeOf((**WirelessControllerVapGroup)(nil)).Elem()
}

func (i *WirelessControllerVapGroup) ToWirelessControllerVapGroupOutput() WirelessControllerVapGroupOutput {
	return i.ToWirelessControllerVapGroupOutputWithContext(context.Background())
}

func (i *WirelessControllerVapGroup) ToWirelessControllerVapGroupOutputWithContext(ctx context.Context) WirelessControllerVapGroupOutput {
	return pulumi.ToOutputWithContext(ctx, i).(WirelessControllerVapGroupOutput)
}

func (i *WirelessControllerVapGroup) ToOutput(ctx context.Context) pulumix.Output[*WirelessControllerVapGroup] {
	return pulumix.Output[*WirelessControllerVapGroup]{
		OutputState: i.ToWirelessControllerVapGroupOutputWithContext(ctx).OutputState,
	}
}

// WirelessControllerVapGroupArrayInput is an input type that accepts WirelessControllerVapGroupArray and WirelessControllerVapGroupArrayOutput values.
// You can construct a concrete instance of `WirelessControllerVapGroupArrayInput` via:
//
//	WirelessControllerVapGroupArray{ WirelessControllerVapGroupArgs{...} }
type WirelessControllerVapGroupArrayInput interface {
	pulumi.Input

	ToWirelessControllerVapGroupArrayOutput() WirelessControllerVapGroupArrayOutput
	ToWirelessControllerVapGroupArrayOutputWithContext(context.Context) WirelessControllerVapGroupArrayOutput
}

type WirelessControllerVapGroupArray []WirelessControllerVapGroupInput

func (WirelessControllerVapGroupArray) ElementType() reflect.Type {
	return reflect.TypeOf((*[]*WirelessControllerVapGroup)(nil)).Elem()
}

func (i WirelessControllerVapGroupArray) ToWirelessControllerVapGroupArrayOutput() WirelessControllerVapGroupArrayOutput {
	return i.ToWirelessControllerVapGroupArrayOutputWithContext(context.Background())
}

func (i WirelessControllerVapGroupArray) ToWirelessControllerVapGroupArrayOutputWithContext(ctx context.Context) WirelessControllerVapGroupArrayOutput {
	return pulumi.ToOutputWithContext(ctx, i).(WirelessControllerVapGroupArrayOutput)
}

func (i WirelessControllerVapGroupArray) ToOutput(ctx context.Context) pulumix.Output[[]*WirelessControllerVapGroup] {
	return pulumix.Output[[]*WirelessControllerVapGroup]{
		OutputState: i.ToWirelessControllerVapGroupArrayOutputWithContext(ctx).OutputState,
	}
}

// WirelessControllerVapGroupMapInput is an input type that accepts WirelessControllerVapGroupMap and WirelessControllerVapGroupMapOutput values.
// You can construct a concrete instance of `WirelessControllerVapGroupMapInput` via:
//
//	WirelessControllerVapGroupMap{ "key": WirelessControllerVapGroupArgs{...} }
type WirelessControllerVapGroupMapInput interface {
	pulumi.Input

	ToWirelessControllerVapGroupMapOutput() WirelessControllerVapGroupMapOutput
	ToWirelessControllerVapGroupMapOutputWithContext(context.Context) WirelessControllerVapGroupMapOutput
}

type WirelessControllerVapGroupMap map[string]WirelessControllerVapGroupInput

func (WirelessControllerVapGroupMap) ElementType() reflect.Type {
	return reflect.TypeOf((*map[string]*WirelessControllerVapGroup)(nil)).Elem()
}

func (i WirelessControllerVapGroupMap) ToWirelessControllerVapGroupMapOutput() WirelessControllerVapGroupMapOutput {
	return i.ToWirelessControllerVapGroupMapOutputWithContext(context.Background())
}

func (i WirelessControllerVapGroupMap) ToWirelessControllerVapGroupMapOutputWithContext(ctx context.Context) WirelessControllerVapGroupMapOutput {
	return pulumi.ToOutputWithContext(ctx, i).(WirelessControllerVapGroupMapOutput)
}

func (i WirelessControllerVapGroupMap) ToOutput(ctx context.Context) pulumix.Output[map[string]*WirelessControllerVapGroup] {
	return pulumix.Output[map[string]*WirelessControllerVapGroup]{
		OutputState: i.ToWirelessControllerVapGroupMapOutputWithContext(ctx).OutputState,
	}
}

type WirelessControllerVapGroupOutput struct{ *pulumi.OutputState }

func (WirelessControllerVapGroupOutput) ElementType() reflect.Type {
	return reflect.TypeOf((**WirelessControllerVapGroup)(nil)).Elem()
}

func (o WirelessControllerVapGroupOutput) ToWirelessControllerVapGroupOutput() WirelessControllerVapGroupOutput {
	return o
}

func (o WirelessControllerVapGroupOutput) ToWirelessControllerVapGroupOutputWithContext(ctx context.Context) WirelessControllerVapGroupOutput {
	return o
}

func (o WirelessControllerVapGroupOutput) ToOutput(ctx context.Context) pulumix.Output[*WirelessControllerVapGroup] {
	return pulumix.Output[*WirelessControllerVapGroup]{
		OutputState: o.OutputState,
	}
}

func (o WirelessControllerVapGroupOutput) Comment() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *WirelessControllerVapGroup) pulumi.StringPtrOutput { return v.Comment }).(pulumi.StringPtrOutput)
}

func (o WirelessControllerVapGroupOutput) DynamicSortSubtable() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *WirelessControllerVapGroup) pulumi.StringPtrOutput { return v.DynamicSortSubtable }).(pulumi.StringPtrOutput)
}

func (o WirelessControllerVapGroupOutput) GetAllTables() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *WirelessControllerVapGroup) pulumi.StringPtrOutput { return v.GetAllTables }).(pulumi.StringPtrOutput)
}

func (o WirelessControllerVapGroupOutput) Name() pulumi.StringOutput {
	return o.ApplyT(func(v *WirelessControllerVapGroup) pulumi.StringOutput { return v.Name }).(pulumi.StringOutput)
}

func (o WirelessControllerVapGroupOutput) Vaps() WirelessControllerVapGroupVapArrayOutput {
	return o.ApplyT(func(v *WirelessControllerVapGroup) WirelessControllerVapGroupVapArrayOutput { return v.Vaps }).(WirelessControllerVapGroupVapArrayOutput)
}

func (o WirelessControllerVapGroupOutput) Vdomparam() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *WirelessControllerVapGroup) pulumi.StringPtrOutput { return v.Vdomparam }).(pulumi.StringPtrOutput)
}

type WirelessControllerVapGroupArrayOutput struct{ *pulumi.OutputState }

func (WirelessControllerVapGroupArrayOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*[]*WirelessControllerVapGroup)(nil)).Elem()
}

func (o WirelessControllerVapGroupArrayOutput) ToWirelessControllerVapGroupArrayOutput() WirelessControllerVapGroupArrayOutput {
	return o
}

func (o WirelessControllerVapGroupArrayOutput) ToWirelessControllerVapGroupArrayOutputWithContext(ctx context.Context) WirelessControllerVapGroupArrayOutput {
	return o
}

func (o WirelessControllerVapGroupArrayOutput) ToOutput(ctx context.Context) pulumix.Output[[]*WirelessControllerVapGroup] {
	return pulumix.Output[[]*WirelessControllerVapGroup]{
		OutputState: o.OutputState,
	}
}

func (o WirelessControllerVapGroupArrayOutput) Index(i pulumi.IntInput) WirelessControllerVapGroupOutput {
	return pulumi.All(o, i).ApplyT(func(vs []interface{}) *WirelessControllerVapGroup {
		return vs[0].([]*WirelessControllerVapGroup)[vs[1].(int)]
	}).(WirelessControllerVapGroupOutput)
}

type WirelessControllerVapGroupMapOutput struct{ *pulumi.OutputState }

func (WirelessControllerVapGroupMapOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*map[string]*WirelessControllerVapGroup)(nil)).Elem()
}

func (o WirelessControllerVapGroupMapOutput) ToWirelessControllerVapGroupMapOutput() WirelessControllerVapGroupMapOutput {
	return o
}

func (o WirelessControllerVapGroupMapOutput) ToWirelessControllerVapGroupMapOutputWithContext(ctx context.Context) WirelessControllerVapGroupMapOutput {
	return o
}

func (o WirelessControllerVapGroupMapOutput) ToOutput(ctx context.Context) pulumix.Output[map[string]*WirelessControllerVapGroup] {
	return pulumix.Output[map[string]*WirelessControllerVapGroup]{
		OutputState: o.OutputState,
	}
}

func (o WirelessControllerVapGroupMapOutput) MapIndex(k pulumi.StringInput) WirelessControllerVapGroupOutput {
	return pulumi.All(o, k).ApplyT(func(vs []interface{}) *WirelessControllerVapGroup {
		return vs[0].(map[string]*WirelessControllerVapGroup)[vs[1].(string)]
	}).(WirelessControllerVapGroupOutput)
}

func init() {
	pulumi.RegisterInputType(reflect.TypeOf((*WirelessControllerVapGroupInput)(nil)).Elem(), &WirelessControllerVapGroup{})
	pulumi.RegisterInputType(reflect.TypeOf((*WirelessControllerVapGroupArrayInput)(nil)).Elem(), WirelessControllerVapGroupArray{})
	pulumi.RegisterInputType(reflect.TypeOf((*WirelessControllerVapGroupMapInput)(nil)).Elem(), WirelessControllerVapGroupMap{})
	pulumi.RegisterOutputType(WirelessControllerVapGroupOutput{})
	pulumi.RegisterOutputType(WirelessControllerVapGroupArrayOutput{})
	pulumi.RegisterOutputType(WirelessControllerVapGroupMapOutput{})
}
