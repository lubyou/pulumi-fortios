// Code generated by the Pulumi Terraform Bridge (tfgen) Tool DO NOT EDIT.
// *** WARNING: Do not edit by hand unless you're certain you know what you are doing! ***

package fortios

import (
	"context"
	"reflect"

	"github.com/lubyou/pulumi-fortios/sdk/go/fortios/internal"
	"github.com/pulumi/pulumi/sdk/v3/go/pulumi"
)

type SwitchControllerAclIngress struct {
	pulumi.CustomResourceState

	Action       SwitchControllerAclIngressActionOutput     `pulumi:"action"`
	Classifier   SwitchControllerAclIngressClassifierOutput `pulumi:"classifier"`
	Description  pulumi.StringOutput                        `pulumi:"description"`
	Fosid        pulumi.IntOutput                           `pulumi:"fosid"`
	GetAllTables pulumi.StringPtrOutput                     `pulumi:"getAllTables"`
	Vdomparam    pulumi.StringPtrOutput                     `pulumi:"vdomparam"`
}

// NewSwitchControllerAclIngress registers a new resource with the given unique name, arguments, and options.
func NewSwitchControllerAclIngress(ctx *pulumi.Context,
	name string, args *SwitchControllerAclIngressArgs, opts ...pulumi.ResourceOption) (*SwitchControllerAclIngress, error) {
	if args == nil {
		args = &SwitchControllerAclIngressArgs{}
	}

	opts = internal.PkgResourceDefaultOpts(opts)
	var resource SwitchControllerAclIngress
	err := ctx.RegisterResource("fortios:index/switchControllerAclIngress:SwitchControllerAclIngress", name, args, &resource, opts...)
	if err != nil {
		return nil, err
	}
	return &resource, nil
}

// GetSwitchControllerAclIngress gets an existing SwitchControllerAclIngress resource's state with the given name, ID, and optional
// state properties that are used to uniquely qualify the lookup (nil if not required).
func GetSwitchControllerAclIngress(ctx *pulumi.Context,
	name string, id pulumi.IDInput, state *SwitchControllerAclIngressState, opts ...pulumi.ResourceOption) (*SwitchControllerAclIngress, error) {
	var resource SwitchControllerAclIngress
	err := ctx.ReadResource("fortios:index/switchControllerAclIngress:SwitchControllerAclIngress", name, id, state, &resource, opts...)
	if err != nil {
		return nil, err
	}
	return &resource, nil
}

// Input properties used for looking up and filtering SwitchControllerAclIngress resources.
type switchControllerAclIngressState struct {
	Action       *SwitchControllerAclIngressAction     `pulumi:"action"`
	Classifier   *SwitchControllerAclIngressClassifier `pulumi:"classifier"`
	Description  *string                               `pulumi:"description"`
	Fosid        *int                                  `pulumi:"fosid"`
	GetAllTables *string                               `pulumi:"getAllTables"`
	Vdomparam    *string                               `pulumi:"vdomparam"`
}

type SwitchControllerAclIngressState struct {
	Action       SwitchControllerAclIngressActionPtrInput
	Classifier   SwitchControllerAclIngressClassifierPtrInput
	Description  pulumi.StringPtrInput
	Fosid        pulumi.IntPtrInput
	GetAllTables pulumi.StringPtrInput
	Vdomparam    pulumi.StringPtrInput
}

func (SwitchControllerAclIngressState) ElementType() reflect.Type {
	return reflect.TypeOf((*switchControllerAclIngressState)(nil)).Elem()
}

type switchControllerAclIngressArgs struct {
	Action       *SwitchControllerAclIngressAction     `pulumi:"action"`
	Classifier   *SwitchControllerAclIngressClassifier `pulumi:"classifier"`
	Description  *string                               `pulumi:"description"`
	Fosid        *int                                  `pulumi:"fosid"`
	GetAllTables *string                               `pulumi:"getAllTables"`
	Vdomparam    *string                               `pulumi:"vdomparam"`
}

// The set of arguments for constructing a SwitchControllerAclIngress resource.
type SwitchControllerAclIngressArgs struct {
	Action       SwitchControllerAclIngressActionPtrInput
	Classifier   SwitchControllerAclIngressClassifierPtrInput
	Description  pulumi.StringPtrInput
	Fosid        pulumi.IntPtrInput
	GetAllTables pulumi.StringPtrInput
	Vdomparam    pulumi.StringPtrInput
}

func (SwitchControllerAclIngressArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*switchControllerAclIngressArgs)(nil)).Elem()
}

type SwitchControllerAclIngressInput interface {
	pulumi.Input

	ToSwitchControllerAclIngressOutput() SwitchControllerAclIngressOutput
	ToSwitchControllerAclIngressOutputWithContext(ctx context.Context) SwitchControllerAclIngressOutput
}

func (*SwitchControllerAclIngress) ElementType() reflect.Type {
	return reflect.TypeOf((**SwitchControllerAclIngress)(nil)).Elem()
}

func (i *SwitchControllerAclIngress) ToSwitchControllerAclIngressOutput() SwitchControllerAclIngressOutput {
	return i.ToSwitchControllerAclIngressOutputWithContext(context.Background())
}

func (i *SwitchControllerAclIngress) ToSwitchControllerAclIngressOutputWithContext(ctx context.Context) SwitchControllerAclIngressOutput {
	return pulumi.ToOutputWithContext(ctx, i).(SwitchControllerAclIngressOutput)
}

// SwitchControllerAclIngressArrayInput is an input type that accepts SwitchControllerAclIngressArray and SwitchControllerAclIngressArrayOutput values.
// You can construct a concrete instance of `SwitchControllerAclIngressArrayInput` via:
//
//	SwitchControllerAclIngressArray{ SwitchControllerAclIngressArgs{...} }
type SwitchControllerAclIngressArrayInput interface {
	pulumi.Input

	ToSwitchControllerAclIngressArrayOutput() SwitchControllerAclIngressArrayOutput
	ToSwitchControllerAclIngressArrayOutputWithContext(context.Context) SwitchControllerAclIngressArrayOutput
}

type SwitchControllerAclIngressArray []SwitchControllerAclIngressInput

func (SwitchControllerAclIngressArray) ElementType() reflect.Type {
	return reflect.TypeOf((*[]*SwitchControllerAclIngress)(nil)).Elem()
}

func (i SwitchControllerAclIngressArray) ToSwitchControllerAclIngressArrayOutput() SwitchControllerAclIngressArrayOutput {
	return i.ToSwitchControllerAclIngressArrayOutputWithContext(context.Background())
}

func (i SwitchControllerAclIngressArray) ToSwitchControllerAclIngressArrayOutputWithContext(ctx context.Context) SwitchControllerAclIngressArrayOutput {
	return pulumi.ToOutputWithContext(ctx, i).(SwitchControllerAclIngressArrayOutput)
}

// SwitchControllerAclIngressMapInput is an input type that accepts SwitchControllerAclIngressMap and SwitchControllerAclIngressMapOutput values.
// You can construct a concrete instance of `SwitchControllerAclIngressMapInput` via:
//
//	SwitchControllerAclIngressMap{ "key": SwitchControllerAclIngressArgs{...} }
type SwitchControllerAclIngressMapInput interface {
	pulumi.Input

	ToSwitchControllerAclIngressMapOutput() SwitchControllerAclIngressMapOutput
	ToSwitchControllerAclIngressMapOutputWithContext(context.Context) SwitchControllerAclIngressMapOutput
}

type SwitchControllerAclIngressMap map[string]SwitchControllerAclIngressInput

func (SwitchControllerAclIngressMap) ElementType() reflect.Type {
	return reflect.TypeOf((*map[string]*SwitchControllerAclIngress)(nil)).Elem()
}

func (i SwitchControllerAclIngressMap) ToSwitchControllerAclIngressMapOutput() SwitchControllerAclIngressMapOutput {
	return i.ToSwitchControllerAclIngressMapOutputWithContext(context.Background())
}

func (i SwitchControllerAclIngressMap) ToSwitchControllerAclIngressMapOutputWithContext(ctx context.Context) SwitchControllerAclIngressMapOutput {
	return pulumi.ToOutputWithContext(ctx, i).(SwitchControllerAclIngressMapOutput)
}

type SwitchControllerAclIngressOutput struct{ *pulumi.OutputState }

func (SwitchControllerAclIngressOutput) ElementType() reflect.Type {
	return reflect.TypeOf((**SwitchControllerAclIngress)(nil)).Elem()
}

func (o SwitchControllerAclIngressOutput) ToSwitchControllerAclIngressOutput() SwitchControllerAclIngressOutput {
	return o
}

func (o SwitchControllerAclIngressOutput) ToSwitchControllerAclIngressOutputWithContext(ctx context.Context) SwitchControllerAclIngressOutput {
	return o
}

func (o SwitchControllerAclIngressOutput) Action() SwitchControllerAclIngressActionOutput {
	return o.ApplyT(func(v *SwitchControllerAclIngress) SwitchControllerAclIngressActionOutput { return v.Action }).(SwitchControllerAclIngressActionOutput)
}

func (o SwitchControllerAclIngressOutput) Classifier() SwitchControllerAclIngressClassifierOutput {
	return o.ApplyT(func(v *SwitchControllerAclIngress) SwitchControllerAclIngressClassifierOutput { return v.Classifier }).(SwitchControllerAclIngressClassifierOutput)
}

func (o SwitchControllerAclIngressOutput) Description() pulumi.StringOutput {
	return o.ApplyT(func(v *SwitchControllerAclIngress) pulumi.StringOutput { return v.Description }).(pulumi.StringOutput)
}

func (o SwitchControllerAclIngressOutput) Fosid() pulumi.IntOutput {
	return o.ApplyT(func(v *SwitchControllerAclIngress) pulumi.IntOutput { return v.Fosid }).(pulumi.IntOutput)
}

func (o SwitchControllerAclIngressOutput) GetAllTables() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *SwitchControllerAclIngress) pulumi.StringPtrOutput { return v.GetAllTables }).(pulumi.StringPtrOutput)
}

func (o SwitchControllerAclIngressOutput) Vdomparam() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *SwitchControllerAclIngress) pulumi.StringPtrOutput { return v.Vdomparam }).(pulumi.StringPtrOutput)
}

type SwitchControllerAclIngressArrayOutput struct{ *pulumi.OutputState }

func (SwitchControllerAclIngressArrayOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*[]*SwitchControllerAclIngress)(nil)).Elem()
}

func (o SwitchControllerAclIngressArrayOutput) ToSwitchControllerAclIngressArrayOutput() SwitchControllerAclIngressArrayOutput {
	return o
}

func (o SwitchControllerAclIngressArrayOutput) ToSwitchControllerAclIngressArrayOutputWithContext(ctx context.Context) SwitchControllerAclIngressArrayOutput {
	return o
}

func (o SwitchControllerAclIngressArrayOutput) Index(i pulumi.IntInput) SwitchControllerAclIngressOutput {
	return pulumi.All(o, i).ApplyT(func(vs []interface{}) *SwitchControllerAclIngress {
		return vs[0].([]*SwitchControllerAclIngress)[vs[1].(int)]
	}).(SwitchControllerAclIngressOutput)
}

type SwitchControllerAclIngressMapOutput struct{ *pulumi.OutputState }

func (SwitchControllerAclIngressMapOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*map[string]*SwitchControllerAclIngress)(nil)).Elem()
}

func (o SwitchControllerAclIngressMapOutput) ToSwitchControllerAclIngressMapOutput() SwitchControllerAclIngressMapOutput {
	return o
}

func (o SwitchControllerAclIngressMapOutput) ToSwitchControllerAclIngressMapOutputWithContext(ctx context.Context) SwitchControllerAclIngressMapOutput {
	return o
}

func (o SwitchControllerAclIngressMapOutput) MapIndex(k pulumi.StringInput) SwitchControllerAclIngressOutput {
	return pulumi.All(o, k).ApplyT(func(vs []interface{}) *SwitchControllerAclIngress {
		return vs[0].(map[string]*SwitchControllerAclIngress)[vs[1].(string)]
	}).(SwitchControllerAclIngressOutput)
}

func init() {
	pulumi.RegisterInputType(reflect.TypeOf((*SwitchControllerAclIngressInput)(nil)).Elem(), &SwitchControllerAclIngress{})
	pulumi.RegisterInputType(reflect.TypeOf((*SwitchControllerAclIngressArrayInput)(nil)).Elem(), SwitchControllerAclIngressArray{})
	pulumi.RegisterInputType(reflect.TypeOf((*SwitchControllerAclIngressMapInput)(nil)).Elem(), SwitchControllerAclIngressMap{})
	pulumi.RegisterOutputType(SwitchControllerAclIngressOutput{})
	pulumi.RegisterOutputType(SwitchControllerAclIngressArrayOutput{})
	pulumi.RegisterOutputType(SwitchControllerAclIngressMapOutput{})
}
