// Code generated by the Pulumi Terraform Bridge (tfgen) Tool DO NOT EDIT.
// *** WARNING: Do not edit by hand unless you're certain you know what you are doing! ***

package fortios

import (
	"context"
	"reflect"

	"github.com/lubyou/pulumi-fortios/sdk/go/fortios/internal"
	"github.com/pulumi/pulumi/sdk/v3/go/pulumi"
	"github.com/pulumi/pulumi/sdk/v3/go/pulumix"
)

type SystemStorage struct {
	pulumi.CustomResourceState

	Device      pulumi.StringOutput    `pulumi:"device"`
	MediaStatus pulumi.StringOutput    `pulumi:"mediaStatus"`
	Name        pulumi.StringOutput    `pulumi:"name"`
	Order       pulumi.IntOutput       `pulumi:"order"`
	Partition   pulumi.StringOutput    `pulumi:"partition"`
	Size        pulumi.IntOutput       `pulumi:"size"`
	Status      pulumi.StringOutput    `pulumi:"status"`
	Usage       pulumi.StringOutput    `pulumi:"usage"`
	Vdomparam   pulumi.StringPtrOutput `pulumi:"vdomparam"`
	WanoptMode  pulumi.StringOutput    `pulumi:"wanoptMode"`
}

// NewSystemStorage registers a new resource with the given unique name, arguments, and options.
func NewSystemStorage(ctx *pulumi.Context,
	name string, args *SystemStorageArgs, opts ...pulumi.ResourceOption) (*SystemStorage, error) {
	if args == nil {
		args = &SystemStorageArgs{}
	}

	opts = internal.PkgResourceDefaultOpts(opts)
	var resource SystemStorage
	err := ctx.RegisterResource("fortios:index/systemStorage:SystemStorage", name, args, &resource, opts...)
	if err != nil {
		return nil, err
	}
	return &resource, nil
}

// GetSystemStorage gets an existing SystemStorage resource's state with the given name, ID, and optional
// state properties that are used to uniquely qualify the lookup (nil if not required).
func GetSystemStorage(ctx *pulumi.Context,
	name string, id pulumi.IDInput, state *SystemStorageState, opts ...pulumi.ResourceOption) (*SystemStorage, error) {
	var resource SystemStorage
	err := ctx.ReadResource("fortios:index/systemStorage:SystemStorage", name, id, state, &resource, opts...)
	if err != nil {
		return nil, err
	}
	return &resource, nil
}

// Input properties used for looking up and filtering SystemStorage resources.
type systemStorageState struct {
	Device      *string `pulumi:"device"`
	MediaStatus *string `pulumi:"mediaStatus"`
	Name        *string `pulumi:"name"`
	Order       *int    `pulumi:"order"`
	Partition   *string `pulumi:"partition"`
	Size        *int    `pulumi:"size"`
	Status      *string `pulumi:"status"`
	Usage       *string `pulumi:"usage"`
	Vdomparam   *string `pulumi:"vdomparam"`
	WanoptMode  *string `pulumi:"wanoptMode"`
}

type SystemStorageState struct {
	Device      pulumi.StringPtrInput
	MediaStatus pulumi.StringPtrInput
	Name        pulumi.StringPtrInput
	Order       pulumi.IntPtrInput
	Partition   pulumi.StringPtrInput
	Size        pulumi.IntPtrInput
	Status      pulumi.StringPtrInput
	Usage       pulumi.StringPtrInput
	Vdomparam   pulumi.StringPtrInput
	WanoptMode  pulumi.StringPtrInput
}

func (SystemStorageState) ElementType() reflect.Type {
	return reflect.TypeOf((*systemStorageState)(nil)).Elem()
}

type systemStorageArgs struct {
	Device      *string `pulumi:"device"`
	MediaStatus *string `pulumi:"mediaStatus"`
	Name        *string `pulumi:"name"`
	Order       *int    `pulumi:"order"`
	Partition   *string `pulumi:"partition"`
	Size        *int    `pulumi:"size"`
	Status      *string `pulumi:"status"`
	Usage       *string `pulumi:"usage"`
	Vdomparam   *string `pulumi:"vdomparam"`
	WanoptMode  *string `pulumi:"wanoptMode"`
}

// The set of arguments for constructing a SystemStorage resource.
type SystemStorageArgs struct {
	Device      pulumi.StringPtrInput
	MediaStatus pulumi.StringPtrInput
	Name        pulumi.StringPtrInput
	Order       pulumi.IntPtrInput
	Partition   pulumi.StringPtrInput
	Size        pulumi.IntPtrInput
	Status      pulumi.StringPtrInput
	Usage       pulumi.StringPtrInput
	Vdomparam   pulumi.StringPtrInput
	WanoptMode  pulumi.StringPtrInput
}

func (SystemStorageArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*systemStorageArgs)(nil)).Elem()
}

type SystemStorageInput interface {
	pulumi.Input

	ToSystemStorageOutput() SystemStorageOutput
	ToSystemStorageOutputWithContext(ctx context.Context) SystemStorageOutput
}

func (*SystemStorage) ElementType() reflect.Type {
	return reflect.TypeOf((**SystemStorage)(nil)).Elem()
}

func (i *SystemStorage) ToSystemStorageOutput() SystemStorageOutput {
	return i.ToSystemStorageOutputWithContext(context.Background())
}

func (i *SystemStorage) ToSystemStorageOutputWithContext(ctx context.Context) SystemStorageOutput {
	return pulumi.ToOutputWithContext(ctx, i).(SystemStorageOutput)
}

func (i *SystemStorage) ToOutput(ctx context.Context) pulumix.Output[*SystemStorage] {
	return pulumix.Output[*SystemStorage]{
		OutputState: i.ToSystemStorageOutputWithContext(ctx).OutputState,
	}
}

// SystemStorageArrayInput is an input type that accepts SystemStorageArray and SystemStorageArrayOutput values.
// You can construct a concrete instance of `SystemStorageArrayInput` via:
//
//	SystemStorageArray{ SystemStorageArgs{...} }
type SystemStorageArrayInput interface {
	pulumi.Input

	ToSystemStorageArrayOutput() SystemStorageArrayOutput
	ToSystemStorageArrayOutputWithContext(context.Context) SystemStorageArrayOutput
}

type SystemStorageArray []SystemStorageInput

func (SystemStorageArray) ElementType() reflect.Type {
	return reflect.TypeOf((*[]*SystemStorage)(nil)).Elem()
}

func (i SystemStorageArray) ToSystemStorageArrayOutput() SystemStorageArrayOutput {
	return i.ToSystemStorageArrayOutputWithContext(context.Background())
}

func (i SystemStorageArray) ToSystemStorageArrayOutputWithContext(ctx context.Context) SystemStorageArrayOutput {
	return pulumi.ToOutputWithContext(ctx, i).(SystemStorageArrayOutput)
}

func (i SystemStorageArray) ToOutput(ctx context.Context) pulumix.Output[[]*SystemStorage] {
	return pulumix.Output[[]*SystemStorage]{
		OutputState: i.ToSystemStorageArrayOutputWithContext(ctx).OutputState,
	}
}

// SystemStorageMapInput is an input type that accepts SystemStorageMap and SystemStorageMapOutput values.
// You can construct a concrete instance of `SystemStorageMapInput` via:
//
//	SystemStorageMap{ "key": SystemStorageArgs{...} }
type SystemStorageMapInput interface {
	pulumi.Input

	ToSystemStorageMapOutput() SystemStorageMapOutput
	ToSystemStorageMapOutputWithContext(context.Context) SystemStorageMapOutput
}

type SystemStorageMap map[string]SystemStorageInput

func (SystemStorageMap) ElementType() reflect.Type {
	return reflect.TypeOf((*map[string]*SystemStorage)(nil)).Elem()
}

func (i SystemStorageMap) ToSystemStorageMapOutput() SystemStorageMapOutput {
	return i.ToSystemStorageMapOutputWithContext(context.Background())
}

func (i SystemStorageMap) ToSystemStorageMapOutputWithContext(ctx context.Context) SystemStorageMapOutput {
	return pulumi.ToOutputWithContext(ctx, i).(SystemStorageMapOutput)
}

func (i SystemStorageMap) ToOutput(ctx context.Context) pulumix.Output[map[string]*SystemStorage] {
	return pulumix.Output[map[string]*SystemStorage]{
		OutputState: i.ToSystemStorageMapOutputWithContext(ctx).OutputState,
	}
}

type SystemStorageOutput struct{ *pulumi.OutputState }

func (SystemStorageOutput) ElementType() reflect.Type {
	return reflect.TypeOf((**SystemStorage)(nil)).Elem()
}

func (o SystemStorageOutput) ToSystemStorageOutput() SystemStorageOutput {
	return o
}

func (o SystemStorageOutput) ToSystemStorageOutputWithContext(ctx context.Context) SystemStorageOutput {
	return o
}

func (o SystemStorageOutput) ToOutput(ctx context.Context) pulumix.Output[*SystemStorage] {
	return pulumix.Output[*SystemStorage]{
		OutputState: o.OutputState,
	}
}

func (o SystemStorageOutput) Device() pulumi.StringOutput {
	return o.ApplyT(func(v *SystemStorage) pulumi.StringOutput { return v.Device }).(pulumi.StringOutput)
}

func (o SystemStorageOutput) MediaStatus() pulumi.StringOutput {
	return o.ApplyT(func(v *SystemStorage) pulumi.StringOutput { return v.MediaStatus }).(pulumi.StringOutput)
}

func (o SystemStorageOutput) Name() pulumi.StringOutput {
	return o.ApplyT(func(v *SystemStorage) pulumi.StringOutput { return v.Name }).(pulumi.StringOutput)
}

func (o SystemStorageOutput) Order() pulumi.IntOutput {
	return o.ApplyT(func(v *SystemStorage) pulumi.IntOutput { return v.Order }).(pulumi.IntOutput)
}

func (o SystemStorageOutput) Partition() pulumi.StringOutput {
	return o.ApplyT(func(v *SystemStorage) pulumi.StringOutput { return v.Partition }).(pulumi.StringOutput)
}

func (o SystemStorageOutput) Size() pulumi.IntOutput {
	return o.ApplyT(func(v *SystemStorage) pulumi.IntOutput { return v.Size }).(pulumi.IntOutput)
}

func (o SystemStorageOutput) Status() pulumi.StringOutput {
	return o.ApplyT(func(v *SystemStorage) pulumi.StringOutput { return v.Status }).(pulumi.StringOutput)
}

func (o SystemStorageOutput) Usage() pulumi.StringOutput {
	return o.ApplyT(func(v *SystemStorage) pulumi.StringOutput { return v.Usage }).(pulumi.StringOutput)
}

func (o SystemStorageOutput) Vdomparam() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *SystemStorage) pulumi.StringPtrOutput { return v.Vdomparam }).(pulumi.StringPtrOutput)
}

func (o SystemStorageOutput) WanoptMode() pulumi.StringOutput {
	return o.ApplyT(func(v *SystemStorage) pulumi.StringOutput { return v.WanoptMode }).(pulumi.StringOutput)
}

type SystemStorageArrayOutput struct{ *pulumi.OutputState }

func (SystemStorageArrayOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*[]*SystemStorage)(nil)).Elem()
}

func (o SystemStorageArrayOutput) ToSystemStorageArrayOutput() SystemStorageArrayOutput {
	return o
}

func (o SystemStorageArrayOutput) ToSystemStorageArrayOutputWithContext(ctx context.Context) SystemStorageArrayOutput {
	return o
}

func (o SystemStorageArrayOutput) ToOutput(ctx context.Context) pulumix.Output[[]*SystemStorage] {
	return pulumix.Output[[]*SystemStorage]{
		OutputState: o.OutputState,
	}
}

func (o SystemStorageArrayOutput) Index(i pulumi.IntInput) SystemStorageOutput {
	return pulumi.All(o, i).ApplyT(func(vs []interface{}) *SystemStorage {
		return vs[0].([]*SystemStorage)[vs[1].(int)]
	}).(SystemStorageOutput)
}

type SystemStorageMapOutput struct{ *pulumi.OutputState }

func (SystemStorageMapOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*map[string]*SystemStorage)(nil)).Elem()
}

func (o SystemStorageMapOutput) ToSystemStorageMapOutput() SystemStorageMapOutput {
	return o
}

func (o SystemStorageMapOutput) ToSystemStorageMapOutputWithContext(ctx context.Context) SystemStorageMapOutput {
	return o
}

func (o SystemStorageMapOutput) ToOutput(ctx context.Context) pulumix.Output[map[string]*SystemStorage] {
	return pulumix.Output[map[string]*SystemStorage]{
		OutputState: o.OutputState,
	}
}

func (o SystemStorageMapOutput) MapIndex(k pulumi.StringInput) SystemStorageOutput {
	return pulumi.All(o, k).ApplyT(func(vs []interface{}) *SystemStorage {
		return vs[0].(map[string]*SystemStorage)[vs[1].(string)]
	}).(SystemStorageOutput)
}

func init() {
	pulumi.RegisterInputType(reflect.TypeOf((*SystemStorageInput)(nil)).Elem(), &SystemStorage{})
	pulumi.RegisterInputType(reflect.TypeOf((*SystemStorageArrayInput)(nil)).Elem(), SystemStorageArray{})
	pulumi.RegisterInputType(reflect.TypeOf((*SystemStorageMapInput)(nil)).Elem(), SystemStorageMap{})
	pulumi.RegisterOutputType(SystemStorageOutput{})
	pulumi.RegisterOutputType(SystemStorageArrayOutput{})
	pulumi.RegisterOutputType(SystemStorageMapOutput{})
}
