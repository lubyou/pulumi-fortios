// Code generated by the Pulumi Terraform Bridge (tfgen) Tool DO NOT EDIT.
// *** WARNING: Do not edit by hand unless you're certain you know what you are doing! ***

package fortios

import (
	"context"
	"reflect"

	"github.com/pkg/errors"
	"github.com/pulumi/pulumi/sdk/v3/go/pulumi"
)

// Configure GENEVE devices. Applies to FortiOS Version `>= 6.2.4`.
//
// ## Example Usage
//
// ```go
// package main
//
// import (
// 	"github.com/lubyou/pulumi-fortios/sdk/go/fortios"
// 	"github.com/pulumi/pulumi/sdk/v3/go/pulumi"
// )
//
// func main() {
// 	pulumi.Run(func(ctx *pulumi.Context) error {
// 		_, err := fortios.NewSystemGeneve(ctx, "trname", &fortios.SystemGeneveArgs{
// 			Dstport:   pulumi.Int(22),
// 			Interface: pulumi.String("port2"),
// 			IpVersion: pulumi.String("ipv4-unicast"),
// 			RemoteIp:  pulumi.String("1.1.1.1"),
// 			RemoteIp6: pulumi.String("::"),
// 			Vni:       pulumi.Int(0),
// 		})
// 		if err != nil {
// 			return err
// 		}
// 		return nil
// 	})
// }
// ```
//
// ## Import
//
// System Geneve can be imported using any of these accepted formats
//
// ```sh
//  $ pulumi import fortios:index/systemGeneve:SystemGeneve labelname {{name}}
// ```
//
//  If you do not want to import arguments of block$ export "FORTIOS_IMPORT_TABLE"="false"
//
// ```sh
//  $ pulumi import fortios:index/systemGeneve:SystemGeneve labelname {{name}}
// ```
//
//  $ unset "FORTIOS_IMPORT_TABLE"
type SystemGeneve struct {
	pulumi.CustomResourceState

	// GENEVE destination port (1 - 65535, default = 6081).
	Dstport pulumi.IntOutput `pulumi:"dstport"`
	// Outgoing interface for GENEVE encapsulated traffic.
	Interface pulumi.StringOutput `pulumi:"interface"`
	// IP version to use for the GENEVE interface and so for communication over the GENEVE. IPv4 or IPv6 unicast. Valid values: `ipv4-unicast`, `ipv6-unicast`.
	IpVersion pulumi.StringOutput `pulumi:"ipVersion"`
	// GENEVE device or interface name. Must be an unique interface name.
	Name pulumi.StringOutput `pulumi:"name"`
	// IPv4 address of the GENEVE interface on the device at the remote end of the GENEVE.
	RemoteIp pulumi.StringOutput `pulumi:"remoteIp"`
	// IPv6 IP address of the GENEVE interface on the device at the remote end of the GENEVE.
	RemoteIp6 pulumi.StringOutput `pulumi:"remoteIp6"`
	// GENEVE type. Valid values: `ethernet`, `ppp`.
	Type pulumi.StringOutput `pulumi:"type"`
	// Specifies the vdom to which the resource will be applied when the FortiGate unit is running in VDOM mode. Only one vdom can be specified. If you want to inherit the vdom configuration of the provider, please do not set this parameter.
	Vdomparam pulumi.StringPtrOutput `pulumi:"vdomparam"`
	// GENEVE network ID.
	Vni pulumi.IntOutput `pulumi:"vni"`
}

// NewSystemGeneve registers a new resource with the given unique name, arguments, and options.
func NewSystemGeneve(ctx *pulumi.Context,
	name string, args *SystemGeneveArgs, opts ...pulumi.ResourceOption) (*SystemGeneve, error) {
	if args == nil {
		return nil, errors.New("missing one or more required arguments")
	}

	if args.Interface == nil {
		return nil, errors.New("invalid value for required argument 'Interface'")
	}
	if args.IpVersion == nil {
		return nil, errors.New("invalid value for required argument 'IpVersion'")
	}
	if args.RemoteIp == nil {
		return nil, errors.New("invalid value for required argument 'RemoteIp'")
	}
	if args.Vni == nil {
		return nil, errors.New("invalid value for required argument 'Vni'")
	}
	opts = pkgResourceDefaultOpts(opts)
	var resource SystemGeneve
	err := ctx.RegisterResource("fortios:index/systemGeneve:SystemGeneve", name, args, &resource, opts...)
	if err != nil {
		return nil, err
	}
	return &resource, nil
}

// GetSystemGeneve gets an existing SystemGeneve resource's state with the given name, ID, and optional
// state properties that are used to uniquely qualify the lookup (nil if not required).
func GetSystemGeneve(ctx *pulumi.Context,
	name string, id pulumi.IDInput, state *SystemGeneveState, opts ...pulumi.ResourceOption) (*SystemGeneve, error) {
	var resource SystemGeneve
	err := ctx.ReadResource("fortios:index/systemGeneve:SystemGeneve", name, id, state, &resource, opts...)
	if err != nil {
		return nil, err
	}
	return &resource, nil
}

// Input properties used for looking up and filtering SystemGeneve resources.
type systemGeneveState struct {
	// GENEVE destination port (1 - 65535, default = 6081).
	Dstport *int `pulumi:"dstport"`
	// Outgoing interface for GENEVE encapsulated traffic.
	Interface *string `pulumi:"interface"`
	// IP version to use for the GENEVE interface and so for communication over the GENEVE. IPv4 or IPv6 unicast. Valid values: `ipv4-unicast`, `ipv6-unicast`.
	IpVersion *string `pulumi:"ipVersion"`
	// GENEVE device or interface name. Must be an unique interface name.
	Name *string `pulumi:"name"`
	// IPv4 address of the GENEVE interface on the device at the remote end of the GENEVE.
	RemoteIp *string `pulumi:"remoteIp"`
	// IPv6 IP address of the GENEVE interface on the device at the remote end of the GENEVE.
	RemoteIp6 *string `pulumi:"remoteIp6"`
	// GENEVE type. Valid values: `ethernet`, `ppp`.
	Type *string `pulumi:"type"`
	// Specifies the vdom to which the resource will be applied when the FortiGate unit is running in VDOM mode. Only one vdom can be specified. If you want to inherit the vdom configuration of the provider, please do not set this parameter.
	Vdomparam *string `pulumi:"vdomparam"`
	// GENEVE network ID.
	Vni *int `pulumi:"vni"`
}

type SystemGeneveState struct {
	// GENEVE destination port (1 - 65535, default = 6081).
	Dstport pulumi.IntPtrInput
	// Outgoing interface for GENEVE encapsulated traffic.
	Interface pulumi.StringPtrInput
	// IP version to use for the GENEVE interface and so for communication over the GENEVE. IPv4 or IPv6 unicast. Valid values: `ipv4-unicast`, `ipv6-unicast`.
	IpVersion pulumi.StringPtrInput
	// GENEVE device or interface name. Must be an unique interface name.
	Name pulumi.StringPtrInput
	// IPv4 address of the GENEVE interface on the device at the remote end of the GENEVE.
	RemoteIp pulumi.StringPtrInput
	// IPv6 IP address of the GENEVE interface on the device at the remote end of the GENEVE.
	RemoteIp6 pulumi.StringPtrInput
	// GENEVE type. Valid values: `ethernet`, `ppp`.
	Type pulumi.StringPtrInput
	// Specifies the vdom to which the resource will be applied when the FortiGate unit is running in VDOM mode. Only one vdom can be specified. If you want to inherit the vdom configuration of the provider, please do not set this parameter.
	Vdomparam pulumi.StringPtrInput
	// GENEVE network ID.
	Vni pulumi.IntPtrInput
}

func (SystemGeneveState) ElementType() reflect.Type {
	return reflect.TypeOf((*systemGeneveState)(nil)).Elem()
}

type systemGeneveArgs struct {
	// GENEVE destination port (1 - 65535, default = 6081).
	Dstport *int `pulumi:"dstport"`
	// Outgoing interface for GENEVE encapsulated traffic.
	Interface string `pulumi:"interface"`
	// IP version to use for the GENEVE interface and so for communication over the GENEVE. IPv4 or IPv6 unicast. Valid values: `ipv4-unicast`, `ipv6-unicast`.
	IpVersion string `pulumi:"ipVersion"`
	// GENEVE device or interface name. Must be an unique interface name.
	Name *string `pulumi:"name"`
	// IPv4 address of the GENEVE interface on the device at the remote end of the GENEVE.
	RemoteIp string `pulumi:"remoteIp"`
	// IPv6 IP address of the GENEVE interface on the device at the remote end of the GENEVE.
	RemoteIp6 *string `pulumi:"remoteIp6"`
	// GENEVE type. Valid values: `ethernet`, `ppp`.
	Type *string `pulumi:"type"`
	// Specifies the vdom to which the resource will be applied when the FortiGate unit is running in VDOM mode. Only one vdom can be specified. If you want to inherit the vdom configuration of the provider, please do not set this parameter.
	Vdomparam *string `pulumi:"vdomparam"`
	// GENEVE network ID.
	Vni int `pulumi:"vni"`
}

// The set of arguments for constructing a SystemGeneve resource.
type SystemGeneveArgs struct {
	// GENEVE destination port (1 - 65535, default = 6081).
	Dstport pulumi.IntPtrInput
	// Outgoing interface for GENEVE encapsulated traffic.
	Interface pulumi.StringInput
	// IP version to use for the GENEVE interface and so for communication over the GENEVE. IPv4 or IPv6 unicast. Valid values: `ipv4-unicast`, `ipv6-unicast`.
	IpVersion pulumi.StringInput
	// GENEVE device or interface name. Must be an unique interface name.
	Name pulumi.StringPtrInput
	// IPv4 address of the GENEVE interface on the device at the remote end of the GENEVE.
	RemoteIp pulumi.StringInput
	// IPv6 IP address of the GENEVE interface on the device at the remote end of the GENEVE.
	RemoteIp6 pulumi.StringPtrInput
	// GENEVE type. Valid values: `ethernet`, `ppp`.
	Type pulumi.StringPtrInput
	// Specifies the vdom to which the resource will be applied when the FortiGate unit is running in VDOM mode. Only one vdom can be specified. If you want to inherit the vdom configuration of the provider, please do not set this parameter.
	Vdomparam pulumi.StringPtrInput
	// GENEVE network ID.
	Vni pulumi.IntInput
}

func (SystemGeneveArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*systemGeneveArgs)(nil)).Elem()
}

type SystemGeneveInput interface {
	pulumi.Input

	ToSystemGeneveOutput() SystemGeneveOutput
	ToSystemGeneveOutputWithContext(ctx context.Context) SystemGeneveOutput
}

func (*SystemGeneve) ElementType() reflect.Type {
	return reflect.TypeOf((**SystemGeneve)(nil)).Elem()
}

func (i *SystemGeneve) ToSystemGeneveOutput() SystemGeneveOutput {
	return i.ToSystemGeneveOutputWithContext(context.Background())
}

func (i *SystemGeneve) ToSystemGeneveOutputWithContext(ctx context.Context) SystemGeneveOutput {
	return pulumi.ToOutputWithContext(ctx, i).(SystemGeneveOutput)
}

// SystemGeneveArrayInput is an input type that accepts SystemGeneveArray and SystemGeneveArrayOutput values.
// You can construct a concrete instance of `SystemGeneveArrayInput` via:
//
//          SystemGeneveArray{ SystemGeneveArgs{...} }
type SystemGeneveArrayInput interface {
	pulumi.Input

	ToSystemGeneveArrayOutput() SystemGeneveArrayOutput
	ToSystemGeneveArrayOutputWithContext(context.Context) SystemGeneveArrayOutput
}

type SystemGeneveArray []SystemGeneveInput

func (SystemGeneveArray) ElementType() reflect.Type {
	return reflect.TypeOf((*[]*SystemGeneve)(nil)).Elem()
}

func (i SystemGeneveArray) ToSystemGeneveArrayOutput() SystemGeneveArrayOutput {
	return i.ToSystemGeneveArrayOutputWithContext(context.Background())
}

func (i SystemGeneveArray) ToSystemGeneveArrayOutputWithContext(ctx context.Context) SystemGeneveArrayOutput {
	return pulumi.ToOutputWithContext(ctx, i).(SystemGeneveArrayOutput)
}

// SystemGeneveMapInput is an input type that accepts SystemGeneveMap and SystemGeneveMapOutput values.
// You can construct a concrete instance of `SystemGeneveMapInput` via:
//
//          SystemGeneveMap{ "key": SystemGeneveArgs{...} }
type SystemGeneveMapInput interface {
	pulumi.Input

	ToSystemGeneveMapOutput() SystemGeneveMapOutput
	ToSystemGeneveMapOutputWithContext(context.Context) SystemGeneveMapOutput
}

type SystemGeneveMap map[string]SystemGeneveInput

func (SystemGeneveMap) ElementType() reflect.Type {
	return reflect.TypeOf((*map[string]*SystemGeneve)(nil)).Elem()
}

func (i SystemGeneveMap) ToSystemGeneveMapOutput() SystemGeneveMapOutput {
	return i.ToSystemGeneveMapOutputWithContext(context.Background())
}

func (i SystemGeneveMap) ToSystemGeneveMapOutputWithContext(ctx context.Context) SystemGeneveMapOutput {
	return pulumi.ToOutputWithContext(ctx, i).(SystemGeneveMapOutput)
}

type SystemGeneveOutput struct{ *pulumi.OutputState }

func (SystemGeneveOutput) ElementType() reflect.Type {
	return reflect.TypeOf((**SystemGeneve)(nil)).Elem()
}

func (o SystemGeneveOutput) ToSystemGeneveOutput() SystemGeneveOutput {
	return o
}

func (o SystemGeneveOutput) ToSystemGeneveOutputWithContext(ctx context.Context) SystemGeneveOutput {
	return o
}

type SystemGeneveArrayOutput struct{ *pulumi.OutputState }

func (SystemGeneveArrayOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*[]*SystemGeneve)(nil)).Elem()
}

func (o SystemGeneveArrayOutput) ToSystemGeneveArrayOutput() SystemGeneveArrayOutput {
	return o
}

func (o SystemGeneveArrayOutput) ToSystemGeneveArrayOutputWithContext(ctx context.Context) SystemGeneveArrayOutput {
	return o
}

func (o SystemGeneveArrayOutput) Index(i pulumi.IntInput) SystemGeneveOutput {
	return pulumi.All(o, i).ApplyT(func(vs []interface{}) *SystemGeneve {
		return vs[0].([]*SystemGeneve)[vs[1].(int)]
	}).(SystemGeneveOutput)
}

type SystemGeneveMapOutput struct{ *pulumi.OutputState }

func (SystemGeneveMapOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*map[string]*SystemGeneve)(nil)).Elem()
}

func (o SystemGeneveMapOutput) ToSystemGeneveMapOutput() SystemGeneveMapOutput {
	return o
}

func (o SystemGeneveMapOutput) ToSystemGeneveMapOutputWithContext(ctx context.Context) SystemGeneveMapOutput {
	return o
}

func (o SystemGeneveMapOutput) MapIndex(k pulumi.StringInput) SystemGeneveOutput {
	return pulumi.All(o, k).ApplyT(func(vs []interface{}) *SystemGeneve {
		return vs[0].(map[string]*SystemGeneve)[vs[1].(string)]
	}).(SystemGeneveOutput)
}

func init() {
	pulumi.RegisterInputType(reflect.TypeOf((*SystemGeneveInput)(nil)).Elem(), &SystemGeneve{})
	pulumi.RegisterInputType(reflect.TypeOf((*SystemGeneveArrayInput)(nil)).Elem(), SystemGeneveArray{})
	pulumi.RegisterInputType(reflect.TypeOf((*SystemGeneveMapInput)(nil)).Elem(), SystemGeneveMap{})
	pulumi.RegisterOutputType(SystemGeneveOutput{})
	pulumi.RegisterOutputType(SystemGeneveArrayOutput{})
	pulumi.RegisterOutputType(SystemGeneveMapOutput{})
}
