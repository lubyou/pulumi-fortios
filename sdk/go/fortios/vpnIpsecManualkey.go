// Code generated by the Pulumi Terraform Bridge (tfgen) Tool DO NOT EDIT.
// *** WARNING: Do not edit by hand unless you're certain you know what you are doing! ***

package fortios

import (
	"context"
	"reflect"

	"github.com/pkg/errors"
	"github.com/pulumi/pulumi/sdk/v3/go/pulumi"
)

// Configure IPsec manual keys.
//
// ## Example Usage
//
// ```go
// package main
//
// import (
// 	"github.com/lubyou/pulumi-fortios/sdk/go/fortios"
// 	"github.com/pulumi/pulumi/sdk/v3/go/pulumi"
// )
//
// func main() {
// 	pulumi.Run(func(ctx *pulumi.Context) error {
// 		_, err := fortios.NewVpnIpsecManualkey(ctx, "trname", &fortios.VpnIpsecManualkeyArgs{
// 			Authentication: pulumi.String("md5"),
// 			Authkey:        pulumi.String("EE32CA121ECD772A-ECACAABA212345EC"),
// 			Enckey:         pulumi.String("-"),
// 			Encryption:     pulumi.String("null"),
// 			Interface:      pulumi.String("port4"),
// 			LocalGw:        pulumi.String("0.0.0.0"),
// 			Localspi:       pulumi.String("0x100"),
// 			RemoteGw:       pulumi.String("1.1.1.1"),
// 			Remotespi:      pulumi.String("0x100"),
// 		})
// 		if err != nil {
// 			return err
// 		}
// 		return nil
// 	})
// }
// ```
//
// ## Import
//
// VpnIpsec Manualkey can be imported using any of these accepted formats
//
// ```sh
//  $ pulumi import fortios:index/vpnIpsecManualkey:VpnIpsecManualkey labelname {{name}}
// ```
//
//  If you do not want to import arguments of block$ export "FORTIOS_IMPORT_TABLE"="false"
//
// ```sh
//  $ pulumi import fortios:index/vpnIpsecManualkey:VpnIpsecManualkey labelname {{name}}
// ```
//
//  $ unset "FORTIOS_IMPORT_TABLE"
type VpnIpsecManualkey struct {
	pulumi.CustomResourceState

	// Authentication algorithm. Must be the same for both ends of the tunnel. Valid values: `null`, `md5`, `sha1`, `sha256`, `sha384`, `sha512`.
	Authentication pulumi.StringOutput `pulumi:"authentication"`
	// Hexadecimal authentication key in 16-digit (8-byte) segments separated by hyphens.
	Authkey pulumi.StringOutput `pulumi:"authkey"`
	// Hexadecimal encryption key in 16-digit (8-byte) segments separated by hyphens.
	Enckey pulumi.StringOutput `pulumi:"enckey"`
	// Encryption algorithm. Must be the same for both ends of the tunnel. Valid values: `null`, `des`, `3des`, `aes128`, `aes192`, `aes256`, `aria128`, `aria192`, `aria256`, `seed`.
	Encryption pulumi.StringOutput `pulumi:"encryption"`
	// Name of the physical, aggregate, or VLAN interface.
	Interface pulumi.StringOutput `pulumi:"interface"`
	// Local gateway.
	LocalGw pulumi.StringOutput `pulumi:"localGw"`
	// Local SPI, a hexadecimal 8-digit (4-byte) tag. Discerns between two traffic streams with different encryption rules.
	Localspi pulumi.StringOutput `pulumi:"localspi"`
	// IPsec tunnel name.
	Name pulumi.StringOutput `pulumi:"name"`
	// Enable/disable NPU offloading. Valid values: `enable`, `disable`.
	NpuOffload pulumi.StringOutput `pulumi:"npuOffload"`
	// Peer gateway.
	RemoteGw pulumi.StringOutput `pulumi:"remoteGw"`
	// Remote SPI, a hexadecimal 8-digit (4-byte) tag. Discerns between two traffic streams with different encryption rules.
	Remotespi pulumi.StringOutput `pulumi:"remotespi"`
	// Specifies the vdom to which the resource will be applied when the FortiGate unit is running in VDOM mode. Only one vdom can be specified. If you want to inherit the vdom configuration of the provider, please do not set this parameter.
	Vdomparam pulumi.StringPtrOutput `pulumi:"vdomparam"`
}

// NewVpnIpsecManualkey registers a new resource with the given unique name, arguments, and options.
func NewVpnIpsecManualkey(ctx *pulumi.Context,
	name string, args *VpnIpsecManualkeyArgs, opts ...pulumi.ResourceOption) (*VpnIpsecManualkey, error) {
	if args == nil {
		return nil, errors.New("missing one or more required arguments")
	}

	if args.Authentication == nil {
		return nil, errors.New("invalid value for required argument 'Authentication'")
	}
	if args.Encryption == nil {
		return nil, errors.New("invalid value for required argument 'Encryption'")
	}
	if args.Interface == nil {
		return nil, errors.New("invalid value for required argument 'Interface'")
	}
	if args.RemoteGw == nil {
		return nil, errors.New("invalid value for required argument 'RemoteGw'")
	}
	opts = pkgResourceDefaultOpts(opts)
	var resource VpnIpsecManualkey
	err := ctx.RegisterResource("fortios:index/vpnIpsecManualkey:VpnIpsecManualkey", name, args, &resource, opts...)
	if err != nil {
		return nil, err
	}
	return &resource, nil
}

// GetVpnIpsecManualkey gets an existing VpnIpsecManualkey resource's state with the given name, ID, and optional
// state properties that are used to uniquely qualify the lookup (nil if not required).
func GetVpnIpsecManualkey(ctx *pulumi.Context,
	name string, id pulumi.IDInput, state *VpnIpsecManualkeyState, opts ...pulumi.ResourceOption) (*VpnIpsecManualkey, error) {
	var resource VpnIpsecManualkey
	err := ctx.ReadResource("fortios:index/vpnIpsecManualkey:VpnIpsecManualkey", name, id, state, &resource, opts...)
	if err != nil {
		return nil, err
	}
	return &resource, nil
}

// Input properties used for looking up and filtering VpnIpsecManualkey resources.
type vpnIpsecManualkeyState struct {
	// Authentication algorithm. Must be the same for both ends of the tunnel. Valid values: `null`, `md5`, `sha1`, `sha256`, `sha384`, `sha512`.
	Authentication *string `pulumi:"authentication"`
	// Hexadecimal authentication key in 16-digit (8-byte) segments separated by hyphens.
	Authkey *string `pulumi:"authkey"`
	// Hexadecimal encryption key in 16-digit (8-byte) segments separated by hyphens.
	Enckey *string `pulumi:"enckey"`
	// Encryption algorithm. Must be the same for both ends of the tunnel. Valid values: `null`, `des`, `3des`, `aes128`, `aes192`, `aes256`, `aria128`, `aria192`, `aria256`, `seed`.
	Encryption *string `pulumi:"encryption"`
	// Name of the physical, aggregate, or VLAN interface.
	Interface *string `pulumi:"interface"`
	// Local gateway.
	LocalGw *string `pulumi:"localGw"`
	// Local SPI, a hexadecimal 8-digit (4-byte) tag. Discerns between two traffic streams with different encryption rules.
	Localspi *string `pulumi:"localspi"`
	// IPsec tunnel name.
	Name *string `pulumi:"name"`
	// Enable/disable NPU offloading. Valid values: `enable`, `disable`.
	NpuOffload *string `pulumi:"npuOffload"`
	// Peer gateway.
	RemoteGw *string `pulumi:"remoteGw"`
	// Remote SPI, a hexadecimal 8-digit (4-byte) tag. Discerns between two traffic streams with different encryption rules.
	Remotespi *string `pulumi:"remotespi"`
	// Specifies the vdom to which the resource will be applied when the FortiGate unit is running in VDOM mode. Only one vdom can be specified. If you want to inherit the vdom configuration of the provider, please do not set this parameter.
	Vdomparam *string `pulumi:"vdomparam"`
}

type VpnIpsecManualkeyState struct {
	// Authentication algorithm. Must be the same for both ends of the tunnel. Valid values: `null`, `md5`, `sha1`, `sha256`, `sha384`, `sha512`.
	Authentication pulumi.StringPtrInput
	// Hexadecimal authentication key in 16-digit (8-byte) segments separated by hyphens.
	Authkey pulumi.StringPtrInput
	// Hexadecimal encryption key in 16-digit (8-byte) segments separated by hyphens.
	Enckey pulumi.StringPtrInput
	// Encryption algorithm. Must be the same for both ends of the tunnel. Valid values: `null`, `des`, `3des`, `aes128`, `aes192`, `aes256`, `aria128`, `aria192`, `aria256`, `seed`.
	Encryption pulumi.StringPtrInput
	// Name of the physical, aggregate, or VLAN interface.
	Interface pulumi.StringPtrInput
	// Local gateway.
	LocalGw pulumi.StringPtrInput
	// Local SPI, a hexadecimal 8-digit (4-byte) tag. Discerns between two traffic streams with different encryption rules.
	Localspi pulumi.StringPtrInput
	// IPsec tunnel name.
	Name pulumi.StringPtrInput
	// Enable/disable NPU offloading. Valid values: `enable`, `disable`.
	NpuOffload pulumi.StringPtrInput
	// Peer gateway.
	RemoteGw pulumi.StringPtrInput
	// Remote SPI, a hexadecimal 8-digit (4-byte) tag. Discerns between two traffic streams with different encryption rules.
	Remotespi pulumi.StringPtrInput
	// Specifies the vdom to which the resource will be applied when the FortiGate unit is running in VDOM mode. Only one vdom can be specified. If you want to inherit the vdom configuration of the provider, please do not set this parameter.
	Vdomparam pulumi.StringPtrInput
}

func (VpnIpsecManualkeyState) ElementType() reflect.Type {
	return reflect.TypeOf((*vpnIpsecManualkeyState)(nil)).Elem()
}

type vpnIpsecManualkeyArgs struct {
	// Authentication algorithm. Must be the same for both ends of the tunnel. Valid values: `null`, `md5`, `sha1`, `sha256`, `sha384`, `sha512`.
	Authentication string `pulumi:"authentication"`
	// Hexadecimal authentication key in 16-digit (8-byte) segments separated by hyphens.
	Authkey *string `pulumi:"authkey"`
	// Hexadecimal encryption key in 16-digit (8-byte) segments separated by hyphens.
	Enckey *string `pulumi:"enckey"`
	// Encryption algorithm. Must be the same for both ends of the tunnel. Valid values: `null`, `des`, `3des`, `aes128`, `aes192`, `aes256`, `aria128`, `aria192`, `aria256`, `seed`.
	Encryption string `pulumi:"encryption"`
	// Name of the physical, aggregate, or VLAN interface.
	Interface string `pulumi:"interface"`
	// Local gateway.
	LocalGw *string `pulumi:"localGw"`
	// Local SPI, a hexadecimal 8-digit (4-byte) tag. Discerns between two traffic streams with different encryption rules.
	Localspi *string `pulumi:"localspi"`
	// IPsec tunnel name.
	Name *string `pulumi:"name"`
	// Enable/disable NPU offloading. Valid values: `enable`, `disable`.
	NpuOffload *string `pulumi:"npuOffload"`
	// Peer gateway.
	RemoteGw string `pulumi:"remoteGw"`
	// Remote SPI, a hexadecimal 8-digit (4-byte) tag. Discerns between two traffic streams with different encryption rules.
	Remotespi *string `pulumi:"remotespi"`
	// Specifies the vdom to which the resource will be applied when the FortiGate unit is running in VDOM mode. Only one vdom can be specified. If you want to inherit the vdom configuration of the provider, please do not set this parameter.
	Vdomparam *string `pulumi:"vdomparam"`
}

// The set of arguments for constructing a VpnIpsecManualkey resource.
type VpnIpsecManualkeyArgs struct {
	// Authentication algorithm. Must be the same for both ends of the tunnel. Valid values: `null`, `md5`, `sha1`, `sha256`, `sha384`, `sha512`.
	Authentication pulumi.StringInput
	// Hexadecimal authentication key in 16-digit (8-byte) segments separated by hyphens.
	Authkey pulumi.StringPtrInput
	// Hexadecimal encryption key in 16-digit (8-byte) segments separated by hyphens.
	Enckey pulumi.StringPtrInput
	// Encryption algorithm. Must be the same for both ends of the tunnel. Valid values: `null`, `des`, `3des`, `aes128`, `aes192`, `aes256`, `aria128`, `aria192`, `aria256`, `seed`.
	Encryption pulumi.StringInput
	// Name of the physical, aggregate, or VLAN interface.
	Interface pulumi.StringInput
	// Local gateway.
	LocalGw pulumi.StringPtrInput
	// Local SPI, a hexadecimal 8-digit (4-byte) tag. Discerns between two traffic streams with different encryption rules.
	Localspi pulumi.StringPtrInput
	// IPsec tunnel name.
	Name pulumi.StringPtrInput
	// Enable/disable NPU offloading. Valid values: `enable`, `disable`.
	NpuOffload pulumi.StringPtrInput
	// Peer gateway.
	RemoteGw pulumi.StringInput
	// Remote SPI, a hexadecimal 8-digit (4-byte) tag. Discerns between two traffic streams with different encryption rules.
	Remotespi pulumi.StringPtrInput
	// Specifies the vdom to which the resource will be applied when the FortiGate unit is running in VDOM mode. Only one vdom can be specified. If you want to inherit the vdom configuration of the provider, please do not set this parameter.
	Vdomparam pulumi.StringPtrInput
}

func (VpnIpsecManualkeyArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*vpnIpsecManualkeyArgs)(nil)).Elem()
}

type VpnIpsecManualkeyInput interface {
	pulumi.Input

	ToVpnIpsecManualkeyOutput() VpnIpsecManualkeyOutput
	ToVpnIpsecManualkeyOutputWithContext(ctx context.Context) VpnIpsecManualkeyOutput
}

func (*VpnIpsecManualkey) ElementType() reflect.Type {
	return reflect.TypeOf((**VpnIpsecManualkey)(nil)).Elem()
}

func (i *VpnIpsecManualkey) ToVpnIpsecManualkeyOutput() VpnIpsecManualkeyOutput {
	return i.ToVpnIpsecManualkeyOutputWithContext(context.Background())
}

func (i *VpnIpsecManualkey) ToVpnIpsecManualkeyOutputWithContext(ctx context.Context) VpnIpsecManualkeyOutput {
	return pulumi.ToOutputWithContext(ctx, i).(VpnIpsecManualkeyOutput)
}

// VpnIpsecManualkeyArrayInput is an input type that accepts VpnIpsecManualkeyArray and VpnIpsecManualkeyArrayOutput values.
// You can construct a concrete instance of `VpnIpsecManualkeyArrayInput` via:
//
//          VpnIpsecManualkeyArray{ VpnIpsecManualkeyArgs{...} }
type VpnIpsecManualkeyArrayInput interface {
	pulumi.Input

	ToVpnIpsecManualkeyArrayOutput() VpnIpsecManualkeyArrayOutput
	ToVpnIpsecManualkeyArrayOutputWithContext(context.Context) VpnIpsecManualkeyArrayOutput
}

type VpnIpsecManualkeyArray []VpnIpsecManualkeyInput

func (VpnIpsecManualkeyArray) ElementType() reflect.Type {
	return reflect.TypeOf((*[]*VpnIpsecManualkey)(nil)).Elem()
}

func (i VpnIpsecManualkeyArray) ToVpnIpsecManualkeyArrayOutput() VpnIpsecManualkeyArrayOutput {
	return i.ToVpnIpsecManualkeyArrayOutputWithContext(context.Background())
}

func (i VpnIpsecManualkeyArray) ToVpnIpsecManualkeyArrayOutputWithContext(ctx context.Context) VpnIpsecManualkeyArrayOutput {
	return pulumi.ToOutputWithContext(ctx, i).(VpnIpsecManualkeyArrayOutput)
}

// VpnIpsecManualkeyMapInput is an input type that accepts VpnIpsecManualkeyMap and VpnIpsecManualkeyMapOutput values.
// You can construct a concrete instance of `VpnIpsecManualkeyMapInput` via:
//
//          VpnIpsecManualkeyMap{ "key": VpnIpsecManualkeyArgs{...} }
type VpnIpsecManualkeyMapInput interface {
	pulumi.Input

	ToVpnIpsecManualkeyMapOutput() VpnIpsecManualkeyMapOutput
	ToVpnIpsecManualkeyMapOutputWithContext(context.Context) VpnIpsecManualkeyMapOutput
}

type VpnIpsecManualkeyMap map[string]VpnIpsecManualkeyInput

func (VpnIpsecManualkeyMap) ElementType() reflect.Type {
	return reflect.TypeOf((*map[string]*VpnIpsecManualkey)(nil)).Elem()
}

func (i VpnIpsecManualkeyMap) ToVpnIpsecManualkeyMapOutput() VpnIpsecManualkeyMapOutput {
	return i.ToVpnIpsecManualkeyMapOutputWithContext(context.Background())
}

func (i VpnIpsecManualkeyMap) ToVpnIpsecManualkeyMapOutputWithContext(ctx context.Context) VpnIpsecManualkeyMapOutput {
	return pulumi.ToOutputWithContext(ctx, i).(VpnIpsecManualkeyMapOutput)
}

type VpnIpsecManualkeyOutput struct{ *pulumi.OutputState }

func (VpnIpsecManualkeyOutput) ElementType() reflect.Type {
	return reflect.TypeOf((**VpnIpsecManualkey)(nil)).Elem()
}

func (o VpnIpsecManualkeyOutput) ToVpnIpsecManualkeyOutput() VpnIpsecManualkeyOutput {
	return o
}

func (o VpnIpsecManualkeyOutput) ToVpnIpsecManualkeyOutputWithContext(ctx context.Context) VpnIpsecManualkeyOutput {
	return o
}

type VpnIpsecManualkeyArrayOutput struct{ *pulumi.OutputState }

func (VpnIpsecManualkeyArrayOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*[]*VpnIpsecManualkey)(nil)).Elem()
}

func (o VpnIpsecManualkeyArrayOutput) ToVpnIpsecManualkeyArrayOutput() VpnIpsecManualkeyArrayOutput {
	return o
}

func (o VpnIpsecManualkeyArrayOutput) ToVpnIpsecManualkeyArrayOutputWithContext(ctx context.Context) VpnIpsecManualkeyArrayOutput {
	return o
}

func (o VpnIpsecManualkeyArrayOutput) Index(i pulumi.IntInput) VpnIpsecManualkeyOutput {
	return pulumi.All(o, i).ApplyT(func(vs []interface{}) *VpnIpsecManualkey {
		return vs[0].([]*VpnIpsecManualkey)[vs[1].(int)]
	}).(VpnIpsecManualkeyOutput)
}

type VpnIpsecManualkeyMapOutput struct{ *pulumi.OutputState }

func (VpnIpsecManualkeyMapOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*map[string]*VpnIpsecManualkey)(nil)).Elem()
}

func (o VpnIpsecManualkeyMapOutput) ToVpnIpsecManualkeyMapOutput() VpnIpsecManualkeyMapOutput {
	return o
}

func (o VpnIpsecManualkeyMapOutput) ToVpnIpsecManualkeyMapOutputWithContext(ctx context.Context) VpnIpsecManualkeyMapOutput {
	return o
}

func (o VpnIpsecManualkeyMapOutput) MapIndex(k pulumi.StringInput) VpnIpsecManualkeyOutput {
	return pulumi.All(o, k).ApplyT(func(vs []interface{}) *VpnIpsecManualkey {
		return vs[0].(map[string]*VpnIpsecManualkey)[vs[1].(string)]
	}).(VpnIpsecManualkeyOutput)
}

func init() {
	pulumi.RegisterInputType(reflect.TypeOf((*VpnIpsecManualkeyInput)(nil)).Elem(), &VpnIpsecManualkey{})
	pulumi.RegisterInputType(reflect.TypeOf((*VpnIpsecManualkeyArrayInput)(nil)).Elem(), VpnIpsecManualkeyArray{})
	pulumi.RegisterInputType(reflect.TypeOf((*VpnIpsecManualkeyMapInput)(nil)).Elem(), VpnIpsecManualkeyMap{})
	pulumi.RegisterOutputType(VpnIpsecManualkeyOutput{})
	pulumi.RegisterOutputType(VpnIpsecManualkeyArrayOutput{})
	pulumi.RegisterOutputType(VpnIpsecManualkeyMapOutput{})
}
