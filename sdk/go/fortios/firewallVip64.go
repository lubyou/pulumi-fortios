// Code generated by the Pulumi Terraform Bridge (tfgen) Tool DO NOT EDIT.
// *** WARNING: Do not edit by hand unless you're certain you know what you are doing! ***

package fortios

import (
	"context"
	"reflect"

	"errors"
	"github.com/lubyou/pulumi-fortios/sdk/go/fortios/internal"
	"github.com/pulumi/pulumi/sdk/v3/go/pulumi"
	"github.com/pulumi/pulumi/sdk/v3/go/pulumix"
)

type FirewallVip64 struct {
	pulumi.CustomResourceState

	ArpReply            pulumi.StringOutput                `pulumi:"arpReply"`
	Color               pulumi.IntOutput                   `pulumi:"color"`
	Comment             pulumi.StringPtrOutput             `pulumi:"comment"`
	DynamicSortSubtable pulumi.StringPtrOutput             `pulumi:"dynamicSortSubtable"`
	Extip               pulumi.StringOutput                `pulumi:"extip"`
	Extport             pulumi.StringOutput                `pulumi:"extport"`
	Fosid               pulumi.IntOutput                   `pulumi:"fosid"`
	GetAllTables        pulumi.StringPtrOutput             `pulumi:"getAllTables"`
	LdbMethod           pulumi.StringOutput                `pulumi:"ldbMethod"`
	Mappedip            pulumi.StringOutput                `pulumi:"mappedip"`
	Mappedport          pulumi.StringOutput                `pulumi:"mappedport"`
	Monitors            FirewallVip64MonitorArrayOutput    `pulumi:"monitors"`
	Name                pulumi.StringOutput                `pulumi:"name"`
	Portforward         pulumi.StringOutput                `pulumi:"portforward"`
	Protocol            pulumi.StringOutput                `pulumi:"protocol"`
	Realservers         FirewallVip64RealserverArrayOutput `pulumi:"realservers"`
	ServerType          pulumi.StringOutput                `pulumi:"serverType"`
	SrcFilters          FirewallVip64SrcFilterArrayOutput  `pulumi:"srcFilters"`
	Type                pulumi.StringOutput                `pulumi:"type"`
	Uuid                pulumi.StringOutput                `pulumi:"uuid"`
	Vdomparam           pulumi.StringPtrOutput             `pulumi:"vdomparam"`
}

// NewFirewallVip64 registers a new resource with the given unique name, arguments, and options.
func NewFirewallVip64(ctx *pulumi.Context,
	name string, args *FirewallVip64Args, opts ...pulumi.ResourceOption) (*FirewallVip64, error) {
	if args == nil {
		return nil, errors.New("missing one or more required arguments")
	}

	if args.Extip == nil {
		return nil, errors.New("invalid value for required argument 'Extip'")
	}
	if args.Mappedip == nil {
		return nil, errors.New("invalid value for required argument 'Mappedip'")
	}
	opts = internal.PkgResourceDefaultOpts(opts)
	var resource FirewallVip64
	err := ctx.RegisterResource("fortios:index/firewallVip64:FirewallVip64", name, args, &resource, opts...)
	if err != nil {
		return nil, err
	}
	return &resource, nil
}

// GetFirewallVip64 gets an existing FirewallVip64 resource's state with the given name, ID, and optional
// state properties that are used to uniquely qualify the lookup (nil if not required).
func GetFirewallVip64(ctx *pulumi.Context,
	name string, id pulumi.IDInput, state *FirewallVip64State, opts ...pulumi.ResourceOption) (*FirewallVip64, error) {
	var resource FirewallVip64
	err := ctx.ReadResource("fortios:index/firewallVip64:FirewallVip64", name, id, state, &resource, opts...)
	if err != nil {
		return nil, err
	}
	return &resource, nil
}

// Input properties used for looking up and filtering FirewallVip64 resources.
type firewallVip64State struct {
	ArpReply            *string                   `pulumi:"arpReply"`
	Color               *int                      `pulumi:"color"`
	Comment             *string                   `pulumi:"comment"`
	DynamicSortSubtable *string                   `pulumi:"dynamicSortSubtable"`
	Extip               *string                   `pulumi:"extip"`
	Extport             *string                   `pulumi:"extport"`
	Fosid               *int                      `pulumi:"fosid"`
	GetAllTables        *string                   `pulumi:"getAllTables"`
	LdbMethod           *string                   `pulumi:"ldbMethod"`
	Mappedip            *string                   `pulumi:"mappedip"`
	Mappedport          *string                   `pulumi:"mappedport"`
	Monitors            []FirewallVip64Monitor    `pulumi:"monitors"`
	Name                *string                   `pulumi:"name"`
	Portforward         *string                   `pulumi:"portforward"`
	Protocol            *string                   `pulumi:"protocol"`
	Realservers         []FirewallVip64Realserver `pulumi:"realservers"`
	ServerType          *string                   `pulumi:"serverType"`
	SrcFilters          []FirewallVip64SrcFilter  `pulumi:"srcFilters"`
	Type                *string                   `pulumi:"type"`
	Uuid                *string                   `pulumi:"uuid"`
	Vdomparam           *string                   `pulumi:"vdomparam"`
}

type FirewallVip64State struct {
	ArpReply            pulumi.StringPtrInput
	Color               pulumi.IntPtrInput
	Comment             pulumi.StringPtrInput
	DynamicSortSubtable pulumi.StringPtrInput
	Extip               pulumi.StringPtrInput
	Extport             pulumi.StringPtrInput
	Fosid               pulumi.IntPtrInput
	GetAllTables        pulumi.StringPtrInput
	LdbMethod           pulumi.StringPtrInput
	Mappedip            pulumi.StringPtrInput
	Mappedport          pulumi.StringPtrInput
	Monitors            FirewallVip64MonitorArrayInput
	Name                pulumi.StringPtrInput
	Portforward         pulumi.StringPtrInput
	Protocol            pulumi.StringPtrInput
	Realservers         FirewallVip64RealserverArrayInput
	ServerType          pulumi.StringPtrInput
	SrcFilters          FirewallVip64SrcFilterArrayInput
	Type                pulumi.StringPtrInput
	Uuid                pulumi.StringPtrInput
	Vdomparam           pulumi.StringPtrInput
}

func (FirewallVip64State) ElementType() reflect.Type {
	return reflect.TypeOf((*firewallVip64State)(nil)).Elem()
}

type firewallVip64Args struct {
	ArpReply            *string                   `pulumi:"arpReply"`
	Color               *int                      `pulumi:"color"`
	Comment             *string                   `pulumi:"comment"`
	DynamicSortSubtable *string                   `pulumi:"dynamicSortSubtable"`
	Extip               string                    `pulumi:"extip"`
	Extport             *string                   `pulumi:"extport"`
	Fosid               *int                      `pulumi:"fosid"`
	GetAllTables        *string                   `pulumi:"getAllTables"`
	LdbMethod           *string                   `pulumi:"ldbMethod"`
	Mappedip            string                    `pulumi:"mappedip"`
	Mappedport          *string                   `pulumi:"mappedport"`
	Monitors            []FirewallVip64Monitor    `pulumi:"monitors"`
	Name                *string                   `pulumi:"name"`
	Portforward         *string                   `pulumi:"portforward"`
	Protocol            *string                   `pulumi:"protocol"`
	Realservers         []FirewallVip64Realserver `pulumi:"realservers"`
	ServerType          *string                   `pulumi:"serverType"`
	SrcFilters          []FirewallVip64SrcFilter  `pulumi:"srcFilters"`
	Type                *string                   `pulumi:"type"`
	Uuid                *string                   `pulumi:"uuid"`
	Vdomparam           *string                   `pulumi:"vdomparam"`
}

// The set of arguments for constructing a FirewallVip64 resource.
type FirewallVip64Args struct {
	ArpReply            pulumi.StringPtrInput
	Color               pulumi.IntPtrInput
	Comment             pulumi.StringPtrInput
	DynamicSortSubtable pulumi.StringPtrInput
	Extip               pulumi.StringInput
	Extport             pulumi.StringPtrInput
	Fosid               pulumi.IntPtrInput
	GetAllTables        pulumi.StringPtrInput
	LdbMethod           pulumi.StringPtrInput
	Mappedip            pulumi.StringInput
	Mappedport          pulumi.StringPtrInput
	Monitors            FirewallVip64MonitorArrayInput
	Name                pulumi.StringPtrInput
	Portforward         pulumi.StringPtrInput
	Protocol            pulumi.StringPtrInput
	Realservers         FirewallVip64RealserverArrayInput
	ServerType          pulumi.StringPtrInput
	SrcFilters          FirewallVip64SrcFilterArrayInput
	Type                pulumi.StringPtrInput
	Uuid                pulumi.StringPtrInput
	Vdomparam           pulumi.StringPtrInput
}

func (FirewallVip64Args) ElementType() reflect.Type {
	return reflect.TypeOf((*firewallVip64Args)(nil)).Elem()
}

type FirewallVip64Input interface {
	pulumi.Input

	ToFirewallVip64Output() FirewallVip64Output
	ToFirewallVip64OutputWithContext(ctx context.Context) FirewallVip64Output
}

func (*FirewallVip64) ElementType() reflect.Type {
	return reflect.TypeOf((**FirewallVip64)(nil)).Elem()
}

func (i *FirewallVip64) ToFirewallVip64Output() FirewallVip64Output {
	return i.ToFirewallVip64OutputWithContext(context.Background())
}

func (i *FirewallVip64) ToFirewallVip64OutputWithContext(ctx context.Context) FirewallVip64Output {
	return pulumi.ToOutputWithContext(ctx, i).(FirewallVip64Output)
}

func (i *FirewallVip64) ToOutput(ctx context.Context) pulumix.Output[*FirewallVip64] {
	return pulumix.Output[*FirewallVip64]{
		OutputState: i.ToFirewallVip64OutputWithContext(ctx).OutputState,
	}
}

// FirewallVip64ArrayInput is an input type that accepts FirewallVip64Array and FirewallVip64ArrayOutput values.
// You can construct a concrete instance of `FirewallVip64ArrayInput` via:
//
//	FirewallVip64Array{ FirewallVip64Args{...} }
type FirewallVip64ArrayInput interface {
	pulumi.Input

	ToFirewallVip64ArrayOutput() FirewallVip64ArrayOutput
	ToFirewallVip64ArrayOutputWithContext(context.Context) FirewallVip64ArrayOutput
}

type FirewallVip64Array []FirewallVip64Input

func (FirewallVip64Array) ElementType() reflect.Type {
	return reflect.TypeOf((*[]*FirewallVip64)(nil)).Elem()
}

func (i FirewallVip64Array) ToFirewallVip64ArrayOutput() FirewallVip64ArrayOutput {
	return i.ToFirewallVip64ArrayOutputWithContext(context.Background())
}

func (i FirewallVip64Array) ToFirewallVip64ArrayOutputWithContext(ctx context.Context) FirewallVip64ArrayOutput {
	return pulumi.ToOutputWithContext(ctx, i).(FirewallVip64ArrayOutput)
}

func (i FirewallVip64Array) ToOutput(ctx context.Context) pulumix.Output[[]*FirewallVip64] {
	return pulumix.Output[[]*FirewallVip64]{
		OutputState: i.ToFirewallVip64ArrayOutputWithContext(ctx).OutputState,
	}
}

// FirewallVip64MapInput is an input type that accepts FirewallVip64Map and FirewallVip64MapOutput values.
// You can construct a concrete instance of `FirewallVip64MapInput` via:
//
//	FirewallVip64Map{ "key": FirewallVip64Args{...} }
type FirewallVip64MapInput interface {
	pulumi.Input

	ToFirewallVip64MapOutput() FirewallVip64MapOutput
	ToFirewallVip64MapOutputWithContext(context.Context) FirewallVip64MapOutput
}

type FirewallVip64Map map[string]FirewallVip64Input

func (FirewallVip64Map) ElementType() reflect.Type {
	return reflect.TypeOf((*map[string]*FirewallVip64)(nil)).Elem()
}

func (i FirewallVip64Map) ToFirewallVip64MapOutput() FirewallVip64MapOutput {
	return i.ToFirewallVip64MapOutputWithContext(context.Background())
}

func (i FirewallVip64Map) ToFirewallVip64MapOutputWithContext(ctx context.Context) FirewallVip64MapOutput {
	return pulumi.ToOutputWithContext(ctx, i).(FirewallVip64MapOutput)
}

func (i FirewallVip64Map) ToOutput(ctx context.Context) pulumix.Output[map[string]*FirewallVip64] {
	return pulumix.Output[map[string]*FirewallVip64]{
		OutputState: i.ToFirewallVip64MapOutputWithContext(ctx).OutputState,
	}
}

type FirewallVip64Output struct{ *pulumi.OutputState }

func (FirewallVip64Output) ElementType() reflect.Type {
	return reflect.TypeOf((**FirewallVip64)(nil)).Elem()
}

func (o FirewallVip64Output) ToFirewallVip64Output() FirewallVip64Output {
	return o
}

func (o FirewallVip64Output) ToFirewallVip64OutputWithContext(ctx context.Context) FirewallVip64Output {
	return o
}

func (o FirewallVip64Output) ToOutput(ctx context.Context) pulumix.Output[*FirewallVip64] {
	return pulumix.Output[*FirewallVip64]{
		OutputState: o.OutputState,
	}
}

func (o FirewallVip64Output) ArpReply() pulumi.StringOutput {
	return o.ApplyT(func(v *FirewallVip64) pulumi.StringOutput { return v.ArpReply }).(pulumi.StringOutput)
}

func (o FirewallVip64Output) Color() pulumi.IntOutput {
	return o.ApplyT(func(v *FirewallVip64) pulumi.IntOutput { return v.Color }).(pulumi.IntOutput)
}

func (o FirewallVip64Output) Comment() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *FirewallVip64) pulumi.StringPtrOutput { return v.Comment }).(pulumi.StringPtrOutput)
}

func (o FirewallVip64Output) DynamicSortSubtable() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *FirewallVip64) pulumi.StringPtrOutput { return v.DynamicSortSubtable }).(pulumi.StringPtrOutput)
}

func (o FirewallVip64Output) Extip() pulumi.StringOutput {
	return o.ApplyT(func(v *FirewallVip64) pulumi.StringOutput { return v.Extip }).(pulumi.StringOutput)
}

func (o FirewallVip64Output) Extport() pulumi.StringOutput {
	return o.ApplyT(func(v *FirewallVip64) pulumi.StringOutput { return v.Extport }).(pulumi.StringOutput)
}

func (o FirewallVip64Output) Fosid() pulumi.IntOutput {
	return o.ApplyT(func(v *FirewallVip64) pulumi.IntOutput { return v.Fosid }).(pulumi.IntOutput)
}

func (o FirewallVip64Output) GetAllTables() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *FirewallVip64) pulumi.StringPtrOutput { return v.GetAllTables }).(pulumi.StringPtrOutput)
}

func (o FirewallVip64Output) LdbMethod() pulumi.StringOutput {
	return o.ApplyT(func(v *FirewallVip64) pulumi.StringOutput { return v.LdbMethod }).(pulumi.StringOutput)
}

func (o FirewallVip64Output) Mappedip() pulumi.StringOutput {
	return o.ApplyT(func(v *FirewallVip64) pulumi.StringOutput { return v.Mappedip }).(pulumi.StringOutput)
}

func (o FirewallVip64Output) Mappedport() pulumi.StringOutput {
	return o.ApplyT(func(v *FirewallVip64) pulumi.StringOutput { return v.Mappedport }).(pulumi.StringOutput)
}

func (o FirewallVip64Output) Monitors() FirewallVip64MonitorArrayOutput {
	return o.ApplyT(func(v *FirewallVip64) FirewallVip64MonitorArrayOutput { return v.Monitors }).(FirewallVip64MonitorArrayOutput)
}

func (o FirewallVip64Output) Name() pulumi.StringOutput {
	return o.ApplyT(func(v *FirewallVip64) pulumi.StringOutput { return v.Name }).(pulumi.StringOutput)
}

func (o FirewallVip64Output) Portforward() pulumi.StringOutput {
	return o.ApplyT(func(v *FirewallVip64) pulumi.StringOutput { return v.Portforward }).(pulumi.StringOutput)
}

func (o FirewallVip64Output) Protocol() pulumi.StringOutput {
	return o.ApplyT(func(v *FirewallVip64) pulumi.StringOutput { return v.Protocol }).(pulumi.StringOutput)
}

func (o FirewallVip64Output) Realservers() FirewallVip64RealserverArrayOutput {
	return o.ApplyT(func(v *FirewallVip64) FirewallVip64RealserverArrayOutput { return v.Realservers }).(FirewallVip64RealserverArrayOutput)
}

func (o FirewallVip64Output) ServerType() pulumi.StringOutput {
	return o.ApplyT(func(v *FirewallVip64) pulumi.StringOutput { return v.ServerType }).(pulumi.StringOutput)
}

func (o FirewallVip64Output) SrcFilters() FirewallVip64SrcFilterArrayOutput {
	return o.ApplyT(func(v *FirewallVip64) FirewallVip64SrcFilterArrayOutput { return v.SrcFilters }).(FirewallVip64SrcFilterArrayOutput)
}

func (o FirewallVip64Output) Type() pulumi.StringOutput {
	return o.ApplyT(func(v *FirewallVip64) pulumi.StringOutput { return v.Type }).(pulumi.StringOutput)
}

func (o FirewallVip64Output) Uuid() pulumi.StringOutput {
	return o.ApplyT(func(v *FirewallVip64) pulumi.StringOutput { return v.Uuid }).(pulumi.StringOutput)
}

func (o FirewallVip64Output) Vdomparam() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *FirewallVip64) pulumi.StringPtrOutput { return v.Vdomparam }).(pulumi.StringPtrOutput)
}

type FirewallVip64ArrayOutput struct{ *pulumi.OutputState }

func (FirewallVip64ArrayOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*[]*FirewallVip64)(nil)).Elem()
}

func (o FirewallVip64ArrayOutput) ToFirewallVip64ArrayOutput() FirewallVip64ArrayOutput {
	return o
}

func (o FirewallVip64ArrayOutput) ToFirewallVip64ArrayOutputWithContext(ctx context.Context) FirewallVip64ArrayOutput {
	return o
}

func (o FirewallVip64ArrayOutput) ToOutput(ctx context.Context) pulumix.Output[[]*FirewallVip64] {
	return pulumix.Output[[]*FirewallVip64]{
		OutputState: o.OutputState,
	}
}

func (o FirewallVip64ArrayOutput) Index(i pulumi.IntInput) FirewallVip64Output {
	return pulumi.All(o, i).ApplyT(func(vs []interface{}) *FirewallVip64 {
		return vs[0].([]*FirewallVip64)[vs[1].(int)]
	}).(FirewallVip64Output)
}

type FirewallVip64MapOutput struct{ *pulumi.OutputState }

func (FirewallVip64MapOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*map[string]*FirewallVip64)(nil)).Elem()
}

func (o FirewallVip64MapOutput) ToFirewallVip64MapOutput() FirewallVip64MapOutput {
	return o
}

func (o FirewallVip64MapOutput) ToFirewallVip64MapOutputWithContext(ctx context.Context) FirewallVip64MapOutput {
	return o
}

func (o FirewallVip64MapOutput) ToOutput(ctx context.Context) pulumix.Output[map[string]*FirewallVip64] {
	return pulumix.Output[map[string]*FirewallVip64]{
		OutputState: o.OutputState,
	}
}

func (o FirewallVip64MapOutput) MapIndex(k pulumi.StringInput) FirewallVip64Output {
	return pulumi.All(o, k).ApplyT(func(vs []interface{}) *FirewallVip64 {
		return vs[0].(map[string]*FirewallVip64)[vs[1].(string)]
	}).(FirewallVip64Output)
}

func init() {
	pulumi.RegisterInputType(reflect.TypeOf((*FirewallVip64Input)(nil)).Elem(), &FirewallVip64{})
	pulumi.RegisterInputType(reflect.TypeOf((*FirewallVip64ArrayInput)(nil)).Elem(), FirewallVip64Array{})
	pulumi.RegisterInputType(reflect.TypeOf((*FirewallVip64MapInput)(nil)).Elem(), FirewallVip64Map{})
	pulumi.RegisterOutputType(FirewallVip64Output{})
	pulumi.RegisterOutputType(FirewallVip64ArrayOutput{})
	pulumi.RegisterOutputType(FirewallVip64MapOutput{})
}
