// Code generated by the Pulumi Terraform Bridge (tfgen) Tool DO NOT EDIT.
// *** WARNING: Do not edit by hand unless you're certain you know what you are doing! ***

package fortios

import (
	"context"
	"reflect"

	"github.com/lubyou/pulumi-fortios/sdk/go/fortios/internal"
	"github.com/pulumi/pulumi/sdk/v3/go/pulumi"
)

type DlpSensor struct {
	pulumi.CustomResourceState

	Comment             pulumi.StringPtrOutput     `pulumi:"comment"`
	DlpLog              pulumi.StringOutput        `pulumi:"dlpLog"`
	DynamicSortSubtable pulumi.StringPtrOutput     `pulumi:"dynamicSortSubtable"`
	Entries             DlpSensorEntryArrayOutput  `pulumi:"entries"`
	Eval                pulumi.StringOutput        `pulumi:"eval"`
	ExtendedLog         pulumi.StringOutput        `pulumi:"extendedLog"`
	FeatureSet          pulumi.StringOutput        `pulumi:"featureSet"`
	Filters             DlpSensorFilterArrayOutput `pulumi:"filters"`
	FlowBased           pulumi.StringOutput        `pulumi:"flowBased"`
	FullArchiveProto    pulumi.StringOutput        `pulumi:"fullArchiveProto"`
	GetAllTables        pulumi.StringPtrOutput     `pulumi:"getAllTables"`
	MatchType           pulumi.StringOutput        `pulumi:"matchType"`
	NacQuarLog          pulumi.StringOutput        `pulumi:"nacQuarLog"`
	Name                pulumi.StringOutput        `pulumi:"name"`
	Options             pulumi.StringOutput        `pulumi:"options"`
	ReplacemsgGroup     pulumi.StringOutput        `pulumi:"replacemsgGroup"`
	SummaryProto        pulumi.StringOutput        `pulumi:"summaryProto"`
	Vdomparam           pulumi.StringPtrOutput     `pulumi:"vdomparam"`
}

// NewDlpSensor registers a new resource with the given unique name, arguments, and options.
func NewDlpSensor(ctx *pulumi.Context,
	name string, args *DlpSensorArgs, opts ...pulumi.ResourceOption) (*DlpSensor, error) {
	if args == nil {
		args = &DlpSensorArgs{}
	}

	opts = internal.PkgResourceDefaultOpts(opts)
	var resource DlpSensor
	err := ctx.RegisterResource("fortios:index/dlpSensor:DlpSensor", name, args, &resource, opts...)
	if err != nil {
		return nil, err
	}
	return &resource, nil
}

// GetDlpSensor gets an existing DlpSensor resource's state with the given name, ID, and optional
// state properties that are used to uniquely qualify the lookup (nil if not required).
func GetDlpSensor(ctx *pulumi.Context,
	name string, id pulumi.IDInput, state *DlpSensorState, opts ...pulumi.ResourceOption) (*DlpSensor, error) {
	var resource DlpSensor
	err := ctx.ReadResource("fortios:index/dlpSensor:DlpSensor", name, id, state, &resource, opts...)
	if err != nil {
		return nil, err
	}
	return &resource, nil
}

// Input properties used for looking up and filtering DlpSensor resources.
type dlpSensorState struct {
	Comment             *string           `pulumi:"comment"`
	DlpLog              *string           `pulumi:"dlpLog"`
	DynamicSortSubtable *string           `pulumi:"dynamicSortSubtable"`
	Entries             []DlpSensorEntry  `pulumi:"entries"`
	Eval                *string           `pulumi:"eval"`
	ExtendedLog         *string           `pulumi:"extendedLog"`
	FeatureSet          *string           `pulumi:"featureSet"`
	Filters             []DlpSensorFilter `pulumi:"filters"`
	FlowBased           *string           `pulumi:"flowBased"`
	FullArchiveProto    *string           `pulumi:"fullArchiveProto"`
	GetAllTables        *string           `pulumi:"getAllTables"`
	MatchType           *string           `pulumi:"matchType"`
	NacQuarLog          *string           `pulumi:"nacQuarLog"`
	Name                *string           `pulumi:"name"`
	Options             *string           `pulumi:"options"`
	ReplacemsgGroup     *string           `pulumi:"replacemsgGroup"`
	SummaryProto        *string           `pulumi:"summaryProto"`
	Vdomparam           *string           `pulumi:"vdomparam"`
}

type DlpSensorState struct {
	Comment             pulumi.StringPtrInput
	DlpLog              pulumi.StringPtrInput
	DynamicSortSubtable pulumi.StringPtrInput
	Entries             DlpSensorEntryArrayInput
	Eval                pulumi.StringPtrInput
	ExtendedLog         pulumi.StringPtrInput
	FeatureSet          pulumi.StringPtrInput
	Filters             DlpSensorFilterArrayInput
	FlowBased           pulumi.StringPtrInput
	FullArchiveProto    pulumi.StringPtrInput
	GetAllTables        pulumi.StringPtrInput
	MatchType           pulumi.StringPtrInput
	NacQuarLog          pulumi.StringPtrInput
	Name                pulumi.StringPtrInput
	Options             pulumi.StringPtrInput
	ReplacemsgGroup     pulumi.StringPtrInput
	SummaryProto        pulumi.StringPtrInput
	Vdomparam           pulumi.StringPtrInput
}

func (DlpSensorState) ElementType() reflect.Type {
	return reflect.TypeOf((*dlpSensorState)(nil)).Elem()
}

type dlpSensorArgs struct {
	Comment             *string           `pulumi:"comment"`
	DlpLog              *string           `pulumi:"dlpLog"`
	DynamicSortSubtable *string           `pulumi:"dynamicSortSubtable"`
	Entries             []DlpSensorEntry  `pulumi:"entries"`
	Eval                *string           `pulumi:"eval"`
	ExtendedLog         *string           `pulumi:"extendedLog"`
	FeatureSet          *string           `pulumi:"featureSet"`
	Filters             []DlpSensorFilter `pulumi:"filters"`
	FlowBased           *string           `pulumi:"flowBased"`
	FullArchiveProto    *string           `pulumi:"fullArchiveProto"`
	GetAllTables        *string           `pulumi:"getAllTables"`
	MatchType           *string           `pulumi:"matchType"`
	NacQuarLog          *string           `pulumi:"nacQuarLog"`
	Name                *string           `pulumi:"name"`
	Options             *string           `pulumi:"options"`
	ReplacemsgGroup     *string           `pulumi:"replacemsgGroup"`
	SummaryProto        *string           `pulumi:"summaryProto"`
	Vdomparam           *string           `pulumi:"vdomparam"`
}

// The set of arguments for constructing a DlpSensor resource.
type DlpSensorArgs struct {
	Comment             pulumi.StringPtrInput
	DlpLog              pulumi.StringPtrInput
	DynamicSortSubtable pulumi.StringPtrInput
	Entries             DlpSensorEntryArrayInput
	Eval                pulumi.StringPtrInput
	ExtendedLog         pulumi.StringPtrInput
	FeatureSet          pulumi.StringPtrInput
	Filters             DlpSensorFilterArrayInput
	FlowBased           pulumi.StringPtrInput
	FullArchiveProto    pulumi.StringPtrInput
	GetAllTables        pulumi.StringPtrInput
	MatchType           pulumi.StringPtrInput
	NacQuarLog          pulumi.StringPtrInput
	Name                pulumi.StringPtrInput
	Options             pulumi.StringPtrInput
	ReplacemsgGroup     pulumi.StringPtrInput
	SummaryProto        pulumi.StringPtrInput
	Vdomparam           pulumi.StringPtrInput
}

func (DlpSensorArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*dlpSensorArgs)(nil)).Elem()
}

type DlpSensorInput interface {
	pulumi.Input

	ToDlpSensorOutput() DlpSensorOutput
	ToDlpSensorOutputWithContext(ctx context.Context) DlpSensorOutput
}

func (*DlpSensor) ElementType() reflect.Type {
	return reflect.TypeOf((**DlpSensor)(nil)).Elem()
}

func (i *DlpSensor) ToDlpSensorOutput() DlpSensorOutput {
	return i.ToDlpSensorOutputWithContext(context.Background())
}

func (i *DlpSensor) ToDlpSensorOutputWithContext(ctx context.Context) DlpSensorOutput {
	return pulumi.ToOutputWithContext(ctx, i).(DlpSensorOutput)
}

// DlpSensorArrayInput is an input type that accepts DlpSensorArray and DlpSensorArrayOutput values.
// You can construct a concrete instance of `DlpSensorArrayInput` via:
//
//	DlpSensorArray{ DlpSensorArgs{...} }
type DlpSensorArrayInput interface {
	pulumi.Input

	ToDlpSensorArrayOutput() DlpSensorArrayOutput
	ToDlpSensorArrayOutputWithContext(context.Context) DlpSensorArrayOutput
}

type DlpSensorArray []DlpSensorInput

func (DlpSensorArray) ElementType() reflect.Type {
	return reflect.TypeOf((*[]*DlpSensor)(nil)).Elem()
}

func (i DlpSensorArray) ToDlpSensorArrayOutput() DlpSensorArrayOutput {
	return i.ToDlpSensorArrayOutputWithContext(context.Background())
}

func (i DlpSensorArray) ToDlpSensorArrayOutputWithContext(ctx context.Context) DlpSensorArrayOutput {
	return pulumi.ToOutputWithContext(ctx, i).(DlpSensorArrayOutput)
}

// DlpSensorMapInput is an input type that accepts DlpSensorMap and DlpSensorMapOutput values.
// You can construct a concrete instance of `DlpSensorMapInput` via:
//
//	DlpSensorMap{ "key": DlpSensorArgs{...} }
type DlpSensorMapInput interface {
	pulumi.Input

	ToDlpSensorMapOutput() DlpSensorMapOutput
	ToDlpSensorMapOutputWithContext(context.Context) DlpSensorMapOutput
}

type DlpSensorMap map[string]DlpSensorInput

func (DlpSensorMap) ElementType() reflect.Type {
	return reflect.TypeOf((*map[string]*DlpSensor)(nil)).Elem()
}

func (i DlpSensorMap) ToDlpSensorMapOutput() DlpSensorMapOutput {
	return i.ToDlpSensorMapOutputWithContext(context.Background())
}

func (i DlpSensorMap) ToDlpSensorMapOutputWithContext(ctx context.Context) DlpSensorMapOutput {
	return pulumi.ToOutputWithContext(ctx, i).(DlpSensorMapOutput)
}

type DlpSensorOutput struct{ *pulumi.OutputState }

func (DlpSensorOutput) ElementType() reflect.Type {
	return reflect.TypeOf((**DlpSensor)(nil)).Elem()
}

func (o DlpSensorOutput) ToDlpSensorOutput() DlpSensorOutput {
	return o
}

func (o DlpSensorOutput) ToDlpSensorOutputWithContext(ctx context.Context) DlpSensorOutput {
	return o
}

func (o DlpSensorOutput) Comment() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *DlpSensor) pulumi.StringPtrOutput { return v.Comment }).(pulumi.StringPtrOutput)
}

func (o DlpSensorOutput) DlpLog() pulumi.StringOutput {
	return o.ApplyT(func(v *DlpSensor) pulumi.StringOutput { return v.DlpLog }).(pulumi.StringOutput)
}

func (o DlpSensorOutput) DynamicSortSubtable() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *DlpSensor) pulumi.StringPtrOutput { return v.DynamicSortSubtable }).(pulumi.StringPtrOutput)
}

func (o DlpSensorOutput) Entries() DlpSensorEntryArrayOutput {
	return o.ApplyT(func(v *DlpSensor) DlpSensorEntryArrayOutput { return v.Entries }).(DlpSensorEntryArrayOutput)
}

func (o DlpSensorOutput) Eval() pulumi.StringOutput {
	return o.ApplyT(func(v *DlpSensor) pulumi.StringOutput { return v.Eval }).(pulumi.StringOutput)
}

func (o DlpSensorOutput) ExtendedLog() pulumi.StringOutput {
	return o.ApplyT(func(v *DlpSensor) pulumi.StringOutput { return v.ExtendedLog }).(pulumi.StringOutput)
}

func (o DlpSensorOutput) FeatureSet() pulumi.StringOutput {
	return o.ApplyT(func(v *DlpSensor) pulumi.StringOutput { return v.FeatureSet }).(pulumi.StringOutput)
}

func (o DlpSensorOutput) Filters() DlpSensorFilterArrayOutput {
	return o.ApplyT(func(v *DlpSensor) DlpSensorFilterArrayOutput { return v.Filters }).(DlpSensorFilterArrayOutput)
}

func (o DlpSensorOutput) FlowBased() pulumi.StringOutput {
	return o.ApplyT(func(v *DlpSensor) pulumi.StringOutput { return v.FlowBased }).(pulumi.StringOutput)
}

func (o DlpSensorOutput) FullArchiveProto() pulumi.StringOutput {
	return o.ApplyT(func(v *DlpSensor) pulumi.StringOutput { return v.FullArchiveProto }).(pulumi.StringOutput)
}

func (o DlpSensorOutput) GetAllTables() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *DlpSensor) pulumi.StringPtrOutput { return v.GetAllTables }).(pulumi.StringPtrOutput)
}

func (o DlpSensorOutput) MatchType() pulumi.StringOutput {
	return o.ApplyT(func(v *DlpSensor) pulumi.StringOutput { return v.MatchType }).(pulumi.StringOutput)
}

func (o DlpSensorOutput) NacQuarLog() pulumi.StringOutput {
	return o.ApplyT(func(v *DlpSensor) pulumi.StringOutput { return v.NacQuarLog }).(pulumi.StringOutput)
}

func (o DlpSensorOutput) Name() pulumi.StringOutput {
	return o.ApplyT(func(v *DlpSensor) pulumi.StringOutput { return v.Name }).(pulumi.StringOutput)
}

func (o DlpSensorOutput) Options() pulumi.StringOutput {
	return o.ApplyT(func(v *DlpSensor) pulumi.StringOutput { return v.Options }).(pulumi.StringOutput)
}

func (o DlpSensorOutput) ReplacemsgGroup() pulumi.StringOutput {
	return o.ApplyT(func(v *DlpSensor) pulumi.StringOutput { return v.ReplacemsgGroup }).(pulumi.StringOutput)
}

func (o DlpSensorOutput) SummaryProto() pulumi.StringOutput {
	return o.ApplyT(func(v *DlpSensor) pulumi.StringOutput { return v.SummaryProto }).(pulumi.StringOutput)
}

func (o DlpSensorOutput) Vdomparam() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *DlpSensor) pulumi.StringPtrOutput { return v.Vdomparam }).(pulumi.StringPtrOutput)
}

type DlpSensorArrayOutput struct{ *pulumi.OutputState }

func (DlpSensorArrayOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*[]*DlpSensor)(nil)).Elem()
}

func (o DlpSensorArrayOutput) ToDlpSensorArrayOutput() DlpSensorArrayOutput {
	return o
}

func (o DlpSensorArrayOutput) ToDlpSensorArrayOutputWithContext(ctx context.Context) DlpSensorArrayOutput {
	return o
}

func (o DlpSensorArrayOutput) Index(i pulumi.IntInput) DlpSensorOutput {
	return pulumi.All(o, i).ApplyT(func(vs []interface{}) *DlpSensor {
		return vs[0].([]*DlpSensor)[vs[1].(int)]
	}).(DlpSensorOutput)
}

type DlpSensorMapOutput struct{ *pulumi.OutputState }

func (DlpSensorMapOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*map[string]*DlpSensor)(nil)).Elem()
}

func (o DlpSensorMapOutput) ToDlpSensorMapOutput() DlpSensorMapOutput {
	return o
}

func (o DlpSensorMapOutput) ToDlpSensorMapOutputWithContext(ctx context.Context) DlpSensorMapOutput {
	return o
}

func (o DlpSensorMapOutput) MapIndex(k pulumi.StringInput) DlpSensorOutput {
	return pulumi.All(o, k).ApplyT(func(vs []interface{}) *DlpSensor {
		return vs[0].(map[string]*DlpSensor)[vs[1].(string)]
	}).(DlpSensorOutput)
}

func init() {
	pulumi.RegisterInputType(reflect.TypeOf((*DlpSensorInput)(nil)).Elem(), &DlpSensor{})
	pulumi.RegisterInputType(reflect.TypeOf((*DlpSensorArrayInput)(nil)).Elem(), DlpSensorArray{})
	pulumi.RegisterInputType(reflect.TypeOf((*DlpSensorMapInput)(nil)).Elem(), DlpSensorMap{})
	pulumi.RegisterOutputType(DlpSensorOutput{})
	pulumi.RegisterOutputType(DlpSensorArrayOutput{})
	pulumi.RegisterOutputType(DlpSensorMapOutput{})
}
