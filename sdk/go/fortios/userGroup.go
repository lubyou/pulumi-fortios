// Code generated by the Pulumi Terraform Bridge (tfgen) Tool DO NOT EDIT.
// *** WARNING: Do not edit by hand unless you're certain you know what you are doing! ***

package fortios

import (
	"context"
	"reflect"

	"github.com/lubyou/pulumi-fortios/sdk/go/fortios/internal"
	"github.com/pulumi/pulumi/sdk/v3/go/pulumi"
	"github.com/pulumi/pulumi/sdk/v3/go/pulumix"
)

type UserGroup struct {
	pulumi.CustomResourceState

	AuthConcurrentOverride pulumi.StringOutput        `pulumi:"authConcurrentOverride"`
	AuthConcurrentValue    pulumi.IntOutput           `pulumi:"authConcurrentValue"`
	Authtimeout            pulumi.IntOutput           `pulumi:"authtimeout"`
	Company                pulumi.StringOutput        `pulumi:"company"`
	DynamicSortSubtable    pulumi.StringPtrOutput     `pulumi:"dynamicSortSubtable"`
	Email                  pulumi.StringOutput        `pulumi:"email"`
	Expire                 pulumi.IntOutput           `pulumi:"expire"`
	ExpireType             pulumi.StringOutput        `pulumi:"expireType"`
	Fosid                  pulumi.IntOutput           `pulumi:"fosid"`
	GetAllTables           pulumi.StringPtrOutput     `pulumi:"getAllTables"`
	GroupType              pulumi.StringOutput        `pulumi:"groupType"`
	Guests                 UserGroupGuestArrayOutput  `pulumi:"guests"`
	HttpDigestRealm        pulumi.StringOutput        `pulumi:"httpDigestRealm"`
	Matches                UserGroupMatchArrayOutput  `pulumi:"matches"`
	MaxAccounts            pulumi.IntOutput           `pulumi:"maxAccounts"`
	Members                UserGroupMemberArrayOutput `pulumi:"members"`
	MobilePhone            pulumi.StringOutput        `pulumi:"mobilePhone"`
	MultipleGuestAdd       pulumi.StringOutput        `pulumi:"multipleGuestAdd"`
	Name                   pulumi.StringOutput        `pulumi:"name"`
	Password               pulumi.StringOutput        `pulumi:"password"`
	SmsCustomServer        pulumi.StringOutput        `pulumi:"smsCustomServer"`
	SmsServer              pulumi.StringOutput        `pulumi:"smsServer"`
	Sponsor                pulumi.StringOutput        `pulumi:"sponsor"`
	SsoAttributeValue      pulumi.StringOutput        `pulumi:"ssoAttributeValue"`
	UserId                 pulumi.StringOutput        `pulumi:"userId"`
	UserName               pulumi.StringOutput        `pulumi:"userName"`
	Vdomparam              pulumi.StringPtrOutput     `pulumi:"vdomparam"`
}

// NewUserGroup registers a new resource with the given unique name, arguments, and options.
func NewUserGroup(ctx *pulumi.Context,
	name string, args *UserGroupArgs, opts ...pulumi.ResourceOption) (*UserGroup, error) {
	if args == nil {
		args = &UserGroupArgs{}
	}

	opts = internal.PkgResourceDefaultOpts(opts)
	var resource UserGroup
	err := ctx.RegisterResource("fortios:index/userGroup:UserGroup", name, args, &resource, opts...)
	if err != nil {
		return nil, err
	}
	return &resource, nil
}

// GetUserGroup gets an existing UserGroup resource's state with the given name, ID, and optional
// state properties that are used to uniquely qualify the lookup (nil if not required).
func GetUserGroup(ctx *pulumi.Context,
	name string, id pulumi.IDInput, state *UserGroupState, opts ...pulumi.ResourceOption) (*UserGroup, error) {
	var resource UserGroup
	err := ctx.ReadResource("fortios:index/userGroup:UserGroup", name, id, state, &resource, opts...)
	if err != nil {
		return nil, err
	}
	return &resource, nil
}

// Input properties used for looking up and filtering UserGroup resources.
type userGroupState struct {
	AuthConcurrentOverride *string           `pulumi:"authConcurrentOverride"`
	AuthConcurrentValue    *int              `pulumi:"authConcurrentValue"`
	Authtimeout            *int              `pulumi:"authtimeout"`
	Company                *string           `pulumi:"company"`
	DynamicSortSubtable    *string           `pulumi:"dynamicSortSubtable"`
	Email                  *string           `pulumi:"email"`
	Expire                 *int              `pulumi:"expire"`
	ExpireType             *string           `pulumi:"expireType"`
	Fosid                  *int              `pulumi:"fosid"`
	GetAllTables           *string           `pulumi:"getAllTables"`
	GroupType              *string           `pulumi:"groupType"`
	Guests                 []UserGroupGuest  `pulumi:"guests"`
	HttpDigestRealm        *string           `pulumi:"httpDigestRealm"`
	Matches                []UserGroupMatch  `pulumi:"matches"`
	MaxAccounts            *int              `pulumi:"maxAccounts"`
	Members                []UserGroupMember `pulumi:"members"`
	MobilePhone            *string           `pulumi:"mobilePhone"`
	MultipleGuestAdd       *string           `pulumi:"multipleGuestAdd"`
	Name                   *string           `pulumi:"name"`
	Password               *string           `pulumi:"password"`
	SmsCustomServer        *string           `pulumi:"smsCustomServer"`
	SmsServer              *string           `pulumi:"smsServer"`
	Sponsor                *string           `pulumi:"sponsor"`
	SsoAttributeValue      *string           `pulumi:"ssoAttributeValue"`
	UserId                 *string           `pulumi:"userId"`
	UserName               *string           `pulumi:"userName"`
	Vdomparam              *string           `pulumi:"vdomparam"`
}

type UserGroupState struct {
	AuthConcurrentOverride pulumi.StringPtrInput
	AuthConcurrentValue    pulumi.IntPtrInput
	Authtimeout            pulumi.IntPtrInput
	Company                pulumi.StringPtrInput
	DynamicSortSubtable    pulumi.StringPtrInput
	Email                  pulumi.StringPtrInput
	Expire                 pulumi.IntPtrInput
	ExpireType             pulumi.StringPtrInput
	Fosid                  pulumi.IntPtrInput
	GetAllTables           pulumi.StringPtrInput
	GroupType              pulumi.StringPtrInput
	Guests                 UserGroupGuestArrayInput
	HttpDigestRealm        pulumi.StringPtrInput
	Matches                UserGroupMatchArrayInput
	MaxAccounts            pulumi.IntPtrInput
	Members                UserGroupMemberArrayInput
	MobilePhone            pulumi.StringPtrInput
	MultipleGuestAdd       pulumi.StringPtrInput
	Name                   pulumi.StringPtrInput
	Password               pulumi.StringPtrInput
	SmsCustomServer        pulumi.StringPtrInput
	SmsServer              pulumi.StringPtrInput
	Sponsor                pulumi.StringPtrInput
	SsoAttributeValue      pulumi.StringPtrInput
	UserId                 pulumi.StringPtrInput
	UserName               pulumi.StringPtrInput
	Vdomparam              pulumi.StringPtrInput
}

func (UserGroupState) ElementType() reflect.Type {
	return reflect.TypeOf((*userGroupState)(nil)).Elem()
}

type userGroupArgs struct {
	AuthConcurrentOverride *string           `pulumi:"authConcurrentOverride"`
	AuthConcurrentValue    *int              `pulumi:"authConcurrentValue"`
	Authtimeout            *int              `pulumi:"authtimeout"`
	Company                *string           `pulumi:"company"`
	DynamicSortSubtable    *string           `pulumi:"dynamicSortSubtable"`
	Email                  *string           `pulumi:"email"`
	Expire                 *int              `pulumi:"expire"`
	ExpireType             *string           `pulumi:"expireType"`
	Fosid                  *int              `pulumi:"fosid"`
	GetAllTables           *string           `pulumi:"getAllTables"`
	GroupType              *string           `pulumi:"groupType"`
	Guests                 []UserGroupGuest  `pulumi:"guests"`
	HttpDigestRealm        *string           `pulumi:"httpDigestRealm"`
	Matches                []UserGroupMatch  `pulumi:"matches"`
	MaxAccounts            *int              `pulumi:"maxAccounts"`
	Members                []UserGroupMember `pulumi:"members"`
	MobilePhone            *string           `pulumi:"mobilePhone"`
	MultipleGuestAdd       *string           `pulumi:"multipleGuestAdd"`
	Name                   *string           `pulumi:"name"`
	Password               *string           `pulumi:"password"`
	SmsCustomServer        *string           `pulumi:"smsCustomServer"`
	SmsServer              *string           `pulumi:"smsServer"`
	Sponsor                *string           `pulumi:"sponsor"`
	SsoAttributeValue      *string           `pulumi:"ssoAttributeValue"`
	UserId                 *string           `pulumi:"userId"`
	UserName               *string           `pulumi:"userName"`
	Vdomparam              *string           `pulumi:"vdomparam"`
}

// The set of arguments for constructing a UserGroup resource.
type UserGroupArgs struct {
	AuthConcurrentOverride pulumi.StringPtrInput
	AuthConcurrentValue    pulumi.IntPtrInput
	Authtimeout            pulumi.IntPtrInput
	Company                pulumi.StringPtrInput
	DynamicSortSubtable    pulumi.StringPtrInput
	Email                  pulumi.StringPtrInput
	Expire                 pulumi.IntPtrInput
	ExpireType             pulumi.StringPtrInput
	Fosid                  pulumi.IntPtrInput
	GetAllTables           pulumi.StringPtrInput
	GroupType              pulumi.StringPtrInput
	Guests                 UserGroupGuestArrayInput
	HttpDigestRealm        pulumi.StringPtrInput
	Matches                UserGroupMatchArrayInput
	MaxAccounts            pulumi.IntPtrInput
	Members                UserGroupMemberArrayInput
	MobilePhone            pulumi.StringPtrInput
	MultipleGuestAdd       pulumi.StringPtrInput
	Name                   pulumi.StringPtrInput
	Password               pulumi.StringPtrInput
	SmsCustomServer        pulumi.StringPtrInput
	SmsServer              pulumi.StringPtrInput
	Sponsor                pulumi.StringPtrInput
	SsoAttributeValue      pulumi.StringPtrInput
	UserId                 pulumi.StringPtrInput
	UserName               pulumi.StringPtrInput
	Vdomparam              pulumi.StringPtrInput
}

func (UserGroupArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*userGroupArgs)(nil)).Elem()
}

type UserGroupInput interface {
	pulumi.Input

	ToUserGroupOutput() UserGroupOutput
	ToUserGroupOutputWithContext(ctx context.Context) UserGroupOutput
}

func (*UserGroup) ElementType() reflect.Type {
	return reflect.TypeOf((**UserGroup)(nil)).Elem()
}

func (i *UserGroup) ToUserGroupOutput() UserGroupOutput {
	return i.ToUserGroupOutputWithContext(context.Background())
}

func (i *UserGroup) ToUserGroupOutputWithContext(ctx context.Context) UserGroupOutput {
	return pulumi.ToOutputWithContext(ctx, i).(UserGroupOutput)
}

func (i *UserGroup) ToOutput(ctx context.Context) pulumix.Output[*UserGroup] {
	return pulumix.Output[*UserGroup]{
		OutputState: i.ToUserGroupOutputWithContext(ctx).OutputState,
	}
}

// UserGroupArrayInput is an input type that accepts UserGroupArray and UserGroupArrayOutput values.
// You can construct a concrete instance of `UserGroupArrayInput` via:
//
//	UserGroupArray{ UserGroupArgs{...} }
type UserGroupArrayInput interface {
	pulumi.Input

	ToUserGroupArrayOutput() UserGroupArrayOutput
	ToUserGroupArrayOutputWithContext(context.Context) UserGroupArrayOutput
}

type UserGroupArray []UserGroupInput

func (UserGroupArray) ElementType() reflect.Type {
	return reflect.TypeOf((*[]*UserGroup)(nil)).Elem()
}

func (i UserGroupArray) ToUserGroupArrayOutput() UserGroupArrayOutput {
	return i.ToUserGroupArrayOutputWithContext(context.Background())
}

func (i UserGroupArray) ToUserGroupArrayOutputWithContext(ctx context.Context) UserGroupArrayOutput {
	return pulumi.ToOutputWithContext(ctx, i).(UserGroupArrayOutput)
}

func (i UserGroupArray) ToOutput(ctx context.Context) pulumix.Output[[]*UserGroup] {
	return pulumix.Output[[]*UserGroup]{
		OutputState: i.ToUserGroupArrayOutputWithContext(ctx).OutputState,
	}
}

// UserGroupMapInput is an input type that accepts UserGroupMap and UserGroupMapOutput values.
// You can construct a concrete instance of `UserGroupMapInput` via:
//
//	UserGroupMap{ "key": UserGroupArgs{...} }
type UserGroupMapInput interface {
	pulumi.Input

	ToUserGroupMapOutput() UserGroupMapOutput
	ToUserGroupMapOutputWithContext(context.Context) UserGroupMapOutput
}

type UserGroupMap map[string]UserGroupInput

func (UserGroupMap) ElementType() reflect.Type {
	return reflect.TypeOf((*map[string]*UserGroup)(nil)).Elem()
}

func (i UserGroupMap) ToUserGroupMapOutput() UserGroupMapOutput {
	return i.ToUserGroupMapOutputWithContext(context.Background())
}

func (i UserGroupMap) ToUserGroupMapOutputWithContext(ctx context.Context) UserGroupMapOutput {
	return pulumi.ToOutputWithContext(ctx, i).(UserGroupMapOutput)
}

func (i UserGroupMap) ToOutput(ctx context.Context) pulumix.Output[map[string]*UserGroup] {
	return pulumix.Output[map[string]*UserGroup]{
		OutputState: i.ToUserGroupMapOutputWithContext(ctx).OutputState,
	}
}

type UserGroupOutput struct{ *pulumi.OutputState }

func (UserGroupOutput) ElementType() reflect.Type {
	return reflect.TypeOf((**UserGroup)(nil)).Elem()
}

func (o UserGroupOutput) ToUserGroupOutput() UserGroupOutput {
	return o
}

func (o UserGroupOutput) ToUserGroupOutputWithContext(ctx context.Context) UserGroupOutput {
	return o
}

func (o UserGroupOutput) ToOutput(ctx context.Context) pulumix.Output[*UserGroup] {
	return pulumix.Output[*UserGroup]{
		OutputState: o.OutputState,
	}
}

func (o UserGroupOutput) AuthConcurrentOverride() pulumi.StringOutput {
	return o.ApplyT(func(v *UserGroup) pulumi.StringOutput { return v.AuthConcurrentOverride }).(pulumi.StringOutput)
}

func (o UserGroupOutput) AuthConcurrentValue() pulumi.IntOutput {
	return o.ApplyT(func(v *UserGroup) pulumi.IntOutput { return v.AuthConcurrentValue }).(pulumi.IntOutput)
}

func (o UserGroupOutput) Authtimeout() pulumi.IntOutput {
	return o.ApplyT(func(v *UserGroup) pulumi.IntOutput { return v.Authtimeout }).(pulumi.IntOutput)
}

func (o UserGroupOutput) Company() pulumi.StringOutput {
	return o.ApplyT(func(v *UserGroup) pulumi.StringOutput { return v.Company }).(pulumi.StringOutput)
}

func (o UserGroupOutput) DynamicSortSubtable() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *UserGroup) pulumi.StringPtrOutput { return v.DynamicSortSubtable }).(pulumi.StringPtrOutput)
}

func (o UserGroupOutput) Email() pulumi.StringOutput {
	return o.ApplyT(func(v *UserGroup) pulumi.StringOutput { return v.Email }).(pulumi.StringOutput)
}

func (o UserGroupOutput) Expire() pulumi.IntOutput {
	return o.ApplyT(func(v *UserGroup) pulumi.IntOutput { return v.Expire }).(pulumi.IntOutput)
}

func (o UserGroupOutput) ExpireType() pulumi.StringOutput {
	return o.ApplyT(func(v *UserGroup) pulumi.StringOutput { return v.ExpireType }).(pulumi.StringOutput)
}

func (o UserGroupOutput) Fosid() pulumi.IntOutput {
	return o.ApplyT(func(v *UserGroup) pulumi.IntOutput { return v.Fosid }).(pulumi.IntOutput)
}

func (o UserGroupOutput) GetAllTables() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *UserGroup) pulumi.StringPtrOutput { return v.GetAllTables }).(pulumi.StringPtrOutput)
}

func (o UserGroupOutput) GroupType() pulumi.StringOutput {
	return o.ApplyT(func(v *UserGroup) pulumi.StringOutput { return v.GroupType }).(pulumi.StringOutput)
}

func (o UserGroupOutput) Guests() UserGroupGuestArrayOutput {
	return o.ApplyT(func(v *UserGroup) UserGroupGuestArrayOutput { return v.Guests }).(UserGroupGuestArrayOutput)
}

func (o UserGroupOutput) HttpDigestRealm() pulumi.StringOutput {
	return o.ApplyT(func(v *UserGroup) pulumi.StringOutput { return v.HttpDigestRealm }).(pulumi.StringOutput)
}

func (o UserGroupOutput) Matches() UserGroupMatchArrayOutput {
	return o.ApplyT(func(v *UserGroup) UserGroupMatchArrayOutput { return v.Matches }).(UserGroupMatchArrayOutput)
}

func (o UserGroupOutput) MaxAccounts() pulumi.IntOutput {
	return o.ApplyT(func(v *UserGroup) pulumi.IntOutput { return v.MaxAccounts }).(pulumi.IntOutput)
}

func (o UserGroupOutput) Members() UserGroupMemberArrayOutput {
	return o.ApplyT(func(v *UserGroup) UserGroupMemberArrayOutput { return v.Members }).(UserGroupMemberArrayOutput)
}

func (o UserGroupOutput) MobilePhone() pulumi.StringOutput {
	return o.ApplyT(func(v *UserGroup) pulumi.StringOutput { return v.MobilePhone }).(pulumi.StringOutput)
}

func (o UserGroupOutput) MultipleGuestAdd() pulumi.StringOutput {
	return o.ApplyT(func(v *UserGroup) pulumi.StringOutput { return v.MultipleGuestAdd }).(pulumi.StringOutput)
}

func (o UserGroupOutput) Name() pulumi.StringOutput {
	return o.ApplyT(func(v *UserGroup) pulumi.StringOutput { return v.Name }).(pulumi.StringOutput)
}

func (o UserGroupOutput) Password() pulumi.StringOutput {
	return o.ApplyT(func(v *UserGroup) pulumi.StringOutput { return v.Password }).(pulumi.StringOutput)
}

func (o UserGroupOutput) SmsCustomServer() pulumi.StringOutput {
	return o.ApplyT(func(v *UserGroup) pulumi.StringOutput { return v.SmsCustomServer }).(pulumi.StringOutput)
}

func (o UserGroupOutput) SmsServer() pulumi.StringOutput {
	return o.ApplyT(func(v *UserGroup) pulumi.StringOutput { return v.SmsServer }).(pulumi.StringOutput)
}

func (o UserGroupOutput) Sponsor() pulumi.StringOutput {
	return o.ApplyT(func(v *UserGroup) pulumi.StringOutput { return v.Sponsor }).(pulumi.StringOutput)
}

func (o UserGroupOutput) SsoAttributeValue() pulumi.StringOutput {
	return o.ApplyT(func(v *UserGroup) pulumi.StringOutput { return v.SsoAttributeValue }).(pulumi.StringOutput)
}

func (o UserGroupOutput) UserId() pulumi.StringOutput {
	return o.ApplyT(func(v *UserGroup) pulumi.StringOutput { return v.UserId }).(pulumi.StringOutput)
}

func (o UserGroupOutput) UserName() pulumi.StringOutput {
	return o.ApplyT(func(v *UserGroup) pulumi.StringOutput { return v.UserName }).(pulumi.StringOutput)
}

func (o UserGroupOutput) Vdomparam() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *UserGroup) pulumi.StringPtrOutput { return v.Vdomparam }).(pulumi.StringPtrOutput)
}

type UserGroupArrayOutput struct{ *pulumi.OutputState }

func (UserGroupArrayOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*[]*UserGroup)(nil)).Elem()
}

func (o UserGroupArrayOutput) ToUserGroupArrayOutput() UserGroupArrayOutput {
	return o
}

func (o UserGroupArrayOutput) ToUserGroupArrayOutputWithContext(ctx context.Context) UserGroupArrayOutput {
	return o
}

func (o UserGroupArrayOutput) ToOutput(ctx context.Context) pulumix.Output[[]*UserGroup] {
	return pulumix.Output[[]*UserGroup]{
		OutputState: o.OutputState,
	}
}

func (o UserGroupArrayOutput) Index(i pulumi.IntInput) UserGroupOutput {
	return pulumi.All(o, i).ApplyT(func(vs []interface{}) *UserGroup {
		return vs[0].([]*UserGroup)[vs[1].(int)]
	}).(UserGroupOutput)
}

type UserGroupMapOutput struct{ *pulumi.OutputState }

func (UserGroupMapOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*map[string]*UserGroup)(nil)).Elem()
}

func (o UserGroupMapOutput) ToUserGroupMapOutput() UserGroupMapOutput {
	return o
}

func (o UserGroupMapOutput) ToUserGroupMapOutputWithContext(ctx context.Context) UserGroupMapOutput {
	return o
}

func (o UserGroupMapOutput) ToOutput(ctx context.Context) pulumix.Output[map[string]*UserGroup] {
	return pulumix.Output[map[string]*UserGroup]{
		OutputState: o.OutputState,
	}
}

func (o UserGroupMapOutput) MapIndex(k pulumi.StringInput) UserGroupOutput {
	return pulumi.All(o, k).ApplyT(func(vs []interface{}) *UserGroup {
		return vs[0].(map[string]*UserGroup)[vs[1].(string)]
	}).(UserGroupOutput)
}

func init() {
	pulumi.RegisterInputType(reflect.TypeOf((*UserGroupInput)(nil)).Elem(), &UserGroup{})
	pulumi.RegisterInputType(reflect.TypeOf((*UserGroupArrayInput)(nil)).Elem(), UserGroupArray{})
	pulumi.RegisterInputType(reflect.TypeOf((*UserGroupMapInput)(nil)).Elem(), UserGroupMap{})
	pulumi.RegisterOutputType(UserGroupOutput{})
	pulumi.RegisterOutputType(UserGroupArrayOutput{})
	pulumi.RegisterOutputType(UserGroupMapOutput{})
}
