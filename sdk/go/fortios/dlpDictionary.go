// Code generated by the Pulumi Terraform Bridge (tfgen) Tool DO NOT EDIT.
// *** WARNING: Do not edit by hand unless you're certain you know what you are doing! ***

package fortios

import (
	"context"
	"reflect"

	"github.com/lubyou/pulumi-fortios/sdk/go/fortios/internal"
	"github.com/pulumi/pulumi/sdk/v3/go/pulumi"
)

type DlpDictionary struct {
	pulumi.CustomResourceState

	Comment             pulumi.StringPtrOutput        `pulumi:"comment"`
	DynamicSortSubtable pulumi.StringPtrOutput        `pulumi:"dynamicSortSubtable"`
	Entries             DlpDictionaryEntryArrayOutput `pulumi:"entries"`
	GetAllTables        pulumi.StringPtrOutput        `pulumi:"getAllTables"`
	MatchAround         pulumi.StringOutput           `pulumi:"matchAround"`
	MatchType           pulumi.StringOutput           `pulumi:"matchType"`
	Name                pulumi.StringOutput           `pulumi:"name"`
	Uuid                pulumi.StringOutput           `pulumi:"uuid"`
	Vdomparam           pulumi.StringPtrOutput        `pulumi:"vdomparam"`
}

// NewDlpDictionary registers a new resource with the given unique name, arguments, and options.
func NewDlpDictionary(ctx *pulumi.Context,
	name string, args *DlpDictionaryArgs, opts ...pulumi.ResourceOption) (*DlpDictionary, error) {
	if args == nil {
		args = &DlpDictionaryArgs{}
	}

	opts = internal.PkgResourceDefaultOpts(opts)
	var resource DlpDictionary
	err := ctx.RegisterResource("fortios:index/dlpDictionary:DlpDictionary", name, args, &resource, opts...)
	if err != nil {
		return nil, err
	}
	return &resource, nil
}

// GetDlpDictionary gets an existing DlpDictionary resource's state with the given name, ID, and optional
// state properties that are used to uniquely qualify the lookup (nil if not required).
func GetDlpDictionary(ctx *pulumi.Context,
	name string, id pulumi.IDInput, state *DlpDictionaryState, opts ...pulumi.ResourceOption) (*DlpDictionary, error) {
	var resource DlpDictionary
	err := ctx.ReadResource("fortios:index/dlpDictionary:DlpDictionary", name, id, state, &resource, opts...)
	if err != nil {
		return nil, err
	}
	return &resource, nil
}

// Input properties used for looking up and filtering DlpDictionary resources.
type dlpDictionaryState struct {
	Comment             *string              `pulumi:"comment"`
	DynamicSortSubtable *string              `pulumi:"dynamicSortSubtable"`
	Entries             []DlpDictionaryEntry `pulumi:"entries"`
	GetAllTables        *string              `pulumi:"getAllTables"`
	MatchAround         *string              `pulumi:"matchAround"`
	MatchType           *string              `pulumi:"matchType"`
	Name                *string              `pulumi:"name"`
	Uuid                *string              `pulumi:"uuid"`
	Vdomparam           *string              `pulumi:"vdomparam"`
}

type DlpDictionaryState struct {
	Comment             pulumi.StringPtrInput
	DynamicSortSubtable pulumi.StringPtrInput
	Entries             DlpDictionaryEntryArrayInput
	GetAllTables        pulumi.StringPtrInput
	MatchAround         pulumi.StringPtrInput
	MatchType           pulumi.StringPtrInput
	Name                pulumi.StringPtrInput
	Uuid                pulumi.StringPtrInput
	Vdomparam           pulumi.StringPtrInput
}

func (DlpDictionaryState) ElementType() reflect.Type {
	return reflect.TypeOf((*dlpDictionaryState)(nil)).Elem()
}

type dlpDictionaryArgs struct {
	Comment             *string              `pulumi:"comment"`
	DynamicSortSubtable *string              `pulumi:"dynamicSortSubtable"`
	Entries             []DlpDictionaryEntry `pulumi:"entries"`
	GetAllTables        *string              `pulumi:"getAllTables"`
	MatchAround         *string              `pulumi:"matchAround"`
	MatchType           *string              `pulumi:"matchType"`
	Name                *string              `pulumi:"name"`
	Uuid                *string              `pulumi:"uuid"`
	Vdomparam           *string              `pulumi:"vdomparam"`
}

// The set of arguments for constructing a DlpDictionary resource.
type DlpDictionaryArgs struct {
	Comment             pulumi.StringPtrInput
	DynamicSortSubtable pulumi.StringPtrInput
	Entries             DlpDictionaryEntryArrayInput
	GetAllTables        pulumi.StringPtrInput
	MatchAround         pulumi.StringPtrInput
	MatchType           pulumi.StringPtrInput
	Name                pulumi.StringPtrInput
	Uuid                pulumi.StringPtrInput
	Vdomparam           pulumi.StringPtrInput
}

func (DlpDictionaryArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*dlpDictionaryArgs)(nil)).Elem()
}

type DlpDictionaryInput interface {
	pulumi.Input

	ToDlpDictionaryOutput() DlpDictionaryOutput
	ToDlpDictionaryOutputWithContext(ctx context.Context) DlpDictionaryOutput
}

func (*DlpDictionary) ElementType() reflect.Type {
	return reflect.TypeOf((**DlpDictionary)(nil)).Elem()
}

func (i *DlpDictionary) ToDlpDictionaryOutput() DlpDictionaryOutput {
	return i.ToDlpDictionaryOutputWithContext(context.Background())
}

func (i *DlpDictionary) ToDlpDictionaryOutputWithContext(ctx context.Context) DlpDictionaryOutput {
	return pulumi.ToOutputWithContext(ctx, i).(DlpDictionaryOutput)
}

// DlpDictionaryArrayInput is an input type that accepts DlpDictionaryArray and DlpDictionaryArrayOutput values.
// You can construct a concrete instance of `DlpDictionaryArrayInput` via:
//
//	DlpDictionaryArray{ DlpDictionaryArgs{...} }
type DlpDictionaryArrayInput interface {
	pulumi.Input

	ToDlpDictionaryArrayOutput() DlpDictionaryArrayOutput
	ToDlpDictionaryArrayOutputWithContext(context.Context) DlpDictionaryArrayOutput
}

type DlpDictionaryArray []DlpDictionaryInput

func (DlpDictionaryArray) ElementType() reflect.Type {
	return reflect.TypeOf((*[]*DlpDictionary)(nil)).Elem()
}

func (i DlpDictionaryArray) ToDlpDictionaryArrayOutput() DlpDictionaryArrayOutput {
	return i.ToDlpDictionaryArrayOutputWithContext(context.Background())
}

func (i DlpDictionaryArray) ToDlpDictionaryArrayOutputWithContext(ctx context.Context) DlpDictionaryArrayOutput {
	return pulumi.ToOutputWithContext(ctx, i).(DlpDictionaryArrayOutput)
}

// DlpDictionaryMapInput is an input type that accepts DlpDictionaryMap and DlpDictionaryMapOutput values.
// You can construct a concrete instance of `DlpDictionaryMapInput` via:
//
//	DlpDictionaryMap{ "key": DlpDictionaryArgs{...} }
type DlpDictionaryMapInput interface {
	pulumi.Input

	ToDlpDictionaryMapOutput() DlpDictionaryMapOutput
	ToDlpDictionaryMapOutputWithContext(context.Context) DlpDictionaryMapOutput
}

type DlpDictionaryMap map[string]DlpDictionaryInput

func (DlpDictionaryMap) ElementType() reflect.Type {
	return reflect.TypeOf((*map[string]*DlpDictionary)(nil)).Elem()
}

func (i DlpDictionaryMap) ToDlpDictionaryMapOutput() DlpDictionaryMapOutput {
	return i.ToDlpDictionaryMapOutputWithContext(context.Background())
}

func (i DlpDictionaryMap) ToDlpDictionaryMapOutputWithContext(ctx context.Context) DlpDictionaryMapOutput {
	return pulumi.ToOutputWithContext(ctx, i).(DlpDictionaryMapOutput)
}

type DlpDictionaryOutput struct{ *pulumi.OutputState }

func (DlpDictionaryOutput) ElementType() reflect.Type {
	return reflect.TypeOf((**DlpDictionary)(nil)).Elem()
}

func (o DlpDictionaryOutput) ToDlpDictionaryOutput() DlpDictionaryOutput {
	return o
}

func (o DlpDictionaryOutput) ToDlpDictionaryOutputWithContext(ctx context.Context) DlpDictionaryOutput {
	return o
}

func (o DlpDictionaryOutput) Comment() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *DlpDictionary) pulumi.StringPtrOutput { return v.Comment }).(pulumi.StringPtrOutput)
}

func (o DlpDictionaryOutput) DynamicSortSubtable() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *DlpDictionary) pulumi.StringPtrOutput { return v.DynamicSortSubtable }).(pulumi.StringPtrOutput)
}

func (o DlpDictionaryOutput) Entries() DlpDictionaryEntryArrayOutput {
	return o.ApplyT(func(v *DlpDictionary) DlpDictionaryEntryArrayOutput { return v.Entries }).(DlpDictionaryEntryArrayOutput)
}

func (o DlpDictionaryOutput) GetAllTables() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *DlpDictionary) pulumi.StringPtrOutput { return v.GetAllTables }).(pulumi.StringPtrOutput)
}

func (o DlpDictionaryOutput) MatchAround() pulumi.StringOutput {
	return o.ApplyT(func(v *DlpDictionary) pulumi.StringOutput { return v.MatchAround }).(pulumi.StringOutput)
}

func (o DlpDictionaryOutput) MatchType() pulumi.StringOutput {
	return o.ApplyT(func(v *DlpDictionary) pulumi.StringOutput { return v.MatchType }).(pulumi.StringOutput)
}

func (o DlpDictionaryOutput) Name() pulumi.StringOutput {
	return o.ApplyT(func(v *DlpDictionary) pulumi.StringOutput { return v.Name }).(pulumi.StringOutput)
}

func (o DlpDictionaryOutput) Uuid() pulumi.StringOutput {
	return o.ApplyT(func(v *DlpDictionary) pulumi.StringOutput { return v.Uuid }).(pulumi.StringOutput)
}

func (o DlpDictionaryOutput) Vdomparam() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *DlpDictionary) pulumi.StringPtrOutput { return v.Vdomparam }).(pulumi.StringPtrOutput)
}

type DlpDictionaryArrayOutput struct{ *pulumi.OutputState }

func (DlpDictionaryArrayOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*[]*DlpDictionary)(nil)).Elem()
}

func (o DlpDictionaryArrayOutput) ToDlpDictionaryArrayOutput() DlpDictionaryArrayOutput {
	return o
}

func (o DlpDictionaryArrayOutput) ToDlpDictionaryArrayOutputWithContext(ctx context.Context) DlpDictionaryArrayOutput {
	return o
}

func (o DlpDictionaryArrayOutput) Index(i pulumi.IntInput) DlpDictionaryOutput {
	return pulumi.All(o, i).ApplyT(func(vs []interface{}) *DlpDictionary {
		return vs[0].([]*DlpDictionary)[vs[1].(int)]
	}).(DlpDictionaryOutput)
}

type DlpDictionaryMapOutput struct{ *pulumi.OutputState }

func (DlpDictionaryMapOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*map[string]*DlpDictionary)(nil)).Elem()
}

func (o DlpDictionaryMapOutput) ToDlpDictionaryMapOutput() DlpDictionaryMapOutput {
	return o
}

func (o DlpDictionaryMapOutput) ToDlpDictionaryMapOutputWithContext(ctx context.Context) DlpDictionaryMapOutput {
	return o
}

func (o DlpDictionaryMapOutput) MapIndex(k pulumi.StringInput) DlpDictionaryOutput {
	return pulumi.All(o, k).ApplyT(func(vs []interface{}) *DlpDictionary {
		return vs[0].(map[string]*DlpDictionary)[vs[1].(string)]
	}).(DlpDictionaryOutput)
}

func init() {
	pulumi.RegisterInputType(reflect.TypeOf((*DlpDictionaryInput)(nil)).Elem(), &DlpDictionary{})
	pulumi.RegisterInputType(reflect.TypeOf((*DlpDictionaryArrayInput)(nil)).Elem(), DlpDictionaryArray{})
	pulumi.RegisterInputType(reflect.TypeOf((*DlpDictionaryMapInput)(nil)).Elem(), DlpDictionaryMap{})
	pulumi.RegisterOutputType(DlpDictionaryOutput{})
	pulumi.RegisterOutputType(DlpDictionaryArrayOutput{})
	pulumi.RegisterOutputType(DlpDictionaryMapOutput{})
}
