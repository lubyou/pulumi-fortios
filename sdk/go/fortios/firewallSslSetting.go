// *** WARNING: this file was generated by the Pulumi Terraform Bridge (tfgen) Tool. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

package fortios

import (
	"context"
	"reflect"

	"github.com/pkg/errors"
	"github.com/pulumi/pulumi/sdk/v3/go/pulumi"
)

// SSL proxy settings.
//
// ## Example Usage
//
// ```go
// package main
//
// import (
// 	"github.com/lubyou/pulumi-fortios/sdk/go/fortios"
// 	"github.com/pulumi/pulumi/sdk/v3/go/pulumi"
// )
//
// func main() {
// 	pulumi.Run(func(ctx *pulumi.Context) error {
// 		_, err := fortios.NewFirewallSslSetting(ctx, "trname", &fortios.FirewallSslSettingArgs{
// 			AbbreviateHandshake:    pulumi.String("enable"),
// 			CertCacheCapacity:      pulumi.Int(200),
// 			CertCacheTimeout:       pulumi.Int(10),
// 			KxpQueueThreshold:      pulumi.Int(16),
// 			NoMatchingCipherAction: pulumi.String("bypass"),
// 			ProxyConnectTimeout:    pulumi.Int(30),
// 			SessionCacheCapacity:   pulumi.Int(500),
// 			SessionCacheTimeout:    pulumi.Int(20),
// 			SslDhBits:              pulumi.String("2048"),
// 			SslQueueThreshold:      pulumi.Int(32),
// 			SslSendEmptyFrags:      pulumi.String("enable"),
// 		})
// 		if err != nil {
// 			return err
// 		}
// 		return nil
// 	})
// }
// ```
//
// ## Import
//
// FirewallSsl Setting can be imported using any of these accepted formats$ export "FORTIOS_IMPORT_TABLE"="true"
//
// ```sh
//  $ pulumi import fortios:index/firewallSslSetting:FirewallSslSetting labelname FirewallSslSetting
// ```
//
//  $ unset "FORTIOS_IMPORT_TABLE"
type FirewallSslSetting struct {
	pulumi.CustomResourceState

	// Enable/disable use of SSL abbreviated handshake. Valid values: `enable`, `disable`.
	AbbreviateHandshake pulumi.StringOutput `pulumi:"abbreviateHandshake"`
	// Maximum capacity of the host certificate cache (0 - 500, default = 200).
	CertCacheCapacity pulumi.IntOutput `pulumi:"certCacheCapacity"`
	// Time limit to keep certificate cache (1 - 120 min, default = 10).
	CertCacheTimeout pulumi.IntOutput `pulumi:"certCacheTimeout"`
	// Maximum length of the CP KXP queue. When the queue becomes full, the proxy switches cipher functions to the main CPU (0 - 512, default = 16).
	KxpQueueThreshold pulumi.IntOutput `pulumi:"kxpQueueThreshold"`
	// Bypass or drop the connection when no matching cipher is found. Valid values: `bypass`, `drop`.
	NoMatchingCipherAction pulumi.StringOutput `pulumi:"noMatchingCipherAction"`
	// Time limit to make an internal connection to the appropriate proxy process (1 - 60 sec, default = 30).
	ProxyConnectTimeout pulumi.IntOutput `pulumi:"proxyConnectTimeout"`
	// Capacity of the SSL session cache (--Obsolete--) (1 - 1000, default = 500).
	SessionCacheCapacity pulumi.IntOutput `pulumi:"sessionCacheCapacity"`
	// Time limit to keep SSL session state (1 - 60 min, default = 20).
	SessionCacheTimeout pulumi.IntOutput `pulumi:"sessionCacheTimeout"`
	// Bit-size of Diffie-Hellman (DH) prime used in DHE-RSA negotiation (default = 2048). Valid values: `768`, `1024`, `1536`, `2048`.
	SslDhBits pulumi.StringOutput `pulumi:"sslDhBits"`
	// Maximum length of the CP SSL queue. When the queue becomes full, the proxy switches cipher functions to the main CPU (0 - 512, default = 32).
	SslQueueThreshold pulumi.IntOutput `pulumi:"sslQueueThreshold"`
	// Enable/disable sending empty fragments to avoid attack on CBC IV (for SSL 3.0 and TLS 1.0 only). Valid values: `enable`, `disable`.
	SslSendEmptyFrags pulumi.StringOutput `pulumi:"sslSendEmptyFrags"`
	// Specifies the vdom to which the resource will be applied when the FortiGate unit is running in VDOM mode. Only one vdom can be specified. If you want to inherit the vdom configuration of the provider, please do not set this parameter.
	Vdomparam pulumi.StringPtrOutput `pulumi:"vdomparam"`
}

// NewFirewallSslSetting registers a new resource with the given unique name, arguments, and options.
func NewFirewallSslSetting(ctx *pulumi.Context,
	name string, args *FirewallSslSettingArgs, opts ...pulumi.ResourceOption) (*FirewallSslSetting, error) {
	if args == nil {
		return nil, errors.New("missing one or more required arguments")
	}

	if args.CertCacheCapacity == nil {
		return nil, errors.New("invalid value for required argument 'CertCacheCapacity'")
	}
	if args.CertCacheTimeout == nil {
		return nil, errors.New("invalid value for required argument 'CertCacheTimeout'")
	}
	if args.NoMatchingCipherAction == nil {
		return nil, errors.New("invalid value for required argument 'NoMatchingCipherAction'")
	}
	if args.ProxyConnectTimeout == nil {
		return nil, errors.New("invalid value for required argument 'ProxyConnectTimeout'")
	}
	if args.SessionCacheCapacity == nil {
		return nil, errors.New("invalid value for required argument 'SessionCacheCapacity'")
	}
	if args.SessionCacheTimeout == nil {
		return nil, errors.New("invalid value for required argument 'SessionCacheTimeout'")
	}
	if args.SslDhBits == nil {
		return nil, errors.New("invalid value for required argument 'SslDhBits'")
	}
	if args.SslSendEmptyFrags == nil {
		return nil, errors.New("invalid value for required argument 'SslSendEmptyFrags'")
	}
	opts = pkgResourceDefaultOpts(opts)
	var resource FirewallSslSetting
	err := ctx.RegisterResource("fortios:index/firewallSslSetting:FirewallSslSetting", name, args, &resource, opts...)
	if err != nil {
		return nil, err
	}
	return &resource, nil
}

// GetFirewallSslSetting gets an existing FirewallSslSetting resource's state with the given name, ID, and optional
// state properties that are used to uniquely qualify the lookup (nil if not required).
func GetFirewallSslSetting(ctx *pulumi.Context,
	name string, id pulumi.IDInput, state *FirewallSslSettingState, opts ...pulumi.ResourceOption) (*FirewallSslSetting, error) {
	var resource FirewallSslSetting
	err := ctx.ReadResource("fortios:index/firewallSslSetting:FirewallSslSetting", name, id, state, &resource, opts...)
	if err != nil {
		return nil, err
	}
	return &resource, nil
}

// Input properties used for looking up and filtering FirewallSslSetting resources.
type firewallSslSettingState struct {
	// Enable/disable use of SSL abbreviated handshake. Valid values: `enable`, `disable`.
	AbbreviateHandshake *string `pulumi:"abbreviateHandshake"`
	// Maximum capacity of the host certificate cache (0 - 500, default = 200).
	CertCacheCapacity *int `pulumi:"certCacheCapacity"`
	// Time limit to keep certificate cache (1 - 120 min, default = 10).
	CertCacheTimeout *int `pulumi:"certCacheTimeout"`
	// Maximum length of the CP KXP queue. When the queue becomes full, the proxy switches cipher functions to the main CPU (0 - 512, default = 16).
	KxpQueueThreshold *int `pulumi:"kxpQueueThreshold"`
	// Bypass or drop the connection when no matching cipher is found. Valid values: `bypass`, `drop`.
	NoMatchingCipherAction *string `pulumi:"noMatchingCipherAction"`
	// Time limit to make an internal connection to the appropriate proxy process (1 - 60 sec, default = 30).
	ProxyConnectTimeout *int `pulumi:"proxyConnectTimeout"`
	// Capacity of the SSL session cache (--Obsolete--) (1 - 1000, default = 500).
	SessionCacheCapacity *int `pulumi:"sessionCacheCapacity"`
	// Time limit to keep SSL session state (1 - 60 min, default = 20).
	SessionCacheTimeout *int `pulumi:"sessionCacheTimeout"`
	// Bit-size of Diffie-Hellman (DH) prime used in DHE-RSA negotiation (default = 2048). Valid values: `768`, `1024`, `1536`, `2048`.
	SslDhBits *string `pulumi:"sslDhBits"`
	// Maximum length of the CP SSL queue. When the queue becomes full, the proxy switches cipher functions to the main CPU (0 - 512, default = 32).
	SslQueueThreshold *int `pulumi:"sslQueueThreshold"`
	// Enable/disable sending empty fragments to avoid attack on CBC IV (for SSL 3.0 and TLS 1.0 only). Valid values: `enable`, `disable`.
	SslSendEmptyFrags *string `pulumi:"sslSendEmptyFrags"`
	// Specifies the vdom to which the resource will be applied when the FortiGate unit is running in VDOM mode. Only one vdom can be specified. If you want to inherit the vdom configuration of the provider, please do not set this parameter.
	Vdomparam *string `pulumi:"vdomparam"`
}

type FirewallSslSettingState struct {
	// Enable/disable use of SSL abbreviated handshake. Valid values: `enable`, `disable`.
	AbbreviateHandshake pulumi.StringPtrInput
	// Maximum capacity of the host certificate cache (0 - 500, default = 200).
	CertCacheCapacity pulumi.IntPtrInput
	// Time limit to keep certificate cache (1 - 120 min, default = 10).
	CertCacheTimeout pulumi.IntPtrInput
	// Maximum length of the CP KXP queue. When the queue becomes full, the proxy switches cipher functions to the main CPU (0 - 512, default = 16).
	KxpQueueThreshold pulumi.IntPtrInput
	// Bypass or drop the connection when no matching cipher is found. Valid values: `bypass`, `drop`.
	NoMatchingCipherAction pulumi.StringPtrInput
	// Time limit to make an internal connection to the appropriate proxy process (1 - 60 sec, default = 30).
	ProxyConnectTimeout pulumi.IntPtrInput
	// Capacity of the SSL session cache (--Obsolete--) (1 - 1000, default = 500).
	SessionCacheCapacity pulumi.IntPtrInput
	// Time limit to keep SSL session state (1 - 60 min, default = 20).
	SessionCacheTimeout pulumi.IntPtrInput
	// Bit-size of Diffie-Hellman (DH) prime used in DHE-RSA negotiation (default = 2048). Valid values: `768`, `1024`, `1536`, `2048`.
	SslDhBits pulumi.StringPtrInput
	// Maximum length of the CP SSL queue. When the queue becomes full, the proxy switches cipher functions to the main CPU (0 - 512, default = 32).
	SslQueueThreshold pulumi.IntPtrInput
	// Enable/disable sending empty fragments to avoid attack on CBC IV (for SSL 3.0 and TLS 1.0 only). Valid values: `enable`, `disable`.
	SslSendEmptyFrags pulumi.StringPtrInput
	// Specifies the vdom to which the resource will be applied when the FortiGate unit is running in VDOM mode. Only one vdom can be specified. If you want to inherit the vdom configuration of the provider, please do not set this parameter.
	Vdomparam pulumi.StringPtrInput
}

func (FirewallSslSettingState) ElementType() reflect.Type {
	return reflect.TypeOf((*firewallSslSettingState)(nil)).Elem()
}

type firewallSslSettingArgs struct {
	// Enable/disable use of SSL abbreviated handshake. Valid values: `enable`, `disable`.
	AbbreviateHandshake *string `pulumi:"abbreviateHandshake"`
	// Maximum capacity of the host certificate cache (0 - 500, default = 200).
	CertCacheCapacity int `pulumi:"certCacheCapacity"`
	// Time limit to keep certificate cache (1 - 120 min, default = 10).
	CertCacheTimeout int `pulumi:"certCacheTimeout"`
	// Maximum length of the CP KXP queue. When the queue becomes full, the proxy switches cipher functions to the main CPU (0 - 512, default = 16).
	KxpQueueThreshold *int `pulumi:"kxpQueueThreshold"`
	// Bypass or drop the connection when no matching cipher is found. Valid values: `bypass`, `drop`.
	NoMatchingCipherAction string `pulumi:"noMatchingCipherAction"`
	// Time limit to make an internal connection to the appropriate proxy process (1 - 60 sec, default = 30).
	ProxyConnectTimeout int `pulumi:"proxyConnectTimeout"`
	// Capacity of the SSL session cache (--Obsolete--) (1 - 1000, default = 500).
	SessionCacheCapacity int `pulumi:"sessionCacheCapacity"`
	// Time limit to keep SSL session state (1 - 60 min, default = 20).
	SessionCacheTimeout int `pulumi:"sessionCacheTimeout"`
	// Bit-size of Diffie-Hellman (DH) prime used in DHE-RSA negotiation (default = 2048). Valid values: `768`, `1024`, `1536`, `2048`.
	SslDhBits string `pulumi:"sslDhBits"`
	// Maximum length of the CP SSL queue. When the queue becomes full, the proxy switches cipher functions to the main CPU (0 - 512, default = 32).
	SslQueueThreshold *int `pulumi:"sslQueueThreshold"`
	// Enable/disable sending empty fragments to avoid attack on CBC IV (for SSL 3.0 and TLS 1.0 only). Valid values: `enable`, `disable`.
	SslSendEmptyFrags string `pulumi:"sslSendEmptyFrags"`
	// Specifies the vdom to which the resource will be applied when the FortiGate unit is running in VDOM mode. Only one vdom can be specified. If you want to inherit the vdom configuration of the provider, please do not set this parameter.
	Vdomparam *string `pulumi:"vdomparam"`
}

// The set of arguments for constructing a FirewallSslSetting resource.
type FirewallSslSettingArgs struct {
	// Enable/disable use of SSL abbreviated handshake. Valid values: `enable`, `disable`.
	AbbreviateHandshake pulumi.StringPtrInput
	// Maximum capacity of the host certificate cache (0 - 500, default = 200).
	CertCacheCapacity pulumi.IntInput
	// Time limit to keep certificate cache (1 - 120 min, default = 10).
	CertCacheTimeout pulumi.IntInput
	// Maximum length of the CP KXP queue. When the queue becomes full, the proxy switches cipher functions to the main CPU (0 - 512, default = 16).
	KxpQueueThreshold pulumi.IntPtrInput
	// Bypass or drop the connection when no matching cipher is found. Valid values: `bypass`, `drop`.
	NoMatchingCipherAction pulumi.StringInput
	// Time limit to make an internal connection to the appropriate proxy process (1 - 60 sec, default = 30).
	ProxyConnectTimeout pulumi.IntInput
	// Capacity of the SSL session cache (--Obsolete--) (1 - 1000, default = 500).
	SessionCacheCapacity pulumi.IntInput
	// Time limit to keep SSL session state (1 - 60 min, default = 20).
	SessionCacheTimeout pulumi.IntInput
	// Bit-size of Diffie-Hellman (DH) prime used in DHE-RSA negotiation (default = 2048). Valid values: `768`, `1024`, `1536`, `2048`.
	SslDhBits pulumi.StringInput
	// Maximum length of the CP SSL queue. When the queue becomes full, the proxy switches cipher functions to the main CPU (0 - 512, default = 32).
	SslQueueThreshold pulumi.IntPtrInput
	// Enable/disable sending empty fragments to avoid attack on CBC IV (for SSL 3.0 and TLS 1.0 only). Valid values: `enable`, `disable`.
	SslSendEmptyFrags pulumi.StringInput
	// Specifies the vdom to which the resource will be applied when the FortiGate unit is running in VDOM mode. Only one vdom can be specified. If you want to inherit the vdom configuration of the provider, please do not set this parameter.
	Vdomparam pulumi.StringPtrInput
}

func (FirewallSslSettingArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*firewallSslSettingArgs)(nil)).Elem()
}

type FirewallSslSettingInput interface {
	pulumi.Input

	ToFirewallSslSettingOutput() FirewallSslSettingOutput
	ToFirewallSslSettingOutputWithContext(ctx context.Context) FirewallSslSettingOutput
}

func (*FirewallSslSetting) ElementType() reflect.Type {
	return reflect.TypeOf((**FirewallSslSetting)(nil)).Elem()
}

func (i *FirewallSslSetting) ToFirewallSslSettingOutput() FirewallSslSettingOutput {
	return i.ToFirewallSslSettingOutputWithContext(context.Background())
}

func (i *FirewallSslSetting) ToFirewallSslSettingOutputWithContext(ctx context.Context) FirewallSslSettingOutput {
	return pulumi.ToOutputWithContext(ctx, i).(FirewallSslSettingOutput)
}

// FirewallSslSettingArrayInput is an input type that accepts FirewallSslSettingArray and FirewallSslSettingArrayOutput values.
// You can construct a concrete instance of `FirewallSslSettingArrayInput` via:
//
//          FirewallSslSettingArray{ FirewallSslSettingArgs{...} }
type FirewallSslSettingArrayInput interface {
	pulumi.Input

	ToFirewallSslSettingArrayOutput() FirewallSslSettingArrayOutput
	ToFirewallSslSettingArrayOutputWithContext(context.Context) FirewallSslSettingArrayOutput
}

type FirewallSslSettingArray []FirewallSslSettingInput

func (FirewallSslSettingArray) ElementType() reflect.Type {
	return reflect.TypeOf((*[]*FirewallSslSetting)(nil)).Elem()
}

func (i FirewallSslSettingArray) ToFirewallSslSettingArrayOutput() FirewallSslSettingArrayOutput {
	return i.ToFirewallSslSettingArrayOutputWithContext(context.Background())
}

func (i FirewallSslSettingArray) ToFirewallSslSettingArrayOutputWithContext(ctx context.Context) FirewallSslSettingArrayOutput {
	return pulumi.ToOutputWithContext(ctx, i).(FirewallSslSettingArrayOutput)
}

// FirewallSslSettingMapInput is an input type that accepts FirewallSslSettingMap and FirewallSslSettingMapOutput values.
// You can construct a concrete instance of `FirewallSslSettingMapInput` via:
//
//          FirewallSslSettingMap{ "key": FirewallSslSettingArgs{...} }
type FirewallSslSettingMapInput interface {
	pulumi.Input

	ToFirewallSslSettingMapOutput() FirewallSslSettingMapOutput
	ToFirewallSslSettingMapOutputWithContext(context.Context) FirewallSslSettingMapOutput
}

type FirewallSslSettingMap map[string]FirewallSslSettingInput

func (FirewallSslSettingMap) ElementType() reflect.Type {
	return reflect.TypeOf((*map[string]*FirewallSslSetting)(nil)).Elem()
}

func (i FirewallSslSettingMap) ToFirewallSslSettingMapOutput() FirewallSslSettingMapOutput {
	return i.ToFirewallSslSettingMapOutputWithContext(context.Background())
}

func (i FirewallSslSettingMap) ToFirewallSslSettingMapOutputWithContext(ctx context.Context) FirewallSslSettingMapOutput {
	return pulumi.ToOutputWithContext(ctx, i).(FirewallSslSettingMapOutput)
}

type FirewallSslSettingOutput struct{ *pulumi.OutputState }

func (FirewallSslSettingOutput) ElementType() reflect.Type {
	return reflect.TypeOf((**FirewallSslSetting)(nil)).Elem()
}

func (o FirewallSslSettingOutput) ToFirewallSslSettingOutput() FirewallSslSettingOutput {
	return o
}

func (o FirewallSslSettingOutput) ToFirewallSslSettingOutputWithContext(ctx context.Context) FirewallSslSettingOutput {
	return o
}

type FirewallSslSettingArrayOutput struct{ *pulumi.OutputState }

func (FirewallSslSettingArrayOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*[]*FirewallSslSetting)(nil)).Elem()
}

func (o FirewallSslSettingArrayOutput) ToFirewallSslSettingArrayOutput() FirewallSslSettingArrayOutput {
	return o
}

func (o FirewallSslSettingArrayOutput) ToFirewallSslSettingArrayOutputWithContext(ctx context.Context) FirewallSslSettingArrayOutput {
	return o
}

func (o FirewallSslSettingArrayOutput) Index(i pulumi.IntInput) FirewallSslSettingOutput {
	return pulumi.All(o, i).ApplyT(func(vs []interface{}) *FirewallSslSetting {
		return vs[0].([]*FirewallSslSetting)[vs[1].(int)]
	}).(FirewallSslSettingOutput)
}

type FirewallSslSettingMapOutput struct{ *pulumi.OutputState }

func (FirewallSslSettingMapOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*map[string]*FirewallSslSetting)(nil)).Elem()
}

func (o FirewallSslSettingMapOutput) ToFirewallSslSettingMapOutput() FirewallSslSettingMapOutput {
	return o
}

func (o FirewallSslSettingMapOutput) ToFirewallSslSettingMapOutputWithContext(ctx context.Context) FirewallSslSettingMapOutput {
	return o
}

func (o FirewallSslSettingMapOutput) MapIndex(k pulumi.StringInput) FirewallSslSettingOutput {
	return pulumi.All(o, k).ApplyT(func(vs []interface{}) *FirewallSslSetting {
		return vs[0].(map[string]*FirewallSslSetting)[vs[1].(string)]
	}).(FirewallSslSettingOutput)
}

func init() {
	pulumi.RegisterInputType(reflect.TypeOf((*FirewallSslSettingInput)(nil)).Elem(), &FirewallSslSetting{})
	pulumi.RegisterInputType(reflect.TypeOf((*FirewallSslSettingArrayInput)(nil)).Elem(), FirewallSslSettingArray{})
	pulumi.RegisterInputType(reflect.TypeOf((*FirewallSslSettingMapInput)(nil)).Elem(), FirewallSslSettingMap{})
	pulumi.RegisterOutputType(FirewallSslSettingOutput{})
	pulumi.RegisterOutputType(FirewallSslSettingArrayOutput{})
	pulumi.RegisterOutputType(FirewallSslSettingMapOutput{})
}
