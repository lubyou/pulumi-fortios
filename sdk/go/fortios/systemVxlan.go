// Code generated by the Pulumi Terraform Bridge (tfgen) Tool DO NOT EDIT.
// *** WARNING: Do not edit by hand unless you're certain you know what you are doing! ***

package fortios

import (
	"context"
	"reflect"

	"errors"
	"github.com/lubyou/pulumi-fortios/sdk/go/fortios/internal"
	"github.com/pulumi/pulumi/sdk/v3/go/pulumi"
	"github.com/pulumi/pulumi/sdk/v3/go/pulumix"
)

type SystemVxlan struct {
	pulumi.CustomResourceState

	Dstport             pulumi.IntOutput                `pulumi:"dstport"`
	DynamicSortSubtable pulumi.StringPtrOutput          `pulumi:"dynamicSortSubtable"`
	EvpnId              pulumi.IntOutput                `pulumi:"evpnId"`
	GetAllTables        pulumi.StringPtrOutput          `pulumi:"getAllTables"`
	Interface           pulumi.StringOutput             `pulumi:"interface"`
	IpVersion           pulumi.StringOutput             `pulumi:"ipVersion"`
	LearnFromTraffic    pulumi.StringOutput             `pulumi:"learnFromTraffic"`
	MulticastTtl        pulumi.IntOutput                `pulumi:"multicastTtl"`
	Name                pulumi.StringOutput             `pulumi:"name"`
	RemoteIp6s          SystemVxlanRemoteIp6ArrayOutput `pulumi:"remoteIp6s"`
	RemoteIps           SystemVxlanRemoteIpArrayOutput  `pulumi:"remoteIps"`
	Vdomparam           pulumi.StringPtrOutput          `pulumi:"vdomparam"`
	Vni                 pulumi.IntOutput                `pulumi:"vni"`
}

// NewSystemVxlan registers a new resource with the given unique name, arguments, and options.
func NewSystemVxlan(ctx *pulumi.Context,
	name string, args *SystemVxlanArgs, opts ...pulumi.ResourceOption) (*SystemVxlan, error) {
	if args == nil {
		return nil, errors.New("missing one or more required arguments")
	}

	if args.Interface == nil {
		return nil, errors.New("invalid value for required argument 'Interface'")
	}
	if args.IpVersion == nil {
		return nil, errors.New("invalid value for required argument 'IpVersion'")
	}
	if args.Vni == nil {
		return nil, errors.New("invalid value for required argument 'Vni'")
	}
	opts = internal.PkgResourceDefaultOpts(opts)
	var resource SystemVxlan
	err := ctx.RegisterResource("fortios:index/systemVxlan:SystemVxlan", name, args, &resource, opts...)
	if err != nil {
		return nil, err
	}
	return &resource, nil
}

// GetSystemVxlan gets an existing SystemVxlan resource's state with the given name, ID, and optional
// state properties that are used to uniquely qualify the lookup (nil if not required).
func GetSystemVxlan(ctx *pulumi.Context,
	name string, id pulumi.IDInput, state *SystemVxlanState, opts ...pulumi.ResourceOption) (*SystemVxlan, error) {
	var resource SystemVxlan
	err := ctx.ReadResource("fortios:index/systemVxlan:SystemVxlan", name, id, state, &resource, opts...)
	if err != nil {
		return nil, err
	}
	return &resource, nil
}

// Input properties used for looking up and filtering SystemVxlan resources.
type systemVxlanState struct {
	Dstport             *int                   `pulumi:"dstport"`
	DynamicSortSubtable *string                `pulumi:"dynamicSortSubtable"`
	EvpnId              *int                   `pulumi:"evpnId"`
	GetAllTables        *string                `pulumi:"getAllTables"`
	Interface           *string                `pulumi:"interface"`
	IpVersion           *string                `pulumi:"ipVersion"`
	LearnFromTraffic    *string                `pulumi:"learnFromTraffic"`
	MulticastTtl        *int                   `pulumi:"multicastTtl"`
	Name                *string                `pulumi:"name"`
	RemoteIp6s          []SystemVxlanRemoteIp6 `pulumi:"remoteIp6s"`
	RemoteIps           []SystemVxlanRemoteIp  `pulumi:"remoteIps"`
	Vdomparam           *string                `pulumi:"vdomparam"`
	Vni                 *int                   `pulumi:"vni"`
}

type SystemVxlanState struct {
	Dstport             pulumi.IntPtrInput
	DynamicSortSubtable pulumi.StringPtrInput
	EvpnId              pulumi.IntPtrInput
	GetAllTables        pulumi.StringPtrInput
	Interface           pulumi.StringPtrInput
	IpVersion           pulumi.StringPtrInput
	LearnFromTraffic    pulumi.StringPtrInput
	MulticastTtl        pulumi.IntPtrInput
	Name                pulumi.StringPtrInput
	RemoteIp6s          SystemVxlanRemoteIp6ArrayInput
	RemoteIps           SystemVxlanRemoteIpArrayInput
	Vdomparam           pulumi.StringPtrInput
	Vni                 pulumi.IntPtrInput
}

func (SystemVxlanState) ElementType() reflect.Type {
	return reflect.TypeOf((*systemVxlanState)(nil)).Elem()
}

type systemVxlanArgs struct {
	Dstport             *int                   `pulumi:"dstport"`
	DynamicSortSubtable *string                `pulumi:"dynamicSortSubtable"`
	EvpnId              *int                   `pulumi:"evpnId"`
	GetAllTables        *string                `pulumi:"getAllTables"`
	Interface           string                 `pulumi:"interface"`
	IpVersion           string                 `pulumi:"ipVersion"`
	LearnFromTraffic    *string                `pulumi:"learnFromTraffic"`
	MulticastTtl        *int                   `pulumi:"multicastTtl"`
	Name                *string                `pulumi:"name"`
	RemoteIp6s          []SystemVxlanRemoteIp6 `pulumi:"remoteIp6s"`
	RemoteIps           []SystemVxlanRemoteIp  `pulumi:"remoteIps"`
	Vdomparam           *string                `pulumi:"vdomparam"`
	Vni                 int                    `pulumi:"vni"`
}

// The set of arguments for constructing a SystemVxlan resource.
type SystemVxlanArgs struct {
	Dstport             pulumi.IntPtrInput
	DynamicSortSubtable pulumi.StringPtrInput
	EvpnId              pulumi.IntPtrInput
	GetAllTables        pulumi.StringPtrInput
	Interface           pulumi.StringInput
	IpVersion           pulumi.StringInput
	LearnFromTraffic    pulumi.StringPtrInput
	MulticastTtl        pulumi.IntPtrInput
	Name                pulumi.StringPtrInput
	RemoteIp6s          SystemVxlanRemoteIp6ArrayInput
	RemoteIps           SystemVxlanRemoteIpArrayInput
	Vdomparam           pulumi.StringPtrInput
	Vni                 pulumi.IntInput
}

func (SystemVxlanArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*systemVxlanArgs)(nil)).Elem()
}

type SystemVxlanInput interface {
	pulumi.Input

	ToSystemVxlanOutput() SystemVxlanOutput
	ToSystemVxlanOutputWithContext(ctx context.Context) SystemVxlanOutput
}

func (*SystemVxlan) ElementType() reflect.Type {
	return reflect.TypeOf((**SystemVxlan)(nil)).Elem()
}

func (i *SystemVxlan) ToSystemVxlanOutput() SystemVxlanOutput {
	return i.ToSystemVxlanOutputWithContext(context.Background())
}

func (i *SystemVxlan) ToSystemVxlanOutputWithContext(ctx context.Context) SystemVxlanOutput {
	return pulumi.ToOutputWithContext(ctx, i).(SystemVxlanOutput)
}

func (i *SystemVxlan) ToOutput(ctx context.Context) pulumix.Output[*SystemVxlan] {
	return pulumix.Output[*SystemVxlan]{
		OutputState: i.ToSystemVxlanOutputWithContext(ctx).OutputState,
	}
}

// SystemVxlanArrayInput is an input type that accepts SystemVxlanArray and SystemVxlanArrayOutput values.
// You can construct a concrete instance of `SystemVxlanArrayInput` via:
//
//	SystemVxlanArray{ SystemVxlanArgs{...} }
type SystemVxlanArrayInput interface {
	pulumi.Input

	ToSystemVxlanArrayOutput() SystemVxlanArrayOutput
	ToSystemVxlanArrayOutputWithContext(context.Context) SystemVxlanArrayOutput
}

type SystemVxlanArray []SystemVxlanInput

func (SystemVxlanArray) ElementType() reflect.Type {
	return reflect.TypeOf((*[]*SystemVxlan)(nil)).Elem()
}

func (i SystemVxlanArray) ToSystemVxlanArrayOutput() SystemVxlanArrayOutput {
	return i.ToSystemVxlanArrayOutputWithContext(context.Background())
}

func (i SystemVxlanArray) ToSystemVxlanArrayOutputWithContext(ctx context.Context) SystemVxlanArrayOutput {
	return pulumi.ToOutputWithContext(ctx, i).(SystemVxlanArrayOutput)
}

func (i SystemVxlanArray) ToOutput(ctx context.Context) pulumix.Output[[]*SystemVxlan] {
	return pulumix.Output[[]*SystemVxlan]{
		OutputState: i.ToSystemVxlanArrayOutputWithContext(ctx).OutputState,
	}
}

// SystemVxlanMapInput is an input type that accepts SystemVxlanMap and SystemVxlanMapOutput values.
// You can construct a concrete instance of `SystemVxlanMapInput` via:
//
//	SystemVxlanMap{ "key": SystemVxlanArgs{...} }
type SystemVxlanMapInput interface {
	pulumi.Input

	ToSystemVxlanMapOutput() SystemVxlanMapOutput
	ToSystemVxlanMapOutputWithContext(context.Context) SystemVxlanMapOutput
}

type SystemVxlanMap map[string]SystemVxlanInput

func (SystemVxlanMap) ElementType() reflect.Type {
	return reflect.TypeOf((*map[string]*SystemVxlan)(nil)).Elem()
}

func (i SystemVxlanMap) ToSystemVxlanMapOutput() SystemVxlanMapOutput {
	return i.ToSystemVxlanMapOutputWithContext(context.Background())
}

func (i SystemVxlanMap) ToSystemVxlanMapOutputWithContext(ctx context.Context) SystemVxlanMapOutput {
	return pulumi.ToOutputWithContext(ctx, i).(SystemVxlanMapOutput)
}

func (i SystemVxlanMap) ToOutput(ctx context.Context) pulumix.Output[map[string]*SystemVxlan] {
	return pulumix.Output[map[string]*SystemVxlan]{
		OutputState: i.ToSystemVxlanMapOutputWithContext(ctx).OutputState,
	}
}

type SystemVxlanOutput struct{ *pulumi.OutputState }

func (SystemVxlanOutput) ElementType() reflect.Type {
	return reflect.TypeOf((**SystemVxlan)(nil)).Elem()
}

func (o SystemVxlanOutput) ToSystemVxlanOutput() SystemVxlanOutput {
	return o
}

func (o SystemVxlanOutput) ToSystemVxlanOutputWithContext(ctx context.Context) SystemVxlanOutput {
	return o
}

func (o SystemVxlanOutput) ToOutput(ctx context.Context) pulumix.Output[*SystemVxlan] {
	return pulumix.Output[*SystemVxlan]{
		OutputState: o.OutputState,
	}
}

func (o SystemVxlanOutput) Dstport() pulumi.IntOutput {
	return o.ApplyT(func(v *SystemVxlan) pulumi.IntOutput { return v.Dstport }).(pulumi.IntOutput)
}

func (o SystemVxlanOutput) DynamicSortSubtable() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *SystemVxlan) pulumi.StringPtrOutput { return v.DynamicSortSubtable }).(pulumi.StringPtrOutput)
}

func (o SystemVxlanOutput) EvpnId() pulumi.IntOutput {
	return o.ApplyT(func(v *SystemVxlan) pulumi.IntOutput { return v.EvpnId }).(pulumi.IntOutput)
}

func (o SystemVxlanOutput) GetAllTables() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *SystemVxlan) pulumi.StringPtrOutput { return v.GetAllTables }).(pulumi.StringPtrOutput)
}

func (o SystemVxlanOutput) Interface() pulumi.StringOutput {
	return o.ApplyT(func(v *SystemVxlan) pulumi.StringOutput { return v.Interface }).(pulumi.StringOutput)
}

func (o SystemVxlanOutput) IpVersion() pulumi.StringOutput {
	return o.ApplyT(func(v *SystemVxlan) pulumi.StringOutput { return v.IpVersion }).(pulumi.StringOutput)
}

func (o SystemVxlanOutput) LearnFromTraffic() pulumi.StringOutput {
	return o.ApplyT(func(v *SystemVxlan) pulumi.StringOutput { return v.LearnFromTraffic }).(pulumi.StringOutput)
}

func (o SystemVxlanOutput) MulticastTtl() pulumi.IntOutput {
	return o.ApplyT(func(v *SystemVxlan) pulumi.IntOutput { return v.MulticastTtl }).(pulumi.IntOutput)
}

func (o SystemVxlanOutput) Name() pulumi.StringOutput {
	return o.ApplyT(func(v *SystemVxlan) pulumi.StringOutput { return v.Name }).(pulumi.StringOutput)
}

func (o SystemVxlanOutput) RemoteIp6s() SystemVxlanRemoteIp6ArrayOutput {
	return o.ApplyT(func(v *SystemVxlan) SystemVxlanRemoteIp6ArrayOutput { return v.RemoteIp6s }).(SystemVxlanRemoteIp6ArrayOutput)
}

func (o SystemVxlanOutput) RemoteIps() SystemVxlanRemoteIpArrayOutput {
	return o.ApplyT(func(v *SystemVxlan) SystemVxlanRemoteIpArrayOutput { return v.RemoteIps }).(SystemVxlanRemoteIpArrayOutput)
}

func (o SystemVxlanOutput) Vdomparam() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *SystemVxlan) pulumi.StringPtrOutput { return v.Vdomparam }).(pulumi.StringPtrOutput)
}

func (o SystemVxlanOutput) Vni() pulumi.IntOutput {
	return o.ApplyT(func(v *SystemVxlan) pulumi.IntOutput { return v.Vni }).(pulumi.IntOutput)
}

type SystemVxlanArrayOutput struct{ *pulumi.OutputState }

func (SystemVxlanArrayOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*[]*SystemVxlan)(nil)).Elem()
}

func (o SystemVxlanArrayOutput) ToSystemVxlanArrayOutput() SystemVxlanArrayOutput {
	return o
}

func (o SystemVxlanArrayOutput) ToSystemVxlanArrayOutputWithContext(ctx context.Context) SystemVxlanArrayOutput {
	return o
}

func (o SystemVxlanArrayOutput) ToOutput(ctx context.Context) pulumix.Output[[]*SystemVxlan] {
	return pulumix.Output[[]*SystemVxlan]{
		OutputState: o.OutputState,
	}
}

func (o SystemVxlanArrayOutput) Index(i pulumi.IntInput) SystemVxlanOutput {
	return pulumi.All(o, i).ApplyT(func(vs []interface{}) *SystemVxlan {
		return vs[0].([]*SystemVxlan)[vs[1].(int)]
	}).(SystemVxlanOutput)
}

type SystemVxlanMapOutput struct{ *pulumi.OutputState }

func (SystemVxlanMapOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*map[string]*SystemVxlan)(nil)).Elem()
}

func (o SystemVxlanMapOutput) ToSystemVxlanMapOutput() SystemVxlanMapOutput {
	return o
}

func (o SystemVxlanMapOutput) ToSystemVxlanMapOutputWithContext(ctx context.Context) SystemVxlanMapOutput {
	return o
}

func (o SystemVxlanMapOutput) ToOutput(ctx context.Context) pulumix.Output[map[string]*SystemVxlan] {
	return pulumix.Output[map[string]*SystemVxlan]{
		OutputState: o.OutputState,
	}
}

func (o SystemVxlanMapOutput) MapIndex(k pulumi.StringInput) SystemVxlanOutput {
	return pulumi.All(o, k).ApplyT(func(vs []interface{}) *SystemVxlan {
		return vs[0].(map[string]*SystemVxlan)[vs[1].(string)]
	}).(SystemVxlanOutput)
}

func init() {
	pulumi.RegisterInputType(reflect.TypeOf((*SystemVxlanInput)(nil)).Elem(), &SystemVxlan{})
	pulumi.RegisterInputType(reflect.TypeOf((*SystemVxlanArrayInput)(nil)).Elem(), SystemVxlanArray{})
	pulumi.RegisterInputType(reflect.TypeOf((*SystemVxlanMapInput)(nil)).Elem(), SystemVxlanMap{})
	pulumi.RegisterOutputType(SystemVxlanOutput{})
	pulumi.RegisterOutputType(SystemVxlanArrayOutput{})
	pulumi.RegisterOutputType(SystemVxlanMapOutput{})
}
