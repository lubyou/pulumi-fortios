// *** WARNING: this file was generated by the Pulumi Terraform Bridge (tfgen) Tool. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

import * as pulumi from "@pulumi/pulumi";
import { input as inputs, output as outputs } from "./types";
import * as utilities from "./utilities";

/**
 * Configure Authentication Schemes.
 *
 * ## Example Usage
 *
 * ```typescript
 * import * as pulumi from "@pulumi/pulumi";
 * import * as fortios from "@pulumi/fortios";
 *
 * const trname3 = new fortios.UserFsso("trname3", {
 *     port: 8000,
 *     port2: 8000,
 *     port3: 8000,
 *     port4: 8000,
 *     port5: 8000,
 *     server: "1.1.1.1",
 *     sourceIp: "0.0.0.0",
 *     sourceIp6: "::",
 * });
 * const trname = new fortios.AuthenticationScheme("trname", {
 *     fssoAgentForNtlm: trname3.name,
 *     fssoGuest: "disable",
 *     method: "ntlm",
 *     negotiateNtlm: "enable",
 *     requireTfa: "disable",
 * });
 * ```
 *
 * ## Import
 *
 * Authentication Scheme can be imported using any of these accepted formats$ export "FORTIOS_IMPORT_TABLE"="true"
 *
 * ```sh
 *  $ pulumi import fortios:index/authenticationScheme:AuthenticationScheme labelname {{name}}
 * ```
 *
 *  $ unset "FORTIOS_IMPORT_TABLE"
 */
export class AuthenticationScheme extends pulumi.CustomResource {
    /**
     * Get an existing AuthenticationScheme resource's state with the given name, ID, and optional extra
     * properties used to qualify the lookup.
     *
     * @param name The _unique_ name of the resulting resource.
     * @param id The _unique_ provider ID of the resource to lookup.
     * @param state Any extra arguments used during the lookup.
     * @param opts Optional settings to control the behavior of the CustomResource.
     */
    public static get(name: string, id: pulumi.Input<pulumi.ID>, state?: AuthenticationSchemeState, opts?: pulumi.CustomResourceOptions): AuthenticationScheme {
        return new AuthenticationScheme(name, <any>state, { ...opts, id: id });
    }

    /** @internal */
    public static readonly __pulumiType = 'fortios:index/authenticationScheme:AuthenticationScheme';

    /**
     * Returns true if the given object is an instance of AuthenticationScheme.  This is designed to work even
     * when multiple copies of the Pulumi SDK have been loaded into the same process.
     */
    public static isInstance(obj: any): obj is AuthenticationScheme {
        if (obj === undefined || obj === null) {
            return false;
        }
        return obj['__pulumiType'] === AuthenticationScheme.__pulumiType;
    }

    /**
     * Domain controller setting.
     */
    public readonly domainController!: pulumi.Output<string>;
    /**
     * true or false, set this parameter to true when using dynamic forEach + toset to configure and sort sub-tables, please do not set this parameter when configuring static sub-tables.
     */
    public readonly dynamicSortSubtable!: pulumi.Output<string | undefined>;
    /**
     * FSSO agent to use for NTLM authentication.
     */
    public readonly fssoAgentForNtlm!: pulumi.Output<string>;
    /**
     * Enable/disable user fsso-guest authentication (default = disable). Valid values: `enable`, `disable`.
     */
    public readonly fssoGuest!: pulumi.Output<string>;
    /**
     * Kerberos keytab setting.
     */
    public readonly kerberosKeytab!: pulumi.Output<string>;
    /**
     * Authentication methods (default = basic). Valid values: `ntlm`, `basic`, `digest`, `form`, `negotiate`, `fsso`, `rsso`, `ssh-publickey`.
     */
    public readonly method!: pulumi.Output<string>;
    /**
     * Authentication server name.
     */
    public readonly name!: pulumi.Output<string>;
    /**
     * Enable/disable negotiate authentication for NTLM (default = disable). Valid values: `enable`, `disable`.
     */
    public readonly negotiateNtlm!: pulumi.Output<string>;
    /**
     * Enable/disable two-factor authentication (default = disable). Valid values: `enable`, `disable`.
     */
    public readonly requireTfa!: pulumi.Output<string>;
    /**
     * SSH CA name.
     */
    public readonly sshCa!: pulumi.Output<string>;
    /**
     * Authentication server to contain user information; "local" (default) or "123" (for LDAP). The structure of `userDatabase` block is documented below.
     */
    public readonly userDatabases!: pulumi.Output<outputs.AuthenticationSchemeUserDatabase[] | undefined>;
    /**
     * Specifies the vdom to which the resource will be applied when the FortiGate unit is running in VDOM mode. Only one vdom can be specified. If you want to inherit the vdom configuration of the provider, please do not set this parameter.
     */
    public readonly vdomparam!: pulumi.Output<string | undefined>;

    /**
     * Create a AuthenticationScheme resource with the given unique name, arguments, and options.
     *
     * @param name The _unique_ name of the resource.
     * @param args The arguments to use to populate this resource's properties.
     * @param opts A bag of options that control this resource's behavior.
     */
    constructor(name: string, args: AuthenticationSchemeArgs, opts?: pulumi.CustomResourceOptions)
    constructor(name: string, argsOrState?: AuthenticationSchemeArgs | AuthenticationSchemeState, opts?: pulumi.CustomResourceOptions) {
        let inputs: pulumi.Inputs = {};
        opts = opts || {};
        if (opts.id) {
            const state = argsOrState as AuthenticationSchemeState | undefined;
            inputs["domainController"] = state ? state.domainController : undefined;
            inputs["dynamicSortSubtable"] = state ? state.dynamicSortSubtable : undefined;
            inputs["fssoAgentForNtlm"] = state ? state.fssoAgentForNtlm : undefined;
            inputs["fssoGuest"] = state ? state.fssoGuest : undefined;
            inputs["kerberosKeytab"] = state ? state.kerberosKeytab : undefined;
            inputs["method"] = state ? state.method : undefined;
            inputs["name"] = state ? state.name : undefined;
            inputs["negotiateNtlm"] = state ? state.negotiateNtlm : undefined;
            inputs["requireTfa"] = state ? state.requireTfa : undefined;
            inputs["sshCa"] = state ? state.sshCa : undefined;
            inputs["userDatabases"] = state ? state.userDatabases : undefined;
            inputs["vdomparam"] = state ? state.vdomparam : undefined;
        } else {
            const args = argsOrState as AuthenticationSchemeArgs | undefined;
            if ((!args || args.method === undefined) && !opts.urn) {
                throw new Error("Missing required property 'method'");
            }
            inputs["domainController"] = args ? args.domainController : undefined;
            inputs["dynamicSortSubtable"] = args ? args.dynamicSortSubtable : undefined;
            inputs["fssoAgentForNtlm"] = args ? args.fssoAgentForNtlm : undefined;
            inputs["fssoGuest"] = args ? args.fssoGuest : undefined;
            inputs["kerberosKeytab"] = args ? args.kerberosKeytab : undefined;
            inputs["method"] = args ? args.method : undefined;
            inputs["name"] = args ? args.name : undefined;
            inputs["negotiateNtlm"] = args ? args.negotiateNtlm : undefined;
            inputs["requireTfa"] = args ? args.requireTfa : undefined;
            inputs["sshCa"] = args ? args.sshCa : undefined;
            inputs["userDatabases"] = args ? args.userDatabases : undefined;
            inputs["vdomparam"] = args ? args.vdomparam : undefined;
        }
        if (!opts.version) {
            opts = pulumi.mergeOptions(opts, { version: utilities.getVersion()});
        }
        super(AuthenticationScheme.__pulumiType, name, inputs, opts);
    }
}

/**
 * Input properties used for looking up and filtering AuthenticationScheme resources.
 */
export interface AuthenticationSchemeState {
    /**
     * Domain controller setting.
     */
    domainController?: pulumi.Input<string>;
    /**
     * true or false, set this parameter to true when using dynamic forEach + toset to configure and sort sub-tables, please do not set this parameter when configuring static sub-tables.
     */
    dynamicSortSubtable?: pulumi.Input<string>;
    /**
     * FSSO agent to use for NTLM authentication.
     */
    fssoAgentForNtlm?: pulumi.Input<string>;
    /**
     * Enable/disable user fsso-guest authentication (default = disable). Valid values: `enable`, `disable`.
     */
    fssoGuest?: pulumi.Input<string>;
    /**
     * Kerberos keytab setting.
     */
    kerberosKeytab?: pulumi.Input<string>;
    /**
     * Authentication methods (default = basic). Valid values: `ntlm`, `basic`, `digest`, `form`, `negotiate`, `fsso`, `rsso`, `ssh-publickey`.
     */
    method?: pulumi.Input<string>;
    /**
     * Authentication server name.
     */
    name?: pulumi.Input<string>;
    /**
     * Enable/disable negotiate authentication for NTLM (default = disable). Valid values: `enable`, `disable`.
     */
    negotiateNtlm?: pulumi.Input<string>;
    /**
     * Enable/disable two-factor authentication (default = disable). Valid values: `enable`, `disable`.
     */
    requireTfa?: pulumi.Input<string>;
    /**
     * SSH CA name.
     */
    sshCa?: pulumi.Input<string>;
    /**
     * Authentication server to contain user information; "local" (default) or "123" (for LDAP). The structure of `userDatabase` block is documented below.
     */
    userDatabases?: pulumi.Input<pulumi.Input<inputs.AuthenticationSchemeUserDatabase>[]>;
    /**
     * Specifies the vdom to which the resource will be applied when the FortiGate unit is running in VDOM mode. Only one vdom can be specified. If you want to inherit the vdom configuration of the provider, please do not set this parameter.
     */
    vdomparam?: pulumi.Input<string>;
}

/**
 * The set of arguments for constructing a AuthenticationScheme resource.
 */
export interface AuthenticationSchemeArgs {
    /**
     * Domain controller setting.
     */
    domainController?: pulumi.Input<string>;
    /**
     * true or false, set this parameter to true when using dynamic forEach + toset to configure and sort sub-tables, please do not set this parameter when configuring static sub-tables.
     */
    dynamicSortSubtable?: pulumi.Input<string>;
    /**
     * FSSO agent to use for NTLM authentication.
     */
    fssoAgentForNtlm?: pulumi.Input<string>;
    /**
     * Enable/disable user fsso-guest authentication (default = disable). Valid values: `enable`, `disable`.
     */
    fssoGuest?: pulumi.Input<string>;
    /**
     * Kerberos keytab setting.
     */
    kerberosKeytab?: pulumi.Input<string>;
    /**
     * Authentication methods (default = basic). Valid values: `ntlm`, `basic`, `digest`, `form`, `negotiate`, `fsso`, `rsso`, `ssh-publickey`.
     */
    method: pulumi.Input<string>;
    /**
     * Authentication server name.
     */
    name?: pulumi.Input<string>;
    /**
     * Enable/disable negotiate authentication for NTLM (default = disable). Valid values: `enable`, `disable`.
     */
    negotiateNtlm?: pulumi.Input<string>;
    /**
     * Enable/disable two-factor authentication (default = disable). Valid values: `enable`, `disable`.
     */
    requireTfa?: pulumi.Input<string>;
    /**
     * SSH CA name.
     */
    sshCa?: pulumi.Input<string>;
    /**
     * Authentication server to contain user information; "local" (default) or "123" (for LDAP). The structure of `userDatabase` block is documented below.
     */
    userDatabases?: pulumi.Input<pulumi.Input<inputs.AuthenticationSchemeUserDatabase>[]>;
    /**
     * Specifies the vdom to which the resource will be applied when the FortiGate unit is running in VDOM mode. Only one vdom can be specified. If you want to inherit the vdom configuration of the provider, please do not set this parameter.
     */
    vdomparam?: pulumi.Input<string>;
}
