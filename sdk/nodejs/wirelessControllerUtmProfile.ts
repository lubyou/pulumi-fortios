// *** WARNING: this file was generated by the Pulumi Terraform Bridge (tfgen) Tool. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

import * as pulumi from "@pulumi/pulumi";
import * as utilities from "./utilities";

export class WirelessControllerUtmProfile extends pulumi.CustomResource {
    /**
     * Get an existing WirelessControllerUtmProfile resource's state with the given name, ID, and optional extra
     * properties used to qualify the lookup.
     *
     * @param name The _unique_ name of the resulting resource.
     * @param id The _unique_ provider ID of the resource to lookup.
     * @param state Any extra arguments used during the lookup.
     * @param opts Optional settings to control the behavior of the CustomResource.
     */
    public static get(name: string, id: pulumi.Input<pulumi.ID>, state?: WirelessControllerUtmProfileState, opts?: pulumi.CustomResourceOptions): WirelessControllerUtmProfile {
        return new WirelessControllerUtmProfile(name, <any>state, { ...opts, id: id });
    }

    /** @internal */
    public static readonly __pulumiType = 'fortios:index/wirelessControllerUtmProfile:WirelessControllerUtmProfile';

    /**
     * Returns true if the given object is an instance of WirelessControllerUtmProfile.  This is designed to work even
     * when multiple copies of the Pulumi SDK have been loaded into the same process.
     */
    public static isInstance(obj: any): obj is WirelessControllerUtmProfile {
        if (obj === undefined || obj === null) {
            return false;
        }
        return obj['__pulumiType'] === WirelessControllerUtmProfile.__pulumiType;
    }

    public readonly antivirusProfile!: pulumi.Output<string>;
    public readonly applicationList!: pulumi.Output<string>;
    public readonly comment!: pulumi.Output<string>;
    public readonly ipsSensor!: pulumi.Output<string>;
    public readonly name!: pulumi.Output<string>;
    public readonly scanBotnetConnections!: pulumi.Output<string>;
    public readonly utmLog!: pulumi.Output<string>;
    public readonly vdomparam!: pulumi.Output<string | undefined>;
    public readonly webfilterProfile!: pulumi.Output<string>;

    /**
     * Create a WirelessControllerUtmProfile resource with the given unique name, arguments, and options.
     *
     * @param name The _unique_ name of the resource.
     * @param args The arguments to use to populate this resource's properties.
     * @param opts A bag of options that control this resource's behavior.
     */
    constructor(name: string, args?: WirelessControllerUtmProfileArgs, opts?: pulumi.CustomResourceOptions)
    constructor(name: string, argsOrState?: WirelessControllerUtmProfileArgs | WirelessControllerUtmProfileState, opts?: pulumi.CustomResourceOptions) {
        let resourceInputs: pulumi.Inputs = {};
        opts = opts || {};
        if (opts.id) {
            const state = argsOrState as WirelessControllerUtmProfileState | undefined;
            resourceInputs["antivirusProfile"] = state ? state.antivirusProfile : undefined;
            resourceInputs["applicationList"] = state ? state.applicationList : undefined;
            resourceInputs["comment"] = state ? state.comment : undefined;
            resourceInputs["ipsSensor"] = state ? state.ipsSensor : undefined;
            resourceInputs["name"] = state ? state.name : undefined;
            resourceInputs["scanBotnetConnections"] = state ? state.scanBotnetConnections : undefined;
            resourceInputs["utmLog"] = state ? state.utmLog : undefined;
            resourceInputs["vdomparam"] = state ? state.vdomparam : undefined;
            resourceInputs["webfilterProfile"] = state ? state.webfilterProfile : undefined;
        } else {
            const args = argsOrState as WirelessControllerUtmProfileArgs | undefined;
            resourceInputs["antivirusProfile"] = args ? args.antivirusProfile : undefined;
            resourceInputs["applicationList"] = args ? args.applicationList : undefined;
            resourceInputs["comment"] = args ? args.comment : undefined;
            resourceInputs["ipsSensor"] = args ? args.ipsSensor : undefined;
            resourceInputs["name"] = args ? args.name : undefined;
            resourceInputs["scanBotnetConnections"] = args ? args.scanBotnetConnections : undefined;
            resourceInputs["utmLog"] = args ? args.utmLog : undefined;
            resourceInputs["vdomparam"] = args ? args.vdomparam : undefined;
            resourceInputs["webfilterProfile"] = args ? args.webfilterProfile : undefined;
        }
        opts = pulumi.mergeOptions(utilities.resourceOptsDefaults(), opts);
        super(WirelessControllerUtmProfile.__pulumiType, name, resourceInputs, opts);
    }
}

/**
 * Input properties used for looking up and filtering WirelessControllerUtmProfile resources.
 */
export interface WirelessControllerUtmProfileState {
    antivirusProfile?: pulumi.Input<string>;
    applicationList?: pulumi.Input<string>;
    comment?: pulumi.Input<string>;
    ipsSensor?: pulumi.Input<string>;
    name?: pulumi.Input<string>;
    scanBotnetConnections?: pulumi.Input<string>;
    utmLog?: pulumi.Input<string>;
    vdomparam?: pulumi.Input<string>;
    webfilterProfile?: pulumi.Input<string>;
}

/**
 * The set of arguments for constructing a WirelessControllerUtmProfile resource.
 */
export interface WirelessControllerUtmProfileArgs {
    antivirusProfile?: pulumi.Input<string>;
    applicationList?: pulumi.Input<string>;
    comment?: pulumi.Input<string>;
    ipsSensor?: pulumi.Input<string>;
    name?: pulumi.Input<string>;
    scanBotnetConnections?: pulumi.Input<string>;
    utmLog?: pulumi.Input<string>;
    vdomparam?: pulumi.Input<string>;
    webfilterProfile?: pulumi.Input<string>;
}
