// *** WARNING: this file was generated by the Pulumi Terraform Bridge (tfgen) Tool. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

import * as pulumi from "@pulumi/pulumi";
import { input as inputs, output as outputs } from "./types";
import * as utilities from "./utilities";

/**
 * Configure user authentication setting.
 *
 * ## Example Usage
 *
 * ```typescript
 * import * as pulumi from "@pulumi/pulumi";
 * import * as fortios from "@pulumi/fortios";
 *
 * const trname = new fortios.UserSetting("trname", {
 *     authBlackoutTime: 0,
 *     authCert: "Fortinet_Factory",
 *     authHttpBasic: "disable",
 *     authInvalidMax: 5,
 *     authLockoutDuration: 0,
 *     authLockoutThreshold: 3,
 *     authOnDemand: "implicitly",
 *     authPortalTimeout: 3,
 *     authSecureHttp: "disable",
 *     authSrcMac: "enable",
 *     authSslAllowRenegotiation: "disable",
 *     authTimeout: 5,
 *     authTimeoutType: "idle-timeout",
 *     authType: "http https ftp telnet",
 *     radiusSesTimeoutAct: "hard-timeout",
 * });
 * ```
 *
 * ## Import
 *
 * User Setting can be imported using any of these accepted formats$ export "FORTIOS_IMPORT_TABLE"="true"
 *
 * ```sh
 *  $ pulumi import fortios:index/userSetting:UserSetting labelname UserSetting
 * ```
 *
 *  $ unset "FORTIOS_IMPORT_TABLE"
 */
export class UserSetting extends pulumi.CustomResource {
    /**
     * Get an existing UserSetting resource's state with the given name, ID, and optional extra
     * properties used to qualify the lookup.
     *
     * @param name The _unique_ name of the resulting resource.
     * @param id The _unique_ provider ID of the resource to lookup.
     * @param state Any extra arguments used during the lookup.
     * @param opts Optional settings to control the behavior of the CustomResource.
     */
    public static get(name: string, id: pulumi.Input<pulumi.ID>, state?: UserSettingState, opts?: pulumi.CustomResourceOptions): UserSetting {
        return new UserSetting(name, <any>state, { ...opts, id: id });
    }

    /** @internal */
    public static readonly __pulumiType = 'fortios:index/userSetting:UserSetting';

    /**
     * Returns true if the given object is an instance of UserSetting.  This is designed to work even
     * when multiple copies of the Pulumi SDK have been loaded into the same process.
     */
    public static isInstance(obj: any): obj is UserSetting {
        if (obj === undefined || obj === null) {
            return false;
        }
        return obj['__pulumiType'] === UserSetting.__pulumiType;
    }

    /**
     * Time in seconds an IP address is denied access after failing to authenticate five times within one minute.
     */
    public readonly authBlackoutTime!: pulumi.Output<number>;
    /**
     * HTTPS CA certificate for policy authentication.
     */
    public readonly authCaCert!: pulumi.Output<string>;
    /**
     * HTTPS server certificate for policy authentication.
     */
    public readonly authCert!: pulumi.Output<string>;
    /**
     * Enable/disable use of HTTP basic authentication for identity-based firewall policies. Valid values: `enable`, `disable`.
     */
    public readonly authHttpBasic!: pulumi.Output<string>;
    /**
     * Maximum number of failed authentication attempts before the user is blocked.
     */
    public readonly authInvalidMax!: pulumi.Output<number>;
    /**
     * Lockout period in seconds after too many login failures.
     */
    public readonly authLockoutDuration!: pulumi.Output<number>;
    /**
     * Maximum number of failed login attempts before login lockout is triggered.
     */
    public readonly authLockoutThreshold!: pulumi.Output<number>;
    /**
     * Always/implicitly trigger firewall authentication on demand. Valid values: `always`, `implicitly`.
     */
    public readonly authOnDemand!: pulumi.Output<string>;
    /**
     * Time in minutes before captive portal user have to re-authenticate (1 - 30 min, default 3 min).
     */
    public readonly authPortalTimeout!: pulumi.Output<number>;
    /**
     * Set up non-standard ports for authentication with HTTP, HTTPS, FTP, and TELNET. The structure of `authPorts` block is documented below.
     */
    public readonly authPorts!: pulumi.Output<outputs.UserSettingAuthPort[] | undefined>;
    /**
     * Enable/disable redirecting HTTP user authentication to more secure HTTPS. Valid values: `enable`, `disable`.
     */
    public readonly authSecureHttp!: pulumi.Output<string>;
    /**
     * Enable/disable source MAC for user identity. Valid values: `enable`, `disable`.
     */
    public readonly authSrcMac!: pulumi.Output<string>;
    /**
     * Allow/forbid SSL re-negotiation for HTTPS authentication. Valid values: `enable`, `disable`.
     */
    public readonly authSslAllowRenegotiation!: pulumi.Output<string>;
    /**
     * Minimum supported protocol version for SSL/TLS connections (default is to follow system global setting). Valid values: `default`, `SSLv3`, `TLSv1`, `TLSv1-1`, `TLSv1-2`.
     */
    public readonly authSslMinProtoVersion!: pulumi.Output<string>;
    /**
     * Time in minutes before the firewall user authentication timeout requires the user to re-authenticate.
     */
    public readonly authTimeout!: pulumi.Output<number>;
    /**
     * Control if authenticated users have to login again after a hard timeout, after an idle timeout, or after a session timeout. Valid values: `idle-timeout`, `hard-timeout`, `new-session`.
     */
    public readonly authTimeoutType!: pulumi.Output<string>;
    /**
     * Supported firewall policy authentication protocols/methods. Valid values: `http`, `https`, `ftp`, `telnet`.
     */
    public readonly authType!: pulumi.Output<string>;
    /**
     * true or false, set this parameter to true when using dynamic forEach + toset to configure and sort sub-tables, please do not set this parameter when configuring static sub-tables.
     */
    public readonly dynamicSortSubtable!: pulumi.Output<string | undefined>;
    /**
     * Enable/disable per policy disclaimer. Valid values: `enable`, `disable`.
     */
    public readonly perPolicyDisclaimer!: pulumi.Output<string>;
    /**
     * Set the RADIUS session timeout to a hard timeout or to ignore RADIUS server session timeouts. Valid values: `hard-timeout`, `ignore-timeout`.
     */
    public readonly radiusSesTimeoutAct!: pulumi.Output<string>;
    /**
     * Specifies the vdom to which the resource will be applied when the FortiGate unit is running in VDOM mode. Only one vdom can be specified. If you want to inherit the vdom configuration of the provider, please do not set this parameter.
     */
    public readonly vdomparam!: pulumi.Output<string | undefined>;

    /**
     * Create a UserSetting resource with the given unique name, arguments, and options.
     *
     * @param name The _unique_ name of the resource.
     * @param args The arguments to use to populate this resource's properties.
     * @param opts A bag of options that control this resource's behavior.
     */
    constructor(name: string, args?: UserSettingArgs, opts?: pulumi.CustomResourceOptions)
    constructor(name: string, argsOrState?: UserSettingArgs | UserSettingState, opts?: pulumi.CustomResourceOptions) {
        let inputs: pulumi.Inputs = {};
        opts = opts || {};
        if (opts.id) {
            const state = argsOrState as UserSettingState | undefined;
            inputs["authBlackoutTime"] = state ? state.authBlackoutTime : undefined;
            inputs["authCaCert"] = state ? state.authCaCert : undefined;
            inputs["authCert"] = state ? state.authCert : undefined;
            inputs["authHttpBasic"] = state ? state.authHttpBasic : undefined;
            inputs["authInvalidMax"] = state ? state.authInvalidMax : undefined;
            inputs["authLockoutDuration"] = state ? state.authLockoutDuration : undefined;
            inputs["authLockoutThreshold"] = state ? state.authLockoutThreshold : undefined;
            inputs["authOnDemand"] = state ? state.authOnDemand : undefined;
            inputs["authPortalTimeout"] = state ? state.authPortalTimeout : undefined;
            inputs["authPorts"] = state ? state.authPorts : undefined;
            inputs["authSecureHttp"] = state ? state.authSecureHttp : undefined;
            inputs["authSrcMac"] = state ? state.authSrcMac : undefined;
            inputs["authSslAllowRenegotiation"] = state ? state.authSslAllowRenegotiation : undefined;
            inputs["authSslMinProtoVersion"] = state ? state.authSslMinProtoVersion : undefined;
            inputs["authTimeout"] = state ? state.authTimeout : undefined;
            inputs["authTimeoutType"] = state ? state.authTimeoutType : undefined;
            inputs["authType"] = state ? state.authType : undefined;
            inputs["dynamicSortSubtable"] = state ? state.dynamicSortSubtable : undefined;
            inputs["perPolicyDisclaimer"] = state ? state.perPolicyDisclaimer : undefined;
            inputs["radiusSesTimeoutAct"] = state ? state.radiusSesTimeoutAct : undefined;
            inputs["vdomparam"] = state ? state.vdomparam : undefined;
        } else {
            const args = argsOrState as UserSettingArgs | undefined;
            inputs["authBlackoutTime"] = args ? args.authBlackoutTime : undefined;
            inputs["authCaCert"] = args ? args.authCaCert : undefined;
            inputs["authCert"] = args ? args.authCert : undefined;
            inputs["authHttpBasic"] = args ? args.authHttpBasic : undefined;
            inputs["authInvalidMax"] = args ? args.authInvalidMax : undefined;
            inputs["authLockoutDuration"] = args ? args.authLockoutDuration : undefined;
            inputs["authLockoutThreshold"] = args ? args.authLockoutThreshold : undefined;
            inputs["authOnDemand"] = args ? args.authOnDemand : undefined;
            inputs["authPortalTimeout"] = args ? args.authPortalTimeout : undefined;
            inputs["authPorts"] = args ? args.authPorts : undefined;
            inputs["authSecureHttp"] = args ? args.authSecureHttp : undefined;
            inputs["authSrcMac"] = args ? args.authSrcMac : undefined;
            inputs["authSslAllowRenegotiation"] = args ? args.authSslAllowRenegotiation : undefined;
            inputs["authSslMinProtoVersion"] = args ? args.authSslMinProtoVersion : undefined;
            inputs["authTimeout"] = args ? args.authTimeout : undefined;
            inputs["authTimeoutType"] = args ? args.authTimeoutType : undefined;
            inputs["authType"] = args ? args.authType : undefined;
            inputs["dynamicSortSubtable"] = args ? args.dynamicSortSubtable : undefined;
            inputs["perPolicyDisclaimer"] = args ? args.perPolicyDisclaimer : undefined;
            inputs["radiusSesTimeoutAct"] = args ? args.radiusSesTimeoutAct : undefined;
            inputs["vdomparam"] = args ? args.vdomparam : undefined;
        }
        if (!opts.version) {
            opts = pulumi.mergeOptions(opts, { version: utilities.getVersion()});
        }
        super(UserSetting.__pulumiType, name, inputs, opts);
    }
}

/**
 * Input properties used for looking up and filtering UserSetting resources.
 */
export interface UserSettingState {
    /**
     * Time in seconds an IP address is denied access after failing to authenticate five times within one minute.
     */
    authBlackoutTime?: pulumi.Input<number>;
    /**
     * HTTPS CA certificate for policy authentication.
     */
    authCaCert?: pulumi.Input<string>;
    /**
     * HTTPS server certificate for policy authentication.
     */
    authCert?: pulumi.Input<string>;
    /**
     * Enable/disable use of HTTP basic authentication for identity-based firewall policies. Valid values: `enable`, `disable`.
     */
    authHttpBasic?: pulumi.Input<string>;
    /**
     * Maximum number of failed authentication attempts before the user is blocked.
     */
    authInvalidMax?: pulumi.Input<number>;
    /**
     * Lockout period in seconds after too many login failures.
     */
    authLockoutDuration?: pulumi.Input<number>;
    /**
     * Maximum number of failed login attempts before login lockout is triggered.
     */
    authLockoutThreshold?: pulumi.Input<number>;
    /**
     * Always/implicitly trigger firewall authentication on demand. Valid values: `always`, `implicitly`.
     */
    authOnDemand?: pulumi.Input<string>;
    /**
     * Time in minutes before captive portal user have to re-authenticate (1 - 30 min, default 3 min).
     */
    authPortalTimeout?: pulumi.Input<number>;
    /**
     * Set up non-standard ports for authentication with HTTP, HTTPS, FTP, and TELNET. The structure of `authPorts` block is documented below.
     */
    authPorts?: pulumi.Input<pulumi.Input<inputs.UserSettingAuthPort>[]>;
    /**
     * Enable/disable redirecting HTTP user authentication to more secure HTTPS. Valid values: `enable`, `disable`.
     */
    authSecureHttp?: pulumi.Input<string>;
    /**
     * Enable/disable source MAC for user identity. Valid values: `enable`, `disable`.
     */
    authSrcMac?: pulumi.Input<string>;
    /**
     * Allow/forbid SSL re-negotiation for HTTPS authentication. Valid values: `enable`, `disable`.
     */
    authSslAllowRenegotiation?: pulumi.Input<string>;
    /**
     * Minimum supported protocol version for SSL/TLS connections (default is to follow system global setting). Valid values: `default`, `SSLv3`, `TLSv1`, `TLSv1-1`, `TLSv1-2`.
     */
    authSslMinProtoVersion?: pulumi.Input<string>;
    /**
     * Time in minutes before the firewall user authentication timeout requires the user to re-authenticate.
     */
    authTimeout?: pulumi.Input<number>;
    /**
     * Control if authenticated users have to login again after a hard timeout, after an idle timeout, or after a session timeout. Valid values: `idle-timeout`, `hard-timeout`, `new-session`.
     */
    authTimeoutType?: pulumi.Input<string>;
    /**
     * Supported firewall policy authentication protocols/methods. Valid values: `http`, `https`, `ftp`, `telnet`.
     */
    authType?: pulumi.Input<string>;
    /**
     * true or false, set this parameter to true when using dynamic forEach + toset to configure and sort sub-tables, please do not set this parameter when configuring static sub-tables.
     */
    dynamicSortSubtable?: pulumi.Input<string>;
    /**
     * Enable/disable per policy disclaimer. Valid values: `enable`, `disable`.
     */
    perPolicyDisclaimer?: pulumi.Input<string>;
    /**
     * Set the RADIUS session timeout to a hard timeout or to ignore RADIUS server session timeouts. Valid values: `hard-timeout`, `ignore-timeout`.
     */
    radiusSesTimeoutAct?: pulumi.Input<string>;
    /**
     * Specifies the vdom to which the resource will be applied when the FortiGate unit is running in VDOM mode. Only one vdom can be specified. If you want to inherit the vdom configuration of the provider, please do not set this parameter.
     */
    vdomparam?: pulumi.Input<string>;
}

/**
 * The set of arguments for constructing a UserSetting resource.
 */
export interface UserSettingArgs {
    /**
     * Time in seconds an IP address is denied access after failing to authenticate five times within one minute.
     */
    authBlackoutTime?: pulumi.Input<number>;
    /**
     * HTTPS CA certificate for policy authentication.
     */
    authCaCert?: pulumi.Input<string>;
    /**
     * HTTPS server certificate for policy authentication.
     */
    authCert?: pulumi.Input<string>;
    /**
     * Enable/disable use of HTTP basic authentication for identity-based firewall policies. Valid values: `enable`, `disable`.
     */
    authHttpBasic?: pulumi.Input<string>;
    /**
     * Maximum number of failed authentication attempts before the user is blocked.
     */
    authInvalidMax?: pulumi.Input<number>;
    /**
     * Lockout period in seconds after too many login failures.
     */
    authLockoutDuration?: pulumi.Input<number>;
    /**
     * Maximum number of failed login attempts before login lockout is triggered.
     */
    authLockoutThreshold?: pulumi.Input<number>;
    /**
     * Always/implicitly trigger firewall authentication on demand. Valid values: `always`, `implicitly`.
     */
    authOnDemand?: pulumi.Input<string>;
    /**
     * Time in minutes before captive portal user have to re-authenticate (1 - 30 min, default 3 min).
     */
    authPortalTimeout?: pulumi.Input<number>;
    /**
     * Set up non-standard ports for authentication with HTTP, HTTPS, FTP, and TELNET. The structure of `authPorts` block is documented below.
     */
    authPorts?: pulumi.Input<pulumi.Input<inputs.UserSettingAuthPort>[]>;
    /**
     * Enable/disable redirecting HTTP user authentication to more secure HTTPS. Valid values: `enable`, `disable`.
     */
    authSecureHttp?: pulumi.Input<string>;
    /**
     * Enable/disable source MAC for user identity. Valid values: `enable`, `disable`.
     */
    authSrcMac?: pulumi.Input<string>;
    /**
     * Allow/forbid SSL re-negotiation for HTTPS authentication. Valid values: `enable`, `disable`.
     */
    authSslAllowRenegotiation?: pulumi.Input<string>;
    /**
     * Minimum supported protocol version for SSL/TLS connections (default is to follow system global setting). Valid values: `default`, `SSLv3`, `TLSv1`, `TLSv1-1`, `TLSv1-2`.
     */
    authSslMinProtoVersion?: pulumi.Input<string>;
    /**
     * Time in minutes before the firewall user authentication timeout requires the user to re-authenticate.
     */
    authTimeout?: pulumi.Input<number>;
    /**
     * Control if authenticated users have to login again after a hard timeout, after an idle timeout, or after a session timeout. Valid values: `idle-timeout`, `hard-timeout`, `new-session`.
     */
    authTimeoutType?: pulumi.Input<string>;
    /**
     * Supported firewall policy authentication protocols/methods. Valid values: `http`, `https`, `ftp`, `telnet`.
     */
    authType?: pulumi.Input<string>;
    /**
     * true or false, set this parameter to true when using dynamic forEach + toset to configure and sort sub-tables, please do not set this parameter when configuring static sub-tables.
     */
    dynamicSortSubtable?: pulumi.Input<string>;
    /**
     * Enable/disable per policy disclaimer. Valid values: `enable`, `disable`.
     */
    perPolicyDisclaimer?: pulumi.Input<string>;
    /**
     * Set the RADIUS session timeout to a hard timeout or to ignore RADIUS server session timeouts. Valid values: `hard-timeout`, `ignore-timeout`.
     */
    radiusSesTimeoutAct?: pulumi.Input<string>;
    /**
     * Specifies the vdom to which the resource will be applied when the FortiGate unit is running in VDOM mode. Only one vdom can be specified. If you want to inherit the vdom configuration of the provider, please do not set this parameter.
     */
    vdomparam?: pulumi.Input<string>;
}
