// *** WARNING: this file was generated by the Pulumi Terraform Bridge (tfgen) Tool. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

import * as pulumi from "@pulumi/pulumi";
import * as utilities from "./utilities";

/**
 * Provides a resource to use phase1-interface to define a phase 1 definition for a route-based (interface mode) IPsec VPN tunnel that generates authentication and encryption keys automatically.
 *
 * !> **Warning:** The resource will be deprecated and replaced by new resource `fortios.VpnIpsecPhase1Interface`, we recommend that you use the new resource.
 *
 * ## Example Usage
 *
 * fortios.VPNIPsecPhase1InterfaceLegacy needs to be set with fortios_vpn_ipsec_phase2interface. See section fortios_vpn_ipsec_phase2interface.
 */
export class VPNIPsecPhase1InterfaceLegacy extends pulumi.CustomResource {
    /**
     * Get an existing VPNIPsecPhase1InterfaceLegacy resource's state with the given name, ID, and optional extra
     * properties used to qualify the lookup.
     *
     * @param name The _unique_ name of the resulting resource.
     * @param id The _unique_ provider ID of the resource to lookup.
     * @param state Any extra arguments used during the lookup.
     * @param opts Optional settings to control the behavior of the CustomResource.
     */
    public static get(name: string, id: pulumi.Input<pulumi.ID>, state?: VPNIPsecPhase1InterfaceLegacyState, opts?: pulumi.CustomResourceOptions): VPNIPsecPhase1InterfaceLegacy {
        return new VPNIPsecPhase1InterfaceLegacy(name, <any>state, { ...opts, id: id });
    }

    /** @internal */
    public static readonly __pulumiType = 'fortios:index/vPNIPsecPhase1InterfaceLegacy:VPNIPsecPhase1InterfaceLegacy';

    /**
     * Returns true if the given object is an instance of VPNIPsecPhase1InterfaceLegacy.  This is designed to work even
     * when multiple copies of the Pulumi SDK have been loaded into the same process.
     */
    public static isInstance(obj: any): obj is VPNIPsecPhase1InterfaceLegacy {
        if (obj === undefined || obj === null) {
            return false;
        }
        return obj['__pulumiType'] === VPNIPsecPhase1InterfaceLegacy.__pulumiType;
    }

    /**
     * Authentication method.
     */
    public readonly authmethod!: pulumi.Output<string>;
    /**
     * Authentication method (remote side).
     */
    public readonly authmethodRemote!: pulumi.Output<string>;
    /**
     * Names of signed personal certificates.
     */
    public readonly certificates!: pulumi.Output<string[]>;
    /**
     * Comment.
     */
    public readonly comments!: pulumi.Output<string | undefined>;
    /**
     * Local physical, aggregate, or VLAN outgoing interface.
     */
    public readonly interface!: pulumi.Output<string>;
    /**
     * IPv4 subnets that should not be sent over the IPsec tunnel.
     */
    public readonly ipv4SplitExclude!: pulumi.Output<string>;
    /**
     * IPv4 split-include subnets.
     */
    public readonly ipv4SplitInclude!: pulumi.Output<string>;
    /**
     * Enable/disable configuration method.
     */
    public readonly modeCfg!: pulumi.Output<string>;
    /**
     * IPsec remote gateway name.
     */
    public readonly name!: pulumi.Output<string>;
    /**
     * Accept this peer certificate.
     */
    public readonly peer!: pulumi.Output<string>;
    /**
     * Accept this peer certificate group.
     */
    public readonly peergrp!: pulumi.Output<string>;
    /**
     * Accept this peer identity.
     */
    public readonly peerid!: pulumi.Output<string>;
    /**
     * Accept this peer type.
     */
    public readonly peertype!: pulumi.Output<string>;
    /**
     * Phase1 proposal.
     */
    public readonly proposal!: pulumi.Output<string>;
    /**
     * Pre-shared secret for PSK authentication.
     */
    public readonly psksecret!: pulumi.Output<string>;
    /**
     * IPv4 address of the remote gateway's external interface.
     */
    public readonly remoteGw!: pulumi.Output<string>;
    /**
     * Split-include services.
     */
    public readonly splitIncludeService!: pulumi.Output<string>;
    /**
     * Remote gateway type.
     */
    public readonly type!: pulumi.Output<string>;
    /**
     * GUI VPN Wizard Type.
     */
    public readonly wizardType!: pulumi.Output<string>;

    /**
     * Create a VPNIPsecPhase1InterfaceLegacy resource with the given unique name, arguments, and options.
     *
     * @param name The _unique_ name of the resource.
     * @param args The arguments to use to populate this resource's properties.
     * @param opts A bag of options that control this resource's behavior.
     */
    constructor(name: string, args: VPNIPsecPhase1InterfaceLegacyArgs, opts?: pulumi.CustomResourceOptions)
    constructor(name: string, argsOrState?: VPNIPsecPhase1InterfaceLegacyArgs | VPNIPsecPhase1InterfaceLegacyState, opts?: pulumi.CustomResourceOptions) {
        let inputs: pulumi.Inputs = {};
        opts = opts || {};
        if (opts.id) {
            const state = argsOrState as VPNIPsecPhase1InterfaceLegacyState | undefined;
            inputs["authmethod"] = state ? state.authmethod : undefined;
            inputs["authmethodRemote"] = state ? state.authmethodRemote : undefined;
            inputs["certificates"] = state ? state.certificates : undefined;
            inputs["comments"] = state ? state.comments : undefined;
            inputs["interface"] = state ? state.interface : undefined;
            inputs["ipv4SplitExclude"] = state ? state.ipv4SplitExclude : undefined;
            inputs["ipv4SplitInclude"] = state ? state.ipv4SplitInclude : undefined;
            inputs["modeCfg"] = state ? state.modeCfg : undefined;
            inputs["name"] = state ? state.name : undefined;
            inputs["peer"] = state ? state.peer : undefined;
            inputs["peergrp"] = state ? state.peergrp : undefined;
            inputs["peerid"] = state ? state.peerid : undefined;
            inputs["peertype"] = state ? state.peertype : undefined;
            inputs["proposal"] = state ? state.proposal : undefined;
            inputs["psksecret"] = state ? state.psksecret : undefined;
            inputs["remoteGw"] = state ? state.remoteGw : undefined;
            inputs["splitIncludeService"] = state ? state.splitIncludeService : undefined;
            inputs["type"] = state ? state.type : undefined;
            inputs["wizardType"] = state ? state.wizardType : undefined;
        } else {
            const args = argsOrState as VPNIPsecPhase1InterfaceLegacyArgs | undefined;
            if ((!args || args.interface === undefined) && !opts.urn) {
                throw new Error("Missing required property 'interface'");
            }
            if ((!args || args.psksecret === undefined) && !opts.urn) {
                throw new Error("Missing required property 'psksecret'");
            }
            if ((!args || args.remoteGw === undefined) && !opts.urn) {
                throw new Error("Missing required property 'remoteGw'");
            }
            if ((!args || args.type === undefined) && !opts.urn) {
                throw new Error("Missing required property 'type'");
            }
            inputs["authmethod"] = args ? args.authmethod : undefined;
            inputs["authmethodRemote"] = args ? args.authmethodRemote : undefined;
            inputs["certificates"] = args ? args.certificates : undefined;
            inputs["comments"] = args ? args.comments : undefined;
            inputs["interface"] = args ? args.interface : undefined;
            inputs["ipv4SplitExclude"] = args ? args.ipv4SplitExclude : undefined;
            inputs["ipv4SplitInclude"] = args ? args.ipv4SplitInclude : undefined;
            inputs["modeCfg"] = args ? args.modeCfg : undefined;
            inputs["name"] = args ? args.name : undefined;
            inputs["peer"] = args ? args.peer : undefined;
            inputs["peergrp"] = args ? args.peergrp : undefined;
            inputs["peerid"] = args ? args.peerid : undefined;
            inputs["peertype"] = args ? args.peertype : undefined;
            inputs["proposal"] = args ? args.proposal : undefined;
            inputs["psksecret"] = args ? args.psksecret : undefined;
            inputs["remoteGw"] = args ? args.remoteGw : undefined;
            inputs["splitIncludeService"] = args ? args.splitIncludeService : undefined;
            inputs["type"] = args ? args.type : undefined;
            inputs["wizardType"] = args ? args.wizardType : undefined;
        }
        if (!opts.version) {
            opts = pulumi.mergeOptions(opts, { version: utilities.getVersion()});
        }
        super(VPNIPsecPhase1InterfaceLegacy.__pulumiType, name, inputs, opts);
    }
}

/**
 * Input properties used for looking up and filtering VPNIPsecPhase1InterfaceLegacy resources.
 */
export interface VPNIPsecPhase1InterfaceLegacyState {
    /**
     * Authentication method.
     */
    authmethod?: pulumi.Input<string>;
    /**
     * Authentication method (remote side).
     */
    authmethodRemote?: pulumi.Input<string>;
    /**
     * Names of signed personal certificates.
     */
    certificates?: pulumi.Input<pulumi.Input<string>[]>;
    /**
     * Comment.
     */
    comments?: pulumi.Input<string>;
    /**
     * Local physical, aggregate, or VLAN outgoing interface.
     */
    interface?: pulumi.Input<string>;
    /**
     * IPv4 subnets that should not be sent over the IPsec tunnel.
     */
    ipv4SplitExclude?: pulumi.Input<string>;
    /**
     * IPv4 split-include subnets.
     */
    ipv4SplitInclude?: pulumi.Input<string>;
    /**
     * Enable/disable configuration method.
     */
    modeCfg?: pulumi.Input<string>;
    /**
     * IPsec remote gateway name.
     */
    name?: pulumi.Input<string>;
    /**
     * Accept this peer certificate.
     */
    peer?: pulumi.Input<string>;
    /**
     * Accept this peer certificate group.
     */
    peergrp?: pulumi.Input<string>;
    /**
     * Accept this peer identity.
     */
    peerid?: pulumi.Input<string>;
    /**
     * Accept this peer type.
     */
    peertype?: pulumi.Input<string>;
    /**
     * Phase1 proposal.
     */
    proposal?: pulumi.Input<string>;
    /**
     * Pre-shared secret for PSK authentication.
     */
    psksecret?: pulumi.Input<string>;
    /**
     * IPv4 address of the remote gateway's external interface.
     */
    remoteGw?: pulumi.Input<string>;
    /**
     * Split-include services.
     */
    splitIncludeService?: pulumi.Input<string>;
    /**
     * Remote gateway type.
     */
    type?: pulumi.Input<string>;
    /**
     * GUI VPN Wizard Type.
     */
    wizardType?: pulumi.Input<string>;
}

/**
 * The set of arguments for constructing a VPNIPsecPhase1InterfaceLegacy resource.
 */
export interface VPNIPsecPhase1InterfaceLegacyArgs {
    /**
     * Authentication method.
     */
    authmethod?: pulumi.Input<string>;
    /**
     * Authentication method (remote side).
     */
    authmethodRemote?: pulumi.Input<string>;
    /**
     * Names of signed personal certificates.
     */
    certificates?: pulumi.Input<pulumi.Input<string>[]>;
    /**
     * Comment.
     */
    comments?: pulumi.Input<string>;
    /**
     * Local physical, aggregate, or VLAN outgoing interface.
     */
    interface: pulumi.Input<string>;
    /**
     * IPv4 subnets that should not be sent over the IPsec tunnel.
     */
    ipv4SplitExclude?: pulumi.Input<string>;
    /**
     * IPv4 split-include subnets.
     */
    ipv4SplitInclude?: pulumi.Input<string>;
    /**
     * Enable/disable configuration method.
     */
    modeCfg?: pulumi.Input<string>;
    /**
     * IPsec remote gateway name.
     */
    name?: pulumi.Input<string>;
    /**
     * Accept this peer certificate.
     */
    peer?: pulumi.Input<string>;
    /**
     * Accept this peer certificate group.
     */
    peergrp?: pulumi.Input<string>;
    /**
     * Accept this peer identity.
     */
    peerid?: pulumi.Input<string>;
    /**
     * Accept this peer type.
     */
    peertype?: pulumi.Input<string>;
    /**
     * Phase1 proposal.
     */
    proposal?: pulumi.Input<string>;
    /**
     * Pre-shared secret for PSK authentication.
     */
    psksecret: pulumi.Input<string>;
    /**
     * IPv4 address of the remote gateway's external interface.
     */
    remoteGw: pulumi.Input<string>;
    /**
     * Split-include services.
     */
    splitIncludeService?: pulumi.Input<string>;
    /**
     * Remote gateway type.
     */
    type: pulumi.Input<string>;
    /**
     * GUI VPN Wizard Type.
     */
    wizardType?: pulumi.Input<string>;
}
