// *** WARNING: this file was generated by the Pulumi Terraform Bridge (tfgen) Tool. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

import * as pulumi from "@pulumi/pulumi";
import { input as inputs, output as outputs } from "./types";
import * as utilities from "./utilities";

/**
 * Extender controller configuration.
 *
 * > The resource applies to FortiOS Version >= 6.4.2. For FortiOS Version < 6.4.2, see `fortios.ExtenderControllerExtender`.
 *
 * ## Example Usage
 *
 * ```typescript
 * import * as pulumi from "@pulumi/pulumi";
 * import * as fortios from "@pulumi/fortios";
 *
 * const trname = new fortios.ExtenderControllerExtender1("trname", {
 *     authorized: "disable",
 *     controllerReport: {
 *         interval: 300,
 *         signalThreshold: 10,
 *         status: "disable",
 *     },
 *     extName: "2932",
 *     fosid: "FX201E5919004031",
 *     modem1: {
 *         autoSwitch: {
 *             dataplan: "disable",
 *             disconnect: "disable",
 *             disconnectPeriod: 600,
 *             disconnectThreshold: 3,
 *             signal: "disable",
 *             switchBack: "timer",
 *             switchBackTime: "00:01",
 *             switchBackTimer: 86400,
 *         },
 *         connStatus: 0,
 *         defaultSim: "sim2",
 *         gps: "enable",
 *         redundantIntf: "s1",
 *         redundantMode: "enable",
 *         sim1Pin: "disable",
 *         sim1PinCode: "testpincode",
 *         sim2Pin: "disable",
 *     },
 *     modem2: {
 *         autoSwitch: {
 *             dataplan: "disable",
 *             disconnect: "disable",
 *             disconnectPeriod: 600,
 *             disconnectThreshold: 3,
 *             signal: "disable",
 *             switchBackTime: "00:01",
 *             switchBackTimer: 86400,
 *         },
 *         connStatus: 0,
 *         defaultSim: "sim1",
 *         gps: "enable",
 *         redundantMode: "disable",
 *         sim1Pin: "disable",
 *         sim2Pin: "disable",
 *     },
 *     vdom: 0,
 * });
 * ```
 *
 * ## Import
 *
 * ExtenderController Extender1 can be imported using any of these accepted formats$ export "FORTIOS_IMPORT_TABLE"="true"
 *
 * ```sh
 *  $ pulumi import fortios:index/extenderControllerExtender1:ExtenderControllerExtender1 labelname {{name}}
 * ```
 *
 *  $ unset "FORTIOS_IMPORT_TABLE"
 */
export class ExtenderControllerExtender1 extends pulumi.CustomResource {
    /**
     * Get an existing ExtenderControllerExtender1 resource's state with the given name, ID, and optional extra
     * properties used to qualify the lookup.
     *
     * @param name The _unique_ name of the resulting resource.
     * @param id The _unique_ provider ID of the resource to lookup.
     * @param state Any extra arguments used during the lookup.
     * @param opts Optional settings to control the behavior of the CustomResource.
     */
    public static get(name: string, id: pulumi.Input<pulumi.ID>, state?: ExtenderControllerExtender1State, opts?: pulumi.CustomResourceOptions): ExtenderControllerExtender1 {
        return new ExtenderControllerExtender1(name, <any>state, { ...opts, id: id });
    }

    /** @internal */
    public static readonly __pulumiType = 'fortios:index/extenderControllerExtender1:ExtenderControllerExtender1';

    /**
     * Returns true if the given object is an instance of ExtenderControllerExtender1.  This is designed to work even
     * when multiple copies of the Pulumi SDK have been loaded into the same process.
     */
    public static isInstance(obj: any): obj is ExtenderControllerExtender1 {
        if (obj === undefined || obj === null) {
            return false;
        }
        return obj['__pulumiType'] === ExtenderControllerExtender1.__pulumiType;
    }

    /**
     * FortiExtender Administration (enable or disable). Valid values: `disable`, `enable`.
     */
    public readonly authorized!: pulumi.Output<string>;
    /**
     * FortiExtender controller report configuration. The structure of `controllerReport` block is documented below.
     */
    public readonly controllerReport!: pulumi.Output<outputs.ExtenderControllerExtender1ControllerReport | undefined>;
    /**
     * Description.
     */
    public readonly description!: pulumi.Output<string>;
    /**
     * FortiExtender name.
     */
    public readonly extName!: pulumi.Output<string>;
    /**
     * FortiExtender serial number.
     */
    public readonly fosid!: pulumi.Output<string>;
    /**
     * FortiExtender login password.
     */
    public readonly loginPassword!: pulumi.Output<string | undefined>;
    /**
     * Configuration options for modem 1. The structure of `modem1` block is documented below.
     */
    public readonly modem1!: pulumi.Output<outputs.ExtenderControllerExtender1Modem1 | undefined>;
    /**
     * Configuration options for modem 2. The structure of `modem2` block is documented below.
     */
    public readonly modem2!: pulumi.Output<outputs.ExtenderControllerExtender1Modem2 | undefined>;
    /**
     * FortiExtender entry name.
     */
    public readonly name!: pulumi.Output<string>;
    /**
     * VDOM
     */
    public readonly vdom!: pulumi.Output<number>;
    /**
     * Specifies the vdom to which the resource will be applied when the FortiGate unit is running in VDOM mode. Only one vdom can be specified. If you want to inherit the vdom configuration of the provider, please do not set this parameter.
     */
    public readonly vdomparam!: pulumi.Output<string | undefined>;

    /**
     * Create a ExtenderControllerExtender1 resource with the given unique name, arguments, and options.
     *
     * @param name The _unique_ name of the resource.
     * @param args The arguments to use to populate this resource's properties.
     * @param opts A bag of options that control this resource's behavior.
     */
    constructor(name: string, args: ExtenderControllerExtender1Args, opts?: pulumi.CustomResourceOptions)
    constructor(name: string, argsOrState?: ExtenderControllerExtender1Args | ExtenderControllerExtender1State, opts?: pulumi.CustomResourceOptions) {
        let inputs: pulumi.Inputs = {};
        opts = opts || {};
        if (opts.id) {
            const state = argsOrState as ExtenderControllerExtender1State | undefined;
            inputs["authorized"] = state ? state.authorized : undefined;
            inputs["controllerReport"] = state ? state.controllerReport : undefined;
            inputs["description"] = state ? state.description : undefined;
            inputs["extName"] = state ? state.extName : undefined;
            inputs["fosid"] = state ? state.fosid : undefined;
            inputs["loginPassword"] = state ? state.loginPassword : undefined;
            inputs["modem1"] = state ? state.modem1 : undefined;
            inputs["modem2"] = state ? state.modem2 : undefined;
            inputs["name"] = state ? state.name : undefined;
            inputs["vdom"] = state ? state.vdom : undefined;
            inputs["vdomparam"] = state ? state.vdomparam : undefined;
        } else {
            const args = argsOrState as ExtenderControllerExtender1Args | undefined;
            if ((!args || args.authorized === undefined) && !opts.urn) {
                throw new Error("Missing required property 'authorized'");
            }
            inputs["authorized"] = args ? args.authorized : undefined;
            inputs["controllerReport"] = args ? args.controllerReport : undefined;
            inputs["description"] = args ? args.description : undefined;
            inputs["extName"] = args ? args.extName : undefined;
            inputs["fosid"] = args ? args.fosid : undefined;
            inputs["loginPassword"] = args ? args.loginPassword : undefined;
            inputs["modem1"] = args ? args.modem1 : undefined;
            inputs["modem2"] = args ? args.modem2 : undefined;
            inputs["name"] = args ? args.name : undefined;
            inputs["vdom"] = args ? args.vdom : undefined;
            inputs["vdomparam"] = args ? args.vdomparam : undefined;
        }
        if (!opts.version) {
            opts = pulumi.mergeOptions(opts, { version: utilities.getVersion()});
        }
        super(ExtenderControllerExtender1.__pulumiType, name, inputs, opts);
    }
}

/**
 * Input properties used for looking up and filtering ExtenderControllerExtender1 resources.
 */
export interface ExtenderControllerExtender1State {
    /**
     * FortiExtender Administration (enable or disable). Valid values: `disable`, `enable`.
     */
    authorized?: pulumi.Input<string>;
    /**
     * FortiExtender controller report configuration. The structure of `controllerReport` block is documented below.
     */
    controllerReport?: pulumi.Input<inputs.ExtenderControllerExtender1ControllerReport>;
    /**
     * Description.
     */
    description?: pulumi.Input<string>;
    /**
     * FortiExtender name.
     */
    extName?: pulumi.Input<string>;
    /**
     * FortiExtender serial number.
     */
    fosid?: pulumi.Input<string>;
    /**
     * FortiExtender login password.
     */
    loginPassword?: pulumi.Input<string>;
    /**
     * Configuration options for modem 1. The structure of `modem1` block is documented below.
     */
    modem1?: pulumi.Input<inputs.ExtenderControllerExtender1Modem1>;
    /**
     * Configuration options for modem 2. The structure of `modem2` block is documented below.
     */
    modem2?: pulumi.Input<inputs.ExtenderControllerExtender1Modem2>;
    /**
     * FortiExtender entry name.
     */
    name?: pulumi.Input<string>;
    /**
     * VDOM
     */
    vdom?: pulumi.Input<number>;
    /**
     * Specifies the vdom to which the resource will be applied when the FortiGate unit is running in VDOM mode. Only one vdom can be specified. If you want to inherit the vdom configuration of the provider, please do not set this parameter.
     */
    vdomparam?: pulumi.Input<string>;
}

/**
 * The set of arguments for constructing a ExtenderControllerExtender1 resource.
 */
export interface ExtenderControllerExtender1Args {
    /**
     * FortiExtender Administration (enable or disable). Valid values: `disable`, `enable`.
     */
    authorized: pulumi.Input<string>;
    /**
     * FortiExtender controller report configuration. The structure of `controllerReport` block is documented below.
     */
    controllerReport?: pulumi.Input<inputs.ExtenderControllerExtender1ControllerReport>;
    /**
     * Description.
     */
    description?: pulumi.Input<string>;
    /**
     * FortiExtender name.
     */
    extName?: pulumi.Input<string>;
    /**
     * FortiExtender serial number.
     */
    fosid?: pulumi.Input<string>;
    /**
     * FortiExtender login password.
     */
    loginPassword?: pulumi.Input<string>;
    /**
     * Configuration options for modem 1. The structure of `modem1` block is documented below.
     */
    modem1?: pulumi.Input<inputs.ExtenderControllerExtender1Modem1>;
    /**
     * Configuration options for modem 2. The structure of `modem2` block is documented below.
     */
    modem2?: pulumi.Input<inputs.ExtenderControllerExtender1Modem2>;
    /**
     * FortiExtender entry name.
     */
    name?: pulumi.Input<string>;
    /**
     * VDOM
     */
    vdom?: pulumi.Input<number>;
    /**
     * Specifies the vdom to which the resource will be applied when the FortiGate unit is running in VDOM mode. Only one vdom can be specified. If you want to inherit the vdom configuration of the provider, please do not set this parameter.
     */
    vdomparam?: pulumi.Input<string>;
}
