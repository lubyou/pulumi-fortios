// *** WARNING: this file was generated by the Pulumi Terraform Bridge (tfgen) Tool. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

import * as pulumi from "@pulumi/pulumi";
import * as utilities from "./utilities";

/**
 * VPN certificate setting.
 *
 * ## Example Usage
 *
 * ```typescript
 * import * as pulumi from "@pulumi/pulumi";
 * import * as fortios from "@pulumi/fortios";
 *
 * const trname = new fortios.VpnCertificateSetting("trname", {
 *     certnameDsa1024: "Fortinet_SSL_DSA1024",
 *     certnameDsa2048: "Fortinet_SSL_DSA2048",
 *     certnameEcdsa256: "Fortinet_SSL_ECDSA256",
 *     certnameEcdsa384: "Fortinet_SSL_ECDSA384",
 *     certnameRsa1024: "Fortinet_SSL_RSA1024",
 *     certnameRsa2048: "Fortinet_SSL_RSA2048",
 *     checkCaCert: "enable",
 *     checkCaChain: "disable",
 *     cmpSaveExtraCerts: "disable",
 *     cnMatch: "substring",
 *     ocspOption: "server",
 *     ocspStatus: "disable",
 *     sslMinProtoVersion: "default",
 *     strictCrlCheck: "disable",
 *     strictOcspCheck: "disable",
 *     subjectMatch: "substring",
 * });
 * ```
 *
 * ## Import
 *
 * VpnCertificate Setting can be imported using any of these accepted formats$ export "FORTIOS_IMPORT_TABLE"="true"
 *
 * ```sh
 *  $ pulumi import fortios:index/vpnCertificateSetting:VpnCertificateSetting labelname VpnCertificateSetting
 * ```
 *
 *  $ unset "FORTIOS_IMPORT_TABLE"
 */
export class VpnCertificateSetting extends pulumi.CustomResource {
    /**
     * Get an existing VpnCertificateSetting resource's state with the given name, ID, and optional extra
     * properties used to qualify the lookup.
     *
     * @param name The _unique_ name of the resulting resource.
     * @param id The _unique_ provider ID of the resource to lookup.
     * @param state Any extra arguments used during the lookup.
     * @param opts Optional settings to control the behavior of the CustomResource.
     */
    public static get(name: string, id: pulumi.Input<pulumi.ID>, state?: VpnCertificateSettingState, opts?: pulumi.CustomResourceOptions): VpnCertificateSetting {
        return new VpnCertificateSetting(name, <any>state, { ...opts, id: id });
    }

    /** @internal */
    public static readonly __pulumiType = 'fortios:index/vpnCertificateSetting:VpnCertificateSetting';

    /**
     * Returns true if the given object is an instance of VpnCertificateSetting.  This is designed to work even
     * when multiple copies of the Pulumi SDK have been loaded into the same process.
     */
    public static isInstance(obj: any): obj is VpnCertificateSetting {
        if (obj === undefined || obj === null) {
            return false;
        }
        return obj['__pulumiType'] === VpnCertificateSetting.__pulumiType;
    }

    /**
     * 1024 bit DSA key certificate for re-signing server certificates for SSL inspection.
     */
    public readonly certnameDsa1024!: pulumi.Output<string>;
    /**
     * 2048 bit DSA key certificate for re-signing server certificates for SSL inspection.
     */
    public readonly certnameDsa2048!: pulumi.Output<string>;
    /**
     * 256 bit ECDSA key certificate for re-signing server certificates for SSL inspection.
     */
    public readonly certnameEcdsa256!: pulumi.Output<string>;
    /**
     * 384 bit ECDSA key certificate for re-signing server certificates for SSL inspection.
     */
    public readonly certnameEcdsa384!: pulumi.Output<string>;
    /**
     * 521 bit ECDSA key certificate for re-signing server certificates for SSL inspection.
     */
    public readonly certnameEcdsa521!: pulumi.Output<string>;
    /**
     * 253 bit EdDSA key certificate for re-signing server certificates for SSL inspection.
     */
    public readonly certnameEd25519!: pulumi.Output<string>;
    /**
     * 456 bit EdDSA key certificate for re-signing server certificates for SSL inspection.
     */
    public readonly certnameEd448!: pulumi.Output<string>;
    /**
     * 1024 bit RSA key certificate for re-signing server certificates for SSL inspection.
     */
    public readonly certnameRsa1024!: pulumi.Output<string>;
    /**
     * 2048 bit RSA key certificate for re-signing server certificates for SSL inspection.
     */
    public readonly certnameRsa2048!: pulumi.Output<string>;
    /**
     * 4096 bit RSA key certificate for re-signing server certificates for SSL inspection.
     */
    public readonly certnameRsa4096!: pulumi.Output<string>;
    /**
     * Enable/disable verification of the user certificate and pass authentication if any CA in the chain is trusted (default = enable). Valid values: `enable`, `disable`.
     */
    public readonly checkCaCert!: pulumi.Output<string>;
    /**
     * Enable/disable verification of the entire certificate chain and pass authentication only if the chain is complete and all of the CAs in the chain are trusted (default = disable). Valid values: `enable`, `disable`.
     */
    public readonly checkCaChain!: pulumi.Output<string>;
    /**
     * Enable/disable server certificate key usage checking in CMP mode (default = enable). Valid values: `enable`, `disable`.
     */
    public readonly cmpKeyUsageChecking!: pulumi.Output<string>;
    /**
     * Enable/disable saving extra certificates in CMP mode. Valid values: `enable`, `disable`.
     */
    public readonly cmpSaveExtraCerts!: pulumi.Output<string>;
    /**
     * When searching for a matching certificate, control how to find matches in the cn attribute of the certificate subject name. Valid values: `substring`, `value`.
     */
    public readonly cnMatch!: pulumi.Output<string>;
    /**
     * Specify outgoing interface to reach server.
     */
    public readonly interface!: pulumi.Output<string>;
    /**
     * Specify how to select outgoing interface to reach server. Valid values: `auto`, `sdwan`, `specify`.
     */
    public readonly interfaceSelectMethod!: pulumi.Output<string>;
    /**
     * Default OCSP server.
     */
    public readonly ocspDefaultServer!: pulumi.Output<string>;
    /**
     * Specify whether the OCSP URL is from certificate or configured OCSP server. Valid values: `certificate`, `server`.
     */
    public readonly ocspOption!: pulumi.Output<string>;
    /**
     * Enable/disable receiving certificates using the OCSP. Valid values: `enable`, `disable`.
     */
    public readonly ocspStatus!: pulumi.Output<string>;
    /**
     * Minimum supported protocol version for SSL/TLS connections (default is to follow system global setting). Valid values: `default`, `SSLv3`, `TLSv1`, `TLSv1-1`, `TLSv1-2`.
     */
    public readonly sslMinProtoVersion!: pulumi.Output<string>;
    /**
     * Source IP address to use to communicate with the OCSP server.
     */
    public readonly sslOcspSourceIp!: pulumi.Output<string>;
    /**
     * Enable/disable strict mode CRL checking. Valid values: `enable`, `disable`.
     */
    public readonly strictCrlCheck!: pulumi.Output<string>;
    /**
     * Enable/disable strict mode OCSP checking. Valid values: `enable`, `disable`.
     */
    public readonly strictOcspCheck!: pulumi.Output<string>;
    /**
     * When searching for a matching certificate, control how to find matches in the certificate subject name. Valid values: `substring`, `value`.
     */
    public readonly subjectMatch!: pulumi.Output<string>;
    /**
     * Specifies the vdom to which the resource will be applied when the FortiGate unit is running in VDOM mode. Only one vdom can be specified. If you want to inherit the vdom configuration of the provider, please do not set this parameter.
     */
    public readonly vdomparam!: pulumi.Output<string | undefined>;

    /**
     * Create a VpnCertificateSetting resource with the given unique name, arguments, and options.
     *
     * @param name The _unique_ name of the resource.
     * @param args The arguments to use to populate this resource's properties.
     * @param opts A bag of options that control this resource's behavior.
     */
    constructor(name: string, args: VpnCertificateSettingArgs, opts?: pulumi.CustomResourceOptions)
    constructor(name: string, argsOrState?: VpnCertificateSettingArgs | VpnCertificateSettingState, opts?: pulumi.CustomResourceOptions) {
        let inputs: pulumi.Inputs = {};
        opts = opts || {};
        if (opts.id) {
            const state = argsOrState as VpnCertificateSettingState | undefined;
            inputs["certnameDsa1024"] = state ? state.certnameDsa1024 : undefined;
            inputs["certnameDsa2048"] = state ? state.certnameDsa2048 : undefined;
            inputs["certnameEcdsa256"] = state ? state.certnameEcdsa256 : undefined;
            inputs["certnameEcdsa384"] = state ? state.certnameEcdsa384 : undefined;
            inputs["certnameEcdsa521"] = state ? state.certnameEcdsa521 : undefined;
            inputs["certnameEd25519"] = state ? state.certnameEd25519 : undefined;
            inputs["certnameEd448"] = state ? state.certnameEd448 : undefined;
            inputs["certnameRsa1024"] = state ? state.certnameRsa1024 : undefined;
            inputs["certnameRsa2048"] = state ? state.certnameRsa2048 : undefined;
            inputs["certnameRsa4096"] = state ? state.certnameRsa4096 : undefined;
            inputs["checkCaCert"] = state ? state.checkCaCert : undefined;
            inputs["checkCaChain"] = state ? state.checkCaChain : undefined;
            inputs["cmpKeyUsageChecking"] = state ? state.cmpKeyUsageChecking : undefined;
            inputs["cmpSaveExtraCerts"] = state ? state.cmpSaveExtraCerts : undefined;
            inputs["cnMatch"] = state ? state.cnMatch : undefined;
            inputs["interface"] = state ? state.interface : undefined;
            inputs["interfaceSelectMethod"] = state ? state.interfaceSelectMethod : undefined;
            inputs["ocspDefaultServer"] = state ? state.ocspDefaultServer : undefined;
            inputs["ocspOption"] = state ? state.ocspOption : undefined;
            inputs["ocspStatus"] = state ? state.ocspStatus : undefined;
            inputs["sslMinProtoVersion"] = state ? state.sslMinProtoVersion : undefined;
            inputs["sslOcspSourceIp"] = state ? state.sslOcspSourceIp : undefined;
            inputs["strictCrlCheck"] = state ? state.strictCrlCheck : undefined;
            inputs["strictOcspCheck"] = state ? state.strictOcspCheck : undefined;
            inputs["subjectMatch"] = state ? state.subjectMatch : undefined;
            inputs["vdomparam"] = state ? state.vdomparam : undefined;
        } else {
            const args = argsOrState as VpnCertificateSettingArgs | undefined;
            if ((!args || args.certnameDsa1024 === undefined) && !opts.urn) {
                throw new Error("Missing required property 'certnameDsa1024'");
            }
            if ((!args || args.certnameDsa2048 === undefined) && !opts.urn) {
                throw new Error("Missing required property 'certnameDsa2048'");
            }
            if ((!args || args.certnameEcdsa256 === undefined) && !opts.urn) {
                throw new Error("Missing required property 'certnameEcdsa256'");
            }
            if ((!args || args.certnameEcdsa384 === undefined) && !opts.urn) {
                throw new Error("Missing required property 'certnameEcdsa384'");
            }
            if ((!args || args.certnameRsa1024 === undefined) && !opts.urn) {
                throw new Error("Missing required property 'certnameRsa1024'");
            }
            if ((!args || args.certnameRsa2048 === undefined) && !opts.urn) {
                throw new Error("Missing required property 'certnameRsa2048'");
            }
            inputs["certnameDsa1024"] = args ? args.certnameDsa1024 : undefined;
            inputs["certnameDsa2048"] = args ? args.certnameDsa2048 : undefined;
            inputs["certnameEcdsa256"] = args ? args.certnameEcdsa256 : undefined;
            inputs["certnameEcdsa384"] = args ? args.certnameEcdsa384 : undefined;
            inputs["certnameEcdsa521"] = args ? args.certnameEcdsa521 : undefined;
            inputs["certnameEd25519"] = args ? args.certnameEd25519 : undefined;
            inputs["certnameEd448"] = args ? args.certnameEd448 : undefined;
            inputs["certnameRsa1024"] = args ? args.certnameRsa1024 : undefined;
            inputs["certnameRsa2048"] = args ? args.certnameRsa2048 : undefined;
            inputs["certnameRsa4096"] = args ? args.certnameRsa4096 : undefined;
            inputs["checkCaCert"] = args ? args.checkCaCert : undefined;
            inputs["checkCaChain"] = args ? args.checkCaChain : undefined;
            inputs["cmpKeyUsageChecking"] = args ? args.cmpKeyUsageChecking : undefined;
            inputs["cmpSaveExtraCerts"] = args ? args.cmpSaveExtraCerts : undefined;
            inputs["cnMatch"] = args ? args.cnMatch : undefined;
            inputs["interface"] = args ? args.interface : undefined;
            inputs["interfaceSelectMethod"] = args ? args.interfaceSelectMethod : undefined;
            inputs["ocspDefaultServer"] = args ? args.ocspDefaultServer : undefined;
            inputs["ocspOption"] = args ? args.ocspOption : undefined;
            inputs["ocspStatus"] = args ? args.ocspStatus : undefined;
            inputs["sslMinProtoVersion"] = args ? args.sslMinProtoVersion : undefined;
            inputs["sslOcspSourceIp"] = args ? args.sslOcspSourceIp : undefined;
            inputs["strictCrlCheck"] = args ? args.strictCrlCheck : undefined;
            inputs["strictOcspCheck"] = args ? args.strictOcspCheck : undefined;
            inputs["subjectMatch"] = args ? args.subjectMatch : undefined;
            inputs["vdomparam"] = args ? args.vdomparam : undefined;
        }
        if (!opts.version) {
            opts = pulumi.mergeOptions(opts, { version: utilities.getVersion()});
        }
        super(VpnCertificateSetting.__pulumiType, name, inputs, opts);
    }
}

/**
 * Input properties used for looking up and filtering VpnCertificateSetting resources.
 */
export interface VpnCertificateSettingState {
    /**
     * 1024 bit DSA key certificate for re-signing server certificates for SSL inspection.
     */
    certnameDsa1024?: pulumi.Input<string>;
    /**
     * 2048 bit DSA key certificate for re-signing server certificates for SSL inspection.
     */
    certnameDsa2048?: pulumi.Input<string>;
    /**
     * 256 bit ECDSA key certificate for re-signing server certificates for SSL inspection.
     */
    certnameEcdsa256?: pulumi.Input<string>;
    /**
     * 384 bit ECDSA key certificate for re-signing server certificates for SSL inspection.
     */
    certnameEcdsa384?: pulumi.Input<string>;
    /**
     * 521 bit ECDSA key certificate for re-signing server certificates for SSL inspection.
     */
    certnameEcdsa521?: pulumi.Input<string>;
    /**
     * 253 bit EdDSA key certificate for re-signing server certificates for SSL inspection.
     */
    certnameEd25519?: pulumi.Input<string>;
    /**
     * 456 bit EdDSA key certificate for re-signing server certificates for SSL inspection.
     */
    certnameEd448?: pulumi.Input<string>;
    /**
     * 1024 bit RSA key certificate for re-signing server certificates for SSL inspection.
     */
    certnameRsa1024?: pulumi.Input<string>;
    /**
     * 2048 bit RSA key certificate for re-signing server certificates for SSL inspection.
     */
    certnameRsa2048?: pulumi.Input<string>;
    /**
     * 4096 bit RSA key certificate for re-signing server certificates for SSL inspection.
     */
    certnameRsa4096?: pulumi.Input<string>;
    /**
     * Enable/disable verification of the user certificate and pass authentication if any CA in the chain is trusted (default = enable). Valid values: `enable`, `disable`.
     */
    checkCaCert?: pulumi.Input<string>;
    /**
     * Enable/disable verification of the entire certificate chain and pass authentication only if the chain is complete and all of the CAs in the chain are trusted (default = disable). Valid values: `enable`, `disable`.
     */
    checkCaChain?: pulumi.Input<string>;
    /**
     * Enable/disable server certificate key usage checking in CMP mode (default = enable). Valid values: `enable`, `disable`.
     */
    cmpKeyUsageChecking?: pulumi.Input<string>;
    /**
     * Enable/disable saving extra certificates in CMP mode. Valid values: `enable`, `disable`.
     */
    cmpSaveExtraCerts?: pulumi.Input<string>;
    /**
     * When searching for a matching certificate, control how to find matches in the cn attribute of the certificate subject name. Valid values: `substring`, `value`.
     */
    cnMatch?: pulumi.Input<string>;
    /**
     * Specify outgoing interface to reach server.
     */
    interface?: pulumi.Input<string>;
    /**
     * Specify how to select outgoing interface to reach server. Valid values: `auto`, `sdwan`, `specify`.
     */
    interfaceSelectMethod?: pulumi.Input<string>;
    /**
     * Default OCSP server.
     */
    ocspDefaultServer?: pulumi.Input<string>;
    /**
     * Specify whether the OCSP URL is from certificate or configured OCSP server. Valid values: `certificate`, `server`.
     */
    ocspOption?: pulumi.Input<string>;
    /**
     * Enable/disable receiving certificates using the OCSP. Valid values: `enable`, `disable`.
     */
    ocspStatus?: pulumi.Input<string>;
    /**
     * Minimum supported protocol version for SSL/TLS connections (default is to follow system global setting). Valid values: `default`, `SSLv3`, `TLSv1`, `TLSv1-1`, `TLSv1-2`.
     */
    sslMinProtoVersion?: pulumi.Input<string>;
    /**
     * Source IP address to use to communicate with the OCSP server.
     */
    sslOcspSourceIp?: pulumi.Input<string>;
    /**
     * Enable/disable strict mode CRL checking. Valid values: `enable`, `disable`.
     */
    strictCrlCheck?: pulumi.Input<string>;
    /**
     * Enable/disable strict mode OCSP checking. Valid values: `enable`, `disable`.
     */
    strictOcspCheck?: pulumi.Input<string>;
    /**
     * When searching for a matching certificate, control how to find matches in the certificate subject name. Valid values: `substring`, `value`.
     */
    subjectMatch?: pulumi.Input<string>;
    /**
     * Specifies the vdom to which the resource will be applied when the FortiGate unit is running in VDOM mode. Only one vdom can be specified. If you want to inherit the vdom configuration of the provider, please do not set this parameter.
     */
    vdomparam?: pulumi.Input<string>;
}

/**
 * The set of arguments for constructing a VpnCertificateSetting resource.
 */
export interface VpnCertificateSettingArgs {
    /**
     * 1024 bit DSA key certificate for re-signing server certificates for SSL inspection.
     */
    certnameDsa1024: pulumi.Input<string>;
    /**
     * 2048 bit DSA key certificate for re-signing server certificates for SSL inspection.
     */
    certnameDsa2048: pulumi.Input<string>;
    /**
     * 256 bit ECDSA key certificate for re-signing server certificates for SSL inspection.
     */
    certnameEcdsa256: pulumi.Input<string>;
    /**
     * 384 bit ECDSA key certificate for re-signing server certificates for SSL inspection.
     */
    certnameEcdsa384: pulumi.Input<string>;
    /**
     * 521 bit ECDSA key certificate for re-signing server certificates for SSL inspection.
     */
    certnameEcdsa521?: pulumi.Input<string>;
    /**
     * 253 bit EdDSA key certificate for re-signing server certificates for SSL inspection.
     */
    certnameEd25519?: pulumi.Input<string>;
    /**
     * 456 bit EdDSA key certificate for re-signing server certificates for SSL inspection.
     */
    certnameEd448?: pulumi.Input<string>;
    /**
     * 1024 bit RSA key certificate for re-signing server certificates for SSL inspection.
     */
    certnameRsa1024: pulumi.Input<string>;
    /**
     * 2048 bit RSA key certificate for re-signing server certificates for SSL inspection.
     */
    certnameRsa2048: pulumi.Input<string>;
    /**
     * 4096 bit RSA key certificate for re-signing server certificates for SSL inspection.
     */
    certnameRsa4096?: pulumi.Input<string>;
    /**
     * Enable/disable verification of the user certificate and pass authentication if any CA in the chain is trusted (default = enable). Valid values: `enable`, `disable`.
     */
    checkCaCert?: pulumi.Input<string>;
    /**
     * Enable/disable verification of the entire certificate chain and pass authentication only if the chain is complete and all of the CAs in the chain are trusted (default = disable). Valid values: `enable`, `disable`.
     */
    checkCaChain?: pulumi.Input<string>;
    /**
     * Enable/disable server certificate key usage checking in CMP mode (default = enable). Valid values: `enable`, `disable`.
     */
    cmpKeyUsageChecking?: pulumi.Input<string>;
    /**
     * Enable/disable saving extra certificates in CMP mode. Valid values: `enable`, `disable`.
     */
    cmpSaveExtraCerts?: pulumi.Input<string>;
    /**
     * When searching for a matching certificate, control how to find matches in the cn attribute of the certificate subject name. Valid values: `substring`, `value`.
     */
    cnMatch?: pulumi.Input<string>;
    /**
     * Specify outgoing interface to reach server.
     */
    interface?: pulumi.Input<string>;
    /**
     * Specify how to select outgoing interface to reach server. Valid values: `auto`, `sdwan`, `specify`.
     */
    interfaceSelectMethod?: pulumi.Input<string>;
    /**
     * Default OCSP server.
     */
    ocspDefaultServer?: pulumi.Input<string>;
    /**
     * Specify whether the OCSP URL is from certificate or configured OCSP server. Valid values: `certificate`, `server`.
     */
    ocspOption?: pulumi.Input<string>;
    /**
     * Enable/disable receiving certificates using the OCSP. Valid values: `enable`, `disable`.
     */
    ocspStatus?: pulumi.Input<string>;
    /**
     * Minimum supported protocol version for SSL/TLS connections (default is to follow system global setting). Valid values: `default`, `SSLv3`, `TLSv1`, `TLSv1-1`, `TLSv1-2`.
     */
    sslMinProtoVersion?: pulumi.Input<string>;
    /**
     * Source IP address to use to communicate with the OCSP server.
     */
    sslOcspSourceIp?: pulumi.Input<string>;
    /**
     * Enable/disable strict mode CRL checking. Valid values: `enable`, `disable`.
     */
    strictCrlCheck?: pulumi.Input<string>;
    /**
     * Enable/disable strict mode OCSP checking. Valid values: `enable`, `disable`.
     */
    strictOcspCheck?: pulumi.Input<string>;
    /**
     * When searching for a matching certificate, control how to find matches in the certificate subject name. Valid values: `substring`, `value`.
     */
    subjectMatch?: pulumi.Input<string>;
    /**
     * Specifies the vdom to which the resource will be applied when the FortiGate unit is running in VDOM mode. Only one vdom can be specified. If you want to inherit the vdom configuration of the provider, please do not set this parameter.
     */
    vdomparam?: pulumi.Input<string>;
}
