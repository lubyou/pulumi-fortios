// *** WARNING: this file was generated by the Pulumi Terraform Bridge (tfgen) Tool. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

import * as pulumi from "@pulumi/pulumi";
import * as utilities from "./utilities";

export class WebProxyForwardServer extends pulumi.CustomResource {
    /**
     * Get an existing WebProxyForwardServer resource's state with the given name, ID, and optional extra
     * properties used to qualify the lookup.
     *
     * @param name The _unique_ name of the resulting resource.
     * @param id The _unique_ provider ID of the resource to lookup.
     * @param state Any extra arguments used during the lookup.
     * @param opts Optional settings to control the behavior of the CustomResource.
     */
    public static get(name: string, id: pulumi.Input<pulumi.ID>, state?: WebProxyForwardServerState, opts?: pulumi.CustomResourceOptions): WebProxyForwardServer {
        return new WebProxyForwardServer(name, <any>state, { ...opts, id: id });
    }

    /** @internal */
    public static readonly __pulumiType = 'fortios:index/webProxyForwardServer:WebProxyForwardServer';

    /**
     * Returns true if the given object is an instance of WebProxyForwardServer.  This is designed to work even
     * when multiple copies of the Pulumi SDK have been loaded into the same process.
     */
    public static isInstance(obj: any): obj is WebProxyForwardServer {
        if (obj === undefined || obj === null) {
            return false;
        }
        return obj['__pulumiType'] === WebProxyForwardServer.__pulumiType;
    }

    public readonly addrType!: pulumi.Output<string>;
    public readonly comment!: pulumi.Output<string>;
    public readonly fqdn!: pulumi.Output<string>;
    public readonly healthcheck!: pulumi.Output<string>;
    public readonly ip!: pulumi.Output<string>;
    public readonly ipv6!: pulumi.Output<string>;
    public readonly monitor!: pulumi.Output<string>;
    public readonly name!: pulumi.Output<string>;
    public readonly password!: pulumi.Output<string | undefined>;
    public readonly port!: pulumi.Output<number>;
    public readonly serverDownOption!: pulumi.Output<string>;
    public readonly username!: pulumi.Output<string>;
    public readonly vdomparam!: pulumi.Output<string | undefined>;

    /**
     * Create a WebProxyForwardServer resource with the given unique name, arguments, and options.
     *
     * @param name The _unique_ name of the resource.
     * @param args The arguments to use to populate this resource's properties.
     * @param opts A bag of options that control this resource's behavior.
     */
    constructor(name: string, args?: WebProxyForwardServerArgs, opts?: pulumi.CustomResourceOptions)
    constructor(name: string, argsOrState?: WebProxyForwardServerArgs | WebProxyForwardServerState, opts?: pulumi.CustomResourceOptions) {
        let resourceInputs: pulumi.Inputs = {};
        opts = opts || {};
        if (opts.id) {
            const state = argsOrState as WebProxyForwardServerState | undefined;
            resourceInputs["addrType"] = state ? state.addrType : undefined;
            resourceInputs["comment"] = state ? state.comment : undefined;
            resourceInputs["fqdn"] = state ? state.fqdn : undefined;
            resourceInputs["healthcheck"] = state ? state.healthcheck : undefined;
            resourceInputs["ip"] = state ? state.ip : undefined;
            resourceInputs["ipv6"] = state ? state.ipv6 : undefined;
            resourceInputs["monitor"] = state ? state.monitor : undefined;
            resourceInputs["name"] = state ? state.name : undefined;
            resourceInputs["password"] = state ? state.password : undefined;
            resourceInputs["port"] = state ? state.port : undefined;
            resourceInputs["serverDownOption"] = state ? state.serverDownOption : undefined;
            resourceInputs["username"] = state ? state.username : undefined;
            resourceInputs["vdomparam"] = state ? state.vdomparam : undefined;
        } else {
            const args = argsOrState as WebProxyForwardServerArgs | undefined;
            resourceInputs["addrType"] = args ? args.addrType : undefined;
            resourceInputs["comment"] = args ? args.comment : undefined;
            resourceInputs["fqdn"] = args ? args.fqdn : undefined;
            resourceInputs["healthcheck"] = args ? args.healthcheck : undefined;
            resourceInputs["ip"] = args ? args.ip : undefined;
            resourceInputs["ipv6"] = args ? args.ipv6 : undefined;
            resourceInputs["monitor"] = args ? args.monitor : undefined;
            resourceInputs["name"] = args ? args.name : undefined;
            resourceInputs["password"] = args?.password ? pulumi.secret(args.password) : undefined;
            resourceInputs["port"] = args ? args.port : undefined;
            resourceInputs["serverDownOption"] = args ? args.serverDownOption : undefined;
            resourceInputs["username"] = args ? args.username : undefined;
            resourceInputs["vdomparam"] = args ? args.vdomparam : undefined;
        }
        opts = pulumi.mergeOptions(utilities.resourceOptsDefaults(), opts);
        const secretOpts = { additionalSecretOutputs: ["password"] };
        opts = pulumi.mergeOptions(opts, secretOpts);
        super(WebProxyForwardServer.__pulumiType, name, resourceInputs, opts);
    }
}

/**
 * Input properties used for looking up and filtering WebProxyForwardServer resources.
 */
export interface WebProxyForwardServerState {
    addrType?: pulumi.Input<string>;
    comment?: pulumi.Input<string>;
    fqdn?: pulumi.Input<string>;
    healthcheck?: pulumi.Input<string>;
    ip?: pulumi.Input<string>;
    ipv6?: pulumi.Input<string>;
    monitor?: pulumi.Input<string>;
    name?: pulumi.Input<string>;
    password?: pulumi.Input<string>;
    port?: pulumi.Input<number>;
    serverDownOption?: pulumi.Input<string>;
    username?: pulumi.Input<string>;
    vdomparam?: pulumi.Input<string>;
}

/**
 * The set of arguments for constructing a WebProxyForwardServer resource.
 */
export interface WebProxyForwardServerArgs {
    addrType?: pulumi.Input<string>;
    comment?: pulumi.Input<string>;
    fqdn?: pulumi.Input<string>;
    healthcheck?: pulumi.Input<string>;
    ip?: pulumi.Input<string>;
    ipv6?: pulumi.Input<string>;
    monitor?: pulumi.Input<string>;
    name?: pulumi.Input<string>;
    password?: pulumi.Input<string>;
    port?: pulumi.Input<number>;
    serverDownOption?: pulumi.Input<string>;
    username?: pulumi.Input<string>;
    vdomparam?: pulumi.Input<string>;
}
