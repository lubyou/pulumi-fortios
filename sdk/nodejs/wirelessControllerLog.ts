// *** WARNING: this file was generated by the Pulumi Terraform Bridge (tfgen) Tool. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

import * as pulumi from "@pulumi/pulumi";
import * as utilities from "./utilities";

/**
 * Configure wireless controller event log filters.
 *
 * ## Import
 *
 * WirelessController Log can be imported using any of these accepted formats$ export "FORTIOS_IMPORT_TABLE"="true"
 *
 * ```sh
 *  $ pulumi import fortios:index/wirelessControllerLog:WirelessControllerLog labelname WirelessControllerLog
 * ```
 *
 *  $ unset "FORTIOS_IMPORT_TABLE"
 */
export class WirelessControllerLog extends pulumi.CustomResource {
    /**
     * Get an existing WirelessControllerLog resource's state with the given name, ID, and optional extra
     * properties used to qualify the lookup.
     *
     * @param name The _unique_ name of the resulting resource.
     * @param id The _unique_ provider ID of the resource to lookup.
     * @param state Any extra arguments used during the lookup.
     * @param opts Optional settings to control the behavior of the CustomResource.
     */
    public static get(name: string, id: pulumi.Input<pulumi.ID>, state?: WirelessControllerLogState, opts?: pulumi.CustomResourceOptions): WirelessControllerLog {
        return new WirelessControllerLog(name, <any>state, { ...opts, id: id });
    }

    /** @internal */
    public static readonly __pulumiType = 'fortios:index/wirelessControllerLog:WirelessControllerLog';

    /**
     * Returns true if the given object is an instance of WirelessControllerLog.  This is designed to work even
     * when multiple copies of the Pulumi SDK have been loaded into the same process.
     */
    public static isInstance(obj: any): obj is WirelessControllerLog {
        if (obj === undefined || obj === null) {
            return false;
        }
        return obj['__pulumiType'] === WirelessControllerLog.__pulumiType;
    }

    /**
     * Lowest severity level to log address group message. Valid values: `emergency`, `alert`, `critical`, `error`, `warning`, `notification`, `information`, `debug`.
     */
    public readonly addrgrpLog!: pulumi.Output<string>;
    /**
     * Lowest severity level to log BLE detection message. Valid values: `emergency`, `alert`, `critical`, `error`, `warning`, `notification`, `information`, `debug`.
     */
    public readonly bleLog!: pulumi.Output<string>;
    /**
     * Lowest severity level to log client load balancing message. Valid values: `emergency`, `alert`, `critical`, `error`, `warning`, `notification`, `information`, `debug`.
     */
    public readonly clbLog!: pulumi.Output<string>;
    /**
     * Lowest severity level to log DHCP starvation event message. Valid values: `emergency`, `alert`, `critical`, `error`, `warning`, `notification`, `information`, `debug`.
     */
    public readonly dhcpStarvLog!: pulumi.Output<string>;
    /**
     * Lowest severity level to log LED schedule event message. Valid values: `emergency`, `alert`, `critical`, `error`, `warning`, `notification`, `information`, `debug`.
     */
    public readonly ledSchedLog!: pulumi.Output<string>;
    /**
     * Lowest severity level to log radio event message. Valid values: `emergency`, `alert`, `critical`, `error`, `warning`, `notification`, `information`, `debug`.
     */
    public readonly radioEventLog!: pulumi.Output<string>;
    /**
     * Lowest severity level to log rogue AP event message. Valid values: `emergency`, `alert`, `critical`, `error`, `warning`, `notification`, `information`, `debug`.
     */
    public readonly rogueEventLog!: pulumi.Output<string>;
    /**
     * Lowest severity level to log station event message. Valid values: `emergency`, `alert`, `critical`, `error`, `warning`, `notification`, `information`, `debug`.
     */
    public readonly staEventLog!: pulumi.Output<string>;
    /**
     * Lowest severity level to log station locate message. Valid values: `emergency`, `alert`, `critical`, `error`, `warning`, `notification`, `information`, `debug`.
     */
    public readonly staLocateLog!: pulumi.Output<string>;
    /**
     * Enable/disable wireless event logging. Valid values: `enable`, `disable`.
     */
    public readonly status!: pulumi.Output<string>;
    /**
     * Specifies the vdom to which the resource will be applied when the FortiGate unit is running in VDOM mode. Only one vdom can be specified. If you want to inherit the vdom configuration of the provider, please do not set this parameter.
     */
    public readonly vdomparam!: pulumi.Output<string | undefined>;
    /**
     * Lowest severity level to log WIDS message. Valid values: `emergency`, `alert`, `critical`, `error`, `warning`, `notification`, `information`, `debug`.
     */
    public readonly widsLog!: pulumi.Output<string>;
    /**
     * Lowest severity level to log WTP event message. Valid values: `emergency`, `alert`, `critical`, `error`, `warning`, `notification`, `information`, `debug`.
     */
    public readonly wtpEventLog!: pulumi.Output<string>;

    /**
     * Create a WirelessControllerLog resource with the given unique name, arguments, and options.
     *
     * @param name The _unique_ name of the resource.
     * @param args The arguments to use to populate this resource's properties.
     * @param opts A bag of options that control this resource's behavior.
     */
    constructor(name: string, args?: WirelessControllerLogArgs, opts?: pulumi.CustomResourceOptions)
    constructor(name: string, argsOrState?: WirelessControllerLogArgs | WirelessControllerLogState, opts?: pulumi.CustomResourceOptions) {
        let inputs: pulumi.Inputs = {};
        opts = opts || {};
        if (opts.id) {
            const state = argsOrState as WirelessControllerLogState | undefined;
            inputs["addrgrpLog"] = state ? state.addrgrpLog : undefined;
            inputs["bleLog"] = state ? state.bleLog : undefined;
            inputs["clbLog"] = state ? state.clbLog : undefined;
            inputs["dhcpStarvLog"] = state ? state.dhcpStarvLog : undefined;
            inputs["ledSchedLog"] = state ? state.ledSchedLog : undefined;
            inputs["radioEventLog"] = state ? state.radioEventLog : undefined;
            inputs["rogueEventLog"] = state ? state.rogueEventLog : undefined;
            inputs["staEventLog"] = state ? state.staEventLog : undefined;
            inputs["staLocateLog"] = state ? state.staLocateLog : undefined;
            inputs["status"] = state ? state.status : undefined;
            inputs["vdomparam"] = state ? state.vdomparam : undefined;
            inputs["widsLog"] = state ? state.widsLog : undefined;
            inputs["wtpEventLog"] = state ? state.wtpEventLog : undefined;
        } else {
            const args = argsOrState as WirelessControllerLogArgs | undefined;
            inputs["addrgrpLog"] = args ? args.addrgrpLog : undefined;
            inputs["bleLog"] = args ? args.bleLog : undefined;
            inputs["clbLog"] = args ? args.clbLog : undefined;
            inputs["dhcpStarvLog"] = args ? args.dhcpStarvLog : undefined;
            inputs["ledSchedLog"] = args ? args.ledSchedLog : undefined;
            inputs["radioEventLog"] = args ? args.radioEventLog : undefined;
            inputs["rogueEventLog"] = args ? args.rogueEventLog : undefined;
            inputs["staEventLog"] = args ? args.staEventLog : undefined;
            inputs["staLocateLog"] = args ? args.staLocateLog : undefined;
            inputs["status"] = args ? args.status : undefined;
            inputs["vdomparam"] = args ? args.vdomparam : undefined;
            inputs["widsLog"] = args ? args.widsLog : undefined;
            inputs["wtpEventLog"] = args ? args.wtpEventLog : undefined;
        }
        if (!opts.version) {
            opts = pulumi.mergeOptions(opts, { version: utilities.getVersion()});
        }
        super(WirelessControllerLog.__pulumiType, name, inputs, opts);
    }
}

/**
 * Input properties used for looking up and filtering WirelessControllerLog resources.
 */
export interface WirelessControllerLogState {
    /**
     * Lowest severity level to log address group message. Valid values: `emergency`, `alert`, `critical`, `error`, `warning`, `notification`, `information`, `debug`.
     */
    addrgrpLog?: pulumi.Input<string>;
    /**
     * Lowest severity level to log BLE detection message. Valid values: `emergency`, `alert`, `critical`, `error`, `warning`, `notification`, `information`, `debug`.
     */
    bleLog?: pulumi.Input<string>;
    /**
     * Lowest severity level to log client load balancing message. Valid values: `emergency`, `alert`, `critical`, `error`, `warning`, `notification`, `information`, `debug`.
     */
    clbLog?: pulumi.Input<string>;
    /**
     * Lowest severity level to log DHCP starvation event message. Valid values: `emergency`, `alert`, `critical`, `error`, `warning`, `notification`, `information`, `debug`.
     */
    dhcpStarvLog?: pulumi.Input<string>;
    /**
     * Lowest severity level to log LED schedule event message. Valid values: `emergency`, `alert`, `critical`, `error`, `warning`, `notification`, `information`, `debug`.
     */
    ledSchedLog?: pulumi.Input<string>;
    /**
     * Lowest severity level to log radio event message. Valid values: `emergency`, `alert`, `critical`, `error`, `warning`, `notification`, `information`, `debug`.
     */
    radioEventLog?: pulumi.Input<string>;
    /**
     * Lowest severity level to log rogue AP event message. Valid values: `emergency`, `alert`, `critical`, `error`, `warning`, `notification`, `information`, `debug`.
     */
    rogueEventLog?: pulumi.Input<string>;
    /**
     * Lowest severity level to log station event message. Valid values: `emergency`, `alert`, `critical`, `error`, `warning`, `notification`, `information`, `debug`.
     */
    staEventLog?: pulumi.Input<string>;
    /**
     * Lowest severity level to log station locate message. Valid values: `emergency`, `alert`, `critical`, `error`, `warning`, `notification`, `information`, `debug`.
     */
    staLocateLog?: pulumi.Input<string>;
    /**
     * Enable/disable wireless event logging. Valid values: `enable`, `disable`.
     */
    status?: pulumi.Input<string>;
    /**
     * Specifies the vdom to which the resource will be applied when the FortiGate unit is running in VDOM mode. Only one vdom can be specified. If you want to inherit the vdom configuration of the provider, please do not set this parameter.
     */
    vdomparam?: pulumi.Input<string>;
    /**
     * Lowest severity level to log WIDS message. Valid values: `emergency`, `alert`, `critical`, `error`, `warning`, `notification`, `information`, `debug`.
     */
    widsLog?: pulumi.Input<string>;
    /**
     * Lowest severity level to log WTP event message. Valid values: `emergency`, `alert`, `critical`, `error`, `warning`, `notification`, `information`, `debug`.
     */
    wtpEventLog?: pulumi.Input<string>;
}

/**
 * The set of arguments for constructing a WirelessControllerLog resource.
 */
export interface WirelessControllerLogArgs {
    /**
     * Lowest severity level to log address group message. Valid values: `emergency`, `alert`, `critical`, `error`, `warning`, `notification`, `information`, `debug`.
     */
    addrgrpLog?: pulumi.Input<string>;
    /**
     * Lowest severity level to log BLE detection message. Valid values: `emergency`, `alert`, `critical`, `error`, `warning`, `notification`, `information`, `debug`.
     */
    bleLog?: pulumi.Input<string>;
    /**
     * Lowest severity level to log client load balancing message. Valid values: `emergency`, `alert`, `critical`, `error`, `warning`, `notification`, `information`, `debug`.
     */
    clbLog?: pulumi.Input<string>;
    /**
     * Lowest severity level to log DHCP starvation event message. Valid values: `emergency`, `alert`, `critical`, `error`, `warning`, `notification`, `information`, `debug`.
     */
    dhcpStarvLog?: pulumi.Input<string>;
    /**
     * Lowest severity level to log LED schedule event message. Valid values: `emergency`, `alert`, `critical`, `error`, `warning`, `notification`, `information`, `debug`.
     */
    ledSchedLog?: pulumi.Input<string>;
    /**
     * Lowest severity level to log radio event message. Valid values: `emergency`, `alert`, `critical`, `error`, `warning`, `notification`, `information`, `debug`.
     */
    radioEventLog?: pulumi.Input<string>;
    /**
     * Lowest severity level to log rogue AP event message. Valid values: `emergency`, `alert`, `critical`, `error`, `warning`, `notification`, `information`, `debug`.
     */
    rogueEventLog?: pulumi.Input<string>;
    /**
     * Lowest severity level to log station event message. Valid values: `emergency`, `alert`, `critical`, `error`, `warning`, `notification`, `information`, `debug`.
     */
    staEventLog?: pulumi.Input<string>;
    /**
     * Lowest severity level to log station locate message. Valid values: `emergency`, `alert`, `critical`, `error`, `warning`, `notification`, `information`, `debug`.
     */
    staLocateLog?: pulumi.Input<string>;
    /**
     * Enable/disable wireless event logging. Valid values: `enable`, `disable`.
     */
    status?: pulumi.Input<string>;
    /**
     * Specifies the vdom to which the resource will be applied when the FortiGate unit is running in VDOM mode. Only one vdom can be specified. If you want to inherit the vdom configuration of the provider, please do not set this parameter.
     */
    vdomparam?: pulumi.Input<string>;
    /**
     * Lowest severity level to log WIDS message. Valid values: `emergency`, `alert`, `critical`, `error`, `warning`, `notification`, `information`, `debug`.
     */
    widsLog?: pulumi.Input<string>;
    /**
     * Lowest severity level to log WTP event message. Valid values: `emergency`, `alert`, `critical`, `error`, `warning`, `notification`, `information`, `debug`.
     */
    wtpEventLog?: pulumi.Input<string>;
}
