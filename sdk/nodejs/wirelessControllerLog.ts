// *** WARNING: this file was generated by the Pulumi Terraform Bridge (tfgen) Tool. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

import * as pulumi from "@pulumi/pulumi";
import * as utilities from "./utilities";

export class WirelessControllerLog extends pulumi.CustomResource {
    /**
     * Get an existing WirelessControllerLog resource's state with the given name, ID, and optional extra
     * properties used to qualify the lookup.
     *
     * @param name The _unique_ name of the resulting resource.
     * @param id The _unique_ provider ID of the resource to lookup.
     * @param state Any extra arguments used during the lookup.
     * @param opts Optional settings to control the behavior of the CustomResource.
     */
    public static get(name: string, id: pulumi.Input<pulumi.ID>, state?: WirelessControllerLogState, opts?: pulumi.CustomResourceOptions): WirelessControllerLog {
        return new WirelessControllerLog(name, <any>state, { ...opts, id: id });
    }

    /** @internal */
    public static readonly __pulumiType = 'fortios:index/wirelessControllerLog:WirelessControllerLog';

    /**
     * Returns true if the given object is an instance of WirelessControllerLog.  This is designed to work even
     * when multiple copies of the Pulumi SDK have been loaded into the same process.
     */
    public static isInstance(obj: any): obj is WirelessControllerLog {
        if (obj === undefined || obj === null) {
            return false;
        }
        return obj['__pulumiType'] === WirelessControllerLog.__pulumiType;
    }

    public readonly addrgrpLog!: pulumi.Output<string>;
    public readonly bleLog!: pulumi.Output<string>;
    public readonly clbLog!: pulumi.Output<string>;
    public readonly dhcpStarvLog!: pulumi.Output<string>;
    public readonly ledSchedLog!: pulumi.Output<string>;
    public readonly radioEventLog!: pulumi.Output<string>;
    public readonly rogueEventLog!: pulumi.Output<string>;
    public readonly staEventLog!: pulumi.Output<string>;
    public readonly staLocateLog!: pulumi.Output<string>;
    public readonly status!: pulumi.Output<string>;
    public readonly vdomparam!: pulumi.Output<string | undefined>;
    public readonly widsLog!: pulumi.Output<string>;
    public readonly wtpEventLog!: pulumi.Output<string>;

    /**
     * Create a WirelessControllerLog resource with the given unique name, arguments, and options.
     *
     * @param name The _unique_ name of the resource.
     * @param args The arguments to use to populate this resource's properties.
     * @param opts A bag of options that control this resource's behavior.
     */
    constructor(name: string, args?: WirelessControllerLogArgs, opts?: pulumi.CustomResourceOptions)
    constructor(name: string, argsOrState?: WirelessControllerLogArgs | WirelessControllerLogState, opts?: pulumi.CustomResourceOptions) {
        let resourceInputs: pulumi.Inputs = {};
        opts = opts || {};
        if (opts.id) {
            const state = argsOrState as WirelessControllerLogState | undefined;
            resourceInputs["addrgrpLog"] = state ? state.addrgrpLog : undefined;
            resourceInputs["bleLog"] = state ? state.bleLog : undefined;
            resourceInputs["clbLog"] = state ? state.clbLog : undefined;
            resourceInputs["dhcpStarvLog"] = state ? state.dhcpStarvLog : undefined;
            resourceInputs["ledSchedLog"] = state ? state.ledSchedLog : undefined;
            resourceInputs["radioEventLog"] = state ? state.radioEventLog : undefined;
            resourceInputs["rogueEventLog"] = state ? state.rogueEventLog : undefined;
            resourceInputs["staEventLog"] = state ? state.staEventLog : undefined;
            resourceInputs["staLocateLog"] = state ? state.staLocateLog : undefined;
            resourceInputs["status"] = state ? state.status : undefined;
            resourceInputs["vdomparam"] = state ? state.vdomparam : undefined;
            resourceInputs["widsLog"] = state ? state.widsLog : undefined;
            resourceInputs["wtpEventLog"] = state ? state.wtpEventLog : undefined;
        } else {
            const args = argsOrState as WirelessControllerLogArgs | undefined;
            resourceInputs["addrgrpLog"] = args ? args.addrgrpLog : undefined;
            resourceInputs["bleLog"] = args ? args.bleLog : undefined;
            resourceInputs["clbLog"] = args ? args.clbLog : undefined;
            resourceInputs["dhcpStarvLog"] = args ? args.dhcpStarvLog : undefined;
            resourceInputs["ledSchedLog"] = args ? args.ledSchedLog : undefined;
            resourceInputs["radioEventLog"] = args ? args.radioEventLog : undefined;
            resourceInputs["rogueEventLog"] = args ? args.rogueEventLog : undefined;
            resourceInputs["staEventLog"] = args ? args.staEventLog : undefined;
            resourceInputs["staLocateLog"] = args ? args.staLocateLog : undefined;
            resourceInputs["status"] = args ? args.status : undefined;
            resourceInputs["vdomparam"] = args ? args.vdomparam : undefined;
            resourceInputs["widsLog"] = args ? args.widsLog : undefined;
            resourceInputs["wtpEventLog"] = args ? args.wtpEventLog : undefined;
        }
        opts = pulumi.mergeOptions(utilities.resourceOptsDefaults(), opts);
        super(WirelessControllerLog.__pulumiType, name, resourceInputs, opts);
    }
}

/**
 * Input properties used for looking up and filtering WirelessControllerLog resources.
 */
export interface WirelessControllerLogState {
    addrgrpLog?: pulumi.Input<string>;
    bleLog?: pulumi.Input<string>;
    clbLog?: pulumi.Input<string>;
    dhcpStarvLog?: pulumi.Input<string>;
    ledSchedLog?: pulumi.Input<string>;
    radioEventLog?: pulumi.Input<string>;
    rogueEventLog?: pulumi.Input<string>;
    staEventLog?: pulumi.Input<string>;
    staLocateLog?: pulumi.Input<string>;
    status?: pulumi.Input<string>;
    vdomparam?: pulumi.Input<string>;
    widsLog?: pulumi.Input<string>;
    wtpEventLog?: pulumi.Input<string>;
}

/**
 * The set of arguments for constructing a WirelessControllerLog resource.
 */
export interface WirelessControllerLogArgs {
    addrgrpLog?: pulumi.Input<string>;
    bleLog?: pulumi.Input<string>;
    clbLog?: pulumi.Input<string>;
    dhcpStarvLog?: pulumi.Input<string>;
    ledSchedLog?: pulumi.Input<string>;
    radioEventLog?: pulumi.Input<string>;
    rogueEventLog?: pulumi.Input<string>;
    staEventLog?: pulumi.Input<string>;
    staLocateLog?: pulumi.Input<string>;
    status?: pulumi.Input<string>;
    vdomparam?: pulumi.Input<string>;
    widsLog?: pulumi.Input<string>;
    wtpEventLog?: pulumi.Input<string>;
}
