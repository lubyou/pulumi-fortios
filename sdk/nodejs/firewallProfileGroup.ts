// *** WARNING: this file was generated by the Pulumi Terraform Bridge (tfgen) Tool. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

import * as pulumi from "@pulumi/pulumi";
import * as utilities from "./utilities";

/**
 * Configure profile groups.
 *
 * ## Example Usage
 *
 * ```typescript
 * import * as pulumi from "@pulumi/pulumi";
 * import * as fortios from "@pulumi/fortios";
 *
 * const trname = new fortios.FirewallProfileGroup("trname", {
 *     profileProtocolOptions: "default",
 *     sslSshProfile: "deep-inspection",
 * });
 * ```
 *
 * ## Import
 *
 * Firewall ProfileGroup can be imported using any of these accepted formats$ export "FORTIOS_IMPORT_TABLE"="true"
 *
 * ```sh
 *  $ pulumi import fortios:index/firewallProfileGroup:FirewallProfileGroup labelname {{name}}
 * ```
 *
 *  $ unset "FORTIOS_IMPORT_TABLE"
 */
export class FirewallProfileGroup extends pulumi.CustomResource {
    /**
     * Get an existing FirewallProfileGroup resource's state with the given name, ID, and optional extra
     * properties used to qualify the lookup.
     *
     * @param name The _unique_ name of the resulting resource.
     * @param id The _unique_ provider ID of the resource to lookup.
     * @param state Any extra arguments used during the lookup.
     * @param opts Optional settings to control the behavior of the CustomResource.
     */
    public static get(name: string, id: pulumi.Input<pulumi.ID>, state?: FirewallProfileGroupState, opts?: pulumi.CustomResourceOptions): FirewallProfileGroup {
        return new FirewallProfileGroup(name, <any>state, { ...opts, id: id });
    }

    /** @internal */
    public static readonly __pulumiType = 'fortios:index/firewallProfileGroup:FirewallProfileGroup';

    /**
     * Returns true if the given object is an instance of FirewallProfileGroup.  This is designed to work even
     * when multiple copies of the Pulumi SDK have been loaded into the same process.
     */
    public static isInstance(obj: any): obj is FirewallProfileGroup {
        if (obj === undefined || obj === null) {
            return false;
        }
        return obj['__pulumiType'] === FirewallProfileGroup.__pulumiType;
    }

    /**
     * Name of an existing Application list.
     */
    public readonly applicationList!: pulumi.Output<string>;
    /**
     * Name of an existing Antivirus profile.
     */
    public readonly avProfile!: pulumi.Output<string>;
    /**
     * Name of an existing CIFS profile.
     */
    public readonly cifsProfile!: pulumi.Output<string>;
    /**
     * Name of an existing DLP sensor.
     */
    public readonly dlpSensor!: pulumi.Output<string>;
    /**
     * Name of an existing DNS filter profile.
     */
    public readonly dnsfilterProfile!: pulumi.Output<string>;
    /**
     * Name of an existing email filter profile.
     */
    public readonly emailfilterProfile!: pulumi.Output<string>;
    /**
     * Name of an existing file-filter profile.
     */
    public readonly fileFilterProfile!: pulumi.Output<string>;
    /**
     * Name of an existing ICAP profile.
     */
    public readonly icapProfile!: pulumi.Output<string>;
    /**
     * Name of an existing IPS sensor.
     */
    public readonly ipsSensor!: pulumi.Output<string>;
    /**
     * Profile group name.
     */
    public readonly name!: pulumi.Output<string>;
    /**
     * Name of an existing Protocol options profile.
     */
    public readonly profileProtocolOptions!: pulumi.Output<string>;
    /**
     * Name of an existing Spam filter profile.
     */
    public readonly spamfilterProfile!: pulumi.Output<string>;
    /**
     * Name of an existing SSH filter profile.
     */
    public readonly sshFilterProfile!: pulumi.Output<string>;
    /**
     * Name of an existing SSL SSH profile.
     */
    public readonly sslSshProfile!: pulumi.Output<string>;
    /**
     * Specifies the vdom to which the resource will be applied when the FortiGate unit is running in VDOM mode. Only one vdom can be specified. If you want to inherit the vdom configuration of the provider, please do not set this parameter.
     */
    public readonly vdomparam!: pulumi.Output<string | undefined>;
    /**
     * Name of an existing VoIP profile.
     */
    public readonly voipProfile!: pulumi.Output<string>;
    /**
     * Name of an existing Web application firewall profile.
     */
    public readonly wafProfile!: pulumi.Output<string>;
    /**
     * Name of an existing Web filter profile.
     */
    public readonly webfilterProfile!: pulumi.Output<string>;

    /**
     * Create a FirewallProfileGroup resource with the given unique name, arguments, and options.
     *
     * @param name The _unique_ name of the resource.
     * @param args The arguments to use to populate this resource's properties.
     * @param opts A bag of options that control this resource's behavior.
     */
    constructor(name: string, args?: FirewallProfileGroupArgs, opts?: pulumi.CustomResourceOptions)
    constructor(name: string, argsOrState?: FirewallProfileGroupArgs | FirewallProfileGroupState, opts?: pulumi.CustomResourceOptions) {
        let inputs: pulumi.Inputs = {};
        opts = opts || {};
        if (opts.id) {
            const state = argsOrState as FirewallProfileGroupState | undefined;
            inputs["applicationList"] = state ? state.applicationList : undefined;
            inputs["avProfile"] = state ? state.avProfile : undefined;
            inputs["cifsProfile"] = state ? state.cifsProfile : undefined;
            inputs["dlpSensor"] = state ? state.dlpSensor : undefined;
            inputs["dnsfilterProfile"] = state ? state.dnsfilterProfile : undefined;
            inputs["emailfilterProfile"] = state ? state.emailfilterProfile : undefined;
            inputs["fileFilterProfile"] = state ? state.fileFilterProfile : undefined;
            inputs["icapProfile"] = state ? state.icapProfile : undefined;
            inputs["ipsSensor"] = state ? state.ipsSensor : undefined;
            inputs["name"] = state ? state.name : undefined;
            inputs["profileProtocolOptions"] = state ? state.profileProtocolOptions : undefined;
            inputs["spamfilterProfile"] = state ? state.spamfilterProfile : undefined;
            inputs["sshFilterProfile"] = state ? state.sshFilterProfile : undefined;
            inputs["sslSshProfile"] = state ? state.sslSshProfile : undefined;
            inputs["vdomparam"] = state ? state.vdomparam : undefined;
            inputs["voipProfile"] = state ? state.voipProfile : undefined;
            inputs["wafProfile"] = state ? state.wafProfile : undefined;
            inputs["webfilterProfile"] = state ? state.webfilterProfile : undefined;
        } else {
            const args = argsOrState as FirewallProfileGroupArgs | undefined;
            inputs["applicationList"] = args ? args.applicationList : undefined;
            inputs["avProfile"] = args ? args.avProfile : undefined;
            inputs["cifsProfile"] = args ? args.cifsProfile : undefined;
            inputs["dlpSensor"] = args ? args.dlpSensor : undefined;
            inputs["dnsfilterProfile"] = args ? args.dnsfilterProfile : undefined;
            inputs["emailfilterProfile"] = args ? args.emailfilterProfile : undefined;
            inputs["fileFilterProfile"] = args ? args.fileFilterProfile : undefined;
            inputs["icapProfile"] = args ? args.icapProfile : undefined;
            inputs["ipsSensor"] = args ? args.ipsSensor : undefined;
            inputs["name"] = args ? args.name : undefined;
            inputs["profileProtocolOptions"] = args ? args.profileProtocolOptions : undefined;
            inputs["spamfilterProfile"] = args ? args.spamfilterProfile : undefined;
            inputs["sshFilterProfile"] = args ? args.sshFilterProfile : undefined;
            inputs["sslSshProfile"] = args ? args.sslSshProfile : undefined;
            inputs["vdomparam"] = args ? args.vdomparam : undefined;
            inputs["voipProfile"] = args ? args.voipProfile : undefined;
            inputs["wafProfile"] = args ? args.wafProfile : undefined;
            inputs["webfilterProfile"] = args ? args.webfilterProfile : undefined;
        }
        if (!opts.version) {
            opts = pulumi.mergeOptions(opts, { version: utilities.getVersion()});
        }
        super(FirewallProfileGroup.__pulumiType, name, inputs, opts);
    }
}

/**
 * Input properties used for looking up and filtering FirewallProfileGroup resources.
 */
export interface FirewallProfileGroupState {
    /**
     * Name of an existing Application list.
     */
    applicationList?: pulumi.Input<string>;
    /**
     * Name of an existing Antivirus profile.
     */
    avProfile?: pulumi.Input<string>;
    /**
     * Name of an existing CIFS profile.
     */
    cifsProfile?: pulumi.Input<string>;
    /**
     * Name of an existing DLP sensor.
     */
    dlpSensor?: pulumi.Input<string>;
    /**
     * Name of an existing DNS filter profile.
     */
    dnsfilterProfile?: pulumi.Input<string>;
    /**
     * Name of an existing email filter profile.
     */
    emailfilterProfile?: pulumi.Input<string>;
    /**
     * Name of an existing file-filter profile.
     */
    fileFilterProfile?: pulumi.Input<string>;
    /**
     * Name of an existing ICAP profile.
     */
    icapProfile?: pulumi.Input<string>;
    /**
     * Name of an existing IPS sensor.
     */
    ipsSensor?: pulumi.Input<string>;
    /**
     * Profile group name.
     */
    name?: pulumi.Input<string>;
    /**
     * Name of an existing Protocol options profile.
     */
    profileProtocolOptions?: pulumi.Input<string>;
    /**
     * Name of an existing Spam filter profile.
     */
    spamfilterProfile?: pulumi.Input<string>;
    /**
     * Name of an existing SSH filter profile.
     */
    sshFilterProfile?: pulumi.Input<string>;
    /**
     * Name of an existing SSL SSH profile.
     */
    sslSshProfile?: pulumi.Input<string>;
    /**
     * Specifies the vdom to which the resource will be applied when the FortiGate unit is running in VDOM mode. Only one vdom can be specified. If you want to inherit the vdom configuration of the provider, please do not set this parameter.
     */
    vdomparam?: pulumi.Input<string>;
    /**
     * Name of an existing VoIP profile.
     */
    voipProfile?: pulumi.Input<string>;
    /**
     * Name of an existing Web application firewall profile.
     */
    wafProfile?: pulumi.Input<string>;
    /**
     * Name of an existing Web filter profile.
     */
    webfilterProfile?: pulumi.Input<string>;
}

/**
 * The set of arguments for constructing a FirewallProfileGroup resource.
 */
export interface FirewallProfileGroupArgs {
    /**
     * Name of an existing Application list.
     */
    applicationList?: pulumi.Input<string>;
    /**
     * Name of an existing Antivirus profile.
     */
    avProfile?: pulumi.Input<string>;
    /**
     * Name of an existing CIFS profile.
     */
    cifsProfile?: pulumi.Input<string>;
    /**
     * Name of an existing DLP sensor.
     */
    dlpSensor?: pulumi.Input<string>;
    /**
     * Name of an existing DNS filter profile.
     */
    dnsfilterProfile?: pulumi.Input<string>;
    /**
     * Name of an existing email filter profile.
     */
    emailfilterProfile?: pulumi.Input<string>;
    /**
     * Name of an existing file-filter profile.
     */
    fileFilterProfile?: pulumi.Input<string>;
    /**
     * Name of an existing ICAP profile.
     */
    icapProfile?: pulumi.Input<string>;
    /**
     * Name of an existing IPS sensor.
     */
    ipsSensor?: pulumi.Input<string>;
    /**
     * Profile group name.
     */
    name?: pulumi.Input<string>;
    /**
     * Name of an existing Protocol options profile.
     */
    profileProtocolOptions?: pulumi.Input<string>;
    /**
     * Name of an existing Spam filter profile.
     */
    spamfilterProfile?: pulumi.Input<string>;
    /**
     * Name of an existing SSH filter profile.
     */
    sshFilterProfile?: pulumi.Input<string>;
    /**
     * Name of an existing SSL SSH profile.
     */
    sslSshProfile?: pulumi.Input<string>;
    /**
     * Specifies the vdom to which the resource will be applied when the FortiGate unit is running in VDOM mode. Only one vdom can be specified. If you want to inherit the vdom configuration of the provider, please do not set this parameter.
     */
    vdomparam?: pulumi.Input<string>;
    /**
     * Name of an existing VoIP profile.
     */
    voipProfile?: pulumi.Input<string>;
    /**
     * Name of an existing Web application firewall profile.
     */
    wafProfile?: pulumi.Input<string>;
    /**
     * Name of an existing Web filter profile.
     */
    webfilterProfile?: pulumi.Input<string>;
}
