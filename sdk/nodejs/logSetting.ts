// *** WARNING: this file was generated by the Pulumi Terraform Bridge (tfgen) Tool. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

import * as pulumi from "@pulumi/pulumi";
import { input as inputs, output as outputs } from "./types";
import * as utilities from "./utilities";

/**
 * Configure general log settings.
 *
 * ## Example Usage
 *
 * ```typescript
 * import * as pulumi from "@pulumi/pulumi";
 * import * as fortios from "@pulumi/fortios";
 *
 * const trname = new fortios.LogSetting("trname", {
 *     briefTrafficFormat: "disable",
 *     daemonLog: "disable",
 *     expolicyImplicitLog: "disable",
 *     fazOverride: "disable",
 *     fwpolicy6ImplicitLog: "disable",
 *     fwpolicyImplicitLog: "disable",
 *     localInAllow: "disable",
 *     localInDenyBroadcast: "disable",
 *     localInDenyUnicast: "disable",
 *     localOut: "disable",
 *     logInvalidPacket: "disable",
 *     logPolicyComment: "disable",
 *     logPolicyName: "disable",
 *     logUserInUpper: "disable",
 *     neighborEvent: "disable",
 *     resolveIp: "disable",
 *     resolvePort: "enable",
 *     syslogOverride: "disable",
 *     userAnonymize: "disable",
 * });
 * ```
 *
 * ## Import
 *
 * Log Setting can be imported using any of these accepted formats$ export "FORTIOS_IMPORT_TABLE"="true"
 *
 * ```sh
 *  $ pulumi import fortios:index/logSetting:LogSetting labelname LogSetting
 * ```
 *
 *  $ unset "FORTIOS_IMPORT_TABLE"
 */
export class LogSetting extends pulumi.CustomResource {
    /**
     * Get an existing LogSetting resource's state with the given name, ID, and optional extra
     * properties used to qualify the lookup.
     *
     * @param name The _unique_ name of the resulting resource.
     * @param id The _unique_ provider ID of the resource to lookup.
     * @param state Any extra arguments used during the lookup.
     * @param opts Optional settings to control the behavior of the CustomResource.
     */
    public static get(name: string, id: pulumi.Input<pulumi.ID>, state?: LogSettingState, opts?: pulumi.CustomResourceOptions): LogSetting {
        return new LogSetting(name, <any>state, { ...opts, id: id });
    }

    /** @internal */
    public static readonly __pulumiType = 'fortios:index/logSetting:LogSetting';

    /**
     * Returns true if the given object is an instance of LogSetting.  This is designed to work even
     * when multiple copies of the Pulumi SDK have been loaded into the same process.
     */
    public static isInstance(obj: any): obj is LogSetting {
        if (obj === undefined || obj === null) {
            return false;
        }
        return obj['__pulumiType'] === LogSetting.__pulumiType;
    }

    /**
     * Enable/disable brief format traffic logging. Valid values: `enable`, `disable`.
     */
    public readonly briefTrafficFormat!: pulumi.Output<string>;
    /**
     * Custom fields to append to all log messages. The structure of `customLogFields` block is documented below.
     */
    public readonly customLogFields!: pulumi.Output<outputs.LogSettingCustomLogField[] | undefined>;
    /**
     * Enable/disable daemon logging. Valid values: `enable`, `disable`.
     */
    public readonly daemonLog!: pulumi.Output<string>;
    /**
     * true or false, set this parameter to true when using dynamic forEach + toset to configure and sort sub-tables, please do not set this parameter when configuring static sub-tables.
     */
    public readonly dynamicSortSubtable!: pulumi.Output<string | undefined>;
    /**
     * Enable/disable explicit proxy firewall implicit policy logging. Valid values: `enable`, `disable`.
     */
    public readonly expolicyImplicitLog!: pulumi.Output<string>;
    /**
     * Enable/disable override FortiAnalyzer settings. Valid values: `enable`, `disable`.
     */
    public readonly fazOverride!: pulumi.Output<string>;
    /**
     * Enable/disable implicit firewall policy6 logging. Valid values: `enable`, `disable`.
     */
    public readonly fwpolicy6ImplicitLog!: pulumi.Output<string>;
    /**
     * Enable/disable implicit firewall policy logging. Valid values: `enable`, `disable`.
     */
    public readonly fwpolicyImplicitLog!: pulumi.Output<string>;
    /**
     * Enable/disable local-in-allow logging. Valid values: `enable`, `disable`.
     */
    public readonly localInAllow!: pulumi.Output<string>;
    /**
     * Enable/disable local-in-deny-broadcast logging. Valid values: `enable`, `disable`.
     */
    public readonly localInDenyBroadcast!: pulumi.Output<string>;
    /**
     * Enable/disable local-in-deny-unicast logging. Valid values: `enable`, `disable`.
     */
    public readonly localInDenyUnicast!: pulumi.Output<string>;
    /**
     * Enable/disable local-out logging. Valid values: `enable`, `disable`.
     */
    public readonly localOut!: pulumi.Output<string>;
    /**
     * Enable/disable invalid packet traffic logging. Valid values: `enable`, `disable`.
     */
    public readonly logInvalidPacket!: pulumi.Output<string>;
    /**
     * Enable/disable inserting policy comments into traffic logs. Valid values: `enable`, `disable`.
     */
    public readonly logPolicyComment!: pulumi.Output<string>;
    /**
     * Enable/disable inserting policy name into traffic logs. Valid values: `enable`, `disable`.
     */
    public readonly logPolicyName!: pulumi.Output<string>;
    /**
     * Enable/disable logs with user-in-upper. Valid values: `enable`, `disable`.
     */
    public readonly logUserInUpper!: pulumi.Output<string>;
    /**
     * Enable/disable neighbor event logging. Valid values: `enable`, `disable`.
     */
    public readonly neighborEvent!: pulumi.Output<string>;
    /**
     * Enable/disable adding resolved domain names to traffic logs if possible. Valid values: `enable`, `disable`.
     */
    public readonly resolveIp!: pulumi.Output<string>;
    /**
     * Enable/disable adding resolved service names to traffic logs. Valid values: `enable`, `disable`.
     */
    public readonly resolvePort!: pulumi.Output<string>;
    /**
     * Enable/disable override Syslog settings. Valid values: `enable`, `disable`.
     */
    public readonly syslogOverride!: pulumi.Output<string>;
    /**
     * Enable/disable anonymizing user names in log messages. Valid values: `enable`, `disable`.
     */
    public readonly userAnonymize!: pulumi.Output<string>;
    /**
     * Specifies the vdom to which the resource will be applied when the FortiGate unit is running in VDOM mode. Only one vdom can be specified. If you want to inherit the vdom configuration of the provider, please do not set this parameter.
     */
    public readonly vdomparam!: pulumi.Output<string | undefined>;

    /**
     * Create a LogSetting resource with the given unique name, arguments, and options.
     *
     * @param name The _unique_ name of the resource.
     * @param args The arguments to use to populate this resource's properties.
     * @param opts A bag of options that control this resource's behavior.
     */
    constructor(name: string, args?: LogSettingArgs, opts?: pulumi.CustomResourceOptions)
    constructor(name: string, argsOrState?: LogSettingArgs | LogSettingState, opts?: pulumi.CustomResourceOptions) {
        let inputs: pulumi.Inputs = {};
        opts = opts || {};
        if (opts.id) {
            const state = argsOrState as LogSettingState | undefined;
            inputs["briefTrafficFormat"] = state ? state.briefTrafficFormat : undefined;
            inputs["customLogFields"] = state ? state.customLogFields : undefined;
            inputs["daemonLog"] = state ? state.daemonLog : undefined;
            inputs["dynamicSortSubtable"] = state ? state.dynamicSortSubtable : undefined;
            inputs["expolicyImplicitLog"] = state ? state.expolicyImplicitLog : undefined;
            inputs["fazOverride"] = state ? state.fazOverride : undefined;
            inputs["fwpolicy6ImplicitLog"] = state ? state.fwpolicy6ImplicitLog : undefined;
            inputs["fwpolicyImplicitLog"] = state ? state.fwpolicyImplicitLog : undefined;
            inputs["localInAllow"] = state ? state.localInAllow : undefined;
            inputs["localInDenyBroadcast"] = state ? state.localInDenyBroadcast : undefined;
            inputs["localInDenyUnicast"] = state ? state.localInDenyUnicast : undefined;
            inputs["localOut"] = state ? state.localOut : undefined;
            inputs["logInvalidPacket"] = state ? state.logInvalidPacket : undefined;
            inputs["logPolicyComment"] = state ? state.logPolicyComment : undefined;
            inputs["logPolicyName"] = state ? state.logPolicyName : undefined;
            inputs["logUserInUpper"] = state ? state.logUserInUpper : undefined;
            inputs["neighborEvent"] = state ? state.neighborEvent : undefined;
            inputs["resolveIp"] = state ? state.resolveIp : undefined;
            inputs["resolvePort"] = state ? state.resolvePort : undefined;
            inputs["syslogOverride"] = state ? state.syslogOverride : undefined;
            inputs["userAnonymize"] = state ? state.userAnonymize : undefined;
            inputs["vdomparam"] = state ? state.vdomparam : undefined;
        } else {
            const args = argsOrState as LogSettingArgs | undefined;
            inputs["briefTrafficFormat"] = args ? args.briefTrafficFormat : undefined;
            inputs["customLogFields"] = args ? args.customLogFields : undefined;
            inputs["daemonLog"] = args ? args.daemonLog : undefined;
            inputs["dynamicSortSubtable"] = args ? args.dynamicSortSubtable : undefined;
            inputs["expolicyImplicitLog"] = args ? args.expolicyImplicitLog : undefined;
            inputs["fazOverride"] = args ? args.fazOverride : undefined;
            inputs["fwpolicy6ImplicitLog"] = args ? args.fwpolicy6ImplicitLog : undefined;
            inputs["fwpolicyImplicitLog"] = args ? args.fwpolicyImplicitLog : undefined;
            inputs["localInAllow"] = args ? args.localInAllow : undefined;
            inputs["localInDenyBroadcast"] = args ? args.localInDenyBroadcast : undefined;
            inputs["localInDenyUnicast"] = args ? args.localInDenyUnicast : undefined;
            inputs["localOut"] = args ? args.localOut : undefined;
            inputs["logInvalidPacket"] = args ? args.logInvalidPacket : undefined;
            inputs["logPolicyComment"] = args ? args.logPolicyComment : undefined;
            inputs["logPolicyName"] = args ? args.logPolicyName : undefined;
            inputs["logUserInUpper"] = args ? args.logUserInUpper : undefined;
            inputs["neighborEvent"] = args ? args.neighborEvent : undefined;
            inputs["resolveIp"] = args ? args.resolveIp : undefined;
            inputs["resolvePort"] = args ? args.resolvePort : undefined;
            inputs["syslogOverride"] = args ? args.syslogOverride : undefined;
            inputs["userAnonymize"] = args ? args.userAnonymize : undefined;
            inputs["vdomparam"] = args ? args.vdomparam : undefined;
        }
        if (!opts.version) {
            opts = pulumi.mergeOptions(opts, { version: utilities.getVersion()});
        }
        super(LogSetting.__pulumiType, name, inputs, opts);
    }
}

/**
 * Input properties used for looking up and filtering LogSetting resources.
 */
export interface LogSettingState {
    /**
     * Enable/disable brief format traffic logging. Valid values: `enable`, `disable`.
     */
    briefTrafficFormat?: pulumi.Input<string>;
    /**
     * Custom fields to append to all log messages. The structure of `customLogFields` block is documented below.
     */
    customLogFields?: pulumi.Input<pulumi.Input<inputs.LogSettingCustomLogField>[]>;
    /**
     * Enable/disable daemon logging. Valid values: `enable`, `disable`.
     */
    daemonLog?: pulumi.Input<string>;
    /**
     * true or false, set this parameter to true when using dynamic forEach + toset to configure and sort sub-tables, please do not set this parameter when configuring static sub-tables.
     */
    dynamicSortSubtable?: pulumi.Input<string>;
    /**
     * Enable/disable explicit proxy firewall implicit policy logging. Valid values: `enable`, `disable`.
     */
    expolicyImplicitLog?: pulumi.Input<string>;
    /**
     * Enable/disable override FortiAnalyzer settings. Valid values: `enable`, `disable`.
     */
    fazOverride?: pulumi.Input<string>;
    /**
     * Enable/disable implicit firewall policy6 logging. Valid values: `enable`, `disable`.
     */
    fwpolicy6ImplicitLog?: pulumi.Input<string>;
    /**
     * Enable/disable implicit firewall policy logging. Valid values: `enable`, `disable`.
     */
    fwpolicyImplicitLog?: pulumi.Input<string>;
    /**
     * Enable/disable local-in-allow logging. Valid values: `enable`, `disable`.
     */
    localInAllow?: pulumi.Input<string>;
    /**
     * Enable/disable local-in-deny-broadcast logging. Valid values: `enable`, `disable`.
     */
    localInDenyBroadcast?: pulumi.Input<string>;
    /**
     * Enable/disable local-in-deny-unicast logging. Valid values: `enable`, `disable`.
     */
    localInDenyUnicast?: pulumi.Input<string>;
    /**
     * Enable/disable local-out logging. Valid values: `enable`, `disable`.
     */
    localOut?: pulumi.Input<string>;
    /**
     * Enable/disable invalid packet traffic logging. Valid values: `enable`, `disable`.
     */
    logInvalidPacket?: pulumi.Input<string>;
    /**
     * Enable/disable inserting policy comments into traffic logs. Valid values: `enable`, `disable`.
     */
    logPolicyComment?: pulumi.Input<string>;
    /**
     * Enable/disable inserting policy name into traffic logs. Valid values: `enable`, `disable`.
     */
    logPolicyName?: pulumi.Input<string>;
    /**
     * Enable/disable logs with user-in-upper. Valid values: `enable`, `disable`.
     */
    logUserInUpper?: pulumi.Input<string>;
    /**
     * Enable/disable neighbor event logging. Valid values: `enable`, `disable`.
     */
    neighborEvent?: pulumi.Input<string>;
    /**
     * Enable/disable adding resolved domain names to traffic logs if possible. Valid values: `enable`, `disable`.
     */
    resolveIp?: pulumi.Input<string>;
    /**
     * Enable/disable adding resolved service names to traffic logs. Valid values: `enable`, `disable`.
     */
    resolvePort?: pulumi.Input<string>;
    /**
     * Enable/disable override Syslog settings. Valid values: `enable`, `disable`.
     */
    syslogOverride?: pulumi.Input<string>;
    /**
     * Enable/disable anonymizing user names in log messages. Valid values: `enable`, `disable`.
     */
    userAnonymize?: pulumi.Input<string>;
    /**
     * Specifies the vdom to which the resource will be applied when the FortiGate unit is running in VDOM mode. Only one vdom can be specified. If you want to inherit the vdom configuration of the provider, please do not set this parameter.
     */
    vdomparam?: pulumi.Input<string>;
}

/**
 * The set of arguments for constructing a LogSetting resource.
 */
export interface LogSettingArgs {
    /**
     * Enable/disable brief format traffic logging. Valid values: `enable`, `disable`.
     */
    briefTrafficFormat?: pulumi.Input<string>;
    /**
     * Custom fields to append to all log messages. The structure of `customLogFields` block is documented below.
     */
    customLogFields?: pulumi.Input<pulumi.Input<inputs.LogSettingCustomLogField>[]>;
    /**
     * Enable/disable daemon logging. Valid values: `enable`, `disable`.
     */
    daemonLog?: pulumi.Input<string>;
    /**
     * true or false, set this parameter to true when using dynamic forEach + toset to configure and sort sub-tables, please do not set this parameter when configuring static sub-tables.
     */
    dynamicSortSubtable?: pulumi.Input<string>;
    /**
     * Enable/disable explicit proxy firewall implicit policy logging. Valid values: `enable`, `disable`.
     */
    expolicyImplicitLog?: pulumi.Input<string>;
    /**
     * Enable/disable override FortiAnalyzer settings. Valid values: `enable`, `disable`.
     */
    fazOverride?: pulumi.Input<string>;
    /**
     * Enable/disable implicit firewall policy6 logging. Valid values: `enable`, `disable`.
     */
    fwpolicy6ImplicitLog?: pulumi.Input<string>;
    /**
     * Enable/disable implicit firewall policy logging. Valid values: `enable`, `disable`.
     */
    fwpolicyImplicitLog?: pulumi.Input<string>;
    /**
     * Enable/disable local-in-allow logging. Valid values: `enable`, `disable`.
     */
    localInAllow?: pulumi.Input<string>;
    /**
     * Enable/disable local-in-deny-broadcast logging. Valid values: `enable`, `disable`.
     */
    localInDenyBroadcast?: pulumi.Input<string>;
    /**
     * Enable/disable local-in-deny-unicast logging. Valid values: `enable`, `disable`.
     */
    localInDenyUnicast?: pulumi.Input<string>;
    /**
     * Enable/disable local-out logging. Valid values: `enable`, `disable`.
     */
    localOut?: pulumi.Input<string>;
    /**
     * Enable/disable invalid packet traffic logging. Valid values: `enable`, `disable`.
     */
    logInvalidPacket?: pulumi.Input<string>;
    /**
     * Enable/disable inserting policy comments into traffic logs. Valid values: `enable`, `disable`.
     */
    logPolicyComment?: pulumi.Input<string>;
    /**
     * Enable/disable inserting policy name into traffic logs. Valid values: `enable`, `disable`.
     */
    logPolicyName?: pulumi.Input<string>;
    /**
     * Enable/disable logs with user-in-upper. Valid values: `enable`, `disable`.
     */
    logUserInUpper?: pulumi.Input<string>;
    /**
     * Enable/disable neighbor event logging. Valid values: `enable`, `disable`.
     */
    neighborEvent?: pulumi.Input<string>;
    /**
     * Enable/disable adding resolved domain names to traffic logs if possible. Valid values: `enable`, `disable`.
     */
    resolveIp?: pulumi.Input<string>;
    /**
     * Enable/disable adding resolved service names to traffic logs. Valid values: `enable`, `disable`.
     */
    resolvePort?: pulumi.Input<string>;
    /**
     * Enable/disable override Syslog settings. Valid values: `enable`, `disable`.
     */
    syslogOverride?: pulumi.Input<string>;
    /**
     * Enable/disable anonymizing user names in log messages. Valid values: `enable`, `disable`.
     */
    userAnonymize?: pulumi.Input<string>;
    /**
     * Specifies the vdom to which the resource will be applied when the FortiGate unit is running in VDOM mode. Only one vdom can be specified. If you want to inherit the vdom configuration of the provider, please do not set this parameter.
     */
    vdomparam?: pulumi.Input<string>;
}
