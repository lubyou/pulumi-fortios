// *** WARNING: this file was generated by the Pulumi Terraform Bridge (tfgen) Tool. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

import * as pulumi from "@pulumi/pulumi";
import { input as inputs, output as outputs } from "./types";
import * as utilities from "./utilities";

/**
 * Provides a resource to configure API users of FortiOS. The API user of the token for this feature should have a super admin profile, It can be set in CLI while GUI does not allow.
 *
 * !> **Warning:** The resource will be deprecated and replaced by new resource `fortios.SystemApiUser`, we recommend that you use the new resource.
 *
 * ## Example Usage
 *
 * ```typescript
 * import * as pulumi from "@pulumi/pulumi";
 * import * as fortios from "@pulumi/fortios";
 *
 * const test2 = new fortios.SystemAPIUserSetting("test2", {
 *     accprofile: "restAPIprofile",
 *     trusthosts: [
 *         {
 *             ipv4Trusthost: "61.149.0.0 255.255.0.0",
 *             type: "ipv4-trusthost",
 *         },
 *         {
 *             ipv4Trusthost: "22.22.0.0 255.255.0.0",
 *             type: "ipv4-trusthost",
 *         },
 *     ],
 *     vdoms: ["root"],
 * });
 * ```
 */
export class SystemAPIUserSetting extends pulumi.CustomResource {
    /**
     * Get an existing SystemAPIUserSetting resource's state with the given name, ID, and optional extra
     * properties used to qualify the lookup.
     *
     * @param name The _unique_ name of the resulting resource.
     * @param id The _unique_ provider ID of the resource to lookup.
     * @param state Any extra arguments used during the lookup.
     * @param opts Optional settings to control the behavior of the CustomResource.
     */
    public static get(name: string, id: pulumi.Input<pulumi.ID>, state?: SystemAPIUserSettingState, opts?: pulumi.CustomResourceOptions): SystemAPIUserSetting {
        return new SystemAPIUserSetting(name, <any>state, { ...opts, id: id });
    }

    /** @internal */
    public static readonly __pulumiType = 'fortios:index/systemAPIUserSetting:SystemAPIUserSetting';

    /**
     * Returns true if the given object is an instance of SystemAPIUserSetting.  This is designed to work even
     * when multiple copies of the Pulumi SDK have been loaded into the same process.
     */
    public static isInstance(obj: any): obj is SystemAPIUserSetting {
        if (obj === undefined || obj === null) {
            return false;
        }
        return obj['__pulumiType'] === SystemAPIUserSetting.__pulumiType;
    }

    /**
     * Admin user access profile.
     */
    public readonly accprofile!: pulumi.Output<string>;
    /**
     * Comment.
     */
    public readonly comments!: pulumi.Output<string | undefined>;
    /**
     * User name.
     */
    public readonly name!: pulumi.Output<string>;
    public readonly trusthosts!: pulumi.Output<outputs.SystemAPIUserSettingTrusthost[]>;
    /**
     * Virtual domains.
     * * `trusthost-Type` - (Required) Trusthost type.
     * * `trusthost-ipv4_trusthost` - (Required) IPv4 trusted host address.
     */
    public readonly vdoms!: pulumi.Output<string[]>;

    /**
     * Create a SystemAPIUserSetting resource with the given unique name, arguments, and options.
     *
     * @param name The _unique_ name of the resource.
     * @param args The arguments to use to populate this resource's properties.
     * @param opts A bag of options that control this resource's behavior.
     */
    constructor(name: string, args: SystemAPIUserSettingArgs, opts?: pulumi.CustomResourceOptions)
    constructor(name: string, argsOrState?: SystemAPIUserSettingArgs | SystemAPIUserSettingState, opts?: pulumi.CustomResourceOptions) {
        let inputs: pulumi.Inputs = {};
        opts = opts || {};
        if (opts.id) {
            const state = argsOrState as SystemAPIUserSettingState | undefined;
            inputs["accprofile"] = state ? state.accprofile : undefined;
            inputs["comments"] = state ? state.comments : undefined;
            inputs["name"] = state ? state.name : undefined;
            inputs["trusthosts"] = state ? state.trusthosts : undefined;
            inputs["vdoms"] = state ? state.vdoms : undefined;
        } else {
            const args = argsOrState as SystemAPIUserSettingArgs | undefined;
            if ((!args || args.accprofile === undefined) && !opts.urn) {
                throw new Error("Missing required property 'accprofile'");
            }
            if ((!args || args.trusthosts === undefined) && !opts.urn) {
                throw new Error("Missing required property 'trusthosts'");
            }
            if ((!args || args.vdoms === undefined) && !opts.urn) {
                throw new Error("Missing required property 'vdoms'");
            }
            inputs["accprofile"] = args ? args.accprofile : undefined;
            inputs["comments"] = args ? args.comments : undefined;
            inputs["name"] = args ? args.name : undefined;
            inputs["trusthosts"] = args ? args.trusthosts : undefined;
            inputs["vdoms"] = args ? args.vdoms : undefined;
        }
        if (!opts.version) {
            opts = pulumi.mergeOptions(opts, { version: utilities.getVersion()});
        }
        super(SystemAPIUserSetting.__pulumiType, name, inputs, opts);
    }
}

/**
 * Input properties used for looking up and filtering SystemAPIUserSetting resources.
 */
export interface SystemAPIUserSettingState {
    /**
     * Admin user access profile.
     */
    accprofile?: pulumi.Input<string>;
    /**
     * Comment.
     */
    comments?: pulumi.Input<string>;
    /**
     * User name.
     */
    name?: pulumi.Input<string>;
    trusthosts?: pulumi.Input<pulumi.Input<inputs.SystemAPIUserSettingTrusthost>[]>;
    /**
     * Virtual domains.
     * * `trusthost-Type` - (Required) Trusthost type.
     * * `trusthost-ipv4_trusthost` - (Required) IPv4 trusted host address.
     */
    vdoms?: pulumi.Input<pulumi.Input<string>[]>;
}

/**
 * The set of arguments for constructing a SystemAPIUserSetting resource.
 */
export interface SystemAPIUserSettingArgs {
    /**
     * Admin user access profile.
     */
    accprofile: pulumi.Input<string>;
    /**
     * Comment.
     */
    comments?: pulumi.Input<string>;
    /**
     * User name.
     */
    name?: pulumi.Input<string>;
    trusthosts: pulumi.Input<pulumi.Input<inputs.SystemAPIUserSettingTrusthost>[]>;
    /**
     * Virtual domains.
     * * `trusthost-Type` - (Required) Trusthost type.
     * * `trusthost-ipv4_trusthost` - (Required) IPv4 trusted host address.
     */
    vdoms: pulumi.Input<pulumi.Input<string>[]>;
}
