// *** WARNING: this file was generated by the Pulumi Terraform Bridge (tfgen) Tool. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

import * as pulumi from "@pulumi/pulumi";
import { input as inputs, output as outputs } from "./types";
import * as utilities from "./utilities";

/**
 * Configure domain controller entries.
 *
 * ## Example Usage
 *
 * ```typescript
 * import * as pulumi from "@pulumi/pulumi";
 * import * as fortios from "@pulumi/fortios";
 *
 * const trname1 = new fortios.UserLdap("trname1", {
 *     accountKeyFilter: `(&(userPrincipalName=%s)(!(UserAccountControl:1.2.840.113556.1.4.803:=2)))`,
 *     accountKeyProcessing: "same",
 *     cnid: "cn",
 *     dn: "EIWNCIEW",
 *     groupMemberCheck: "user-attr",
 *     groupObjectFilter: "(&(objectcategory=group)(member=*))",
 *     memberAttr: "memberOf",
 *     passwordExpiryWarning: "disable",
 *     passwordRenewal: "disable",
 *     port: 389,
 *     secure: "disable",
 *     server: "1.1.1.1",
 *     serverIdentityCheck: "disable",
 *     sourceIp: "0.0.0.0",
 *     sslMinProtoVersion: "default",
 *     type: "simple",
 * });
 * const trname = new fortios.UserDomainController("trname", {
 *     domainName: "s.com",
 *     ipAddress: "1.1.1.1",
 *     ldapServer: trname1.name,
 *     port: 445,
 * });
 * ```
 *
 * ## Import
 *
 * User DomainController can be imported using any of these accepted formats$ export "FORTIOS_IMPORT_TABLE"="true"
 *
 * ```sh
 *  $ pulumi import fortios:index/userDomainController:UserDomainController labelname {{name}}
 * ```
 *
 *  $ unset "FORTIOS_IMPORT_TABLE"
 */
export class UserDomainController extends pulumi.CustomResource {
    /**
     * Get an existing UserDomainController resource's state with the given name, ID, and optional extra
     * properties used to qualify the lookup.
     *
     * @param name The _unique_ name of the resulting resource.
     * @param id The _unique_ provider ID of the resource to lookup.
     * @param state Any extra arguments used during the lookup.
     * @param opts Optional settings to control the behavior of the CustomResource.
     */
    public static get(name: string, id: pulumi.Input<pulumi.ID>, state?: UserDomainControllerState, opts?: pulumi.CustomResourceOptions): UserDomainController {
        return new UserDomainController(name, <any>state, { ...opts, id: id });
    }

    /** @internal */
    public static readonly __pulumiType = 'fortios:index/userDomainController:UserDomainController';

    /**
     * Returns true if the given object is an instance of UserDomainController.  This is designed to work even
     * when multiple copies of the Pulumi SDK have been loaded into the same process.
     */
    public static isInstance(obj: any): obj is UserDomainController {
        if (obj === undefined || obj === null) {
            return false;
        }
        return obj['__pulumiType'] === UserDomainController.__pulumiType;
    }

    /**
     * Domain DNS name.
     */
    public readonly domainName!: pulumi.Output<string>;
    /**
     * true or false, set this parameter to true when using dynamic forEach + toset to configure and sort sub-tables, please do not set this parameter when configuring static sub-tables.
     */
    public readonly dynamicSortSubtable!: pulumi.Output<string | undefined>;
    /**
     * extra servers. The structure of `extraServer` block is documented below.
     */
    public readonly extraServers!: pulumi.Output<outputs.UserDomainControllerExtraServer[] | undefined>;
    /**
     * Domain controller IP address.
     */
    public readonly ipAddress!: pulumi.Output<string>;
    /**
     * LDAP server name.
     */
    public readonly ldapServer!: pulumi.Output<string>;
    /**
     * Domain controller entry name.
     */
    public readonly name!: pulumi.Output<string>;
    /**
     * Port to be used for communication with the domain controller (default = 445).
     */
    public readonly port!: pulumi.Output<number>;
    /**
     * Specifies the vdom to which the resource will be applied when the FortiGate unit is running in VDOM mode. Only one vdom can be specified. If you want to inherit the vdom configuration of the provider, please do not set this parameter.
     */
    public readonly vdomparam!: pulumi.Output<string | undefined>;

    /**
     * Create a UserDomainController resource with the given unique name, arguments, and options.
     *
     * @param name The _unique_ name of the resource.
     * @param args The arguments to use to populate this resource's properties.
     * @param opts A bag of options that control this resource's behavior.
     */
    constructor(name: string, args: UserDomainControllerArgs, opts?: pulumi.CustomResourceOptions)
    constructor(name: string, argsOrState?: UserDomainControllerArgs | UserDomainControllerState, opts?: pulumi.CustomResourceOptions) {
        let inputs: pulumi.Inputs = {};
        opts = opts || {};
        if (opts.id) {
            const state = argsOrState as UserDomainControllerState | undefined;
            inputs["domainName"] = state ? state.domainName : undefined;
            inputs["dynamicSortSubtable"] = state ? state.dynamicSortSubtable : undefined;
            inputs["extraServers"] = state ? state.extraServers : undefined;
            inputs["ipAddress"] = state ? state.ipAddress : undefined;
            inputs["ldapServer"] = state ? state.ldapServer : undefined;
            inputs["name"] = state ? state.name : undefined;
            inputs["port"] = state ? state.port : undefined;
            inputs["vdomparam"] = state ? state.vdomparam : undefined;
        } else {
            const args = argsOrState as UserDomainControllerArgs | undefined;
            if ((!args || args.ipAddress === undefined) && !opts.urn) {
                throw new Error("Missing required property 'ipAddress'");
            }
            if ((!args || args.ldapServer === undefined) && !opts.urn) {
                throw new Error("Missing required property 'ldapServer'");
            }
            inputs["domainName"] = args ? args.domainName : undefined;
            inputs["dynamicSortSubtable"] = args ? args.dynamicSortSubtable : undefined;
            inputs["extraServers"] = args ? args.extraServers : undefined;
            inputs["ipAddress"] = args ? args.ipAddress : undefined;
            inputs["ldapServer"] = args ? args.ldapServer : undefined;
            inputs["name"] = args ? args.name : undefined;
            inputs["port"] = args ? args.port : undefined;
            inputs["vdomparam"] = args ? args.vdomparam : undefined;
        }
        if (!opts.version) {
            opts = pulumi.mergeOptions(opts, { version: utilities.getVersion()});
        }
        super(UserDomainController.__pulumiType, name, inputs, opts);
    }
}

/**
 * Input properties used for looking up and filtering UserDomainController resources.
 */
export interface UserDomainControllerState {
    /**
     * Domain DNS name.
     */
    domainName?: pulumi.Input<string>;
    /**
     * true or false, set this parameter to true when using dynamic forEach + toset to configure and sort sub-tables, please do not set this parameter when configuring static sub-tables.
     */
    dynamicSortSubtable?: pulumi.Input<string>;
    /**
     * extra servers. The structure of `extraServer` block is documented below.
     */
    extraServers?: pulumi.Input<pulumi.Input<inputs.UserDomainControllerExtraServer>[]>;
    /**
     * Domain controller IP address.
     */
    ipAddress?: pulumi.Input<string>;
    /**
     * LDAP server name.
     */
    ldapServer?: pulumi.Input<string>;
    /**
     * Domain controller entry name.
     */
    name?: pulumi.Input<string>;
    /**
     * Port to be used for communication with the domain controller (default = 445).
     */
    port?: pulumi.Input<number>;
    /**
     * Specifies the vdom to which the resource will be applied when the FortiGate unit is running in VDOM mode. Only one vdom can be specified. If you want to inherit the vdom configuration of the provider, please do not set this parameter.
     */
    vdomparam?: pulumi.Input<string>;
}

/**
 * The set of arguments for constructing a UserDomainController resource.
 */
export interface UserDomainControllerArgs {
    /**
     * Domain DNS name.
     */
    domainName?: pulumi.Input<string>;
    /**
     * true or false, set this parameter to true when using dynamic forEach + toset to configure and sort sub-tables, please do not set this parameter when configuring static sub-tables.
     */
    dynamicSortSubtable?: pulumi.Input<string>;
    /**
     * extra servers. The structure of `extraServer` block is documented below.
     */
    extraServers?: pulumi.Input<pulumi.Input<inputs.UserDomainControllerExtraServer>[]>;
    /**
     * Domain controller IP address.
     */
    ipAddress: pulumi.Input<string>;
    /**
     * LDAP server name.
     */
    ldapServer: pulumi.Input<string>;
    /**
     * Domain controller entry name.
     */
    name?: pulumi.Input<string>;
    /**
     * Port to be used for communication with the domain controller (default = 445).
     */
    port?: pulumi.Input<number>;
    /**
     * Specifies the vdom to which the resource will be applied when the FortiGate unit is running in VDOM mode. Only one vdom can be specified. If you want to inherit the vdom configuration of the provider, please do not set this parameter.
     */
    vdomparam?: pulumi.Input<string>;
}
