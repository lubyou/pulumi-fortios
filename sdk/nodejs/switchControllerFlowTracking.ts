// *** WARNING: this file was generated by the Pulumi Terraform Bridge (tfgen) Tool. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

import * as pulumi from "@pulumi/pulumi";
import * as inputs from "./types/input";
import * as outputs from "./types/output";
import * as utilities from "./utilities";

export class SwitchControllerFlowTracking extends pulumi.CustomResource {
    /**
     * Get an existing SwitchControllerFlowTracking resource's state with the given name, ID, and optional extra
     * properties used to qualify the lookup.
     *
     * @param name The _unique_ name of the resulting resource.
     * @param id The _unique_ provider ID of the resource to lookup.
     * @param state Any extra arguments used during the lookup.
     * @param opts Optional settings to control the behavior of the CustomResource.
     */
    public static get(name: string, id: pulumi.Input<pulumi.ID>, state?: SwitchControllerFlowTrackingState, opts?: pulumi.CustomResourceOptions): SwitchControllerFlowTracking {
        return new SwitchControllerFlowTracking(name, <any>state, { ...opts, id: id });
    }

    /** @internal */
    public static readonly __pulumiType = 'fortios:index/switchControllerFlowTracking:SwitchControllerFlowTracking';

    /**
     * Returns true if the given object is an instance of SwitchControllerFlowTracking.  This is designed to work even
     * when multiple copies of the Pulumi SDK have been loaded into the same process.
     */
    public static isInstance(obj: any): obj is SwitchControllerFlowTracking {
        if (obj === undefined || obj === null) {
            return false;
        }
        return obj['__pulumiType'] === SwitchControllerFlowTracking.__pulumiType;
    }

    public readonly aggregates!: pulumi.Output<outputs.SwitchControllerFlowTrackingAggregate[] | undefined>;
    public readonly collectorIp!: pulumi.Output<string>;
    public readonly collectorPort!: pulumi.Output<number>;
    public readonly collectors!: pulumi.Output<outputs.SwitchControllerFlowTrackingCollector[] | undefined>;
    public readonly dynamicSortSubtable!: pulumi.Output<string | undefined>;
    public readonly format!: pulumi.Output<string>;
    public readonly getAllTables!: pulumi.Output<string | undefined>;
    public readonly level!: pulumi.Output<string>;
    public readonly maxExportPktSize!: pulumi.Output<number>;
    public readonly sampleMode!: pulumi.Output<string>;
    public readonly sampleRate!: pulumi.Output<number>;
    public readonly templateExportPeriod!: pulumi.Output<number>;
    public readonly timeoutGeneral!: pulumi.Output<number>;
    public readonly timeoutIcmp!: pulumi.Output<number>;
    public readonly timeoutMax!: pulumi.Output<number>;
    public readonly timeoutTcp!: pulumi.Output<number>;
    public readonly timeoutTcpFin!: pulumi.Output<number>;
    public readonly timeoutTcpRst!: pulumi.Output<number>;
    public readonly timeoutUdp!: pulumi.Output<number>;
    public readonly transport!: pulumi.Output<string>;
    public readonly vdomparam!: pulumi.Output<string | undefined>;

    /**
     * Create a SwitchControllerFlowTracking resource with the given unique name, arguments, and options.
     *
     * @param name The _unique_ name of the resource.
     * @param args The arguments to use to populate this resource's properties.
     * @param opts A bag of options that control this resource's behavior.
     */
    constructor(name: string, args?: SwitchControllerFlowTrackingArgs, opts?: pulumi.CustomResourceOptions)
    constructor(name: string, argsOrState?: SwitchControllerFlowTrackingArgs | SwitchControllerFlowTrackingState, opts?: pulumi.CustomResourceOptions) {
        let resourceInputs: pulumi.Inputs = {};
        opts = opts || {};
        if (opts.id) {
            const state = argsOrState as SwitchControllerFlowTrackingState | undefined;
            resourceInputs["aggregates"] = state ? state.aggregates : undefined;
            resourceInputs["collectorIp"] = state ? state.collectorIp : undefined;
            resourceInputs["collectorPort"] = state ? state.collectorPort : undefined;
            resourceInputs["collectors"] = state ? state.collectors : undefined;
            resourceInputs["dynamicSortSubtable"] = state ? state.dynamicSortSubtable : undefined;
            resourceInputs["format"] = state ? state.format : undefined;
            resourceInputs["getAllTables"] = state ? state.getAllTables : undefined;
            resourceInputs["level"] = state ? state.level : undefined;
            resourceInputs["maxExportPktSize"] = state ? state.maxExportPktSize : undefined;
            resourceInputs["sampleMode"] = state ? state.sampleMode : undefined;
            resourceInputs["sampleRate"] = state ? state.sampleRate : undefined;
            resourceInputs["templateExportPeriod"] = state ? state.templateExportPeriod : undefined;
            resourceInputs["timeoutGeneral"] = state ? state.timeoutGeneral : undefined;
            resourceInputs["timeoutIcmp"] = state ? state.timeoutIcmp : undefined;
            resourceInputs["timeoutMax"] = state ? state.timeoutMax : undefined;
            resourceInputs["timeoutTcp"] = state ? state.timeoutTcp : undefined;
            resourceInputs["timeoutTcpFin"] = state ? state.timeoutTcpFin : undefined;
            resourceInputs["timeoutTcpRst"] = state ? state.timeoutTcpRst : undefined;
            resourceInputs["timeoutUdp"] = state ? state.timeoutUdp : undefined;
            resourceInputs["transport"] = state ? state.transport : undefined;
            resourceInputs["vdomparam"] = state ? state.vdomparam : undefined;
        } else {
            const args = argsOrState as SwitchControllerFlowTrackingArgs | undefined;
            resourceInputs["aggregates"] = args ? args.aggregates : undefined;
            resourceInputs["collectorIp"] = args ? args.collectorIp : undefined;
            resourceInputs["collectorPort"] = args ? args.collectorPort : undefined;
            resourceInputs["collectors"] = args ? args.collectors : undefined;
            resourceInputs["dynamicSortSubtable"] = args ? args.dynamicSortSubtable : undefined;
            resourceInputs["format"] = args ? args.format : undefined;
            resourceInputs["getAllTables"] = args ? args.getAllTables : undefined;
            resourceInputs["level"] = args ? args.level : undefined;
            resourceInputs["maxExportPktSize"] = args ? args.maxExportPktSize : undefined;
            resourceInputs["sampleMode"] = args ? args.sampleMode : undefined;
            resourceInputs["sampleRate"] = args ? args.sampleRate : undefined;
            resourceInputs["templateExportPeriod"] = args ? args.templateExportPeriod : undefined;
            resourceInputs["timeoutGeneral"] = args ? args.timeoutGeneral : undefined;
            resourceInputs["timeoutIcmp"] = args ? args.timeoutIcmp : undefined;
            resourceInputs["timeoutMax"] = args ? args.timeoutMax : undefined;
            resourceInputs["timeoutTcp"] = args ? args.timeoutTcp : undefined;
            resourceInputs["timeoutTcpFin"] = args ? args.timeoutTcpFin : undefined;
            resourceInputs["timeoutTcpRst"] = args ? args.timeoutTcpRst : undefined;
            resourceInputs["timeoutUdp"] = args ? args.timeoutUdp : undefined;
            resourceInputs["transport"] = args ? args.transport : undefined;
            resourceInputs["vdomparam"] = args ? args.vdomparam : undefined;
        }
        opts = pulumi.mergeOptions(utilities.resourceOptsDefaults(), opts);
        super(SwitchControllerFlowTracking.__pulumiType, name, resourceInputs, opts);
    }
}

/**
 * Input properties used for looking up and filtering SwitchControllerFlowTracking resources.
 */
export interface SwitchControllerFlowTrackingState {
    aggregates?: pulumi.Input<pulumi.Input<inputs.SwitchControllerFlowTrackingAggregate>[]>;
    collectorIp?: pulumi.Input<string>;
    collectorPort?: pulumi.Input<number>;
    collectors?: pulumi.Input<pulumi.Input<inputs.SwitchControllerFlowTrackingCollector>[]>;
    dynamicSortSubtable?: pulumi.Input<string>;
    format?: pulumi.Input<string>;
    getAllTables?: pulumi.Input<string>;
    level?: pulumi.Input<string>;
    maxExportPktSize?: pulumi.Input<number>;
    sampleMode?: pulumi.Input<string>;
    sampleRate?: pulumi.Input<number>;
    templateExportPeriod?: pulumi.Input<number>;
    timeoutGeneral?: pulumi.Input<number>;
    timeoutIcmp?: pulumi.Input<number>;
    timeoutMax?: pulumi.Input<number>;
    timeoutTcp?: pulumi.Input<number>;
    timeoutTcpFin?: pulumi.Input<number>;
    timeoutTcpRst?: pulumi.Input<number>;
    timeoutUdp?: pulumi.Input<number>;
    transport?: pulumi.Input<string>;
    vdomparam?: pulumi.Input<string>;
}

/**
 * The set of arguments for constructing a SwitchControllerFlowTracking resource.
 */
export interface SwitchControllerFlowTrackingArgs {
    aggregates?: pulumi.Input<pulumi.Input<inputs.SwitchControllerFlowTrackingAggregate>[]>;
    collectorIp?: pulumi.Input<string>;
    collectorPort?: pulumi.Input<number>;
    collectors?: pulumi.Input<pulumi.Input<inputs.SwitchControllerFlowTrackingCollector>[]>;
    dynamicSortSubtable?: pulumi.Input<string>;
    format?: pulumi.Input<string>;
    getAllTables?: pulumi.Input<string>;
    level?: pulumi.Input<string>;
    maxExportPktSize?: pulumi.Input<number>;
    sampleMode?: pulumi.Input<string>;
    sampleRate?: pulumi.Input<number>;
    templateExportPeriod?: pulumi.Input<number>;
    timeoutGeneral?: pulumi.Input<number>;
    timeoutIcmp?: pulumi.Input<number>;
    timeoutMax?: pulumi.Input<number>;
    timeoutTcp?: pulumi.Input<number>;
    timeoutTcpFin?: pulumi.Input<number>;
    timeoutTcpRst?: pulumi.Input<number>;
    timeoutUdp?: pulumi.Input<number>;
    transport?: pulumi.Input<string>;
    vdomparam?: pulumi.Input<string>;
}
