// *** WARNING: this file was generated by the Pulumi Terraform Bridge (tfgen) Tool. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

import * as pulumi from "@pulumi/pulumi";
import { input as inputs, output as outputs } from "./types";
import * as utilities from "./utilities";

/**
 * Configure IPv4 routing policies.
 *
 * ## Example Usage
 *
 * ```typescript
 * import * as pulumi from "@pulumi/pulumi";
 * import * as fortios from "@pulumi/fortios";
 *
 * const trname = new fortios.RouterPolicy("trname", {
 *     action: "permit",
 *     dstNegate: "disable",
 *     endPort: 25,
 *     endSourcePort: 65535,
 *     gateway: "0.0.0.0",
 *     inputDevices: [{
 *         name: "port1",
 *     }],
 *     outputDevice: "port2",
 *     protocol: 6,
 *     seqNum: 1,
 *     srcNegate: "disable",
 *     startPort: 25,
 *     startSourcePort: 0,
 *     status: "enable",
 *     tos: "0x00",
 *     tosMask: "0x00",
 * });
 * ```
 *
 * ## Import
 *
 * Router Policy can be imported using any of these accepted formats$ export "FORTIOS_IMPORT_TABLE"="true"
 *
 * ```sh
 *  $ pulumi import fortios:index/routerPolicy:RouterPolicy labelname {{seq_num}}
 * ```
 *
 *  $ unset "FORTIOS_IMPORT_TABLE"
 */
export class RouterPolicy extends pulumi.CustomResource {
    /**
     * Get an existing RouterPolicy resource's state with the given name, ID, and optional extra
     * properties used to qualify the lookup.
     *
     * @param name The _unique_ name of the resulting resource.
     * @param id The _unique_ provider ID of the resource to lookup.
     * @param state Any extra arguments used during the lookup.
     * @param opts Optional settings to control the behavior of the CustomResource.
     */
    public static get(name: string, id: pulumi.Input<pulumi.ID>, state?: RouterPolicyState, opts?: pulumi.CustomResourceOptions): RouterPolicy {
        return new RouterPolicy(name, <any>state, { ...opts, id: id });
    }

    /** @internal */
    public static readonly __pulumiType = 'fortios:index/routerPolicy:RouterPolicy';

    /**
     * Returns true if the given object is an instance of RouterPolicy.  This is designed to work even
     * when multiple copies of the Pulumi SDK have been loaded into the same process.
     */
    public static isInstance(obj: any): obj is RouterPolicy {
        if (obj === undefined || obj === null) {
            return false;
        }
        return obj['__pulumiType'] === RouterPolicy.__pulumiType;
    }

    /**
     * Action of the policy route. Valid values: `deny`, `permit`.
     */
    public readonly action!: pulumi.Output<string>;
    /**
     * Optional comments.
     */
    public readonly comments!: pulumi.Output<string | undefined>;
    /**
     * Enable/disable negating destination address match. Valid values: `enable`, `disable`.
     */
    public readonly dstNegate!: pulumi.Output<string>;
    /**
     * Destination address name. The structure of `dstaddr` block is documented below.
     */
    public readonly dstaddrs!: pulumi.Output<outputs.RouterPolicyDstaddr[] | undefined>;
    /**
     * Destination IP and mask (x.x.x.x/x). The structure of `dst` block is documented below.
     */
    public readonly dsts!: pulumi.Output<outputs.RouterPolicyDst[] | undefined>;
    /**
     * true or false, set this parameter to true when using dynamic forEach + toset to configure and sort sub-tables, please do not set this parameter when configuring static sub-tables.
     */
    public readonly dynamicSortSubtable!: pulumi.Output<string | undefined>;
    /**
     * End destination port number (0 - 65535).
     */
    public readonly endPort!: pulumi.Output<number>;
    /**
     * End source port number (0 - 65535).
     */
    public readonly endSourcePort!: pulumi.Output<number>;
    /**
     * IP address of the gateway.
     */
    public readonly gateway!: pulumi.Output<string>;
    /**
     * Enable/disable negation of input device match. Valid values: `enable`, `disable`.
     */
    public readonly inputDeviceNegate!: pulumi.Output<string>;
    /**
     * Incoming interface name. The structure of `inputDevice` block is documented below.
     */
    public readonly inputDevices!: pulumi.Output<outputs.RouterPolicyInputDevice[] | undefined>;
    /**
     * Custom Destination Internet Service name. The structure of `internetServiceCustom` block is documented below.
     */
    public readonly internetServiceCustoms!: pulumi.Output<outputs.RouterPolicyInternetServiceCustom[] | undefined>;
    /**
     * Destination Internet Service ID. The structure of `internetServiceId` block is documented below.
     */
    public readonly internetServiceIds!: pulumi.Output<outputs.RouterPolicyInternetServiceId[] | undefined>;
    /**
     * Outgoing interface name.
     */
    public readonly outputDevice!: pulumi.Output<string>;
    /**
     * Protocol number (0 - 255).
     */
    public readonly protocol!: pulumi.Output<number>;
    /**
     * Sequence number.
     */
    public readonly seqNum!: pulumi.Output<number>;
    /**
     * Enable/disable negating source address match. Valid values: `enable`, `disable`.
     */
    public readonly srcNegate!: pulumi.Output<string>;
    /**
     * Source address name. The structure of `srcaddr` block is documented below.
     */
    public readonly srcaddrs!: pulumi.Output<outputs.RouterPolicySrcaddr[] | undefined>;
    /**
     * Source IP and mask (x.x.x.x/x). The structure of `src` block is documented below.
     */
    public readonly srcs!: pulumi.Output<outputs.RouterPolicySrc[] | undefined>;
    /**
     * Start destination port number (0 - 65535).
     */
    public readonly startPort!: pulumi.Output<number>;
    /**
     * Start source port number (0 - 65535).
     */
    public readonly startSourcePort!: pulumi.Output<number>;
    /**
     * Enable/disable this policy route. Valid values: `enable`, `disable`.
     */
    public readonly status!: pulumi.Output<string>;
    /**
     * Type of service bit pattern.
     */
    public readonly tos!: pulumi.Output<string>;
    /**
     * Type of service evaluated bits.
     */
    public readonly tosMask!: pulumi.Output<string>;
    /**
     * Specifies the vdom to which the resource will be applied when the FortiGate unit is running in VDOM mode. Only one vdom can be specified. If you want to inherit the vdom configuration of the provider, please do not set this parameter.
     */
    public readonly vdomparam!: pulumi.Output<string | undefined>;

    /**
     * Create a RouterPolicy resource with the given unique name, arguments, and options.
     *
     * @param name The _unique_ name of the resource.
     * @param args The arguments to use to populate this resource's properties.
     * @param opts A bag of options that control this resource's behavior.
     */
    constructor(name: string, args?: RouterPolicyArgs, opts?: pulumi.CustomResourceOptions)
    constructor(name: string, argsOrState?: RouterPolicyArgs | RouterPolicyState, opts?: pulumi.CustomResourceOptions) {
        let inputs: pulumi.Inputs = {};
        opts = opts || {};
        if (opts.id) {
            const state = argsOrState as RouterPolicyState | undefined;
            inputs["action"] = state ? state.action : undefined;
            inputs["comments"] = state ? state.comments : undefined;
            inputs["dstNegate"] = state ? state.dstNegate : undefined;
            inputs["dstaddrs"] = state ? state.dstaddrs : undefined;
            inputs["dsts"] = state ? state.dsts : undefined;
            inputs["dynamicSortSubtable"] = state ? state.dynamicSortSubtable : undefined;
            inputs["endPort"] = state ? state.endPort : undefined;
            inputs["endSourcePort"] = state ? state.endSourcePort : undefined;
            inputs["gateway"] = state ? state.gateway : undefined;
            inputs["inputDeviceNegate"] = state ? state.inputDeviceNegate : undefined;
            inputs["inputDevices"] = state ? state.inputDevices : undefined;
            inputs["internetServiceCustoms"] = state ? state.internetServiceCustoms : undefined;
            inputs["internetServiceIds"] = state ? state.internetServiceIds : undefined;
            inputs["outputDevice"] = state ? state.outputDevice : undefined;
            inputs["protocol"] = state ? state.protocol : undefined;
            inputs["seqNum"] = state ? state.seqNum : undefined;
            inputs["srcNegate"] = state ? state.srcNegate : undefined;
            inputs["srcaddrs"] = state ? state.srcaddrs : undefined;
            inputs["srcs"] = state ? state.srcs : undefined;
            inputs["startPort"] = state ? state.startPort : undefined;
            inputs["startSourcePort"] = state ? state.startSourcePort : undefined;
            inputs["status"] = state ? state.status : undefined;
            inputs["tos"] = state ? state.tos : undefined;
            inputs["tosMask"] = state ? state.tosMask : undefined;
            inputs["vdomparam"] = state ? state.vdomparam : undefined;
        } else {
            const args = argsOrState as RouterPolicyArgs | undefined;
            inputs["action"] = args ? args.action : undefined;
            inputs["comments"] = args ? args.comments : undefined;
            inputs["dstNegate"] = args ? args.dstNegate : undefined;
            inputs["dstaddrs"] = args ? args.dstaddrs : undefined;
            inputs["dsts"] = args ? args.dsts : undefined;
            inputs["dynamicSortSubtable"] = args ? args.dynamicSortSubtable : undefined;
            inputs["endPort"] = args ? args.endPort : undefined;
            inputs["endSourcePort"] = args ? args.endSourcePort : undefined;
            inputs["gateway"] = args ? args.gateway : undefined;
            inputs["inputDeviceNegate"] = args ? args.inputDeviceNegate : undefined;
            inputs["inputDevices"] = args ? args.inputDevices : undefined;
            inputs["internetServiceCustoms"] = args ? args.internetServiceCustoms : undefined;
            inputs["internetServiceIds"] = args ? args.internetServiceIds : undefined;
            inputs["outputDevice"] = args ? args.outputDevice : undefined;
            inputs["protocol"] = args ? args.protocol : undefined;
            inputs["seqNum"] = args ? args.seqNum : undefined;
            inputs["srcNegate"] = args ? args.srcNegate : undefined;
            inputs["srcaddrs"] = args ? args.srcaddrs : undefined;
            inputs["srcs"] = args ? args.srcs : undefined;
            inputs["startPort"] = args ? args.startPort : undefined;
            inputs["startSourcePort"] = args ? args.startSourcePort : undefined;
            inputs["status"] = args ? args.status : undefined;
            inputs["tos"] = args ? args.tos : undefined;
            inputs["tosMask"] = args ? args.tosMask : undefined;
            inputs["vdomparam"] = args ? args.vdomparam : undefined;
        }
        if (!opts.version) {
            opts = pulumi.mergeOptions(opts, { version: utilities.getVersion()});
        }
        super(RouterPolicy.__pulumiType, name, inputs, opts);
    }
}

/**
 * Input properties used for looking up and filtering RouterPolicy resources.
 */
export interface RouterPolicyState {
    /**
     * Action of the policy route. Valid values: `deny`, `permit`.
     */
    action?: pulumi.Input<string>;
    /**
     * Optional comments.
     */
    comments?: pulumi.Input<string>;
    /**
     * Enable/disable negating destination address match. Valid values: `enable`, `disable`.
     */
    dstNegate?: pulumi.Input<string>;
    /**
     * Destination address name. The structure of `dstaddr` block is documented below.
     */
    dstaddrs?: pulumi.Input<pulumi.Input<inputs.RouterPolicyDstaddr>[]>;
    /**
     * Destination IP and mask (x.x.x.x/x). The structure of `dst` block is documented below.
     */
    dsts?: pulumi.Input<pulumi.Input<inputs.RouterPolicyDst>[]>;
    /**
     * true or false, set this parameter to true when using dynamic forEach + toset to configure and sort sub-tables, please do not set this parameter when configuring static sub-tables.
     */
    dynamicSortSubtable?: pulumi.Input<string>;
    /**
     * End destination port number (0 - 65535).
     */
    endPort?: pulumi.Input<number>;
    /**
     * End source port number (0 - 65535).
     */
    endSourcePort?: pulumi.Input<number>;
    /**
     * IP address of the gateway.
     */
    gateway?: pulumi.Input<string>;
    /**
     * Enable/disable negation of input device match. Valid values: `enable`, `disable`.
     */
    inputDeviceNegate?: pulumi.Input<string>;
    /**
     * Incoming interface name. The structure of `inputDevice` block is documented below.
     */
    inputDevices?: pulumi.Input<pulumi.Input<inputs.RouterPolicyInputDevice>[]>;
    /**
     * Custom Destination Internet Service name. The structure of `internetServiceCustom` block is documented below.
     */
    internetServiceCustoms?: pulumi.Input<pulumi.Input<inputs.RouterPolicyInternetServiceCustom>[]>;
    /**
     * Destination Internet Service ID. The structure of `internetServiceId` block is documented below.
     */
    internetServiceIds?: pulumi.Input<pulumi.Input<inputs.RouterPolicyInternetServiceId>[]>;
    /**
     * Outgoing interface name.
     */
    outputDevice?: pulumi.Input<string>;
    /**
     * Protocol number (0 - 255).
     */
    protocol?: pulumi.Input<number>;
    /**
     * Sequence number.
     */
    seqNum?: pulumi.Input<number>;
    /**
     * Enable/disable negating source address match. Valid values: `enable`, `disable`.
     */
    srcNegate?: pulumi.Input<string>;
    /**
     * Source address name. The structure of `srcaddr` block is documented below.
     */
    srcaddrs?: pulumi.Input<pulumi.Input<inputs.RouterPolicySrcaddr>[]>;
    /**
     * Source IP and mask (x.x.x.x/x). The structure of `src` block is documented below.
     */
    srcs?: pulumi.Input<pulumi.Input<inputs.RouterPolicySrc>[]>;
    /**
     * Start destination port number (0 - 65535).
     */
    startPort?: pulumi.Input<number>;
    /**
     * Start source port number (0 - 65535).
     */
    startSourcePort?: pulumi.Input<number>;
    /**
     * Enable/disable this policy route. Valid values: `enable`, `disable`.
     */
    status?: pulumi.Input<string>;
    /**
     * Type of service bit pattern.
     */
    tos?: pulumi.Input<string>;
    /**
     * Type of service evaluated bits.
     */
    tosMask?: pulumi.Input<string>;
    /**
     * Specifies the vdom to which the resource will be applied when the FortiGate unit is running in VDOM mode. Only one vdom can be specified. If you want to inherit the vdom configuration of the provider, please do not set this parameter.
     */
    vdomparam?: pulumi.Input<string>;
}

/**
 * The set of arguments for constructing a RouterPolicy resource.
 */
export interface RouterPolicyArgs {
    /**
     * Action of the policy route. Valid values: `deny`, `permit`.
     */
    action?: pulumi.Input<string>;
    /**
     * Optional comments.
     */
    comments?: pulumi.Input<string>;
    /**
     * Enable/disable negating destination address match. Valid values: `enable`, `disable`.
     */
    dstNegate?: pulumi.Input<string>;
    /**
     * Destination address name. The structure of `dstaddr` block is documented below.
     */
    dstaddrs?: pulumi.Input<pulumi.Input<inputs.RouterPolicyDstaddr>[]>;
    /**
     * Destination IP and mask (x.x.x.x/x). The structure of `dst` block is documented below.
     */
    dsts?: pulumi.Input<pulumi.Input<inputs.RouterPolicyDst>[]>;
    /**
     * true or false, set this parameter to true when using dynamic forEach + toset to configure and sort sub-tables, please do not set this parameter when configuring static sub-tables.
     */
    dynamicSortSubtable?: pulumi.Input<string>;
    /**
     * End destination port number (0 - 65535).
     */
    endPort?: pulumi.Input<number>;
    /**
     * End source port number (0 - 65535).
     */
    endSourcePort?: pulumi.Input<number>;
    /**
     * IP address of the gateway.
     */
    gateway?: pulumi.Input<string>;
    /**
     * Enable/disable negation of input device match. Valid values: `enable`, `disable`.
     */
    inputDeviceNegate?: pulumi.Input<string>;
    /**
     * Incoming interface name. The structure of `inputDevice` block is documented below.
     */
    inputDevices?: pulumi.Input<pulumi.Input<inputs.RouterPolicyInputDevice>[]>;
    /**
     * Custom Destination Internet Service name. The structure of `internetServiceCustom` block is documented below.
     */
    internetServiceCustoms?: pulumi.Input<pulumi.Input<inputs.RouterPolicyInternetServiceCustom>[]>;
    /**
     * Destination Internet Service ID. The structure of `internetServiceId` block is documented below.
     */
    internetServiceIds?: pulumi.Input<pulumi.Input<inputs.RouterPolicyInternetServiceId>[]>;
    /**
     * Outgoing interface name.
     */
    outputDevice?: pulumi.Input<string>;
    /**
     * Protocol number (0 - 255).
     */
    protocol?: pulumi.Input<number>;
    /**
     * Sequence number.
     */
    seqNum?: pulumi.Input<number>;
    /**
     * Enable/disable negating source address match. Valid values: `enable`, `disable`.
     */
    srcNegate?: pulumi.Input<string>;
    /**
     * Source address name. The structure of `srcaddr` block is documented below.
     */
    srcaddrs?: pulumi.Input<pulumi.Input<inputs.RouterPolicySrcaddr>[]>;
    /**
     * Source IP and mask (x.x.x.x/x). The structure of `src` block is documented below.
     */
    srcs?: pulumi.Input<pulumi.Input<inputs.RouterPolicySrc>[]>;
    /**
     * Start destination port number (0 - 65535).
     */
    startPort?: pulumi.Input<number>;
    /**
     * Start source port number (0 - 65535).
     */
    startSourcePort?: pulumi.Input<number>;
    /**
     * Enable/disable this policy route. Valid values: `enable`, `disable`.
     */
    status?: pulumi.Input<string>;
    /**
     * Type of service bit pattern.
     */
    tos?: pulumi.Input<string>;
    /**
     * Type of service evaluated bits.
     */
    tosMask?: pulumi.Input<string>;
    /**
     * Specifies the vdom to which the resource will be applied when the FortiGate unit is running in VDOM mode. Only one vdom can be specified. If you want to inherit the vdom configuration of the provider, please do not set this parameter.
     */
    vdomparam?: pulumi.Input<string>;
}
