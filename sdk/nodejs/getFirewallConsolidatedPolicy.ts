// *** WARNING: this file was generated by the Pulumi Terraform Bridge (tfgen) Tool. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

import * as pulumi from "@pulumi/pulumi";
import * as inputs from "./types/input";
import * as outputs from "./types/output";
import * as utilities from "./utilities";

export function getFirewallConsolidatedPolicy(args: GetFirewallConsolidatedPolicyArgs, opts?: pulumi.InvokeOptions): Promise<GetFirewallConsolidatedPolicyResult> {

    opts = pulumi.mergeOptions(utilities.resourceOptsDefaults(), opts || {});
    return pulumi.runtime.invoke("fortios:index/getFirewallConsolidatedPolicy:GetFirewallConsolidatedPolicy", {
        "policyid": args.policyid,
        "vdomparam": args.vdomparam,
    }, opts);
}

/**
 * A collection of arguments for invoking GetFirewallConsolidatedPolicy.
 */
export interface GetFirewallConsolidatedPolicyArgs {
    policyid: number;
    vdomparam?: string;
}

/**
 * A collection of values returned by GetFirewallConsolidatedPolicy.
 */
export interface GetFirewallConsolidatedPolicyResult {
    readonly action: string;
    readonly appCategories: outputs.GetFirewallConsolidatedPolicyAppCategory[];
    readonly appGroups: outputs.GetFirewallConsolidatedPolicyAppGroup[];
    readonly applicationList: string;
    readonly applications: outputs.GetFirewallConsolidatedPolicyApplication[];
    readonly autoAsicOffload: string;
    readonly avProfile: string;
    readonly captivePortalExempt: string;
    readonly cifsProfile: string;
    readonly comments: string;
    readonly diffservForward: string;
    readonly diffservReverse: string;
    readonly diffservcodeForward: string;
    readonly diffservcodeRev: string;
    readonly dlpSensor: string;
    readonly dnsfilterProfile: string;
    readonly dstaddr4s: outputs.GetFirewallConsolidatedPolicyDstaddr4[];
    readonly dstaddr6s: outputs.GetFirewallConsolidatedPolicyDstaddr6[];
    readonly dstaddrNegate: string;
    readonly dstintfs: outputs.GetFirewallConsolidatedPolicyDstintf[];
    readonly emailfilterProfile: string;
    readonly fixedport: string;
    readonly fssoGroups: outputs.GetFirewallConsolidatedPolicyFssoGroup[];
    readonly groups: outputs.GetFirewallConsolidatedPolicyGroup[];
    readonly httpPolicyRedirect: string;
    readonly icapProfile: string;
    /**
     * The provider-assigned unique ID for this managed resource.
     */
    readonly id: string;
    readonly inbound: string;
    readonly inspectionMode: string;
    readonly internetService: string;
    readonly internetServiceCustomGroups: outputs.GetFirewallConsolidatedPolicyInternetServiceCustomGroup[];
    readonly internetServiceCustoms: outputs.GetFirewallConsolidatedPolicyInternetServiceCustom[];
    readonly internetServiceGroups: outputs.GetFirewallConsolidatedPolicyInternetServiceGroup[];
    readonly internetServiceIds: outputs.GetFirewallConsolidatedPolicyInternetServiceId[];
    readonly internetServiceNames: outputs.GetFirewallConsolidatedPolicyInternetServiceName[];
    readonly internetServiceNegate: string;
    readonly internetServiceSrc: string;
    readonly internetServiceSrcCustomGroups: outputs.GetFirewallConsolidatedPolicyInternetServiceSrcCustomGroup[];
    readonly internetServiceSrcCustoms: outputs.GetFirewallConsolidatedPolicyInternetServiceSrcCustom[];
    readonly internetServiceSrcGroups: outputs.GetFirewallConsolidatedPolicyInternetServiceSrcGroup[];
    readonly internetServiceSrcIds: outputs.GetFirewallConsolidatedPolicyInternetServiceSrcId[];
    readonly internetServiceSrcNames: outputs.GetFirewallConsolidatedPolicyInternetServiceSrcName[];
    readonly internetServiceSrcNegate: string;
    readonly ippool: string;
    readonly ipsSensor: string;
    readonly logtraffic: string;
    readonly logtrafficStart: string;
    readonly name: string;
    readonly nat: string;
    readonly outbound: string;
    readonly perIpShaper: string;
    readonly policyid: number;
    readonly poolname4s: outputs.GetFirewallConsolidatedPolicyPoolname4[];
    readonly poolname6s: outputs.GetFirewallConsolidatedPolicyPoolname6[];
    readonly profileGroup: string;
    readonly profileProtocolOptions: string;
    readonly profileType: string;
    readonly schedule: string;
    readonly serviceNegate: string;
    readonly services: outputs.GetFirewallConsolidatedPolicyService[];
    readonly sessionTtl: number;
    readonly spamfilterProfile: string;
    readonly srcaddr4s: outputs.GetFirewallConsolidatedPolicySrcaddr4[];
    readonly srcaddr6s: outputs.GetFirewallConsolidatedPolicySrcaddr6[];
    readonly srcaddrNegate: string;
    readonly srcintfs: outputs.GetFirewallConsolidatedPolicySrcintf[];
    readonly sshFilterProfile: string;
    readonly sshPolicyRedirect: string;
    readonly sslSshProfile: string;
    readonly status: string;
    readonly tcpMssReceiver: number;
    readonly tcpMssSender: number;
    readonly trafficShaper: string;
    readonly trafficShaperReverse: string;
    readonly urlCategories: outputs.GetFirewallConsolidatedPolicyUrlCategory[];
    readonly users: outputs.GetFirewallConsolidatedPolicyUser[];
    readonly utmStatus: string;
    readonly uuid: string;
    readonly vdomparam?: string;
    readonly voipProfile: string;
    readonly vpntunnel: string;
    readonly wafProfile: string;
    readonly wanopt: string;
    readonly wanoptDetection: string;
    readonly wanoptPassiveOpt: string;
    readonly wanoptPeer: string;
    readonly wanoptProfile: string;
    readonly webcache: string;
    readonly webcacheHttps: string;
    readonly webfilterProfile: string;
    readonly webproxyForwardServer: string;
    readonly webproxyProfile: string;
}
export function getFirewallConsolidatedPolicyOutput(args: GetFirewallConsolidatedPolicyOutputArgs, opts?: pulumi.InvokeOptions): pulumi.Output<GetFirewallConsolidatedPolicyResult> {
    return pulumi.output(args).apply((a: any) => getFirewallConsolidatedPolicy(a, opts))
}

/**
 * A collection of arguments for invoking GetFirewallConsolidatedPolicy.
 */
export interface GetFirewallConsolidatedPolicyOutputArgs {
    policyid: pulumi.Input<number>;
    vdomparam?: pulumi.Input<string>;
}
