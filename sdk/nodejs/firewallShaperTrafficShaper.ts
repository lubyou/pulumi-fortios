// *** WARNING: this file was generated by the Pulumi Terraform Bridge (tfgen) Tool. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

import * as pulumi from "@pulumi/pulumi";
import * as utilities from "./utilities";

/**
 * Configure shared traffic shaper.
 *
 * ## Example Usage
 *
 * ```typescript
 * import * as pulumi from "@pulumi/pulumi";
 * import * as fortios from "@pulumi/fortios";
 *
 * const trname = new fortios.FirewallShaperTrafficShaper("trname", {
 *     bandwidthUnit: "kbps",
 *     diffserv: "disable",
 *     diffservcode: "000000",
 *     guaranteedBandwidth: 0,
 *     maximumBandwidth: 1024,
 *     perPolicy: "disable",
 *     priority: "low",
 * });
 * ```
 *
 * ## Import
 *
 * FirewallShaper TrafficShaper can be imported using any of these accepted formats$ export "FORTIOS_IMPORT_TABLE"="true"
 *
 * ```sh
 *  $ pulumi import fortios:index/firewallShaperTrafficShaper:FirewallShaperTrafficShaper labelname {{name}}
 * ```
 *
 *  $ unset "FORTIOS_IMPORT_TABLE"
 */
export class FirewallShaperTrafficShaper extends pulumi.CustomResource {
    /**
     * Get an existing FirewallShaperTrafficShaper resource's state with the given name, ID, and optional extra
     * properties used to qualify the lookup.
     *
     * @param name The _unique_ name of the resulting resource.
     * @param id The _unique_ provider ID of the resource to lookup.
     * @param state Any extra arguments used during the lookup.
     * @param opts Optional settings to control the behavior of the CustomResource.
     */
    public static get(name: string, id: pulumi.Input<pulumi.ID>, state?: FirewallShaperTrafficShaperState, opts?: pulumi.CustomResourceOptions): FirewallShaperTrafficShaper {
        return new FirewallShaperTrafficShaper(name, <any>state, { ...opts, id: id });
    }

    /** @internal */
    public static readonly __pulumiType = 'fortios:index/firewallShaperTrafficShaper:FirewallShaperTrafficShaper';

    /**
     * Returns true if the given object is an instance of FirewallShaperTrafficShaper.  This is designed to work even
     * when multiple copies of the Pulumi SDK have been loaded into the same process.
     */
    public static isInstance(obj: any): obj is FirewallShaperTrafficShaper {
        if (obj === undefined || obj === null) {
            return false;
        }
        return obj['__pulumiType'] === FirewallShaperTrafficShaper.__pulumiType;
    }

    /**
     * Unit of measurement for guaranteed and maximum bandwidth for this shaper (Kbps, Mbps or Gbps). Valid values: `kbps`, `mbps`, `gbps`.
     */
    public readonly bandwidthUnit!: pulumi.Output<string>;
    /**
     * Enable/disable changing the DiffServ setting applied to traffic accepted by this shaper. Valid values: `enable`, `disable`.
     */
    public readonly diffserv!: pulumi.Output<string>;
    /**
     * DiffServ setting to be applied to traffic accepted by this shaper.
     */
    public readonly diffservcode!: pulumi.Output<string>;
    /**
     * Select DSCP marking method. Valid values: `multi-stage`, `static`.
     */
    public readonly dscpMarkingMethod!: pulumi.Output<string>;
    /**
     * Exceed bandwidth used for DSCP multi-stage marking. Units depend on the bandwidth-unit setting.
     */
    public readonly exceedBandwidth!: pulumi.Output<number>;
    /**
     * Class ID for traffic in [guaranteed-bandwidth, maximum-bandwidth].
     */
    public readonly exceedClassId!: pulumi.Output<number>;
    /**
     * DSCP mark for traffic in [guaranteed-bandwidth, exceed-bandwidth].
     */
    public readonly exceedDscp!: pulumi.Output<string>;
    /**
     * Amount of bandwidth guaranteed for this shaper (0 - 16776000). Units depend on the bandwidth-unit setting.
     */
    public readonly guaranteedBandwidth!: pulumi.Output<number>;
    /**
     * Upper bandwidth limit enforced by this shaper (0 - 16776000). 0 means no limit. Units depend on the bandwidth-unit setting.
     */
    public readonly maximumBandwidth!: pulumi.Output<number>;
    /**
     * DSCP mark for traffic in [exceed-bandwidth, maximum-bandwidth].
     */
    public readonly maximumDscp!: pulumi.Output<string>;
    /**
     * Traffic shaper name.
     */
    public readonly name!: pulumi.Output<string>;
    /**
     * Per-packet size overhead used in rate computations.
     */
    public readonly overhead!: pulumi.Output<number>;
    /**
     * Enable/disable applying a separate shaper for each policy. For example, if enabled the guaranteed bandwidth is applied separately for each policy. Valid values: `disable`, `enable`.
     */
    public readonly perPolicy!: pulumi.Output<string>;
    /**
     * Higher priority traffic is more likely to be forwarded without delays and without compromising the guaranteed bandwidth. Valid values: `low`, `medium`, `high`.
     */
    public readonly priority!: pulumi.Output<string>;
    /**
     * Specifies the vdom to which the resource will be applied when the FortiGate unit is running in VDOM mode. Only one vdom can be specified. If you want to inherit the vdom configuration of the provider, please do not set this parameter.
     */
    public readonly vdomparam!: pulumi.Output<string | undefined>;

    /**
     * Create a FirewallShaperTrafficShaper resource with the given unique name, arguments, and options.
     *
     * @param name The _unique_ name of the resource.
     * @param args The arguments to use to populate this resource's properties.
     * @param opts A bag of options that control this resource's behavior.
     */
    constructor(name: string, args?: FirewallShaperTrafficShaperArgs, opts?: pulumi.CustomResourceOptions)
    constructor(name: string, argsOrState?: FirewallShaperTrafficShaperArgs | FirewallShaperTrafficShaperState, opts?: pulumi.CustomResourceOptions) {
        let inputs: pulumi.Inputs = {};
        opts = opts || {};
        if (opts.id) {
            const state = argsOrState as FirewallShaperTrafficShaperState | undefined;
            inputs["bandwidthUnit"] = state ? state.bandwidthUnit : undefined;
            inputs["diffserv"] = state ? state.diffserv : undefined;
            inputs["diffservcode"] = state ? state.diffservcode : undefined;
            inputs["dscpMarkingMethod"] = state ? state.dscpMarkingMethod : undefined;
            inputs["exceedBandwidth"] = state ? state.exceedBandwidth : undefined;
            inputs["exceedClassId"] = state ? state.exceedClassId : undefined;
            inputs["exceedDscp"] = state ? state.exceedDscp : undefined;
            inputs["guaranteedBandwidth"] = state ? state.guaranteedBandwidth : undefined;
            inputs["maximumBandwidth"] = state ? state.maximumBandwidth : undefined;
            inputs["maximumDscp"] = state ? state.maximumDscp : undefined;
            inputs["name"] = state ? state.name : undefined;
            inputs["overhead"] = state ? state.overhead : undefined;
            inputs["perPolicy"] = state ? state.perPolicy : undefined;
            inputs["priority"] = state ? state.priority : undefined;
            inputs["vdomparam"] = state ? state.vdomparam : undefined;
        } else {
            const args = argsOrState as FirewallShaperTrafficShaperArgs | undefined;
            inputs["bandwidthUnit"] = args ? args.bandwidthUnit : undefined;
            inputs["diffserv"] = args ? args.diffserv : undefined;
            inputs["diffservcode"] = args ? args.diffservcode : undefined;
            inputs["dscpMarkingMethod"] = args ? args.dscpMarkingMethod : undefined;
            inputs["exceedBandwidth"] = args ? args.exceedBandwidth : undefined;
            inputs["exceedClassId"] = args ? args.exceedClassId : undefined;
            inputs["exceedDscp"] = args ? args.exceedDscp : undefined;
            inputs["guaranteedBandwidth"] = args ? args.guaranteedBandwidth : undefined;
            inputs["maximumBandwidth"] = args ? args.maximumBandwidth : undefined;
            inputs["maximumDscp"] = args ? args.maximumDscp : undefined;
            inputs["name"] = args ? args.name : undefined;
            inputs["overhead"] = args ? args.overhead : undefined;
            inputs["perPolicy"] = args ? args.perPolicy : undefined;
            inputs["priority"] = args ? args.priority : undefined;
            inputs["vdomparam"] = args ? args.vdomparam : undefined;
        }
        if (!opts.version) {
            opts = pulumi.mergeOptions(opts, { version: utilities.getVersion()});
        }
        super(FirewallShaperTrafficShaper.__pulumiType, name, inputs, opts);
    }
}

/**
 * Input properties used for looking up and filtering FirewallShaperTrafficShaper resources.
 */
export interface FirewallShaperTrafficShaperState {
    /**
     * Unit of measurement for guaranteed and maximum bandwidth for this shaper (Kbps, Mbps or Gbps). Valid values: `kbps`, `mbps`, `gbps`.
     */
    bandwidthUnit?: pulumi.Input<string>;
    /**
     * Enable/disable changing the DiffServ setting applied to traffic accepted by this shaper. Valid values: `enable`, `disable`.
     */
    diffserv?: pulumi.Input<string>;
    /**
     * DiffServ setting to be applied to traffic accepted by this shaper.
     */
    diffservcode?: pulumi.Input<string>;
    /**
     * Select DSCP marking method. Valid values: `multi-stage`, `static`.
     */
    dscpMarkingMethod?: pulumi.Input<string>;
    /**
     * Exceed bandwidth used for DSCP multi-stage marking. Units depend on the bandwidth-unit setting.
     */
    exceedBandwidth?: pulumi.Input<number>;
    /**
     * Class ID for traffic in [guaranteed-bandwidth, maximum-bandwidth].
     */
    exceedClassId?: pulumi.Input<number>;
    /**
     * DSCP mark for traffic in [guaranteed-bandwidth, exceed-bandwidth].
     */
    exceedDscp?: pulumi.Input<string>;
    /**
     * Amount of bandwidth guaranteed for this shaper (0 - 16776000). Units depend on the bandwidth-unit setting.
     */
    guaranteedBandwidth?: pulumi.Input<number>;
    /**
     * Upper bandwidth limit enforced by this shaper (0 - 16776000). 0 means no limit. Units depend on the bandwidth-unit setting.
     */
    maximumBandwidth?: pulumi.Input<number>;
    /**
     * DSCP mark for traffic in [exceed-bandwidth, maximum-bandwidth].
     */
    maximumDscp?: pulumi.Input<string>;
    /**
     * Traffic shaper name.
     */
    name?: pulumi.Input<string>;
    /**
     * Per-packet size overhead used in rate computations.
     */
    overhead?: pulumi.Input<number>;
    /**
     * Enable/disable applying a separate shaper for each policy. For example, if enabled the guaranteed bandwidth is applied separately for each policy. Valid values: `disable`, `enable`.
     */
    perPolicy?: pulumi.Input<string>;
    /**
     * Higher priority traffic is more likely to be forwarded without delays and without compromising the guaranteed bandwidth. Valid values: `low`, `medium`, `high`.
     */
    priority?: pulumi.Input<string>;
    /**
     * Specifies the vdom to which the resource will be applied when the FortiGate unit is running in VDOM mode. Only one vdom can be specified. If you want to inherit the vdom configuration of the provider, please do not set this parameter.
     */
    vdomparam?: pulumi.Input<string>;
}

/**
 * The set of arguments for constructing a FirewallShaperTrafficShaper resource.
 */
export interface FirewallShaperTrafficShaperArgs {
    /**
     * Unit of measurement for guaranteed and maximum bandwidth for this shaper (Kbps, Mbps or Gbps). Valid values: `kbps`, `mbps`, `gbps`.
     */
    bandwidthUnit?: pulumi.Input<string>;
    /**
     * Enable/disable changing the DiffServ setting applied to traffic accepted by this shaper. Valid values: `enable`, `disable`.
     */
    diffserv?: pulumi.Input<string>;
    /**
     * DiffServ setting to be applied to traffic accepted by this shaper.
     */
    diffservcode?: pulumi.Input<string>;
    /**
     * Select DSCP marking method. Valid values: `multi-stage`, `static`.
     */
    dscpMarkingMethod?: pulumi.Input<string>;
    /**
     * Exceed bandwidth used for DSCP multi-stage marking. Units depend on the bandwidth-unit setting.
     */
    exceedBandwidth?: pulumi.Input<number>;
    /**
     * Class ID for traffic in [guaranteed-bandwidth, maximum-bandwidth].
     */
    exceedClassId?: pulumi.Input<number>;
    /**
     * DSCP mark for traffic in [guaranteed-bandwidth, exceed-bandwidth].
     */
    exceedDscp?: pulumi.Input<string>;
    /**
     * Amount of bandwidth guaranteed for this shaper (0 - 16776000). Units depend on the bandwidth-unit setting.
     */
    guaranteedBandwidth?: pulumi.Input<number>;
    /**
     * Upper bandwidth limit enforced by this shaper (0 - 16776000). 0 means no limit. Units depend on the bandwidth-unit setting.
     */
    maximumBandwidth?: pulumi.Input<number>;
    /**
     * DSCP mark for traffic in [exceed-bandwidth, maximum-bandwidth].
     */
    maximumDscp?: pulumi.Input<string>;
    /**
     * Traffic shaper name.
     */
    name?: pulumi.Input<string>;
    /**
     * Per-packet size overhead used in rate computations.
     */
    overhead?: pulumi.Input<number>;
    /**
     * Enable/disable applying a separate shaper for each policy. For example, if enabled the guaranteed bandwidth is applied separately for each policy. Valid values: `disable`, `enable`.
     */
    perPolicy?: pulumi.Input<string>;
    /**
     * Higher priority traffic is more likely to be forwarded without delays and without compromising the guaranteed bandwidth. Valid values: `low`, `medium`, `high`.
     */
    priority?: pulumi.Input<string>;
    /**
     * Specifies the vdom to which the resource will be applied when the FortiGate unit is running in VDOM mode. Only one vdom can be specified. If you want to inherit the vdom configuration of the provider, please do not set this parameter.
     */
    vdomparam?: pulumi.Input<string>;
}
