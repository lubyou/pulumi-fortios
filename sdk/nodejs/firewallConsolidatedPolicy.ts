// *** WARNING: this file was generated by the Pulumi Terraform Bridge (tfgen) Tool. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

import * as pulumi from "@pulumi/pulumi";
import * as inputs from "./types/input";
import * as outputs from "./types/output";
import * as utilities from "./utilities";

export class FirewallConsolidatedPolicy extends pulumi.CustomResource {
    /**
     * Get an existing FirewallConsolidatedPolicy resource's state with the given name, ID, and optional extra
     * properties used to qualify the lookup.
     *
     * @param name The _unique_ name of the resulting resource.
     * @param id The _unique_ provider ID of the resource to lookup.
     * @param state Any extra arguments used during the lookup.
     * @param opts Optional settings to control the behavior of the CustomResource.
     */
    public static get(name: string, id: pulumi.Input<pulumi.ID>, state?: FirewallConsolidatedPolicyState, opts?: pulumi.CustomResourceOptions): FirewallConsolidatedPolicy {
        return new FirewallConsolidatedPolicy(name, <any>state, { ...opts, id: id });
    }

    /** @internal */
    public static readonly __pulumiType = 'fortios:index/firewallConsolidatedPolicy:FirewallConsolidatedPolicy';

    /**
     * Returns true if the given object is an instance of FirewallConsolidatedPolicy.  This is designed to work even
     * when multiple copies of the Pulumi SDK have been loaded into the same process.
     */
    public static isInstance(obj: any): obj is FirewallConsolidatedPolicy {
        if (obj === undefined || obj === null) {
            return false;
        }
        return obj['__pulumiType'] === FirewallConsolidatedPolicy.__pulumiType;
    }

    public readonly action!: pulumi.Output<string>;
    public readonly appCategories!: pulumi.Output<outputs.FirewallConsolidatedPolicyAppCategory[] | undefined>;
    public readonly appGroups!: pulumi.Output<outputs.FirewallConsolidatedPolicyAppGroup[] | undefined>;
    public readonly applicationList!: pulumi.Output<string>;
    public readonly applications!: pulumi.Output<outputs.FirewallConsolidatedPolicyApplication[] | undefined>;
    public readonly autoAsicOffload!: pulumi.Output<string>;
    public readonly avProfile!: pulumi.Output<string>;
    public readonly captivePortalExempt!: pulumi.Output<string>;
    public readonly cifsProfile!: pulumi.Output<string>;
    public readonly comments!: pulumi.Output<string | undefined>;
    public readonly diffservForward!: pulumi.Output<string>;
    public readonly diffservReverse!: pulumi.Output<string>;
    public readonly diffservcodeForward!: pulumi.Output<string>;
    public readonly diffservcodeRev!: pulumi.Output<string>;
    public readonly dlpSensor!: pulumi.Output<string>;
    public readonly dnsfilterProfile!: pulumi.Output<string>;
    public readonly dstaddr4s!: pulumi.Output<outputs.FirewallConsolidatedPolicyDstaddr4[] | undefined>;
    public readonly dstaddr6s!: pulumi.Output<outputs.FirewallConsolidatedPolicyDstaddr6[] | undefined>;
    public readonly dstaddrNegate!: pulumi.Output<string>;
    public readonly dstintfs!: pulumi.Output<outputs.FirewallConsolidatedPolicyDstintf[] | undefined>;
    public readonly dynamicSortSubtable!: pulumi.Output<string | undefined>;
    public readonly emailfilterProfile!: pulumi.Output<string>;
    public readonly fixedport!: pulumi.Output<string>;
    public readonly fssoGroups!: pulumi.Output<outputs.FirewallConsolidatedPolicyFssoGroup[] | undefined>;
    public readonly getAllTables!: pulumi.Output<string | undefined>;
    public readonly groups!: pulumi.Output<outputs.FirewallConsolidatedPolicyGroup[] | undefined>;
    public readonly httpPolicyRedirect!: pulumi.Output<string>;
    public readonly icapProfile!: pulumi.Output<string>;
    public readonly inbound!: pulumi.Output<string>;
    public readonly inspectionMode!: pulumi.Output<string>;
    public readonly internetService!: pulumi.Output<string>;
    public readonly internetServiceCustomGroups!: pulumi.Output<outputs.FirewallConsolidatedPolicyInternetServiceCustomGroup[] | undefined>;
    public readonly internetServiceCustoms!: pulumi.Output<outputs.FirewallConsolidatedPolicyInternetServiceCustom[] | undefined>;
    public readonly internetServiceGroups!: pulumi.Output<outputs.FirewallConsolidatedPolicyInternetServiceGroup[] | undefined>;
    public readonly internetServiceIds!: pulumi.Output<outputs.FirewallConsolidatedPolicyInternetServiceId[] | undefined>;
    public readonly internetServiceNames!: pulumi.Output<outputs.FirewallConsolidatedPolicyInternetServiceName[] | undefined>;
    public readonly internetServiceNegate!: pulumi.Output<string>;
    public readonly internetServiceSrc!: pulumi.Output<string>;
    public readonly internetServiceSrcCustomGroups!: pulumi.Output<outputs.FirewallConsolidatedPolicyInternetServiceSrcCustomGroup[] | undefined>;
    public readonly internetServiceSrcCustoms!: pulumi.Output<outputs.FirewallConsolidatedPolicyInternetServiceSrcCustom[] | undefined>;
    public readonly internetServiceSrcGroups!: pulumi.Output<outputs.FirewallConsolidatedPolicyInternetServiceSrcGroup[] | undefined>;
    public readonly internetServiceSrcIds!: pulumi.Output<outputs.FirewallConsolidatedPolicyInternetServiceSrcId[] | undefined>;
    public readonly internetServiceSrcNames!: pulumi.Output<outputs.FirewallConsolidatedPolicyInternetServiceSrcName[] | undefined>;
    public readonly internetServiceSrcNegate!: pulumi.Output<string>;
    public readonly ippool!: pulumi.Output<string>;
    public readonly ipsSensor!: pulumi.Output<string>;
    public readonly logtraffic!: pulumi.Output<string>;
    public readonly logtrafficStart!: pulumi.Output<string>;
    public readonly name!: pulumi.Output<string>;
    public readonly nat!: pulumi.Output<string>;
    public readonly outbound!: pulumi.Output<string>;
    public readonly perIpShaper!: pulumi.Output<string>;
    public readonly policyid!: pulumi.Output<number>;
    public readonly poolname4s!: pulumi.Output<outputs.FirewallConsolidatedPolicyPoolname4[] | undefined>;
    public readonly poolname6s!: pulumi.Output<outputs.FirewallConsolidatedPolicyPoolname6[] | undefined>;
    public readonly profileGroup!: pulumi.Output<string>;
    public readonly profileProtocolOptions!: pulumi.Output<string>;
    public readonly profileType!: pulumi.Output<string>;
    public readonly schedule!: pulumi.Output<string>;
    public readonly serviceNegate!: pulumi.Output<string>;
    public readonly services!: pulumi.Output<outputs.FirewallConsolidatedPolicyService[] | undefined>;
    public readonly sessionTtl!: pulumi.Output<number>;
    public readonly spamfilterProfile!: pulumi.Output<string>;
    public readonly srcaddr4s!: pulumi.Output<outputs.FirewallConsolidatedPolicySrcaddr4[] | undefined>;
    public readonly srcaddr6s!: pulumi.Output<outputs.FirewallConsolidatedPolicySrcaddr6[] | undefined>;
    public readonly srcaddrNegate!: pulumi.Output<string>;
    public readonly srcintfs!: pulumi.Output<outputs.FirewallConsolidatedPolicySrcintf[] | undefined>;
    public readonly sshFilterProfile!: pulumi.Output<string>;
    public readonly sshPolicyRedirect!: pulumi.Output<string>;
    public readonly sslSshProfile!: pulumi.Output<string>;
    public readonly status!: pulumi.Output<string>;
    public readonly tcpMssReceiver!: pulumi.Output<number>;
    public readonly tcpMssSender!: pulumi.Output<number>;
    public readonly trafficShaper!: pulumi.Output<string>;
    public readonly trafficShaperReverse!: pulumi.Output<string>;
    public readonly urlCategories!: pulumi.Output<outputs.FirewallConsolidatedPolicyUrlCategory[] | undefined>;
    public readonly users!: pulumi.Output<outputs.FirewallConsolidatedPolicyUser[] | undefined>;
    public readonly utmStatus!: pulumi.Output<string>;
    public readonly uuid!: pulumi.Output<string>;
    public readonly vdomparam!: pulumi.Output<string | undefined>;
    public readonly voipProfile!: pulumi.Output<string>;
    public readonly vpntunnel!: pulumi.Output<string>;
    public readonly wafProfile!: pulumi.Output<string>;
    public readonly wanopt!: pulumi.Output<string>;
    public readonly wanoptDetection!: pulumi.Output<string>;
    public readonly wanoptPassiveOpt!: pulumi.Output<string>;
    public readonly wanoptPeer!: pulumi.Output<string>;
    public readonly wanoptProfile!: pulumi.Output<string>;
    public readonly webcache!: pulumi.Output<string>;
    public readonly webcacheHttps!: pulumi.Output<string>;
    public readonly webfilterProfile!: pulumi.Output<string>;
    public readonly webproxyForwardServer!: pulumi.Output<string>;
    public readonly webproxyProfile!: pulumi.Output<string>;

    /**
     * Create a FirewallConsolidatedPolicy resource with the given unique name, arguments, and options.
     *
     * @param name The _unique_ name of the resource.
     * @param args The arguments to use to populate this resource's properties.
     * @param opts A bag of options that control this resource's behavior.
     */
    constructor(name: string, args?: FirewallConsolidatedPolicyArgs, opts?: pulumi.CustomResourceOptions)
    constructor(name: string, argsOrState?: FirewallConsolidatedPolicyArgs | FirewallConsolidatedPolicyState, opts?: pulumi.CustomResourceOptions) {
        let resourceInputs: pulumi.Inputs = {};
        opts = opts || {};
        if (opts.id) {
            const state = argsOrState as FirewallConsolidatedPolicyState | undefined;
            resourceInputs["action"] = state ? state.action : undefined;
            resourceInputs["appCategories"] = state ? state.appCategories : undefined;
            resourceInputs["appGroups"] = state ? state.appGroups : undefined;
            resourceInputs["applicationList"] = state ? state.applicationList : undefined;
            resourceInputs["applications"] = state ? state.applications : undefined;
            resourceInputs["autoAsicOffload"] = state ? state.autoAsicOffload : undefined;
            resourceInputs["avProfile"] = state ? state.avProfile : undefined;
            resourceInputs["captivePortalExempt"] = state ? state.captivePortalExempt : undefined;
            resourceInputs["cifsProfile"] = state ? state.cifsProfile : undefined;
            resourceInputs["comments"] = state ? state.comments : undefined;
            resourceInputs["diffservForward"] = state ? state.diffservForward : undefined;
            resourceInputs["diffservReverse"] = state ? state.diffservReverse : undefined;
            resourceInputs["diffservcodeForward"] = state ? state.diffservcodeForward : undefined;
            resourceInputs["diffservcodeRev"] = state ? state.diffservcodeRev : undefined;
            resourceInputs["dlpSensor"] = state ? state.dlpSensor : undefined;
            resourceInputs["dnsfilterProfile"] = state ? state.dnsfilterProfile : undefined;
            resourceInputs["dstaddr4s"] = state ? state.dstaddr4s : undefined;
            resourceInputs["dstaddr6s"] = state ? state.dstaddr6s : undefined;
            resourceInputs["dstaddrNegate"] = state ? state.dstaddrNegate : undefined;
            resourceInputs["dstintfs"] = state ? state.dstintfs : undefined;
            resourceInputs["dynamicSortSubtable"] = state ? state.dynamicSortSubtable : undefined;
            resourceInputs["emailfilterProfile"] = state ? state.emailfilterProfile : undefined;
            resourceInputs["fixedport"] = state ? state.fixedport : undefined;
            resourceInputs["fssoGroups"] = state ? state.fssoGroups : undefined;
            resourceInputs["getAllTables"] = state ? state.getAllTables : undefined;
            resourceInputs["groups"] = state ? state.groups : undefined;
            resourceInputs["httpPolicyRedirect"] = state ? state.httpPolicyRedirect : undefined;
            resourceInputs["icapProfile"] = state ? state.icapProfile : undefined;
            resourceInputs["inbound"] = state ? state.inbound : undefined;
            resourceInputs["inspectionMode"] = state ? state.inspectionMode : undefined;
            resourceInputs["internetService"] = state ? state.internetService : undefined;
            resourceInputs["internetServiceCustomGroups"] = state ? state.internetServiceCustomGroups : undefined;
            resourceInputs["internetServiceCustoms"] = state ? state.internetServiceCustoms : undefined;
            resourceInputs["internetServiceGroups"] = state ? state.internetServiceGroups : undefined;
            resourceInputs["internetServiceIds"] = state ? state.internetServiceIds : undefined;
            resourceInputs["internetServiceNames"] = state ? state.internetServiceNames : undefined;
            resourceInputs["internetServiceNegate"] = state ? state.internetServiceNegate : undefined;
            resourceInputs["internetServiceSrc"] = state ? state.internetServiceSrc : undefined;
            resourceInputs["internetServiceSrcCustomGroups"] = state ? state.internetServiceSrcCustomGroups : undefined;
            resourceInputs["internetServiceSrcCustoms"] = state ? state.internetServiceSrcCustoms : undefined;
            resourceInputs["internetServiceSrcGroups"] = state ? state.internetServiceSrcGroups : undefined;
            resourceInputs["internetServiceSrcIds"] = state ? state.internetServiceSrcIds : undefined;
            resourceInputs["internetServiceSrcNames"] = state ? state.internetServiceSrcNames : undefined;
            resourceInputs["internetServiceSrcNegate"] = state ? state.internetServiceSrcNegate : undefined;
            resourceInputs["ippool"] = state ? state.ippool : undefined;
            resourceInputs["ipsSensor"] = state ? state.ipsSensor : undefined;
            resourceInputs["logtraffic"] = state ? state.logtraffic : undefined;
            resourceInputs["logtrafficStart"] = state ? state.logtrafficStart : undefined;
            resourceInputs["name"] = state ? state.name : undefined;
            resourceInputs["nat"] = state ? state.nat : undefined;
            resourceInputs["outbound"] = state ? state.outbound : undefined;
            resourceInputs["perIpShaper"] = state ? state.perIpShaper : undefined;
            resourceInputs["policyid"] = state ? state.policyid : undefined;
            resourceInputs["poolname4s"] = state ? state.poolname4s : undefined;
            resourceInputs["poolname6s"] = state ? state.poolname6s : undefined;
            resourceInputs["profileGroup"] = state ? state.profileGroup : undefined;
            resourceInputs["profileProtocolOptions"] = state ? state.profileProtocolOptions : undefined;
            resourceInputs["profileType"] = state ? state.profileType : undefined;
            resourceInputs["schedule"] = state ? state.schedule : undefined;
            resourceInputs["serviceNegate"] = state ? state.serviceNegate : undefined;
            resourceInputs["services"] = state ? state.services : undefined;
            resourceInputs["sessionTtl"] = state ? state.sessionTtl : undefined;
            resourceInputs["spamfilterProfile"] = state ? state.spamfilterProfile : undefined;
            resourceInputs["srcaddr4s"] = state ? state.srcaddr4s : undefined;
            resourceInputs["srcaddr6s"] = state ? state.srcaddr6s : undefined;
            resourceInputs["srcaddrNegate"] = state ? state.srcaddrNegate : undefined;
            resourceInputs["srcintfs"] = state ? state.srcintfs : undefined;
            resourceInputs["sshFilterProfile"] = state ? state.sshFilterProfile : undefined;
            resourceInputs["sshPolicyRedirect"] = state ? state.sshPolicyRedirect : undefined;
            resourceInputs["sslSshProfile"] = state ? state.sslSshProfile : undefined;
            resourceInputs["status"] = state ? state.status : undefined;
            resourceInputs["tcpMssReceiver"] = state ? state.tcpMssReceiver : undefined;
            resourceInputs["tcpMssSender"] = state ? state.tcpMssSender : undefined;
            resourceInputs["trafficShaper"] = state ? state.trafficShaper : undefined;
            resourceInputs["trafficShaperReverse"] = state ? state.trafficShaperReverse : undefined;
            resourceInputs["urlCategories"] = state ? state.urlCategories : undefined;
            resourceInputs["users"] = state ? state.users : undefined;
            resourceInputs["utmStatus"] = state ? state.utmStatus : undefined;
            resourceInputs["uuid"] = state ? state.uuid : undefined;
            resourceInputs["vdomparam"] = state ? state.vdomparam : undefined;
            resourceInputs["voipProfile"] = state ? state.voipProfile : undefined;
            resourceInputs["vpntunnel"] = state ? state.vpntunnel : undefined;
            resourceInputs["wafProfile"] = state ? state.wafProfile : undefined;
            resourceInputs["wanopt"] = state ? state.wanopt : undefined;
            resourceInputs["wanoptDetection"] = state ? state.wanoptDetection : undefined;
            resourceInputs["wanoptPassiveOpt"] = state ? state.wanoptPassiveOpt : undefined;
            resourceInputs["wanoptPeer"] = state ? state.wanoptPeer : undefined;
            resourceInputs["wanoptProfile"] = state ? state.wanoptProfile : undefined;
            resourceInputs["webcache"] = state ? state.webcache : undefined;
            resourceInputs["webcacheHttps"] = state ? state.webcacheHttps : undefined;
            resourceInputs["webfilterProfile"] = state ? state.webfilterProfile : undefined;
            resourceInputs["webproxyForwardServer"] = state ? state.webproxyForwardServer : undefined;
            resourceInputs["webproxyProfile"] = state ? state.webproxyProfile : undefined;
        } else {
            const args = argsOrState as FirewallConsolidatedPolicyArgs | undefined;
            resourceInputs["action"] = args ? args.action : undefined;
            resourceInputs["appCategories"] = args ? args.appCategories : undefined;
            resourceInputs["appGroups"] = args ? args.appGroups : undefined;
            resourceInputs["applicationList"] = args ? args.applicationList : undefined;
            resourceInputs["applications"] = args ? args.applications : undefined;
            resourceInputs["autoAsicOffload"] = args ? args.autoAsicOffload : undefined;
            resourceInputs["avProfile"] = args ? args.avProfile : undefined;
            resourceInputs["captivePortalExempt"] = args ? args.captivePortalExempt : undefined;
            resourceInputs["cifsProfile"] = args ? args.cifsProfile : undefined;
            resourceInputs["comments"] = args ? args.comments : undefined;
            resourceInputs["diffservForward"] = args ? args.diffservForward : undefined;
            resourceInputs["diffservReverse"] = args ? args.diffservReverse : undefined;
            resourceInputs["diffservcodeForward"] = args ? args.diffservcodeForward : undefined;
            resourceInputs["diffservcodeRev"] = args ? args.diffservcodeRev : undefined;
            resourceInputs["dlpSensor"] = args ? args.dlpSensor : undefined;
            resourceInputs["dnsfilterProfile"] = args ? args.dnsfilterProfile : undefined;
            resourceInputs["dstaddr4s"] = args ? args.dstaddr4s : undefined;
            resourceInputs["dstaddr6s"] = args ? args.dstaddr6s : undefined;
            resourceInputs["dstaddrNegate"] = args ? args.dstaddrNegate : undefined;
            resourceInputs["dstintfs"] = args ? args.dstintfs : undefined;
            resourceInputs["dynamicSortSubtable"] = args ? args.dynamicSortSubtable : undefined;
            resourceInputs["emailfilterProfile"] = args ? args.emailfilterProfile : undefined;
            resourceInputs["fixedport"] = args ? args.fixedport : undefined;
            resourceInputs["fssoGroups"] = args ? args.fssoGroups : undefined;
            resourceInputs["getAllTables"] = args ? args.getAllTables : undefined;
            resourceInputs["groups"] = args ? args.groups : undefined;
            resourceInputs["httpPolicyRedirect"] = args ? args.httpPolicyRedirect : undefined;
            resourceInputs["icapProfile"] = args ? args.icapProfile : undefined;
            resourceInputs["inbound"] = args ? args.inbound : undefined;
            resourceInputs["inspectionMode"] = args ? args.inspectionMode : undefined;
            resourceInputs["internetService"] = args ? args.internetService : undefined;
            resourceInputs["internetServiceCustomGroups"] = args ? args.internetServiceCustomGroups : undefined;
            resourceInputs["internetServiceCustoms"] = args ? args.internetServiceCustoms : undefined;
            resourceInputs["internetServiceGroups"] = args ? args.internetServiceGroups : undefined;
            resourceInputs["internetServiceIds"] = args ? args.internetServiceIds : undefined;
            resourceInputs["internetServiceNames"] = args ? args.internetServiceNames : undefined;
            resourceInputs["internetServiceNegate"] = args ? args.internetServiceNegate : undefined;
            resourceInputs["internetServiceSrc"] = args ? args.internetServiceSrc : undefined;
            resourceInputs["internetServiceSrcCustomGroups"] = args ? args.internetServiceSrcCustomGroups : undefined;
            resourceInputs["internetServiceSrcCustoms"] = args ? args.internetServiceSrcCustoms : undefined;
            resourceInputs["internetServiceSrcGroups"] = args ? args.internetServiceSrcGroups : undefined;
            resourceInputs["internetServiceSrcIds"] = args ? args.internetServiceSrcIds : undefined;
            resourceInputs["internetServiceSrcNames"] = args ? args.internetServiceSrcNames : undefined;
            resourceInputs["internetServiceSrcNegate"] = args ? args.internetServiceSrcNegate : undefined;
            resourceInputs["ippool"] = args ? args.ippool : undefined;
            resourceInputs["ipsSensor"] = args ? args.ipsSensor : undefined;
            resourceInputs["logtraffic"] = args ? args.logtraffic : undefined;
            resourceInputs["logtrafficStart"] = args ? args.logtrafficStart : undefined;
            resourceInputs["name"] = args ? args.name : undefined;
            resourceInputs["nat"] = args ? args.nat : undefined;
            resourceInputs["outbound"] = args ? args.outbound : undefined;
            resourceInputs["perIpShaper"] = args ? args.perIpShaper : undefined;
            resourceInputs["policyid"] = args ? args.policyid : undefined;
            resourceInputs["poolname4s"] = args ? args.poolname4s : undefined;
            resourceInputs["poolname6s"] = args ? args.poolname6s : undefined;
            resourceInputs["profileGroup"] = args ? args.profileGroup : undefined;
            resourceInputs["profileProtocolOptions"] = args ? args.profileProtocolOptions : undefined;
            resourceInputs["profileType"] = args ? args.profileType : undefined;
            resourceInputs["schedule"] = args ? args.schedule : undefined;
            resourceInputs["serviceNegate"] = args ? args.serviceNegate : undefined;
            resourceInputs["services"] = args ? args.services : undefined;
            resourceInputs["sessionTtl"] = args ? args.sessionTtl : undefined;
            resourceInputs["spamfilterProfile"] = args ? args.spamfilterProfile : undefined;
            resourceInputs["srcaddr4s"] = args ? args.srcaddr4s : undefined;
            resourceInputs["srcaddr6s"] = args ? args.srcaddr6s : undefined;
            resourceInputs["srcaddrNegate"] = args ? args.srcaddrNegate : undefined;
            resourceInputs["srcintfs"] = args ? args.srcintfs : undefined;
            resourceInputs["sshFilterProfile"] = args ? args.sshFilterProfile : undefined;
            resourceInputs["sshPolicyRedirect"] = args ? args.sshPolicyRedirect : undefined;
            resourceInputs["sslSshProfile"] = args ? args.sslSshProfile : undefined;
            resourceInputs["status"] = args ? args.status : undefined;
            resourceInputs["tcpMssReceiver"] = args ? args.tcpMssReceiver : undefined;
            resourceInputs["tcpMssSender"] = args ? args.tcpMssSender : undefined;
            resourceInputs["trafficShaper"] = args ? args.trafficShaper : undefined;
            resourceInputs["trafficShaperReverse"] = args ? args.trafficShaperReverse : undefined;
            resourceInputs["urlCategories"] = args ? args.urlCategories : undefined;
            resourceInputs["users"] = args ? args.users : undefined;
            resourceInputs["utmStatus"] = args ? args.utmStatus : undefined;
            resourceInputs["uuid"] = args ? args.uuid : undefined;
            resourceInputs["vdomparam"] = args ? args.vdomparam : undefined;
            resourceInputs["voipProfile"] = args ? args.voipProfile : undefined;
            resourceInputs["vpntunnel"] = args ? args.vpntunnel : undefined;
            resourceInputs["wafProfile"] = args ? args.wafProfile : undefined;
            resourceInputs["wanopt"] = args ? args.wanopt : undefined;
            resourceInputs["wanoptDetection"] = args ? args.wanoptDetection : undefined;
            resourceInputs["wanoptPassiveOpt"] = args ? args.wanoptPassiveOpt : undefined;
            resourceInputs["wanoptPeer"] = args ? args.wanoptPeer : undefined;
            resourceInputs["wanoptProfile"] = args ? args.wanoptProfile : undefined;
            resourceInputs["webcache"] = args ? args.webcache : undefined;
            resourceInputs["webcacheHttps"] = args ? args.webcacheHttps : undefined;
            resourceInputs["webfilterProfile"] = args ? args.webfilterProfile : undefined;
            resourceInputs["webproxyForwardServer"] = args ? args.webproxyForwardServer : undefined;
            resourceInputs["webproxyProfile"] = args ? args.webproxyProfile : undefined;
        }
        opts = pulumi.mergeOptions(utilities.resourceOptsDefaults(), opts);
        super(FirewallConsolidatedPolicy.__pulumiType, name, resourceInputs, opts);
    }
}

/**
 * Input properties used for looking up and filtering FirewallConsolidatedPolicy resources.
 */
export interface FirewallConsolidatedPolicyState {
    action?: pulumi.Input<string>;
    appCategories?: pulumi.Input<pulumi.Input<inputs.FirewallConsolidatedPolicyAppCategory>[]>;
    appGroups?: pulumi.Input<pulumi.Input<inputs.FirewallConsolidatedPolicyAppGroup>[]>;
    applicationList?: pulumi.Input<string>;
    applications?: pulumi.Input<pulumi.Input<inputs.FirewallConsolidatedPolicyApplication>[]>;
    autoAsicOffload?: pulumi.Input<string>;
    avProfile?: pulumi.Input<string>;
    captivePortalExempt?: pulumi.Input<string>;
    cifsProfile?: pulumi.Input<string>;
    comments?: pulumi.Input<string>;
    diffservForward?: pulumi.Input<string>;
    diffservReverse?: pulumi.Input<string>;
    diffservcodeForward?: pulumi.Input<string>;
    diffservcodeRev?: pulumi.Input<string>;
    dlpSensor?: pulumi.Input<string>;
    dnsfilterProfile?: pulumi.Input<string>;
    dstaddr4s?: pulumi.Input<pulumi.Input<inputs.FirewallConsolidatedPolicyDstaddr4>[]>;
    dstaddr6s?: pulumi.Input<pulumi.Input<inputs.FirewallConsolidatedPolicyDstaddr6>[]>;
    dstaddrNegate?: pulumi.Input<string>;
    dstintfs?: pulumi.Input<pulumi.Input<inputs.FirewallConsolidatedPolicyDstintf>[]>;
    dynamicSortSubtable?: pulumi.Input<string>;
    emailfilterProfile?: pulumi.Input<string>;
    fixedport?: pulumi.Input<string>;
    fssoGroups?: pulumi.Input<pulumi.Input<inputs.FirewallConsolidatedPolicyFssoGroup>[]>;
    getAllTables?: pulumi.Input<string>;
    groups?: pulumi.Input<pulumi.Input<inputs.FirewallConsolidatedPolicyGroup>[]>;
    httpPolicyRedirect?: pulumi.Input<string>;
    icapProfile?: pulumi.Input<string>;
    inbound?: pulumi.Input<string>;
    inspectionMode?: pulumi.Input<string>;
    internetService?: pulumi.Input<string>;
    internetServiceCustomGroups?: pulumi.Input<pulumi.Input<inputs.FirewallConsolidatedPolicyInternetServiceCustomGroup>[]>;
    internetServiceCustoms?: pulumi.Input<pulumi.Input<inputs.FirewallConsolidatedPolicyInternetServiceCustom>[]>;
    internetServiceGroups?: pulumi.Input<pulumi.Input<inputs.FirewallConsolidatedPolicyInternetServiceGroup>[]>;
    internetServiceIds?: pulumi.Input<pulumi.Input<inputs.FirewallConsolidatedPolicyInternetServiceId>[]>;
    internetServiceNames?: pulumi.Input<pulumi.Input<inputs.FirewallConsolidatedPolicyInternetServiceName>[]>;
    internetServiceNegate?: pulumi.Input<string>;
    internetServiceSrc?: pulumi.Input<string>;
    internetServiceSrcCustomGroups?: pulumi.Input<pulumi.Input<inputs.FirewallConsolidatedPolicyInternetServiceSrcCustomGroup>[]>;
    internetServiceSrcCustoms?: pulumi.Input<pulumi.Input<inputs.FirewallConsolidatedPolicyInternetServiceSrcCustom>[]>;
    internetServiceSrcGroups?: pulumi.Input<pulumi.Input<inputs.FirewallConsolidatedPolicyInternetServiceSrcGroup>[]>;
    internetServiceSrcIds?: pulumi.Input<pulumi.Input<inputs.FirewallConsolidatedPolicyInternetServiceSrcId>[]>;
    internetServiceSrcNames?: pulumi.Input<pulumi.Input<inputs.FirewallConsolidatedPolicyInternetServiceSrcName>[]>;
    internetServiceSrcNegate?: pulumi.Input<string>;
    ippool?: pulumi.Input<string>;
    ipsSensor?: pulumi.Input<string>;
    logtraffic?: pulumi.Input<string>;
    logtrafficStart?: pulumi.Input<string>;
    name?: pulumi.Input<string>;
    nat?: pulumi.Input<string>;
    outbound?: pulumi.Input<string>;
    perIpShaper?: pulumi.Input<string>;
    policyid?: pulumi.Input<number>;
    poolname4s?: pulumi.Input<pulumi.Input<inputs.FirewallConsolidatedPolicyPoolname4>[]>;
    poolname6s?: pulumi.Input<pulumi.Input<inputs.FirewallConsolidatedPolicyPoolname6>[]>;
    profileGroup?: pulumi.Input<string>;
    profileProtocolOptions?: pulumi.Input<string>;
    profileType?: pulumi.Input<string>;
    schedule?: pulumi.Input<string>;
    serviceNegate?: pulumi.Input<string>;
    services?: pulumi.Input<pulumi.Input<inputs.FirewallConsolidatedPolicyService>[]>;
    sessionTtl?: pulumi.Input<number>;
    spamfilterProfile?: pulumi.Input<string>;
    srcaddr4s?: pulumi.Input<pulumi.Input<inputs.FirewallConsolidatedPolicySrcaddr4>[]>;
    srcaddr6s?: pulumi.Input<pulumi.Input<inputs.FirewallConsolidatedPolicySrcaddr6>[]>;
    srcaddrNegate?: pulumi.Input<string>;
    srcintfs?: pulumi.Input<pulumi.Input<inputs.FirewallConsolidatedPolicySrcintf>[]>;
    sshFilterProfile?: pulumi.Input<string>;
    sshPolicyRedirect?: pulumi.Input<string>;
    sslSshProfile?: pulumi.Input<string>;
    status?: pulumi.Input<string>;
    tcpMssReceiver?: pulumi.Input<number>;
    tcpMssSender?: pulumi.Input<number>;
    trafficShaper?: pulumi.Input<string>;
    trafficShaperReverse?: pulumi.Input<string>;
    urlCategories?: pulumi.Input<pulumi.Input<inputs.FirewallConsolidatedPolicyUrlCategory>[]>;
    users?: pulumi.Input<pulumi.Input<inputs.FirewallConsolidatedPolicyUser>[]>;
    utmStatus?: pulumi.Input<string>;
    uuid?: pulumi.Input<string>;
    vdomparam?: pulumi.Input<string>;
    voipProfile?: pulumi.Input<string>;
    vpntunnel?: pulumi.Input<string>;
    wafProfile?: pulumi.Input<string>;
    wanopt?: pulumi.Input<string>;
    wanoptDetection?: pulumi.Input<string>;
    wanoptPassiveOpt?: pulumi.Input<string>;
    wanoptPeer?: pulumi.Input<string>;
    wanoptProfile?: pulumi.Input<string>;
    webcache?: pulumi.Input<string>;
    webcacheHttps?: pulumi.Input<string>;
    webfilterProfile?: pulumi.Input<string>;
    webproxyForwardServer?: pulumi.Input<string>;
    webproxyProfile?: pulumi.Input<string>;
}

/**
 * The set of arguments for constructing a FirewallConsolidatedPolicy resource.
 */
export interface FirewallConsolidatedPolicyArgs {
    action?: pulumi.Input<string>;
    appCategories?: pulumi.Input<pulumi.Input<inputs.FirewallConsolidatedPolicyAppCategory>[]>;
    appGroups?: pulumi.Input<pulumi.Input<inputs.FirewallConsolidatedPolicyAppGroup>[]>;
    applicationList?: pulumi.Input<string>;
    applications?: pulumi.Input<pulumi.Input<inputs.FirewallConsolidatedPolicyApplication>[]>;
    autoAsicOffload?: pulumi.Input<string>;
    avProfile?: pulumi.Input<string>;
    captivePortalExempt?: pulumi.Input<string>;
    cifsProfile?: pulumi.Input<string>;
    comments?: pulumi.Input<string>;
    diffservForward?: pulumi.Input<string>;
    diffservReverse?: pulumi.Input<string>;
    diffservcodeForward?: pulumi.Input<string>;
    diffservcodeRev?: pulumi.Input<string>;
    dlpSensor?: pulumi.Input<string>;
    dnsfilterProfile?: pulumi.Input<string>;
    dstaddr4s?: pulumi.Input<pulumi.Input<inputs.FirewallConsolidatedPolicyDstaddr4>[]>;
    dstaddr6s?: pulumi.Input<pulumi.Input<inputs.FirewallConsolidatedPolicyDstaddr6>[]>;
    dstaddrNegate?: pulumi.Input<string>;
    dstintfs?: pulumi.Input<pulumi.Input<inputs.FirewallConsolidatedPolicyDstintf>[]>;
    dynamicSortSubtable?: pulumi.Input<string>;
    emailfilterProfile?: pulumi.Input<string>;
    fixedport?: pulumi.Input<string>;
    fssoGroups?: pulumi.Input<pulumi.Input<inputs.FirewallConsolidatedPolicyFssoGroup>[]>;
    getAllTables?: pulumi.Input<string>;
    groups?: pulumi.Input<pulumi.Input<inputs.FirewallConsolidatedPolicyGroup>[]>;
    httpPolicyRedirect?: pulumi.Input<string>;
    icapProfile?: pulumi.Input<string>;
    inbound?: pulumi.Input<string>;
    inspectionMode?: pulumi.Input<string>;
    internetService?: pulumi.Input<string>;
    internetServiceCustomGroups?: pulumi.Input<pulumi.Input<inputs.FirewallConsolidatedPolicyInternetServiceCustomGroup>[]>;
    internetServiceCustoms?: pulumi.Input<pulumi.Input<inputs.FirewallConsolidatedPolicyInternetServiceCustom>[]>;
    internetServiceGroups?: pulumi.Input<pulumi.Input<inputs.FirewallConsolidatedPolicyInternetServiceGroup>[]>;
    internetServiceIds?: pulumi.Input<pulumi.Input<inputs.FirewallConsolidatedPolicyInternetServiceId>[]>;
    internetServiceNames?: pulumi.Input<pulumi.Input<inputs.FirewallConsolidatedPolicyInternetServiceName>[]>;
    internetServiceNegate?: pulumi.Input<string>;
    internetServiceSrc?: pulumi.Input<string>;
    internetServiceSrcCustomGroups?: pulumi.Input<pulumi.Input<inputs.FirewallConsolidatedPolicyInternetServiceSrcCustomGroup>[]>;
    internetServiceSrcCustoms?: pulumi.Input<pulumi.Input<inputs.FirewallConsolidatedPolicyInternetServiceSrcCustom>[]>;
    internetServiceSrcGroups?: pulumi.Input<pulumi.Input<inputs.FirewallConsolidatedPolicyInternetServiceSrcGroup>[]>;
    internetServiceSrcIds?: pulumi.Input<pulumi.Input<inputs.FirewallConsolidatedPolicyInternetServiceSrcId>[]>;
    internetServiceSrcNames?: pulumi.Input<pulumi.Input<inputs.FirewallConsolidatedPolicyInternetServiceSrcName>[]>;
    internetServiceSrcNegate?: pulumi.Input<string>;
    ippool?: pulumi.Input<string>;
    ipsSensor?: pulumi.Input<string>;
    logtraffic?: pulumi.Input<string>;
    logtrafficStart?: pulumi.Input<string>;
    name?: pulumi.Input<string>;
    nat?: pulumi.Input<string>;
    outbound?: pulumi.Input<string>;
    perIpShaper?: pulumi.Input<string>;
    policyid?: pulumi.Input<number>;
    poolname4s?: pulumi.Input<pulumi.Input<inputs.FirewallConsolidatedPolicyPoolname4>[]>;
    poolname6s?: pulumi.Input<pulumi.Input<inputs.FirewallConsolidatedPolicyPoolname6>[]>;
    profileGroup?: pulumi.Input<string>;
    profileProtocolOptions?: pulumi.Input<string>;
    profileType?: pulumi.Input<string>;
    schedule?: pulumi.Input<string>;
    serviceNegate?: pulumi.Input<string>;
    services?: pulumi.Input<pulumi.Input<inputs.FirewallConsolidatedPolicyService>[]>;
    sessionTtl?: pulumi.Input<number>;
    spamfilterProfile?: pulumi.Input<string>;
    srcaddr4s?: pulumi.Input<pulumi.Input<inputs.FirewallConsolidatedPolicySrcaddr4>[]>;
    srcaddr6s?: pulumi.Input<pulumi.Input<inputs.FirewallConsolidatedPolicySrcaddr6>[]>;
    srcaddrNegate?: pulumi.Input<string>;
    srcintfs?: pulumi.Input<pulumi.Input<inputs.FirewallConsolidatedPolicySrcintf>[]>;
    sshFilterProfile?: pulumi.Input<string>;
    sshPolicyRedirect?: pulumi.Input<string>;
    sslSshProfile?: pulumi.Input<string>;
    status?: pulumi.Input<string>;
    tcpMssReceiver?: pulumi.Input<number>;
    tcpMssSender?: pulumi.Input<number>;
    trafficShaper?: pulumi.Input<string>;
    trafficShaperReverse?: pulumi.Input<string>;
    urlCategories?: pulumi.Input<pulumi.Input<inputs.FirewallConsolidatedPolicyUrlCategory>[]>;
    users?: pulumi.Input<pulumi.Input<inputs.FirewallConsolidatedPolicyUser>[]>;
    utmStatus?: pulumi.Input<string>;
    uuid?: pulumi.Input<string>;
    vdomparam?: pulumi.Input<string>;
    voipProfile?: pulumi.Input<string>;
    vpntunnel?: pulumi.Input<string>;
    wafProfile?: pulumi.Input<string>;
    wanopt?: pulumi.Input<string>;
    wanoptDetection?: pulumi.Input<string>;
    wanoptPassiveOpt?: pulumi.Input<string>;
    wanoptPeer?: pulumi.Input<string>;
    wanoptProfile?: pulumi.Input<string>;
    webcache?: pulumi.Input<string>;
    webcacheHttps?: pulumi.Input<string>;
    webfilterProfile?: pulumi.Input<string>;
    webproxyForwardServer?: pulumi.Input<string>;
    webproxyProfile?: pulumi.Input<string>;
}
