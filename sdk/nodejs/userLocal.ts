// *** WARNING: this file was generated by the Pulumi Terraform Bridge (tfgen) Tool. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

import * as pulumi from "@pulumi/pulumi";
import * as utilities from "./utilities";

/**
 * Configure local users.
 *
 * ## Example Usage
 *
 * ```typescript
 * import * as pulumi from "@pulumi/pulumi";
 * import * as fortios from "@pulumi/fortios";
 *
 * const trname3 = new fortios.UserLdap("trname3", {
 *     accountKeyFilter: `(&(userPrincipalName=%s)(!(UserAccountControl:1.2.840.113556.1.4.803:=2)))`,
 *     accountKeyProcessing: "same",
 *     cnid: "cn",
 *     dn: "EIWNCIEW",
 *     groupMemberCheck: "user-attr",
 *     groupObjectFilter: "(&(objectcategory=group)(member=*))",
 *     memberAttr: "memberOf",
 *     passwordExpiryWarning: "disable",
 *     passwordRenewal: "disable",
 *     port: 389,
 *     secure: "disable",
 *     server: "1.1.1.1",
 *     serverIdentityCheck: "disable",
 *     sourceIp: "0.0.0.0",
 *     sslMinProtoVersion: "default",
 *     type: "simple",
 * });
 * const trname = new fortios.UserLocal("trname", {
 *     authConcurrentOverride: "disable",
 *     authConcurrentValue: 0,
 *     authtimeout: 0,
 *     ldapServer: trname3.name,
 *     passwdTime: "0000-00-00 00:00:00",
 *     smsServer: "fortiguard",
 *     status: "enable",
 *     twoFactor: "disable",
 *     type: "ldap",
 * });
 * ```
 *
 * ## Import
 *
 * User Local can be imported using any of these accepted formats$ export "FORTIOS_IMPORT_TABLE"="true"
 *
 * ```sh
 *  $ pulumi import fortios:index/userLocal:UserLocal labelname {{name}}
 * ```
 *
 *  $ unset "FORTIOS_IMPORT_TABLE"
 */
export class UserLocal extends pulumi.CustomResource {
    /**
     * Get an existing UserLocal resource's state with the given name, ID, and optional extra
     * properties used to qualify the lookup.
     *
     * @param name The _unique_ name of the resulting resource.
     * @param id The _unique_ provider ID of the resource to lookup.
     * @param state Any extra arguments used during the lookup.
     * @param opts Optional settings to control the behavior of the CustomResource.
     */
    public static get(name: string, id: pulumi.Input<pulumi.ID>, state?: UserLocalState, opts?: pulumi.CustomResourceOptions): UserLocal {
        return new UserLocal(name, <any>state, { ...opts, id: id });
    }

    /** @internal */
    public static readonly __pulumiType = 'fortios:index/userLocal:UserLocal';

    /**
     * Returns true if the given object is an instance of UserLocal.  This is designed to work even
     * when multiple copies of the Pulumi SDK have been loaded into the same process.
     */
    public static isInstance(obj: any): obj is UserLocal {
        if (obj === undefined || obj === null) {
            return false;
        }
        return obj['__pulumiType'] === UserLocal.__pulumiType;
    }

    /**
     * Enable/disable overriding the policy-auth-concurrent under config system global. Valid values: `enable`, `disable`.
     */
    public readonly authConcurrentOverride!: pulumi.Output<string>;
    /**
     * Maximum number of concurrent logins permitted from the same user.
     */
    public readonly authConcurrentValue!: pulumi.Output<number>;
    /**
     * Time in minutes before the authentication timeout for a user is reached.
     */
    public readonly authtimeout!: pulumi.Output<number>;
    /**
     * Two-factor recipient's email address.
     */
    public readonly emailTo!: pulumi.Output<string>;
    /**
     * Two-factor recipient's FortiToken serial number.
     */
    public readonly fortitoken!: pulumi.Output<string>;
    /**
     * User ID.
     */
    public readonly fosid!: pulumi.Output<number>;
    /**
     * Name of LDAP server with which the user must authenticate.
     */
    public readonly ldapServer!: pulumi.Output<string>;
    /**
     * User name.
     */
    public readonly name!: pulumi.Output<string>;
    /**
     * User's password.
     */
    public readonly passwd!: pulumi.Output<string | undefined>;
    /**
     * Password policy to apply to this user, as defined in config user password-policy.
     */
    public readonly passwdPolicy!: pulumi.Output<string>;
    /**
     * Time of the last password update.
     */
    public readonly passwdTime!: pulumi.Output<string>;
    /**
     * IKEv2 Postquantum Preshared Key Identity.
     */
    public readonly ppkIdentity!: pulumi.Output<string>;
    /**
     * IKEv2 Postquantum Preshared Key (ASCII string or hexadecimal encoded with a leading 0x).
     */
    public readonly ppkSecret!: pulumi.Output<string | undefined>;
    /**
     * Name of RADIUS server with which the user must authenticate.
     */
    public readonly radiusServer!: pulumi.Output<string>;
    /**
     * Two-factor recipient's SMS server.
     */
    public readonly smsCustomServer!: pulumi.Output<string>;
    /**
     * Two-factor recipient's mobile phone number.
     */
    public readonly smsPhone!: pulumi.Output<string>;
    /**
     * Send SMS through FortiGuard or other external server. Valid values: `fortiguard`, `custom`.
     */
    public readonly smsServer!: pulumi.Output<string>;
    /**
     * Enable/disable allowing the local user to authenticate with the FortiGate unit. Valid values: `enable`, `disable`.
     */
    public readonly status!: pulumi.Output<string>;
    /**
     * Name of TACACS+ server with which the user must authenticate.
     */
    public readonly tacacsServer!: pulumi.Output<string>;
    /**
     * Enable/disable two-factor authentication.
     */
    public readonly twoFactor!: pulumi.Output<string>;
    /**
     * Authentication method by FortiToken Cloud. Valid values: `fortitoken`, `email`, `sms`.
     */
    public readonly twoFactorAuthentication!: pulumi.Output<string>;
    /**
     * Notification method for user activation by FortiToken Cloud. Valid values: `email`, `sms`.
     */
    public readonly twoFactorNotification!: pulumi.Output<string>;
    /**
     * Authentication method. Valid values: `password`, `radius`, `tacacs+`, `ldap`.
     */
    public readonly type!: pulumi.Output<string>;
    /**
     * Enable/disable case sensitivity when performing username matching (uppercase and lowercase letters are treated either as distinct or equivalent). Valid values: `enable`, `disable`.
     */
    public readonly usernameCaseInsensitivity!: pulumi.Output<string>;
    /**
     * Enable/disable case sensitivity when performing username matching (uppercase and lowercase letters are treated either as distinct or equivalent). Valid values: `disable`, `enable`.
     */
    public readonly usernameCaseSensitivity!: pulumi.Output<string>;
    /**
     * Specifies the vdom to which the resource will be applied when the FortiGate unit is running in VDOM mode. Only one vdom can be specified. If you want to inherit the vdom configuration of the provider, please do not set this parameter.
     */
    public readonly vdomparam!: pulumi.Output<string | undefined>;
    /**
     * Name of the remote user workstation, if you want to limit the user to authenticate only from a particular workstation.
     */
    public readonly workstation!: pulumi.Output<string>;

    /**
     * Create a UserLocal resource with the given unique name, arguments, and options.
     *
     * @param name The _unique_ name of the resource.
     * @param args The arguments to use to populate this resource's properties.
     * @param opts A bag of options that control this resource's behavior.
     */
    constructor(name: string, args: UserLocalArgs, opts?: pulumi.CustomResourceOptions)
    constructor(name: string, argsOrState?: UserLocalArgs | UserLocalState, opts?: pulumi.CustomResourceOptions) {
        let inputs: pulumi.Inputs = {};
        opts = opts || {};
        if (opts.id) {
            const state = argsOrState as UserLocalState | undefined;
            inputs["authConcurrentOverride"] = state ? state.authConcurrentOverride : undefined;
            inputs["authConcurrentValue"] = state ? state.authConcurrentValue : undefined;
            inputs["authtimeout"] = state ? state.authtimeout : undefined;
            inputs["emailTo"] = state ? state.emailTo : undefined;
            inputs["fortitoken"] = state ? state.fortitoken : undefined;
            inputs["fosid"] = state ? state.fosid : undefined;
            inputs["ldapServer"] = state ? state.ldapServer : undefined;
            inputs["name"] = state ? state.name : undefined;
            inputs["passwd"] = state ? state.passwd : undefined;
            inputs["passwdPolicy"] = state ? state.passwdPolicy : undefined;
            inputs["passwdTime"] = state ? state.passwdTime : undefined;
            inputs["ppkIdentity"] = state ? state.ppkIdentity : undefined;
            inputs["ppkSecret"] = state ? state.ppkSecret : undefined;
            inputs["radiusServer"] = state ? state.radiusServer : undefined;
            inputs["smsCustomServer"] = state ? state.smsCustomServer : undefined;
            inputs["smsPhone"] = state ? state.smsPhone : undefined;
            inputs["smsServer"] = state ? state.smsServer : undefined;
            inputs["status"] = state ? state.status : undefined;
            inputs["tacacsServer"] = state ? state.tacacsServer : undefined;
            inputs["twoFactor"] = state ? state.twoFactor : undefined;
            inputs["twoFactorAuthentication"] = state ? state.twoFactorAuthentication : undefined;
            inputs["twoFactorNotification"] = state ? state.twoFactorNotification : undefined;
            inputs["type"] = state ? state.type : undefined;
            inputs["usernameCaseInsensitivity"] = state ? state.usernameCaseInsensitivity : undefined;
            inputs["usernameCaseSensitivity"] = state ? state.usernameCaseSensitivity : undefined;
            inputs["vdomparam"] = state ? state.vdomparam : undefined;
            inputs["workstation"] = state ? state.workstation : undefined;
        } else {
            const args = argsOrState as UserLocalArgs | undefined;
            if ((!args || args.status === undefined) && !opts.urn) {
                throw new Error("Missing required property 'status'");
            }
            if ((!args || args.type === undefined) && !opts.urn) {
                throw new Error("Missing required property 'type'");
            }
            inputs["authConcurrentOverride"] = args ? args.authConcurrentOverride : undefined;
            inputs["authConcurrentValue"] = args ? args.authConcurrentValue : undefined;
            inputs["authtimeout"] = args ? args.authtimeout : undefined;
            inputs["emailTo"] = args ? args.emailTo : undefined;
            inputs["fortitoken"] = args ? args.fortitoken : undefined;
            inputs["fosid"] = args ? args.fosid : undefined;
            inputs["ldapServer"] = args ? args.ldapServer : undefined;
            inputs["name"] = args ? args.name : undefined;
            inputs["passwd"] = args ? args.passwd : undefined;
            inputs["passwdPolicy"] = args ? args.passwdPolicy : undefined;
            inputs["passwdTime"] = args ? args.passwdTime : undefined;
            inputs["ppkIdentity"] = args ? args.ppkIdentity : undefined;
            inputs["ppkSecret"] = args ? args.ppkSecret : undefined;
            inputs["radiusServer"] = args ? args.radiusServer : undefined;
            inputs["smsCustomServer"] = args ? args.smsCustomServer : undefined;
            inputs["smsPhone"] = args ? args.smsPhone : undefined;
            inputs["smsServer"] = args ? args.smsServer : undefined;
            inputs["status"] = args ? args.status : undefined;
            inputs["tacacsServer"] = args ? args.tacacsServer : undefined;
            inputs["twoFactor"] = args ? args.twoFactor : undefined;
            inputs["twoFactorAuthentication"] = args ? args.twoFactorAuthentication : undefined;
            inputs["twoFactorNotification"] = args ? args.twoFactorNotification : undefined;
            inputs["type"] = args ? args.type : undefined;
            inputs["usernameCaseInsensitivity"] = args ? args.usernameCaseInsensitivity : undefined;
            inputs["usernameCaseSensitivity"] = args ? args.usernameCaseSensitivity : undefined;
            inputs["vdomparam"] = args ? args.vdomparam : undefined;
            inputs["workstation"] = args ? args.workstation : undefined;
        }
        if (!opts.version) {
            opts = pulumi.mergeOptions(opts, { version: utilities.getVersion()});
        }
        super(UserLocal.__pulumiType, name, inputs, opts);
    }
}

/**
 * Input properties used for looking up and filtering UserLocal resources.
 */
export interface UserLocalState {
    /**
     * Enable/disable overriding the policy-auth-concurrent under config system global. Valid values: `enable`, `disable`.
     */
    authConcurrentOverride?: pulumi.Input<string>;
    /**
     * Maximum number of concurrent logins permitted from the same user.
     */
    authConcurrentValue?: pulumi.Input<number>;
    /**
     * Time in minutes before the authentication timeout for a user is reached.
     */
    authtimeout?: pulumi.Input<number>;
    /**
     * Two-factor recipient's email address.
     */
    emailTo?: pulumi.Input<string>;
    /**
     * Two-factor recipient's FortiToken serial number.
     */
    fortitoken?: pulumi.Input<string>;
    /**
     * User ID.
     */
    fosid?: pulumi.Input<number>;
    /**
     * Name of LDAP server with which the user must authenticate.
     */
    ldapServer?: pulumi.Input<string>;
    /**
     * User name.
     */
    name?: pulumi.Input<string>;
    /**
     * User's password.
     */
    passwd?: pulumi.Input<string>;
    /**
     * Password policy to apply to this user, as defined in config user password-policy.
     */
    passwdPolicy?: pulumi.Input<string>;
    /**
     * Time of the last password update.
     */
    passwdTime?: pulumi.Input<string>;
    /**
     * IKEv2 Postquantum Preshared Key Identity.
     */
    ppkIdentity?: pulumi.Input<string>;
    /**
     * IKEv2 Postquantum Preshared Key (ASCII string or hexadecimal encoded with a leading 0x).
     */
    ppkSecret?: pulumi.Input<string>;
    /**
     * Name of RADIUS server with which the user must authenticate.
     */
    radiusServer?: pulumi.Input<string>;
    /**
     * Two-factor recipient's SMS server.
     */
    smsCustomServer?: pulumi.Input<string>;
    /**
     * Two-factor recipient's mobile phone number.
     */
    smsPhone?: pulumi.Input<string>;
    /**
     * Send SMS through FortiGuard or other external server. Valid values: `fortiguard`, `custom`.
     */
    smsServer?: pulumi.Input<string>;
    /**
     * Enable/disable allowing the local user to authenticate with the FortiGate unit. Valid values: `enable`, `disable`.
     */
    status?: pulumi.Input<string>;
    /**
     * Name of TACACS+ server with which the user must authenticate.
     */
    tacacsServer?: pulumi.Input<string>;
    /**
     * Enable/disable two-factor authentication.
     */
    twoFactor?: pulumi.Input<string>;
    /**
     * Authentication method by FortiToken Cloud. Valid values: `fortitoken`, `email`, `sms`.
     */
    twoFactorAuthentication?: pulumi.Input<string>;
    /**
     * Notification method for user activation by FortiToken Cloud. Valid values: `email`, `sms`.
     */
    twoFactorNotification?: pulumi.Input<string>;
    /**
     * Authentication method. Valid values: `password`, `radius`, `tacacs+`, `ldap`.
     */
    type?: pulumi.Input<string>;
    /**
     * Enable/disable case sensitivity when performing username matching (uppercase and lowercase letters are treated either as distinct or equivalent). Valid values: `enable`, `disable`.
     */
    usernameCaseInsensitivity?: pulumi.Input<string>;
    /**
     * Enable/disable case sensitivity when performing username matching (uppercase and lowercase letters are treated either as distinct or equivalent). Valid values: `disable`, `enable`.
     */
    usernameCaseSensitivity?: pulumi.Input<string>;
    /**
     * Specifies the vdom to which the resource will be applied when the FortiGate unit is running in VDOM mode. Only one vdom can be specified. If you want to inherit the vdom configuration of the provider, please do not set this parameter.
     */
    vdomparam?: pulumi.Input<string>;
    /**
     * Name of the remote user workstation, if you want to limit the user to authenticate only from a particular workstation.
     */
    workstation?: pulumi.Input<string>;
}

/**
 * The set of arguments for constructing a UserLocal resource.
 */
export interface UserLocalArgs {
    /**
     * Enable/disable overriding the policy-auth-concurrent under config system global. Valid values: `enable`, `disable`.
     */
    authConcurrentOverride?: pulumi.Input<string>;
    /**
     * Maximum number of concurrent logins permitted from the same user.
     */
    authConcurrentValue?: pulumi.Input<number>;
    /**
     * Time in minutes before the authentication timeout for a user is reached.
     */
    authtimeout?: pulumi.Input<number>;
    /**
     * Two-factor recipient's email address.
     */
    emailTo?: pulumi.Input<string>;
    /**
     * Two-factor recipient's FortiToken serial number.
     */
    fortitoken?: pulumi.Input<string>;
    /**
     * User ID.
     */
    fosid?: pulumi.Input<number>;
    /**
     * Name of LDAP server with which the user must authenticate.
     */
    ldapServer?: pulumi.Input<string>;
    /**
     * User name.
     */
    name?: pulumi.Input<string>;
    /**
     * User's password.
     */
    passwd?: pulumi.Input<string>;
    /**
     * Password policy to apply to this user, as defined in config user password-policy.
     */
    passwdPolicy?: pulumi.Input<string>;
    /**
     * Time of the last password update.
     */
    passwdTime?: pulumi.Input<string>;
    /**
     * IKEv2 Postquantum Preshared Key Identity.
     */
    ppkIdentity?: pulumi.Input<string>;
    /**
     * IKEv2 Postquantum Preshared Key (ASCII string or hexadecimal encoded with a leading 0x).
     */
    ppkSecret?: pulumi.Input<string>;
    /**
     * Name of RADIUS server with which the user must authenticate.
     */
    radiusServer?: pulumi.Input<string>;
    /**
     * Two-factor recipient's SMS server.
     */
    smsCustomServer?: pulumi.Input<string>;
    /**
     * Two-factor recipient's mobile phone number.
     */
    smsPhone?: pulumi.Input<string>;
    /**
     * Send SMS through FortiGuard or other external server. Valid values: `fortiguard`, `custom`.
     */
    smsServer?: pulumi.Input<string>;
    /**
     * Enable/disable allowing the local user to authenticate with the FortiGate unit. Valid values: `enable`, `disable`.
     */
    status: pulumi.Input<string>;
    /**
     * Name of TACACS+ server with which the user must authenticate.
     */
    tacacsServer?: pulumi.Input<string>;
    /**
     * Enable/disable two-factor authentication.
     */
    twoFactor?: pulumi.Input<string>;
    /**
     * Authentication method by FortiToken Cloud. Valid values: `fortitoken`, `email`, `sms`.
     */
    twoFactorAuthentication?: pulumi.Input<string>;
    /**
     * Notification method for user activation by FortiToken Cloud. Valid values: `email`, `sms`.
     */
    twoFactorNotification?: pulumi.Input<string>;
    /**
     * Authentication method. Valid values: `password`, `radius`, `tacacs+`, `ldap`.
     */
    type: pulumi.Input<string>;
    /**
     * Enable/disable case sensitivity when performing username matching (uppercase and lowercase letters are treated either as distinct or equivalent). Valid values: `enable`, `disable`.
     */
    usernameCaseInsensitivity?: pulumi.Input<string>;
    /**
     * Enable/disable case sensitivity when performing username matching (uppercase and lowercase letters are treated either as distinct or equivalent). Valid values: `disable`, `enable`.
     */
    usernameCaseSensitivity?: pulumi.Input<string>;
    /**
     * Specifies the vdom to which the resource will be applied when the FortiGate unit is running in VDOM mode. Only one vdom can be specified. If you want to inherit the vdom configuration of the provider, please do not set this parameter.
     */
    vdomparam?: pulumi.Input<string>;
    /**
     * Name of the remote user workstation, if you want to limit the user to authenticate only from a particular workstation.
     */
    workstation?: pulumi.Input<string>;
}
