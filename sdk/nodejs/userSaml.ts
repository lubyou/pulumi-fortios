// *** WARNING: this file was generated by the Pulumi Terraform Bridge (tfgen) Tool. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

import * as pulumi from "@pulumi/pulumi";
import * as utilities from "./utilities";

/**
 * SAML server entry configuration.
 *
 * ## Example Usage
 *
 * ```typescript
 * import * as pulumi from "@pulumi/pulumi";
 * import * as fortios from "@pulumi/fortios";
 *
 * const tr3 = new fortios.UserSaml("tr3", {
 *     cert: "Fortinet_Factory",
 *     entityId: "https://1.1.1.1",
 *     idpCert: "cer11",
 *     idpEntityId: "https://1.1.1.1/acc",
 *     idpSingleLogoutUrl: "https://1.1.1.1/lo",
 *     idpSingleSignOnUrl: "https://1.1.1.1/sou",
 *     singleLogoutUrl: "https://1.1.1.1/logout",
 *     singleSignOnUrl: "https://1.1.1.1/sign",
 *     userName: "ad111",
 * });
 * ```
 *
 * ## Import
 *
 * User Saml can be imported using any of these accepted formats$ export "FORTIOS_IMPORT_TABLE"="true"
 *
 * ```sh
 *  $ pulumi import fortios:index/userSaml:UserSaml labelname {{name}}
 * ```
 *
 *  $ unset "FORTIOS_IMPORT_TABLE"
 */
export class UserSaml extends pulumi.CustomResource {
    /**
     * Get an existing UserSaml resource's state with the given name, ID, and optional extra
     * properties used to qualify the lookup.
     *
     * @param name The _unique_ name of the resulting resource.
     * @param id The _unique_ provider ID of the resource to lookup.
     * @param state Any extra arguments used during the lookup.
     * @param opts Optional settings to control the behavior of the CustomResource.
     */
    public static get(name: string, id: pulumi.Input<pulumi.ID>, state?: UserSamlState, opts?: pulumi.CustomResourceOptions): UserSaml {
        return new UserSaml(name, <any>state, { ...opts, id: id });
    }

    /** @internal */
    public static readonly __pulumiType = 'fortios:index/userSaml:UserSaml';

    /**
     * Returns true if the given object is an instance of UserSaml.  This is designed to work even
     * when multiple copies of the Pulumi SDK have been loaded into the same process.
     */
    public static isInstance(obj: any): obj is UserSaml {
        if (obj === undefined || obj === null) {
            return false;
        }
        return obj['__pulumiType'] === UserSaml.__pulumiType;
    }

    /**
     * Certificate to sign SAML messages.
     */
    public readonly cert!: pulumi.Output<string>;
    /**
     * SP entity ID.
     */
    public readonly entityId!: pulumi.Output<string>;
    /**
     * Group name in assertion statement.
     */
    public readonly groupName!: pulumi.Output<string>;
    /**
     * IDP Certificate name.
     */
    public readonly idpCert!: pulumi.Output<string>;
    /**
     * IDP entity ID.
     */
    public readonly idpEntityId!: pulumi.Output<string>;
    /**
     * IDP single logout url.
     */
    public readonly idpSingleLogoutUrl!: pulumi.Output<string>;
    /**
     * IDP single sign-on URL.
     */
    public readonly idpSingleSignOnUrl!: pulumi.Output<string>;
    /**
     * SAML server entry name.
     */
    public readonly name!: pulumi.Output<string>;
    /**
     * SP single logout URL.
     */
    public readonly singleLogoutUrl!: pulumi.Output<string>;
    /**
     * SP single sign-on URL.
     */
    public readonly singleSignOnUrl!: pulumi.Output<string>;
    /**
     * User name in assertion statement.
     */
    public readonly userName!: pulumi.Output<string>;
    /**
     * Specifies the vdom to which the resource will be applied when the FortiGate unit is running in VDOM mode. Only one vdom can be specified. If you want to inherit the vdom configuration of the provider, please do not set this parameter.
     */
    public readonly vdomparam!: pulumi.Output<string | undefined>;

    /**
     * Create a UserSaml resource with the given unique name, arguments, and options.
     *
     * @param name The _unique_ name of the resource.
     * @param args The arguments to use to populate this resource's properties.
     * @param opts A bag of options that control this resource's behavior.
     */
    constructor(name: string, args: UserSamlArgs, opts?: pulumi.CustomResourceOptions)
    constructor(name: string, argsOrState?: UserSamlArgs | UserSamlState, opts?: pulumi.CustomResourceOptions) {
        let inputs: pulumi.Inputs = {};
        opts = opts || {};
        if (opts.id) {
            const state = argsOrState as UserSamlState | undefined;
            inputs["cert"] = state ? state.cert : undefined;
            inputs["entityId"] = state ? state.entityId : undefined;
            inputs["groupName"] = state ? state.groupName : undefined;
            inputs["idpCert"] = state ? state.idpCert : undefined;
            inputs["idpEntityId"] = state ? state.idpEntityId : undefined;
            inputs["idpSingleLogoutUrl"] = state ? state.idpSingleLogoutUrl : undefined;
            inputs["idpSingleSignOnUrl"] = state ? state.idpSingleSignOnUrl : undefined;
            inputs["name"] = state ? state.name : undefined;
            inputs["singleLogoutUrl"] = state ? state.singleLogoutUrl : undefined;
            inputs["singleSignOnUrl"] = state ? state.singleSignOnUrl : undefined;
            inputs["userName"] = state ? state.userName : undefined;
            inputs["vdomparam"] = state ? state.vdomparam : undefined;
        } else {
            const args = argsOrState as UserSamlArgs | undefined;
            if ((!args || args.entityId === undefined) && !opts.urn) {
                throw new Error("Missing required property 'entityId'");
            }
            if ((!args || args.idpCert === undefined) && !opts.urn) {
                throw new Error("Missing required property 'idpCert'");
            }
            if ((!args || args.idpEntityId === undefined) && !opts.urn) {
                throw new Error("Missing required property 'idpEntityId'");
            }
            if ((!args || args.idpSingleSignOnUrl === undefined) && !opts.urn) {
                throw new Error("Missing required property 'idpSingleSignOnUrl'");
            }
            if ((!args || args.singleSignOnUrl === undefined) && !opts.urn) {
                throw new Error("Missing required property 'singleSignOnUrl'");
            }
            inputs["cert"] = args ? args.cert : undefined;
            inputs["entityId"] = args ? args.entityId : undefined;
            inputs["groupName"] = args ? args.groupName : undefined;
            inputs["idpCert"] = args ? args.idpCert : undefined;
            inputs["idpEntityId"] = args ? args.idpEntityId : undefined;
            inputs["idpSingleLogoutUrl"] = args ? args.idpSingleLogoutUrl : undefined;
            inputs["idpSingleSignOnUrl"] = args ? args.idpSingleSignOnUrl : undefined;
            inputs["name"] = args ? args.name : undefined;
            inputs["singleLogoutUrl"] = args ? args.singleLogoutUrl : undefined;
            inputs["singleSignOnUrl"] = args ? args.singleSignOnUrl : undefined;
            inputs["userName"] = args ? args.userName : undefined;
            inputs["vdomparam"] = args ? args.vdomparam : undefined;
        }
        if (!opts.version) {
            opts = pulumi.mergeOptions(opts, { version: utilities.getVersion()});
        }
        super(UserSaml.__pulumiType, name, inputs, opts);
    }
}

/**
 * Input properties used for looking up and filtering UserSaml resources.
 */
export interface UserSamlState {
    /**
     * Certificate to sign SAML messages.
     */
    cert?: pulumi.Input<string>;
    /**
     * SP entity ID.
     */
    entityId?: pulumi.Input<string>;
    /**
     * Group name in assertion statement.
     */
    groupName?: pulumi.Input<string>;
    /**
     * IDP Certificate name.
     */
    idpCert?: pulumi.Input<string>;
    /**
     * IDP entity ID.
     */
    idpEntityId?: pulumi.Input<string>;
    /**
     * IDP single logout url.
     */
    idpSingleLogoutUrl?: pulumi.Input<string>;
    /**
     * IDP single sign-on URL.
     */
    idpSingleSignOnUrl?: pulumi.Input<string>;
    /**
     * SAML server entry name.
     */
    name?: pulumi.Input<string>;
    /**
     * SP single logout URL.
     */
    singleLogoutUrl?: pulumi.Input<string>;
    /**
     * SP single sign-on URL.
     */
    singleSignOnUrl?: pulumi.Input<string>;
    /**
     * User name in assertion statement.
     */
    userName?: pulumi.Input<string>;
    /**
     * Specifies the vdom to which the resource will be applied when the FortiGate unit is running in VDOM mode. Only one vdom can be specified. If you want to inherit the vdom configuration of the provider, please do not set this parameter.
     */
    vdomparam?: pulumi.Input<string>;
}

/**
 * The set of arguments for constructing a UserSaml resource.
 */
export interface UserSamlArgs {
    /**
     * Certificate to sign SAML messages.
     */
    cert?: pulumi.Input<string>;
    /**
     * SP entity ID.
     */
    entityId: pulumi.Input<string>;
    /**
     * Group name in assertion statement.
     */
    groupName?: pulumi.Input<string>;
    /**
     * IDP Certificate name.
     */
    idpCert: pulumi.Input<string>;
    /**
     * IDP entity ID.
     */
    idpEntityId: pulumi.Input<string>;
    /**
     * IDP single logout url.
     */
    idpSingleLogoutUrl?: pulumi.Input<string>;
    /**
     * IDP single sign-on URL.
     */
    idpSingleSignOnUrl: pulumi.Input<string>;
    /**
     * SAML server entry name.
     */
    name?: pulumi.Input<string>;
    /**
     * SP single logout URL.
     */
    singleLogoutUrl?: pulumi.Input<string>;
    /**
     * SP single sign-on URL.
     */
    singleSignOnUrl: pulumi.Input<string>;
    /**
     * User name in assertion statement.
     */
    userName?: pulumi.Input<string>;
    /**
     * Specifies the vdom to which the resource will be applied when the FortiGate unit is running in VDOM mode. Only one vdom can be specified. If you want to inherit the vdom configuration of the provider, please do not set this parameter.
     */
    vdomparam?: pulumi.Input<string>;
}
