// *** WARNING: this file was generated by the Pulumi Terraform Bridge (tfgen) Tool. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

import * as pulumi from "@pulumi/pulumi";
import * as utilities from "./utilities";

/**
 * Global FortiAnalyzer Cloud settings.
 *
 * ## Import
 *
 * LogFortianalyzerCloud Setting can be imported using any of these accepted formats$ export "FORTIOS_IMPORT_TABLE"="true"
 *
 * ```sh
 *  $ pulumi import fortios:index/logFortianalyzerCloudSetting:LogFortianalyzerCloudSetting labelname LogFortianalyzerCloudSetting
 * ```
 *
 *  $ unset "FORTIOS_IMPORT_TABLE"
 */
export class LogFortianalyzerCloudSetting extends pulumi.CustomResource {
    /**
     * Get an existing LogFortianalyzerCloudSetting resource's state with the given name, ID, and optional extra
     * properties used to qualify the lookup.
     *
     * @param name The _unique_ name of the resulting resource.
     * @param id The _unique_ provider ID of the resource to lookup.
     * @param state Any extra arguments used during the lookup.
     * @param opts Optional settings to control the behavior of the CustomResource.
     */
    public static get(name: string, id: pulumi.Input<pulumi.ID>, state?: LogFortianalyzerCloudSettingState, opts?: pulumi.CustomResourceOptions): LogFortianalyzerCloudSetting {
        return new LogFortianalyzerCloudSetting(name, <any>state, { ...opts, id: id });
    }

    /** @internal */
    public static readonly __pulumiType = 'fortios:index/logFortianalyzerCloudSetting:LogFortianalyzerCloudSetting';

    /**
     * Returns true if the given object is an instance of LogFortianalyzerCloudSetting.  This is designed to work even
     * when multiple copies of the Pulumi SDK have been loaded into the same process.
     */
    public static isInstance(obj: any): obj is LogFortianalyzerCloudSetting {
        if (obj === undefined || obj === null) {
            return false;
        }
        return obj['__pulumiType'] === LogFortianalyzerCloudSetting.__pulumiType;
    }

    /**
     * Enable/disable FortiAnalyzer access to configuration and data. Valid values: `enable`, `disable`.
     */
    public readonly accessConfig!: pulumi.Output<string>;
    /**
     * Certificate used to communicate with FortiAnalyzer.
     */
    public readonly certificate!: pulumi.Output<string>;
    /**
     * FortiAnalyzer connection time-out in seconds (for status and log buffer).
     */
    public readonly connTimeout!: pulumi.Output<number>;
    /**
     * Configure the level of SSL protection for secure communication with FortiAnalyzer. Valid values: `high-medium`, `high`, `low`.
     */
    public readonly encAlgorithm!: pulumi.Output<string>;
    /**
     * FortiAnalyzer IPsec tunnel HMAC algorithm. Valid values: `sha256`, `sha1`.
     */
    public readonly hmacAlgorithm!: pulumi.Output<string>;
    /**
     * Specify outgoing interface to reach server.
     */
    public readonly interface!: pulumi.Output<string>;
    /**
     * Specify how to select outgoing interface to reach server. Valid values: `auto`, `sdwan`, `specify`.
     */
    public readonly interfaceSelectMethod!: pulumi.Output<string>;
    /**
     * Enable/disable IPS packet archive logging. Valid values: `enable`, `disable`.
     */
    public readonly ipsArchive!: pulumi.Output<string>;
    /**
     * FortiAnalyzer maximum log rate in MBps (0 = unlimited).
     */
    public readonly maxLogRate!: pulumi.Output<number>;
    /**
     * Time between FortiAnalyzer connection retries in seconds (for status and log buffer).
     */
    public readonly monitorFailureRetryPeriod!: pulumi.Output<number>;
    /**
     * Time between OFTP keepalives in seconds (for status and log buffer).
     */
    public readonly monitorKeepalivePeriod!: pulumi.Output<number>;
    /**
     * Set log transmission priority. Valid values: `default`, `low`.
     */
    public readonly priority!: pulumi.Output<string>;
    /**
     * Source IPv4 or IPv6 address used to communicate with FortiAnalyzer.
     */
    public readonly sourceIp!: pulumi.Output<string>;
    /**
     * Minimum supported protocol version for SSL/TLS connections (default is to follow system global setting). Valid values: `default`, `SSLv3`, `TLSv1`, `TLSv1-1`, `TLSv1-2`.
     */
    public readonly sslMinProtoVersion!: pulumi.Output<string>;
    /**
     * Enable/disable logging to FortiAnalyzer. Valid values: `enable`, `disable`.
     */
    public readonly status!: pulumi.Output<string>;
    /**
     * Day of week (month) to upload logs.
     */
    public readonly uploadDay!: pulumi.Output<string>;
    /**
     * Frequency to upload log files to FortiAnalyzer. Valid values: `daily`, `weekly`, `monthly`.
     */
    public readonly uploadInterval!: pulumi.Output<string>;
    /**
     * Enable/disable logging to hard disk and then uploading to FortiAnalyzer. Valid values: `store-and-upload`, `realtime`, `1-minute`, `5-minute`.
     */
    public readonly uploadOption!: pulumi.Output<string>;
    /**
     * Time to upload logs (hh:mm).
     */
    public readonly uploadTime!: pulumi.Output<string>;
    /**
     * Specifies the vdom to which the resource will be applied when the FortiGate unit is running in VDOM mode. Only one vdom can be specified. If you want to inherit the vdom configuration of the provider, please do not set this parameter.
     */
    public readonly vdomparam!: pulumi.Output<string | undefined>;

    /**
     * Create a LogFortianalyzerCloudSetting resource with the given unique name, arguments, and options.
     *
     * @param name The _unique_ name of the resource.
     * @param args The arguments to use to populate this resource's properties.
     * @param opts A bag of options that control this resource's behavior.
     */
    constructor(name: string, args?: LogFortianalyzerCloudSettingArgs, opts?: pulumi.CustomResourceOptions)
    constructor(name: string, argsOrState?: LogFortianalyzerCloudSettingArgs | LogFortianalyzerCloudSettingState, opts?: pulumi.CustomResourceOptions) {
        let inputs: pulumi.Inputs = {};
        opts = opts || {};
        if (opts.id) {
            const state = argsOrState as LogFortianalyzerCloudSettingState | undefined;
            inputs["accessConfig"] = state ? state.accessConfig : undefined;
            inputs["certificate"] = state ? state.certificate : undefined;
            inputs["connTimeout"] = state ? state.connTimeout : undefined;
            inputs["encAlgorithm"] = state ? state.encAlgorithm : undefined;
            inputs["hmacAlgorithm"] = state ? state.hmacAlgorithm : undefined;
            inputs["interface"] = state ? state.interface : undefined;
            inputs["interfaceSelectMethod"] = state ? state.interfaceSelectMethod : undefined;
            inputs["ipsArchive"] = state ? state.ipsArchive : undefined;
            inputs["maxLogRate"] = state ? state.maxLogRate : undefined;
            inputs["monitorFailureRetryPeriod"] = state ? state.monitorFailureRetryPeriod : undefined;
            inputs["monitorKeepalivePeriod"] = state ? state.monitorKeepalivePeriod : undefined;
            inputs["priority"] = state ? state.priority : undefined;
            inputs["sourceIp"] = state ? state.sourceIp : undefined;
            inputs["sslMinProtoVersion"] = state ? state.sslMinProtoVersion : undefined;
            inputs["status"] = state ? state.status : undefined;
            inputs["uploadDay"] = state ? state.uploadDay : undefined;
            inputs["uploadInterval"] = state ? state.uploadInterval : undefined;
            inputs["uploadOption"] = state ? state.uploadOption : undefined;
            inputs["uploadTime"] = state ? state.uploadTime : undefined;
            inputs["vdomparam"] = state ? state.vdomparam : undefined;
        } else {
            const args = argsOrState as LogFortianalyzerCloudSettingArgs | undefined;
            inputs["accessConfig"] = args ? args.accessConfig : undefined;
            inputs["certificate"] = args ? args.certificate : undefined;
            inputs["connTimeout"] = args ? args.connTimeout : undefined;
            inputs["encAlgorithm"] = args ? args.encAlgorithm : undefined;
            inputs["hmacAlgorithm"] = args ? args.hmacAlgorithm : undefined;
            inputs["interface"] = args ? args.interface : undefined;
            inputs["interfaceSelectMethod"] = args ? args.interfaceSelectMethod : undefined;
            inputs["ipsArchive"] = args ? args.ipsArchive : undefined;
            inputs["maxLogRate"] = args ? args.maxLogRate : undefined;
            inputs["monitorFailureRetryPeriod"] = args ? args.monitorFailureRetryPeriod : undefined;
            inputs["monitorKeepalivePeriod"] = args ? args.monitorKeepalivePeriod : undefined;
            inputs["priority"] = args ? args.priority : undefined;
            inputs["sourceIp"] = args ? args.sourceIp : undefined;
            inputs["sslMinProtoVersion"] = args ? args.sslMinProtoVersion : undefined;
            inputs["status"] = args ? args.status : undefined;
            inputs["uploadDay"] = args ? args.uploadDay : undefined;
            inputs["uploadInterval"] = args ? args.uploadInterval : undefined;
            inputs["uploadOption"] = args ? args.uploadOption : undefined;
            inputs["uploadTime"] = args ? args.uploadTime : undefined;
            inputs["vdomparam"] = args ? args.vdomparam : undefined;
        }
        if (!opts.version) {
            opts = pulumi.mergeOptions(opts, { version: utilities.getVersion()});
        }
        super(LogFortianalyzerCloudSetting.__pulumiType, name, inputs, opts);
    }
}

/**
 * Input properties used for looking up and filtering LogFortianalyzerCloudSetting resources.
 */
export interface LogFortianalyzerCloudSettingState {
    /**
     * Enable/disable FortiAnalyzer access to configuration and data. Valid values: `enable`, `disable`.
     */
    accessConfig?: pulumi.Input<string>;
    /**
     * Certificate used to communicate with FortiAnalyzer.
     */
    certificate?: pulumi.Input<string>;
    /**
     * FortiAnalyzer connection time-out in seconds (for status and log buffer).
     */
    connTimeout?: pulumi.Input<number>;
    /**
     * Configure the level of SSL protection for secure communication with FortiAnalyzer. Valid values: `high-medium`, `high`, `low`.
     */
    encAlgorithm?: pulumi.Input<string>;
    /**
     * FortiAnalyzer IPsec tunnel HMAC algorithm. Valid values: `sha256`, `sha1`.
     */
    hmacAlgorithm?: pulumi.Input<string>;
    /**
     * Specify outgoing interface to reach server.
     */
    interface?: pulumi.Input<string>;
    /**
     * Specify how to select outgoing interface to reach server. Valid values: `auto`, `sdwan`, `specify`.
     */
    interfaceSelectMethod?: pulumi.Input<string>;
    /**
     * Enable/disable IPS packet archive logging. Valid values: `enable`, `disable`.
     */
    ipsArchive?: pulumi.Input<string>;
    /**
     * FortiAnalyzer maximum log rate in MBps (0 = unlimited).
     */
    maxLogRate?: pulumi.Input<number>;
    /**
     * Time between FortiAnalyzer connection retries in seconds (for status and log buffer).
     */
    monitorFailureRetryPeriod?: pulumi.Input<number>;
    /**
     * Time between OFTP keepalives in seconds (for status and log buffer).
     */
    monitorKeepalivePeriod?: pulumi.Input<number>;
    /**
     * Set log transmission priority. Valid values: `default`, `low`.
     */
    priority?: pulumi.Input<string>;
    /**
     * Source IPv4 or IPv6 address used to communicate with FortiAnalyzer.
     */
    sourceIp?: pulumi.Input<string>;
    /**
     * Minimum supported protocol version for SSL/TLS connections (default is to follow system global setting). Valid values: `default`, `SSLv3`, `TLSv1`, `TLSv1-1`, `TLSv1-2`.
     */
    sslMinProtoVersion?: pulumi.Input<string>;
    /**
     * Enable/disable logging to FortiAnalyzer. Valid values: `enable`, `disable`.
     */
    status?: pulumi.Input<string>;
    /**
     * Day of week (month) to upload logs.
     */
    uploadDay?: pulumi.Input<string>;
    /**
     * Frequency to upload log files to FortiAnalyzer. Valid values: `daily`, `weekly`, `monthly`.
     */
    uploadInterval?: pulumi.Input<string>;
    /**
     * Enable/disable logging to hard disk and then uploading to FortiAnalyzer. Valid values: `store-and-upload`, `realtime`, `1-minute`, `5-minute`.
     */
    uploadOption?: pulumi.Input<string>;
    /**
     * Time to upload logs (hh:mm).
     */
    uploadTime?: pulumi.Input<string>;
    /**
     * Specifies the vdom to which the resource will be applied when the FortiGate unit is running in VDOM mode. Only one vdom can be specified. If you want to inherit the vdom configuration of the provider, please do not set this parameter.
     */
    vdomparam?: pulumi.Input<string>;
}

/**
 * The set of arguments for constructing a LogFortianalyzerCloudSetting resource.
 */
export interface LogFortianalyzerCloudSettingArgs {
    /**
     * Enable/disable FortiAnalyzer access to configuration and data. Valid values: `enable`, `disable`.
     */
    accessConfig?: pulumi.Input<string>;
    /**
     * Certificate used to communicate with FortiAnalyzer.
     */
    certificate?: pulumi.Input<string>;
    /**
     * FortiAnalyzer connection time-out in seconds (for status and log buffer).
     */
    connTimeout?: pulumi.Input<number>;
    /**
     * Configure the level of SSL protection for secure communication with FortiAnalyzer. Valid values: `high-medium`, `high`, `low`.
     */
    encAlgorithm?: pulumi.Input<string>;
    /**
     * FortiAnalyzer IPsec tunnel HMAC algorithm. Valid values: `sha256`, `sha1`.
     */
    hmacAlgorithm?: pulumi.Input<string>;
    /**
     * Specify outgoing interface to reach server.
     */
    interface?: pulumi.Input<string>;
    /**
     * Specify how to select outgoing interface to reach server. Valid values: `auto`, `sdwan`, `specify`.
     */
    interfaceSelectMethod?: pulumi.Input<string>;
    /**
     * Enable/disable IPS packet archive logging. Valid values: `enable`, `disable`.
     */
    ipsArchive?: pulumi.Input<string>;
    /**
     * FortiAnalyzer maximum log rate in MBps (0 = unlimited).
     */
    maxLogRate?: pulumi.Input<number>;
    /**
     * Time between FortiAnalyzer connection retries in seconds (for status and log buffer).
     */
    monitorFailureRetryPeriod?: pulumi.Input<number>;
    /**
     * Time between OFTP keepalives in seconds (for status and log buffer).
     */
    monitorKeepalivePeriod?: pulumi.Input<number>;
    /**
     * Set log transmission priority. Valid values: `default`, `low`.
     */
    priority?: pulumi.Input<string>;
    /**
     * Source IPv4 or IPv6 address used to communicate with FortiAnalyzer.
     */
    sourceIp?: pulumi.Input<string>;
    /**
     * Minimum supported protocol version for SSL/TLS connections (default is to follow system global setting). Valid values: `default`, `SSLv3`, `TLSv1`, `TLSv1-1`, `TLSv1-2`.
     */
    sslMinProtoVersion?: pulumi.Input<string>;
    /**
     * Enable/disable logging to FortiAnalyzer. Valid values: `enable`, `disable`.
     */
    status?: pulumi.Input<string>;
    /**
     * Day of week (month) to upload logs.
     */
    uploadDay?: pulumi.Input<string>;
    /**
     * Frequency to upload log files to FortiAnalyzer. Valid values: `daily`, `weekly`, `monthly`.
     */
    uploadInterval?: pulumi.Input<string>;
    /**
     * Enable/disable logging to hard disk and then uploading to FortiAnalyzer. Valid values: `store-and-upload`, `realtime`, `1-minute`, `5-minute`.
     */
    uploadOption?: pulumi.Input<string>;
    /**
     * Time to upload logs (hh:mm).
     */
    uploadTime?: pulumi.Input<string>;
    /**
     * Specifies the vdom to which the resource will be applied when the FortiGate unit is running in VDOM mode. Only one vdom can be specified. If you want to inherit the vdom configuration of the provider, please do not set this parameter.
     */
    vdomparam?: pulumi.Input<string>;
}
