// *** WARNING: this file was generated by the Pulumi Terraform Bridge (tfgen) Tool. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

import * as pulumi from "@pulumi/pulumi";
import { input as inputs, output as outputs } from "./types";
import * as utilities from "./utilities";

export class FirewallSecurityPolicySeq extends pulumi.CustomResource {
    /**
     * Get an existing FirewallSecurityPolicySeq resource's state with the given name, ID, and optional extra
     * properties used to qualify the lookup.
     *
     * @param name The _unique_ name of the resulting resource.
     * @param id The _unique_ provider ID of the resource to lookup.
     * @param state Any extra arguments used during the lookup.
     * @param opts Optional settings to control the behavior of the CustomResource.
     */
    public static get(name: string, id: pulumi.Input<pulumi.ID>, state?: FirewallSecurityPolicySeqState, opts?: pulumi.CustomResourceOptions): FirewallSecurityPolicySeq {
        return new FirewallSecurityPolicySeq(name, <any>state, { ...opts, id: id });
    }

    /** @internal */
    public static readonly __pulumiType = 'fortios:index/firewallSecurityPolicySeq:FirewallSecurityPolicySeq';

    /**
     * Returns true if the given object is an instance of FirewallSecurityPolicySeq.  This is designed to work even
     * when multiple copies of the Pulumi SDK have been loaded into the same process.
     */
    public static isInstance(obj: any): obj is FirewallSecurityPolicySeq {
        if (obj === undefined || obj === null) {
            return false;
        }
        return obj['__pulumiType'] === FirewallSecurityPolicySeq.__pulumiType;
    }

    /**
     * The alter position: should only be "before" or "after"
     */
    public readonly alterPosition!: pulumi.Output<string>;
    /**
     * Comment
     */
    public readonly comment!: pulumi.Output<string | undefined>;
    /**
     * Enable status detection for policySrcId and policy_dst_id
     */
    public readonly enableStateChecking!: pulumi.Output<boolean | undefined>;
    /**
     * The dest policy id which you want to alter
     */
    public readonly policyDstId!: pulumi.Output<number>;
    /**
     * The policy id which you want to alter
     */
    public readonly policySrcId!: pulumi.Output<number>;
    public /*out*/ readonly statePolicyLists!: pulumi.Output<outputs.FirewallSecurityPolicySeqStatePolicyList[]>;
    public readonly statePolicySrcdstPos!: pulumi.Output<string | undefined>;
    public readonly vdomparam!: pulumi.Output<string | undefined>;

    /**
     * Create a FirewallSecurityPolicySeq resource with the given unique name, arguments, and options.
     *
     * @param name The _unique_ name of the resource.
     * @param args The arguments to use to populate this resource's properties.
     * @param opts A bag of options that control this resource's behavior.
     */
    constructor(name: string, args: FirewallSecurityPolicySeqArgs, opts?: pulumi.CustomResourceOptions)
    constructor(name: string, argsOrState?: FirewallSecurityPolicySeqArgs | FirewallSecurityPolicySeqState, opts?: pulumi.CustomResourceOptions) {
        let resourceInputs: pulumi.Inputs = {};
        opts = opts || {};
        if (opts.id) {
            const state = argsOrState as FirewallSecurityPolicySeqState | undefined;
            resourceInputs["alterPosition"] = state ? state.alterPosition : undefined;
            resourceInputs["comment"] = state ? state.comment : undefined;
            resourceInputs["enableStateChecking"] = state ? state.enableStateChecking : undefined;
            resourceInputs["policyDstId"] = state ? state.policyDstId : undefined;
            resourceInputs["policySrcId"] = state ? state.policySrcId : undefined;
            resourceInputs["statePolicyLists"] = state ? state.statePolicyLists : undefined;
            resourceInputs["statePolicySrcdstPos"] = state ? state.statePolicySrcdstPos : undefined;
            resourceInputs["vdomparam"] = state ? state.vdomparam : undefined;
        } else {
            const args = argsOrState as FirewallSecurityPolicySeqArgs | undefined;
            if ((!args || args.alterPosition === undefined) && !opts.urn) {
                throw new Error("Missing required property 'alterPosition'");
            }
            if ((!args || args.policyDstId === undefined) && !opts.urn) {
                throw new Error("Missing required property 'policyDstId'");
            }
            if ((!args || args.policySrcId === undefined) && !opts.urn) {
                throw new Error("Missing required property 'policySrcId'");
            }
            resourceInputs["alterPosition"] = args ? args.alterPosition : undefined;
            resourceInputs["comment"] = args ? args.comment : undefined;
            resourceInputs["enableStateChecking"] = args ? args.enableStateChecking : undefined;
            resourceInputs["policyDstId"] = args ? args.policyDstId : undefined;
            resourceInputs["policySrcId"] = args ? args.policySrcId : undefined;
            resourceInputs["statePolicySrcdstPos"] = args ? args.statePolicySrcdstPos : undefined;
            resourceInputs["vdomparam"] = args ? args.vdomparam : undefined;
            resourceInputs["statePolicyLists"] = undefined /*out*/;
        }
        opts = pulumi.mergeOptions(utilities.resourceOptsDefaults(), opts);
        super(FirewallSecurityPolicySeq.__pulumiType, name, resourceInputs, opts);
    }
}

/**
 * Input properties used for looking up and filtering FirewallSecurityPolicySeq resources.
 */
export interface FirewallSecurityPolicySeqState {
    /**
     * The alter position: should only be "before" or "after"
     */
    alterPosition?: pulumi.Input<string>;
    /**
     * Comment
     */
    comment?: pulumi.Input<string>;
    /**
     * Enable status detection for policySrcId and policy_dst_id
     */
    enableStateChecking?: pulumi.Input<boolean>;
    /**
     * The dest policy id which you want to alter
     */
    policyDstId?: pulumi.Input<number>;
    /**
     * The policy id which you want to alter
     */
    policySrcId?: pulumi.Input<number>;
    statePolicyLists?: pulumi.Input<pulumi.Input<inputs.FirewallSecurityPolicySeqStatePolicyList>[]>;
    statePolicySrcdstPos?: pulumi.Input<string>;
    vdomparam?: pulumi.Input<string>;
}

/**
 * The set of arguments for constructing a FirewallSecurityPolicySeq resource.
 */
export interface FirewallSecurityPolicySeqArgs {
    /**
     * The alter position: should only be "before" or "after"
     */
    alterPosition: pulumi.Input<string>;
    /**
     * Comment
     */
    comment?: pulumi.Input<string>;
    /**
     * Enable status detection for policySrcId and policy_dst_id
     */
    enableStateChecking?: pulumi.Input<boolean>;
    /**
     * The dest policy id which you want to alter
     */
    policyDstId: pulumi.Input<number>;
    /**
     * The policy id which you want to alter
     */
    policySrcId: pulumi.Input<number>;
    statePolicySrcdstPos?: pulumi.Input<string>;
    vdomparam?: pulumi.Input<string>;
}
