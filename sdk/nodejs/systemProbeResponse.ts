// *** WARNING: this file was generated by the Pulumi Terraform Bridge (tfgen) Tool. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

import * as pulumi from "@pulumi/pulumi";
import * as utilities from "./utilities";

/**
 * Configure system probe response.
 *
 * ## Example Usage
 *
 * ```typescript
 * import * as pulumi from "@pulumi/pulumi";
 * import * as fortios from "@pulumi/fortios";
 *
 * const trname = new fortios.SystemProbeResponse("trname", {
 *     httpProbeValue: "OK",
 *     mode: "none",
 *     port: 8008,
 *     securityMode: "none",
 *     timeout: 300,
 *     ttlMode: "retain",
 * });
 * ```
 *
 * ## Import
 *
 * System ProbeResponse can be imported using any of these accepted formats$ export "FORTIOS_IMPORT_TABLE"="true"
 *
 * ```sh
 *  $ pulumi import fortios:index/systemProbeResponse:SystemProbeResponse labelname SystemProbeResponse
 * ```
 *
 *  $ unset "FORTIOS_IMPORT_TABLE"
 */
export class SystemProbeResponse extends pulumi.CustomResource {
    /**
     * Get an existing SystemProbeResponse resource's state with the given name, ID, and optional extra
     * properties used to qualify the lookup.
     *
     * @param name The _unique_ name of the resulting resource.
     * @param id The _unique_ provider ID of the resource to lookup.
     * @param state Any extra arguments used during the lookup.
     * @param opts Optional settings to control the behavior of the CustomResource.
     */
    public static get(name: string, id: pulumi.Input<pulumi.ID>, state?: SystemProbeResponseState, opts?: pulumi.CustomResourceOptions): SystemProbeResponse {
        return new SystemProbeResponse(name, <any>state, { ...opts, id: id });
    }

    /** @internal */
    public static readonly __pulumiType = 'fortios:index/systemProbeResponse:SystemProbeResponse';

    /**
     * Returns true if the given object is an instance of SystemProbeResponse.  This is designed to work even
     * when multiple copies of the Pulumi SDK have been loaded into the same process.
     */
    public static isInstance(obj: any): obj is SystemProbeResponse {
        if (obj === undefined || obj === null) {
            return false;
        }
        return obj['__pulumiType'] === SystemProbeResponse.__pulumiType;
    }

    /**
     * Value to respond to the monitoring server.
     */
    public readonly httpProbeValue!: pulumi.Output<string>;
    /**
     * SLA response mode. Valid values: `none`, `http-probe`, `twamp`.
     */
    public readonly mode!: pulumi.Output<string>;
    /**
     * Twamp respondor password in authentication mode
     */
    public readonly password!: pulumi.Output<string | undefined>;
    /**
     * Port number to response.
     */
    public readonly port!: pulumi.Output<number>;
    /**
     * Twamp respondor security mode. Valid values: `none`, `authentication`.
     */
    public readonly securityMode!: pulumi.Output<string>;
    /**
     * An inactivity timer for a twamp test session.
     */
    public readonly timeout!: pulumi.Output<number>;
    /**
     * Mode for TWAMP packet TTL modification. Valid values: `reinit`, `decrease`, `retain`.
     */
    public readonly ttlMode!: pulumi.Output<string>;
    /**
     * Specifies the vdom to which the resource will be applied when the FortiGate unit is running in VDOM mode. Only one vdom can be specified. If you want to inherit the vdom configuration of the provider, please do not set this parameter.
     */
    public readonly vdomparam!: pulumi.Output<string | undefined>;

    /**
     * Create a SystemProbeResponse resource with the given unique name, arguments, and options.
     *
     * @param name The _unique_ name of the resource.
     * @param args The arguments to use to populate this resource's properties.
     * @param opts A bag of options that control this resource's behavior.
     */
    constructor(name: string, args?: SystemProbeResponseArgs, opts?: pulumi.CustomResourceOptions)
    constructor(name: string, argsOrState?: SystemProbeResponseArgs | SystemProbeResponseState, opts?: pulumi.CustomResourceOptions) {
        let inputs: pulumi.Inputs = {};
        opts = opts || {};
        if (opts.id) {
            const state = argsOrState as SystemProbeResponseState | undefined;
            inputs["httpProbeValue"] = state ? state.httpProbeValue : undefined;
            inputs["mode"] = state ? state.mode : undefined;
            inputs["password"] = state ? state.password : undefined;
            inputs["port"] = state ? state.port : undefined;
            inputs["securityMode"] = state ? state.securityMode : undefined;
            inputs["timeout"] = state ? state.timeout : undefined;
            inputs["ttlMode"] = state ? state.ttlMode : undefined;
            inputs["vdomparam"] = state ? state.vdomparam : undefined;
        } else {
            const args = argsOrState as SystemProbeResponseArgs | undefined;
            inputs["httpProbeValue"] = args ? args.httpProbeValue : undefined;
            inputs["mode"] = args ? args.mode : undefined;
            inputs["password"] = args ? args.password : undefined;
            inputs["port"] = args ? args.port : undefined;
            inputs["securityMode"] = args ? args.securityMode : undefined;
            inputs["timeout"] = args ? args.timeout : undefined;
            inputs["ttlMode"] = args ? args.ttlMode : undefined;
            inputs["vdomparam"] = args ? args.vdomparam : undefined;
        }
        if (!opts.version) {
            opts = pulumi.mergeOptions(opts, { version: utilities.getVersion()});
        }
        super(SystemProbeResponse.__pulumiType, name, inputs, opts);
    }
}

/**
 * Input properties used for looking up and filtering SystemProbeResponse resources.
 */
export interface SystemProbeResponseState {
    /**
     * Value to respond to the monitoring server.
     */
    httpProbeValue?: pulumi.Input<string>;
    /**
     * SLA response mode. Valid values: `none`, `http-probe`, `twamp`.
     */
    mode?: pulumi.Input<string>;
    /**
     * Twamp respondor password in authentication mode
     */
    password?: pulumi.Input<string>;
    /**
     * Port number to response.
     */
    port?: pulumi.Input<number>;
    /**
     * Twamp respondor security mode. Valid values: `none`, `authentication`.
     */
    securityMode?: pulumi.Input<string>;
    /**
     * An inactivity timer for a twamp test session.
     */
    timeout?: pulumi.Input<number>;
    /**
     * Mode for TWAMP packet TTL modification. Valid values: `reinit`, `decrease`, `retain`.
     */
    ttlMode?: pulumi.Input<string>;
    /**
     * Specifies the vdom to which the resource will be applied when the FortiGate unit is running in VDOM mode. Only one vdom can be specified. If you want to inherit the vdom configuration of the provider, please do not set this parameter.
     */
    vdomparam?: pulumi.Input<string>;
}

/**
 * The set of arguments for constructing a SystemProbeResponse resource.
 */
export interface SystemProbeResponseArgs {
    /**
     * Value to respond to the monitoring server.
     */
    httpProbeValue?: pulumi.Input<string>;
    /**
     * SLA response mode. Valid values: `none`, `http-probe`, `twamp`.
     */
    mode?: pulumi.Input<string>;
    /**
     * Twamp respondor password in authentication mode
     */
    password?: pulumi.Input<string>;
    /**
     * Port number to response.
     */
    port?: pulumi.Input<number>;
    /**
     * Twamp respondor security mode. Valid values: `none`, `authentication`.
     */
    securityMode?: pulumi.Input<string>;
    /**
     * An inactivity timer for a twamp test session.
     */
    timeout?: pulumi.Input<number>;
    /**
     * Mode for TWAMP packet TTL modification. Valid values: `reinit`, `decrease`, `retain`.
     */
    ttlMode?: pulumi.Input<string>;
    /**
     * Specifies the vdom to which the resource will be applied when the FortiGate unit is running in VDOM mode. Only one vdom can be specified. If you want to inherit the vdom configuration of the provider, please do not set this parameter.
     */
    vdomparam?: pulumi.Input<string>;
}
