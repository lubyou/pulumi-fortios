// *** WARNING: this file was generated by the Pulumi Terraform Bridge (tfgen) Tool. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

import * as pulumi from "@pulumi/pulumi";
import { input as inputs, output as outputs } from "./types";
import * as utilities from "./utilities";

/**
 * Configure multicast addresses.
 *
 * ## Example Usage
 *
 * ```typescript
 * import * as pulumi from "@pulumi/pulumi";
 * import * as fortios from "@pulumi/fortios";
 *
 * const trname = new fortios.FirewallMulticastAddress("trname", {
 *     color: 0,
 *     endIp: "224.0.0.22",
 *     startIp: "224.0.0.11",
 *     subnet: "224.0.0.11 224.0.0.22",
 *     type: "multicastrange",
 *     visibility: "enable",
 * });
 * ```
 *
 * ## Import
 *
 * Firewall MulticastAddress can be imported using any of these accepted formats
 *
 * ```sh
 *  $ pulumi import fortios:index/firewallMulticastAddress:FirewallMulticastAddress labelname {{name}}
 * ```
 *
 *  If you do not want to import arguments of block$ export "FORTIOS_IMPORT_TABLE"="false"
 *
 * ```sh
 *  $ pulumi import fortios:index/firewallMulticastAddress:FirewallMulticastAddress labelname {{name}}
 * ```
 *
 *  $ unset "FORTIOS_IMPORT_TABLE"
 */
export class FirewallMulticastAddress extends pulumi.CustomResource {
    /**
     * Get an existing FirewallMulticastAddress resource's state with the given name, ID, and optional extra
     * properties used to qualify the lookup.
     *
     * @param name The _unique_ name of the resulting resource.
     * @param id The _unique_ provider ID of the resource to lookup.
     * @param state Any extra arguments used during the lookup.
     * @param opts Optional settings to control the behavior of the CustomResource.
     */
    public static get(name: string, id: pulumi.Input<pulumi.ID>, state?: FirewallMulticastAddressState, opts?: pulumi.CustomResourceOptions): FirewallMulticastAddress {
        return new FirewallMulticastAddress(name, <any>state, { ...opts, id: id });
    }

    /** @internal */
    public static readonly __pulumiType = 'fortios:index/firewallMulticastAddress:FirewallMulticastAddress';

    /**
     * Returns true if the given object is an instance of FirewallMulticastAddress.  This is designed to work even
     * when multiple copies of the Pulumi SDK have been loaded into the same process.
     */
    public static isInstance(obj: any): obj is FirewallMulticastAddress {
        if (obj === undefined || obj === null) {
            return false;
        }
        return obj['__pulumiType'] === FirewallMulticastAddress.__pulumiType;
    }

    /**
     * Interface associated with the address object. When setting up a policy, only addresses associated with this interface are available.
     */
    public readonly associatedInterface!: pulumi.Output<string>;
    /**
     * Integer value to determine the color of the icon in the GUI (1 - 32, default = 0, which sets value to 1).
     */
    public readonly color!: pulumi.Output<number>;
    /**
     * Comment.
     */
    public readonly comment!: pulumi.Output<string | undefined>;
    /**
     * true or false, set this parameter to true when using dynamic forEach + toset to configure and sort sub-tables, please do not set this parameter when configuring static sub-tables.
     */
    public readonly dynamicSortSubtable!: pulumi.Output<string | undefined>;
    /**
     * Final IPv4 address (inclusive) in the range for the address.
     */
    public readonly endIp!: pulumi.Output<string>;
    /**
     * Tag name.
     */
    public readonly name!: pulumi.Output<string>;
    /**
     * First IPv4 address (inclusive) in the range for the address.
     */
    public readonly startIp!: pulumi.Output<string>;
    /**
     * Broadcast address and subnet.
     */
    public readonly subnet!: pulumi.Output<string>;
    /**
     * Config object tagging. The structure of `tagging` block is documented below.
     */
    public readonly taggings!: pulumi.Output<outputs.FirewallMulticastAddressTagging[] | undefined>;
    /**
     * Type of address object: multicast IP address range or broadcast IP/mask to be treated as a multicast address. Valid values: `multicastrange`, `broadcastmask`.
     */
    public readonly type!: pulumi.Output<string>;
    /**
     * Specifies the vdom to which the resource will be applied when the FortiGate unit is running in VDOM mode. Only one vdom can be specified. If you want to inherit the vdom configuration of the provider, please do not set this parameter.
     */
    public readonly vdomparam!: pulumi.Output<string | undefined>;
    /**
     * Enable/disable visibility of the multicast address on the GUI. Valid values: `enable`, `disable`.
     */
    public readonly visibility!: pulumi.Output<string>;

    /**
     * Create a FirewallMulticastAddress resource with the given unique name, arguments, and options.
     *
     * @param name The _unique_ name of the resource.
     * @param args The arguments to use to populate this resource's properties.
     * @param opts A bag of options that control this resource's behavior.
     */
    constructor(name: string, args?: FirewallMulticastAddressArgs, opts?: pulumi.CustomResourceOptions)
    constructor(name: string, argsOrState?: FirewallMulticastAddressArgs | FirewallMulticastAddressState, opts?: pulumi.CustomResourceOptions) {
        let resourceInputs: pulumi.Inputs = {};
        opts = opts || {};
        if (opts.id) {
            const state = argsOrState as FirewallMulticastAddressState | undefined;
            resourceInputs["associatedInterface"] = state ? state.associatedInterface : undefined;
            resourceInputs["color"] = state ? state.color : undefined;
            resourceInputs["comment"] = state ? state.comment : undefined;
            resourceInputs["dynamicSortSubtable"] = state ? state.dynamicSortSubtable : undefined;
            resourceInputs["endIp"] = state ? state.endIp : undefined;
            resourceInputs["name"] = state ? state.name : undefined;
            resourceInputs["startIp"] = state ? state.startIp : undefined;
            resourceInputs["subnet"] = state ? state.subnet : undefined;
            resourceInputs["taggings"] = state ? state.taggings : undefined;
            resourceInputs["type"] = state ? state.type : undefined;
            resourceInputs["vdomparam"] = state ? state.vdomparam : undefined;
            resourceInputs["visibility"] = state ? state.visibility : undefined;
        } else {
            const args = argsOrState as FirewallMulticastAddressArgs | undefined;
            resourceInputs["associatedInterface"] = args ? args.associatedInterface : undefined;
            resourceInputs["color"] = args ? args.color : undefined;
            resourceInputs["comment"] = args ? args.comment : undefined;
            resourceInputs["dynamicSortSubtable"] = args ? args.dynamicSortSubtable : undefined;
            resourceInputs["endIp"] = args ? args.endIp : undefined;
            resourceInputs["name"] = args ? args.name : undefined;
            resourceInputs["startIp"] = args ? args.startIp : undefined;
            resourceInputs["subnet"] = args ? args.subnet : undefined;
            resourceInputs["taggings"] = args ? args.taggings : undefined;
            resourceInputs["type"] = args ? args.type : undefined;
            resourceInputs["vdomparam"] = args ? args.vdomparam : undefined;
            resourceInputs["visibility"] = args ? args.visibility : undefined;
        }
        opts = pulumi.mergeOptions(utilities.resourceOptsDefaults(), opts);
        super(FirewallMulticastAddress.__pulumiType, name, resourceInputs, opts);
    }
}

/**
 * Input properties used for looking up and filtering FirewallMulticastAddress resources.
 */
export interface FirewallMulticastAddressState {
    /**
     * Interface associated with the address object. When setting up a policy, only addresses associated with this interface are available.
     */
    associatedInterface?: pulumi.Input<string>;
    /**
     * Integer value to determine the color of the icon in the GUI (1 - 32, default = 0, which sets value to 1).
     */
    color?: pulumi.Input<number>;
    /**
     * Comment.
     */
    comment?: pulumi.Input<string>;
    /**
     * true or false, set this parameter to true when using dynamic forEach + toset to configure and sort sub-tables, please do not set this parameter when configuring static sub-tables.
     */
    dynamicSortSubtable?: pulumi.Input<string>;
    /**
     * Final IPv4 address (inclusive) in the range for the address.
     */
    endIp?: pulumi.Input<string>;
    /**
     * Tag name.
     */
    name?: pulumi.Input<string>;
    /**
     * First IPv4 address (inclusive) in the range for the address.
     */
    startIp?: pulumi.Input<string>;
    /**
     * Broadcast address and subnet.
     */
    subnet?: pulumi.Input<string>;
    /**
     * Config object tagging. The structure of `tagging` block is documented below.
     */
    taggings?: pulumi.Input<pulumi.Input<inputs.FirewallMulticastAddressTagging>[]>;
    /**
     * Type of address object: multicast IP address range or broadcast IP/mask to be treated as a multicast address. Valid values: `multicastrange`, `broadcastmask`.
     */
    type?: pulumi.Input<string>;
    /**
     * Specifies the vdom to which the resource will be applied when the FortiGate unit is running in VDOM mode. Only one vdom can be specified. If you want to inherit the vdom configuration of the provider, please do not set this parameter.
     */
    vdomparam?: pulumi.Input<string>;
    /**
     * Enable/disable visibility of the multicast address on the GUI. Valid values: `enable`, `disable`.
     */
    visibility?: pulumi.Input<string>;
}

/**
 * The set of arguments for constructing a FirewallMulticastAddress resource.
 */
export interface FirewallMulticastAddressArgs {
    /**
     * Interface associated with the address object. When setting up a policy, only addresses associated with this interface are available.
     */
    associatedInterface?: pulumi.Input<string>;
    /**
     * Integer value to determine the color of the icon in the GUI (1 - 32, default = 0, which sets value to 1).
     */
    color?: pulumi.Input<number>;
    /**
     * Comment.
     */
    comment?: pulumi.Input<string>;
    /**
     * true or false, set this parameter to true when using dynamic forEach + toset to configure and sort sub-tables, please do not set this parameter when configuring static sub-tables.
     */
    dynamicSortSubtable?: pulumi.Input<string>;
    /**
     * Final IPv4 address (inclusive) in the range for the address.
     */
    endIp?: pulumi.Input<string>;
    /**
     * Tag name.
     */
    name?: pulumi.Input<string>;
    /**
     * First IPv4 address (inclusive) in the range for the address.
     */
    startIp?: pulumi.Input<string>;
    /**
     * Broadcast address and subnet.
     */
    subnet?: pulumi.Input<string>;
    /**
     * Config object tagging. The structure of `tagging` block is documented below.
     */
    taggings?: pulumi.Input<pulumi.Input<inputs.FirewallMulticastAddressTagging>[]>;
    /**
     * Type of address object: multicast IP address range or broadcast IP/mask to be treated as a multicast address. Valid values: `multicastrange`, `broadcastmask`.
     */
    type?: pulumi.Input<string>;
    /**
     * Specifies the vdom to which the resource will be applied when the FortiGate unit is running in VDOM mode. Only one vdom can be specified. If you want to inherit the vdom configuration of the provider, please do not set this parameter.
     */
    vdomparam?: pulumi.Input<string>;
    /**
     * Enable/disable visibility of the multicast address on the GUI. Valid values: `enable`, `disable`.
     */
    visibility?: pulumi.Input<string>;
}
