// *** WARNING: this file was generated by the Pulumi Terraform Bridge (tfgen) Tool. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

import * as pulumi from "@pulumi/pulumi";
import * as inputs from "./types/input";
import * as outputs from "./types/output";
import * as utilities from "./utilities";

export class WirelessControllerTimers extends pulumi.CustomResource {
    /**
     * Get an existing WirelessControllerTimers resource's state with the given name, ID, and optional extra
     * properties used to qualify the lookup.
     *
     * @param name The _unique_ name of the resulting resource.
     * @param id The _unique_ provider ID of the resource to lookup.
     * @param state Any extra arguments used during the lookup.
     * @param opts Optional settings to control the behavior of the CustomResource.
     */
    public static get(name: string, id: pulumi.Input<pulumi.ID>, state?: WirelessControllerTimersState, opts?: pulumi.CustomResourceOptions): WirelessControllerTimers {
        return new WirelessControllerTimers(name, <any>state, { ...opts, id: id });
    }

    /** @internal */
    public static readonly __pulumiType = 'fortios:index/wirelessControllerTimers:WirelessControllerTimers';

    /**
     * Returns true if the given object is an instance of WirelessControllerTimers.  This is designed to work even
     * when multiple copies of the Pulumi SDK have been loaded into the same process.
     */
    public static isInstance(obj: any): obj is WirelessControllerTimers {
        if (obj === undefined || obj === null) {
            return false;
        }
        return obj['__pulumiType'] === WirelessControllerTimers.__pulumiType;
    }

    public readonly authTimeout!: pulumi.Output<number>;
    public readonly bleScanReportIntv!: pulumi.Output<number>;
    public readonly clientIdleRehomeTimeout!: pulumi.Output<number>;
    public readonly clientIdleTimeout!: pulumi.Output<number>;
    public readonly darrpDay!: pulumi.Output<string>;
    public readonly darrpOptimize!: pulumi.Output<number>;
    public readonly darrpTimes!: pulumi.Output<outputs.WirelessControllerTimersDarrpTime[] | undefined>;
    public readonly discoveryInterval!: pulumi.Output<number>;
    public readonly drmaInterval!: pulumi.Output<number>;
    public readonly dynamicSortSubtable!: pulumi.Output<string | undefined>;
    public readonly echoInterval!: pulumi.Output<number>;
    public readonly fakeApLog!: pulumi.Output<number>;
    public readonly getAllTables!: pulumi.Output<string | undefined>;
    public readonly ipsecIntfCleanup!: pulumi.Output<number>;
    public readonly radioStatsInterval!: pulumi.Output<number>;
    public readonly rogueApCleanup!: pulumi.Output<number>;
    public readonly rogueApLog!: pulumi.Output<number>;
    public readonly staCapabilityInterval!: pulumi.Output<number>;
    public readonly staLocateTimer!: pulumi.Output<number>;
    public readonly staStatsInterval!: pulumi.Output<number>;
    public readonly vapStatsInterval!: pulumi.Output<number>;
    public readonly vdomparam!: pulumi.Output<string | undefined>;

    /**
     * Create a WirelessControllerTimers resource with the given unique name, arguments, and options.
     *
     * @param name The _unique_ name of the resource.
     * @param args The arguments to use to populate this resource's properties.
     * @param opts A bag of options that control this resource's behavior.
     */
    constructor(name: string, args?: WirelessControllerTimersArgs, opts?: pulumi.CustomResourceOptions)
    constructor(name: string, argsOrState?: WirelessControllerTimersArgs | WirelessControllerTimersState, opts?: pulumi.CustomResourceOptions) {
        let resourceInputs: pulumi.Inputs = {};
        opts = opts || {};
        if (opts.id) {
            const state = argsOrState as WirelessControllerTimersState | undefined;
            resourceInputs["authTimeout"] = state ? state.authTimeout : undefined;
            resourceInputs["bleScanReportIntv"] = state ? state.bleScanReportIntv : undefined;
            resourceInputs["clientIdleRehomeTimeout"] = state ? state.clientIdleRehomeTimeout : undefined;
            resourceInputs["clientIdleTimeout"] = state ? state.clientIdleTimeout : undefined;
            resourceInputs["darrpDay"] = state ? state.darrpDay : undefined;
            resourceInputs["darrpOptimize"] = state ? state.darrpOptimize : undefined;
            resourceInputs["darrpTimes"] = state ? state.darrpTimes : undefined;
            resourceInputs["discoveryInterval"] = state ? state.discoveryInterval : undefined;
            resourceInputs["drmaInterval"] = state ? state.drmaInterval : undefined;
            resourceInputs["dynamicSortSubtable"] = state ? state.dynamicSortSubtable : undefined;
            resourceInputs["echoInterval"] = state ? state.echoInterval : undefined;
            resourceInputs["fakeApLog"] = state ? state.fakeApLog : undefined;
            resourceInputs["getAllTables"] = state ? state.getAllTables : undefined;
            resourceInputs["ipsecIntfCleanup"] = state ? state.ipsecIntfCleanup : undefined;
            resourceInputs["radioStatsInterval"] = state ? state.radioStatsInterval : undefined;
            resourceInputs["rogueApCleanup"] = state ? state.rogueApCleanup : undefined;
            resourceInputs["rogueApLog"] = state ? state.rogueApLog : undefined;
            resourceInputs["staCapabilityInterval"] = state ? state.staCapabilityInterval : undefined;
            resourceInputs["staLocateTimer"] = state ? state.staLocateTimer : undefined;
            resourceInputs["staStatsInterval"] = state ? state.staStatsInterval : undefined;
            resourceInputs["vapStatsInterval"] = state ? state.vapStatsInterval : undefined;
            resourceInputs["vdomparam"] = state ? state.vdomparam : undefined;
        } else {
            const args = argsOrState as WirelessControllerTimersArgs | undefined;
            resourceInputs["authTimeout"] = args ? args.authTimeout : undefined;
            resourceInputs["bleScanReportIntv"] = args ? args.bleScanReportIntv : undefined;
            resourceInputs["clientIdleRehomeTimeout"] = args ? args.clientIdleRehomeTimeout : undefined;
            resourceInputs["clientIdleTimeout"] = args ? args.clientIdleTimeout : undefined;
            resourceInputs["darrpDay"] = args ? args.darrpDay : undefined;
            resourceInputs["darrpOptimize"] = args ? args.darrpOptimize : undefined;
            resourceInputs["darrpTimes"] = args ? args.darrpTimes : undefined;
            resourceInputs["discoveryInterval"] = args ? args.discoveryInterval : undefined;
            resourceInputs["drmaInterval"] = args ? args.drmaInterval : undefined;
            resourceInputs["dynamicSortSubtable"] = args ? args.dynamicSortSubtable : undefined;
            resourceInputs["echoInterval"] = args ? args.echoInterval : undefined;
            resourceInputs["fakeApLog"] = args ? args.fakeApLog : undefined;
            resourceInputs["getAllTables"] = args ? args.getAllTables : undefined;
            resourceInputs["ipsecIntfCleanup"] = args ? args.ipsecIntfCleanup : undefined;
            resourceInputs["radioStatsInterval"] = args ? args.radioStatsInterval : undefined;
            resourceInputs["rogueApCleanup"] = args ? args.rogueApCleanup : undefined;
            resourceInputs["rogueApLog"] = args ? args.rogueApLog : undefined;
            resourceInputs["staCapabilityInterval"] = args ? args.staCapabilityInterval : undefined;
            resourceInputs["staLocateTimer"] = args ? args.staLocateTimer : undefined;
            resourceInputs["staStatsInterval"] = args ? args.staStatsInterval : undefined;
            resourceInputs["vapStatsInterval"] = args ? args.vapStatsInterval : undefined;
            resourceInputs["vdomparam"] = args ? args.vdomparam : undefined;
        }
        opts = pulumi.mergeOptions(utilities.resourceOptsDefaults(), opts);
        super(WirelessControllerTimers.__pulumiType, name, resourceInputs, opts);
    }
}

/**
 * Input properties used for looking up and filtering WirelessControllerTimers resources.
 */
export interface WirelessControllerTimersState {
    authTimeout?: pulumi.Input<number>;
    bleScanReportIntv?: pulumi.Input<number>;
    clientIdleRehomeTimeout?: pulumi.Input<number>;
    clientIdleTimeout?: pulumi.Input<number>;
    darrpDay?: pulumi.Input<string>;
    darrpOptimize?: pulumi.Input<number>;
    darrpTimes?: pulumi.Input<pulumi.Input<inputs.WirelessControllerTimersDarrpTime>[]>;
    discoveryInterval?: pulumi.Input<number>;
    drmaInterval?: pulumi.Input<number>;
    dynamicSortSubtable?: pulumi.Input<string>;
    echoInterval?: pulumi.Input<number>;
    fakeApLog?: pulumi.Input<number>;
    getAllTables?: pulumi.Input<string>;
    ipsecIntfCleanup?: pulumi.Input<number>;
    radioStatsInterval?: pulumi.Input<number>;
    rogueApCleanup?: pulumi.Input<number>;
    rogueApLog?: pulumi.Input<number>;
    staCapabilityInterval?: pulumi.Input<number>;
    staLocateTimer?: pulumi.Input<number>;
    staStatsInterval?: pulumi.Input<number>;
    vapStatsInterval?: pulumi.Input<number>;
    vdomparam?: pulumi.Input<string>;
}

/**
 * The set of arguments for constructing a WirelessControllerTimers resource.
 */
export interface WirelessControllerTimersArgs {
    authTimeout?: pulumi.Input<number>;
    bleScanReportIntv?: pulumi.Input<number>;
    clientIdleRehomeTimeout?: pulumi.Input<number>;
    clientIdleTimeout?: pulumi.Input<number>;
    darrpDay?: pulumi.Input<string>;
    darrpOptimize?: pulumi.Input<number>;
    darrpTimes?: pulumi.Input<pulumi.Input<inputs.WirelessControllerTimersDarrpTime>[]>;
    discoveryInterval?: pulumi.Input<number>;
    drmaInterval?: pulumi.Input<number>;
    dynamicSortSubtable?: pulumi.Input<string>;
    echoInterval?: pulumi.Input<number>;
    fakeApLog?: pulumi.Input<number>;
    getAllTables?: pulumi.Input<string>;
    ipsecIntfCleanup?: pulumi.Input<number>;
    radioStatsInterval?: pulumi.Input<number>;
    rogueApCleanup?: pulumi.Input<number>;
    rogueApLog?: pulumi.Input<number>;
    staCapabilityInterval?: pulumi.Input<number>;
    staLocateTimer?: pulumi.Input<number>;
    staStatsInterval?: pulumi.Input<number>;
    vapStatsInterval?: pulumi.Input<number>;
    vdomparam?: pulumi.Input<string>;
}
