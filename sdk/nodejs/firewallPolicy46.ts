// *** WARNING: this file was generated by the Pulumi Terraform Bridge (tfgen) Tool. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

import * as pulumi from "@pulumi/pulumi";
import { input as inputs, output as outputs } from "./types";
import * as utilities from "./utilities";

/**
 * Configure IPv4 to IPv6 policies.
 *
 * ## Example Usage
 *
 * ```typescript
 * import * as pulumi from "@pulumi/pulumi";
 * import * as fortios from "@pulumi/fortios";
 *
 * const trnameFirewallVip46 = new fortios.FirewallVip46("trnameFirewallVip46", {
 *     arpReply: "enable",
 *     color: 0,
 *     extip: "10.1.100.55",
 *     extport: "0-65535",
 *     fosid: 0,
 *     ldbMethod: "static",
 *     mappedip: "2000:172:16:200::55",
 *     mappedport: "0-65535",
 *     portforward: "disable",
 *     protocol: "tcp",
 *     type: "static-nat",
 * });
 * const trnameFirewallPolicy46 = new fortios.FirewallPolicy46("trnameFirewallPolicy46", {
 *     action: "deny",
 *     dstintf: "port3",
 *     fixedport: "disable",
 *     ippool: "disable",
 *     logtraffic: "disable",
 *     permitAnyHost: "disable",
 *     policyid: 2,
 *     schedule: "always",
 *     srcintf: "port2",
 *     status: "enable",
 *     tcpMssReceiver: 0,
 *     tcpMssSender: 0,
 *     dstaddrs: [{
 *         name: trnameFirewallVip46.name,
 *     }],
 *     services: [{
 *         name: "ALL",
 *     }],
 *     srcaddrs: [{
 *         name: "FIREWALL_AUTH_PORTAL_ADDRESS",
 *     }],
 * });
 * ```
 *
 * ## Import
 *
 * Firewall Policy46 can be imported using any of these accepted formats$ export "FORTIOS_IMPORT_TABLE"="true"
 *
 * ```sh
 *  $ pulumi import fortios:index/firewallPolicy46:FirewallPolicy46 labelname {{policyid}}
 * ```
 *
 *  $ unset "FORTIOS_IMPORT_TABLE"
 */
export class FirewallPolicy46 extends pulumi.CustomResource {
    /**
     * Get an existing FirewallPolicy46 resource's state with the given name, ID, and optional extra
     * properties used to qualify the lookup.
     *
     * @param name The _unique_ name of the resulting resource.
     * @param id The _unique_ provider ID of the resource to lookup.
     * @param state Any extra arguments used during the lookup.
     * @param opts Optional settings to control the behavior of the CustomResource.
     */
    public static get(name: string, id: pulumi.Input<pulumi.ID>, state?: FirewallPolicy46State, opts?: pulumi.CustomResourceOptions): FirewallPolicy46 {
        return new FirewallPolicy46(name, <any>state, { ...opts, id: id });
    }

    /** @internal */
    public static readonly __pulumiType = 'fortios:index/firewallPolicy46:FirewallPolicy46';

    /**
     * Returns true if the given object is an instance of FirewallPolicy46.  This is designed to work even
     * when multiple copies of the Pulumi SDK have been loaded into the same process.
     */
    public static isInstance(obj: any): obj is FirewallPolicy46 {
        if (obj === undefined || obj === null) {
            return false;
        }
        return obj['__pulumiType'] === FirewallPolicy46.__pulumiType;
    }

    /**
     * Accept or deny traffic matching the policy. Valid values: `accept`, `deny`.
     */
    public readonly action!: pulumi.Output<string>;
    /**
     * Comment.
     */
    public readonly comments!: pulumi.Output<string | undefined>;
    /**
     * Destination address objects. The structure of `dstaddr` block is documented below.
     */
    public readonly dstaddrs!: pulumi.Output<outputs.FirewallPolicy46Dstaddr[]>;
    /**
     * Destination interface name.
     */
    public readonly dstintf!: pulumi.Output<string>;
    /**
     * true or false, set this parameter to true when using dynamic forEach + toset to configure and sort sub-tables, please do not set this parameter when configuring static sub-tables.
     */
    public readonly dynamicSortSubtable!: pulumi.Output<string | undefined>;
    /**
     * Enable/disable fixed port for this policy. Valid values: `enable`, `disable`.
     */
    public readonly fixedport!: pulumi.Output<string>;
    /**
     * Enable/disable use of IP Pools for source NAT. Valid values: `enable`, `disable`.
     */
    public readonly ippool!: pulumi.Output<string>;
    /**
     * Enable/disable traffic logging for this policy. Valid values: `enable`, `disable`.
     */
    public readonly logtraffic!: pulumi.Output<string>;
    /**
     * Record logs when a session starts and ends. Valid values: `enable`, `disable`.
     */
    public readonly logtrafficStart!: pulumi.Output<string>;
    /**
     * IP pool name.
     */
    public readonly name!: pulumi.Output<string>;
    /**
     * Per IP traffic shaper.
     */
    public readonly perIpShaper!: pulumi.Output<string>;
    /**
     * Enable/disable allowing any host. Valid values: `enable`, `disable`.
     */
    public readonly permitAnyHost!: pulumi.Output<string>;
    /**
     * Policy ID.
     */
    public readonly policyid!: pulumi.Output<number>;
    /**
     * IP Pool names. The structure of `poolname` block is documented below.
     */
    public readonly poolnames!: pulumi.Output<outputs.FirewallPolicy46Poolname[] | undefined>;
    /**
     * Schedule name.
     */
    public readonly schedule!: pulumi.Output<string>;
    /**
     * Service name. The structure of `service` block is documented below.
     */
    public readonly services!: pulumi.Output<outputs.FirewallPolicy46Service[] | undefined>;
    /**
     * Source address objects. The structure of `srcaddr` block is documented below.
     */
    public readonly srcaddrs!: pulumi.Output<outputs.FirewallPolicy46Srcaddr[]>;
    /**
     * Source interface name.
     */
    public readonly srcintf!: pulumi.Output<string>;
    /**
     * Enable/disable this policy. Valid values: `enable`, `disable`.
     */
    public readonly status!: pulumi.Output<string>;
    /**
     * TCP Maximum Segment Size value of receiver (0 - 65535, default = 0)
     */
    public readonly tcpMssReceiver!: pulumi.Output<number>;
    /**
     * TCP Maximum Segment Size value of sender (0 - 65535, default = 0).
     */
    public readonly tcpMssSender!: pulumi.Output<number>;
    /**
     * Traffic shaper.
     */
    public readonly trafficShaper!: pulumi.Output<string>;
    /**
     * Reverse traffic shaper.
     */
    public readonly trafficShaperReverse!: pulumi.Output<string>;
    /**
     * Universally Unique Identifier (UUID; automatically assigned but can be manually reset).
     */
    public readonly uuid!: pulumi.Output<string>;
    /**
     * Specifies the vdom to which the resource will be applied when the FortiGate unit is running in VDOM mode. Only one vdom can be specified. If you want to inherit the vdom configuration of the provider, please do not set this parameter.
     */
    public readonly vdomparam!: pulumi.Output<string | undefined>;

    /**
     * Create a FirewallPolicy46 resource with the given unique name, arguments, and options.
     *
     * @param name The _unique_ name of the resource.
     * @param args The arguments to use to populate this resource's properties.
     * @param opts A bag of options that control this resource's behavior.
     */
    constructor(name: string, args: FirewallPolicy46Args, opts?: pulumi.CustomResourceOptions)
    constructor(name: string, argsOrState?: FirewallPolicy46Args | FirewallPolicy46State, opts?: pulumi.CustomResourceOptions) {
        let inputs: pulumi.Inputs = {};
        opts = opts || {};
        if (opts.id) {
            const state = argsOrState as FirewallPolicy46State | undefined;
            inputs["action"] = state ? state.action : undefined;
            inputs["comments"] = state ? state.comments : undefined;
            inputs["dstaddrs"] = state ? state.dstaddrs : undefined;
            inputs["dstintf"] = state ? state.dstintf : undefined;
            inputs["dynamicSortSubtable"] = state ? state.dynamicSortSubtable : undefined;
            inputs["fixedport"] = state ? state.fixedport : undefined;
            inputs["ippool"] = state ? state.ippool : undefined;
            inputs["logtraffic"] = state ? state.logtraffic : undefined;
            inputs["logtrafficStart"] = state ? state.logtrafficStart : undefined;
            inputs["name"] = state ? state.name : undefined;
            inputs["perIpShaper"] = state ? state.perIpShaper : undefined;
            inputs["permitAnyHost"] = state ? state.permitAnyHost : undefined;
            inputs["policyid"] = state ? state.policyid : undefined;
            inputs["poolnames"] = state ? state.poolnames : undefined;
            inputs["schedule"] = state ? state.schedule : undefined;
            inputs["services"] = state ? state.services : undefined;
            inputs["srcaddrs"] = state ? state.srcaddrs : undefined;
            inputs["srcintf"] = state ? state.srcintf : undefined;
            inputs["status"] = state ? state.status : undefined;
            inputs["tcpMssReceiver"] = state ? state.tcpMssReceiver : undefined;
            inputs["tcpMssSender"] = state ? state.tcpMssSender : undefined;
            inputs["trafficShaper"] = state ? state.trafficShaper : undefined;
            inputs["trafficShaperReverse"] = state ? state.trafficShaperReverse : undefined;
            inputs["uuid"] = state ? state.uuid : undefined;
            inputs["vdomparam"] = state ? state.vdomparam : undefined;
        } else {
            const args = argsOrState as FirewallPolicy46Args | undefined;
            if ((!args || args.dstaddrs === undefined) && !opts.urn) {
                throw new Error("Missing required property 'dstaddrs'");
            }
            if ((!args || args.dstintf === undefined) && !opts.urn) {
                throw new Error("Missing required property 'dstintf'");
            }
            if ((!args || args.schedule === undefined) && !opts.urn) {
                throw new Error("Missing required property 'schedule'");
            }
            if ((!args || args.srcaddrs === undefined) && !opts.urn) {
                throw new Error("Missing required property 'srcaddrs'");
            }
            if ((!args || args.srcintf === undefined) && !opts.urn) {
                throw new Error("Missing required property 'srcintf'");
            }
            inputs["action"] = args ? args.action : undefined;
            inputs["comments"] = args ? args.comments : undefined;
            inputs["dstaddrs"] = args ? args.dstaddrs : undefined;
            inputs["dstintf"] = args ? args.dstintf : undefined;
            inputs["dynamicSortSubtable"] = args ? args.dynamicSortSubtable : undefined;
            inputs["fixedport"] = args ? args.fixedport : undefined;
            inputs["ippool"] = args ? args.ippool : undefined;
            inputs["logtraffic"] = args ? args.logtraffic : undefined;
            inputs["logtrafficStart"] = args ? args.logtrafficStart : undefined;
            inputs["name"] = args ? args.name : undefined;
            inputs["perIpShaper"] = args ? args.perIpShaper : undefined;
            inputs["permitAnyHost"] = args ? args.permitAnyHost : undefined;
            inputs["policyid"] = args ? args.policyid : undefined;
            inputs["poolnames"] = args ? args.poolnames : undefined;
            inputs["schedule"] = args ? args.schedule : undefined;
            inputs["services"] = args ? args.services : undefined;
            inputs["srcaddrs"] = args ? args.srcaddrs : undefined;
            inputs["srcintf"] = args ? args.srcintf : undefined;
            inputs["status"] = args ? args.status : undefined;
            inputs["tcpMssReceiver"] = args ? args.tcpMssReceiver : undefined;
            inputs["tcpMssSender"] = args ? args.tcpMssSender : undefined;
            inputs["trafficShaper"] = args ? args.trafficShaper : undefined;
            inputs["trafficShaperReverse"] = args ? args.trafficShaperReverse : undefined;
            inputs["uuid"] = args ? args.uuid : undefined;
            inputs["vdomparam"] = args ? args.vdomparam : undefined;
        }
        if (!opts.version) {
            opts = pulumi.mergeOptions(opts, { version: utilities.getVersion()});
        }
        super(FirewallPolicy46.__pulumiType, name, inputs, opts);
    }
}

/**
 * Input properties used for looking up and filtering FirewallPolicy46 resources.
 */
export interface FirewallPolicy46State {
    /**
     * Accept or deny traffic matching the policy. Valid values: `accept`, `deny`.
     */
    action?: pulumi.Input<string>;
    /**
     * Comment.
     */
    comments?: pulumi.Input<string>;
    /**
     * Destination address objects. The structure of `dstaddr` block is documented below.
     */
    dstaddrs?: pulumi.Input<pulumi.Input<inputs.FirewallPolicy46Dstaddr>[]>;
    /**
     * Destination interface name.
     */
    dstintf?: pulumi.Input<string>;
    /**
     * true or false, set this parameter to true when using dynamic forEach + toset to configure and sort sub-tables, please do not set this parameter when configuring static sub-tables.
     */
    dynamicSortSubtable?: pulumi.Input<string>;
    /**
     * Enable/disable fixed port for this policy. Valid values: `enable`, `disable`.
     */
    fixedport?: pulumi.Input<string>;
    /**
     * Enable/disable use of IP Pools for source NAT. Valid values: `enable`, `disable`.
     */
    ippool?: pulumi.Input<string>;
    /**
     * Enable/disable traffic logging for this policy. Valid values: `enable`, `disable`.
     */
    logtraffic?: pulumi.Input<string>;
    /**
     * Record logs when a session starts and ends. Valid values: `enable`, `disable`.
     */
    logtrafficStart?: pulumi.Input<string>;
    /**
     * IP pool name.
     */
    name?: pulumi.Input<string>;
    /**
     * Per IP traffic shaper.
     */
    perIpShaper?: pulumi.Input<string>;
    /**
     * Enable/disable allowing any host. Valid values: `enable`, `disable`.
     */
    permitAnyHost?: pulumi.Input<string>;
    /**
     * Policy ID.
     */
    policyid?: pulumi.Input<number>;
    /**
     * IP Pool names. The structure of `poolname` block is documented below.
     */
    poolnames?: pulumi.Input<pulumi.Input<inputs.FirewallPolicy46Poolname>[]>;
    /**
     * Schedule name.
     */
    schedule?: pulumi.Input<string>;
    /**
     * Service name. The structure of `service` block is documented below.
     */
    services?: pulumi.Input<pulumi.Input<inputs.FirewallPolicy46Service>[]>;
    /**
     * Source address objects. The structure of `srcaddr` block is documented below.
     */
    srcaddrs?: pulumi.Input<pulumi.Input<inputs.FirewallPolicy46Srcaddr>[]>;
    /**
     * Source interface name.
     */
    srcintf?: pulumi.Input<string>;
    /**
     * Enable/disable this policy. Valid values: `enable`, `disable`.
     */
    status?: pulumi.Input<string>;
    /**
     * TCP Maximum Segment Size value of receiver (0 - 65535, default = 0)
     */
    tcpMssReceiver?: pulumi.Input<number>;
    /**
     * TCP Maximum Segment Size value of sender (0 - 65535, default = 0).
     */
    tcpMssSender?: pulumi.Input<number>;
    /**
     * Traffic shaper.
     */
    trafficShaper?: pulumi.Input<string>;
    /**
     * Reverse traffic shaper.
     */
    trafficShaperReverse?: pulumi.Input<string>;
    /**
     * Universally Unique Identifier (UUID; automatically assigned but can be manually reset).
     */
    uuid?: pulumi.Input<string>;
    /**
     * Specifies the vdom to which the resource will be applied when the FortiGate unit is running in VDOM mode. Only one vdom can be specified. If you want to inherit the vdom configuration of the provider, please do not set this parameter.
     */
    vdomparam?: pulumi.Input<string>;
}

/**
 * The set of arguments for constructing a FirewallPolicy46 resource.
 */
export interface FirewallPolicy46Args {
    /**
     * Accept or deny traffic matching the policy. Valid values: `accept`, `deny`.
     */
    action?: pulumi.Input<string>;
    /**
     * Comment.
     */
    comments?: pulumi.Input<string>;
    /**
     * Destination address objects. The structure of `dstaddr` block is documented below.
     */
    dstaddrs: pulumi.Input<pulumi.Input<inputs.FirewallPolicy46Dstaddr>[]>;
    /**
     * Destination interface name.
     */
    dstintf: pulumi.Input<string>;
    /**
     * true or false, set this parameter to true when using dynamic forEach + toset to configure and sort sub-tables, please do not set this parameter when configuring static sub-tables.
     */
    dynamicSortSubtable?: pulumi.Input<string>;
    /**
     * Enable/disable fixed port for this policy. Valid values: `enable`, `disable`.
     */
    fixedport?: pulumi.Input<string>;
    /**
     * Enable/disable use of IP Pools for source NAT. Valid values: `enable`, `disable`.
     */
    ippool?: pulumi.Input<string>;
    /**
     * Enable/disable traffic logging for this policy. Valid values: `enable`, `disable`.
     */
    logtraffic?: pulumi.Input<string>;
    /**
     * Record logs when a session starts and ends. Valid values: `enable`, `disable`.
     */
    logtrafficStart?: pulumi.Input<string>;
    /**
     * IP pool name.
     */
    name?: pulumi.Input<string>;
    /**
     * Per IP traffic shaper.
     */
    perIpShaper?: pulumi.Input<string>;
    /**
     * Enable/disable allowing any host. Valid values: `enable`, `disable`.
     */
    permitAnyHost?: pulumi.Input<string>;
    /**
     * Policy ID.
     */
    policyid?: pulumi.Input<number>;
    /**
     * IP Pool names. The structure of `poolname` block is documented below.
     */
    poolnames?: pulumi.Input<pulumi.Input<inputs.FirewallPolicy46Poolname>[]>;
    /**
     * Schedule name.
     */
    schedule: pulumi.Input<string>;
    /**
     * Service name. The structure of `service` block is documented below.
     */
    services?: pulumi.Input<pulumi.Input<inputs.FirewallPolicy46Service>[]>;
    /**
     * Source address objects. The structure of `srcaddr` block is documented below.
     */
    srcaddrs: pulumi.Input<pulumi.Input<inputs.FirewallPolicy46Srcaddr>[]>;
    /**
     * Source interface name.
     */
    srcintf: pulumi.Input<string>;
    /**
     * Enable/disable this policy. Valid values: `enable`, `disable`.
     */
    status?: pulumi.Input<string>;
    /**
     * TCP Maximum Segment Size value of receiver (0 - 65535, default = 0)
     */
    tcpMssReceiver?: pulumi.Input<number>;
    /**
     * TCP Maximum Segment Size value of sender (0 - 65535, default = 0).
     */
    tcpMssSender?: pulumi.Input<number>;
    /**
     * Traffic shaper.
     */
    trafficShaper?: pulumi.Input<string>;
    /**
     * Reverse traffic shaper.
     */
    trafficShaperReverse?: pulumi.Input<string>;
    /**
     * Universally Unique Identifier (UUID; automatically assigned but can be manually reset).
     */
    uuid?: pulumi.Input<string>;
    /**
     * Specifies the vdom to which the resource will be applied when the FortiGate unit is running in VDOM mode. Only one vdom can be specified. If you want to inherit the vdom configuration of the provider, please do not set this parameter.
     */
    vdomparam?: pulumi.Input<string>;
}
