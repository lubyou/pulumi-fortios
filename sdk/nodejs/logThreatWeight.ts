// *** WARNING: this file was generated by the Pulumi Terraform Bridge (tfgen) Tool. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

import * as pulumi from "@pulumi/pulumi";
import * as inputs from "./types/input";
import * as outputs from "./types/output";
import * as utilities from "./utilities";

export class LogThreatWeight extends pulumi.CustomResource {
    /**
     * Get an existing LogThreatWeight resource's state with the given name, ID, and optional extra
     * properties used to qualify the lookup.
     *
     * @param name The _unique_ name of the resulting resource.
     * @param id The _unique_ provider ID of the resource to lookup.
     * @param state Any extra arguments used during the lookup.
     * @param opts Optional settings to control the behavior of the CustomResource.
     */
    public static get(name: string, id: pulumi.Input<pulumi.ID>, state?: LogThreatWeightState, opts?: pulumi.CustomResourceOptions): LogThreatWeight {
        return new LogThreatWeight(name, <any>state, { ...opts, id: id });
    }

    /** @internal */
    public static readonly __pulumiType = 'fortios:index/logThreatWeight:LogThreatWeight';

    /**
     * Returns true if the given object is an instance of LogThreatWeight.  This is designed to work even
     * when multiple copies of the Pulumi SDK have been loaded into the same process.
     */
    public static isInstance(obj: any): obj is LogThreatWeight {
        if (obj === undefined || obj === null) {
            return false;
        }
        return obj['__pulumiType'] === LogThreatWeight.__pulumiType;
    }

    public readonly applications!: pulumi.Output<outputs.LogThreatWeightApplication[] | undefined>;
    public readonly blockedConnection!: pulumi.Output<string>;
    public readonly botnetConnectionDetected!: pulumi.Output<string>;
    public readonly dynamicSortSubtable!: pulumi.Output<string | undefined>;
    public readonly failedConnection!: pulumi.Output<string>;
    public readonly geolocations!: pulumi.Output<outputs.LogThreatWeightGeolocation[] | undefined>;
    public readonly ips!: pulumi.Output<outputs.LogThreatWeightIps>;
    public readonly level!: pulumi.Output<outputs.LogThreatWeightLevel>;
    public readonly malware!: pulumi.Output<outputs.LogThreatWeightMalware>;
    public readonly status!: pulumi.Output<string>;
    public readonly urlBlockDetected!: pulumi.Output<string>;
    public readonly vdomparam!: pulumi.Output<string | undefined>;
    public readonly webs!: pulumi.Output<outputs.LogThreatWeightWeb[] | undefined>;

    /**
     * Create a LogThreatWeight resource with the given unique name, arguments, and options.
     *
     * @param name The _unique_ name of the resource.
     * @param args The arguments to use to populate this resource's properties.
     * @param opts A bag of options that control this resource's behavior.
     */
    constructor(name: string, args?: LogThreatWeightArgs, opts?: pulumi.CustomResourceOptions)
    constructor(name: string, argsOrState?: LogThreatWeightArgs | LogThreatWeightState, opts?: pulumi.CustomResourceOptions) {
        let resourceInputs: pulumi.Inputs = {};
        opts = opts || {};
        if (opts.id) {
            const state = argsOrState as LogThreatWeightState | undefined;
            resourceInputs["applications"] = state ? state.applications : undefined;
            resourceInputs["blockedConnection"] = state ? state.blockedConnection : undefined;
            resourceInputs["botnetConnectionDetected"] = state ? state.botnetConnectionDetected : undefined;
            resourceInputs["dynamicSortSubtable"] = state ? state.dynamicSortSubtable : undefined;
            resourceInputs["failedConnection"] = state ? state.failedConnection : undefined;
            resourceInputs["geolocations"] = state ? state.geolocations : undefined;
            resourceInputs["ips"] = state ? state.ips : undefined;
            resourceInputs["level"] = state ? state.level : undefined;
            resourceInputs["malware"] = state ? state.malware : undefined;
            resourceInputs["status"] = state ? state.status : undefined;
            resourceInputs["urlBlockDetected"] = state ? state.urlBlockDetected : undefined;
            resourceInputs["vdomparam"] = state ? state.vdomparam : undefined;
            resourceInputs["webs"] = state ? state.webs : undefined;
        } else {
            const args = argsOrState as LogThreatWeightArgs | undefined;
            resourceInputs["applications"] = args ? args.applications : undefined;
            resourceInputs["blockedConnection"] = args ? args.blockedConnection : undefined;
            resourceInputs["botnetConnectionDetected"] = args ? args.botnetConnectionDetected : undefined;
            resourceInputs["dynamicSortSubtable"] = args ? args.dynamicSortSubtable : undefined;
            resourceInputs["failedConnection"] = args ? args.failedConnection : undefined;
            resourceInputs["geolocations"] = args ? args.geolocations : undefined;
            resourceInputs["ips"] = args ? args.ips : undefined;
            resourceInputs["level"] = args ? args.level : undefined;
            resourceInputs["malware"] = args ? args.malware : undefined;
            resourceInputs["status"] = args ? args.status : undefined;
            resourceInputs["urlBlockDetected"] = args ? args.urlBlockDetected : undefined;
            resourceInputs["vdomparam"] = args ? args.vdomparam : undefined;
            resourceInputs["webs"] = args ? args.webs : undefined;
        }
        opts = pulumi.mergeOptions(utilities.resourceOptsDefaults(), opts);
        super(LogThreatWeight.__pulumiType, name, resourceInputs, opts);
    }
}

/**
 * Input properties used for looking up and filtering LogThreatWeight resources.
 */
export interface LogThreatWeightState {
    applications?: pulumi.Input<pulumi.Input<inputs.LogThreatWeightApplication>[]>;
    blockedConnection?: pulumi.Input<string>;
    botnetConnectionDetected?: pulumi.Input<string>;
    dynamicSortSubtable?: pulumi.Input<string>;
    failedConnection?: pulumi.Input<string>;
    geolocations?: pulumi.Input<pulumi.Input<inputs.LogThreatWeightGeolocation>[]>;
    ips?: pulumi.Input<inputs.LogThreatWeightIps>;
    level?: pulumi.Input<inputs.LogThreatWeightLevel>;
    malware?: pulumi.Input<inputs.LogThreatWeightMalware>;
    status?: pulumi.Input<string>;
    urlBlockDetected?: pulumi.Input<string>;
    vdomparam?: pulumi.Input<string>;
    webs?: pulumi.Input<pulumi.Input<inputs.LogThreatWeightWeb>[]>;
}

/**
 * The set of arguments for constructing a LogThreatWeight resource.
 */
export interface LogThreatWeightArgs {
    applications?: pulumi.Input<pulumi.Input<inputs.LogThreatWeightApplication>[]>;
    blockedConnection?: pulumi.Input<string>;
    botnetConnectionDetected?: pulumi.Input<string>;
    dynamicSortSubtable?: pulumi.Input<string>;
    failedConnection?: pulumi.Input<string>;
    geolocations?: pulumi.Input<pulumi.Input<inputs.LogThreatWeightGeolocation>[]>;
    ips?: pulumi.Input<inputs.LogThreatWeightIps>;
    level?: pulumi.Input<inputs.LogThreatWeightLevel>;
    malware?: pulumi.Input<inputs.LogThreatWeightMalware>;
    status?: pulumi.Input<string>;
    urlBlockDetected?: pulumi.Input<string>;
    vdomparam?: pulumi.Input<string>;
    webs?: pulumi.Input<pulumi.Input<inputs.LogThreatWeightWeb>[]>;
}
