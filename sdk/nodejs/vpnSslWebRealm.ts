// *** WARNING: this file was generated by the Pulumi Terraform Bridge (tfgen) Tool. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

import * as pulumi from "@pulumi/pulumi";
import * as utilities from "./utilities";

export class VpnSslWebRealm extends pulumi.CustomResource {
    /**
     * Get an existing VpnSslWebRealm resource's state with the given name, ID, and optional extra
     * properties used to qualify the lookup.
     *
     * @param name The _unique_ name of the resulting resource.
     * @param id The _unique_ provider ID of the resource to lookup.
     * @param state Any extra arguments used during the lookup.
     * @param opts Optional settings to control the behavior of the CustomResource.
     */
    public static get(name: string, id: pulumi.Input<pulumi.ID>, state?: VpnSslWebRealmState, opts?: pulumi.CustomResourceOptions): VpnSslWebRealm {
        return new VpnSslWebRealm(name, <any>state, { ...opts, id: id });
    }

    /** @internal */
    public static readonly __pulumiType = 'fortios:index/vpnSslWebRealm:VpnSslWebRealm';

    /**
     * Returns true if the given object is an instance of VpnSslWebRealm.  This is designed to work even
     * when multiple copies of the Pulumi SDK have been loaded into the same process.
     */
    public static isInstance(obj: any): obj is VpnSslWebRealm {
        if (obj === undefined || obj === null) {
            return false;
        }
        return obj['__pulumiType'] === VpnSslWebRealm.__pulumiType;
    }

    public readonly loginPage!: pulumi.Output<string | undefined>;
    public readonly maxConcurrentUser!: pulumi.Output<number>;
    public readonly nasIp!: pulumi.Output<string>;
    public readonly radiusPort!: pulumi.Output<number>;
    public readonly radiusServer!: pulumi.Output<string>;
    public readonly urlPath!: pulumi.Output<string>;
    public readonly vdomparam!: pulumi.Output<string | undefined>;
    public readonly virtualHost!: pulumi.Output<string | undefined>;
    public readonly virtualHostOnly!: pulumi.Output<string>;
    public readonly virtualHostServerCert!: pulumi.Output<string>;

    /**
     * Create a VpnSslWebRealm resource with the given unique name, arguments, and options.
     *
     * @param name The _unique_ name of the resource.
     * @param args The arguments to use to populate this resource's properties.
     * @param opts A bag of options that control this resource's behavior.
     */
    constructor(name: string, args?: VpnSslWebRealmArgs, opts?: pulumi.CustomResourceOptions)
    constructor(name: string, argsOrState?: VpnSslWebRealmArgs | VpnSslWebRealmState, opts?: pulumi.CustomResourceOptions) {
        let resourceInputs: pulumi.Inputs = {};
        opts = opts || {};
        if (opts.id) {
            const state = argsOrState as VpnSslWebRealmState | undefined;
            resourceInputs["loginPage"] = state ? state.loginPage : undefined;
            resourceInputs["maxConcurrentUser"] = state ? state.maxConcurrentUser : undefined;
            resourceInputs["nasIp"] = state ? state.nasIp : undefined;
            resourceInputs["radiusPort"] = state ? state.radiusPort : undefined;
            resourceInputs["radiusServer"] = state ? state.radiusServer : undefined;
            resourceInputs["urlPath"] = state ? state.urlPath : undefined;
            resourceInputs["vdomparam"] = state ? state.vdomparam : undefined;
            resourceInputs["virtualHost"] = state ? state.virtualHost : undefined;
            resourceInputs["virtualHostOnly"] = state ? state.virtualHostOnly : undefined;
            resourceInputs["virtualHostServerCert"] = state ? state.virtualHostServerCert : undefined;
        } else {
            const args = argsOrState as VpnSslWebRealmArgs | undefined;
            resourceInputs["loginPage"] = args ? args.loginPage : undefined;
            resourceInputs["maxConcurrentUser"] = args ? args.maxConcurrentUser : undefined;
            resourceInputs["nasIp"] = args ? args.nasIp : undefined;
            resourceInputs["radiusPort"] = args ? args.radiusPort : undefined;
            resourceInputs["radiusServer"] = args ? args.radiusServer : undefined;
            resourceInputs["urlPath"] = args ? args.urlPath : undefined;
            resourceInputs["vdomparam"] = args ? args.vdomparam : undefined;
            resourceInputs["virtualHost"] = args ? args.virtualHost : undefined;
            resourceInputs["virtualHostOnly"] = args ? args.virtualHostOnly : undefined;
            resourceInputs["virtualHostServerCert"] = args ? args.virtualHostServerCert : undefined;
        }
        opts = pulumi.mergeOptions(utilities.resourceOptsDefaults(), opts);
        super(VpnSslWebRealm.__pulumiType, name, resourceInputs, opts);
    }
}

/**
 * Input properties used for looking up and filtering VpnSslWebRealm resources.
 */
export interface VpnSslWebRealmState {
    loginPage?: pulumi.Input<string>;
    maxConcurrentUser?: pulumi.Input<number>;
    nasIp?: pulumi.Input<string>;
    radiusPort?: pulumi.Input<number>;
    radiusServer?: pulumi.Input<string>;
    urlPath?: pulumi.Input<string>;
    vdomparam?: pulumi.Input<string>;
    virtualHost?: pulumi.Input<string>;
    virtualHostOnly?: pulumi.Input<string>;
    virtualHostServerCert?: pulumi.Input<string>;
}

/**
 * The set of arguments for constructing a VpnSslWebRealm resource.
 */
export interface VpnSslWebRealmArgs {
    loginPage?: pulumi.Input<string>;
    maxConcurrentUser?: pulumi.Input<number>;
    nasIp?: pulumi.Input<string>;
    radiusPort?: pulumi.Input<number>;
    radiusServer?: pulumi.Input<string>;
    urlPath?: pulumi.Input<string>;
    vdomparam?: pulumi.Input<string>;
    virtualHost?: pulumi.Input<string>;
    virtualHostOnly?: pulumi.Input<string>;
    virtualHostServerCert?: pulumi.Input<string>;
}
