// *** WARNING: this file was generated by the Pulumi Terraform Bridge (tfgen) Tool. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

import * as pulumi from "@pulumi/pulumi";
import { input as inputs, output as outputs } from "./types";
import * as utilities from "./utilities";

/**
 * Use this data source to get information on fortios system ha
 */
export function getSystemHa(args?: GetSystemHaArgs, opts?: pulumi.InvokeOptions): Promise<GetSystemHaResult> {
    args = args || {};
    if (!opts) {
        opts = {}
    }

    if (!opts.version) {
        opts.version = utilities.getVersion();
    }
    return pulumi.runtime.invoke("fortios:index/getSystemHa:GetSystemHa", {
        "vdomparam": args.vdomparam,
    }, opts);
}

/**
 * A collection of arguments for invoking GetSystemHa.
 */
export interface GetSystemHaArgs {
    /**
     * Specifies the vdom to which the data source will be applied when the FortiGate unit is running in VDOM mode. Only one vdom can be specified. If you want to inherit the vdom configuration of the provider, please do not set this parameter.
     */
    vdomparam?: string;
}

/**
 * A collection of values returned by GetSystemHa.
 */
export interface GetSystemHaResult {
    /**
     * Number of gratuitous ARPs (1 - 60). Lower to reduce traffic. Higher to reduce failover time.
     */
    readonly arps: number;
    /**
     * Time between gratuitous ARPs  (1 - 20 sec). Lower to reduce failover time. Higher to reduce traffic.
     */
    readonly arpsInterval: number;
    /**
     * Enable/disable heartbeat message authentication.
     */
    readonly authentication: string;
    /**
     * Dynamic weighted load balancing CPU usage weight and high and low thresholds.
     */
    readonly cpuThreshold: string;
    /**
     * Enable/disable heartbeat message encryption.
     */
    readonly encryption: string;
    /**
     * Dynamic weighted load balancing weight and high and low number of FTP proxy sessions.
     */
    readonly ftpProxyThreshold: string;
    /**
     * Enable/disable gratuitous ARPs. Disable if link-failed-signal enabled.
     */
    readonly gratuitousArps: string;
    /**
     * Cluster group ID  (0 - 255). Must be the same for all members.
     */
    readonly groupId: number;
    /**
     * Cluster group name. Must be the same for all members.
     */
    readonly groupName: string;
    /**
     * Enable/disable using ha-mgmt interface for syslog, SNMP, remote authentication (RADIUS), FortiAnalyzer, and FortiSandbox.
     */
    readonly haDirect: string;
    /**
     * HA heartbeat packet Ethertype (4-digit hex).
     */
    readonly haEthType: string;
    /**
     * Reserve interfaces to manage individual cluster units. The structure of `haMgmtInterfaces` block is documented below.
     */
    readonly haMgmtInterfaces: outputs.GetSystemHaHaMgmtInterface[];
    /**
     * Enable to reserve interfaces to manage individual cluster units.
     */
    readonly haMgmtStatus: string;
    /**
     * Normally you would only reduce this value for failover testing.
     */
    readonly haUptimeDiffMargin: number;
    /**
     * Time between sending heartbeat packets (1 - 20 (100*ms)). Increase to reduce false positives.
     */
    readonly hbInterval: number;
    /**
     * Number of lost heartbeats to signal a failure (1 - 60). Increase to reduce false positives.
     */
    readonly hbLostThreshold: number;
    /**
     * Heartbeat interfaces. Must be the same for all members.
     */
    readonly hbdev: string;
    /**
     * Transparent mode HA heartbeat packet Ethertype (4-digit hex).
     */
    readonly hcEthType: string;
    /**
     * Time to wait before changing from hello to work state (5 - 300 sec).
     */
    readonly helloHolddown: number;
    /**
     * Dynamic weighted load balancing weight and high and low number of HTTP proxy sessions.
     */
    readonly httpProxyThreshold: string;
    /**
     * The provider-assigned unique ID for this managed resource.
     */
    readonly id: string;
    /**
     * Dynamic weighted load balancing weight and high and low number of IMAP proxy sessions.
     */
    readonly imapProxyThreshold: string;
    /**
     * Enable/disable synchronization of sessions among HA clusters.
     */
    readonly interClusterSessionSync: string;
    /**
     * key
     */
    readonly key: string;
    /**
     * Telnet session HA heartbeat packet Ethertype (4-digit hex).
     */
    readonly l2epEthType: string;
    /**
     * Enable to shut down all interfaces for 1 sec after a failover. Use if gratuitous ARPs do not update network.
     */
    readonly linkFailedSignal: string;
    /**
     * Enable to load balance TCP sessions. Disable to load balance proxy sessions only.
     */
    readonly loadBalanceAll: string;
    /**
     * Enable/disable usage of the logical serial number.
     */
    readonly logicalSn: string;
    /**
     * Enable/disable memory compatible mode.
     */
    readonly memoryCompatibleMode: string;
    /**
     * Dynamic weighted load balancing memory usage weight and high and low thresholds.
     */
    readonly memoryThreshold: string;
    /**
     * HA mode. Must be the same for all members. FGSP requires standalone.
     */
    readonly mode: string;
    /**
     * Interfaces to check for port monitoring (or link failure).
     */
    readonly monitor: string;
    /**
     * HA multicast TTL on master (5 - 3600 sec).
     */
    readonly multicastTtl: number;
    /**
     * Dynamic weighted load balancing weight and high and low number of NNTP proxy sessions.
     */
    readonly nntpProxyThreshold: string;
    /**
     * Enable and increase the priority of the unit that should always be primary (master).
     */
    readonly override: string;
    /**
     * Delay negotiating if override is enabled (0 - 3600 sec). Reduces how often the cluster negotiates.
     */
    readonly overrideWaitTime: number;
    /**
     * Cluster password. Must be the same for all members.
     */
    readonly password: string;
    /**
     * Remote IP monitoring failover threshold (0 - 50).
     */
    readonly pingserverFailoverThreshold: number;
    /**
     * Time to wait in minutes before renegotiating after a remote IP monitoring failover.
     */
    readonly pingserverFlipTimeout: number;
    /**
     * Interfaces to check for remote IP monitoring.
     */
    readonly pingserverMonitorInterface: string;
    /**
     * Enable to force the cluster to negotiate after a remote IP monitoring failover.
     */
    readonly pingserverSecondaryForceReset: string;
    /**
     * Enable to force the cluster to negotiate after a remote IP monitoring failover.
     */
    readonly pingserverSlaveForceReset: string;
    /**
     * Dynamic weighted load balancing weight and high and low number of POP3 proxy sessions.
     */
    readonly pop3ProxyThreshold: string;
    /**
     * Increase the priority to select the primary unit (0 - 255).
     */
    readonly priority: number;
    /**
     * Time to wait between routing table updates to the cluster (0 - 3600 sec).
     */
    readonly routeHold: number;
    /**
     * TTL for primary unit routes (5 - 3600 sec). Increase to maintain active routes during failover.
     */
    readonly routeTtl: number;
    /**
     * Time to wait before sending new routes to the cluster (0 - 3600 sec).
     */
    readonly routeWait: number;
    /**
     * Type of A-A load balancing. Use none if you have external load balancers.
     */
    readonly schedule: string;
    /**
     * Configure virtual cluster 2. The structure of `secondaryVcluster` block is documented below.
     */
    readonly secondaryVcluster: outputs.GetSystemHaSecondaryVcluster;
    /**
     * Enable/disable session pickup. Enabling it can reduce session down time when fail over happens.
     */
    readonly sessionPickup: string;
    /**
     * Enable/disable UDP and ICMP session sync.
     */
    readonly sessionPickupConnectionless: string;
    /**
     * Enable to sync sessions longer than 30 sec. Only longer lived sessions need to be synced.
     */
    readonly sessionPickupDelay: string;
    /**
     * Enable/disable session helper expectation session sync for FGSP.
     */
    readonly sessionPickupExpectation: string;
    /**
     * Enable/disable NAT session sync for FGSP.
     */
    readonly sessionPickupNat: string;
    /**
     * Offload session-sync process to kernel and sync sessions using connected interface(s) directly.
     */
    readonly sessionSyncDev: string;
    /**
     * Dynamic weighted load balancing weight and high and low number of SMTP proxy sessions.
     */
    readonly smtpProxyThreshold: string;
    /**
     * Enable/disable automatic HA failover on SSD disk failure.
     */
    readonly ssdFailover: string;
    /**
     * Enable/disable FGSP configuration synchronization.
     */
    readonly standaloneConfigSync: string;
    /**
     * Enable/disable standalone management VDOM.
     */
    readonly standaloneMgmtVdom: string;
    /**
     * Enable/disable configuration synchronization.
     */
    readonly syncConfig: string;
    /**
     * Enable/disable HA packet distribution to multiple CPUs.
     */
    readonly syncPacketBalance: string;
    /**
     * Enable/disable unicast heartbeat.
     */
    readonly unicastHb: string;
    /**
     * Unicast heartbeat netmask.
     */
    readonly unicastHbNetmask: string;
    /**
     * Unicast heartbeat peer IP.
     */
    readonly unicastHbPeerip: string;
    /**
     * Enable to upgrade a cluster without blocking network traffic.
     */
    readonly uninterruptibleUpgrade: string;
    /**
     * Enable/disable virtual cluster 2 for virtual clustering.
     */
    readonly vcluster2: string;
    /**
     * Cluster ID.
     */
    readonly vclusterId: number;
    /**
     * VDOMs in virtual cluster 2.
     */
    readonly vdom: string;
    readonly vdomparam?: string;
    /**
     * Weight-round-robin weight for each cluster unit. Syntax <priority> <weight>.
     */
    readonly weight: string;
}
