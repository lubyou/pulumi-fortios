// *** WARNING: this file was generated by the Pulumi Terraform Bridge (tfgen) Tool. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

import * as pulumi from "@pulumi/pulumi";
import * as inputs from "./types/input";
import * as outputs from "./types/output";
import * as utilities from "./utilities";

export class SwitchControllerGlobal extends pulumi.CustomResource {
    /**
     * Get an existing SwitchControllerGlobal resource's state with the given name, ID, and optional extra
     * properties used to qualify the lookup.
     *
     * @param name The _unique_ name of the resulting resource.
     * @param id The _unique_ provider ID of the resource to lookup.
     * @param state Any extra arguments used during the lookup.
     * @param opts Optional settings to control the behavior of the CustomResource.
     */
    public static get(name: string, id: pulumi.Input<pulumi.ID>, state?: SwitchControllerGlobalState, opts?: pulumi.CustomResourceOptions): SwitchControllerGlobal {
        return new SwitchControllerGlobal(name, <any>state, { ...opts, id: id });
    }

    /** @internal */
    public static readonly __pulumiType = 'fortios:index/switchControllerGlobal:SwitchControllerGlobal';

    /**
     * Returns true if the given object is an instance of SwitchControllerGlobal.  This is designed to work even
     * when multiple copies of the Pulumi SDK have been loaded into the same process.
     */
    public static isInstance(obj: any): obj is SwitchControllerGlobal {
        if (obj === undefined || obj === null) {
            return false;
        }
        return obj['__pulumiType'] === SwitchControllerGlobal.__pulumiType;
    }

    public readonly allowMultipleInterfaces!: pulumi.Output<string>;
    public readonly bounceQuarantinedLink!: pulumi.Output<string>;
    public readonly customCommands!: pulumi.Output<outputs.SwitchControllerGlobalCustomCommand[] | undefined>;
    public readonly defaultVirtualSwitchVlan!: pulumi.Output<string>;
    public readonly dhcpServerAccessList!: pulumi.Output<string>;
    public readonly disableDiscoveries!: pulumi.Output<outputs.SwitchControllerGlobalDisableDiscovery[] | undefined>;
    public readonly dynamicSortSubtable!: pulumi.Output<string | undefined>;
    public readonly fipsEnforce!: pulumi.Output<string>;
    public readonly firmwareProvisionOnAuthorization!: pulumi.Output<string>;
    public readonly httpsImagePush!: pulumi.Output<string>;
    public readonly logMacLimitViolations!: pulumi.Output<string>;
    public readonly macAgingInterval!: pulumi.Output<number>;
    public readonly macEventLogging!: pulumi.Output<string>;
    public readonly macRetentionPeriod!: pulumi.Output<number>;
    public readonly macViolationTimer!: pulumi.Output<number>;
    public readonly quarantineMode!: pulumi.Output<string>;
    public readonly snDnsResolution!: pulumi.Output<string>;
    public readonly updateUserDevice!: pulumi.Output<string>;
    public readonly vdomparam!: pulumi.Output<string | undefined>;
    public readonly vlanAllMode!: pulumi.Output<string>;
    public readonly vlanOptimization!: pulumi.Output<string>;

    /**
     * Create a SwitchControllerGlobal resource with the given unique name, arguments, and options.
     *
     * @param name The _unique_ name of the resource.
     * @param args The arguments to use to populate this resource's properties.
     * @param opts A bag of options that control this resource's behavior.
     */
    constructor(name: string, args?: SwitchControllerGlobalArgs, opts?: pulumi.CustomResourceOptions)
    constructor(name: string, argsOrState?: SwitchControllerGlobalArgs | SwitchControllerGlobalState, opts?: pulumi.CustomResourceOptions) {
        let resourceInputs: pulumi.Inputs = {};
        opts = opts || {};
        if (opts.id) {
            const state = argsOrState as SwitchControllerGlobalState | undefined;
            resourceInputs["allowMultipleInterfaces"] = state ? state.allowMultipleInterfaces : undefined;
            resourceInputs["bounceQuarantinedLink"] = state ? state.bounceQuarantinedLink : undefined;
            resourceInputs["customCommands"] = state ? state.customCommands : undefined;
            resourceInputs["defaultVirtualSwitchVlan"] = state ? state.defaultVirtualSwitchVlan : undefined;
            resourceInputs["dhcpServerAccessList"] = state ? state.dhcpServerAccessList : undefined;
            resourceInputs["disableDiscoveries"] = state ? state.disableDiscoveries : undefined;
            resourceInputs["dynamicSortSubtable"] = state ? state.dynamicSortSubtable : undefined;
            resourceInputs["fipsEnforce"] = state ? state.fipsEnforce : undefined;
            resourceInputs["firmwareProvisionOnAuthorization"] = state ? state.firmwareProvisionOnAuthorization : undefined;
            resourceInputs["httpsImagePush"] = state ? state.httpsImagePush : undefined;
            resourceInputs["logMacLimitViolations"] = state ? state.logMacLimitViolations : undefined;
            resourceInputs["macAgingInterval"] = state ? state.macAgingInterval : undefined;
            resourceInputs["macEventLogging"] = state ? state.macEventLogging : undefined;
            resourceInputs["macRetentionPeriod"] = state ? state.macRetentionPeriod : undefined;
            resourceInputs["macViolationTimer"] = state ? state.macViolationTimer : undefined;
            resourceInputs["quarantineMode"] = state ? state.quarantineMode : undefined;
            resourceInputs["snDnsResolution"] = state ? state.snDnsResolution : undefined;
            resourceInputs["updateUserDevice"] = state ? state.updateUserDevice : undefined;
            resourceInputs["vdomparam"] = state ? state.vdomparam : undefined;
            resourceInputs["vlanAllMode"] = state ? state.vlanAllMode : undefined;
            resourceInputs["vlanOptimization"] = state ? state.vlanOptimization : undefined;
        } else {
            const args = argsOrState as SwitchControllerGlobalArgs | undefined;
            resourceInputs["allowMultipleInterfaces"] = args ? args.allowMultipleInterfaces : undefined;
            resourceInputs["bounceQuarantinedLink"] = args ? args.bounceQuarantinedLink : undefined;
            resourceInputs["customCommands"] = args ? args.customCommands : undefined;
            resourceInputs["defaultVirtualSwitchVlan"] = args ? args.defaultVirtualSwitchVlan : undefined;
            resourceInputs["dhcpServerAccessList"] = args ? args.dhcpServerAccessList : undefined;
            resourceInputs["disableDiscoveries"] = args ? args.disableDiscoveries : undefined;
            resourceInputs["dynamicSortSubtable"] = args ? args.dynamicSortSubtable : undefined;
            resourceInputs["fipsEnforce"] = args ? args.fipsEnforce : undefined;
            resourceInputs["firmwareProvisionOnAuthorization"] = args ? args.firmwareProvisionOnAuthorization : undefined;
            resourceInputs["httpsImagePush"] = args ? args.httpsImagePush : undefined;
            resourceInputs["logMacLimitViolations"] = args ? args.logMacLimitViolations : undefined;
            resourceInputs["macAgingInterval"] = args ? args.macAgingInterval : undefined;
            resourceInputs["macEventLogging"] = args ? args.macEventLogging : undefined;
            resourceInputs["macRetentionPeriod"] = args ? args.macRetentionPeriod : undefined;
            resourceInputs["macViolationTimer"] = args ? args.macViolationTimer : undefined;
            resourceInputs["quarantineMode"] = args ? args.quarantineMode : undefined;
            resourceInputs["snDnsResolution"] = args ? args.snDnsResolution : undefined;
            resourceInputs["updateUserDevice"] = args ? args.updateUserDevice : undefined;
            resourceInputs["vdomparam"] = args ? args.vdomparam : undefined;
            resourceInputs["vlanAllMode"] = args ? args.vlanAllMode : undefined;
            resourceInputs["vlanOptimization"] = args ? args.vlanOptimization : undefined;
        }
        opts = pulumi.mergeOptions(utilities.resourceOptsDefaults(), opts);
        super(SwitchControllerGlobal.__pulumiType, name, resourceInputs, opts);
    }
}

/**
 * Input properties used for looking up and filtering SwitchControllerGlobal resources.
 */
export interface SwitchControllerGlobalState {
    allowMultipleInterfaces?: pulumi.Input<string>;
    bounceQuarantinedLink?: pulumi.Input<string>;
    customCommands?: pulumi.Input<pulumi.Input<inputs.SwitchControllerGlobalCustomCommand>[]>;
    defaultVirtualSwitchVlan?: pulumi.Input<string>;
    dhcpServerAccessList?: pulumi.Input<string>;
    disableDiscoveries?: pulumi.Input<pulumi.Input<inputs.SwitchControllerGlobalDisableDiscovery>[]>;
    dynamicSortSubtable?: pulumi.Input<string>;
    fipsEnforce?: pulumi.Input<string>;
    firmwareProvisionOnAuthorization?: pulumi.Input<string>;
    httpsImagePush?: pulumi.Input<string>;
    logMacLimitViolations?: pulumi.Input<string>;
    macAgingInterval?: pulumi.Input<number>;
    macEventLogging?: pulumi.Input<string>;
    macRetentionPeriod?: pulumi.Input<number>;
    macViolationTimer?: pulumi.Input<number>;
    quarantineMode?: pulumi.Input<string>;
    snDnsResolution?: pulumi.Input<string>;
    updateUserDevice?: pulumi.Input<string>;
    vdomparam?: pulumi.Input<string>;
    vlanAllMode?: pulumi.Input<string>;
    vlanOptimization?: pulumi.Input<string>;
}

/**
 * The set of arguments for constructing a SwitchControllerGlobal resource.
 */
export interface SwitchControllerGlobalArgs {
    allowMultipleInterfaces?: pulumi.Input<string>;
    bounceQuarantinedLink?: pulumi.Input<string>;
    customCommands?: pulumi.Input<pulumi.Input<inputs.SwitchControllerGlobalCustomCommand>[]>;
    defaultVirtualSwitchVlan?: pulumi.Input<string>;
    dhcpServerAccessList?: pulumi.Input<string>;
    disableDiscoveries?: pulumi.Input<pulumi.Input<inputs.SwitchControllerGlobalDisableDiscovery>[]>;
    dynamicSortSubtable?: pulumi.Input<string>;
    fipsEnforce?: pulumi.Input<string>;
    firmwareProvisionOnAuthorization?: pulumi.Input<string>;
    httpsImagePush?: pulumi.Input<string>;
    logMacLimitViolations?: pulumi.Input<string>;
    macAgingInterval?: pulumi.Input<number>;
    macEventLogging?: pulumi.Input<string>;
    macRetentionPeriod?: pulumi.Input<number>;
    macViolationTimer?: pulumi.Input<number>;
    quarantineMode?: pulumi.Input<string>;
    snDnsResolution?: pulumi.Input<string>;
    updateUserDevice?: pulumi.Input<string>;
    vdomparam?: pulumi.Input<string>;
    vlanAllMode?: pulumi.Input<string>;
    vlanOptimization?: pulumi.Input<string>;
}
