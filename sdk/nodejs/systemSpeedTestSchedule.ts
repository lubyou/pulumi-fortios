// *** WARNING: this file was generated by the Pulumi Terraform Bridge (tfgen) Tool. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

import * as pulumi from "@pulumi/pulumi";
import * as inputs from "./types/input";
import * as outputs from "./types/output";
import * as utilities from "./utilities";

export class SystemSpeedTestSchedule extends pulumi.CustomResource {
    /**
     * Get an existing SystemSpeedTestSchedule resource's state with the given name, ID, and optional extra
     * properties used to qualify the lookup.
     *
     * @param name The _unique_ name of the resulting resource.
     * @param id The _unique_ provider ID of the resource to lookup.
     * @param state Any extra arguments used during the lookup.
     * @param opts Optional settings to control the behavior of the CustomResource.
     */
    public static get(name: string, id: pulumi.Input<pulumi.ID>, state?: SystemSpeedTestScheduleState, opts?: pulumi.CustomResourceOptions): SystemSpeedTestSchedule {
        return new SystemSpeedTestSchedule(name, <any>state, { ...opts, id: id });
    }

    /** @internal */
    public static readonly __pulumiType = 'fortios:index/systemSpeedTestSchedule:SystemSpeedTestSchedule';

    /**
     * Returns true if the given object is an instance of SystemSpeedTestSchedule.  This is designed to work even
     * when multiple copies of the Pulumi SDK have been loaded into the same process.
     */
    public static isInstance(obj: any): obj is SystemSpeedTestSchedule {
        if (obj === undefined || obj === null) {
            return false;
        }
        return obj['__pulumiType'] === SystemSpeedTestSchedule.__pulumiType;
    }

    public readonly diffserv!: pulumi.Output<string>;
    public readonly dynamicServer!: pulumi.Output<string>;
    public readonly dynamicSortSubtable!: pulumi.Output<string | undefined>;
    public readonly getAllTables!: pulumi.Output<string | undefined>;
    public readonly interface!: pulumi.Output<string>;
    public readonly mode!: pulumi.Output<string>;
    public readonly schedules!: pulumi.Output<outputs.SystemSpeedTestScheduleSchedule[] | undefined>;
    public readonly serverName!: pulumi.Output<string>;
    public readonly status!: pulumi.Output<string>;
    public readonly updateInbandwidth!: pulumi.Output<string>;
    public readonly updateInbandwidthMaximum!: pulumi.Output<number>;
    public readonly updateInbandwidthMinimum!: pulumi.Output<number>;
    public readonly updateOutbandwidth!: pulumi.Output<string>;
    public readonly updateOutbandwidthMaximum!: pulumi.Output<number>;
    public readonly updateOutbandwidthMinimum!: pulumi.Output<number>;
    public readonly vdomparam!: pulumi.Output<string | undefined>;

    /**
     * Create a SystemSpeedTestSchedule resource with the given unique name, arguments, and options.
     *
     * @param name The _unique_ name of the resource.
     * @param args The arguments to use to populate this resource's properties.
     * @param opts A bag of options that control this resource's behavior.
     */
    constructor(name: string, args?: SystemSpeedTestScheduleArgs, opts?: pulumi.CustomResourceOptions)
    constructor(name: string, argsOrState?: SystemSpeedTestScheduleArgs | SystemSpeedTestScheduleState, opts?: pulumi.CustomResourceOptions) {
        let resourceInputs: pulumi.Inputs = {};
        opts = opts || {};
        if (opts.id) {
            const state = argsOrState as SystemSpeedTestScheduleState | undefined;
            resourceInputs["diffserv"] = state ? state.diffserv : undefined;
            resourceInputs["dynamicServer"] = state ? state.dynamicServer : undefined;
            resourceInputs["dynamicSortSubtable"] = state ? state.dynamicSortSubtable : undefined;
            resourceInputs["getAllTables"] = state ? state.getAllTables : undefined;
            resourceInputs["interface"] = state ? state.interface : undefined;
            resourceInputs["mode"] = state ? state.mode : undefined;
            resourceInputs["schedules"] = state ? state.schedules : undefined;
            resourceInputs["serverName"] = state ? state.serverName : undefined;
            resourceInputs["status"] = state ? state.status : undefined;
            resourceInputs["updateInbandwidth"] = state ? state.updateInbandwidth : undefined;
            resourceInputs["updateInbandwidthMaximum"] = state ? state.updateInbandwidthMaximum : undefined;
            resourceInputs["updateInbandwidthMinimum"] = state ? state.updateInbandwidthMinimum : undefined;
            resourceInputs["updateOutbandwidth"] = state ? state.updateOutbandwidth : undefined;
            resourceInputs["updateOutbandwidthMaximum"] = state ? state.updateOutbandwidthMaximum : undefined;
            resourceInputs["updateOutbandwidthMinimum"] = state ? state.updateOutbandwidthMinimum : undefined;
            resourceInputs["vdomparam"] = state ? state.vdomparam : undefined;
        } else {
            const args = argsOrState as SystemSpeedTestScheduleArgs | undefined;
            resourceInputs["diffserv"] = args ? args.diffserv : undefined;
            resourceInputs["dynamicServer"] = args ? args.dynamicServer : undefined;
            resourceInputs["dynamicSortSubtable"] = args ? args.dynamicSortSubtable : undefined;
            resourceInputs["getAllTables"] = args ? args.getAllTables : undefined;
            resourceInputs["interface"] = args ? args.interface : undefined;
            resourceInputs["mode"] = args ? args.mode : undefined;
            resourceInputs["schedules"] = args ? args.schedules : undefined;
            resourceInputs["serverName"] = args ? args.serverName : undefined;
            resourceInputs["status"] = args ? args.status : undefined;
            resourceInputs["updateInbandwidth"] = args ? args.updateInbandwidth : undefined;
            resourceInputs["updateInbandwidthMaximum"] = args ? args.updateInbandwidthMaximum : undefined;
            resourceInputs["updateInbandwidthMinimum"] = args ? args.updateInbandwidthMinimum : undefined;
            resourceInputs["updateOutbandwidth"] = args ? args.updateOutbandwidth : undefined;
            resourceInputs["updateOutbandwidthMaximum"] = args ? args.updateOutbandwidthMaximum : undefined;
            resourceInputs["updateOutbandwidthMinimum"] = args ? args.updateOutbandwidthMinimum : undefined;
            resourceInputs["vdomparam"] = args ? args.vdomparam : undefined;
        }
        opts = pulumi.mergeOptions(utilities.resourceOptsDefaults(), opts);
        super(SystemSpeedTestSchedule.__pulumiType, name, resourceInputs, opts);
    }
}

/**
 * Input properties used for looking up and filtering SystemSpeedTestSchedule resources.
 */
export interface SystemSpeedTestScheduleState {
    diffserv?: pulumi.Input<string>;
    dynamicServer?: pulumi.Input<string>;
    dynamicSortSubtable?: pulumi.Input<string>;
    getAllTables?: pulumi.Input<string>;
    interface?: pulumi.Input<string>;
    mode?: pulumi.Input<string>;
    schedules?: pulumi.Input<pulumi.Input<inputs.SystemSpeedTestScheduleSchedule>[]>;
    serverName?: pulumi.Input<string>;
    status?: pulumi.Input<string>;
    updateInbandwidth?: pulumi.Input<string>;
    updateInbandwidthMaximum?: pulumi.Input<number>;
    updateInbandwidthMinimum?: pulumi.Input<number>;
    updateOutbandwidth?: pulumi.Input<string>;
    updateOutbandwidthMaximum?: pulumi.Input<number>;
    updateOutbandwidthMinimum?: pulumi.Input<number>;
    vdomparam?: pulumi.Input<string>;
}

/**
 * The set of arguments for constructing a SystemSpeedTestSchedule resource.
 */
export interface SystemSpeedTestScheduleArgs {
    diffserv?: pulumi.Input<string>;
    dynamicServer?: pulumi.Input<string>;
    dynamicSortSubtable?: pulumi.Input<string>;
    getAllTables?: pulumi.Input<string>;
    interface?: pulumi.Input<string>;
    mode?: pulumi.Input<string>;
    schedules?: pulumi.Input<pulumi.Input<inputs.SystemSpeedTestScheduleSchedule>[]>;
    serverName?: pulumi.Input<string>;
    status?: pulumi.Input<string>;
    updateInbandwidth?: pulumi.Input<string>;
    updateInbandwidthMaximum?: pulumi.Input<number>;
    updateInbandwidthMinimum?: pulumi.Input<number>;
    updateOutbandwidth?: pulumi.Input<string>;
    updateOutbandwidthMaximum?: pulumi.Input<number>;
    updateOutbandwidthMinimum?: pulumi.Input<number>;
    vdomparam?: pulumi.Input<string>;
}
