// *** WARNING: this file was generated by the Pulumi Terraform Bridge (tfgen) Tool. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

import * as pulumi from "@pulumi/pulumi";
import * as utilities from "./utilities";

/**
 * SNMP user configuration.
 *
 * ## Example Usage
 *
 * ```typescript
 * import * as pulumi from "@pulumi/pulumi";
 * import * as fortios from "@pulumi/fortios";
 *
 * const trname = new fortios.SystemSnmpUser("trname", {
 *     authProto: "sha",
 *     events: "cpu-high mem-low log-full intf-ip vpn-tun-up vpn-tun-down ha-switch ha-hb-failure ips-signature ips-anomaly av-virus av-oversize av-pattern av-fragmented fm-if-change bgp-established bgp-backward-transition ha-member-up ha-member-down ent-conf-change av-conserve av-bypass av-oversize-passed av-oversize-blocked ips-pkg-update ips-fail-open faz-disconnect wc-ap-up wc-ap-down fswctl-session-up fswctl-session-down load-balance-real-server-down per-cpu-high",
 *     haDirect: "disable",
 *     privProto: "aes",
 *     queries: "disable",
 *     queryPort: 161,
 *     securityLevel: "no-auth-no-priv",
 *     sourceIp: "0.0.0.0",
 *     sourceIpv6: "::",
 *     status: "disable",
 *     trapLport: 162,
 *     trapRport: 162,
 *     trapStatus: "enable",
 * });
 * ```
 *
 * ## Import
 *
 * SystemSnmp User can be imported using any of these accepted formats$ export "FORTIOS_IMPORT_TABLE"="true"
 *
 * ```sh
 *  $ pulumi import fortios:index/systemSnmpUser:SystemSnmpUser labelname {{name}}
 * ```
 *
 *  $ unset "FORTIOS_IMPORT_TABLE"
 */
export class SystemSnmpUser extends pulumi.CustomResource {
    /**
     * Get an existing SystemSnmpUser resource's state with the given name, ID, and optional extra
     * properties used to qualify the lookup.
     *
     * @param name The _unique_ name of the resulting resource.
     * @param id The _unique_ provider ID of the resource to lookup.
     * @param state Any extra arguments used during the lookup.
     * @param opts Optional settings to control the behavior of the CustomResource.
     */
    public static get(name: string, id: pulumi.Input<pulumi.ID>, state?: SystemSnmpUserState, opts?: pulumi.CustomResourceOptions): SystemSnmpUser {
        return new SystemSnmpUser(name, <any>state, { ...opts, id: id });
    }

    /** @internal */
    public static readonly __pulumiType = 'fortios:index/systemSnmpUser:SystemSnmpUser';

    /**
     * Returns true if the given object is an instance of SystemSnmpUser.  This is designed to work even
     * when multiple copies of the Pulumi SDK have been loaded into the same process.
     */
    public static isInstance(obj: any): obj is SystemSnmpUser {
        if (obj === undefined || obj === null) {
            return false;
        }
        return obj['__pulumiType'] === SystemSnmpUser.__pulumiType;
    }

    /**
     * Authentication protocol.
     */
    public readonly authProto!: pulumi.Output<string>;
    /**
     * Password for authentication protocol.
     */
    public readonly authPwd!: pulumi.Output<string | undefined>;
    /**
     * SNMP notifications (traps) to send.
     */
    public readonly events!: pulumi.Output<string>;
    /**
     * Enable/disable direct management of HA cluster members. Valid values: `enable`, `disable`.
     */
    public readonly haDirect!: pulumi.Output<string>;
    /**
     * SNMP user name.
     */
    public readonly name!: pulumi.Output<string>;
    /**
     * SNMP managers to send notifications (traps) to.
     */
    public readonly notifyHosts!: pulumi.Output<string>;
    /**
     * IPv6 SNMP managers to send notifications (traps) to.
     */
    public readonly notifyHosts6!: pulumi.Output<string>;
    /**
     * Privacy (encryption) protocol. Valid values: `aes`, `des`, `aes256`, `aes256cisco`.
     */
    public readonly privProto!: pulumi.Output<string>;
    /**
     * Password for privacy (encryption) protocol.
     */
    public readonly privPwd!: pulumi.Output<string | undefined>;
    /**
     * Enable/disable SNMP queries for this user. Valid values: `enable`, `disable`.
     */
    public readonly queries!: pulumi.Output<string>;
    /**
     * SNMPv3 query port (default = 161).
     */
    public readonly queryPort!: pulumi.Output<number>;
    /**
     * Security level for message authentication and encryption. Valid values: `no-auth-no-priv`, `auth-no-priv`, `auth-priv`.
     */
    public readonly securityLevel!: pulumi.Output<string>;
    /**
     * Source IP for SNMP trap.
     */
    public readonly sourceIp!: pulumi.Output<string>;
    /**
     * Source IPv6 for SNMP trap.
     */
    public readonly sourceIpv6!: pulumi.Output<string>;
    /**
     * Enable/disable this SNMP user. Valid values: `enable`, `disable`.
     */
    public readonly status!: pulumi.Output<string>;
    /**
     * SNMPv3 local trap port (default = 162).
     */
    public readonly trapLport!: pulumi.Output<number>;
    /**
     * SNMPv3 trap remote port (default = 162).
     */
    public readonly trapRport!: pulumi.Output<number>;
    /**
     * Enable/disable traps for this SNMP user. Valid values: `enable`, `disable`.
     */
    public readonly trapStatus!: pulumi.Output<string>;
    /**
     * Specifies the vdom to which the resource will be applied when the FortiGate unit is running in VDOM mode. Only one vdom can be specified. If you want to inherit the vdom configuration of the provider, please do not set this parameter.
     */
    public readonly vdomparam!: pulumi.Output<string | undefined>;

    /**
     * Create a SystemSnmpUser resource with the given unique name, arguments, and options.
     *
     * @param name The _unique_ name of the resource.
     * @param args The arguments to use to populate this resource's properties.
     * @param opts A bag of options that control this resource's behavior.
     */
    constructor(name: string, args?: SystemSnmpUserArgs, opts?: pulumi.CustomResourceOptions)
    constructor(name: string, argsOrState?: SystemSnmpUserArgs | SystemSnmpUserState, opts?: pulumi.CustomResourceOptions) {
        let inputs: pulumi.Inputs = {};
        opts = opts || {};
        if (opts.id) {
            const state = argsOrState as SystemSnmpUserState | undefined;
            inputs["authProto"] = state ? state.authProto : undefined;
            inputs["authPwd"] = state ? state.authPwd : undefined;
            inputs["events"] = state ? state.events : undefined;
            inputs["haDirect"] = state ? state.haDirect : undefined;
            inputs["name"] = state ? state.name : undefined;
            inputs["notifyHosts"] = state ? state.notifyHosts : undefined;
            inputs["notifyHosts6"] = state ? state.notifyHosts6 : undefined;
            inputs["privProto"] = state ? state.privProto : undefined;
            inputs["privPwd"] = state ? state.privPwd : undefined;
            inputs["queries"] = state ? state.queries : undefined;
            inputs["queryPort"] = state ? state.queryPort : undefined;
            inputs["securityLevel"] = state ? state.securityLevel : undefined;
            inputs["sourceIp"] = state ? state.sourceIp : undefined;
            inputs["sourceIpv6"] = state ? state.sourceIpv6 : undefined;
            inputs["status"] = state ? state.status : undefined;
            inputs["trapLport"] = state ? state.trapLport : undefined;
            inputs["trapRport"] = state ? state.trapRport : undefined;
            inputs["trapStatus"] = state ? state.trapStatus : undefined;
            inputs["vdomparam"] = state ? state.vdomparam : undefined;
        } else {
            const args = argsOrState as SystemSnmpUserArgs | undefined;
            inputs["authProto"] = args ? args.authProto : undefined;
            inputs["authPwd"] = args ? args.authPwd : undefined;
            inputs["events"] = args ? args.events : undefined;
            inputs["haDirect"] = args ? args.haDirect : undefined;
            inputs["name"] = args ? args.name : undefined;
            inputs["notifyHosts"] = args ? args.notifyHosts : undefined;
            inputs["notifyHosts6"] = args ? args.notifyHosts6 : undefined;
            inputs["privProto"] = args ? args.privProto : undefined;
            inputs["privPwd"] = args ? args.privPwd : undefined;
            inputs["queries"] = args ? args.queries : undefined;
            inputs["queryPort"] = args ? args.queryPort : undefined;
            inputs["securityLevel"] = args ? args.securityLevel : undefined;
            inputs["sourceIp"] = args ? args.sourceIp : undefined;
            inputs["sourceIpv6"] = args ? args.sourceIpv6 : undefined;
            inputs["status"] = args ? args.status : undefined;
            inputs["trapLport"] = args ? args.trapLport : undefined;
            inputs["trapRport"] = args ? args.trapRport : undefined;
            inputs["trapStatus"] = args ? args.trapStatus : undefined;
            inputs["vdomparam"] = args ? args.vdomparam : undefined;
        }
        if (!opts.version) {
            opts = pulumi.mergeOptions(opts, { version: utilities.getVersion()});
        }
        super(SystemSnmpUser.__pulumiType, name, inputs, opts);
    }
}

/**
 * Input properties used for looking up and filtering SystemSnmpUser resources.
 */
export interface SystemSnmpUserState {
    /**
     * Authentication protocol.
     */
    authProto?: pulumi.Input<string>;
    /**
     * Password for authentication protocol.
     */
    authPwd?: pulumi.Input<string>;
    /**
     * SNMP notifications (traps) to send.
     */
    events?: pulumi.Input<string>;
    /**
     * Enable/disable direct management of HA cluster members. Valid values: `enable`, `disable`.
     */
    haDirect?: pulumi.Input<string>;
    /**
     * SNMP user name.
     */
    name?: pulumi.Input<string>;
    /**
     * SNMP managers to send notifications (traps) to.
     */
    notifyHosts?: pulumi.Input<string>;
    /**
     * IPv6 SNMP managers to send notifications (traps) to.
     */
    notifyHosts6?: pulumi.Input<string>;
    /**
     * Privacy (encryption) protocol. Valid values: `aes`, `des`, `aes256`, `aes256cisco`.
     */
    privProto?: pulumi.Input<string>;
    /**
     * Password for privacy (encryption) protocol.
     */
    privPwd?: pulumi.Input<string>;
    /**
     * Enable/disable SNMP queries for this user. Valid values: `enable`, `disable`.
     */
    queries?: pulumi.Input<string>;
    /**
     * SNMPv3 query port (default = 161).
     */
    queryPort?: pulumi.Input<number>;
    /**
     * Security level for message authentication and encryption. Valid values: `no-auth-no-priv`, `auth-no-priv`, `auth-priv`.
     */
    securityLevel?: pulumi.Input<string>;
    /**
     * Source IP for SNMP trap.
     */
    sourceIp?: pulumi.Input<string>;
    /**
     * Source IPv6 for SNMP trap.
     */
    sourceIpv6?: pulumi.Input<string>;
    /**
     * Enable/disable this SNMP user. Valid values: `enable`, `disable`.
     */
    status?: pulumi.Input<string>;
    /**
     * SNMPv3 local trap port (default = 162).
     */
    trapLport?: pulumi.Input<number>;
    /**
     * SNMPv3 trap remote port (default = 162).
     */
    trapRport?: pulumi.Input<number>;
    /**
     * Enable/disable traps for this SNMP user. Valid values: `enable`, `disable`.
     */
    trapStatus?: pulumi.Input<string>;
    /**
     * Specifies the vdom to which the resource will be applied when the FortiGate unit is running in VDOM mode. Only one vdom can be specified. If you want to inherit the vdom configuration of the provider, please do not set this parameter.
     */
    vdomparam?: pulumi.Input<string>;
}

/**
 * The set of arguments for constructing a SystemSnmpUser resource.
 */
export interface SystemSnmpUserArgs {
    /**
     * Authentication protocol.
     */
    authProto?: pulumi.Input<string>;
    /**
     * Password for authentication protocol.
     */
    authPwd?: pulumi.Input<string>;
    /**
     * SNMP notifications (traps) to send.
     */
    events?: pulumi.Input<string>;
    /**
     * Enable/disable direct management of HA cluster members. Valid values: `enable`, `disable`.
     */
    haDirect?: pulumi.Input<string>;
    /**
     * SNMP user name.
     */
    name?: pulumi.Input<string>;
    /**
     * SNMP managers to send notifications (traps) to.
     */
    notifyHosts?: pulumi.Input<string>;
    /**
     * IPv6 SNMP managers to send notifications (traps) to.
     */
    notifyHosts6?: pulumi.Input<string>;
    /**
     * Privacy (encryption) protocol. Valid values: `aes`, `des`, `aes256`, `aes256cisco`.
     */
    privProto?: pulumi.Input<string>;
    /**
     * Password for privacy (encryption) protocol.
     */
    privPwd?: pulumi.Input<string>;
    /**
     * Enable/disable SNMP queries for this user. Valid values: `enable`, `disable`.
     */
    queries?: pulumi.Input<string>;
    /**
     * SNMPv3 query port (default = 161).
     */
    queryPort?: pulumi.Input<number>;
    /**
     * Security level for message authentication and encryption. Valid values: `no-auth-no-priv`, `auth-no-priv`, `auth-priv`.
     */
    securityLevel?: pulumi.Input<string>;
    /**
     * Source IP for SNMP trap.
     */
    sourceIp?: pulumi.Input<string>;
    /**
     * Source IPv6 for SNMP trap.
     */
    sourceIpv6?: pulumi.Input<string>;
    /**
     * Enable/disable this SNMP user. Valid values: `enable`, `disable`.
     */
    status?: pulumi.Input<string>;
    /**
     * SNMPv3 local trap port (default = 162).
     */
    trapLport?: pulumi.Input<number>;
    /**
     * SNMPv3 trap remote port (default = 162).
     */
    trapRport?: pulumi.Input<number>;
    /**
     * Enable/disable traps for this SNMP user. Valid values: `enable`, `disable`.
     */
    trapStatus?: pulumi.Input<string>;
    /**
     * Specifies the vdom to which the resource will be applied when the FortiGate unit is running in VDOM mode. Only one vdom can be specified. If you want to inherit the vdom configuration of the provider, please do not set this parameter.
     */
    vdomparam?: pulumi.Input<string>;
}
