// *** WARNING: this file was generated by the Pulumi Terraform Bridge (tfgen) Tool. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

import * as pulumi from "@pulumi/pulumi";
import * as utilities from "./utilities";

export class VpnCertificateOcspServer extends pulumi.CustomResource {
    /**
     * Get an existing VpnCertificateOcspServer resource's state with the given name, ID, and optional extra
     * properties used to qualify the lookup.
     *
     * @param name The _unique_ name of the resulting resource.
     * @param id The _unique_ provider ID of the resource to lookup.
     * @param state Any extra arguments used during the lookup.
     * @param opts Optional settings to control the behavior of the CustomResource.
     */
    public static get(name: string, id: pulumi.Input<pulumi.ID>, state?: VpnCertificateOcspServerState, opts?: pulumi.CustomResourceOptions): VpnCertificateOcspServer {
        return new VpnCertificateOcspServer(name, <any>state, { ...opts, id: id });
    }

    /** @internal */
    public static readonly __pulumiType = 'fortios:index/vpnCertificateOcspServer:VpnCertificateOcspServer';

    /**
     * Returns true if the given object is an instance of VpnCertificateOcspServer.  This is designed to work even
     * when multiple copies of the Pulumi SDK have been loaded into the same process.
     */
    public static isInstance(obj: any): obj is VpnCertificateOcspServer {
        if (obj === undefined || obj === null) {
            return false;
        }
        return obj['__pulumiType'] === VpnCertificateOcspServer.__pulumiType;
    }

    public readonly cert!: pulumi.Output<string>;
    public readonly name!: pulumi.Output<string>;
    public readonly secondaryCert!: pulumi.Output<string>;
    public readonly secondaryUrl!: pulumi.Output<string>;
    public readonly sourceIp!: pulumi.Output<string>;
    public readonly unavailAction!: pulumi.Output<string>;
    public readonly url!: pulumi.Output<string>;
    public readonly vdomparam!: pulumi.Output<string | undefined>;

    /**
     * Create a VpnCertificateOcspServer resource with the given unique name, arguments, and options.
     *
     * @param name The _unique_ name of the resource.
     * @param args The arguments to use to populate this resource's properties.
     * @param opts A bag of options that control this resource's behavior.
     */
    constructor(name: string, args?: VpnCertificateOcspServerArgs, opts?: pulumi.CustomResourceOptions)
    constructor(name: string, argsOrState?: VpnCertificateOcspServerArgs | VpnCertificateOcspServerState, opts?: pulumi.CustomResourceOptions) {
        let resourceInputs: pulumi.Inputs = {};
        opts = opts || {};
        if (opts.id) {
            const state = argsOrState as VpnCertificateOcspServerState | undefined;
            resourceInputs["cert"] = state ? state.cert : undefined;
            resourceInputs["name"] = state ? state.name : undefined;
            resourceInputs["secondaryCert"] = state ? state.secondaryCert : undefined;
            resourceInputs["secondaryUrl"] = state ? state.secondaryUrl : undefined;
            resourceInputs["sourceIp"] = state ? state.sourceIp : undefined;
            resourceInputs["unavailAction"] = state ? state.unavailAction : undefined;
            resourceInputs["url"] = state ? state.url : undefined;
            resourceInputs["vdomparam"] = state ? state.vdomparam : undefined;
        } else {
            const args = argsOrState as VpnCertificateOcspServerArgs | undefined;
            resourceInputs["cert"] = args ? args.cert : undefined;
            resourceInputs["name"] = args ? args.name : undefined;
            resourceInputs["secondaryCert"] = args ? args.secondaryCert : undefined;
            resourceInputs["secondaryUrl"] = args ? args.secondaryUrl : undefined;
            resourceInputs["sourceIp"] = args ? args.sourceIp : undefined;
            resourceInputs["unavailAction"] = args ? args.unavailAction : undefined;
            resourceInputs["url"] = args ? args.url : undefined;
            resourceInputs["vdomparam"] = args ? args.vdomparam : undefined;
        }
        opts = pulumi.mergeOptions(utilities.resourceOptsDefaults(), opts);
        super(VpnCertificateOcspServer.__pulumiType, name, resourceInputs, opts);
    }
}

/**
 * Input properties used for looking up and filtering VpnCertificateOcspServer resources.
 */
export interface VpnCertificateOcspServerState {
    cert?: pulumi.Input<string>;
    name?: pulumi.Input<string>;
    secondaryCert?: pulumi.Input<string>;
    secondaryUrl?: pulumi.Input<string>;
    sourceIp?: pulumi.Input<string>;
    unavailAction?: pulumi.Input<string>;
    url?: pulumi.Input<string>;
    vdomparam?: pulumi.Input<string>;
}

/**
 * The set of arguments for constructing a VpnCertificateOcspServer resource.
 */
export interface VpnCertificateOcspServerArgs {
    cert?: pulumi.Input<string>;
    name?: pulumi.Input<string>;
    secondaryCert?: pulumi.Input<string>;
    secondaryUrl?: pulumi.Input<string>;
    sourceIp?: pulumi.Input<string>;
    unavailAction?: pulumi.Input<string>;
    url?: pulumi.Input<string>;
    vdomparam?: pulumi.Input<string>;
}
