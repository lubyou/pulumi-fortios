// *** WARNING: this file was generated by the Pulumi Terraform Bridge (tfgen) Tool. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

import * as pulumi from "@pulumi/pulumi";
import * as utilities from "./utilities";

/**
 * Provides a resource to configure firewall policies of FortiOS.
 *
 * !> **Warning:** The resource will be deprecated and replaced by new resource `fortios.FirewallPolicy`, we recommend that you use the new resource.
 *
 * ## Example Usage
 * ### 1
 * ```typescript
 * import * as pulumi from "@pulumi/pulumi";
 * import * as fortios from "@pulumi/fortios";
 *
 * const test1 = new fortios.FirewallSecurityPolicy1("test1", {
 *     action: "accept",
 *     applicationList: "block-high-risk",
 *     avProfile: "wifi-default",
 *     capturePacket: "enable",
 *     comments: "security policy",
 *     devices: [
 *         "android-phone",
 *         "android-tablet",
 *     ],
 *     dnsfilterProfile: "default",
 *     dstaddrs: [
 *         "swscan.apple.com",
 *         "update.microsoft.com",
 *     ],
 *     dstintfs: ["port1"],
 *     groups: [
 *         "Guest-group",
 *         "SSO_Guest_Users",
 *     ],
 *     internetService: "disable",
 *     internetServiceIds: [],
 *     ippool: "enable",
 *     ipsSensor: "protect_client",
 *     logtraffic: "all",
 *     logtrafficStart: "enable",
 *     nat: "enable",
 *     poolnames: [
 *         "rewq",
 *         "rbb",
 *     ],
 *     schedule: "always",
 *     services: [
 *         "ALL_ICMP",
 *         "FTP",
 *     ],
 *     srcaddrs: [
 *         "swscan.apple.com",
 *         "google-play",
 *     ],
 *     srcintfs: ["port2"],
 *     sslSshProfile: "certificate-inspection",
 *     utmStatus: "enable",
 *     webfilterProfile: "monitor-all",
 * });
 * ```
 * ### 2
 * ```typescript
 * import * as pulumi from "@pulumi/pulumi";
 * import * as fortios from "@pulumi/fortios";
 *
 * const test2 = new fortios.FirewallSecurityPolicy1("test2", {
 *     action: "accept",
 *     applicationList: "block-high-risk",
 *     avProfile: "wifi-default",
 *     capturePacket: "enable",
 *     comments: "security policy",
 *     devices: [
 *         "android-phone",
 *         "android-tablet",
 *     ],
 *     dnsfilterProfile: "default",
 *     dstaddrs: [
 *         "swscan.apple.com",
 *         "update.microsoft.com",
 *     ],
 *     dstintfs: ["port1"],
 *     groups: [
 *         "Guest-group",
 *         "SSO_Guest_Users",
 *     ],
 *     internetService: "enable",
 *     internetServiceIds: [
 *         917520,
 *         6881402,
 *         393219,
 *     ],
 *     ippool: "enable",
 *     ipsSensor: "protect_client",
 *     logtraffic: "all",
 *     logtrafficStart: "enable",
 *     nat: "enable",
 *     poolnames: [
 *         "rewq",
 *         "rbb",
 *     ],
 *     schedule: "always",
 *     services: [],
 *     srcaddrs: [
 *         "swscan.apple.com",
 *         "google-play",
 *     ],
 *     srcintfs: ["port2"],
 *     sslSshProfile: "certificate-inspection",
 *     utmStatus: "enable",
 *     webfilterProfile: "monitor-all",
 * });
 * ```
 * ### 3
 * ```typescript
 * import * as pulumi from "@pulumi/pulumi";
 * import * as fortios from "@pulumi/fortios";
 *
 * const test1 = new fortios.FirewallSecurityPolicy1("test1", {
 *     action: "accept",
 *     applicationList: "block-high-risk",
 *     avProfile: "wifi-default",
 *     capturePacket: "enable",
 *     comments: "security policy",
 *     devices: [],
 *     dnsfilterProfile: "default",
 *     dstaddrs: [],
 *     dstintfs: ["port4"],
 *     groups: [
 *         "Guest-group",
 *         "SSO_Guest_Users",
 *     ],
 *     internetService: "enable",
 *     internetServiceIds: [5242880],
 *     internetServiceSrc: "enable",
 *     internetServiceSrcIds: [65643],
 *     ippool: "disable",
 *     ipsSensor: "protect_client",
 *     logtraffic: "all",
 *     logtrafficStart: "enable",
 *     nat: "enable",
 *     poolnames: [],
 *     profileProtocolOptions: "default",
 *     schedule: "always",
 *     services: [],
 *     srcaddrs: [],
 *     srcintfs: ["port3"],
 *     sslSshProfile: "certificate-inspection",
 *     status: "enable",
 *     users: ["guest"],
 *     utmStatus: "enable",
 *     webfilterProfile: "monitor-all",
 * });
 * ```
 */
export class FirewallSecurityPolicy1 extends pulumi.CustomResource {
    /**
     * Get an existing FirewallSecurityPolicy1 resource's state with the given name, ID, and optional extra
     * properties used to qualify the lookup.
     *
     * @param name The _unique_ name of the resulting resource.
     * @param id The _unique_ provider ID of the resource to lookup.
     * @param state Any extra arguments used during the lookup.
     * @param opts Optional settings to control the behavior of the CustomResource.
     */
    public static get(name: string, id: pulumi.Input<pulumi.ID>, state?: FirewallSecurityPolicy1State, opts?: pulumi.CustomResourceOptions): FirewallSecurityPolicy1 {
        return new FirewallSecurityPolicy1(name, <any>state, { ...opts, id: id });
    }

    /** @internal */
    public static readonly __pulumiType = 'fortios:index/firewallSecurityPolicy1:FirewallSecurityPolicy1';

    /**
     * Returns true if the given object is an instance of FirewallSecurityPolicy1.  This is designed to work even
     * when multiple copies of the Pulumi SDK have been loaded into the same process.
     */
    public static isInstance(obj: any): obj is FirewallSecurityPolicy1 {
        if (obj === undefined || obj === null) {
            return false;
        }
        return obj['__pulumiType'] === FirewallSecurityPolicy1.__pulumiType;
    }

    /**
     * Policy action.
     */
    public readonly action!: pulumi.Output<string>;
    /**
     * Name of an existing Application list.
     */
    public readonly applicationList!: pulumi.Output<string>;
    /**
     * Name of an existing Antivirus profile.
     */
    public readonly avProfile!: pulumi.Output<string>;
    /**
     * Enable/disable capture packets.
     */
    public readonly capturePacket!: pulumi.Output<string>;
    /**
     * Comment.
     */
    public readonly comments!: pulumi.Output<string | undefined>;
    /**
     * Device type category.
     */
    public readonly devices!: pulumi.Output<string[] | undefined>;
    /**
     * Name of an existing DNS filter profile.
     */
    public readonly dnsfilterProfile!: pulumi.Output<string>;
    /**
     * Destination address and address group names.
     */
    public readonly dstaddrs!: pulumi.Output<string[]>;
    /**
     * Outgoing (egress) interface.
     */
    public readonly dstintfs!: pulumi.Output<string[]>;
    /**
     * Names of user groups that can authenticate with this policy.
     */
    public readonly groups!: pulumi.Output<string[] | undefined>;
    /**
     * Enable/disable use of Internet Services for this policy. If enabled, destination address and service are not used.
     */
    public readonly internetService!: pulumi.Output<string>;
    /**
     * Internet Service ID.
     */
    public readonly internetServiceIds!: pulumi.Output<number[] | undefined>;
    /**
     * Enable/disable use of Internet Services in source for this policy. If enabled, source address is not used.
     */
    public readonly internetServiceSrc!: pulumi.Output<string>;
    /**
     * Internet Service source ID.
     */
    public readonly internetServiceSrcIds!: pulumi.Output<number[] | undefined>;
    /**
     * Enable to use IP Pools for source NAT.
     */
    public readonly ippool!: pulumi.Output<string>;
    /**
     * Name of an existing IPS sensor.
     */
    public readonly ipsSensor!: pulumi.Output<string>;
    /**
     * Enable or disable logging. Log all sessions or security profile sessions.
     */
    public readonly logtraffic!: pulumi.Output<string>;
    /**
     * Record logs when a session starts and ends.
     */
    public readonly logtrafficStart!: pulumi.Output<string>;
    /**
     * Policy name.
     */
    public readonly name!: pulumi.Output<string>;
    /**
     * Enable/disable source NAT.
     */
    public readonly nat!: pulumi.Output<string>;
    /**
     * IP Pool names.
     */
    public readonly poolnames!: pulumi.Output<string[] | undefined>;
    /**
     * Name of an existing Protocol options profile.
     */
    public readonly profileProtocolOptions!: pulumi.Output<string>;
    /**
     * Schedule name.
     */
    public readonly schedule!: pulumi.Output<string>;
    /**
     * Service and service group names..
     */
    public readonly services!: pulumi.Output<string[]>;
    /**
     * Source address and address group names.
     */
    public readonly srcaddrs!: pulumi.Output<string[]>;
    /**
     * Incoming (ingress) interface.
     */
    public readonly srcintfs!: pulumi.Output<string[]>;
    /**
     * Name of an existing SSL SSH profile.
     */
    public readonly sslSshProfile!: pulumi.Output<string>;
    /**
     * Enable or disable this policy.
     */
    public readonly status!: pulumi.Output<string>;
    /**
     * Names of individual users that can authenticate with this policy.
     */
    public readonly users!: pulumi.Output<string[] | undefined>;
    /**
     * Enable to add one or more security profiles (AV, IPS, etc.) to the firewall policy.
     */
    public readonly utmStatus!: pulumi.Output<string>;
    /**
     * Name of an existing Web filter profile.
     */
    public readonly webfilterProfile!: pulumi.Output<string>;

    /**
     * Create a FirewallSecurityPolicy1 resource with the given unique name, arguments, and options.
     *
     * @param name The _unique_ name of the resource.
     * @param args The arguments to use to populate this resource's properties.
     * @param opts A bag of options that control this resource's behavior.
     */
    constructor(name: string, args: FirewallSecurityPolicy1Args, opts?: pulumi.CustomResourceOptions)
    constructor(name: string, argsOrState?: FirewallSecurityPolicy1Args | FirewallSecurityPolicy1State, opts?: pulumi.CustomResourceOptions) {
        let inputs: pulumi.Inputs = {};
        opts = opts || {};
        if (opts.id) {
            const state = argsOrState as FirewallSecurityPolicy1State | undefined;
            inputs["action"] = state ? state.action : undefined;
            inputs["applicationList"] = state ? state.applicationList : undefined;
            inputs["avProfile"] = state ? state.avProfile : undefined;
            inputs["capturePacket"] = state ? state.capturePacket : undefined;
            inputs["comments"] = state ? state.comments : undefined;
            inputs["devices"] = state ? state.devices : undefined;
            inputs["dnsfilterProfile"] = state ? state.dnsfilterProfile : undefined;
            inputs["dstaddrs"] = state ? state.dstaddrs : undefined;
            inputs["dstintfs"] = state ? state.dstintfs : undefined;
            inputs["groups"] = state ? state.groups : undefined;
            inputs["internetService"] = state ? state.internetService : undefined;
            inputs["internetServiceIds"] = state ? state.internetServiceIds : undefined;
            inputs["internetServiceSrc"] = state ? state.internetServiceSrc : undefined;
            inputs["internetServiceSrcIds"] = state ? state.internetServiceSrcIds : undefined;
            inputs["ippool"] = state ? state.ippool : undefined;
            inputs["ipsSensor"] = state ? state.ipsSensor : undefined;
            inputs["logtraffic"] = state ? state.logtraffic : undefined;
            inputs["logtrafficStart"] = state ? state.logtrafficStart : undefined;
            inputs["name"] = state ? state.name : undefined;
            inputs["nat"] = state ? state.nat : undefined;
            inputs["poolnames"] = state ? state.poolnames : undefined;
            inputs["profileProtocolOptions"] = state ? state.profileProtocolOptions : undefined;
            inputs["schedule"] = state ? state.schedule : undefined;
            inputs["services"] = state ? state.services : undefined;
            inputs["srcaddrs"] = state ? state.srcaddrs : undefined;
            inputs["srcintfs"] = state ? state.srcintfs : undefined;
            inputs["sslSshProfile"] = state ? state.sslSshProfile : undefined;
            inputs["status"] = state ? state.status : undefined;
            inputs["users"] = state ? state.users : undefined;
            inputs["utmStatus"] = state ? state.utmStatus : undefined;
            inputs["webfilterProfile"] = state ? state.webfilterProfile : undefined;
        } else {
            const args = argsOrState as FirewallSecurityPolicy1Args | undefined;
            if ((!args || args.action === undefined) && !opts.urn) {
                throw new Error("Missing required property 'action'");
            }
            if ((!args || args.dstaddrs === undefined) && !opts.urn) {
                throw new Error("Missing required property 'dstaddrs'");
            }
            if ((!args || args.dstintfs === undefined) && !opts.urn) {
                throw new Error("Missing required property 'dstintfs'");
            }
            if ((!args || args.schedule === undefined) && !opts.urn) {
                throw new Error("Missing required property 'schedule'");
            }
            if ((!args || args.services === undefined) && !opts.urn) {
                throw new Error("Missing required property 'services'");
            }
            if ((!args || args.srcaddrs === undefined) && !opts.urn) {
                throw new Error("Missing required property 'srcaddrs'");
            }
            if ((!args || args.srcintfs === undefined) && !opts.urn) {
                throw new Error("Missing required property 'srcintfs'");
            }
            inputs["action"] = args ? args.action : undefined;
            inputs["applicationList"] = args ? args.applicationList : undefined;
            inputs["avProfile"] = args ? args.avProfile : undefined;
            inputs["capturePacket"] = args ? args.capturePacket : undefined;
            inputs["comments"] = args ? args.comments : undefined;
            inputs["devices"] = args ? args.devices : undefined;
            inputs["dnsfilterProfile"] = args ? args.dnsfilterProfile : undefined;
            inputs["dstaddrs"] = args ? args.dstaddrs : undefined;
            inputs["dstintfs"] = args ? args.dstintfs : undefined;
            inputs["groups"] = args ? args.groups : undefined;
            inputs["internetService"] = args ? args.internetService : undefined;
            inputs["internetServiceIds"] = args ? args.internetServiceIds : undefined;
            inputs["internetServiceSrc"] = args ? args.internetServiceSrc : undefined;
            inputs["internetServiceSrcIds"] = args ? args.internetServiceSrcIds : undefined;
            inputs["ippool"] = args ? args.ippool : undefined;
            inputs["ipsSensor"] = args ? args.ipsSensor : undefined;
            inputs["logtraffic"] = args ? args.logtraffic : undefined;
            inputs["logtrafficStart"] = args ? args.logtrafficStart : undefined;
            inputs["name"] = args ? args.name : undefined;
            inputs["nat"] = args ? args.nat : undefined;
            inputs["poolnames"] = args ? args.poolnames : undefined;
            inputs["profileProtocolOptions"] = args ? args.profileProtocolOptions : undefined;
            inputs["schedule"] = args ? args.schedule : undefined;
            inputs["services"] = args ? args.services : undefined;
            inputs["srcaddrs"] = args ? args.srcaddrs : undefined;
            inputs["srcintfs"] = args ? args.srcintfs : undefined;
            inputs["sslSshProfile"] = args ? args.sslSshProfile : undefined;
            inputs["status"] = args ? args.status : undefined;
            inputs["users"] = args ? args.users : undefined;
            inputs["utmStatus"] = args ? args.utmStatus : undefined;
            inputs["webfilterProfile"] = args ? args.webfilterProfile : undefined;
        }
        if (!opts.version) {
            opts = pulumi.mergeOptions(opts, { version: utilities.getVersion()});
        }
        super(FirewallSecurityPolicy1.__pulumiType, name, inputs, opts);
    }
}

/**
 * Input properties used for looking up and filtering FirewallSecurityPolicy1 resources.
 */
export interface FirewallSecurityPolicy1State {
    /**
     * Policy action.
     */
    action?: pulumi.Input<string>;
    /**
     * Name of an existing Application list.
     */
    applicationList?: pulumi.Input<string>;
    /**
     * Name of an existing Antivirus profile.
     */
    avProfile?: pulumi.Input<string>;
    /**
     * Enable/disable capture packets.
     */
    capturePacket?: pulumi.Input<string>;
    /**
     * Comment.
     */
    comments?: pulumi.Input<string>;
    /**
     * Device type category.
     */
    devices?: pulumi.Input<pulumi.Input<string>[]>;
    /**
     * Name of an existing DNS filter profile.
     */
    dnsfilterProfile?: pulumi.Input<string>;
    /**
     * Destination address and address group names.
     */
    dstaddrs?: pulumi.Input<pulumi.Input<string>[]>;
    /**
     * Outgoing (egress) interface.
     */
    dstintfs?: pulumi.Input<pulumi.Input<string>[]>;
    /**
     * Names of user groups that can authenticate with this policy.
     */
    groups?: pulumi.Input<pulumi.Input<string>[]>;
    /**
     * Enable/disable use of Internet Services for this policy. If enabled, destination address and service are not used.
     */
    internetService?: pulumi.Input<string>;
    /**
     * Internet Service ID.
     */
    internetServiceIds?: pulumi.Input<pulumi.Input<number>[]>;
    /**
     * Enable/disable use of Internet Services in source for this policy. If enabled, source address is not used.
     */
    internetServiceSrc?: pulumi.Input<string>;
    /**
     * Internet Service source ID.
     */
    internetServiceSrcIds?: pulumi.Input<pulumi.Input<number>[]>;
    /**
     * Enable to use IP Pools for source NAT.
     */
    ippool?: pulumi.Input<string>;
    /**
     * Name of an existing IPS sensor.
     */
    ipsSensor?: pulumi.Input<string>;
    /**
     * Enable or disable logging. Log all sessions or security profile sessions.
     */
    logtraffic?: pulumi.Input<string>;
    /**
     * Record logs when a session starts and ends.
     */
    logtrafficStart?: pulumi.Input<string>;
    /**
     * Policy name.
     */
    name?: pulumi.Input<string>;
    /**
     * Enable/disable source NAT.
     */
    nat?: pulumi.Input<string>;
    /**
     * IP Pool names.
     */
    poolnames?: pulumi.Input<pulumi.Input<string>[]>;
    /**
     * Name of an existing Protocol options profile.
     */
    profileProtocolOptions?: pulumi.Input<string>;
    /**
     * Schedule name.
     */
    schedule?: pulumi.Input<string>;
    /**
     * Service and service group names..
     */
    services?: pulumi.Input<pulumi.Input<string>[]>;
    /**
     * Source address and address group names.
     */
    srcaddrs?: pulumi.Input<pulumi.Input<string>[]>;
    /**
     * Incoming (ingress) interface.
     */
    srcintfs?: pulumi.Input<pulumi.Input<string>[]>;
    /**
     * Name of an existing SSL SSH profile.
     */
    sslSshProfile?: pulumi.Input<string>;
    /**
     * Enable or disable this policy.
     */
    status?: pulumi.Input<string>;
    /**
     * Names of individual users that can authenticate with this policy.
     */
    users?: pulumi.Input<pulumi.Input<string>[]>;
    /**
     * Enable to add one or more security profiles (AV, IPS, etc.) to the firewall policy.
     */
    utmStatus?: pulumi.Input<string>;
    /**
     * Name of an existing Web filter profile.
     */
    webfilterProfile?: pulumi.Input<string>;
}

/**
 * The set of arguments for constructing a FirewallSecurityPolicy1 resource.
 */
export interface FirewallSecurityPolicy1Args {
    /**
     * Policy action.
     */
    action: pulumi.Input<string>;
    /**
     * Name of an existing Application list.
     */
    applicationList?: pulumi.Input<string>;
    /**
     * Name of an existing Antivirus profile.
     */
    avProfile?: pulumi.Input<string>;
    /**
     * Enable/disable capture packets.
     */
    capturePacket?: pulumi.Input<string>;
    /**
     * Comment.
     */
    comments?: pulumi.Input<string>;
    /**
     * Device type category.
     */
    devices?: pulumi.Input<pulumi.Input<string>[]>;
    /**
     * Name of an existing DNS filter profile.
     */
    dnsfilterProfile?: pulumi.Input<string>;
    /**
     * Destination address and address group names.
     */
    dstaddrs: pulumi.Input<pulumi.Input<string>[]>;
    /**
     * Outgoing (egress) interface.
     */
    dstintfs: pulumi.Input<pulumi.Input<string>[]>;
    /**
     * Names of user groups that can authenticate with this policy.
     */
    groups?: pulumi.Input<pulumi.Input<string>[]>;
    /**
     * Enable/disable use of Internet Services for this policy. If enabled, destination address and service are not used.
     */
    internetService?: pulumi.Input<string>;
    /**
     * Internet Service ID.
     */
    internetServiceIds?: pulumi.Input<pulumi.Input<number>[]>;
    /**
     * Enable/disable use of Internet Services in source for this policy. If enabled, source address is not used.
     */
    internetServiceSrc?: pulumi.Input<string>;
    /**
     * Internet Service source ID.
     */
    internetServiceSrcIds?: pulumi.Input<pulumi.Input<number>[]>;
    /**
     * Enable to use IP Pools for source NAT.
     */
    ippool?: pulumi.Input<string>;
    /**
     * Name of an existing IPS sensor.
     */
    ipsSensor?: pulumi.Input<string>;
    /**
     * Enable or disable logging. Log all sessions or security profile sessions.
     */
    logtraffic?: pulumi.Input<string>;
    /**
     * Record logs when a session starts and ends.
     */
    logtrafficStart?: pulumi.Input<string>;
    /**
     * Policy name.
     */
    name?: pulumi.Input<string>;
    /**
     * Enable/disable source NAT.
     */
    nat?: pulumi.Input<string>;
    /**
     * IP Pool names.
     */
    poolnames?: pulumi.Input<pulumi.Input<string>[]>;
    /**
     * Name of an existing Protocol options profile.
     */
    profileProtocolOptions?: pulumi.Input<string>;
    /**
     * Schedule name.
     */
    schedule: pulumi.Input<string>;
    /**
     * Service and service group names..
     */
    services: pulumi.Input<pulumi.Input<string>[]>;
    /**
     * Source address and address group names.
     */
    srcaddrs: pulumi.Input<pulumi.Input<string>[]>;
    /**
     * Incoming (ingress) interface.
     */
    srcintfs: pulumi.Input<pulumi.Input<string>[]>;
    /**
     * Name of an existing SSL SSH profile.
     */
    sslSshProfile?: pulumi.Input<string>;
    /**
     * Enable or disable this policy.
     */
    status?: pulumi.Input<string>;
    /**
     * Names of individual users that can authenticate with this policy.
     */
    users?: pulumi.Input<pulumi.Input<string>[]>;
    /**
     * Enable to add one or more security profiles (AV, IPS, etc.) to the firewall policy.
     */
    utmStatus?: pulumi.Input<string>;
    /**
     * Name of an existing Web filter profile.
     */
    webfilterProfile?: pulumi.Input<string>;
}
