// *** WARNING: this file was generated by the Pulumi Terraform Bridge (tfgen) Tool. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

import * as pulumi from "@pulumi/pulumi";
import { input as inputs, output as outputs } from "./types";
import * as utilities from "./utilities";

/**
 * Configure IPv4 interface policies.
 *
 * ## Example Usage
 *
 * ```typescript
 * import * as pulumi from "@pulumi/pulumi";
 * import * as fortios from "@pulumi/fortios";
 *
 * const trname = new fortios.FirewallInterfacePolicy("trname", {
 *     addressType: "ipv4",
 *     applicationListStatus: "disable",
 *     avProfileStatus: "disable",
 *     dlpSensorStatus: "disable",
 *     dsri: "disable",
 *     dstaddrs: [{
 *         name: "all",
 *     }],
 *     interface: "port4",
 *     ipsSensorStatus: "disable",
 *     logtraffic: "all",
 *     policyid: 1,
 *     scanBotnetConnections: "block",
 *     services: [{
 *         name: "ALL",
 *     }],
 *     spamfilterProfileStatus: "disable",
 *     srcaddrs: [{
 *         name: "all",
 *     }],
 *     status: "enable",
 *     webfilterProfileStatus: "disable",
 * });
 * ```
 *
 * ## Import
 *
 * Firewall InterfacePolicy can be imported using any of these accepted formats$ export "FORTIOS_IMPORT_TABLE"="true"
 *
 * ```sh
 *  $ pulumi import fortios:index/firewallInterfacePolicy:FirewallInterfacePolicy labelname {{policyid}}
 * ```
 *
 *  $ unset "FORTIOS_IMPORT_TABLE"
 */
export class FirewallInterfacePolicy extends pulumi.CustomResource {
    /**
     * Get an existing FirewallInterfacePolicy resource's state with the given name, ID, and optional extra
     * properties used to qualify the lookup.
     *
     * @param name The _unique_ name of the resulting resource.
     * @param id The _unique_ provider ID of the resource to lookup.
     * @param state Any extra arguments used during the lookup.
     * @param opts Optional settings to control the behavior of the CustomResource.
     */
    public static get(name: string, id: pulumi.Input<pulumi.ID>, state?: FirewallInterfacePolicyState, opts?: pulumi.CustomResourceOptions): FirewallInterfacePolicy {
        return new FirewallInterfacePolicy(name, <any>state, { ...opts, id: id });
    }

    /** @internal */
    public static readonly __pulumiType = 'fortios:index/firewallInterfacePolicy:FirewallInterfacePolicy';

    /**
     * Returns true if the given object is an instance of FirewallInterfacePolicy.  This is designed to work even
     * when multiple copies of the Pulumi SDK have been loaded into the same process.
     */
    public static isInstance(obj: any): obj is FirewallInterfacePolicy {
        if (obj === undefined || obj === null) {
            return false;
        }
        return obj['__pulumiType'] === FirewallInterfacePolicy.__pulumiType;
    }

    /**
     * Policy address type (IPv4 or IPv6). Valid values: `ipv4`, `ipv6`.
     */
    public readonly addressType!: pulumi.Output<string>;
    /**
     * Application list name.
     */
    public readonly applicationList!: pulumi.Output<string>;
    /**
     * Enable/disable application control. Valid values: `enable`, `disable`.
     */
    public readonly applicationListStatus!: pulumi.Output<string>;
    /**
     * Antivirus profile.
     */
    public readonly avProfile!: pulumi.Output<string>;
    /**
     * Enable/disable antivirus. Valid values: `enable`, `disable`.
     */
    public readonly avProfileStatus!: pulumi.Output<string>;
    /**
     * Comments.
     */
    public readonly comments!: pulumi.Output<string | undefined>;
    /**
     * DLP sensor name.
     */
    public readonly dlpSensor!: pulumi.Output<string>;
    /**
     * Enable/disable DLP. Valid values: `enable`, `disable`.
     */
    public readonly dlpSensorStatus!: pulumi.Output<string>;
    /**
     * Enable/disable DSRI. Valid values: `enable`, `disable`.
     */
    public readonly dsri!: pulumi.Output<string>;
    /**
     * Address object to limit traffic monitoring to network traffic sent to the specified address or range. The structure of `dstaddr` block is documented below.
     */
    public readonly dstaddrs!: pulumi.Output<outputs.FirewallInterfacePolicyDstaddr[]>;
    /**
     * true or false, set this parameter to true when using dynamic forEach + toset to configure and sort sub-tables, please do not set this parameter when configuring static sub-tables.
     */
    public readonly dynamicSortSubtable!: pulumi.Output<string | undefined>;
    /**
     * Email filter profile.
     */
    public readonly emailfilterProfile!: pulumi.Output<string>;
    /**
     * Enable/disable email filter. Valid values: `enable`, `disable`.
     */
    public readonly emailfilterProfileStatus!: pulumi.Output<string>;
    /**
     * Monitored interface name from available interfaces.
     */
    public readonly interface!: pulumi.Output<string>;
    /**
     * IPS sensor name.
     */
    public readonly ipsSensor!: pulumi.Output<string>;
    /**
     * Enable/disable IPS. Valid values: `enable`, `disable`.
     */
    public readonly ipsSensorStatus!: pulumi.Output<string>;
    /**
     * Label.
     */
    public readonly label!: pulumi.Output<string>;
    /**
     * Logging type to be used in this policy (Options: all | utm | disable, Default: utm). Valid values: `all`, `utm`, `disable`.
     */
    public readonly logtraffic!: pulumi.Output<string>;
    /**
     * Policy ID.
     */
    public readonly policyid!: pulumi.Output<number>;
    /**
     * Enable/disable scanning for connections to Botnet servers. Valid values: `disable`, `block`, `monitor`.
     */
    public readonly scanBotnetConnections!: pulumi.Output<string>;
    /**
     * Service object from available options. The structure of `service` block is documented below.
     */
    public readonly services!: pulumi.Output<outputs.FirewallInterfacePolicyService[]>;
    /**
     * Antispam profile.
     */
    public readonly spamfilterProfile!: pulumi.Output<string>;
    /**
     * Enable/disable antispam. Valid values: `enable`, `disable`.
     */
    public readonly spamfilterProfileStatus!: pulumi.Output<string>;
    /**
     * Address object to limit traffic monitoring to network traffic sent from the specified address or range. The structure of `srcaddr` block is documented below.
     */
    public readonly srcaddrs!: pulumi.Output<outputs.FirewallInterfacePolicySrcaddr[]>;
    /**
     * Enable/disable this policy. Valid values: `enable`, `disable`.
     */
    public readonly status!: pulumi.Output<string>;
    /**
     * Specifies the vdom to which the resource will be applied when the FortiGate unit is running in VDOM mode. Only one vdom can be specified. If you want to inherit the vdom configuration of the provider, please do not set this parameter.
     */
    public readonly vdomparam!: pulumi.Output<string | undefined>;
    /**
     * Web filter profile.
     */
    public readonly webfilterProfile!: pulumi.Output<string>;
    /**
     * Enable/disable web filtering. Valid values: `enable`, `disable`.
     */
    public readonly webfilterProfileStatus!: pulumi.Output<string>;

    /**
     * Create a FirewallInterfacePolicy resource with the given unique name, arguments, and options.
     *
     * @param name The _unique_ name of the resource.
     * @param args The arguments to use to populate this resource's properties.
     * @param opts A bag of options that control this resource's behavior.
     */
    constructor(name: string, args: FirewallInterfacePolicyArgs, opts?: pulumi.CustomResourceOptions)
    constructor(name: string, argsOrState?: FirewallInterfacePolicyArgs | FirewallInterfacePolicyState, opts?: pulumi.CustomResourceOptions) {
        let inputs: pulumi.Inputs = {};
        opts = opts || {};
        if (opts.id) {
            const state = argsOrState as FirewallInterfacePolicyState | undefined;
            inputs["addressType"] = state ? state.addressType : undefined;
            inputs["applicationList"] = state ? state.applicationList : undefined;
            inputs["applicationListStatus"] = state ? state.applicationListStatus : undefined;
            inputs["avProfile"] = state ? state.avProfile : undefined;
            inputs["avProfileStatus"] = state ? state.avProfileStatus : undefined;
            inputs["comments"] = state ? state.comments : undefined;
            inputs["dlpSensor"] = state ? state.dlpSensor : undefined;
            inputs["dlpSensorStatus"] = state ? state.dlpSensorStatus : undefined;
            inputs["dsri"] = state ? state.dsri : undefined;
            inputs["dstaddrs"] = state ? state.dstaddrs : undefined;
            inputs["dynamicSortSubtable"] = state ? state.dynamicSortSubtable : undefined;
            inputs["emailfilterProfile"] = state ? state.emailfilterProfile : undefined;
            inputs["emailfilterProfileStatus"] = state ? state.emailfilterProfileStatus : undefined;
            inputs["interface"] = state ? state.interface : undefined;
            inputs["ipsSensor"] = state ? state.ipsSensor : undefined;
            inputs["ipsSensorStatus"] = state ? state.ipsSensorStatus : undefined;
            inputs["label"] = state ? state.label : undefined;
            inputs["logtraffic"] = state ? state.logtraffic : undefined;
            inputs["policyid"] = state ? state.policyid : undefined;
            inputs["scanBotnetConnections"] = state ? state.scanBotnetConnections : undefined;
            inputs["services"] = state ? state.services : undefined;
            inputs["spamfilterProfile"] = state ? state.spamfilterProfile : undefined;
            inputs["spamfilterProfileStatus"] = state ? state.spamfilterProfileStatus : undefined;
            inputs["srcaddrs"] = state ? state.srcaddrs : undefined;
            inputs["status"] = state ? state.status : undefined;
            inputs["vdomparam"] = state ? state.vdomparam : undefined;
            inputs["webfilterProfile"] = state ? state.webfilterProfile : undefined;
            inputs["webfilterProfileStatus"] = state ? state.webfilterProfileStatus : undefined;
        } else {
            const args = argsOrState as FirewallInterfacePolicyArgs | undefined;
            if ((!args || args.dstaddrs === undefined) && !opts.urn) {
                throw new Error("Missing required property 'dstaddrs'");
            }
            if ((!args || args.interface === undefined) && !opts.urn) {
                throw new Error("Missing required property 'interface'");
            }
            if ((!args || args.services === undefined) && !opts.urn) {
                throw new Error("Missing required property 'services'");
            }
            if ((!args || args.srcaddrs === undefined) && !opts.urn) {
                throw new Error("Missing required property 'srcaddrs'");
            }
            inputs["addressType"] = args ? args.addressType : undefined;
            inputs["applicationList"] = args ? args.applicationList : undefined;
            inputs["applicationListStatus"] = args ? args.applicationListStatus : undefined;
            inputs["avProfile"] = args ? args.avProfile : undefined;
            inputs["avProfileStatus"] = args ? args.avProfileStatus : undefined;
            inputs["comments"] = args ? args.comments : undefined;
            inputs["dlpSensor"] = args ? args.dlpSensor : undefined;
            inputs["dlpSensorStatus"] = args ? args.dlpSensorStatus : undefined;
            inputs["dsri"] = args ? args.dsri : undefined;
            inputs["dstaddrs"] = args ? args.dstaddrs : undefined;
            inputs["dynamicSortSubtable"] = args ? args.dynamicSortSubtable : undefined;
            inputs["emailfilterProfile"] = args ? args.emailfilterProfile : undefined;
            inputs["emailfilterProfileStatus"] = args ? args.emailfilterProfileStatus : undefined;
            inputs["interface"] = args ? args.interface : undefined;
            inputs["ipsSensor"] = args ? args.ipsSensor : undefined;
            inputs["ipsSensorStatus"] = args ? args.ipsSensorStatus : undefined;
            inputs["label"] = args ? args.label : undefined;
            inputs["logtraffic"] = args ? args.logtraffic : undefined;
            inputs["policyid"] = args ? args.policyid : undefined;
            inputs["scanBotnetConnections"] = args ? args.scanBotnetConnections : undefined;
            inputs["services"] = args ? args.services : undefined;
            inputs["spamfilterProfile"] = args ? args.spamfilterProfile : undefined;
            inputs["spamfilterProfileStatus"] = args ? args.spamfilterProfileStatus : undefined;
            inputs["srcaddrs"] = args ? args.srcaddrs : undefined;
            inputs["status"] = args ? args.status : undefined;
            inputs["vdomparam"] = args ? args.vdomparam : undefined;
            inputs["webfilterProfile"] = args ? args.webfilterProfile : undefined;
            inputs["webfilterProfileStatus"] = args ? args.webfilterProfileStatus : undefined;
        }
        if (!opts.version) {
            opts = pulumi.mergeOptions(opts, { version: utilities.getVersion()});
        }
        super(FirewallInterfacePolicy.__pulumiType, name, inputs, opts);
    }
}

/**
 * Input properties used for looking up and filtering FirewallInterfacePolicy resources.
 */
export interface FirewallInterfacePolicyState {
    /**
     * Policy address type (IPv4 or IPv6). Valid values: `ipv4`, `ipv6`.
     */
    addressType?: pulumi.Input<string>;
    /**
     * Application list name.
     */
    applicationList?: pulumi.Input<string>;
    /**
     * Enable/disable application control. Valid values: `enable`, `disable`.
     */
    applicationListStatus?: pulumi.Input<string>;
    /**
     * Antivirus profile.
     */
    avProfile?: pulumi.Input<string>;
    /**
     * Enable/disable antivirus. Valid values: `enable`, `disable`.
     */
    avProfileStatus?: pulumi.Input<string>;
    /**
     * Comments.
     */
    comments?: pulumi.Input<string>;
    /**
     * DLP sensor name.
     */
    dlpSensor?: pulumi.Input<string>;
    /**
     * Enable/disable DLP. Valid values: `enable`, `disable`.
     */
    dlpSensorStatus?: pulumi.Input<string>;
    /**
     * Enable/disable DSRI. Valid values: `enable`, `disable`.
     */
    dsri?: pulumi.Input<string>;
    /**
     * Address object to limit traffic monitoring to network traffic sent to the specified address or range. The structure of `dstaddr` block is documented below.
     */
    dstaddrs?: pulumi.Input<pulumi.Input<inputs.FirewallInterfacePolicyDstaddr>[]>;
    /**
     * true or false, set this parameter to true when using dynamic forEach + toset to configure and sort sub-tables, please do not set this parameter when configuring static sub-tables.
     */
    dynamicSortSubtable?: pulumi.Input<string>;
    /**
     * Email filter profile.
     */
    emailfilterProfile?: pulumi.Input<string>;
    /**
     * Enable/disable email filter. Valid values: `enable`, `disable`.
     */
    emailfilterProfileStatus?: pulumi.Input<string>;
    /**
     * Monitored interface name from available interfaces.
     */
    interface?: pulumi.Input<string>;
    /**
     * IPS sensor name.
     */
    ipsSensor?: pulumi.Input<string>;
    /**
     * Enable/disable IPS. Valid values: `enable`, `disable`.
     */
    ipsSensorStatus?: pulumi.Input<string>;
    /**
     * Label.
     */
    label?: pulumi.Input<string>;
    /**
     * Logging type to be used in this policy (Options: all | utm | disable, Default: utm). Valid values: `all`, `utm`, `disable`.
     */
    logtraffic?: pulumi.Input<string>;
    /**
     * Policy ID.
     */
    policyid?: pulumi.Input<number>;
    /**
     * Enable/disable scanning for connections to Botnet servers. Valid values: `disable`, `block`, `monitor`.
     */
    scanBotnetConnections?: pulumi.Input<string>;
    /**
     * Service object from available options. The structure of `service` block is documented below.
     */
    services?: pulumi.Input<pulumi.Input<inputs.FirewallInterfacePolicyService>[]>;
    /**
     * Antispam profile.
     */
    spamfilterProfile?: pulumi.Input<string>;
    /**
     * Enable/disable antispam. Valid values: `enable`, `disable`.
     */
    spamfilterProfileStatus?: pulumi.Input<string>;
    /**
     * Address object to limit traffic monitoring to network traffic sent from the specified address or range. The structure of `srcaddr` block is documented below.
     */
    srcaddrs?: pulumi.Input<pulumi.Input<inputs.FirewallInterfacePolicySrcaddr>[]>;
    /**
     * Enable/disable this policy. Valid values: `enable`, `disable`.
     */
    status?: pulumi.Input<string>;
    /**
     * Specifies the vdom to which the resource will be applied when the FortiGate unit is running in VDOM mode. Only one vdom can be specified. If you want to inherit the vdom configuration of the provider, please do not set this parameter.
     */
    vdomparam?: pulumi.Input<string>;
    /**
     * Web filter profile.
     */
    webfilterProfile?: pulumi.Input<string>;
    /**
     * Enable/disable web filtering. Valid values: `enable`, `disable`.
     */
    webfilterProfileStatus?: pulumi.Input<string>;
}

/**
 * The set of arguments for constructing a FirewallInterfacePolicy resource.
 */
export interface FirewallInterfacePolicyArgs {
    /**
     * Policy address type (IPv4 or IPv6). Valid values: `ipv4`, `ipv6`.
     */
    addressType?: pulumi.Input<string>;
    /**
     * Application list name.
     */
    applicationList?: pulumi.Input<string>;
    /**
     * Enable/disable application control. Valid values: `enable`, `disable`.
     */
    applicationListStatus?: pulumi.Input<string>;
    /**
     * Antivirus profile.
     */
    avProfile?: pulumi.Input<string>;
    /**
     * Enable/disable antivirus. Valid values: `enable`, `disable`.
     */
    avProfileStatus?: pulumi.Input<string>;
    /**
     * Comments.
     */
    comments?: pulumi.Input<string>;
    /**
     * DLP sensor name.
     */
    dlpSensor?: pulumi.Input<string>;
    /**
     * Enable/disable DLP. Valid values: `enable`, `disable`.
     */
    dlpSensorStatus?: pulumi.Input<string>;
    /**
     * Enable/disable DSRI. Valid values: `enable`, `disable`.
     */
    dsri?: pulumi.Input<string>;
    /**
     * Address object to limit traffic monitoring to network traffic sent to the specified address or range. The structure of `dstaddr` block is documented below.
     */
    dstaddrs: pulumi.Input<pulumi.Input<inputs.FirewallInterfacePolicyDstaddr>[]>;
    /**
     * true or false, set this parameter to true when using dynamic forEach + toset to configure and sort sub-tables, please do not set this parameter when configuring static sub-tables.
     */
    dynamicSortSubtable?: pulumi.Input<string>;
    /**
     * Email filter profile.
     */
    emailfilterProfile?: pulumi.Input<string>;
    /**
     * Enable/disable email filter. Valid values: `enable`, `disable`.
     */
    emailfilterProfileStatus?: pulumi.Input<string>;
    /**
     * Monitored interface name from available interfaces.
     */
    interface: pulumi.Input<string>;
    /**
     * IPS sensor name.
     */
    ipsSensor?: pulumi.Input<string>;
    /**
     * Enable/disable IPS. Valid values: `enable`, `disable`.
     */
    ipsSensorStatus?: pulumi.Input<string>;
    /**
     * Label.
     */
    label?: pulumi.Input<string>;
    /**
     * Logging type to be used in this policy (Options: all | utm | disable, Default: utm). Valid values: `all`, `utm`, `disable`.
     */
    logtraffic?: pulumi.Input<string>;
    /**
     * Policy ID.
     */
    policyid?: pulumi.Input<number>;
    /**
     * Enable/disable scanning for connections to Botnet servers. Valid values: `disable`, `block`, `monitor`.
     */
    scanBotnetConnections?: pulumi.Input<string>;
    /**
     * Service object from available options. The structure of `service` block is documented below.
     */
    services: pulumi.Input<pulumi.Input<inputs.FirewallInterfacePolicyService>[]>;
    /**
     * Antispam profile.
     */
    spamfilterProfile?: pulumi.Input<string>;
    /**
     * Enable/disable antispam. Valid values: `enable`, `disable`.
     */
    spamfilterProfileStatus?: pulumi.Input<string>;
    /**
     * Address object to limit traffic monitoring to network traffic sent from the specified address or range. The structure of `srcaddr` block is documented below.
     */
    srcaddrs: pulumi.Input<pulumi.Input<inputs.FirewallInterfacePolicySrcaddr>[]>;
    /**
     * Enable/disable this policy. Valid values: `enable`, `disable`.
     */
    status?: pulumi.Input<string>;
    /**
     * Specifies the vdom to which the resource will be applied when the FortiGate unit is running in VDOM mode. Only one vdom can be specified. If you want to inherit the vdom configuration of the provider, please do not set this parameter.
     */
    vdomparam?: pulumi.Input<string>;
    /**
     * Web filter profile.
     */
    webfilterProfile?: pulumi.Input<string>;
    /**
     * Enable/disable web filtering. Valid values: `enable`, `disable`.
     */
    webfilterProfileStatus?: pulumi.Input<string>;
}
