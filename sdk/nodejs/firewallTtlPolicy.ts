// *** WARNING: this file was generated by the Pulumi Terraform Bridge (tfgen) Tool. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

import * as pulumi from "@pulumi/pulumi";
import { input as inputs, output as outputs } from "./types";
import * as utilities from "./utilities";

/**
 * Configure TTL policies.
 *
 * ## Example Usage
 *
 * ```typescript
 * import * as pulumi from "@pulumi/pulumi";
 * import * as fortios from "@pulumi/fortios";
 *
 * const trname = new fortios.FirewallTtlPolicy("trname", {
 *     action: "accept",
 *     fosid: 1,
 *     schedule: "always",
 *     services: [{
 *         name: "ALL",
 *     }],
 *     srcaddrs: [{
 *         name: "all",
 *     }],
 *     srcintf: "port3",
 *     status: "enable",
 *     ttl: "23",
 * });
 * ```
 *
 * ## Import
 *
 * Firewall TtlPolicy can be imported using any of these accepted formats$ export "FORTIOS_IMPORT_TABLE"="true"
 *
 * ```sh
 *  $ pulumi import fortios:index/firewallTtlPolicy:FirewallTtlPolicy labelname {{fosid}}
 * ```
 *
 *  $ unset "FORTIOS_IMPORT_TABLE"
 */
export class FirewallTtlPolicy extends pulumi.CustomResource {
    /**
     * Get an existing FirewallTtlPolicy resource's state with the given name, ID, and optional extra
     * properties used to qualify the lookup.
     *
     * @param name The _unique_ name of the resulting resource.
     * @param id The _unique_ provider ID of the resource to lookup.
     * @param state Any extra arguments used during the lookup.
     * @param opts Optional settings to control the behavior of the CustomResource.
     */
    public static get(name: string, id: pulumi.Input<pulumi.ID>, state?: FirewallTtlPolicyState, opts?: pulumi.CustomResourceOptions): FirewallTtlPolicy {
        return new FirewallTtlPolicy(name, <any>state, { ...opts, id: id });
    }

    /** @internal */
    public static readonly __pulumiType = 'fortios:index/firewallTtlPolicy:FirewallTtlPolicy';

    /**
     * Returns true if the given object is an instance of FirewallTtlPolicy.  This is designed to work even
     * when multiple copies of the Pulumi SDK have been loaded into the same process.
     */
    public static isInstance(obj: any): obj is FirewallTtlPolicy {
        if (obj === undefined || obj === null) {
            return false;
        }
        return obj['__pulumiType'] === FirewallTtlPolicy.__pulumiType;
    }

    /**
     * Action to be performed on traffic matching this policy (default = deny). Valid values: `accept`, `deny`.
     */
    public readonly action!: pulumi.Output<string>;
    /**
     * true or false, set this parameter to true when using dynamic forEach + toset to configure and sort sub-tables, please do not set this parameter when configuring static sub-tables.
     */
    public readonly dynamicSortSubtable!: pulumi.Output<string | undefined>;
    /**
     * ID.
     */
    public readonly fosid!: pulumi.Output<number>;
    /**
     * Schedule object from available options.
     */
    public readonly schedule!: pulumi.Output<string>;
    /**
     * Service object(s) from available options. Separate multiple names with a space. The structure of `service` block is documented below.
     */
    public readonly services!: pulumi.Output<outputs.FirewallTtlPolicyService[]>;
    /**
     * Source address object(s) from available options. Separate multiple names with a space. The structure of `srcaddr` block is documented below.
     */
    public readonly srcaddrs!: pulumi.Output<outputs.FirewallTtlPolicySrcaddr[]>;
    /**
     * Source interface name from available interfaces.
     */
    public readonly srcintf!: pulumi.Output<string>;
    /**
     * Enable/disable this TTL policy. Valid values: `enable`, `disable`.
     */
    public readonly status!: pulumi.Output<string>;
    /**
     * Value/range to match against the packet's Time to Live value (format: ttl[ - ttlHigh], 1 - 255).
     */
    public readonly ttl!: pulumi.Output<string>;
    /**
     * Specifies the vdom to which the resource will be applied when the FortiGate unit is running in VDOM mode. Only one vdom can be specified. If you want to inherit the vdom configuration of the provider, please do not set this parameter.
     */
    public readonly vdomparam!: pulumi.Output<string | undefined>;

    /**
     * Create a FirewallTtlPolicy resource with the given unique name, arguments, and options.
     *
     * @param name The _unique_ name of the resource.
     * @param args The arguments to use to populate this resource's properties.
     * @param opts A bag of options that control this resource's behavior.
     */
    constructor(name: string, args: FirewallTtlPolicyArgs, opts?: pulumi.CustomResourceOptions)
    constructor(name: string, argsOrState?: FirewallTtlPolicyArgs | FirewallTtlPolicyState, opts?: pulumi.CustomResourceOptions) {
        let inputs: pulumi.Inputs = {};
        opts = opts || {};
        if (opts.id) {
            const state = argsOrState as FirewallTtlPolicyState | undefined;
            inputs["action"] = state ? state.action : undefined;
            inputs["dynamicSortSubtable"] = state ? state.dynamicSortSubtable : undefined;
            inputs["fosid"] = state ? state.fosid : undefined;
            inputs["schedule"] = state ? state.schedule : undefined;
            inputs["services"] = state ? state.services : undefined;
            inputs["srcaddrs"] = state ? state.srcaddrs : undefined;
            inputs["srcintf"] = state ? state.srcintf : undefined;
            inputs["status"] = state ? state.status : undefined;
            inputs["ttl"] = state ? state.ttl : undefined;
            inputs["vdomparam"] = state ? state.vdomparam : undefined;
        } else {
            const args = argsOrState as FirewallTtlPolicyArgs | undefined;
            if ((!args || args.fosid === undefined) && !opts.urn) {
                throw new Error("Missing required property 'fosid'");
            }
            if ((!args || args.schedule === undefined) && !opts.urn) {
                throw new Error("Missing required property 'schedule'");
            }
            if ((!args || args.services === undefined) && !opts.urn) {
                throw new Error("Missing required property 'services'");
            }
            if ((!args || args.srcaddrs === undefined) && !opts.urn) {
                throw new Error("Missing required property 'srcaddrs'");
            }
            if ((!args || args.srcintf === undefined) && !opts.urn) {
                throw new Error("Missing required property 'srcintf'");
            }
            if ((!args || args.ttl === undefined) && !opts.urn) {
                throw new Error("Missing required property 'ttl'");
            }
            inputs["action"] = args ? args.action : undefined;
            inputs["dynamicSortSubtable"] = args ? args.dynamicSortSubtable : undefined;
            inputs["fosid"] = args ? args.fosid : undefined;
            inputs["schedule"] = args ? args.schedule : undefined;
            inputs["services"] = args ? args.services : undefined;
            inputs["srcaddrs"] = args ? args.srcaddrs : undefined;
            inputs["srcintf"] = args ? args.srcintf : undefined;
            inputs["status"] = args ? args.status : undefined;
            inputs["ttl"] = args ? args.ttl : undefined;
            inputs["vdomparam"] = args ? args.vdomparam : undefined;
        }
        if (!opts.version) {
            opts = pulumi.mergeOptions(opts, { version: utilities.getVersion()});
        }
        super(FirewallTtlPolicy.__pulumiType, name, inputs, opts);
    }
}

/**
 * Input properties used for looking up and filtering FirewallTtlPolicy resources.
 */
export interface FirewallTtlPolicyState {
    /**
     * Action to be performed on traffic matching this policy (default = deny). Valid values: `accept`, `deny`.
     */
    action?: pulumi.Input<string>;
    /**
     * true or false, set this parameter to true when using dynamic forEach + toset to configure and sort sub-tables, please do not set this parameter when configuring static sub-tables.
     */
    dynamicSortSubtable?: pulumi.Input<string>;
    /**
     * ID.
     */
    fosid?: pulumi.Input<number>;
    /**
     * Schedule object from available options.
     */
    schedule?: pulumi.Input<string>;
    /**
     * Service object(s) from available options. Separate multiple names with a space. The structure of `service` block is documented below.
     */
    services?: pulumi.Input<pulumi.Input<inputs.FirewallTtlPolicyService>[]>;
    /**
     * Source address object(s) from available options. Separate multiple names with a space. The structure of `srcaddr` block is documented below.
     */
    srcaddrs?: pulumi.Input<pulumi.Input<inputs.FirewallTtlPolicySrcaddr>[]>;
    /**
     * Source interface name from available interfaces.
     */
    srcintf?: pulumi.Input<string>;
    /**
     * Enable/disable this TTL policy. Valid values: `enable`, `disable`.
     */
    status?: pulumi.Input<string>;
    /**
     * Value/range to match against the packet's Time to Live value (format: ttl[ - ttlHigh], 1 - 255).
     */
    ttl?: pulumi.Input<string>;
    /**
     * Specifies the vdom to which the resource will be applied when the FortiGate unit is running in VDOM mode. Only one vdom can be specified. If you want to inherit the vdom configuration of the provider, please do not set this parameter.
     */
    vdomparam?: pulumi.Input<string>;
}

/**
 * The set of arguments for constructing a FirewallTtlPolicy resource.
 */
export interface FirewallTtlPolicyArgs {
    /**
     * Action to be performed on traffic matching this policy (default = deny). Valid values: `accept`, `deny`.
     */
    action?: pulumi.Input<string>;
    /**
     * true or false, set this parameter to true when using dynamic forEach + toset to configure and sort sub-tables, please do not set this parameter when configuring static sub-tables.
     */
    dynamicSortSubtable?: pulumi.Input<string>;
    /**
     * ID.
     */
    fosid: pulumi.Input<number>;
    /**
     * Schedule object from available options.
     */
    schedule: pulumi.Input<string>;
    /**
     * Service object(s) from available options. Separate multiple names with a space. The structure of `service` block is documented below.
     */
    services: pulumi.Input<pulumi.Input<inputs.FirewallTtlPolicyService>[]>;
    /**
     * Source address object(s) from available options. Separate multiple names with a space. The structure of `srcaddr` block is documented below.
     */
    srcaddrs: pulumi.Input<pulumi.Input<inputs.FirewallTtlPolicySrcaddr>[]>;
    /**
     * Source interface name from available interfaces.
     */
    srcintf: pulumi.Input<string>;
    /**
     * Enable/disable this TTL policy. Valid values: `enable`, `disable`.
     */
    status?: pulumi.Input<string>;
    /**
     * Value/range to match against the packet's Time to Live value (format: ttl[ - ttlHigh], 1 - 255).
     */
    ttl: pulumi.Input<string>;
    /**
     * Specifies the vdom to which the resource will be applied when the FortiGate unit is running in VDOM mode. Only one vdom can be specified. If you want to inherit the vdom configuration of the provider, please do not set this parameter.
     */
    vdomparam?: pulumi.Input<string>;
}
