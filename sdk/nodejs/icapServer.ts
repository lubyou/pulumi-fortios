// *** WARNING: this file was generated by the Pulumi Terraform Bridge (tfgen) Tool. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

import * as pulumi from "@pulumi/pulumi";
import * as utilities from "./utilities";

/**
 * Configure ICAP servers.
 *
 * ## Example Usage
 *
 * ```typescript
 * import * as pulumi from "@pulumi/pulumi";
 * import * as fortios from "@pulumi/fortios";
 *
 * const trname = new fortios.IcapServer("trname", {
 *     ip6Address: "::",
 *     ipAddress: "1.1.1.1",
 *     ipVersion: "4",
 *     maxConnections: 100,
 *     port: 22,
 * });
 * ```
 *
 * ## Import
 *
 * Icap Server can be imported using any of these accepted formats$ export "FORTIOS_IMPORT_TABLE"="true"
 *
 * ```sh
 *  $ pulumi import fortios:index/icapServer:IcapServer labelname {{name}}
 * ```
 *
 *  $ unset "FORTIOS_IMPORT_TABLE"
 */
export class IcapServer extends pulumi.CustomResource {
    /**
     * Get an existing IcapServer resource's state with the given name, ID, and optional extra
     * properties used to qualify the lookup.
     *
     * @param name The _unique_ name of the resulting resource.
     * @param id The _unique_ provider ID of the resource to lookup.
     * @param state Any extra arguments used during the lookup.
     * @param opts Optional settings to control the behavior of the CustomResource.
     */
    public static get(name: string, id: pulumi.Input<pulumi.ID>, state?: IcapServerState, opts?: pulumi.CustomResourceOptions): IcapServer {
        return new IcapServer(name, <any>state, { ...opts, id: id });
    }

    /** @internal */
    public static readonly __pulumiType = 'fortios:index/icapServer:IcapServer';

    /**
     * Returns true if the given object is an instance of IcapServer.  This is designed to work even
     * when multiple copies of the Pulumi SDK have been loaded into the same process.
     */
    public static isInstance(obj: any): obj is IcapServer {
        if (obj === undefined || obj === null) {
            return false;
        }
        return obj['__pulumiType'] === IcapServer.__pulumiType;
    }

    /**
     * IPv6 address of the ICAP server.
     */
    public readonly ip6Address!: pulumi.Output<string>;
    /**
     * IPv4 address of the ICAP server.
     */
    public readonly ipAddress!: pulumi.Output<string>;
    /**
     * IP version. Valid values: `4`, `6`.
     */
    public readonly ipVersion!: pulumi.Output<string>;
    /**
     * Maximum number of concurrent connections to ICAP server.
     */
    public readonly maxConnections!: pulumi.Output<number>;
    /**
     * Server name.
     */
    public readonly name!: pulumi.Output<string>;
    /**
     * ICAP server port.
     */
    public readonly port!: pulumi.Output<number>;
    /**
     * Enable/disable secure connection to ICAP server. Valid values: `enable`, `disable`.
     */
    public readonly secure!: pulumi.Output<string>;
    /**
     * CA certificate name.
     */
    public readonly sslCert!: pulumi.Output<string>;
    /**
     * Specifies the vdom to which the resource will be applied when the FortiGate unit is running in VDOM mode. Only one vdom can be specified. If you want to inherit the vdom configuration of the provider, please do not set this parameter.
     */
    public readonly vdomparam!: pulumi.Output<string | undefined>;

    /**
     * Create a IcapServer resource with the given unique name, arguments, and options.
     *
     * @param name The _unique_ name of the resource.
     * @param args The arguments to use to populate this resource's properties.
     * @param opts A bag of options that control this resource's behavior.
     */
    constructor(name: string, args?: IcapServerArgs, opts?: pulumi.CustomResourceOptions)
    constructor(name: string, argsOrState?: IcapServerArgs | IcapServerState, opts?: pulumi.CustomResourceOptions) {
        let inputs: pulumi.Inputs = {};
        opts = opts || {};
        if (opts.id) {
            const state = argsOrState as IcapServerState | undefined;
            inputs["ip6Address"] = state ? state.ip6Address : undefined;
            inputs["ipAddress"] = state ? state.ipAddress : undefined;
            inputs["ipVersion"] = state ? state.ipVersion : undefined;
            inputs["maxConnections"] = state ? state.maxConnections : undefined;
            inputs["name"] = state ? state.name : undefined;
            inputs["port"] = state ? state.port : undefined;
            inputs["secure"] = state ? state.secure : undefined;
            inputs["sslCert"] = state ? state.sslCert : undefined;
            inputs["vdomparam"] = state ? state.vdomparam : undefined;
        } else {
            const args = argsOrState as IcapServerArgs | undefined;
            inputs["ip6Address"] = args ? args.ip6Address : undefined;
            inputs["ipAddress"] = args ? args.ipAddress : undefined;
            inputs["ipVersion"] = args ? args.ipVersion : undefined;
            inputs["maxConnections"] = args ? args.maxConnections : undefined;
            inputs["name"] = args ? args.name : undefined;
            inputs["port"] = args ? args.port : undefined;
            inputs["secure"] = args ? args.secure : undefined;
            inputs["sslCert"] = args ? args.sslCert : undefined;
            inputs["vdomparam"] = args ? args.vdomparam : undefined;
        }
        if (!opts.version) {
            opts = pulumi.mergeOptions(opts, { version: utilities.getVersion()});
        }
        super(IcapServer.__pulumiType, name, inputs, opts);
    }
}

/**
 * Input properties used for looking up and filtering IcapServer resources.
 */
export interface IcapServerState {
    /**
     * IPv6 address of the ICAP server.
     */
    ip6Address?: pulumi.Input<string>;
    /**
     * IPv4 address of the ICAP server.
     */
    ipAddress?: pulumi.Input<string>;
    /**
     * IP version. Valid values: `4`, `6`.
     */
    ipVersion?: pulumi.Input<string>;
    /**
     * Maximum number of concurrent connections to ICAP server.
     */
    maxConnections?: pulumi.Input<number>;
    /**
     * Server name.
     */
    name?: pulumi.Input<string>;
    /**
     * ICAP server port.
     */
    port?: pulumi.Input<number>;
    /**
     * Enable/disable secure connection to ICAP server. Valid values: `enable`, `disable`.
     */
    secure?: pulumi.Input<string>;
    /**
     * CA certificate name.
     */
    sslCert?: pulumi.Input<string>;
    /**
     * Specifies the vdom to which the resource will be applied when the FortiGate unit is running in VDOM mode. Only one vdom can be specified. If you want to inherit the vdom configuration of the provider, please do not set this parameter.
     */
    vdomparam?: pulumi.Input<string>;
}

/**
 * The set of arguments for constructing a IcapServer resource.
 */
export interface IcapServerArgs {
    /**
     * IPv6 address of the ICAP server.
     */
    ip6Address?: pulumi.Input<string>;
    /**
     * IPv4 address of the ICAP server.
     */
    ipAddress?: pulumi.Input<string>;
    /**
     * IP version. Valid values: `4`, `6`.
     */
    ipVersion?: pulumi.Input<string>;
    /**
     * Maximum number of concurrent connections to ICAP server.
     */
    maxConnections?: pulumi.Input<number>;
    /**
     * Server name.
     */
    name?: pulumi.Input<string>;
    /**
     * ICAP server port.
     */
    port?: pulumi.Input<number>;
    /**
     * Enable/disable secure connection to ICAP server. Valid values: `enable`, `disable`.
     */
    secure?: pulumi.Input<string>;
    /**
     * CA certificate name.
     */
    sslCert?: pulumi.Input<string>;
    /**
     * Specifies the vdom to which the resource will be applied when the FortiGate unit is running in VDOM mode. Only one vdom can be specified. If you want to inherit the vdom configuration of the provider, please do not set this parameter.
     */
    vdomparam?: pulumi.Input<string>;
}
