// *** WARNING: this file was generated by the Pulumi Terraform Bridge (tfgen) Tool. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

import * as pulumi from "@pulumi/pulumi";
import * as utilities from "./utilities";

/**
 * Configure system PTP information.
 *
 * ## Example Usage
 *
 * ```typescript
 * import * as pulumi from "@pulumi/pulumi";
 * import * as fortios from "@pulumi/fortios";
 *
 * const trname = new fortios.SystemPtp("trname", {
 *     delayMechanism: "E2E",
 *     interface: "port3",
 *     mode: "multicast",
 *     requestInterval: 1,
 *     status: "enable",
 * });
 * ```
 *
 * ## Import
 *
 * System Ptp can be imported using any of these accepted formats$ export "FORTIOS_IMPORT_TABLE"="true"
 *
 * ```sh
 *  $ pulumi import fortios:index/systemPtp:SystemPtp labelname SystemPtp
 * ```
 *
 *  $ unset "FORTIOS_IMPORT_TABLE"
 */
export class SystemPtp extends pulumi.CustomResource {
    /**
     * Get an existing SystemPtp resource's state with the given name, ID, and optional extra
     * properties used to qualify the lookup.
     *
     * @param name The _unique_ name of the resulting resource.
     * @param id The _unique_ provider ID of the resource to lookup.
     * @param state Any extra arguments used during the lookup.
     * @param opts Optional settings to control the behavior of the CustomResource.
     */
    public static get(name: string, id: pulumi.Input<pulumi.ID>, state?: SystemPtpState, opts?: pulumi.CustomResourceOptions): SystemPtp {
        return new SystemPtp(name, <any>state, { ...opts, id: id });
    }

    /** @internal */
    public static readonly __pulumiType = 'fortios:index/systemPtp:SystemPtp';

    /**
     * Returns true if the given object is an instance of SystemPtp.  This is designed to work even
     * when multiple copies of the Pulumi SDK have been loaded into the same process.
     */
    public static isInstance(obj: any): obj is SystemPtp {
        if (obj === undefined || obj === null) {
            return false;
        }
        return obj['__pulumiType'] === SystemPtp.__pulumiType;
    }

    /**
     * End to end delay detection or peer to peer delay detection. Valid values: `E2E`, `P2P`.
     */
    public readonly delayMechanism!: pulumi.Output<string>;
    /**
     * PTP slave will reply through this interface.
     */
    public readonly interface!: pulumi.Output<string>;
    /**
     * Multicast transmission or hybrid transmission. Valid values: `multicast`, `hybrid`.
     */
    public readonly mode!: pulumi.Output<string>;
    /**
     * The delay request value is the logarithmic mean interval in seconds between the delay request messages sent by the slave to the master.
     */
    public readonly requestInterval!: pulumi.Output<number>;
    /**
     * Enable/disable setting the FortiGate system time by synchronizing with an PTP Server. Valid values: `enable`, `disable`.
     */
    public readonly status!: pulumi.Output<string>;
    /**
     * Specifies the vdom to which the resource will be applied when the FortiGate unit is running in VDOM mode. Only one vdom can be specified. If you want to inherit the vdom configuration of the provider, please do not set this parameter.
     */
    public readonly vdomparam!: pulumi.Output<string | undefined>;

    /**
     * Create a SystemPtp resource with the given unique name, arguments, and options.
     *
     * @param name The _unique_ name of the resource.
     * @param args The arguments to use to populate this resource's properties.
     * @param opts A bag of options that control this resource's behavior.
     */
    constructor(name: string, args: SystemPtpArgs, opts?: pulumi.CustomResourceOptions)
    constructor(name: string, argsOrState?: SystemPtpArgs | SystemPtpState, opts?: pulumi.CustomResourceOptions) {
        let inputs: pulumi.Inputs = {};
        opts = opts || {};
        if (opts.id) {
            const state = argsOrState as SystemPtpState | undefined;
            inputs["delayMechanism"] = state ? state.delayMechanism : undefined;
            inputs["interface"] = state ? state.interface : undefined;
            inputs["mode"] = state ? state.mode : undefined;
            inputs["requestInterval"] = state ? state.requestInterval : undefined;
            inputs["status"] = state ? state.status : undefined;
            inputs["vdomparam"] = state ? state.vdomparam : undefined;
        } else {
            const args = argsOrState as SystemPtpArgs | undefined;
            if ((!args || args.interface === undefined) && !opts.urn) {
                throw new Error("Missing required property 'interface'");
            }
            inputs["delayMechanism"] = args ? args.delayMechanism : undefined;
            inputs["interface"] = args ? args.interface : undefined;
            inputs["mode"] = args ? args.mode : undefined;
            inputs["requestInterval"] = args ? args.requestInterval : undefined;
            inputs["status"] = args ? args.status : undefined;
            inputs["vdomparam"] = args ? args.vdomparam : undefined;
        }
        if (!opts.version) {
            opts = pulumi.mergeOptions(opts, { version: utilities.getVersion()});
        }
        super(SystemPtp.__pulumiType, name, inputs, opts);
    }
}

/**
 * Input properties used for looking up and filtering SystemPtp resources.
 */
export interface SystemPtpState {
    /**
     * End to end delay detection or peer to peer delay detection. Valid values: `E2E`, `P2P`.
     */
    delayMechanism?: pulumi.Input<string>;
    /**
     * PTP slave will reply through this interface.
     */
    interface?: pulumi.Input<string>;
    /**
     * Multicast transmission or hybrid transmission. Valid values: `multicast`, `hybrid`.
     */
    mode?: pulumi.Input<string>;
    /**
     * The delay request value is the logarithmic mean interval in seconds between the delay request messages sent by the slave to the master.
     */
    requestInterval?: pulumi.Input<number>;
    /**
     * Enable/disable setting the FortiGate system time by synchronizing with an PTP Server. Valid values: `enable`, `disable`.
     */
    status?: pulumi.Input<string>;
    /**
     * Specifies the vdom to which the resource will be applied when the FortiGate unit is running in VDOM mode. Only one vdom can be specified. If you want to inherit the vdom configuration of the provider, please do not set this parameter.
     */
    vdomparam?: pulumi.Input<string>;
}

/**
 * The set of arguments for constructing a SystemPtp resource.
 */
export interface SystemPtpArgs {
    /**
     * End to end delay detection or peer to peer delay detection. Valid values: `E2E`, `P2P`.
     */
    delayMechanism?: pulumi.Input<string>;
    /**
     * PTP slave will reply through this interface.
     */
    interface: pulumi.Input<string>;
    /**
     * Multicast transmission or hybrid transmission. Valid values: `multicast`, `hybrid`.
     */
    mode?: pulumi.Input<string>;
    /**
     * The delay request value is the logarithmic mean interval in seconds between the delay request messages sent by the slave to the master.
     */
    requestInterval?: pulumi.Input<number>;
    /**
     * Enable/disable setting the FortiGate system time by synchronizing with an PTP Server. Valid values: `enable`, `disable`.
     */
    status?: pulumi.Input<string>;
    /**
     * Specifies the vdom to which the resource will be applied when the FortiGate unit is running in VDOM mode. Only one vdom can be specified. If you want to inherit the vdom configuration of the provider, please do not set this parameter.
     */
    vdomparam?: pulumi.Input<string>;
}
