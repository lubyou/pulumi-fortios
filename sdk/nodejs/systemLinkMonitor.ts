// *** WARNING: this file was generated by the Pulumi Terraform Bridge (tfgen) Tool. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

import * as pulumi from "@pulumi/pulumi";
import { input as inputs, output as outputs } from "./types";
import * as utilities from "./utilities";

/**
 * Configure Link Health Monitor.
 *
 * ## Example Usage
 *
 * ```typescript
 * import * as pulumi from "@pulumi/pulumi";
 * import * as fortios from "@pulumi/fortios";
 *
 * const trname = new fortios.SystemLinkMonitor("trname", {
 *     addrMode: "ipv4",
 *     failtime: 5,
 *     gatewayIp: "2.2.2.2",
 *     gatewayIp6: "::",
 *     haPriority: 1,
 *     httpAgent: "Chrome/ Safari/",
 *     httpGet: "/",
 *     interval: 1,
 *     packetSize: 64,
 *     port: 80,
 *     protocol: "ping",
 *     recoverytime: 5,
 *     securityMode: "none",
 *     servers: [{
 *         address: "3.3.3.3",
 *     }],
 *     sourceIp: "0.0.0.0",
 *     sourceIp6: "::",
 *     srcintf: "port4",
 *     status: "enable",
 *     updateCascadeInterface: "enable",
 *     updateStaticRoute: "enable",
 * });
 * ```
 *
 * ## Import
 *
 * System LinkMonitor can be imported using any of these accepted formats$ export "FORTIOS_IMPORT_TABLE"="true"
 *
 * ```sh
 *  $ pulumi import fortios:index/systemLinkMonitor:SystemLinkMonitor labelname {{name}}
 * ```
 *
 *  $ unset "FORTIOS_IMPORT_TABLE"
 */
export class SystemLinkMonitor extends pulumi.CustomResource {
    /**
     * Get an existing SystemLinkMonitor resource's state with the given name, ID, and optional extra
     * properties used to qualify the lookup.
     *
     * @param name The _unique_ name of the resulting resource.
     * @param id The _unique_ provider ID of the resource to lookup.
     * @param state Any extra arguments used during the lookup.
     * @param opts Optional settings to control the behavior of the CustomResource.
     */
    public static get(name: string, id: pulumi.Input<pulumi.ID>, state?: SystemLinkMonitorState, opts?: pulumi.CustomResourceOptions): SystemLinkMonitor {
        return new SystemLinkMonitor(name, <any>state, { ...opts, id: id });
    }

    /** @internal */
    public static readonly __pulumiType = 'fortios:index/systemLinkMonitor:SystemLinkMonitor';

    /**
     * Returns true if the given object is an instance of SystemLinkMonitor.  This is designed to work even
     * when multiple copies of the Pulumi SDK have been loaded into the same process.
     */
    public static isInstance(obj: any): obj is SystemLinkMonitor {
        if (obj === undefined || obj === null) {
            return false;
        }
        return obj['__pulumiType'] === SystemLinkMonitor.__pulumiType;
    }

    /**
     * Address mode (IPv4 or IPv6). Valid values: `ipv4`, `ipv6`.
     */
    public readonly addrMode!: pulumi.Output<string>;
    /**
     * true or false, set this parameter to true when using dynamic forEach + toset to configure and sort sub-tables, please do not set this parameter when configuring static sub-tables.
     */
    public readonly dynamicSortSubtable!: pulumi.Output<string | undefined>;
    /**
     * Number of retry attempts before the server is considered down (1 - 10, default = 5)
     */
    public readonly failtime!: pulumi.Output<number>;
    /**
     * Gateway IP address used to probe the server.
     */
    public readonly gatewayIp!: pulumi.Output<string>;
    /**
     * Gateway IPv6 address used to probe the server.
     */
    public readonly gatewayIp6!: pulumi.Output<string>;
    /**
     * HA election priority (1 - 50).
     */
    public readonly haPriority!: pulumi.Output<number>;
    /**
     * String in the http-agent field in the HTTP header.
     */
    public readonly httpAgent!: pulumi.Output<string>;
    /**
     * If you are monitoring an HTML server you can send an HTTP-GET request with a custom string. Use this option to define the string.
     */
    public readonly httpGet!: pulumi.Output<string>;
    /**
     * String that you expect to see in the HTTP-GET requests of the traffic to be monitored.
     */
    public readonly httpMatch!: pulumi.Output<string>;
    /**
     * Detection interval (1 - 3600 sec, default = 5).
     */
    public readonly interval!: pulumi.Output<number>;
    /**
     * Link monitor name.
     */
    public readonly name!: pulumi.Output<string>;
    /**
     * Packet size of a twamp test session,
     */
    public readonly packetSize!: pulumi.Output<number>;
    /**
     * Twamp controller password in authentication mode
     */
    public readonly password!: pulumi.Output<string | undefined>;
    /**
     * Port number of the traffic to be used to monitor the server.
     */
    public readonly port!: pulumi.Output<number>;
    /**
     * Number of most recent probes that should be used to calculate latency and jitter (5 - 30, default = 30).
     */
    public readonly probeCount!: pulumi.Output<number>;
    /**
     * Time to wait before a probe packet is considered lost (500 - 5000 msec, default = 500).
     */
    public readonly probeTimeout!: pulumi.Output<number>;
    /**
     * Protocols used to monitor the server.
     */
    public readonly protocol!: pulumi.Output<string>;
    /**
     * Number of successful responses received before server is considered recovered (1 - 10, default = 5).
     */
    public readonly recoverytime!: pulumi.Output<number>;
    /**
     * Twamp controller security mode. Valid values: `none`, `authentication`.
     */
    public readonly securityMode!: pulumi.Output<string>;
    /**
     * IP address of the server(s) to be monitored. The structure of `server` block is documented below.
     */
    public readonly servers!: pulumi.Output<outputs.SystemLinkMonitorServer[]>;
    /**
     * Source IP address used in packet to the server.
     */
    public readonly sourceIp!: pulumi.Output<string>;
    /**
     * Source IPv6 address used in packet to the server.
     */
    public readonly sourceIp6!: pulumi.Output<string>;
    /**
     * Interface that receives the traffic to be monitored.
     */
    public readonly srcintf!: pulumi.Output<string>;
    /**
     * Enable/disable this link monitor. Valid values: `enable`, `disable`.
     */
    public readonly status!: pulumi.Output<string>;
    /**
     * Enable/disable update cascade interface. Valid values: `enable`, `disable`.
     */
    public readonly updateCascadeInterface!: pulumi.Output<string>;
    /**
     * Enable/disable updating the static route. Valid values: `enable`, `disable`.
     */
    public readonly updateStaticRoute!: pulumi.Output<string>;
    /**
     * Specifies the vdom to which the resource will be applied when the FortiGate unit is running in VDOM mode. Only one vdom can be specified. If you want to inherit the vdom configuration of the provider, please do not set this parameter.
     */
    public readonly vdomparam!: pulumi.Output<string | undefined>;

    /**
     * Create a SystemLinkMonitor resource with the given unique name, arguments, and options.
     *
     * @param name The _unique_ name of the resource.
     * @param args The arguments to use to populate this resource's properties.
     * @param opts A bag of options that control this resource's behavior.
     */
    constructor(name: string, args: SystemLinkMonitorArgs, opts?: pulumi.CustomResourceOptions)
    constructor(name: string, argsOrState?: SystemLinkMonitorArgs | SystemLinkMonitorState, opts?: pulumi.CustomResourceOptions) {
        let inputs: pulumi.Inputs = {};
        opts = opts || {};
        if (opts.id) {
            const state = argsOrState as SystemLinkMonitorState | undefined;
            inputs["addrMode"] = state ? state.addrMode : undefined;
            inputs["dynamicSortSubtable"] = state ? state.dynamicSortSubtable : undefined;
            inputs["failtime"] = state ? state.failtime : undefined;
            inputs["gatewayIp"] = state ? state.gatewayIp : undefined;
            inputs["gatewayIp6"] = state ? state.gatewayIp6 : undefined;
            inputs["haPriority"] = state ? state.haPriority : undefined;
            inputs["httpAgent"] = state ? state.httpAgent : undefined;
            inputs["httpGet"] = state ? state.httpGet : undefined;
            inputs["httpMatch"] = state ? state.httpMatch : undefined;
            inputs["interval"] = state ? state.interval : undefined;
            inputs["name"] = state ? state.name : undefined;
            inputs["packetSize"] = state ? state.packetSize : undefined;
            inputs["password"] = state ? state.password : undefined;
            inputs["port"] = state ? state.port : undefined;
            inputs["probeCount"] = state ? state.probeCount : undefined;
            inputs["probeTimeout"] = state ? state.probeTimeout : undefined;
            inputs["protocol"] = state ? state.protocol : undefined;
            inputs["recoverytime"] = state ? state.recoverytime : undefined;
            inputs["securityMode"] = state ? state.securityMode : undefined;
            inputs["servers"] = state ? state.servers : undefined;
            inputs["sourceIp"] = state ? state.sourceIp : undefined;
            inputs["sourceIp6"] = state ? state.sourceIp6 : undefined;
            inputs["srcintf"] = state ? state.srcintf : undefined;
            inputs["status"] = state ? state.status : undefined;
            inputs["updateCascadeInterface"] = state ? state.updateCascadeInterface : undefined;
            inputs["updateStaticRoute"] = state ? state.updateStaticRoute : undefined;
            inputs["vdomparam"] = state ? state.vdomparam : undefined;
        } else {
            const args = argsOrState as SystemLinkMonitorArgs | undefined;
            if ((!args || args.servers === undefined) && !opts.urn) {
                throw new Error("Missing required property 'servers'");
            }
            inputs["addrMode"] = args ? args.addrMode : undefined;
            inputs["dynamicSortSubtable"] = args ? args.dynamicSortSubtable : undefined;
            inputs["failtime"] = args ? args.failtime : undefined;
            inputs["gatewayIp"] = args ? args.gatewayIp : undefined;
            inputs["gatewayIp6"] = args ? args.gatewayIp6 : undefined;
            inputs["haPriority"] = args ? args.haPriority : undefined;
            inputs["httpAgent"] = args ? args.httpAgent : undefined;
            inputs["httpGet"] = args ? args.httpGet : undefined;
            inputs["httpMatch"] = args ? args.httpMatch : undefined;
            inputs["interval"] = args ? args.interval : undefined;
            inputs["name"] = args ? args.name : undefined;
            inputs["packetSize"] = args ? args.packetSize : undefined;
            inputs["password"] = args ? args.password : undefined;
            inputs["port"] = args ? args.port : undefined;
            inputs["probeCount"] = args ? args.probeCount : undefined;
            inputs["probeTimeout"] = args ? args.probeTimeout : undefined;
            inputs["protocol"] = args ? args.protocol : undefined;
            inputs["recoverytime"] = args ? args.recoverytime : undefined;
            inputs["securityMode"] = args ? args.securityMode : undefined;
            inputs["servers"] = args ? args.servers : undefined;
            inputs["sourceIp"] = args ? args.sourceIp : undefined;
            inputs["sourceIp6"] = args ? args.sourceIp6 : undefined;
            inputs["srcintf"] = args ? args.srcintf : undefined;
            inputs["status"] = args ? args.status : undefined;
            inputs["updateCascadeInterface"] = args ? args.updateCascadeInterface : undefined;
            inputs["updateStaticRoute"] = args ? args.updateStaticRoute : undefined;
            inputs["vdomparam"] = args ? args.vdomparam : undefined;
        }
        if (!opts.version) {
            opts = pulumi.mergeOptions(opts, { version: utilities.getVersion()});
        }
        super(SystemLinkMonitor.__pulumiType, name, inputs, opts);
    }
}

/**
 * Input properties used for looking up and filtering SystemLinkMonitor resources.
 */
export interface SystemLinkMonitorState {
    /**
     * Address mode (IPv4 or IPv6). Valid values: `ipv4`, `ipv6`.
     */
    addrMode?: pulumi.Input<string>;
    /**
     * true or false, set this parameter to true when using dynamic forEach + toset to configure and sort sub-tables, please do not set this parameter when configuring static sub-tables.
     */
    dynamicSortSubtable?: pulumi.Input<string>;
    /**
     * Number of retry attempts before the server is considered down (1 - 10, default = 5)
     */
    failtime?: pulumi.Input<number>;
    /**
     * Gateway IP address used to probe the server.
     */
    gatewayIp?: pulumi.Input<string>;
    /**
     * Gateway IPv6 address used to probe the server.
     */
    gatewayIp6?: pulumi.Input<string>;
    /**
     * HA election priority (1 - 50).
     */
    haPriority?: pulumi.Input<number>;
    /**
     * String in the http-agent field in the HTTP header.
     */
    httpAgent?: pulumi.Input<string>;
    /**
     * If you are monitoring an HTML server you can send an HTTP-GET request with a custom string. Use this option to define the string.
     */
    httpGet?: pulumi.Input<string>;
    /**
     * String that you expect to see in the HTTP-GET requests of the traffic to be monitored.
     */
    httpMatch?: pulumi.Input<string>;
    /**
     * Detection interval (1 - 3600 sec, default = 5).
     */
    interval?: pulumi.Input<number>;
    /**
     * Link monitor name.
     */
    name?: pulumi.Input<string>;
    /**
     * Packet size of a twamp test session,
     */
    packetSize?: pulumi.Input<number>;
    /**
     * Twamp controller password in authentication mode
     */
    password?: pulumi.Input<string>;
    /**
     * Port number of the traffic to be used to monitor the server.
     */
    port?: pulumi.Input<number>;
    /**
     * Number of most recent probes that should be used to calculate latency and jitter (5 - 30, default = 30).
     */
    probeCount?: pulumi.Input<number>;
    /**
     * Time to wait before a probe packet is considered lost (500 - 5000 msec, default = 500).
     */
    probeTimeout?: pulumi.Input<number>;
    /**
     * Protocols used to monitor the server.
     */
    protocol?: pulumi.Input<string>;
    /**
     * Number of successful responses received before server is considered recovered (1 - 10, default = 5).
     */
    recoverytime?: pulumi.Input<number>;
    /**
     * Twamp controller security mode. Valid values: `none`, `authentication`.
     */
    securityMode?: pulumi.Input<string>;
    /**
     * IP address of the server(s) to be monitored. The structure of `server` block is documented below.
     */
    servers?: pulumi.Input<pulumi.Input<inputs.SystemLinkMonitorServer>[]>;
    /**
     * Source IP address used in packet to the server.
     */
    sourceIp?: pulumi.Input<string>;
    /**
     * Source IPv6 address used in packet to the server.
     */
    sourceIp6?: pulumi.Input<string>;
    /**
     * Interface that receives the traffic to be monitored.
     */
    srcintf?: pulumi.Input<string>;
    /**
     * Enable/disable this link monitor. Valid values: `enable`, `disable`.
     */
    status?: pulumi.Input<string>;
    /**
     * Enable/disable update cascade interface. Valid values: `enable`, `disable`.
     */
    updateCascadeInterface?: pulumi.Input<string>;
    /**
     * Enable/disable updating the static route. Valid values: `enable`, `disable`.
     */
    updateStaticRoute?: pulumi.Input<string>;
    /**
     * Specifies the vdom to which the resource will be applied when the FortiGate unit is running in VDOM mode. Only one vdom can be specified. If you want to inherit the vdom configuration of the provider, please do not set this parameter.
     */
    vdomparam?: pulumi.Input<string>;
}

/**
 * The set of arguments for constructing a SystemLinkMonitor resource.
 */
export interface SystemLinkMonitorArgs {
    /**
     * Address mode (IPv4 or IPv6). Valid values: `ipv4`, `ipv6`.
     */
    addrMode?: pulumi.Input<string>;
    /**
     * true or false, set this parameter to true when using dynamic forEach + toset to configure and sort sub-tables, please do not set this parameter when configuring static sub-tables.
     */
    dynamicSortSubtable?: pulumi.Input<string>;
    /**
     * Number of retry attempts before the server is considered down (1 - 10, default = 5)
     */
    failtime?: pulumi.Input<number>;
    /**
     * Gateway IP address used to probe the server.
     */
    gatewayIp?: pulumi.Input<string>;
    /**
     * Gateway IPv6 address used to probe the server.
     */
    gatewayIp6?: pulumi.Input<string>;
    /**
     * HA election priority (1 - 50).
     */
    haPriority?: pulumi.Input<number>;
    /**
     * String in the http-agent field in the HTTP header.
     */
    httpAgent?: pulumi.Input<string>;
    /**
     * If you are monitoring an HTML server you can send an HTTP-GET request with a custom string. Use this option to define the string.
     */
    httpGet?: pulumi.Input<string>;
    /**
     * String that you expect to see in the HTTP-GET requests of the traffic to be monitored.
     */
    httpMatch?: pulumi.Input<string>;
    /**
     * Detection interval (1 - 3600 sec, default = 5).
     */
    interval?: pulumi.Input<number>;
    /**
     * Link monitor name.
     */
    name?: pulumi.Input<string>;
    /**
     * Packet size of a twamp test session,
     */
    packetSize?: pulumi.Input<number>;
    /**
     * Twamp controller password in authentication mode
     */
    password?: pulumi.Input<string>;
    /**
     * Port number of the traffic to be used to monitor the server.
     */
    port?: pulumi.Input<number>;
    /**
     * Number of most recent probes that should be used to calculate latency and jitter (5 - 30, default = 30).
     */
    probeCount?: pulumi.Input<number>;
    /**
     * Time to wait before a probe packet is considered lost (500 - 5000 msec, default = 500).
     */
    probeTimeout?: pulumi.Input<number>;
    /**
     * Protocols used to monitor the server.
     */
    protocol?: pulumi.Input<string>;
    /**
     * Number of successful responses received before server is considered recovered (1 - 10, default = 5).
     */
    recoverytime?: pulumi.Input<number>;
    /**
     * Twamp controller security mode. Valid values: `none`, `authentication`.
     */
    securityMode?: pulumi.Input<string>;
    /**
     * IP address of the server(s) to be monitored. The structure of `server` block is documented below.
     */
    servers: pulumi.Input<pulumi.Input<inputs.SystemLinkMonitorServer>[]>;
    /**
     * Source IP address used in packet to the server.
     */
    sourceIp?: pulumi.Input<string>;
    /**
     * Source IPv6 address used in packet to the server.
     */
    sourceIp6?: pulumi.Input<string>;
    /**
     * Interface that receives the traffic to be monitored.
     */
    srcintf?: pulumi.Input<string>;
    /**
     * Enable/disable this link monitor. Valid values: `enable`, `disable`.
     */
    status?: pulumi.Input<string>;
    /**
     * Enable/disable update cascade interface. Valid values: `enable`, `disable`.
     */
    updateCascadeInterface?: pulumi.Input<string>;
    /**
     * Enable/disable updating the static route. Valid values: `enable`, `disable`.
     */
    updateStaticRoute?: pulumi.Input<string>;
    /**
     * Specifies the vdom to which the resource will be applied when the FortiGate unit is running in VDOM mode. Only one vdom can be specified. If you want to inherit the vdom configuration of the provider, please do not set this parameter.
     */
    vdomparam?: pulumi.Input<string>;
}
