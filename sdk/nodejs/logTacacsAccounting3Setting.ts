// *** WARNING: this file was generated by the Pulumi Terraform Bridge (tfgen) Tool. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

import * as pulumi from "@pulumi/pulumi";
import * as utilities from "./utilities";

/**
 * Settings for TACACS+ accounting. Applies to FortiOS Version `>= 7.0.2`.
 *
 * ## Import
 *
 * LogTacacsAccounting3 Setting can be imported using any of these accepted formats$ export "FORTIOS_IMPORT_TABLE"="true"
 *
 * ```sh
 *  $ pulumi import fortios:index/logTacacsAccounting3Setting:LogTacacsAccounting3Setting labelname LogTacacsAccounting3Setting
 * ```
 *
 *  $ unset "FORTIOS_IMPORT_TABLE"
 */
export class LogTacacsAccounting3Setting extends pulumi.CustomResource {
    /**
     * Get an existing LogTacacsAccounting3Setting resource's state with the given name, ID, and optional extra
     * properties used to qualify the lookup.
     *
     * @param name The _unique_ name of the resulting resource.
     * @param id The _unique_ provider ID of the resource to lookup.
     * @param state Any extra arguments used during the lookup.
     * @param opts Optional settings to control the behavior of the CustomResource.
     */
    public static get(name: string, id: pulumi.Input<pulumi.ID>, state?: LogTacacsAccounting3SettingState, opts?: pulumi.CustomResourceOptions): LogTacacsAccounting3Setting {
        return new LogTacacsAccounting3Setting(name, <any>state, { ...opts, id: id });
    }

    /** @internal */
    public static readonly __pulumiType = 'fortios:index/logTacacsAccounting3Setting:LogTacacsAccounting3Setting';

    /**
     * Returns true if the given object is an instance of LogTacacsAccounting3Setting.  This is designed to work even
     * when multiple copies of the Pulumi SDK have been loaded into the same process.
     */
    public static isInstance(obj: any): obj is LogTacacsAccounting3Setting {
        if (obj === undefined || obj === null) {
            return false;
        }
        return obj['__pulumiType'] === LogTacacsAccounting3Setting.__pulumiType;
    }

    /**
     * Address of TACACS+ server.
     */
    public readonly server!: pulumi.Output<string>;
    /**
     * Key to access the TACACS+ server.
     */
    public readonly serverKey!: pulumi.Output<string | undefined>;
    /**
     * Enable/disable TACACS+ accounting. Valid values: `enable`, `disable`.
     */
    public readonly status!: pulumi.Output<string>;
    /**
     * Specifies the vdom to which the resource will be applied when the FortiGate unit is running in VDOM mode. Only one vdom can be specified. If you want to inherit the vdom configuration of the provider, please do not set this parameter.
     */
    public readonly vdomparam!: pulumi.Output<string | undefined>;

    /**
     * Create a LogTacacsAccounting3Setting resource with the given unique name, arguments, and options.
     *
     * @param name The _unique_ name of the resource.
     * @param args The arguments to use to populate this resource's properties.
     * @param opts A bag of options that control this resource's behavior.
     */
    constructor(name: string, args?: LogTacacsAccounting3SettingArgs, opts?: pulumi.CustomResourceOptions)
    constructor(name: string, argsOrState?: LogTacacsAccounting3SettingArgs | LogTacacsAccounting3SettingState, opts?: pulumi.CustomResourceOptions) {
        let resourceInputs: pulumi.Inputs = {};
        opts = opts || {};
        if (opts.id) {
            const state = argsOrState as LogTacacsAccounting3SettingState | undefined;
            resourceInputs["server"] = state ? state.server : undefined;
            resourceInputs["serverKey"] = state ? state.serverKey : undefined;
            resourceInputs["status"] = state ? state.status : undefined;
            resourceInputs["vdomparam"] = state ? state.vdomparam : undefined;
        } else {
            const args = argsOrState as LogTacacsAccounting3SettingArgs | undefined;
            resourceInputs["server"] = args ? args.server : undefined;
            resourceInputs["serverKey"] = args ? args.serverKey : undefined;
            resourceInputs["status"] = args ? args.status : undefined;
            resourceInputs["vdomparam"] = args ? args.vdomparam : undefined;
        }
        opts = pulumi.mergeOptions(utilities.resourceOptsDefaults(), opts);
        super(LogTacacsAccounting3Setting.__pulumiType, name, resourceInputs, opts);
    }
}

/**
 * Input properties used for looking up and filtering LogTacacsAccounting3Setting resources.
 */
export interface LogTacacsAccounting3SettingState {
    /**
     * Address of TACACS+ server.
     */
    server?: pulumi.Input<string>;
    /**
     * Key to access the TACACS+ server.
     */
    serverKey?: pulumi.Input<string>;
    /**
     * Enable/disable TACACS+ accounting. Valid values: `enable`, `disable`.
     */
    status?: pulumi.Input<string>;
    /**
     * Specifies the vdom to which the resource will be applied when the FortiGate unit is running in VDOM mode. Only one vdom can be specified. If you want to inherit the vdom configuration of the provider, please do not set this parameter.
     */
    vdomparam?: pulumi.Input<string>;
}

/**
 * The set of arguments for constructing a LogTacacsAccounting3Setting resource.
 */
export interface LogTacacsAccounting3SettingArgs {
    /**
     * Address of TACACS+ server.
     */
    server?: pulumi.Input<string>;
    /**
     * Key to access the TACACS+ server.
     */
    serverKey?: pulumi.Input<string>;
    /**
     * Enable/disable TACACS+ accounting. Valid values: `enable`, `disable`.
     */
    status?: pulumi.Input<string>;
    /**
     * Specifies the vdom to which the resource will be applied when the FortiGate unit is running in VDOM mode. Only one vdom can be specified. If you want to inherit the vdom configuration of the provider, please do not set this parameter.
     */
    vdomparam?: pulumi.Input<string>;
}
