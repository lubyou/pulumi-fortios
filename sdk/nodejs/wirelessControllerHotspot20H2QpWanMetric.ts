// *** WARNING: this file was generated by the Pulumi Terraform Bridge (tfgen) Tool. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

import * as pulumi from "@pulumi/pulumi";
import * as utilities from "./utilities";

export class WirelessControllerHotspot20H2QpWanMetric extends pulumi.CustomResource {
    /**
     * Get an existing WirelessControllerHotspot20H2QpWanMetric resource's state with the given name, ID, and optional extra
     * properties used to qualify the lookup.
     *
     * @param name The _unique_ name of the resulting resource.
     * @param id The _unique_ provider ID of the resource to lookup.
     * @param state Any extra arguments used during the lookup.
     * @param opts Optional settings to control the behavior of the CustomResource.
     */
    public static get(name: string, id: pulumi.Input<pulumi.ID>, state?: WirelessControllerHotspot20H2QpWanMetricState, opts?: pulumi.CustomResourceOptions): WirelessControllerHotspot20H2QpWanMetric {
        return new WirelessControllerHotspot20H2QpWanMetric(name, <any>state, { ...opts, id: id });
    }

    /** @internal */
    public static readonly __pulumiType = 'fortios:index/wirelessControllerHotspot20H2QpWanMetric:WirelessControllerHotspot20H2QpWanMetric';

    /**
     * Returns true if the given object is an instance of WirelessControllerHotspot20H2QpWanMetric.  This is designed to work even
     * when multiple copies of the Pulumi SDK have been loaded into the same process.
     */
    public static isInstance(obj: any): obj is WirelessControllerHotspot20H2QpWanMetric {
        if (obj === undefined || obj === null) {
            return false;
        }
        return obj['__pulumiType'] === WirelessControllerHotspot20H2QpWanMetric.__pulumiType;
    }

    public readonly downlinkLoad!: pulumi.Output<number>;
    public readonly downlinkSpeed!: pulumi.Output<number>;
    public readonly linkAtCapacity!: pulumi.Output<string>;
    public readonly linkStatus!: pulumi.Output<string>;
    public readonly loadMeasurementDuration!: pulumi.Output<number>;
    public readonly name!: pulumi.Output<string>;
    public readonly symmetricWanLink!: pulumi.Output<string>;
    public readonly uplinkLoad!: pulumi.Output<number>;
    public readonly uplinkSpeed!: pulumi.Output<number>;
    public readonly vdomparam!: pulumi.Output<string | undefined>;

    /**
     * Create a WirelessControllerHotspot20H2QpWanMetric resource with the given unique name, arguments, and options.
     *
     * @param name The _unique_ name of the resource.
     * @param args The arguments to use to populate this resource's properties.
     * @param opts A bag of options that control this resource's behavior.
     */
    constructor(name: string, args?: WirelessControllerHotspot20H2QpWanMetricArgs, opts?: pulumi.CustomResourceOptions)
    constructor(name: string, argsOrState?: WirelessControllerHotspot20H2QpWanMetricArgs | WirelessControllerHotspot20H2QpWanMetricState, opts?: pulumi.CustomResourceOptions) {
        let resourceInputs: pulumi.Inputs = {};
        opts = opts || {};
        if (opts.id) {
            const state = argsOrState as WirelessControllerHotspot20H2QpWanMetricState | undefined;
            resourceInputs["downlinkLoad"] = state ? state.downlinkLoad : undefined;
            resourceInputs["downlinkSpeed"] = state ? state.downlinkSpeed : undefined;
            resourceInputs["linkAtCapacity"] = state ? state.linkAtCapacity : undefined;
            resourceInputs["linkStatus"] = state ? state.linkStatus : undefined;
            resourceInputs["loadMeasurementDuration"] = state ? state.loadMeasurementDuration : undefined;
            resourceInputs["name"] = state ? state.name : undefined;
            resourceInputs["symmetricWanLink"] = state ? state.symmetricWanLink : undefined;
            resourceInputs["uplinkLoad"] = state ? state.uplinkLoad : undefined;
            resourceInputs["uplinkSpeed"] = state ? state.uplinkSpeed : undefined;
            resourceInputs["vdomparam"] = state ? state.vdomparam : undefined;
        } else {
            const args = argsOrState as WirelessControllerHotspot20H2QpWanMetricArgs | undefined;
            resourceInputs["downlinkLoad"] = args ? args.downlinkLoad : undefined;
            resourceInputs["downlinkSpeed"] = args ? args.downlinkSpeed : undefined;
            resourceInputs["linkAtCapacity"] = args ? args.linkAtCapacity : undefined;
            resourceInputs["linkStatus"] = args ? args.linkStatus : undefined;
            resourceInputs["loadMeasurementDuration"] = args ? args.loadMeasurementDuration : undefined;
            resourceInputs["name"] = args ? args.name : undefined;
            resourceInputs["symmetricWanLink"] = args ? args.symmetricWanLink : undefined;
            resourceInputs["uplinkLoad"] = args ? args.uplinkLoad : undefined;
            resourceInputs["uplinkSpeed"] = args ? args.uplinkSpeed : undefined;
            resourceInputs["vdomparam"] = args ? args.vdomparam : undefined;
        }
        opts = pulumi.mergeOptions(utilities.resourceOptsDefaults(), opts);
        super(WirelessControllerHotspot20H2QpWanMetric.__pulumiType, name, resourceInputs, opts);
    }
}

/**
 * Input properties used for looking up and filtering WirelessControllerHotspot20H2QpWanMetric resources.
 */
export interface WirelessControllerHotspot20H2QpWanMetricState {
    downlinkLoad?: pulumi.Input<number>;
    downlinkSpeed?: pulumi.Input<number>;
    linkAtCapacity?: pulumi.Input<string>;
    linkStatus?: pulumi.Input<string>;
    loadMeasurementDuration?: pulumi.Input<number>;
    name?: pulumi.Input<string>;
    symmetricWanLink?: pulumi.Input<string>;
    uplinkLoad?: pulumi.Input<number>;
    uplinkSpeed?: pulumi.Input<number>;
    vdomparam?: pulumi.Input<string>;
}

/**
 * The set of arguments for constructing a WirelessControllerHotspot20H2QpWanMetric resource.
 */
export interface WirelessControllerHotspot20H2QpWanMetricArgs {
    downlinkLoad?: pulumi.Input<number>;
    downlinkSpeed?: pulumi.Input<number>;
    linkAtCapacity?: pulumi.Input<string>;
    linkStatus?: pulumi.Input<string>;
    loadMeasurementDuration?: pulumi.Input<number>;
    name?: pulumi.Input<string>;
    symmetricWanLink?: pulumi.Input<string>;
    uplinkLoad?: pulumi.Input<number>;
    uplinkSpeed?: pulumi.Input<number>;
    vdomparam?: pulumi.Input<string>;
}
