// *** WARNING: this file was generated by the Pulumi Terraform Bridge (tfgen) Tool. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

import * as pulumi from "@pulumi/pulumi";
import * as utilities from "./utilities";

/**
 * Configure SSL servers.
 *
 * ## Example Usage
 *
 * ```typescript
 * import * as pulumi from "@pulumi/pulumi";
 * import * as fortios from "@pulumi/fortios";
 *
 * const trname = new fortios.FirewallSslServer("trname", {
 *     addHeaderXForwardedProto: "enable",
 *     ip: "1.1.1.1",
 *     mappedPort: 2234,
 *     port: 32321,
 *     sslAlgorithm: "high",
 *     sslCert: "Fortinet_CA_SSL",
 *     sslClientRenegotiation: "allow",
 *     sslDhBits: "2048",
 *     sslMaxVersion: "tls-1.2",
 *     sslMinVersion: "tls-1.1",
 *     sslMode: "half",
 *     sslSendEmptyFrags: "enable",
 *     urlRewrite: "disable",
 * });
 * ```
 *
 * ## Import
 *
 * Firewall SslServer can be imported using any of these accepted formats$ export "FORTIOS_IMPORT_TABLE"="true"
 *
 * ```sh
 *  $ pulumi import fortios:index/firewallSslServer:FirewallSslServer labelname {{name}}
 * ```
 *
 *  $ unset "FORTIOS_IMPORT_TABLE"
 */
export class FirewallSslServer extends pulumi.CustomResource {
    /**
     * Get an existing FirewallSslServer resource's state with the given name, ID, and optional extra
     * properties used to qualify the lookup.
     *
     * @param name The _unique_ name of the resulting resource.
     * @param id The _unique_ provider ID of the resource to lookup.
     * @param state Any extra arguments used during the lookup.
     * @param opts Optional settings to control the behavior of the CustomResource.
     */
    public static get(name: string, id: pulumi.Input<pulumi.ID>, state?: FirewallSslServerState, opts?: pulumi.CustomResourceOptions): FirewallSslServer {
        return new FirewallSslServer(name, <any>state, { ...opts, id: id });
    }

    /** @internal */
    public static readonly __pulumiType = 'fortios:index/firewallSslServer:FirewallSslServer';

    /**
     * Returns true if the given object is an instance of FirewallSslServer.  This is designed to work even
     * when multiple copies of the Pulumi SDK have been loaded into the same process.
     */
    public static isInstance(obj: any): obj is FirewallSslServer {
        if (obj === undefined || obj === null) {
            return false;
        }
        return obj['__pulumiType'] === FirewallSslServer.__pulumiType;
    }

    /**
     * Enable/disable adding an X-Forwarded-Proto header to forwarded requests. Valid values: `enable`, `disable`.
     */
    public readonly addHeaderXForwardedProto!: pulumi.Output<string>;
    /**
     * IPv4 address of the SSL server.
     */
    public readonly ip!: pulumi.Output<string>;
    /**
     * Mapped server service port (1 - 65535, default = 80).
     */
    public readonly mappedPort!: pulumi.Output<number>;
    /**
     * Server name.
     */
    public readonly name!: pulumi.Output<string>;
    /**
     * Server service port (1 - 65535, default = 443).
     */
    public readonly port!: pulumi.Output<number>;
    /**
     * Relative strength of encryption algorithms accepted in negotiation. Valid values: `high`, `medium`, `low`.
     */
    public readonly sslAlgorithm!: pulumi.Output<string>;
    /**
     * Name of certificate for SSL connections to this server (default = "Fortinet_CA_SSL").
     */
    public readonly sslCert!: pulumi.Output<string>;
    /**
     * Allow or block client renegotiation by server. Valid values: `allow`, `deny`, `secure`.
     */
    public readonly sslClientRenegotiation!: pulumi.Output<string>;
    /**
     * Bit-size of Diffie-Hellman (DH) prime used in DHE-RSA negotiation (default = 2048). Valid values: `768`, `1024`, `1536`, `2048`.
     */
    public readonly sslDhBits!: pulumi.Output<string>;
    /**
     * Highest SSL/TLS version to negotiate. Valid values: `tls-1.0`, `tls-1.1`, `tls-1.2`.
     */
    public readonly sslMaxVersion!: pulumi.Output<string>;
    /**
     * Lowest SSL/TLS version to negotiate. Valid values: `tls-1.0`, `tls-1.1`, `tls-1.2`.
     */
    public readonly sslMinVersion!: pulumi.Output<string>;
    /**
     * SSL/TLS mode for encryption and decryption of traffic. Valid values: `half`, `full`.
     */
    public readonly sslMode!: pulumi.Output<string>;
    /**
     * Enable/disable sending empty fragments to avoid attack on CBC IV. Valid values: `enable`, `disable`.
     */
    public readonly sslSendEmptyFrags!: pulumi.Output<string>;
    /**
     * Enable/disable rewriting the URL. Valid values: `enable`, `disable`.
     */
    public readonly urlRewrite!: pulumi.Output<string>;
    /**
     * Specifies the vdom to which the resource will be applied when the FortiGate unit is running in VDOM mode. Only one vdom can be specified. If you want to inherit the vdom configuration of the provider, please do not set this parameter.
     */
    public readonly vdomparam!: pulumi.Output<string | undefined>;

    /**
     * Create a FirewallSslServer resource with the given unique name, arguments, and options.
     *
     * @param name The _unique_ name of the resource.
     * @param args The arguments to use to populate this resource's properties.
     * @param opts A bag of options that control this resource's behavior.
     */
    constructor(name: string, args: FirewallSslServerArgs, opts?: pulumi.CustomResourceOptions)
    constructor(name: string, argsOrState?: FirewallSslServerArgs | FirewallSslServerState, opts?: pulumi.CustomResourceOptions) {
        let inputs: pulumi.Inputs = {};
        opts = opts || {};
        if (opts.id) {
            const state = argsOrState as FirewallSslServerState | undefined;
            inputs["addHeaderXForwardedProto"] = state ? state.addHeaderXForwardedProto : undefined;
            inputs["ip"] = state ? state.ip : undefined;
            inputs["mappedPort"] = state ? state.mappedPort : undefined;
            inputs["name"] = state ? state.name : undefined;
            inputs["port"] = state ? state.port : undefined;
            inputs["sslAlgorithm"] = state ? state.sslAlgorithm : undefined;
            inputs["sslCert"] = state ? state.sslCert : undefined;
            inputs["sslClientRenegotiation"] = state ? state.sslClientRenegotiation : undefined;
            inputs["sslDhBits"] = state ? state.sslDhBits : undefined;
            inputs["sslMaxVersion"] = state ? state.sslMaxVersion : undefined;
            inputs["sslMinVersion"] = state ? state.sslMinVersion : undefined;
            inputs["sslMode"] = state ? state.sslMode : undefined;
            inputs["sslSendEmptyFrags"] = state ? state.sslSendEmptyFrags : undefined;
            inputs["urlRewrite"] = state ? state.urlRewrite : undefined;
            inputs["vdomparam"] = state ? state.vdomparam : undefined;
        } else {
            const args = argsOrState as FirewallSslServerArgs | undefined;
            if ((!args || args.ip === undefined) && !opts.urn) {
                throw new Error("Missing required property 'ip'");
            }
            if ((!args || args.port === undefined) && !opts.urn) {
                throw new Error("Missing required property 'port'");
            }
            if ((!args || args.sslCert === undefined) && !opts.urn) {
                throw new Error("Missing required property 'sslCert'");
            }
            inputs["addHeaderXForwardedProto"] = args ? args.addHeaderXForwardedProto : undefined;
            inputs["ip"] = args ? args.ip : undefined;
            inputs["mappedPort"] = args ? args.mappedPort : undefined;
            inputs["name"] = args ? args.name : undefined;
            inputs["port"] = args ? args.port : undefined;
            inputs["sslAlgorithm"] = args ? args.sslAlgorithm : undefined;
            inputs["sslCert"] = args ? args.sslCert : undefined;
            inputs["sslClientRenegotiation"] = args ? args.sslClientRenegotiation : undefined;
            inputs["sslDhBits"] = args ? args.sslDhBits : undefined;
            inputs["sslMaxVersion"] = args ? args.sslMaxVersion : undefined;
            inputs["sslMinVersion"] = args ? args.sslMinVersion : undefined;
            inputs["sslMode"] = args ? args.sslMode : undefined;
            inputs["sslSendEmptyFrags"] = args ? args.sslSendEmptyFrags : undefined;
            inputs["urlRewrite"] = args ? args.urlRewrite : undefined;
            inputs["vdomparam"] = args ? args.vdomparam : undefined;
        }
        if (!opts.version) {
            opts = pulumi.mergeOptions(opts, { version: utilities.getVersion()});
        }
        super(FirewallSslServer.__pulumiType, name, inputs, opts);
    }
}

/**
 * Input properties used for looking up and filtering FirewallSslServer resources.
 */
export interface FirewallSslServerState {
    /**
     * Enable/disable adding an X-Forwarded-Proto header to forwarded requests. Valid values: `enable`, `disable`.
     */
    addHeaderXForwardedProto?: pulumi.Input<string>;
    /**
     * IPv4 address of the SSL server.
     */
    ip?: pulumi.Input<string>;
    /**
     * Mapped server service port (1 - 65535, default = 80).
     */
    mappedPort?: pulumi.Input<number>;
    /**
     * Server name.
     */
    name?: pulumi.Input<string>;
    /**
     * Server service port (1 - 65535, default = 443).
     */
    port?: pulumi.Input<number>;
    /**
     * Relative strength of encryption algorithms accepted in negotiation. Valid values: `high`, `medium`, `low`.
     */
    sslAlgorithm?: pulumi.Input<string>;
    /**
     * Name of certificate for SSL connections to this server (default = "Fortinet_CA_SSL").
     */
    sslCert?: pulumi.Input<string>;
    /**
     * Allow or block client renegotiation by server. Valid values: `allow`, `deny`, `secure`.
     */
    sslClientRenegotiation?: pulumi.Input<string>;
    /**
     * Bit-size of Diffie-Hellman (DH) prime used in DHE-RSA negotiation (default = 2048). Valid values: `768`, `1024`, `1536`, `2048`.
     */
    sslDhBits?: pulumi.Input<string>;
    /**
     * Highest SSL/TLS version to negotiate. Valid values: `tls-1.0`, `tls-1.1`, `tls-1.2`.
     */
    sslMaxVersion?: pulumi.Input<string>;
    /**
     * Lowest SSL/TLS version to negotiate. Valid values: `tls-1.0`, `tls-1.1`, `tls-1.2`.
     */
    sslMinVersion?: pulumi.Input<string>;
    /**
     * SSL/TLS mode for encryption and decryption of traffic. Valid values: `half`, `full`.
     */
    sslMode?: pulumi.Input<string>;
    /**
     * Enable/disable sending empty fragments to avoid attack on CBC IV. Valid values: `enable`, `disable`.
     */
    sslSendEmptyFrags?: pulumi.Input<string>;
    /**
     * Enable/disable rewriting the URL. Valid values: `enable`, `disable`.
     */
    urlRewrite?: pulumi.Input<string>;
    /**
     * Specifies the vdom to which the resource will be applied when the FortiGate unit is running in VDOM mode. Only one vdom can be specified. If you want to inherit the vdom configuration of the provider, please do not set this parameter.
     */
    vdomparam?: pulumi.Input<string>;
}

/**
 * The set of arguments for constructing a FirewallSslServer resource.
 */
export interface FirewallSslServerArgs {
    /**
     * Enable/disable adding an X-Forwarded-Proto header to forwarded requests. Valid values: `enable`, `disable`.
     */
    addHeaderXForwardedProto?: pulumi.Input<string>;
    /**
     * IPv4 address of the SSL server.
     */
    ip: pulumi.Input<string>;
    /**
     * Mapped server service port (1 - 65535, default = 80).
     */
    mappedPort?: pulumi.Input<number>;
    /**
     * Server name.
     */
    name?: pulumi.Input<string>;
    /**
     * Server service port (1 - 65535, default = 443).
     */
    port: pulumi.Input<number>;
    /**
     * Relative strength of encryption algorithms accepted in negotiation. Valid values: `high`, `medium`, `low`.
     */
    sslAlgorithm?: pulumi.Input<string>;
    /**
     * Name of certificate for SSL connections to this server (default = "Fortinet_CA_SSL").
     */
    sslCert: pulumi.Input<string>;
    /**
     * Allow or block client renegotiation by server. Valid values: `allow`, `deny`, `secure`.
     */
    sslClientRenegotiation?: pulumi.Input<string>;
    /**
     * Bit-size of Diffie-Hellman (DH) prime used in DHE-RSA negotiation (default = 2048). Valid values: `768`, `1024`, `1536`, `2048`.
     */
    sslDhBits?: pulumi.Input<string>;
    /**
     * Highest SSL/TLS version to negotiate. Valid values: `tls-1.0`, `tls-1.1`, `tls-1.2`.
     */
    sslMaxVersion?: pulumi.Input<string>;
    /**
     * Lowest SSL/TLS version to negotiate. Valid values: `tls-1.0`, `tls-1.1`, `tls-1.2`.
     */
    sslMinVersion?: pulumi.Input<string>;
    /**
     * SSL/TLS mode for encryption and decryption of traffic. Valid values: `half`, `full`.
     */
    sslMode?: pulumi.Input<string>;
    /**
     * Enable/disable sending empty fragments to avoid attack on CBC IV. Valid values: `enable`, `disable`.
     */
    sslSendEmptyFrags?: pulumi.Input<string>;
    /**
     * Enable/disable rewriting the URL. Valid values: `enable`, `disable`.
     */
    urlRewrite?: pulumi.Input<string>;
    /**
     * Specifies the vdom to which the resource will be applied when the FortiGate unit is running in VDOM mode. Only one vdom can be specified. If you want to inherit the vdom configuration of the provider, please do not set this parameter.
     */
    vdomparam?: pulumi.Input<string>;
}
