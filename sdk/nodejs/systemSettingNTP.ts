// *** WARNING: this file was generated by the Pulumi Terraform Bridge (tfgen) Tool. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

import * as pulumi from "@pulumi/pulumi";
import * as utilities from "./utilities";

/**
 * Provides a resource to configure Network Time Protocol (NTP) servers of FortiOS.
 *
 * !> **Warning:** The resource will be deprecated and replaced by new resource `fortios.SystemNtp`, we recommend that you use the new resource.
 *
 * ## Example Usage
 *
 * ```typescript
 * import * as pulumi from "@pulumi/pulumi";
 * import * as fortios from "@pulumi/fortios";
 *
 * const test2 = new fortios.SystemSettingNTP("test2", {
 *     ntpservers: [
 *         "1.1.1.1",
 *         "3.3.3.3",
 *     ],
 *     ntpsync: "disable",
 *     type: "custom",
 * });
 * ```
 */
export class SystemSettingNTP extends pulumi.CustomResource {
    /**
     * Get an existing SystemSettingNTP resource's state with the given name, ID, and optional extra
     * properties used to qualify the lookup.
     *
     * @param name The _unique_ name of the resulting resource.
     * @param id The _unique_ provider ID of the resource to lookup.
     * @param state Any extra arguments used during the lookup.
     * @param opts Optional settings to control the behavior of the CustomResource.
     */
    public static get(name: string, id: pulumi.Input<pulumi.ID>, state?: SystemSettingNTPState, opts?: pulumi.CustomResourceOptions): SystemSettingNTP {
        return new SystemSettingNTP(name, <any>state, { ...opts, id: id });
    }

    /** @internal */
    public static readonly __pulumiType = 'fortios:index/systemSettingNTP:SystemSettingNTP';

    /**
     * Returns true if the given object is an instance of SystemSettingNTP.  This is designed to work even
     * when multiple copies of the Pulumi SDK have been loaded into the same process.
     */
    public static isInstance(obj: any): obj is SystemSettingNTP {
        if (obj === undefined || obj === null) {
            return false;
        }
        return obj['__pulumiType'] === SystemSettingNTP.__pulumiType;
    }

    /**
     * Configure the FortiGate to connect to any available third-party NTP server.
     */
    public readonly ntpservers!: pulumi.Output<string[]>;
    /**
     * Enable/disable setting the FortiGate system time by synchronizing with an NTP Server.
     */
    public readonly ntpsync!: pulumi.Output<string>;
    /**
     * Use the FortiGuard NTP server or any other available NTP Server.
     */
    public readonly type!: pulumi.Output<string>;

    /**
     * Create a SystemSettingNTP resource with the given unique name, arguments, and options.
     *
     * @param name The _unique_ name of the resource.
     * @param args The arguments to use to populate this resource's properties.
     * @param opts A bag of options that control this resource's behavior.
     */
    constructor(name: string, args: SystemSettingNTPArgs, opts?: pulumi.CustomResourceOptions)
    constructor(name: string, argsOrState?: SystemSettingNTPArgs | SystemSettingNTPState, opts?: pulumi.CustomResourceOptions) {
        let inputs: pulumi.Inputs = {};
        opts = opts || {};
        if (opts.id) {
            const state = argsOrState as SystemSettingNTPState | undefined;
            inputs["ntpservers"] = state ? state.ntpservers : undefined;
            inputs["ntpsync"] = state ? state.ntpsync : undefined;
            inputs["type"] = state ? state.type : undefined;
        } else {
            const args = argsOrState as SystemSettingNTPArgs | undefined;
            if ((!args || args.type === undefined) && !opts.urn) {
                throw new Error("Missing required property 'type'");
            }
            inputs["ntpservers"] = args ? args.ntpservers : undefined;
            inputs["ntpsync"] = args ? args.ntpsync : undefined;
            inputs["type"] = args ? args.type : undefined;
        }
        if (!opts.version) {
            opts = pulumi.mergeOptions(opts, { version: utilities.getVersion()});
        }
        super(SystemSettingNTP.__pulumiType, name, inputs, opts);
    }
}

/**
 * Input properties used for looking up and filtering SystemSettingNTP resources.
 */
export interface SystemSettingNTPState {
    /**
     * Configure the FortiGate to connect to any available third-party NTP server.
     */
    ntpservers?: pulumi.Input<pulumi.Input<string>[]>;
    /**
     * Enable/disable setting the FortiGate system time by synchronizing with an NTP Server.
     */
    ntpsync?: pulumi.Input<string>;
    /**
     * Use the FortiGuard NTP server or any other available NTP Server.
     */
    type?: pulumi.Input<string>;
}

/**
 * The set of arguments for constructing a SystemSettingNTP resource.
 */
export interface SystemSettingNTPArgs {
    /**
     * Configure the FortiGate to connect to any available third-party NTP server.
     */
    ntpservers?: pulumi.Input<pulumi.Input<string>[]>;
    /**
     * Enable/disable setting the FortiGate system time by synchronizing with an NTP Server.
     */
    ntpsync?: pulumi.Input<string>;
    /**
     * Use the FortiGuard NTP server or any other available NTP Server.
     */
    type: pulumi.Input<string>;
}
