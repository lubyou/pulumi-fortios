// *** WARNING: this file was generated by the Pulumi Terraform Bridge (tfgen) Tool. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

import * as pulumi from "@pulumi/pulumi";
import * as utilities from "./utilities";

/**
 * Configure L2TP.
 *
 * ## Import
 *
 * Vpn L2Tp can be imported using any of these accepted formats$ export "FORTIOS_IMPORT_TABLE"="true"
 *
 * ```sh
 *  $ pulumi import fortios:index/vpnL2Tp:VpnL2Tp labelname VpnL2Tp
 * ```
 *
 *  $ unset "FORTIOS_IMPORT_TABLE"
 */
export class VpnL2Tp extends pulumi.CustomResource {
    /**
     * Get an existing VpnL2Tp resource's state with the given name, ID, and optional extra
     * properties used to qualify the lookup.
     *
     * @param name The _unique_ name of the resulting resource.
     * @param id The _unique_ provider ID of the resource to lookup.
     * @param state Any extra arguments used during the lookup.
     * @param opts Optional settings to control the behavior of the CustomResource.
     */
    public static get(name: string, id: pulumi.Input<pulumi.ID>, state?: VpnL2TpState, opts?: pulumi.CustomResourceOptions): VpnL2Tp {
        return new VpnL2Tp(name, <any>state, { ...opts, id: id });
    }

    /** @internal */
    public static readonly __pulumiType = 'fortios:index/vpnL2Tp:VpnL2Tp';

    /**
     * Returns true if the given object is an instance of VpnL2Tp.  This is designed to work even
     * when multiple copies of the Pulumi SDK have been loaded into the same process.
     */
    public static isInstance(obj: any): obj is VpnL2Tp {
        if (obj === undefined || obj === null) {
            return false;
        }
        return obj['__pulumiType'] === VpnL2Tp.__pulumiType;
    }

    /**
     * Enable/disable data compression. Valid values: `enable`, `disable`.
     */
    public readonly compress!: pulumi.Output<string>;
    /**
     * End IP.
     */
    public readonly eip!: pulumi.Output<string>;
    /**
     * Enable/disable IPsec enforcement. Valid values: `enable`, `disable`.
     */
    public readonly enforceIpsec!: pulumi.Output<string>;
    /**
     * Time in seconds between PPPoE Link Control Protocol (LCP) echo requests.
     */
    public readonly lcpEchoInterval!: pulumi.Output<number>;
    /**
     * Maximum number of missed LCP echo messages before disconnect.
     */
    public readonly lcpMaxEchoFails!: pulumi.Output<number>;
    /**
     * Start IP.
     */
    public readonly sip!: pulumi.Output<string>;
    /**
     * Enable/disable FortiGate as a L2TP gateway. Valid values: `enable`, `disable`.
     */
    public readonly status!: pulumi.Output<string>;
    /**
     * User group.
     */
    public readonly usrgrp!: pulumi.Output<string>;
    /**
     * Specifies the vdom to which the resource will be applied when the FortiGate unit is running in VDOM mode. Only one vdom can be specified. If you want to inherit the vdom configuration of the provider, please do not set this parameter.
     */
    public readonly vdomparam!: pulumi.Output<string | undefined>;

    /**
     * Create a VpnL2Tp resource with the given unique name, arguments, and options.
     *
     * @param name The _unique_ name of the resource.
     * @param args The arguments to use to populate this resource's properties.
     * @param opts A bag of options that control this resource's behavior.
     */
    constructor(name: string, args: VpnL2TpArgs, opts?: pulumi.CustomResourceOptions)
    constructor(name: string, argsOrState?: VpnL2TpArgs | VpnL2TpState, opts?: pulumi.CustomResourceOptions) {
        let inputs: pulumi.Inputs = {};
        opts = opts || {};
        if (opts.id) {
            const state = argsOrState as VpnL2TpState | undefined;
            inputs["compress"] = state ? state.compress : undefined;
            inputs["eip"] = state ? state.eip : undefined;
            inputs["enforceIpsec"] = state ? state.enforceIpsec : undefined;
            inputs["lcpEchoInterval"] = state ? state.lcpEchoInterval : undefined;
            inputs["lcpMaxEchoFails"] = state ? state.lcpMaxEchoFails : undefined;
            inputs["sip"] = state ? state.sip : undefined;
            inputs["status"] = state ? state.status : undefined;
            inputs["usrgrp"] = state ? state.usrgrp : undefined;
            inputs["vdomparam"] = state ? state.vdomparam : undefined;
        } else {
            const args = argsOrState as VpnL2TpArgs | undefined;
            if ((!args || args.status === undefined) && !opts.urn) {
                throw new Error("Missing required property 'status'");
            }
            inputs["compress"] = args ? args.compress : undefined;
            inputs["eip"] = args ? args.eip : undefined;
            inputs["enforceIpsec"] = args ? args.enforceIpsec : undefined;
            inputs["lcpEchoInterval"] = args ? args.lcpEchoInterval : undefined;
            inputs["lcpMaxEchoFails"] = args ? args.lcpMaxEchoFails : undefined;
            inputs["sip"] = args ? args.sip : undefined;
            inputs["status"] = args ? args.status : undefined;
            inputs["usrgrp"] = args ? args.usrgrp : undefined;
            inputs["vdomparam"] = args ? args.vdomparam : undefined;
        }
        if (!opts.version) {
            opts = pulumi.mergeOptions(opts, { version: utilities.getVersion()});
        }
        super(VpnL2Tp.__pulumiType, name, inputs, opts);
    }
}

/**
 * Input properties used for looking up and filtering VpnL2Tp resources.
 */
export interface VpnL2TpState {
    /**
     * Enable/disable data compression. Valid values: `enable`, `disable`.
     */
    compress?: pulumi.Input<string>;
    /**
     * End IP.
     */
    eip?: pulumi.Input<string>;
    /**
     * Enable/disable IPsec enforcement. Valid values: `enable`, `disable`.
     */
    enforceIpsec?: pulumi.Input<string>;
    /**
     * Time in seconds between PPPoE Link Control Protocol (LCP) echo requests.
     */
    lcpEchoInterval?: pulumi.Input<number>;
    /**
     * Maximum number of missed LCP echo messages before disconnect.
     */
    lcpMaxEchoFails?: pulumi.Input<number>;
    /**
     * Start IP.
     */
    sip?: pulumi.Input<string>;
    /**
     * Enable/disable FortiGate as a L2TP gateway. Valid values: `enable`, `disable`.
     */
    status?: pulumi.Input<string>;
    /**
     * User group.
     */
    usrgrp?: pulumi.Input<string>;
    /**
     * Specifies the vdom to which the resource will be applied when the FortiGate unit is running in VDOM mode. Only one vdom can be specified. If you want to inherit the vdom configuration of the provider, please do not set this parameter.
     */
    vdomparam?: pulumi.Input<string>;
}

/**
 * The set of arguments for constructing a VpnL2Tp resource.
 */
export interface VpnL2TpArgs {
    /**
     * Enable/disable data compression. Valid values: `enable`, `disable`.
     */
    compress?: pulumi.Input<string>;
    /**
     * End IP.
     */
    eip?: pulumi.Input<string>;
    /**
     * Enable/disable IPsec enforcement. Valid values: `enable`, `disable`.
     */
    enforceIpsec?: pulumi.Input<string>;
    /**
     * Time in seconds between PPPoE Link Control Protocol (LCP) echo requests.
     */
    lcpEchoInterval?: pulumi.Input<number>;
    /**
     * Maximum number of missed LCP echo messages before disconnect.
     */
    lcpMaxEchoFails?: pulumi.Input<number>;
    /**
     * Start IP.
     */
    sip?: pulumi.Input<string>;
    /**
     * Enable/disable FortiGate as a L2TP gateway. Valid values: `enable`, `disable`.
     */
    status: pulumi.Input<string>;
    /**
     * User group.
     */
    usrgrp?: pulumi.Input<string>;
    /**
     * Specifies the vdom to which the resource will be applied when the FortiGate unit is running in VDOM mode. Only one vdom can be specified. If you want to inherit the vdom configuration of the provider, please do not set this parameter.
     */
    vdomparam?: pulumi.Input<string>;
}
