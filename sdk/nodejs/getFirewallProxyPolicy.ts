// *** WARNING: this file was generated by the Pulumi Terraform Bridge (tfgen) Tool. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

import * as pulumi from "@pulumi/pulumi";
import { input as inputs, output as outputs } from "./types";
import * as utilities from "./utilities";

/**
 * Use this data source to get information on an fortios firewall proxypolicy
 */
export function getFirewallProxyPolicy(args: GetFirewallProxyPolicyArgs, opts?: pulumi.InvokeOptions): Promise<GetFirewallProxyPolicyResult> {
    if (!opts) {
        opts = {}
    }

    if (!opts.version) {
        opts.version = utilities.getVersion();
    }
    return pulumi.runtime.invoke("fortios:index/getFirewallProxyPolicy:GetFirewallProxyPolicy", {
        "policyid": args.policyid,
        "vdomparam": args.vdomparam,
    }, opts);
}

/**
 * A collection of arguments for invoking GetFirewallProxyPolicy.
 */
export interface GetFirewallProxyPolicyArgs {
    /**
     * Specify the policyid of the desired firewall proxypolicy.
     */
    policyid: number;
    /**
     * Specifies the vdom to which the data source will be applied when the FortiGate unit is running in VDOM mode. Only one vdom can be specified. If you want to inherit the vdom configuration of the provider, please do not set this parameter.
     */
    vdomparam?: string;
}

/**
 * A collection of values returned by GetFirewallProxyPolicy.
 */
export interface GetFirewallProxyPolicyResult {
    /**
     * Accept or deny traffic matching the policy parameters.
     */
    readonly action: string;
    /**
     * Name of an existing Application list.
     */
    readonly applicationList: string;
    /**
     * Name of an existing Antivirus profile.
     */
    readonly avProfile: string;
    /**
     * Name of an existing CIFS profile.
     */
    readonly cifsProfile: string;
    /**
     * Optional comments.
     */
    readonly comments: string;
    /**
     * Decrypted traffic mirror.
     */
    readonly decryptedTrafficMirror: string;
    /**
     * Web proxy disclaimer setting: by domain, policy, or user.
     */
    readonly disclaimer: string;
    /**
     * Name of an existing DLP sensor.
     */
    readonly dlpSensor: string;
    /**
     * IPv6 destination address objects. The structure of `dstaddr6` block is documented below.
     */
    readonly dstaddr6s: outputs.GetFirewallProxyPolicyDstaddr6[];
    /**
     * When enabled, destination addresses match against any address EXCEPT the specified destination addresses.
     */
    readonly dstaddrNegate: string;
    /**
     * Destination address objects. The structure of `dstaddr` block is documented below.
     */
    readonly dstaddrs: outputs.GetFirewallProxyPolicyDstaddr[];
    /**
     * Destination interface names. The structure of `dstintf` block is documented below.
     */
    readonly dstintfs: outputs.GetFirewallProxyPolicyDstintf[];
    /**
     * Name of an existing email filter profile.
     */
    readonly emailfilterProfile: string;
    /**
     * Name of an existing file-filter profile.
     */
    readonly fileFilterProfile: string;
    /**
     * Global web-based manager visible label.
     */
    readonly globalLabel: string;
    /**
     * Names of group objects. The structure of `groups` block is documented below.
     */
    readonly groups: outputs.GetFirewallProxyPolicyGroup[];
    /**
     * Enable/disable HTTP tunnel authentication.
     */
    readonly httpTunnelAuth: string;
    /**
     * Name of an existing ICAP profile.
     */
    readonly icapProfile: string;
    /**
     * The provider-assigned unique ID for this managed resource.
     */
    readonly id: string;
    /**
     * Enable/disable use of Internet Services for this policy. If enabled, destination address and service are not used.
     */
    readonly internetService: string;
    /**
     * Custom Internet Service group name. The structure of `internetServiceCustomGroup` block is documented below.
     */
    readonly internetServiceCustomGroups: outputs.GetFirewallProxyPolicyInternetServiceCustomGroup[];
    /**
     * Custom Internet Service name. The structure of `internetServiceCustom` block is documented below.
     */
    readonly internetServiceCustoms: outputs.GetFirewallProxyPolicyInternetServiceCustom[];
    /**
     * Internet Service group name. The structure of `internetServiceGroup` block is documented below.
     */
    readonly internetServiceGroups: outputs.GetFirewallProxyPolicyInternetServiceGroup[];
    /**
     * Internet Service ID. The structure of `internetServiceId` block is documented below.
     */
    readonly internetServiceIds: outputs.GetFirewallProxyPolicyInternetServiceId[];
    /**
     * Internet Service name. The structure of `internetServiceName` block is documented below.
     */
    readonly internetServiceNames: outputs.GetFirewallProxyPolicyInternetServiceName[];
    /**
     * When enabled, Internet Services match against any internet service EXCEPT the selected Internet Service.
     */
    readonly internetServiceNegate: string;
    /**
     * Name of an existing IPS sensor.
     */
    readonly ipsSensor: string;
    /**
     * VDOM-specific GUI visible label.
     */
    readonly label: string;
    /**
     * Enable/disable logging traffic through the policy.
     */
    readonly logtraffic: string;
    /**
     * Enable/disable policy log traffic start.
     */
    readonly logtrafficStart: string;
    /**
     * Group name.
     */
    readonly name: string;
    /**
     * Policy ID.
     */
    readonly policyid: number;
    /**
     * Name of IP pool object. The structure of `poolname` block is documented below.
     */
    readonly poolnames: outputs.GetFirewallProxyPolicyPoolname[];
    /**
     * Name of profile group.
     */
    readonly profileGroup: string;
    /**
     * Name of an existing Protocol options profile.
     */
    readonly profileProtocolOptions: string;
    /**
     * Determine whether the firewall policy allows security profile groups or single profiles only.
     */
    readonly profileType: string;
    /**
     * Type of explicit proxy.
     */
    readonly proxy: string;
    /**
     * Redirect URL for further explicit web proxy processing.
     */
    readonly redirectUrl: string;
    /**
     * Authentication replacement message override group.
     */
    readonly replacemsgOverrideGroup: string;
    /**
     * Enable/disable scanning of connections to Botnet servers.
     */
    readonly scanBotnetConnections: string;
    /**
     * Name of schedule object.
     */
    readonly schedule: string;
    /**
     * When enabled, services match against any service EXCEPT the specified destination services.
     */
    readonly serviceNegate: string;
    /**
     * Name of service objects. The structure of `service` block is documented below.
     */
    readonly services: outputs.GetFirewallProxyPolicyService[];
    /**
     * TTL in seconds for sessions accepted by this policy (0 means use the system default session TTL).
     */
    readonly sessionTtl: number;
    /**
     * Name of an existing Spam filter profile.
     */
    readonly spamfilterProfile: string;
    /**
     * IPv6 source address objects. The structure of `srcaddr6` block is documented below.
     */
    readonly srcaddr6s: outputs.GetFirewallProxyPolicySrcaddr6[];
    /**
     * When enabled, source addresses match against any address EXCEPT the specified source addresses.
     */
    readonly srcaddrNegate: string;
    /**
     * Source address objects. The structure of `srcaddr` block is documented below.
     */
    readonly srcaddrs: outputs.GetFirewallProxyPolicySrcaddr[];
    /**
     * Source interface names. The structure of `srcintf` block is documented below.
     */
    readonly srcintfs: outputs.GetFirewallProxyPolicySrcintf[];
    /**
     * Name of an existing SSH filter profile.
     */
    readonly sshFilterProfile: string;
    /**
     * Redirect SSH traffic to matching transparent proxy policy.
     */
    readonly sshPolicyRedirect: string;
    /**
     * Name of an existing SSL SSH profile.
     */
    readonly sslSshProfile: string;
    /**
     * Enable/disable the active status of the policy.
     */
    readonly status: string;
    /**
     * Enable to use the IP address of the client to connect to the server.
     */
    readonly transparent: string;
    /**
     * Names of user objects. The structure of `users` block is documented below.
     */
    readonly users: outputs.GetFirewallProxyPolicyUser[];
    /**
     * Enable the use of UTM profiles/sensors/lists.
     */
    readonly utmStatus: string;
    /**
     * Universally Unique Identifier (UUID; automatically assigned but can be manually reset).
     */
    readonly uuid: string;
    readonly vdomparam?: string;
    /**
     * Name of an existing Web application firewall profile.
     */
    readonly wafProfile: string;
    /**
     * Enable/disable web caching.
     */
    readonly webcache: string;
    /**
     * Enable/disable web caching for HTTPS (Requires deep-inspection enabled in ssl-ssh-profile).
     */
    readonly webcacheHttps: string;
    /**
     * Name of an existing Web filter profile.
     */
    readonly webfilterProfile: string;
    /**
     * Web proxy forward server name.
     */
    readonly webproxyForwardServer: string;
    /**
     * Name of web proxy profile.
     */
    readonly webproxyProfile: string;
}
