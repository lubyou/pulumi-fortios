// *** WARNING: this file was generated by the Pulumi Terraform Bridge (tfgen) Tool. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

import * as pulumi from "@pulumi/pulumi";
import { input as inputs, output as outputs } from "../types";

export interface AntivirusProfileCifs {
    /**
     * Select the archive types to block. Valid values: `encrypted`, `corrupted`, `partiallycorrupted`, `multipart`, `nested`, `mailbomb`, `fileslimit`, `timeout`, `unhandled`.
     */
    archiveBlock: string;
    /**
     * Select the archive types to log. Valid values: `encrypted`, `corrupted`, `partiallycorrupted`, `multipart`, `nested`, `mailbomb`, `fileslimit`, `timeout`, `unhandled`.
     */
    archiveLog: string;
    /**
     * Enable AntiVirus scan service. Valid values: `disable`, `block`, `monitor`.
     */
    avScan: string;
    /**
     * Enable/disable the virus emulator. Valid values: `enable`, `disable`.
     */
    emulator: string;
    /**
     * Enable/disable external malware blocklist. Valid values: `disable`, `enable`.
     */
    externalBlocklist: string;
    /**
     * Enable/disable scanning of files by FortiAI server. Valid values: `disable`, `block`, `monitor`.
     */
    fortiai: string;
    /**
     * Enable/disable SMB AntiVirus scanning, monitoring, and quarantine. Valid values: `scan`, `avmonitor`, `quarantine`.
     */
    options: string;
    /**
     * Enable Virus Outbreak Prevention service. Valid values: `disabled`, `files`, `full-archive`.
     */
    outbreakPrevention: string;
    /**
     * Enable/disable quarantine for infected files. Valid values: `disable`, `enable`.
     */
    quarantine: string;
}

export interface AntivirusProfileContentDisarm {
    /**
     * Enable/disable inserting a cover page into the disarmed document. Valid values: `disable`, `enable`.
     */
    coverPage: string;
    /**
     * Enable/disable only detect disarmable files, do not alter content. Valid values: `disable`, `enable`.
     */
    detectOnly: string;
    /**
     * Action to be taken if CDR engine encounters an unrecoverable error. Valid values: `block`, `log-only`, `ignore`.
     */
    errorAction: string;
    /**
     * Enable/disable stripping of PowerPoint action events in Microsoft Office documents. Valid values: `disable`, `enable`.
     */
    officeAction: string;
    /**
     * Enable/disable stripping of Dynamic Data Exchange events in Microsoft Office documents. Valid values: `disable`, `enable`.
     */
    officeDde: string;
    /**
     * Enable/disable stripping of embedded objects in Microsoft Office documents. Valid values: `disable`, `enable`.
     */
    officeEmbed: string;
    /**
     * Enable/disable stripping of hyperlinks in Microsoft Office documents. Valid values: `disable`, `enable`.
     */
    officeHylink: string;
    /**
     * Enable/disable stripping of linked objects in Microsoft Office documents. Valid values: `disable`, `enable`.
     */
    officeLinked: string;
    /**
     * Enable/disable stripping of macros in Microsoft Office documents. Valid values: `disable`, `enable`.
     */
    officeMacro: string;
    /**
     * Destination to send original file if active content is removed. Valid values: `fortisandbox`, `quarantine`, `discard`.
     */
    originalFileDestination: string;
    /**
     * Enable/disable stripping of actions that submit data to other targets in PDF documents. Valid values: `disable`, `enable`.
     */
    pdfActForm: string;
    /**
     * Enable/disable stripping of links to other PDFs in PDF documents. Valid values: `disable`, `enable`.
     */
    pdfActGotor: string;
    /**
     * Enable/disable stripping of actions that execute JavaScript code in PDF documents. Valid values: `disable`, `enable`.
     */
    pdfActJava: string;
    /**
     * Enable/disable stripping of links to external applications in PDF documents. Valid values: `disable`, `enable`.
     */
    pdfActLaunch: string;
    /**
     * Enable/disable stripping of embedded movies in PDF documents. Valid values: `disable`, `enable`.
     */
    pdfActMovie: string;
    /**
     * Enable/disable stripping of embedded sound files in PDF documents. Valid values: `disable`, `enable`.
     */
    pdfActSound: string;
    /**
     * Enable/disable stripping of embedded files in PDF documents. Valid values: `disable`, `enable`.
     */
    pdfEmbedfile: string;
    /**
     * Enable/disable stripping of hyperlinks from PDF documents. Valid values: `disable`, `enable`.
     */
    pdfHyperlink: string;
    /**
     * Enable/disable stripping of JavaScript code in PDF documents. Valid values: `disable`, `enable`.
     */
    pdfJavacode: string;
}

export interface AntivirusProfileExternalBlocklist {
    /**
     * External blocklist.
     */
    name: string;
}

export interface AntivirusProfileFtp {
    /**
     * Select the archive types to block. Valid values: `encrypted`, `corrupted`, `partiallycorrupted`, `multipart`, `nested`, `mailbomb`, `fileslimit`, `timeout`, `unhandled`.
     */
    archiveBlock: string;
    /**
     * Select the archive types to log. Valid values: `encrypted`, `corrupted`, `partiallycorrupted`, `multipart`, `nested`, `mailbomb`, `fileslimit`, `timeout`, `unhandled`.
     */
    archiveLog: string;
    /**
     * Enable AntiVirus scan service. Valid values: `disable`, `block`, `monitor`.
     */
    avScan: string;
    /**
     * Enable/disable the virus emulator. Valid values: `enable`, `disable`.
     */
    emulator: string;
    /**
     * Enable/disable external malware blocklist. Valid values: `disable`, `enable`.
     */
    externalBlocklist: string;
    /**
     * Enable/disable scanning of files by FortiAI server. Valid values: `disable`, `block`, `monitor`.
     */
    fortiai: string;
    /**
     * Enable/disable SMB AntiVirus scanning, monitoring, and quarantine. Valid values: `scan`, `avmonitor`, `quarantine`.
     */
    options: string;
    /**
     * Enable Virus Outbreak Prevention service. Valid values: `disabled`, `files`, `full-archive`.
     */
    outbreakPrevention: string;
    /**
     * Enable/disable quarantine for infected files. Valid values: `disable`, `enable`.
     */
    quarantine: string;
}

export interface AntivirusProfileHttp {
    /**
     * Select the archive types to block. Valid values: `encrypted`, `corrupted`, `partiallycorrupted`, `multipart`, `nested`, `mailbomb`, `fileslimit`, `timeout`, `unhandled`.
     */
    archiveBlock: string;
    /**
     * Select the archive types to log. Valid values: `encrypted`, `corrupted`, `partiallycorrupted`, `multipart`, `nested`, `mailbomb`, `fileslimit`, `timeout`, `unhandled`.
     */
    archiveLog: string;
    /**
     * Enable AntiVirus scan service. Valid values: `disable`, `block`, `monitor`.
     */
    avScan: string;
    /**
     * Enable Content Disarm and Reconstruction for this protocol. Valid values: `disable`, `enable`.
     */
    contentDisarm: string;
    /**
     * Enable/disable the virus emulator. Valid values: `enable`, `disable`.
     */
    emulator: string;
    /**
     * Enable/disable external malware blocklist. Valid values: `disable`, `enable`.
     */
    externalBlocklist: string;
    /**
     * Enable/disable scanning of files by FortiAI server. Valid values: `disable`, `block`, `monitor`.
     */
    fortiai: string;
    /**
     * Enable/disable SMB AntiVirus scanning, monitoring, and quarantine. Valid values: `scan`, `avmonitor`, `quarantine`.
     */
    options: string;
    /**
     * Enable Virus Outbreak Prevention service. Valid values: `disabled`, `files`, `full-archive`.
     */
    outbreakPrevention: string;
    /**
     * Enable/disable quarantine for infected files. Valid values: `disable`, `enable`.
     */
    quarantine: string;
}

export interface AntivirusProfileImap {
    /**
     * Select the archive types to block. Valid values: `encrypted`, `corrupted`, `partiallycorrupted`, `multipart`, `nested`, `mailbomb`, `fileslimit`, `timeout`, `unhandled`.
     */
    archiveBlock: string;
    /**
     * Select the archive types to log. Valid values: `encrypted`, `corrupted`, `partiallycorrupted`, `multipart`, `nested`, `mailbomb`, `fileslimit`, `timeout`, `unhandled`.
     */
    archiveLog: string;
    /**
     * Enable AntiVirus scan service. Valid values: `disable`, `block`, `monitor`.
     */
    avScan: string;
    /**
     * Enable Content Disarm and Reconstruction for this protocol. Valid values: `disable`, `enable`.
     */
    contentDisarm: string;
    /**
     * Enable/disable the virus emulator. Valid values: `enable`, `disable`.
     */
    emulator: string;
    /**
     * Treat Windows executable files as viruses for the purpose of blocking or monitoring. Valid values: `default`, `virus`.
     */
    executables: string;
    /**
     * Enable/disable external malware blocklist. Valid values: `disable`, `enable`.
     */
    externalBlocklist: string;
    /**
     * Enable/disable scanning of files by FortiAI server. Valid values: `disable`, `block`, `monitor`.
     */
    fortiai: string;
    /**
     * Enable/disable SMB AntiVirus scanning, monitoring, and quarantine. Valid values: `scan`, `avmonitor`, `quarantine`.
     */
    options: string;
    /**
     * Enable Virus Outbreak Prevention service. Valid values: `disabled`, `files`, `full-archive`.
     */
    outbreakPrevention: string;
    /**
     * Enable/disable quarantine for infected files. Valid values: `disable`, `enable`.
     */
    quarantine: string;
}

export interface AntivirusProfileMapi {
    /**
     * Select the archive types to block. Valid values: `encrypted`, `corrupted`, `partiallycorrupted`, `multipart`, `nested`, `mailbomb`, `fileslimit`, `timeout`, `unhandled`.
     */
    archiveBlock: string;
    /**
     * Select the archive types to log. Valid values: `encrypted`, `corrupted`, `partiallycorrupted`, `multipart`, `nested`, `mailbomb`, `fileslimit`, `timeout`, `unhandled`.
     */
    archiveLog: string;
    /**
     * Enable AntiVirus scan service. Valid values: `disable`, `block`, `monitor`.
     */
    avScan: string;
    /**
     * Enable/disable the virus emulator. Valid values: `enable`, `disable`.
     */
    emulator: string;
    /**
     * Treat Windows executable files as viruses for the purpose of blocking or monitoring. Valid values: `default`, `virus`.
     */
    executables: string;
    /**
     * Enable/disable external malware blocklist. Valid values: `disable`, `enable`.
     */
    externalBlocklist: string;
    /**
     * Enable/disable scanning of files by FortiAI server. Valid values: `disable`, `block`, `monitor`.
     */
    fortiai: string;
    /**
     * Enable/disable SMB AntiVirus scanning, monitoring, and quarantine. Valid values: `scan`, `avmonitor`, `quarantine`.
     */
    options: string;
    /**
     * Enable Virus Outbreak Prevention service. Valid values: `disabled`, `files`, `full-archive`.
     */
    outbreakPrevention: string;
    /**
     * Enable/disable quarantine for infected files. Valid values: `disable`, `enable`.
     */
    quarantine: string;
}

export interface AntivirusProfileNacQuar {
    /**
     * Duration of quarantine.
     */
    expiry: string;
    /**
     * Enable/Disable quarantining infected hosts to the banned user list. Valid values: `none`, `quar-src-ip`.
     */
    infected: string;
    /**
     * Enable/disable AntiVirus quarantine logging. Valid values: `enable`, `disable`.
     */
    log: string;
}

export interface AntivirusProfileNntp {
    /**
     * Select the archive types to block. Valid values: `encrypted`, `corrupted`, `partiallycorrupted`, `multipart`, `nested`, `mailbomb`, `fileslimit`, `timeout`, `unhandled`.
     */
    archiveBlock: string;
    /**
     * Select the archive types to log. Valid values: `encrypted`, `corrupted`, `partiallycorrupted`, `multipart`, `nested`, `mailbomb`, `fileslimit`, `timeout`, `unhandled`.
     */
    archiveLog: string;
    /**
     * Enable AntiVirus scan service. Valid values: `disable`, `block`, `monitor`.
     */
    avScan: string;
    /**
     * Enable/disable the virus emulator. Valid values: `enable`, `disable`.
     */
    emulator: string;
    /**
     * Enable/disable external malware blocklist. Valid values: `disable`, `enable`.
     */
    externalBlocklist: string;
    /**
     * Enable/disable scanning of files by FortiAI server. Valid values: `disable`, `block`, `monitor`.
     */
    fortiai: string;
    /**
     * Enable/disable SMB AntiVirus scanning, monitoring, and quarantine. Valid values: `scan`, `avmonitor`, `quarantine`.
     */
    options: string;
    /**
     * Enable Virus Outbreak Prevention service. Valid values: `disabled`, `files`, `full-archive`.
     */
    outbreakPrevention: string;
    /**
     * Enable/disable quarantine for infected files. Valid values: `disable`, `enable`.
     */
    quarantine: string;
}

export interface AntivirusProfileOutbreakPrevention {
    /**
     * Enable/disable external malware blocklist. Valid values: `disable`, `enable`.
     */
    externalBlocklist: string;
    /**
     * Enable/disable FortiGuard Virus outbreak prevention service. Valid values: `disable`, `enable`.
     */
    ftgdService: string;
}

export interface AntivirusProfilePop3 {
    /**
     * Select the archive types to block. Valid values: `encrypted`, `corrupted`, `partiallycorrupted`, `multipart`, `nested`, `mailbomb`, `fileslimit`, `timeout`, `unhandled`.
     */
    archiveBlock: string;
    /**
     * Select the archive types to log. Valid values: `encrypted`, `corrupted`, `partiallycorrupted`, `multipart`, `nested`, `mailbomb`, `fileslimit`, `timeout`, `unhandled`.
     */
    archiveLog: string;
    /**
     * Enable AntiVirus scan service. Valid values: `disable`, `block`, `monitor`.
     */
    avScan: string;
    /**
     * Enable Content Disarm and Reconstruction for this protocol. Valid values: `disable`, `enable`.
     */
    contentDisarm: string;
    /**
     * Enable/disable the virus emulator. Valid values: `enable`, `disable`.
     */
    emulator: string;
    /**
     * Treat Windows executable files as viruses for the purpose of blocking or monitoring. Valid values: `default`, `virus`.
     */
    executables: string;
    /**
     * Enable/disable external malware blocklist. Valid values: `disable`, `enable`.
     */
    externalBlocklist: string;
    /**
     * Enable/disable scanning of files by FortiAI server. Valid values: `disable`, `block`, `monitor`.
     */
    fortiai: string;
    /**
     * Enable/disable SMB AntiVirus scanning, monitoring, and quarantine. Valid values: `scan`, `avmonitor`, `quarantine`.
     */
    options: string;
    /**
     * Enable Virus Outbreak Prevention service. Valid values: `disabled`, `files`, `full-archive`.
     */
    outbreakPrevention: string;
    /**
     * Enable/disable quarantine for infected files. Valid values: `disable`, `enable`.
     */
    quarantine: string;
}

export interface AntivirusProfileSmb {
    /**
     * Select the archive types to block. Valid values: `encrypted`, `corrupted`, `partiallycorrupted`, `multipart`, `nested`, `mailbomb`, `fileslimit`, `timeout`, `unhandled`.
     */
    archiveBlock: string;
    /**
     * Select the archive types to log. Valid values: `encrypted`, `corrupted`, `partiallycorrupted`, `multipart`, `nested`, `mailbomb`, `fileslimit`, `timeout`, `unhandled`.
     */
    archiveLog: string;
    /**
     * Enable/disable the virus emulator. Valid values: `enable`, `disable`.
     */
    emulator: string;
    /**
     * Enable/disable SMB AntiVirus scanning, monitoring, and quarantine. Valid values: `scan`, `avmonitor`, `quarantine`.
     */
    options: string;
    /**
     * Enable Virus Outbreak Prevention service. Valid values: `disabled`, `files`, `full-archive`.
     */
    outbreakPrevention: string;
}

export interface AntivirusProfileSmtp {
    /**
     * Select the archive types to block. Valid values: `encrypted`, `corrupted`, `partiallycorrupted`, `multipart`, `nested`, `mailbomb`, `fileslimit`, `timeout`, `unhandled`.
     */
    archiveBlock: string;
    /**
     * Select the archive types to log. Valid values: `encrypted`, `corrupted`, `partiallycorrupted`, `multipart`, `nested`, `mailbomb`, `fileslimit`, `timeout`, `unhandled`.
     */
    archiveLog: string;
    /**
     * Enable AntiVirus scan service. Valid values: `disable`, `block`, `monitor`.
     */
    avScan: string;
    /**
     * Enable Content Disarm and Reconstruction for this protocol. Valid values: `disable`, `enable`.
     */
    contentDisarm: string;
    /**
     * Enable/disable the virus emulator. Valid values: `enable`, `disable`.
     */
    emulator: string;
    /**
     * Treat Windows executable files as viruses for the purpose of blocking or monitoring. Valid values: `default`, `virus`.
     */
    executables: string;
    /**
     * Enable/disable external malware blocklist. Valid values: `disable`, `enable`.
     */
    externalBlocklist: string;
    /**
     * Enable/disable scanning of files by FortiAI server. Valid values: `disable`, `block`, `monitor`.
     */
    fortiai: string;
    /**
     * Enable/disable SMB AntiVirus scanning, monitoring, and quarantine. Valid values: `scan`, `avmonitor`, `quarantine`.
     */
    options: string;
    /**
     * Enable Virus Outbreak Prevention service. Valid values: `disabled`, `files`, `full-archive`.
     */
    outbreakPrevention: string;
    /**
     * Enable/disable quarantine for infected files. Valid values: `disable`, `enable`.
     */
    quarantine: string;
}

export interface AntivirusProfileSsh {
    /**
     * Select the archive types to block. Valid values: `encrypted`, `corrupted`, `partiallycorrupted`, `multipart`, `nested`, `mailbomb`, `fileslimit`, `timeout`, `unhandled`.
     */
    archiveBlock: string;
    /**
     * Select the archive types to log. Valid values: `encrypted`, `corrupted`, `partiallycorrupted`, `multipart`, `nested`, `mailbomb`, `fileslimit`, `timeout`, `unhandled`.
     */
    archiveLog: string;
    /**
     * Enable AntiVirus scan service. Valid values: `disable`, `block`, `monitor`.
     */
    avScan: string;
    /**
     * Enable/disable the virus emulator. Valid values: `enable`, `disable`.
     */
    emulator: string;
    /**
     * Enable/disable external malware blocklist. Valid values: `disable`, `enable`.
     */
    externalBlocklist: string;
    /**
     * Enable/disable scanning of files by FortiAI server. Valid values: `disable`, `block`, `monitor`.
     */
    fortiai: string;
    /**
     * Enable/disable SMB AntiVirus scanning, monitoring, and quarantine. Valid values: `scan`, `avmonitor`, `quarantine`.
     */
    options: string;
    /**
     * Enable Virus Outbreak Prevention service. Valid values: `disabled`, `files`, `full-archive`.
     */
    outbreakPrevention: string;
    /**
     * Enable/disable quarantine for infected files. Valid values: `disable`, `enable`.
     */
    quarantine: string;
}

export interface ApplicationGroupApplication {
    /**
     * Category IDs.
     */
    id: number;
}

export interface ApplicationGroupCategory {
    /**
     * Category IDs.
     */
    id: number;
}

export interface ApplicationGroupRisk {
    /**
     * Risk, or impact, of allowing traffic from this application to occur (1 - 5; Low, Elevated, Medium, High, and Critical).
     */
    level: number;
}

export interface ApplicationListDefaultNetworkService {
    /**
     * Entry ID.
     */
    id: number;
    /**
     * Port number.
     */
    port: number;
    /**
     * Network protocols. Valid values: `http`, `ssh`, `telnet`, `ftp`, `dns`, `smtp`, `pop3`, `imap`, `snmp`, `nntp`, `https`.
     */
    services: string;
    /**
     * Action for protocols not white listed under selected port. Valid values: `pass`, `monitor`, `block`.
     */
    violationAction: string;
}

export interface ApplicationListEntry {
    /**
     * Pass or block traffic, or reset connection for traffic from this application. Valid values: `pass`, `block`, `reset`.
     */
    action: string;
    /**
     * ID of allowed applications. The structure of `application` block is documented below.
     */
    applications?: outputs.ApplicationListEntryApplication[];
    /**
     * Application behavior filter.
     */
    behavior: string;
    /**
     * Category ID list. The structure of `category` block is documented below.
     */
    categories?: outputs.ApplicationListEntryCategory[];
    /**
     * ID of excluded applications. The structure of `exclusion` block is documented below.
     */
    exclusions?: outputs.ApplicationListEntryExclusion[];
    /**
     * Entry ID.
     */
    id: number;
    /**
     * Enable/disable logging for this application list. Valid values: `disable`, `enable`.
     */
    log: string;
    /**
     * Enable/disable packet logging. Valid values: `disable`, `enable`.
     */
    logPacket: string;
    /**
     * Application parameters. The structure of `parameters` block is documented below.
     */
    parameters?: outputs.ApplicationListEntryParameter[];
    /**
     * Per-IP traffic shaper.
     */
    perIpShaper: string;
    /**
     * Application popularity filter (1 - 5, from least to most popular). Valid values: `1`, `2`, `3`, `4`, `5`.
     */
    popularity: string;
    /**
     * Application protocol filter.
     */
    protocols: string;
    /**
     * Quarantine method. Valid values: `none`, `attacker`.
     */
    quarantine: string;
    /**
     * Duration of quarantine. (Format ###d##h##m, minimum 1m, maximum 364d23h59m, default = 5m). Requires quarantine set to attacker.
     */
    quarantineExpiry: string;
    /**
     * Enable/disable quarantine logging. Valid values: `disable`, `enable`.
     */
    quarantineLog: string;
    /**
     * Count of the rate.
     */
    rateCount: number;
    /**
     * Duration (sec) of the rate.
     */
    rateDuration: number;
    /**
     * Rate limit mode. Valid values: `periodical`, `continuous`.
     */
    rateMode: string;
    /**
     * Track the packet protocol field. Valid values: `none`, `src-ip`, `dest-ip`, `dhcp-client-mac`, `dns-domain`.
     */
    rateTrack: string;
    /**
     * Risk, or impact, of allowing traffic from this application to occur (1 - 5; Low, Elevated, Medium, High, and Critical). The structure of `risk` block is documented below.
     */
    risks?: outputs.ApplicationListEntryRisk[];
    /**
     * Session TTL (0 = default).
     */
    sessionTtl: number;
    /**
     * Traffic shaper.
     */
    shaper: string;
    /**
     * Reverse traffic shaper.
     */
    shaperReverse: string;
    /**
     * Application Sub-category ID list. The structure of `subCategory` block is documented below.
     */
    subCategories?: outputs.ApplicationListEntrySubCategory[];
    /**
     * Application technology filter.
     */
    technology: string;
    /**
     * Application vendor filter.
     */
    vendor: string;
}

export interface ApplicationListEntryApplication {
    /**
     * Entry ID.
     */
    id: number;
}

export interface ApplicationListEntryCategory {
    /**
     * Entry ID.
     */
    id: number;
}

export interface ApplicationListEntryExclusion {
    /**
     * Entry ID.
     */
    id: number;
}

export interface ApplicationListEntryParameter {
    /**
     * Entry ID.
     */
    id: number;
    /**
     * Parameter tuple members. The structure of `members` block is documented below.
     */
    members?: outputs.ApplicationListEntryParameterMember[];
    /**
     * Parameter value.
     */
    value: string;
}

export interface ApplicationListEntryParameterMember {
    /**
     * Entry ID.
     */
    id: number;
    /**
     * Parameter name.
     */
    name: string;
    /**
     * Parameter value.
     */
    value: string;
}

export interface ApplicationListEntryRisk {
    /**
     * Risk, or impact, of allowing traffic from this application to occur (1 - 5; Low, Elevated, Medium, High, and Critical).
     */
    level: number;
}

export interface ApplicationListEntrySubCategory {
    /**
     * Entry ID.
     */
    id: number;
}

export interface ApplicationNameMetadata {
    /**
     * ID.
     */
    id: number;
    /**
     * Meta ID.
     */
    metaid: number;
    /**
     * Value ID.
     */
    valueid: number;
}

export interface ApplicationNameParameter {
    /**
     * Parameter name.
     */
    name: string;
}

export interface AuthenticationRuleDstaddr {
    /**
     * Address name.
     */
    name: string;
}

export interface AuthenticationRuleDstaddr6 {
    /**
     * Address name.
     */
    name: string;
}

export interface AuthenticationRuleSrcaddr {
    /**
     * Address name.
     */
    name: string;
}

export interface AuthenticationRuleSrcaddr6 {
    /**
     * Address name.
     */
    name: string;
}

export interface AuthenticationRuleSrcintf {
    /**
     * Address name.
     */
    name: string;
}

export interface AuthenticationSchemeUserDatabase {
    /**
     * Authentication server name.
     */
    name: string;
}

export interface AuthenticationSettingDevRange {
    /**
     * Address name.
     */
    name: string;
}

export interface AuthenticationSettingUserCertCa {
    /**
     * Address name.
     */
    name: string;
}

export interface CifsProfileFileFilter {
    /**
     * File filter entries. The structure of `entries` block is documented below.
     */
    entries?: outputs.CifsProfileFileFilterEntry[];
    /**
     * Enable/disable file filter logging. Valid values: `enable`, `disable`.
     */
    log: string;
    /**
     * Enable/disable file filter. Valid values: `enable`, `disable`.
     */
    status: string;
}

export interface CifsProfileFileFilterEntry {
    /**
     * Action taken for matched file. Valid values: `log`, `block`.
     */
    action: string;
    /**
     * Comment.
     */
    comment?: string;
    /**
     * Match files transmitted in the session's originating or reply direction. Valid values: `incoming`, `outgoing`, `any`.
     */
    direction: string;
    /**
     * Select file type. The structure of `fileType` block is documented below.
     */
    fileTypes?: outputs.CifsProfileFileFilterEntryFileType[];
    /**
     * Add a file filter.
     */
    filter: string;
}

export interface CifsProfileFileFilterEntryFileType {
    /**
     * File type name.
     */
    name: string;
}

export interface CifsProfileServerKeytab {
    /**
     * Base64 encoded keytab file containing credential of the server.
     */
    keytab: string;
    /**
     * Service principal.  For example, "host/cifsserver.example.com@example.com".
     */
    principal: string;
}

export interface DlpFilepatternEntry {
    /**
     * Select a file type.
     */
    fileType: string;
    /**
     * Filter by file name pattern or by file type. Valid values: `pattern`, `type`.
     */
    filterType: string;
    /**
     * Add a file name pattern.
     */
    pattern: string;
}

export interface DlpSensorFilter {
    /**
     * Action to take with content that this DLP sensor matches. Valid values: `allow`, `log-only`, `block`, `quarantine-ip`.
     */
    action: string;
    /**
     * Enable/disable DLP archiving. Valid values: `disable`, `enable`.
     */
    archive: string;
    /**
     * Enter a company identifier watermark to match. Only watermarks that your company has placed on the files are matched.
     */
    companyIdentifier: string;
    /**
     * Quarantine duration in days, hours, minutes format (dddhhmm).
     */
    expiry: string;
    /**
     * Match files this size or larger (0 - 4294967295 kbytes).
     */
    fileSize: number;
    /**
     * Select the number of a DLP file pattern table to match.
     */
    fileType: number;
    /**
     * Select the type of content to match.
     */
    filterBy: string;
    /**
     * Select a DLP file pattern sensitivity to match. The structure of `fpSensitivity` block is documented below.
     */
    fpSensitivities?: outputs.DlpSensorFilterFpSensitivity[];
    /**
     * ID.
     */
    id: number;
    /**
     * Percentage of fingerprints in the fingerprint databases designated with the selected fp-sensitivity to match.
     */
    matchPercentage: number;
    /**
     * Select a DLP sensitivity.
     */
    name: string;
    /**
     * Check messages or files over one or more of these protocols.
     */
    proto: string;
    /**
     * Enter a regular expression to match (max. 255 characters).
     */
    regexp: string;
    /**
     * Select a DLP file pattern sensitivity to match. The structure of `sensitivity` block is documented below.
     */
    sensitivities?: outputs.DlpSensorFilterSensitivity[];
    /**
     * Select the severity or threat level that matches this filter. Valid values: `info`, `low`, `medium`, `high`, `critical`.
     */
    severity: string;
    /**
     * Select whether to check the content of messages (an email message) or files (downloaded files or email attachments).  Valid values: `file`, `message`.
     */
    type: string;
}

export interface DlpSensorFilterFpSensitivity {
    /**
     * Select a DLP sensitivity.
     */
    name: string;
}

export interface DlpSensorFilterSensitivity {
    /**
     * Select a DLP sensitivity.
     */
    name: string;
}

export interface DnsfilterDomainFilterEntry {
    /**
     * Action to take for domain filter matches. Valid values: `block`, `allow`, `monitor`.
     */
    action: string;
    /**
     * Domain entries to be filtered.
     */
    domain: string;
    /**
     * Id.
     */
    id: number;
    /**
     * Enable/disable this domain filter. Valid values: `enable`, `disable`.
     */
    status: string;
    /**
     * DNS domain filter type. Valid values: `simple`, `regex`, `wildcard`.
     */
    type: string;
}

export interface DnsfilterProfileDnsTranslation {
    /**
     * DNS translation type (IPv4 or IPv6). Valid values: `ipv4`, `ipv6`.
     */
    addrType: string;
    /**
     * IPv4 address or subnet on the external network to substitute for the resolved address in DNS query replies. Can be single IP address or subnet on the external network, but number of addresses must equal number of mapped IP addresses in src.
     */
    dst: string;
    /**
     * IPv6 address or subnet on the external network to substitute for the resolved address in DNS query replies. Can be single IP address or subnet on the external network, but number of addresses must equal number of mapped IP addresses in src6.
     */
    dst6: string;
    /**
     * ID.
     */
    id: number;
    /**
     * If src and dst are subnets rather than single IP addresses, enter the netmask for both src and dst.
     */
    netmask: string;
    /**
     * If src6 and dst6 are subnets rather than single IP addresses, enter the prefix for both src6 and dst6 (1 - 128, default = 128).
     */
    prefix: number;
    /**
     * IPv4 address or subnet on the internal network to compare with the resolved address in DNS query replies. If the resolved address matches, the resolved address is substituted with dst.
     */
    src: string;
    /**
     * IPv6 address or subnet on the internal network to compare with the resolved address in DNS query replies. If the resolved address matches, the resolved address is substituted with dst6.
     */
    src6: string;
    /**
     * Enable/disable this DNS translation entry. Valid values: `enable`, `disable`.
     */
    status: string;
}

export interface DnsfilterProfileDomainFilter {
    /**
     * DNS domain filter table ID.
     */
    domainFilterTable: number;
}

export interface DnsfilterProfileExternalIpBlocklist {
    /**
     * External domain block list name.
     */
    name: string;
}

export interface DnsfilterProfileFtgdDns {
    /**
     * FortiGuard DNS domain filters. The structure of `filters` block is documented below.
     */
    filters?: outputs.DnsfilterProfileFtgdDnsFilter[];
    /**
     * FortiGuard DNS filter options. Valid values: `error-allow`, `ftgd-disable`.
     */
    options: string;
}

export interface DnsfilterProfileFtgdDnsFilter {
    /**
     * Action to take for DNS requests matching the category. Valid values: `block`, `monitor`.
     */
    action: string;
    /**
     * Category number.
     */
    category: number;
    /**
     * ID.
     */
    id: number;
    /**
     * Enable/disable DNS filter logging for this DNS profile. Valid values: `enable`, `disable`.
     */
    log: string;
}

export interface DpdkGlobalInterface {
    /**
     * Physical interface name.
     */
    interfaceName: string;
}

export interface EmailfilterBlockAllowListEntry {
    /**
     * Reject, mark as spam or good email. Valid values: `reject`, `spam`, `clear`.
     */
    action: string;
    /**
     * IP address type. Valid values: `ipv4`, `ipv6`.
     */
    addrType: string;
    /**
     * Email address pattern.
     */
    emailPattern: string;
    /**
     * Entry ID.
     */
    id: number;
    /**
     * IPv4 network address/subnet mask bits.
     */
    ip4Subnet: string;
    /**
     * IPv6 network address/subnet mask bits.
     */
    ip6Subnet: string;
    /**
     * Wildcard pattern or regular expression. Valid values: `wildcard`, `regexp`.
     */
    patternType: string;
    /**
     * Enable/disable status. Valid values: `enable`, `disable`.
     */
    status: string;
    /**
     * Entry type. Valid values: `ip`, `email`.
     */
    type: string;
}

export interface EmailfilterBwlEntry {
    /**
     * Reject, mark as spam or good email. Valid values: `reject`, `spam`, `clear`.
     */
    action: string;
    /**
     * IP address type. Valid values: `ipv4`, `ipv6`.
     */
    addrType: string;
    /**
     * Email address pattern.
     */
    emailPattern: string;
    /**
     * Entry ID.
     */
    id: number;
    /**
     * IPv4 network address/subnet mask bits.
     */
    ip4Subnet: string;
    /**
     * IPv6 network address/subnet mask bits.
     */
    ip6Subnet: string;
    /**
     * Wildcard pattern or regular expression. Valid values: `wildcard`, `regexp`.
     */
    patternType: string;
    /**
     * Enable/disable status. Valid values: `enable`, `disable`.
     */
    status: string;
    /**
     * Entry type. Valid values: `ip`, `email`.
     */
    type: string;
}

export interface EmailfilterBwordEntry {
    /**
     * Mark spam or good. Valid values: `spam`, `clear`.
     */
    action: string;
    /**
     * Banned word entry ID.
     */
    id: number;
    /**
     * Language for the banned word. Valid values: `western`, `simch`, `trach`, `japanese`, `korean`, `french`, `thai`, `spanish`.
     */
    language: string;
    /**
     * Pattern for the banned word.
     */
    pattern: string;
    /**
     * Wildcard pattern or regular expression. Valid values: `wildcard`, `regexp`.
     */
    patternType: string;
    /**
     * Score value.
     */
    score: number;
    /**
     * Enable/disable status. Valid values: `enable`, `disable`.
     */
    status: string;
    /**
     * Component of the email to be scanned. Valid values: `subject`, `body`, `all`.
     */
    where: string;
}

export interface EmailfilterDnsblEntry {
    /**
     * Reject connection or mark as spam email. Valid values: `reject`, `spam`.
     */
    action: string;
    /**
     * DNSBL/ORBL entry ID.
     */
    id: number;
    /**
     * DNSBL or ORBL server name.
     */
    server: string;
    /**
     * Enable/disable status. Valid values: `enable`, `disable`.
     */
    status: string;
}

export interface EmailfilterIptrustEntry {
    /**
     * Type of address. Valid values: `ipv4`, `ipv6`.
     */
    addrType: string;
    /**
     * Trusted IP entry ID.
     */
    id: number;
    /**
     * IPv4 network address or network address/subnet mask bits.
     */
    ip4Subnet: string;
    /**
     * IPv6 network address/subnet mask bits.
     */
    ip6Subnet: string;
    /**
     * Enable/disable status. Valid values: `enable`, `disable`.
     */
    status: string;
}

export interface EmailfilterMheaderEntry {
    /**
     * Mark spam or good. Valid values: `spam`, `clear`.
     */
    action: string;
    /**
     * Pattern for the header field body.
     */
    fieldbody: string;
    /**
     * Pattern for header field name.
     */
    fieldname: string;
    /**
     * Mime header entry ID.
     */
    id: number;
    /**
     * Wildcard pattern or regular expression. Valid values: `wildcard`, `regexp`.
     */
    patternType: string;
    /**
     * Enable/disable status. Valid values: `enable`, `disable`.
     */
    status: string;
}

export interface EmailfilterProfileFileFilter {
    /**
     * File filter entries. The structure of `entries` block is documented below.
     */
    entries?: outputs.EmailfilterProfileFileFilterEntry[];
    /**
     * Enable/disable logging. Valid values: `enable`, `disable`.
     */
    log: string;
    /**
     * Enable/disable file filter archive contents scan. Valid values: `enable`, `disable`.
     */
    scanArchiveContents: string;
    /**
     * Enable/disable file filter. Valid values: `enable`, `disable`.
     */
    status: string;
}

export interface EmailfilterProfileFileFilterEntry {
    /**
     * Action for spam email. Valid values: `pass`, `discard`.
     */
    action: string;
    /**
     * Comment.
     */
    comment?: string;
    /**
     * Select file type. The structure of `fileType` block is documented below.
     */
    fileTypes?: outputs.EmailfilterProfileFileFilterEntryFileType[];
    /**
     * Add a file filter.
     */
    filter: string;
    /**
     * Match password-protected files. Valid values: `yes`, `any`.
     */
    passwordProtected: string;
    /**
     * Protocols to apply with. Valid values: `smtp`, `imap`, `pop3`.
     */
    protocol: string;
}

export interface EmailfilterProfileFileFilterEntryFileType {
    /**
     * File type name.
     */
    name: string;
}

export interface EmailfilterProfileGmail {
    /**
     * Enable/disable logging. Valid values: `enable`, `disable`.
     */
    log: string;
    /**
     * Enable/disable logging of all email traffic. Valid values: `disable`, `enable`.
     */
    logAll: string;
}

export interface EmailfilterProfileImap {
    /**
     * Action for spam email. Valid values: `pass`, `discard`.
     */
    action: string;
    /**
     * Enable/disable logging. Valid values: `enable`, `disable`.
     */
    log: string;
    /**
     * Enable/disable logging of all email traffic. Valid values: `disable`, `enable`.
     */
    logAll: string;
    /**
     * Subject text or header added to spam email.
     */
    tagMsg: string;
    /**
     * Tag subject or header for spam email. Valid values: `subject`, `header`, `spaminfo`.
     */
    tagType: string;
}

export interface EmailfilterProfileMapi {
    /**
     * Action for spam email. Valid values: `pass`, `discard`.
     */
    action: string;
    /**
     * Enable/disable logging. Valid values: `enable`, `disable`.
     */
    log: string;
    /**
     * Enable/disable logging of all email traffic. Valid values: `disable`, `enable`.
     */
    logAll: string;
}

export interface EmailfilterProfileMsnHotmail {
    /**
     * Enable/disable logging. Valid values: `enable`, `disable`.
     */
    log: string;
    /**
     * Enable/disable logging of all email traffic. Valid values: `disable`, `enable`.
     */
    logAll: string;
}

export interface EmailfilterProfileOtherWebmails {
    /**
     * Enable/disable logging of all email traffic. Valid values: `disable`, `enable`.
     */
    logAll: string;
}

export interface EmailfilterProfilePop3 {
    /**
     * Action for spam email. Valid values: `pass`, `discard`.
     */
    action: string;
    /**
     * Enable/disable logging. Valid values: `enable`, `disable`.
     */
    log: string;
    /**
     * Enable/disable logging of all email traffic. Valid values: `disable`, `enable`.
     */
    logAll: string;
    /**
     * Subject text or header added to spam email.
     */
    tagMsg: string;
    /**
     * Tag subject or header for spam email. Valid values: `subject`, `header`, `spaminfo`.
     */
    tagType: string;
}

export interface EmailfilterProfileSmtp {
    /**
     * Action for spam email. Valid values: `pass`, `discard`.
     */
    action: string;
    /**
     * Enable/disable SMTP email header IP checks for spamfsip, spamrbl and spambwl filters. Valid values: `disable`, `enable`.
     */
    hdrip: string;
    /**
     * Enable/disable local filter to override SMTP remote check result. Valid values: `disable`, `enable`.
     */
    localOverride: string;
    /**
     * Enable/disable logging. Valid values: `enable`, `disable`.
     */
    log: string;
    /**
     * Enable/disable logging of all email traffic. Valid values: `disable`, `enable`.
     */
    logAll: string;
    /**
     * Subject text or header added to spam email.
     */
    tagMsg: string;
    /**
     * Tag subject or header for spam email. Valid values: `subject`, `header`, `spaminfo`.
     */
    tagType: string;
}

export interface EmailfilterProfileYahooMail {
    /**
     * Enable/disable logging. Valid values: `enable`, `disable`.
     */
    log: string;
    /**
     * Enable/disable logging of all email traffic. Valid values: `disable`, `enable`.
     */
    logAll: string;
}

export interface EndpointControlProfileDeviceGroup {
    /**
     * Address object from available options.
     */
    name: string;
}

export interface EndpointControlProfileForticlientAndroidSettings {
    /**
     * Enable/disable FortiClient web category filtering when protected by FortiGate. Valid values: `enable`, `disable`.
     */
    disableWfWhenProtected: string;
    /**
     * Enable/disable advanced FortiClient VPN configuration. Valid values: `enable`, `disable`.
     */
    forticlientAdvancedVpn: string;
    /**
     * Advanced FortiClient VPN configuration.
     */
    forticlientAdvancedVpnBuffer?: string;
    /**
     * Enable/disable FortiClient VPN provisioning. Valid values: `enable`, `disable`.
     */
    forticlientVpnProvisioning: string;
    /**
     * FortiClient VPN settings. The structure of `forticlientVpnSettings` block is documented below.
     */
    forticlientVpnSettings?: outputs.EndpointControlProfileForticlientAndroidSettingsForticlientVpnSetting[];
    /**
     * Enable/disable FortiClient web filtering. Valid values: `enable`, `disable`.
     */
    forticlientWf: string;
    /**
     * The FortiClient web filter profile to apply.
     */
    forticlientWfProfile: string;
}

export interface EndpointControlProfileForticlientAndroidSettingsForticlientVpnSetting {
    /**
     * Authentication method. Valid values: `psk`, `certificate`.
     */
    authMethod: string;
    /**
     * Address object from available options.
     */
    name: string;
    /**
     * Pre-shared secret for PSK authentication.
     */
    presharedKey?: string;
    /**
     * IP address or FQDN of the remote VPN gateway.
     */
    remoteGw: string;
    /**
     * SSL VPN access port (1 - 65535).
     */
    sslvpnAccessPort: number;
    /**
     * Enable/disable requiring SSL VPN client certificate. Valid values: `enable`, `disable`.
     */
    sslvpnRequireCertificate: string;
    /**
     * VPN type (IPsec or SSL VPN). Valid values: `ipsec`, `ssl`.
     */
    type: string;
}

export interface EndpointControlProfileForticlientIosSettings {
    /**
     * FortiClient VPN provisioning. Valid values: `enable`, `disable`.
     */
    clientVpnProvisioning: string;
    /**
     * FortiClient VPN settings. The structure of `clientVpnSettings` block is documented below.
     */
    clientVpnSettings?: outputs.EndpointControlProfileForticlientIosSettingsClientVpnSetting[];
    /**
     * Content of configuration profile.
     */
    configurationContent?: string;
    /**
     * Name of configuration profile.
     */
    configurationName: string;
    /**
     * Enable/disable FortiClient web category filtering when protected by FortiGate. Valid values: `enable`, `disable`.
     */
    disableWfWhenProtected: string;
    /**
     * Enable/disable configuration profile (.mobileconfig file) distribution. Valid values: `enable`, `disable`.
     */
    distributeConfigurationProfile: string;
    /**
     * Enable/disable FortiClient web filtering. Valid values: `enable`, `disable`.
     */
    forticlientWf: string;
    /**
     * The FortiClient web filter profile to apply.
     */
    forticlientWfProfile: string;
}

export interface EndpointControlProfileForticlientIosSettingsClientVpnSetting {
    /**
     * Authentication method. Valid values: `psk`, `certificate`.
     */
    authMethod: string;
    /**
     * Address object from available options.
     */
    name: string;
    /**
     * Pre-shared secret for PSK authentication.
     */
    presharedKey?: string;
    /**
     * IP address or FQDN of the remote VPN gateway.
     */
    remoteGw: string;
    /**
     * SSL VPN access port (1 - 65535).
     */
    sslvpnAccessPort: number;
    /**
     * Enable/disable requiring SSL VPN client certificate. Valid values: `enable`, `disable`.
     */
    sslvpnRequireCertificate: string;
    /**
     * VPN type (IPsec or SSL VPN). Valid values: `ipsec`, `ssl`.
     */
    type: string;
    /**
     * Content of VPN configuration.
     */
    vpnConfigurationContent?: string;
    /**
     * Name of VPN configuration.
     */
    vpnConfigurationName: string;
}

export interface EndpointControlProfileForticlientWinmacSettings {
    /**
     * Enable/disable FortiClient AntiVirus real-time protection. Valid values: `enable`, `disable`.
     */
    avRealtimeProtection: string;
    /**
     * Enable/disable FortiClient AV signature updates. Valid values: `enable`, `disable`.
     */
    avSignatureUpToDate: string;
    /**
     * Enable/disable the FortiClient application firewall. Valid values: `enable`, `disable`.
     */
    forticlientApplicationFirewall: string;
    /**
     * FortiClient application firewall rule list.
     */
    forticlientApplicationFirewallList: string;
    /**
     * Enable/disable FortiClient AntiVirus scanning. Valid values: `enable`, `disable`.
     */
    forticlientAv: string;
    /**
     * Enable/disable FortiClient Enterprise Management Server (EMS) compliance. Valid values: `enable`, `disable`.
     */
    forticlientEmsCompliance: string;
    /**
     * FortiClient EMS compliance action. Valid values: `block`, `warning`.
     */
    forticlientEmsComplianceAction: string;
    /**
     * FortiClient EMS entries. The structure of `forticlientEmsEntries` block is documented below.
     */
    forticlientEmsEntries?: outputs.EndpointControlProfileForticlientWinmacSettingsForticlientEmsEntry[];
    /**
     * Minimum FortiClient Linux version.
     */
    forticlientLinuxVer: string;
    /**
     * Enable/disable uploading FortiClient logs. Valid values: `enable`, `disable`.
     */
    forticlientLogUpload: string;
    /**
     * Select the FortiClient logs to upload. Valid values: `traffic`, `vulnerability`, `event`.
     */
    forticlientLogUploadLevel: string;
    /**
     * IP address or FQDN of the server to which to upload FortiClient logs.
     */
    forticlientLogUploadServer: string;
    /**
     * Minimum FortiClient Mac OS version.
     */
    forticlientMacVer: string;
    /**
     * Enable/disable requiring clients to run FortiClient with a minimum software version number. Valid values: `enable`, `disable`.
     */
    forticlientMinimumSoftwareVersion: string;
    /**
     * FortiClient operating system. The structure of `forticlientOperatingSystem` block is documented below.
     */
    forticlientOperatingSystems?: outputs.EndpointControlProfileForticlientWinmacSettingsForticlientOperatingSystem[];
    /**
     * Checking the path and filename of the FortiClient application. The structure of `forticlientOwnFile` block is documented below.
     */
    forticlientOwnFiles?: outputs.EndpointControlProfileForticlientWinmacSettingsForticlientOwnFile[];
    /**
     * FortiClient registration compliance action. Valid values: `block`, `warning`.
     */
    forticlientRegistrationComplianceAction: string;
    /**
     * FortiClient registry entry. The structure of `forticlientRegistryEntry` block is documented below.
     */
    forticlientRegistryEntries?: outputs.EndpointControlProfileForticlientWinmacSettingsForticlientRegistryEntry[];
    /**
     * Use FortiClient to verify if the listed applications are running on the client. The structure of `forticlientRunningApp` block is documented below.
     */
    forticlientRunningApps?: outputs.EndpointControlProfileForticlientWinmacSettingsForticlientRunningApp[];
    /**
     * Enable/disable FortiClient security posture check options. Valid values: `enable`, `disable`.
     */
    forticlientSecurityPosture: string;
    /**
     * FortiClient security posture compliance action. Valid values: `block`, `warning`.
     */
    forticlientSecurityPostureComplianceAction: string;
    /**
     * Enable/disable enforcement of FortiClient system compliance. Valid values: `enable`, `disable`.
     */
    forticlientSystemCompliance: string;
    /**
     * Block or warn clients not compliant with FortiClient requirements. Valid values: `block`, `warning`.
     */
    forticlientSystemComplianceAction: string;
    /**
     * Enable/disable FortiClient vulnerability scanning. Valid values: `enable`, `disable`.
     */
    forticlientVulnScan: string;
    /**
     * FortiClient vulnerability compliance action. Valid values: `block`, `warning`.
     */
    forticlientVulnScanComplianceAction: string;
    /**
     * Configure the level of the vulnerability found that causes a FortiClient vulnerability compliance action. Valid values: `critical`, `high`, `medium`, `low`, `info`.
     */
    forticlientVulnScanEnforce: string;
    /**
     * FortiClient vulnerability scan enforcement grace period (0 - 30 days, default = 1).
     */
    forticlientVulnScanEnforceGrace: number;
    /**
     * Enable/disable compliance exemption for vulnerabilities that cannot be patched automatically. Valid values: `enable`, `disable`.
     */
    forticlientVulnScanExempt: string;
    /**
     * Enable/disable FortiClient web filtering. Valid values: `enable`, `disable`.
     */
    forticlientWf: string;
    /**
     * The FortiClient web filter profile to apply.
     */
    forticlientWfProfile: string;
    /**
     * Minimum FortiClient Windows version.
     */
    forticlientWinVer: string;
    /**
     * Enable/disable checking for OS recognized AntiVirus software. Valid values: `enable`, `disable`.
     */
    osAvSoftwareInstalled: string;
    /**
     * FortiSandbox address.
     */
    sandboxAddress: string;
    /**
     * Enable/disable sending files to FortiSandbox for analysis. Valid values: `enable`, `disable`.
     */
    sandboxAnalysis: string;
}

export interface EndpointControlProfileForticlientWinmacSettingsForticlientEmsEntry {
    /**
     * Address object from available options.
     */
    name: string;
}

export interface EndpointControlProfileForticlientWinmacSettingsForticlientOperatingSystem {
    /**
     * File ID.
     */
    id: number;
    /**
     * Customize operating system name or Mac OS format:x.x.x
     */
    osName: string;
    /**
     * Operating system type. Valid values: `custom`, `mac-os`, `win-7`, `win-80`, `win-81`, `win-10`, `win-2000`, `win-home-svr`, `win-svr-10`, `win-svr-2003`, `win-svr-2003-r2`, `win-svr-2008`, `win-svr-2008-r2`, `win-svr-2012`, `win-svr-2012-r2`, `win-sto-svr-2003`, `win-vista`, `win-xp`, `ubuntu-linux`, `centos-linux`, `redhat-linux`, `fedora-linux`.
     */
    osType: string;
}

export interface EndpointControlProfileForticlientWinmacSettingsForticlientOwnFile {
    /**
     * File path and name.
     */
    file: string;
    /**
     * File ID.
     */
    id: number;
}

export interface EndpointControlProfileForticlientWinmacSettingsForticlientRegistryEntry {
    /**
     * File ID.
     */
    id: number;
    /**
     * Registry entry.
     */
    registryEntry: string;
}

export interface EndpointControlProfileForticlientWinmacSettingsForticlientRunningApp {
    /**
     * Application name.
     */
    appName: string;
    /**
     * App's SHA256 signature.
     */
    appSha256Signature: string;
    /**
     * App's SHA256 Signature.
     */
    appSha256Signature2: string;
    /**
     * App's SHA256 Signature.
     */
    appSha256Signature3: string;
    /**
     * App's SHA256 Signature.
     */
    appSha256Signature4: string;
    /**
     * Application check rule. Valid values: `present`, `absent`.
     */
    applicationCheckRule: string;
    /**
     * File ID.
     */
    id: number;
    /**
     * Process name.
     */
    processName: string;
    /**
     * Process name.
     */
    processName2: string;
    /**
     * Process name.
     */
    processName3: string;
    /**
     * Process name.
     */
    processName4: string;
}

export interface EndpointControlProfileOnNetAddr {
    /**
     * Address object from available options.
     */
    name: string;
}

export interface EndpointControlProfileSrcAddr {
    /**
     * Address object from available options.
     */
    name: string;
}

export interface EndpointControlProfileUser {
    /**
     * Address object from available options.
     */
    name: string;
}

export interface EndpointControlProfileUserGroup {
    /**
     * Address object from available options.
     */
    name: string;
}

export interface ExtenderControllerExtender1ControllerReport {
    /**
     * Controller report interval.
     */
    interval: number;
    /**
     * Controller report signal threshold.
     */
    signalThreshold: number;
    /**
     * FortiExtender controller report status. Valid values: `disable`, `enable`.
     */
    status: string;
}

export interface ExtenderControllerExtender1Modem1 {
    /**
     * FortiExtender auto switch configuration. The structure of `autoSwitch` block is documented below.
     */
    autoSwitch?: outputs.ExtenderControllerExtender1Modem1AutoSwitch;
    /**
     * Connection status.
     */
    connStatus: number;
    /**
     * Default SIM selection. Valid values: `sim1`, `sim2`, `carrier`, `cost`.
     */
    defaultSim: string;
    /**
     * FortiExtender GPS enable/disable. Valid values: `disable`, `enable`.
     */
    gps: string;
    /**
     * FortiExtender interface name.
     */
    ifname: string;
    /**
     * Preferred carrier.
     */
    preferredCarrier: string;
    /**
     * Redundant interface.
     */
    redundantIntf: string;
    /**
     * FortiExtender mode. Valid values: `disable`, `enable`.
     */
    redundantMode: string;
    /**
     * SIM #1 PIN status. Valid values: `disable`, `enable`.
     */
    sim1Pin: string;
    /**
     * SIM #1 PIN password.
     */
    sim1PinCode?: string;
    /**
     * SIM #2 PIN status. Valid values: `disable`, `enable`.
     */
    sim2Pin: string;
    /**
     * SIM #2 PIN password.
     */
    sim2PinCode?: string;
}

export interface ExtenderControllerExtender1Modem1AutoSwitch {
    /**
     * Automatically switch based on data usage. Valid values: `disable`, `enable`.
     */
    dataplan: string;
    /**
     * Auto switch by disconnect. Valid values: `disable`, `enable`.
     */
    disconnect: string;
    /**
     * Automatically switch based on disconnect period.
     */
    disconnectPeriod: number;
    /**
     * Automatically switch based on disconnect threshold.
     */
    disconnectThreshold: number;
    /**
     * Automatically switch based on signal strength. Valid values: `disable`, `enable`.
     */
    signal: string;
    /**
     * Auto switch with switch back multi-options. Valid values: `time`, `timer`.
     */
    switchBack: string;
    /**
     * Automatically switch over to preferred SIM/carrier at a specified time in UTC (HH:MM).
     */
    switchBackTime: string;
    /**
     * Automatically switch over to preferred SIM/carrier after the given time (3600 - 2147483647 sec).
     */
    switchBackTimer: number;
}

export interface ExtenderControllerExtender1Modem2 {
    /**
     * FortiExtender auto switch configuration. The structure of `autoSwitch` block is documented below.
     */
    autoSwitch?: outputs.ExtenderControllerExtender1Modem2AutoSwitch;
    /**
     * Connection status.
     */
    connStatus: number;
    /**
     * Default SIM selection. Valid values: `sim1`, `sim2`, `carrier`, `cost`.
     */
    defaultSim: string;
    /**
     * FortiExtender GPS enable/disable. Valid values: `disable`, `enable`.
     */
    gps: string;
    /**
     * FortiExtender interface name.
     */
    ifname: string;
    /**
     * Preferred carrier.
     */
    preferredCarrier: string;
    /**
     * Redundant interface.
     */
    redundantIntf: string;
    /**
     * FortiExtender mode. Valid values: `disable`, `enable`.
     */
    redundantMode: string;
    /**
     * SIM #1 PIN status. Valid values: `disable`, `enable`.
     */
    sim1Pin: string;
    /**
     * SIM #1 PIN password.
     */
    sim1PinCode?: string;
    /**
     * SIM #2 PIN status. Valid values: `disable`, `enable`.
     */
    sim2Pin: string;
    /**
     * SIM #2 PIN password.
     */
    sim2PinCode?: string;
}

export interface ExtenderControllerExtender1Modem2AutoSwitch {
    /**
     * Automatically switch based on data usage. Valid values: `disable`, `enable`.
     */
    dataplan: string;
    /**
     * Auto switch by disconnect. Valid values: `disable`, `enable`.
     */
    disconnect: string;
    /**
     * Automatically switch based on disconnect period.
     */
    disconnectPeriod: number;
    /**
     * Automatically switch based on disconnect threshold.
     */
    disconnectThreshold: number;
    /**
     * Automatically switch based on signal strength. Valid values: `disable`, `enable`.
     */
    signal: string;
    /**
     * Auto switch with switch back multi-options. Valid values: `time`, `timer`.
     */
    switchBack: string;
    /**
     * Automatically switch over to preferred SIM/carrier at a specified time in UTC (HH:MM).
     */
    switchBackTime: string;
    /**
     * Automatically switch over to preferred SIM/carrier after the given time (3600 - 2147483647 sec).
     */
    switchBackTimer: number;
}

export interface ExtenderControllerExtenderControllerReport {
    /**
     * Controller report interval.
     */
    interval: number;
    /**
     * Controller report signal threshold.
     */
    signalThreshold: number;
    /**
     * FortiExtender controller report status. Valid values: `disable`, `enable`.
     */
    status: string;
}

export interface ExtenderControllerExtenderModem1 {
    /**
     * FortiExtender auto switch configuration. The structure of `autoSwitch` block is documented below.
     */
    autoSwitch?: outputs.ExtenderControllerExtenderModem1AutoSwitch;
    /**
     * Connection status.
     */
    connStatus: number;
    /**
     * Default SIM selection. Valid values: `sim1`, `sim2`, `carrier`, `cost`.
     */
    defaultSim: string;
    /**
     * FortiExtender GPS enable/disable. Valid values: `disable`, `enable`.
     */
    gps: string;
    /**
     * FortiExtender interface name.
     */
    ifname: string;
    /**
     * Preferred carrier.
     */
    preferredCarrier: string;
    /**
     * Redundant interface.
     */
    redundantIntf: string;
    /**
     * FortiExtender mode. Valid values: `disable`, `enable`.
     */
    redundantMode: string;
    /**
     * SIM #1 PIN status. Valid values: `disable`, `enable`.
     */
    sim1Pin: string;
    /**
     * SIM #1 PIN password.
     */
    sim1PinCode?: string;
    /**
     * SIM #2 PIN status. Valid values: `disable`, `enable`.
     */
    sim2Pin: string;
    /**
     * SIM #2 PIN password.
     */
    sim2PinCode?: string;
}

export interface ExtenderControllerExtenderModem1AutoSwitch {
    /**
     * Automatically switch based on data usage. Valid values: `disable`, `enable`.
     */
    dataplan: string;
    /**
     * Auto switch by disconnect. Valid values: `disable`, `enable`.
     */
    disconnect: string;
    /**
     * Automatically switch based on disconnect period.
     */
    disconnectPeriod: number;
    /**
     * Automatically switch based on disconnect threshold.
     */
    disconnectThreshold: number;
    /**
     * Automatically switch based on signal strength. Valid values: `disable`, `enable`.
     */
    signal: string;
    /**
     * Auto switch with switch back multi-options. Valid values: `time`, `timer`.
     */
    switchBack: string;
    /**
     * Automatically switch over to preferred SIM/carrier at a specified time in UTC (HH:MM).
     */
    switchBackTime: string;
    /**
     * Automatically switch over to preferred SIM/carrier after the given time (3600 - 2147483647 sec).
     */
    switchBackTimer: number;
}

export interface ExtenderControllerExtenderModem2 {
    /**
     * FortiExtender auto switch configuration. The structure of `autoSwitch` block is documented below.
     */
    autoSwitch?: outputs.ExtenderControllerExtenderModem2AutoSwitch;
    /**
     * Connection status.
     */
    connStatus: number;
    /**
     * Default SIM selection. Valid values: `sim1`, `sim2`, `carrier`, `cost`.
     */
    defaultSim: string;
    /**
     * FortiExtender GPS enable/disable. Valid values: `disable`, `enable`.
     */
    gps: string;
    /**
     * FortiExtender interface name.
     */
    ifname: string;
    /**
     * Preferred carrier.
     */
    preferredCarrier: string;
    /**
     * Redundant interface.
     */
    redundantIntf: string;
    /**
     * FortiExtender mode. Valid values: `disable`, `enable`.
     */
    redundantMode: string;
    /**
     * SIM #1 PIN status. Valid values: `disable`, `enable`.
     */
    sim1Pin: string;
    /**
     * SIM #1 PIN password.
     */
    sim1PinCode?: string;
    /**
     * SIM #2 PIN status. Valid values: `disable`, `enable`.
     */
    sim2Pin: string;
    /**
     * SIM #2 PIN password.
     */
    sim2PinCode?: string;
}

export interface ExtenderControllerExtenderModem2AutoSwitch {
    /**
     * Automatically switch based on data usage. Valid values: `disable`, `enable`.
     */
    dataplan: string;
    /**
     * Auto switch by disconnect. Valid values: `disable`, `enable`.
     */
    disconnect: string;
    /**
     * Automatically switch based on disconnect period.
     */
    disconnectPeriod: number;
    /**
     * Automatically switch based on disconnect threshold.
     */
    disconnectThreshold: number;
    /**
     * Automatically switch based on signal strength. Valid values: `disable`, `enable`.
     */
    signal: string;
    /**
     * Auto switch with switch back multi-options. Valid values: `time`, `timer`.
     */
    switchBack: string;
    /**
     * Automatically switch over to preferred SIM/carrier at a specified time in UTC (HH:MM).
     */
    switchBackTime: string;
    /**
     * Automatically switch over to preferred SIM/carrier after the given time (3600 - 2147483647 sec).
     */
    switchBackTimer: number;
}

export interface ExtenderControllerExtenderProfileCellular {
    /**
     * FortiExtender controller report configuration. The structure of `controllerReport` block is documented below.
     */
    controllerReport?: outputs.ExtenderControllerExtenderProfileCellularControllerReport;
    /**
     * Automatically switch based on data usage. Valid values: `disable`, `enable`.
     */
    dataplans?: outputs.ExtenderControllerExtenderProfileCellularDataplan[];
    /**
     * Configuration options for modem 1. The structure of `modem1` block is documented below.
     */
    modem1?: outputs.ExtenderControllerExtenderProfileCellularModem1;
    /**
     * Configuration options for modem 2. The structure of `modem2` block is documented below.
     */
    modem2?: outputs.ExtenderControllerExtenderProfileCellularModem2;
    /**
     * FortiExtender cellular SMS notification configuration. The structure of `smsNotification` block is documented below.
     */
    smsNotification?: outputs.ExtenderControllerExtenderProfileCellularSmsNotification;
}

export interface ExtenderControllerExtenderProfileCellularControllerReport {
    /**
     * Controller report interval.
     */
    interval: number;
    /**
     * Controller report signal threshold.
     */
    signalThreshold: number;
    /**
     * SMS notification receiver status. Valid values: `disable`, `enable`.
     */
    status: string;
}

export interface ExtenderControllerExtenderProfileCellularDataplan {
    /**
     * FortiExtender LAN extension backhaul name
     */
    name: string;
}

export interface ExtenderControllerExtenderProfileCellularModem1 {
    /**
     * FortiExtender auto switch configuration. The structure of `autoSwitch` block is documented below.
     */
    autoSwitch?: outputs.ExtenderControllerExtenderProfileCellularModem1AutoSwitch;
    /**
     * Connection status.
     */
    connStatus: number;
    /**
     * Default SIM selection. Valid values: `sim1`, `sim2`, `carrier`, `cost`.
     */
    defaultSim: string;
    /**
     * FortiExtender GPS enable/disable. Valid values: `disable`, `enable`.
     */
    gps: string;
    /**
     * Preferred carrier.
     */
    preferredCarrier: string;
    /**
     * Redundant interface.
     */
    redundantIntf: string;
    /**
     * FortiExtender mode. Valid values: `disable`, `enable`.
     */
    redundantMode: string;
    /**
     * SIM #1 PIN status. Valid values: `disable`, `enable`.
     */
    sim1Pin: string;
    /**
     * SIM #1 PIN password.
     */
    sim1PinCode?: string;
    /**
     * SIM #2 PIN status. Valid values: `disable`, `enable`.
     */
    sim2Pin: string;
    /**
     * SIM #2 PIN password.
     */
    sim2PinCode?: string;
}

export interface ExtenderControllerExtenderProfileCellularModem1AutoSwitch {
    /**
     * Automatically switch based on data usage. Valid values: `disable`, `enable`.
     */
    dataplan: string;
    /**
     * Auto switch by disconnect. Valid values: `disable`, `enable`.
     */
    disconnect: string;
    /**
     * Automatically switch based on disconnect period.
     */
    disconnectPeriod: number;
    /**
     * Automatically switch based on disconnect threshold.
     */
    disconnectThreshold: number;
    /**
     * Automatically switch based on signal strength. Valid values: `disable`, `enable`.
     */
    signal: string;
    /**
     * Auto switch with switch back multi-options. Valid values: `time`, `timer`.
     */
    switchBack: string;
    /**
     * Automatically switch over to preferred SIM/carrier at a specified time in UTC (HH:MM).
     */
    switchBackTime: string;
    /**
     * Automatically switch over to preferred SIM/carrier after the given time (3600 - 2147483647 sec).
     */
    switchBackTimer: number;
}

export interface ExtenderControllerExtenderProfileCellularModem2 {
    /**
     * FortiExtender auto switch configuration. The structure of `autoSwitch` block is documented below.
     */
    autoSwitch?: outputs.ExtenderControllerExtenderProfileCellularModem2AutoSwitch;
    /**
     * Connection status.
     */
    connStatus: number;
    /**
     * Default SIM selection. Valid values: `sim1`, `sim2`, `carrier`, `cost`.
     */
    defaultSim: string;
    /**
     * FortiExtender GPS enable/disable. Valid values: `disable`, `enable`.
     */
    gps: string;
    /**
     * Preferred carrier.
     */
    preferredCarrier: string;
    /**
     * Redundant interface.
     */
    redundantIntf: string;
    /**
     * FortiExtender mode. Valid values: `disable`, `enable`.
     */
    redundantMode: string;
    /**
     * SIM #1 PIN status. Valid values: `disable`, `enable`.
     */
    sim1Pin: string;
    /**
     * SIM #1 PIN password.
     */
    sim1PinCode?: string;
    /**
     * SIM #2 PIN status. Valid values: `disable`, `enable`.
     */
    sim2Pin: string;
    /**
     * SIM #2 PIN password.
     */
    sim2PinCode?: string;
}

export interface ExtenderControllerExtenderProfileCellularModem2AutoSwitch {
    /**
     * Automatically switch based on data usage. Valid values: `disable`, `enable`.
     */
    dataplan: string;
    /**
     * Auto switch by disconnect. Valid values: `disable`, `enable`.
     */
    disconnect: string;
    /**
     * Automatically switch based on disconnect period.
     */
    disconnectPeriod: number;
    /**
     * Automatically switch based on disconnect threshold.
     */
    disconnectThreshold: number;
    /**
     * Automatically switch based on signal strength. Valid values: `disable`, `enable`.
     */
    signal: string;
    /**
     * Auto switch with switch back multi-options. Valid values: `time`, `timer`.
     */
    switchBack: string;
    /**
     * Automatically switch over to preferred SIM/carrier at a specified time in UTC (HH:MM).
     */
    switchBackTime: string;
    /**
     * Automatically switch over to preferred SIM/carrier after the given time (3600 - 2147483647 sec).
     */
    switchBackTimer: number;
}

export interface ExtenderControllerExtenderProfileCellularSmsNotification {
    /**
     * Alert multi-options. Valid values: `system-reboot`, `data-exhausted`, `session-disconnect`, `low-signal-strength`, `mode-switch`, `os-image-fallback`, `fgt-backup-mode-switch`.
     */
    alert?: outputs.ExtenderControllerExtenderProfileCellularSmsNotificationAlert;
    /**
     * SMS notification receiver list. The structure of `receiver` block is documented below.
     */
    receivers?: outputs.ExtenderControllerExtenderProfileCellularSmsNotificationReceiver[];
    /**
     * SMS notification receiver status. Valid values: `disable`, `enable`.
     */
    status: string;
}

export interface ExtenderControllerExtenderProfileCellularSmsNotificationAlert {
    /**
     * Display string when data exhausted.
     */
    dataExhausted: string;
    /**
     * Display string when FortiGate backup mode switched.
     */
    fgtBackupModeSwitch: string;
    /**
     * Display string when signal strength is low.
     */
    lowSignalStrength: string;
    /**
     * Display string when mode is switched.
     */
    modeSwitch: string;
    /**
     * Display string when falling back to a previous OS image.
     */
    osImageFallback: string;
    /**
     * Display string when session disconnected.
     */
    sessionDisconnect: string;
    /**
     * Display string when system rebooted.
     */
    systemReboot: string;
}

export interface ExtenderControllerExtenderProfileCellularSmsNotificationReceiver {
    /**
     * Alert multi-options. Valid values: `system-reboot`, `data-exhausted`, `session-disconnect`, `low-signal-strength`, `mode-switch`, `os-image-fallback`, `fgt-backup-mode-switch`.
     */
    alert: string;
    /**
     * FortiExtender LAN extension backhaul name
     */
    name: string;
    /**
     * Receiver phone number.  Format: [+][country code][area code][local phone number].  For example: +16501234567.
     */
    phoneNumber: string;
    /**
     * SMS notification receiver status. Valid values: `disable`, `enable`.
     */
    status: string;
}

export interface ExtenderControllerExtenderProfileLanExtension {
    /**
     * IPsec phase1 interface.
     */
    backhaulInterface: string;
    /**
     * IPsec phase1 IPv4/FQDN. Used to specify the external IP/FQDN when the FortiGate unit is behind a NAT device.
     */
    backhaulIp: string;
    /**
     * LAN extension backhaul tunnel configuration. The structure of `backhaul` block is documented below.
     */
    backhauls?: outputs.ExtenderControllerExtenderProfileLanExtensionBackhaul[];
    /**
     * IPsec tunnel name.
     */
    ipsecTunnel: string;
    /**
     * LAN extension link load balance strategy. Valid values: `activebackup`, `loadbalance`.
     */
    linkLoadbalance: string;
}

export interface ExtenderControllerExtenderProfileLanExtensionBackhaul {
    /**
     * FortiExtender LAN extension backhaul name
     */
    name: string;
    /**
     * FortiExtender uplink port. Valid values: `wan`, `lte1`, `lte2`, `port1`, `port2`, `port3`, `port4`, `port5`, `sfp`.
     */
    port: string;
    /**
     * FortiExtender uplink port. Valid values: `primary`, `secondary`.
     */
    role: string;
    /**
     * WRR weight parameter
     */
    weight: number;
}

export interface ExtenderControllerExtenderWanExtension {
    /**
     * FortiExtender interface name.
     */
    modem1Extension: string;
    /**
     * FortiExtender interface name.
     */
    modem2Extension: string;
}

export interface FileFilterProfileRule {
    /**
     * Action taken for matched file. Valid values: `log-only`, `block`.
     */
    action: string;
    /**
     * Comment.
     */
    comment?: string;
    /**
     * Traffic direction. (HTTP, FTP, SSH, CIFS only) Valid values: `incoming`, `outgoing`, `any`.
     */
    direction: string;
    /**
     * Select file type. The structure of `fileType` block is documented below.
     */
    fileTypes?: outputs.FileFilterProfileRuleFileType[];
    /**
     * File type name.
     */
    name: string;
    /**
     * Match password-protected files. Valid values: `yes`, `any`.
     */
    passwordProtected: string;
    /**
     * Protocols to apply rule to. Valid values: `http`, `ftp`, `smtp`, `imap`, `pop3`, `mapi`, `cifs`, `ssh`.
     */
    protocol: string;
}

export interface FileFilterProfileRuleFileType {
    /**
     * File type name.
     */
    name: string;
}

export interface FirewallAccessProxy6ApiGateway {
    /**
     * Time in minutes that client web browsers should keep a cookie. Default is 60 minutes. 0 = no time limit.
     */
    httpCookieAge: number;
    /**
     * Domain that HTTP cookie persistence should apply to.
     */
    httpCookieDomain: string;
    /**
     * Enable/disable use of HTTP cookie domain from host field in HTTP. Valid values: `disable`, `enable`.
     */
    httpCookieDomainFromHost: string;
    /**
     * Generation of HTTP cookie to be accepted. Changing invalidates all existing cookies.
     */
    httpCookieGeneration: number;
    /**
     * Limit HTTP cookie persistence to the specified path.
     */
    httpCookiePath: string;
    /**
     * Control sharing of cookies across API Gateway. same-ip means a cookie from one virtual server can be used by another. Disable stops cookie sharing. Valid values: `disable`, `same-ip`.
     */
    httpCookieShare: string;
    /**
     * Enable/disable verification that inserted HTTPS cookies are secure. Valid values: `disable`, `enable`.
     */
    httpsCookieSecure: string;
    /**
     * Real server ID.
     */
    id: number;
    /**
     * Method used to distribute sessions to real servers. Valid values: `static`, `round-robin`, `weighted`, `first-alive`, `http-host`.
     */
    ldbMethod: string;
    /**
     * Configure how to make sure that clients connect to the same server every time they make a request that is part of the same session. Valid values: `none`, `http-cookie`.
     */
    persistence: string;
    /**
     * Select the real servers that this Access Proxy will distribute traffic to. The structure of `realservers` block is documented below.
     */
    realservers?: outputs.FirewallAccessProxy6ApiGatewayRealserver[];
    /**
     * Enable/disable SAML redirection after successful authentication. Valid values: `disable`, `enable`.
     */
    samlRedirect: string;
    /**
     * SAML service provider configuration for VIP authentication.
     */
    samlServer: string;
    /**
     * Service.
     */
    service: string;
    /**
     * Permitted encryption algorithms for the server side of SSL full mode sessions according to encryption strength. Valid values: `high`, `medium`, `low`.
     */
    sslAlgorithm: string;
    /**
     * SSL/TLS cipher suites to offer to a server, ordered by priority. The structure of `sslCipherSuites` block is documented below.
     */
    sslCipherSuites?: outputs.FirewallAccessProxy6ApiGatewaySslCipherSuite[];
    /**
     * Number of bits to use in the Diffie-Hellman exchange for RSA encryption of SSL sessions. Valid values: `768`, `1024`, `1536`, `2048`, `3072`, `4096`.
     */
    sslDhBits: string;
    /**
     * Highest SSL/TLS version acceptable from a server. Valid values: `tls-1.0`, `tls-1.1`, `tls-1.2`, `tls-1.3`.
     */
    sslMaxVersion: string;
    /**
     * Lowest SSL/TLS version acceptable from a server. Valid values: `tls-1.0`, `tls-1.1`, `tls-1.2`, `tls-1.3`.
     */
    sslMinVersion: string;
    /**
     * SSL-VPN web portal.
     */
    sslVpnWebPortal: string;
    /**
     * URL pattern to match.
     */
    urlMap: string;
    /**
     * Type of url-map. Valid values: `sub-string`, `wildcard`, `regex`.
     */
    urlMapType: string;
    /**
     * Virtual host.
     */
    virtualHost: string;
}

export interface FirewallAccessProxy6ApiGateway6 {
    /**
     * Time in minutes that client web browsers should keep a cookie. Default is 60 minutes. 0 = no time limit.
     */
    httpCookieAge: number;
    /**
     * Domain that HTTP cookie persistence should apply to.
     */
    httpCookieDomain: string;
    /**
     * Enable/disable use of HTTP cookie domain from host field in HTTP. Valid values: `disable`, `enable`.
     */
    httpCookieDomainFromHost: string;
    /**
     * Generation of HTTP cookie to be accepted. Changing invalidates all existing cookies.
     */
    httpCookieGeneration: number;
    /**
     * Limit HTTP cookie persistence to the specified path.
     */
    httpCookiePath: string;
    /**
     * Control sharing of cookies across API Gateway. same-ip means a cookie from one virtual server can be used by another. Disable stops cookie sharing. Valid values: `disable`, `same-ip`.
     */
    httpCookieShare: string;
    /**
     * Enable/disable verification that inserted HTTPS cookies are secure. Valid values: `disable`, `enable`.
     */
    httpsCookieSecure: string;
    /**
     * Real server ID.
     */
    id: number;
    /**
     * Method used to distribute sessions to real servers. Valid values: `static`, `round-robin`, `weighted`, `first-alive`, `http-host`.
     */
    ldbMethod: string;
    /**
     * Configure how to make sure that clients connect to the same server every time they make a request that is part of the same session. Valid values: `none`, `http-cookie`.
     */
    persistence: string;
    /**
     * Select the real servers that this Access Proxy will distribute traffic to. The structure of `realservers` block is documented below.
     */
    realservers?: outputs.FirewallAccessProxy6ApiGateway6Realserver[];
    /**
     * Enable/disable SAML redirection after successful authentication. Valid values: `disable`, `enable`.
     */
    samlRedirect: string;
    /**
     * SAML service provider configuration for VIP authentication.
     */
    samlServer: string;
    /**
     * Service.
     */
    service: string;
    /**
     * Permitted encryption algorithms for the server side of SSL full mode sessions according to encryption strength. Valid values: `high`, `medium`, `low`.
     */
    sslAlgorithm: string;
    /**
     * SSL/TLS cipher suites to offer to a server, ordered by priority. The structure of `sslCipherSuites` block is documented below.
     */
    sslCipherSuites?: outputs.FirewallAccessProxy6ApiGateway6SslCipherSuite[];
    /**
     * Number of bits to use in the Diffie-Hellman exchange for RSA encryption of SSL sessions. Valid values: `768`, `1024`, `1536`, `2048`, `3072`, `4096`.
     */
    sslDhBits: string;
    /**
     * Highest SSL/TLS version acceptable from a server. Valid values: `tls-1.0`, `tls-1.1`, `tls-1.2`, `tls-1.3`.
     */
    sslMaxVersion: string;
    /**
     * Lowest SSL/TLS version acceptable from a server. Valid values: `tls-1.0`, `tls-1.1`, `tls-1.2`, `tls-1.3`.
     */
    sslMinVersion: string;
    /**
     * SSL-VPN web portal.
     */
    sslVpnWebPortal: string;
    /**
     * URL pattern to match.
     */
    urlMap: string;
    /**
     * Type of url-map. Valid values: `sub-string`, `wildcard`, `regex`.
     */
    urlMapType: string;
    /**
     * Virtual host.
     */
    virtualHost: string;
}

export interface FirewallAccessProxy6ApiGateway6Realserver {
    /**
     * Type of address. Valid values: `ip`, `fqdn`.
     */
    addrType: string;
    /**
     * Address or address group of the real server.
     */
    address: string;
    /**
     * Wildcard domain name of the real server.
     */
    domain: string;
    /**
     * Enable to check the responsiveness of the real server before forwarding traffic. Valid values: `disable`, `enable`.
     */
    healthCheck: string;
    /**
     * Protocol of the health check monitor to use when polling to determine server's connectivity status. Valid values: `ping`, `http`, `tcp-connect`.
     */
    healthCheckProto: string;
    /**
     * Enable/disable holddown timer. Server will be considered active and reachable once the holddown period has expired (30 seconds). Valid values: `enable`, `disable`.
     */
    holddownInterval: string;
    /**
     * HTTP server domain name in HTTP header.
     */
    httpHost: string;
    /**
     * Real server ID.
     */
    id: number;
    /**
     * IPv6 address of the real server.
     */
    ip: string;
    /**
     * Port for communicating with the real server.
     */
    mappedport: string;
    /**
     * Port for communicating with the real server.
     */
    port: number;
    /**
     * Set access-proxy SSH client certificate profile.
     */
    sshClientCert: string;
    /**
     * Enable/disable SSH real server host key validation. Valid values: `disable`, `enable`.
     */
    sshHostKeyValidation: string;
    /**
     * One or more server host key. The structure of `sshHostKey` block is documented below.
     */
    sshHostKeys?: outputs.FirewallAccessProxy6ApiGateway6RealserverSshHostKey[];
    /**
     * Set the status of the real server to active so that it can accept traffic, or on standby or disabled so no traffic is sent. Valid values: `active`, `standby`, `disable`.
     */
    status: string;
    /**
     * TCP forwarding server type. Valid values: `tcp-forwarding`, `ssh`.
     */
    type: string;
    /**
     * Weight of the real server. If weighted load balancing is enabled, the server with the highest weight gets more connections.
     */
    weight: number;
}

export interface FirewallAccessProxy6ApiGateway6RealserverSshHostKey {
    /**
     * Server host key name.
     */
    name: string;
}

export interface FirewallAccessProxy6ApiGateway6SslCipherSuite {
    /**
     * Cipher suite name. Valid values: `TLS-AES-128-GCM-SHA256`, `TLS-AES-256-GCM-SHA384`, `TLS-CHACHA20-POLY1305-SHA256`, `TLS-ECDHE-RSA-WITH-CHACHA20-POLY1305-SHA256`, `TLS-ECDHE-ECDSA-WITH-CHACHA20-POLY1305-SHA256`, `TLS-DHE-RSA-WITH-CHACHA20-POLY1305-SHA256`, `TLS-DHE-RSA-WITH-AES-128-CBC-SHA`, `TLS-DHE-RSA-WITH-AES-256-CBC-SHA`, `TLS-DHE-RSA-WITH-AES-128-CBC-SHA256`, `TLS-DHE-RSA-WITH-AES-128-GCM-SHA256`, `TLS-DHE-RSA-WITH-AES-256-CBC-SHA256`, `TLS-DHE-RSA-WITH-AES-256-GCM-SHA384`, `TLS-DHE-DSS-WITH-AES-128-CBC-SHA`, `TLS-DHE-DSS-WITH-AES-256-CBC-SHA`, `TLS-DHE-DSS-WITH-AES-128-CBC-SHA256`, `TLS-DHE-DSS-WITH-AES-128-GCM-SHA256`, `TLS-DHE-DSS-WITH-AES-256-CBC-SHA256`, `TLS-DHE-DSS-WITH-AES-256-GCM-SHA384`, `TLS-ECDHE-RSA-WITH-AES-128-CBC-SHA`, `TLS-ECDHE-RSA-WITH-AES-128-CBC-SHA256`, `TLS-ECDHE-RSA-WITH-AES-128-GCM-SHA256`, `TLS-ECDHE-RSA-WITH-AES-256-CBC-SHA`, `TLS-ECDHE-RSA-WITH-AES-256-CBC-SHA384`, `TLS-ECDHE-RSA-WITH-AES-256-GCM-SHA384`, `TLS-ECDHE-ECDSA-WITH-AES-128-CBC-SHA`, `TLS-ECDHE-ECDSA-WITH-AES-128-CBC-SHA256`, `TLS-ECDHE-ECDSA-WITH-AES-128-GCM-SHA256`, `TLS-ECDHE-ECDSA-WITH-AES-256-CBC-SHA`, `TLS-ECDHE-ECDSA-WITH-AES-256-CBC-SHA384`, `TLS-ECDHE-ECDSA-WITH-AES-256-GCM-SHA384`, `TLS-RSA-WITH-AES-128-CBC-SHA`, `TLS-RSA-WITH-AES-256-CBC-SHA`, `TLS-RSA-WITH-AES-128-CBC-SHA256`, `TLS-RSA-WITH-AES-128-GCM-SHA256`, `TLS-RSA-WITH-AES-256-CBC-SHA256`, `TLS-RSA-WITH-AES-256-GCM-SHA384`, `TLS-RSA-WITH-CAMELLIA-128-CBC-SHA`, `TLS-RSA-WITH-CAMELLIA-256-CBC-SHA`, `TLS-RSA-WITH-CAMELLIA-128-CBC-SHA256`, `TLS-RSA-WITH-CAMELLIA-256-CBC-SHA256`, `TLS-DHE-RSA-WITH-3DES-EDE-CBC-SHA`, `TLS-DHE-RSA-WITH-CAMELLIA-128-CBC-SHA`, `TLS-DHE-DSS-WITH-CAMELLIA-128-CBC-SHA`, `TLS-DHE-RSA-WITH-CAMELLIA-256-CBC-SHA`, `TLS-DHE-DSS-WITH-CAMELLIA-256-CBC-SHA`, `TLS-DHE-RSA-WITH-CAMELLIA-128-CBC-SHA256`, `TLS-DHE-DSS-WITH-CAMELLIA-128-CBC-SHA256`, `TLS-DHE-RSA-WITH-CAMELLIA-256-CBC-SHA256`, `TLS-DHE-DSS-WITH-CAMELLIA-256-CBC-SHA256`, `TLS-DHE-RSA-WITH-SEED-CBC-SHA`, `TLS-DHE-DSS-WITH-SEED-CBC-SHA`, `TLS-DHE-RSA-WITH-ARIA-128-CBC-SHA256`, `TLS-DHE-RSA-WITH-ARIA-256-CBC-SHA384`, `TLS-DHE-DSS-WITH-ARIA-128-CBC-SHA256`, `TLS-DHE-DSS-WITH-ARIA-256-CBC-SHA384`, `TLS-RSA-WITH-SEED-CBC-SHA`, `TLS-RSA-WITH-ARIA-128-CBC-SHA256`, `TLS-RSA-WITH-ARIA-256-CBC-SHA384`, `TLS-ECDHE-RSA-WITH-ARIA-128-CBC-SHA256`, `TLS-ECDHE-RSA-WITH-ARIA-256-CBC-SHA384`, `TLS-ECDHE-ECDSA-WITH-ARIA-128-CBC-SHA256`, `TLS-ECDHE-ECDSA-WITH-ARIA-256-CBC-SHA384`, `TLS-ECDHE-RSA-WITH-RC4-128-SHA`, `TLS-ECDHE-RSA-WITH-3DES-EDE-CBC-SHA`, `TLS-DHE-DSS-WITH-3DES-EDE-CBC-SHA`, `TLS-RSA-WITH-3DES-EDE-CBC-SHA`, `TLS-RSA-WITH-RC4-128-MD5`, `TLS-RSA-WITH-RC4-128-SHA`, `TLS-DHE-RSA-WITH-DES-CBC-SHA`, `TLS-DHE-DSS-WITH-DES-CBC-SHA`, `TLS-RSA-WITH-DES-CBC-SHA`.
     */
    cipher: string;
    /**
     * SSL/TLS cipher suites priority.
     */
    priority: number;
    /**
     * SSL/TLS versions that the cipher suite can be used with. Valid values: `tls-1.0`, `tls-1.1`, `tls-1.2`, `tls-1.3`.
     */
    versions: string;
}

export interface FirewallAccessProxy6ApiGatewayRealserver {
    /**
     * Type of address. Valid values: `ip`, `fqdn`.
     */
    addrType: string;
    /**
     * Address or address group of the real server.
     */
    address: string;
    /**
     * Wildcard domain name of the real server.
     */
    domain: string;
    /**
     * Enable to check the responsiveness of the real server before forwarding traffic. Valid values: `disable`, `enable`.
     */
    healthCheck: string;
    /**
     * Protocol of the health check monitor to use when polling to determine server's connectivity status. Valid values: `ping`, `http`, `tcp-connect`.
     */
    healthCheckProto: string;
    /**
     * Enable/disable holddown timer. Server will be considered active and reachable once the holddown period has expired (30 seconds). Valid values: `enable`, `disable`.
     */
    holddownInterval: string;
    /**
     * HTTP server domain name in HTTP header.
     */
    httpHost: string;
    /**
     * Real server ID.
     */
    id: number;
    /**
     * IPv6 address of the real server.
     */
    ip: string;
    /**
     * Port for communicating with the real server.
     */
    mappedport: string;
    /**
     * Port for communicating with the real server.
     */
    port: number;
    /**
     * Set access-proxy SSH client certificate profile.
     */
    sshClientCert: string;
    /**
     * Enable/disable SSH real server host key validation. Valid values: `disable`, `enable`.
     */
    sshHostKeyValidation: string;
    /**
     * One or more server host key. The structure of `sshHostKey` block is documented below.
     */
    sshHostKeys?: outputs.FirewallAccessProxy6ApiGatewayRealserverSshHostKey[];
    /**
     * Set the status of the real server to active so that it can accept traffic, or on standby or disabled so no traffic is sent. Valid values: `active`, `standby`, `disable`.
     */
    status: string;
    /**
     * TCP forwarding server type. Valid values: `tcp-forwarding`, `ssh`.
     */
    type: string;
    /**
     * Weight of the real server. If weighted load balancing is enabled, the server with the highest weight gets more connections.
     */
    weight: number;
}

export interface FirewallAccessProxy6ApiGatewayRealserverSshHostKey {
    /**
     * Server host key name.
     */
    name: string;
}

export interface FirewallAccessProxy6ApiGatewaySslCipherSuite {
    /**
     * Cipher suite name. Valid values: `TLS-AES-128-GCM-SHA256`, `TLS-AES-256-GCM-SHA384`, `TLS-CHACHA20-POLY1305-SHA256`, `TLS-ECDHE-RSA-WITH-CHACHA20-POLY1305-SHA256`, `TLS-ECDHE-ECDSA-WITH-CHACHA20-POLY1305-SHA256`, `TLS-DHE-RSA-WITH-CHACHA20-POLY1305-SHA256`, `TLS-DHE-RSA-WITH-AES-128-CBC-SHA`, `TLS-DHE-RSA-WITH-AES-256-CBC-SHA`, `TLS-DHE-RSA-WITH-AES-128-CBC-SHA256`, `TLS-DHE-RSA-WITH-AES-128-GCM-SHA256`, `TLS-DHE-RSA-WITH-AES-256-CBC-SHA256`, `TLS-DHE-RSA-WITH-AES-256-GCM-SHA384`, `TLS-DHE-DSS-WITH-AES-128-CBC-SHA`, `TLS-DHE-DSS-WITH-AES-256-CBC-SHA`, `TLS-DHE-DSS-WITH-AES-128-CBC-SHA256`, `TLS-DHE-DSS-WITH-AES-128-GCM-SHA256`, `TLS-DHE-DSS-WITH-AES-256-CBC-SHA256`, `TLS-DHE-DSS-WITH-AES-256-GCM-SHA384`, `TLS-ECDHE-RSA-WITH-AES-128-CBC-SHA`, `TLS-ECDHE-RSA-WITH-AES-128-CBC-SHA256`, `TLS-ECDHE-RSA-WITH-AES-128-GCM-SHA256`, `TLS-ECDHE-RSA-WITH-AES-256-CBC-SHA`, `TLS-ECDHE-RSA-WITH-AES-256-CBC-SHA384`, `TLS-ECDHE-RSA-WITH-AES-256-GCM-SHA384`, `TLS-ECDHE-ECDSA-WITH-AES-128-CBC-SHA`, `TLS-ECDHE-ECDSA-WITH-AES-128-CBC-SHA256`, `TLS-ECDHE-ECDSA-WITH-AES-128-GCM-SHA256`, `TLS-ECDHE-ECDSA-WITH-AES-256-CBC-SHA`, `TLS-ECDHE-ECDSA-WITH-AES-256-CBC-SHA384`, `TLS-ECDHE-ECDSA-WITH-AES-256-GCM-SHA384`, `TLS-RSA-WITH-AES-128-CBC-SHA`, `TLS-RSA-WITH-AES-256-CBC-SHA`, `TLS-RSA-WITH-AES-128-CBC-SHA256`, `TLS-RSA-WITH-AES-128-GCM-SHA256`, `TLS-RSA-WITH-AES-256-CBC-SHA256`, `TLS-RSA-WITH-AES-256-GCM-SHA384`, `TLS-RSA-WITH-CAMELLIA-128-CBC-SHA`, `TLS-RSA-WITH-CAMELLIA-256-CBC-SHA`, `TLS-RSA-WITH-CAMELLIA-128-CBC-SHA256`, `TLS-RSA-WITH-CAMELLIA-256-CBC-SHA256`, `TLS-DHE-RSA-WITH-3DES-EDE-CBC-SHA`, `TLS-DHE-RSA-WITH-CAMELLIA-128-CBC-SHA`, `TLS-DHE-DSS-WITH-CAMELLIA-128-CBC-SHA`, `TLS-DHE-RSA-WITH-CAMELLIA-256-CBC-SHA`, `TLS-DHE-DSS-WITH-CAMELLIA-256-CBC-SHA`, `TLS-DHE-RSA-WITH-CAMELLIA-128-CBC-SHA256`, `TLS-DHE-DSS-WITH-CAMELLIA-128-CBC-SHA256`, `TLS-DHE-RSA-WITH-CAMELLIA-256-CBC-SHA256`, `TLS-DHE-DSS-WITH-CAMELLIA-256-CBC-SHA256`, `TLS-DHE-RSA-WITH-SEED-CBC-SHA`, `TLS-DHE-DSS-WITH-SEED-CBC-SHA`, `TLS-DHE-RSA-WITH-ARIA-128-CBC-SHA256`, `TLS-DHE-RSA-WITH-ARIA-256-CBC-SHA384`, `TLS-DHE-DSS-WITH-ARIA-128-CBC-SHA256`, `TLS-DHE-DSS-WITH-ARIA-256-CBC-SHA384`, `TLS-RSA-WITH-SEED-CBC-SHA`, `TLS-RSA-WITH-ARIA-128-CBC-SHA256`, `TLS-RSA-WITH-ARIA-256-CBC-SHA384`, `TLS-ECDHE-RSA-WITH-ARIA-128-CBC-SHA256`, `TLS-ECDHE-RSA-WITH-ARIA-256-CBC-SHA384`, `TLS-ECDHE-ECDSA-WITH-ARIA-128-CBC-SHA256`, `TLS-ECDHE-ECDSA-WITH-ARIA-256-CBC-SHA384`, `TLS-ECDHE-RSA-WITH-RC4-128-SHA`, `TLS-ECDHE-RSA-WITH-3DES-EDE-CBC-SHA`, `TLS-DHE-DSS-WITH-3DES-EDE-CBC-SHA`, `TLS-RSA-WITH-3DES-EDE-CBC-SHA`, `TLS-RSA-WITH-RC4-128-MD5`, `TLS-RSA-WITH-RC4-128-SHA`, `TLS-DHE-RSA-WITH-DES-CBC-SHA`, `TLS-DHE-DSS-WITH-DES-CBC-SHA`, `TLS-RSA-WITH-DES-CBC-SHA`.
     */
    cipher: string;
    /**
     * SSL/TLS cipher suites priority.
     */
    priority: number;
    /**
     * SSL/TLS versions that the cipher suite can be used with. Valid values: `tls-1.0`, `tls-1.1`, `tls-1.2`, `tls-1.3`.
     */
    versions: string;
}

export interface FirewallAccessProxyApiGateway {
    /**
     * Time in minutes that client web browsers should keep a cookie. Default is 60 minutes. 0 = no time limit.
     */
    httpCookieAge: number;
    /**
     * Domain that HTTP cookie persistence should apply to.
     */
    httpCookieDomain: string;
    /**
     * Enable/disable use of HTTP cookie domain from host field in HTTP. Valid values: `disable`, `enable`.
     */
    httpCookieDomainFromHost: string;
    /**
     * Generation of HTTP cookie to be accepted. Changing invalidates all existing cookies.
     */
    httpCookieGeneration: number;
    /**
     * Limit HTTP cookie persistence to the specified path.
     */
    httpCookiePath: string;
    /**
     * Control sharing of cookies across API Gateway. same-ip means a cookie from one virtual server can be used by another. Disable stops cookie sharing. Valid values: `disable`, `same-ip`.
     */
    httpCookieShare: string;
    /**
     * Enable/disable verification that inserted HTTPS cookies are secure. Valid values: `disable`, `enable`.
     */
    httpsCookieSecure: string;
    /**
     * Real server ID.
     */
    id: number;
    /**
     * Method used to distribute sessions to real servers. Valid values: `static`, `round-robin`, `weighted`, `first-alive`, `http-host`.
     */
    ldbMethod: string;
    /**
     * Configure how to make sure that clients connect to the same server every time they make a request that is part of the same session. Valid values: `none`, `http-cookie`.
     */
    persistence: string;
    /**
     * Select the real servers that this Access Proxy will distribute traffic to. The structure of `realservers` block is documented below.
     */
    realservers?: outputs.FirewallAccessProxyApiGatewayRealserver[];
    /**
     * Enable/disable SAML redirection after successful authentication. Valid values: `disable`, `enable`.
     */
    samlRedirect: string;
    /**
     * SAML service provider configuration for VIP authentication.
     */
    samlServer: string;
    /**
     * Service.
     */
    service: string;
    /**
     * Permitted encryption algorithms for the server side of SSL full mode sessions according to encryption strength. Valid values: `high`, `medium`, `low`.
     */
    sslAlgorithm: string;
    /**
     * SSL/TLS cipher suites to offer to a server, ordered by priority. The structure of `sslCipherSuites` block is documented below.
     */
    sslCipherSuites?: outputs.FirewallAccessProxyApiGatewaySslCipherSuite[];
    /**
     * Number of bits to use in the Diffie-Hellman exchange for RSA encryption of SSL sessions. Valid values: `768`, `1024`, `1536`, `2048`, `3072`, `4096`.
     */
    sslDhBits: string;
    /**
     * Highest SSL/TLS version acceptable from a server. Valid values: `tls-1.0`, `tls-1.1`, `tls-1.2`, `tls-1.3`.
     */
    sslMaxVersion: string;
    /**
     * Lowest SSL/TLS version acceptable from a server. Valid values: `tls-1.0`, `tls-1.1`, `tls-1.2`, `tls-1.3`.
     */
    sslMinVersion: string;
    /**
     * SSL-VPN web portal.
     */
    sslVpnWebPortal: string;
    /**
     * URL pattern to match.
     */
    urlMap: string;
    /**
     * Type of url-map. Valid values: `sub-string`, `wildcard`, `regex`.
     */
    urlMapType: string;
    /**
     * Virtual host.
     */
    virtualHost: string;
}

export interface FirewallAccessProxyApiGateway6 {
    /**
     * Time in minutes that client web browsers should keep a cookie. Default is 60 minutes. 0 = no time limit.
     */
    httpCookieAge: number;
    /**
     * Domain that HTTP cookie persistence should apply to.
     */
    httpCookieDomain: string;
    /**
     * Enable/disable use of HTTP cookie domain from host field in HTTP. Valid values: `disable`, `enable`.
     */
    httpCookieDomainFromHost: string;
    /**
     * Generation of HTTP cookie to be accepted. Changing invalidates all existing cookies.
     */
    httpCookieGeneration: number;
    /**
     * Limit HTTP cookie persistence to the specified path.
     */
    httpCookiePath: string;
    /**
     * Control sharing of cookies across API Gateway. same-ip means a cookie from one virtual server can be used by another. Disable stops cookie sharing. Valid values: `disable`, `same-ip`.
     */
    httpCookieShare: string;
    /**
     * Enable/disable verification that inserted HTTPS cookies are secure. Valid values: `disable`, `enable`.
     */
    httpsCookieSecure: string;
    /**
     * Real server ID.
     */
    id: number;
    /**
     * Method used to distribute sessions to real servers. Valid values: `static`, `round-robin`, `weighted`, `first-alive`, `http-host`.
     */
    ldbMethod: string;
    /**
     * Configure how to make sure that clients connect to the same server every time they make a request that is part of the same session. Valid values: `none`, `http-cookie`.
     */
    persistence: string;
    /**
     * Select the real servers that this Access Proxy will distribute traffic to. The structure of `realservers` block is documented below.
     */
    realservers?: outputs.FirewallAccessProxyApiGateway6Realserver[];
    /**
     * Enable/disable SAML redirection after successful authentication. Valid values: `disable`, `enable`.
     */
    samlRedirect: string;
    /**
     * SAML service provider configuration for VIP authentication.
     */
    samlServer: string;
    /**
     * Service.
     */
    service: string;
    /**
     * Permitted encryption algorithms for the server side of SSL full mode sessions according to encryption strength. Valid values: `high`, `medium`, `low`.
     */
    sslAlgorithm: string;
    /**
     * SSL/TLS cipher suites to offer to a server, ordered by priority. The structure of `sslCipherSuites` block is documented below.
     */
    sslCipherSuites?: outputs.FirewallAccessProxyApiGateway6SslCipherSuite[];
    /**
     * Number of bits to use in the Diffie-Hellman exchange for RSA encryption of SSL sessions. Valid values: `768`, `1024`, `1536`, `2048`, `3072`, `4096`.
     */
    sslDhBits: string;
    /**
     * Highest SSL/TLS version acceptable from a server. Valid values: `tls-1.0`, `tls-1.1`, `tls-1.2`, `tls-1.3`.
     */
    sslMaxVersion: string;
    /**
     * Lowest SSL/TLS version acceptable from a server. Valid values: `tls-1.0`, `tls-1.1`, `tls-1.2`, `tls-1.3`.
     */
    sslMinVersion: string;
    /**
     * SSL-VPN web portal.
     */
    sslVpnWebPortal: string;
    /**
     * URL pattern to match.
     */
    urlMap: string;
    /**
     * Type of url-map. Valid values: `sub-string`, `wildcard`, `regex`.
     */
    urlMapType: string;
    /**
     * Virtual host.
     */
    virtualHost: string;
}

export interface FirewallAccessProxyApiGateway6Realserver {
    /**
     * Type of address. Valid values: `ip`, `fqdn`.
     */
    addrType: string;
    /**
     * Address or address group of the real server.
     */
    address: string;
    /**
     * Wildcard domain name of the real server.
     */
    domain: string;
    /**
     * Enable to check the responsiveness of the real server before forwarding traffic. Valid values: `disable`, `enable`.
     */
    healthCheck: string;
    /**
     * Protocol of the health check monitor to use when polling to determine server's connectivity status. Valid values: `ping`, `http`, `tcp-connect`.
     */
    healthCheckProto: string;
    /**
     * Enable/disable holddown timer. Server will be considered active and reachable once the holddown period has expired (30 seconds). Valid values: `enable`, `disable`.
     */
    holddownInterval: string;
    /**
     * HTTP server domain name in HTTP header.
     */
    httpHost: string;
    /**
     * Real server ID.
     */
    id: number;
    /**
     * IPv6 address of the real server.
     */
    ip: string;
    /**
     * Port for communicating with the real server.
     */
    mappedport: string;
    /**
     * Port for communicating with the real server.
     */
    port: number;
    /**
     * Set access-proxy SSH client certificate profile.
     */
    sshClientCert: string;
    /**
     * Enable/disable SSH real server host key validation. Valid values: `disable`, `enable`.
     */
    sshHostKeyValidation: string;
    /**
     * One or more server host key. The structure of `sshHostKey` block is documented below.
     */
    sshHostKeys?: outputs.FirewallAccessProxyApiGateway6RealserverSshHostKey[];
    /**
     * Set the status of the real server to active so that it can accept traffic, or on standby or disabled so no traffic is sent. Valid values: `active`, `standby`, `disable`.
     */
    status: string;
    /**
     * TCP forwarding server type. Valid values: `tcp-forwarding`, `ssh`.
     */
    type: string;
    /**
     * Weight of the real server. If weighted load balancing is enabled, the server with the highest weight gets more connections.
     */
    weight: number;
}

export interface FirewallAccessProxyApiGateway6RealserverSshHostKey {
    /**
     * Server host key name.
     */
    name: string;
}

export interface FirewallAccessProxyApiGateway6SslCipherSuite {
    /**
     * Cipher suite name. Valid values: `TLS-AES-128-GCM-SHA256`, `TLS-AES-256-GCM-SHA384`, `TLS-CHACHA20-POLY1305-SHA256`, `TLS-ECDHE-RSA-WITH-CHACHA20-POLY1305-SHA256`, `TLS-ECDHE-ECDSA-WITH-CHACHA20-POLY1305-SHA256`, `TLS-DHE-RSA-WITH-CHACHA20-POLY1305-SHA256`, `TLS-DHE-RSA-WITH-AES-128-CBC-SHA`, `TLS-DHE-RSA-WITH-AES-256-CBC-SHA`, `TLS-DHE-RSA-WITH-AES-128-CBC-SHA256`, `TLS-DHE-RSA-WITH-AES-128-GCM-SHA256`, `TLS-DHE-RSA-WITH-AES-256-CBC-SHA256`, `TLS-DHE-RSA-WITH-AES-256-GCM-SHA384`, `TLS-DHE-DSS-WITH-AES-128-CBC-SHA`, `TLS-DHE-DSS-WITH-AES-256-CBC-SHA`, `TLS-DHE-DSS-WITH-AES-128-CBC-SHA256`, `TLS-DHE-DSS-WITH-AES-128-GCM-SHA256`, `TLS-DHE-DSS-WITH-AES-256-CBC-SHA256`, `TLS-DHE-DSS-WITH-AES-256-GCM-SHA384`, `TLS-ECDHE-RSA-WITH-AES-128-CBC-SHA`, `TLS-ECDHE-RSA-WITH-AES-128-CBC-SHA256`, `TLS-ECDHE-RSA-WITH-AES-128-GCM-SHA256`, `TLS-ECDHE-RSA-WITH-AES-256-CBC-SHA`, `TLS-ECDHE-RSA-WITH-AES-256-CBC-SHA384`, `TLS-ECDHE-RSA-WITH-AES-256-GCM-SHA384`, `TLS-ECDHE-ECDSA-WITH-AES-128-CBC-SHA`, `TLS-ECDHE-ECDSA-WITH-AES-128-CBC-SHA256`, `TLS-ECDHE-ECDSA-WITH-AES-128-GCM-SHA256`, `TLS-ECDHE-ECDSA-WITH-AES-256-CBC-SHA`, `TLS-ECDHE-ECDSA-WITH-AES-256-CBC-SHA384`, `TLS-ECDHE-ECDSA-WITH-AES-256-GCM-SHA384`, `TLS-RSA-WITH-AES-128-CBC-SHA`, `TLS-RSA-WITH-AES-256-CBC-SHA`, `TLS-RSA-WITH-AES-128-CBC-SHA256`, `TLS-RSA-WITH-AES-128-GCM-SHA256`, `TLS-RSA-WITH-AES-256-CBC-SHA256`, `TLS-RSA-WITH-AES-256-GCM-SHA384`, `TLS-RSA-WITH-CAMELLIA-128-CBC-SHA`, `TLS-RSA-WITH-CAMELLIA-256-CBC-SHA`, `TLS-RSA-WITH-CAMELLIA-128-CBC-SHA256`, `TLS-RSA-WITH-CAMELLIA-256-CBC-SHA256`, `TLS-DHE-RSA-WITH-3DES-EDE-CBC-SHA`, `TLS-DHE-RSA-WITH-CAMELLIA-128-CBC-SHA`, `TLS-DHE-DSS-WITH-CAMELLIA-128-CBC-SHA`, `TLS-DHE-RSA-WITH-CAMELLIA-256-CBC-SHA`, `TLS-DHE-DSS-WITH-CAMELLIA-256-CBC-SHA`, `TLS-DHE-RSA-WITH-CAMELLIA-128-CBC-SHA256`, `TLS-DHE-DSS-WITH-CAMELLIA-128-CBC-SHA256`, `TLS-DHE-RSA-WITH-CAMELLIA-256-CBC-SHA256`, `TLS-DHE-DSS-WITH-CAMELLIA-256-CBC-SHA256`, `TLS-DHE-RSA-WITH-SEED-CBC-SHA`, `TLS-DHE-DSS-WITH-SEED-CBC-SHA`, `TLS-DHE-RSA-WITH-ARIA-128-CBC-SHA256`, `TLS-DHE-RSA-WITH-ARIA-256-CBC-SHA384`, `TLS-DHE-DSS-WITH-ARIA-128-CBC-SHA256`, `TLS-DHE-DSS-WITH-ARIA-256-CBC-SHA384`, `TLS-RSA-WITH-SEED-CBC-SHA`, `TLS-RSA-WITH-ARIA-128-CBC-SHA256`, `TLS-RSA-WITH-ARIA-256-CBC-SHA384`, `TLS-ECDHE-RSA-WITH-ARIA-128-CBC-SHA256`, `TLS-ECDHE-RSA-WITH-ARIA-256-CBC-SHA384`, `TLS-ECDHE-ECDSA-WITH-ARIA-128-CBC-SHA256`, `TLS-ECDHE-ECDSA-WITH-ARIA-256-CBC-SHA384`, `TLS-ECDHE-RSA-WITH-RC4-128-SHA`, `TLS-ECDHE-RSA-WITH-3DES-EDE-CBC-SHA`, `TLS-DHE-DSS-WITH-3DES-EDE-CBC-SHA`, `TLS-RSA-WITH-3DES-EDE-CBC-SHA`, `TLS-RSA-WITH-RC4-128-MD5`, `TLS-RSA-WITH-RC4-128-SHA`, `TLS-DHE-RSA-WITH-DES-CBC-SHA`, `TLS-DHE-DSS-WITH-DES-CBC-SHA`, `TLS-RSA-WITH-DES-CBC-SHA`.
     */
    cipher: string;
    /**
     * SSL/TLS cipher suites priority.
     */
    priority: number;
    /**
     * SSL/TLS versions that the cipher suite can be used with. Valid values: `tls-1.0`, `tls-1.1`, `tls-1.2`, `tls-1.3`.
     */
    versions: string;
}

export interface FirewallAccessProxyApiGatewayRealserver {
    /**
     * Type of address. Valid values: `ip`, `fqdn`.
     */
    addrType: string;
    /**
     * Address or address group of the real server.
     */
    address: string;
    /**
     * Wildcard domain name of the real server.
     */
    domain: string;
    /**
     * Enable to check the responsiveness of the real server before forwarding traffic. Valid values: `disable`, `enable`.
     */
    healthCheck: string;
    /**
     * Protocol of the health check monitor to use when polling to determine server's connectivity status. Valid values: `ping`, `http`, `tcp-connect`.
     */
    healthCheckProto: string;
    /**
     * Enable/disable holddown timer. Server will be considered active and reachable once the holddown period has expired (30 seconds). Valid values: `enable`, `disable`.
     */
    holddownInterval: string;
    /**
     * HTTP server domain name in HTTP header.
     */
    httpHost: string;
    /**
     * Real server ID.
     */
    id: number;
    /**
     * IPv6 address of the real server.
     */
    ip: string;
    /**
     * Port for communicating with the real server.
     */
    mappedport: string;
    /**
     * Port for communicating with the real server.
     */
    port: number;
    /**
     * Set access-proxy SSH client certificate profile.
     */
    sshClientCert: string;
    /**
     * Enable/disable SSH real server host key validation. Valid values: `disable`, `enable`.
     */
    sshHostKeyValidation: string;
    /**
     * One or more server host key. The structure of `sshHostKey` block is documented below.
     */
    sshHostKeys?: outputs.FirewallAccessProxyApiGatewayRealserverSshHostKey[];
    /**
     * Set the status of the real server to active so that it can accept traffic, or on standby or disabled so no traffic is sent. Valid values: `active`, `standby`, `disable`.
     */
    status: string;
    /**
     * TCP forwarding server type. Valid values: `tcp-forwarding`, `ssh`.
     */
    type: string;
    /**
     * Weight of the real server. If weighted load balancing is enabled, the server with the highest weight gets more connections.
     */
    weight: number;
}

export interface FirewallAccessProxyApiGatewayRealserverSshHostKey {
    /**
     * Server host key name.
     */
    name: string;
}

export interface FirewallAccessProxyApiGatewaySslCipherSuite {
    /**
     * Cipher suite name. Valid values: `TLS-AES-128-GCM-SHA256`, `TLS-AES-256-GCM-SHA384`, `TLS-CHACHA20-POLY1305-SHA256`, `TLS-ECDHE-RSA-WITH-CHACHA20-POLY1305-SHA256`, `TLS-ECDHE-ECDSA-WITH-CHACHA20-POLY1305-SHA256`, `TLS-DHE-RSA-WITH-CHACHA20-POLY1305-SHA256`, `TLS-DHE-RSA-WITH-AES-128-CBC-SHA`, `TLS-DHE-RSA-WITH-AES-256-CBC-SHA`, `TLS-DHE-RSA-WITH-AES-128-CBC-SHA256`, `TLS-DHE-RSA-WITH-AES-128-GCM-SHA256`, `TLS-DHE-RSA-WITH-AES-256-CBC-SHA256`, `TLS-DHE-RSA-WITH-AES-256-GCM-SHA384`, `TLS-DHE-DSS-WITH-AES-128-CBC-SHA`, `TLS-DHE-DSS-WITH-AES-256-CBC-SHA`, `TLS-DHE-DSS-WITH-AES-128-CBC-SHA256`, `TLS-DHE-DSS-WITH-AES-128-GCM-SHA256`, `TLS-DHE-DSS-WITH-AES-256-CBC-SHA256`, `TLS-DHE-DSS-WITH-AES-256-GCM-SHA384`, `TLS-ECDHE-RSA-WITH-AES-128-CBC-SHA`, `TLS-ECDHE-RSA-WITH-AES-128-CBC-SHA256`, `TLS-ECDHE-RSA-WITH-AES-128-GCM-SHA256`, `TLS-ECDHE-RSA-WITH-AES-256-CBC-SHA`, `TLS-ECDHE-RSA-WITH-AES-256-CBC-SHA384`, `TLS-ECDHE-RSA-WITH-AES-256-GCM-SHA384`, `TLS-ECDHE-ECDSA-WITH-AES-128-CBC-SHA`, `TLS-ECDHE-ECDSA-WITH-AES-128-CBC-SHA256`, `TLS-ECDHE-ECDSA-WITH-AES-128-GCM-SHA256`, `TLS-ECDHE-ECDSA-WITH-AES-256-CBC-SHA`, `TLS-ECDHE-ECDSA-WITH-AES-256-CBC-SHA384`, `TLS-ECDHE-ECDSA-WITH-AES-256-GCM-SHA384`, `TLS-RSA-WITH-AES-128-CBC-SHA`, `TLS-RSA-WITH-AES-256-CBC-SHA`, `TLS-RSA-WITH-AES-128-CBC-SHA256`, `TLS-RSA-WITH-AES-128-GCM-SHA256`, `TLS-RSA-WITH-AES-256-CBC-SHA256`, `TLS-RSA-WITH-AES-256-GCM-SHA384`, `TLS-RSA-WITH-CAMELLIA-128-CBC-SHA`, `TLS-RSA-WITH-CAMELLIA-256-CBC-SHA`, `TLS-RSA-WITH-CAMELLIA-128-CBC-SHA256`, `TLS-RSA-WITH-CAMELLIA-256-CBC-SHA256`, `TLS-DHE-RSA-WITH-3DES-EDE-CBC-SHA`, `TLS-DHE-RSA-WITH-CAMELLIA-128-CBC-SHA`, `TLS-DHE-DSS-WITH-CAMELLIA-128-CBC-SHA`, `TLS-DHE-RSA-WITH-CAMELLIA-256-CBC-SHA`, `TLS-DHE-DSS-WITH-CAMELLIA-256-CBC-SHA`, `TLS-DHE-RSA-WITH-CAMELLIA-128-CBC-SHA256`, `TLS-DHE-DSS-WITH-CAMELLIA-128-CBC-SHA256`, `TLS-DHE-RSA-WITH-CAMELLIA-256-CBC-SHA256`, `TLS-DHE-DSS-WITH-CAMELLIA-256-CBC-SHA256`, `TLS-DHE-RSA-WITH-SEED-CBC-SHA`, `TLS-DHE-DSS-WITH-SEED-CBC-SHA`, `TLS-DHE-RSA-WITH-ARIA-128-CBC-SHA256`, `TLS-DHE-RSA-WITH-ARIA-256-CBC-SHA384`, `TLS-DHE-DSS-WITH-ARIA-128-CBC-SHA256`, `TLS-DHE-DSS-WITH-ARIA-256-CBC-SHA384`, `TLS-RSA-WITH-SEED-CBC-SHA`, `TLS-RSA-WITH-ARIA-128-CBC-SHA256`, `TLS-RSA-WITH-ARIA-256-CBC-SHA384`, `TLS-ECDHE-RSA-WITH-ARIA-128-CBC-SHA256`, `TLS-ECDHE-RSA-WITH-ARIA-256-CBC-SHA384`, `TLS-ECDHE-ECDSA-WITH-ARIA-128-CBC-SHA256`, `TLS-ECDHE-ECDSA-WITH-ARIA-256-CBC-SHA384`, `TLS-ECDHE-RSA-WITH-RC4-128-SHA`, `TLS-ECDHE-RSA-WITH-3DES-EDE-CBC-SHA`, `TLS-DHE-DSS-WITH-3DES-EDE-CBC-SHA`, `TLS-RSA-WITH-3DES-EDE-CBC-SHA`, `TLS-RSA-WITH-RC4-128-MD5`, `TLS-RSA-WITH-RC4-128-SHA`, `TLS-DHE-RSA-WITH-DES-CBC-SHA`, `TLS-DHE-DSS-WITH-DES-CBC-SHA`, `TLS-RSA-WITH-DES-CBC-SHA`.
     */
    cipher: string;
    /**
     * SSL/TLS cipher suites priority.
     */
    priority: number;
    /**
     * SSL/TLS versions that the cipher suite can be used with. Valid values: `tls-1.0`, `tls-1.1`, `tls-1.2`, `tls-1.3`.
     */
    versions: string;
}

export interface FirewallAccessProxySshClientCertCertExtension {
    /**
     * Critical option. Valid values: `no`, `yes`.
     */
    critical: string;
    /**
     * Data of certificate extension.
     */
    data: string;
    /**
     * Name of certificate extension.
     */
    name: string;
    /**
     * Type of certificate extension. Valid values: `fixed`, `user`.
     */
    type: string;
}

export interface FirewallAddress6List {
    /**
     * IP.
     */
    ip: string;
}

export interface FirewallAddress6Macaddr {
    /**
     * MAC address ranges <start>[-<end>] separated by space.
     */
    macaddr: string;
}

export interface FirewallAddress6SubnetSegment {
    /**
     * Name.
     */
    name: string;
    /**
     * Subnet segment type. Valid values: `any`, `specific`.
     */
    type: string;
    /**
     * Subnet segment value.
     */
    value: string;
}

export interface FirewallAddress6Tagging {
    /**
     * Tag category.
     */
    category: string;
    /**
     * Name.
     */
    name: string;
    /**
     * Tags. The structure of `tags` block is documented below.
     */
    tags?: outputs.FirewallAddress6TaggingTag[];
}

export interface FirewallAddress6TaggingTag {
    /**
     * Name.
     */
    name: string;
}

export interface FirewallAddress6TemplateSubnetSegment {
    /**
     * Number of bits.
     */
    bits: number;
    /**
     * Enable/disable exclusive value. Valid values: `enable`, `disable`.
     */
    exclusive: string;
    /**
     * Subnet segment ID.
     */
    id: number;
    /**
     * Subnet segment value name.
     */
    name: string;
    /**
     * Subnet segment values. The structure of `values` block is documented below.
     */
    values?: outputs.FirewallAddress6TemplateSubnetSegmentValue[];
}

export interface FirewallAddress6TemplateSubnetSegmentValue {
    /**
     * Subnet segment value name.
     */
    name: string;
    /**
     * Subnet segment value.
     */
    value: string;
}

export interface FirewallAddressFssoGroup {
    /**
     * Tag name.
     */
    name: string;
}

export interface FirewallAddressList {
    /**
     * IP.
     */
    ip: string;
}

export interface FirewallAddressMacaddr {
    /**
     * MAC address ranges <start>[-<end>] separated by space.
     */
    macaddr: string;
}

export interface FirewallAddressTagging {
    /**
     * Tag category.
     */
    category: string;
    /**
     * Tag name.
     */
    name: string;
    /**
     * Tags. The structure of `tags` block is documented below.
     */
    tags?: outputs.FirewallAddressTaggingTag[];
}

export interface FirewallAddressTaggingTag {
    /**
     * Tag name.
     */
    name: string;
}

export interface FirewallAddrgrp6Member {
    /**
     * Tag name.
     */
    name: string;
}

export interface FirewallAddrgrp6Tagging {
    /**
     * Tag category.
     */
    category: string;
    /**
     * Tag name.
     */
    name: string;
    /**
     * Tags. The structure of `tags` block is documented below.
     */
    tags?: outputs.FirewallAddrgrp6TaggingTag[];
}

export interface FirewallAddrgrp6TaggingTag {
    /**
     * Tag name.
     */
    name: string;
}

export interface FirewallAddrgrpExcludeMember {
    /**
     * Tag name.
     */
    name: string;
}

export interface FirewallAddrgrpMember {
    /**
     * Tag name.
     */
    name: string;
}

export interface FirewallAddrgrpTagging {
    /**
     * Tag category.
     */
    category: string;
    /**
     * Tag name.
     */
    name: string;
    /**
     * Tags. The structure of `tags` block is documented below.
     */
    tags?: outputs.FirewallAddrgrpTaggingTag[];
}

export interface FirewallAddrgrpTaggingTag {
    /**
     * Tag name.
     */
    name: string;
}

export interface FirewallAuthPortalGroup {
    /**
     * Group name.
     */
    name: string;
}

export interface FirewallCentralSnatMapDstAddr {
    /**
     * IPv6 pool name.
     */
    name: string;
}

export interface FirewallCentralSnatMapDstAddr6 {
    /**
     * IPv6 pool name.
     */
    name: string;
}

export interface FirewallCentralSnatMapDstintf {
    /**
     * IPv6 pool name.
     */
    name: string;
}

export interface FirewallCentralSnatMapNatIppool {
    /**
     * IPv6 pool name.
     */
    name: string;
}

export interface FirewallCentralSnatMapNatIppool6 {
    /**
     * IPv6 pool name.
     */
    name: string;
}

export interface FirewallCentralSnatMapOrigAddr {
    /**
     * IPv6 pool name.
     */
    name: string;
}

export interface FirewallCentralSnatMapOrigAddr6 {
    /**
     * IPv6 pool name.
     */
    name: string;
}

export interface FirewallCentralSnatMapSrcintf {
    /**
     * IPv6 pool name.
     */
    name: string;
}

export interface FirewallConsolidatedPolicyAppCategory {
    /**
     * URL category ID.
     */
    id: number;
}

export interface FirewallConsolidatedPolicyAppGroup {
    /**
     * Application group names.
     */
    name: string;
}

export interface FirewallConsolidatedPolicyApplication {
    /**
     * URL category ID.
     */
    id: number;
}

export interface FirewallConsolidatedPolicyDstaddr4 {
    /**
     * Application group names.
     */
    name: string;
}

export interface FirewallConsolidatedPolicyDstaddr6 {
    /**
     * Application group names.
     */
    name: string;
}

export interface FirewallConsolidatedPolicyDstintf {
    /**
     * Application group names.
     */
    name: string;
}

export interface FirewallConsolidatedPolicyFssoGroup {
    /**
     * Application group names.
     */
    name: string;
}

export interface FirewallConsolidatedPolicyGroup {
    /**
     * Application group names.
     */
    name: string;
}

export interface FirewallConsolidatedPolicyInternetServiceCustom {
    /**
     * Application group names.
     */
    name: string;
}

export interface FirewallConsolidatedPolicyInternetServiceCustomGroup {
    /**
     * Application group names.
     */
    name: string;
}

export interface FirewallConsolidatedPolicyInternetServiceGroup {
    /**
     * Application group names.
     */
    name: string;
}

export interface FirewallConsolidatedPolicyInternetServiceId {
    /**
     * URL category ID.
     */
    id: number;
}

export interface FirewallConsolidatedPolicyInternetServiceName {
    /**
     * Application group names.
     */
    name: string;
}

export interface FirewallConsolidatedPolicyInternetServiceSrcCustom {
    /**
     * Application group names.
     */
    name: string;
}

export interface FirewallConsolidatedPolicyInternetServiceSrcCustomGroup {
    /**
     * Application group names.
     */
    name: string;
}

export interface FirewallConsolidatedPolicyInternetServiceSrcGroup {
    /**
     * Application group names.
     */
    name: string;
}

export interface FirewallConsolidatedPolicyInternetServiceSrcId {
    /**
     * URL category ID.
     */
    id: number;
}

export interface FirewallConsolidatedPolicyInternetServiceSrcName {
    /**
     * Application group names.
     */
    name: string;
}

export interface FirewallConsolidatedPolicyPoolname4 {
    /**
     * Application group names.
     */
    name: string;
}

export interface FirewallConsolidatedPolicyPoolname6 {
    /**
     * Application group names.
     */
    name: string;
}

export interface FirewallConsolidatedPolicyService {
    /**
     * Application group names.
     */
    name: string;
}

export interface FirewallConsolidatedPolicySrcaddr4 {
    /**
     * Application group names.
     */
    name: string;
}

export interface FirewallConsolidatedPolicySrcaddr6 {
    /**
     * Application group names.
     */
    name: string;
}

export interface FirewallConsolidatedPolicySrcintf {
    /**
     * Application group names.
     */
    name: string;
}

export interface FirewallConsolidatedPolicyUrlCategory {
    /**
     * URL category ID.
     */
    id: number;
}

export interface FirewallConsolidatedPolicyUser {
    /**
     * Application group names.
     */
    name: string;
}

export interface FirewallCountryRegion {
    /**
     * Region ID.
     */
    id: number;
}

export interface FirewallDecryptedTrafficMirrorInterface {
    /**
     * Decrypted traffic mirror interface.
     */
    name: string;
}

export interface FirewallDosPolicy6Anomaly {
    /**
     * Action taken when the threshold is reached.
     */
    action: string;
    /**
     * Enable/disable anomaly logging. Valid values: `enable`, `disable`.
     */
    log: string;
    /**
     * Anomaly name.
     */
    name: string;
    /**
     * Quarantine method. Valid values: `none`, `attacker`.
     */
    quarantine: string;
    /**
     * Duration of quarantine. (Format ###d##h##m, minimum 1m, maximum 364d23h59m, default = 5m). Requires quarantine set to attacker.
     */
    quarantineExpiry: string;
    /**
     * Enable/disable quarantine logging. Valid values: `disable`, `enable`.
     */
    quarantineLog: string;
    /**
     * Enable/disable this anomaly. Valid values: `disable`, `enable`.
     */
    status: string;
    /**
     * Anomaly threshold. Number of detected instances per minute that triggers the anomaly action.
     */
    threshold: number;
    /**
     * Number of detected instances per minute which triggers action (1 - 2147483647, default = 1000). Note that each anomaly has a different threshold value assigned to it.
     */
    thresholddefault: number;
}

export interface FirewallDosPolicy6Dstaddr {
    /**
     * Anomaly name.
     */
    name: string;
}

export interface FirewallDosPolicy6Service {
    /**
     * Anomaly name.
     */
    name: string;
}

export interface FirewallDosPolicy6Srcaddr {
    /**
     * Anomaly name.
     */
    name: string;
}

export interface FirewallDosPolicyAnomaly {
    /**
     * Action taken when the threshold is reached.
     */
    action: string;
    /**
     * Enable/disable anomaly logging. Valid values: `enable`, `disable`.
     */
    log: string;
    /**
     * Anomaly name.
     */
    name: string;
    /**
     * Quarantine method. Valid values: `none`, `attacker`.
     */
    quarantine: string;
    /**
     * Duration of quarantine. (Format ###d##h##m, minimum 1m, maximum 364d23h59m, default = 5m). Requires quarantine set to attacker.
     */
    quarantineExpiry: string;
    /**
     * Enable/disable quarantine logging. Valid values: `disable`, `enable`.
     */
    quarantineLog: string;
    /**
     * Enable/disable this anomaly. Valid values: `disable`, `enable`.
     */
    status: string;
    /**
     * Anomaly threshold. Number of detected instances per minute that triggers the anomaly action.
     */
    threshold: number;
    /**
     * Number of detected instances per minute which triggers action (1 - 2147483647, default = 1000). Note that each anomaly has a different threshold value assigned to it.
     */
    thresholddefault: number;
}

export interface FirewallDosPolicyDstaddr {
    /**
     * Anomaly name.
     */
    name: string;
}

export interface FirewallDosPolicyService {
    /**
     * Anomaly name.
     */
    name: string;
}

export interface FirewallDosPolicySrcaddr {
    /**
     * Anomaly name.
     */
    name: string;
}

export interface FirewallIdentityBasedRouteRule {
    /**
     * Outgoing interface for the rule.
     */
    device: string;
    /**
     * IPv4 address of the gateway (Format: xxx.xxx.xxx.xxx , Default: 0.0.0.0).
     */
    gateway: string;
    /**
     * Select one or more group(s) from available groups that are allowed to use this route. Separate group names with a space. The structure of `groups` block is documented below.
     */
    groups?: outputs.FirewallIdentityBasedRouteRuleGroup[];
    /**
     * Rule ID.
     */
    id: number;
}

export interface FirewallIdentityBasedRouteRuleGroup {
    /**
     * Group name.
     */
    name: string;
}

export interface FirewallInterfacePolicy6Dstaddr6 {
    /**
     * Address name.
     */
    name: string;
}

export interface FirewallInterfacePolicy6Service6 {
    /**
     * Address name.
     */
    name: string;
}

export interface FirewallInterfacePolicy6Srcaddr6 {
    /**
     * Address name.
     */
    name: string;
}

export interface FirewallInterfacePolicyDstaddr {
    /**
     * Service name.
     */
    name: string;
}

export interface FirewallInterfacePolicyService {
    /**
     * Service name.
     */
    name: string;
}

export interface FirewallInterfacePolicySrcaddr {
    /**
     * Service name.
     */
    name: string;
}

export interface FirewallInternetServiceAdditionEntry {
    /**
     * Custom entry port range ID.
     */
    id: number;
    /**
     * Port ranges in the custom entry. The structure of `portRange` block is documented below.
     */
    portRanges?: outputs.FirewallInternetServiceAdditionEntryPortRange[];
    /**
     * Integer value for the protocol type as defined by IANA (0 - 255).
     */
    protocol: number;
}

export interface FirewallInternetServiceAdditionEntryPortRange {
    /**
     * Integer value for ending TCP/UDP/SCTP destination port in range (1 to 65535).
     */
    endPort: number;
    /**
     * Custom entry port range ID.
     */
    id: number;
    /**
     * Integer value for starting TCP/UDP/SCTP destination port in range (1 to 65535).
     */
    startPort: number;
}

export interface FirewallInternetServiceCustomEntry {
    /**
     * Destination address or address group name. The structure of `dst` block is documented below.
     */
    dsts?: outputs.FirewallInternetServiceCustomEntryDst[];
    /**
     * Custom entry port range ID.
     */
    id: number;
    /**
     * Port ranges in the custom entry. The structure of `portRange` block is documented below.
     */
    portRanges?: outputs.FirewallInternetServiceCustomEntryPortRange[];
    /**
     * Integer value for the protocol type as defined by IANA (0 - 255).
     */
    protocol: number;
}

export interface FirewallInternetServiceCustomEntryDst {
    /**
     * Select the destination address or address group object from available options.
     */
    name: string;
}

export interface FirewallInternetServiceCustomEntryPortRange {
    /**
     * Integer value for ending TCP/UDP/SCTP destination port in range (1 to 65535).
     */
    endPort: number;
    /**
     * Custom entry port range ID.
     */
    id: number;
    /**
     * Integer value for starting TCP/UDP/SCTP destination port in range (1 to 65535).
     */
    startPort: number;
}

export interface FirewallInternetServiceCustomGroupMember {
    /**
     * Group member name.
     */
    name: string;
}

export interface FirewallInternetServiceDefinitionEntry {
    /**
     * Internet Service category ID.
     */
    categoryId: number;
    /**
     * Internet Service name.
     */
    name: string;
    /**
     * Integer value for ending TCP/UDP/SCTP destination port in range (0 to 65535). 0 means undefined.
     */
    port: number;
    /**
     * Port ranges in the definition entry. The structure of `portRange` block is documented below.
     */
    portRanges?: outputs.FirewallInternetServiceDefinitionEntryPortRange[];
    /**
     * Integer value for the protocol type as defined by IANA (0 - 255).
     */
    protocol: number;
    /**
     * Entry sequence number.
     */
    seqNum: number;
}

export interface FirewallInternetServiceDefinitionEntryPortRange {
    /**
     * Ending TCP/UDP/SCTP destination port (1 to 65535).
     */
    endPort: number;
    /**
     * Custom entry port range ID.
     */
    id: number;
    /**
     * Starting TCP/UDP/SCTP destination port (1 to 65535).
     */
    startPort: number;
}

export interface FirewallInternetServiceExtensionDisableEntry {
    /**
     * Disable entry range ID.
     */
    id: number;
    /**
     * IP ranges in the disable entry. The structure of `ipRange` block is documented below.
     */
    ipRanges?: outputs.FirewallInternetServiceExtensionDisableEntryIpRange[];
    /**
     * Integer value for the TCP/IP port (0 - 65535).
     */
    port: number;
    /**
     * Port ranges in the disable entry. The structure of `portRange` block is documented below.
     */
    portRanges?: outputs.FirewallInternetServiceExtensionDisableEntryPortRange[];
    /**
     * Integer value for the protocol type as defined by IANA (0 - 255).
     */
    protocol: number;
}

export interface FirewallInternetServiceExtensionDisableEntryIpRange {
    /**
     * End IP address.
     */
    endIp: string;
    /**
     * Disable entry range ID.
     */
    id: number;
    /**
     * Start IP address.
     */
    startIp: string;
}

export interface FirewallInternetServiceExtensionDisableEntryPortRange {
    /**
     * Ending TCP/UDP/SCTP destination port (1 to 65535).
     */
    endPort: number;
    /**
     * Disable entry range ID.
     */
    id: number;
    /**
     * Starting TCP/UDP/SCTP destination port (1 to 65535).
     */
    startPort: number;
}

export interface FirewallInternetServiceExtensionEntry {
    /**
     * Destination address or address group name. The structure of `dst` block is documented below.
     */
    dsts?: outputs.FirewallInternetServiceExtensionEntryDst[];
    /**
     * Disable entry range ID.
     */
    id: number;
    /**
     * Port ranges in the disable entry. The structure of `portRange` block is documented below.
     */
    portRanges?: outputs.FirewallInternetServiceExtensionEntryPortRange[];
    /**
     * Integer value for the protocol type as defined by IANA (0 - 255).
     */
    protocol: number;
}

export interface FirewallInternetServiceExtensionEntryDst {
    /**
     * Select the destination address or address group object from available options.
     */
    name: string;
}

export interface FirewallInternetServiceExtensionEntryPortRange {
    /**
     * Ending TCP/UDP/SCTP destination port (1 to 65535).
     */
    endPort: number;
    /**
     * Disable entry range ID.
     */
    id: number;
    /**
     * Starting TCP/UDP/SCTP destination port (1 to 65535).
     */
    startPort: number;
}

export interface FirewallInternetServiceGroupMember {
    /**
     * Internet Service ID.
     */
    id: number;
    /**
     * Internet Service name.
     */
    name: string;
}

export interface FirewallLocalInPolicy6Dstaddr {
    /**
     * Service name.
     */
    name: string;
}

export interface FirewallLocalInPolicy6Service {
    /**
     * Service name.
     */
    name: string;
}

export interface FirewallLocalInPolicy6Srcaddr {
    /**
     * Service name.
     */
    name: string;
}

export interface FirewallLocalInPolicyDstaddr {
    /**
     * Service name.
     */
    name: string;
}

export interface FirewallLocalInPolicyService {
    /**
     * Service name.
     */
    name: string;
}

export interface FirewallLocalInPolicySrcaddr {
    /**
     * Service name.
     */
    name: string;
}

export interface FirewallMulticastAddress6Tagging {
    /**
     * Tag category.
     */
    category: string;
    /**
     * Tag name.
     */
    name: string;
    /**
     * Tags. The structure of `tags` block is documented below.
     */
    tags?: outputs.FirewallMulticastAddress6TaggingTag[];
}

export interface FirewallMulticastAddress6TaggingTag {
    /**
     * Tag name.
     */
    name: string;
}

export interface FirewallMulticastAddressTagging {
    /**
     * Tag category.
     */
    category: string;
    /**
     * Tag name.
     */
    name: string;
    /**
     * Tags. The structure of `tags` block is documented below.
     */
    tags?: outputs.FirewallMulticastAddressTaggingTag[];
}

export interface FirewallMulticastAddressTaggingTag {
    /**
     * Tag name.
     */
    name: string;
}

export interface FirewallMulticastPolicy6Dstaddr {
    /**
     * Address name.
     */
    name: string;
}

export interface FirewallMulticastPolicy6Srcaddr {
    /**
     * Address name.
     */
    name: string;
}

export interface FirewallMulticastPolicyDstaddr {
    /**
     * Destination address objects.
     */
    name: string;
}

export interface FirewallMulticastPolicySrcaddr {
    /**
     * Destination address objects.
     */
    name: string;
}

export interface FirewallPolicy46Dstaddr {
    /**
     * IP pool name.
     */
    name: string;
}

export interface FirewallPolicy46Poolname {
    /**
     * IP pool name.
     */
    name: string;
}

export interface FirewallPolicy46Service {
    /**
     * IP pool name.
     */
    name: string;
}

export interface FirewallPolicy46Srcaddr {
    /**
     * IP pool name.
     */
    name: string;
}

export interface FirewallPolicy64Dstaddr {
    /**
     * IP pool name.
     */
    name: string;
}

export interface FirewallPolicy64Poolname {
    /**
     * IP pool name.
     */
    name: string;
}

export interface FirewallPolicy64Service {
    /**
     * IP pool name.
     */
    name: string;
}

export interface FirewallPolicy64Srcaddr {
    /**
     * IP pool name.
     */
    name: string;
}

export interface FirewallPolicy6AppCategory {
    /**
     * URL category ID.
     */
    id: number;
}

export interface FirewallPolicy6AppGroup {
    /**
     * Names of FSSO groups.
     */
    name: string;
}

export interface FirewallPolicy6Application {
    /**
     * URL category ID.
     */
    id: number;
}

export interface FirewallPolicy6CustomLogField {
    /**
     * Custom log field.
     */
    fieldId: string;
}

export interface FirewallPolicy6Device {
    /**
     * Names of FSSO groups.
     */
    name: string;
}

export interface FirewallPolicy6Dstaddr {
    /**
     * Names of FSSO groups.
     */
    name: string;
}

export interface FirewallPolicy6Dstintf {
    /**
     * Names of FSSO groups.
     */
    name: string;
}

export interface FirewallPolicy6FssoGroup {
    /**
     * Names of FSSO groups.
     */
    name: string;
}

export interface FirewallPolicy6Group {
    /**
     * Names of FSSO groups.
     */
    name: string;
}

export interface FirewallPolicy6Poolname {
    /**
     * Names of FSSO groups.
     */
    name: string;
}

export interface FirewallPolicy6Service {
    /**
     * Names of FSSO groups.
     */
    name: string;
}

export interface FirewallPolicy6Srcaddr {
    /**
     * Names of FSSO groups.
     */
    name: string;
}

export interface FirewallPolicy6Srcintf {
    /**
     * Names of FSSO groups.
     */
    name: string;
}

export interface FirewallPolicy6SslMirrorIntf {
    /**
     * Names of FSSO groups.
     */
    name: string;
}

export interface FirewallPolicy6UrlCategory {
    /**
     * URL category ID.
     */
    id: number;
}

export interface FirewallPolicy6User {
    /**
     * Names of FSSO groups.
     */
    name: string;
}

export interface FirewallPolicyAppCategory {
    /**
     * Security group tag.
     */
    id: number;
}

export interface FirewallPolicyAppGroup {
    /**
     * Mirror Interface name.
     */
    name: string;
}

export interface FirewallPolicyApplication {
    /**
     * Security group tag.
     */
    id: number;
}

export interface FirewallPolicyCustomLogField {
    /**
     * Custom log field.
     */
    fieldId: string;
}

export interface FirewallPolicyDevice {
    /**
     * Mirror Interface name.
     */
    name: string;
}

export interface FirewallPolicyDstaddr {
    /**
     * Mirror Interface name.
     */
    name: string;
}

export interface FirewallPolicyDstaddr6 {
    /**
     * Mirror Interface name.
     */
    name: string;
}

export interface FirewallPolicyDstintf {
    /**
     * Mirror Interface name.
     */
    name: string;
}

export interface FirewallPolicyFssoGroup {
    /**
     * Mirror Interface name.
     */
    name: string;
}

export interface FirewallPolicyGroup {
    /**
     * Mirror Interface name.
     */
    name: string;
}

export interface FirewallPolicyInternetServiceCustom {
    /**
     * Mirror Interface name.
     */
    name: string;
}

export interface FirewallPolicyInternetServiceCustomGroup {
    /**
     * Mirror Interface name.
     */
    name: string;
}

export interface FirewallPolicyInternetServiceGroup {
    /**
     * Mirror Interface name.
     */
    name: string;
}

export interface FirewallPolicyInternetServiceId {
    /**
     * Security group tag.
     */
    id: number;
}

export interface FirewallPolicyInternetServiceName {
    /**
     * Mirror Interface name.
     */
    name: string;
}

export interface FirewallPolicyInternetServiceSrcCustom {
    /**
     * Mirror Interface name.
     */
    name: string;
}

export interface FirewallPolicyInternetServiceSrcCustomGroup {
    /**
     * Mirror Interface name.
     */
    name: string;
}

export interface FirewallPolicyInternetServiceSrcGroup {
    /**
     * Mirror Interface name.
     */
    name: string;
}

export interface FirewallPolicyInternetServiceSrcId {
    /**
     * Security group tag.
     */
    id: number;
}

export interface FirewallPolicyInternetServiceSrcName {
    /**
     * Mirror Interface name.
     */
    name: string;
}

export interface FirewallPolicyNtlmEnabledBrowser {
    /**
     * User agent string.
     */
    userAgentString: string;
}

export interface FirewallPolicyPoolname {
    /**
     * Mirror Interface name.
     */
    name: string;
}

export interface FirewallPolicyPoolname6 {
    /**
     * Mirror Interface name.
     */
    name: string;
}

export interface FirewallPolicyRtpAddr {
    /**
     * Mirror Interface name.
     */
    name: string;
}

export interface FirewallPolicyService {
    /**
     * Mirror Interface name.
     */
    name: string;
}

export interface FirewallPolicySgt {
    /**
     * Security group tag.
     */
    id: number;
}

export interface FirewallPolicySrcVendorMac {
    /**
     * Security group tag.
     */
    id: number;
}

export interface FirewallPolicySrcaddr {
    /**
     * Mirror Interface name.
     */
    name: string;
}

export interface FirewallPolicySrcaddr6 {
    /**
     * Mirror Interface name.
     */
    name: string;
}

export interface FirewallPolicySrcintf {
    /**
     * Mirror Interface name.
     */
    name: string;
}

export interface FirewallPolicySslMirrorIntf {
    /**
     * Mirror Interface name.
     */
    name: string;
}

export interface FirewallPolicyUrlCategory {
    /**
     * Security group tag.
     */
    id: number;
}

export interface FirewallPolicyUser {
    /**
     * Mirror Interface name.
     */
    name: string;
}

export interface FirewallPolicyZtnaEmsTag {
    /**
     * Mirror Interface name.
     */
    name: string;
}

export interface FirewallPolicyZtnaGeoTag {
    /**
     * Mirror Interface name.
     */
    name: string;
}

export interface FirewallProfileProtocolOptionsCifs {
    /**
     * Domain for which to decrypt CIFS traffic.
     */
    domainController: string;
    /**
     * One or more options that can be applied to the session. Valid values: `oversize`.
     */
    options: string;
    /**
     * Maximum in-memory file size that can be scanned (1 - 383 MB, default = 10).
     */
    oversizeLimit: number;
    /**
     * Ports to scan for content (1 - 65535, default = 445).
     */
    ports: number;
    /**
     * Enable/disable scanning of BZip2 compressed files. Valid values: `enable`, `disable`.
     */
    scanBzip2: string;
    /**
     * CIFS server credential type. Valid values: `none`, `credential-replication`, `credential-keytab`.
     */
    serverCredentialType: string;
    /**
     * Server keytab. The structure of `serverKeytab` block is documented below.
     */
    serverKeytabs?: outputs.FirewallProfileProtocolOptionsCifsServerKeytab[];
    /**
     * Enable/disable adding an email signature to SMTP email messages as they pass through the FortiGate. Valid values: `disable`, `enable`.
     */
    status: string;
    /**
     * Maximum dynamic TCP window size (default = 8MB).
     */
    tcpWindowMaximum: number;
    /**
     * Minimum dynamic TCP window size (default = 128KB).
     */
    tcpWindowMinimum: number;
    /**
     * Set TCP static window size (default = 256KB).
     */
    tcpWindowSize: number;
    /**
     * Specify type of TCP window to use for this protocol.
     */
    tcpWindowType: string;
    /**
     * Maximum nested levels of compression that can be uncompressed and scanned (2 - 100, default = 12).
     */
    uncompressedNestLimit: number;
    /**
     * Maximum in-memory uncompressed file size that can be scanned (0 - 383 MB, 0 = unlimited, default = 10).
     */
    uncompressedOversizeLimit: number;
}

export interface FirewallProfileProtocolOptionsCifsServerKeytab {
    /**
     * Base64 encoded keytab file containing credential of the server.
     */
    keytab: string;
    /**
     * Service principal.  For example, "host/cifsserver.example.com@example.com".
     */
    principal: string;
}

export interface FirewallProfileProtocolOptionsDns {
    /**
     * Ports to scan for content (1 - 65535, default = 445).
     */
    ports: number;
    /**
     * Enable/disable adding an email signature to SMTP email messages as they pass through the FortiGate. Valid values: `disable`, `enable`.
     */
    status: string;
}

export interface FirewallProfileProtocolOptionsFtp {
    /**
     * Amount of data to send in a transmission for client comforting (1 - 65535 bytes, default = 1).
     */
    comfortAmount: number;
    /**
     * Period of time between start, or last transmission, and the next client comfort transmission of data (1 - 900 sec, default = 10).
     */
    comfortInterval: number;
    /**
     * Enable/disable the inspection of all ports for the protocol. Valid values: `enable`, `disable`.
     */
    inspectAll: string;
    /**
     * One or more options that can be applied to the session. Valid values: `oversize`.
     */
    options: string;
    /**
     * Maximum in-memory file size that can be scanned (1 - 383 MB, default = 10).
     */
    oversizeLimit: number;
    /**
     * Ports to scan for content (1 - 65535, default = 445).
     */
    ports: number;
    /**
     * Enable/disable scanning of BZip2 compressed files. Valid values: `enable`, `disable`.
     */
    scanBzip2: string;
    /**
     * SSL decryption and encryption performed by an external device. Valid values: `no`, `yes`.
     */
    sslOffloaded: string;
    /**
     * Enable/disable adding an email signature to SMTP email messages as they pass through the FortiGate. Valid values: `disable`, `enable`.
     */
    status: string;
    /**
     * Maximum stream-based uncompressed data size that will be scanned (MB, 0 = unlimited (default).  Stream-based uncompression used only under certain conditions.).
     */
    streamBasedUncompressedLimit: number;
    /**
     * Maximum dynamic TCP window size (default = 8MB).
     */
    tcpWindowMaximum: number;
    /**
     * Minimum dynamic TCP window size (default = 128KB).
     */
    tcpWindowMinimum: number;
    /**
     * Set TCP static window size (default = 256KB).
     */
    tcpWindowSize: number;
    /**
     * Specify type of TCP window to use for this protocol.
     */
    tcpWindowType: string;
    /**
     * Maximum nested levels of compression that can be uncompressed and scanned (2 - 100, default = 12).
     */
    uncompressedNestLimit: number;
    /**
     * Maximum in-memory uncompressed file size that can be scanned (0 - 383 MB, 0 = unlimited, default = 10).
     */
    uncompressedOversizeLimit: number;
}

export interface FirewallProfileProtocolOptionsHttp {
    /**
     * Code number returned for blocked HTTP pages (non-FortiGuard only) (100 - 599, default = 403).
     */
    blockPageStatusCode: number;
    /**
     * Amount of data to send in a transmission for client comforting (1 - 65535 bytes, default = 1).
     */
    comfortAmount: number;
    /**
     * Period of time between start, or last transmission, and the next client comfort transmission of data (1 - 900 sec, default = 10).
     */
    comfortInterval: number;
    /**
     * Enable/disable Fortinet bar on HTML content. Valid values: `enable`, `disable`.
     */
    fortinetBar: string;
    /**
     * Port for use by Fortinet Bar (1 - 65535, default = 8011).
     */
    fortinetBarPort: number;
    /**
     * Enable/disable HTTP policy check. Valid values: `disable`, `enable`.
     */
    httpPolicy: string;
    /**
     * Enable/disable the inspection of all ports for the protocol. Valid values: `enable`, `disable`.
     */
    inspectAll: string;
    /**
     * One or more options that can be applied to the session. Valid values: `oversize`.
     */
    options: string;
    /**
     * Maximum in-memory file size that can be scanned (1 - 383 MB, default = 10).
     */
    oversizeLimit: number;
    /**
     * Ports to scan for content (1 - 65535, default = 445).
     */
    ports: number;
    /**
     * ID codes for character sets to be used to convert to UTF-8 for banned words and DLP on HTTP posts (maximum of 5 character sets). Valid values: `jisx0201`, `jisx0208`, `jisx0212`, `gb2312`, `ksc5601-ex`, `euc-jp`, `sjis`, `iso2022-jp`, `iso2022-jp-1`, `iso2022-jp-2`, `euc-cn`, `ces-gbk`, `hz`, `ces-big5`, `euc-kr`, `iso2022-jp-3`, `iso8859-1`, `tis620`, `cp874`, `cp1252`, `cp1251`.
     */
    postLang: string;
    /**
     * Proxy traffic after the TCP 3-way handshake has been established (not before). Valid values: `enable`, `disable`.
     */
    proxyAfterTcpHandshake: string;
    /**
     * Enable/disable blocking of partial downloads. Valid values: `disable`, `enable`.
     */
    rangeBlock: string;
    /**
     * Number of attempts to retry HTTP connection (0 - 100, default = 0).
     */
    retryCount: number;
    /**
     * Enable/disable scanning of BZip2 compressed files. Valid values: `enable`, `disable`.
     */
    scanBzip2: string;
    /**
     * SSL decryption and encryption performed by an external device. Valid values: `no`, `yes`.
     */
    sslOffloaded: string;
    /**
     * Enable/disable adding an email signature to SMTP email messages as they pass through the FortiGate. Valid values: `disable`, `enable`.
     */
    status: string;
    /**
     * Maximum stream-based uncompressed data size that will be scanned (MB, 0 = unlimited (default).  Stream-based uncompression used only under certain conditions.).
     */
    streamBasedUncompressedLimit: number;
    /**
     * Enable/disable bypassing of streaming content from buffering. Valid values: `enable`, `disable`.
     */
    streamingContentBypass: string;
    /**
     * Enable/disable stripping of HTTP X-Forwarded-For header. Valid values: `disable`, `enable`.
     */
    stripXForwardedFor: string;
    /**
     * Bypass from scanning, or block a connection that attempts to switch protocol. Valid values: `bypass`, `block`.
     */
    switchingProtocols: string;
    /**
     * Maximum dynamic TCP window size (default = 8MB).
     */
    tcpWindowMaximum: number;
    /**
     * Minimum dynamic TCP window size (default = 128KB).
     */
    tcpWindowMinimum: number;
    /**
     * Set TCP static window size (default = 256KB).
     */
    tcpWindowSize: number;
    /**
     * Specify type of TCP window to use for this protocol.
     */
    tcpWindowType: string;
    /**
     * Configure how to process non-HTTP traffic when a profile configured for HTTP traffic accepts a non-HTTP session. Can occur if an application sends non-HTTP traffic using an HTTP destination port. Valid values: `enable`, `disable`.
     */
    tunnelNonHttp: string;
    /**
     * Maximum nested levels of compression that can be uncompressed and scanned (2 - 100, default = 12).
     */
    uncompressedNestLimit: number;
    /**
     * Maximum in-memory uncompressed file size that can be scanned (0 - 383 MB, 0 = unlimited, default = 10).
     */
    uncompressedOversizeLimit: number;
    /**
     * How to handle HTTP sessions that do not comply with HTTP 0.9, 1.0, or 1.1. Valid values: `reject`, `tunnel`, `best-effort`.
     */
    unknownHttpVersion: string;
}

export interface FirewallProfileProtocolOptionsImap {
    /**
     * Enable/disable the inspection of all ports for the protocol. Valid values: `enable`, `disable`.
     */
    inspectAll: string;
    /**
     * One or more options that can be applied to the session. Valid values: `oversize`.
     */
    options: string;
    /**
     * Maximum in-memory file size that can be scanned (1 - 383 MB, default = 10).
     */
    oversizeLimit: number;
    /**
     * Ports to scan for content (1 - 65535, default = 445).
     */
    ports: number;
    /**
     * Proxy traffic after the TCP 3-way handshake has been established (not before). Valid values: `enable`, `disable`.
     */
    proxyAfterTcpHandshake: string;
    /**
     * Enable/disable scanning of BZip2 compressed files. Valid values: `enable`, `disable`.
     */
    scanBzip2: string;
    /**
     * SSL decryption and encryption performed by an external device. Valid values: `no`, `yes`.
     */
    sslOffloaded: string;
    /**
     * Enable/disable adding an email signature to SMTP email messages as they pass through the FortiGate. Valid values: `disable`, `enable`.
     */
    status: string;
    /**
     * Maximum nested levels of compression that can be uncompressed and scanned (2 - 100, default = 12).
     */
    uncompressedNestLimit: number;
    /**
     * Maximum in-memory uncompressed file size that can be scanned (0 - 383 MB, 0 = unlimited, default = 10).
     */
    uncompressedOversizeLimit: number;
}

export interface FirewallProfileProtocolOptionsMailSignature {
    /**
     * Email signature to be added to outgoing email (if the signature contains spaces, enclose with quotation marks).
     */
    signature: string;
    /**
     * Enable/disable adding an email signature to SMTP email messages as they pass through the FortiGate. Valid values: `disable`, `enable`.
     */
    status: string;
}

export interface FirewallProfileProtocolOptionsMapi {
    /**
     * One or more options that can be applied to the session. Valid values: `oversize`.
     */
    options: string;
    /**
     * Maximum in-memory file size that can be scanned (1 - 383 MB, default = 10).
     */
    oversizeLimit: number;
    /**
     * Ports to scan for content (1 - 65535, default = 445).
     */
    ports: number;
    /**
     * Enable/disable scanning of BZip2 compressed files. Valid values: `enable`, `disable`.
     */
    scanBzip2: string;
    /**
     * Enable/disable adding an email signature to SMTP email messages as they pass through the FortiGate. Valid values: `disable`, `enable`.
     */
    status: string;
    /**
     * Maximum nested levels of compression that can be uncompressed and scanned (2 - 100, default = 12).
     */
    uncompressedNestLimit: number;
    /**
     * Maximum in-memory uncompressed file size that can be scanned (0 - 383 MB, 0 = unlimited, default = 10).
     */
    uncompressedOversizeLimit: number;
}

export interface FirewallProfileProtocolOptionsNntp {
    /**
     * Enable/disable the inspection of all ports for the protocol. Valid values: `enable`, `disable`.
     */
    inspectAll: string;
    /**
     * One or more options that can be applied to the session. Valid values: `oversize`.
     */
    options: string;
    /**
     * Maximum in-memory file size that can be scanned (1 - 383 MB, default = 10).
     */
    oversizeLimit: number;
    /**
     * Ports to scan for content (1 - 65535, default = 445).
     */
    ports: number;
    /**
     * Proxy traffic after the TCP 3-way handshake has been established (not before). Valid values: `enable`, `disable`.
     */
    proxyAfterTcpHandshake: string;
    /**
     * Enable/disable scanning of BZip2 compressed files. Valid values: `enable`, `disable`.
     */
    scanBzip2: string;
    /**
     * Enable/disable adding an email signature to SMTP email messages as they pass through the FortiGate. Valid values: `disable`, `enable`.
     */
    status: string;
    /**
     * Maximum nested levels of compression that can be uncompressed and scanned (2 - 100, default = 12).
     */
    uncompressedNestLimit: number;
    /**
     * Maximum in-memory uncompressed file size that can be scanned (0 - 383 MB, 0 = unlimited, default = 10).
     */
    uncompressedOversizeLimit: number;
}

export interface FirewallProfileProtocolOptionsPop3 {
    /**
     * Enable/disable the inspection of all ports for the protocol. Valid values: `enable`, `disable`.
     */
    inspectAll: string;
    /**
     * One or more options that can be applied to the session. Valid values: `oversize`.
     */
    options: string;
    /**
     * Maximum in-memory file size that can be scanned (1 - 383 MB, default = 10).
     */
    oversizeLimit: number;
    /**
     * Ports to scan for content (1 - 65535, default = 445).
     */
    ports: number;
    /**
     * Proxy traffic after the TCP 3-way handshake has been established (not before). Valid values: `enable`, `disable`.
     */
    proxyAfterTcpHandshake: string;
    /**
     * Enable/disable scanning of BZip2 compressed files. Valid values: `enable`, `disable`.
     */
    scanBzip2: string;
    /**
     * SSL decryption and encryption performed by an external device. Valid values: `no`, `yes`.
     */
    sslOffloaded: string;
    /**
     * Enable/disable adding an email signature to SMTP email messages as they pass through the FortiGate. Valid values: `disable`, `enable`.
     */
    status: string;
    /**
     * Maximum nested levels of compression that can be uncompressed and scanned (2 - 100, default = 12).
     */
    uncompressedNestLimit: number;
    /**
     * Maximum in-memory uncompressed file size that can be scanned (0 - 383 MB, 0 = unlimited, default = 10).
     */
    uncompressedOversizeLimit: number;
}

export interface FirewallProfileProtocolOptionsSmtp {
    /**
     * Enable/disable the inspection of all ports for the protocol. Valid values: `enable`, `disable`.
     */
    inspectAll: string;
    /**
     * One or more options that can be applied to the session. Valid values: `oversize`.
     */
    options: string;
    /**
     * Maximum in-memory file size that can be scanned (1 - 383 MB, default = 10).
     */
    oversizeLimit: number;
    /**
     * Ports to scan for content (1 - 65535, default = 445).
     */
    ports: number;
    /**
     * Proxy traffic after the TCP 3-way handshake has been established (not before). Valid values: `enable`, `disable`.
     */
    proxyAfterTcpHandshake: string;
    /**
     * Enable/disable scanning of BZip2 compressed files. Valid values: `enable`, `disable`.
     */
    scanBzip2: string;
    /**
     * Enable/disable SMTP server busy when server not available. Valid values: `enable`, `disable`.
     */
    serverBusy: string;
    /**
     * SSL decryption and encryption performed by an external device. Valid values: `no`, `yes`.
     */
    sslOffloaded: string;
    /**
     * Enable/disable adding an email signature to SMTP email messages as they pass through the FortiGate. Valid values: `disable`, `enable`.
     */
    status: string;
    /**
     * Maximum nested levels of compression that can be uncompressed and scanned (2 - 100, default = 12).
     */
    uncompressedNestLimit: number;
    /**
     * Maximum in-memory uncompressed file size that can be scanned (0 - 383 MB, 0 = unlimited, default = 10).
     */
    uncompressedOversizeLimit: number;
}

export interface FirewallProfileProtocolOptionsSsh {
    /**
     * Amount of data to send in a transmission for client comforting (1 - 65535 bytes, default = 1).
     */
    comfortAmount: number;
    /**
     * Period of time between start, or last transmission, and the next client comfort transmission of data (1 - 900 sec, default = 10).
     */
    comfortInterval: number;
    /**
     * One or more options that can be applied to the session. Valid values: `oversize`.
     */
    options: string;
    /**
     * Maximum in-memory file size that can be scanned (1 - 383 MB, default = 10).
     */
    oversizeLimit: number;
    /**
     * Enable/disable scanning of BZip2 compressed files. Valid values: `enable`, `disable`.
     */
    scanBzip2: string;
    /**
     * SSL decryption and encryption performed by an external device. Valid values: `no`, `yes`.
     */
    sslOffloaded: string;
    /**
     * Maximum stream-based uncompressed data size that will be scanned (MB, 0 = unlimited (default).  Stream-based uncompression used only under certain conditions.).
     */
    streamBasedUncompressedLimit: number;
    /**
     * Maximum dynamic TCP window size (default = 8MB).
     */
    tcpWindowMaximum: number;
    /**
     * Minimum dynamic TCP window size (default = 128KB).
     */
    tcpWindowMinimum: number;
    /**
     * Set TCP static window size (default = 256KB).
     */
    tcpWindowSize: number;
    /**
     * Specify type of TCP window to use for this protocol.
     */
    tcpWindowType: string;
    /**
     * Maximum nested levels of compression that can be uncompressed and scanned (2 - 100, default = 12).
     */
    uncompressedNestLimit: number;
    /**
     * Maximum in-memory uncompressed file size that can be scanned (0 - 383 MB, 0 = unlimited, default = 10).
     */
    uncompressedOversizeLimit: number;
}

export interface FirewallProxyAddressCategory {
    /**
     * ID.
     */
    id: number;
}

export interface FirewallProxyAddressHeaderGroup {
    /**
     * Case sensitivity in pattern. Valid values: `disable`, `enable`.
     */
    caseSensitivity: string;
    /**
     * HTTP header regular expression.
     */
    header: string;
    /**
     * HTTP header.
     */
    headerName: string;
    /**
     * ID.
     */
    id: number;
}

export interface FirewallProxyAddressTagging {
    /**
     * Tag category.
     */
    category: string;
    /**
     * Tag name.
     */
    name: string;
    /**
     * Tags. The structure of `tags` block is documented below.
     */
    tags?: outputs.FirewallProxyAddressTaggingTag[];
}

export interface FirewallProxyAddressTaggingTag {
    /**
     * Tag name.
     */
    name: string;
}

export interface FirewallProxyAddrgrpMember {
    /**
     * Tag name.
     */
    name: string;
}

export interface FirewallProxyAddrgrpTagging {
    /**
     * Tag category.
     */
    category: string;
    /**
     * Tag name.
     */
    name: string;
    /**
     * Tags. The structure of `tags` block is documented below.
     */
    tags?: outputs.FirewallProxyAddrgrpTaggingTag[];
}

export interface FirewallProxyAddrgrpTaggingTag {
    /**
     * Tag name.
     */
    name: string;
}

export interface FirewallProxyPolicyAccessProxy {
    /**
     * Group name.
     */
    name: string;
}

export interface FirewallProxyPolicyAccessProxy6 {
    /**
     * Group name.
     */
    name: string;
}

export interface FirewallProxyPolicyDstaddr {
    /**
     * Group name.
     */
    name: string;
}

export interface FirewallProxyPolicyDstaddr6 {
    /**
     * Group name.
     */
    name: string;
}

export interface FirewallProxyPolicyDstintf {
    /**
     * Group name.
     */
    name: string;
}

export interface FirewallProxyPolicyGroup {
    /**
     * Group name.
     */
    name: string;
}

export interface FirewallProxyPolicyInternetServiceCustom {
    /**
     * Group name.
     */
    name: string;
}

export interface FirewallProxyPolicyInternetServiceCustomGroup {
    /**
     * Group name.
     */
    name: string;
}

export interface FirewallProxyPolicyInternetServiceGroup {
    /**
     * Group name.
     */
    name: string;
}

export interface FirewallProxyPolicyInternetServiceId {
    /**
     * Internet Service ID.
     */
    id: number;
}

export interface FirewallProxyPolicyInternetServiceName {
    /**
     * Group name.
     */
    name: string;
}

export interface FirewallProxyPolicyPoolname {
    /**
     * Group name.
     */
    name: string;
}

export interface FirewallProxyPolicyService {
    /**
     * Group name.
     */
    name: string;
}

export interface FirewallProxyPolicySrcaddr {
    /**
     * Group name.
     */
    name: string;
}

export interface FirewallProxyPolicySrcaddr6 {
    /**
     * Group name.
     */
    name: string;
}

export interface FirewallProxyPolicySrcintf {
    /**
     * Group name.
     */
    name: string;
}

export interface FirewallProxyPolicyUser {
    /**
     * Group name.
     */
    name: string;
}

export interface FirewallProxyPolicyZtnaEmsTag {
    /**
     * Group name.
     */
    name: string;
}

export interface FirewallRegionCity {
    /**
     * City ID.
     */
    id: number;
}

export interface FirewallScheduleGroupMember {
    /**
     * Schedule name.
     */
    name: string;
}

export interface FirewallSecurityPolicyAppCategory {
    /**
     * URL category ID.
     */
    id: number;
}

export interface FirewallSecurityPolicyAppGroup {
    /**
     * Names of FSSO groups.
     */
    name: string;
}

export interface FirewallSecurityPolicyApplication {
    /**
     * URL category ID.
     */
    id: number;
}

export interface FirewallSecurityPolicyDstaddr {
    /**
     * Names of FSSO groups.
     */
    name: string;
}

export interface FirewallSecurityPolicyDstaddr4 {
    /**
     * Names of FSSO groups.
     */
    name: string;
}

export interface FirewallSecurityPolicyDstaddr6 {
    /**
     * Names of FSSO groups.
     */
    name: string;
}

export interface FirewallSecurityPolicyDstintf {
    /**
     * Names of FSSO groups.
     */
    name: string;
}

export interface FirewallSecurityPolicyFssoGroup {
    /**
     * Names of FSSO groups.
     */
    name: string;
}

export interface FirewallSecurityPolicyGroup {
    /**
     * Names of FSSO groups.
     */
    name: string;
}

export interface FirewallSecurityPolicyInternetServiceCustom {
    /**
     * Names of FSSO groups.
     */
    name: string;
}

export interface FirewallSecurityPolicyInternetServiceCustomGroup {
    /**
     * Names of FSSO groups.
     */
    name: string;
}

export interface FirewallSecurityPolicyInternetServiceGroup {
    /**
     * Names of FSSO groups.
     */
    name: string;
}

export interface FirewallSecurityPolicyInternetServiceId {
    /**
     * URL category ID.
     */
    id: number;
}

export interface FirewallSecurityPolicyInternetServiceName {
    /**
     * Names of FSSO groups.
     */
    name: string;
}

export interface FirewallSecurityPolicyInternetServiceSrcCustom {
    /**
     * Names of FSSO groups.
     */
    name: string;
}

export interface FirewallSecurityPolicyInternetServiceSrcCustomGroup {
    /**
     * Names of FSSO groups.
     */
    name: string;
}

export interface FirewallSecurityPolicyInternetServiceSrcGroup {
    /**
     * Names of FSSO groups.
     */
    name: string;
}

export interface FirewallSecurityPolicyInternetServiceSrcId {
    /**
     * URL category ID.
     */
    id: number;
}

export interface FirewallSecurityPolicyInternetServiceSrcName {
    /**
     * Names of FSSO groups.
     */
    name: string;
}

export interface FirewallSecurityPolicySeqStatePolicyList {
    action: string;
    name: string;
    policyid: string;
}

export interface FirewallSecurityPolicyService {
    /**
     * Names of FSSO groups.
     */
    name: string;
}

export interface FirewallSecurityPolicySortStatePolicyList {
    action: string;
    name: string;
    policyid: string;
}

export interface FirewallSecurityPolicySrcaddr {
    /**
     * Names of FSSO groups.
     */
    name: string;
}

export interface FirewallSecurityPolicySrcaddr4 {
    /**
     * Names of FSSO groups.
     */
    name: string;
}

export interface FirewallSecurityPolicySrcaddr6 {
    /**
     * Names of FSSO groups.
     */
    name: string;
}

export interface FirewallSecurityPolicySrcintf {
    /**
     * Names of FSSO groups.
     */
    name: string;
}

export interface FirewallSecurityPolicyUrlCategory {
    /**
     * URL category ID.
     */
    id: number;
}

export interface FirewallSecurityPolicyUser {
    /**
     * Names of FSSO groups.
     */
    name: string;
}

export interface FirewallServiceCustomAppCategory {
    /**
     * Application id.
     */
    id: number;
}

export interface FirewallServiceCustomApplication {
    /**
     * Application id.
     */
    id: number;
}

export interface FirewallServiceGroupMember {
    /**
     * Address name.
     */
    name: string;
}

export interface FirewallShapingPolicyAppCategory {
    /**
     * URL category ID.
     */
    id: number;
}

export interface FirewallShapingPolicyAppGroup {
    /**
     * Interface name.
     */
    name: string;
}

export interface FirewallShapingPolicyApplication {
    /**
     * URL category ID.
     */
    id: number;
}

export interface FirewallShapingPolicyDstaddr {
    /**
     * Interface name.
     */
    name: string;
}

export interface FirewallShapingPolicyDstaddr6 {
    /**
     * Interface name.
     */
    name: string;
}

export interface FirewallShapingPolicyDstintf {
    /**
     * Interface name.
     */
    name: string;
}

export interface FirewallShapingPolicyGroup {
    /**
     * Interface name.
     */
    name: string;
}

export interface FirewallShapingPolicyInternetServiceCustom {
    /**
     * Interface name.
     */
    name: string;
}

export interface FirewallShapingPolicyInternetServiceCustomGroup {
    /**
     * Interface name.
     */
    name: string;
}

export interface FirewallShapingPolicyInternetServiceGroup {
    /**
     * Interface name.
     */
    name: string;
}

export interface FirewallShapingPolicyInternetServiceId {
    /**
     * URL category ID.
     */
    id: number;
}

export interface FirewallShapingPolicyInternetServiceName {
    /**
     * Interface name.
     */
    name: string;
}

export interface FirewallShapingPolicyInternetServiceSrcCustom {
    /**
     * Interface name.
     */
    name: string;
}

export interface FirewallShapingPolicyInternetServiceSrcCustomGroup {
    /**
     * Interface name.
     */
    name: string;
}

export interface FirewallShapingPolicyInternetServiceSrcGroup {
    /**
     * Interface name.
     */
    name: string;
}

export interface FirewallShapingPolicyInternetServiceSrcId {
    /**
     * URL category ID.
     */
    id: number;
}

export interface FirewallShapingPolicyInternetServiceSrcName {
    /**
     * Interface name.
     */
    name: string;
}

export interface FirewallShapingPolicyService {
    /**
     * Interface name.
     */
    name: string;
}

export interface FirewallShapingPolicySrcaddr {
    /**
     * Interface name.
     */
    name: string;
}

export interface FirewallShapingPolicySrcaddr6 {
    /**
     * Interface name.
     */
    name: string;
}

export interface FirewallShapingPolicySrcintf {
    /**
     * Interface name.
     */
    name: string;
}

export interface FirewallShapingPolicyUrlCategory {
    /**
     * URL category ID.
     */
    id: number;
}

export interface FirewallShapingPolicyUser {
    /**
     * Interface name.
     */
    name: string;
}

export interface FirewallShapingProfileShapingEntry {
    /**
     * Number of bytes that can be burst at maximum-bandwidth speed. Formula: burst = maximum-bandwidth*burst-in-msec.
     */
    burstInMsec: number;
    /**
     * Number of bytes that can be burst as fast as the interface can transmit. Formula: cburst = maximum-bandwidth*cburst-in-msec.
     */
    cburstInMsec: number;
    /**
     * Class ID.
     */
    classId: number;
    /**
     * Guaranteed bandwith in percentage.
     */
    guaranteedBandwidthPercentage: number;
    /**
     * ID number.
     */
    id: number;
    /**
     * Hard limit on the real queue size in packets.
     */
    limit: number;
    /**
     * Average queue size in packets at which RED drop probability is maximal.
     */
    max: number;
    /**
     * Maximum bandwith in percentage.
     */
    maximumBandwidthPercentage: number;
    /**
     * Average queue size in packets at which RED drop becomes a possibility.
     */
    min: number;
    /**
     * Priority.
     */
    priority: string;
    /**
     * Maximum probability (in percentage) for RED marking.
     */
    redProbability: number;
}

export interface FirewallSnifferAnomaly {
    /**
     * Action taken when the threshold is reached.
     */
    action: string;
    /**
     * Enable/disable anomaly logging. Valid values: `enable`, `disable`.
     */
    log: string;
    /**
     * Anomaly name.
     */
    name: string;
    /**
     * Quarantine method. Valid values: `none`, `attacker`.
     */
    quarantine: string;
    /**
     * Duration of quarantine. (Format ###d##h##m, minimum 1m, maximum 364d23h59m, default = 5m). Requires quarantine set to attacker.
     */
    quarantineExpiry: string;
    /**
     * Enable/disable quarantine logging. Valid values: `disable`, `enable`.
     */
    quarantineLog: string;
    /**
     * Enable/disable this anomaly. Valid values: `disable`, `enable`.
     */
    status: string;
    /**
     * Anomaly threshold. Number of detected instances per minute that triggers the anomaly action.
     */
    threshold: number;
    /**
     * Number of detected instances per minute which triggers action (1 - 2147483647, default = 1000). Note that each anomaly has a different threshold value assigned to it.
     */
    thresholddefault: number;
}

export interface FirewallSnifferIpThreatfeed {
    /**
     * Anomaly name.
     */
    name: string;
}

export interface FirewallSslSshProfileDot {
    /**
     * Action based on certificate validation failure. Valid values: `allow`, `block`, `ignore`.
     */
    certValidationFailure: string;
    /**
     * Action based on certificate validation timeout. Valid values: `allow`, `block`, `ignore`.
     */
    certValidationTimeout: string;
    /**
     * Action based on received client certificate. Valid values: `bypass`, `inspect`, `block`.
     */
    clientCertificate: string;
    /**
     * Action based on server certificate is expired. Valid values: `allow`, `block`, `ignore`.
     */
    expiredServerCert: string;
    /**
     * Proxy traffic after the TCP 3-way handshake has been established (not before). Valid values: `enable`, `disable`.
     */
    proxyAfterTcpHandshake: string;
    /**
     * Action based on server certificate is revoked. Valid values: `allow`, `block`, `ignore`.
     */
    revokedServerCert: string;
    /**
     * Check the SNI in the client hello message with the CN or SAN fields in the returned server certificate. Valid values: `enable`, `strict`, `disable`.
     */
    sniServerCertCheck: string;
    /**
     * Configure protocol inspection status. Valid values: `disable`, `deep-inspection`.
     */
    status: string;
    /**
     * Action based on the SSL cipher used being unsupported. Valid values: `allow`, `block`.
     */
    unsupportedSslCipher: string;
    /**
     * Action based on the SSL negotiation used being unsupported. Valid values: `allow`, `block`.
     */
    unsupportedSslNegotiation: string;
    /**
     * Action based on the SSL version used being unsupported.
     */
    unsupportedSslVersion: string;
    /**
     * Action based on server certificate is not issued by a trusted CA. Valid values: `allow`, `block`, `ignore`.
     */
    untrustedServerCert: string;
}

export interface FirewallSslSshProfileFtps {
    /**
     * Action based on certificate validation failure. Valid values: `allow`, `block`, `ignore`.
     */
    certValidationFailure: string;
    /**
     * Action based on certificate validation timeout. Valid values: `allow`, `block`, `ignore`.
     */
    certValidationTimeout: string;
    /**
     * Action based on client certificate request. Valid values: `bypass`, `inspect`, `block`.
     */
    clientCertRequest: string;
    /**
     * Action based on received client certificate. Valid values: `bypass`, `inspect`, `block`.
     */
    clientCertificate: string;
    /**
     * Action based on server certificate is expired. Valid values: `allow`, `block`, `ignore`.
     */
    expiredServerCert: string;
    /**
     * Allow or block the invalid SSL session server certificate. Valid values: `allow`, `block`.
     */
    invalidServerCert: string;
    /**
     * Minimum SSL version to be allowed. Valid values: `ssl-3.0`, `tls-1.0`, `tls-1.1`, `tls-1.2`, `tls-1.3`.
     */
    minAllowedSslVersion: string;
    /**
     * Ports to use for scanning (1 - 65535, default = 443).
     */
    ports: string;
    /**
     * Action based on server certificate is revoked. Valid values: `allow`, `block`, `ignore`.
     */
    revokedServerCert: string;
    /**
     * Check the SNI in the client hello message with the CN or SAN fields in the returned server certificate. Valid values: `enable`, `strict`, `disable`.
     */
    sniServerCertCheck: string;
    /**
     * Configure protocol inspection status. Valid values: `disable`, `deep-inspection`.
     */
    status: string;
    /**
     * Action based on the SSL encryption used being unsupported. Valid values: `bypass`, `inspect`, `block`.
     */
    unsupportedSsl: string;
    /**
     * Action based on the SSL cipher used being unsupported. Valid values: `allow`, `block`.
     */
    unsupportedSslCipher: string;
    /**
     * Action based on the SSL negotiation used being unsupported. Valid values: `allow`, `block`.
     */
    unsupportedSslNegotiation: string;
    /**
     * Action based on the SSL version used being unsupported.
     */
    unsupportedSslVersion: string;
    /**
     * Action based on server certificate is not issued by a trusted CA. Valid values: `allow`, `block`, `ignore`.
     */
    untrustedServerCert: string;
}

export interface FirewallSslSshProfileHttps {
    /**
     * Action based on certificate probe failure. Valid values: `allow`, `block`.
     */
    certProbeFailure: string;
    /**
     * Action based on certificate validation failure. Valid values: `allow`, `block`, `ignore`.
     */
    certValidationFailure: string;
    /**
     * Action based on certificate validation timeout. Valid values: `allow`, `block`, `ignore`.
     */
    certValidationTimeout: string;
    /**
     * Action based on client certificate request. Valid values: `bypass`, `inspect`, `block`.
     */
    clientCertRequest: string;
    /**
     * Action based on received client certificate. Valid values: `bypass`, `inspect`, `block`.
     */
    clientCertificate: string;
    /**
     * Action based on server certificate is expired. Valid values: `allow`, `block`, `ignore`.
     */
    expiredServerCert: string;
    /**
     * Allow or block the invalid SSL session server certificate. Valid values: `allow`, `block`.
     */
    invalidServerCert: string;
    /**
     * Minimum SSL version to be allowed. Valid values: `ssl-3.0`, `tls-1.0`, `tls-1.1`, `tls-1.2`, `tls-1.3`.
     */
    minAllowedSslVersion: string;
    /**
     * Ports to use for scanning (1 - 65535, default = 443).
     */
    ports: string;
    /**
     * Proxy traffic after the TCP 3-way handshake has been established (not before). Valid values: `enable`, `disable`.
     */
    proxyAfterTcpHandshake: string;
    /**
     * Action based on server certificate is revoked. Valid values: `allow`, `block`, `ignore`.
     */
    revokedServerCert: string;
    /**
     * Check the SNI in the client hello message with the CN or SAN fields in the returned server certificate. Valid values: `enable`, `strict`, `disable`.
     */
    sniServerCertCheck: string;
    /**
     * Configure protocol inspection status. Valid values: `disable`, `deep-inspection`.
     */
    status: string;
    /**
     * Action based on the SSL encryption used being unsupported. Valid values: `bypass`, `inspect`, `block`.
     */
    unsupportedSsl: string;
    /**
     * Action based on the SSL cipher used being unsupported. Valid values: `allow`, `block`.
     */
    unsupportedSslCipher: string;
    /**
     * Action based on the SSL negotiation used being unsupported. Valid values: `allow`, `block`.
     */
    unsupportedSslNegotiation: string;
    /**
     * Action based on the SSL version used being unsupported.
     */
    unsupportedSslVersion: string;
    /**
     * Action based on server certificate is not issued by a trusted CA. Valid values: `allow`, `block`, `ignore`.
     */
    untrustedServerCert: string;
}

export interface FirewallSslSshProfileImaps {
    /**
     * Action based on certificate validation failure. Valid values: `allow`, `block`, `ignore`.
     */
    certValidationFailure: string;
    /**
     * Action based on certificate validation timeout. Valid values: `allow`, `block`, `ignore`.
     */
    certValidationTimeout: string;
    /**
     * Action based on client certificate request. Valid values: `bypass`, `inspect`, `block`.
     */
    clientCertRequest: string;
    /**
     * Action based on received client certificate. Valid values: `bypass`, `inspect`, `block`.
     */
    clientCertificate: string;
    /**
     * Action based on server certificate is expired. Valid values: `allow`, `block`, `ignore`.
     */
    expiredServerCert: string;
    /**
     * Allow or block the invalid SSL session server certificate. Valid values: `allow`, `block`.
     */
    invalidServerCert: string;
    /**
     * Ports to use for scanning (1 - 65535, default = 443).
     */
    ports: string;
    /**
     * Proxy traffic after the TCP 3-way handshake has been established (not before). Valid values: `enable`, `disable`.
     */
    proxyAfterTcpHandshake: string;
    /**
     * Action based on server certificate is revoked. Valid values: `allow`, `block`, `ignore`.
     */
    revokedServerCert: string;
    /**
     * Check the SNI in the client hello message with the CN or SAN fields in the returned server certificate. Valid values: `enable`, `strict`, `disable`.
     */
    sniServerCertCheck: string;
    /**
     * Configure protocol inspection status. Valid values: `disable`, `deep-inspection`.
     */
    status: string;
    /**
     * Action based on the SSL encryption used being unsupported. Valid values: `bypass`, `inspect`, `block`.
     */
    unsupportedSsl: string;
    /**
     * Action based on the SSL cipher used being unsupported. Valid values: `allow`, `block`.
     */
    unsupportedSslCipher: string;
    /**
     * Action based on the SSL negotiation used being unsupported. Valid values: `allow`, `block`.
     */
    unsupportedSslNegotiation: string;
    /**
     * Action based on the SSL version used being unsupported.
     */
    unsupportedSslVersion: string;
    /**
     * Action based on server certificate is not issued by a trusted CA. Valid values: `allow`, `block`, `ignore`.
     */
    untrustedServerCert: string;
}

export interface FirewallSslSshProfilePop3s {
    /**
     * Action based on certificate validation failure. Valid values: `allow`, `block`, `ignore`.
     */
    certValidationFailure: string;
    /**
     * Action based on certificate validation timeout. Valid values: `allow`, `block`, `ignore`.
     */
    certValidationTimeout: string;
    /**
     * Action based on client certificate request. Valid values: `bypass`, `inspect`, `block`.
     */
    clientCertRequest: string;
    /**
     * Action based on received client certificate. Valid values: `bypass`, `inspect`, `block`.
     */
    clientCertificate: string;
    /**
     * Action based on server certificate is expired. Valid values: `allow`, `block`, `ignore`.
     */
    expiredServerCert: string;
    /**
     * Allow or block the invalid SSL session server certificate. Valid values: `allow`, `block`.
     */
    invalidServerCert: string;
    /**
     * Ports to use for scanning (1 - 65535, default = 443).
     */
    ports: string;
    /**
     * Proxy traffic after the TCP 3-way handshake has been established (not before). Valid values: `enable`, `disable`.
     */
    proxyAfterTcpHandshake: string;
    /**
     * Action based on server certificate is revoked. Valid values: `allow`, `block`, `ignore`.
     */
    revokedServerCert: string;
    /**
     * Check the SNI in the client hello message with the CN or SAN fields in the returned server certificate. Valid values: `enable`, `strict`, `disable`.
     */
    sniServerCertCheck: string;
    /**
     * Configure protocol inspection status. Valid values: `disable`, `deep-inspection`.
     */
    status: string;
    /**
     * Action based on the SSL encryption used being unsupported. Valid values: `bypass`, `inspect`, `block`.
     */
    unsupportedSsl: string;
    /**
     * Action based on the SSL cipher used being unsupported. Valid values: `allow`, `block`.
     */
    unsupportedSslCipher: string;
    /**
     * Action based on the SSL negotiation used being unsupported. Valid values: `allow`, `block`.
     */
    unsupportedSslNegotiation: string;
    /**
     * Action based on the SSL version used being unsupported.
     */
    unsupportedSslVersion: string;
    /**
     * Action based on server certificate is not issued by a trusted CA. Valid values: `allow`, `block`, `ignore`.
     */
    untrustedServerCert: string;
}

export interface FirewallSslSshProfileSmtps {
    /**
     * Action based on certificate validation failure. Valid values: `allow`, `block`, `ignore`.
     */
    certValidationFailure: string;
    /**
     * Action based on certificate validation timeout. Valid values: `allow`, `block`, `ignore`.
     */
    certValidationTimeout: string;
    /**
     * Action based on client certificate request. Valid values: `bypass`, `inspect`, `block`.
     */
    clientCertRequest: string;
    /**
     * Action based on received client certificate. Valid values: `bypass`, `inspect`, `block`.
     */
    clientCertificate: string;
    /**
     * Action based on server certificate is expired. Valid values: `allow`, `block`, `ignore`.
     */
    expiredServerCert: string;
    /**
     * Allow or block the invalid SSL session server certificate. Valid values: `allow`, `block`.
     */
    invalidServerCert: string;
    /**
     * Ports to use for scanning (1 - 65535, default = 443).
     */
    ports: string;
    /**
     * Proxy traffic after the TCP 3-way handshake has been established (not before). Valid values: `enable`, `disable`.
     */
    proxyAfterTcpHandshake: string;
    /**
     * Action based on server certificate is revoked. Valid values: `allow`, `block`, `ignore`.
     */
    revokedServerCert: string;
    /**
     * Check the SNI in the client hello message with the CN or SAN fields in the returned server certificate. Valid values: `enable`, `strict`, `disable`.
     */
    sniServerCertCheck: string;
    /**
     * Configure protocol inspection status. Valid values: `disable`, `deep-inspection`.
     */
    status: string;
    /**
     * Action based on the SSL encryption used being unsupported. Valid values: `bypass`, `inspect`, `block`.
     */
    unsupportedSsl: string;
    /**
     * Action based on the SSL cipher used being unsupported. Valid values: `allow`, `block`.
     */
    unsupportedSslCipher: string;
    /**
     * Action based on the SSL negotiation used being unsupported. Valid values: `allow`, `block`.
     */
    unsupportedSslNegotiation: string;
    /**
     * Action based on the SSL version used being unsupported.
     */
    unsupportedSslVersion: string;
    /**
     * Action based on server certificate is not issued by a trusted CA. Valid values: `allow`, `block`, `ignore`.
     */
    untrustedServerCert: string;
}

export interface FirewallSslSshProfileSsh {
    /**
     * Level of SSL inspection. Valid values: `disable`, `deep-inspection`.
     */
    inspectAll: string;
    /**
     * Ports to use for scanning (1 - 65535, default = 443).
     */
    ports: string;
    /**
     * Proxy traffic after the TCP 3-way handshake has been established (not before). Valid values: `enable`, `disable`.
     */
    proxyAfterTcpHandshake: string;
    /**
     * Relative strength of encryption algorithms accepted during negotiation. Valid values: `compatible`, `high-encryption`.
     */
    sshAlgorithm: string;
    /**
     * Enable/disable SSH policy check. Valid values: `disable`, `enable`.
     */
    sshPolicyCheck: string;
    /**
     * Enable/disable SSH tunnel policy check. Valid values: `disable`, `enable`.
     */
    sshTunPolicyCheck: string;
    /**
     * Configure protocol inspection status. Valid values: `disable`, `deep-inspection`.
     */
    status: string;
    /**
     * Action based on SSH version being unsupported. Valid values: `bypass`, `block`.
     */
    unsupportedVersion: string;
}

export interface FirewallSslSshProfileSsl {
    /**
     * Action based on certificate probe failure. Valid values: `allow`, `block`.
     */
    certProbeFailure: string;
    /**
     * Action based on certificate validation failure. Valid values: `allow`, `block`, `ignore`.
     */
    certValidationFailure: string;
    /**
     * Action based on certificate validation timeout. Valid values: `allow`, `block`, `ignore`.
     */
    certValidationTimeout: string;
    /**
     * Action based on client certificate request. Valid values: `bypass`, `inspect`, `block`.
     */
    clientCertRequest: string;
    /**
     * Action based on received client certificate. Valid values: `bypass`, `inspect`, `block`.
     */
    clientCertificate: string;
    /**
     * Action based on server certificate is expired. Valid values: `allow`, `block`, `ignore`.
     */
    expiredServerCert: string;
    /**
     * Level of SSL inspection. Valid values: `disable`, `deep-inspection`.
     */
    inspectAll: string;
    /**
     * Allow or block the invalid SSL session server certificate. Valid values: `allow`, `block`.
     */
    invalidServerCert: string;
    /**
     * Minimum SSL version to be allowed. Valid values: `ssl-3.0`, `tls-1.0`, `tls-1.1`, `tls-1.2`, `tls-1.3`.
     */
    minAllowedSslVersion: string;
    /**
     * Action based on server certificate is revoked. Valid values: `allow`, `block`, `ignore`.
     */
    revokedServerCert: string;
    /**
     * Check the SNI in the client hello message with the CN or SAN fields in the returned server certificate. Valid values: `enable`, `strict`, `disable`.
     */
    sniServerCertCheck: string;
    /**
     * Action based on the SSL encryption used being unsupported. Valid values: `bypass`, `inspect`, `block`.
     */
    unsupportedSsl: string;
    /**
     * Action based on the SSL cipher used being unsupported. Valid values: `allow`, `block`.
     */
    unsupportedSslCipher: string;
    /**
     * Action based on the SSL negotiation used being unsupported. Valid values: `allow`, `block`.
     */
    unsupportedSslNegotiation: string;
    /**
     * Action based on the SSL version used being unsupported.
     */
    unsupportedSslVersion: string;
    /**
     * Action based on server certificate is not issued by a trusted CA. Valid values: `allow`, `block`, `ignore`.
     */
    untrustedServerCert: string;
}

export interface FirewallSslSshProfileSslExempt {
    /**
     * IPv4 address object.
     */
    address: string;
    /**
     * IPv6 address object.
     */
    address6: string;
    /**
     * FortiGuard category ID.
     */
    fortiguardCategory: number;
    /**
     * SSL server ID.
     */
    id: number;
    /**
     * Exempt servers by regular expression.
     */
    regex: string;
    /**
     * Type of address object (IPv4 or IPv6) or FortiGuard category. Valid values: `fortiguard-category`, `address`, `address6`, `wildcard-fqdn`, `regex`.
     */
    type: string;
    /**
     * Exempt servers by wildcard FQDN.
     */
    wildcardFqdn: string;
}

export interface FirewallSslSshProfileSslServer {
    /**
     * Action based on client certificate request during the FTPS handshake. Valid values: `bypass`, `inspect`, `block`.
     */
    ftpsClientCertRequest: string;
    /**
     * Action based on received client certificate during the FTPS handshake. Valid values: `bypass`, `inspect`, `block`.
     */
    ftpsClientCertificate: string;
    /**
     * Action based on client certificate request during the HTTPS handshake. Valid values: `bypass`, `inspect`, `block`.
     */
    httpsClientCertRequest: string;
    /**
     * Action based on received client certificate during the HTTPS handshake. Valid values: `bypass`, `inspect`, `block`.
     */
    httpsClientCertificate: string;
    /**
     * SSL server ID.
     */
    id: number;
    /**
     * Action based on client certificate request during the IMAPS handshake. Valid values: `bypass`, `inspect`, `block`.
     */
    imapsClientCertRequest: string;
    /**
     * Action based on received client certificate during the IMAPS handshake. Valid values: `bypass`, `inspect`, `block`.
     */
    imapsClientCertificate: string;
    /**
     * IPv4 address of the SSL server.
     */
    ip: string;
    /**
     * Action based on client certificate request during the POP3S handshake. Valid values: `bypass`, `inspect`, `block`.
     */
    pop3sClientCertRequest: string;
    /**
     * Action based on received client certificate during the POP3S handshake. Valid values: `bypass`, `inspect`, `block`.
     */
    pop3sClientCertificate: string;
    /**
     * Action based on client certificate request during the SMTPS handshake. Valid values: `bypass`, `inspect`, `block`.
     */
    smtpsClientCertRequest: string;
    /**
     * Action based on received client certificate during the SMTPS handshake. Valid values: `bypass`, `inspect`, `block`.
     */
    smtpsClientCertificate: string;
    /**
     * Action based on client certificate request during an SSL protocol handshake. Valid values: `bypass`, `inspect`, `block`.
     */
    sslOtherClientCertRequest: string;
    /**
     * Action based on received client certificate during an SSL protocol handshake. Valid values: `bypass`, `inspect`, `block`.
     */
    sslOtherClientCertificate: string;
}

export interface FirewallTtlPolicyService {
    /**
     * Service name.
     */
    name: string;
}

export interface FirewallTtlPolicySrcaddr {
    /**
     * Service name.
     */
    name: string;
}

export interface FirewallVip46Monitor {
    /**
     * Health monitor name.
     */
    name: string;
}

export interface FirewallVip46Realserver {
    /**
     * Restrict server to a client IP in this range.
     */
    clientIp: string;
    /**
     * Per server health check. Valid values: `disable`, `enable`, `vip`.
     */
    healthcheck: string;
    /**
     * Hold down interval.
     */
    holddownInterval: number;
    /**
     * Real server ID.
     */
    id: number;
    /**
     * Mapped server IPv6.
     */
    ip: string;
    /**
     * Maximum number of connections allowed to server.
     */
    maxConnections: number;
    /**
     * Health monitors.
     */
    monitor: string;
    /**
     * Mapped server port.
     */
    port: number;
    /**
     * Server administrative status. Valid values: `active`, `standby`, `disable`.
     */
    status: string;
    /**
     * weight
     */
    weight: number;
}

export interface FirewallVip46SrcFilter {
    /**
     * Src-filter range.
     */
    range: string;
}

export interface FirewallVip46SrcintfFilter {
    /**
     * Interface name.
     */
    interfaceName: string;
}

export interface FirewallVip64Monitor {
    /**
     * Health monitor name.
     */
    name: string;
}

export interface FirewallVip64Realserver {
    /**
     * Restrict server to a client IP in this range.
     */
    clientIp: string;
    /**
     * Per server health check. Valid values: `disable`, `enable`, `vip`.
     */
    healthcheck: string;
    /**
     * Hold down interval.
     */
    holddownInterval: number;
    /**
     * Real server ID.
     */
    id: number;
    /**
     * Mapped server IP.
     */
    ip: string;
    /**
     * Maximum number of connections allowed to server.
     */
    maxConnections: number;
    /**
     * Health monitors.
     */
    monitor: string;
    /**
     * Mapped server port.
     */
    port: number;
    /**
     * Server administrative status. Valid values: `active`, `standby`, `disable`.
     */
    status: string;
    /**
     * weight
     */
    weight: number;
}

export interface FirewallVip64SrcFilter {
    /**
     * Src-filter range.
     */
    range: string;
}

export interface FirewallVip6Monitor {
    /**
     * Health monitor name.
     */
    name: string;
}

export interface FirewallVip6Realserver {
    /**
     * Only clients in this IP range can connect to this real server.
     */
    clientIp: string;
    /**
     * Enable to check the responsiveness of the real server before forwarding traffic. Valid values: `disable`, `enable`, `vip`.
     */
    healthcheck: string;
    /**
     * Time in seconds that the health check monitor continues to monitor an unresponsive server that should be active.
     */
    holddownInterval: number;
    /**
     * HTTP server domain name in HTTP header.
     */
    httpHost: string;
    /**
     * Real server ID.
     */
    id: number;
    /**
     * IPv6 address of the real server.
     */
    ip: string;
    /**
     * Max number of active connections that can directed to the real server. When reached, sessions are sent to other real servers.
     */
    maxConnections: number;
    /**
     * Name of the health check monitor to use when polling to determine a virtual server's connectivity status.
     */
    monitor: string;
    /**
     * Port for communicating with the real server. Required if port forwarding is enabled.
     */
    port: number;
    /**
     * Set the status of the real server to active so that it can accept traffic, or on standby or disabled so no traffic is sent. Valid values: `active`, `standby`, `disable`.
     */
    status: string;
    /**
     * Weight of the real server. If weighted load balancing is enabled, the server with the highest weight gets more connections.
     */
    weight: number;
}

export interface FirewallVip6SrcFilter {
    /**
     * Source-filter range.
     */
    range: string;
}

export interface FirewallVip6SslCipherSuite {
    /**
     * Cipher suite name.
     */
    cipher: string;
    /**
     * SSL/TLS cipher suites priority.
     */
    priority: number;
    /**
     * SSL/TLS versions that the cipher suite can be used with.
     */
    versions: string;
}

export interface FirewallVip6SslServerCipherSuite {
    /**
     * Cipher suite name.
     */
    cipher: string;
    /**
     * SSL/TLS cipher suites priority.
     */
    priority: number;
    /**
     * SSL/TLS versions that the cipher suite can be used with.
     */
    versions: string;
}

export interface FirewallVipExtaddr {
    /**
     * Health monitor name.
     */
    name: string;
}

export interface FirewallVipMappedip {
    /**
     * Mapped IP range.
     */
    range: string;
}

export interface FirewallVipMonitor {
    /**
     * Health monitor name.
     */
    name: string;
}

export interface FirewallVipRealserver {
    /**
     * Dynamic address of the real server.
     */
    address: string;
    /**
     * Only clients in this IP range can connect to this real server.
     */
    clientIp: string;
    /**
     * Enable to check the responsiveness of the real server before forwarding traffic. Valid values: `disable`, `enable`, `vip`.
     */
    healthcheck: string;
    /**
     * Time in seconds that the health check monitor continues to monitor and unresponsive server that should be active.
     */
    holddownInterval: number;
    /**
     * HTTP server domain name in HTTP header.
     */
    httpHost: string;
    /**
     * Real server ID.
     */
    id: number;
    /**
     * IP address of the real server.
     */
    ip: string;
    /**
     * Max number of active connections that can be directed to the real server. When reached, sessions are sent to other real servers.
     */
    maxConnections: number;
    /**
     * Name of the health check monitor to use when polling to determine a virtual server's connectivity status.
     */
    monitor: string;
    /**
     * Port for communicating with the real server. Required if port forwarding is enabled.
     */
    port: number;
    /**
     * Set the status of the real server to active so that it can accept traffic, or on standby or disabled so no traffic is sent. Valid values: `active`, `standby`, `disable`.
     */
    status: string;
    /**
     * Type of address. Valid values: `ip`, `address`.
     */
    type: string;
    /**
     * Weight of the real server. If weighted load balancing is enabled, the server with the highest weight gets more connections.
     */
    weight: number;
}

export interface FirewallVipService {
    /**
     * Health monitor name.
     */
    name: string;
}

export interface FirewallVipSrcFilter {
    /**
     * Mapped IP range.
     */
    range: string;
}

export interface FirewallVipSrcintfFilter {
    /**
     * Interface name.
     */
    interfaceName: string;
}

export interface FirewallVipSslCipherSuite {
    /**
     * Cipher suite name.
     */
    cipher: string;
    /**
     * SSL/TLS cipher suites priority.
     */
    priority: number;
    /**
     * SSL/TLS versions that the cipher suite can be used with.
     */
    versions: string;
}

export interface FirewallVipSslServerCipherSuite {
    /**
     * Cipher suite name.
     */
    cipher: string;
    /**
     * SSL/TLS cipher suites priority.
     */
    priority: number;
    /**
     * SSL/TLS versions that the cipher suite can be used with.
     */
    versions: string;
}

export interface FirewallVipgrp46Member {
    /**
     * VIP46 name.
     */
    name: string;
}

export interface FirewallVipgrp64Member {
    /**
     * VIP64 name.
     */
    name: string;
}

export interface FirewallVipgrp6Member {
    /**
     * IPv6 VIP name.
     */
    name: string;
}

export interface FirewallVipgrpMember {
    /**
     * VIP name.
     */
    name: string;
}

export interface FirewallWildcardFqdnGroupMember {
    /**
     * Address name.
     */
    name: string;
}

export interface GetFirewallAddress6List {
    /**
     * IP.
     */
    ip: string;
}

export interface GetFirewallAddress6Macaddr {
    /**
     * MAC address ranges <start>[-<end>] separated by space.
     */
    macaddr: string;
}

export interface GetFirewallAddress6SubnetSegment {
    /**
     * Specify the name of the desired firewall address6.
     */
    name: string;
    /**
     * Subnet segment type.
     */
    type: string;
    /**
     * Subnet segment value.
     */
    value: string;
}

export interface GetFirewallAddress6Tagging {
    /**
     * Tag category.
     */
    category: string;
    /**
     * Specify the name of the desired firewall address6.
     */
    name: string;
    /**
     * Tags. The structure of `tags` block is documented below.
     */
    tags: outputs.GetFirewallAddress6TaggingTag[];
}

export interface GetFirewallAddress6TaggingTag {
    /**
     * Specify the name of the desired firewall address6.
     */
    name: string;
}

export interface GetFirewallAddress6TemplateSubnetSegment {
    /**
     * Number of bits.
     */
    bits: number;
    /**
     * Enable/disable exclusive value.
     */
    exclusive: string;
    /**
     * Subnet segment ID.
     */
    id: number;
    /**
     * Specify the name of the desired firewall address6template.
     */
    name: string;
    /**
     * Subnet segment values. The structure of `values` block is documented below.
     */
    values: outputs.GetFirewallAddress6TemplateSubnetSegmentValue[];
}

export interface GetFirewallAddress6TemplateSubnetSegmentValue {
    /**
     * Specify the name of the desired firewall address6template.
     */
    name: string;
    /**
     * Subnet segment value.
     */
    value: string;
}

export interface GetFirewallAddressFssoGroup {
    /**
     * Specify the name of the desired firewall address.
     */
    name: string;
}

export interface GetFirewallAddressList {
    /**
     * IP.
     */
    ip: string;
}

export interface GetFirewallAddressMacaddr {
    /**
     * MAC address ranges <start>[-<end>] separated by space.
     */
    macaddr: string;
}

export interface GetFirewallAddressTagging {
    /**
     * Tag category.
     */
    category: string;
    /**
     * Specify the name of the desired firewall address.
     */
    name: string;
    /**
     * Tags. The structure of `tags` block is documented below.
     */
    tags: outputs.GetFirewallAddressTaggingTag[];
}

export interface GetFirewallAddressTaggingTag {
    /**
     * Specify the name of the desired firewall address.
     */
    name: string;
}

export interface GetFirewallAddrgrp6Member {
    /**
     * Specify the name of the desired firewall addrgrp6.
     */
    name: string;
}

export interface GetFirewallAddrgrp6Tagging {
    /**
     * Tag category.
     */
    category: string;
    /**
     * Specify the name of the desired firewall addrgrp6.
     */
    name: string;
    /**
     * Tags. The structure of `tags` block is documented below.
     */
    tags: outputs.GetFirewallAddrgrp6TaggingTag[];
}

export interface GetFirewallAddrgrp6TaggingTag {
    /**
     * Specify the name of the desired firewall addrgrp6.
     */
    name: string;
}

export interface GetFirewallAddrgrpExcludeMember {
    /**
     * Specify the name of the desired firewall addrgrp.
     */
    name: string;
}

export interface GetFirewallAddrgrpMember {
    /**
     * Specify the name of the desired firewall addrgrp.
     */
    name: string;
}

export interface GetFirewallAddrgrpTagging {
    /**
     * Tag category.
     */
    category: string;
    /**
     * Specify the name of the desired firewall addrgrp.
     */
    name: string;
    /**
     * Tags. The structure of `tags` block is documented below.
     */
    tags: outputs.GetFirewallAddrgrpTaggingTag[];
}

export interface GetFirewallAddrgrpTaggingTag {
    /**
     * Specify the name of the desired firewall addrgrp.
     */
    name: string;
}

export interface GetFirewallCentralSnatMapDstAddr {
    /**
     * IPv6 pool name.
     */
    name: string;
}

export interface GetFirewallCentralSnatMapDstAddr6 {
    /**
     * IPv6 pool name.
     */
    name: string;
}

export interface GetFirewallCentralSnatMapDstintf {
    /**
     * IPv6 pool name.
     */
    name: string;
}

export interface GetFirewallCentralSnatMapNatIppool {
    /**
     * IPv6 pool name.
     */
    name: string;
}

export interface GetFirewallCentralSnatMapNatIppool6 {
    /**
     * IPv6 pool name.
     */
    name: string;
}

export interface GetFirewallCentralSnatMapOrigAddr {
    /**
     * IPv6 pool name.
     */
    name: string;
}

export interface GetFirewallCentralSnatMapOrigAddr6 {
    /**
     * IPv6 pool name.
     */
    name: string;
}

export interface GetFirewallCentralSnatMapSrcintf {
    /**
     * IPv6 pool name.
     */
    name: string;
}

export interface GetFirewallConsolidatedPolicyAppCategory {
    /**
     * URL category ID.
     */
    id: number;
}

export interface GetFirewallConsolidatedPolicyAppGroup {
    /**
     * Application group names.
     */
    name: string;
}

export interface GetFirewallConsolidatedPolicyApplication {
    /**
     * URL category ID.
     */
    id: number;
}

export interface GetFirewallConsolidatedPolicyDstaddr4 {
    /**
     * Application group names.
     */
    name: string;
}

export interface GetFirewallConsolidatedPolicyDstaddr6 {
    /**
     * Application group names.
     */
    name: string;
}

export interface GetFirewallConsolidatedPolicyDstintf {
    /**
     * Application group names.
     */
    name: string;
}

export interface GetFirewallConsolidatedPolicyFssoGroup {
    /**
     * Application group names.
     */
    name: string;
}

export interface GetFirewallConsolidatedPolicyGroup {
    /**
     * Application group names.
     */
    name: string;
}

export interface GetFirewallConsolidatedPolicyInternetServiceCustom {
    /**
     * Application group names.
     */
    name: string;
}

export interface GetFirewallConsolidatedPolicyInternetServiceCustomGroup {
    /**
     * Application group names.
     */
    name: string;
}

export interface GetFirewallConsolidatedPolicyInternetServiceGroup {
    /**
     * Application group names.
     */
    name: string;
}

export interface GetFirewallConsolidatedPolicyInternetServiceId {
    /**
     * URL category ID.
     */
    id: number;
}

export interface GetFirewallConsolidatedPolicyInternetServiceName {
    /**
     * Application group names.
     */
    name: string;
}

export interface GetFirewallConsolidatedPolicyInternetServiceSrcCustom {
    /**
     * Application group names.
     */
    name: string;
}

export interface GetFirewallConsolidatedPolicyInternetServiceSrcCustomGroup {
    /**
     * Application group names.
     */
    name: string;
}

export interface GetFirewallConsolidatedPolicyInternetServiceSrcGroup {
    /**
     * Application group names.
     */
    name: string;
}

export interface GetFirewallConsolidatedPolicyInternetServiceSrcId {
    /**
     * URL category ID.
     */
    id: number;
}

export interface GetFirewallConsolidatedPolicyInternetServiceSrcName {
    /**
     * Application group names.
     */
    name: string;
}

export interface GetFirewallConsolidatedPolicyPoolname4 {
    /**
     * Application group names.
     */
    name: string;
}

export interface GetFirewallConsolidatedPolicyPoolname6 {
    /**
     * Application group names.
     */
    name: string;
}

export interface GetFirewallConsolidatedPolicyService {
    /**
     * Application group names.
     */
    name: string;
}

export interface GetFirewallConsolidatedPolicySrcaddr4 {
    /**
     * Application group names.
     */
    name: string;
}

export interface GetFirewallConsolidatedPolicySrcaddr6 {
    /**
     * Application group names.
     */
    name: string;
}

export interface GetFirewallConsolidatedPolicySrcintf {
    /**
     * Application group names.
     */
    name: string;
}

export interface GetFirewallConsolidatedPolicyUrlCategory {
    /**
     * URL category ID.
     */
    id: number;
}

export interface GetFirewallConsolidatedPolicyUser {
    /**
     * Application group names.
     */
    name: string;
}

export interface GetFirewallDosPolicy6Anomaly {
    /**
     * Action taken when the threshold is reached.
     */
    action: string;
    /**
     * Enable/disable anomaly logging.
     */
    log: string;
    /**
     * Anomaly name.
     */
    name: string;
    /**
     * Quarantine method.
     */
    quarantine: string;
    /**
     * Duration of quarantine. (Format ###d##h##m, minimum 1m, maximum 364d23h59m, default = 5m). Requires quarantine set to attacker.
     */
    quarantineExpiry: string;
    /**
     * Enable/disable quarantine logging.
     */
    quarantineLog: string;
    /**
     * Enable/disable this anomaly.
     */
    status: string;
    /**
     * Anomaly threshold. Number of detected instances per minute that triggers the anomaly action.
     */
    threshold: number;
    /**
     * Number of detected instances per minute which triggers action (1 - 2147483647, default = 1000). Note that each anomaly has a different threshold value assigned to it.
     */
    thresholddefault: number;
}

export interface GetFirewallDosPolicy6Dstaddr {
    /**
     * Anomaly name.
     */
    name: string;
}

export interface GetFirewallDosPolicy6Service {
    /**
     * Anomaly name.
     */
    name: string;
}

export interface GetFirewallDosPolicy6Srcaddr {
    /**
     * Anomaly name.
     */
    name: string;
}

export interface GetFirewallDosPolicyAnomaly {
    /**
     * Action taken when the threshold is reached.
     */
    action: string;
    /**
     * Enable/disable anomaly logging.
     */
    log: string;
    /**
     * Anomaly name.
     */
    name: string;
    /**
     * Quarantine method.
     */
    quarantine: string;
    /**
     * Duration of quarantine. (Format ###d##h##m, minimum 1m, maximum 364d23h59m, default = 5m). Requires quarantine set to attacker.
     */
    quarantineExpiry: string;
    /**
     * Enable/disable quarantine logging.
     */
    quarantineLog: string;
    /**
     * Enable/disable this anomaly.
     */
    status: string;
    /**
     * Anomaly threshold. Number of detected instances per minute that triggers the anomaly action.
     */
    threshold: number;
    /**
     * Number of detected instances per minute which triggers action (1 - 2147483647, default = 1000). Note that each anomaly has a different threshold value assigned to it.
     */
    thresholddefault: number;
}

export interface GetFirewallDosPolicyDstaddr {
    /**
     * Anomaly name.
     */
    name: string;
}

export interface GetFirewallDosPolicyService {
    /**
     * Anomaly name.
     */
    name: string;
}

export interface GetFirewallDosPolicySrcaddr {
    /**
     * Anomaly name.
     */
    name: string;
}

export interface GetFirewallInternetServiceCustomEntry {
    /**
     * Destination address or address group name. The structure of `dst` block is documented below.
     */
    dsts: outputs.GetFirewallInternetServiceCustomEntryDst[];
    /**
     * Custom entry port range ID.
     */
    id: number;
    /**
     * Port ranges in the custom entry. The structure of `portRange` block is documented below.
     */
    portRanges: outputs.GetFirewallInternetServiceCustomEntryPortRange[];
    /**
     * Integer value for the protocol type as defined by IANA (0 - 255).
     */
    protocol: number;
}

export interface GetFirewallInternetServiceCustomEntryDst {
    /**
     * Specify the name of the desired firewall internetservicecustom.
     */
    name: string;
}

export interface GetFirewallInternetServiceCustomEntryPortRange {
    /**
     * Integer value for ending TCP/UDP/SCTP destination port in range (1 to 65535).
     */
    endPort: number;
    /**
     * Custom entry port range ID.
     */
    id: number;
    /**
     * Integer value for starting TCP/UDP/SCTP destination port in range (1 to 65535).
     */
    startPort: number;
}

export interface GetFirewallInternetServiceCustomGroupMember {
    /**
     * Specify the name of the desired firewall internetservicecustomgroup.
     */
    name: string;
}

export interface GetFirewallInternetServiceDefinitionEntry {
    /**
     * Internet Service category ID.
     */
    categoryId: number;
    /**
     * Internet Service name.
     */
    name: string;
    /**
     * Integer value for ending TCP/UDP/SCTP destination port in range (0 to 65535). 0 means undefined.
     */
    port: number;
    /**
     * Port ranges in the definition entry. The structure of `portRange` block is documented below.
     */
    portRanges: outputs.GetFirewallInternetServiceDefinitionEntryPortRange[];
    /**
     * Integer value for the protocol type as defined by IANA (0 - 255).
     */
    protocol: number;
    /**
     * Entry sequence number.
     */
    seqNum: number;
}

export interface GetFirewallInternetServiceDefinitionEntryPortRange {
    /**
     * Ending TCP/UDP/SCTP destination port (1 to 65535).
     */
    endPort: number;
    /**
     * Custom entry port range ID.
     */
    id: number;
    /**
     * Starting TCP/UDP/SCTP destination port (1 to 65535).
     */
    startPort: number;
}

export interface GetFirewallInternetServiceExtensionDisableEntry {
    /**
     * Disable entry range ID.
     */
    id: number;
    /**
     * IP ranges in the disable entry. The structure of `ipRange` block is documented below.
     */
    ipRanges: outputs.GetFirewallInternetServiceExtensionDisableEntryIpRange[];
    /**
     * Integer value for the TCP/IP port (0 - 65535).
     */
    port: number;
    /**
     * Port ranges in the disable entry. The structure of `portRange` block is documented below.
     */
    portRanges: outputs.GetFirewallInternetServiceExtensionDisableEntryPortRange[];
    /**
     * Integer value for the protocol type as defined by IANA (0 - 255).
     */
    protocol: number;
}

export interface GetFirewallInternetServiceExtensionDisableEntryIpRange {
    /**
     * End IP address.
     */
    endIp: string;
    /**
     * Disable entry range ID.
     */
    id: number;
    /**
     * Start IP address.
     */
    startIp: string;
}

export interface GetFirewallInternetServiceExtensionDisableEntryPortRange {
    /**
     * Ending TCP/UDP/SCTP destination port (1 to 65535).
     */
    endPort: number;
    /**
     * Disable entry range ID.
     */
    id: number;
    /**
     * Starting TCP/UDP/SCTP destination port (1 to 65535).
     */
    startPort: number;
}

export interface GetFirewallInternetServiceExtensionEntry {
    /**
     * Destination address or address group name. The structure of `dst` block is documented below.
     */
    dsts: outputs.GetFirewallInternetServiceExtensionEntryDst[];
    /**
     * Disable entry range ID.
     */
    id: number;
    /**
     * Port ranges in the disable entry. The structure of `portRange` block is documented below.
     */
    portRanges: outputs.GetFirewallInternetServiceExtensionEntryPortRange[];
    /**
     * Integer value for the protocol type as defined by IANA (0 - 255).
     */
    protocol: number;
}

export interface GetFirewallInternetServiceExtensionEntryDst {
    /**
     * Select the destination address or address group object from available options.
     */
    name: string;
}

export interface GetFirewallInternetServiceExtensionEntryPortRange {
    /**
     * Ending TCP/UDP/SCTP destination port (1 to 65535).
     */
    endPort: number;
    /**
     * Disable entry range ID.
     */
    id: number;
    /**
     * Starting TCP/UDP/SCTP destination port (1 to 65535).
     */
    startPort: number;
}

export interface GetFirewallInternetServiceGroupMember {
    /**
     * Internet Service ID.
     */
    id: number;
    /**
     * Specify the name of the desired firewall internetservicegroup.
     */
    name: string;
}

export interface GetFirewallMulticastAddress6Tagging {
    /**
     * Tag category.
     */
    category: string;
    /**
     * Specify the name of the desired firewall multicastaddress6.
     */
    name: string;
    /**
     * Tags. The structure of `tags` block is documented below.
     */
    tags: outputs.GetFirewallMulticastAddress6TaggingTag[];
}

export interface GetFirewallMulticastAddress6TaggingTag {
    /**
     * Specify the name of the desired firewall multicastaddress6.
     */
    name: string;
}

export interface GetFirewallMulticastAddressTagging {
    /**
     * Tag category.
     */
    category: string;
    /**
     * Specify the name of the desired firewall multicastaddress.
     */
    name: string;
    /**
     * Tags. The structure of `tags` block is documented below.
     */
    tags: outputs.GetFirewallMulticastAddressTaggingTag[];
}

export interface GetFirewallMulticastAddressTaggingTag {
    /**
     * Specify the name of the desired firewall multicastaddress.
     */
    name: string;
}

export interface GetFirewallPolicy46Dstaddr {
    /**
     * IP pool name.
     */
    name: string;
}

export interface GetFirewallPolicy46Poolname {
    /**
     * IP pool name.
     */
    name: string;
}

export interface GetFirewallPolicy46Service {
    /**
     * IP pool name.
     */
    name: string;
}

export interface GetFirewallPolicy46Srcaddr {
    /**
     * IP pool name.
     */
    name: string;
}

export interface GetFirewallPolicy64Dstaddr {
    /**
     * IP pool name.
     */
    name: string;
}

export interface GetFirewallPolicy64Poolname {
    /**
     * IP pool name.
     */
    name: string;
}

export interface GetFirewallPolicy64Service {
    /**
     * IP pool name.
     */
    name: string;
}

export interface GetFirewallPolicy64Srcaddr {
    /**
     * IP pool name.
     */
    name: string;
}

export interface GetFirewallPolicy6AppCategory {
    /**
     * URL category ID.
     */
    id: number;
}

export interface GetFirewallPolicy6AppGroup {
    /**
     * Names of FSSO groups.
     */
    name: string;
}

export interface GetFirewallPolicy6Application {
    /**
     * URL category ID.
     */
    id: number;
}

export interface GetFirewallPolicy6CustomLogField {
    /**
     * Custom log field.
     */
    fieldId: string;
}

export interface GetFirewallPolicy6Device {
    /**
     * Names of FSSO groups.
     */
    name: string;
}

export interface GetFirewallPolicy6Dstaddr {
    /**
     * Names of FSSO groups.
     */
    name: string;
}

export interface GetFirewallPolicy6Dstintf {
    /**
     * Names of FSSO groups.
     */
    name: string;
}

export interface GetFirewallPolicy6FssoGroup {
    /**
     * Names of FSSO groups.
     */
    name: string;
}

export interface GetFirewallPolicy6Group {
    /**
     * Names of FSSO groups.
     */
    name: string;
}

export interface GetFirewallPolicy6Poolname {
    /**
     * Names of FSSO groups.
     */
    name: string;
}

export interface GetFirewallPolicy6Service {
    /**
     * Names of FSSO groups.
     */
    name: string;
}

export interface GetFirewallPolicy6Srcaddr {
    /**
     * Names of FSSO groups.
     */
    name: string;
}

export interface GetFirewallPolicy6Srcintf {
    /**
     * Names of FSSO groups.
     */
    name: string;
}

export interface GetFirewallPolicy6SslMirrorIntf {
    /**
     * Names of FSSO groups.
     */
    name: string;
}

export interface GetFirewallPolicy6UrlCategory {
    /**
     * URL category ID.
     */
    id: number;
}

export interface GetFirewallPolicy6User {
    /**
     * Names of FSSO groups.
     */
    name: string;
}

export interface GetFirewallPolicyAppCategory {
    /**
     * Security group tag.
     */
    id: number;
}

export interface GetFirewallPolicyAppGroup {
    /**
     * Mirror Interface name.
     */
    name: string;
}

export interface GetFirewallPolicyApplication {
    /**
     * Security group tag.
     */
    id: number;
}

export interface GetFirewallPolicyCustomLogField {
    /**
     * Custom log field.
     */
    fieldId: string;
}

export interface GetFirewallPolicyDevice {
    /**
     * Mirror Interface name.
     */
    name: string;
}

export interface GetFirewallPolicyDstaddr {
    /**
     * Mirror Interface name.
     */
    name: string;
}

export interface GetFirewallPolicyDstaddr6 {
    /**
     * Mirror Interface name.
     */
    name: string;
}

export interface GetFirewallPolicyDstintf {
    /**
     * Mirror Interface name.
     */
    name: string;
}

export interface GetFirewallPolicyFssoGroup {
    /**
     * Mirror Interface name.
     */
    name: string;
}

export interface GetFirewallPolicyGroup {
    /**
     * Mirror Interface name.
     */
    name: string;
}

export interface GetFirewallPolicyInternetServiceCustom {
    /**
     * Mirror Interface name.
     */
    name: string;
}

export interface GetFirewallPolicyInternetServiceCustomGroup {
    /**
     * Mirror Interface name.
     */
    name: string;
}

export interface GetFirewallPolicyInternetServiceGroup {
    /**
     * Mirror Interface name.
     */
    name: string;
}

export interface GetFirewallPolicyInternetServiceId {
    /**
     * Security group tag.
     */
    id: number;
}

export interface GetFirewallPolicyInternetServiceName {
    /**
     * Mirror Interface name.
     */
    name: string;
}

export interface GetFirewallPolicyInternetServiceSrcCustom {
    /**
     * Mirror Interface name.
     */
    name: string;
}

export interface GetFirewallPolicyInternetServiceSrcCustomGroup {
    /**
     * Mirror Interface name.
     */
    name: string;
}

export interface GetFirewallPolicyInternetServiceSrcGroup {
    /**
     * Mirror Interface name.
     */
    name: string;
}

export interface GetFirewallPolicyInternetServiceSrcId {
    /**
     * Security group tag.
     */
    id: number;
}

export interface GetFirewallPolicyInternetServiceSrcName {
    /**
     * Mirror Interface name.
     */
    name: string;
}

export interface GetFirewallPolicyNtlmEnabledBrowser {
    /**
     * User agent string.
     */
    userAgentString: string;
}

export interface GetFirewallPolicyPoolname {
    /**
     * Mirror Interface name.
     */
    name: string;
}

export interface GetFirewallPolicyPoolname6 {
    /**
     * Mirror Interface name.
     */
    name: string;
}

export interface GetFirewallPolicyRtpAddr {
    /**
     * Mirror Interface name.
     */
    name: string;
}

export interface GetFirewallPolicyService {
    /**
     * Mirror Interface name.
     */
    name: string;
}

export interface GetFirewallPolicySgt {
    /**
     * Security group tag.
     */
    id: number;
}

export interface GetFirewallPolicySrcVendorMac {
    /**
     * Security group tag.
     */
    id: number;
}

export interface GetFirewallPolicySrcaddr {
    /**
     * Mirror Interface name.
     */
    name: string;
}

export interface GetFirewallPolicySrcaddr6 {
    /**
     * Mirror Interface name.
     */
    name: string;
}

export interface GetFirewallPolicySrcintf {
    /**
     * Mirror Interface name.
     */
    name: string;
}

export interface GetFirewallPolicySslMirrorIntf {
    /**
     * Mirror Interface name.
     */
    name: string;
}

export interface GetFirewallPolicyUrlCategory {
    /**
     * Security group tag.
     */
    id: number;
}

export interface GetFirewallPolicyUser {
    /**
     * Mirror Interface name.
     */
    name: string;
}

export interface GetFirewallPolicyZtnaEmsTag {
    /**
     * Mirror Interface name.
     */
    name: string;
}

export interface GetFirewallPolicyZtnaGeoTag {
    /**
     * Mirror Interface name.
     */
    name: string;
}

export interface GetFirewallProfileProtocolOptionsCifs {
    /**
     * Domain for which to decrypt CIFS traffic.
     */
    domainController: string;
    /**
     * One or more options that can be applied to the session.
     */
    options: string;
    /**
     * Maximum in-memory file size that can be scanned (1 - 383 MB, default = 10).
     */
    oversizeLimit: number;
    /**
     * Ports to scan for content (1 - 65535, default = 445).
     */
    ports: number;
    /**
     * Enable/disable scanning of BZip2 compressed files.
     */
    scanBzip2: string;
    /**
     * CIFS server credential type.
     */
    serverCredentialType: string;
    /**
     * Server keytab. The structure of `serverKeytab` block is documented below.
     */
    serverKeytabs: outputs.GetFirewallProfileProtocolOptionsCifsServerKeytab[];
    /**
     * Enable/disable adding an email signature to SMTP email messages as they pass through the FortiGate.
     */
    status: string;
    /**
     * Maximum dynamic TCP window size (default = 8MB).
     */
    tcpWindowMaximum: number;
    /**
     * Minimum dynamic TCP window size (default = 128KB).
     */
    tcpWindowMinimum: number;
    /**
     * Set TCP static window size (default = 256KB).
     */
    tcpWindowSize: number;
    /**
     * Specify type of TCP window to use for this protocol.
     */
    tcpWindowType: string;
    /**
     * Maximum nested levels of compression that can be uncompressed and scanned (2 - 100, default = 12).
     */
    uncompressedNestLimit: number;
    /**
     * Maximum in-memory uncompressed file size that can be scanned (0 - 383 MB, 0 = unlimited, default = 10).
     */
    uncompressedOversizeLimit: number;
}

export interface GetFirewallProfileProtocolOptionsCifsServerKeytab {
    /**
     * Base64 encoded keytab file containing credential of the server.
     */
    keytab: string;
    /**
     * Service principal.  For example, "host/cifsserver.example.com@example.com".
     */
    principal: string;
}

export interface GetFirewallProfileProtocolOptionsDns {
    /**
     * Ports to scan for content (1 - 65535, default = 445).
     */
    ports: number;
    /**
     * Enable/disable adding an email signature to SMTP email messages as they pass through the FortiGate.
     */
    status: string;
}

export interface GetFirewallProfileProtocolOptionsFtp {
    /**
     * Amount of data to send in a transmission for client comforting (1 - 65535 bytes, default = 1).
     */
    comfortAmount: number;
    /**
     * Period of time between start, or last transmission, and the next client comfort transmission of data (1 - 900 sec, default = 10).
     */
    comfortInterval: number;
    /**
     * Enable/disable the inspection of all ports for the protocol.
     */
    inspectAll: string;
    /**
     * One or more options that can be applied to the session.
     */
    options: string;
    /**
     * Maximum in-memory file size that can be scanned (1 - 383 MB, default = 10).
     */
    oversizeLimit: number;
    /**
     * Ports to scan for content (1 - 65535, default = 445).
     */
    ports: number;
    /**
     * Enable/disable scanning of BZip2 compressed files.
     */
    scanBzip2: string;
    /**
     * SSL decryption and encryption performed by an external device.
     */
    sslOffloaded: string;
    /**
     * Enable/disable adding an email signature to SMTP email messages as they pass through the FortiGate.
     */
    status: string;
    /**
     * Maximum stream-based uncompressed data size that will be scanned (MB, 0 = unlimited (default).  Stream-based uncompression used only under certain conditions.).
     */
    streamBasedUncompressedLimit: number;
    /**
     * Maximum dynamic TCP window size (default = 8MB).
     */
    tcpWindowMaximum: number;
    /**
     * Minimum dynamic TCP window size (default = 128KB).
     */
    tcpWindowMinimum: number;
    /**
     * Set TCP static window size (default = 256KB).
     */
    tcpWindowSize: number;
    /**
     * Specify type of TCP window to use for this protocol.
     */
    tcpWindowType: string;
    /**
     * Maximum nested levels of compression that can be uncompressed and scanned (2 - 100, default = 12).
     */
    uncompressedNestLimit: number;
    /**
     * Maximum in-memory uncompressed file size that can be scanned (0 - 383 MB, 0 = unlimited, default = 10).
     */
    uncompressedOversizeLimit: number;
}

export interface GetFirewallProfileProtocolOptionsHttp {
    /**
     * Code number returned for blocked HTTP pages (non-FortiGuard only) (100 - 599, default = 403).
     */
    blockPageStatusCode: number;
    /**
     * Amount of data to send in a transmission for client comforting (1 - 65535 bytes, default = 1).
     */
    comfortAmount: number;
    /**
     * Period of time between start, or last transmission, and the next client comfort transmission of data (1 - 900 sec, default = 10).
     */
    comfortInterval: number;
    /**
     * Enable/disable Fortinet bar on HTML content.
     */
    fortinetBar: string;
    /**
     * Port for use by Fortinet Bar (1 - 65535, default = 8011).
     */
    fortinetBarPort: number;
    /**
     * Enable/disable HTTP policy check.
     */
    httpPolicy: string;
    /**
     * Enable/disable the inspection of all ports for the protocol.
     */
    inspectAll: string;
    /**
     * One or more options that can be applied to the session.
     */
    options: string;
    /**
     * Maximum in-memory file size that can be scanned (1 - 383 MB, default = 10).
     */
    oversizeLimit: number;
    /**
     * Ports to scan for content (1 - 65535, default = 445).
     */
    ports: number;
    /**
     * ID codes for character sets to be used to convert to UTF-8 for banned words and DLP on HTTP posts (maximum of 5 character sets).
     */
    postLang: string;
    /**
     * Proxy traffic after the TCP 3-way handshake has been established (not before).
     */
    proxyAfterTcpHandshake: string;
    /**
     * Enable/disable blocking of partial downloads.
     */
    rangeBlock: string;
    /**
     * Number of attempts to retry HTTP connection (0 - 100, default = 0).
     */
    retryCount: number;
    /**
     * Enable/disable scanning of BZip2 compressed files.
     */
    scanBzip2: string;
    /**
     * SSL decryption and encryption performed by an external device.
     */
    sslOffloaded: string;
    /**
     * Enable/disable adding an email signature to SMTP email messages as they pass through the FortiGate.
     */
    status: string;
    /**
     * Maximum stream-based uncompressed data size that will be scanned (MB, 0 = unlimited (default).  Stream-based uncompression used only under certain conditions.).
     */
    streamBasedUncompressedLimit: number;
    /**
     * Enable/disable bypassing of streaming content from buffering.
     */
    streamingContentBypass: string;
    /**
     * Enable/disable stripping of HTTP X-Forwarded-For header.
     */
    stripXForwardedFor: string;
    /**
     * Bypass from scanning, or block a connection that attempts to switch protocol.
     */
    switchingProtocols: string;
    /**
     * Maximum dynamic TCP window size (default = 8MB).
     */
    tcpWindowMaximum: number;
    /**
     * Minimum dynamic TCP window size (default = 128KB).
     */
    tcpWindowMinimum: number;
    /**
     * Set TCP static window size (default = 256KB).
     */
    tcpWindowSize: number;
    /**
     * Specify type of TCP window to use for this protocol.
     */
    tcpWindowType: string;
    /**
     * Configure how to process non-HTTP traffic when a profile configured for HTTP traffic accepts a non-HTTP session. Can occur if an application sends non-HTTP traffic using an HTTP destination port.
     */
    tunnelNonHttp: string;
    /**
     * Maximum nested levels of compression that can be uncompressed and scanned (2 - 100, default = 12).
     */
    uncompressedNestLimit: number;
    /**
     * Maximum in-memory uncompressed file size that can be scanned (0 - 383 MB, 0 = unlimited, default = 10).
     */
    uncompressedOversizeLimit: number;
    /**
     * How to handle HTTP sessions that do not comply with HTTP 0.9, 1.0, or 1.1.
     */
    unknownHttpVersion: string;
}

export interface GetFirewallProfileProtocolOptionsImap {
    /**
     * Enable/disable the inspection of all ports for the protocol.
     */
    inspectAll: string;
    /**
     * One or more options that can be applied to the session.
     */
    options: string;
    /**
     * Maximum in-memory file size that can be scanned (1 - 383 MB, default = 10).
     */
    oversizeLimit: number;
    /**
     * Ports to scan for content (1 - 65535, default = 445).
     */
    ports: number;
    /**
     * Proxy traffic after the TCP 3-way handshake has been established (not before).
     */
    proxyAfterTcpHandshake: string;
    /**
     * Enable/disable scanning of BZip2 compressed files.
     */
    scanBzip2: string;
    /**
     * SSL decryption and encryption performed by an external device.
     */
    sslOffloaded: string;
    /**
     * Enable/disable adding an email signature to SMTP email messages as they pass through the FortiGate.
     */
    status: string;
    /**
     * Maximum nested levels of compression that can be uncompressed and scanned (2 - 100, default = 12).
     */
    uncompressedNestLimit: number;
    /**
     * Maximum in-memory uncompressed file size that can be scanned (0 - 383 MB, 0 = unlimited, default = 10).
     */
    uncompressedOversizeLimit: number;
}

export interface GetFirewallProfileProtocolOptionsMailSignature {
    /**
     * Email signature to be added to outgoing email (if the signature contains spaces, enclose with quotation marks).
     */
    signature: string;
    /**
     * Enable/disable adding an email signature to SMTP email messages as they pass through the FortiGate.
     */
    status: string;
}

export interface GetFirewallProfileProtocolOptionsMapi {
    /**
     * One or more options that can be applied to the session.
     */
    options: string;
    /**
     * Maximum in-memory file size that can be scanned (1 - 383 MB, default = 10).
     */
    oversizeLimit: number;
    /**
     * Ports to scan for content (1 - 65535, default = 445).
     */
    ports: number;
    /**
     * Enable/disable scanning of BZip2 compressed files.
     */
    scanBzip2: string;
    /**
     * Enable/disable adding an email signature to SMTP email messages as they pass through the FortiGate.
     */
    status: string;
    /**
     * Maximum nested levels of compression that can be uncompressed and scanned (2 - 100, default = 12).
     */
    uncompressedNestLimit: number;
    /**
     * Maximum in-memory uncompressed file size that can be scanned (0 - 383 MB, 0 = unlimited, default = 10).
     */
    uncompressedOversizeLimit: number;
}

export interface GetFirewallProfileProtocolOptionsNntp {
    /**
     * Enable/disable the inspection of all ports for the protocol.
     */
    inspectAll: string;
    /**
     * One or more options that can be applied to the session.
     */
    options: string;
    /**
     * Maximum in-memory file size that can be scanned (1 - 383 MB, default = 10).
     */
    oversizeLimit: number;
    /**
     * Ports to scan for content (1 - 65535, default = 445).
     */
    ports: number;
    /**
     * Proxy traffic after the TCP 3-way handshake has been established (not before).
     */
    proxyAfterTcpHandshake: string;
    /**
     * Enable/disable scanning of BZip2 compressed files.
     */
    scanBzip2: string;
    /**
     * Enable/disable adding an email signature to SMTP email messages as they pass through the FortiGate.
     */
    status: string;
    /**
     * Maximum nested levels of compression that can be uncompressed and scanned (2 - 100, default = 12).
     */
    uncompressedNestLimit: number;
    /**
     * Maximum in-memory uncompressed file size that can be scanned (0 - 383 MB, 0 = unlimited, default = 10).
     */
    uncompressedOversizeLimit: number;
}

export interface GetFirewallProfileProtocolOptionsPop3 {
    /**
     * Enable/disable the inspection of all ports for the protocol.
     */
    inspectAll: string;
    /**
     * One or more options that can be applied to the session.
     */
    options: string;
    /**
     * Maximum in-memory file size that can be scanned (1 - 383 MB, default = 10).
     */
    oversizeLimit: number;
    /**
     * Ports to scan for content (1 - 65535, default = 445).
     */
    ports: number;
    /**
     * Proxy traffic after the TCP 3-way handshake has been established (not before).
     */
    proxyAfterTcpHandshake: string;
    /**
     * Enable/disable scanning of BZip2 compressed files.
     */
    scanBzip2: string;
    /**
     * SSL decryption and encryption performed by an external device.
     */
    sslOffloaded: string;
    /**
     * Enable/disable adding an email signature to SMTP email messages as they pass through the FortiGate.
     */
    status: string;
    /**
     * Maximum nested levels of compression that can be uncompressed and scanned (2 - 100, default = 12).
     */
    uncompressedNestLimit: number;
    /**
     * Maximum in-memory uncompressed file size that can be scanned (0 - 383 MB, 0 = unlimited, default = 10).
     */
    uncompressedOversizeLimit: number;
}

export interface GetFirewallProfileProtocolOptionsSmtp {
    /**
     * Enable/disable the inspection of all ports for the protocol.
     */
    inspectAll: string;
    /**
     * One or more options that can be applied to the session.
     */
    options: string;
    /**
     * Maximum in-memory file size that can be scanned (1 - 383 MB, default = 10).
     */
    oversizeLimit: number;
    /**
     * Ports to scan for content (1 - 65535, default = 445).
     */
    ports: number;
    /**
     * Proxy traffic after the TCP 3-way handshake has been established (not before).
     */
    proxyAfterTcpHandshake: string;
    /**
     * Enable/disable scanning of BZip2 compressed files.
     */
    scanBzip2: string;
    /**
     * Enable/disable SMTP server busy when server not available.
     */
    serverBusy: string;
    /**
     * SSL decryption and encryption performed by an external device.
     */
    sslOffloaded: string;
    /**
     * Enable/disable adding an email signature to SMTP email messages as they pass through the FortiGate.
     */
    status: string;
    /**
     * Maximum nested levels of compression that can be uncompressed and scanned (2 - 100, default = 12).
     */
    uncompressedNestLimit: number;
    /**
     * Maximum in-memory uncompressed file size that can be scanned (0 - 383 MB, 0 = unlimited, default = 10).
     */
    uncompressedOversizeLimit: number;
}

export interface GetFirewallProfileProtocolOptionsSsh {
    /**
     * Amount of data to send in a transmission for client comforting (1 - 65535 bytes, default = 1).
     */
    comfortAmount: number;
    /**
     * Period of time between start, or last transmission, and the next client comfort transmission of data (1 - 900 sec, default = 10).
     */
    comfortInterval: number;
    /**
     * One or more options that can be applied to the session.
     */
    options: string;
    /**
     * Maximum in-memory file size that can be scanned (1 - 383 MB, default = 10).
     */
    oversizeLimit: number;
    /**
     * Enable/disable scanning of BZip2 compressed files.
     */
    scanBzip2: string;
    /**
     * SSL decryption and encryption performed by an external device.
     */
    sslOffloaded: string;
    /**
     * Maximum stream-based uncompressed data size that will be scanned (MB, 0 = unlimited (default).  Stream-based uncompression used only under certain conditions.).
     */
    streamBasedUncompressedLimit: number;
    /**
     * Maximum dynamic TCP window size (default = 8MB).
     */
    tcpWindowMaximum: number;
    /**
     * Minimum dynamic TCP window size (default = 128KB).
     */
    tcpWindowMinimum: number;
    /**
     * Set TCP static window size (default = 256KB).
     */
    tcpWindowSize: number;
    /**
     * Specify type of TCP window to use for this protocol.
     */
    tcpWindowType: string;
    /**
     * Maximum nested levels of compression that can be uncompressed and scanned (2 - 100, default = 12).
     */
    uncompressedNestLimit: number;
    /**
     * Maximum in-memory uncompressed file size that can be scanned (0 - 383 MB, 0 = unlimited, default = 10).
     */
    uncompressedOversizeLimit: number;
}

export interface GetFirewallProxyAddressCategory {
    /**
     * ID.
     */
    id: number;
}

export interface GetFirewallProxyAddressHeaderGroup {
    /**
     * Case sensitivity in pattern.
     */
    caseSensitivity: string;
    /**
     * HTTP header regular expression.
     */
    header: string;
    /**
     * HTTP header.
     */
    headerName: string;
    /**
     * ID.
     */
    id: number;
}

export interface GetFirewallProxyAddressTagging {
    /**
     * Tag category.
     */
    category: string;
    /**
     * Specify the name of the desired firewall proxyaddress.
     */
    name: string;
    /**
     * Tags. The structure of `tags` block is documented below.
     */
    tags: outputs.GetFirewallProxyAddressTaggingTag[];
}

export interface GetFirewallProxyAddressTaggingTag {
    /**
     * Specify the name of the desired firewall proxyaddress.
     */
    name: string;
}

export interface GetFirewallProxyAddrgrpMember {
    /**
     * Specify the name of the desired firewall proxyaddrgrp.
     */
    name: string;
}

export interface GetFirewallProxyAddrgrpTagging {
    /**
     * Tag category.
     */
    category: string;
    /**
     * Specify the name of the desired firewall proxyaddrgrp.
     */
    name: string;
    /**
     * Tags. The structure of `tags` block is documented below.
     */
    tags: outputs.GetFirewallProxyAddrgrpTaggingTag[];
}

export interface GetFirewallProxyAddrgrpTaggingTag {
    /**
     * Specify the name of the desired firewall proxyaddrgrp.
     */
    name: string;
}

export interface GetFirewallProxyPolicyAccessProxy {
    /**
     * Group name.
     */
    name: string;
}

export interface GetFirewallProxyPolicyAccessProxy6 {
    /**
     * Group name.
     */
    name: string;
}

export interface GetFirewallProxyPolicyDstaddr {
    /**
     * Group name.
     */
    name: string;
}

export interface GetFirewallProxyPolicyDstaddr6 {
    /**
     * Group name.
     */
    name: string;
}

export interface GetFirewallProxyPolicyDstintf {
    /**
     * Group name.
     */
    name: string;
}

export interface GetFirewallProxyPolicyGroup {
    /**
     * Group name.
     */
    name: string;
}

export interface GetFirewallProxyPolicyInternetServiceCustom {
    /**
     * Group name.
     */
    name: string;
}

export interface GetFirewallProxyPolicyInternetServiceCustomGroup {
    /**
     * Group name.
     */
    name: string;
}

export interface GetFirewallProxyPolicyInternetServiceGroup {
    /**
     * Group name.
     */
    name: string;
}

export interface GetFirewallProxyPolicyInternetServiceId {
    /**
     * Internet Service ID.
     */
    id: number;
}

export interface GetFirewallProxyPolicyInternetServiceName {
    /**
     * Group name.
     */
    name: string;
}

export interface GetFirewallProxyPolicyPoolname {
    /**
     * Group name.
     */
    name: string;
}

export interface GetFirewallProxyPolicyService {
    /**
     * Group name.
     */
    name: string;
}

export interface GetFirewallProxyPolicySrcaddr {
    /**
     * Group name.
     */
    name: string;
}

export interface GetFirewallProxyPolicySrcaddr6 {
    /**
     * Group name.
     */
    name: string;
}

export interface GetFirewallProxyPolicySrcintf {
    /**
     * Group name.
     */
    name: string;
}

export interface GetFirewallProxyPolicyUser {
    /**
     * Group name.
     */
    name: string;
}

export interface GetFirewallProxyPolicyZtnaEmsTag {
    /**
     * Group name.
     */
    name: string;
}

export interface GetFirewallScheduleGroupMember {
    /**
     * Specify the name of the desired firewallschedule group.
     */
    name: string;
}

export interface GetFirewallServiceCustomAppCategory {
    /**
     * Application id.
     */
    id: number;
}

export interface GetFirewallServiceCustomApplication {
    /**
     * Application id.
     */
    id: number;
}

export interface GetFirewallServiceGroupMember {
    /**
     * Specify the name of the desired firewallservice group.
     */
    name: string;
}

export interface GetFirewallWildcardFqdnGroupMember {
    /**
     * Specify the name of the desired firewallwildcardfqdn group.
     */
    name: string;
}

export interface GetRouterAccessList6Rule {
    /**
     * Permit or deny this IP address and netmask prefix.
     */
    action: string;
    /**
     * Enable/disable exact prefix match.
     */
    exactMatch: string;
    /**
     * Flags.
     */
    flags: number;
    /**
     * Rule ID.
     */
    id: number;
    /**
     * IPv6 prefix to define regular filter criteria, such as "any" or subnets.
     */
    prefix6: string;
}

export interface GetRouterAccessListRule {
    /**
     * Permit or deny this IP address and netmask prefix.
     */
    action: string;
    /**
     * Enable/disable exact match.
     */
    exactMatch: string;
    /**
     * Flags.
     */
    flags: number;
    /**
     * Rule ID.
     */
    id: number;
    /**
     * IPv4 prefix to define regular filter criteria, such as "any" or subnets.
     */
    prefix: string;
    /**
     * Wildcard to define Cisco-style wildcard filter criteria.
     */
    wildcard: string;
}

export interface GetRouterAspathListRule {
    /**
     * Permit or deny route-based operations, based on the route's AS_PATH attribute.
     */
    action: string;
    /**
     * ID.
     */
    id: number;
    /**
     * Regular-expression to match the Border Gateway Protocol (BGP) AS paths.
     */
    regexp: string;
}

export interface GetRouterBfd6Neighbor {
    /**
     * Interface to the BFD neighbor.
     */
    interface: string;
    /**
     * IPv6 address of the BFD neighbor.
     */
    ip6Address: string;
}

export interface GetRouterBfdNeighbor {
    /**
     * Interface name.
     */
    interface: string;
    /**
     * IPv4 address of the BFD neighbor.
     */
    ip: string;
}

export interface GetRouterBgpAdminDistance {
    /**
     * Administrative distance to apply (1 - 255).
     */
    distance: number;
    /**
     * ID.
     */
    id: number;
    /**
     * Neighbor address prefix.
     */
    neighbourPrefix: string;
    /**
     * Access list of routes to apply new distance to.
     */
    routeList: string;
}

export interface GetRouterBgpAggregateAddress {
    /**
     * Enable/disable generate AS set path information.
     */
    asSet: string;
    /**
     * ID.
     */
    id: number;
    /**
     * Network prefix.
     */
    prefix: string;
    /**
     * Enable/disable filter more specific routes from updates.
     */
    summaryOnly: string;
}

export interface GetRouterBgpAggregateAddress6 {
    /**
     * Enable/disable generate AS set path information.
     */
    asSet: string;
    /**
     * ID.
     */
    id: number;
    /**
     * Network IPv6 prefix.
     */
    prefix6: string;
    /**
     * Enable/disable filter more specific routes from updates.
     */
    summaryOnly: string;
}

export interface GetRouterBgpConfederationPeer {
    /**
     * Peer ID.
     */
    peer: string;
}

export interface GetRouterBgpNeighbor {
    /**
     * Enable/disable address family IPv4 for this neighbor.
     */
    activate: string;
    /**
     * Enable/disable address family IPv6 for this neighbor.
     */
    activate6: string;
    /**
     * Enable/disable IPv4 additional-path capability.
     */
    additionalPath: string;
    /**
     * Enable/disable IPv6 additional-path capability.
     */
    additionalPath6: string;
    /**
     * Number of IPv4 additional paths that can be advertised to this neighbor.
     */
    advAdditionalPath: number;
    /**
     * Number of IPv6 additional paths that can be advertised to this neighbor.
     */
    advAdditionalPath6: number;
    /**
     * Minimum interval (sec) between sending updates.
     */
    advertisementInterval: number;
    /**
     * IPv4 The maximum number of occurrence of my AS number allowed.
     */
    allowasIn: number;
    /**
     * IPv6 The maximum number of occurrence of my AS number allowed.
     */
    allowasIn6: number;
    /**
     * Enable/disable IPv4 Enable to allow my AS in AS path.
     */
    allowasInEnable: string;
    /**
     * Enable/disable IPv6 Enable to allow my AS in AS path.
     */
    allowasInEnable6: string;
    /**
     * Enable/disable replace peer AS with own AS for IPv4.
     */
    asOverride: string;
    /**
     * Enable/disable replace peer AS with own AS for IPv6.
     */
    asOverride6: string;
    /**
     * IPv4 List of attributes that should be unchanged.
     */
    attributeUnchanged: string;
    /**
     * IPv6 List of attributes that should be unchanged.
     */
    attributeUnchanged6: string;
    /**
     * Enable/disable BFD for this neighbor.
     */
    bfd: string;
    /**
     * Enable/disable advertise default IPv4 route to this neighbor.
     */
    capabilityDefaultOriginate: string;
    /**
     * Enable/disable advertise default IPv6 route to this neighbor.
     */
    capabilityDefaultOriginate6: string;
    /**
     * Enable/disable advertise dynamic capability to this neighbor.
     */
    capabilityDynamic: string;
    /**
     * Enable/disable advertise IPv4 graceful restart capability to this neighbor.
     */
    capabilityGracefulRestart: string;
    /**
     * Enable/disable advertise IPv6 graceful restart capability to this neighbor.
     */
    capabilityGracefulRestart6: string;
    /**
     * Accept/Send IPv4 ORF lists to/from this neighbor.
     */
    capabilityOrf: string;
    /**
     * Accept/Send IPv6 ORF lists to/from this neighbor.
     */
    capabilityOrf6: string;
    /**
     * Enable/disable advertise route refresh capability to this neighbor.
     */
    capabilityRouteRefresh: string;
    /**
     * IPv6 conditional advertisement. The structure of `conditionalAdvertise6` block is documented below.
     */
    conditionalAdvertise6s: outputs.GetRouterBgpNeighborConditionalAdvertise6[];
    /**
     * Conditional advertisement. The structure of `conditionalAdvertise` block is documented below.
     */
    conditionalAdvertises: outputs.GetRouterBgpNeighborConditionalAdvertise[];
    /**
     * Interval (sec) for connect timer.
     */
    connectTimer: number;
    /**
     * Route map to specify criteria to originate IPv4 default.
     */
    defaultOriginateRoutemap: string;
    /**
     * Route map to specify criteria to originate IPv6 default.
     */
    defaultOriginateRoutemap6: string;
    /**
     * Description.
     */
    description: string;
    /**
     * Filter for IPv4 updates from this neighbor.
     */
    distributeListIn: string;
    /**
     * Filter for IPv6 updates from this neighbor.
     */
    distributeListIn6: string;
    /**
     * Filter for IPv4 updates to this neighbor.
     */
    distributeListOut: string;
    /**
     * Filter for IPv6 updates to this neighbor.
     */
    distributeListOut6: string;
    /**
     * Don't negotiate capabilities with this neighbor
     */
    dontCapabilityNegotiate: string;
    /**
     * Enable/disable allow multi-hop EBGP neighbors.
     */
    ebgpEnforceMultihop: string;
    /**
     * EBGP multihop TTL for this peer.
     */
    ebgpMultihopTtl: number;
    /**
     * BGP filter for IPv4 inbound routes.
     */
    filterListIn: string;
    /**
     * BGP filter for IPv6 inbound routes.
     */
    filterListIn6: string;
    /**
     * BGP filter for IPv4 outbound routes.
     */
    filterListOut: string;
    /**
     * BGP filter for IPv6 outbound routes.
     */
    filterListOut6: string;
    /**
     * Interval (sec) before peer considered dead.
     */
    holdtimeTimer: number;
    /**
     * Interface which is used to leak routes to target VRF.
     */
    interface: string;
    /**
     * IP/IPv6 address of neighbor.
     */
    ip: string;
    /**
     * Keep alive timer interval (sec).
     */
    keepAliveTimer: number;
    /**
     * Enable/disable failover upon link down.
     */
    linkDownFailover: string;
    /**
     * Local AS number of neighbor.
     */
    localAs: number;
    /**
     * Do not prepend local-as to incoming updates.
     */
    localAsNoPrepend: string;
    /**
     * Replace real AS with local-as in outgoing updates.
     */
    localAsReplaceAs: string;
    /**
     * Maximum number of IPv4 prefixes to accept from this peer.
     */
    maximumPrefix: number;
    /**
     * Maximum number of IPv6 prefixes to accept from this peer.
     */
    maximumPrefix6: number;
    /**
     * Maximum IPv4 prefix threshold value (1 - 100 percent).
     */
    maximumPrefixThreshold: number;
    /**
     * Maximum IPv6 prefix threshold value (1 - 100 percent).
     */
    maximumPrefixThreshold6: number;
    /**
     * Enable/disable IPv4 Only give warning message when limit is exceeded.
     */
    maximumPrefixWarningOnly: string;
    /**
     * Enable/disable IPv6 Only give warning message when limit is exceeded.
     */
    maximumPrefixWarningOnly6: string;
    /**
     * Enable/disable IPv4 next-hop calculation for this neighbor.
     */
    nextHopSelf: string;
    /**
     * Enable/disable IPv6 next-hop calculation for this neighbor.
     */
    nextHopSelf6: string;
    /**
     * Enable/disable setting nexthop's address to interface's IPv4 address for route-reflector routes.
     */
    nextHopSelfRr: string;
    /**
     * Enable/disable setting nexthop's address to interface's IPv6 address for route-reflector routes.
     */
    nextHopSelfRr6: string;
    /**
     * Enable/disable override result of capability negotiation.
     */
    overrideCapability: string;
    /**
     * Enable/disable sending of open messages to this neighbor.
     */
    passive: string;
    /**
     * Password used in MD5 authentication.
     */
    password: string;
    /**
     * IPv4 Inbound filter for updates from this neighbor.
     */
    prefixListIn: string;
    /**
     * IPv6 Inbound filter for updates from this neighbor.
     */
    prefixListIn6: string;
    /**
     * IPv4 Outbound filter for updates to this neighbor.
     */
    prefixListOut: string;
    /**
     * IPv6 Outbound filter for updates to this neighbor.
     */
    prefixListOut6: string;
    /**
     * AS number of neighbor.
     */
    remoteAs: number;
    /**
     * Enable/disable remove private AS number from IPv4 outbound updates.
     */
    removePrivateAs: string;
    /**
     * Enable/disable remove private AS number from IPv6 outbound updates.
     */
    removePrivateAs6: string;
    /**
     * Graceful restart delay time (sec, 0 = global default).
     */
    restartTime: number;
    /**
     * Time to retain stale routes.
     */
    retainStaleTime: number;
    /**
     * IPv4 Inbound route map filter.
     */
    routeMapIn: string;
    /**
     * IPv6 Inbound route map filter.
     */
    routeMapIn6: string;
    /**
     * IPv4 Outbound route map filter.
     */
    routeMapOut: string;
    /**
     * IPv6 Outbound route map filter.
     */
    routeMapOut6: string;
    /**
     * IPv6 outbound route map filter if the peer is preferred.
     */
    routeMapOut6Preferable: string;
    /**
     * IPv4 outbound route map filter if the peer is preferred.
     */
    routeMapOutPreferable: string;
    /**
     * Enable/disable IPv4 AS route reflector client.
     */
    routeReflectorClient: string;
    /**
     * Enable/disable IPv6 AS route reflector client.
     */
    routeReflectorClient6: string;
    /**
     * Enable/disable IPv4 AS route server client.
     */
    routeServerClient: string;
    /**
     * Enable/disable IPv6 AS route server client.
     */
    routeServerClient6: string;
    /**
     * IPv4 Send community attribute to neighbor.
     */
    sendCommunity: string;
    /**
     * IPv6 Send community attribute to neighbor.
     */
    sendCommunity6: string;
    /**
     * Enable/disable shutdown this neighbor.
     */
    shutdown: string;
    /**
     * Enable/disable allow IPv4 inbound soft reconfiguration.
     */
    softReconfiguration: string;
    /**
     * Enable/disable allow IPv6 inbound soft reconfiguration.
     */
    softReconfiguration6: string;
    /**
     * Enable/disable stale route after neighbor down.
     */
    staleRoute: string;
    /**
     * Enable/disable strict capability matching.
     */
    strictCapabilityMatch: string;
    /**
     * IPv4 Route map to selectively unsuppress suppressed routes.
     */
    unsuppressMap: string;
    /**
     * IPv6 Route map to selectively unsuppress suppressed routes.
     */
    unsuppressMap6: string;
    /**
     * Interface to use as source IP/IPv6 address of TCP connections.
     */
    updateSource: string;
    /**
     * Neighbor weight.
     */
    weight: number;
}

export interface GetRouterBgpNeighborConditionalAdvertise {
    /**
     * Name of advertising route map.
     */
    advertiseRoutemap: string;
    /**
     * Name of condition route map.
     */
    conditionRoutemap: string;
    /**
     * Type of condition.
     */
    conditionType: string;
}

export interface GetRouterBgpNeighborConditionalAdvertise6 {
    /**
     * Name of advertising route map.
     */
    advertiseRoutemap: string;
    /**
     * Name of condition route map.
     */
    conditionRoutemap: string;
    /**
     * Type of condition.
     */
    conditionType: string;
}

export interface GetRouterBgpNeighborGroup {
    /**
     * Enable/disable address family IPv4 for this neighbor.
     */
    activate: string;
    /**
     * Enable/disable address family IPv6 for this neighbor.
     */
    activate6: string;
    /**
     * Enable/disable IPv4 additional-path capability.
     */
    additionalPath: string;
    /**
     * Enable/disable IPv6 additional-path capability.
     */
    additionalPath6: string;
    /**
     * Number of IPv4 additional paths that can be advertised to this neighbor.
     */
    advAdditionalPath: number;
    /**
     * Number of IPv6 additional paths that can be advertised to this neighbor.
     */
    advAdditionalPath6: number;
    /**
     * Minimum interval (sec) between sending updates.
     */
    advertisementInterval: number;
    /**
     * IPv4 The maximum number of occurrence of my AS number allowed.
     */
    allowasIn: number;
    /**
     * IPv6 The maximum number of occurrence of my AS number allowed.
     */
    allowasIn6: number;
    /**
     * Enable/disable IPv4 Enable to allow my AS in AS path.
     */
    allowasInEnable: string;
    /**
     * Enable/disable IPv6 Enable to allow my AS in AS path.
     */
    allowasInEnable6: string;
    /**
     * Enable/disable replace peer AS with own AS for IPv4.
     */
    asOverride: string;
    /**
     * Enable/disable replace peer AS with own AS for IPv6.
     */
    asOverride6: string;
    /**
     * IPv4 List of attributes that should be unchanged.
     */
    attributeUnchanged: string;
    /**
     * IPv6 List of attributes that should be unchanged.
     */
    attributeUnchanged6: string;
    /**
     * Enable/disable BFD for this neighbor.
     */
    bfd: string;
    /**
     * Enable/disable advertise default IPv4 route to this neighbor.
     */
    capabilityDefaultOriginate: string;
    /**
     * Enable/disable advertise default IPv6 route to this neighbor.
     */
    capabilityDefaultOriginate6: string;
    /**
     * Enable/disable advertise dynamic capability to this neighbor.
     */
    capabilityDynamic: string;
    /**
     * Enable/disable advertise IPv4 graceful restart capability to this neighbor.
     */
    capabilityGracefulRestart: string;
    /**
     * Enable/disable advertise IPv6 graceful restart capability to this neighbor.
     */
    capabilityGracefulRestart6: string;
    /**
     * Accept/Send IPv4 ORF lists to/from this neighbor.
     */
    capabilityOrf: string;
    /**
     * Accept/Send IPv6 ORF lists to/from this neighbor.
     */
    capabilityOrf6: string;
    /**
     * Enable/disable advertise route refresh capability to this neighbor.
     */
    capabilityRouteRefresh: string;
    /**
     * Interval (sec) for connect timer.
     */
    connectTimer: number;
    /**
     * Route map to specify criteria to originate IPv4 default.
     */
    defaultOriginateRoutemap: string;
    /**
     * Route map to specify criteria to originate IPv6 default.
     */
    defaultOriginateRoutemap6: string;
    /**
     * Description.
     */
    description: string;
    /**
     * Filter for IPv4 updates from this neighbor.
     */
    distributeListIn: string;
    /**
     * Filter for IPv6 updates from this neighbor.
     */
    distributeListIn6: string;
    /**
     * Filter for IPv4 updates to this neighbor.
     */
    distributeListOut: string;
    /**
     * Filter for IPv6 updates to this neighbor.
     */
    distributeListOut6: string;
    /**
     * Don't negotiate capabilities with this neighbor
     */
    dontCapabilityNegotiate: string;
    /**
     * Enable/disable allow multi-hop EBGP neighbors.
     */
    ebgpEnforceMultihop: string;
    /**
     * EBGP multihop TTL for this peer.
     */
    ebgpMultihopTtl: number;
    /**
     * BGP filter for IPv4 inbound routes.
     */
    filterListIn: string;
    /**
     * BGP filter for IPv6 inbound routes.
     */
    filterListIn6: string;
    /**
     * BGP filter for IPv4 outbound routes.
     */
    filterListOut: string;
    /**
     * BGP filter for IPv6 outbound routes.
     */
    filterListOut6: string;
    /**
     * Interval (sec) before peer considered dead.
     */
    holdtimeTimer: number;
    /**
     * Interface which is used to leak routes to target VRF.
     */
    interface: string;
    /**
     * Keep alive timer interval (sec).
     */
    keepAliveTimer: number;
    /**
     * Enable/disable failover upon link down.
     */
    linkDownFailover: string;
    /**
     * Local AS number of neighbor.
     */
    localAs: number;
    /**
     * Do not prepend local-as to incoming updates.
     */
    localAsNoPrepend: string;
    /**
     * Replace real AS with local-as in outgoing updates.
     */
    localAsReplaceAs: string;
    /**
     * Maximum number of IPv4 prefixes to accept from this peer.
     */
    maximumPrefix: number;
    /**
     * Maximum number of IPv6 prefixes to accept from this peer.
     */
    maximumPrefix6: number;
    /**
     * Maximum IPv4 prefix threshold value (1 - 100 percent).
     */
    maximumPrefixThreshold: number;
    /**
     * Maximum IPv6 prefix threshold value (1 - 100 percent).
     */
    maximumPrefixThreshold6: number;
    /**
     * Enable/disable IPv4 Only give warning message when limit is exceeded.
     */
    maximumPrefixWarningOnly: string;
    /**
     * Enable/disable IPv6 Only give warning message when limit is exceeded.
     */
    maximumPrefixWarningOnly6: string;
    /**
     * Distribute list entry name.
     */
    name: string;
    /**
     * Enable/disable IPv4 next-hop calculation for this neighbor.
     */
    nextHopSelf: string;
    /**
     * Enable/disable IPv6 next-hop calculation for this neighbor.
     */
    nextHopSelf6: string;
    /**
     * Enable/disable setting nexthop's address to interface's IPv4 address for route-reflector routes.
     */
    nextHopSelfRr: string;
    /**
     * Enable/disable setting nexthop's address to interface's IPv6 address for route-reflector routes.
     */
    nextHopSelfRr6: string;
    /**
     * Enable/disable override result of capability negotiation.
     */
    overrideCapability: string;
    /**
     * Enable/disable sending of open messages to this neighbor.
     */
    passive: string;
    /**
     * IPv4 Inbound filter for updates from this neighbor.
     */
    prefixListIn: string;
    /**
     * IPv6 Inbound filter for updates from this neighbor.
     */
    prefixListIn6: string;
    /**
     * IPv4 Outbound filter for updates to this neighbor.
     */
    prefixListOut: string;
    /**
     * IPv6 Outbound filter for updates to this neighbor.
     */
    prefixListOut6: string;
    /**
     * AS number of neighbor.
     */
    remoteAs: number;
    /**
     * Enable/disable remove private AS number from IPv4 outbound updates.
     */
    removePrivateAs: string;
    /**
     * Enable/disable remove private AS number from IPv6 outbound updates.
     */
    removePrivateAs6: string;
    /**
     * Graceful restart delay time (sec, 0 = global default).
     */
    restartTime: number;
    /**
     * Time to retain stale routes.
     */
    retainStaleTime: number;
    /**
     * IPv4 Inbound route map filter.
     */
    routeMapIn: string;
    /**
     * IPv6 Inbound route map filter.
     */
    routeMapIn6: string;
    /**
     * IPv4 Outbound route map filter.
     */
    routeMapOut: string;
    /**
     * IPv6 Outbound route map filter.
     */
    routeMapOut6: string;
    /**
     * IPv6 outbound route map filter if the peer is preferred.
     */
    routeMapOut6Preferable: string;
    /**
     * IPv4 outbound route map filter if the peer is preferred.
     */
    routeMapOutPreferable: string;
    /**
     * Enable/disable IPv4 AS route reflector client.
     */
    routeReflectorClient: string;
    /**
     * Enable/disable IPv6 AS route reflector client.
     */
    routeReflectorClient6: string;
    /**
     * Enable/disable IPv4 AS route server client.
     */
    routeServerClient: string;
    /**
     * Enable/disable IPv6 AS route server client.
     */
    routeServerClient6: string;
    /**
     * IPv4 Send community attribute to neighbor.
     */
    sendCommunity: string;
    /**
     * IPv6 Send community attribute to neighbor.
     */
    sendCommunity6: string;
    /**
     * Enable/disable shutdown this neighbor.
     */
    shutdown: string;
    /**
     * Enable/disable allow IPv4 inbound soft reconfiguration.
     */
    softReconfiguration: string;
    /**
     * Enable/disable allow IPv6 inbound soft reconfiguration.
     */
    softReconfiguration6: string;
    /**
     * Enable/disable stale route after neighbor down.
     */
    staleRoute: string;
    /**
     * Enable/disable strict capability matching.
     */
    strictCapabilityMatch: string;
    /**
     * IPv4 Route map to selectively unsuppress suppressed routes.
     */
    unsuppressMap: string;
    /**
     * IPv6 Route map to selectively unsuppress suppressed routes.
     */
    unsuppressMap6: string;
    /**
     * Interface to use as source IP/IPv6 address of TCP connections.
     */
    updateSource: string;
    /**
     * Neighbor weight.
     */
    weight: number;
}

export interface GetRouterBgpNeighborRange {
    /**
     * ID.
     */
    id: number;
    /**
     * Maximum number of neighbors.
     */
    maxNeighborNum: number;
    /**
     * Neighbor group name.
     */
    neighborGroup: string;
    /**
     * Network prefix.
     */
    prefix: string;
}

export interface GetRouterBgpNeighborRange6 {
    /**
     * ID.
     */
    id: number;
    /**
     * Maximum number of neighbors.
     */
    maxNeighborNum: number;
    /**
     * Neighbor group name.
     */
    neighborGroup: string;
    /**
     * Network IPv6 prefix.
     */
    prefix6: string;
}

export interface GetRouterBgpNetwork {
    /**
     * Enable/disable route as backdoor.
     */
    backdoor: string;
    /**
     * ID.
     */
    id: number;
    /**
     * Configure insurance of BGP network route existence in IGP.
     */
    networkImportCheck: string;
    /**
     * Network prefix.
     */
    prefix: string;
    /**
     * Route map of VRF leaking.
     */
    routeMap: string;
}

export interface GetRouterBgpNetwork6 {
    /**
     * Enable/disable route as backdoor.
     */
    backdoor: string;
    /**
     * ID.
     */
    id: number;
    /**
     * Configure insurance of BGP network route existence in IGP.
     */
    networkImportCheck: string;
    /**
     * Network IPv6 prefix.
     */
    prefix6: string;
    /**
     * Route map of VRF leaking.
     */
    routeMap: string;
}

export interface GetRouterBgpRedistribute {
    /**
     * Distribute list entry name.
     */
    name: string;
    /**
     * Route map of VRF leaking.
     */
    routeMap: string;
    /**
     * Status
     */
    status: string;
}

export interface GetRouterBgpRedistribute6 {
    /**
     * Distribute list entry name.
     */
    name: string;
    /**
     * Route map of VRF leaking.
     */
    routeMap: string;
    /**
     * Status
     */
    status: string;
}

export interface GetRouterBgpVrfLeak {
    /**
     * Target VRF table. The structure of `target` block is documented below.
     */
    targets: outputs.GetRouterBgpVrfLeakTarget[];
    /**
     * Target VRF ID <0 - 31>.
     */
    vrf: string;
}

export interface GetRouterBgpVrfLeak6 {
    /**
     * Target VRF table. The structure of `target` block is documented below.
     */
    targets: outputs.GetRouterBgpVrfLeak6Target[];
    /**
     * Target VRF ID <0 - 31>.
     */
    vrf: string;
}

export interface GetRouterBgpVrfLeak6Target {
    /**
     * Interface which is used to leak routes to target VRF.
     */
    interface: string;
    /**
     * Route map of VRF leaking.
     */
    routeMap: string;
    /**
     * Target VRF ID <0 - 31>.
     */
    vrf: string;
}

export interface GetRouterBgpVrfLeakTarget {
    /**
     * Interface which is used to leak routes to target VRF.
     */
    interface: string;
    /**
     * Route map of VRF leaking.
     */
    routeMap: string;
    /**
     * Target VRF ID <0 - 31>.
     */
    vrf: string;
}

export interface GetRouterCommunityListRule {
    /**
     * Permit or deny route-based operations, based on the route's COMMUNITY attribute.
     */
    action: string;
    /**
     * ID.
     */
    id: number;
    /**
     * Community specifications for matching a reserved community.
     */
    match: string;
    /**
     * Ordered list of COMMUNITY attributes as a regular expression.
     */
    regexp: string;
}

export interface GetRouterIsisIsisInterface {
    /**
     * Authentication key-chain for level 1 PDUs.
     */
    authKeychainL1: string;
    /**
     * Authentication key-chain for level 2 PDUs.
     */
    authKeychainL2: string;
    /**
     * Level 1 authentication mode.
     */
    authModeL1: string;
    /**
     * Level 2 authentication mode.
     */
    authModeL2: string;
    /**
     * Authentication password for level 1 PDUs.
     */
    authPasswordL1: string;
    /**
     * Authentication password for level 2 PDUs.
     */
    authPasswordL2: string;
    /**
     * Enable/disable authentication send-only for level 1 PDUs.
     */
    authSendOnlyL1: string;
    /**
     * Enable/disable authentication send-only for level 2 PDUs.
     */
    authSendOnlyL2: string;
    /**
     * IS-IS interface's circuit type
     */
    circuitType: string;
    /**
     * Level 1 CSNP interval.
     */
    csnpIntervalL1: number;
    /**
     * Level 2 CSNP interval.
     */
    csnpIntervalL2: number;
    /**
     * Level 1 hello interval.
     */
    helloIntervalL1: number;
    /**
     * Level 2 hello interval.
     */
    helloIntervalL2: number;
    /**
     * Level 1 multiplier for Hello holding time.
     */
    helloMultiplierL1: number;
    /**
     * Level 2 multiplier for Hello holding time.
     */
    helloMultiplierL2: number;
    /**
     * Enable/disable padding to IS-IS hello packets.
     */
    helloPadding: string;
    /**
     * LSP transmission interval (milliseconds).
     */
    lspInterval: number;
    /**
     * LSP retransmission interval (sec).
     */
    lspRetransmitInterval: number;
    /**
     * Enable/disable IS-IS mesh group.
     */
    meshGroup: string;
    /**
     * Mesh group ID <0-4294967295>, 0: mesh-group blocked.
     */
    meshGroupId: number;
    /**
     * Level 1 metric for interface.
     */
    metricL1: number;
    /**
     * Level 2 metric for interface.
     */
    metricL2: number;
    /**
     * IS-IS interface name.
     */
    name: string;
    /**
     * IS-IS interface's network type
     */
    networkType: string;
    /**
     * Level 1 priority.
     */
    priorityL1: number;
    /**
     * Level 2 priority.
     */
    priorityL2: number;
    /**
     * Enable/disable redistribution.
     */
    status: string;
    /**
     * Enable/disable IPv6 interface for IS-IS.
     */
    status6: string;
    /**
     * Level 1 wide metric for interface.
     */
    wideMetricL1: number;
    /**
     * Level 2 wide metric for interface.
     */
    wideMetricL2: number;
}

export interface GetRouterIsisIsisNet {
    /**
     * Prefix entry ID.
     */
    id: number;
    /**
     * IS-IS net xx.xxxx. ... .xxxx.xx.
     */
    net: string;
}

export interface GetRouterIsisRedistribute {
    /**
     * Level.
     */
    level: string;
    /**
     * Metric.
     */
    metric: number;
    /**
     * Metric type.
     */
    metricType: string;
    /**
     * Protocol name.
     */
    protocol: string;
    /**
     * Route map name.
     */
    routemap: string;
    /**
     * Enable/disable redistribution.
     */
    status: string;
}

export interface GetRouterIsisRedistribute6 {
    /**
     * Level.
     */
    level: string;
    /**
     * Metric.
     */
    metric: number;
    /**
     * Metric type.
     */
    metricType: string;
    /**
     * Protocol name.
     */
    protocol: string;
    /**
     * Route map name.
     */
    routemap: string;
    /**
     * Enable/disable redistribution.
     */
    status: string;
}

export interface GetRouterIsisSummaryAddress {
    /**
     * Prefix entry ID.
     */
    id: number;
    /**
     * Level.
     */
    level: string;
    /**
     * Prefix.
     */
    prefix: string;
}

export interface GetRouterIsisSummaryAddress6 {
    /**
     * Prefix entry ID.
     */
    id: number;
    /**
     * Level.
     */
    level: string;
    /**
     * IPv6 prefix.
     */
    prefix6: string;
}

export interface GetRouterKeyChainKey {
    /**
     * Lifetime of received authentication key (format: hh:mm:ss day month year).
     */
    acceptLifetime: string;
    /**
     * Cryptographic algorithm.
     */
    algorithm: string;
    /**
     * Key ID (0 - 2147483647).
     */
    id: number;
    /**
     * Password for the key (max. = 35 characters).
     */
    keyString: string;
    /**
     * Lifetime of sent authentication key (format: hh:mm:ss day month year).
     */
    sendLifetime: string;
}

export interface GetRouterMulticast6Interface {
    /**
     * Time before old neighbour information expires (1 - 65535 sec, default = 105).
     */
    helloHoldtime: number;
    /**
     * Interval between sending PIM hello messages  (1 - 65535 sec, default = 30)..
     */
    helloInterval: number;
    /**
     * Interface name.
     */
    name: string;
}

export interface GetRouterMulticast6PimSmGlobal {
    /**
     * Limit of packets/sec per source registered through this RP (0 means unlimited).
     */
    registerRateLimit: number;
    /**
     * Statically configured RP addresses. The structure of `rpAddress` block is documented below.
     */
    rpAddresses: outputs.GetRouterMulticast6PimSmGlobalRpAddress[];
}

export interface GetRouterMulticast6PimSmGlobalRpAddress {
    /**
     * ID of the entry.
     */
    id: number;
    /**
     * RP router IPv6 address.
     */
    ip6Address: string;
}

export interface GetRouterMulticastFlowFlow {
    /**
     * Multicast group IP address.
     */
    groupAddr: string;
    /**
     * Flow ID.
     */
    id: number;
    /**
     * Multicast source IP address.
     */
    sourceAddr: string;
}

export interface GetRouterMulticastInterface {
    /**
     * Enable/disable Protocol Independent Multicast (PIM) Bidirectional Forwarding Detection (BFD).
     */
    bfd: string;
    /**
     * Exclude GenID from hello packets (compatibility with old Cisco IOS).
     */
    ciscoExcludeGenid: string;
    /**
     * DR election priority.
     */
    drPriority: number;
    /**
     * Time before old neighbor information expires (0 - 65535 sec, default = 105).
     */
    helloHoldtime: number;
    /**
     * Interval between sending PIM hello messages (0 - 65535 sec, default = 30).
     */
    helloInterval: number;
    /**
     * IGMP configuration options. The structure of `igmp` block is documented below.
     */
    igmp: outputs.GetRouterMulticastInterfaceIgmp;
    /**
     * Join multicast groups. The structure of `joinGroup` block is documented below.
     */
    joinGroups: outputs.GetRouterMulticastInterfaceJoinGroup[];
    /**
     * Acceptable source for multicast group.
     */
    multicastFlow: string;
    /**
     * Interface name.
     */
    name: string;
    /**
     * Routers acknowledged as neighbor routers.
     */
    neighbourFilter: string;
    /**
     * Enable/disable listening to IGMP but not participating in PIM.
     */
    passive: string;
    /**
     * PIM operation mode.
     */
    pimMode: string;
    /**
     * Delay flooding packets on this interface (100 - 5000 msec, default = 500).
     */
    propagationDelay: number;
    /**
     * Enable/disable compete to become RP in elections.
     */
    rpCandidate: string;
    /**
     * Multicast groups managed by this RP.
     */
    rpCandidateGroup: string;
    /**
     * RP candidate advertisement interval (1 - 16383 sec, default = 60).
     */
    rpCandidateInterval: number;
    /**
     * Router's priority as RP.
     */
    rpCandidatePriority: number;
    /**
     * Enable/disable fail back for RPF neighbor query.
     */
    rpfNbrFailBack: string;
    /**
     * Filter for fail back RPF neighbors.
     */
    rpfNbrFailBackFilter: string;
    /**
     * Interval between sending state-refresh packets (1 - 100 sec, default = 60).
     */
    stateRefreshInterval: number;
    /**
     * Statically set multicast groups to forward out.
     */
    staticGroup: string;
    /**
     * Minimum TTL of multicast packets that will be forwarded (applied only to new multicast routes) (1 - 255, default = 1).
     */
    ttlThreshold: number;
}

export interface GetRouterMulticastInterfaceIgmp {
    /**
     * Groups IGMP hosts are allowed to join.
     */
    accessGroup: string;
    /**
     * Groups to drop membership for immediately after receiving IGMPv2 leave.
     */
    immediateLeaveGroup: string;
    /**
     * Number of group specific queries before removing group (2 - 7, default = 2).
     */
    lastMemberQueryCount: number;
    /**
     * Timeout between IGMPv2 leave and removing group (1 - 65535 msec, default = 1000).
     */
    lastMemberQueryInterval: number;
    /**
     * Interval between queries to IGMP hosts (1 - 65535 sec, default = 125).
     */
    queryInterval: number;
    /**
     * Maximum time to wait for a IGMP query response (1 - 25 sec, default = 10).
     */
    queryMaxResponseTime: number;
    /**
     * Timeout between queries before becoming querier for network (60 - 900, default = 255).
     */
    queryTimeout: number;
    /**
     * Enable/disable require IGMP packets contain router alert option.
     */
    routerAlertCheck: string;
    /**
     * Maximum version of IGMP to support.
     */
    version: string;
}

export interface GetRouterMulticastInterfaceJoinGroup {
    /**
     * Multicast group IP address.
     */
    address: string;
}

export interface GetRouterMulticastPimSmGlobal {
    /**
     * Sources allowed to register packets with this Rendezvous Point (RP).
     */
    acceptRegisterList: string;
    /**
     * Sources allowed to send multicast traffic.
     */
    acceptSourceList: string;
    /**
     * Enable/disable accept BSR quick refresh packets from neighbors.
     */
    bsrAllowQuickRefresh: string;
    /**
     * Enable/disable allowing this router to become a bootstrap router (BSR).
     */
    bsrCandidate: string;
    /**
     * BSR hash length (0 - 32, default = 10).
     */
    bsrHash: number;
    /**
     * Interface to advertise as candidate BSR.
     */
    bsrInterface: string;
    /**
     * BSR priority (0 - 255, default = 0).
     */
    bsrPriority: number;
    /**
     * Enable/disable making candidate RP compatible with old Cisco IOS.
     */
    ciscoCrpPrefix: string;
    /**
     * Use only hash for RP selection (compatibility with old Cisco IOS).
     */
    ciscoIgnoreRpSetPriority: string;
    /**
     * Checksum entire register packet(for old Cisco IOS compatibility).
     */
    ciscoRegisterChecksum: string;
    /**
     * Cisco register checksum only these groups.
     */
    ciscoRegisterChecksumGroup: string;
    /**
     * Join/prune holdtime (1 - 65535, default = 210).
     */
    joinPruneHoldtime: number;
    /**
     * Period of time between sending periodic PIM join/prune messages in seconds (1 - 65535, default = 60).
     */
    messageInterval: number;
    /**
     * Maximum retries of null register (1 - 20, default = 1).
     */
    nullRegisterRetries: number;
    /**
     * Limit of packets/sec per source registered through this RP (0 - 65535, default = 0 which means unlimited).
     */
    registerRateLimit: number;
    /**
     * Enable/disable check RP is reachable before registering packets.
     */
    registerRpReachability: string;
    /**
     * Override source address in register packets.
     */
    registerSource: string;
    /**
     * Override with primary interface address.
     */
    registerSourceInterface: string;
    /**
     * Override with local IP address.
     */
    registerSourceIp: string;
    /**
     * Period of time to honor register-stop message (1 - 65535 sec, default = 60).
     */
    registerSupression: number;
    /**
     * Statically configure RP addresses. The structure of `rpAddress` block is documented below.
     */
    rpAddresses: outputs.GetRouterMulticastPimSmGlobalRpAddress[];
    /**
     * Timeout for RP receiving data on (S,G) tree (1 - 65535 sec, default = 185).
     */
    rpRegisterKeepalive: number;
    /**
     * Enable/disable switching to source specific trees.
     */
    sptThreshold: string;
    /**
     * Groups allowed to switch to source tree.
     */
    sptThresholdGroup: string;
    /**
     * Enable/disable source specific multicast.
     */
    ssm: string;
    /**
     * Groups allowed to source specific multicast.
     */
    ssmRange: string;
}

export interface GetRouterMulticastPimSmGlobalRpAddress {
    /**
     * Groups to use this RP.
     */
    group: string;
    /**
     * ID.
     */
    id: number;
    /**
     * RP router address.
     */
    ipAddress: string;
}

export interface GetRouterOspf6Area {
    /**
     * Authentication mode.
     */
    authentication: string;
    /**
     * Summary default cost of stub or NSSA area.
     */
    defaultCost: number;
    /**
     * Summary address entry ID.
     */
    id: string;
    /**
     * Authentication algorithm.
     */
    ipsecAuthAlg: string;
    /**
     * Encryption algorithm.
     */
    ipsecEncAlg: string;
    /**
     * IPsec authentication and encryption keys. The structure of `ipsecKeys` block is documented below.
     */
    ipsecKeys: outputs.GetRouterOspf6AreaIpsecKey[];
    /**
     * Key roll-over interval.
     */
    keyRolloverInterval: number;
    /**
     * Enable/disable originate type 7 default into NSSA area.
     */
    nssaDefaultInformationOriginate: string;
    /**
     * OSPFv3 default metric.
     */
    nssaDefaultInformationOriginateMetric: number;
    /**
     * OSPFv3 metric type for default routes.
     */
    nssaDefaultInformationOriginateMetricType: string;
    /**
     * Enable/disable redistribute into NSSA area.
     */
    nssaRedistribution: string;
    /**
     * NSSA translator role type.
     */
    nssaTranslatorRole: string;
    /**
     * OSPF6 area range configuration. The structure of `range` block is documented below.
     */
    ranges: outputs.GetRouterOspf6AreaRange[];
    /**
     * Stub summary setting.
     */
    stubType: string;
    /**
     * Area type setting.
     */
    type: string;
    /**
     * OSPF6 virtual link configuration. The structure of `virtualLink` block is documented below.
     */
    virtualLinks: outputs.GetRouterOspf6AreaVirtualLink[];
}

export interface GetRouterOspf6AreaIpsecKey {
    /**
     * Authentication key.
     */
    authKey: string;
    /**
     * Encryption key.
     */
    encKey: string;
    /**
     * Security Parameters Index.
     */
    spi: number;
}

export interface GetRouterOspf6AreaRange {
    /**
     * Enable/disable advertise status.
     */
    advertise: string;
    /**
     * Summary address entry ID.
     */
    id: number;
    /**
     * IPv6 prefix.
     */
    prefix6: string;
}

export interface GetRouterOspf6AreaVirtualLink {
    /**
     * Authentication mode.
     */
    authentication: string;
    /**
     * Dead interval.
     */
    deadInterval: number;
    /**
     * Hello interval.
     */
    helloInterval: number;
    /**
     * Authentication algorithm.
     */
    ipsecAuthAlg: string;
    /**
     * Encryption algorithm.
     */
    ipsecEncAlg: string;
    /**
     * IPsec authentication and encryption keys. The structure of `ipsecKeys` block is documented below.
     */
    ipsecKeys: outputs.GetRouterOspf6AreaVirtualLinkIpsecKey[];
    /**
     * Key roll-over interval.
     */
    keyRolloverInterval: number;
    /**
     * Passive interface name.
     */
    name: string;
    /**
     * A.B.C.D, peer router ID.
     */
    peer: string;
    /**
     * Retransmit interval.
     */
    retransmitInterval: number;
    /**
     * Transmit delay.
     */
    transmitDelay: number;
}

export interface GetRouterOspf6AreaVirtualLinkIpsecKey {
    /**
     * Authentication key.
     */
    authKey: string;
    /**
     * Encryption key.
     */
    encKey: string;
    /**
     * Security Parameters Index.
     */
    spi: number;
}

export interface GetRouterOspf6Ospf6Interface {
    /**
     * A.B.C.D, in IPv4 address format.
     */
    areaId: string;
    /**
     * Authentication mode.
     */
    authentication: string;
    /**
     * Enable/disable Bidirectional Forwarding Detection (BFD).
     */
    bfd: string;
    /**
     * Cost of the interface, value range from 0 to 65535, 0 means auto-cost.
     */
    cost: number;
    /**
     * Dead interval.
     */
    deadInterval: number;
    /**
     * Hello interval.
     */
    helloInterval: number;
    /**
     * Configuration interface name.
     */
    interface: string;
    /**
     * Authentication algorithm.
     */
    ipsecAuthAlg: string;
    /**
     * Encryption algorithm.
     */
    ipsecEncAlg: string;
    /**
     * IPsec authentication and encryption keys. The structure of `ipsecKeys` block is documented below.
     */
    ipsecKeys: outputs.GetRouterOspf6Ospf6InterfaceIpsecKey[];
    /**
     * Key roll-over interval.
     */
    keyRolloverInterval: number;
    /**
     * MTU for OSPFv3 packets.
     */
    mtu: number;
    /**
     * Enable/disable ignoring MTU field in DBD packets.
     */
    mtuIgnore: string;
    /**
     * Passive interface name.
     */
    name: string;
    /**
     * OSPFv3 neighbors are used when OSPFv3 runs on non-broadcast media The structure of `neighbor` block is documented below.
     */
    neighbors: outputs.GetRouterOspf6Ospf6InterfaceNeighbor[];
    /**
     * Network type.
     */
    networkType: string;
    /**
     * priority
     */
    priority: number;
    /**
     * Retransmit interval.
     */
    retransmitInterval: number;
    /**
     * status
     */
    status: string;
    /**
     * Transmit delay.
     */
    transmitDelay: number;
}

export interface GetRouterOspf6Ospf6InterfaceIpsecKey {
    /**
     * Authentication key.
     */
    authKey: string;
    /**
     * Encryption key.
     */
    encKey: string;
    /**
     * Security Parameters Index.
     */
    spi: number;
}

export interface GetRouterOspf6Ospf6InterfaceNeighbor {
    /**
     * Cost of the interface, value range from 0 to 65535, 0 means auto-cost.
     */
    cost: number;
    /**
     * IPv6 link local address of the neighbor.
     */
    ip6: string;
    /**
     * Poll interval time in seconds.
     */
    pollInterval: number;
    /**
     * priority
     */
    priority: number;
}

export interface GetRouterOspf6PassiveInterface {
    /**
     * Passive interface name.
     */
    name: string;
}

export interface GetRouterOspf6Redistribute {
    /**
     * Redistribute metric setting.
     */
    metric: number;
    /**
     * Metric type.
     */
    metricType: string;
    /**
     * Passive interface name.
     */
    name: string;
    /**
     * Route map name.
     */
    routemap: string;
    /**
     * status
     */
    status: string;
}

export interface GetRouterOspf6SummaryAddress {
    /**
     * Enable/disable advertise status.
     */
    advertise: string;
    /**
     * Summary address entry ID.
     */
    id: number;
    /**
     * IPv6 prefix.
     */
    prefix6: string;
    /**
     * Tag value.
     */
    tag: number;
}

export interface GetRouterOspfArea {
    /**
     * Authentication type.
     */
    authentication: string;
    /**
     * Comment.
     */
    comments: string;
    /**
     * Summary default cost of stub or NSSA area.
     */
    defaultCost: number;
    /**
     * OSPF area filter-list configuration. The structure of `filterList` block is documented below.
     */
    filterLists: outputs.GetRouterOspfAreaFilterList[];
    /**
     * Distribute list entry ID.
     */
    id: string;
    /**
     * Redistribute, advertise, or do not originate Type-7 default route into NSSA area.
     */
    nssaDefaultInformationOriginate: string;
    /**
     * OSPF default metric.
     */
    nssaDefaultInformationOriginateMetric: number;
    /**
     * OSPF metric type for default routes.
     */
    nssaDefaultInformationOriginateMetricType: string;
    /**
     * Enable/disable redistribute into NSSA area.
     */
    nssaRedistribution: string;
    /**
     * NSSA translator role type.
     */
    nssaTranslatorRole: string;
    /**
     * OSPF area range configuration. The structure of `range` block is documented below.
     */
    ranges: outputs.GetRouterOspfAreaRange[];
    /**
     * Enable/disable shortcut option.
     */
    shortcut: string;
    /**
     * Stub summary setting.
     */
    stubType: string;
    /**
     * Area type setting.
     */
    type: string;
    /**
     * OSPF virtual link configuration. The structure of `virtualLink` block is documented below.
     */
    virtualLinks: outputs.GetRouterOspfAreaVirtualLink[];
}

export interface GetRouterOspfAreaFilterList {
    /**
     * Direction.
     */
    direction: string;
    /**
     * Distribute list entry ID.
     */
    id: number;
    /**
     * Access-list or prefix-list name.
     */
    list: string;
}

export interface GetRouterOspfAreaRange {
    /**
     * Enable/disable advertise status.
     */
    advertise: string;
    /**
     * Distribute list entry ID.
     */
    id: number;
    /**
     * Prefix.
     */
    prefix: string;
    /**
     * Substitute prefix.
     */
    substitute: string;
    /**
     * Enable/disable substitute status.
     */
    substituteStatus: string;
}

export interface GetRouterOspfAreaVirtualLink {
    /**
     * Authentication type.
     */
    authentication: string;
    /**
     * Authentication key.
     */
    authenticationKey: string;
    /**
     * Dead interval.
     */
    deadInterval: number;
    /**
     * Hello interval.
     */
    helloInterval: number;
    /**
     * Message-digest key-chain name.
     */
    keychain: string;
    /**
     * MD5 key.
     */
    md5Key: string;
    /**
     * Authentication MD5 key-chain name.
     */
    md5Keychain: string;
    /**
     * MD5 key. The structure of `md5Keys` block is documented below.
     */
    md5Keys: outputs.GetRouterOspfAreaVirtualLinkMd5Key[];
    /**
     * Redistribute name.
     */
    name: string;
    /**
     * Peer IP.
     */
    peer: string;
    /**
     * Retransmit interval.
     */
    retransmitInterval: number;
    /**
     * Transmit delay.
     */
    transmitDelay: number;
}

export interface GetRouterOspfAreaVirtualLinkMd5Key {
    /**
     * Distribute list entry ID.
     */
    id: number;
    /**
     * Password for the key.
     */
    keyString: string;
}

export interface GetRouterOspfDistributeList {
    /**
     * Access list name.
     */
    accessList: string;
    /**
     * Distribute list entry ID.
     */
    id: number;
    /**
     * Protocol type.
     */
    protocol: string;
}

export interface GetRouterOspfNeighbor {
    /**
     * Cost of the interface, value range from 0 to 65535, 0 means auto-cost.
     */
    cost: number;
    /**
     * Distribute list entry ID.
     */
    id: number;
    /**
     * Interface IP address of the neighbor.
     */
    ip: string;
    /**
     * Poll interval time in seconds.
     */
    pollInterval: number;
    /**
     * Priority.
     */
    priority: number;
}

export interface GetRouterOspfNetwork {
    /**
     * Attach the network to area.
     */
    area: string;
    /**
     * Comment.
     */
    comments: string;
    /**
     * Distribute list entry ID.
     */
    id: number;
    /**
     * Prefix.
     */
    prefix: string;
}

export interface GetRouterOspfOspfInterface {
    /**
     * Authentication type.
     */
    authentication: string;
    /**
     * Authentication key.
     */
    authenticationKey: string;
    /**
     * Bidirectional Forwarding Detection (BFD).
     */
    bfd: string;
    /**
     * Comment.
     */
    comments: string;
    /**
     * Cost of the interface, value range from 0 to 65535, 0 means auto-cost.
     */
    cost: number;
    /**
     * Enable/disable control of flooding out LSAs.
     */
    databaseFilterOut: string;
    /**
     * Dead interval.
     */
    deadInterval: number;
    /**
     * Hello interval.
     */
    helloInterval: number;
    /**
     * Number of hello packets within dead interval.
     */
    helloMultiplier: number;
    /**
     * Configuration interface name.
     */
    interface: string;
    /**
     * Interface IP address of the neighbor.
     */
    ip: string;
    /**
     * Message-digest key-chain name.
     */
    keychain: string;
    /**
     * MD5 key.
     */
    md5Key: string;
    /**
     * Authentication MD5 key-chain name.
     */
    md5Keychain: string;
    /**
     * MD5 key. The structure of `md5Keys` block is documented below.
     */
    md5Keys: outputs.GetRouterOspfOspfInterfaceMd5Key[];
    /**
     * MTU for database description packets.
     */
    mtu: number;
    /**
     * Enable/disable ignore MTU.
     */
    mtuIgnore: string;
    /**
     * Redistribute name.
     */
    name: string;
    /**
     * Network type.
     */
    networkType: string;
    /**
     * Prefix length.
     */
    prefixLength: number;
    /**
     * Priority.
     */
    priority: number;
    /**
     * Graceful restart neighbor resynchronization timeout.
     */
    resyncTimeout: number;
    /**
     * Retransmit interval.
     */
    retransmitInterval: number;
    /**
     * status
     */
    status: string;
    /**
     * Transmit delay.
     */
    transmitDelay: number;
}

export interface GetRouterOspfOspfInterfaceMd5Key {
    /**
     * Distribute list entry ID.
     */
    id: number;
    /**
     * Password for the key.
     */
    keyString: string;
}

export interface GetRouterOspfPassiveInterface {
    /**
     * Redistribute name.
     */
    name: string;
}

export interface GetRouterOspfRedistribute {
    /**
     * Redistribute metric setting.
     */
    metric: number;
    /**
     * Metric type.
     */
    metricType: string;
    /**
     * Redistribute name.
     */
    name: string;
    /**
     * Route map name.
     */
    routemap: string;
    /**
     * status
     */
    status: string;
    /**
     * Tag value.
     */
    tag: number;
}

export interface GetRouterOspfSummaryAddress {
    /**
     * Enable/disable advertise status.
     */
    advertise: string;
    /**
     * Distribute list entry ID.
     */
    id: number;
    /**
     * Prefix.
     */
    prefix: string;
    /**
     * Tag value.
     */
    tag: number;
}

export interface GetRouterPolicyDst {
    /**
     * IP and mask.
     */
    subnet: string;
}

export interface GetRouterPolicyDstaddr {
    /**
     * Custom Destination Internet Service name.
     */
    name: string;
}

export interface GetRouterPolicyInputDevice {
    /**
     * Custom Destination Internet Service name.
     */
    name: string;
}

export interface GetRouterPolicyInternetServiceCustom {
    /**
     * Custom Destination Internet Service name.
     */
    name: string;
}

export interface GetRouterPolicyInternetServiceId {
    /**
     * Destination Internet Service ID.
     */
    id: number;
}

export interface GetRouterPolicySrc {
    /**
     * IP and mask.
     */
    subnet: string;
}

export interface GetRouterPolicySrcaddr {
    /**
     * Custom Destination Internet Service name.
     */
    name: string;
}

export interface GetRouterPrefixList6Rule {
    /**
     * Permit or deny packets that match this rule.
     */
    action: string;
    /**
     * Flags.
     */
    flags: number;
    /**
     * Minimum prefix length to be matched (0 - 128).
     */
    ge: number;
    /**
     * Rule ID.
     */
    id: number;
    /**
     * Maximum prefix length to be matched (0 - 128).
     */
    le: number;
    /**
     * IPv6 prefix to define regular filter criteria, such as "any" or subnets.
     */
    prefix6: string;
}

export interface GetRouterPrefixListRule {
    /**
     * Permit or deny this IP address and netmask prefix.
     */
    action: string;
    /**
     * Flags.
     */
    flags: number;
    /**
     * Minimum prefix length to be matched (0 - 32).
     */
    ge: number;
    /**
     * Rule ID.
     */
    id: number;
    /**
     * Maximum prefix length to be matched (0 - 32).
     */
    le: number;
    /**
     * IPv4 prefix to define regular filter criteria, such as "any" or subnets.
     */
    prefix: string;
}

export interface GetRouterRipDistance {
    /**
     * Access list name.
     */
    accessList: string;
    /**
     * Distance (1 - 255).
     */
    distance: number;
    /**
     * Offset-list ID.
     */
    id: number;
    /**
     * Network prefix.
     */
    prefix: string;
}

export interface GetRouterRipDistributeList {
    /**
     * Offset list direction.
     */
    direction: string;
    /**
     * Offset-list ID.
     */
    id: number;
    /**
     * Interface name.
     */
    interface: string;
    /**
     * Distribute access/prefix list name.
     */
    listname: string;
    /**
     * status
     */
    status: string;
}

export interface GetRouterRipInterface {
    /**
     * Authentication key-chain name.
     */
    authKeychain: string;
    /**
     * Authentication mode.
     */
    authMode: string;
    /**
     * Authentication string/password.
     */
    authString: string;
    /**
     * flags
     */
    flags: number;
    /**
     * Interface name.
     */
    name: string;
    /**
     * Receive version.
     */
    receiveVersion: string;
    /**
     * Send version.
     */
    sendVersion: string;
    /**
     * Enable/disable broadcast version 1 compatible packets.
     */
    sendVersion2Broadcast: string;
    /**
     * Enable/disable split horizon.
     */
    splitHorizon: string;
    /**
     * Enable/disable split horizon.
     */
    splitHorizonStatus: string;
}

export interface GetRouterRipNeighbor {
    /**
     * Offset-list ID.
     */
    id: number;
    /**
     * IP address.
     */
    ip: string;
}

export interface GetRouterRipNetwork {
    /**
     * Offset-list ID.
     */
    id: number;
    /**
     * Network prefix.
     */
    prefix: string;
}

export interface GetRouterRipOffsetList {
    /**
     * Access list name.
     */
    accessList: string;
    /**
     * Offset list direction.
     */
    direction: string;
    /**
     * Offset-list ID.
     */
    id: number;
    /**
     * Interface name.
     */
    interface: string;
    /**
     * offset
     */
    offset: number;
    /**
     * status
     */
    status: string;
}

export interface GetRouterRipPassiveInterface {
    /**
     * Interface name.
     */
    name: string;
}

export interface GetRouterRipRedistribute {
    /**
     * Redistribute metric setting.
     */
    metric: number;
    /**
     * Interface name.
     */
    name: string;
    /**
     * Route map name.
     */
    routemap: string;
    /**
     * status
     */
    status: string;
}

export interface GetRouterRipngAggregateAddress {
    /**
     * Offset-list ID.
     */
    id: number;
    /**
     * Aggregate address prefix.
     */
    prefix6: string;
}

export interface GetRouterRipngDistance {
    /**
     * IPv6 access list name.
     */
    accessList6: string;
    /**
     * Distance (1 - 255).
     */
    distance: number;
    /**
     * Offset-list ID.
     */
    id: number;
    /**
     * Aggregate address prefix.
     */
    prefix6: string;
}

export interface GetRouterRipngDistributeList {
    /**
     * Offset list direction.
     */
    direction: string;
    /**
     * Offset-list ID.
     */
    id: number;
    /**
     * Interface name.
     */
    interface: string;
    /**
     * Distribute access/prefix list name.
     */
    listname: string;
    /**
     * status
     */
    status: string;
}

export interface GetRouterRipngInterface {
    /**
     * Flags.
     */
    flags: number;
    /**
     * Interface name.
     */
    name: string;
    /**
     * Enable/disable split horizon.
     */
    splitHorizon: string;
    /**
     * Enable/disable split horizon.
     */
    splitHorizonStatus: string;
}

export interface GetRouterRipngNeighbor {
    /**
     * Offset-list ID.
     */
    id: number;
    /**
     * Interface name.
     */
    interface: string;
    /**
     * IPv6 link-local address.
     */
    ip6: string;
}

export interface GetRouterRipngNetwork {
    /**
     * Offset-list ID.
     */
    id: number;
    /**
     * Network IPv6 link-local prefix.
     */
    prefix: string;
}

export interface GetRouterRipngOffsetList {
    /**
     * IPv6 access list name.
     */
    accessList6: string;
    /**
     * Offset list direction.
     */
    direction: string;
    /**
     * Offset-list ID.
     */
    id: number;
    /**
     * Interface name.
     */
    interface: string;
    /**
     * offset
     */
    offset: number;
    /**
     * status
     */
    status: string;
}

export interface GetRouterRipngPassiveInterface {
    /**
     * Interface name.
     */
    name: string;
}

export interface GetRouterRipngRedistribute {
    /**
     * Redistribute metric setting.
     */
    metric: number;
    /**
     * Interface name.
     */
    name: string;
    /**
     * Route map name.
     */
    routemap: string;
    /**
     * status
     */
    status: string;
}

export interface GetRouterRouteMapRule {
    /**
     * Action.
     */
    action: string;
    /**
     * Rule ID.
     */
    id: number;
    /**
     * Match BGP AS path list.
     */
    matchAsPath: string;
    /**
     * Match BGP community list.
     */
    matchCommunity: string;
    /**
     * Enable/disable exact matching of communities.
     */
    matchCommunityExact: string;
    /**
     * BGP flag value to match (0 - 65535)
     */
    matchFlags: number;
    /**
     * Match interface configuration.
     */
    matchInterface: string;
    /**
     * Match IPv6 address permitted by access-list6 or prefix-list6.
     */
    matchIp6Address: string;
    /**
     * Match next hop IPv6 address passed by access-list6 or prefix-list6.
     */
    matchIp6Nexthop: string;
    /**
     * Match IP address permitted by access-list or prefix-list.
     */
    matchIpAddress: string;
    /**
     * Match next hop IP address passed by access-list or prefix-list.
     */
    matchIpNexthop: string;
    /**
     * Match metric for redistribute routes.
     */
    matchMetric: number;
    /**
     * Match BGP origin code.
     */
    matchOrigin: string;
    /**
     * Match route type.
     */
    matchRouteType: string;
    /**
     * Match tag.
     */
    matchTag: number;
    /**
     * Match VRF ID.
     */
    matchVrf: number;
    /**
     * BGP aggregator AS.
     */
    setAggregatorAs: number;
    /**
     * BGP aggregator IP.
     */
    setAggregatorIp: string;
    /**
     * Specify preferred action of set-aspath.
     */
    setAspathAction: string;
    /**
     * Prepend BGP AS path attribute. The structure of `setAspath` block is documented below.
     */
    setAspaths: outputs.GetRouterRouteMapRuleSetAspath[];
    /**
     * Enable/disable BGP atomic aggregate attribute.
     */
    setAtomicAggregate: string;
    /**
     * BGP community attribute. The structure of `setCommunity` block is documented below.
     */
    setCommunities: outputs.GetRouterRouteMapRuleSetCommunity[];
    /**
     * Enable/disable adding set-community to existing community.
     */
    setCommunityAdditive: string;
    /**
     * Delete communities matching community list.
     */
    setCommunityDelete: string;
    /**
     * Maximum duration to suppress a route (1 - 255 min, 0 = unset).
     */
    setDampeningMaxSuppress: number;
    /**
     * Reachability half-life time for the penalty (1 - 45 min, 0 = unset).
     */
    setDampeningReachabilityHalfLife: number;
    /**
     * Value to start reusing a route (1 - 20000, 0 = unset).
     */
    setDampeningReuse: number;
    /**
     * Value to start suppressing a route (1 - 20000, 0 = unset).
     */
    setDampeningSuppress: number;
    /**
     * Unreachability Half-life time for the penalty (1 - 45 min, 0 = unset)
     */
    setDampeningUnreachabilityHalfLife: number;
    /**
     * Route Target extended community. The structure of `setExtcommunityRt` block is documented below.
     */
    setExtcommunityRts: outputs.GetRouterRouteMapRuleSetExtcommunityRt[];
    /**
     * Site-of-Origin extended community. The structure of `setExtcommunitySoo` block is documented below.
     */
    setExtcommunitySoos: outputs.GetRouterRouteMapRuleSetExtcommunitySoo[];
    /**
     * BGP flags value (0 - 65535)
     */
    setFlags: number;
    /**
     * IPv6 global address of next hop.
     */
    setIp6Nexthop: string;
    /**
     * IPv6 local address of next hop.
     */
    setIp6NexthopLocal: string;
    /**
     * IP address of next hop.
     */
    setIpNexthop: string;
    /**
     * BGP local preference path attribute.
     */
    setLocalPreference: number;
    /**
     * Metric value.
     */
    setMetric: number;
    /**
     * Metric type.
     */
    setMetricType: string;
    /**
     * BGP origin code.
     */
    setOrigin: string;
    /**
     * BGP originator ID attribute.
     */
    setOriginatorId: string;
    /**
     * Route tag for routing table.
     */
    setRouteTag: number;
    /**
     * Tag value.
     */
    setTag: number;
    /**
     * BGP weight for routing table.
     */
    setWeight: number;
}

export interface GetRouterRouteMapRuleSetAspath {
    /**
     * AS number (0 - 42949672). NOTE: Use quotes for repeating numbers, e.g.: "1 1 2"
     */
    as: string;
}

export interface GetRouterRouteMapRuleSetCommunity {
    /**
     * AA:NN
     */
    community: string;
}

export interface GetRouterRouteMapRuleSetExtcommunityRt {
    /**
     * AA:NN
     */
    community: string;
}

export interface GetRouterRouteMapRuleSetExtcommunitySoo {
    /**
     * AA:NN
     */
    community: string;
}

export interface GetRouterStatic6SdwanZone {
    /**
     * SD-WAN zone name.
     */
    name: string;
}

export interface GetRouterStaticSdwanZone {
    /**
     * SD-WAN zone name.
     */
    name: string;
}

export interface GetRouterbgpNeighborConditionalAdvertise {
    /**
     * Name of advertising route map.
     */
    advertiseRoutemap: string;
    /**
     * Name of condition route map.
     */
    conditionRoutemap: string;
    /**
     * Type of condition.
     */
    conditionType: string;
}

export interface GetRouterbgpNeighborConditionalAdvertise6 {
    /**
     * Name of advertising route map.
     */
    advertiseRoutemap: string;
    /**
     * Name of condition route map.
     */
    conditionRoutemap: string;
    /**
     * Type of condition.
     */
    conditionType: string;
}

export interface GetSystemAccprofileFwgrpPermission {
    /**
     * Address Configuration.
     */
    address: string;
    /**
     * Other Firewall Configuration.
     */
    others: string;
    /**
     * Policy Configuration.
     */
    policy: string;
    /**
     * Schedule Configuration.
     */
    schedule: string;
    /**
     * Service Configuration.
     */
    service: string;
}

export interface GetSystemAccprofileLoggrpPermission {
    /**
     * Log & Report configuration.
     */
    config: string;
    /**
     * Log & Report Data Access.
     */
    dataAccess: string;
    /**
     * Log & Report Report Access.
     */
    reportAccess: string;
    /**
     * Log & Report Threat Weight.
     */
    threatWeight: string;
}

export interface GetSystemAccprofileNetgrpPermission {
    /**
     * System Configuration.
     */
    cfg: string;
    /**
     * Packet Capture Configuration.
     */
    packetCapture: string;
    /**
     * Router Configuration.
     */
    routeCfg: string;
}

export interface GetSystemAccprofileSysgrpPermission {
    /**
     * Administrator Users.
     */
    admin: string;
    /**
     * System Configuration.
     */
    cfg: string;
    /**
     * Maintenance.
     */
    mnt: string;
    /**
     * FortiGuard Updates.
     */
    upd: string;
}

export interface GetSystemAccprofileUtmgrpPermission {
    /**
     * Antivirus profiles and settings.
     */
    antivirus: string;
    /**
     * Application Control profiles and settings.
     */
    applicationControl: string;
    /**
     * DLP profiles and settings.
     */
    dataLossPrevention: string;
    /**
     * DNS Filter profiles and settings.
     */
    dnsfilter: string;
    /**
     * AntiSpam filter and settings.
     */
    emailfilter: string;
    /**
     * FortiClient Profiles.
     */
    endpointControl: string;
    /**
     * File-filter profiles and settings.
     */
    fileFilter: string;
    /**
     * ICAP profiles and settings.
     */
    icap: string;
    /**
     * IPS profiles and settings.
     */
    ips: string;
    /**
     * AntiSpam filter and settings.
     */
    spamfilter: string;
    /**
     * VoIP profiles and settings.
     */
    voip: string;
    /**
     * Web Application Firewall profiles and settings.
     */
    waf: string;
    /**
     * Web Filter profiles and settings.
     */
    webfilter: string;
}

export interface GetSystemAdminGuestUsergroup {
    /**
     * Specify the name of the desired system admin.
     */
    name: string;
}

export interface GetSystemAdminGuiDashboard {
    /**
     * Number of columns.
     */
    columns: number;
    /**
     * Select menu ID.
     */
    id: number;
    /**
     * Layout type.
     */
    layoutType: string;
    /**
     * Specify the name of the desired system admin.
     */
    name: string;
    /**
     * Dashboard scope.
     */
    scope: string;
    /**
     * Dashboard widgets. The structure of `widget` block is documented below.
     */
    widgets: outputs.GetSystemAdminGuiDashboardWidget[];
}

export interface GetSystemAdminGuiDashboardWidget {
    /**
     * Fabric device to monitor.
     */
    fabricDevice: string;
    /**
     * FortiView filters. The structure of `filters` block is documented below.
     */
    filters: outputs.GetSystemAdminGuiDashboardWidgetFilter[];
    /**
     * Height.
     */
    height: number;
    /**
     * Select menu ID.
     */
    id: number;
    /**
     * Security Audit Rating industry.
     */
    industry: string;
    /**
     * Interface to monitor.
     */
    interface: string;
    /**
     * Security Audit Rating region.
     */
    region: string;
    /**
     * Field to aggregate the data by.
     */
    reportBy: string;
    /**
     * Field to sort the data by.
     */
    sortBy: string;
    /**
     * Timeframe period of reported data.
     */
    timeframe: string;
    /**
     * Widget title.
     */
    title: string;
    /**
     * Widget type.
     */
    type: string;
    /**
     * Visualization to use.
     */
    visualization: string;
    /**
     * Width.
     */
    width: number;
    /**
     * X position.
     */
    xPos: number;
    /**
     * Y position.
     */
    yPos: number;
}

export interface GetSystemAdminGuiDashboardWidgetFilter {
    /**
     * Select menu ID.
     */
    id: number;
    /**
     * Filter key.
     */
    key: string;
    /**
     * Filter value.
     */
    value: string;
}

export interface GetSystemAdminGuiGlobalMenuFavorite {
    /**
     * Select menu ID.
     */
    id: string;
}

export interface GetSystemAdminGuiNewFeatureAcknowledge {
    /**
     * Select menu ID.
     */
    id: string;
}

export interface GetSystemAdminGuiVdomMenuFavorite {
    /**
     * Select menu ID.
     */
    id: string;
}

export interface GetSystemAdminLoginTime {
    /**
     * Last failed login time.
     */
    lastFailedLogin: string;
    /**
     * Last successful login time.
     */
    lastLogin: string;
    /**
     * User name.
     */
    usrName: string;
}

export interface GetSystemAdminVdom {
    /**
     * Specify the name of the desired system admin.
     */
    name: string;
}

export interface GetSystemApiUserTrusthost {
    /**
     * Table ID.
     */
    id: number;
    /**
     * IPv4 trusted host address.
     */
    ipv4Trusthost: string;
    /**
     * IPv6 trusted host address.
     */
    ipv6Trusthost: string;
    /**
     * Trusthost type.
     */
    type: string;
}

export interface GetSystemApiUserVdom {
    /**
     * Specify the name of the desired system apiuser.
     */
    name: string;
}

export interface GetSystemAutomationActionEmailTo {
    /**
     * Specify the name of the desired system automationaction.
     */
    name: string;
}

export interface GetSystemAutomationActionHeader {
    /**
     * Request header.
     */
    header: string;
}

export interface GetSystemAutomationActionSdnConnector {
    /**
     * Specify the name of the desired system automationaction.
     */
    name: string;
}

export interface GetSystemAutomationDestinationDestination {
    /**
     * Specify the name of the desired system automationdestination.
     */
    name: string;
}

export interface GetSystemAutomationTriggerField {
    /**
     * Entry ID.
     */
    id: number;
    /**
     * Specify the name of the desired system automationtrigger.
     */
    name: string;
    /**
     * Value.
     */
    value: string;
}

export interface GetSystemCentralManagementServerList {
    /**
     * Indicate whether the FortiGate communicates with the override server using an IPv4 address, an IPv6 address or a FQDN.
     */
    addrType: string;
    /**
     * FQDN address of override server.
     */
    fqdn: string;
    /**
     * ID.
     */
    id: number;
    /**
     * IPv4 address of override server.
     */
    serverAddress: string;
    /**
     * IPv6 address of override server.
     */
    serverAddress6: string;
    /**
     * FortiGuard service type.
     */
    serverType: string;
}

export interface GetSystemClusterSyncDownIntfsBeforeSessSync {
    /**
     * Interface name.
     */
    name: string;
}

export interface GetSystemClusterSyncSessionSyncFilter {
    /**
     * Only sessions using these custom services are synchronized. Use source and destination port ranges to define these custome services. The structure of `customService` block is documented below.
     */
    customServices: outputs.GetSystemClusterSyncSessionSyncFilterCustomService[];
    /**
     * Only sessions to this IPv4 address are synchronized. You can only enter one address. To synchronize sessions for multiple destination addresses, add multiple filters.
     */
    dstaddr: string;
    /**
     * Only sessions to this IPv6 address are synchronized. You can only enter one address. To synchronize sessions for multiple destination addresses, add multiple filters.
     */
    dstaddr6: string;
    /**
     * Only sessions to this interface are synchronized. You can only enter one interface name. To synchronize sessions to multiple destination interfaces, add multiple filters.
     */
    dstintf: string;
    /**
     * Only sessions from this IPv4 address are synchronized. You can only enter one address. To synchronize sessions from multiple source addresses, add multiple filters.
     */
    srcaddr: string;
    /**
     * Only sessions from this IPv6 address are synchronized. You can only enter one address. To synchronize sessions from multiple source addresses, add multiple filters.
     */
    srcaddr6: string;
    /**
     * Only sessions from this interface are synchronized. You can only enter one interface name. To synchronize sessions for multiple source interfaces, add multiple filters.
     */
    srcintf: string;
}

export interface GetSystemClusterSyncSessionSyncFilterCustomService {
    /**
     * Custom service destination port range.
     */
    dstPortRange: string;
    /**
     * Custom service ID.
     */
    id: number;
    /**
     * Custom service source port range.
     */
    srcPortRange: string;
}

export interface GetSystemClusterSyncSyncvd {
    /**
     * Interface name.
     */
    name: string;
}

export interface GetSystemCsfFabricConnector {
    /**
     * Override access profile.
     */
    accprofile: string;
    /**
     * Enable/disable downstream device write access to configuration.
     */
    configurationWriteAccess: string;
    /**
     * Serial.
     */
    serial: string;
}

export interface GetSystemCsfFabricDevice {
    /**
     * Device access token.
     */
    accessToken: string;
    /**
     * Device IP.
     */
    deviceIp: string;
    /**
     * Device type.
     */
    deviceType: string;
    /**
     * HTTPS port for fabric device.
     */
    httpsPort: number;
    /**
     * Device login name.
     */
    login: string;
    /**
     * Device name.
     */
    name: string;
    /**
     * Device login password.
     */
    password: string;
}

export interface GetSystemCsfTrustedList {
    /**
     * Security fabric authorization action.
     */
    action: string;
    /**
     * Authorization type.
     */
    authorizationType: string;
    /**
     * Certificate.
     */
    certificate: string;
    /**
     * Trust authorizations by this node's administrator.
     */
    downstreamAuthorization: string;
    /**
     * HA members.
     */
    haMembers: string;
    /**
     * Device name.
     */
    name: string;
    /**
     * Serial.
     */
    serial: string;
}

export interface GetSystemDdnsDdnsServerAddr {
    /**
     * IP address or FQDN of the server.
     */
    addr: string;
}

export interface GetSystemDdnsMonitorInterface {
    /**
     * Interface name.
     */
    interfaceName: string;
}

export interface GetSystemDhcpServerExcludeRange {
    /**
     * End of IP range.
     */
    endIp: string;
    /**
     * ID.
     */
    id: number;
    /**
     * Start of IP range.
     */
    startIp: string;
}

export interface GetSystemDhcpServerIpRange {
    /**
     * End of IP range.
     */
    endIp: string;
    /**
     * ID.
     */
    id: number;
    /**
     * Start of IP range.
     */
    startIp: string;
}

export interface GetSystemDhcpServerOption {
    /**
     * DHCP option code.
     */
    code: number;
    /**
     * ID.
     */
    id: number;
    /**
     * IP address to be reserved for the MAC address.
     */
    ip: string;
    /**
     * DHCP reserved-address type.
     */
    type: string;
    /**
     * DHCP option value.
     */
    value: string;
}

export interface GetSystemDhcpServerReservedAddress {
    /**
     * Options for the DHCP server to configure the client with the reserved MAC address.
     */
    action: string;
    /**
     * Option 82 circuit-ID of the client that will get the reserved IP address.
     */
    circuitId: string;
    /**
     * DHCP option type.
     */
    circuitIdType: string;
    /**
     * Description.
     */
    description: string;
    /**
     * ID.
     */
    id: number;
    /**
     * IP address to be reserved for the MAC address.
     */
    ip: string;
    /**
     * MAC address of the client that will get the reserved IP address.
     */
    mac: string;
    /**
     * Option 82 remote-ID of the client that will get the reserved IP address.
     */
    remoteId: string;
    /**
     * DHCP option type.
     */
    remoteIdType: string;
    /**
     * DHCP reserved-address type.
     */
    type: string;
}

export interface GetSystemDhcpServerTftpServer {
    /**
     * TFTP server.
     */
    tftpServer: string;
}

export interface GetSystemDhcpServerVciString {
    /**
     * VCI strings.
     */
    vciString: string;
}

export interface GetSystemDnsDatabaseDnsEntry {
    /**
     * Canonical name of the host.
     */
    canonicalName: string;
    /**
     * Name of the host.
     */
    hostname: string;
    /**
     * DNS entry ID.
     */
    id: number;
    /**
     * IPv4 address of the host.
     */
    ip: string;
    /**
     * IPv6 address of the host.
     */
    ipv6: string;
    /**
     * DNS entry preference, 0 is the highest preference (0 - 65535, default = 10)
     */
    preference: number;
    /**
     * Enable/disable resource record status.
     */
    status: string;
    /**
     * Time-to-live for this entry (0 to 2147483647 sec, default = 0).
     */
    ttl: number;
    /**
     * Resource record type.
     */
    type: string;
}

export interface GetSystemDnsDomain {
    /**
     * DNS search domain list separated by space (maximum 8 domains)
     */
    domain: string;
}

export interface GetSystemDnsServerHostname {
    /**
     * DNS server host name list separated by space (maximum 4 domains).
     */
    hostname: string;
}

export interface GetSystemHaHaMgmtInterface {
    /**
     * Default route destination for reserved HA management interface.
     */
    dst: string;
    /**
     * Default route gateway for reserved HA management interface.
     */
    gateway: string;
    /**
     * Default IPv6 gateway for reserved HA management interface.
     */
    gateway6: string;
    /**
     * Table ID.
     */
    id: number;
    /**
     * Interface to reserve for HA management.
     */
    interface: string;
}

export interface GetSystemHaSecondaryVcluster {
    /**
     * Interfaces to check for port monitoring (or link failure).
     */
    monitor: string;
    /**
     * Enable and increase the priority of the unit that should always be primary (master).
     */
    override: string;
    /**
     * Delay negotiating if override is enabled (0 - 3600 sec). Reduces how often the cluster negotiates.
     */
    overrideWaitTime: number;
    /**
     * Remote IP monitoring failover threshold (0 - 50).
     */
    pingserverFailoverThreshold: number;
    /**
     * Interfaces to check for remote IP monitoring.
     */
    pingserverMonitorInterface: string;
    /**
     * Enable to force the cluster to negotiate after a remote IP monitoring failover.
     */
    pingserverSecondaryForceReset: string;
    /**
     * Enable to force the cluster to negotiate after a remote IP monitoring failover.
     */
    pingserverSlaveForceReset: string;
    /**
     * Increase the priority to select the primary unit (0 - 255).
     */
    priority: number;
    /**
     * Cluster ID.
     */
    vclusterId: number;
    /**
     * VDOMs in virtual cluster 2.
     */
    vdom: string;
}

export interface GetSystemHaUnicastPeer {
    /**
     * Table ID.
     */
    id: number;
    /**
     * Unicast peer IP.
     */
    peerIp: string;
}

export interface GetSystemInterfaceClientOption {
    /**
     * DHCP client option code.
     */
    code: number;
    /**
     * ID.
     */
    id: number;
    /**
     * Secondary IP address of the interface.
     */
    ip: string;
    /**
     * DHCP client option type.
     */
    type: string;
    /**
     * DHCP client option value.
     */
    value: string;
}

export interface GetSystemInterfaceDhcpSnoopingServerList {
    /**
     * Specify the name of the desired system interface.
     */
    name: string;
    /**
     * IP address for DHCP server.
     */
    serverIp: string;
}

export interface GetSystemInterfaceFailAlertInterface {
    /**
     * Specify the name of the desired system interface.
     */
    name: string;
}

export interface GetSystemInterfaceIpv6 {
    /**
     * Enable/disable address auto config.
     */
    autoconf: string;
    /**
     * CLI IPv6 connection status.
     */
    cliConn6Status: number;
    /**
     * DHCPv6 client options.
     */
    dhcp6ClientOptions: string;
    /**
     * DHCPv6 IA-PD list The structure of `dhcp6IapdList` block is documented below.
     */
    dhcp6IapdLists: outputs.GetSystemInterfaceIpv6Dhcp6IapdList[];
    /**
     * Enable/disable DHCPv6 information request.
     */
    dhcp6InformationRequest: string;
    /**
     * Enable/disable DHCPv6 prefix delegation.
     */
    dhcp6PrefixDelegation: string;
    /**
     * DHCPv6 prefix that will be used as a hint to the upstream DHCPv6 server.
     */
    dhcp6PrefixHint: string;
    /**
     * DHCPv6 prefix hint preferred life time (sec), 0 means unlimited lease time.
     */
    dhcp6PrefixHintPlt: number;
    /**
     * DHCPv6 prefix hint valid life time (sec).
     */
    dhcp6PrefixHintVlt: number;
    /**
     * DHCPv6 relay IP address.
     */
    dhcp6RelayIp: string;
    /**
     * Enable/disable DHCPv6 relay.
     */
    dhcp6RelayService: string;
    /**
     * DHCPv6 relay type.
     */
    dhcp6RelayType: string;
    /**
     * Enable/disable sending of ICMPv6 redirects.
     */
    icmp6SendRedirect: string;
    /**
     * IPv6 interface identifier.
     */
    interfaceIdentifier: string;
    /**
     * Primary IPv6 address prefix, syntax: xxxx:xxxx:xxxx:xxxx:xxxx:xxxx:xxxx:xxxx/xxx
     */
    ip6Address: string;
    /**
     * Allow management access to the interface.
     */
    ip6Allowaccess: string;
    /**
     * Default life (sec).
     */
    ip6DefaultLife: number;
    /**
     * IAID of obtained delegated-prefix from the upstream interface.
     */
    ip6DelegatedPrefixIaid: number;
    /**
     * Advertised IPv6 delegated prefix list. The structure of `ip6DelegatedPrefixList` block is documented below.
     */
    ip6DelegatedPrefixLists: outputs.GetSystemInterfaceIpv6Ip6DelegatedPrefixList[];
    /**
     * Enable/disable using the DNS server acquired by DHCP.
     */
    ip6DnsServerOverride: string;
    /**
     * Extra IPv6 address prefixes of interface. The structure of `ip6ExtraAddr` block is documented below.
     */
    ip6ExtraAddrs: outputs.GetSystemInterfaceIpv6Ip6ExtraAddr[];
    /**
     * Hop limit (0 means unspecified).
     */
    ip6HopLimit: number;
    /**
     * IPv6 link MTU.
     */
    ip6LinkMtu: number;
    /**
     * Enable/disable the managed flag.
     */
    ip6ManageFlag: string;
    /**
     * IPv6 maximum interval (4 to 1800 sec).
     */
    ip6MaxInterval: number;
    /**
     * IPv6 minimum interval (3 to 1350 sec).
     */
    ip6MinInterval: number;
    /**
     * Addressing mode (static, DHCP, delegated).
     */
    ip6Mode: string;
    /**
     * Enable/disable the other IPv6 flag.
     */
    ip6OtherFlag: string;
    /**
     * Advertised prefix list. The structure of `ip6PrefixList` block is documented below.
     */
    ip6PrefixLists: outputs.GetSystemInterfaceIpv6Ip6PrefixList[];
    /**
     * Assigning a prefix from DHCP or RA.
     */
    ip6PrefixMode: string;
    /**
     * IPv6 reachable time (milliseconds; 0 means unspecified).
     */
    ip6ReachableTime: number;
    /**
     * IPv6 retransmit time (milliseconds; 0 means unspecified).
     */
    ip6RetransTime: number;
    /**
     * Enable/disable sending advertisements about the interface.
     */
    ip6SendAdv: string;
    /**
     * Subnet to routing prefix, syntax: xxxx:xxxx:xxxx:xxxx:xxxx:xxxx:xxxx:xxxx/xxx
     */
    ip6Subnet: string;
    /**
     * Interface name providing delegated information.
     */
    ip6UpstreamInterface: string;
    /**
     * Neighbor discovery certificate.
     */
    ndCert: string;
    /**
     * Neighbor discovery CGA modifier.
     */
    ndCgaModifier: string;
    /**
     * Neighbor discovery mode.
     */
    ndMode: string;
    /**
     * Neighbor discovery security level (0 - 7; 0 = least secure, default = 0).
     */
    ndSecurityLevel: number;
    /**
     * Neighbor discovery timestamp delta value (1 - 3600 sec; default = 300).
     */
    ndTimestampDelta: number;
    /**
     * Neighbor discovery timestamp fuzz factor (1 - 60 sec; default = 1).
     */
    ndTimestampFuzz: number;
    /**
     * Enable/disable sending link MTU in RA packet.
     */
    raSendMtu: string;
    /**
     * Enable/disable unique auto config address.
     */
    uniqueAutoconfAddr: string;
    /**
     * Link-local IPv6 address of virtual router.
     */
    vrip6LinkLocal: string;
    /**
     * IPv6 VRRP configuration. The structure of `vrrp6` block is documented below.
     */
    vrrp6s: outputs.GetSystemInterfaceIpv6Vrrp6[];
    /**
     * Enable/disable virtual MAC for VRRP.
     */
    vrrpVirtualMac6: string;
}

export interface GetSystemInterfaceIpv6Dhcp6IapdList {
    /**
     * Identity association identifier.
     */
    iaid: number;
    /**
     * DHCPv6 prefix that will be used as a hint to the upstream DHCPv6 server.
     */
    prefixHint: string;
    /**
     * DHCPv6 prefix hint preferred life time (sec), 0 means unlimited lease time.
     */
    prefixHintPlt: number;
    /**
     * DHCPv6 prefix hint valid life time (sec).
     */
    prefixHintVlt: number;
}

export interface GetSystemInterfaceIpv6Ip6DelegatedPrefixList {
    /**
     * Enable/disable the autonomous flag.
     */
    autonomousFlag: string;
    /**
     * IAID of obtained delegated-prefix from the upstream interface.
     */
    delegatedPrefixIaid: number;
    /**
     * Enable/disable the onlink flag.
     */
    onlinkFlag: string;
    /**
     * Prefix ID.
     */
    prefixId: number;
    /**
     * Recursive DNS server option.
     */
    rdnss: string;
    /**
     * Recursive DNS service option.
     */
    rdnssService: string;
    /**
     * Add subnet ID to routing prefix.
     */
    subnet: string;
    /**
     * Name of the interface that provides delegated information.
     */
    upstreamInterface: string;
}

export interface GetSystemInterfaceIpv6Ip6ExtraAddr {
    /**
     * IPv6 prefix.
     */
    prefix: string;
}

export interface GetSystemInterfaceIpv6Ip6PrefixList {
    /**
     * Enable/disable the autonomous flag.
     */
    autonomousFlag: string;
    /**
     * DNS search list option. The structure of `dnssl` block is documented below.
     */
    dnssls: outputs.GetSystemInterfaceIpv6Ip6PrefixListDnssl[];
    /**
     * Enable/disable the onlink flag.
     */
    onlinkFlag: string;
    /**
     * Preferred life time (sec).
     */
    preferredLifeTime: number;
    /**
     * IPv6 prefix.
     */
    prefix: string;
    /**
     * Recursive DNS server option.
     */
    rdnss: string;
    /**
     * Valid life time (sec).
     */
    validLifeTime: number;
}

export interface GetSystemInterfaceIpv6Ip6PrefixListDnssl {
    /**
     * Domain name.
     */
    domain: string;
}

export interface GetSystemInterfaceIpv6Vrrp6 {
    /**
     * Enable/disable accept mode.
     */
    acceptMode: string;
    /**
     * Advertisement interval (1 - 255 seconds).
     */
    advInterval: number;
    /**
     * Enable/disable preempt mode.
     */
    preempt: string;
    /**
     * Priority of the virtual router (1 - 255).
     */
    priority: number;
    /**
     * Startup time (1 - 255 seconds).
     */
    startTime: number;
    /**
     * Enable/disable VRRP.
     */
    status: string;
    /**
     * Monitor the route to this destination.
     */
    vrdst6: string;
    /**
     * VRRP group ID (1 - 65535).
     */
    vrgrp: number;
    /**
     * Virtual router identifier (1 - 255).
     */
    vrid: number;
    /**
     * IPv6 address of the virtual router.
     */
    vrip6: string;
}

export interface GetSystemInterfaceManagedDevice {
    /**
     * Specify the name of the desired system interface.
     */
    name: string;
}

export interface GetSystemInterfaceMember {
    /**
     * Physical interface name.
     */
    interfaceName: string;
}

export interface GetSystemInterfaceSecondaryip {
    /**
     * Management access settings for the secondary IP address.
     */
    allowaccess: string;
    /**
     * Protocols used to detect the server.
     */
    detectprotocol: string;
    /**
     * Gateway's ping server for this IP.
     */
    detectserver: string;
    /**
     * Enable/disable detect gateway alive for first.
     */
    gwdetect: string;
    /**
     * HA election priority for the PING server.
     */
    haPriority: number;
    /**
     * ID.
     */
    id: number;
    /**
     * Secondary IP address of the interface.
     */
    ip: string;
    /**
     * PING server status.
     */
    pingServStatus: number;
}

export interface GetSystemInterfaceSecurityGroup {
    /**
     * Specify the name of the desired system interface.
     */
    name: string;
}

export interface GetSystemInterfaceTagging {
    /**
     * Tag category.
     */
    category: string;
    /**
     * Specify the name of the desired system interface.
     */
    name: string;
    /**
     * Tags. The structure of `tags` block is documented below.
     */
    tags: outputs.GetSystemInterfaceTaggingTag[];
}

export interface GetSystemInterfaceTaggingTag {
    /**
     * Specify the name of the desired system interface.
     */
    name: string;
}

export interface GetSystemInterfaceVrrp {
    /**
     * Enable/disable accept mode.
     */
    acceptMode: string;
    /**
     * Advertisement interval (1 - 255 seconds).
     */
    advInterval: number;
    /**
     * Enable/disable ignoring of default route when checking destination.
     */
    ignoreDefaultRoute: string;
    /**
     * Enable/disable preempt mode.
     */
    preempt: string;
    /**
     * Priority of the virtual router (1 - 255).
     */
    priority: number;
    /**
     * VRRP Proxy ARP configuration. The structure of `proxyArp` block is documented below.
     */
    proxyArps: outputs.GetSystemInterfaceVrrpProxyArp[];
    /**
     * Startup time (1 - 255 seconds).
     */
    startTime: number;
    /**
     * Enable/disable VRRP.
     */
    status: string;
    /**
     * VRRP version.
     */
    version: string;
    /**
     * Monitor the route to this destination.
     */
    vrdst: string;
    /**
     * Priority of the virtual router when the virtual router destination becomes unreachable (0 - 254).
     */
    vrdstPriority: number;
    /**
     * VRRP group ID (1 - 65535).
     */
    vrgrp: number;
    /**
     * Virtual router identifier (1 - 255).
     */
    vrid: number;
    /**
     * IP address of the virtual router.
     */
    vrip: string;
}

export interface GetSystemInterfaceVrrpProxyArp {
    /**
     * ID.
     */
    id: number;
    /**
     * Secondary IP address of the interface.
     */
    ip: string;
}

export interface GetSystemLinkMonitorRoute {
    /**
     * IP and netmask (x.x.x.x/y).
     */
    subnet: string;
}

export interface GetSystemLinkMonitorServer {
    /**
     * Server address.
     */
    address: string;
}

export interface GetSystemLinkMonitorServerList {
    /**
     * IP address of the server to be monitored.
     */
    dst: string;
    /**
     * Server ID.
     */
    id: number;
    /**
     * Port number of the traffic to be used to monitor the server.
     */
    port: number;
    /**
     * Protocols used to monitor the server.
     */
    protocol: string;
    /**
     * Weight of the monitor to this dst (0 - 255).
     */
    weight: number;
}

export interface GetSystemLldpNetworkPolicyGuest {
    /**
     * Differentiated Services Code Point (DSCP) value to advertise.
     */
    dscp: number;
    /**
     * 802.1P CoS/PCP to advertise (0 - 7; from lowest to highest priority).
     */
    priority: number;
    /**
     * Enable/disable advertising this policy.
     */
    status: string;
    /**
     * Advertise tagged or untagged traffic.
     */
    tag: string;
    /**
     * 802.1Q VLAN ID to advertise (1 - 4094).
     */
    vlan: number;
}

export interface GetSystemLldpNetworkPolicyGuestVoiceSignaling {
    /**
     * Differentiated Services Code Point (DSCP) value to advertise.
     */
    dscp: number;
    /**
     * 802.1P CoS/PCP to advertise (0 - 7; from lowest to highest priority).
     */
    priority: number;
    /**
     * Enable/disable advertising this policy.
     */
    status: string;
    /**
     * Advertise tagged or untagged traffic.
     */
    tag: string;
    /**
     * 802.1Q VLAN ID to advertise (1 - 4094).
     */
    vlan: number;
}

export interface GetSystemLldpNetworkPolicySoftphone {
    /**
     * Differentiated Services Code Point (DSCP) value to advertise.
     */
    dscp: number;
    /**
     * 802.1P CoS/PCP to advertise (0 - 7; from lowest to highest priority).
     */
    priority: number;
    /**
     * Enable/disable advertising this policy.
     */
    status: string;
    /**
     * Advertise tagged or untagged traffic.
     */
    tag: string;
    /**
     * 802.1Q VLAN ID to advertise (1 - 4094).
     */
    vlan: number;
}

export interface GetSystemLldpNetworkPolicyStreamingVideo {
    /**
     * Differentiated Services Code Point (DSCP) value to advertise.
     */
    dscp: number;
    /**
     * 802.1P CoS/PCP to advertise (0 - 7; from lowest to highest priority).
     */
    priority: number;
    /**
     * Enable/disable advertising this policy.
     */
    status: string;
    /**
     * Advertise tagged or untagged traffic.
     */
    tag: string;
    /**
     * 802.1Q VLAN ID to advertise (1 - 4094).
     */
    vlan: number;
}

export interface GetSystemLldpNetworkPolicyVideoConferencing {
    /**
     * Differentiated Services Code Point (DSCP) value to advertise.
     */
    dscp: number;
    /**
     * 802.1P CoS/PCP to advertise (0 - 7; from lowest to highest priority).
     */
    priority: number;
    /**
     * Enable/disable advertising this policy.
     */
    status: string;
    /**
     * Advertise tagged or untagged traffic.
     */
    tag: string;
    /**
     * 802.1Q VLAN ID to advertise (1 - 4094).
     */
    vlan: number;
}

export interface GetSystemLldpNetworkPolicyVideoSignaling {
    /**
     * Differentiated Services Code Point (DSCP) value to advertise.
     */
    dscp: number;
    /**
     * 802.1P CoS/PCP to advertise (0 - 7; from lowest to highest priority).
     */
    priority: number;
    /**
     * Enable/disable advertising this policy.
     */
    status: string;
    /**
     * Advertise tagged or untagged traffic.
     */
    tag: string;
    /**
     * 802.1Q VLAN ID to advertise (1 - 4094).
     */
    vlan: number;
}

export interface GetSystemLldpNetworkPolicyVoice {
    /**
     * Differentiated Services Code Point (DSCP) value to advertise.
     */
    dscp: number;
    /**
     * 802.1P CoS/PCP to advertise (0 - 7; from lowest to highest priority).
     */
    priority: number;
    /**
     * Enable/disable advertising this policy.
     */
    status: string;
    /**
     * Advertise tagged or untagged traffic.
     */
    tag: string;
    /**
     * 802.1Q VLAN ID to advertise (1 - 4094).
     */
    vlan: number;
}

export interface GetSystemLldpNetworkPolicyVoiceSignaling {
    /**
     * Differentiated Services Code Point (DSCP) value to advertise.
     */
    dscp: number;
    /**
     * 802.1P CoS/PCP to advertise (0 - 7; from lowest to highest priority).
     */
    priority: number;
    /**
     * Enable/disable advertising this policy.
     */
    status: string;
    /**
     * Advertise tagged or untagged traffic.
     */
    tag: string;
    /**
     * 802.1Q VLAN ID to advertise (1 - 4094).
     */
    vlan: number;
}

export interface GetSystemMobileTunnelNetwork {
    /**
     * Network entry ID.
     */
    id: number;
    /**
     * Select the associated interface name from available options.
     */
    interface: string;
    /**
     * Class IP and Netmask with correction (Format:xxx.xxx.xxx.xxx xxx.xxx.xxx.xxx or xxx.xxx.xxx.xxx/x).
     */
    prefix: string;
}

export interface GetSystemNat64SecondaryPrefix {
    /**
     * NAT64 prefix name.
     */
    name: string;
    /**
     * NAT64 prefix.
     */
    nat64Prefix: string;
}

export interface GetSystemNdProxyMember {
    /**
     * Interface name.
     */
    interfaceName: string;
}

export interface GetSystemNtpInterface {
    /**
     * Interface name.
     */
    interfaceName: string;
}

export interface GetSystemNtpNtpserver {
    /**
     * Enable/disable MD5/SHA1 authentication.
     */
    authentication: string;
    /**
     * NTP server ID.
     */
    id: number;
    /**
     * Specify outgoing interface to reach server.
     */
    interface: string;
    /**
     * Specify how to select outgoing interface to reach server.
     */
    interfaceSelectMethod: string;
    /**
     * Key for MD5/SHA1 authentication.
     */
    key: string;
    /**
     * Key ID for authentication.
     */
    keyId: number;
    /**
     * Enable to use NTPv3 instead of NTPv4.
     */
    ntpv3: string;
    /**
     * IP address or hostname of the NTP Server.
     */
    server: string;
}

export interface GetSystemObjectTaggingTag {
    /**
     * Tag name.
     */
    name: string;
}

export interface GetSystemReplacemsgGroupAdmin {
    /**
     * Message string.
     */
    buffer: string;
    /**
     * Format flag.
     */
    format: string;
    /**
     * Header flag.
     */
    header: string;
    /**
     * Message type.
     */
    msgType: string;
}

export interface GetSystemReplacemsgGroupAlertmail {
    /**
     * Message string.
     */
    buffer: string;
    /**
     * Format flag.
     */
    format: string;
    /**
     * Header flag.
     */
    header: string;
    /**
     * Message type.
     */
    msgType: string;
}

export interface GetSystemReplacemsgGroupAuth {
    /**
     * Message string.
     */
    buffer: string;
    /**
     * Format flag.
     */
    format: string;
    /**
     * Header flag.
     */
    header: string;
    /**
     * Message type.
     */
    msgType: string;
}

export interface GetSystemReplacemsgGroupAutomation {
    /**
     * Message string.
     */
    buffer: string;
    /**
     * Format flag.
     */
    format: string;
    /**
     * Header flag.
     */
    header: string;
    /**
     * Message type.
     */
    msgType: string;
}

export interface GetSystemReplacemsgGroupCustomMessage {
    /**
     * Message string.
     */
    buffer: string;
    /**
     * Format flag.
     */
    format: string;
    /**
     * Header flag.
     */
    header: string;
    /**
     * Message type.
     */
    msgType: string;
}

export interface GetSystemReplacemsgGroupDeviceDetectionPortal {
    /**
     * Message string.
     */
    buffer: string;
    /**
     * Format flag.
     */
    format: string;
    /**
     * Header flag.
     */
    header: string;
    /**
     * Message type.
     */
    msgType: string;
}

export interface GetSystemReplacemsgGroupEc {
    /**
     * Message string.
     */
    buffer: string;
    /**
     * Format flag.
     */
    format: string;
    /**
     * Header flag.
     */
    header: string;
    /**
     * Message type.
     */
    msgType: string;
}

export interface GetSystemReplacemsgGroupFortiguardWf {
    /**
     * Message string.
     */
    buffer: string;
    /**
     * Format flag.
     */
    format: string;
    /**
     * Header flag.
     */
    header: string;
    /**
     * Message type.
     */
    msgType: string;
}

export interface GetSystemReplacemsgGroupFtp {
    /**
     * Message string.
     */
    buffer: string;
    /**
     * Format flag.
     */
    format: string;
    /**
     * Header flag.
     */
    header: string;
    /**
     * Message type.
     */
    msgType: string;
}

export interface GetSystemReplacemsgGroupHttp {
    /**
     * Message string.
     */
    buffer: string;
    /**
     * Format flag.
     */
    format: string;
    /**
     * Header flag.
     */
    header: string;
    /**
     * Message type.
     */
    msgType: string;
}

export interface GetSystemReplacemsgGroupIcap {
    /**
     * Message string.
     */
    buffer: string;
    /**
     * Format flag.
     */
    format: string;
    /**
     * Header flag.
     */
    header: string;
    /**
     * Message type.
     */
    msgType: string;
}

export interface GetSystemReplacemsgGroupMail {
    /**
     * Message string.
     */
    buffer: string;
    /**
     * Format flag.
     */
    format: string;
    /**
     * Header flag.
     */
    header: string;
    /**
     * Message type.
     */
    msgType: string;
}

export interface GetSystemReplacemsgGroupNacQuar {
    /**
     * Message string.
     */
    buffer: string;
    /**
     * Format flag.
     */
    format: string;
    /**
     * Header flag.
     */
    header: string;
    /**
     * Message type.
     */
    msgType: string;
}

export interface GetSystemReplacemsgGroupNntp {
    /**
     * Message string.
     */
    buffer: string;
    /**
     * Format flag.
     */
    format: string;
    /**
     * Header flag.
     */
    header: string;
    /**
     * Message type.
     */
    msgType: string;
}

export interface GetSystemReplacemsgGroupSpam {
    /**
     * Message string.
     */
    buffer: string;
    /**
     * Format flag.
     */
    format: string;
    /**
     * Header flag.
     */
    header: string;
    /**
     * Message type.
     */
    msgType: string;
}

export interface GetSystemReplacemsgGroupSslvpn {
    /**
     * Message string.
     */
    buffer: string;
    /**
     * Format flag.
     */
    format: string;
    /**
     * Header flag.
     */
    header: string;
    /**
     * Message type.
     */
    msgType: string;
}

export interface GetSystemReplacemsgGroupTrafficQuota {
    /**
     * Message string.
     */
    buffer: string;
    /**
     * Format flag.
     */
    format: string;
    /**
     * Header flag.
     */
    header: string;
    /**
     * Message type.
     */
    msgType: string;
}

export interface GetSystemReplacemsgGroupUtm {
    /**
     * Message string.
     */
    buffer: string;
    /**
     * Format flag.
     */
    format: string;
    /**
     * Header flag.
     */
    header: string;
    /**
     * Message type.
     */
    msgType: string;
}

export interface GetSystemReplacemsgGroupWebproxy {
    /**
     * Message string.
     */
    buffer: string;
    /**
     * Format flag.
     */
    format: string;
    /**
     * Header flag.
     */
    header: string;
    /**
     * Message type.
     */
    msgType: string;
}

export interface GetSystemSdnConnectorExternalAccountList {
    /**
     * AWS region name list. The structure of `regionList` block is documented below.
     */
    regionLists: outputs.GetSystemSdnConnectorExternalAccountListRegionList[];
    /**
     * AWS role ARN to assume.
     */
    roleArn: string;
}

export interface GetSystemSdnConnectorExternalAccountListRegionList {
    /**
     * AWS region name.
     */
    region: string;
}

export interface GetSystemSdnConnectorExternalIp {
    /**
     * Specify the name of the desired system sdnconnector.
     */
    name: string;
}

export interface GetSystemSdnConnectorForwardingRule {
    /**
     * Forwarding rule name.
     */
    ruleName: string;
    /**
     * Target instance name.
     */
    target: string;
}

export interface GetSystemSdnConnectorGcpProjectList {
    /**
     * Configure GCP zone list. The structure of `gcpZoneList` block is documented below.
     */
    gcpZoneLists: outputs.GetSystemSdnConnectorGcpProjectListGcpZoneList[];
    /**
     * GCP project ID.
     */
    id: string;
}

export interface GetSystemSdnConnectorGcpProjectListGcpZoneList {
    /**
     * Specify the name of the desired system sdnconnector.
     */
    name: string;
}

export interface GetSystemSdnConnectorNic {
    /**
     * Configure IP configuration. The structure of `ip` block is documented below.
     */
    ips: outputs.GetSystemSdnConnectorNicIp[];
    /**
     * Specify the name of the desired system sdnconnector.
     */
    name: string;
}

export interface GetSystemSdnConnectorNicIp {
    /**
     * Specify the name of the desired system sdnconnector.
     */
    name: string;
    /**
     * Public IP name.
     */
    publicIp: string;
    /**
     * Resource group of Azure route table.
     */
    resourceGroup: string;
}

export interface GetSystemSdnConnectorRoute {
    /**
     * Specify the name of the desired system sdnconnector.
     */
    name: string;
}

export interface GetSystemSdnConnectorRouteTable {
    /**
     * Specify the name of the desired system sdnconnector.
     */
    name: string;
    /**
     * Resource group of Azure route table.
     */
    resourceGroup: string;
    /**
     * Configure Azure route. The structure of `route` block is documented below.
     */
    routes: outputs.GetSystemSdnConnectorRouteTableRoute[];
    /**
     * Subscription ID of Azure route table.
     */
    subscriptionId: string;
}

export interface GetSystemSdnConnectorRouteTableRoute {
    /**
     * Specify the name of the desired system sdnconnector.
     */
    name: string;
    /**
     * Next hop address.
     */
    nextHop: string;
}

export interface GetSystemSdnConnectorServerList {
    /**
     * Configure IP configuration. The structure of `ip` block is documented below.
     */
    ip: string;
}

export interface GetSystemSessionTtlPort {
    /**
     * End port number.
     */
    endPort: number;
    /**
     * Table entry ID.
     */
    id: number;
    /**
     * Protocol (0 - 255).
     */
    protocol: number;
    /**
     * Start port number.
     */
    startPort: number;
    /**
     * Session timeout (TTL).
     */
    timeout: string;
}

export interface GetSystemSnmpCommunityHost {
    /**
     * Enable/disable direct management of HA cluster members.
     */
    haDirect: string;
    /**
     * Control whether the SNMP manager sends SNMP queries, receives SNMP traps, or both.
     */
    hostType: string;
    /**
     * Host6 entry ID.
     */
    id: number;
    /**
     * IPv4 address of the SNMP manager (host).
     */
    ip: string;
    /**
     * Source IPv4 address for SNMP traps.
     */
    sourceIp: string;
}

export interface GetSystemSnmpCommunityHosts6 {
    /**
     * Enable/disable direct management of HA cluster members.
     */
    haDirect: string;
    /**
     * Control whether the SNMP manager sends SNMP queries, receives SNMP traps, or both.
     */
    hostType: string;
    /**
     * Host6 entry ID.
     */
    id: number;
    /**
     * SNMP manager IPv6 address prefix.
     */
    ipv6: string;
    /**
     * Source IPv6 address for SNMP traps.
     */
    sourceIpv6: string;
}

export interface GetSystemVdomExceptionVdom {
    /**
     * VDOM name.
     */
    name: string;
}

export interface GetSystemVirtualWanLinkFailAlertInterface {
    /**
     * Control-based Internet Service group name.
     */
    name: string;
}

export interface GetSystemVirtualWanLinkHealthCheck {
    /**
     * Address mode (IPv4 or IPv6).
     */
    addrMode: string;
    /**
     * Differentiated services code point (DSCP) in the IP header of the probe packet.
     */
    diffservcode: string;
    /**
     * Fully qualified domain name to resolve for the DNS probe.
     */
    dnsRequestDomain: string;
    /**
     * Number of failures before server is considered lost (1 - 3600, default = 5).
     */
    failtime: number;
    /**
     * HA election priority (1 - 50).
     */
    haPriority: number;
    /**
     * String in the http-agent field in the HTTP header.
     */
    httpAgent: string;
    /**
     * URL used to communicate with the server if the protocol if the protocol is HTTP.
     */
    httpGet: string;
    /**
     * Response string expected from the server if the protocol is HTTP.
     */
    httpMatch: string;
    /**
     * Status check interval, or the time between attempting to connect to the server (1 - 3600 sec, default = 5).
     */
    interval: number;
    /**
     * Member sequence number list. The structure of `members` block is documented below.
     */
    members: outputs.GetSystemVirtualWanLinkHealthCheckMember[];
    /**
     * Control-based Internet Service group name.
     */
    name: string;
    /**
     * Packet size of a twamp test session,
     */
    packetSize: number;
    /**
     * Twamp controller password in authentication mode
     */
    password: string;
    /**
     * Port number used to communicate with the server over the selected protocol.
     */
    port: number;
    /**
     * Number of most recent probes that should be used to calculate latency and jitter (5 - 30, default = 30).
     */
    probeCount: number;
    /**
     * Enable/disable transmission of probe packets.
     */
    probePackets: string;
    /**
     * Time to wait before a probe packet is considered lost (500 - 5000 msec, default = 500).
     */
    probeTimeout: number;
    /**
     * Protocol number.
     */
    protocol: string;
    /**
     * Number of successful responses received before server is considered recovered (1 - 3600, default = 5).
     */
    recoverytime: number;
    /**
     * Twamp controller security mode.
     */
    securityMode: string;
    /**
     * IP address or FQDN name of the server.
     */
    server: string;
    /**
     * Time interval in seconds that SLA fail log messages will be generated (0 - 3600, default = 0).
     */
    slaFailLogPeriod: number;
    /**
     * Time interval in seconds that SLA pass log messages will be generated (0 - 3600, default = 0).
     */
    slaPassLogPeriod: number;
    /**
     * Service level agreement (SLA). The structure of `sla` block is documented below.
     */
    slas: outputs.GetSystemVirtualWanLinkHealthCheckSla[];
    /**
     * Enable/disable system DNS as the probe server.
     */
    systemDns: string;
    /**
     * Alert threshold for jitter (ms, default = 0).
     */
    thresholdAlertJitter: number;
    /**
     * Alert threshold for latency (ms, default = 0).
     */
    thresholdAlertLatency: number;
    /**
     * Alert threshold for packet loss (percentage, default = 0).
     */
    thresholdAlertPacketloss: number;
    /**
     * Warning threshold for jitter (ms, default = 0).
     */
    thresholdWarningJitter: number;
    /**
     * Warning threshold for latency (ms, default = 0).
     */
    thresholdWarningLatency: number;
    /**
     * Warning threshold for packet loss (percentage, default = 0).
     */
    thresholdWarningPacketloss: number;
    /**
     * Enable/disable update cascade interface.
     */
    updateCascadeInterface: string;
    /**
     * Enable/disable updating the static route.
     */
    updateStaticRoute: string;
}

export interface GetSystemVirtualWanLinkHealthCheckMember {
    /**
     * Member sequence number.
     */
    seqNum: number;
}

export interface GetSystemVirtualWanLinkHealthCheckSla {
    /**
     * SLA ID.
     */
    id: number;
    /**
     * Jitter for SLA to make decision in milliseconds. (0 - 10000000, default = 5).
     */
    jitterThreshold: number;
    /**
     * Latency for SLA to make decision in milliseconds. (0 - 10000000, default = 5).
     */
    latencyThreshold: number;
    /**
     * Link cost factor.
     */
    linkCostFactor: string;
    /**
     * Packet loss for SLA to make decision in percentage. (0 - 100, default = 0).
     */
    packetlossThreshold: number;
}

export interface GetSystemVirtualWanLinkMember {
    /**
     * Comments.
     */
    comment: string;
    /**
     * Cost of this interface for services in SLA mode (0 - 4294967295, default = 0).
     */
    cost: number;
    /**
     * Enable/disable SD-WAN service gateway.
     */
    gateway: string;
    /**
     * IPv6 gateway.
     */
    gateway6: string;
    /**
     * Ingress spillover threshold for this interface (0 - 16776000 kbit/s). When this traffic volume threshold is reached, new sessions spill over to other interfaces in the SD-WAN.
     */
    ingressSpilloverThreshold: number;
    /**
     * Interface name.
     */
    interface: string;
    /**
     * Priority of the interface (0 - 4294967295). Used for SD-WAN rules or priority rules.
     */
    priority: number;
    /**
     * Member sequence number.
     */
    seqNum: number;
    /**
     * Source IP address used in the health-check packet to the server.
     */
    source: string;
    /**
     * Source IPv6 address used in the health-check packet to the server.
     */
    source6: string;
    /**
     * Egress spillover threshold for this interface (0 - 16776000 kbit/s). When this traffic volume threshold is reached, new sessions spill over to other interfaces in the SD-WAN.
     */
    spilloverThreshold: number;
    /**
     * Enable/disable SD-WAN service.
     */
    status: string;
    /**
     * Measured volume ratio (this value / sum of all values = percentage of link volume, 0 - 255).
     */
    volumeRatio: number;
    /**
     * Weight of this interface for weighted load balancing. (0 - 255) More traffic is directed to interfaces with higher weights.
     */
    weight: number;
}

export interface GetSystemVirtualWanLinkNeighbor {
    /**
     * Virtual WAN Link health-check.
     */
    healthCheck: string;
    /**
     * IP address of neighbor.
     */
    ip: string;
    /**
     * Member sequence number.
     */
    member: number;
    /**
     * Service role to work with neighbor.
     */
    role: string;
    /**
     * SLA ID.
     */
    slaId: number;
}

export interface GetSystemVirtualWanLinkService {
    /**
     * Address mode (IPv4 or IPv6).
     */
    addrMode: string;
    /**
     * Coefficient of reciprocal of available bidirectional bandwidth in the formula of custom-profile-1.
     */
    bandwidthWeight: number;
    /**
     * Enable/disable use of SD-WAN as default service.
     */
    default: string;
    /**
     * Enable/disable forward traffic DSCP tag.
     */
    dscpForward: string;
    /**
     * Forward traffic DSCP tag.
     */
    dscpForwardTag: string;
    /**
     * Enable/disable reverse traffic DSCP tag.
     */
    dscpReverse: string;
    /**
     * Reverse traffic DSCP tag.
     */
    dscpReverseTag: string;
    /**
     * Destination address6 name. The structure of `dst6` block is documented below.
     */
    dst6s: outputs.GetSystemVirtualWanLinkServiceDst6[];
    /**
     * Enable/disable negation of destination address match.
     */
    dstNegate: string;
    /**
     * Destination address name. The structure of `dst` block is documented below.
     */
    dsts: outputs.GetSystemVirtualWanLinkServiceDst[];
    /**
     * End destination port number.
     */
    endPort: number;
    /**
     * Enable/disable SD-WAN service gateway.
     */
    gateway: string;
    /**
     * User groups. The structure of `groups` block is documented below.
     */
    groups: outputs.GetSystemVirtualWanLinkServiceGroup[];
    /**
     * Virtual WAN Link health-check.
     */
    healthCheck: string;
    /**
     * Waiting period in seconds when switching from the back-up member to the primary member (0 - 10000000, default = 0).
     */
    holdDownTime: number;
    /**
     * SLA ID.
     */
    id: number;
    /**
     * Enable/disable negation of input device match.
     */
    inputDeviceNegate: string;
    /**
     * Source interface name. The structure of `inputDevice` block is documented below.
     */
    inputDevices: outputs.GetSystemVirtualWanLinkServiceInputDevice[];
    /**
     * Enable/disable use of Internet service for application-based load balancing.
     */
    internetService: string;
    /**
     * Application control based Internet Service group list. The structure of `internetServiceAppCtrlGroup` block is documented below.
     */
    internetServiceAppCtrlGroups: outputs.GetSystemVirtualWanLinkServiceInternetServiceAppCtrlGroup[];
    /**
     * Application control based Internet Service ID list. The structure of `internetServiceAppCtrl` block is documented below.
     */
    internetServiceAppCtrls: outputs.GetSystemVirtualWanLinkServiceInternetServiceAppCtrl[];
    /**
     * Control-based Internet Service group list. The structure of `internetServiceCtrlGroup` block is documented below.
     */
    internetServiceCtrlGroups: outputs.GetSystemVirtualWanLinkServiceInternetServiceCtrlGroup[];
    /**
     * Control-based Internet Service ID list. The structure of `internetServiceCtrl` block is documented below.
     */
    internetServiceCtrls: outputs.GetSystemVirtualWanLinkServiceInternetServiceCtrl[];
    /**
     * Custom Internet Service group list. The structure of `internetServiceCustomGroup` block is documented below.
     */
    internetServiceCustomGroups: outputs.GetSystemVirtualWanLinkServiceInternetServiceCustomGroup[];
    /**
     * Custom Internet service name list. The structure of `internetServiceCustom` block is documented below.
     */
    internetServiceCustoms: outputs.GetSystemVirtualWanLinkServiceInternetServiceCustom[];
    /**
     * Internet Service group list. The structure of `internetServiceGroup` block is documented below.
     */
    internetServiceGroups: outputs.GetSystemVirtualWanLinkServiceInternetServiceGroup[];
    /**
     * Internet service ID list. The structure of `internetServiceId` block is documented below.
     */
    internetServiceIds: outputs.GetSystemVirtualWanLinkServiceInternetServiceId[];
    /**
     * Internet service name list. The structure of `internetServiceName` block is documented below.
     */
    internetServiceNames: outputs.GetSystemVirtualWanLinkServiceInternetServiceName[];
    /**
     * Coefficient of jitter in the formula of custom-profile-1.
     */
    jitterWeight: number;
    /**
     * Coefficient of latency in the formula of custom-profile-1.
     */
    latencyWeight: number;
    /**
     * Link cost factor.
     */
    linkCostFactor: string;
    /**
     * Percentage threshold change of link cost values that will result in policy route regeneration (0 - 10000000, default = 10).
     */
    linkCostThreshold: number;
    /**
     * Member sequence number.
     */
    member: number;
    /**
     * Control how the priority rule sets the priority of interfaces in the SD-WAN.
     */
    mode: string;
    /**
     * Control-based Internet Service group name.
     */
    name: string;
    /**
     * Coefficient of packet-loss in the formula of custom-profile-1.
     */
    packetLossWeight: number;
    /**
     * Member sequence number list. The structure of `priorityMembers` block is documented below.
     */
    priorityMembers: outputs.GetSystemVirtualWanLinkServicePriorityMember[];
    /**
     * Protocol number.
     */
    protocol: number;
    /**
     * Quality grade.
     */
    qualityLink: number;
    /**
     * Service role to work with neighbor.
     */
    role: string;
    /**
     * IPv4 route map route-tag.
     */
    routeTag: number;
    /**
     * Method to compare SLA value for sla and load balance mode.
     */
    slaCompareMethod: string;
    /**
     * Service level agreement (SLA). The structure of `sla` block is documented below.
     */
    slas: outputs.GetSystemVirtualWanLinkServiceSla[];
    /**
     * Source address6 name. The structure of `src6` block is documented below.
     */
    src6s: outputs.GetSystemVirtualWanLinkServiceSrc6[];
    /**
     * Enable/disable negation of source address match.
     */
    srcNegate: string;
    /**
     * Source address name. The structure of `src` block is documented below.
     */
    srcs: outputs.GetSystemVirtualWanLinkServiceSrc[];
    /**
     * Enable/disable service when selected neighbor role is standalone while service role is not standalone.
     */
    standaloneAction: string;
    /**
     * Start destination port number.
     */
    startPort: number;
    /**
     * Enable/disable SD-WAN service.
     */
    status: string;
    /**
     * Type of service bit pattern.
     */
    tos: string;
    /**
     * Type of service evaluated bits.
     */
    tosMask: string;
    /**
     * User name. The structure of `users` block is documented below.
     */
    users: outputs.GetSystemVirtualWanLinkServiceUser[];
}

export interface GetSystemVirtualWanLinkServiceDst {
    /**
     * Control-based Internet Service group name.
     */
    name: string;
}

export interface GetSystemVirtualWanLinkServiceDst6 {
    /**
     * Control-based Internet Service group name.
     */
    name: string;
}

export interface GetSystemVirtualWanLinkServiceGroup {
    /**
     * Control-based Internet Service group name.
     */
    name: string;
}

export interface GetSystemVirtualWanLinkServiceInputDevice {
    /**
     * Control-based Internet Service group name.
     */
    name: string;
}

export interface GetSystemVirtualWanLinkServiceInternetServiceAppCtrl {
    /**
     * SLA ID.
     */
    id: number;
}

export interface GetSystemVirtualWanLinkServiceInternetServiceAppCtrlGroup {
    /**
     * Control-based Internet Service group name.
     */
    name: string;
}

export interface GetSystemVirtualWanLinkServiceInternetServiceCtrl {
    /**
     * SLA ID.
     */
    id: number;
}

export interface GetSystemVirtualWanLinkServiceInternetServiceCtrlGroup {
    /**
     * Control-based Internet Service group name.
     */
    name: string;
}

export interface GetSystemVirtualWanLinkServiceInternetServiceCustom {
    /**
     * Control-based Internet Service group name.
     */
    name: string;
}

export interface GetSystemVirtualWanLinkServiceInternetServiceCustomGroup {
    /**
     * Control-based Internet Service group name.
     */
    name: string;
}

export interface GetSystemVirtualWanLinkServiceInternetServiceGroup {
    /**
     * Control-based Internet Service group name.
     */
    name: string;
}

export interface GetSystemVirtualWanLinkServiceInternetServiceId {
    /**
     * SLA ID.
     */
    id: number;
}

export interface GetSystemVirtualWanLinkServiceInternetServiceName {
    /**
     * Control-based Internet Service group name.
     */
    name: string;
}

export interface GetSystemVirtualWanLinkServicePriorityMember {
    /**
     * Member sequence number.
     */
    seqNum: number;
}

export interface GetSystemVirtualWanLinkServiceSla {
    /**
     * Virtual WAN Link health-check.
     */
    healthCheck: string;
    /**
     * SLA ID.
     */
    id: number;
}

export interface GetSystemVirtualWanLinkServiceSrc {
    /**
     * Control-based Internet Service group name.
     */
    name: string;
}

export interface GetSystemVirtualWanLinkServiceSrc6 {
    /**
     * Control-based Internet Service group name.
     */
    name: string;
}

export interface GetSystemVirtualWanLinkServiceUser {
    /**
     * Control-based Internet Service group name.
     */
    name: string;
}

export interface GetSystemVirtualWanLinkZone {
    /**
     * Control-based Internet Service group name.
     */
    name: string;
}

export interface GetSystemVxlanRemoteIp {
    /**
     * IPv4 address.
     */
    ip: string;
}

export interface GetSystemVxlanRemoteIp6 {
    /**
     * IPv6 address.
     */
    ip6: string;
}

export interface GetSystemZoneInterface {
    /**
     * Select interfaces to add to the zone.
     */
    interfaceName: string;
}

export interface GetSystemZoneTagging {
    /**
     * Tag category.
     */
    category: string;
    /**
     * Specify the name of the desired system zone.
     */
    name: string;
    /**
     * Tags. The structure of `tags` block is documented below.
     */
    tags: outputs.GetSystemZoneTaggingTag[];
}

export interface GetSystemZoneTaggingTag {
    /**
     * Specify the name of the desired system zone.
     */
    name: string;
}

export interface IcapProfileIcapHeader {
    /**
     * Enable/disable use of base64 encoding of HTTP content. Valid values: `disable`, `enable`.
     */
    base64Encoding: string;
    /**
     * HTTP header content.
     */
    content: string;
    /**
     * ID.
     */
    id: number;
    /**
     * Address name.
     */
    name: string;
}

export interface IcapProfileRespmodForwardRule {
    /**
     * Action to be taken for ICAP server. Valid values: `forward`, `bypass`.
     */
    action: string;
    /**
     * HTTP header group. The structure of `headerGroup` block is documented below.
     */
    headerGroups?: outputs.IcapProfileRespmodForwardRuleHeaderGroup[];
    /**
     * Address object for the host.
     */
    host: string;
    /**
     * HTTP response status code. The structure of `httpRespStatusCode` block is documented below.
     */
    httpRespStatusCodes?: outputs.IcapProfileRespmodForwardRuleHttpRespStatusCode[];
    /**
     * Address name.
     */
    name: string;
}

export interface IcapProfileRespmodForwardRuleHeaderGroup {
    /**
     * Enable/disable case sensitivity when matching header. Valid values: `disable`, `enable`.
     */
    caseSensitivity: string;
    /**
     * HTTP header regular expression.
     */
    header: string;
    /**
     * HTTP header.
     */
    headerName: string;
    /**
     * ID.
     */
    id: number;
}

export interface IcapProfileRespmodForwardRuleHttpRespStatusCode {
    /**
     * HTTP response status code.
     */
    code: number;
}

export interface IpsDecoderParameter {
    /**
     * Parameter name.
     */
    name: string;
    /**
     * Parameter value.
     */
    value: string;
}

export interface IpsGlobalTlsActiveProbe {
    /**
     * Specify outgoing interface to reach server.
     */
    interface: string;
    /**
     * Specify how to select outgoing interface to reach server. Valid values: `auto`, `sdwan`, `specify`.
     */
    interfaceSelectMethod: string;
    /**
     * Source IP address used for TLS active probe.
     */
    sourceIp: string;
    /**
     * Source IPv6 address used for TLS active probe.
     */
    sourceIp6: string;
    /**
     * Virtual domain name for TLS active probe.
     */
    vdom: string;
}

export interface IpsRuleMetadata {
    /**
     * ID.
     */
    id: number;
    /**
     * Meta ID.
     */
    metaid: number;
    /**
     * Value ID.
     */
    valueid: number;
}

export interface IpsSensorEntry {
    /**
     * Action of override rule. Valid values: `pass`, `block`, `reset`.
     */
    action: string;
    /**
     * Vulnerable application filter.
     */
    application: string;
    /**
     * List of CVE IDs of the signatures to add to the sensor The structure of `cve` block is documented below.
     */
    cves?: outputs.IpsSensorEntryCfe[];
    /**
     * Exempted IP. The structure of `exemptIp` block is documented below.
     */
    exemptIps?: outputs.IpsSensorEntryExemptIp[];
    /**
     * Exempt IP ID.
     */
    id: number;
    /**
     * Vulnerability location filter.
     */
    location: string;
    /**
     * Enable/disable logging. Valid values: `disable`, `enable`.
     */
    log: string;
    /**
     * Enable/disable logging of attack context: URL buffer, header buffer, body buffer, packet buffer. Valid values: `disable`, `enable`.
     */
    logAttackContext: string;
    /**
     * Enable/disable packet logging. Valid values: `disable`, `enable`.
     */
    logPacket: string;
    /**
     * Vulnerable OS filter.
     */
    os: string;
    /**
     * Vulnerable protocol filter.
     */
    protocol: string;
    /**
     * Quarantine IP or interface. Valid values: `none`, `attacker`.
     */
    quarantine: string;
    /**
     * Duration of quarantine in minute.
     */
    quarantineExpiry: string;
    /**
     * Enable/disable logging of selected quarantine. Valid values: `disable`, `enable`.
     */
    quarantineLog: string;
    /**
     * Count of the rate.
     */
    rateCount: number;
    /**
     * Duration (sec) of the rate.
     */
    rateDuration: number;
    /**
     * Rate limit mode. Valid values: `periodical`, `continuous`.
     */
    rateMode: string;
    /**
     * Track the packet protocol field. Valid values: `none`, `src-ip`, `dest-ip`, `dhcp-client-mac`, `dns-domain`.
     */
    rateTrack: string;
    /**
     * Identifies the predefined or custom IPS signatures to add to the sensor. The structure of `rule` block is documented below.
     */
    rules?: outputs.IpsSensorEntryRule[];
    /**
     * Vulnerability severity filter.
     */
    severity: string;
    /**
     * Enable/disable status of override rule. Valid values: `disable`, `enable`.
     */
    status: string;
}

export interface IpsSensorEntryCfe {
    /**
     * CVE IDs or CVE wildcards.
     */
    cveEntry: string;
}

export interface IpsSensorEntryExemptIp {
    /**
     * Destination IP address and netmask.
     */
    dstIp: string;
    /**
     * Exempt IP ID.
     */
    id: number;
    /**
     * Source IP address and netmask.
     */
    srcIp: string;
}

export interface IpsSensorEntryRule {
    /**
     * Exempt IP ID.
     */
    id: number;
}

export interface IpsSensorFilter {
    /**
     * Action of override rule. Valid values: `pass`, `block`, `reset`.
     */
    action: string;
    /**
     * Vulnerable application filter.
     */
    application: string;
    /**
     * Vulnerability location filter.
     */
    location: string;
    /**
     * Enable/disable logging. Valid values: `disable`, `enable`.
     */
    log: string;
    /**
     * Enable/disable packet logging. Valid values: `disable`, `enable`.
     */
    logPacket: string;
    /**
     * Filter name.
     */
    name: string;
    /**
     * Vulnerable OS filter.
     */
    os: string;
    /**
     * Vulnerable protocol filter.
     */
    protocol: string;
    /**
     * Quarantine IP or interface. Valid values: `none`, `attacker`.
     */
    quarantine: string;
    /**
     * Duration of quarantine in minute.
     */
    quarantineExpiry: number;
    /**
     * Enable/disable logging of selected quarantine. Valid values: `disable`, `enable`.
     */
    quarantineLog: string;
    /**
     * Vulnerability severity filter.
     */
    severity: string;
    /**
     * Enable/disable status of override rule. Valid values: `disable`, `enable`.
     */
    status: string;
}

export interface IpsSensorOverride {
    /**
     * Action of override rule. Valid values: `pass`, `block`, `reset`.
     */
    action: string;
    /**
     * Exempted IP. The structure of `exemptIp` block is documented below.
     */
    exemptIps?: outputs.IpsSensorOverrideExemptIp[];
    /**
     * Enable/disable logging. Valid values: `disable`, `enable`.
     */
    log: string;
    /**
     * Enable/disable packet logging. Valid values: `disable`, `enable`.
     */
    logPacket: string;
    /**
     * Quarantine IP or interface. Valid values: `none`, `attacker`.
     */
    quarantine: string;
    /**
     * Duration of quarantine in minute.
     */
    quarantineExpiry: number;
    /**
     * Enable/disable logging of selected quarantine. Valid values: `disable`, `enable`.
     */
    quarantineLog: string;
    /**
     * Override rule ID.
     */
    ruleId: number;
    /**
     * Enable/disable status of override rule. Valid values: `disable`, `enable`.
     */
    status: string;
}

export interface IpsSensorOverrideExemptIp {
    /**
     * Destination IP address and netmask.
     */
    dstIp: string;
    /**
     * Exempt IP ID.
     */
    id: number;
    /**
     * Source IP address and netmask.
     */
    srcIp: string;
}

export interface LogDiskFilterFreeStyle {
    /**
     * Log category.
     */
    category: string;
    /**
     * Free style filter string.
     */
    filter: string;
    /**
     * Include/exclude logs that match the filter. Valid values: `include`, `exclude`.
     */
    filterType: string;
    /**
     * Entry ID.
     */
    id: number;
}

export interface LogFortianalyzer2FilterFreeStyle {
    /**
     * Log category.
     */
    category: string;
    /**
     * Free style filter string.
     */
    filter: string;
    /**
     * Include/exclude logs that match the filter. Valid values: `include`, `exclude`.
     */
    filterType: string;
    /**
     * Entry ID.
     */
    id: number;
}

export interface LogFortianalyzer2OverrideFilterFreeStyle {
    /**
     * Log category.
     */
    category: string;
    /**
     * Free style filter string.
     */
    filter: string;
    /**
     * Include/exclude logs that match the filter. Valid values: `include`, `exclude`.
     */
    filterType: string;
    /**
     * Entry ID.
     */
    id: number;
}

export interface LogFortianalyzer2OverrideSettingSerial {
    /**
     * Serial Number.
     */
    name: string;
}

export interface LogFortianalyzer2SettingSerial {
    /**
     * Serial Number.
     */
    name: string;
}

export interface LogFortianalyzer3FilterFreeStyle {
    /**
     * Log category.
     */
    category: string;
    /**
     * Free style filter string.
     */
    filter: string;
    /**
     * Include/exclude logs that match the filter. Valid values: `include`, `exclude`.
     */
    filterType: string;
    /**
     * Entry ID.
     */
    id: number;
}

export interface LogFortianalyzer3OverrideFilterFreeStyle {
    /**
     * Log category.
     */
    category: string;
    /**
     * Free style filter string.
     */
    filter: string;
    /**
     * Include/exclude logs that match the filter. Valid values: `include`, `exclude`.
     */
    filterType: string;
    /**
     * Entry ID.
     */
    id: number;
}

export interface LogFortianalyzer3OverrideSettingSerial {
    /**
     * Serial Number.
     */
    name: string;
}

export interface LogFortianalyzer3SettingSerial {
    /**
     * Serial Number.
     */
    name: string;
}

export interface LogFortianalyzerCloudFilterFreeStyle {
    /**
     * Log category.
     */
    category: string;
    /**
     * Free style filter string.
     */
    filter: string;
    /**
     * Include/exclude logs that match the filter. Valid values: `include`, `exclude`.
     */
    filterType: string;
    /**
     * Entry ID.
     */
    id: number;
}

export interface LogFortianalyzerCloudOverrideFilterFreeStyle {
    /**
     * Log category.
     */
    category: string;
    /**
     * Free style filter string.
     */
    filter: string;
    /**
     * Include/exclude logs that match the filter. Valid values: `include`, `exclude`.
     */
    filterType: string;
    /**
     * Entry ID.
     */
    id: number;
}

export interface LogFortianalyzerCloudSettingSerial {
    /**
     * Serial Number.
     */
    name: string;
}

export interface LogFortianalyzerFilterFreeStyle {
    /**
     * Log category.
     */
    category: string;
    /**
     * Free style filter string.
     */
    filter: string;
    /**
     * Include/exclude logs that match the filter. Valid values: `include`, `exclude`.
     */
    filterType: string;
    /**
     * Entry ID.
     */
    id: number;
}

export interface LogFortianalyzerOverrideFilterFreeStyle {
    /**
     * Log category.
     */
    category: string;
    /**
     * Free style filter string.
     */
    filter: string;
    /**
     * Include/exclude logs that match the filter. Valid values: `include`, `exclude`.
     */
    filterType: string;
    /**
     * Entry ID.
     */
    id: number;
}

export interface LogFortianalyzerOverrideSettingSerial {
    /**
     * Serial Number.
     */
    name: string;
}

export interface LogFortianalyzerSettingSerial {
    /**
     * Serial Number.
     */
    name: string;
}

export interface LogFortiguardFilterFreeStyle {
    /**
     * Log category.
     */
    category: string;
    /**
     * Free style filter string.
     */
    filter: string;
    /**
     * Include/exclude logs that match the filter. Valid values: `include`, `exclude`.
     */
    filterType: string;
    /**
     * Entry ID.
     */
    id: number;
}

export interface LogFortiguardOverrideFilterFreeStyle {
    /**
     * Log category.
     */
    category: string;
    /**
     * Free style filter string.
     */
    filter: string;
    /**
     * Include/exclude logs that match the filter. Valid values: `include`, `exclude`.
     */
    filterType: string;
    /**
     * Entry ID.
     */
    id: number;
}

export interface LogMemoryFilterFreeStyle {
    /**
     * Log category.
     */
    category: string;
    /**
     * Free style filter string.
     */
    filter: string;
    /**
     * Include/exclude logs that match the filter. Valid values: `include`, `exclude`.
     */
    filterType: string;
    /**
     * Entry ID.
     */
    id: number;
}

export interface LogNullDeviceFilterFreeStyle {
    /**
     * Log category.
     */
    category: string;
    /**
     * Free style filter string.
     */
    filter: string;
    /**
     * Include/exclude logs that match the filter. Valid values: `include`, `exclude`.
     */
    filterType: string;
    /**
     * Entry ID.
     */
    id: number;
}

export interface LogSettingCustomLogField {
    /**
     * Custom log field.
     */
    fieldId: string;
}

export interface LogSyslogd2FilterFreeStyle {
    /**
     * Log category.
     */
    category: string;
    /**
     * Free style filter string.
     */
    filter: string;
    /**
     * Include/exclude logs that match the filter. Valid values: `include`, `exclude`.
     */
    filterType: string;
    /**
     * Entry ID.
     */
    id: number;
}

export interface LogSyslogd2OverrideFilterFreeStyle {
    /**
     * Log category.
     */
    category: string;
    /**
     * Free style filter string.
     */
    filter: string;
    /**
     * Include/exclude logs that match the filter. Valid values: `include`, `exclude`.
     */
    filterType: string;
    /**
     * Entry ID.
     */
    id: number;
}

export interface LogSyslogd2OverrideSettingCustomFieldName {
    /**
     * Field custom name.
     */
    custom: string;
    /**
     * Entry ID.
     */
    id: number;
    /**
     * Field name.
     */
    name: string;
}

export interface LogSyslogd2SettingCustomFieldName {
    /**
     * Field custom name.
     */
    custom: string;
    /**
     * Entry ID.
     */
    id: number;
    /**
     * Field name.
     */
    name: string;
}

export interface LogSyslogd3FilterFreeStyle {
    /**
     * Log category.
     */
    category: string;
    /**
     * Free style filter string.
     */
    filter: string;
    /**
     * Include/exclude logs that match the filter. Valid values: `include`, `exclude`.
     */
    filterType: string;
    /**
     * Entry ID.
     */
    id: number;
}

export interface LogSyslogd3OverrideFilterFreeStyle {
    /**
     * Log category.
     */
    category: string;
    /**
     * Free style filter string.
     */
    filter: string;
    /**
     * Include/exclude logs that match the filter. Valid values: `include`, `exclude`.
     */
    filterType: string;
    /**
     * Entry ID.
     */
    id: number;
}

export interface LogSyslogd3OverrideSettingCustomFieldName {
    /**
     * Field custom name.
     */
    custom: string;
    /**
     * Entry ID.
     */
    id: number;
    /**
     * Field name.
     */
    name: string;
}

export interface LogSyslogd3SettingCustomFieldName {
    /**
     * Field custom name.
     */
    custom: string;
    /**
     * Entry ID.
     */
    id: number;
    /**
     * Field name.
     */
    name: string;
}

export interface LogSyslogd4FilterFreeStyle {
    /**
     * Log category.
     */
    category: string;
    /**
     * Free style filter string.
     */
    filter: string;
    /**
     * Include/exclude logs that match the filter. Valid values: `include`, `exclude`.
     */
    filterType: string;
    /**
     * Entry ID.
     */
    id: number;
}

export interface LogSyslogd4OverrideFilterFreeStyle {
    /**
     * Log category.
     */
    category: string;
    /**
     * Free style filter string.
     */
    filter: string;
    /**
     * Include/exclude logs that match the filter. Valid values: `include`, `exclude`.
     */
    filterType: string;
    /**
     * Entry ID.
     */
    id: number;
}

export interface LogSyslogd4OverrideSettingCustomFieldName {
    /**
     * Field custom name.
     */
    custom: string;
    /**
     * Entry ID.
     */
    id: number;
    /**
     * Field name.
     */
    name: string;
}

export interface LogSyslogd4SettingCustomFieldName {
    /**
     * Field custom name.
     */
    custom: string;
    /**
     * Entry ID.
     */
    id: number;
    /**
     * Field name.
     */
    name: string;
}

export interface LogSyslogdFilterFreeStyle {
    /**
     * Log category.
     */
    category: string;
    /**
     * Free style filter string.
     */
    filter: string;
    /**
     * Include/exclude logs that match the filter. Valid values: `include`, `exclude`.
     */
    filterType: string;
    /**
     * Entry ID.
     */
    id: number;
}

export interface LogSyslogdOverrideFilterFreeStyle {
    /**
     * Log category.
     */
    category: string;
    /**
     * Free style filter string.
     */
    filter: string;
    /**
     * Include/exclude logs that match the filter. Valid values: `include`, `exclude`.
     */
    filterType: string;
    /**
     * Entry ID.
     */
    id: number;
}

export interface LogSyslogdOverrideSettingCustomFieldName {
    /**
     * Field custom name.
     */
    custom: string;
    /**
     * Entry ID.
     */
    id: number;
    /**
     * Field name.
     */
    name: string;
}

export interface LogSyslogdSettingCustomFieldName {
    /**
     * Field custom name.
     */
    custom: string;
    /**
     * Entry ID.
     */
    id: number;
    /**
     * Field name.
     */
    name: string;
}

export interface LogThreatWeightApplication {
    /**
     * Application category.
     */
    category: number;
    /**
     * Entry ID.
     */
    id: number;
    /**
     * Threat weight score for Application events. Valid values: `disable`, `low`, `medium`, `high`, `critical`.
     */
    level: string;
}

export interface LogThreatWeightGeolocation {
    /**
     * Country code.
     */
    country: string;
    /**
     * Entry ID.
     */
    id: number;
    /**
     * Threat weight score for Application events. Valid values: `disable`, `low`, `medium`, `high`, `critical`.
     */
    level: string;
}

export interface LogThreatWeightIps {
    /**
     * Threat weight score for IPS critical severity events. Valid values: `disable`, `low`, `medium`, `high`, `critical`.
     */
    criticalSeverity: string;
    /**
     * Threat weight score for IPS high severity events. Valid values: `disable`, `low`, `medium`, `high`, `critical`.
     */
    highSeverity: string;
    /**
     * Threat weight score for IPS info severity events. Valid values: `disable`, `low`, `medium`, `high`, `critical`.
     */
    infoSeverity: string;
    /**
     * Threat weight score for IPS low severity events. Valid values: `disable`, `low`, `medium`, `high`, `critical`.
     */
    lowSeverity: string;
    /**
     * Threat weight score for IPS medium severity events. Valid values: `disable`, `low`, `medium`, `high`, `critical`.
     */
    mediumSeverity: string;
}

export interface LogThreatWeightLevel {
    /**
     * Critical level score value (1 - 100).
     */
    critical: number;
    /**
     * High level score value (1 - 100).
     */
    high: number;
    /**
     * Low level score value (1 - 100).
     */
    low: number;
    /**
     * Medium level score value (1 - 100).
     */
    medium: number;
}

export interface LogThreatWeightMalware {
    /**
     * Threat weight score for detected botnet connections. Valid values: `disable`, `low`, `medium`, `high`, `critical`.
     */
    botnetConnection: string;
    /**
     * Threat weight score for blocked command detected. Valid values: `disable`, `low`, `medium`, `high`, `critical`.
     */
    commandBlocked: string;
    /**
     * Threat weight score for virus (content disarm) detected. Valid values: `disable`, `low`, `medium`, `high`, `critical`.
     */
    contentDisarm: string;
    /**
     * Threat weight score for virus (EMS threat feed) detected. Valid values: `disable`, `low`, `medium`, `high`, `critical`.
     */
    emsThreatFeed: string;
    /**
     * Threat weight score for blocked file detected. Valid values: `disable`, `low`, `medium`, `high`, `critical`.
     */
    fileBlocked: string;
    /**
     * Threat weight score for FortiAI-detected virus. Valid values: `disable`, `low`, `medium`, `high`, `critical`.
     */
    fortiai: string;
    /**
     * Threat weight score for FortiSandbox high risk malware detected. Valid values: `disable`, `low`, `medium`, `high`, `critical`.
     */
    fsaHighRisk: string;
    /**
     * Threat weight score for FortiSandbox malicious malware detected. Valid values: `disable`, `low`, `medium`, `high`, `critical`.
     */
    fsaMalicious: string;
    /**
     * Threat weight score for FortiSandbox medium risk malware detected. Valid values: `disable`, `low`, `medium`, `high`, `critical`.
     */
    fsaMediumRisk: string;
    /**
     * Threat weight score for virus (malware list) detected. Valid values: `disable`, `low`, `medium`, `high`, `critical`.
     */
    malwareList: string;
    /**
     * Threat weight score for mimefragmented detected. Valid values: `disable`, `low`, `medium`, `high`, `critical`.
     */
    mimefragmented: string;
    /**
     * Threat weight score for oversized file detected. Valid values: `disable`, `low`, `medium`, `high`, `critical`.
     */
    oversized: string;
    /**
     * Threat weight score for switch proto detected. Valid values: `disable`, `low`, `medium`, `high`, `critical`.
     */
    switchProto: string;
    /**
     * Threat weight score for virus (filetype executable) detected. Valid values: `disable`, `low`, `medium`, `high`, `critical`.
     */
    virusFileTypeExecutable: string;
    /**
     * Threat weight score for virus (infected) detected. Valid values: `disable`, `low`, `medium`, `high`, `critical`.
     */
    virusInfected: string;
    /**
     * Threat weight score for virus (outbreak prevention) event. Valid values: `disable`, `low`, `medium`, `high`, `critical`.
     */
    virusOutbreakPrevention: string;
    /**
     * Threat weight score for virus (scan error) detected. Valid values: `disable`, `low`, `medium`, `high`, `critical`.
     */
    virusScanError: string;
}

export interface LogThreatWeightWeb {
    /**
     * Application category.
     */
    category: number;
    /**
     * Entry ID.
     */
    id: number;
    /**
     * Threat weight score for Application events. Valid values: `disable`, `low`, `medium`, `high`, `critical`.
     */
    level: string;
}

export interface LogWebtrendsFilterFreeStyle {
    /**
     * Log category.
     */
    category: string;
    /**
     * Free style filter string.
     */
    filter: string;
    /**
     * Include/exclude logs that match the filter. Valid values: `include`, `exclude`.
     */
    filterType: string;
    /**
     * Entry ID.
     */
    id: number;
}

export interface NsxtServiceChainServiceIndex {
    /**
     * Service index.
     */
    id: number;
    /**
     * Index name.
     */
    name: string;
    /**
     * Reverse service index.
     */
    reverseIndex: number;
    /**
     * VDOM name.
     */
    vd: string;
}

export interface ReportChartCategorySeries {
    /**
     * Value series value expression.
     */
    databind: string;
    /**
     * Font size of category-series title.
     */
    fontSize: number;
}

export interface ReportChartColumn {
    /**
     * Detail unit of column.
     */
    detailUnit: string;
    /**
     * Detail value of column.
     */
    detailValue: string;
    /**
     * Footer unit of column.
     */
    footerUnit: string;
    /**
     * Footer value of column.
     */
    footerValue: string;
    /**
     * Display name of table header.
     */
    headerValue: string;
    /**
     * id
     */
    id: number;
    /**
     * Show detail in certain display value for certain condition. The structure of `mapping` block is documented below.
     */
    mappings?: outputs.ReportChartColumnMapping[];
}

export interface ReportChartColumnMapping {
    /**
     * Display name.
     */
    displayname: string;
    /**
     * id
     */
    id: number;
    /**
     * Comparision operater. Valid values: `none`, `greater`, `greater-equal`, `less`, `less-equal`, `equal`, `between`.
     */
    op: string;
    /**
     * Value 1.
     */
    value1: string;
    /**
     * Value 2.
     */
    value2: string;
    /**
     * Value type. Valid values: `integer`, `string`.
     */
    valueType: string;
}

export interface ReportChartDrillDownChart {
    /**
     * Drill down chart name.
     */
    chartName: string;
    /**
     * id
     */
    id: number;
    /**
     * Enable/disable this drill down chart. Valid values: `enable`, `disable`.
     */
    status: string;
}

export interface ReportChartValueSeries {
    /**
     * Value series value expression.
     */
    databind: string;
}

export interface ReportChartXSeries {
    /**
     * Y-series caption.
     */
    caption: string;
    /**
     * Y-series caption font size.
     */
    captionFontSize: number;
    /**
     * Value series value expression.
     */
    databind: string;
    /**
     * Font size of category-series title.
     */
    fontSize: number;
    /**
     * X-series represent category or not. Valid values: `yes`, `no`.
     */
    isCategory: string;
    /**
     * Y-series label angle. Valid values: `45-degree`, `vertical`, `horizontal`.
     */
    labelAngle: string;
    /**
     * Scale increase or decrease. Valid values: `decrease`, `increase`.
     */
    scaleDirection: string;
    /**
     * Date/time format. Valid values: `YYYY-MM-DD-HH-MM`, `YYYY-MM-DD HH`, `YYYY-MM-DD`, `YYYY-MM`, `YYYY`, `HH-MM`, `MM-DD`.
     */
    scaleFormat: string;
    /**
     * Scale step.
     */
    scaleStep: number;
    /**
     * Scale unit. Valid values: `minute`, `hour`, `day`, `month`, `year`.
     */
    scaleUnit: string;
    /**
     * Y-series unit.
     */
    unit: string;
}

export interface ReportChartYSeries {
    /**
     * Y-series caption.
     */
    caption: string;
    /**
     * Y-series caption font size.
     */
    captionFontSize: number;
    /**
     * Value series value expression.
     */
    databind: string;
    /**
     * Extra Y-series value.
     */
    extraDatabind: string;
    /**
     * Allow another Y-series value Valid values: `enable`, `disable`.
     */
    extraY: string;
    /**
     * Extra Y-series legend type/name.
     */
    extraYLegend: string;
    /**
     * Font size of category-series title.
     */
    fontSize: number;
    /**
     * Y-series group option.
     */
    group: string;
    /**
     * Y-series label angle. Valid values: `45-degree`, `vertical`, `horizontal`.
     */
    labelAngle: string;
    /**
     * Y-series unit.
     */
    unit: string;
    /**
     * First Y-series legend type/name.
     */
    yLegend: string;
}

export interface ReportDatasetField {
    /**
     * Display name.
     */
    displayname: string;
    /**
     * Parameter ID (1 to number of columns in SQL result).
     */
    id: number;
    /**
     * Name.
     */
    name: string;
    /**
     * Field type. Valid values: `text`, `integer`, `double`.
     */
    type: string;
}

export interface ReportDatasetParameter {
    /**
     * Data type. Valid values: `text`, `integer`, `double`, `long-integer`, `date-time`.
     */
    dataType: string;
    /**
     * Display name.
     */
    displayName: string;
    /**
     * SQL field name.
     */
    field: string;
    /**
     * Parameter ID (1 to number of columns in SQL result).
     */
    id: number;
}

export interface ReportLayoutBodyItem {
    /**
     * Report item chart name.
     */
    chart: string;
    /**
     * Report chart options. Valid values: `include-no-data`, `hide-title`, `show-caption`.
     */
    chartOptions: string;
    /**
     * Report section column number.
     */
    column: number;
    /**
     * List entry content.
     */
    content: string;
    /**
     * Description.
     */
    description: string;
    /**
     * Control how drill down charts are shown.
     */
    drillDownItems: string;
    /**
     * Control whether keys from the parent being combined or not.
     */
    drillDownTypes: string;
    /**
     * Enable/disable hide item in report. Valid values: `enable`, `disable`.
     */
    hide: string;
    /**
     * List entry ID.
     */
    id: number;
    /**
     * Report item image file name.
     */
    imgSrc: string;
    /**
     * Report item list component. Valid values: `bullet`, `numbered`.
     */
    listComponent: string;
    /**
     * Configure report list item. The structure of `list` block is documented below.
     */
    lists?: outputs.ReportLayoutBodyItemList[];
    /**
     * Report item miscellaneous component. Valid values: `hline`, `page-break`, `column-break`, `section-start`.
     */
    miscComponent: string;
    /**
     * Parameters. The structure of `parameters` block is documented below.
     */
    parameters?: outputs.ReportLayoutBodyItemParameter[];
    /**
     * Report item style.
     */
    style: string;
    /**
     * Table chart caption style.
     */
    tableCaptionStyle: string;
    /**
     * Report item table column widths.
     */
    tableColumnWidths: string;
    /**
     * Table chart even row style.
     */
    tableEvenRowStyle: string;
    /**
     * Table chart head style.
     */
    tableHeadStyle: string;
    /**
     * Table chart odd row style.
     */
    tableOddRowStyle: string;
    /**
     * Report item text component. Valid values: `text`, `heading1`, `heading2`, `heading3`.
     */
    textComponent: string;
    /**
     * Report section title.
     */
    title: string;
    /**
     * Value of top.
     */
    topN: number;
    /**
     * Report item type. Valid values: `text`, `image`, `chart`, `misc`.
     */
    type: string;
}

export interface ReportLayoutBodyItemList {
    /**
     * List entry content.
     */
    content: string;
    /**
     * List entry ID.
     */
    id: number;
}

export interface ReportLayoutBodyItemParameter {
    /**
     * List entry ID.
     */
    id: number;
    /**
     * Field name that match field of parameters defined in dataset.
     */
    name: string;
    /**
     * Value to replace corresponding field of parameters defined in dataset.
     */
    value: string;
}

export interface ReportLayoutPage {
    /**
     * Report page auto column break before heading. Valid values: `heading1`, `heading2`, `heading3`.
     */
    columnBreakBefore: string;
    /**
     * Configure report page footer. The structure of `footer` block is documented below.
     */
    footer?: outputs.ReportLayoutPageFooter;
    /**
     * Configure report page header. The structure of `header` block is documented below.
     */
    header?: outputs.ReportLayoutPageHeader;
    /**
     * Report page options. Valid values: `header-on-first-page`, `footer-on-first-page`.
     */
    options: string;
    /**
     * Report page auto page break before heading. Valid values: `heading1`, `heading2`, `heading3`.
     */
    pageBreakBefore: string;
    /**
     * Report page paper. Valid values: `a4`, `letter`.
     */
    paper: string;
}

export interface ReportLayoutPageFooter {
    /**
     * Configure report footer item. The structure of `footerItem` block is documented below.
     */
    footerItems?: outputs.ReportLayoutPageFooterFooterItem[];
    /**
     * Report item style.
     */
    style: string;
}

export interface ReportLayoutPageFooterFooterItem {
    /**
     * List entry content.
     */
    content: string;
    /**
     * Description.
     */
    description: string;
    /**
     * List entry ID.
     */
    id: number;
    /**
     * Report item image file name.
     */
    imgSrc: string;
    /**
     * Report item style.
     */
    style: string;
    /**
     * Report item type. Valid values: `text`, `image`, `chart`, `misc`.
     */
    type: string;
}

export interface ReportLayoutPageHeader {
    /**
     * Configure report header item. The structure of `headerItem` block is documented below.
     */
    headerItems?: outputs.ReportLayoutPageHeaderHeaderItem[];
    /**
     * Report item style.
     */
    style: string;
}

export interface ReportLayoutPageHeaderHeaderItem {
    /**
     * List entry content.
     */
    content: string;
    /**
     * Description.
     */
    description: string;
    /**
     * List entry ID.
     */
    id: number;
    /**
     * Report item image file name.
     */
    imgSrc: string;
    /**
     * Report item style.
     */
    style: string;
    /**
     * Report item type. Valid values: `text`, `image`, `chart`, `misc`.
     */
    type: string;
}

export interface RouterAccessList6Rule {
    /**
     * Permit or deny this IP address and netmask prefix. Valid values: `permit`, `deny`.
     */
    action: string;
    /**
     * Enable/disable exact prefix match. Valid values: `enable`, `disable`.
     */
    exactMatch: string;
    /**
     * Flags.
     */
    flags: number;
    /**
     * Rule ID.
     */
    id: number;
    /**
     * IPv6 prefix to define regular filter criteria, such as "any" or subnets.
     */
    prefix6: string;
}

export interface RouterAccessListRule {
    /**
     * Permit or deny this IP address and netmask prefix.
     */
    action: string;
    /**
     * Enable/disable exact match.
     */
    exactMatch: string;
    /**
     * Flags.
     */
    flags: number;
    /**
     * Rule ID.
     */
    id: number;
    /**
     * IPv4 prefix to define regular filter criteria, such as "any" or subnets.
     */
    prefix: string;
    /**
     * Wildcard to define Cisco-style wildcard filter criteria.
     */
    wildcard: string;
}

export interface RouterAspathListRule {
    /**
     * Permit or deny route-based operations, based on the route's AS_PATH attribute. Valid values: `deny`, `permit`.
     */
    action: string;
    /**
     * ID.
     */
    id: number;
    /**
     * Regular-expression to match the Border Gateway Protocol (BGP) AS paths.
     */
    regexp: string;
}

export interface RouterBfd6Neighbor {
    /**
     * Interface to the BFD neighbor.
     */
    interface: string;
    /**
     * IPv6 address of the BFD neighbor.
     */
    ip6Address: string;
}

export interface RouterBfdNeighbor {
    /**
     * Interface name.
     */
    interface: string;
    /**
     * IPv4 address of the BFD neighbor.
     */
    ip: string;
}

export interface RouterBgpAdminDistance {
    /**
     * Administrative distance to apply (1 - 255).
     */
    distance: number;
    /**
     * ID.
     */
    id: number;
    /**
     * Neighbor address prefix.
     */
    neighbourPrefix: string;
    /**
     * Access list of routes to apply new distance to.
     */
    routeList: string;
}

export interface RouterBgpAggregateAddress {
    /**
     * Enable/disable generate AS set path information. Valid values: `enable`, `disable`.
     */
    asSet: string;
    /**
     * ID.
     */
    id: number;
    /**
     * Network prefix.
     */
    prefix: string;
    /**
     * Enable/disable filter more specific routes from updates. Valid values: `enable`, `disable`.
     */
    summaryOnly: string;
}

export interface RouterBgpAggregateAddress6 {
    /**
     * Enable/disable generate AS set path information. Valid values: `enable`, `disable`.
     */
    asSet: string;
    /**
     * ID.
     */
    id: number;
    /**
     * Network IPv6 prefix.
     */
    prefix6: string;
    /**
     * Enable/disable filter more specific routes from updates. Valid values: `enable`, `disable`.
     */
    summaryOnly: string;
}

export interface RouterBgpConfederationPeer {
    /**
     * Peer ID.
     */
    peer: string;
}

export interface RouterBgpNeighbor {
    /**
     * Enable/disable address family IPv4 for this neighbor. Valid values: `enable`, `disable`.
     */
    activate: string;
    /**
     * Enable/disable address family IPv6 for this neighbor. Valid values: `enable`, `disable`.
     */
    activate6: string;
    /**
     * Enable/disable IPv4 additional-path capability. Valid values: `send`, `receive`, `both`, `disable`.
     */
    additionalPath: string;
    /**
     * Enable/disable IPv6 additional-path capability. Valid values: `send`, `receive`, `both`, `disable`.
     */
    additionalPath6: string;
    /**
     * Number of IPv4 additional paths that can be advertised to this neighbor.
     */
    advAdditionalPath: number;
    /**
     * Number of IPv6 additional paths that can be advertised to this neighbor.
     */
    advAdditionalPath6: number;
    /**
     * Minimum interval (sec) between sending updates.
     */
    advertisementInterval: number;
    /**
     * IPv4 The maximum number of occurrence of my AS number allowed.
     */
    allowasIn: number;
    /**
     * IPv6 The maximum number of occurrence of my AS number allowed.
     */
    allowasIn6: number;
    /**
     * Enable/disable IPv4 Enable to allow my AS in AS path. Valid values: `enable`, `disable`.
     */
    allowasInEnable: string;
    /**
     * Enable/disable IPv6 Enable to allow my AS in AS path. Valid values: `enable`, `disable`.
     */
    allowasInEnable6: string;
    /**
     * Enable/disable replace peer AS with own AS for IPv4. Valid values: `enable`, `disable`.
     */
    asOverride: string;
    /**
     * Enable/disable replace peer AS with own AS for IPv6. Valid values: `enable`, `disable`.
     */
    asOverride6: string;
    /**
     * IPv4 List of attributes that should be unchanged. Valid values: `as-path`, `med`, `next-hop`.
     */
    attributeUnchanged: string;
    /**
     * IPv6 List of attributes that should be unchanged. Valid values: `as-path`, `med`, `next-hop`.
     */
    attributeUnchanged6: string;
    /**
     * Enable/disable BFD for this neighbor. Valid values: `enable`, `disable`.
     */
    bfd: string;
    /**
     * Enable/disable advertise default IPv4 route to this neighbor. Valid values: `enable`, `disable`.
     */
    capabilityDefaultOriginate: string;
    /**
     * Enable/disable advertise default IPv6 route to this neighbor. Valid values: `enable`, `disable`.
     */
    capabilityDefaultOriginate6: string;
    /**
     * Enable/disable advertise dynamic capability to this neighbor. Valid values: `enable`, `disable`.
     */
    capabilityDynamic: string;
    /**
     * Enable/disable advertise IPv4 graceful restart capability to this neighbor. Valid values: `enable`, `disable`.
     */
    capabilityGracefulRestart: string;
    /**
     * Enable/disable advertise IPv6 graceful restart capability to this neighbor. Valid values: `enable`, `disable`.
     */
    capabilityGracefulRestart6: string;
    /**
     * Accept/Send IPv4 ORF lists to/from this neighbor. Valid values: `none`, `receive`, `send`, `both`.
     */
    capabilityOrf: string;
    /**
     * Accept/Send IPv6 ORF lists to/from this neighbor. Valid values: `none`, `receive`, `send`, `both`.
     */
    capabilityOrf6: string;
    /**
     * Enable/disable advertise route refresh capability to this neighbor. Valid values: `enable`, `disable`.
     */
    capabilityRouteRefresh: string;
    /**
     * IPv6 conditional advertisement. The structure of `conditionalAdvertise6` block is documented below.
     */
    conditionalAdvertise6s?: outputs.RouterBgpNeighborConditionalAdvertise6[];
    /**
     * Conditional advertisement. The structure of `conditionalAdvertise` block is documented below.
     */
    conditionalAdvertises?: outputs.RouterBgpNeighborConditionalAdvertise[];
    /**
     * Interval (sec) for connect timer.
     */
    connectTimer: number;
    /**
     * Route map to specify criteria to originate IPv4 default.
     */
    defaultOriginateRoutemap: string;
    /**
     * Route map to specify criteria to originate IPv6 default.
     */
    defaultOriginateRoutemap6: string;
    /**
     * Description.
     */
    description: string;
    /**
     * Filter for IPv4 updates from this neighbor.
     */
    distributeListIn: string;
    /**
     * Filter for IPv6 updates from this neighbor.
     */
    distributeListIn6: string;
    /**
     * Filter for IPv4 updates to this neighbor.
     */
    distributeListOut: string;
    /**
     * Filter for IPv6 updates to this neighbor.
     */
    distributeListOut6: string;
    /**
     * Don't negotiate capabilities with this neighbor Valid values: `enable`, `disable`.
     */
    dontCapabilityNegotiate: string;
    /**
     * Enable/disable allow multi-hop EBGP neighbors. Valid values: `enable`, `disable`.
     */
    ebgpEnforceMultihop: string;
    /**
     * EBGP multihop TTL for this peer.
     */
    ebgpMultihopTtl: number;
    /**
     * BGP filter for IPv4 inbound routes.
     */
    filterListIn: string;
    /**
     * BGP filter for IPv6 inbound routes.
     */
    filterListIn6: string;
    /**
     * BGP filter for IPv4 outbound routes.
     */
    filterListOut: string;
    /**
     * BGP filter for IPv6 outbound routes.
     */
    filterListOut6: string;
    /**
     * Interval (sec) before peer considered dead.
     */
    holdtimeTimer: number;
    /**
     * Interface which is used to leak routes to target VRF.
     */
    interface: string;
    /**
     * IP/IPv6 address of neighbor.
     */
    ip: string;
    /**
     * Keep alive timer interval (sec).
     */
    keepAliveTimer: number;
    /**
     * Enable/disable failover upon link down. Valid values: `enable`, `disable`.
     */
    linkDownFailover: string;
    /**
     * Local AS number of neighbor.
     */
    localAs: number;
    /**
     * Do not prepend local-as to incoming updates. Valid values: `enable`, `disable`.
     */
    localAsNoPrepend: string;
    /**
     * Replace real AS with local-as in outgoing updates. Valid values: `enable`, `disable`.
     */
    localAsReplaceAs: string;
    /**
     * Maximum number of IPv4 prefixes to accept from this peer.
     */
    maximumPrefix: number;
    /**
     * Maximum number of IPv6 prefixes to accept from this peer.
     */
    maximumPrefix6: number;
    /**
     * Maximum IPv4 prefix threshold value (1 - 100 percent).
     */
    maximumPrefixThreshold: number;
    /**
     * Maximum IPv6 prefix threshold value (1 - 100 percent).
     */
    maximumPrefixThreshold6: number;
    /**
     * Enable/disable IPv4 Only give warning message when limit is exceeded. Valid values: `enable`, `disable`.
     */
    maximumPrefixWarningOnly: string;
    /**
     * Enable/disable IPv6 Only give warning message when limit is exceeded. Valid values: `enable`, `disable`.
     */
    maximumPrefixWarningOnly6: string;
    /**
     * Enable/disable IPv4 next-hop calculation for this neighbor. Valid values: `enable`, `disable`.
     */
    nextHopSelf: string;
    /**
     * Enable/disable IPv6 next-hop calculation for this neighbor. Valid values: `enable`, `disable`.
     */
    nextHopSelf6: string;
    /**
     * Enable/disable setting nexthop's address to interface's IPv4 address for route-reflector routes. Valid values: `enable`, `disable`.
     */
    nextHopSelfRr: string;
    /**
     * Enable/disable setting nexthop's address to interface's IPv6 address for route-reflector routes. Valid values: `enable`, `disable`.
     */
    nextHopSelfRr6: string;
    /**
     * Enable/disable override result of capability negotiation. Valid values: `enable`, `disable`.
     */
    overrideCapability: string;
    /**
     * Enable/disable sending of open messages to this neighbor. Valid values: `enable`, `disable`.
     */
    passive: string;
    /**
     * Password used in MD5 authentication.
     */
    password?: string;
    /**
     * IPv4 Inbound filter for updates from this neighbor.
     */
    prefixListIn: string;
    /**
     * IPv6 Inbound filter for updates from this neighbor.
     */
    prefixListIn6: string;
    /**
     * IPv4 Outbound filter for updates to this neighbor.
     */
    prefixListOut: string;
    /**
     * IPv6 Outbound filter for updates to this neighbor.
     */
    prefixListOut6: string;
    /**
     * AS number of neighbor.
     */
    remoteAs: number;
    /**
     * Enable/disable remove private AS number from IPv4 outbound updates. Valid values: `enable`, `disable`.
     */
    removePrivateAs: string;
    /**
     * Enable/disable remove private AS number from IPv6 outbound updates. Valid values: `enable`, `disable`.
     */
    removePrivateAs6: string;
    /**
     * Graceful restart delay time (sec, 0 = global default).
     */
    restartTime: number;
    /**
     * Time to retain stale routes.
     */
    retainStaleTime: number;
    /**
     * IPv4 Inbound route map filter.
     */
    routeMapIn: string;
    /**
     * IPv6 Inbound route map filter.
     */
    routeMapIn6: string;
    /**
     * IPv4 Outbound route map filter.
     */
    routeMapOut: string;
    /**
     * IPv6 Outbound route map filter.
     */
    routeMapOut6: string;
    /**
     * IPv6 outbound route map filter if the peer is preferred.
     */
    routeMapOut6Preferable: string;
    /**
     * IPv4 outbound route map filter if the peer is preferred.
     */
    routeMapOutPreferable: string;
    /**
     * Enable/disable IPv4 AS route reflector client. Valid values: `enable`, `disable`.
     */
    routeReflectorClient: string;
    /**
     * Enable/disable IPv6 AS route reflector client. Valid values: `enable`, `disable`.
     */
    routeReflectorClient6: string;
    /**
     * Enable/disable IPv4 AS route server client. Valid values: `enable`, `disable`.
     */
    routeServerClient: string;
    /**
     * Enable/disable IPv6 AS route server client. Valid values: `enable`, `disable`.
     */
    routeServerClient6: string;
    /**
     * IPv4 Send community attribute to neighbor. Valid values: `standard`, `extended`, `both`, `disable`.
     */
    sendCommunity: string;
    /**
     * IPv6 Send community attribute to neighbor. Valid values: `standard`, `extended`, `both`, `disable`.
     */
    sendCommunity6: string;
    /**
     * Enable/disable shutdown this neighbor. Valid values: `enable`, `disable`.
     */
    shutdown: string;
    /**
     * Enable/disable allow IPv4 inbound soft reconfiguration. Valid values: `enable`, `disable`.
     */
    softReconfiguration: string;
    /**
     * Enable/disable allow IPv6 inbound soft reconfiguration. Valid values: `enable`, `disable`.
     */
    softReconfiguration6: string;
    /**
     * Enable/disable stale route after neighbor down. Valid values: `enable`, `disable`.
     */
    staleRoute: string;
    /**
     * Enable/disable strict capability matching. Valid values: `enable`, `disable`.
     */
    strictCapabilityMatch: string;
    /**
     * IPv4 Route map to selectively unsuppress suppressed routes.
     */
    unsuppressMap: string;
    /**
     * IPv6 Route map to selectively unsuppress suppressed routes.
     */
    unsuppressMap6: string;
    /**
     * Interface to use as source IP/IPv6 address of TCP connections.
     */
    updateSource: string;
    /**
     * Neighbor weight.
     */
    weight: number;
}

export interface RouterBgpNeighborConditionalAdvertise {
    /**
     * Name of advertising route map.
     */
    advertiseRoutemap: string;
    /**
     * Name of condition route map.
     */
    conditionRoutemap: string;
    /**
     * Type of condition. Valid values: `exist`, `non-exist`.
     */
    conditionType: string;
}

export interface RouterBgpNeighborConditionalAdvertise6 {
    /**
     * Name of advertising route map.
     */
    advertiseRoutemap: string;
    /**
     * Name of condition route map.
     */
    conditionRoutemap: string;
    /**
     * Type of condition. Valid values: `exist`, `non-exist`.
     */
    conditionType: string;
}

export interface RouterBgpNeighborGroup {
    /**
     * Enable/disable address family IPv4 for this neighbor. Valid values: `enable`, `disable`.
     */
    activate: string;
    /**
     * Enable/disable address family IPv6 for this neighbor. Valid values: `enable`, `disable`.
     */
    activate6: string;
    /**
     * Enable/disable IPv4 additional-path capability. Valid values: `send`, `receive`, `both`, `disable`.
     */
    additionalPath: string;
    /**
     * Enable/disable IPv6 additional-path capability. Valid values: `send`, `receive`, `both`, `disable`.
     */
    additionalPath6: string;
    /**
     * Number of IPv4 additional paths that can be advertised to this neighbor.
     */
    advAdditionalPath: number;
    /**
     * Number of IPv6 additional paths that can be advertised to this neighbor.
     */
    advAdditionalPath6: number;
    /**
     * Minimum interval (sec) between sending updates.
     */
    advertisementInterval: number;
    /**
     * IPv4 The maximum number of occurrence of my AS number allowed.
     */
    allowasIn: number;
    /**
     * IPv6 The maximum number of occurrence of my AS number allowed.
     */
    allowasIn6: number;
    /**
     * Enable/disable IPv4 Enable to allow my AS in AS path. Valid values: `enable`, `disable`.
     */
    allowasInEnable: string;
    /**
     * Enable/disable IPv6 Enable to allow my AS in AS path. Valid values: `enable`, `disable`.
     */
    allowasInEnable6: string;
    /**
     * Enable/disable replace peer AS with own AS for IPv4. Valid values: `enable`, `disable`.
     */
    asOverride: string;
    /**
     * Enable/disable replace peer AS with own AS for IPv6. Valid values: `enable`, `disable`.
     */
    asOverride6: string;
    /**
     * IPv4 List of attributes that should be unchanged. Valid values: `as-path`, `med`, `next-hop`.
     */
    attributeUnchanged: string;
    /**
     * IPv6 List of attributes that should be unchanged. Valid values: `as-path`, `med`, `next-hop`.
     */
    attributeUnchanged6: string;
    /**
     * Enable/disable BFD for this neighbor. Valid values: `enable`, `disable`.
     */
    bfd: string;
    /**
     * Enable/disable advertise default IPv4 route to this neighbor. Valid values: `enable`, `disable`.
     */
    capabilityDefaultOriginate: string;
    /**
     * Enable/disable advertise default IPv6 route to this neighbor. Valid values: `enable`, `disable`.
     */
    capabilityDefaultOriginate6: string;
    /**
     * Enable/disable advertise dynamic capability to this neighbor. Valid values: `enable`, `disable`.
     */
    capabilityDynamic: string;
    /**
     * Enable/disable advertise IPv4 graceful restart capability to this neighbor. Valid values: `enable`, `disable`.
     */
    capabilityGracefulRestart: string;
    /**
     * Enable/disable advertise IPv6 graceful restart capability to this neighbor. Valid values: `enable`, `disable`.
     */
    capabilityGracefulRestart6: string;
    /**
     * Accept/Send IPv4 ORF lists to/from this neighbor. Valid values: `none`, `receive`, `send`, `both`.
     */
    capabilityOrf: string;
    /**
     * Accept/Send IPv6 ORF lists to/from this neighbor. Valid values: `none`, `receive`, `send`, `both`.
     */
    capabilityOrf6: string;
    /**
     * Enable/disable advertise route refresh capability to this neighbor. Valid values: `enable`, `disable`.
     */
    capabilityRouteRefresh: string;
    /**
     * Interval (sec) for connect timer.
     */
    connectTimer: number;
    /**
     * Route map to specify criteria to originate IPv4 default.
     */
    defaultOriginateRoutemap: string;
    /**
     * Route map to specify criteria to originate IPv6 default.
     */
    defaultOriginateRoutemap6: string;
    /**
     * Description.
     */
    description: string;
    /**
     * Filter for IPv4 updates from this neighbor.
     */
    distributeListIn: string;
    /**
     * Filter for IPv6 updates from this neighbor.
     */
    distributeListIn6: string;
    /**
     * Filter for IPv4 updates to this neighbor.
     */
    distributeListOut: string;
    /**
     * Filter for IPv6 updates to this neighbor.
     */
    distributeListOut6: string;
    /**
     * Don't negotiate capabilities with this neighbor Valid values: `enable`, `disable`.
     */
    dontCapabilityNegotiate: string;
    /**
     * Enable/disable allow multi-hop EBGP neighbors. Valid values: `enable`, `disable`.
     */
    ebgpEnforceMultihop: string;
    /**
     * EBGP multihop TTL for this peer.
     */
    ebgpMultihopTtl: number;
    /**
     * BGP filter for IPv4 inbound routes.
     */
    filterListIn: string;
    /**
     * BGP filter for IPv6 inbound routes.
     */
    filterListIn6: string;
    /**
     * BGP filter for IPv4 outbound routes.
     */
    filterListOut: string;
    /**
     * BGP filter for IPv6 outbound routes.
     */
    filterListOut6: string;
    /**
     * Interval (sec) before peer considered dead.
     */
    holdtimeTimer: number;
    /**
     * Interface which is used to leak routes to target VRF.
     */
    interface: string;
    /**
     * Keep alive timer interval (sec).
     */
    keepAliveTimer: number;
    /**
     * Enable/disable failover upon link down. Valid values: `enable`, `disable`.
     */
    linkDownFailover: string;
    /**
     * Local AS number of neighbor.
     */
    localAs: number;
    /**
     * Do not prepend local-as to incoming updates. Valid values: `enable`, `disable`.
     */
    localAsNoPrepend: string;
    /**
     * Replace real AS with local-as in outgoing updates. Valid values: `enable`, `disable`.
     */
    localAsReplaceAs: string;
    /**
     * Maximum number of IPv4 prefixes to accept from this peer.
     */
    maximumPrefix: number;
    /**
     * Maximum number of IPv6 prefixes to accept from this peer.
     */
    maximumPrefix6: number;
    /**
     * Maximum IPv4 prefix threshold value (1 - 100 percent).
     */
    maximumPrefixThreshold: number;
    /**
     * Maximum IPv6 prefix threshold value (1 - 100 percent).
     */
    maximumPrefixThreshold6: number;
    /**
     * Enable/disable IPv4 Only give warning message when limit is exceeded. Valid values: `enable`, `disable`.
     */
    maximumPrefixWarningOnly: string;
    /**
     * Enable/disable IPv6 Only give warning message when limit is exceeded. Valid values: `enable`, `disable`.
     */
    maximumPrefixWarningOnly6: string;
    /**
     * Distribute list entry name.
     */
    name: string;
    /**
     * Enable/disable IPv4 next-hop calculation for this neighbor. Valid values: `enable`, `disable`.
     */
    nextHopSelf: string;
    /**
     * Enable/disable IPv6 next-hop calculation for this neighbor. Valid values: `enable`, `disable`.
     */
    nextHopSelf6: string;
    /**
     * Enable/disable setting nexthop's address to interface's IPv4 address for route-reflector routes. Valid values: `enable`, `disable`.
     */
    nextHopSelfRr: string;
    /**
     * Enable/disable setting nexthop's address to interface's IPv6 address for route-reflector routes. Valid values: `enable`, `disable`.
     */
    nextHopSelfRr6: string;
    /**
     * Enable/disable override result of capability negotiation. Valid values: `enable`, `disable`.
     */
    overrideCapability: string;
    /**
     * Enable/disable sending of open messages to this neighbor. Valid values: `enable`, `disable`.
     */
    passive: string;
    /**
     * IPv4 Inbound filter for updates from this neighbor.
     */
    prefixListIn: string;
    /**
     * IPv6 Inbound filter for updates from this neighbor.
     */
    prefixListIn6: string;
    /**
     * IPv4 Outbound filter for updates to this neighbor.
     */
    prefixListOut: string;
    /**
     * IPv6 Outbound filter for updates to this neighbor.
     */
    prefixListOut6: string;
    /**
     * AS number of neighbor.
     */
    remoteAs: number;
    /**
     * Enable/disable remove private AS number from IPv4 outbound updates. Valid values: `enable`, `disable`.
     */
    removePrivateAs: string;
    /**
     * Enable/disable remove private AS number from IPv6 outbound updates. Valid values: `enable`, `disable`.
     */
    removePrivateAs6: string;
    /**
     * Graceful restart delay time (sec, 0 = global default).
     */
    restartTime: number;
    /**
     * Time to retain stale routes.
     */
    retainStaleTime: number;
    /**
     * IPv4 Inbound route map filter.
     */
    routeMapIn: string;
    /**
     * IPv6 Inbound route map filter.
     */
    routeMapIn6: string;
    /**
     * IPv4 Outbound route map filter.
     */
    routeMapOut: string;
    /**
     * IPv6 Outbound route map filter.
     */
    routeMapOut6: string;
    /**
     * IPv6 outbound route map filter if the peer is preferred.
     */
    routeMapOut6Preferable: string;
    /**
     * IPv4 outbound route map filter if the peer is preferred.
     */
    routeMapOutPreferable: string;
    /**
     * Enable/disable IPv4 AS route reflector client. Valid values: `enable`, `disable`.
     */
    routeReflectorClient: string;
    /**
     * Enable/disable IPv6 AS route reflector client. Valid values: `enable`, `disable`.
     */
    routeReflectorClient6: string;
    /**
     * Enable/disable IPv4 AS route server client. Valid values: `enable`, `disable`.
     */
    routeServerClient: string;
    /**
     * Enable/disable IPv6 AS route server client. Valid values: `enable`, `disable`.
     */
    routeServerClient6: string;
    /**
     * IPv4 Send community attribute to neighbor. Valid values: `standard`, `extended`, `both`, `disable`.
     */
    sendCommunity: string;
    /**
     * IPv6 Send community attribute to neighbor. Valid values: `standard`, `extended`, `both`, `disable`.
     */
    sendCommunity6: string;
    /**
     * Enable/disable shutdown this neighbor. Valid values: `enable`, `disable`.
     */
    shutdown: string;
    /**
     * Enable/disable allow IPv4 inbound soft reconfiguration. Valid values: `enable`, `disable`.
     */
    softReconfiguration: string;
    /**
     * Enable/disable allow IPv6 inbound soft reconfiguration. Valid values: `enable`, `disable`.
     */
    softReconfiguration6: string;
    /**
     * Enable/disable stale route after neighbor down. Valid values: `enable`, `disable`.
     */
    staleRoute: string;
    /**
     * Enable/disable strict capability matching. Valid values: `enable`, `disable`.
     */
    strictCapabilityMatch: string;
    /**
     * IPv4 Route map to selectively unsuppress suppressed routes.
     */
    unsuppressMap: string;
    /**
     * IPv6 Route map to selectively unsuppress suppressed routes.
     */
    unsuppressMap6: string;
    /**
     * Interface to use as source IP/IPv6 address of TCP connections.
     */
    updateSource: string;
    /**
     * Neighbor weight.
     */
    weight: number;
}

export interface RouterBgpNeighborRange {
    /**
     * ID.
     */
    id: number;
    /**
     * Maximum number of neighbors.
     */
    maxNeighborNum: number;
    /**
     * Neighbor group name.
     */
    neighborGroup: string;
    /**
     * Network prefix.
     */
    prefix: string;
}

export interface RouterBgpNeighborRange6 {
    /**
     * ID.
     */
    id: number;
    /**
     * Maximum number of neighbors.
     */
    maxNeighborNum: number;
    /**
     * Neighbor group name.
     */
    neighborGroup: string;
    /**
     * Network IPv6 prefix.
     */
    prefix6: string;
}

export interface RouterBgpNetwork {
    /**
     * Enable/disable route as backdoor. Valid values: `enable`, `disable`.
     */
    backdoor: string;
    /**
     * ID.
     */
    id: number;
    /**
     * Configure insurance of BGP network route existence in IGP. Valid values: `global`, `enable`, `disable`.
     */
    networkImportCheck: string;
    /**
     * Network prefix.
     */
    prefix: string;
    /**
     * Route map of VRF leaking.
     */
    routeMap: string;
}

export interface RouterBgpNetwork6 {
    /**
     * Enable/disable route as backdoor. Valid values: `enable`, `disable`.
     */
    backdoor: string;
    /**
     * ID.
     */
    id: number;
    /**
     * Configure insurance of BGP network route existence in IGP. Valid values: `global`, `enable`, `disable`.
     */
    networkImportCheck: string;
    /**
     * Network IPv6 prefix.
     */
    prefix6: string;
    /**
     * Route map of VRF leaking.
     */
    routeMap: string;
}

export interface RouterBgpRedistribute {
    /**
     * Distribute list entry name.
     */
    name: string;
    /**
     * Route map of VRF leaking.
     */
    routeMap: string;
    /**
     * Status Valid values: `enable`, `disable`.
     */
    status: string;
}

export interface RouterBgpRedistribute6 {
    /**
     * Distribute list entry name.
     */
    name: string;
    /**
     * Route map of VRF leaking.
     */
    routeMap: string;
    /**
     * Status Valid values: `enable`, `disable`.
     */
    status: string;
}

export interface RouterBgpVrfLeak {
    /**
     * Target VRF table. The structure of `target` block is documented below.
     */
    targets?: outputs.RouterBgpVrfLeakTarget[];
    /**
     * Target VRF ID <0 - 31>.
     */
    vrf: string;
}

export interface RouterBgpVrfLeak6 {
    /**
     * Target VRF table. The structure of `target` block is documented below.
     */
    targets?: outputs.RouterBgpVrfLeak6Target[];
    /**
     * Target VRF ID <0 - 31>.
     */
    vrf: string;
}

export interface RouterBgpVrfLeak6Target {
    /**
     * Interface which is used to leak routes to target VRF.
     */
    interface: string;
    /**
     * Route map of VRF leaking.
     */
    routeMap: string;
    /**
     * Target VRF ID <0 - 31>.
     */
    vrf: string;
}

export interface RouterBgpVrfLeakTarget {
    /**
     * Interface which is used to leak routes to target VRF.
     */
    interface: string;
    /**
     * Route map of VRF leaking.
     */
    routeMap: string;
    /**
     * Target VRF ID <0 - 31>.
     */
    vrf: string;
}

export interface RouterCommunityListRule {
    /**
     * Permit or deny route-based operations, based on the route's COMMUNITY attribute. Valid values: `deny`, `permit`.
     */
    action: string;
    /**
     * ID.
     */
    id: number;
    /**
     * Community specifications for matching a reserved community.
     */
    match: string;
    /**
     * Ordered list of COMMUNITY attributes as a regular expression.
     */
    regexp: string;
}

export interface RouterIsisIsisInterface {
    /**
     * Authentication key-chain for level 1 PDUs.
     */
    authKeychainL1: string;
    /**
     * Authentication key-chain for level 2 PDUs.
     */
    authKeychainL2: string;
    /**
     * Level 1 authentication mode. Valid values: `md5`, `password`.
     */
    authModeL1: string;
    /**
     * Level 2 authentication mode. Valid values: `md5`, `password`.
     */
    authModeL2: string;
    /**
     * Authentication password for level 1 PDUs.
     */
    authPasswordL1?: string;
    /**
     * Authentication password for level 2 PDUs.
     */
    authPasswordL2?: string;
    /**
     * Enable/disable authentication send-only for level 1 PDUs. Valid values: `enable`, `disable`.
     */
    authSendOnlyL1: string;
    /**
     * Enable/disable authentication send-only for level 2 PDUs. Valid values: `enable`, `disable`.
     */
    authSendOnlyL2: string;
    /**
     * IS-IS interface's circuit type Valid values: `level-1-2`, `level-1`, `level-2`.
     */
    circuitType: string;
    /**
     * Level 1 CSNP interval.
     */
    csnpIntervalL1: number;
    /**
     * Level 2 CSNP interval.
     */
    csnpIntervalL2: number;
    /**
     * Level 1 hello interval.
     */
    helloIntervalL1: number;
    /**
     * Level 2 hello interval.
     */
    helloIntervalL2: number;
    /**
     * Level 1 multiplier for Hello holding time.
     */
    helloMultiplierL1: number;
    /**
     * Level 2 multiplier for Hello holding time.
     */
    helloMultiplierL2: number;
    /**
     * Enable/disable padding to IS-IS hello packets. Valid values: `enable`, `disable`.
     */
    helloPadding: string;
    /**
     * LSP transmission interval (milliseconds).
     */
    lspInterval: number;
    /**
     * LSP retransmission interval (sec).
     */
    lspRetransmitInterval: number;
    /**
     * Enable/disable IS-IS mesh group. Valid values: `enable`, `disable`.
     */
    meshGroup: string;
    /**
     * Mesh group ID <0-4294967295>, 0: mesh-group blocked.
     */
    meshGroupId: number;
    /**
     * Level 1 metric for interface.
     */
    metricL1: number;
    /**
     * Level 2 metric for interface.
     */
    metricL2: number;
    /**
     * IS-IS interface name.
     */
    name: string;
    /**
     * IS-IS interface's network type Valid values: `broadcast`, `point-to-point`, `loopback`.
     */
    networkType: string;
    /**
     * Level 1 priority.
     */
    priorityL1: number;
    /**
     * Level 2 priority.
     */
    priorityL2: number;
    /**
     * Enable/disable redistribution. Valid values: `enable`, `disable`.
     */
    status: string;
    /**
     * Enable/disable IPv6 interface for IS-IS. Valid values: `enable`, `disable`.
     */
    status6: string;
    /**
     * Level 1 wide metric for interface.
     */
    wideMetricL1: number;
    /**
     * Level 2 wide metric for interface.
     */
    wideMetricL2: number;
}

export interface RouterIsisIsisNet {
    /**
     * Prefix entry ID.
     */
    id: number;
    /**
     * IS-IS net xx.xxxx. ... .xxxx.xx.
     */
    net: string;
}

export interface RouterIsisRedistribute {
    /**
     * Level. Valid values: `level-1-2`, `level-1`, `level-2`.
     */
    level: string;
    /**
     * Metric.
     */
    metric: number;
    /**
     * Metric type. Valid values: `external`, `internal`.
     */
    metricType: string;
    /**
     * Protocol name.
     */
    protocol: string;
    /**
     * Route map name.
     */
    routemap: string;
    /**
     * Enable/disable redistribution. Valid values: `enable`, `disable`.
     */
    status: string;
}

export interface RouterIsisRedistribute6 {
    /**
     * Level. Valid values: `level-1-2`, `level-1`, `level-2`.
     */
    level: string;
    /**
     * Metric.
     */
    metric: number;
    /**
     * Metric type. Valid values: `external`, `internal`.
     */
    metricType: string;
    /**
     * Protocol name.
     */
    protocol: string;
    /**
     * Route map name.
     */
    routemap: string;
    /**
     * Enable/disable redistribution. Valid values: `enable`, `disable`.
     */
    status: string;
}

export interface RouterIsisSummaryAddress {
    /**
     * Prefix entry ID.
     */
    id: number;
    /**
     * Level. Valid values: `level-1-2`, `level-1`, `level-2`.
     */
    level: string;
    /**
     * Prefix.
     */
    prefix: string;
}

export interface RouterIsisSummaryAddress6 {
    /**
     * Prefix entry ID.
     */
    id: number;
    /**
     * Level. Valid values: `level-1-2`, `level-1`, `level-2`.
     */
    level: string;
    /**
     * IPv6 prefix.
     */
    prefix6: string;
}

export interface RouterKeyChainKey {
    /**
     * Lifetime of received authentication key (format: hh:mm:ss day month year).
     */
    acceptLifetime: string;
    /**
     * Cryptographic algorithm. Valid values: `md5`, `hmac-sha1`, `hmac-sha256`, `hmac-sha384`, `hmac-sha512`.
     */
    algorithm: string;
    /**
     * Key ID (0 - 2147483647).
     */
    id: number;
    /**
     * Password for the key (max. = 35 characters).
     */
    keyString: string;
    /**
     * Lifetime of sent authentication key (format: hh:mm:ss day month year).
     */
    sendLifetime: string;
}

export interface RouterMulticast6Interface {
    /**
     * Time before old neighbour information expires (1 - 65535 sec, default = 105).
     */
    helloHoldtime: number;
    /**
     * Interval between sending PIM hello messages  (1 - 65535 sec, default = 30)..
     */
    helloInterval: number;
    /**
     * Interface name.
     */
    name: string;
}

export interface RouterMulticast6PimSmGlobal {
    /**
     * Limit of packets/sec per source registered through this RP (0 means unlimited).
     */
    registerRateLimit: number;
    /**
     * Statically configured RP addresses. The structure of `rpAddress` block is documented below.
     */
    rpAddresses?: outputs.RouterMulticast6PimSmGlobalRpAddress[];
}

export interface RouterMulticast6PimSmGlobalRpAddress {
    /**
     * ID of the entry.
     */
    id: number;
    /**
     * RP router IPv6 address.
     */
    ip6Address: string;
}

export interface RouterMulticastFlowFlow {
    /**
     * Multicast group IP address.
     */
    groupAddr: string;
    /**
     * Flow ID.
     */
    id: number;
    /**
     * Multicast source IP address.
     */
    sourceAddr: string;
}

export interface RouterMulticastInterface {
    /**
     * Enable/disable Protocol Independent Multicast (PIM) Bidirectional Forwarding Detection (BFD). Valid values: `enable`, `disable`.
     */
    bfd: string;
    /**
     * Exclude GenID from hello packets (compatibility with old Cisco IOS). Valid values: `enable`, `disable`.
     */
    ciscoExcludeGenid: string;
    /**
     * DR election priority.
     */
    drPriority: number;
    /**
     * Time before old neighbor information expires (0 - 65535 sec, default = 105).
     */
    helloHoldtime: number;
    /**
     * Interval between sending PIM hello messages (0 - 65535 sec, default = 30).
     */
    helloInterval: number;
    /**
     * IGMP configuration options. The structure of `igmp` block is documented below.
     */
    igmp?: outputs.RouterMulticastInterfaceIgmp;
    /**
     * Join multicast groups. The structure of `joinGroup` block is documented below.
     */
    joinGroups?: outputs.RouterMulticastInterfaceJoinGroup[];
    /**
     * Acceptable source for multicast group.
     */
    multicastFlow: string;
    /**
     * Interface name.
     */
    name: string;
    /**
     * Routers acknowledged as neighbor routers.
     */
    neighbourFilter: string;
    /**
     * Enable/disable listening to IGMP but not participating in PIM. Valid values: `enable`, `disable`.
     */
    passive: string;
    /**
     * PIM operation mode. Valid values: `sparse-mode`, `dense-mode`.
     */
    pimMode: string;
    /**
     * Delay flooding packets on this interface (100 - 5000 msec, default = 500).
     */
    propagationDelay: number;
    /**
     * Enable/disable compete to become RP in elections. Valid values: `enable`, `disable`.
     */
    rpCandidate: string;
    /**
     * Multicast groups managed by this RP.
     */
    rpCandidateGroup: string;
    /**
     * RP candidate advertisement interval (1 - 16383 sec, default = 60).
     */
    rpCandidateInterval: number;
    /**
     * Router's priority as RP.
     */
    rpCandidatePriority: number;
    /**
     * Enable/disable fail back for RPF neighbor query. Valid values: `enable`, `disable`.
     */
    rpfNbrFailBack: string;
    /**
     * Filter for fail back RPF neighbors.
     */
    rpfNbrFailBackFilter: string;
    /**
     * Interval between sending state-refresh packets (1 - 100 sec, default = 60).
     */
    stateRefreshInterval: number;
    /**
     * Statically set multicast groups to forward out.
     */
    staticGroup: string;
    /**
     * Minimum TTL of multicast packets that will be forwarded (applied only to new multicast routes) (1 - 255, default = 1).
     */
    ttlThreshold: number;
}

export interface RouterMulticastInterfaceIgmp {
    /**
     * Groups IGMP hosts are allowed to join.
     */
    accessGroup: string;
    /**
     * Groups to drop membership for immediately after receiving IGMPv2 leave.
     */
    immediateLeaveGroup: string;
    /**
     * Number of group specific queries before removing group (2 - 7, default = 2).
     */
    lastMemberQueryCount: number;
    /**
     * Timeout between IGMPv2 leave and removing group (1 - 65535 msec, default = 1000).
     */
    lastMemberQueryInterval: number;
    /**
     * Interval between queries to IGMP hosts (1 - 65535 sec, default = 125).
     */
    queryInterval: number;
    /**
     * Maximum time to wait for a IGMP query response (1 - 25 sec, default = 10).
     */
    queryMaxResponseTime: number;
    /**
     * Timeout between queries before becoming querier for network (60 - 900, default = 255).
     */
    queryTimeout: number;
    /**
     * Enable/disable require IGMP packets contain router alert option. Valid values: `enable`, `disable`.
     */
    routerAlertCheck: string;
    /**
     * Maximum version of IGMP to support. Valid values: `3`, `2`, `1`.
     */
    version: string;
}

export interface RouterMulticastInterfaceJoinGroup {
    /**
     * Multicast group IP address.
     */
    address: string;
}

export interface RouterMulticastPimSmGlobal {
    /**
     * Sources allowed to register packets with this Rendezvous Point (RP).
     */
    acceptRegisterList: string;
    /**
     * Sources allowed to send multicast traffic.
     */
    acceptSourceList: string;
    /**
     * Enable/disable accept BSR quick refresh packets from neighbors. Valid values: `enable`, `disable`.
     */
    bsrAllowQuickRefresh: string;
    /**
     * Enable/disable allowing this router to become a bootstrap router (BSR). Valid values: `enable`, `disable`.
     */
    bsrCandidate: string;
    /**
     * BSR hash length (0 - 32, default = 10).
     */
    bsrHash: number;
    /**
     * Interface to advertise as candidate BSR.
     */
    bsrInterface: string;
    /**
     * BSR priority (0 - 255, default = 0).
     */
    bsrPriority: number;
    /**
     * Enable/disable making candidate RP compatible with old Cisco IOS. Valid values: `enable`, `disable`.
     */
    ciscoCrpPrefix: string;
    /**
     * Use only hash for RP selection (compatibility with old Cisco IOS). Valid values: `enable`, `disable`.
     */
    ciscoIgnoreRpSetPriority: string;
    /**
     * Checksum entire register packet(for old Cisco IOS compatibility). Valid values: `enable`, `disable`.
     */
    ciscoRegisterChecksum: string;
    /**
     * Cisco register checksum only these groups.
     */
    ciscoRegisterChecksumGroup: string;
    /**
     * Join/prune holdtime (1 - 65535, default = 210).
     */
    joinPruneHoldtime: number;
    /**
     * Period of time between sending periodic PIM join/prune messages in seconds (1 - 65535, default = 60).
     */
    messageInterval: number;
    /**
     * Maximum retries of null register (1 - 20, default = 1).
     */
    nullRegisterRetries: number;
    /**
     * Limit of packets/sec per source registered through this RP (0 - 65535, default = 0 which means unlimited).
     */
    registerRateLimit: number;
    /**
     * Enable/disable check RP is reachable before registering packets. Valid values: `enable`, `disable`.
     */
    registerRpReachability: string;
    /**
     * Override source address in register packets. Valid values: `disable`, `interface`, `ip-address`.
     */
    registerSource: string;
    /**
     * Override with primary interface address.
     */
    registerSourceInterface: string;
    /**
     * Override with local IP address.
     */
    registerSourceIp: string;
    /**
     * Period of time to honor register-stop message (1 - 65535 sec, default = 60).
     */
    registerSupression: number;
    /**
     * Statically configure RP addresses. The structure of `rpAddress` block is documented below.
     */
    rpAddresses?: outputs.RouterMulticastPimSmGlobalRpAddress[];
    /**
     * Timeout for RP receiving data on (S,G) tree (1 - 65535 sec, default = 185).
     */
    rpRegisterKeepalive: number;
    /**
     * Enable/disable switching to source specific trees. Valid values: `enable`, `disable`.
     */
    sptThreshold: string;
    /**
     * Groups allowed to switch to source tree.
     */
    sptThresholdGroup: string;
    /**
     * Enable/disable source specific multicast. Valid values: `enable`, `disable`.
     */
    ssm: string;
    /**
     * Groups allowed to source specific multicast.
     */
    ssmRange: string;
}

export interface RouterMulticastPimSmGlobalRpAddress {
    /**
     * Groups to use this RP.
     */
    group: string;
    /**
     * ID.
     */
    id: number;
    /**
     * RP router address.
     */
    ipAddress: string;
}

export interface RouterOspf6Area {
    /**
     * Authentication mode. Valid values: `none`, `ah`, `esp`, `area`.
     */
    authentication: string;
    /**
     * Summary default cost of stub or NSSA area.
     */
    defaultCost: number;
    /**
     * Summary address entry ID.
     */
    id: string;
    /**
     * Authentication algorithm. Valid values: `md5`, `sha1`, `sha256`, `sha384`, `sha512`.
     */
    ipsecAuthAlg: string;
    /**
     * Encryption algorithm. Valid values: `null`, `des`, `3des`, `aes128`, `aes192`, `aes256`.
     */
    ipsecEncAlg: string;
    /**
     * IPsec authentication and encryption keys. The structure of `ipsecKeys` block is documented below.
     */
    ipsecKeys?: outputs.RouterOspf6AreaIpsecKey[];
    /**
     * Key roll-over interval.
     */
    keyRolloverInterval: number;
    /**
     * Enable/disable originate type 7 default into NSSA area. Valid values: `enable`, `disable`.
     */
    nssaDefaultInformationOriginate: string;
    /**
     * OSPFv3 default metric.
     */
    nssaDefaultInformationOriginateMetric: number;
    /**
     * OSPFv3 metric type for default routes. Valid values: `1`, `2`.
     */
    nssaDefaultInformationOriginateMetricType: string;
    /**
     * Enable/disable redistribute into NSSA area. Valid values: `enable`, `disable`.
     */
    nssaRedistribution: string;
    /**
     * NSSA translator role type. Valid values: `candidate`, `never`, `always`.
     */
    nssaTranslatorRole: string;
    /**
     * OSPF6 area range configuration. The structure of `range` block is documented below.
     */
    ranges?: outputs.RouterOspf6AreaRange[];
    /**
     * Stub summary setting. Valid values: `no-summary`, `summary`.
     */
    stubType: string;
    /**
     * Area type setting. Valid values: `regular`, `nssa`, `stub`.
     */
    type: string;
    /**
     * OSPF6 virtual link configuration. The structure of `virtualLink` block is documented below.
     */
    virtualLinks?: outputs.RouterOspf6AreaVirtualLink[];
}

export interface RouterOspf6AreaIpsecKey {
    /**
     * Authentication key.
     */
    authKey?: string;
    /**
     * Encryption key.
     */
    encKey?: string;
    /**
     * Security Parameters Index.
     */
    spi: number;
}

export interface RouterOspf6AreaRange {
    /**
     * Enable/disable advertise status. Valid values: `disable`, `enable`.
     */
    advertise: string;
    /**
     * Summary address entry ID.
     */
    id: number;
    /**
     * IPv6 prefix.
     */
    prefix6: string;
}

export interface RouterOspf6AreaVirtualLink {
    /**
     * Authentication mode. Valid values: `none`, `ah`, `esp`, `area`.
     */
    authentication: string;
    /**
     * Dead interval.
     */
    deadInterval: number;
    /**
     * Hello interval.
     */
    helloInterval: number;
    /**
     * Authentication algorithm. Valid values: `md5`, `sha1`, `sha256`, `sha384`, `sha512`.
     */
    ipsecAuthAlg: string;
    /**
     * Encryption algorithm. Valid values: `null`, `des`, `3des`, `aes128`, `aes192`, `aes256`.
     */
    ipsecEncAlg: string;
    /**
     * IPsec authentication and encryption keys. The structure of `ipsecKeys` block is documented below.
     */
    ipsecKeys?: outputs.RouterOspf6AreaVirtualLinkIpsecKey[];
    /**
     * Key roll-over interval.
     */
    keyRolloverInterval: number;
    /**
     * Passive interface name.
     */
    name: string;
    /**
     * A.B.C.D, peer router ID.
     */
    peer: string;
    /**
     * Retransmit interval.
     */
    retransmitInterval: number;
    /**
     * Transmit delay.
     */
    transmitDelay: number;
}

export interface RouterOspf6AreaVirtualLinkIpsecKey {
    /**
     * Authentication key.
     */
    authKey?: string;
    /**
     * Encryption key.
     */
    encKey?: string;
    /**
     * Security Parameters Index.
     */
    spi: number;
}

export interface RouterOspf6Ospf6Interface {
    /**
     * A.B.C.D, in IPv4 address format.
     */
    areaId: string;
    /**
     * Authentication mode. Valid values: `none`, `ah`, `esp`, `area`.
     */
    authentication: string;
    /**
     * Enable/disable Bidirectional Forwarding Detection (BFD). Valid values: `global`, `enable`, `disable`.
     */
    bfd: string;
    /**
     * Cost of the interface, value range from 0 to 65535, 0 means auto-cost.
     */
    cost: number;
    /**
     * Dead interval.
     */
    deadInterval: number;
    /**
     * Hello interval.
     */
    helloInterval: number;
    /**
     * Configuration interface name.
     */
    interface: string;
    /**
     * Authentication algorithm. Valid values: `md5`, `sha1`, `sha256`, `sha384`, `sha512`.
     */
    ipsecAuthAlg: string;
    /**
     * Encryption algorithm. Valid values: `null`, `des`, `3des`, `aes128`, `aes192`, `aes256`.
     */
    ipsecEncAlg: string;
    /**
     * IPsec authentication and encryption keys. The structure of `ipsecKeys` block is documented below.
     */
    ipsecKeys?: outputs.RouterOspf6Ospf6InterfaceIpsecKey[];
    /**
     * Key roll-over interval.
     */
    keyRolloverInterval: number;
    /**
     * MTU for OSPFv3 packets.
     */
    mtu: number;
    /**
     * Enable/disable ignoring MTU field in DBD packets. Valid values: `enable`, `disable`.
     */
    mtuIgnore: string;
    /**
     * Passive interface name.
     */
    name: string;
    /**
     * OSPFv3 neighbors are used when OSPFv3 runs on non-broadcast media The structure of `neighbor` block is documented below.
     */
    neighbors?: outputs.RouterOspf6Ospf6InterfaceNeighbor[];
    /**
     * Network type. Valid values: `broadcast`, `point-to-point`, `non-broadcast`, `point-to-multipoint`, `point-to-multipoint-non-broadcast`.
     */
    networkType: string;
    /**
     * priority
     */
    priority: number;
    /**
     * Retransmit interval.
     */
    retransmitInterval: number;
    /**
     * status Valid values: `enable`, `disable`.
     */
    status: string;
    /**
     * Transmit delay.
     */
    transmitDelay: number;
}

export interface RouterOspf6Ospf6InterfaceIpsecKey {
    /**
     * Authentication key.
     */
    authKey?: string;
    /**
     * Encryption key.
     */
    encKey?: string;
    /**
     * Security Parameters Index.
     */
    spi: number;
}

export interface RouterOspf6Ospf6InterfaceNeighbor {
    /**
     * Cost of the interface, value range from 0 to 65535, 0 means auto-cost.
     */
    cost: number;
    /**
     * IPv6 link local address of the neighbor.
     */
    ip6: string;
    /**
     * Poll interval time in seconds.
     */
    pollInterval: number;
    /**
     * priority
     */
    priority: number;
}

export interface RouterOspf6PassiveInterface {
    /**
     * Passive interface name.
     */
    name: string;
}

export interface RouterOspf6Redistribute {
    /**
     * Redistribute metric setting.
     */
    metric: number;
    /**
     * Metric type. Valid values: `1`, `2`.
     */
    metricType: string;
    /**
     * Passive interface name.
     */
    name: string;
    /**
     * Route map name.
     */
    routemap: string;
    /**
     * status Valid values: `enable`, `disable`.
     */
    status: string;
}

export interface RouterOspf6SummaryAddress {
    /**
     * Enable/disable advertise status. Valid values: `disable`, `enable`.
     */
    advertise: string;
    /**
     * Summary address entry ID.
     */
    id: number;
    /**
     * IPv6 prefix.
     */
    prefix6: string;
    /**
     * Tag value.
     */
    tag: number;
}

export interface RouterOspfArea {
    /**
     * Authentication type.
     */
    authentication: string;
    /**
     * Comment.
     */
    comments?: string;
    /**
     * Summary default cost of stub or NSSA area.
     */
    defaultCost: number;
    /**
     * OSPF area filter-list configuration. The structure of `filterList` block is documented below.
     */
    filterLists?: outputs.RouterOspfAreaFilterList[];
    /**
     * Distribute list entry ID.
     */
    id: string;
    /**
     * Redistribute, advertise, or do not originate Type-7 default route into NSSA area. Valid values: `enable`, `always`, `disable`.
     */
    nssaDefaultInformationOriginate: string;
    /**
     * OSPF default metric.
     */
    nssaDefaultInformationOriginateMetric: number;
    /**
     * OSPF metric type for default routes. Valid values: `1`, `2`.
     */
    nssaDefaultInformationOriginateMetricType: string;
    /**
     * Enable/disable redistribute into NSSA area. Valid values: `enable`, `disable`.
     */
    nssaRedistribution: string;
    /**
     * NSSA translator role type. Valid values: `candidate`, `never`, `always`.
     */
    nssaTranslatorRole: string;
    /**
     * OSPF area range configuration. The structure of `range` block is documented below.
     */
    ranges?: outputs.RouterOspfAreaRange[];
    /**
     * Enable/disable shortcut option. Valid values: `disable`, `enable`, `default`.
     */
    shortcut: string;
    /**
     * Stub summary setting. Valid values: `no-summary`, `summary`.
     */
    stubType: string;
    /**
     * Area type setting. Valid values: `regular`, `nssa`, `stub`.
     */
    type: string;
    /**
     * OSPF virtual link configuration. The structure of `virtualLink` block is documented below.
     */
    virtualLinks?: outputs.RouterOspfAreaVirtualLink[];
}

export interface RouterOspfAreaFilterList {
    /**
     * Direction. Valid values: `in`, `out`.
     */
    direction: string;
    /**
     * Distribute list entry ID.
     */
    id: number;
    /**
     * Access-list or prefix-list name.
     */
    list: string;
}

export interface RouterOspfAreaRange {
    /**
     * Enable/disable advertise status. Valid values: `disable`, `enable`.
     */
    advertise: string;
    /**
     * Distribute list entry ID.
     */
    id: number;
    /**
     * Prefix.
     */
    prefix: string;
    /**
     * Substitute prefix.
     */
    substitute: string;
    /**
     * Enable/disable substitute status. Valid values: `enable`, `disable`.
     */
    substituteStatus: string;
}

export interface RouterOspfAreaVirtualLink {
    /**
     * Authentication type.
     */
    authentication: string;
    /**
     * Authentication key.
     */
    authenticationKey?: string;
    /**
     * Dead interval.
     */
    deadInterval: number;
    /**
     * Hello interval.
     */
    helloInterval: number;
    /**
     * Message-digest key-chain name.
     */
    keychain: string;
    /**
     * MD5 key.
     */
    md5Key: string;
    /**
     * Authentication MD5 key-chain name.
     */
    md5Keychain: string;
    /**
     * MD5 key. The structure of `md5Keys` block is documented below.
     */
    md5Keys?: outputs.RouterOspfAreaVirtualLinkMd5Key[];
    /**
     * Redistribute name.
     */
    name: string;
    /**
     * Peer IP.
     */
    peer: string;
    /**
     * Retransmit interval.
     */
    retransmitInterval: number;
    /**
     * Transmit delay.
     */
    transmitDelay: number;
}

export interface RouterOspfAreaVirtualLinkMd5Key {
    /**
     * Distribute list entry ID.
     */
    id: number;
    /**
     * Password for the key.
     */
    keyString?: string;
}

export interface RouterOspfDistributeList {
    /**
     * Access list name.
     */
    accessList: string;
    /**
     * Distribute list entry ID.
     */
    id: number;
    /**
     * Protocol type. Valid values: `connected`, `static`, `rip`.
     */
    protocol: string;
}

export interface RouterOspfNeighbor {
    /**
     * Cost of the interface, value range from 0 to 65535, 0 means auto-cost.
     */
    cost: number;
    /**
     * Distribute list entry ID.
     */
    id: number;
    /**
     * Interface IP address of the neighbor.
     */
    ip: string;
    /**
     * Poll interval time in seconds.
     */
    pollInterval: number;
    /**
     * Priority.
     */
    priority: number;
}

export interface RouterOspfNetwork {
    /**
     * Attach the network to area.
     */
    area: string;
    /**
     * Comment.
     */
    comments?: string;
    /**
     * Distribute list entry ID.
     */
    id: number;
    /**
     * Prefix.
     */
    prefix: string;
}

export interface RouterOspfOspfInterface {
    /**
     * Authentication type.
     */
    authentication: string;
    /**
     * Authentication key.
     */
    authenticationKey?: string;
    /**
     * Bidirectional Forwarding Detection (BFD). Valid values: `global`, `enable`, `disable`.
     */
    bfd: string;
    /**
     * Comment.
     */
    comments?: string;
    /**
     * Cost of the interface, value range from 0 to 65535, 0 means auto-cost.
     */
    cost: number;
    /**
     * Enable/disable control of flooding out LSAs. Valid values: `enable`, `disable`.
     */
    databaseFilterOut: string;
    /**
     * Dead interval.
     */
    deadInterval: number;
    /**
     * Hello interval.
     */
    helloInterval: number;
    /**
     * Number of hello packets within dead interval.
     */
    helloMultiplier: number;
    /**
     * Configuration interface name.
     */
    interface: string;
    /**
     * Interface IP address of the neighbor.
     */
    ip: string;
    /**
     * Message-digest key-chain name.
     */
    keychain: string;
    /**
     * MD5 key.
     */
    md5Key: string;
    /**
     * Authentication MD5 key-chain name.
     */
    md5Keychain: string;
    /**
     * MD5 key. The structure of `md5Keys` block is documented below.
     */
    md5Keys?: outputs.RouterOspfOspfInterfaceMd5Key[];
    /**
     * MTU for database description packets.
     */
    mtu: number;
    /**
     * Enable/disable ignore MTU. Valid values: `enable`, `disable`.
     */
    mtuIgnore: string;
    /**
     * Redistribute name.
     */
    name: string;
    /**
     * Network type. Valid values: `broadcast`, `non-broadcast`, `point-to-point`, `point-to-multipoint`, `point-to-multipoint-non-broadcast`.
     */
    networkType: string;
    /**
     * Prefix length.
     */
    prefixLength: number;
    /**
     * Priority.
     */
    priority: number;
    /**
     * Graceful restart neighbor resynchronization timeout.
     */
    resyncTimeout: number;
    /**
     * Retransmit interval.
     */
    retransmitInterval: number;
    /**
     * status Valid values: `enable`, `disable`.
     */
    status: string;
    /**
     * Transmit delay.
     */
    transmitDelay: number;
}

export interface RouterOspfOspfInterfaceMd5Key {
    /**
     * Distribute list entry ID.
     */
    id: number;
    /**
     * Password for the key.
     */
    keyString?: string;
}

export interface RouterOspfPassiveInterface {
    /**
     * Redistribute name.
     */
    name: string;
}

export interface RouterOspfRedistribute {
    /**
     * Redistribute metric setting.
     */
    metric: number;
    /**
     * Metric type. Valid values: `1`, `2`.
     */
    metricType: string;
    /**
     * Redistribute name.
     */
    name: string;
    /**
     * Route map name.
     */
    routemap: string;
    /**
     * status Valid values: `enable`, `disable`.
     */
    status: string;
    /**
     * Tag value.
     */
    tag: number;
}

export interface RouterOspfSummaryAddress {
    /**
     * Enable/disable advertise status. Valid values: `disable`, `enable`.
     */
    advertise: string;
    /**
     * Distribute list entry ID.
     */
    id: number;
    /**
     * Prefix.
     */
    prefix: string;
    /**
     * Tag value.
     */
    tag: number;
}

export interface RouterPolicyDst {
    /**
     * IP and mask.
     */
    subnet: string;
}

export interface RouterPolicyDstaddr {
    /**
     * Custom Destination Internet Service name.
     */
    name: string;
}

export interface RouterPolicyInputDevice {
    /**
     * Custom Destination Internet Service name.
     */
    name: string;
}

export interface RouterPolicyInternetServiceCustom {
    /**
     * Custom Destination Internet Service name.
     */
    name: string;
}

export interface RouterPolicyInternetServiceId {
    /**
     * Destination Internet Service ID.
     */
    id: number;
}

export interface RouterPolicySrc {
    /**
     * IP and mask.
     */
    subnet: string;
}

export interface RouterPolicySrcaddr {
    /**
     * Custom Destination Internet Service name.
     */
    name: string;
}

export interface RouterPrefixList6Rule {
    /**
     * Permit or deny packets that match this rule. Valid values: `permit`, `deny`.
     */
    action: string;
    /**
     * Flags.
     */
    flags: number;
    /**
     * Minimum prefix length to be matched (0 - 128).
     */
    ge: number;
    /**
     * Rule ID.
     */
    id: number;
    /**
     * Maximum prefix length to be matched (0 - 128).
     */
    le: number;
    /**
     * IPv6 prefix to define regular filter criteria, such as "any" or subnets.
     */
    prefix6: string;
}

export interface RouterPrefixListRule {
    /**
     * Permit or deny this IP address and netmask prefix. Valid values: `permit`, `deny`.
     */
    action: string;
    /**
     * Flags.
     */
    flags: number;
    /**
     * Minimum prefix length to be matched (0 - 32).
     */
    ge: number;
    /**
     * Rule ID.
     */
    id: number;
    /**
     * Maximum prefix length to be matched (0 - 32).
     */
    le: number;
    /**
     * IPv4 prefix to define regular filter criteria, such as "any" or subnets.
     */
    prefix: string;
}

export interface RouterRipDistance {
    /**
     * Access list name.
     */
    accessList: string;
    /**
     * Distance (1 - 255).
     */
    distance: number;
    /**
     * Offset-list ID.
     */
    id: number;
    /**
     * Network prefix.
     */
    prefix: string;
}

export interface RouterRipDistributeList {
    /**
     * Offset list direction. Valid values: `in`, `out`.
     */
    direction: string;
    /**
     * Offset-list ID.
     */
    id: number;
    /**
     * Interface name.
     */
    interface: string;
    /**
     * Distribute access/prefix list name.
     */
    listname: string;
    /**
     * status Valid values: `enable`, `disable`.
     */
    status: string;
}

export interface RouterRipInterface {
    /**
     * Authentication key-chain name.
     */
    authKeychain: string;
    /**
     * Authentication mode. Valid values: `none`, `text`, `md5`.
     */
    authMode: string;
    /**
     * Authentication string/password.
     */
    authString?: string;
    /**
     * flags
     */
    flags: number;
    /**
     * Interface name.
     */
    name: string;
    /**
     * Receive version. Valid values: `1`, `2`.
     */
    receiveVersion: string;
    /**
     * Send version. Valid values: `1`, `2`.
     */
    sendVersion: string;
    /**
     * Enable/disable broadcast version 1 compatible packets. Valid values: `disable`, `enable`.
     */
    sendVersion2Broadcast: string;
    /**
     * Enable/disable split horizon. Valid values: `poisoned`, `regular`.
     */
    splitHorizon: string;
    /**
     * Enable/disable split horizon. Valid values: `enable`, `disable`.
     */
    splitHorizonStatus: string;
}

export interface RouterRipNeighbor {
    /**
     * Offset-list ID.
     */
    id: number;
    /**
     * IP address.
     */
    ip: string;
}

export interface RouterRipNetwork {
    /**
     * Offset-list ID.
     */
    id: number;
    /**
     * Network prefix.
     */
    prefix: string;
}

export interface RouterRipOffsetList {
    /**
     * Access list name.
     */
    accessList: string;
    /**
     * Offset list direction. Valid values: `in`, `out`.
     */
    direction: string;
    /**
     * Offset-list ID.
     */
    id: number;
    /**
     * Interface name.
     */
    interface: string;
    /**
     * offset
     */
    offset: number;
    /**
     * status Valid values: `enable`, `disable`.
     */
    status: string;
}

export interface RouterRipPassiveInterface {
    /**
     * Interface name.
     */
    name: string;
}

export interface RouterRipRedistribute {
    /**
     * Redistribute metric setting.
     */
    metric: number;
    /**
     * Interface name.
     */
    name: string;
    /**
     * Route map name.
     */
    routemap: string;
    /**
     * status Valid values: `enable`, `disable`.
     */
    status: string;
}

export interface RouterRipngAggregateAddress {
    /**
     * Offset-list ID.
     */
    id: number;
    /**
     * Aggregate address prefix.
     */
    prefix6: string;
}

export interface RouterRipngDistance {
    /**
     * IPv6 access list name.
     */
    accessList6: string;
    /**
     * Distance (1 - 255).
     */
    distance: number;
    /**
     * Offset-list ID.
     */
    id: number;
    /**
     * Aggregate address prefix.
     */
    prefix6: string;
}

export interface RouterRipngDistributeList {
    /**
     * Offset list direction. Valid values: `in`, `out`.
     */
    direction: string;
    /**
     * Offset-list ID.
     */
    id: number;
    /**
     * Interface name.
     */
    interface: string;
    /**
     * Distribute access/prefix list name.
     */
    listname: string;
    /**
     * status Valid values: `enable`, `disable`.
     */
    status: string;
}

export interface RouterRipngInterface {
    /**
     * Flags.
     */
    flags: number;
    /**
     * Interface name.
     */
    name: string;
    /**
     * Enable/disable split horizon. Valid values: `poisoned`, `regular`.
     */
    splitHorizon: string;
    /**
     * Enable/disable split horizon. Valid values: `enable`, `disable`.
     */
    splitHorizonStatus: string;
}

export interface RouterRipngNeighbor {
    /**
     * Offset-list ID.
     */
    id: number;
    /**
     * Interface name.
     */
    interface: string;
    /**
     * IPv6 link-local address.
     */
    ip6: string;
}

export interface RouterRipngNetwork {
    /**
     * Offset-list ID.
     */
    id: number;
    /**
     * Network IPv6 link-local prefix.
     */
    prefix: string;
}

export interface RouterRipngOffsetList {
    /**
     * IPv6 access list name.
     */
    accessList6: string;
    /**
     * Offset list direction. Valid values: `in`, `out`.
     */
    direction: string;
    /**
     * Offset-list ID.
     */
    id: number;
    /**
     * Interface name.
     */
    interface: string;
    /**
     * offset
     */
    offset: number;
    /**
     * status Valid values: `enable`, `disable`.
     */
    status: string;
}

export interface RouterRipngPassiveInterface {
    /**
     * Interface name.
     */
    name: string;
}

export interface RouterRipngRedistribute {
    /**
     * Redistribute metric setting.
     */
    metric: number;
    /**
     * Interface name.
     */
    name: string;
    /**
     * Route map name.
     */
    routemap: string;
    /**
     * status Valid values: `enable`, `disable`.
     */
    status: string;
}

export interface RouterRouteMapRule {
    /**
     * Action. Valid values: `permit`, `deny`.
     */
    action: string;
    /**
     * Rule ID.
     */
    id: number;
    /**
     * Match BGP AS path list.
     */
    matchAsPath: string;
    /**
     * Match BGP community list.
     */
    matchCommunity: string;
    /**
     * Enable/disable exact matching of communities. Valid values: `enable`, `disable`.
     */
    matchCommunityExact: string;
    /**
     * BGP flag value to match (0 - 65535)
     */
    matchFlags: number;
    /**
     * Match interface configuration.
     */
    matchInterface: string;
    /**
     * Match IPv6 address permitted by access-list6 or prefix-list6.
     */
    matchIp6Address: string;
    /**
     * Match next hop IPv6 address passed by access-list6 or prefix-list6.
     */
    matchIp6Nexthop: string;
    /**
     * Match IP address permitted by access-list or prefix-list.
     */
    matchIpAddress: string;
    /**
     * Match next hop IP address passed by access-list or prefix-list.
     */
    matchIpNexthop: string;
    /**
     * Match metric for redistribute routes.
     */
    matchMetric: number;
    /**
     * Match BGP origin code. Valid values: `none`, `egp`, `igp`, `incomplete`.
     */
    matchOrigin: string;
    /**
     * Match route type.
     */
    matchRouteType: string;
    /**
     * Match tag.
     */
    matchTag: number;
    /**
     * Match VRF ID.
     */
    matchVrf: number;
    /**
     * BGP aggregator AS.
     */
    setAggregatorAs: number;
    /**
     * BGP aggregator IP.
     */
    setAggregatorIp: string;
    /**
     * Specify preferred action of set-aspath. Valid values: `prepend`, `replace`.
     */
    setAspathAction: string;
    /**
     * Prepend BGP AS path attribute. The structure of `setAspath` block is documented below.
     */
    setAspaths?: outputs.RouterRouteMapRuleSetAspath[];
    /**
     * Enable/disable BGP atomic aggregate attribute. Valid values: `enable`, `disable`.
     */
    setAtomicAggregate: string;
    /**
     * BGP community attribute. The structure of `setCommunity` block is documented below.
     */
    setCommunities?: outputs.RouterRouteMapRuleSetCommunity[];
    /**
     * Enable/disable adding set-community to existing community. Valid values: `enable`, `disable`.
     */
    setCommunityAdditive: string;
    /**
     * Delete communities matching community list.
     */
    setCommunityDelete: string;
    /**
     * Maximum duration to suppress a route (1 - 255 min, 0 = unset).
     */
    setDampeningMaxSuppress: number;
    /**
     * Reachability half-life time for the penalty (1 - 45 min, 0 = unset).
     */
    setDampeningReachabilityHalfLife: number;
    /**
     * Value to start reusing a route (1 - 20000, 0 = unset).
     */
    setDampeningReuse: number;
    /**
     * Value to start suppressing a route (1 - 20000, 0 = unset).
     */
    setDampeningSuppress: number;
    /**
     * Unreachability Half-life time for the penalty (1 - 45 min, 0 = unset)
     */
    setDampeningUnreachabilityHalfLife: number;
    /**
     * Route Target extended community. The structure of `setExtcommunityRt` block is documented below.
     */
    setExtcommunityRts?: outputs.RouterRouteMapRuleSetExtcommunityRt[];
    /**
     * Site-of-Origin extended community. The structure of `setExtcommunitySoo` block is documented below.
     */
    setExtcommunitySoos?: outputs.RouterRouteMapRuleSetExtcommunitySoo[];
    /**
     * BGP flags value (0 - 65535)
     */
    setFlags: number;
    /**
     * IPv6 global address of next hop.
     */
    setIp6Nexthop: string;
    /**
     * IPv6 local address of next hop.
     */
    setIp6NexthopLocal: string;
    /**
     * IP address of next hop.
     */
    setIpNexthop: string;
    /**
     * BGP local preference path attribute.
     */
    setLocalPreference: number;
    /**
     * Metric value.
     */
    setMetric: number;
    /**
     * Metric type.
     */
    setMetricType: string;
    /**
     * BGP origin code. Valid values: `none`, `egp`, `igp`, `incomplete`.
     */
    setOrigin: string;
    /**
     * BGP originator ID attribute.
     */
    setOriginatorId: string;
    /**
     * Route tag for routing table.
     */
    setRouteTag: number;
    /**
     * Tag value.
     */
    setTag: number;
    /**
     * BGP weight for routing table.
     */
    setWeight: number;
}

export interface RouterRouteMapRuleSetAspath {
    /**
     * AS number (0 - 42949672). NOTE: Use quotes for repeating numbers, e.g.: "1 1 2"
     */
    as: string;
}

export interface RouterRouteMapRuleSetCommunity {
    /**
     * AA:NN
     */
    community: string;
}

export interface RouterRouteMapRuleSetExtcommunityRt {
    /**
     * AA:NN
     */
    community: string;
}

export interface RouterRouteMapRuleSetExtcommunitySoo {
    /**
     * AA:NN
     */
    community: string;
}

export interface RouterStatic6SdwanZone {
    /**
     * SD-WAN zone name.
     */
    name: string;
}

export interface RouterStaticSdwanZone {
    /**
     * SD-WAN zone name.
     */
    name: string;
}

export interface RouterbgpNeighborConditionalAdvertise {
    /**
     * Name of advertising route map.
     */
    advertiseRoutemap: string;
    /**
     * Name of condition route map.
     */
    conditionRoutemap: string;
    /**
     * Type of condition. Valid values: `exist`, `non-exist`.
     */
    conditionType: string;
}

export interface RouterbgpNeighborConditionalAdvertise6 {
    /**
     * Name of advertising route map.
     */
    advertiseRoutemap: string;
    /**
     * Name of condition route map.
     */
    conditionRoutemap: string;
    /**
     * Type of condition. Valid values: `exist`, `non-exist`.
     */
    conditionType: string;
}

export interface Routerospf6Ospf6InterfaceIpsecKey {
    /**
     * Authentication key.
     */
    authKey?: string;
    /**
     * Encryption key.
     */
    encKey?: string;
    /**
     * Security Parameters Index.
     */
    spi: number;
}

export interface Routerospf6Ospf6InterfaceNeighbor {
    /**
     * Cost of the interface, value range from 0 to 65535, 0 means auto-cost.
     */
    cost: number;
    /**
     * IPv6 link local address of the neighbor.
     */
    ip6: string;
    /**
     * Poll interval time in seconds.
     */
    pollInterval: number;
    /**
     * priority
     */
    priority: number;
}

export interface RouterospfOspfInterfaceMd5Key {
    /**
     * Key ID (1 - 255).
     */
    id: number;
    /**
     * Password for the key.
     */
    keyString?: string;
}

export interface SctpFilterProfilePpidFilter {
    /**
     * Action taken when PPID is matched. Valid values: `pass`, `reset`, `replace`.
     */
    action: string;
    /**
     * Comment.
     */
    comment?: string;
    /**
     * ID.
     */
    id: number;
    /**
     * Payload protocol identifier.
     */
    ppid: number;
}

export interface SpamfilterBwlEntry {
    /**
     * Reject, mark as spam or good email. Valid values: `reject`, `spam`, `clear`.
     */
    action: string;
    /**
     * IP address type. Valid values: `ipv4`, `ipv6`.
     */
    addrType: string;
    /**
     * Email address pattern.
     */
    emailPattern: string;
    /**
     * Entry ID.
     */
    id: number;
    /**
     * IPv4 network address/subnet mask bits.
     */
    ip4Subnet: string;
    /**
     * IPv6 network address/subnet mask bits.
     */
    ip6Subnet: string;
    /**
     * Wildcard pattern or regular expression. Valid values: `wildcard`, `regexp`.
     */
    patternType: string;
    /**
     * Enable/disable status. Valid values: `enable`, `disable`.
     */
    status: string;
    /**
     * Entry type. Valid values: `ip`, `email`.
     */
    type: string;
}

export interface SpamfilterBwordEntry {
    /**
     * Mark spam or good. Valid values: `spam`, `clear`.
     */
    action: string;
    /**
     * Banned word entry ID.
     */
    id: number;
    /**
     * Language for the banned word. Valid values: `western`, `simch`, `trach`, `japanese`, `korean`, `french`, `thai`, `spanish`.
     */
    language: string;
    /**
     * Pattern for the banned word.
     */
    pattern: string;
    /**
     * Wildcard pattern or regular expression. Valid values: `wildcard`, `regexp`.
     */
    patternType: string;
    /**
     * Score value.
     */
    score: number;
    /**
     * Enable/disable status. Valid values: `enable`, `disable`.
     */
    status: string;
    /**
     * Component of the email to be scanned. Valid values: `subject`, `body`, `all`.
     */
    where: string;
}

export interface SpamfilterDnsblEntry {
    /**
     * Reject connection or mark as spam email. Valid values: `reject`, `spam`.
     */
    action: string;
    /**
     * DNSBL/ORBL entry ID.
     */
    id: number;
    /**
     * DNSBL or ORBL server name.
     */
    server: string;
    /**
     * Enable/disable status. Valid values: `enable`, `disable`.
     */
    status: string;
}

export interface SpamfilterIptrustEntry {
    /**
     * Type of address. Valid values: `ipv4`, `ipv6`.
     */
    addrType: string;
    /**
     * Trusted IP entry ID.
     */
    id: number;
    /**
     * IPv4 network address or network address/subnet mask bits.
     */
    ip4Subnet: string;
    /**
     * IPv6 network address/subnet mask bits.
     */
    ip6Subnet: string;
    /**
     * Enable/disable status. Valid values: `enable`, `disable`.
     */
    status: string;
}

export interface SpamfilterMheaderEntry {
    /**
     * Mark spam or good. Valid values: `spam`, `clear`.
     */
    action: string;
    /**
     * Pattern for the header field body.
     */
    fieldbody: string;
    /**
     * Pattern for header field name.
     */
    fieldname: string;
    /**
     * Mime header entry ID.
     */
    id: number;
    /**
     * Wildcard pattern or regular expression. Valid values: `wildcard`, `regexp`.
     */
    patternType: string;
    /**
     * Enable/disable status. Valid values: `enable`, `disable`.
     */
    status: string;
}

export interface SpamfilterProfileGmail {
    /**
     * Enable/disable logging. Valid values: `enable`, `disable`.
     */
    log: string;
}

export interface SpamfilterProfileImap {
    /**
     * Action for spam email. Valid values: `pass`, `discard`.
     */
    action: string;
    /**
     * Enable/disable logging. Valid values: `enable`, `disable`.
     */
    log: string;
    /**
     * Subject text or header added to spam email.
     */
    tagMsg: string;
    /**
     * Tag subject or header for spam email. Valid values: `subject`, `header`, `spaminfo`.
     */
    tagType: string;
}

export interface SpamfilterProfileMapi {
    /**
     * Action for spam email. Valid values: `pass`, `discard`.
     */
    action: string;
    /**
     * Enable/disable logging. Valid values: `enable`, `disable`.
     */
    log: string;
}

export interface SpamfilterProfileMsnHotmail {
    /**
     * Enable/disable logging. Valid values: `enable`, `disable`.
     */
    log: string;
}

export interface SpamfilterProfilePop3 {
    /**
     * Action for spam email. Valid values: `pass`, `discard`.
     */
    action: string;
    /**
     * Enable/disable logging. Valid values: `enable`, `disable`.
     */
    log: string;
    /**
     * Subject text or header added to spam email.
     */
    tagMsg: string;
    /**
     * Tag subject or header for spam email. Valid values: `subject`, `header`, `spaminfo`.
     */
    tagType: string;
}

export interface SpamfilterProfileSmtp {
    /**
     * Action for spam email. Valid values: `pass`, `discard`.
     */
    action: string;
    /**
     * Enable/disable SMTP email header IP checks for spamfsip, spamrbl and spambwl filters. Valid values: `disable`, `enable`.
     */
    hdrip: string;
    /**
     * Enable/disable local filter to override SMTP remote check result. Valid values: `disable`, `enable`.
     */
    localOverride: string;
    /**
     * Enable/disable logging. Valid values: `enable`, `disable`.
     */
    log: string;
    /**
     * Subject text or header added to spam email.
     */
    tagMsg: string;
    /**
     * Tag subject or header for spam email. Valid values: `subject`, `header`, `spaminfo`.
     */
    tagType: string;
}

export interface SpamfilterProfileYahooMail {
    /**
     * Enable/disable logging. Valid values: `enable`, `disable`.
     */
    log: string;
}

export interface SshFilterProfileFileFilter {
    /**
     * File filter entries. The structure of `entries` block is documented below.
     */
    entries?: outputs.SshFilterProfileFileFilterEntry[];
    /**
     * Enable/disable file filter logging. Valid values: `enable`, `disable`.
     */
    log: string;
    /**
     * Enable/disable file filter archive contents scan. Valid values: `enable`, `disable`.
     */
    scanArchiveContents: string;
    /**
     * Enable/disable file filter. Valid values: `enable`, `disable`.
     */
    status: string;
}

export interface SshFilterProfileFileFilterEntry {
    /**
     * Action taken for matched file. Valid values: `log`, `block`.
     */
    action: string;
    /**
     * Comment.
     */
    comment?: string;
    /**
     * Match files transmitted in the session's originating or reply direction. Valid values: `incoming`, `outgoing`, `any`.
     */
    direction: string;
    /**
     * Select file type. The structure of `fileType` block is documented below.
     */
    fileTypes?: outputs.SshFilterProfileFileFilterEntryFileType[];
    /**
     * Add a file filter.
     */
    filter: string;
    /**
     * Match password-protected files. Valid values: `yes`, `any`.
     */
    passwordProtected: string;
}

export interface SshFilterProfileFileFilterEntryFileType {
    /**
     * File type name.
     */
    name: string;
}

export interface SshFilterProfileShellCommand {
    /**
     * Action taken for matched file. Valid values: `log`, `block`.
     */
    action: string;
    /**
     * Enable/disable alert. Valid values: `enable`, `disable`.
     */
    alert: string;
    /**
     * Id.
     */
    id: number;
    /**
     * Enable/disable file filter logging. Valid values: `enable`, `disable`.
     */
    log: string;
    /**
     * SSH shell command pattern.
     */
    pattern: string;
    /**
     * Log severity. Valid values: `low`, `medium`, `high`, `critical`.
     */
    severity: string;
    /**
     * Matching type. Valid values: `simple`, `regex`.
     */
    type: string;
}

export interface SwitchControllerAutoConfigCustomSwitchBinding {
    /**
     * Custom auto-config policy.
     */
    policy: string;
    /**
     * Switch name.
     */
    switchId: string;
}

export interface SwitchControllerDynamicPortPolicyPolicy {
    /**
     * Enable/disable bouncing (administratively bring the link down, up) of a switch port where this policy is applied. Helps to clear and reassign VLAN from lldp-profile. Valid values: `disable`, `enable`.
     */
    bouncePortLink: string;
    /**
     * Category of Dynamic port policy. Valid values: `device`, `interface-tag`.
     */
    category: string;
    /**
     * Description for the policy.
     */
    description: string;
    /**
     * Policy matching family.
     */
    family: string;
    /**
     * Policy matching host.
     */
    host: string;
    /**
     * Match policy based on hardware vendor.
     */
    hwVendor: string;
    /**
     * Policy matching the FortiSwitch interface object tags. The structure of `interfaceTags` block is documented below.
     */
    interfaceTags?: outputs.SwitchControllerDynamicPortPolicyPolicyInterfaceTag[];
    /**
     * LLDP profile to be applied when using this policy.
     */
    lldpProfile: string;
    /**
     * Policy matching MAC address.
     */
    mac: string;
    /**
     * 802.1x security policy to be applied when using this policy.
     */
    n8021x: string;
    /**
     * Policy name.
     */
    name: string;
    /**
     * QoS policy to be applied when using this policy.
     */
    qosPolicy: string;
    /**
     * Enable/disable policy. Valid values: `enable`, `disable`.
     */
    status: string;
    /**
     * Policy matching type.
     */
    type: string;
    /**
     * VLAN policy to be applied when using this policy.
     */
    vlanPolicy: string;
}

export interface SwitchControllerDynamicPortPolicyPolicyInterfaceTag {
    /**
     * FortiSwitch port tag name.
     */
    tagName: string;
}

export interface SwitchControllerFlowTrackingAggregate {
    /**
     * Aggregate id.
     */
    id: number;
    /**
     * IP address to group all matching traffic sessions to a flow.
     */
    ip: string;
}

export interface SwitchControllerFortilinkSettingsNacPorts {
    /**
     * Enable/disable bouncing (administratively bring the link down, up) of a switch port when NAC mode is configured on the port. Helps to re-initiate the DHCP process for a device. Valid values: `disable`, `enable`.
     */
    bounceNacPort: string;
    /**
     * Enable/disable LAN segment feature on the FortiLink interface. Valid values: `enabled`, `disabled`.
     */
    lanSegment: string;
    /**
     * Member change flag.
     */
    memberChange: number;
    /**
     * Configure NAC LAN interface.
     */
    nacLanInterface: string;
    /**
     * Configure NAC segment VLANs. The structure of `nacSegmentVlans` block is documented below.
     */
    nacSegmentVlans?: outputs.SwitchControllerFortilinkSettingsNacPortsNacSegmentVlan[];
    /**
     * Default NAC Onboarding VLAN when NAC devices are discovered.
     */
    onboardingVlan: string;
    /**
     * Parent key name.
     */
    parentKey: string;
}

export interface SwitchControllerFortilinkSettingsNacPortsNacSegmentVlan {
    /**
     * VLAN interface name.
     */
    vlanName: string;
}

export interface SwitchControllerGlobalCustomCommand {
    /**
     * List of FortiSwitch commands.
     */
    commandEntry: string;
    /**
     * Name of custom command to push to all FortiSwitches in VDOM.
     */
    commandName: string;
}

export interface SwitchControllerGlobalDisableDiscovery {
    /**
     * Managed device ID.
     */
    name: string;
}

export interface SwitchControllerLldpProfileCustomTlv {
    /**
     * Organizationally defined information string (0 - 507 hexadecimal bytes).
     */
    informationString: string;
    /**
     * TLV name (not sent).
     */
    name: string;
    /**
     * Organizationally unique identifier (OUI), a 3-byte hexadecimal number, for this TLV.
     */
    oui: string;
    /**
     * Organizationally defined subtype (0 - 255).
     */
    subtype: number;
}

export interface SwitchControllerLldpProfileMedLocationService {
    /**
     * TLV name (not sent).
     */
    name: string;
    /**
     * Enable or disable this TLV. Valid values: `disable`, `enable`.
     */
    status: string;
    /**
     * Location service ID.
     */
    sysLocationId: string;
}

export interface SwitchControllerLldpProfileMedNetworkPolicy {
    /**
     * Enable/disable VLAN assignment when this profile is applied on managed FortiSwitch port. Valid values: `disable`, `enable`.
     */
    assignVlan: string;
    /**
     * Advertised Differentiated Services Code Point (DSCP) value, a packet header value indicating the level of service requested for traffic, such as high priority or best effort delivery.
     */
    dscp: number;
    /**
     * TLV name (not sent).
     */
    name: string;
    /**
     * Advertised Layer 2 priority (0 - 7; from lowest to highest priority).
     */
    priority: number;
    /**
     * Enable or disable this TLV. Valid values: `disable`, `enable`.
     */
    status: string;
    /**
     * ID of VLAN to advertise, if configured on port (0 - 4094, 0 = priority tag).
     */
    vlan: number;
    /**
     * VLAN interface to advertise; if configured on port.
     */
    vlanIntf: string;
}

export interface SwitchControllerLocationAddressCivic {
    /**
     * Location additional details.
     */
    additional: string;
    /**
     * Location additional code details.
     */
    additionalCode: string;
    /**
     * Location block details.
     */
    block: string;
    /**
     * Location branch road details.
     */
    branchRoad: string;
    /**
     * Location building details.
     */
    building: string;
    /**
     * Location city details.
     */
    city: string;
    /**
     * Location city division details.
     */
    cityDivision: string;
    /**
     * The two-letter ISO 3166 country code in capital ASCII letters eg. US, CA, DK, DE.
     */
    country: string;
    /**
     * National subdivisions (state, canton, region, province, or prefecture).
     */
    countrySubdivision: string;
    /**
     * County, parish, gun (JP), or district (IN).
     */
    county: string;
    /**
     * Leading street direction.
     */
    direction: string;
    /**
     * Floor.
     */
    floor: string;
    /**
     * Landmark or vanity address.
     */
    landmark: string;
    /**
     * Language.
     */
    language: string;
    /**
     * Name (residence and office occupant).
     */
    name: string;
    /**
     * House number.
     */
    number: string;
    /**
     * House number suffix.
     */
    numberSuffix: string;
    /**
     * Parent key name.
     */
    parentKey: string;
    /**
     * Placetype.
     */
    placeType: string;
    /**
     * Post office box (P.O. box).
     */
    postOfficeBox: string;
    /**
     * Postal community name.
     */
    postalCommunity: string;
    /**
     * Primary road name.
     */
    primaryRoad: string;
    /**
     * Road section.
     */
    roadSection: string;
    /**
     * Room number.
     */
    room: string;
    /**
     * Script used to present the address information.
     */
    script: string;
    /**
     * Seat number.
     */
    seat: string;
    /**
     * Street.
     */
    street: string;
    /**
     * Street name post modifier.
     */
    streetNamePostMod: string;
    /**
     * Street name pre modifier.
     */
    streetNamePreMod: string;
    /**
     * Street suffix.
     */
    streetSuffix: string;
    /**
     * Sub branch road name.
     */
    subBranchRoad: string;
    /**
     * Trailing street suffix.
     */
    trailingStrSuffix: string;
    /**
     * Unit (apartment, suite).
     */
    unit: string;
    /**
     * Postal/zip code.
     */
    zip: string;
}

export interface SwitchControllerLocationCoordinates {
    /**
     * +/- Floating point no. eg. 117.47.
     */
    altitude: string;
    /**
     * m ( meters), f ( floors). Valid values: `m`, `f`.
     */
    altitudeUnit: string;
    /**
     * WGS84, NAD83, NAD83/MLLW. Valid values: `WGS84`, `NAD83`, `NAD83/MLLW`.
     */
    datum: string;
    /**
     * Floating point start with ( +/- )  or end with ( N or S ) eg. +/-16.67 or 16.67N.
     */
    latitude: string;
    /**
     * Floating point start with ( +/- )  or end with ( E or W ) eg. +/-26.789 or 26.789E.
     */
    longitude: string;
    /**
     * Parent key name.
     */
    parentKey: string;
}

export interface SwitchControllerLocationElinNumber {
    /**
     * Configure ELIN callback number.
     */
    elinNum: string;
    /**
     * Parent key name.
     */
    parentKey: string;
}

export interface SwitchControllerManagedSwitchCustomCommand {
    /**
     * List of FortiSwitch commands.
     */
    commandEntry: string;
    /**
     * Names of commands to be pushed to this FortiSwitch device, as configured under config switch-controller custom-command.
     */
    commandName: string;
}

export interface SwitchControllerManagedSwitchIgmpSnooping {
    /**
     * Maximum time to retain a multicast snooping entry for which no packets have been seen (15 - 3600 sec, default = 300).
     */
    agingTime: number;
    /**
     * Enable/disable unknown multicast flooding. Valid values: `enable`, `disable`.
     */
    floodUnknownMulticast: string;
    /**
     * Enable to override global 802.1X settings on individual FortiSwitches. Valid values: `enable`, `disable`.
     */
    localOverride: string;
    /**
     * Configure IGMP snooping VLAN. The structure of `vlans` block is documented below.
     */
    vlans?: outputs.SwitchControllerManagedSwitchIgmpSnoopingVlan[];
}

export interface SwitchControllerManagedSwitchIgmpSnoopingVlan {
    /**
     * IGMP snooping proxy for the VLAN interface. Valid values: `disable`, `enable`, `global`.
     */
    proxy: string;
    /**
     * Enable/disable IGMP snooping querier for the VLAN interface. Valid values: `disable`, `enable`.
     */
    querier: string;
    /**
     * IGMP snooping querier address.
     */
    querierAddr: string;
    /**
     * IGMP snooping querier version.
     */
    version: number;
    /**
     * List of FortiSwitch VLANs.
     */
    vlanName: string;
}

export interface SwitchControllerManagedSwitchIpSourceGuard {
    /**
     * IP and MAC address configuration. The structure of `bindingEntry` block is documented below.
     */
    bindingEntries?: outputs.SwitchControllerManagedSwitchIpSourceGuardBindingEntry[];
    /**
     * Description.
     */
    description: string;
    /**
     * Remote syslog server listening port.
     */
    port: string;
}

export interface SwitchControllerManagedSwitchIpSourceGuardBindingEntry {
    /**
     * Configure binding pair.
     */
    entryName: string;
    /**
     * IPv4 address of the SNMP manager (host).
     */
    ip: string;
    /**
     * MAC address.
     */
    mac: string;
}

export interface SwitchControllerManagedSwitchMirror {
    /**
     * Destination port.
     */
    dst: string;
    /**
     * Interface name.
     */
    name: string;
    /**
     * Source egress interfaces. The structure of `srcEgress` block is documented below.
     */
    srcEgresses?: outputs.SwitchControllerManagedSwitchMirrorSrcEgress[];
    /**
     * Source ingress interfaces. The structure of `srcIngress` block is documented below.
     */
    srcIngresses?: outputs.SwitchControllerManagedSwitchMirrorSrcIngress[];
    /**
     * Active/inactive mirror configuration. Valid values: `active`, `inactive`.
     */
    status: string;
    /**
     * Enable/disable switching functionality when mirroring. Valid values: `enable`, `disable`.
     */
    switchingPacket: string;
}

export interface SwitchControllerManagedSwitchMirrorSrcEgress {
    /**
     * Interface name.
     */
    name: string;
}

export interface SwitchControllerManagedSwitchMirrorSrcIngress {
    /**
     * Interface name.
     */
    name: string;
}

export interface SwitchControllerManagedSwitchN8021xSettings {
    /**
     * Authentication state to set if a link is down. Valid values: `set-unauth`, `no-action`.
     */
    linkDownAuth: string;
    /**
     * Enable to override global 802.1X settings on individual FortiSwitches. Valid values: `enable`, `disable`.
     */
    localOverride: string;
    /**
     * Maximum number of authentication attempts (0 - 15, default = 3).
     */
    maxReauthAttempt: number;
    /**
     * Reauthentication time interval (1 - 1440 min, default = 60, 0 = disable).
     */
    reauthPeriod: number;
    /**
     * 802.1X Tx period (seconds, default=30).
     */
    txPeriod: number;
}

export interface SwitchControllerManagedSwitchPort {
    /**
     * Access mode of the port.
     */
    accessMode: string;
    /**
     * LACP member select mode. Valid values: `bandwidth`, `count`.
     */
    aggregatorMode: string;
    /**
     * Configure switch port tagged vlans The structure of `allowedVlans` block is documented below.
     */
    allowedVlans?: outputs.SwitchControllerManagedSwitchPortAllowedVlan[];
    /**
     * Enable/disable all defined vlans on this port. Valid values: `enable`, `disable`.
     */
    allowedVlansAll: string;
    /**
     * Trusted or untrusted dynamic ARP inspection. Valid values: `untrusted`, `trusted`.
     */
    arpInspectionTrust: string;
    /**
     * Enable/disable Link Aggregation Group (LAG) bundling for non-FortiLink interfaces. Valid values: `enable`, `disable`.
     */
    bundle: string;
    /**
     * Description.
     */
    description: string;
    /**
     * Enable/disable allowance of DHCP with option-82 on untrusted interface. Valid values: `enable`, `disable`.
     */
    dhcpSnoopOption82Trust: string;
    /**
     * Trusted or untrusted DHCP-snooping interface. Valid values: `untrusted`, `trusted`.
     */
    dhcpSnooping: string;
    /**
     * Configure discard mode for port. Valid values: `none`, `all-untagged`, `all-tagged`.
     */
    discardMode: string;
    /**
     * Enable/disable this interface as an edge port, bridging connections between workstations and/or computers. Valid values: `enable`, `disable`.
     */
    edgePort: string;
    /**
     * Switch controller export tag name. The structure of `exportTags` block is documented below.
     */
    exportTags?: outputs.SwitchControllerManagedSwitchPortExportTag[];
    /**
     * Export managed-switch port to a tenant VDOM.
     */
    exportTo: string;
    /**
     * Switch controller export port to pool-list.
     */
    exportToPool: string;
    /**
     * Switch controller export port to pool-list.
     */
    exportToPoolFlag: number;
    /**
     * FEC capable.
     */
    fecCapable: number;
    /**
     * State of forward error correction. Valid values: `disabled`, `cl74`, `cl91`.
     */
    fecState: string;
    /**
     * FGT peer device name.
     */
    fgtPeerDeviceName: string;
    /**
     * FGT peer port name.
     */
    fgtPeerPortName: string;
    /**
     * Fiber-port.
     */
    fiberPort: number;
    /**
     * Port properties flags.
     */
    flags: number;
    /**
     * Flow control direction. Valid values: `disable`, `tx`, `rx`, `both`.
     */
    flowControl: string;
    /**
     * FortiLink uplink port.
     */
    fortilinkPort: number;
    /**
     * Set IGMP snooping mode for the physical port interface. Valid values: `enable`, `disable`.
     */
    igmpSnooping: string;
    /**
     * Enable/disable flooding of IGMP reports to this interface when igmp-snooping enabled. Valid values: `enable`, `disable`.
     */
    igmpsFloodReports: string;
    /**
     * Enable/disable flooding of IGMP snooping traffic to this interface. Valid values: `enable`, `disable`.
     */
    igmpsFloodTraffic: string;
    /**
     * Tag(s) associated with the interface for various features including virtual port pool, dynamic port policy. The structure of `interfaceTags` block is documented below.
     */
    interfaceTags?: outputs.SwitchControllerManagedSwitchPortInterfaceTag[];
    /**
     * Enable/disable IP source guard. Valid values: `disable`, `enable`.
     */
    ipSourceGuard: string;
    /**
     * ISL local trunk name.
     */
    islLocalTrunkName: string;
    /**
     * ISL peer device name.
     */
    islPeerDeviceName: string;
    /**
     * ISL peer port name.
     */
    islPeerPortName: string;
    /**
     * end Link Aggregation Control Protocol (LACP) messages every 30 seconds (slow) or every second (fast). Valid values: `slow`, `fast`.
     */
    lacpSpeed: string;
    /**
     * Limit the number of dynamic MAC addresses on this Port (1 - 128, 0 = no limit, default).
     */
    learningLimit: number;
    /**
     * LLDP port TLV profile.
     */
    lldpProfile: string;
    /**
     * LLDP transmit and receive status. Valid values: `disable`, `rx-only`, `tx-only`, `tx-rx`.
     */
    lldpStatus: string;
    /**
     * Enable/disable loop-guard on this interface, an STP optimization used to prevent network loops. Valid values: `enabled`, `disabled`.
     */
    loopGuard: string;
    /**
     * Loop-guard timeout (0 - 120 min, default = 45).
     */
    loopGuardTimeout: number;
    /**
     * Port/Trunk MAC.
     */
    macAddr: string;
    /**
     * Matched interface tags in the dynamic port policy.
     */
    matchedDppIntfTags: string;
    /**
     * Matched child policy in the dynamic port policy.
     */
    matchedDppPolicy: string;
    /**
     * Maximum size of LAG bundle (1 - 24, default = 24)
     */
    maxBundle: number;
    /**
     * Enable/disable multi-chassis link aggregation (MCLAG). Valid values: `enable`, `disable`.
     */
    mclag: string;
    /**
     * MCLAG-ICL port.
     */
    mclagIclPort: number;
    /**
     * Media type.
     */
    mediaType: string;
    /**
     * Port behavior after it withdraws because of loss of control packets. Valid values: `forward`, `block`.
     */
    memberWithdrawalBehavior: string;
    /**
     * Aggregated LAG bundle interfaces. The structure of `members` block is documented below.
     */
    members?: outputs.SwitchControllerManagedSwitchPortMember[];
    /**
     * Minimum size of LAG bundle (1 - 24, default = 1)
     */
    minBundle: number;
    /**
     * LACP mode: ignore and do not send control messages, or negotiate 802.3ad aggregation passively or actively. Valid values: `static`, `lacp-passive`, `lacp-active`.
     */
    mode: string;
    /**
     * General peer to peer tunnel port.
     */
    p2pPort: number;
    /**
     * Packet sampling rate (0 - 99999 p/sec).
     */
    packetSampleRate: number;
    /**
     * Enable/disable packet sampling on this interface. Valid values: `enabled`, `disabled`.
     */
    packetSampler: string;
    /**
     * Configure ingress pause metering rate, in kbps (default = 0, disabled).
     */
    pauseMeter: number;
    /**
     * Resume threshold for resuming traffic on ingress port. Valid values: `75%`, `50%`, `25%`.
     */
    pauseMeterResume: string;
    /**
     * PoE capable.
     */
    poeCapable: number;
    /**
     * PoE maximum power.
     */
    poeMaxPower: string;
    /**
     * Enable/disable PoE pre-standard detection. Valid values: `enable`, `disable`.
     */
    poePreStandardDetection: string;
    /**
     * PoE standard supported.
     */
    poeStandard: string;
    /**
     * Enable/disable PoE status. Valid values: `enable`, `disable`.
     */
    poeStatus: string;
    /**
     * Switch port name.
     */
    portName: string;
    /**
     * Port number.
     */
    portNumber: number;
    /**
     * Switch port name.
     */
    portOwner: string;
    /**
     * Switch controller dynamic port policy from available options.
     */
    portPolicy: string;
    /**
     * Port prefix type.
     */
    portPrefixType: number;
    /**
     * Switch controller authentication policy to apply to this managed switch from available options.
     */
    portSecurityPolicy: string;
    /**
     * Algorithm for aggregate port selection. Valid values: `src-mac`, `dst-mac`, `src-dst-mac`, `src-ip`, `dst-ip`, `src-dst-ip`.
     */
    portSelectionCriteria: string;
    /**
     * PTP policy configuration.
     */
    ptpPolicy: string;
    /**
     * Switch controller QoS policy from available options.
     */
    qosPolicy: string;
    /**
     * Enable/disable inter-operability with rapid PVST on this interface. Valid values: `disabled`, `enabled`.
     */
    rpvstPort: string;
    /**
     * sFlow sample direction. Valid values: `tx`, `rx`, `both`.
     */
    sampleDirection: string;
    /**
     * sFlow sampler counter polling interval (1 - 255 sec).
     */
    sflowCounterInterval: number;
    /**
     * sFlow sampler sample rate (0 - 99999 p/sec).
     */
    sflowSampleRate: number;
    /**
     * Enable/disable sFlow protocol on this interface. Valid values: `enabled`, `disabled`.
     */
    sflowSampler: string;
    /**
     * Switch port speed; default and available settings depend on hardware.
     */
    speed: string;
    /**
     * Switch port speed mask.
     */
    speedMask: number;
    /**
     * Stacking port.
     */
    stackingPort: number;
    /**
     * Active/inactive mirror configuration. Valid values: `active`, `inactive`.
     */
    status: string;
    /**
     * Enable or disable sticky-mac on the interface. Valid values: `enable`, `disable`.
     */
    stickyMac: string;
    /**
     * Switch controller storm control policy from available options.
     */
    stormControlPolicy: string;
    /**
     * Enable/disable STP BPDU guard on this interface. Valid values: `enabled`, `disabled`.
     */
    stpBpduGuard: string;
    /**
     * BPDU Guard disabling protection (0 - 120 min).
     */
    stpBpduGuardTimeout: number;
    /**
     * Enable/disable STP root guard on this interface. Valid values: `enabled`, `disabled`.
     */
    stpRootGuard: string;
    /**
     * Enable/disable Spanning Tree Protocol (STP) on this interface. Valid values: `enabled`, `disabled`.
     */
    stpState: string;
    /**
     * Switch id.
     */
    switchId: string;
    /**
     * Type. Valid values: `static`, `sticky`.
     */
    type: string;
    /**
     * Configure switch port untagged vlans The structure of `untaggedVlans` block is documented below.
     */
    untaggedVlans?: outputs.SwitchControllerManagedSwitchPortUntaggedVlan[];
    /**
     * Virtualized switch port.
     */
    virtualPort: number;
    /**
     * Vlan.
     */
    vlan: string;
}

export interface SwitchControllerManagedSwitchPortAllowedVlan {
    /**
     * List of FortiSwitch VLANs.
     */
    vlanName: string;
}

export interface SwitchControllerManagedSwitchPortExportTag {
    /**
     * Switch tag name.
     */
    tagName: string;
}

export interface SwitchControllerManagedSwitchPortInterfaceTag {
    /**
     * Switch tag name.
     */
    tagName: string;
}

export interface SwitchControllerManagedSwitchPortMember {
    /**
     * Interface name from available options.
     */
    memberName: string;
}

export interface SwitchControllerManagedSwitchPortUntaggedVlan {
    /**
     * List of FortiSwitch VLANs.
     */
    vlanName: string;
}

export interface SwitchControllerManagedSwitchRemoteLog {
    /**
     * Enable/disable comma-separated value (CSV) strings. Valid values: `enable`, `disable`.
     */
    csv: string;
    /**
     * Facility to log to remote syslog server. Valid values: `kernel`, `user`, `mail`, `daemon`, `auth`, `syslog`, `lpr`, `news`, `uucp`, `cron`, `authpriv`, `ftp`, `ntp`, `audit`, `alert`, `clock`, `local0`, `local1`, `local2`, `local3`, `local4`, `local5`, `local6`, `local7`.
     */
    facility: string;
    /**
     * Interface name.
     */
    name: string;
    /**
     * Remote syslog server listening port.
     */
    port: number;
    /**
     * IPv4 address of the remote syslog server.
     */
    server: string;
    /**
     * Severity of logs to be transferred to remote log server. Valid values: `emergency`, `alert`, `critical`, `error`, `warning`, `notification`, `information`, `debug`.
     */
    severity: string;
    /**
     * Active/inactive mirror configuration. Valid values: `active`, `inactive`.
     */
    status: string;
}

export interface SwitchControllerManagedSwitchSnmpCommunity {
    /**
     * SNMP notifications (traps) to send. Valid values: `cpu-high`, `mem-low`, `log-full`, `intf-ip`, `ent-conf-change`.
     */
    events: string;
    /**
     * Configure IPv4 SNMP managers (hosts). The structure of `hosts` block is documented below.
     */
    hosts?: outputs.SwitchControllerManagedSwitchSnmpCommunityHost[];
    /**
     * Id
     */
    id: number;
    /**
     * Interface name.
     */
    name: string;
    /**
     * SNMP v1 query port (default = 161).
     */
    queryV1Port: number;
    /**
     * Enable/disable SNMP v1 queries. Valid values: `disable`, `enable`.
     */
    queryV1Status: string;
    /**
     * SNMP v2c query port (default = 161).
     */
    queryV2cPort: number;
    /**
     * Enable/disable SNMP v2c queries. Valid values: `disable`, `enable`.
     */
    queryV2cStatus: string;
    /**
     * Active/inactive mirror configuration. Valid values: `active`, `inactive`.
     */
    status: string;
    /**
     * SNMP v2c trap local port (default = 162).
     */
    trapV1Lport: number;
    /**
     * SNMP v2c trap remote port (default = 162).
     */
    trapV1Rport: number;
    /**
     * Enable/disable SNMP v1 traps. Valid values: `disable`, `enable`.
     */
    trapV1Status: string;
    /**
     * SNMP v2c trap local port (default = 162).
     */
    trapV2cLport: number;
    /**
     * SNMP v2c trap remote port (default = 162).
     */
    trapV2cRport: number;
    /**
     * Enable/disable SNMP v2c traps. Valid values: `disable`, `enable`.
     */
    trapV2cStatus: string;
}

export interface SwitchControllerManagedSwitchSnmpCommunityHost {
    /**
     * Id
     */
    id: number;
    /**
     * IPv4 address of the SNMP manager (host).
     */
    ip: string;
}

export interface SwitchControllerManagedSwitchSnmpSysinfo {
    /**
     * Contact information.
     */
    contactInfo: string;
    /**
     * Description.
     */
    description: string;
    /**
     * Local SNMP engine ID string (max 24 char).
     */
    engineId: string;
    /**
     * System location.
     */
    location: string;
    /**
     * Active/inactive mirror configuration. Valid values: `active`, `inactive`.
     */
    status: string;
}

export interface SwitchControllerManagedSwitchSnmpTrapThreshold {
    /**
     * CPU usage when trap is sent.
     */
    trapHighCpuThreshold: number;
    /**
     * Log disk usage when trap is sent.
     */
    trapLogFullThreshold: number;
    /**
     * Memory usage when trap is sent.
     */
    trapLowMemoryThreshold: number;
}

export interface SwitchControllerManagedSwitchSnmpUser {
    /**
     * Authentication protocol.
     */
    authProto: string;
    /**
     * Password for authentication protocol.
     */
    authPwd?: string;
    /**
     * Interface name.
     */
    name: string;
    /**
     * Privacy (encryption) protocol.
     */
    privProto: string;
    /**
     * Password for privacy (encryption) protocol.
     */
    privPwd?: string;
    /**
     * Enable/disable SNMP queries for this user. Valid values: `disable`, `enable`.
     */
    queries: string;
    /**
     * SNMPv3 query port (default = 161).
     */
    queryPort: number;
    /**
     * Security level for message authentication and encryption. Valid values: `no-auth-no-priv`, `auth-no-priv`, `auth-priv`.
     */
    securityLevel: string;
}

export interface SwitchControllerManagedSwitchStaticMac {
    /**
     * Description.
     */
    description: string;
    /**
     * Id
     */
    id: number;
    /**
     * Interface name.
     */
    interface: string;
    /**
     * MAC address.
     */
    mac: string;
    /**
     * Type. Valid values: `static`, `sticky`.
     */
    type: string;
    /**
     * Vlan.
     */
    vlan: string;
}

export interface SwitchControllerManagedSwitchStormControl {
    /**
     * Enable/disable storm control to drop broadcast traffic. Valid values: `enable`, `disable`.
     */
    broadcast: string;
    /**
     * Enable to override global 802.1X settings on individual FortiSwitches. Valid values: `enable`, `disable`.
     */
    localOverride: string;
    /**
     * Rate in packets per second at which storm traffic is controlled (1 - 10000000, default = 500). Storm control drops excess traffic data rates beyond this threshold.
     */
    rate: number;
    /**
     * Enable/disable storm control to drop unknown multicast traffic. Valid values: `enable`, `disable`.
     */
    unknownMulticast: string;
    /**
     * Enable/disable storm control to drop unknown unicast traffic. Valid values: `enable`, `disable`.
     */
    unknownUnicast: string;
}

export interface SwitchControllerManagedSwitchStpInstance {
    /**
     * Id
     */
    id: string;
    /**
     * Priority. Valid values: `0`, `4096`, `8192`, `12288`, `16384`, `20480`, `24576`, `28672`, `32768`, `36864`, `40960`, `45056`, `49152`, `53248`, `57344`, `61440`.
     */
    priority: string;
}

export interface SwitchControllerManagedSwitchStpSettings {
    /**
     * Period of time a port is in listening and learning state (4 - 30 sec, default = 15).
     */
    forwardTime: number;
    /**
     * Period of time between successive STP frame Bridge Protocol Data Units (BPDUs) sent on a port (1 - 10 sec, default = 2).
     */
    helloTime: number;
    /**
     * Enable to override global 802.1X settings on individual FortiSwitches. Valid values: `enable`, `disable`.
     */
    localOverride: string;
    /**
     * Maximum time before a bridge port saves its configuration BPDU information (6 - 40 sec, default = 20).
     */
    maxAge: number;
    /**
     * Maximum number of hops between the root bridge and the furthest bridge (1- 40, default = 20).
     */
    maxHops: number;
    /**
     * Interface name.
     */
    name: string;
    /**
     * Pending time (1 - 15 sec, default = 4).
     */
    pendingTimer: number;
    /**
     * STP revision number (0 - 65535).
     */
    revision: number;
    /**
     * Active/inactive mirror configuration. Valid values: `active`, `inactive`.
     */
    status: string;
}

export interface SwitchControllerManagedSwitchSwitchLog {
    /**
     * Enable to override global 802.1X settings on individual FortiSwitches. Valid values: `enable`, `disable`.
     */
    localOverride: string;
    /**
     * Severity of logs to be transferred to remote log server. Valid values: `emergency`, `alert`, `critical`, `error`, `warning`, `notification`, `information`, `debug`.
     */
    severity: string;
    /**
     * Active/inactive mirror configuration. Valid values: `active`, `inactive`.
     */
    status: string;
}

export interface SwitchControllerManagedSwitchSwitchStpSettings {
    /**
     * Active/inactive mirror configuration. Valid values: `active`, `inactive`.
     */
    status: string;
}

export interface SwitchControllerQosIpDscpMapMap {
    /**
     * COS queue number.
     */
    cosQueue: number;
    /**
     * Differentiated service. Valid values: `CS0`, `CS1`, `AF11`, `AF12`, `AF13`, `CS2`, `AF21`, `AF22`, `AF23`, `CS3`, `AF31`, `AF32`, `AF33`, `CS4`, `AF41`, `AF42`, `AF43`, `CS5`, `EF`, `CS6`, `CS7`.
     */
    diffserv: string;
    /**
     * IP Precedence. Valid values: `network-control`, `internetwork-control`, `critic-ecp`, `flashoverride`, `flash`, `immediate`, `priority`, `routine`.
     */
    ipPrecedence: string;
    /**
     * Dscp mapping entry name.
     */
    name: string;
    /**
     * Raw values of DSCP (0 - 63).
     */
    value: string;
}

export interface SwitchControllerQosQueuePolicyCosQueue {
    /**
     * Description of the COS queue.
     */
    description: string;
    /**
     * COS queue drop policy. Valid values: `taildrop`, `weighted-random-early-detection`.
     */
    dropPolicy: string;
    /**
     * Enable/disable ECN packet marking to drop eligible packets. Valid values: `disable`, `enable`.
     */
    ecn: string;
    /**
     * Maximum rate (0 - 4294967295 kbps, 0 to disable).
     */
    maxRate: number;
    /**
     * Maximum rate (% of link speed).
     */
    maxRatePercent: number;
    /**
     * Minimum rate (0 - 4294967295 kbps, 0 to disable).
     */
    minRate: number;
    /**
     * Minimum rate (% of link speed).
     */
    minRatePercent: number;
    /**
     * Cos queue ID.
     */
    name: string;
    /**
     * Weight of weighted round robin scheduling.
     */
    weight: number;
}

export interface SwitchControllerQuarantineTarget {
    /**
     * Description for the quarantine MAC.
     */
    description: string;
    /**
     * FSW entry id for the quarantine MAC.
     */
    entryId: number;
    /**
     * Quarantine MAC.
     */
    mac: string;
    /**
     * Tags for the quarantine MAC. The structure of `tag` block is documented below.
     */
    tags?: outputs.SwitchControllerQuarantineTargetTag[];
}

export interface SwitchControllerQuarantineTargetTag {
    /**
     * Tag string(eg. string1 string2 string3).
     */
    tags: string;
}

export interface SwitchControllerSecurityPolicy8021XUserGroup {
    /**
     * Group name.
     */
    name: string;
}

export interface SwitchControllerSnmpCommunityHost {
    /**
     * Host entry ID.
     */
    id: number;
    /**
     * IPv4 address of the SNMP manager (host).
     */
    ip: string;
}

export interface SwitchControllerStpInstanceVlanRange {
    /**
     * VLAN name.
     */
    vlanName: string;
}

export interface SwitchControllerSwitchGroupMember {
    /**
     * Managed device ID.
     */
    name: string;
    /**
     * Managed device ID.
     */
    switchId: string;
}

export interface SwitchControllerTrafficSnifferTargetIp {
    /**
     * Description for the sniffer port entry.
     */
    description: string;
    /**
     * Sniffer IP.
     */
    ip: string;
}

export interface SwitchControllerTrafficSnifferTargetMac {
    /**
     * Description for the sniffer port entry.
     */
    description: string;
    /**
     * Sniffer MAC.
     */
    mac: string;
}

export interface SwitchControllerTrafficSnifferTargetPort {
    /**
     * Description for the sniffer port entry.
     */
    description: string;
    /**
     * Configure source ingress port interfaces. The structure of `inPorts` block is documented below.
     */
    inPorts?: outputs.SwitchControllerTrafficSnifferTargetPortInPort[];
    /**
     * Configure source egress port interfaces. The structure of `outPorts` block is documented below.
     */
    outPorts?: outputs.SwitchControllerTrafficSnifferTargetPortOutPort[];
    /**
     * Managed-switch ID.
     */
    switchId: string;
}

export interface SwitchControllerTrafficSnifferTargetPortInPort {
    /**
     * Interface name.
     */
    name: string;
}

export interface SwitchControllerTrafficSnifferTargetPortOutPort {
    /**
     * Interface name.
     */
    name: string;
}

export interface SwitchControllerVlanPolicyAllowedVlan {
    /**
     * VLAN name.
     */
    vlanName: string;
}

export interface SwitchControllerVlanPolicyUntaggedVlan {
    /**
     * VLAN name.
     */
    vlanName: string;
}

export interface SwitchControllerVlanPortalMessageOverrides {
    /**
     * Override auth-disclaimer-page message with message from portal-message-overrides group.
     */
    authDisclaimerPage: string;
    /**
     * Override auth-login-failed-page message with message from portal-message-overrides group.
     */
    authLoginFailedPage: string;
    /**
     * Override auth-login-page message with message from portal-message-overrides group.
     */
    authLoginPage: string;
    /**
     * Override auth-reject-page message with message from portal-message-overrides group.
     */
    authRejectPage: string;
}

export interface SwitchControllerVlanSelectedUsergroup {
    /**
     * User group name.
     */
    name: string;
}

export interface SystemAPIUserSettingTrusthost {
    ipv4Trusthost: string;
    type: string;
}

export interface SystemAccprofileFwgrpPermission {
    /**
     * Address Configuration. Valid values: `none`, `read`, `read-write`.
     */
    address: string;
    /**
     * Other Firewall Configuration. Valid values: `none`, `read`, `read-write`.
     */
    others: string;
    /**
     * Policy Configuration. Valid values: `none`, `read`, `read-write`.
     */
    policy: string;
    /**
     * Schedule Configuration. Valid values: `none`, `read`, `read-write`.
     */
    schedule: string;
    /**
     * Service Configuration. Valid values: `none`, `read`, `read-write`.
     */
    service: string;
}

export interface SystemAccprofileLoggrpPermission {
    /**
     * Log & Report configuration. Valid values: `none`, `read`, `read-write`.
     */
    config: string;
    /**
     * Log & Report Data Access. Valid values: `none`, `read`, `read-write`.
     */
    dataAccess: string;
    /**
     * Log & Report Report Access. Valid values: `none`, `read`, `read-write`.
     */
    reportAccess: string;
    /**
     * Log & Report Threat Weight. Valid values: `none`, `read`, `read-write`.
     */
    threatWeight: string;
}

export interface SystemAccprofileNetgrpPermission {
    /**
     * System Configuration. Valid values: `none`, `read`, `read-write`.
     */
    cfg: string;
    /**
     * Packet Capture Configuration. Valid values: `none`, `read`, `read-write`.
     */
    packetCapture: string;
    /**
     * Router Configuration. Valid values: `none`, `read`, `read-write`.
     */
    routeCfg: string;
}

export interface SystemAccprofileSysgrpPermission {
    /**
     * Administrator Users. Valid values: `none`, `read`, `read-write`.
     */
    admin: string;
    /**
     * System Configuration. Valid values: `none`, `read`, `read-write`.
     */
    cfg: string;
    /**
     * Maintenance. Valid values: `none`, `read`, `read-write`.
     */
    mnt: string;
    /**
     * FortiGuard Updates. Valid values: `none`, `read`, `read-write`.
     */
    upd: string;
}

export interface SystemAccprofileUtmgrpPermission {
    /**
     * Antivirus profiles and settings. Valid values: `none`, `read`, `read-write`.
     */
    antivirus: string;
    /**
     * Application Control profiles and settings. Valid values: `none`, `read`, `read-write`.
     */
    applicationControl: string;
    /**
     * DLP profiles and settings. Valid values: `none`, `read`, `read-write`.
     */
    dataLossPrevention: string;
    /**
     * DNS Filter profiles and settings. Valid values: `none`, `read`, `read-write`.
     */
    dnsfilter: string;
    /**
     * AntiSpam filter and settings. Valid values: `none`, `read`, `read-write`.
     */
    emailfilter: string;
    /**
     * FortiClient Profiles. Valid values: `none`, `read`, `read-write`.
     */
    endpointControl: string;
    /**
     * File-filter profiles and settings. Valid values: `none`, `read`, `read-write`.
     */
    fileFilter: string;
    /**
     * ICAP profiles and settings. Valid values: `none`, `read`, `read-write`.
     */
    icap: string;
    /**
     * IPS profiles and settings. Valid values: `none`, `read`, `read-write`.
     */
    ips: string;
    /**
     * AntiSpam filter and settings. Valid values: `none`, `read`, `read-write`.
     */
    spamfilter: string;
    /**
     * VoIP profiles and settings. Valid values: `none`, `read`, `read-write`.
     */
    voip: string;
    /**
     * Web Application Firewall profiles and settings. Valid values: `none`, `read`, `read-write`.
     */
    waf: string;
    /**
     * Web Filter profiles and settings. Valid values: `none`, `read`, `read-write`.
     */
    webfilter: string;
}

export interface SystemAcmeAccount {
    /**
     * Account ca_url.
     */
    caUrl: string;
    /**
     * Account email.
     */
    email: string;
    /**
     * Account id.
     */
    id: string;
    /**
     * Account Private Key.
     */
    privatekey: string;
    /**
     * Account status.
     */
    status: string;
    /**
     * Account url.
     */
    url: string;
}

export interface SystemAcmeInterface {
    /**
     * Interface name.
     */
    interfaceName: string;
}

export interface SystemAdminGuestUsergroup {
    /**
     * Select guest user groups.
     */
    name: string;
}

export interface SystemAdminGuiDashboard {
    /**
     * Number of columns.
     */
    columns: number;
    /**
     * Select menu ID.
     */
    id: number;
    /**
     * Layout type. Valid values: `responsive`, `fixed`.
     */
    layoutType: string;
    /**
     * Select guest user groups.
     */
    name: string;
    /**
     * Dashboard scope. Valid values: `global`, `vdom`.
     */
    scope: string;
    /**
     * Dashboard widgets. The structure of `widget` block is documented below.
     */
    widgets?: outputs.SystemAdminGuiDashboardWidget[];
}

export interface SystemAdminGuiDashboardWidget {
    /**
     * Fabric device to monitor.
     */
    fabricDevice: string;
    /**
     * FortiView filters. The structure of `filters` block is documented below.
     */
    filters?: outputs.SystemAdminGuiDashboardWidgetFilter[];
    /**
     * Height.
     */
    height: number;
    /**
     * Select menu ID.
     */
    id: number;
    /**
     * Security Audit Rating industry. Valid values: `default`, `custom`.
     */
    industry: string;
    /**
     * Interface to monitor.
     */
    interface: string;
    /**
     * Security Audit Rating region. Valid values: `default`, `custom`.
     */
    region: string;
    /**
     * Field to aggregate the data by. Valid values: `source`, `destination`, `country`, `intfpair`, `srcintf`, `dstintf`, `policy`, `wificlient`, `shaper`, `endpoint-vulnerability`, `endpoint-device`, `application`, `cloud-app`, `cloud-user`, `web-domain`, `web-category`, `web-search-phrase`, `threat`, `system`, `unauth`, `admin`, `vpn`.
     */
    reportBy: string;
    /**
     * Field to sort the data by.
     */
    sortBy: string;
    /**
     * Timeframe period of reported data. Valid values: `realtime`, `5min`, `hour`, `day`, `week`.
     */
    timeframe: string;
    /**
     * Widget title.
     */
    title: string;
    /**
     * Widget type. Valid values: `sysinfo`, `licinfo`, `vminfo`, `forticloud`, `cpu-usage`, `memory-usage`, `disk-usage`, `log-rate`, `sessions`, `session-rate`, `tr-history`, `analytics`, `usb-modem`, `admins`, `security-fabric`, `security-fabric-ranking`, `ha-status`, `vulnerability-summary`, `host-scan-summary`, `fortiview`, `botnet-activity`, `fortimail`.
     */
    type: string;
    /**
     * Visualization to use. Valid values: `table`, `bubble`, `country`, `chord`.
     */
    visualization: string;
    /**
     * Width.
     */
    width: number;
    /**
     * X position.
     */
    xPos: number;
    /**
     * Y position.
     */
    yPos: number;
}

export interface SystemAdminGuiDashboardWidgetFilter {
    /**
     * Select menu ID.
     */
    id: number;
    /**
     * Filter key.
     */
    key: string;
    /**
     * Filter value.
     */
    value: string;
}

export interface SystemAdminGuiGlobalMenuFavorite {
    /**
     * Select menu ID.
     */
    id: string;
}

export interface SystemAdminGuiNewFeatureAcknowledge {
    /**
     * Select menu ID.
     */
    id: string;
}

export interface SystemAdminGuiVdomMenuFavorite {
    /**
     * Select menu ID.
     */
    id: string;
}

export interface SystemAdminLoginTime {
    /**
     * Last failed login time.
     */
    lastFailedLogin: string;
    /**
     * Last successful login time.
     */
    lastLogin: string;
    /**
     * User name.
     */
    usrName: string;
}

export interface SystemAdminVdom {
    /**
     * Select guest user groups.
     */
    name: string;
}

export interface SystemAlarmGroup {
    /**
     * Admin authentication failure threshold.
     */
    adminAuthFailureThreshold: number;
    /**
     * Admin authentication lockout threshold.
     */
    adminAuthLockoutThreshold: number;
    /**
     * Decryption failure threshold.
     */
    decryptionFailureThreshold: number;
    /**
     * Encryption failure threshold.
     */
    encryptionFailureThreshold: number;
    /**
     * Firewall policy ID.
     */
    fwPolicyId: number;
    /**
     * Firewall policy ID threshold.
     */
    fwPolicyIdThreshold: number;
    /**
     * Firewall policy violations. The structure of `fwPolicyViolations` block is documented below.
     */
    fwPolicyViolations?: outputs.SystemAlarmGroupFwPolicyViolation[];
    /**
     * Firewall policy violations ID.
     */
    id: number;
    /**
     * Log full warning threshold.
     */
    logFullWarningThreshold: number;
    /**
     * Time period in seconds (0 = from start up).
     */
    period: number;
    /**
     * Replay attempt threshold.
     */
    replayAttemptThreshold: number;
    /**
     * Self-test failure threshold.
     */
    selfTestFailureThreshold: number;
    /**
     * User authentication failure threshold.
     */
    userAuthFailureThreshold: number;
    /**
     * User authentication lockout threshold.
     */
    userAuthLockoutThreshold: number;
}

export interface SystemAlarmGroupFwPolicyViolation {
    /**
     * Destination IP (0=all).
     */
    dstIp: string;
    /**
     * Destination port (0=all).
     */
    dstPort: number;
    /**
     * Firewall policy violations ID.
     */
    id: number;
    /**
     * Source IP (0=all).
     */
    srcIp: string;
    /**
     * Source port (0=all).
     */
    srcPort: number;
    /**
     * Firewall policy violation threshold.
     */
    threshold: number;
}

export interface SystemApiUserTrusthost {
    /**
     * Table ID.
     */
    id: number;
    /**
     * IPv4 trusted host address.
     */
    ipv4Trusthost: string;
    /**
     * IPv6 trusted host address.
     */
    ipv6Trusthost: string;
    /**
     * Trusthost type. Valid values: `ipv4-trusthost`, `ipv6-trusthost`.
     */
    type: string;
}

export interface SystemApiUserVdom {
    /**
     * Virtual domain name.
     */
    name: string;
}

export interface SystemAutomationActionEmailTo {
    /**
     * SDN connector name.
     */
    name: string;
}

export interface SystemAutomationActionHeader {
    /**
     * Request header.
     */
    header: string;
}

export interface SystemAutomationActionSdnConnector {
    /**
     * SDN connector name.
     */
    name: string;
}

export interface SystemAutomationDestinationDestination {
    /**
     * Destination.
     */
    name: string;
}

export interface SystemAutomationStitchAction {
    /**
     * Action name.
     */
    action: string;
    /**
     * Delay before execution (in seconds).
     */
    delay: number;
    /**
     * Entry ID.
     */
    id: number;
    /**
     * Required in action chain. Valid values: `enable`, `disable`.
     */
    required: string;
}

export interface SystemAutomationStitchDestination {
    /**
     * Destination name.
     */
    name: string;
}

export interface SystemAutomationTriggerField {
    /**
     * Entry ID.
     */
    id: number;
    /**
     * Name.
     */
    name: string;
    /**
     * Value.
     */
    value?: string;
}

export interface SystemCentralManagementServerList {
    /**
     * Indicate whether the FortiGate communicates with the override server using an IPv4 address, an IPv6 address or a FQDN. Valid values: `ipv4`, `ipv6`, `fqdn`.
     */
    addrType: string;
    /**
     * FQDN address of override server.
     */
    fqdn: string;
    /**
     * ID.
     */
    id: number;
    /**
     * IPv4 address of override server.
     */
    serverAddress: string;
    /**
     * IPv6 address of override server.
     */
    serverAddress6: string;
    /**
     * FortiGuard service type. Valid values: `update`, `rating`.
     */
    serverType: string;
}

export interface SystemClusterSyncDownIntfsBeforeSessSync {
    /**
     * Interface name.
     */
    name: string;
}

export interface SystemClusterSyncSessionSyncFilter {
    /**
     * Only sessions using these custom services are synchronized. Use source and destination port ranges to define these custome services. The structure of `customService` block is documented below.
     */
    customServices?: outputs.SystemClusterSyncSessionSyncFilterCustomService[];
    /**
     * Only sessions to this IPv4 address are synchronized. You can only enter one address. To synchronize sessions for multiple destination addresses, add multiple filters.
     */
    dstaddr: string;
    /**
     * Only sessions to this IPv6 address are synchronized. You can only enter one address. To synchronize sessions for multiple destination addresses, add multiple filters.
     */
    dstaddr6: string;
    /**
     * Only sessions to this interface are synchronized. You can only enter one interface name. To synchronize sessions to multiple destination interfaces, add multiple filters.
     */
    dstintf: string;
    /**
     * Only sessions from this IPv4 address are synchronized. You can only enter one address. To synchronize sessions from multiple source addresses, add multiple filters.
     */
    srcaddr: string;
    /**
     * Only sessions from this IPv6 address are synchronized. You can only enter one address. To synchronize sessions from multiple source addresses, add multiple filters.
     */
    srcaddr6: string;
    /**
     * Only sessions from this interface are synchronized. You can only enter one interface name. To synchronize sessions for multiple source interfaces, add multiple filters.
     */
    srcintf: string;
}

export interface SystemClusterSyncSessionSyncFilterCustomService {
    /**
     * Custom service destination port range.
     */
    dstPortRange: string;
    /**
     * Custom service ID.
     */
    id: number;
    /**
     * Custom service source port range.
     */
    srcPortRange: string;
}

export interface SystemClusterSyncSyncvd {
    /**
     * Interface name.
     */
    name: string;
}

export interface SystemCsfFabricConnector {
    /**
     * Override access profile.
     */
    accprofile: string;
    /**
     * Enable/disable downstream device write access to configuration. Valid values: `enable`, `disable`.
     */
    configurationWriteAccess: string;
    /**
     * Serial.
     */
    serial: string;
}

export interface SystemCsfFabricDevice {
    /**
     * Device access token.
     */
    accessToken?: string;
    /**
     * Device IP.
     */
    deviceIp: string;
    /**
     * Device type. Valid values: `fortimail`.
     */
    deviceType: string;
    /**
     * HTTPS port for fabric device.
     */
    httpsPort: number;
    /**
     * Device login name.
     */
    login: string;
    /**
     * Device name.
     */
    name: string;
    /**
     * Device login password.
     */
    password?: string;
}

export interface SystemCsfTrustedList {
    /**
     * Security fabric authorization action. Valid values: `accept`, `deny`.
     */
    action: string;
    /**
     * Authorization type. Valid values: `serial`, `certificate`.
     */
    authorizationType: string;
    /**
     * Certificate.
     */
    certificate?: string;
    /**
     * Trust authorizations by this node's administrator. Valid values: `enable`, `disable`.
     */
    downstreamAuthorization: string;
    /**
     * HA members.
     */
    haMembers: string;
    /**
     * Device name.
     */
    name: string;
    /**
     * Serial.
     */
    serial: string;
}

export interface SystemDdnsDdnsServerAddr {
    /**
     * IP address or FQDN of the server.
     */
    addr: string;
}

export interface SystemDdnsMonitorInterface {
    /**
     * Interface name.
     */
    interfaceName: string;
}

export interface SystemDhcp6ServerIpRange {
    /**
     * End of IP range.
     */
    endIp: string;
    /**
     * ID.
     */
    id: number;
    /**
     * Start of IP range.
     */
    startIp: string;
}

export interface SystemDhcp6ServerPrefixRange {
    /**
     * End of prefix range.
     */
    endPrefix: string;
    /**
     * ID.
     */
    id: number;
    /**
     * Prefix length.
     */
    prefixLength: number;
    /**
     * Start of prefix range.
     */
    startPrefix: string;
}

export interface SystemDhcpServerExcludeRange {
    /**
     * End of IP range.
     */
    endIp: string;
    /**
     * ID.
     */
    id: number;
    /**
     * Start of IP range.
     */
    startIp: string;
}

export interface SystemDhcpServerIpRange {
    /**
     * End of IP range.
     */
    endIp: string;
    /**
     * ID.
     */
    id: number;
    /**
     * Start of IP range.
     */
    startIp: string;
}

export interface SystemDhcpServerOption {
    /**
     * DHCP option code.
     */
    code: number;
    /**
     * ID.
     */
    id: number;
    /**
     * IP address to be reserved for the MAC address.
     */
    ip: string;
    /**
     * DHCP reserved-address type. Valid values: `mac`, `option82`.
     */
    type: string;
    /**
     * DHCP option value.
     */
    value: string;
}

export interface SystemDhcpServerReservedAddress {
    /**
     * Options for the DHCP server to configure the client with the reserved MAC address. Valid values: `assign`, `block`, `reserved`.
     */
    action: string;
    /**
     * Option 82 circuit-ID of the client that will get the reserved IP address.
     */
    circuitId: string;
    /**
     * DHCP option type. Valid values: `hex`, `string`.
     */
    circuitIdType: string;
    /**
     * Description.
     */
    description?: string;
    /**
     * ID.
     */
    id: number;
    /**
     * IP address to be reserved for the MAC address.
     */
    ip: string;
    /**
     * MAC address of the client that will get the reserved IP address.
     */
    mac: string;
    /**
     * Option 82 remote-ID of the client that will get the reserved IP address.
     */
    remoteId: string;
    /**
     * DHCP option type. Valid values: `hex`, `string`.
     */
    remoteIdType: string;
    /**
     * DHCP reserved-address type. Valid values: `mac`, `option82`.
     */
    type: string;
}

export interface SystemDhcpServerTftpServer {
    /**
     * TFTP server.
     */
    tftpServer: string;
}

export interface SystemDhcpServerVciString {
    /**
     * VCI strings.
     */
    vciString: string;
}

export interface SystemDnsDatabaseDnsEntry {
    /**
     * Canonical name of the host.
     */
    canonicalName: string;
    /**
     * Name of the host.
     */
    hostname: string;
    /**
     * DNS entry ID.
     */
    id: number;
    /**
     * IPv4 address of the host.
     */
    ip: string;
    /**
     * IPv6 address of the host.
     */
    ipv6: string;
    /**
     * DNS entry preference, 0 is the highest preference (0 - 65535, default = 10)
     */
    preference: number;
    /**
     * Enable/disable resource record status. Valid values: `enable`, `disable`.
     */
    status: string;
    /**
     * Time-to-live for this entry (0 to 2147483647 sec, default = 0).
     */
    ttl: number;
    /**
     * Resource record type. Valid values: `A`, `NS`, `CNAME`, `MX`, `AAAA`, `PTR`, `PTR_V6`.
     */
    type: string;
}

export interface SystemDnsDomain {
    /**
     * DNS search domain list separated by space (maximum 8 domains)
     */
    domain: string;
}

export interface SystemDnsServerHostname {
    /**
     * DNS server host name list separated by space (maximum 4 domains).
     */
    hostname: string;
}

export interface SystemFederatedUpgradeNodeList {
    /**
     * The serial of the FortiGate that controls this device
     */
    coordinatingFortigate: string;
    /**
     * What type of device this node represents. Valid values: `fortigate`, `fortiswitch`, `fortiap`.
     */
    deviceType: string;
    /**
     * Serial number of the node to include.
     */
    serial: string;
    /**
     * When the upgrade was configured. Format hh:mm yyyy/mm/dd UTC.
     */
    setupTime: string;
    /**
     * Scheduled time for the upgrade. Format hh:mm yyyy/mm/dd UTC.
     */
    time: string;
    /**
     * Whether the upgrade should be run immediately, or at a scheduled time. Valid values: `immediate`, `scheduled`.
     */
    timing: string;
    /**
     * Image IDs to upgrade through.
     */
    upgradePath: string;
}

export interface SystemGeoipOverrideIp6Range {
    /**
     * Ending IP address, inclusive, of the address range (format: xxxx:xxxx:xxxx:xxxx:xxxx:xxxx:xxxx:xxxx).
     */
    endIp: string;
    /**
     * ID of individual entry in the IPv6 range table.
     */
    id: number;
    /**
     * Starting IP address, inclusive, of the address range (format: xxxx:xxxx:xxxx:xxxx:xxxx:xxxx:xxxx:xxxx).
     */
    startIp: string;
}

export interface SystemGeoipOverrideIpRange {
    /**
     * Ending IP address, inclusive, of the address range (format: xxxx:xxxx:xxxx:xxxx:xxxx:xxxx:xxxx:xxxx).
     */
    endIp: string;
    /**
     * ID of individual entry in the IPv6 range table.
     */
    id: number;
    /**
     * Starting IP address, inclusive, of the address range (format: xxxx:xxxx:xxxx:xxxx:xxxx:xxxx:xxxx:xxxx).
     */
    startIp: string;
}

export interface SystemHaHaMgmtInterface {
    dst: string;
    gateway: string;
    gateway6: string;
    id: number;
    interface: string;
}

export interface SystemHaSecondaryVcluster {
    monitor: string;
    override: string;
    overrideWaitTime: number;
    pingserverFailoverThreshold: number;
    pingserverMonitorInterface: string;
    pingserverSecondaryForceReset: string;
    pingserverSlaveForceReset: string;
    priority: number;
    vclusterId: number;
    vdom: string;
}

export interface SystemHaUnicastPeer {
    id: number;
    peerIp: string;
}

export interface SystemIkeDhGroup1 {
    /**
     * Configure custom key pair cache size for this Diffie-Hellman group. Valid values: `global`, `custom`.
     */
    keypairCache: string;
    /**
     * Number of key pairs to pre-generate for this Diffie-Hellman group (per-worker).
     */
    keypairCount: number;
    /**
     * Use software (CPU) or hardware (CPX) to perform calculations for this Diffie-Hellman group. Valid values: `software`, `hardware`, `global`.
     */
    mode: string;
}

export interface SystemIkeDhGroup14 {
    /**
     * Configure custom key pair cache size for this Diffie-Hellman group. Valid values: `global`, `custom`.
     */
    keypairCache: string;
    /**
     * Number of key pairs to pre-generate for this Diffie-Hellman group (per-worker).
     */
    keypairCount: number;
    /**
     * Use software (CPU) or hardware (CPX) to perform calculations for this Diffie-Hellman group. Valid values: `software`, `hardware`, `global`.
     */
    mode: string;
}

export interface SystemIkeDhGroup15 {
    /**
     * Configure custom key pair cache size for this Diffie-Hellman group. Valid values: `global`, `custom`.
     */
    keypairCache: string;
    /**
     * Number of key pairs to pre-generate for this Diffie-Hellman group (per-worker).
     */
    keypairCount: number;
    /**
     * Use software (CPU) or hardware (CPX) to perform calculations for this Diffie-Hellman group. Valid values: `software`, `hardware`, `global`.
     */
    mode: string;
}

export interface SystemIkeDhGroup16 {
    /**
     * Configure custom key pair cache size for this Diffie-Hellman group. Valid values: `global`, `custom`.
     */
    keypairCache: string;
    /**
     * Number of key pairs to pre-generate for this Diffie-Hellman group (per-worker).
     */
    keypairCount: number;
    /**
     * Use software (CPU) or hardware (CPX) to perform calculations for this Diffie-Hellman group. Valid values: `software`, `hardware`, `global`.
     */
    mode: string;
}

export interface SystemIkeDhGroup17 {
    /**
     * Configure custom key pair cache size for this Diffie-Hellman group. Valid values: `global`, `custom`.
     */
    keypairCache: string;
    /**
     * Number of key pairs to pre-generate for this Diffie-Hellman group (per-worker).
     */
    keypairCount: number;
    /**
     * Use software (CPU) or hardware (CPX) to perform calculations for this Diffie-Hellman group. Valid values: `software`, `hardware`, `global`.
     */
    mode: string;
}

export interface SystemIkeDhGroup18 {
    /**
     * Configure custom key pair cache size for this Diffie-Hellman group. Valid values: `global`, `custom`.
     */
    keypairCache: string;
    /**
     * Number of key pairs to pre-generate for this Diffie-Hellman group (per-worker).
     */
    keypairCount: number;
    /**
     * Use software (CPU) or hardware (CPX) to perform calculations for this Diffie-Hellman group. Valid values: `software`, `hardware`, `global`.
     */
    mode: string;
}

export interface SystemIkeDhGroup19 {
    /**
     * Configure custom key pair cache size for this Diffie-Hellman group. Valid values: `global`, `custom`.
     */
    keypairCache: string;
    /**
     * Number of key pairs to pre-generate for this Diffie-Hellman group (per-worker).
     */
    keypairCount: number;
    /**
     * Use software (CPU) or hardware (CPX) to perform calculations for this Diffie-Hellman group. Valid values: `software`, `hardware`, `global`.
     */
    mode: string;
}

export interface SystemIkeDhGroup2 {
    /**
     * Configure custom key pair cache size for this Diffie-Hellman group. Valid values: `global`, `custom`.
     */
    keypairCache: string;
    /**
     * Number of key pairs to pre-generate for this Diffie-Hellman group (per-worker).
     */
    keypairCount: number;
    /**
     * Use software (CPU) or hardware (CPX) to perform calculations for this Diffie-Hellman group. Valid values: `software`, `hardware`, `global`.
     */
    mode: string;
}

export interface SystemIkeDhGroup20 {
    /**
     * Configure custom key pair cache size for this Diffie-Hellman group. Valid values: `global`, `custom`.
     */
    keypairCache: string;
    /**
     * Number of key pairs to pre-generate for this Diffie-Hellman group (per-worker).
     */
    keypairCount: number;
    /**
     * Use software (CPU) or hardware (CPX) to perform calculations for this Diffie-Hellman group. Valid values: `software`, `hardware`, `global`.
     */
    mode: string;
}

export interface SystemIkeDhGroup21 {
    /**
     * Configure custom key pair cache size for this Diffie-Hellman group. Valid values: `global`, `custom`.
     */
    keypairCache: string;
    /**
     * Number of key pairs to pre-generate for this Diffie-Hellman group (per-worker).
     */
    keypairCount: number;
    /**
     * Use software (CPU) or hardware (CPX) to perform calculations for this Diffie-Hellman group. Valid values: `software`, `hardware`, `global`.
     */
    mode: string;
}

export interface SystemIkeDhGroup27 {
    /**
     * Configure custom key pair cache size for this Diffie-Hellman group. Valid values: `global`, `custom`.
     */
    keypairCache: string;
    /**
     * Number of key pairs to pre-generate for this Diffie-Hellman group (per-worker).
     */
    keypairCount: number;
    /**
     * Use software (CPU) or hardware (CPX) to perform calculations for this Diffie-Hellman group. Valid values: `software`, `hardware`, `global`.
     */
    mode: string;
}

export interface SystemIkeDhGroup28 {
    /**
     * Configure custom key pair cache size for this Diffie-Hellman group. Valid values: `global`, `custom`.
     */
    keypairCache: string;
    /**
     * Number of key pairs to pre-generate for this Diffie-Hellman group (per-worker).
     */
    keypairCount: number;
    /**
     * Use software (CPU) or hardware (CPX) to perform calculations for this Diffie-Hellman group. Valid values: `software`, `hardware`, `global`.
     */
    mode: string;
}

export interface SystemIkeDhGroup29 {
    /**
     * Configure custom key pair cache size for this Diffie-Hellman group. Valid values: `global`, `custom`.
     */
    keypairCache: string;
    /**
     * Number of key pairs to pre-generate for this Diffie-Hellman group (per-worker).
     */
    keypairCount: number;
    /**
     * Use software (CPU) or hardware (CPX) to perform calculations for this Diffie-Hellman group. Valid values: `software`, `hardware`, `global`.
     */
    mode: string;
}

export interface SystemIkeDhGroup30 {
    /**
     * Configure custom key pair cache size for this Diffie-Hellman group. Valid values: `global`, `custom`.
     */
    keypairCache: string;
    /**
     * Number of key pairs to pre-generate for this Diffie-Hellman group (per-worker).
     */
    keypairCount: number;
    /**
     * Use software (CPU) or hardware (CPX) to perform calculations for this Diffie-Hellman group. Valid values: `software`, `hardware`, `global`.
     */
    mode: string;
}

export interface SystemIkeDhGroup31 {
    /**
     * Configure custom key pair cache size for this Diffie-Hellman group. Valid values: `global`, `custom`.
     */
    keypairCache: string;
    /**
     * Number of key pairs to pre-generate for this Diffie-Hellman group (per-worker).
     */
    keypairCount: number;
    /**
     * Use software (CPU) or hardware (CPX) to perform calculations for this Diffie-Hellman group. Valid values: `software`, `hardware`, `global`.
     */
    mode: string;
}

export interface SystemIkeDhGroup32 {
    /**
     * Configure custom key pair cache size for this Diffie-Hellman group. Valid values: `global`, `custom`.
     */
    keypairCache: string;
    /**
     * Number of key pairs to pre-generate for this Diffie-Hellman group (per-worker).
     */
    keypairCount: number;
    /**
     * Use software (CPU) or hardware (CPX) to perform calculations for this Diffie-Hellman group. Valid values: `software`, `hardware`, `global`.
     */
    mode: string;
}

export interface SystemIkeDhGroup5 {
    /**
     * Configure custom key pair cache size for this Diffie-Hellman group. Valid values: `global`, `custom`.
     */
    keypairCache: string;
    /**
     * Number of key pairs to pre-generate for this Diffie-Hellman group (per-worker).
     */
    keypairCount: number;
    /**
     * Use software (CPU) or hardware (CPX) to perform calculations for this Diffie-Hellman group. Valid values: `software`, `hardware`, `global`.
     */
    mode: string;
}

export interface SystemInterfaceClientOption {
    /**
     * DHCP client option code.
     */
    code: number;
    /**
     * ID.
     */
    id: number;
    /**
     * Secondary IP address of the interface.
     */
    ip: string;
    /**
     * DHCP client option type. Valid values: `hex`, `string`, `ip`, `fqdn`.
     */
    type: string;
    /**
     * DHCP client option value.
     */
    value: string;
}

export interface SystemInterfaceDhcpSnoopingServerList {
    /**
     * Tag name.
     */
    name: string;
    /**
     * IP address for DHCP server.
     */
    serverIp: string;
}

export interface SystemInterfaceFailAlertInterface {
    /**
     * Tag name.
     */
    name: string;
}

export interface SystemInterfaceIpv6 {
    /**
     * Enable/disable address auto config. Valid values: `enable`, `disable`.
     */
    autoconf: string;
    /**
     * CLI IPv6 connection status.
     */
    cliConn6Status: number;
    /**
     * DHCPv6 client options. Valid values: `rapid`, `iapd`, `iana`.
     */
    dhcp6ClientOptions: string;
    /**
     * DHCPv6 IA-PD list The structure of `dhcp6IapdList` block is documented below.
     */
    dhcp6IapdLists?: outputs.SystemInterfaceIpv6Dhcp6IapdList[];
    /**
     * Enable/disable DHCPv6 information request. Valid values: `enable`, `disable`.
     */
    dhcp6InformationRequest: string;
    /**
     * Enable/disable DHCPv6 prefix delegation. Valid values: `enable`, `disable`.
     */
    dhcp6PrefixDelegation: string;
    /**
     * DHCPv6 prefix that will be used as a hint to the upstream DHCPv6 server.
     */
    dhcp6PrefixHint: string;
    /**
     * DHCPv6 prefix hint preferred life time (sec), 0 means unlimited lease time.
     */
    dhcp6PrefixHintPlt: number;
    /**
     * DHCPv6 prefix hint valid life time (sec).
     */
    dhcp6PrefixHintVlt: number;
    /**
     * DHCPv6 relay IP address.
     */
    dhcp6RelayIp: string;
    /**
     * Enable/disable DHCPv6 relay. Valid values: `disable`, `enable`.
     */
    dhcp6RelayService: string;
    /**
     * DHCPv6 relay type. Valid values: `regular`.
     */
    dhcp6RelayType: string;
    /**
     * Enable/disable sending of ICMPv6 redirects. Valid values: `enable`, `disable`.
     */
    icmp6SendRedirect: string;
    /**
     * IPv6 interface identifier.
     */
    interfaceIdentifier: string;
    /**
     * Primary IPv6 address prefix, syntax: xxxx:xxxx:xxxx:xxxx:xxxx:xxxx:xxxx:xxxx/xxx
     */
    ip6Address: string;
    /**
     * Allow management access to the interface.
     */
    ip6Allowaccess: string;
    /**
     * Default life (sec).
     */
    ip6DefaultLife: number;
    /**
     * IAID of obtained delegated-prefix from the upstream interface.
     */
    ip6DelegatedPrefixIaid: number;
    /**
     * Advertised IPv6 delegated prefix list. The structure of `ip6DelegatedPrefixList` block is documented below.
     */
    ip6DelegatedPrefixLists?: outputs.SystemInterfaceIpv6Ip6DelegatedPrefixList[];
    /**
     * Enable/disable using the DNS server acquired by DHCP. Valid values: `enable`, `disable`.
     */
    ip6DnsServerOverride: string;
    /**
     * Extra IPv6 address prefixes of interface. The structure of `ip6ExtraAddr` block is documented below.
     */
    ip6ExtraAddrs?: outputs.SystemInterfaceIpv6Ip6ExtraAddr[];
    /**
     * Hop limit (0 means unspecified).
     */
    ip6HopLimit: number;
    /**
     * IPv6 link MTU.
     */
    ip6LinkMtu: number;
    /**
     * Enable/disable the managed flag. Valid values: `enable`, `disable`.
     */
    ip6ManageFlag: string;
    /**
     * IPv6 maximum interval (4 to 1800 sec).
     */
    ip6MaxInterval: number;
    /**
     * IPv6 minimum interval (3 to 1350 sec).
     */
    ip6MinInterval: number;
    /**
     * Addressing mode (static, DHCP, delegated). Valid values: `static`, `dhcp`, `pppoe`, `delegated`.
     */
    ip6Mode: string;
    /**
     * Enable/disable the other IPv6 flag. Valid values: `enable`, `disable`.
     */
    ip6OtherFlag: string;
    /**
     * Advertised prefix list. The structure of `ip6PrefixList` block is documented below.
     */
    ip6PrefixLists?: outputs.SystemInterfaceIpv6Ip6PrefixList[];
    /**
     * Assigning a prefix from DHCP or RA. Valid values: `dhcp6`, `ra`.
     */
    ip6PrefixMode: string;
    /**
     * IPv6 reachable time (milliseconds; 0 means unspecified).
     */
    ip6ReachableTime: number;
    /**
     * IPv6 retransmit time (milliseconds; 0 means unspecified).
     */
    ip6RetransTime: number;
    /**
     * Enable/disable sending advertisements about the interface. Valid values: `enable`, `disable`.
     */
    ip6SendAdv: string;
    /**
     * Subnet to routing prefix, syntax: xxxx:xxxx:xxxx:xxxx:xxxx:xxxx:xxxx:xxxx/xxx
     */
    ip6Subnet: string;
    /**
     * Interface name providing delegated information.
     */
    ip6UpstreamInterface: string;
    /**
     * Neighbor discovery certificate.
     */
    ndCert: string;
    /**
     * Neighbor discovery CGA modifier.
     */
    ndCgaModifier: string;
    /**
     * Neighbor discovery mode. Valid values: `basic`, `SEND-compatible`.
     */
    ndMode: string;
    /**
     * Neighbor discovery security level (0 - 7; 0 = least secure, default = 0).
     */
    ndSecurityLevel: number;
    /**
     * Neighbor discovery timestamp delta value (1 - 3600 sec; default = 300).
     */
    ndTimestampDelta: number;
    /**
     * Neighbor discovery timestamp fuzz factor (1 - 60 sec; default = 1).
     */
    ndTimestampFuzz: number;
    /**
     * Enable/disable sending link MTU in RA packet. Valid values: `enable`, `disable`.
     */
    raSendMtu: string;
    /**
     * Enable/disable unique auto config address. Valid values: `enable`, `disable`.
     */
    uniqueAutoconfAddr: string;
    /**
     * Link-local IPv6 address of virtual router.
     */
    vrip6LinkLocal: string;
    /**
     * IPv6 VRRP configuration. The structure of `vrrp6` block is documented below.
     */
    vrrp6s?: outputs.SystemInterfaceIpv6Vrrp6[];
    /**
     * Enable/disable virtual MAC for VRRP. Valid values: `enable`, `disable`.
     */
    vrrpVirtualMac6: string;
}

export interface SystemInterfaceIpv6Dhcp6IapdList {
    /**
     * Identity association identifier.
     */
    iaid: number;
    /**
     * DHCPv6 prefix that will be used as a hint to the upstream DHCPv6 server.
     */
    prefixHint: string;
    /**
     * DHCPv6 prefix hint preferred life time (sec), 0 means unlimited lease time.
     */
    prefixHintPlt: number;
    /**
     * DHCPv6 prefix hint valid life time (sec).
     */
    prefixHintVlt: number;
}

export interface SystemInterfaceIpv6Ip6DelegatedPrefixList {
    /**
     * Enable/disable the autonomous flag. Valid values: `enable`, `disable`.
     */
    autonomousFlag: string;
    /**
     * IAID of obtained delegated-prefix from the upstream interface.
     */
    delegatedPrefixIaid: number;
    /**
     * Enable/disable the onlink flag. Valid values: `enable`, `disable`.
     */
    onlinkFlag: string;
    /**
     * Prefix ID.
     */
    prefixId: number;
    /**
     * Recursive DNS server option.
     */
    rdnss: string;
    /**
     * Recursive DNS service option. Valid values: `delegated`, `default`, `specify`.
     */
    rdnssService: string;
    /**
     * Add subnet ID to routing prefix.
     */
    subnet: string;
    /**
     * Name of the interface that provides delegated information.
     */
    upstreamInterface: string;
}

export interface SystemInterfaceIpv6Ip6ExtraAddr {
    /**
     * IPv6 prefix.
     */
    prefix: string;
}

export interface SystemInterfaceIpv6Ip6PrefixList {
    /**
     * Enable/disable the autonomous flag. Valid values: `enable`, `disable`.
     */
    autonomousFlag: string;
    /**
     * DNS search list option. The structure of `dnssl` block is documented below.
     */
    dnssls?: outputs.SystemInterfaceIpv6Ip6PrefixListDnssl[];
    /**
     * Enable/disable the onlink flag. Valid values: `enable`, `disable`.
     */
    onlinkFlag: string;
    /**
     * Preferred life time (sec).
     */
    preferredLifeTime: number;
    /**
     * IPv6 prefix.
     */
    prefix: string;
    /**
     * Recursive DNS server option.
     */
    rdnss: string;
    /**
     * Valid life time (sec).
     */
    validLifeTime: number;
}

export interface SystemInterfaceIpv6Ip6PrefixListDnssl {
    /**
     * Domain name.
     */
    domain: string;
}

export interface SystemInterfaceIpv6Vrrp6 {
    /**
     * Enable/disable accept mode. Valid values: `enable`, `disable`.
     */
    acceptMode: string;
    /**
     * Advertisement interval (1 - 255 seconds).
     */
    advInterval: number;
    /**
     * Enable/disable preempt mode. Valid values: `enable`, `disable`.
     */
    preempt: string;
    /**
     * Priority of the virtual router (1 - 255).
     */
    priority: number;
    /**
     * Startup time (1 - 255 seconds).
     */
    startTime: number;
    /**
     * Enable/disable VRRP. Valid values: `enable`, `disable`.
     */
    status: string;
    /**
     * Monitor the route to this destination.
     */
    vrdst6: string;
    /**
     * VRRP group ID (1 - 65535).
     */
    vrgrp: number;
    /**
     * Virtual router identifier (1 - 255).
     */
    vrid: number;
    /**
     * IPv6 address of the virtual router.
     */
    vrip6: string;
}

export interface SystemInterfaceManagedDevice {
    /**
     * Tag name.
     */
    name: string;
}

export interface SystemInterfaceMember {
    /**
     * Physical interface name.
     */
    interfaceName: string;
}

export interface SystemInterfaceSecondaryip {
    /**
     * Management access settings for the secondary IP address.
     */
    allowaccess: string;
    /**
     * Protocols used to detect the server. Valid values: `ping`, `tcp-echo`, `udp-echo`.
     */
    detectprotocol: string;
    /**
     * Gateway's ping server for this IP.
     */
    detectserver: string;
    /**
     * Enable/disable detect gateway alive for first. Valid values: `enable`, `disable`.
     */
    gwdetect: string;
    /**
     * HA election priority for the PING server.
     */
    haPriority: number;
    /**
     * ID.
     */
    id: number;
    /**
     * Secondary IP address of the interface.
     */
    ip: string;
    /**
     * PING server status.
     */
    pingServStatus: number;
}

export interface SystemInterfaceSecurityGroup {
    /**
     * Tag name.
     */
    name: string;
}

export interface SystemInterfaceTagging {
    /**
     * Tag category.
     */
    category: string;
    /**
     * Tag name.
     */
    name: string;
    /**
     * Tags. The structure of `tags` block is documented below.
     */
    tags?: outputs.SystemInterfaceTaggingTag[];
}

export interface SystemInterfaceTaggingTag {
    /**
     * Tag name.
     */
    name: string;
}

export interface SystemInterfaceVrrp {
    /**
     * Enable/disable accept mode. Valid values: `enable`, `disable`.
     */
    acceptMode: string;
    /**
     * Advertisement interval (1 - 255 seconds).
     */
    advInterval: number;
    /**
     * Enable/disable ignoring of default route when checking destination. Valid values: `enable`, `disable`.
     */
    ignoreDefaultRoute: string;
    /**
     * Enable/disable preempt mode. Valid values: `enable`, `disable`.
     */
    preempt: string;
    /**
     * Priority of the virtual router (1 - 255).
     */
    priority: number;
    /**
     * VRRP Proxy ARP configuration. The structure of `proxyArp` block is documented below.
     */
    proxyArps?: outputs.SystemInterfaceVrrpProxyArp[];
    /**
     * Startup time (1 - 255 seconds).
     */
    startTime: number;
    /**
     * Enable/disable VRRP. Valid values: `enable`, `disable`.
     */
    status: string;
    /**
     * VRRP version. Valid values: `2`, `3`.
     */
    version: string;
    /**
     * Monitor the route to this destination.
     */
    vrdst: string;
    /**
     * Priority of the virtual router when the virtual router destination becomes unreachable (0 - 254).
     */
    vrdstPriority: number;
    /**
     * VRRP group ID (1 - 65535).
     */
    vrgrp: number;
    /**
     * Virtual router identifier (1 - 255).
     */
    vrid: number;
    /**
     * IP address of the virtual router.
     */
    vrip: string;
}

export interface SystemInterfaceVrrpProxyArp {
    /**
     * ID.
     */
    id: number;
    /**
     * Secondary IP address of the interface.
     */
    ip: string;
}

export interface SystemIpsecAggregateMember {
    /**
     * Tunnel name.
     */
    tunnelName: string;
}

export interface SystemLinkMonitorRoute {
    /**
     * IP and netmask (x.x.x.x/y).
     */
    subnet: string;
}

export interface SystemLinkMonitorServer {
    /**
     * Server address.
     */
    address: string;
}

export interface SystemLinkMonitorServerList {
    /**
     * IP address of the server to be monitored.
     */
    dst: string;
    /**
     * Server ID.
     */
    id: number;
    /**
     * Port number of the traffic to be used to monitor the server.
     */
    port: number;
    /**
     * Protocols used to monitor the server. Valid values: `ping`, `tcp-echo`, `udp-echo`, `http`, `twamp`.
     */
    protocol: string;
    /**
     * Weight of the monitor to this dst (0 - 255).
     */
    weight: number;
}

export interface SystemLldpNetworkPolicyGuest {
    /**
     * Differentiated Services Code Point (DSCP) value to advertise.
     */
    dscp: number;
    /**
     * 802.1P CoS/PCP to advertise (0 - 7; from lowest to highest priority).
     */
    priority: number;
    /**
     * Enable/disable advertising this policy. Valid values: `disable`, `enable`.
     */
    status: string;
    /**
     * Advertise tagged or untagged traffic. Valid values: `none`, `dot1q`, `dot1p`.
     */
    tag: string;
    /**
     * 802.1Q VLAN ID to advertise (1 - 4094).
     */
    vlan: number;
}

export interface SystemLldpNetworkPolicyGuestVoiceSignaling {
    /**
     * Differentiated Services Code Point (DSCP) value to advertise.
     */
    dscp: number;
    /**
     * 802.1P CoS/PCP to advertise (0 - 7; from lowest to highest priority).
     */
    priority: number;
    /**
     * Enable/disable advertising this policy. Valid values: `disable`, `enable`.
     */
    status: string;
    /**
     * Advertise tagged or untagged traffic. Valid values: `none`, `dot1q`, `dot1p`.
     */
    tag: string;
    /**
     * 802.1Q VLAN ID to advertise (1 - 4094).
     */
    vlan: number;
}

export interface SystemLldpNetworkPolicySoftphone {
    /**
     * Differentiated Services Code Point (DSCP) value to advertise.
     */
    dscp: number;
    /**
     * 802.1P CoS/PCP to advertise (0 - 7; from lowest to highest priority).
     */
    priority: number;
    /**
     * Enable/disable advertising this policy. Valid values: `disable`, `enable`.
     */
    status: string;
    /**
     * Advertise tagged or untagged traffic. Valid values: `none`, `dot1q`, `dot1p`.
     */
    tag: string;
    /**
     * 802.1Q VLAN ID to advertise (1 - 4094).
     */
    vlan: number;
}

export interface SystemLldpNetworkPolicyStreamingVideo {
    /**
     * Differentiated Services Code Point (DSCP) value to advertise.
     */
    dscp: number;
    /**
     * 802.1P CoS/PCP to advertise (0 - 7; from lowest to highest priority).
     */
    priority: number;
    /**
     * Enable/disable advertising this policy. Valid values: `disable`, `enable`.
     */
    status: string;
    /**
     * Advertise tagged or untagged traffic. Valid values: `none`, `dot1q`, `dot1p`.
     */
    tag: string;
    /**
     * 802.1Q VLAN ID to advertise (1 - 4094).
     */
    vlan: number;
}

export interface SystemLldpNetworkPolicyVideoConferencing {
    /**
     * Differentiated Services Code Point (DSCP) value to advertise.
     */
    dscp: number;
    /**
     * 802.1P CoS/PCP to advertise (0 - 7; from lowest to highest priority).
     */
    priority: number;
    /**
     * Enable/disable advertising this policy. Valid values: `disable`, `enable`.
     */
    status: string;
    /**
     * Advertise tagged or untagged traffic. Valid values: `none`, `dot1q`, `dot1p`.
     */
    tag: string;
    /**
     * 802.1Q VLAN ID to advertise (1 - 4094).
     */
    vlan: number;
}

export interface SystemLldpNetworkPolicyVideoSignaling {
    /**
     * Differentiated Services Code Point (DSCP) value to advertise.
     */
    dscp: number;
    /**
     * 802.1P CoS/PCP to advertise (0 - 7; from lowest to highest priority).
     */
    priority: number;
    /**
     * Enable/disable advertising this policy. Valid values: `disable`, `enable`.
     */
    status: string;
    /**
     * Advertise tagged or untagged traffic. Valid values: `none`, `dot1q`, `dot1p`.
     */
    tag: string;
    /**
     * 802.1Q VLAN ID to advertise (1 - 4094).
     */
    vlan: number;
}

export interface SystemLldpNetworkPolicyVoice {
    /**
     * Differentiated Services Code Point (DSCP) value to advertise.
     */
    dscp: number;
    /**
     * 802.1P CoS/PCP to advertise (0 - 7; from lowest to highest priority).
     */
    priority: number;
    /**
     * Enable/disable advertising this policy. Valid values: `disable`, `enable`.
     */
    status: string;
    /**
     * Advertise tagged or untagged traffic. Valid values: `none`, `dot1q`, `dot1p`.
     */
    tag: string;
    /**
     * 802.1Q VLAN ID to advertise (1 - 4094).
     */
    vlan: number;
}

export interface SystemLldpNetworkPolicyVoiceSignaling {
    /**
     * Differentiated Services Code Point (DSCP) value to advertise.
     */
    dscp: number;
    /**
     * 802.1P CoS/PCP to advertise (0 - 7; from lowest to highest priority).
     */
    priority: number;
    /**
     * Enable/disable advertising this policy. Valid values: `disable`, `enable`.
     */
    status: string;
    /**
     * Advertise tagged or untagged traffic. Valid values: `none`, `dot1q`, `dot1p`.
     */
    tag: string;
    /**
     * 802.1Q VLAN ID to advertise (1 - 4094).
     */
    vlan: number;
}

export interface SystemMobileTunnelNetwork {
    /**
     * Network entry ID.
     */
    id: number;
    /**
     * Select the associated interface name from available options.
     */
    interface: string;
    /**
     * Class IP and Netmask with correction (Format:xxx.xxx.xxx.xxx xxx.xxx.xxx.xxx or xxx.xxx.xxx.xxx/x).
     */
    prefix: string;
}

export interface SystemNat64SecondaryPrefix {
    /**
     * NAT64 prefix name.
     */
    name: string;
    /**
     * NAT64 prefix.
     */
    nat64Prefix: string;
}

export interface SystemNdProxyMember {
    /**
     * Interface name.
     */
    interfaceName: string;
}

export interface SystemNpuPriorityProtocol {
    /**
     * Enable/disable NPU BFD priority protocol. Valid values: `enable`, `disable`.
     */
    bfd: string;
    /**
     * Enable/disable NPU BGP priority protocol. Valid values: `enable`, `disable`.
     */
    bgp: string;
    /**
     * Enable/disable NPU SLBC priority protocol. Valid values: `enable`, `disable`.
     */
    slbc: string;
}

export interface SystemNtpInterface {
    /**
     * Interface name.
     */
    interfaceName: string;
}

export interface SystemNtpNtpserver {
    /**
     * Enable/disable MD5/SHA1 authentication. Valid values: `enable`, `disable`.
     */
    authentication: string;
    /**
     * NTP server ID.
     */
    id: number;
    /**
     * Specify outgoing interface to reach server.
     */
    interface: string;
    /**
     * Specify how to select outgoing interface to reach server. Valid values: `auto`, `sdwan`, `specify`.
     */
    interfaceSelectMethod: string;
    /**
     * Key for MD5/SHA1 authentication.
     */
    key?: string;
    /**
     * Key ID for authentication.
     */
    keyId: number;
    /**
     * Enable to use NTPv3 instead of NTPv4. Valid values: `enable`, `disable`.
     */
    ntpv3: string;
    /**
     * IP address or hostname of the NTP Server.
     */
    server: string;
}

export interface SystemObjectTaggingTag {
    /**
     * Tag name.
     */
    name: string;
}

export interface SystemPtpServerInterface {
    /**
     * End to end delay detection or peer to peer delay detection. Valid values: `E2E`, `P2P`.
     */
    delayMechanism: string;
    /**
     * ID.
     */
    id: number;
    /**
     * Interface name.
     */
    serverInterfaceName: string;
}

export interface SystemReplacemsgGroupAdmin {
    /**
     * Message string.
     */
    buffer?: string;
    /**
     * Format flag. Valid values: `none`, `text`, `html`.
     */
    format: string;
    /**
     * Header flag. Valid values: `none`, `http`, `8bit`.
     */
    header: string;
    /**
     * Message type.
     */
    msgType: string;
}

export interface SystemReplacemsgGroupAlertmail {
    /**
     * Message string.
     */
    buffer?: string;
    /**
     * Format flag. Valid values: `none`, `text`, `html`.
     */
    format: string;
    /**
     * Header flag. Valid values: `none`, `http`, `8bit`.
     */
    header: string;
    /**
     * Message type.
     */
    msgType: string;
}

export interface SystemReplacemsgGroupAuth {
    /**
     * Message string.
     */
    buffer?: string;
    /**
     * Format flag. Valid values: `none`, `text`, `html`.
     */
    format: string;
    /**
     * Header flag. Valid values: `none`, `http`, `8bit`.
     */
    header: string;
    /**
     * Message type.
     */
    msgType: string;
}

export interface SystemReplacemsgGroupAutomation {
    /**
     * Message string.
     */
    buffer?: string;
    /**
     * Format flag. Valid values: `none`, `text`, `html`.
     */
    format: string;
    /**
     * Header flag. Valid values: `none`, `http`, `8bit`.
     */
    header: string;
    /**
     * Message type.
     */
    msgType: string;
}

export interface SystemReplacemsgGroupCustomMessage {
    /**
     * Message string.
     */
    buffer?: string;
    /**
     * Format flag. Valid values: `none`, `text`, `html`.
     */
    format: string;
    /**
     * Header flag. Valid values: `none`, `http`, `8bit`.
     */
    header: string;
    /**
     * Message type.
     */
    msgType: string;
}

export interface SystemReplacemsgGroupDeviceDetectionPortal {
    /**
     * Message string.
     */
    buffer?: string;
    /**
     * Format flag. Valid values: `none`, `text`, `html`.
     */
    format: string;
    /**
     * Header flag. Valid values: `none`, `http`, `8bit`.
     */
    header: string;
    /**
     * Message type.
     */
    msgType: string;
}

export interface SystemReplacemsgGroupEc {
    /**
     * Message string.
     */
    buffer?: string;
    /**
     * Format flag. Valid values: `none`, `text`, `html`.
     */
    format: string;
    /**
     * Header flag. Valid values: `none`, `http`, `8bit`.
     */
    header: string;
    /**
     * Message type.
     */
    msgType: string;
}

export interface SystemReplacemsgGroupFortiguardWf {
    /**
     * Message string.
     */
    buffer?: string;
    /**
     * Format flag. Valid values: `none`, `text`, `html`.
     */
    format: string;
    /**
     * Header flag. Valid values: `none`, `http`, `8bit`.
     */
    header: string;
    /**
     * Message type.
     */
    msgType: string;
}

export interface SystemReplacemsgGroupFtp {
    /**
     * Message string.
     */
    buffer?: string;
    /**
     * Format flag. Valid values: `none`, `text`, `html`.
     */
    format: string;
    /**
     * Header flag. Valid values: `none`, `http`, `8bit`.
     */
    header: string;
    /**
     * Message type.
     */
    msgType: string;
}

export interface SystemReplacemsgGroupHttp {
    /**
     * Message string.
     */
    buffer?: string;
    /**
     * Format flag. Valid values: `none`, `text`, `html`.
     */
    format: string;
    /**
     * Header flag. Valid values: `none`, `http`, `8bit`.
     */
    header: string;
    /**
     * Message type.
     */
    msgType: string;
}

export interface SystemReplacemsgGroupIcap {
    /**
     * Message string.
     */
    buffer?: string;
    /**
     * Format flag. Valid values: `none`, `text`, `html`.
     */
    format: string;
    /**
     * Header flag. Valid values: `none`, `http`, `8bit`.
     */
    header: string;
    /**
     * Message type.
     */
    msgType: string;
}

export interface SystemReplacemsgGroupMail {
    /**
     * Message string.
     */
    buffer?: string;
    /**
     * Format flag. Valid values: `none`, `text`, `html`.
     */
    format: string;
    /**
     * Header flag. Valid values: `none`, `http`, `8bit`.
     */
    header: string;
    /**
     * Message type.
     */
    msgType: string;
}

export interface SystemReplacemsgGroupNacQuar {
    /**
     * Message string.
     */
    buffer?: string;
    /**
     * Format flag. Valid values: `none`, `text`, `html`.
     */
    format: string;
    /**
     * Header flag. Valid values: `none`, `http`, `8bit`.
     */
    header: string;
    /**
     * Message type.
     */
    msgType: string;
}

export interface SystemReplacemsgGroupNntp {
    /**
     * Message string.
     */
    buffer?: string;
    /**
     * Format flag. Valid values: `none`, `text`, `html`.
     */
    format: string;
    /**
     * Header flag. Valid values: `none`, `http`, `8bit`.
     */
    header: string;
    /**
     * Message type.
     */
    msgType: string;
}

export interface SystemReplacemsgGroupSpam {
    /**
     * Message string.
     */
    buffer?: string;
    /**
     * Format flag. Valid values: `none`, `text`, `html`.
     */
    format: string;
    /**
     * Header flag. Valid values: `none`, `http`, `8bit`.
     */
    header: string;
    /**
     * Message type.
     */
    msgType: string;
}

export interface SystemReplacemsgGroupSslvpn {
    /**
     * Message string.
     */
    buffer?: string;
    /**
     * Format flag. Valid values: `none`, `text`, `html`.
     */
    format: string;
    /**
     * Header flag. Valid values: `none`, `http`, `8bit`.
     */
    header: string;
    /**
     * Message type.
     */
    msgType: string;
}

export interface SystemReplacemsgGroupTrafficQuota {
    /**
     * Message string.
     */
    buffer?: string;
    /**
     * Format flag. Valid values: `none`, `text`, `html`.
     */
    format: string;
    /**
     * Header flag. Valid values: `none`, `http`, `8bit`.
     */
    header: string;
    /**
     * Message type.
     */
    msgType: string;
}

export interface SystemReplacemsgGroupUtm {
    /**
     * Message string.
     */
    buffer?: string;
    /**
     * Format flag. Valid values: `none`, `text`, `html`.
     */
    format: string;
    /**
     * Header flag. Valid values: `none`, `http`, `8bit`.
     */
    header: string;
    /**
     * Message type.
     */
    msgType: string;
}

export interface SystemReplacemsgGroupWebproxy {
    /**
     * Message string.
     */
    buffer?: string;
    /**
     * Format flag. Valid values: `none`, `text`, `html`.
     */
    format: string;
    /**
     * Header flag. Valid values: `none`, `http`, `8bit`.
     */
    header: string;
    /**
     * Message type.
     */
    msgType: string;
}

export interface SystemSamlServiceProvider {
    /**
     * Customized SAML attributes to send along with assertion. The structure of `assertionAttributes` block is documented below.
     */
    assertionAttributes?: outputs.SystemSamlServiceProviderAssertionAttribute[];
    /**
     * IDP entity ID.
     */
    idpEntityId: string;
    /**
     * IDP single logout URL.
     */
    idpSingleLogoutUrl: string;
    /**
     * IDP single sign-on URL.
     */
    idpSingleSignOnUrl: string;
    /**
     * Name.
     */
    name: string;
    /**
     * Prefix.
     */
    prefix: string;
    /**
     * SP binding protocol. Valid values: `post`, `redirect`.
     */
    spBindingProtocol: string;
    /**
     * SP certificate name.
     */
    spCert: string;
    /**
     * SP entity ID.
     */
    spEntityId: string;
    /**
     * SP portal URL.
     */
    spPortalUrl: string;
    /**
     * SP single logout URL.
     */
    spSingleLogoutUrl: string;
    /**
     * SP single sign-on URL.
     */
    spSingleSignOnUrl: string;
}

export interface SystemSamlServiceProviderAssertionAttribute {
    /**
     * Name.
     */
    name: string;
    /**
     * Type.
     */
    type: string;
}

export interface SystemSdnConnectorExternalAccountList {
    /**
     * AWS region name list. The structure of `regionList` block is documented below.
     */
    regionLists?: outputs.SystemSdnConnectorExternalAccountListRegionList[];
    /**
     * AWS role ARN to assume.
     */
    roleArn: string;
}

export interface SystemSdnConnectorExternalAccountListRegionList {
    /**
     * AWS region name.
     */
    region: string;
}

export interface SystemSdnConnectorExternalIp {
    /**
     * GCP zone name.
     */
    name: string;
}

export interface SystemSdnConnectorForwardingRule {
    /**
     * Forwarding rule name.
     */
    ruleName: string;
    /**
     * Target instance name.
     */
    target: string;
}

export interface SystemSdnConnectorGcpProjectList {
    /**
     * Configure GCP zone list. The structure of `gcpZoneList` block is documented below.
     */
    gcpZoneLists?: outputs.SystemSdnConnectorGcpProjectListGcpZoneList[];
    /**
     * GCP project ID.
     */
    id: string;
}

export interface SystemSdnConnectorGcpProjectListGcpZoneList {
    /**
     * GCP zone name.
     */
    name: string;
}

export interface SystemSdnConnectorNic {
    /**
     * Configure IP configuration. The structure of `ip` block is documented below.
     */
    ips?: outputs.SystemSdnConnectorNicIp[];
    /**
     * GCP zone name.
     */
    name: string;
}

export interface SystemSdnConnectorNicIp {
    /**
     * GCP zone name.
     */
    name: string;
    /**
     * Public IP name.
     */
    publicIp: string;
    /**
     * Resource group of Azure route table.
     */
    resourceGroup: string;
}

export interface SystemSdnConnectorRoute {
    /**
     * GCP zone name.
     */
    name: string;
}

export interface SystemSdnConnectorRouteTable {
    /**
     * GCP zone name.
     */
    name: string;
    /**
     * Resource group of Azure route table.
     */
    resourceGroup: string;
    /**
     * Configure Azure route. The structure of `route` block is documented below.
     */
    routes?: outputs.SystemSdnConnectorRouteTableRoute[];
    /**
     * Subscription ID of Azure route table.
     */
    subscriptionId: string;
}

export interface SystemSdnConnectorRouteTableRoute {
    /**
     * GCP zone name.
     */
    name: string;
    /**
     * Next hop address.
     */
    nextHop: string;
}

export interface SystemSdnConnectorServerList {
    /**
     * Configure IP configuration. The structure of `ip` block is documented below.
     */
    ip: string;
}

export interface SystemSdwanDuplication {
    /**
     * Destination address6 or address6 group names. The structure of `dstaddr6` block is documented below.
     */
    dstaddr6s?: outputs.SystemSdwanDuplicationDstaddr6[];
    /**
     * Destination address or address group names. The structure of `dstaddr` block is documented below.
     */
    dstaddrs?: outputs.SystemSdwanDuplicationDstaddr[];
    /**
     * Outgoing (egress) interfaces or zones. The structure of `dstintf` block is documented below.
     */
    dstintfs?: outputs.SystemSdwanDuplicationDstintf[];
    /**
     * SD-WAN service rule ID.
     */
    id: number;
    /**
     * Enable/disable discarding of packets that have been duplicated. Valid values: `enable`, `disable`.
     */
    packetDeDuplication: string;
    /**
     * Configure packet duplication method. Valid values: `disable`, `force`, `on-demand`.
     */
    packetDuplication: string;
    /**
     * SD-WAN service rule ID list. The structure of `serviceId` block is documented below.
     */
    serviceIds?: outputs.SystemSdwanDuplicationServiceId[];
    /**
     * Service and service group name. The structure of `service` block is documented below.
     */
    services?: outputs.SystemSdwanDuplicationService[];
    /**
     * Source address6 or address6 group names. The structure of `srcaddr6` block is documented below.
     */
    srcaddr6s?: outputs.SystemSdwanDuplicationSrcaddr6[];
    /**
     * Source address or address group names. The structure of `srcaddr` block is documented below.
     */
    srcaddrs?: outputs.SystemSdwanDuplicationSrcaddr[];
    /**
     * Incoming (ingress) interfaces or zones. The structure of `srcintf` block is documented below.
     */
    srcintfs?: outputs.SystemSdwanDuplicationSrcintf[];
}

export interface SystemSdwanDuplicationDstaddr {
    /**
     * Service and service group name.
     */
    name: string;
}

export interface SystemSdwanDuplicationDstaddr6 {
    /**
     * Service and service group name.
     */
    name: string;
}

export interface SystemSdwanDuplicationDstintf {
    /**
     * Service and service group name.
     */
    name: string;
}

export interface SystemSdwanDuplicationService {
    /**
     * Service and service group name.
     */
    name: string;
}

export interface SystemSdwanDuplicationServiceId {
    /**
     * SD-WAN service rule ID.
     */
    id: number;
}

export interface SystemSdwanDuplicationSrcaddr {
    /**
     * Service and service group name.
     */
    name: string;
}

export interface SystemSdwanDuplicationSrcaddr6 {
    /**
     * Service and service group name.
     */
    name: string;
}

export interface SystemSdwanDuplicationSrcintf {
    /**
     * Service and service group name.
     */
    name: string;
}

export interface SystemSdwanFailAlertInterface {
    /**
     * Service and service group name.
     */
    name: string;
}

export interface SystemSdwanHealthCheck {
    /**
     * Address mode (IPv4 or IPv6). Valid values: `ipv4`, `ipv6`.
     */
    addrMode: string;
    /**
     * The mode determining how to detect the server. Valid values: `active`, `passive`, `prefer-passive`.
     */
    detectMode: string;
    /**
     * Differentiated services code point (DSCP) in the IP header of the probe packet.
     */
    diffservcode: string;
    /**
     * Response IP expected from DNS server if the protocol is DNS.
     */
    dnsMatchIp: string;
    /**
     * Fully qualified domain name to resolve for the DNS probe.
     */
    dnsRequestDomain: string;
    /**
     * Number of failures before server is considered lost (1 - 3600, default = 5).
     */
    failtime: number;
    /**
     * Full path and file name on the FTP server to download for FTP health-check to probe.
     */
    ftpFile: string;
    /**
     * FTP mode. Valid values: `passive`, `port`.
     */
    ftpMode: string;
    /**
     * HA election priority (1 - 50).
     */
    haPriority: number;
    /**
     * String in the http-agent field in the HTTP header.
     */
    httpAgent: string;
    /**
     * URL used to communicate with the server if the protocol if the protocol is HTTP.
     */
    httpGet: string;
    /**
     * Response string expected from the server if the protocol is HTTP.
     */
    httpMatch: string;
    /**
     * Status check interval in milliseconds, or the time between attempting to connect to the server (500 - 3600*1000 msec, default = 500).
     */
    interval: number;
    /**
     * Member sequence number list. The structure of `members` block is documented below.
     */
    members?: outputs.SystemSdwanHealthCheckMember[];
    /**
     * Service and service group name.
     */
    name: string;
    /**
     * Packet size of a twamp test session,
     */
    packetSize: number;
    /**
     * Twamp controller password in authentication mode
     */
    password?: string;
    /**
     * Port number used to communicate with the server over the selected protocol (0-65535, default = 0, auto select. http, twamp: 80, udp-echo, tcp-echo: 7, dns: 53, ftp: 21).
     */
    port: number;
    /**
     * Number of most recent probes that should be used to calculate latency and jitter (5 - 30, default = 30).
     */
    probeCount: number;
    /**
     * Enable/disable transmission of probe packets. Valid values: `disable`, `enable`.
     */
    probePackets: string;
    /**
     * Time to wait before a probe packet is considered lost (500 - 3600*1000 msec, default = 500).
     */
    probeTimeout: number;
    /**
     * Protocol number.
     */
    protocol: string;
    /**
     * Method to measure the quality of tcp-connect. Valid values: `half-open`, `half-close`.
     */
    qualityMeasuredMethod: string;
    /**
     * Number of successful responses received before server is considered recovered (1 - 3600, default = 5).
     */
    recoverytime: number;
    /**
     * Twamp controller security mode. Valid values: `none`, `authentication`.
     */
    securityMode: string;
    /**
     * IP address or FQDN name of the server.
     */
    server: string;
    /**
     * Time interval in seconds that SLA fail log messages will be generated (0 - 3600, default = 0).
     */
    slaFailLogPeriod: number;
    /**
     * Time interval in seconds that SLA pass log messages will be generated (0 - 3600, default = 0).
     */
    slaPassLogPeriod: number;
    /**
     * Service level agreement (SLA). The structure of `sla` block is documented below.
     */
    slas?: outputs.SystemSdwanHealthCheckSla[];
    /**
     * Enable/disable system DNS as the probe server. Valid values: `disable`, `enable`.
     */
    systemDns: string;
    /**
     * Alert threshold for jitter (ms, default = 0).
     */
    thresholdAlertJitter: number;
    /**
     * Alert threshold for latency (ms, default = 0).
     */
    thresholdAlertLatency: number;
    /**
     * Alert threshold for packet loss (percentage, default = 0).
     */
    thresholdAlertPacketloss: number;
    /**
     * Warning threshold for jitter (ms, default = 0).
     */
    thresholdWarningJitter: number;
    /**
     * Warning threshold for latency (ms, default = 0).
     */
    thresholdWarningLatency: number;
    /**
     * Warning threshold for packet loss (percentage, default = 0).
     */
    thresholdWarningPacketloss: number;
    /**
     * Enable/disable update cascade interface. Valid values: `enable`, `disable`.
     */
    updateCascadeInterface: string;
    /**
     * Enable/disable updating the static route. Valid values: `enable`, `disable`.
     */
    updateStaticRoute: string;
    /**
     * The user name to access probe server.
     */
    user: string;
}

export interface SystemSdwanHealthCheckMember {
    /**
     * Member sequence number.
     */
    seqNum: number;
}

export interface SystemSdwanHealthCheckSla {
    /**
     * SD-WAN service rule ID.
     */
    id: number;
    /**
     * Jitter for SLA to make decision in milliseconds. (0 - 10000000, default = 5).
     */
    jitterThreshold: number;
    /**
     * Latency for SLA to make decision in milliseconds. (0 - 10000000, default = 5).
     */
    latencyThreshold: number;
    /**
     * Link cost factor. Valid values: `latency`, `jitter`, `packet-loss`, `inbandwidth`, `outbandwidth`, `bibandwidth`, `custom-profile-1`.
     */
    linkCostFactor: string;
    /**
     * Packet loss for SLA to make decision in percentage. (0 - 100, default = 0).
     */
    packetlossThreshold: number;
}

export interface SystemSdwanMember {
    /**
     * Comments.
     */
    comment?: string;
    /**
     * Cost of this interface for services in SLA mode (0 - 4294967295, default = 0).
     */
    cost: number;
    /**
     * Enable/disable SD-WAN service gateway. Valid values: `enable`, `disable`.
     */
    gateway: string;
    /**
     * IPv6 gateway.
     */
    gateway6: string;
    /**
     * Ingress spillover threshold for this interface (0 - 16776000 kbit/s). When this traffic volume threshold is reached, new sessions spill over to other interfaces in the SD-WAN.
     */
    ingressSpilloverThreshold: number;
    /**
     * Interface name.
     */
    interface: string;
    /**
     * Priority of the interface (0 - 65535). Used for SD-WAN rules or priority rules.
     */
    priority: number;
    /**
     * Priority of the interface for IPv6 (1 - 65535, default = 1024). Used for SD-WAN rules or priority rules.
     */
    priority6: number;
    /**
     * Member sequence number.
     */
    seqNum: number;
    /**
     * Source IP address used in the health-check packet to the server.
     */
    source: string;
    /**
     * Source IPv6 address used in the health-check packet to the server.
     */
    source6: string;
    /**
     * Egress spillover threshold for this interface (0 - 16776000 kbit/s). When this traffic volume threshold is reached, new sessions spill over to other interfaces in the SD-WAN.
     */
    spilloverThreshold: number;
    /**
     * Enable/disable SD-WAN service. Valid values: `enable`, `disable`.
     */
    status: string;
    /**
     * Measured volume ratio (this value / sum of all values = percentage of link volume, 1 - 255).
     */
    volumeRatio: number;
    /**
     * Weight of this interface for weighted load balancing. (1 - 255) More traffic is directed to interfaces with higher weights.
     */
    weight: number;
    /**
     * Zone name.
     */
    zone: string;
}

export interface SystemSdwanNeighbor {
    /**
     * SD-WAN health-check.
     */
    healthCheck: string;
    /**
     * IP/IPv6 address of neighbor.
     */
    ip: string;
    /**
     * Member sequence number.
     */
    member: number;
    /**
     * Control how the SD-WAN rule sets the priority of interfaces in the SD-WAN. Valid values: `auto`, `manual`, `priority`, `sla`, `load-balance`.
     */
    mode: string;
    /**
     * Service role to work with neighbor. Valid values: `standalone`, `primary`, `secondary`.
     */
    role: string;
    /**
     * SLA ID.
     */
    slaId: number;
}

export interface SystemSdwanService {
    /**
     * Address mode (IPv4 or IPv6). Valid values: `ipv4`, `ipv6`.
     */
    addrMode: string;
    /**
     * Coefficient of reciprocal of available bidirectional bandwidth in the formula of custom-profile-1.
     */
    bandwidthWeight: number;
    /**
     * Enable/disable use of SD-WAN as default service. Valid values: `enable`, `disable`.
     */
    default: string;
    /**
     * Enable/disable forward traffic DSCP tag. Valid values: `enable`, `disable`.
     */
    dscpForward: string;
    /**
     * Forward traffic DSCP tag.
     */
    dscpForwardTag: string;
    /**
     * Enable/disable reverse traffic DSCP tag. Valid values: `enable`, `disable`.
     */
    dscpReverse: string;
    /**
     * Reverse traffic DSCP tag.
     */
    dscpReverseTag: string;
    /**
     * Destination address6 name. The structure of `dst6` block is documented below.
     */
    dst6s?: outputs.SystemSdwanServiceDst6[];
    /**
     * Enable/disable negation of destination address match. Valid values: `enable`, `disable`.
     */
    dstNegate: string;
    /**
     * Destination address name. The structure of `dst` block is documented below.
     */
    dsts?: outputs.SystemSdwanServiceDst[];
    /**
     * End destination port number.
     */
    endPort: number;
    /**
     * Enable/disable SD-WAN service gateway. Valid values: `enable`, `disable`.
     */
    gateway: string;
    /**
     * User groups. The structure of `groups` block is documented below.
     */
    groups?: outputs.SystemSdwanServiceGroup[];
    /**
     * Hash algorithm for selected priority members for load balance mode. Valid values: `round-robin`, `source-ip-based`, `source-dest-ip-based`, `inbandwidth`, `outbandwidth`, `bibandwidth`.
     */
    hashMode: string;
    /**
     * SD-WAN health-check.
     */
    healthChecks?: outputs.SystemSdwanServiceHealthCheck[];
    /**
     * Waiting period in seconds when switching from the back-up member to the primary member (0 - 10000000, default = 0).
     */
    holdDownTime: number;
    /**
     * SD-WAN service rule ID.
     */
    id: number;
    /**
     * Enable/disable negation of input device match. Valid values: `enable`, `disable`.
     */
    inputDeviceNegate: string;
    /**
     * Source interface name. The structure of `inputDevice` block is documented below.
     */
    inputDevices?: outputs.SystemSdwanServiceInputDevice[];
    /**
     * Enable/disable use of Internet service for application-based load balancing. Valid values: `enable`, `disable`.
     */
    internetService: string;
    /**
     * Application control based Internet Service group list. The structure of `internetServiceAppCtrlGroup` block is documented below.
     */
    internetServiceAppCtrlGroups?: outputs.SystemSdwanServiceInternetServiceAppCtrlGroup[];
    /**
     * Application control based Internet Service ID list. The structure of `internetServiceAppCtrl` block is documented below.
     */
    internetServiceAppCtrls?: outputs.SystemSdwanServiceInternetServiceAppCtrl[];
    /**
     * Custom Internet Service group list. The structure of `internetServiceCustomGroup` block is documented below.
     */
    internetServiceCustomGroups?: outputs.SystemSdwanServiceInternetServiceCustomGroup[];
    /**
     * Custom Internet service name list. The structure of `internetServiceCustom` block is documented below.
     */
    internetServiceCustoms?: outputs.SystemSdwanServiceInternetServiceCustom[];
    /**
     * Internet Service group list. The structure of `internetServiceGroup` block is documented below.
     */
    internetServiceGroups?: outputs.SystemSdwanServiceInternetServiceGroup[];
    /**
     * Internet service name list. The structure of `internetServiceName` block is documented below.
     */
    internetServiceNames?: outputs.SystemSdwanServiceInternetServiceName[];
    /**
     * Coefficient of jitter in the formula of custom-profile-1.
     */
    jitterWeight: number;
    /**
     * Coefficient of latency in the formula of custom-profile-1.
     */
    latencyWeight: number;
    /**
     * Link cost factor. Valid values: `latency`, `jitter`, `packet-loss`, `inbandwidth`, `outbandwidth`, `bibandwidth`, `custom-profile-1`.
     */
    linkCostFactor: string;
    /**
     * Percentage threshold change of link cost values that will result in policy route regeneration (0 - 10000000, default = 10).
     */
    linkCostThreshold: number;
    /**
     * Minimum number of members which meet SLA.
     */
    minimumSlaMeetMembers: number;
    /**
     * Control how the SD-WAN rule sets the priority of interfaces in the SD-WAN. Valid values: `auto`, `manual`, `priority`, `sla`, `load-balance`.
     */
    mode: string;
    /**
     * Service and service group name.
     */
    name: string;
    /**
     * Coefficient of packet-loss in the formula of custom-profile-1.
     */
    packetLossWeight: number;
    /**
     * Enable/disable passive measurement based on the service criteria. Valid values: `enable`, `disable`.
     */
    passiveMeasurement: string;
    /**
     * Member sequence number list. The structure of `priorityMembers` block is documented below.
     */
    priorityMembers?: outputs.SystemSdwanServicePriorityMember[];
    /**
     * Priority zone name list. The structure of `priorityZone` block is documented below.
     */
    priorityZones?: outputs.SystemSdwanServicePriorityZone[];
    /**
     * Protocol number.
     */
    protocol: number;
    /**
     * Quality grade.
     */
    qualityLink: number;
    /**
     * Service role to work with neighbor. Valid values: `standalone`, `primary`, `secondary`.
     */
    role: string;
    /**
     * IPv4 route map route-tag.
     */
    routeTag: number;
    /**
     * Method to compare SLA value for SLA mode. Valid values: `order`, `number`.
     */
    slaCompareMethod: string;
    /**
     * Service level agreement (SLA). The structure of `sla` block is documented below.
     */
    slas?: outputs.SystemSdwanServiceSla[];
    /**
     * Source address6 name. The structure of `src6` block is documented below.
     */
    src6s?: outputs.SystemSdwanServiceSrc6[];
    /**
     * Enable/disable negation of source address match. Valid values: `enable`, `disable`.
     */
    srcNegate: string;
    /**
     * Source address name. The structure of `src` block is documented below.
     */
    srcs?: outputs.SystemSdwanServiceSrc[];
    /**
     * Enable/disable service when selected neighbor role is standalone while service role is not standalone. Valid values: `enable`, `disable`.
     */
    standaloneAction: string;
    /**
     * Start destination port number.
     */
    startPort: number;
    /**
     * Enable/disable SD-WAN service. Valid values: `enable`, `disable`.
     */
    status: string;
    /**
     * Method of selecting member if more than one meets the SLA. Valid values: `zone`, `cfg-order`, `fib-best-match`.
     */
    tieBreak: string;
    /**
     * Type of service bit pattern.
     */
    tos: string;
    /**
     * Type of service evaluated bits.
     */
    tosMask: string;
    /**
     * Enable/disable use of ADVPN shortcut for quality comparison. Valid values: `enable`, `disable`.
     */
    useShortcutSla: string;
    /**
     * User name. The structure of `users` block is documented below.
     */
    users?: outputs.SystemSdwanServiceUser[];
}

export interface SystemSdwanServiceDst {
    /**
     * Service and service group name.
     */
    name: string;
}

export interface SystemSdwanServiceDst6 {
    /**
     * Service and service group name.
     */
    name: string;
}

export interface SystemSdwanServiceGroup {
    /**
     * Service and service group name.
     */
    name: string;
}

export interface SystemSdwanServiceHealthCheck {
    /**
     * Service and service group name.
     */
    name: string;
}

export interface SystemSdwanServiceInputDevice {
    /**
     * Service and service group name.
     */
    name: string;
}

export interface SystemSdwanServiceInternetServiceAppCtrl {
    /**
     * SD-WAN service rule ID.
     */
    id: number;
}

export interface SystemSdwanServiceInternetServiceAppCtrlGroup {
    /**
     * Service and service group name.
     */
    name: string;
}

export interface SystemSdwanServiceInternetServiceCustom {
    /**
     * Service and service group name.
     */
    name: string;
}

export interface SystemSdwanServiceInternetServiceCustomGroup {
    /**
     * Service and service group name.
     */
    name: string;
}

export interface SystemSdwanServiceInternetServiceGroup {
    /**
     * Service and service group name.
     */
    name: string;
}

export interface SystemSdwanServiceInternetServiceName {
    /**
     * Service and service group name.
     */
    name: string;
}

export interface SystemSdwanServicePriorityMember {
    /**
     * Member sequence number.
     */
    seqNum: number;
}

export interface SystemSdwanServicePriorityZone {
    /**
     * Service and service group name.
     */
    name: string;
}

export interface SystemSdwanServiceSla {
    /**
     * SD-WAN health-check.
     */
    healthCheck: string;
    /**
     * SD-WAN service rule ID.
     */
    id: number;
}

export interface SystemSdwanServiceSrc {
    /**
     * Service and service group name.
     */
    name: string;
}

export interface SystemSdwanServiceSrc6 {
    /**
     * Service and service group name.
     */
    name: string;
}

export interface SystemSdwanServiceUser {
    /**
     * Service and service group name.
     */
    name: string;
}

export interface SystemSdwanZone {
    /**
     * Service and service group name.
     */
    name: string;
    /**
     * Method of selecting member if more than one meets the SLA. Valid values: `cfg-order`, `fib-best-match`.
     */
    serviceSlaTieBreak: string;
}

export interface SystemSessionTtlPort {
    /**
     * End port number.
     */
    endPort: number;
    /**
     * Table entry ID.
     */
    id: number;
    /**
     * Protocol (0 - 255).
     */
    protocol: number;
    /**
     * Start port number.
     */
    startPort: number;
    /**
     * Session timeout (TTL).
     */
    timeout: string;
}

export interface SystemSettingsGuiDefaultPolicyColumn {
    /**
     * Select column name.
     */
    name: string;
}

export interface SystemSnmpCommunityHost {
    /**
     * Enable/disable direct management of HA cluster members. Valid values: `enable`, `disable`.
     */
    haDirect: string;
    /**
     * Control whether the SNMP manager sends SNMP queries, receives SNMP traps, or both. Valid values: `any`, `query`, `trap`.
     */
    hostType: string;
    /**
     * Host6 entry ID.
     */
    id: number;
    /**
     * IPv4 address of the SNMP manager (host).
     */
    ip: string;
    /**
     * Source IPv4 address for SNMP traps.
     */
    sourceIp: string;
}

export interface SystemSnmpCommunityHosts6 {
    /**
     * Enable/disable direct management of HA cluster members. Valid values: `enable`, `disable`.
     */
    haDirect: string;
    /**
     * Control whether the SNMP manager sends SNMP queries, receives SNMP traps, or both. Valid values: `any`, `query`, `trap`.
     */
    hostType: string;
    /**
     * Host6 entry ID.
     */
    id: number;
    /**
     * SNMP manager IPv6 address prefix.
     */
    ipv6: string;
    /**
     * Source IPv6 address for SNMP traps.
     */
    sourceIpv6: string;
}

export interface SystemSpeedTestScheduleSchedule {
    /**
     * Name of a firewall recurring schedule.
     */
    name: string;
}

export interface SystemSpeedTestServerHost {
    /**
     * Server host ID.
     */
    id: number;
    /**
     * Server host IPv4 address.
     */
    ip: string;
    /**
     * Speed test host password.
     */
    password?: string;
    /**
     * Server host port number to communicate with client.
     */
    port: number;
    /**
     * Speed test host user name.
     */
    user: string;
}

export interface SystemSsoAdminVdom {
    /**
     * Virtual domain name.
     */
    name: string;
}

export interface SystemSsoForticloudAdminVdom {
    /**
     * Virtual domain name.
     */
    name: string;
}

export interface SystemSwitchInterfaceMember {
    /**
     * Physical interface name.
     */
    interfaceName: string;
}

export interface SystemSwitchInterfaceSpanSourcePort {
    /**
     * Physical interface name.
     */
    interfaceName: string;
}

export interface SystemVdomDnsServerHostname {
    /**
     * DNS server host name list separated by space (maximum 4 domains).
     */
    hostname: string;
}

export interface SystemVdomExceptionVdom {
    /**
     * VDOM name.
     */
    name: string;
}

export interface SystemVirtualSwitchPort {
    /**
     * Alias.
     */
    alias: string;
    /**
     * Physical interface name.
     */
    name: string;
}

export interface SystemVirtualWanLinkFailAlertInterface {
    /**
     * Control-based Internet Service group name.
     */
    name: string;
}

export interface SystemVirtualWanLinkHealthCheck {
    /**
     * Address mode (IPv4 or IPv6). Valid values: `ipv4`, `ipv6`.
     */
    addrMode: string;
    /**
     * Differentiated services code point (DSCP) in the IP header of the probe packet.
     */
    diffservcode: string;
    /**
     * Fully qualified domain name to resolve for the DNS probe.
     */
    dnsRequestDomain: string;
    /**
     * Number of failures before server is considered lost (1 - 3600, default = 5).
     */
    failtime: number;
    /**
     * HA election priority (1 - 50).
     */
    haPriority: number;
    /**
     * String in the http-agent field in the HTTP header.
     */
    httpAgent: string;
    /**
     * URL used to communicate with the server if the protocol if the protocol is HTTP.
     */
    httpGet: string;
    /**
     * Response string expected from the server if the protocol is HTTP.
     */
    httpMatch: string;
    /**
     * Status check interval, or the time between attempting to connect to the server (1 - 3600 sec, default = 5).
     */
    interval: number;
    /**
     * Member sequence number list. The structure of `members` block is documented below.
     */
    members?: outputs.SystemVirtualWanLinkHealthCheckMember[];
    /**
     * Control-based Internet Service group name.
     */
    name: string;
    /**
     * Packet size of a twamp test session,
     */
    packetSize: number;
    /**
     * Twamp controller password in authentication mode
     */
    password?: string;
    /**
     * Port number used to communicate with the server over the selected protocol.
     */
    port: number;
    /**
     * Number of most recent probes that should be used to calculate latency and jitter (5 - 30, default = 30).
     */
    probeCount: number;
    /**
     * Enable/disable transmission of probe packets. Valid values: `disable`, `enable`.
     */
    probePackets: string;
    /**
     * Time to wait before a probe packet is considered lost (500 - 5000 msec, default = 500).
     */
    probeTimeout: number;
    /**
     * Protocol number.
     */
    protocol: string;
    /**
     * Number of successful responses received before server is considered recovered (1 - 3600, default = 5).
     */
    recoverytime: number;
    /**
     * Twamp controller security mode. Valid values: `none`, `authentication`.
     */
    securityMode: string;
    /**
     * IP address or FQDN name of the server.
     */
    server: string;
    /**
     * Time interval in seconds that SLA fail log messages will be generated (0 - 3600, default = 0).
     */
    slaFailLogPeriod: number;
    /**
     * Time interval in seconds that SLA pass log messages will be generated (0 - 3600, default = 0).
     */
    slaPassLogPeriod: number;
    /**
     * Service level agreement (SLA). The structure of `sla` block is documented below.
     */
    slas?: outputs.SystemVirtualWanLinkHealthCheckSla[];
    /**
     * Enable/disable system DNS as the probe server. Valid values: `disable`, `enable`.
     */
    systemDns: string;
    /**
     * Alert threshold for jitter (ms, default = 0).
     */
    thresholdAlertJitter: number;
    /**
     * Alert threshold for latency (ms, default = 0).
     */
    thresholdAlertLatency: number;
    /**
     * Alert threshold for packet loss (percentage, default = 0).
     */
    thresholdAlertPacketloss: number;
    /**
     * Warning threshold for jitter (ms, default = 0).
     */
    thresholdWarningJitter: number;
    /**
     * Warning threshold for latency (ms, default = 0).
     */
    thresholdWarningLatency: number;
    /**
     * Warning threshold for packet loss (percentage, default = 0).
     */
    thresholdWarningPacketloss: number;
    /**
     * Enable/disable update cascade interface. Valid values: `enable`, `disable`.
     */
    updateCascadeInterface: string;
    /**
     * Enable/disable updating the static route. Valid values: `enable`, `disable`.
     */
    updateStaticRoute: string;
}

export interface SystemVirtualWanLinkHealthCheckMember {
    /**
     * Member sequence number.
     */
    seqNum: number;
}

export interface SystemVirtualWanLinkHealthCheckSla {
    /**
     * SLA ID.
     */
    id: number;
    /**
     * Jitter for SLA to make decision in milliseconds. (0 - 10000000, default = 5).
     */
    jitterThreshold: number;
    /**
     * Latency for SLA to make decision in milliseconds. (0 - 10000000, default = 5).
     */
    latencyThreshold: number;
    /**
     * Link cost factor. Valid values: `latency`, `jitter`, `packet-loss`, `inbandwidth`, `outbandwidth`, `bibandwidth`, `custom-profile-1`.
     */
    linkCostFactor: string;
    /**
     * Packet loss for SLA to make decision in percentage. (0 - 100, default = 0).
     */
    packetlossThreshold: number;
}

export interface SystemVirtualWanLinkMember {
    /**
     * Comments.
     */
    comment?: string;
    /**
     * Cost of this interface for services in SLA mode (0 - 4294967295, default = 0).
     */
    cost: number;
    /**
     * Enable/disable SD-WAN service gateway. Valid values: `enable`, `disable`.
     */
    gateway: string;
    /**
     * IPv6 gateway.
     */
    gateway6: string;
    /**
     * Ingress spillover threshold for this interface (0 - 16776000 kbit/s). When this traffic volume threshold is reached, new sessions spill over to other interfaces in the SD-WAN.
     */
    ingressSpilloverThreshold: number;
    /**
     * Interface name.
     */
    interface: string;
    /**
     * Priority of the interface (0 - 4294967295). Used for SD-WAN rules or priority rules.
     */
    priority: number;
    /**
     * Member sequence number.
     */
    seqNum: number;
    /**
     * Source IP address used in the health-check packet to the server.
     */
    source: string;
    /**
     * Source IPv6 address used in the health-check packet to the server.
     */
    source6: string;
    /**
     * Egress spillover threshold for this interface (0 - 16776000 kbit/s). When this traffic volume threshold is reached, new sessions spill over to other interfaces in the SD-WAN.
     */
    spilloverThreshold: number;
    /**
     * Enable/disable SD-WAN service. Valid values: `enable`, `disable`.
     */
    status: string;
    /**
     * Measured volume ratio (this value / sum of all values = percentage of link volume, 0 - 255).
     */
    volumeRatio: number;
    /**
     * Weight of this interface for weighted load balancing. (0 - 255) More traffic is directed to interfaces with higher weights.
     */
    weight: number;
}

export interface SystemVirtualWanLinkNeighbor {
    /**
     * Virtual WAN Link health-check.
     */
    healthCheck: string;
    /**
     * IP address of neighbor.
     */
    ip: string;
    /**
     * Member sequence number.
     */
    member: number;
    /**
     * Service role to work with neighbor. Valid values: `standalone`, `primary`, `secondary`.
     */
    role: string;
    /**
     * SLA ID.
     */
    slaId: number;
}

export interface SystemVirtualWanLinkService {
    /**
     * Address mode (IPv4 or IPv6). Valid values: `ipv4`, `ipv6`.
     */
    addrMode: string;
    /**
     * Coefficient of reciprocal of available bidirectional bandwidth in the formula of custom-profile-1.
     */
    bandwidthWeight: number;
    /**
     * Enable/disable use of SD-WAN as default service. Valid values: `enable`, `disable`.
     */
    default: string;
    /**
     * Enable/disable forward traffic DSCP tag. Valid values: `enable`, `disable`.
     */
    dscpForward: string;
    /**
     * Forward traffic DSCP tag.
     */
    dscpForwardTag: string;
    /**
     * Enable/disable reverse traffic DSCP tag. Valid values: `enable`, `disable`.
     */
    dscpReverse: string;
    /**
     * Reverse traffic DSCP tag.
     */
    dscpReverseTag: string;
    /**
     * Destination address6 name. The structure of `dst6` block is documented below.
     */
    dst6s?: outputs.SystemVirtualWanLinkServiceDst6[];
    /**
     * Enable/disable negation of destination address match. Valid values: `enable`, `disable`.
     */
    dstNegate: string;
    /**
     * Destination address name. The structure of `dst` block is documented below.
     */
    dsts?: outputs.SystemVirtualWanLinkServiceDst[];
    /**
     * End destination port number.
     */
    endPort: number;
    /**
     * Enable/disable SD-WAN service gateway. Valid values: `enable`, `disable`.
     */
    gateway: string;
    /**
     * User groups. The structure of `groups` block is documented below.
     */
    groups?: outputs.SystemVirtualWanLinkServiceGroup[];
    /**
     * Virtual WAN Link health-check.
     */
    healthCheck: string;
    /**
     * Waiting period in seconds when switching from the back-up member to the primary member (0 - 10000000, default = 0).
     */
    holdDownTime: number;
    /**
     * SLA ID.
     */
    id: number;
    /**
     * Enable/disable negation of input device match. Valid values: `enable`, `disable`.
     */
    inputDeviceNegate: string;
    /**
     * Source interface name. The structure of `inputDevice` block is documented below.
     */
    inputDevices?: outputs.SystemVirtualWanLinkServiceInputDevice[];
    /**
     * Enable/disable use of Internet service for application-based load balancing. Valid values: `enable`, `disable`.
     */
    internetService: string;
    /**
     * Application control based Internet Service group list. The structure of `internetServiceAppCtrlGroup` block is documented below.
     */
    internetServiceAppCtrlGroups?: outputs.SystemVirtualWanLinkServiceInternetServiceAppCtrlGroup[];
    /**
     * Application control based Internet Service ID list. The structure of `internetServiceAppCtrl` block is documented below.
     */
    internetServiceAppCtrls?: outputs.SystemVirtualWanLinkServiceInternetServiceAppCtrl[];
    /**
     * Control-based Internet Service group list. The structure of `internetServiceCtrlGroup` block is documented below.
     */
    internetServiceCtrlGroups?: outputs.SystemVirtualWanLinkServiceInternetServiceCtrlGroup[];
    /**
     * Control-based Internet Service ID list. The structure of `internetServiceCtrl` block is documented below.
     */
    internetServiceCtrls?: outputs.SystemVirtualWanLinkServiceInternetServiceCtrl[];
    /**
     * Custom Internet Service group list. The structure of `internetServiceCustomGroup` block is documented below.
     */
    internetServiceCustomGroups?: outputs.SystemVirtualWanLinkServiceInternetServiceCustomGroup[];
    /**
     * Custom Internet service name list. The structure of `internetServiceCustom` block is documented below.
     */
    internetServiceCustoms?: outputs.SystemVirtualWanLinkServiceInternetServiceCustom[];
    /**
     * Internet Service group list. The structure of `internetServiceGroup` block is documented below.
     */
    internetServiceGroups?: outputs.SystemVirtualWanLinkServiceInternetServiceGroup[];
    /**
     * Internet service ID list. The structure of `internetServiceId` block is documented below.
     */
    internetServiceIds?: outputs.SystemVirtualWanLinkServiceInternetServiceId[];
    /**
     * Internet service name list. The structure of `internetServiceName` block is documented below.
     */
    internetServiceNames?: outputs.SystemVirtualWanLinkServiceInternetServiceName[];
    /**
     * Coefficient of jitter in the formula of custom-profile-1.
     */
    jitterWeight: number;
    /**
     * Coefficient of latency in the formula of custom-profile-1.
     */
    latencyWeight: number;
    /**
     * Link cost factor. Valid values: `latency`, `jitter`, `packet-loss`, `inbandwidth`, `outbandwidth`, `bibandwidth`, `custom-profile-1`.
     */
    linkCostFactor: string;
    /**
     * Percentage threshold change of link cost values that will result in policy route regeneration (0 - 10000000, default = 10).
     */
    linkCostThreshold: number;
    /**
     * Member sequence number.
     */
    member: number;
    /**
     * Control how the priority rule sets the priority of interfaces in the SD-WAN. Valid values: `auto`, `manual`, `priority`, `sla`, `load-balance`.
     */
    mode: string;
    /**
     * Control-based Internet Service group name.
     */
    name: string;
    /**
     * Coefficient of packet-loss in the formula of custom-profile-1.
     */
    packetLossWeight: number;
    /**
     * Member sequence number list. The structure of `priorityMembers` block is documented below.
     */
    priorityMembers?: outputs.SystemVirtualWanLinkServicePriorityMember[];
    /**
     * Protocol number.
     */
    protocol: number;
    /**
     * Quality grade.
     */
    qualityLink: number;
    /**
     * Service role to work with neighbor. Valid values: `standalone`, `primary`, `secondary`.
     */
    role: string;
    /**
     * IPv4 route map route-tag.
     */
    routeTag: number;
    /**
     * Method to compare SLA value for sla and load balance mode.  Valid values: `order`, `number`.
     */
    slaCompareMethod: string;
    /**
     * Service level agreement (SLA). The structure of `sla` block is documented below.
     */
    slas?: outputs.SystemVirtualWanLinkServiceSla[];
    /**
     * Source address6 name. The structure of `src6` block is documented below.
     */
    src6s?: outputs.SystemVirtualWanLinkServiceSrc6[];
    /**
     * Enable/disable negation of source address match. Valid values: `enable`, `disable`.
     */
    srcNegate: string;
    /**
     * Source address name. The structure of `src` block is documented below.
     */
    srcs?: outputs.SystemVirtualWanLinkServiceSrc[];
    /**
     * Enable/disable service when selected neighbor role is standalone while service role is not standalone. Valid values: `enable`, `disable`.
     */
    standaloneAction: string;
    /**
     * Start destination port number.
     */
    startPort: number;
    /**
     * Enable/disable SD-WAN service. Valid values: `enable`, `disable`.
     */
    status: string;
    /**
     * Type of service bit pattern.
     */
    tos: string;
    /**
     * Type of service evaluated bits.
     */
    tosMask: string;
    /**
     * User name. The structure of `users` block is documented below.
     */
    users?: outputs.SystemVirtualWanLinkServiceUser[];
}

export interface SystemVirtualWanLinkServiceDst {
    /**
     * Control-based Internet Service group name.
     */
    name: string;
}

export interface SystemVirtualWanLinkServiceDst6 {
    /**
     * Control-based Internet Service group name.
     */
    name: string;
}

export interface SystemVirtualWanLinkServiceGroup {
    /**
     * Control-based Internet Service group name.
     */
    name: string;
}

export interface SystemVirtualWanLinkServiceInputDevice {
    /**
     * Control-based Internet Service group name.
     */
    name: string;
}

export interface SystemVirtualWanLinkServiceInternetServiceAppCtrl {
    /**
     * SLA ID.
     */
    id: number;
}

export interface SystemVirtualWanLinkServiceInternetServiceAppCtrlGroup {
    /**
     * Control-based Internet Service group name.
     */
    name: string;
}

export interface SystemVirtualWanLinkServiceInternetServiceCtrl {
    /**
     * SLA ID.
     */
    id: number;
}

export interface SystemVirtualWanLinkServiceInternetServiceCtrlGroup {
    /**
     * Control-based Internet Service group name.
     */
    name: string;
}

export interface SystemVirtualWanLinkServiceInternetServiceCustom {
    /**
     * Control-based Internet Service group name.
     */
    name: string;
}

export interface SystemVirtualWanLinkServiceInternetServiceCustomGroup {
    /**
     * Control-based Internet Service group name.
     */
    name: string;
}

export interface SystemVirtualWanLinkServiceInternetServiceGroup {
    /**
     * Control-based Internet Service group name.
     */
    name: string;
}

export interface SystemVirtualWanLinkServiceInternetServiceId {
    /**
     * SLA ID.
     */
    id: number;
}

export interface SystemVirtualWanLinkServiceInternetServiceName {
    /**
     * Control-based Internet Service group name.
     */
    name: string;
}

export interface SystemVirtualWanLinkServicePriorityMember {
    /**
     * Member sequence number.
     */
    seqNum: number;
}

export interface SystemVirtualWanLinkServiceSla {
    /**
     * Virtual WAN Link health-check.
     */
    healthCheck: string;
    /**
     * SLA ID.
     */
    id: number;
}

export interface SystemVirtualWanLinkServiceSrc {
    /**
     * Control-based Internet Service group name.
     */
    name: string;
}

export interface SystemVirtualWanLinkServiceSrc6 {
    /**
     * Control-based Internet Service group name.
     */
    name: string;
}

export interface SystemVirtualWanLinkServiceUser {
    /**
     * Control-based Internet Service group name.
     */
    name: string;
}

export interface SystemVirtualWanLinkZone {
    /**
     * Control-based Internet Service group name.
     */
    name: string;
}

export interface SystemVirtualWirePairMember {
    /**
     * Interface name.
     */
    interfaceName: string;
}

export interface SystemVxlanRemoteIp {
    /**
     * IPv4 address.
     */
    ip: string;
}

export interface SystemVxlanRemoteIp6 {
    /**
     * IPv6 address.
     */
    ip6: string;
}

export interface SystemZoneInterface {
    /**
     * Select interfaces to add to the zone.
     */
    interfaceName: string;
}

export interface SystemZoneTagging {
    /**
     * Tag category.
     */
    category: string;
    /**
     * Tag name.
     */
    name: string;
    /**
     * Tags. The structure of `tags` block is documented below.
     */
    tags?: outputs.SystemZoneTaggingTag[];
}

export interface SystemZoneTaggingTag {
    /**
     * Tag name.
     */
    name: string;
}

export interface UserDeviceAccessListDeviceList {
    /**
     * Allow or block device. Valid values: `accept`, `deny`.
     */
    action: string;
    /**
     * Firewall device or device group.
     */
    device: string;
    /**
     * Entry ID.
     */
    id: number;
}

export interface UserDeviceGroupMember {
    /**
     * Tag name.
     */
    name: string;
}

export interface UserDeviceGroupTagging {
    /**
     * Tag category.
     */
    category: string;
    /**
     * Tag name.
     */
    name: string;
    /**
     * Tags. The structure of `tags` block is documented below.
     */
    tags?: outputs.UserDeviceGroupTaggingTag[];
}

export interface UserDeviceGroupTaggingTag {
    /**
     * Tag name.
     */
    name: string;
}

export interface UserDeviceTagging {
    /**
     * Tag category.
     */
    category: string;
    /**
     * Tag name.
     */
    name: string;
    /**
     * Tags. The structure of `tags` block is documented below.
     */
    tags?: outputs.UserDeviceTaggingTag[];
}

export interface UserDeviceTaggingTag {
    /**
     * Tag name.
     */
    name: string;
}

export interface UserDomainControllerExtraServer {
    /**
     * Server ID.
     */
    id: number;
    /**
     * Domain controller IP address.
     */
    ipAddress: string;
    /**
     * Port to be used for communication with the domain controller (default = 445).
     */
    port: number;
    /**
     * FortiGate IPv4 address to be used for communication with the domain controller.
     */
    sourceIpAddress: string;
    /**
     * Source port to be used for communication with the domain controller.
     */
    sourcePort: number;
}

export interface UserExchangeKdcIp {
    /**
     * KDC IPv4 addresses for Kerberos authentication.
     */
    ipv4: string;
}

export interface UserFssoPollingAdgrp {
    /**
     * Name.
     */
    name: string;
}

export interface UserGroupGuest {
    /**
     * Comment.
     */
    comment?: string;
    /**
     * Set the action for the company guest user field.
     */
    company: string;
    /**
     * Email.
     */
    email: string;
    /**
     * Expire time.
     */
    expiration: string;
    /**
     * Guest ID.
     */
    id: number;
    /**
     * Mobile phone.
     */
    mobilePhone: string;
    /**
     * Guest name.
     */
    name: string;
    /**
     * Guest password.
     */
    password?: string;
    /**
     * Set the action for the sponsor guest user field.
     */
    sponsor: string;
    /**
     * Guest ID.
     */
    userId: string;
}

export interface UserGroupMatch {
    /**
     * Name of matching group on remote auththentication server.
     */
    groupName: string;
    /**
     * Guest ID.
     */
    id: number;
    /**
     * Name of remote auth server.
     */
    serverName: string;
}

export interface UserGroupMember {
    /**
     * Guest name.
     */
    name: string;
}

export interface UserNacPolicySwitchGroup {
    /**
     * Managed FortiSwitch group name from available options.
     */
    name: string;
}

export interface UserNacPolicySwitchScope {
    /**
     * Managed FortiSwitch name from available options.
     */
    switchId: string;
}

export interface UserPeergrpMember {
    /**
     * Peer group member name.
     */
    name: string;
}

export interface UserQuarantineTarget {
    /**
     * Description for the quarantine MAC.
     */
    description: string;
    /**
     * Quarantine entry name.
     */
    entry: string;
    /**
     * Quarantine MACs. The structure of `macs` block is documented below.
     */
    macs?: outputs.UserQuarantineTargetMac[];
}

export interface UserQuarantineTargetMac {
    /**
     * Description for the quarantine MAC.
     */
    description: string;
    /**
     * Enable/Disable dropping of quarantined device traffic Valid values: `disable`, `enable`.
     */
    drop: string;
    /**
     * FSW entry id for the quarantine MAC.
     */
    entryId: number;
    /**
     * Quarantine MAC.
     */
    mac: string;
    /**
     * Parent entry name.
     */
    parent: string;
}

export interface UserRadiusAccountingServer {
    /**
     * ID (0 - 4294967295).
     */
    id: number;
    /**
     * Specify outgoing interface to reach server.
     */
    interface: string;
    /**
     * Specify how to select outgoing interface to reach server. Valid values: `auto`, `sdwan`, `specify`.
     */
    interfaceSelectMethod: string;
    /**
     * RADIUS accounting port number.
     */
    port: number;
    /**
     * Secret key.
     */
    secret?: string;
    /**
     * {<name_str|ip_str>} Server CN domain name or IP.
     */
    server: string;
    /**
     * Source IP address for communications to the RADIUS server.
     */
    sourceIp: string;
    /**
     * Status. Valid values: `enable`, `disable`.
     */
    status: string;
}

export interface UserRadiusClass {
    /**
     * Class name.
     */
    name: string;
}

export interface UserSecurityExemptListRule {
    /**
     * Devices or device groups. The structure of `devices` block is documented below.
     */
    devices?: outputs.UserSecurityExemptListRuleDevice[];
    /**
     * Destination addresses or address groups. The structure of `dstaddr` block is documented below.
     */
    dstaddrs?: outputs.UserSecurityExemptListRuleDstaddr[];
    /**
     * ID.
     */
    id: number;
    /**
     * Destination services. The structure of `service` block is documented below.
     */
    services?: outputs.UserSecurityExemptListRuleService[];
    /**
     * Source addresses or address groups. The structure of `srcaddr` block is documented below.
     */
    srcaddrs?: outputs.UserSecurityExemptListRuleSrcaddr[];
}

export interface UserSecurityExemptListRuleDevice {
    /**
     * Service name.
     */
    name: string;
}

export interface UserSecurityExemptListRuleDstaddr {
    /**
     * Service name.
     */
    name: string;
}

export interface UserSecurityExemptListRuleService {
    /**
     * Service name.
     */
    name: string;
}

export interface UserSecurityExemptListRuleSrcaddr {
    /**
     * Service name.
     */
    name: string;
}

export interface UserSettingAuthPort {
    /**
     * ID.
     */
    id: number;
    /**
     * Non-standard port for firewall user authentication.
     */
    port: number;
    /**
     * Service type. Valid values: `http`, `https`, `ftp`, `telnet`.
     */
    type: string;
}

export interface VideofilterProfileFortiguardCategory {
    /**
     * Configure VideoFilter FortiGuard category. The structure of `filters` block is documented below.
     */
    filters?: outputs.VideofilterProfileFortiguardCategoryFilter[];
}

export interface VideofilterProfileFortiguardCategoryFilter {
    /**
     * VideoFilter action. Valid values: `allow`, `monitor`, `block`.
     */
    action: string;
    /**
     * Category ID.
     */
    categoryId: number;
    /**
     * ID.
     */
    id: number;
    /**
     * Enable/disable logging. Valid values: `enable`, `disable`.
     */
    log: string;
}

export interface VideofilterYoutubeChannelFilterEntry {
    /**
     * YouTube channel filter action. Valid values: `allow`, `monitor`, `block`.
     */
    action: string;
    /**
     * Channel ID.
     */
    channelId: string;
    /**
     * Comment.
     */
    comment?: string;
    /**
     * ID.
     */
    id: number;
}

export interface VoipProfileMsrp {
    /**
     * Enable/disable logging of MSRP violations. Valid values: `disable`, `enable`.
     */
    logViolations: string;
    /**
     * Maximum allowable MSRP message size (1-65535).
     */
    maxMsgSize: number;
    /**
     * Action for violation of max-msg-size. Valid values: `pass`, `block`, `reset`, `monitor`.
     */
    maxMsgSizeAction: string;
    /**
     * Enable/disable MSRP. Valid values: `disable`, `enable`.
     */
    status: string;
}

export interface VoipProfileSccp {
    /**
     * Enable/disable block multicast RTP connections. Valid values: `disable`, `enable`.
     */
    blockMcast: string;
    /**
     * Enable/disable log summary of SCCP calls. Valid values: `disable`, `enable`.
     */
    logCallSummary: string;
    /**
     * Enable/disable logging of MSRP violations. Valid values: `disable`, `enable`.
     */
    logViolations: string;
    /**
     * Maximum calls per minute per SCCP client (max 65535).
     */
    maxCalls: number;
    /**
     * Enable/disable MSRP. Valid values: `disable`, `enable`.
     */
    status: string;
    /**
     * Enable/disable verify SCCP header content. Valid values: `disable`, `enable`.
     */
    verifyHeader: string;
}

export interface VoipProfileSip {
    /**
     * ACK request rate limit (per second, per policy).
     */
    ackRate: number;
    /**
     * Track the packet protocol field. Valid values: `none`, `src-ip`, `dest-ip`.
     */
    ackRateTrack: string;
    /**
     * Enable/disable block ACK requests. Valid values: `disable`, `enable`.
     */
    blockAck: string;
    /**
     * Enable/disable block BYE requests. Valid values: `disable`, `enable`.
     */
    blockBye: string;
    /**
     * Enable/disable block CANCEL requests. Valid values: `disable`, `enable`.
     */
    blockCancel: string;
    /**
     * Enable/disable block OPTIONS requests, but OPTIONS requests still notify for redundancy. Valid values: `disable`, `enable`.
     */
    blockGeoRedOptions: string;
    /**
     * Enable/disable block INFO requests. Valid values: `disable`, `enable`.
     */
    blockInfo: string;
    /**
     * Enable/disable block INVITE requests. Valid values: `disable`, `enable`.
     */
    blockInvite: string;
    /**
     * Enable/disable block requests with headers exceeding max-line-length. Valid values: `disable`, `enable`.
     */
    blockLongLines: string;
    /**
     * Enable/disable block MESSAGE requests. Valid values: `disable`, `enable`.
     */
    blockMessage: string;
    /**
     * Enable/disable block NOTIFY requests. Valid values: `disable`, `enable`.
     */
    blockNotify: string;
    /**
     * Enable/disable block OPTIONS requests and no OPTIONS as notifying message for redundancy either. Valid values: `disable`, `enable`.
     */
    blockOptions: string;
    /**
     * Enable/disable block prack requests. Valid values: `disable`, `enable`.
     */
    blockPrack: string;
    /**
     * Enable/disable block PUBLISH requests. Valid values: `disable`, `enable`.
     */
    blockPublish: string;
    /**
     * Enable/disable block REFER requests. Valid values: `disable`, `enable`.
     */
    blockRefer: string;
    /**
     * Enable/disable block REGISTER requests. Valid values: `disable`, `enable`.
     */
    blockRegister: string;
    /**
     * Enable/disable block SUBSCRIBE requests. Valid values: `disable`, `enable`.
     */
    blockSubscribe: string;
    /**
     * Block unrecognized SIP requests (enabled by default). Valid values: `disable`, `enable`.
     */
    blockUnknown: string;
    /**
     * Enable/disable block UPDATE requests. Valid values: `disable`, `enable`.
     */
    blockUpdate: string;
    /**
     * BYE request rate limit (per second, per policy).
     */
    byeRate: number;
    /**
     * Track the packet protocol field. Valid values: `none`, `src-ip`, `dest-ip`.
     */
    byeRateTrack: string;
    /**
     * Continue tracking calls with no RTP for this many minutes.
     */
    callKeepalive: number;
    /**
     * CANCEL request rate limit (per second, per policy).
     */
    cancelRate: number;
    /**
     * Track the packet protocol field. Valid values: `none`, `src-ip`, `dest-ip`.
     */
    cancelRateTrack: string;
    /**
     * Fixup contact anyway even if contact's IP:port doesn't match session's IP:port. Valid values: `disable`, `enable`.
     */
    contactFixup: string;
    /**
     * Enable/disable restrict RTP source IP to be the same as SIP source IP when HNT is enabled. Valid values: `disable`, `enable`.
     */
    hntRestrictSourceIp: string;
    /**
     * Hosted NAT Traversal (HNT). Valid values: `disable`, `enable`.
     */
    hostedNatTraversal: string;
    /**
     * INFO request rate limit (per second, per policy).
     */
    infoRate: number;
    /**
     * Track the packet protocol field. Valid values: `none`, `src-ip`, `dest-ip`.
     */
    infoRateTrack: string;
    /**
     * INVITE request rate limit (per second, per policy).
     */
    inviteRate: number;
    /**
     * Track the packet protocol field. Valid values: `none`, `src-ip`, `dest-ip`.
     */
    inviteRateTrack: string;
    /**
     * Enable/disable allow IPS on RTP. Valid values: `disable`, `enable`.
     */
    ipsRtp: string;
    /**
     * Enable/disable log summary of SCCP calls. Valid values: `disable`, `enable`.
     */
    logCallSummary: string;
    /**
     * Enable/disable logging of MSRP violations. Valid values: `disable`, `enable`.
     */
    logViolations: string;
    /**
     * Action for malformed Allow header. Valid values: `discard`, `pass`, `respond`.
     */
    malformedHeaderAllow: string;
    /**
     * Action for malformed Call-ID header. Valid values: `discard`, `pass`, `respond`.
     */
    malformedHeaderCallId: string;
    /**
     * Action for malformed Contact header. Valid values: `discard`, `pass`, `respond`.
     */
    malformedHeaderContact: string;
    /**
     * Action for malformed Content-Length header. Valid values: `discard`, `pass`, `respond`.
     */
    malformedHeaderContentLength: string;
    /**
     * Action for malformed Content-Type header. Valid values: `discard`, `pass`, `respond`.
     */
    malformedHeaderContentType: string;
    /**
     * Action for malformed CSeq header. Valid values: `discard`, `pass`, `respond`.
     */
    malformedHeaderCseq: string;
    /**
     * Action for malformed Expires header. Valid values: `discard`, `pass`, `respond`.
     */
    malformedHeaderExpires: string;
    /**
     * Action for malformed From header. Valid values: `discard`, `pass`, `respond`.
     */
    malformedHeaderFrom: string;
    /**
     * Action for malformed Max-Forwards header. Valid values: `discard`, `pass`, `respond`.
     */
    malformedHeaderMaxForwards: string;
    /**
     * Action for malformed SIP messages without Proxy-Require header. Valid values: `discard`, `pass`, `respond`.
     */
    malformedHeaderNoProxyRequire: string;
    /**
     * Action for malformed SIP messages without Require header. Valid values: `discard`, `pass`, `respond`.
     */
    malformedHeaderNoRequire: string;
    /**
     * Action for malformed P-Asserted-Identity header. Valid values: `discard`, `pass`, `respond`.
     */
    malformedHeaderPAssertedIdentity: string;
    /**
     * Action for malformed RAck header. Valid values: `discard`, `pass`, `respond`.
     */
    malformedHeaderRack: string;
    /**
     * Action for malformed Record-Route header. Valid values: `discard`, `pass`, `respond`.
     */
    malformedHeaderRecordRoute: string;
    /**
     * Action for malformed Route header. Valid values: `discard`, `pass`, `respond`.
     */
    malformedHeaderRoute: string;
    /**
     * Action for malformed RSeq header. Valid values: `discard`, `pass`, `respond`.
     */
    malformedHeaderRseq: string;
    /**
     * Action for malformed SDP a line. Valid values: `discard`, `pass`, `respond`.
     */
    malformedHeaderSdpA: string;
    /**
     * Action for malformed SDP b line. Valid values: `discard`, `pass`, `respond`.
     */
    malformedHeaderSdpB: string;
    /**
     * Action for malformed SDP c line. Valid values: `discard`, `pass`, `respond`.
     */
    malformedHeaderSdpC: string;
    /**
     * Action for malformed SDP i line. Valid values: `discard`, `pass`, `respond`.
     */
    malformedHeaderSdpI: string;
    /**
     * Action for malformed SDP k line. Valid values: `discard`, `pass`, `respond`.
     */
    malformedHeaderSdpK: string;
    /**
     * Action for malformed SDP m line. Valid values: `discard`, `pass`, `respond`.
     */
    malformedHeaderSdpM: string;
    /**
     * Action for malformed SDP o line. Valid values: `discard`, `pass`, `respond`.
     */
    malformedHeaderSdpO: string;
    /**
     * Action for malformed SDP r line. Valid values: `discard`, `pass`, `respond`.
     */
    malformedHeaderSdpR: string;
    /**
     * Action for malformed SDP s line. Valid values: `discard`, `pass`, `respond`.
     */
    malformedHeaderSdpS: string;
    /**
     * Action for malformed SDP t line. Valid values: `discard`, `pass`, `respond`.
     */
    malformedHeaderSdpT: string;
    /**
     * Action for malformed SDP v line. Valid values: `discard`, `pass`, `respond`.
     */
    malformedHeaderSdpV: string;
    /**
     * Action for malformed SDP z line. Valid values: `discard`, `pass`, `respond`.
     */
    malformedHeaderSdpZ: string;
    /**
     * Action for malformed To header. Valid values: `discard`, `pass`, `respond`.
     */
    malformedHeaderTo: string;
    /**
     * Action for malformed VIA header. Valid values: `discard`, `pass`, `respond`.
     */
    malformedHeaderVia: string;
    /**
     * Action for malformed request line. Valid values: `discard`, `pass`, `respond`.
     */
    malformedRequestLine: string;
    /**
     * Maximum SIP message body length (0 meaning no limit).
     */
    maxBodyLength: number;
    /**
     * Maximum number of concurrent calls/dialogs (per policy).
     */
    maxDialogs: number;
    /**
     * Maximum number established but idle dialogs to retain (per policy).
     */
    maxIdleDialogs: number;
    /**
     * Maximum SIP header line length (78-4096).
     */
    maxLineLength: number;
    /**
     * MESSAGE request rate limit (per second, per policy).
     */
    messageRate: number;
    /**
     * Track the packet protocol field. Valid values: `none`, `src-ip`, `dest-ip`.
     */
    messageRateTrack: string;
    /**
     * RTP NAT port range.
     */
    natPortRange: string;
    /**
     * Enable/disable preservation of original IP in SDP i line. Valid values: `disable`, `enable`.
     */
    natTrace: string;
    /**
     * Enable/disable no SDP fix-up. Valid values: `disable`, `enable`.
     */
    noSdpFixup: string;
    /**
     * NOTIFY request rate limit (per second, per policy).
     */
    notifyRate: number;
    /**
     * Track the packet protocol field. Valid values: `none`, `src-ip`, `dest-ip`.
     */
    notifyRateTrack: string;
    /**
     * Enable/disable open pinhole for non-REGISTER Contact port. Valid values: `disable`, `enable`.
     */
    openContactPinhole: string;
    /**
     * Enable/disable open pinhole for Record-Route port. Valid values: `disable`, `enable`.
     */
    openRecordRoutePinhole: string;
    /**
     * Enable/disable open pinhole for REGISTER Contact port. Valid values: `disable`, `enable`.
     */
    openRegisterPinhole: string;
    /**
     * Enable/disable open pinhole for Via port. Valid values: `disable`, `enable`.
     */
    openViaPinhole: string;
    /**
     * OPTIONS request rate limit (per second, per policy).
     */
    optionsRate: number;
    /**
     * Track the packet protocol field. Valid values: `none`, `src-ip`, `dest-ip`.
     */
    optionsRateTrack: string;
    /**
     * PRACK request rate limit (per second, per policy).
     */
    prackRate: number;
    /**
     * Track the packet protocol field. Valid values: `none`, `src-ip`, `dest-ip`.
     */
    prackRateTrack: string;
    /**
     * Override i line to preserve original IPS (default: append). Valid values: `disable`, `enable`.
     */
    preserveOverride: string;
    /**
     * Expiry time for provisional INVITE (10 - 3600 sec).
     */
    provisionalInviteExpiryTime: number;
    /**
     * PUBLISH request rate limit (per second, per policy).
     */
    publishRate: number;
    /**
     * Track the packet protocol field. Valid values: `none`, `src-ip`, `dest-ip`.
     */
    publishRateTrack: string;
    /**
     * REFER request rate limit (per second, per policy).
     */
    referRate: number;
    /**
     * Track the packet protocol field. Valid values: `none`, `src-ip`, `dest-ip`.
     */
    referRateTrack: string;
    /**
     * Enable/disable trace original IP/port within the contact header of REGISTER requests. Valid values: `disable`, `enable`.
     */
    registerContactTrace: string;
    /**
     * REGISTER request rate limit (per second, per policy).
     */
    registerRate: number;
    /**
     * Track the packet protocol field. Valid values: `none`, `src-ip`, `dest-ip`.
     */
    registerRateTrack: string;
    /**
     * Enable/disable support via branch compliant with RFC 2543. Valid values: `disable`, `enable`.
     */
    rfc2543Branch: string;
    /**
     * Enable/disable create pinholes for RTP traffic to traverse firewall. Valid values: `disable`, `enable`.
     */
    rtp: string;
    /**
     * Relative strength of encryption algorithms accepted in negotiation. Valid values: `high`, `medium`, `low`.
     */
    sslAlgorithm: string;
    /**
     * Require a client certificate and authenticate it with the peer/peergrp.
     */
    sslAuthClient: string;
    /**
     * Authenticate the server's certificate with the peer/peergrp.
     */
    sslAuthServer: string;
    /**
     * Name of Certificate to offer to server if requested.
     */
    sslClientCertificate: string;
    /**
     * Allow/block client renegotiation by server. Valid values: `allow`, `deny`, `secure`.
     */
    sslClientRenegotiation: string;
    /**
     * Highest SSL/TLS version to negotiate.
     */
    sslMaxVersion: string;
    /**
     * Lowest SSL/TLS version to negotiate.
     */
    sslMinVersion: string;
    /**
     * SSL/TLS mode for encryption & decryption of traffic. Valid values: `off`, `full`.
     */
    sslMode: string;
    /**
     * SSL Perfect Forward Secrecy. Valid values: `require`, `deny`, `allow`.
     */
    sslPfs: string;
    /**
     * Send empty fragments to avoid attack on CBC IV (SSL 3.0 & TLS 1.0 only). Valid values: `enable`, `disable`.
     */
    sslSendEmptyFrags: string;
    /**
     * Name of Certificate return to the client in every SSL connection.
     */
    sslServerCertificate: string;
    /**
     * Enable/disable MSRP. Valid values: `disable`, `enable`.
     */
    status: string;
    /**
     * Enable/disable only allow the registrar to connect. Valid values: `disable`, `enable`.
     */
    strictRegister: string;
    /**
     * SUBSCRIBE request rate limit (per second, per policy).
     */
    subscribeRate: number;
    /**
     * Track the packet protocol field. Valid values: `none`, `src-ip`, `dest-ip`.
     */
    subscribeRateTrack: string;
    /**
     * Action for unknown SIP header. Valid values: `discard`, `pass`, `respond`.
     */
    unknownHeader: string;
    /**
     * UPDATE request rate limit (per second, per policy).
     */
    updateRate: number;
    /**
     * Track the packet protocol field. Valid values: `none`, `src-ip`, `dest-ip`.
     */
    updateRateTrack: string;
}

export interface VpnCertificateSettingCrlVerification {
    /**
     * CRL verification option when CRL of any certificate in chain is absent (default = ignore). Valid values: `ignore`, `revoke`.
     */
    chainCrlAbsence: string;
    /**
     * CRL verification option when CRL is expired (default = ignore). Valid values: `ignore`, `revoke`.
     */
    expiry: string;
    /**
     * CRL verification option when leaf CRL is absent (default = ignore). Valid values: `ignore`, `revoke`.
     */
    leafCrlAbsence: string;
}

export interface VpnIpsecConcentratorMember {
    /**
     * Member name.
     */
    name: string;
}

export interface VpnIpsecFecMapping {
    /**
     * Apply FEC parameters when available bi-bandwidth is >= threshold (kbps, 0 means no threshold).
     */
    bandwidthBiThreshold: number;
    /**
     * Apply FEC parameters when available down bandwidth is >= threshold (kbps, 0 means no threshold).
     */
    bandwidthDownThreshold: number;
    /**
     * Apply FEC parameters when available up bandwidth is >= threshold (kbps, 0 means no threshold).
     */
    bandwidthUpThreshold: number;
    /**
     * Number of base FEC packets (1 - 20).
     */
    base: number;
    /**
     * Apply FEC parameters when latency is <= threshold (0 means no threshold).
     */
    latencyThreshold: number;
    /**
     * Apply FEC parameters when packet loss is >= threshold (0 - 100, 0 means no threshold).
     */
    packetLossThreshold: number;
    /**
     * Number of redundant FEC packets (1 - 5).
     */
    redundant: number;
    /**
     * Sequence number (1 - 64).
     */
    seqno: number;
}

export interface VpnIpsecPhase1BackupGateway {
    /**
     * Address of backup gateway.
     */
    address: string;
}

export interface VpnIpsecPhase1Certificate {
    /**
     * Certificate name.
     */
    name: string;
}

export interface VpnIpsecPhase1InterfaceBackupGateway {
    /**
     * Address of backup gateway.
     */
    address: string;
}

export interface VpnIpsecPhase1InterfaceCertificate {
    /**
     * Certificate name.
     */
    name: string;
}

export interface VpnIpsecPhase1InterfaceIpv4ExcludeRange {
    /**
     * End of IPv6 exclusive range.
     */
    endIp: string;
    /**
     * ID.
     */
    id: number;
    /**
     * Start of IPv6 exclusive range.
     */
    startIp: string;
}

export interface VpnIpsecPhase1InterfaceIpv6ExcludeRange {
    /**
     * End of IPv6 exclusive range.
     */
    endIp: string;
    /**
     * ID.
     */
    id: number;
    /**
     * Start of IPv6 exclusive range.
     */
    startIp: string;
}

export interface VpnIpsecPhase1Ipv4ExcludeRange {
    /**
     * End of IPv6 exclusive range.
     */
    endIp: string;
    /**
     * ID.
     */
    id: number;
    /**
     * Start of IPv6 exclusive range.
     */
    startIp: string;
}

export interface VpnIpsecPhase1Ipv6ExcludeRange {
    /**
     * End of IPv6 exclusive range.
     */
    endIp: string;
    /**
     * ID.
     */
    id: number;
    /**
     * Start of IPv6 exclusive range.
     */
    startIp: string;
}

export interface VpnOcvpnForticlientAccess {
    /**
     * FortiClient user authentication groups. The structure of `authGroups` block is documented below.
     */
    authGroups?: outputs.VpnOcvpnForticlientAccessAuthGroup[];
    /**
     * Pre-shared secret for FortiClient PSK authentication (ASCII string or hexadecimal encoded with a leading 0x).
     */
    psksecret?: string;
    /**
     * Enable/disable FortiClient to access OCVPN networks. Valid values: `enable`, `disable`.
     */
    status: string;
}

export interface VpnOcvpnForticlientAccessAuthGroup {
    /**
     * Authentication user group for FortiClient access.
     */
    authGroup: string;
    /**
     * Group name.
     */
    name: string;
    /**
     * OCVPN overlays to allow access to. The structure of `overlays` block is documented below.
     */
    overlays?: outputs.VpnOcvpnForticlientAccessAuthGroupOverlay[];
}

export interface VpnOcvpnForticlientAccessAuthGroupOverlay {
    /**
     * Overlay name.
     */
    overlayName: string;
}

export interface VpnOcvpnOverlay {
    /**
     * Enable/disable client address assignment. Valid values: `enable`, `disable`.
     */
    assignIp: string;
    /**
     * ID.
     */
    id: number;
    /**
     * Allow or deny traffic from other overlays. Valid values: `allow`, `deny`.
     */
    interOverlay: string;
    /**
     * End of client IPv4 range.
     */
    ipv4EndIp: string;
    /**
     * Start of client IPv4 range.
     */
    ipv4StartIp: string;
    /**
     * Group name.
     */
    name: string;
    /**
     * Overlay name.
     */
    overlayName: string;
    /**
     * Internal subnets to register with OCVPN service. The structure of `subnets` block is documented below.
     */
    subnets?: outputs.VpnOcvpnOverlaySubnet[];
}

export interface VpnOcvpnOverlaySubnet {
    /**
     * ID.
     */
    id: number;
    /**
     * LAN interface.
     */
    interface: string;
    /**
     * IPv4 address and subnet mask.
     */
    subnet: string;
    /**
     * Subnet type. Valid values: `subnet`, `interface`.
     */
    type: string;
}

export interface VpnOcvpnWanInterface {
    /**
     * Group name.
     */
    name: string;
}

export interface VpnSslSettingsAuthenticationRule {
    /**
     * SSL VPN authentication method restriction.
     */
    auth: string;
    /**
     * SSL VPN cipher strength. Valid values: `any`, `high`, `medium`.
     */
    cipher: string;
    /**
     * Enable/disable SSL VPN client certificate restrictive. Valid values: `enable`, `disable`.
     */
    clientCert: string;
    /**
     * User groups. The structure of `groups` block is documented below.
     */
    groups?: outputs.VpnSslSettingsAuthenticationRuleGroup[];
    /**
     * ID (0 - 4294967295).
     */
    id: number;
    /**
     * SSL VPN portal.
     */
    portal: string;
    /**
     * SSL VPN realm.
     */
    realm: string;
    /**
     * Enable/disable negated source IPv6 address match. Valid values: `enable`, `disable`.
     */
    sourceAddress6Negate: string;
    /**
     * IPv6 source address of incoming traffic. The structure of `sourceAddress6` block is documented below.
     */
    sourceAddress6s?: outputs.VpnSslSettingsAuthenticationRuleSourceAddress6[];
    /**
     * Enable/disable negated source address match. Valid values: `enable`, `disable`.
     */
    sourceAddressNegate: string;
    /**
     * Source address of incoming traffic. The structure of `sourceAddress` block is documented below.
     */
    sourceAddresses?: outputs.VpnSslSettingsAuthenticationRuleSourceAddress[];
    /**
     * SSL VPN source interface of incoming traffic. The structure of `sourceInterface` block is documented below.
     */
    sourceInterfaces?: outputs.VpnSslSettingsAuthenticationRuleSourceInterface[];
    /**
     * Name of user peer.
     */
    userPeer: string;
    /**
     * User name. The structure of `users` block is documented below.
     */
    users?: outputs.VpnSslSettingsAuthenticationRuleUser[];
}

export interface VpnSslSettingsAuthenticationRuleGroup {
    /**
     * Group name.
     */
    name: string;
}

export interface VpnSslSettingsAuthenticationRuleSourceAddress {
    /**
     * Group name.
     */
    name: string;
}

export interface VpnSslSettingsAuthenticationRuleSourceAddress6 {
    /**
     * Group name.
     */
    name: string;
}

export interface VpnSslSettingsAuthenticationRuleSourceInterface {
    /**
     * Group name.
     */
    name: string;
}

export interface VpnSslSettingsAuthenticationRuleUser {
    /**
     * Group name.
     */
    name: string;
}

export interface VpnSslSettingsSourceAddress {
    /**
     * Group name.
     */
    name: string;
}

export interface VpnSslSettingsSourceAddress6 {
    /**
     * Group name.
     */
    name: string;
}

export interface VpnSslSettingsSourceInterface {
    /**
     * Group name.
     */
    name: string;
}

export interface VpnSslSettingsTunnelIpPool {
    /**
     * Group name.
     */
    name: string;
}

export interface VpnSslSettingsTunnelIpv6Pool {
    /**
     * Group name.
     */
    name: string;
}

export interface VpnSslWebHostCheckSoftwareCheckItemList {
    /**
     * Action. Valid values: `require`, `deny`.
     */
    action: string;
    /**
     * Hex string of MD5 checksum.
     */
    id: number;
    /**
     * MD5 checksum. The structure of `md5s` block is documented below.
     */
    md5s?: outputs.VpnSslWebHostCheckSoftwareCheckItemListMd5[];
    /**
     * Target.
     */
    target: string;
    /**
     * Type. Valid values: `file`, `registry`, `process`.
     */
    type: string;
    /**
     * Version.
     */
    version: string;
}

export interface VpnSslWebHostCheckSoftwareCheckItemListMd5 {
    /**
     * Hex string of MD5 checksum.
     */
    id: string;
}

export interface VpnSslWebPortalBookmarkGroup {
    /**
     * Bookmark table. The structure of `bookmarks` block is documented below.
     */
    bookmarks?: outputs.VpnSslWebPortalBookmarkGroupBookmark[];
    /**
     * Name.
     */
    name: string;
}

export interface VpnSslWebPortalBookmarkGroupBookmark {
    /**
     * Additional parameters.
     */
    additionalParams?: string;
    /**
     * Application type.
     */
    apptype: string;
    /**
     * Color depth per pixel. Valid values: `32`, `16`, `8`.
     */
    colorDepth: string;
    /**
     * Description.
     */
    description?: string;
    /**
     * Login domain.
     */
    domain?: string;
    /**
     * Network shared file folder parameter.
     */
    folder?: string;
    /**
     * Form data. The structure of `formData` block is documented below.
     */
    formDatas?: outputs.VpnSslWebPortalBookmarkGroupBookmarkFormData[];
    /**
     * Screen height (range from 480 - 65535, default = 768).
     */
    height: number;
    /**
     * Host name/IP parameter.
     */
    host?: string;
    /**
     * Keyboard layout. Valid values: `ar-101`, `ar-102`, `ar-102-azerty`, `can-mul`, `cz`, `cz-qwerty`, `cz-pr`, `da`, `nl`, `de`, `de-ch`, `de-ibm`, `en-uk`, `en-uk-ext`, `en-us`, `en-us-dvorak`, `es`, `es-var`, `fi`, `fi-sami`, `fr`, `fr-ca`, `fr-ch`, `fr-be`, `hr`, `hu`, `hu-101`, `it`, `it-142`, `ja`, `ko`, `lt`, `lt-ibm`, `lt-std`, `lav-std`, `lav-leg`, `mk`, `mk-std`, `no`, `no-sami`, `pol-214`, `pol-pr`, `pt`, `pt-br`, `pt-br-abnt2`, `ru`, `ru-mne`, `ru-t`, `sl`, `sv`, `sv-sami`, `tuk`, `tur-f`, `tur-q`, `zh-sym-sg-us`, `zh-sym-us`, `zh-tr-hk`, `zh-tr-mo`, `zh-tr-us`.
     */
    keyboardLayout: string;
    /**
     * Listening port (0 - 65535).
     */
    listeningPort: number;
    /**
     * The load balancing information or cookie which should be provided to the connection broker.
     */
    loadBalancingInfo?: string;
    /**
     * Logon password.
     */
    logonPassword?: string;
    /**
     * Logon user.
     */
    logonUser?: string;
    /**
     * Name.
     */
    name: string;
    /**
     * Remote port.
     */
    port: number;
    /**
     * An arbitrary string which identifies the RDP source.
     */
    preconnectionBlob?: string;
    /**
     * The numeric ID of the RDP source (0-2147483648).
     */
    preconnectionId: number;
    /**
     * Remote port (0 - 65535).
     */
    remotePort: number;
    /**
     * Enable/disable restricted admin mode for RDP. Valid values: `enable`, `disable`.
     */
    restrictedAdmin: string;
    /**
     * Security mode for RDP connection. Valid values: `rdp`, `nla`, `tls`, `any`.
     */
    security: string;
    /**
     * Enable/disable sending of preconnection ID. Valid values: `enable`, `disable`.
     */
    sendPreconnectionId: string;
    /**
     * Server side keyboard layout.
     */
    serverLayout: string;
    /**
     * Enable/disable showing of status window. Valid values: `enable`, `disable`.
     */
    showStatusWindow: string;
    /**
     * Single Sign-On. Valid values: `disable`, `static`, `auto`.
     */
    sso: string;
    /**
     * Single sign-on credentials. Valid values: `sslvpn-login`, `alternative`.
     */
    ssoCredential: string;
    /**
     * Single sign-on credentials are only sent once to remote server. Valid values: `enable`, `disable`.
     */
    ssoCredentialSentOnce: string;
    /**
     * SSO password.
     */
    ssoPassword?: string;
    /**
     * SSO user name.
     */
    ssoUsername?: string;
    /**
     * URL parameter.
     */
    url?: string;
    /**
     * Screen width (range from 640 - 65535, default = 1024).
     */
    width: number;
}

export interface VpnSslWebPortalBookmarkGroupBookmarkFormData {
    /**
     * Name.
     */
    name: string;
    /**
     * Value.
     */
    value?: string;
}

export interface VpnSslWebPortalHostCheckPolicy {
    /**
     * Name.
     */
    name: string;
}

export interface VpnSslWebPortalIpPool {
    /**
     * Name.
     */
    name: string;
}

export interface VpnSslWebPortalIpv6Pool {
    /**
     * Name.
     */
    name: string;
}

export interface VpnSslWebPortalIpv6SplitTunnelingRoutingAddress {
    /**
     * Name.
     */
    name: string;
}

export interface VpnSslWebPortalMacAddrCheckRule {
    /**
     * Client MAC address list. The structure of `macAddrList` block is documented below.
     */
    macAddrLists?: outputs.VpnSslWebPortalMacAddrCheckRuleMacAddrList[];
    /**
     * Client MAC address mask.
     */
    macAddrMask: number;
    /**
     * Name.
     */
    name: string;
}

export interface VpnSslWebPortalMacAddrCheckRuleMacAddrList {
    /**
     * Client MAC address.
     */
    addr: string;
}

export interface VpnSslWebPortalOsCheckList {
    /**
     * OS check options. Valid values: `deny`, `allow`, `check-up-to-date`.
     */
    action: string;
    /**
     * Latest OS patch level.
     */
    latestPatchLevel: string;
    /**
     * Name.
     */
    name: string;
    /**
     * OS patch level tolerance.
     */
    tolerance: number;
}

export interface VpnSslWebPortalSplitDn {
    /**
     * DNS server 1.
     */
    dnsServer1: string;
    /**
     * DNS server 2.
     */
    dnsServer2: string;
    /**
     * Split DNS domains used for SSL-VPN clients separated by comma(,).
     */
    domains?: string;
    /**
     * ID.
     */
    id: number;
    /**
     * IPv6 DNS server 1.
     */
    ipv6DnsServer1: string;
    /**
     * IPv6 DNS server 2.
     */
    ipv6DnsServer2: string;
}

export interface VpnSslWebPortalSplitTunnelingRoutingAddress {
    /**
     * Name.
     */
    name: string;
}

export interface VpnSslWebUserBookmarkBookmark {
    /**
     * Additional parameters.
     */
    additionalParams?: string;
    /**
     * Application type.
     */
    apptype: string;
    /**
     * Color depth per pixel. Valid values: `32`, `16`, `8`.
     */
    colorDepth: string;
    /**
     * Description.
     */
    description?: string;
    /**
     * Login domain.
     */
    domain?: string;
    /**
     * Network shared file folder parameter.
     */
    folder?: string;
    /**
     * Form data. The structure of `formData` block is documented below.
     */
    formDatas?: outputs.VpnSslWebUserBookmarkBookmarkFormData[];
    /**
     * Screen height (range from 480 - 65535, default = 768).
     */
    height: number;
    /**
     * Host name/IP parameter.
     */
    host?: string;
    /**
     * Keyboard layout. Valid values: `ar-101`, `ar-102`, `ar-102-azerty`, `can-mul`, `cz`, `cz-qwerty`, `cz-pr`, `da`, `nl`, `de`, `de-ch`, `de-ibm`, `en-uk`, `en-uk-ext`, `en-us`, `en-us-dvorak`, `es`, `es-var`, `fi`, `fi-sami`, `fr`, `fr-ca`, `fr-ch`, `fr-be`, `hr`, `hu`, `hu-101`, `it`, `it-142`, `ja`, `ko`, `lt`, `lt-ibm`, `lt-std`, `lav-std`, `lav-leg`, `mk`, `mk-std`, `no`, `no-sami`, `pol-214`, `pol-pr`, `pt`, `pt-br`, `pt-br-abnt2`, `ru`, `ru-mne`, `ru-t`, `sl`, `sv`, `sv-sami`, `tuk`, `tur-f`, `tur-q`, `zh-sym-sg-us`, `zh-sym-us`, `zh-tr-hk`, `zh-tr-mo`, `zh-tr-us`.
     */
    keyboardLayout: string;
    /**
     * Listening port (0 - 65535).
     */
    listeningPort: number;
    /**
     * The load balancing information or cookie which should be provided to the connection broker.
     */
    loadBalancingInfo?: string;
    /**
     * Logon password.
     */
    logonPassword?: string;
    /**
     * Logon user.
     */
    logonUser?: string;
    /**
     * Name.
     */
    name: string;
    /**
     * Remote port.
     */
    port: number;
    /**
     * An arbitrary string which identifies the RDP source.
     */
    preconnectionBlob?: string;
    /**
     * The numeric ID of the RDP source (0-2147483648).
     */
    preconnectionId: number;
    /**
     * Remote port (0 - 65535).
     */
    remotePort: number;
    /**
     * Enable/disable restricted admin mode for RDP. Valid values: `enable`, `disable`.
     */
    restrictedAdmin: string;
    /**
     * Security mode for RDP connection. Valid values: `rdp`, `nla`, `tls`, `any`.
     */
    security: string;
    /**
     * Enable/disable sending of preconnection ID. Valid values: `enable`, `disable`.
     */
    sendPreconnectionId: string;
    /**
     * Server side keyboard layout.
     */
    serverLayout: string;
    /**
     * Enable/disable showing of status window. Valid values: `enable`, `disable`.
     */
    showStatusWindow: string;
    /**
     * Single Sign-On. Valid values: `disable`, `static`, `auto`.
     */
    sso: string;
    /**
     * Single sign-on credentials. Valid values: `sslvpn-login`, `alternative`.
     */
    ssoCredential: string;
    /**
     * Single sign-on credentials are only sent once to remote server. Valid values: `enable`, `disable`.
     */
    ssoCredentialSentOnce: string;
    /**
     * SSO password.
     */
    ssoPassword?: string;
    /**
     * SSO user name.
     */
    ssoUsername?: string;
    /**
     * URL parameter.
     */
    url?: string;
    /**
     * Screen width (range from 640 - 65535, default = 1024).
     */
    width: number;
}

export interface VpnSslWebUserBookmarkBookmarkFormData {
    /**
     * Name.
     */
    name: string;
    /**
     * Value.
     */
    value?: string;
}

export interface VpnSslWebUserGroupBookmarkBookmark {
    /**
     * Additional parameters.
     */
    additionalParams?: string;
    /**
     * Application type.
     */
    apptype: string;
    /**
     * Color depth per pixel. Valid values: `32`, `16`, `8`.
     */
    colorDepth: string;
    /**
     * Description.
     */
    description?: string;
    /**
     * Login domain.
     */
    domain?: string;
    /**
     * Network shared file folder parameter.
     */
    folder?: string;
    /**
     * Form data. The structure of `formData` block is documented below.
     */
    formDatas?: outputs.VpnSslWebUserGroupBookmarkBookmarkFormData[];
    /**
     * Screen height (range from 480 - 65535, default = 768).
     */
    height: number;
    /**
     * Host name/IP parameter.
     */
    host?: string;
    /**
     * Keyboard layout. Valid values: `ar-101`, `ar-102`, `ar-102-azerty`, `can-mul`, `cz`, `cz-qwerty`, `cz-pr`, `da`, `nl`, `de`, `de-ch`, `de-ibm`, `en-uk`, `en-uk-ext`, `en-us`, `en-us-dvorak`, `es`, `es-var`, `fi`, `fi-sami`, `fr`, `fr-ca`, `fr-ch`, `fr-be`, `hr`, `hu`, `hu-101`, `it`, `it-142`, `ja`, `ko`, `lt`, `lt-ibm`, `lt-std`, `lav-std`, `lav-leg`, `mk`, `mk-std`, `no`, `no-sami`, `pol-214`, `pol-pr`, `pt`, `pt-br`, `pt-br-abnt2`, `ru`, `ru-mne`, `ru-t`, `sl`, `sv`, `sv-sami`, `tuk`, `tur-f`, `tur-q`, `zh-sym-sg-us`, `zh-sym-us`, `zh-tr-hk`, `zh-tr-mo`, `zh-tr-us`.
     */
    keyboardLayout: string;
    /**
     * Listening port (0 - 65535).
     */
    listeningPort: number;
    /**
     * The load balancing information or cookie which should be provided to the connection broker.
     */
    loadBalancingInfo?: string;
    /**
     * Logon password.
     */
    logonPassword?: string;
    /**
     * Logon user.
     */
    logonUser?: string;
    /**
     * Name.
     */
    name: string;
    /**
     * Remote port.
     */
    port: number;
    /**
     * An arbitrary string which identifies the RDP source.
     */
    preconnectionBlob?: string;
    /**
     * The numeric ID of the RDP source (0-2147483648).
     */
    preconnectionId: number;
    /**
     * Remote port (0 - 65535).
     */
    remotePort: number;
    /**
     * Enable/disable restricted admin mode for RDP. Valid values: `enable`, `disable`.
     */
    restrictedAdmin: string;
    /**
     * Security mode for RDP connection. Valid values: `rdp`, `nla`, `tls`, `any`.
     */
    security: string;
    /**
     * Enable/disable sending of preconnection ID. Valid values: `enable`, `disable`.
     */
    sendPreconnectionId: string;
    /**
     * Server side keyboard layout.
     */
    serverLayout: string;
    /**
     * Enable/disable showing of status window. Valid values: `enable`, `disable`.
     */
    showStatusWindow: string;
    /**
     * Single Sign-On. Valid values: `disable`, `static`, `auto`.
     */
    sso: string;
    /**
     * Single sign-on credentials. Valid values: `sslvpn-login`, `alternative`.
     */
    ssoCredential: string;
    /**
     * Single sign-on credentials are only sent once to remote server. Valid values: `enable`, `disable`.
     */
    ssoCredentialSentOnce: string;
    /**
     * SSO password.
     */
    ssoPassword?: string;
    /**
     * SSO user name.
     */
    ssoUsername?: string;
    /**
     * URL parameter.
     */
    url?: string;
    /**
     * Screen width (range from 640 - 65535, default = 1024).
     */
    width: number;
}

export interface VpnSslWebUserGroupBookmarkBookmarkFormData {
    /**
     * Name.
     */
    name: string;
    /**
     * Value.
     */
    value?: string;
}

export interface WafProfileAddressList {
    /**
     * Blocked address. The structure of `blockedAddress` block is documented below.
     */
    blockedAddresses?: outputs.WafProfileAddressListBlockedAddress[];
    /**
     * Enable/disable logging on blocked addresses. Valid values: `enable`, `disable`.
     */
    blockedLog: string;
    /**
     * Severity. Valid values: `high`, `medium`, `low`.
     */
    severity: string;
    /**
     * Status. Valid values: `enable`, `disable`.
     */
    status: string;
    /**
     * Trusted address. The structure of `trustedAddress` block is documented below.
     */
    trustedAddresses?: outputs.WafProfileAddressListTrustedAddress[];
}

export interface WafProfileAddressListBlockedAddress {
    /**
     * Address name.
     */
    name: string;
}

export interface WafProfileAddressListTrustedAddress {
    /**
     * Address name.
     */
    name: string;
}

export interface WafProfileConstraint {
    /**
     * HTTP content length in request. Valid values: `enable`, `disable`.
     */
    contentLength?: outputs.WafProfileConstraintContentLength;
    /**
     * HTTP constraint exception. The structure of `exception` block is documented below.
     */
    exceptions?: outputs.WafProfileConstraintException[];
    /**
     * HTTP header length in request. Valid values: `enable`, `disable`.
     */
    headerLength?: outputs.WafProfileConstraintHeaderLength;
    /**
     * Enable/disable hostname check. Valid values: `enable`, `disable`.
     */
    hostname?: outputs.WafProfileConstraintHostname;
    /**
     * HTTP line length in request. Valid values: `enable`, `disable`.
     */
    lineLength?: outputs.WafProfileConstraintLineLength;
    /**
     * Enable/disable malformed HTTP request check. Valid values: `enable`, `disable`.
     */
    malformed?: outputs.WafProfileConstraintMalformed;
    /**
     * Maximum number of cookies in HTTP request. Valid values: `enable`, `disable`.
     */
    maxCookie?: outputs.WafProfileConstraintMaxCookie;
    /**
     * Maximum number of HTTP header line. Valid values: `enable`, `disable`.
     */
    maxHeaderLine?: outputs.WafProfileConstraintMaxHeaderLine;
    /**
     * Maximum number of range segments in HTTP range line. Valid values: `enable`, `disable`.
     */
    maxRangeSegment?: outputs.WafProfileConstraintMaxRangeSegment;
    /**
     * Maximum number of parameters in URL. Valid values: `enable`, `disable`.
     */
    maxUrlParam?: outputs.WafProfileConstraintMaxUrlParam;
    /**
     * Enable/disable HTTP method check. Valid values: `enable`, `disable`.
     */
    method?: outputs.WafProfileConstraintMethod;
    /**
     * Maximum length of parameter in URL, HTTP POST request or HTTP body. Valid values: `enable`, `disable`.
     */
    paramLength?: outputs.WafProfileConstraintParamLength;
    /**
     * Maximum length of parameter in URL. Valid values: `enable`, `disable`.
     */
    urlParamLength?: outputs.WafProfileConstraintUrlParamLength;
    /**
     * Enable/disable HTTP version check. Valid values: `enable`, `disable`.
     */
    version?: outputs.WafProfileConstraintVersion;
}

export interface WafProfileConstraintContentLength {
    /**
     * Action. Valid values: `bypass`, `permit`, `block`.
     */
    action: string;
    /**
     * Maximum length of URL parameter in bytes (0 to 2147483647).
     */
    length: number;
    /**
     * Enable/disable logging. Valid values: `enable`, `disable`.
     */
    log: string;
    /**
     * Severity. Valid values: `high`, `medium`, `low`.
     */
    severity: string;
    /**
     * Status. Valid values: `enable`, `disable`.
     */
    status: string;
}

export interface WafProfileConstraintException {
    /**
     * Host address.
     */
    address: string;
    /**
     * HTTP content length in request. Valid values: `enable`, `disable`.
     */
    contentLength: string;
    /**
     * HTTP header length in request. Valid values: `enable`, `disable`.
     */
    headerLength: string;
    /**
     * Enable/disable hostname check. Valid values: `enable`, `disable`.
     */
    hostname: string;
    /**
     * URL access pattern ID.
     */
    id: number;
    /**
     * HTTP line length in request. Valid values: `enable`, `disable`.
     */
    lineLength: string;
    /**
     * Enable/disable malformed HTTP request check. Valid values: `enable`, `disable`.
     */
    malformed: string;
    /**
     * Maximum number of cookies in HTTP request. Valid values: `enable`, `disable`.
     */
    maxCookie: string;
    /**
     * Maximum number of HTTP header line. Valid values: `enable`, `disable`.
     */
    maxHeaderLine: string;
    /**
     * Maximum number of range segments in HTTP range line. Valid values: `enable`, `disable`.
     */
    maxRangeSegment: string;
    /**
     * Maximum number of parameters in URL. Valid values: `enable`, `disable`.
     */
    maxUrlParam: string;
    /**
     * Enable/disable HTTP method check. Valid values: `enable`, `disable`.
     */
    method: string;
    /**
     * Maximum length of parameter in URL, HTTP POST request or HTTP body. Valid values: `enable`, `disable`.
     */
    paramLength: string;
    /**
     * URL pattern.
     */
    pattern: string;
    /**
     * Enable/disable regular expression based pattern match. Valid values: `enable`, `disable`.
     */
    regex: string;
    /**
     * Maximum length of parameter in URL. Valid values: `enable`, `disable`.
     */
    urlParamLength: string;
    /**
     * Enable/disable HTTP version check. Valid values: `enable`, `disable`.
     */
    version: string;
}

export interface WafProfileConstraintHeaderLength {
    /**
     * Action. Valid values: `bypass`, `permit`, `block`.
     */
    action: string;
    /**
     * Maximum length of URL parameter in bytes (0 to 2147483647).
     */
    length: number;
    /**
     * Enable/disable logging. Valid values: `enable`, `disable`.
     */
    log: string;
    /**
     * Severity. Valid values: `high`, `medium`, `low`.
     */
    severity: string;
    /**
     * Status. Valid values: `enable`, `disable`.
     */
    status: string;
}

export interface WafProfileConstraintHostname {
    /**
     * Action. Valid values: `bypass`, `permit`, `block`.
     */
    action: string;
    /**
     * Enable/disable logging. Valid values: `enable`, `disable`.
     */
    log: string;
    /**
     * Severity. Valid values: `high`, `medium`, `low`.
     */
    severity: string;
    /**
     * Status. Valid values: `enable`, `disable`.
     */
    status: string;
}

export interface WafProfileConstraintLineLength {
    /**
     * Action. Valid values: `bypass`, `permit`, `block`.
     */
    action: string;
    /**
     * Maximum length of URL parameter in bytes (0 to 2147483647).
     */
    length: number;
    /**
     * Enable/disable logging. Valid values: `enable`, `disable`.
     */
    log: string;
    /**
     * Severity. Valid values: `high`, `medium`, `low`.
     */
    severity: string;
    /**
     * Status. Valid values: `enable`, `disable`.
     */
    status: string;
}

export interface WafProfileConstraintMalformed {
    /**
     * Action. Valid values: `bypass`, `permit`, `block`.
     */
    action: string;
    /**
     * Enable/disable logging. Valid values: `enable`, `disable`.
     */
    log: string;
    /**
     * Severity. Valid values: `high`, `medium`, `low`.
     */
    severity: string;
    /**
     * Status. Valid values: `enable`, `disable`.
     */
    status: string;
}

export interface WafProfileConstraintMaxCookie {
    /**
     * Action. Valid values: `bypass`, `permit`, `block`.
     */
    action: string;
    /**
     * Enable/disable logging. Valid values: `enable`, `disable`.
     */
    log: string;
    /**
     * Maximum number of cookies in HTTP request. Valid values: `enable`, `disable`.
     */
    maxCookie: number;
    /**
     * Severity. Valid values: `high`, `medium`, `low`.
     */
    severity: string;
    /**
     * Status. Valid values: `enable`, `disable`.
     */
    status: string;
}

export interface WafProfileConstraintMaxHeaderLine {
    /**
     * Action. Valid values: `bypass`, `permit`, `block`.
     */
    action: string;
    /**
     * Enable/disable logging. Valid values: `enable`, `disable`.
     */
    log: string;
    /**
     * Maximum number of HTTP header line. Valid values: `enable`, `disable`.
     */
    maxHeaderLine: number;
    /**
     * Severity. Valid values: `high`, `medium`, `low`.
     */
    severity: string;
    /**
     * Status. Valid values: `enable`, `disable`.
     */
    status: string;
}

export interface WafProfileConstraintMaxRangeSegment {
    /**
     * Action. Valid values: `bypass`, `permit`, `block`.
     */
    action: string;
    /**
     * Enable/disable logging. Valid values: `enable`, `disable`.
     */
    log: string;
    /**
     * Maximum number of range segments in HTTP range line. Valid values: `enable`, `disable`.
     */
    maxRangeSegment: number;
    /**
     * Severity. Valid values: `high`, `medium`, `low`.
     */
    severity: string;
    /**
     * Status. Valid values: `enable`, `disable`.
     */
    status: string;
}

export interface WafProfileConstraintMaxUrlParam {
    /**
     * Action. Valid values: `bypass`, `permit`, `block`.
     */
    action: string;
    /**
     * Enable/disable logging. Valid values: `enable`, `disable`.
     */
    log: string;
    /**
     * Maximum number of parameters in URL. Valid values: `enable`, `disable`.
     */
    maxUrlParam: number;
    /**
     * Severity. Valid values: `high`, `medium`, `low`.
     */
    severity: string;
    /**
     * Status. Valid values: `enable`, `disable`.
     */
    status: string;
}

export interface WafProfileConstraintMethod {
    /**
     * Action. Valid values: `bypass`, `permit`, `block`.
     */
    action: string;
    /**
     * Enable/disable logging. Valid values: `enable`, `disable`.
     */
    log: string;
    /**
     * Severity. Valid values: `high`, `medium`, `low`.
     */
    severity: string;
    /**
     * Status. Valid values: `enable`, `disable`.
     */
    status: string;
}

export interface WafProfileConstraintParamLength {
    /**
     * Action. Valid values: `bypass`, `permit`, `block`.
     */
    action: string;
    /**
     * Maximum length of URL parameter in bytes (0 to 2147483647).
     */
    length: number;
    /**
     * Enable/disable logging. Valid values: `enable`, `disable`.
     */
    log: string;
    /**
     * Severity. Valid values: `high`, `medium`, `low`.
     */
    severity: string;
    /**
     * Status. Valid values: `enable`, `disable`.
     */
    status: string;
}

export interface WafProfileConstraintUrlParamLength {
    /**
     * Action. Valid values: `bypass`, `permit`, `block`.
     */
    action: string;
    /**
     * Maximum length of URL parameter in bytes (0 to 2147483647).
     */
    length: number;
    /**
     * Enable/disable logging. Valid values: `enable`, `disable`.
     */
    log: string;
    /**
     * Severity. Valid values: `high`, `medium`, `low`.
     */
    severity: string;
    /**
     * Status. Valid values: `enable`, `disable`.
     */
    status: string;
}

export interface WafProfileConstraintVersion {
    /**
     * Action. Valid values: `bypass`, `permit`, `block`.
     */
    action: string;
    /**
     * Enable/disable logging. Valid values: `enable`, `disable`.
     */
    log: string;
    /**
     * Severity. Valid values: `high`, `medium`, `low`.
     */
    severity: string;
    /**
     * Status. Valid values: `enable`, `disable`.
     */
    status: string;
}

export interface WafProfileMethod {
    /**
     * Methods. Valid values: `get`, `post`, `put`, `head`, `connect`, `trace`, `options`, `delete`, `others`.
     */
    defaultAllowedMethods: string;
    /**
     * Enable/disable logging. Valid values: `enable`, `disable`.
     */
    log: string;
    /**
     * HTTP method policy. The structure of `methodPolicy` block is documented below.
     */
    methodPolicies?: outputs.WafProfileMethodMethodPolicy[];
    /**
     * Severity. Valid values: `high`, `medium`, `low`.
     */
    severity: string;
    /**
     * Status. Valid values: `enable`, `disable`.
     */
    status: string;
}

export interface WafProfileMethodMethodPolicy {
    /**
     * Host address.
     */
    address: string;
    /**
     * Allowed Methods. Valid values: `get`, `post`, `put`, `head`, `connect`, `trace`, `options`, `delete`, `others`.
     */
    allowedMethods: string;
    /**
     * URL access pattern ID.
     */
    id: number;
    /**
     * URL pattern.
     */
    pattern: string;
    /**
     * Enable/disable regular expression based pattern match. Valid values: `enable`, `disable`.
     */
    regex: string;
}

export interface WafProfileSignature {
    /**
     * The minimum number of Credit cards to detect violation.
     */
    creditCardDetectionThreshold: number;
    /**
     * Custom signature. The structure of `customSignature` block is documented below.
     */
    customSignatures?: outputs.WafProfileSignatureCustomSignature[];
    /**
     * Disabled signatures The structure of `disabledSignature` block is documented below.
     */
    disabledSignatures?: outputs.WafProfileSignatureDisabledSignature[];
    /**
     * Disabled signature subclasses. The structure of `disabledSubClass` block is documented below.
     */
    disabledSubClasses?: outputs.WafProfileSignatureDisabledSubClass[];
    /**
     * Main signature class. The structure of `mainClass` block is documented below.
     */
    mainClasses?: outputs.WafProfileSignatureMainClass[];
}

export interface WafProfileSignatureCustomSignature {
    /**
     * Action. Valid values: `bypass`, `permit`, `block`.
     */
    action: string;
    /**
     * Case sensitivity in pattern. Valid values: `disable`, `enable`.
     */
    caseSensitivity: string;
    /**
     * Traffic direction. Valid values: `request`, `response`.
     */
    direction: string;
    /**
     * Enable/disable logging. Valid values: `enable`, `disable`.
     */
    log: string;
    /**
     * Address name.
     */
    name: string;
    /**
     * URL pattern.
     */
    pattern: string;
    /**
     * Severity. Valid values: `high`, `medium`, `low`.
     */
    severity: string;
    /**
     * Status. Valid values: `enable`, `disable`.
     */
    status: string;
    /**
     * Match HTTP target. Valid values: `arg`, `arg-name`, `req-body`, `req-cookie`, `req-cookie-name`, `req-filename`, `req-header`, `req-header-name`, `req-raw-uri`, `req-uri`, `resp-body`, `resp-hdr`, `resp-status`.
     */
    target: string;
}

export interface WafProfileSignatureDisabledSignature {
    /**
     * URL access pattern ID.
     */
    id: number;
}

export interface WafProfileSignatureDisabledSubClass {
    /**
     * URL access pattern ID.
     */
    id: number;
}

export interface WafProfileSignatureMainClass {
    /**
     * Action. Valid values: `bypass`, `permit`, `block`.
     */
    action: string;
    /**
     * URL access pattern ID.
     */
    id: number;
    /**
     * Enable/disable logging. Valid values: `enable`, `disable`.
     */
    log: string;
    /**
     * Severity. Valid values: `high`, `medium`, `low`.
     */
    severity: string;
    /**
     * Status. Valid values: `enable`, `disable`.
     */
    status: string;
}

export interface WafProfileUrlAccess {
    /**
     * URL access pattern. The structure of `accessPattern` block is documented below.
     */
    accessPatterns?: outputs.WafProfileUrlAccessAccessPattern[];
    /**
     * Action. Valid values: `bypass`, `permit`, `block`.
     */
    action: string;
    /**
     * Host address.
     */
    address: string;
    /**
     * URL access pattern ID.
     */
    id: number;
    /**
     * Enable/disable logging. Valid values: `enable`, `disable`.
     */
    log: string;
    /**
     * Severity. Valid values: `high`, `medium`, `low`.
     */
    severity: string;
}

export interface WafProfileUrlAccessAccessPattern {
    /**
     * URL access pattern ID.
     */
    id: number;
    /**
     * Enable/disable match negation. Valid values: `enable`, `disable`.
     */
    negate: string;
    /**
     * URL pattern.
     */
    pattern: string;
    /**
     * Enable/disable regular expression based pattern match. Valid values: `enable`, `disable`.
     */
    regex: string;
    /**
     * Source address.
     */
    srcaddr: string;
}

export interface WanoptCacheServiceDstPeer {
    /**
     * Set authentication type for this peer.
     */
    authType: number;
    /**
     * Device ID of this peer.
     */
    deviceId: string;
    /**
     * Set encode type for this peer.
     */
    encodeType: number;
    /**
     * Set cluster IP address of this peer.
     */
    ip: string;
    /**
     * Set priority for this peer.
     */
    priority: number;
}

export interface WanoptCacheServiceSrcPeer {
    /**
     * Set authentication type for this peer.
     */
    authType: number;
    /**
     * Device ID of this peer.
     */
    deviceId: string;
    /**
     * Set encode type for this peer.
     */
    encodeType: number;
    /**
     * Set cluster IP address of this peer.
     */
    ip: string;
    /**
     * Set priority for this peer.
     */
    priority: number;
}

export interface WanoptContentDeliveryNetworkRuleHostDomainNameSuffix {
    /**
     * WAN optimization content delivery network rule name.
     */
    name: string;
}

export interface WanoptContentDeliveryNetworkRuleRule {
    /**
     * Content ID settings. The structure of `contentId` block is documented below.
     */
    contentId?: outputs.WanoptContentDeliveryNetworkRuleRuleContentId;
    /**
     * List of entries to match. The structure of `matchEntries` block is documented below.
     */
    matchEntries?: outputs.WanoptContentDeliveryNetworkRuleRuleMatchEntry[];
    /**
     * Match criteria for collecting content ID. Valid values: `all`, `any`.
     */
    matchMode: string;
    /**
     * WAN optimization content delivery network rule name.
     */
    name: string;
    /**
     * List of entries to skip. The structure of `skipEntries` block is documented below.
     */
    skipEntries?: outputs.WanoptContentDeliveryNetworkRuleRuleSkipEntry[];
    /**
     * Skip mode when evaluating skip-rules. Valid values: `all`, `any`.
     */
    skipRuleMode: string;
}

export interface WanoptContentDeliveryNetworkRuleRuleContentId {
    /**
     * Search direction from end-str match. Valid values: `forward`, `backward`.
     */
    endDirection: string;
    /**
     * Number of characters in URL to skip after end-str has been matched.
     */
    endSkip: number;
    /**
     * String from which to end search.
     */
    endStr: string;
    /**
     * Name of content ID within the start string and end string.
     */
    rangeStr: string;
    /**
     * Search direction from start-str match. Valid values: `forward`, `backward`.
     */
    startDirection: string;
    /**
     * Number of characters in URL to skip after start-str has been matched.
     */
    startSkip: number;
    /**
     * String from which to start search.
     */
    startStr: string;
    /**
     * Option in HTTP header or URL parameter to match. Valid values: `path`, `parameter`, `referrer`, `youtube-map`, `youtube-id`, `youku-id`, `hls-manifest`, `dash-manifest`, `hls-fragment`, `dash-fragment`.
     */
    target: string;
}

export interface WanoptContentDeliveryNetworkRuleRuleMatchEntry {
    /**
     * Rule ID.
     */
    id: number;
    /**
     * Pattern string for matching target (Referrer or URL pattern, eg. "a", "a*c", "*a*", "a*c*e", and "*"). The structure of `pattern` block is documented below.
     */
    patterns?: outputs.WanoptContentDeliveryNetworkRuleRuleMatchEntryPattern[];
    /**
     * Option in HTTP header or URL parameter to match. Valid values: `path`, `parameter`, `referrer`, `youtube-map`, `youtube-id`, `youku-id`, `hls-manifest`, `dash-manifest`, `hls-fragment`, `dash-fragment`.
     */
    target: string;
}

export interface WanoptContentDeliveryNetworkRuleRuleMatchEntryPattern {
    /**
     * Pattern strings.
     */
    string: string;
}

export interface WanoptContentDeliveryNetworkRuleRuleSkipEntry {
    /**
     * Rule ID.
     */
    id: number;
    /**
     * Pattern string for matching target (Referrer or URL pattern, eg. "a", "a*c", "*a*", "a*c*e", and "*"). The structure of `pattern` block is documented below.
     */
    patterns?: outputs.WanoptContentDeliveryNetworkRuleRuleSkipEntryPattern[];
    /**
     * Option in HTTP header or URL parameter to match. Valid values: `path`, `parameter`, `referrer`, `youtube-map`, `youtube-id`, `youku-id`, `hls-manifest`, `dash-manifest`, `hls-fragment`, `dash-fragment`.
     */
    target: string;
}

export interface WanoptContentDeliveryNetworkRuleRuleSkipEntryPattern {
    /**
     * Pattern strings.
     */
    string: string;
}

export interface WanoptProfileCifs {
    /**
     * Enable/disable byte-caching for HTTP. Byte caching reduces the amount of traffic by caching file data sent across the WAN and in future serving if from the cache. Valid values: `enable`, `disable`.
     */
    byteCaching: string;
    /**
     * Enable/disable logging. Valid values: `enable`, `disable`.
     */
    logTraffic: string;
    /**
     * Single port number or port number range for TCP. Only packets with a destination port number that matches this port number or range are accepted by this profile.
     */
    port: number;
    /**
     * Select dynamic or fixed-size data chunking for HTTP WAN Optimization. Valid values: `dynamic`, `fix`.
     */
    preferChunking: string;
    /**
     * Select Protocol specific optimitation or generic TCP optimization. Valid values: `protocol`, `tcp`.
     */
    protocolOpt: string;
    /**
     * Enable/disable securing the WAN Opt tunnel using SSL. Secure and non-secure tunnels use the same TCP port (7810). Valid values: `enable`, `disable`.
     */
    secureTunnel: string;
    /**
     * Enable/disable HTTP WAN Optimization. Valid values: `enable`, `disable`.
     */
    status: string;
    /**
     * Tunnel sharing mode for aggressive/non-aggressive and/or interactive/non-interactive protocols. Valid values: `private`, `shared`, `express-shared`.
     */
    tunnelSharing: string;
}

export interface WanoptProfileFtp {
    /**
     * Enable/disable byte-caching for HTTP. Byte caching reduces the amount of traffic by caching file data sent across the WAN and in future serving if from the cache. Valid values: `enable`, `disable`.
     */
    byteCaching: string;
    /**
     * Enable/disable logging. Valid values: `enable`, `disable`.
     */
    logTraffic: string;
    /**
     * Single port number or port number range for TCP. Only packets with a destination port number that matches this port number or range are accepted by this profile.
     */
    port: number;
    /**
     * Select dynamic or fixed-size data chunking for HTTP WAN Optimization. Valid values: `dynamic`, `fix`.
     */
    preferChunking: string;
    /**
     * Select Protocol specific optimitation or generic TCP optimization. Valid values: `protocol`, `tcp`.
     */
    protocolOpt: string;
    /**
     * Enable/disable securing the WAN Opt tunnel using SSL. Secure and non-secure tunnels use the same TCP port (7810). Valid values: `enable`, `disable`.
     */
    secureTunnel: string;
    /**
     * Enable/disable SSL/TLS offloading. Valid values: `enable`, `disable`.
     */
    ssl: string;
    /**
     * Enable/disable HTTP WAN Optimization. Valid values: `enable`, `disable`.
     */
    status: string;
    /**
     * Tunnel sharing mode for aggressive/non-aggressive and/or interactive/non-interactive protocols. Valid values: `private`, `shared`, `express-shared`.
     */
    tunnelSharing: string;
}

export interface WanoptProfileHttp {
    /**
     * Enable/disable byte-caching for HTTP. Byte caching reduces the amount of traffic by caching file data sent across the WAN and in future serving if from the cache. Valid values: `enable`, `disable`.
     */
    byteCaching: string;
    /**
     * Enable/disable logging. Valid values: `enable`, `disable`.
     */
    logTraffic: string;
    /**
     * Single port number or port number range for TCP. Only packets with a destination port number that matches this port number or range are accepted by this profile.
     */
    port: number;
    /**
     * Select dynamic or fixed-size data chunking for HTTP WAN Optimization. Valid values: `dynamic`, `fix`.
     */
    preferChunking: string;
    /**
     * Select Protocol specific optimitation or generic TCP optimization. Valid values: `protocol`, `tcp`.
     */
    protocolOpt: string;
    /**
     * Enable/disable securing the WAN Opt tunnel using SSL. Secure and non-secure tunnels use the same TCP port (7810). Valid values: `enable`, `disable`.
     */
    secureTunnel: string;
    /**
     * Enable/disable SSL/TLS offloading. Valid values: `enable`, `disable`.
     */
    ssl: string;
    /**
     * Port on which to expect HTTPS traffic for SSL/TLS offloading.
     */
    sslPort: number;
    /**
     * Enable/disable HTTP WAN Optimization. Valid values: `enable`, `disable`.
     */
    status: string;
    /**
     * Configure how to process non-HTTP traffic when a profile configured for HTTP traffic accepts a non-HTTP session. Can occur if an application sends non-HTTP traffic using an HTTP destination port. Valid values: `enable`, `disable`.
     */
    tunnelNonHttp: string;
    /**
     * Tunnel sharing mode for aggressive/non-aggressive and/or interactive/non-interactive protocols. Valid values: `private`, `shared`, `express-shared`.
     */
    tunnelSharing: string;
    /**
     * How to handle HTTP sessions that do not comply with HTTP 0.9, 1.0, or 1.1. Valid values: `reject`, `tunnel`, `best-effort`.
     */
    unknownHttpVersion: string;
}

export interface WanoptProfileMapi {
    /**
     * Enable/disable byte-caching for HTTP. Byte caching reduces the amount of traffic by caching file data sent across the WAN and in future serving if from the cache. Valid values: `enable`, `disable`.
     */
    byteCaching: string;
    /**
     * Enable/disable logging. Valid values: `enable`, `disable`.
     */
    logTraffic: string;
    /**
     * Single port number or port number range for TCP. Only packets with a destination port number that matches this port number or range are accepted by this profile.
     */
    port: number;
    /**
     * Enable/disable securing the WAN Opt tunnel using SSL. Secure and non-secure tunnels use the same TCP port (7810). Valid values: `enable`, `disable`.
     */
    secureTunnel: string;
    /**
     * Enable/disable HTTP WAN Optimization. Valid values: `enable`, `disable`.
     */
    status: string;
    /**
     * Tunnel sharing mode for aggressive/non-aggressive and/or interactive/non-interactive protocols. Valid values: `private`, `shared`, `express-shared`.
     */
    tunnelSharing: string;
}

export interface WanoptProfileTcp {
    /**
     * Enable/disable byte-caching for HTTP. Byte caching reduces the amount of traffic by caching file data sent across the WAN and in future serving if from the cache. Valid values: `enable`, `disable`.
     */
    byteCaching: string;
    /**
     * Select whether TCP byte-caching uses system memory only or both memory and disk space. Valid values: `mem-only`, `mem-disk`.
     */
    byteCachingOpt: string;
    /**
     * Enable/disable logging. Valid values: `enable`, `disable`.
     */
    logTraffic: string;
    /**
     * Single port number or port number range for TCP. Only packets with a destination port number that matches this port number or range are accepted by this profile.
     */
    port: string;
    /**
     * Enable/disable securing the WAN Opt tunnel using SSL. Secure and non-secure tunnels use the same TCP port (7810). Valid values: `enable`, `disable`.
     */
    secureTunnel: string;
    /**
     * Enable/disable SSL/TLS offloading. Valid values: `enable`, `disable`.
     */
    ssl: string;
    /**
     * Port on which to expect HTTPS traffic for SSL/TLS offloading.
     */
    sslPort: number;
    /**
     * Enable/disable HTTP WAN Optimization. Valid values: `enable`, `disable`.
     */
    status: string;
    /**
     * Tunnel sharing mode for aggressive/non-aggressive and/or interactive/non-interactive protocols. Valid values: `private`, `shared`, `express-shared`.
     */
    tunnelSharing: string;
}

export interface WebProxyExplicitPacPolicy {
    /**
     * Optional comments.
     */
    comments?: string;
    /**
     * Destination address objects. The structure of `dstaddr` block is documented below.
     */
    dstaddrs?: outputs.WebProxyExplicitPacPolicyDstaddr[];
    /**
     * PAC file contents enclosed in quotes (maximum of 256K bytes).
     */
    pacFileData: string;
    /**
     * Pac file name.
     */
    pacFileName: string;
    /**
     * Policy ID.
     */
    policyid: number;
    /**
     * Source address6 objects. The structure of `srcaddr6` block is documented below.
     */
    srcaddr6s?: outputs.WebProxyExplicitPacPolicySrcaddr6[];
    /**
     * Source address objects. The structure of `srcaddr` block is documented below.
     */
    srcaddrs?: outputs.WebProxyExplicitPacPolicySrcaddr[];
    /**
     * Enable/disable policy. Valid values: `enable`, `disable`.
     */
    status: string;
}

export interface WebProxyExplicitPacPolicyDstaddr {
    /**
     * Address name.
     */
    name: string;
}

export interface WebProxyExplicitPacPolicySrcaddr {
    /**
     * Address name.
     */
    name: string;
}

export interface WebProxyExplicitPacPolicySrcaddr6 {
    /**
     * Address name.
     */
    name: string;
}

export interface WebProxyForwardServerGroupServerList {
    /**
     * Forward server name.
     */
    name: string;
    /**
     * Optionally assign a weight of the forwarding server for weighted load balancing (1 - 100, default = 10)
     */
    weight: number;
}

export interface WebProxyGlobalLearnClientIpSrcaddr {
    /**
     * Address name.
     */
    name: string;
}

export interface WebProxyGlobalLearnClientIpSrcaddr6 {
    /**
     * Address name.
     */
    name: string;
}

export interface WebProxyProfileHeader {
    /**
     * Action when the HTTP header is forwarded. Valid values: `add-to-request`, `add-to-response`, `remove-from-request`, `remove-from-response`.
     */
    action: string;
    /**
     * Configure options to append content to existing HTTP header or add new HTTP header. Valid values: `append`, `new-on-not-found`, `new`.
     */
    addOption: string;
    /**
     * Enable/disable use of base64 encoding of HTTP content. Valid values: `disable`, `enable`.
     */
    base64Encoding: string;
    /**
     * HTTP header content.
     */
    content: string;
    /**
     * Destination address and address group names (IPv6). The structure of `dstaddr6` block is documented below.
     */
    dstaddr6s?: outputs.WebProxyProfileHeaderDstaddr6[];
    /**
     * Destination address and address group names. The structure of `dstaddr` block is documented below.
     */
    dstaddrs?: outputs.WebProxyProfileHeaderDstaddr[];
    /**
     * HTTP forwarded header id.
     */
    id: number;
    /**
     * Address name.
     */
    name: string;
    /**
     * Configure protocol(s) to take add-option action on (HTTP, HTTPS, or both). Valid values: `https`, `http`.
     */
    protocol: string;
}

export interface WebProxyProfileHeaderDstaddr {
    /**
     * Address name.
     */
    name: string;
}

export interface WebProxyProfileHeaderDstaddr6 {
    /**
     * Address name.
     */
    name: string;
}

export interface WebfilterContentEntry {
    /**
     * Block or exempt word when a match is found. Valid values: `block`, `exempt`.
     */
    action: string;
    /**
     * Language of banned word. Valid values: `western`, `simch`, `trach`, `japanese`, `korean`, `french`, `thai`, `spanish`, `cyrillic`.
     */
    lang: string;
    /**
     * Banned word.
     */
    name: string;
    /**
     * Banned word pattern type: wildcard pattern or Perl regular expression. Valid values: `wildcard`, `regexp`.
     */
    patternType: string;
    /**
     * Score, to be applied every time the word appears on a web page (0 - 4294967295, default = 10).
     */
    score: number;
    /**
     * Enable/disable banned word. Valid values: `enable`, `disable`.
     */
    status: string;
}

export interface WebfilterContentHeaderEntry {
    /**
     * Action to take for this content type. Valid values: `block`, `allow`, `exempt`.
     */
    action: string;
    /**
     * Categories that this content type applies to.
     */
    category: string;
    /**
     * Content type (regular expression).
     */
    pattern: string;
}

export interface WebfilterProfileAntiphish {
    /**
     * Authentication methods. Valid values: `domain-controller`, `ldap`.
     */
    authentication: string;
    /**
     * Enable/disable checking of HTTP Basic Auth field for known credentials. Valid values: `enable`, `disable`.
     */
    checkBasicAuth: string;
    /**
     * Enable/disable checking of GET URI parameters for known credentials. Valid values: `enable`, `disable`.
     */
    checkUri: string;
    /**
     * Enable/disable username only matching of credentials. Action will be taken for valid usernames regardless of password validity. Valid values: `enable`, `disable`.
     */
    checkUsernameOnly: string;
    /**
     * Custom username and password regex patterns. The structure of `customPatterns` block is documented below.
     */
    customPatterns?: outputs.WebfilterProfileAntiphishCustomPattern[];
    /**
     * Action to be taken when there is no matching rule. Valid values: `exempt`, `log`, `block`.
     */
    defaultAction: string;
    /**
     * Domain for which to verify received credentials against.
     */
    domainController: string;
    /**
     * AntiPhishing entries. The structure of `inspectionEntries` block is documented below.
     */
    inspectionEntries?: outputs.WebfilterProfileAntiphishInspectionEntry[];
    /**
     * LDAP server for which to verify received credentials against.
     */
    ldap: string;
    /**
     * Maximum size of a POST body to check for credentials.
     */
    maxBodyLen: number;
    /**
     * Toggle AntiPhishing functionality. Valid values: `enable`, `disable`.
     */
    status: string;
}

export interface WebfilterProfileAntiphishCustomPattern {
    /**
     * Category that the pattern matches. Valid values: `username`, `password`.
     */
    category: string;
    /**
     * Target pattern.
     */
    pattern: string;
    /**
     * Pattern will be treated either as a regex pattern or literal string. Valid values: `regex`, `literal`.
     */
    type: string;
}

export interface WebfilterProfileAntiphishInspectionEntry {
    /**
     * Action to be taken upon an AntiPhishing match. Valid values: `exempt`, `log`, `block`.
     */
    action: string;
    /**
     * FortiGuard category to match.
     */
    fortiguardCategory: string;
    /**
     * Server name.
     */
    name: string;
}

export interface WebfilterProfileFileFilter {
    /**
     * File filter entries. The structure of `entries` block is documented below.
     */
    entries?: outputs.WebfilterProfileFileFilterEntry[];
    /**
     * Enable/disable logging. Valid values: `enable`, `disable`.
     */
    log: string;
    /**
     * Enable/disable file filter archive contents scan. Valid values: `enable`, `disable`.
     */
    scanArchiveContents: string;
    /**
     * Toggle AntiPhishing functionality. Valid values: `enable`, `disable`.
     */
    status: string;
}

export interface WebfilterProfileFileFilterEntry {
    /**
     * Action to be taken upon an AntiPhishing match. Valid values: `exempt`, `log`, `block`.
     */
    action: string;
    /**
     * Comment.
     */
    comment?: string;
    /**
     * Match files transmitted in the session's originating or reply direction. Valid values: `incoming`, `outgoing`, `any`.
     */
    direction: string;
    /**
     * Select file type. The structure of `fileType` block is documented below.
     */
    fileTypes?: outputs.WebfilterProfileFileFilterEntryFileType[];
    /**
     * Add a file filter.
     */
    filter: string;
    /**
     * Match password-protected files. Valid values: `yes`, `any`.
     */
    passwordProtected: string;
    /**
     * Protocols to apply with. Valid values: `http`, `ftp`.
     */
    protocol: string;
}

export interface WebfilterProfileFileFilterEntryFileType {
    /**
     * Server name.
     */
    name: string;
}

export interface WebfilterProfileFtgdWf {
    /**
     * Do not stop quota for these categories.
     */
    exemptQuota: string;
    /**
     * FortiGuard filters. The structure of `filters` block is documented below.
     */
    filters?: outputs.WebfilterProfileFtgdWfFilter[];
    /**
     * Maximum FortiGuard quota used by single page view in seconds (excludes streams).
     */
    maxQuotaTimeout: number;
    /**
     * Options for FortiGuard Web Filter. Valid values: `error-allow`, `rate-server-ip`, `connect-request-bypass`, `ftgd-disable`.
     */
    options: string;
    /**
     * Allow web filter profile overrides.
     */
    ovrd: string;
    /**
     * FortiGuard traffic quota settings. The structure of `quota` block is documented below.
     */
    quotas?: outputs.WebfilterProfileFtgdWfQuota[];
    /**
     * Enable/disable rating CRL by URL. Valid values: `disable`, `enable`.
     */
    rateCrlUrls: string;
    /**
     * Enable/disable rating CSS by URL. Valid values: `disable`, `enable`.
     */
    rateCssUrls: string;
    /**
     * Enable/disable rating images by URL. Valid values: `disable`, `enable`.
     */
    rateImageUrls: string;
    /**
     * Enable/disable rating JavaScript by URL. Valid values: `disable`, `enable`.
     */
    rateJavascriptUrls: string;
}

export interface WebfilterProfileFtgdWfFilter {
    /**
     * Action to be taken upon an AntiPhishing match. Valid values: `exempt`, `log`, `block`.
     */
    action: string;
    /**
     * Groups with permission to authenticate. The structure of `authUsrGrp` block is documented below.
     */
    authUsrGrps?: outputs.WebfilterProfileFtgdWfFilterAuthUsrGrp[];
    /**
     * Category that the pattern matches. Valid values: `username`, `password`.
     */
    category: number;
    /**
     * ID number.
     */
    id: number;
    /**
     * Enable/disable logging. Valid values: `enable`, `disable`.
     */
    log: string;
    /**
     * Override replacement message.
     */
    overrideReplacemsg: string;
    /**
     * Duration of warnings.
     */
    warnDuration: string;
    /**
     * Re-display warning after closing browser or after a timeout. Valid values: `session`, `timeout`.
     */
    warningDurationType: string;
    /**
     * Warning prompts in each category or each domain. Valid values: `per-domain`, `per-category`.
     */
    warningPrompt: string;
}

export interface WebfilterProfileFtgdWfFilterAuthUsrGrp {
    /**
     * Server name.
     */
    name: string;
}

export interface WebfilterProfileFtgdWfQuota {
    /**
     * Category that the pattern matches. Valid values: `username`, `password`.
     */
    category: string;
    /**
     * Duration of quota.
     */
    duration: string;
    /**
     * ID number.
     */
    id: number;
    /**
     * Override replacement message.
     */
    overrideReplacemsg: string;
    /**
     * Pattern will be treated either as a regex pattern or literal string. Valid values: `regex`, `literal`.
     */
    type: string;
    /**
     * Traffic quota unit of measurement. Valid values: `B`, `KB`, `MB`, `GB`.
     */
    unit: string;
    /**
     * Traffic quota value.
     */
    value: number;
}

export interface WebfilterProfileOverride {
    /**
     * Allow/deny browser-based (cookie) overrides. Valid values: `allow`, `deny`.
     */
    ovrdCookie: string;
    /**
     * Override duration.
     */
    ovrdDur: string;
    /**
     * Override duration mode. Valid values: `constant`, `ask`.
     */
    ovrdDurMode: string;
    /**
     * Override scope. Valid values: `user`, `user-group`, `ip`, `browser`, `ask`.
     */
    ovrdScope: string;
    /**
     * User groups with permission to use the override. The structure of `ovrdUserGroup` block is documented below.
     */
    ovrdUserGroups?: outputs.WebfilterProfileOverrideOvrdUserGroup[];
    /**
     * Profile attribute to retrieve from the RADIUS server. Valid values: `User-Name`, `NAS-IP-Address`, `Framed-IP-Address`, `Framed-IP-Netmask`, `Filter-Id`, `Login-IP-Host`, `Reply-Message`, `Callback-Number`, `Callback-Id`, `Framed-Route`, `Framed-IPX-Network`, `Class`, `Called-Station-Id`, `Calling-Station-Id`, `NAS-Identifier`, `Proxy-State`, `Login-LAT-Service`, `Login-LAT-Node`, `Login-LAT-Group`, `Framed-AppleTalk-Zone`, `Acct-Session-Id`, `Acct-Multi-Session-Id`.
     */
    profileAttribute: string;
    /**
     * Override profile type. Valid values: `list`, `radius`.
     */
    profileType: string;
    /**
     * Web filter profile with permission to create overrides. The structure of `profile` block is documented below.
     */
    profiles?: outputs.WebfilterProfileOverrideProfile[];
}

export interface WebfilterProfileOverrideOvrdUserGroup {
    /**
     * Server name.
     */
    name: string;
}

export interface WebfilterProfileOverrideProfile {
    /**
     * Server name.
     */
    name: string;
}

export interface WebfilterProfileWeb {
    /**
     * FortiGuard allowlist settings. Valid values: `exempt-av`, `exempt-webcontent`, `exempt-activex-java-cookie`, `exempt-dlp`, `exempt-rangeblock`, `extended-log-others`.
     */
    allowlist: string;
    /**
     * Enable/disable automatic addition of URLs detected by FortiSandbox to blacklist. Valid values: `enable`, `disable`.
     */
    blacklist: string;
    /**
     * Enable/disable automatic addition of URLs detected by FortiSandbox to blocklist. Valid values: `enable`, `disable`.
     */
    blocklist: string;
    /**
     * Banned word table ID.
     */
    bwordTable: number;
    /**
     * Banned word score threshold.
     */
    bwordThreshold: number;
    /**
     * Content header list.
     */
    contentHeaderList: number;
    /**
     * Search keywords to log when match is found. The structure of `keywordMatch` block is documented below.
     */
    keywordMatches?: outputs.WebfilterProfileWebKeywordMatch[];
    /**
     * Enable/disable logging all search phrases. Valid values: `enable`, `disable`.
     */
    logSearch: string;
    /**
     * Safe search type. Valid values: `url`, `header`.
     */
    safeSearch: string;
    /**
     * URL filter table ID.
     */
    urlfilterTable: number;
    /**
     * Set Vimeo-restrict ("7" = don't show mature content, "134" = don't show unrated and mature content). A value of cookie "contentRating".
     */
    vimeoRestrict: string;
    /**
     * FortiGuard whitelist settings. Valid values: `exempt-av`, `exempt-webcontent`, `exempt-activex-java-cookie`, `exempt-dlp`, `exempt-rangeblock`, `extended-log-others`.
     */
    whitelist: string;
    /**
     * YouTube EDU filter level. Valid values: `none`, `strict`, `moderate`.
     */
    youtubeRestrict: string;
}

export interface WebfilterProfileWebKeywordMatch {
    /**
     * Target pattern.
     */
    pattern: string;
}

export interface WebfilterProfileWispServer {
    /**
     * Server name.
     */
    name: string;
}

export interface WebfilterProfileYoutubeChannelFilter {
    /**
     * YouTube channel ID to be filtered.
     */
    channelId: string;
    /**
     * Comment.
     */
    comment?: string;
    /**
     * ID number.
     */
    id: number;
}

export interface WebfilterUrlfilterEntry {
    /**
     * Action to take for URL filter matches. Valid values: `exempt`, `block`, `allow`, `monitor`.
     */
    action: string;
    /**
     * Action to take for AntiPhishing matches. Valid values: `block`, `log`.
     */
    antiphishAction: string;
    /**
     * Resolve IPv4 address, IPv6 address, or both from DNS server. Valid values: `ipv4`, `ipv6`, `both`.
     */
    dnsAddressFamily: string;
    /**
     * If action is set to exempt, select the security profile operations that exempt URLs skip. Separate multiple options with a space.
     */
    exempt: string;
    /**
     * Id.
     */
    id: number;
    /**
     * Referrer host name.
     */
    referrerHost: string;
    /**
     * Enable/disable this URL filter. Valid values: `enable`, `disable`.
     */
    status: string;
    /**
     * Filter type (simple, regex, or wildcard). Valid values: `simple`, `regex`, `wildcard`.
     */
    type: string;
    /**
     * URL to be filtered.
     */
    url: string;
    /**
     * Web proxy profile.
     */
    webProxyProfile: string;
}

export interface WirelessControllerAccessControlListLayer3Ipv4Rule {
    /**
     * Policy action (allow | deny). Valid values: `allow`, `deny`.
     */
    action: string;
    /**
     * Description.
     */
    comment: string;
    /**
     * Destination IPv6 address (any | local-LAN | IPv6 address[/prefix length]), default = any.
     */
    dstaddr: string;
    /**
     * Destination port (0 - 65535, default = 0, meaning any).
     */
    dstport: number;
    /**
     * Protocol type as defined by IANA (0 - 255, default = 255, meaning any).
     */
    protocol: number;
    /**
     * Rule ID (1 - 65535).
     */
    ruleId: number;
    /**
     * Source IPv6 address (any | local-LAN | IPv6 address[/prefix length]), default = any.
     */
    srcaddr: string;
    /**
     * Source port (0 - 65535, default = 0, meaning any).
     */
    srcport: number;
}

export interface WirelessControllerAccessControlListLayer3Ipv6Rule {
    /**
     * Policy action (allow | deny). Valid values: `allow`, `deny`.
     */
    action: string;
    /**
     * Description.
     */
    comment: string;
    /**
     * Destination IPv6 address (any | local-LAN | IPv6 address[/prefix length]), default = any.
     */
    dstaddr: string;
    /**
     * Destination port (0 - 65535, default = 0, meaning any).
     */
    dstport: number;
    /**
     * Protocol type as defined by IANA (0 - 255, default = 255, meaning any).
     */
    protocol: number;
    /**
     * Rule ID (1 - 65535).
     */
    ruleId: number;
    /**
     * Source IPv6 address (any | local-LAN | IPv6 address[/prefix length]), default = any.
     */
    srcaddr: string;
    /**
     * Source port (0 - 65535, default = 0, meaning any).
     */
    srcport: number;
}

export interface WirelessControllerAddrgrpAddress {
    /**
     * Address ID.
     */
    id: string;
}

export interface WirelessControllerApcfgProfileCommandList {
    /**
     * Command ID.
     */
    id: number;
    /**
     * AP local configuration command name.
     */
    name: string;
    /**
     * AP local configuration command password value.
     */
    passwdValue?: string;
    /**
     * The command type (default = non-password). Valid values: `non-password`, `password`.
     */
    type: string;
    /**
     * AP local configuration command value.
     */
    value: string;
}

export interface WirelessControllerArrpProfileDarrpOptimizeSchedule {
    /**
     * Schedule name.
     */
    name: string;
}

export interface WirelessControllerBonjourProfilePolicyList {
    /**
     * Description.
     */
    description: string;
    /**
     * VLAN ID from which the Bonjour service is advertised (0 - 4094, default = 0).
     */
    fromVlan: string;
    /**
     * Policy ID.
     */
    policyId: number;
    /**
     * Bonjour services for the VLAN connecting to the Bonjour network. Valid values: `all`, `airplay`, `afp`, `bit-torrent`, `ftp`, `ichat`, `itunes`, `printers`, `samba`, `scanners`, `ssh`, `chromecast`.
     */
    services: string;
    /**
     * VLAN ID to which the Bonjour service is made available (0 - 4094, default = all).
     */
    toVlan: string;
}

export interface WirelessControllerHotspot20Anqp3GppCellularMccMncList {
    /**
     * ID.
     */
    id: number;
    /**
     * Mobile country code.
     */
    mcc: string;
    /**
     * Mobile network code.
     */
    mnc: string;
}

export interface WirelessControllerHotspot20AnqpNaiRealmNaiList {
    /**
     * EAP Methods. The structure of `eapMethod` block is documented below.
     */
    eapMethods?: outputs.WirelessControllerHotspot20AnqpNaiRealmNaiListEapMethod[];
    /**
     * Enable/disable format in accordance with IETF RFC 4282. Valid values: `disable`, `enable`.
     */
    encoding: string;
    /**
     * Configure NAI realms (delimited by a semi-colon character).
     */
    naiRealm: string;
    /**
     * NAI realm name.
     */
    name: string;
}

export interface WirelessControllerHotspot20AnqpNaiRealmNaiListEapMethod {
    /**
     * EAP auth param. The structure of `authParam` block is documented below.
     */
    authParams?: outputs.WirelessControllerHotspot20AnqpNaiRealmNaiListEapMethodAuthParam[];
    /**
     * Param index.
     */
    index: number;
    /**
     * EAP method type. Valid values: `eap-identity`, `eap-md5`, `eap-tls`, `eap-ttls`, `eap-peap`, `eap-sim`, `eap-aka`, `eap-aka-prime`.
     */
    method: string;
}

export interface WirelessControllerHotspot20AnqpNaiRealmNaiListEapMethodAuthParam {
    /**
     * ID of authentication parameter. Valid values: `non-eap-inner-auth`, `inner-auth-eap`, `credential`, `tunneled-credential`.
     */
    id: string;
    /**
     * Param index.
     */
    index: number;
    /**
     * Value of authentication parameter. Valid values: `eap-identity`, `eap-md5`, `eap-tls`, `eap-ttls`, `eap-peap`, `eap-sim`, `eap-aka`, `eap-aka-prime`, `non-eap-pap`, `non-eap-chap`, `non-eap-mschap`, `non-eap-mschapv2`, `cred-sim`, `cred-usim`, `cred-nfc`, `cred-hardware-token`, `cred-softoken`, `cred-certificate`, `cred-user-pwd`, `cred-none`, `cred-vendor-specific`, `tun-cred-sim`, `tun-cred-usim`, `tun-cred-nfc`, `tun-cred-hardware-token`, `tun-cred-softoken`, `tun-cred-certificate`, `tun-cred-user-pwd`, `tun-cred-anonymous`, `tun-cred-vendor-specific`.
     */
    val: string;
}

export interface WirelessControllerHotspot20AnqpRoamingConsortiumOiList {
    /**
     * Comment.
     */
    comment: string;
    /**
     * OI index.
     */
    index: number;
    /**
     * Organization identifier.
     */
    oi: string;
}

export interface WirelessControllerHotspot20AnqpVenueNameValueList {
    /**
     * Value index.
     */
    index: number;
    /**
     * Language code.
     */
    lang: string;
    /**
     * Venue name value.
     */
    value: string;
}

export interface WirelessControllerHotspot20AnqpVenueUrlValueList {
    /**
     * URL index.
     */
    index: number;
    /**
     * Venue number.
     */
    number: number;
    /**
     * Venue URL value.
     */
    value: string;
}

export interface WirelessControllerHotspot20H2QpAdviceOfChargeAocList {
    /**
     * NAI realm list name.
     */
    naiRealm: string;
    /**
     * NAI realm encoding.
     */
    naiRealmEncoding: string;
    /**
     * Plan name.
     */
    name: string;
    /**
     * Plan info. The structure of `planInfo` block is documented below.
     */
    planInfos?: outputs.WirelessControllerHotspot20H2QpAdviceOfChargeAocListPlanInfo[];
    /**
     * Usage charge type. Valid values: `time-based`, `volume-based`, `time-and-volume-based`, `unlimited`.
     */
    type: string;
}

export interface WirelessControllerHotspot20H2QpAdviceOfChargeAocListPlanInfo {
    /**
     * Currency code.
     */
    currency: string;
    /**
     * Info file.
     */
    infoFile: string;
    /**
     * Languague code.
     */
    lang: string;
    /**
     * Plan name.
     */
    name: string;
}

export interface WirelessControllerHotspot20H2QpOperatorNameValueList {
    /**
     * Value index.
     */
    index: number;
    /**
     * Language code.
     */
    lang: string;
    /**
     * Friendly name value.
     */
    value: string;
}

export interface WirelessControllerHotspot20H2QpOsuProviderFriendlyName {
    /**
     * OSU provider friendly name.
     */
    friendlyName: string;
    /**
     * OSU provider friendly name index.
     */
    index: number;
    /**
     * Language code.
     */
    lang: string;
}

export interface WirelessControllerHotspot20H2QpOsuProviderNaiNaiList {
    /**
     * OSU NAI ID.
     */
    name: string;
    /**
     * OSU NAI.
     */
    osuNai: string;
}

export interface WirelessControllerHotspot20H2QpOsuProviderServiceDescription {
    /**
     * Language code.
     */
    lang: string;
    /**
     * Service description.
     */
    serviceDescription: string;
    /**
     * OSU service ID.
     */
    serviceId: number;
}

export interface WirelessControllerHotspot20HsProfileOsuProvider {
    /**
     * OSU provider name.
     */
    name: string;
}

export interface WirelessControllerHotspot20IconIconList {
    /**
     * Icon file.
     */
    file: string;
    /**
     * Icon height.
     */
    height: number;
    /**
     * Language code.
     */
    lang: string;
    /**
     * Icon name.
     */
    name: string;
    /**
     * Icon type. Valid values: `bmp`, `gif`, `jpeg`, `png`, `tiff`.
     */
    type: string;
    /**
     * Icon width.
     */
    width: number;
}

export interface WirelessControllerHotspot20QosMapDscpExcept {
    /**
     * DSCP value.
     */
    dscp: number;
    /**
     * DSCP range index.
     */
    index: number;
    /**
     * User priority.
     */
    up: number;
}

export interface WirelessControllerHotspot20QosMapDscpRange {
    /**
     * DSCP high value.
     */
    high: number;
    /**
     * DSCP range index.
     */
    index: number;
    /**
     * DSCP low value.
     */
    low: number;
    /**
     * User priority.
     */
    up: number;
}

export interface WirelessControllerInterControllerInterControllerPeer {
    /**
     * ID.
     */
    id: number;
    /**
     * Peer wireless controller's IP address.
     */
    peerIp: string;
    /**
     * Port used by the wireless controller's for inter-controller communications (1024 - 49150, default = 5246).
     */
    peerPort: number;
    /**
     * Peer wireless controller's priority (primary or secondary, default = primary). Valid values: `primary`, `secondary`.
     */
    peerPriority: string;
}

export interface WirelessControllerMpskProfileMpskGroup {
    /**
     * List of multiple PSK entries. The structure of `mpskKey` block is documented below.
     */
    mpskKeys?: outputs.WirelessControllerMpskProfileMpskGroupMpskKey[];
    /**
     * Schedule name.
     */
    name: string;
    /**
     * Optional VLAN ID.
     */
    vlanId: number;
    /**
     * MPSK group VLAN options. Valid values: `no-vlan`, `fixed-vlan`.
     */
    vlanType: string;
}

export interface WirelessControllerMpskProfileMpskGroupMpskKey {
    /**
     * Comment.
     */
    comment?: string;
    /**
     * MPSK client limit type options. Valid values: `default`, `unlimited`, `specified`.
     */
    concurrentClientLimitType: string;
    /**
     * Number of clients that can connect using this pre-shared key (1 - 65535, default is 256).
     */
    concurrentClients: number;
    /**
     * MAC address.
     */
    mac: string;
    /**
     * Firewall schedule for MPSK passphrase. The passphrase will be effective only when at least one schedule is valid. The structure of `mpskSchedules` block is documented below.
     */
    mpskSchedules?: outputs.WirelessControllerMpskProfileMpskGroupMpskKeyMpskSchedule[];
    /**
     * Schedule name.
     */
    name: string;
    /**
     * WPA Pre-shared key.
     */
    passphrase?: string;
}

export interface WirelessControllerMpskProfileMpskGroupMpskKeyMpskSchedule {
    /**
     * Schedule name.
     */
    name: string;
}

export interface WirelessControllerQosProfileDscpWmmBe {
    /**
     * DSCP WMM mapping numbers (0 - 63).
     */
    id: number;
}

export interface WirelessControllerQosProfileDscpWmmBk {
    /**
     * DSCP WMM mapping numbers (0 - 63).
     */
    id: number;
}

export interface WirelessControllerQosProfileDscpWmmVi {
    /**
     * DSCP WMM mapping numbers (0 - 63).
     */
    id: number;
}

export interface WirelessControllerQosProfileDscpWmmVo {
    /**
     * DSCP WMM mapping numbers (0 - 63).
     */
    id: number;
}

export interface WirelessControllerSettingDarrpOptimizeSchedule {
    /**
     * Schedule name.
     */
    name: string;
}

export interface WirelessControllerSettingOffendingSsid {
    /**
     * Actions taken for detected offending SSID. Valid values: `log`, `suppress`.
     */
    action: string;
    /**
     * ID.
     */
    id: number;
    /**
     * Define offending SSID pattern (case insensitive), eg: word, word*, *word, wo*rd.
     */
    ssidPattern: string;
}

export interface WirelessControllerSnmpCommunity {
    /**
     * Configure IPv4 SNMP managers (hosts). The structure of `hosts` block is documented below.
     */
    hosts?: outputs.WirelessControllerSnmpCommunityHost[];
    /**
     * Host entry ID.
     */
    id: number;
    /**
     * SNMP User Name
     */
    name: string;
    /**
     * Enable/disable SNMP v1 queries. Valid values: `enable`, `disable`.
     */
    queryV1Status: string;
    /**
     * Enable/disable SNMP v2c queries. Valid values: `enable`, `disable`.
     */
    queryV2cStatus: string;
    /**
     * SNMP User Enable Valid values: `enable`, `disable`.
     */
    status: string;
    /**
     * Enable/disable SNMP v1 traps. Valid values: `enable`, `disable`.
     */
    trapV1Status: string;
    /**
     * Enable/disable SNMP v2c traps. Valid values: `enable`, `disable`.
     */
    trapV2cStatus: string;
}

export interface WirelessControllerSnmpCommunityHost {
    /**
     * Host entry ID.
     */
    id: number;
    /**
     * IPv4 address of the SNMP manager (host).
     */
    ip: string;
}

export interface WirelessControllerSnmpUser {
    /**
     * Authentication protocol. Valid values: `md5`, `sha`.
     */
    authProto: string;
    /**
     * Password for authentication protocol.
     */
    authPwd?: string;
    /**
     * SNMP User Name
     */
    name: string;
    /**
     * Configure SNMP User Notify Hosts.
     */
    notifyHosts: string;
    /**
     * Privacy (encryption) protocol. Valid values: `aes`, `des`, `aes256`, `aes256cisco`.
     */
    privProto: string;
    /**
     * Password for privacy (encryption) protocol.
     */
    privPwd?: string;
    /**
     * Enable/disable SNMP queries for this user. Valid values: `enable`, `disable`.
     */
    queries: string;
    /**
     * Security level for message authentication and encryption. Valid values: `no-auth-no-priv`, `auth-no-priv`, `auth-priv`.
     */
    securityLevel: string;
    /**
     * SNMP User Enable Valid values: `enable`, `disable`.
     */
    status: string;
    /**
     * Enable/disable traps for this SNMP user. Valid values: `enable`, `disable`.
     */
    trapStatus: string;
}

export interface WirelessControllerTimersDarrpTime {
    /**
     * Time.
     */
    time: string;
}

export interface WirelessControllerVapGroupVap {
    /**
     * vap name
     */
    name: string;
}

export interface WirelessControllerVapMacFilterList {
    /**
     * ID.
     */
    id: number;
    /**
     * MAC address.
     */
    mac: string;
    /**
     * Deny or allow the client with this MAC address. Valid values: `allow`, `deny`.
     */
    macFilterPolicy: string;
}

export interface WirelessControllerVapMpskKey {
    /**
     * Comment.
     */
    comment?: string;
    /**
     * Number of clients that can connect using this pre-shared key.
     */
    concurrentClients: string;
    /**
     * Pre-shared key name.
     */
    keyName: string;
    /**
     * Firewall schedule for MPSK passphrase. The passphrase will be effective only when at least one schedule is valid. The structure of `mpskSchedules` block is documented below.
     */
    mpskSchedules?: outputs.WirelessControllerVapMpskKeyMpskSchedule[];
    /**
     * WPA Pre-shared key.
     */
    passphrase?: string;
}

export interface WirelessControllerVapMpskKeyMpskSchedule {
    /**
     * VLAN name.
     */
    name: string;
}

export interface WirelessControllerVapPortalMessageOverrides {
    /**
     * Override auth-disclaimer-page message with message from portal-message-overrides group.
     */
    authDisclaimerPage: string;
    /**
     * Override auth-login-failed-page message with message from portal-message-overrides group.
     */
    authLoginFailedPage: string;
    /**
     * Override auth-login-page message with message from portal-message-overrides group.
     */
    authLoginPage: string;
    /**
     * Override auth-reject-page message with message from portal-message-overrides group.
     */
    authRejectPage: string;
}

export interface WirelessControllerVapRadiusMacAuthUsergroup {
    /**
     * VLAN name.
     */
    name: string;
}

export interface WirelessControllerVapSelectedUsergroup {
    /**
     * VLAN name.
     */
    name: string;
}

export interface WirelessControllerVapUsergroup {
    /**
     * VLAN name.
     */
    name: string;
}

export interface WirelessControllerVapVlanName {
    /**
     * VLAN name.
     */
    name: string;
    /**
     * VLAN ID.
     */
    vlanId: number;
}

export interface WirelessControllerVapVlanPool {
    /**
     * ID.
     */
    id: number;
    /**
     * WTP group name.
     */
    wtpGroup: string;
}

export interface WirelessControllerWidsProfileApBgscanDisableSchedule {
    /**
     * Schedule name.
     */
    name: string;
}

export interface WirelessControllerWtpGroupWtp {
    /**
     * WTP ID.
     */
    wtpId: string;
}

export interface WirelessControllerWtpLan {
    /**
     * LAN port 1 mode. Valid values: `offline`, `nat-to-wan`, `bridge-to-wan`, `bridge-to-ssid`.
     */
    port1Mode: string;
    /**
     * Bridge LAN port 1 to SSID.
     */
    port1Ssid: string;
    /**
     * LAN port 2 mode. Valid values: `offline`, `nat-to-wan`, `bridge-to-wan`, `bridge-to-ssid`.
     */
    port2Mode: string;
    /**
     * Bridge LAN port 2 to SSID.
     */
    port2Ssid: string;
    /**
     * LAN port 3 mode. Valid values: `offline`, `nat-to-wan`, `bridge-to-wan`, `bridge-to-ssid`.
     */
    port3Mode: string;
    /**
     * Bridge LAN port 3 to SSID.
     */
    port3Ssid: string;
    /**
     * LAN port 4 mode. Valid values: `offline`, `nat-to-wan`, `bridge-to-wan`, `bridge-to-ssid`.
     */
    port4Mode: string;
    /**
     * Bridge LAN port 4 to SSID.
     */
    port4Ssid: string;
    /**
     * LAN port 5 mode. Valid values: `offline`, `nat-to-wan`, `bridge-to-wan`, `bridge-to-ssid`.
     */
    port5Mode: string;
    /**
     * Bridge LAN port 5 to SSID.
     */
    port5Ssid: string;
    /**
     * LAN port 6 mode. Valid values: `offline`, `nat-to-wan`, `bridge-to-wan`, `bridge-to-ssid`.
     */
    port6Mode: string;
    /**
     * Bridge LAN port 6 to SSID.
     */
    port6Ssid: string;
    /**
     * LAN port 7 mode. Valid values: `offline`, `nat-to-wan`, `bridge-to-wan`, `bridge-to-ssid`.
     */
    port7Mode: string;
    /**
     * Bridge LAN port 7 to SSID.
     */
    port7Ssid: string;
    /**
     * LAN port 8 mode. Valid values: `offline`, `nat-to-wan`, `bridge-to-wan`, `bridge-to-ssid`.
     */
    port8Mode: string;
    /**
     * Bridge LAN port 8 to SSID.
     */
    port8Ssid: string;
    /**
     * ESL port mode. Valid values: `offline`, `nat-to-wan`, `bridge-to-wan`, `bridge-to-ssid`.
     */
    portEslMode: string;
    /**
     * Bridge ESL port to SSID.
     */
    portEslSsid: string;
    /**
     * LAN port mode. Valid values: `offline`, `nat-to-wan`, `bridge-to-wan`, `bridge-to-ssid`.
     */
    portMode: string;
    /**
     * Bridge LAN port to SSID.
     */
    portSsid: string;
}

export interface WirelessControllerWtpProfileDenyMacList {
    /**
     * ID.
     */
    id: number;
    /**
     * A WiFi device with this MAC address is denied access to this WTP, FortiAP or AP.
     */
    mac: string;
}

export interface WirelessControllerWtpProfileEslSesDongle {
    /**
     * ESL SES-imagotag APC address type (default = fqdn). Valid values: `fqdn`, `ip`.
     */
    apcAddrType: string;
    /**
     * FQDN of ESL SES-imagotag Access Point Controller (APC).
     */
    apcFqdn: string;
    /**
     * IP address of ESL SES-imagotag Access Point Controller (APC).
     */
    apcIp: string;
    /**
     * Port of ESL SES-imagotag Access Point Controller (APC).
     */
    apcPort: number;
    /**
     * ESL SES-imagotag dongle coexistence level (default = none). Valid values: `none`.
     */
    coexLevel: string;
    /**
     * Compliance levels for the ESL solution integration (default = compliance-level-2). Valid values: `compliance-level-2`.
     */
    complianceLevel: string;
    /**
     * ESL SES-imagotag dongle channel (default = 127). Valid values: `-1`, `0`, `1`, `2`, `3`, `4`, `5`, `6`, `7`, `8`, `9`, `10`, `127`.
     */
    eslChannel: string;
    /**
     * ESL SES-imagotag dongle output power (default = A). Valid values: `a`, `b`, `c`, `d`, `e`, `f`, `g`, `h`.
     */
    outputPower: string;
    /**
     * Enable/disable ESL SES-imagotag Serial Communication Daemon (SCD) (default = disable). Valid values: `enable`, `disable`.
     */
    scdEnable: string;
    /**
     * Enable/disable TLS Certificate verification. (default = enable). Valid values: `enable`, `disable`.
     */
    tlsCertVerification: string;
    /**
     * Enable/disable TLS Certificate verification. (default = disable). Valid values: `enable`, `disable`.
     */
    tlsFqdnVerification: string;
}

export interface WirelessControllerWtpProfileLan {
    /**
     * LAN port 1 mode. Valid values: `offline`, `nat-to-wan`, `bridge-to-wan`, `bridge-to-ssid`.
     */
    port1Mode: string;
    /**
     * Bridge LAN port 1 to SSID.
     */
    port1Ssid: string;
    /**
     * LAN port 2 mode. Valid values: `offline`, `nat-to-wan`, `bridge-to-wan`, `bridge-to-ssid`.
     */
    port2Mode: string;
    /**
     * Bridge LAN port 2 to SSID.
     */
    port2Ssid: string;
    /**
     * LAN port 3 mode. Valid values: `offline`, `nat-to-wan`, `bridge-to-wan`, `bridge-to-ssid`.
     */
    port3Mode: string;
    /**
     * Bridge LAN port 3 to SSID.
     */
    port3Ssid: string;
    /**
     * LAN port 4 mode. Valid values: `offline`, `nat-to-wan`, `bridge-to-wan`, `bridge-to-ssid`.
     */
    port4Mode: string;
    /**
     * Bridge LAN port 4 to SSID.
     */
    port4Ssid: string;
    /**
     * LAN port 5 mode. Valid values: `offline`, `nat-to-wan`, `bridge-to-wan`, `bridge-to-ssid`.
     */
    port5Mode: string;
    /**
     * Bridge LAN port 5 to SSID.
     */
    port5Ssid: string;
    /**
     * LAN port 6 mode. Valid values: `offline`, `nat-to-wan`, `bridge-to-wan`, `bridge-to-ssid`.
     */
    port6Mode: string;
    /**
     * Bridge LAN port 6 to SSID.
     */
    port6Ssid: string;
    /**
     * LAN port 7 mode. Valid values: `offline`, `nat-to-wan`, `bridge-to-wan`, `bridge-to-ssid`.
     */
    port7Mode: string;
    /**
     * Bridge LAN port 7 to SSID.
     */
    port7Ssid: string;
    /**
     * LAN port 8 mode. Valid values: `offline`, `nat-to-wan`, `bridge-to-wan`, `bridge-to-ssid`.
     */
    port8Mode: string;
    /**
     * Bridge LAN port 8 to SSID.
     */
    port8Ssid: string;
    /**
     * ESL port mode. Valid values: `offline`, `nat-to-wan`, `bridge-to-wan`, `bridge-to-ssid`.
     */
    portEslMode: string;
    /**
     * Bridge ESL port to SSID.
     */
    portEslSsid: string;
    /**
     * LAN port mode. Valid values: `offline`, `nat-to-wan`, `bridge-to-wan`, `bridge-to-ssid`.
     */
    portMode: string;
    /**
     * Bridge LAN port to SSID.
     */
    portSsid: string;
}

export interface WirelessControllerWtpProfileLbs {
    /**
     * Enable/disable AeroScout Real Time Location Service (RTLS) support. Valid values: `enable`, `disable`.
     */
    aeroscout: string;
    /**
     * Use BSSID or board MAC address as AP MAC address in the Aeroscout AP message. Valid values: `bssid`, `board-mac`.
     */
    aeroscoutApMac: string;
    /**
     * Enable/disable MU compounded report. Valid values: `enable`, `disable`.
     */
    aeroscoutMmuReport: string;
    /**
     * Enable/disable AeroScout support. Valid values: `enable`, `disable`.
     */
    aeroscoutMu: string;
    /**
     * AeroScout Mobile Unit (MU) mode dilution factor (default = 20).
     */
    aeroscoutMuFactor: number;
    /**
     * AeroScout MU mode timeout (0 - 65535 sec, default = 5).
     */
    aeroscoutMuTimeout: number;
    /**
     * IP address of AeroScout server.
     */
    aeroscoutServerIp: string;
    /**
     * AeroScout server UDP listening port.
     */
    aeroscoutServerPort: number;
    /**
     * Enable/disable Ekahua blink mode (also called AiRISTA Flow Blink Mode) to find the location of devices connected to a wireless LAN (default = disable). Valid values: `enable`, `disable`.
     */
    ekahauBlinkMode: string;
    /**
     * WiFi frame MAC address or WiFi Tag.
     */
    ekahauTag: string;
    /**
     * IP address of Ekahua RTLS Controller (ERC).
     */
    ercServerIp: string;
    /**
     * Ekahua RTLS Controller (ERC) UDP listening port.
     */
    ercServerPort: number;
    /**
     * Enable/disable FortiPresence to monitor the location and activity of WiFi clients even if they don't connect to this WiFi network (default = disable). Valid values: `foreign`, `both`, `disable`.
     */
    fortipresence: string;
    /**
     * Enable/disable FortiPresence finding and reporting BLE devices. Valid values: `enable`, `disable`.
     */
    fortipresenceBle: string;
    /**
     * FortiPresence report transmit frequency (5 - 65535 sec, default = 30).
     */
    fortipresenceFrequency: number;
    /**
     * FortiPresence server UDP listening port (default = 3000).
     */
    fortipresencePort: number;
    /**
     * FortiPresence project name (max. 16 characters, default = fortipresence).
     */
    fortipresenceProject: string;
    /**
     * Enable/disable FortiPresence finding and reporting rogue APs. Valid values: `enable`, `disable`.
     */
    fortipresenceRogue: string;
    /**
     * FortiPresence secret password (max. 16 characters).
     */
    fortipresenceSecret?: string;
    /**
     * FortiPresence server IP address.
     */
    fortipresenceServer: string;
    /**
     * FortiPresence server address type (default = ipv4). Valid values: `ipv4`, `fqdn`.
     */
    fortipresenceServerAddrType: string;
    /**
     * FQDN of FortiPresence server.
     */
    fortipresenceServerFqdn: string;
    /**
     * Enable/disable FortiPresence finding and reporting unassociated stations. Valid values: `enable`, `disable`.
     */
    fortipresenceUnassoc: string;
    /**
     * Enable/disable client station locating services for all clients, whether associated or not (default = disable). Valid values: `enable`, `disable`.
     */
    stationLocate: string;
}

export interface WirelessControllerWtpProfileLedSchedule {
    /**
     * Virtual Access Point (VAP) name.
     */
    name: string;
}

export interface WirelessControllerWtpProfilePlatform {
    /**
     * Enable/disable use of one radio for dedicated dual-band scanning to detect RF characterization and wireless threat management. Valid values: `enable`, `disable`.
     */
    ddscan: string;
    /**
     * Mode of radio 3. Radio 3 can be disabled, configured as an access point, a rogue AP monitor, or a sniffer.
     */
    mode: string;
    /**
     * WTP, FortiAP or AP platform type. There are built-in WTP profiles for all supported FortiAP models. You can select a built-in profile and customize it or create a new profile.
     */
    type: string;
}

export interface WirelessControllerWtpProfileRadio1 {
    /**
     * Enable/disable airtime fairness (default = disable). Valid values: `enable`, `disable`.
     */
    airtimeFairness: string;
    /**
     * Enable/disable 802.11n AMSDU support. AMSDU can improve performance if supported by your WiFi clients (default = enable). Valid values: `enable`, `disable`.
     */
    amsdu: string;
    /**
     * Enable/disable AP handoff of clients to other APs (default = disable). Valid values: `enable`, `disable`.
     */
    apHandoff: string;
    /**
     * MAC address to monitor.
     */
    apSnifferAddr: string;
    /**
     * Sniffer buffer size (1 - 32 MB, default = 16).
     */
    apSnifferBufsize: number;
    /**
     * Channel on which to operate the sniffer (default = 6).
     */
    apSnifferChan: number;
    /**
     * Enable/disable sniffer on WiFi control frame (default = enable). Valid values: `enable`, `disable`.
     */
    apSnifferCtl: string;
    /**
     * Enable/disable sniffer on WiFi data frame (default = enable). Valid values: `enable`, `disable`.
     */
    apSnifferData: string;
    /**
     * Enable/disable sniffer on WiFi management Beacon frames (default = enable). Valid values: `enable`, `disable`.
     */
    apSnifferMgmtBeacon: string;
    /**
     * Enable/disable sniffer on WiFi management other frames  (default = enable). Valid values: `enable`, `disable`.
     */
    apSnifferMgmtOther: string;
    /**
     * Enable/disable sniffer on WiFi management probe frames (default = enable). Valid values: `enable`, `disable`.
     */
    apSnifferMgmtProbe: string;
    /**
     * Distributed Automatic Radio Resource Provisioning (DARRP) profile name to assign to the radio.
     */
    arrpProfile: string;
    /**
     * The upper bound of automatic transmit power adjustment in dBm (the actual range of transmit power depends on the AP platform type).
     */
    autoPowerHigh: number;
    /**
     * Enable/disable automatic power-level adjustment to prevent co-channel interference (default = enable). Valid values: `enable`, `disable`.
     */
    autoPowerLevel: string;
    /**
     * The lower bound of automatic transmit power adjustment in dBm (the actual range of transmit power depends on the AP platform type).
     */
    autoPowerLow: number;
    /**
     * The target of automatic transmit power adjustment in dBm. (-95 to -20, default = -70).
     */
    autoPowerTarget: string;
    /**
     * WiFi band that Radio 3 operates on.
     */
    band: string;
    /**
     * WiFi 5G band type. Valid values: `5g-full`, `5g-high`, `5g-low`.
     */
    band5gType: string;
    /**
     * Enable/disable WiFi multimedia (WMM) bandwidth admission control to optimize WiFi bandwidth use. A request to join the wireless network is only allowed if the access point has enough bandwidth to support it. Valid values: `enable`, `disable`.
     */
    bandwidthAdmissionControl: string;
    /**
     * Maximum bandwidth capacity allowed (1 - 600000 Kbps, default = 2000).
     */
    bandwidthCapacity: number;
    /**
     * Beacon interval. The time between beacon frames in msec (the actual range of beacon interval depends on the AP platform type, default = 100).
     */
    beaconInterval: number;
    /**
     * BSS color value for this 11ax radio (0 - 63, 0 means disable. default = 0).
     */
    bssColor: number;
    /**
     * BSS color mode for this 11ax radio (default = auto). Valid values: `auto`, `static`.
     */
    bssColorMode: string;
    /**
     * Enable/disable WiFi multimedia (WMM) call admission control to optimize WiFi bandwidth use for VoIP calls. New VoIP calls are only accepted if there is enough bandwidth available to support them. Valid values: `enable`, `disable`.
     */
    callAdmissionControl: string;
    /**
     * Maximum number of Voice over WLAN (VoWLAN) phones supported by the radio (0 - 60, default = 10).
     */
    callCapacity: number;
    /**
     * Channel bandwidth: 160,80, 40, or 20MHz. Channels may use both 20 and 40 by enabling coexistence. Valid values: `160MHz`, `80MHz`, `40MHz`, `20MHz`.
     */
    channelBonding: string;
    /**
     * Enable/disable measuring channel utilization. Valid values: `enable`, `disable`.
     */
    channelUtilization: string;
    /**
     * Selected list of wireless radio channels. The structure of `channel` block is documented below.
     */
    channels?: outputs.WirelessControllerWtpProfileRadio1Channel[];
    /**
     * Enable/disable allowing both HT20 and HT40 on the same radio (default = enable). Valid values: `enable`, `disable`.
     */
    coexistence: string;
    /**
     * Enable/disable Distributed Automatic Radio Resource Provisioning (DARRP) to make sure the radio is always using the most optimal channel (default = disable). Valid values: `enable`, `disable`.
     */
    darrp: string;
    /**
     * Enable/disable dynamic radio mode assignment (DRMA) (default = disable). Valid values: `disable`, `enable`.
     */
    drma: string;
    /**
     * Network Coverage Factor (NCF) percentage required to consider a radio as redundant (default = low). Valid values: `low`, `medium`, `high`.
     */
    drmaSensitivity: string;
    /**
     * Delivery Traffic Indication Map (DTIM) period (1 - 255, default = 1). Set higher to save battery life of WiFi client in power-save mode.
     */
    dtim: number;
    /**
     * Maximum packet size that can be sent without fragmentation (800 - 2346 bytes, default = 2346).
     */
    fragThreshold: number;
    /**
     * Enable/disable frequency handoff of clients to other channels (default = disable). Valid values: `enable`, `disable`.
     */
    frequencyHandoff: string;
    /**
     * Iperf test protocol (default = "UDP"). Valid values: `udp`, `tcp`.
     */
    iperfProtocol: string;
    /**
     * Iperf service port number.
     */
    iperfServerPort: number;
    /**
     * Maximum number of stations (STAs) or WiFi clients supported by the radio. Range depends on the hardware.
     */
    maxClients: number;
    /**
     * Maximum expected distance between the AP and clients (0 - 54000 m, default = 0).
     */
    maxDistance: number;
    /**
     * Mode of radio 3. Radio 3 can be disabled, configured as an access point, a rogue AP monitor, or a sniffer.
     */
    mode: string;
    /**
     * Radio power level as a percentage of the maximum transmit power (0 - 100, default = 100).
     */
    powerLevel: number;
    /**
     * Set radio effective isotropic radiated power (EIRP) in dBm or by a percentage of the maximum EIRP (default = percentage). This power takes into account both radio transmit power and antenna gain. Higher power level settings may be constrained by local regulatory requirements and AP capabilities. Valid values: `dBm`, `percentage`.
     */
    powerMode: string;
    /**
     * Radio EIRP power in dBm (1 - 33, default = 27).
     */
    powerValue: number;
    /**
     * Enable client power-saving features such as TIM, AC VO, and OBSS etc. Valid values: `tim`, `ac-vo`, `no-obss-scan`, `no-11b-rate`, `client-rate-follow`.
     */
    powersaveOptimize: string;
    /**
     * Enable/disable 802.11g protection modes to support backwards compatibility with older clients (rtscts, ctsonly, disable). Valid values: `rtscts`, `ctsonly`, `disable`.
     */
    protectionMode: string;
    /**
     * radio-id
     */
    radioId: number;
    /**
     * Maximum packet size for RTS transmissions, specifying the maximum size of a data packet before RTS/CTS (256 - 2346 bytes, default = 2346).
     */
    rtsThreshold: number;
    /**
     * BSSID for WiFi network.
     */
    samBssid: string;
    /**
     * Enable/disable Captive Portal Authentication (default = disable). Valid values: `enable`, `disable`.
     */
    samCaptivePortal: string;
    /**
     * Failure identification on the page after an incorrect login.
     */
    samCwpFailureString: string;
    /**
     * Identification string from the captive portal login form.
     */
    samCwpMatchString: string;
    /**
     * Password for captive portal authentication.
     */
    samCwpPassword?: string;
    /**
     * Success identification on the page after a successful login.
     */
    samCwpSuccessString: string;
    /**
     * Website the client is trying to access.
     */
    samCwpTestUrl: string;
    /**
     * Username for captive portal authentication.
     */
    samCwpUsername: string;
    /**
     * Passphrase for WiFi network connection.
     */
    samPassword?: string;
    /**
     * SAM report interval (sec), 0 for a one-time report.
     */
    samReportIntv: number;
    /**
     * Select WiFi network security type (default = "wpa-personal"). Valid values: `open`, `wpa-personal`, `wpa-enterprise`.
     */
    samSecurityType: string;
    /**
     * SAM test server domain name.
     */
    samServerFqdn: string;
    /**
     * SAM test server IP address.
     */
    samServerIp: string;
    /**
     * Select SAM server type (default = "IP"). Valid values: `ip`, `fqdn`.
     */
    samServerType: string;
    /**
     * SSID for WiFi network.
     */
    samSsid: string;
    /**
     * Select SAM test type (default = "PING"). Valid values: `ping`, `iperf`.
     */
    samTest: string;
    /**
     * Username for WiFi network connection.
     */
    samUsername: string;
    /**
     * Use either the short guard interval (Short GI) of 400 ns or the long guard interval (Long GI) of 800 ns. Valid values: `enable`, `disable`.
     */
    shortGuardInterval: string;
    /**
     * Enable/disable spectrum analysis to find interference that would negatively impact wireless performance.
     */
    spectrumAnalysis: string;
    /**
     * Packet transmission optimization options including power saving, aggregation limiting, retry limiting, etc. All are enabled by default. Valid values: `disable`, `power-save`, `aggr-limit`, `retry-limit`, `send-bar`.
     */
    transmitOptimize: string;
    /**
     * Enable/disable the automatic inheritance of all Virtual Access Points (VAPs) (default = enable).
     */
    vapAll: string;
    /**
     * Manually selected list of Virtual Access Points (VAPs). The structure of `vaps` block is documented below.
     */
    vaps?: outputs.WirelessControllerWtpProfileRadio1Vap[];
    /**
     * Wireless Intrusion Detection System (WIDS) profile name to assign to the radio.
     */
    widsProfile: string;
    /**
     * Enable/disable zero wait DFS on radio (default = enable). Valid values: `enable`, `disable`.
     */
    zeroWaitDfs: string;
}

export interface WirelessControllerWtpProfileRadio1Channel {
    /**
     * Channel number.
     */
    chan: string;
}

export interface WirelessControllerWtpProfileRadio1Vap {
    /**
     * Virtual Access Point (VAP) name.
     */
    name: string;
}

export interface WirelessControllerWtpProfileRadio2 {
    /**
     * Enable/disable airtime fairness (default = disable). Valid values: `enable`, `disable`.
     */
    airtimeFairness: string;
    /**
     * Enable/disable 802.11n AMSDU support. AMSDU can improve performance if supported by your WiFi clients (default = enable). Valid values: `enable`, `disable`.
     */
    amsdu: string;
    /**
     * Enable/disable AP handoff of clients to other APs (default = disable). Valid values: `enable`, `disable`.
     */
    apHandoff: string;
    /**
     * MAC address to monitor.
     */
    apSnifferAddr: string;
    /**
     * Sniffer buffer size (1 - 32 MB, default = 16).
     */
    apSnifferBufsize: number;
    /**
     * Channel on which to operate the sniffer (default = 6).
     */
    apSnifferChan: number;
    /**
     * Enable/disable sniffer on WiFi control frame (default = enable). Valid values: `enable`, `disable`.
     */
    apSnifferCtl: string;
    /**
     * Enable/disable sniffer on WiFi data frame (default = enable). Valid values: `enable`, `disable`.
     */
    apSnifferData: string;
    /**
     * Enable/disable sniffer on WiFi management Beacon frames (default = enable). Valid values: `enable`, `disable`.
     */
    apSnifferMgmtBeacon: string;
    /**
     * Enable/disable sniffer on WiFi management other frames  (default = enable). Valid values: `enable`, `disable`.
     */
    apSnifferMgmtOther: string;
    /**
     * Enable/disable sniffer on WiFi management probe frames (default = enable). Valid values: `enable`, `disable`.
     */
    apSnifferMgmtProbe: string;
    /**
     * Distributed Automatic Radio Resource Provisioning (DARRP) profile name to assign to the radio.
     */
    arrpProfile: string;
    /**
     * The upper bound of automatic transmit power adjustment in dBm (the actual range of transmit power depends on the AP platform type).
     */
    autoPowerHigh: number;
    /**
     * Enable/disable automatic power-level adjustment to prevent co-channel interference (default = enable). Valid values: `enable`, `disable`.
     */
    autoPowerLevel: string;
    /**
     * The lower bound of automatic transmit power adjustment in dBm (the actual range of transmit power depends on the AP platform type).
     */
    autoPowerLow: number;
    /**
     * The target of automatic transmit power adjustment in dBm. (-95 to -20, default = -70).
     */
    autoPowerTarget: string;
    /**
     * WiFi band that Radio 3 operates on.
     */
    band: string;
    /**
     * WiFi 5G band type. Valid values: `5g-full`, `5g-high`, `5g-low`.
     */
    band5gType: string;
    /**
     * Enable/disable WiFi multimedia (WMM) bandwidth admission control to optimize WiFi bandwidth use. A request to join the wireless network is only allowed if the access point has enough bandwidth to support it. Valid values: `enable`, `disable`.
     */
    bandwidthAdmissionControl: string;
    /**
     * Maximum bandwidth capacity allowed (1 - 600000 Kbps, default = 2000).
     */
    bandwidthCapacity: number;
    /**
     * Beacon interval. The time between beacon frames in msec (the actual range of beacon interval depends on the AP platform type, default = 100).
     */
    beaconInterval: number;
    /**
     * BSS color value for this 11ax radio (0 - 63, 0 means disable. default = 0).
     */
    bssColor: number;
    /**
     * BSS color mode for this 11ax radio (default = auto). Valid values: `auto`, `static`.
     */
    bssColorMode: string;
    /**
     * Enable/disable WiFi multimedia (WMM) call admission control to optimize WiFi bandwidth use for VoIP calls. New VoIP calls are only accepted if there is enough bandwidth available to support them. Valid values: `enable`, `disable`.
     */
    callAdmissionControl: string;
    /**
     * Maximum number of Voice over WLAN (VoWLAN) phones supported by the radio (0 - 60, default = 10).
     */
    callCapacity: number;
    /**
     * Channel bandwidth: 160,80, 40, or 20MHz. Channels may use both 20 and 40 by enabling coexistence. Valid values: `160MHz`, `80MHz`, `40MHz`, `20MHz`.
     */
    channelBonding: string;
    /**
     * Enable/disable measuring channel utilization. Valid values: `enable`, `disable`.
     */
    channelUtilization: string;
    /**
     * Selected list of wireless radio channels. The structure of `channel` block is documented below.
     */
    channels?: outputs.WirelessControllerWtpProfileRadio2Channel[];
    /**
     * Enable/disable allowing both HT20 and HT40 on the same radio (default = enable). Valid values: `enable`, `disable`.
     */
    coexistence: string;
    /**
     * Enable/disable Distributed Automatic Radio Resource Provisioning (DARRP) to make sure the radio is always using the most optimal channel (default = disable). Valid values: `enable`, `disable`.
     */
    darrp: string;
    /**
     * Enable/disable dynamic radio mode assignment (DRMA) (default = disable). Valid values: `disable`, `enable`.
     */
    drma: string;
    /**
     * Network Coverage Factor (NCF) percentage required to consider a radio as redundant (default = low). Valid values: `low`, `medium`, `high`.
     */
    drmaSensitivity: string;
    /**
     * Delivery Traffic Indication Map (DTIM) period (1 - 255, default = 1). Set higher to save battery life of WiFi client in power-save mode.
     */
    dtim: number;
    /**
     * Maximum packet size that can be sent without fragmentation (800 - 2346 bytes, default = 2346).
     */
    fragThreshold: number;
    /**
     * Enable/disable frequency handoff of clients to other channels (default = disable). Valid values: `enable`, `disable`.
     */
    frequencyHandoff: string;
    /**
     * Iperf test protocol (default = "UDP"). Valid values: `udp`, `tcp`.
     */
    iperfProtocol: string;
    /**
     * Iperf service port number.
     */
    iperfServerPort: number;
    /**
     * Maximum number of stations (STAs) or WiFi clients supported by the radio. Range depends on the hardware.
     */
    maxClients: number;
    /**
     * Maximum expected distance between the AP and clients (0 - 54000 m, default = 0).
     */
    maxDistance: number;
    /**
     * Mode of radio 3. Radio 3 can be disabled, configured as an access point, a rogue AP monitor, or a sniffer.
     */
    mode: string;
    /**
     * Radio power level as a percentage of the maximum transmit power (0 - 100, default = 100).
     */
    powerLevel: number;
    /**
     * Set radio effective isotropic radiated power (EIRP) in dBm or by a percentage of the maximum EIRP (default = percentage). This power takes into account both radio transmit power and antenna gain. Higher power level settings may be constrained by local regulatory requirements and AP capabilities. Valid values: `dBm`, `percentage`.
     */
    powerMode: string;
    /**
     * Radio EIRP power in dBm (1 - 33, default = 27).
     */
    powerValue: number;
    /**
     * Enable client power-saving features such as TIM, AC VO, and OBSS etc. Valid values: `tim`, `ac-vo`, `no-obss-scan`, `no-11b-rate`, `client-rate-follow`.
     */
    powersaveOptimize: string;
    /**
     * Enable/disable 802.11g protection modes to support backwards compatibility with older clients (rtscts, ctsonly, disable). Valid values: `rtscts`, `ctsonly`, `disable`.
     */
    protectionMode: string;
    /**
     * radio-id
     */
    radioId: number;
    /**
     * Maximum packet size for RTS transmissions, specifying the maximum size of a data packet before RTS/CTS (256 - 2346 bytes, default = 2346).
     */
    rtsThreshold: number;
    /**
     * BSSID for WiFi network.
     */
    samBssid: string;
    /**
     * Enable/disable Captive Portal Authentication (default = disable). Valid values: `enable`, `disable`.
     */
    samCaptivePortal: string;
    /**
     * Failure identification on the page after an incorrect login.
     */
    samCwpFailureString: string;
    /**
     * Identification string from the captive portal login form.
     */
    samCwpMatchString: string;
    /**
     * Password for captive portal authentication.
     */
    samCwpPassword?: string;
    /**
     * Success identification on the page after a successful login.
     */
    samCwpSuccessString: string;
    /**
     * Website the client is trying to access.
     */
    samCwpTestUrl: string;
    /**
     * Username for captive portal authentication.
     */
    samCwpUsername: string;
    /**
     * Passphrase for WiFi network connection.
     */
    samPassword?: string;
    /**
     * SAM report interval (sec), 0 for a one-time report.
     */
    samReportIntv: number;
    /**
     * Select WiFi network security type (default = "wpa-personal"). Valid values: `open`, `wpa-personal`, `wpa-enterprise`.
     */
    samSecurityType: string;
    /**
     * SAM test server domain name.
     */
    samServerFqdn: string;
    /**
     * SAM test server IP address.
     */
    samServerIp: string;
    /**
     * Select SAM server type (default = "IP"). Valid values: `ip`, `fqdn`.
     */
    samServerType: string;
    /**
     * SSID for WiFi network.
     */
    samSsid: string;
    /**
     * Select SAM test type (default = "PING"). Valid values: `ping`, `iperf`.
     */
    samTest: string;
    /**
     * Username for WiFi network connection.
     */
    samUsername: string;
    /**
     * Use either the short guard interval (Short GI) of 400 ns or the long guard interval (Long GI) of 800 ns. Valid values: `enable`, `disable`.
     */
    shortGuardInterval: string;
    /**
     * Enable/disable spectrum analysis to find interference that would negatively impact wireless performance.
     */
    spectrumAnalysis: string;
    /**
     * Packet transmission optimization options including power saving, aggregation limiting, retry limiting, etc. All are enabled by default. Valid values: `disable`, `power-save`, `aggr-limit`, `retry-limit`, `send-bar`.
     */
    transmitOptimize: string;
    /**
     * Enable/disable the automatic inheritance of all Virtual Access Points (VAPs) (default = enable).
     */
    vapAll: string;
    /**
     * Manually selected list of Virtual Access Points (VAPs). The structure of `vaps` block is documented below.
     */
    vaps?: outputs.WirelessControllerWtpProfileRadio2Vap[];
    /**
     * Wireless Intrusion Detection System (WIDS) profile name to assign to the radio.
     */
    widsProfile: string;
    /**
     * Enable/disable zero wait DFS on radio (default = enable). Valid values: `enable`, `disable`.
     */
    zeroWaitDfs: string;
}

export interface WirelessControllerWtpProfileRadio2Channel {
    /**
     * Channel number.
     */
    chan: string;
}

export interface WirelessControllerWtpProfileRadio2Vap {
    /**
     * Virtual Access Point (VAP) name.
     */
    name: string;
}

export interface WirelessControllerWtpProfileRadio3 {
    /**
     * Enable/disable airtime fairness (default = disable). Valid values: `enable`, `disable`.
     */
    airtimeFairness: string;
    /**
     * Enable/disable 802.11n AMSDU support. AMSDU can improve performance if supported by your WiFi clients (default = enable). Valid values: `enable`, `disable`.
     */
    amsdu: string;
    /**
     * Enable/disable AP handoff of clients to other APs (default = disable). Valid values: `enable`, `disable`.
     */
    apHandoff: string;
    /**
     * MAC address to monitor.
     */
    apSnifferAddr: string;
    /**
     * Sniffer buffer size (1 - 32 MB, default = 16).
     */
    apSnifferBufsize: number;
    /**
     * Channel on which to operate the sniffer (default = 6).
     */
    apSnifferChan: number;
    /**
     * Enable/disable sniffer on WiFi control frame (default = enable). Valid values: `enable`, `disable`.
     */
    apSnifferCtl: string;
    /**
     * Enable/disable sniffer on WiFi data frame (default = enable). Valid values: `enable`, `disable`.
     */
    apSnifferData: string;
    /**
     * Enable/disable sniffer on WiFi management Beacon frames (default = enable). Valid values: `enable`, `disable`.
     */
    apSnifferMgmtBeacon: string;
    /**
     * Enable/disable sniffer on WiFi management other frames  (default = enable). Valid values: `enable`, `disable`.
     */
    apSnifferMgmtOther: string;
    /**
     * Enable/disable sniffer on WiFi management probe frames (default = enable). Valid values: `enable`, `disable`.
     */
    apSnifferMgmtProbe: string;
    /**
     * Distributed Automatic Radio Resource Provisioning (DARRP) profile name to assign to the radio.
     */
    arrpProfile: string;
    /**
     * The upper bound of automatic transmit power adjustment in dBm (the actual range of transmit power depends on the AP platform type).
     */
    autoPowerHigh: number;
    /**
     * Enable/disable automatic power-level adjustment to prevent co-channel interference (default = enable). Valid values: `enable`, `disable`.
     */
    autoPowerLevel: string;
    /**
     * The lower bound of automatic transmit power adjustment in dBm (the actual range of transmit power depends on the AP platform type).
     */
    autoPowerLow: number;
    /**
     * The target of automatic transmit power adjustment in dBm. (-95 to -20, default = -70).
     */
    autoPowerTarget: string;
    /**
     * WiFi band that Radio 3 operates on.
     */
    band: string;
    /**
     * WiFi 5G band type. Valid values: `5g-full`, `5g-high`, `5g-low`.
     */
    band5gType: string;
    /**
     * Enable/disable WiFi multimedia (WMM) bandwidth admission control to optimize WiFi bandwidth use. A request to join the wireless network is only allowed if the access point has enough bandwidth to support it. Valid values: `enable`, `disable`.
     */
    bandwidthAdmissionControl: string;
    /**
     * Maximum bandwidth capacity allowed (1 - 600000 Kbps, default = 2000).
     */
    bandwidthCapacity: number;
    /**
     * Beacon interval. The time between beacon frames in msec (the actual range of beacon interval depends on the AP platform type, default = 100).
     */
    beaconInterval: number;
    /**
     * BSS color value for this 11ax radio (0 - 63, 0 means disable. default = 0).
     */
    bssColor: number;
    /**
     * BSS color mode for this 11ax radio (default = auto). Valid values: `auto`, `static`.
     */
    bssColorMode: string;
    /**
     * Enable/disable WiFi multimedia (WMM) call admission control to optimize WiFi bandwidth use for VoIP calls. New VoIP calls are only accepted if there is enough bandwidth available to support them. Valid values: `enable`, `disable`.
     */
    callAdmissionControl: string;
    /**
     * Maximum number of Voice over WLAN (VoWLAN) phones supported by the radio (0 - 60, default = 10).
     */
    callCapacity: number;
    /**
     * Channel bandwidth: 160,80, 40, or 20MHz. Channels may use both 20 and 40 by enabling coexistence. Valid values: `160MHz`, `80MHz`, `40MHz`, `20MHz`.
     */
    channelBonding: string;
    /**
     * Enable/disable measuring channel utilization. Valid values: `enable`, `disable`.
     */
    channelUtilization: string;
    /**
     * Selected list of wireless radio channels. The structure of `channel` block is documented below.
     */
    channels?: outputs.WirelessControllerWtpProfileRadio3Channel[];
    /**
     * Enable/disable allowing both HT20 and HT40 on the same radio (default = enable). Valid values: `enable`, `disable`.
     */
    coexistence: string;
    /**
     * Enable/disable Distributed Automatic Radio Resource Provisioning (DARRP) to make sure the radio is always using the most optimal channel (default = disable). Valid values: `enable`, `disable`.
     */
    darrp: string;
    /**
     * Enable/disable dynamic radio mode assignment (DRMA) (default = disable). Valid values: `disable`, `enable`.
     */
    drma: string;
    /**
     * Network Coverage Factor (NCF) percentage required to consider a radio as redundant (default = low). Valid values: `low`, `medium`, `high`.
     */
    drmaSensitivity: string;
    /**
     * Delivery Traffic Indication Map (DTIM) period (1 - 255, default = 1). Set higher to save battery life of WiFi client in power-save mode.
     */
    dtim: number;
    /**
     * Maximum packet size that can be sent without fragmentation (800 - 2346 bytes, default = 2346).
     */
    fragThreshold: number;
    /**
     * Enable/disable frequency handoff of clients to other channels (default = disable). Valid values: `enable`, `disable`.
     */
    frequencyHandoff: string;
    /**
     * Iperf test protocol (default = "UDP"). Valid values: `udp`, `tcp`.
     */
    iperfProtocol: string;
    /**
     * Iperf service port number.
     */
    iperfServerPort: number;
    /**
     * Maximum number of stations (STAs) or WiFi clients supported by the radio. Range depends on the hardware.
     */
    maxClients: number;
    /**
     * Maximum expected distance between the AP and clients (0 - 54000 m, default = 0).
     */
    maxDistance: number;
    /**
     * Mode of radio 3. Radio 3 can be disabled, configured as an access point, a rogue AP monitor, or a sniffer.
     */
    mode: string;
    /**
     * Radio power level as a percentage of the maximum transmit power (0 - 100, default = 100).
     */
    powerLevel: number;
    /**
     * Set radio effective isotropic radiated power (EIRP) in dBm or by a percentage of the maximum EIRP (default = percentage). This power takes into account both radio transmit power and antenna gain. Higher power level settings may be constrained by local regulatory requirements and AP capabilities. Valid values: `dBm`, `percentage`.
     */
    powerMode: string;
    /**
     * Radio EIRP power in dBm (1 - 33, default = 27).
     */
    powerValue: number;
    /**
     * Enable client power-saving features such as TIM, AC VO, and OBSS etc. Valid values: `tim`, `ac-vo`, `no-obss-scan`, `no-11b-rate`, `client-rate-follow`.
     */
    powersaveOptimize: string;
    /**
     * Enable/disable 802.11g protection modes to support backwards compatibility with older clients (rtscts, ctsonly, disable). Valid values: `rtscts`, `ctsonly`, `disable`.
     */
    protectionMode: string;
    /**
     * Maximum packet size for RTS transmissions, specifying the maximum size of a data packet before RTS/CTS (256 - 2346 bytes, default = 2346).
     */
    rtsThreshold: number;
    /**
     * BSSID for WiFi network.
     */
    samBssid: string;
    /**
     * Enable/disable Captive Portal Authentication (default = disable). Valid values: `enable`, `disable`.
     */
    samCaptivePortal: string;
    /**
     * Failure identification on the page after an incorrect login.
     */
    samCwpFailureString: string;
    /**
     * Identification string from the captive portal login form.
     */
    samCwpMatchString: string;
    /**
     * Password for captive portal authentication.
     */
    samCwpPassword?: string;
    /**
     * Success identification on the page after a successful login.
     */
    samCwpSuccessString: string;
    /**
     * Website the client is trying to access.
     */
    samCwpTestUrl: string;
    /**
     * Username for captive portal authentication.
     */
    samCwpUsername: string;
    /**
     * Passphrase for WiFi network connection.
     */
    samPassword?: string;
    /**
     * SAM report interval (sec), 0 for a one-time report.
     */
    samReportIntv: number;
    /**
     * Select WiFi network security type (default = "wpa-personal"). Valid values: `open`, `wpa-personal`, `wpa-enterprise`.
     */
    samSecurityType: string;
    /**
     * SAM test server domain name.
     */
    samServerFqdn: string;
    /**
     * SAM test server IP address.
     */
    samServerIp: string;
    /**
     * Select SAM server type (default = "IP"). Valid values: `ip`, `fqdn`.
     */
    samServerType: string;
    /**
     * SSID for WiFi network.
     */
    samSsid: string;
    /**
     * Select SAM test type (default = "PING"). Valid values: `ping`, `iperf`.
     */
    samTest: string;
    /**
     * Username for WiFi network connection.
     */
    samUsername: string;
    /**
     * Use either the short guard interval (Short GI) of 400 ns or the long guard interval (Long GI) of 800 ns. Valid values: `enable`, `disable`.
     */
    shortGuardInterval: string;
    /**
     * Enable/disable spectrum analysis to find interference that would negatively impact wireless performance.
     */
    spectrumAnalysis: string;
    /**
     * Packet transmission optimization options including power saving, aggregation limiting, retry limiting, etc. All are enabled by default. Valid values: `disable`, `power-save`, `aggr-limit`, `retry-limit`, `send-bar`.
     */
    transmitOptimize: string;
    /**
     * Enable/disable the automatic inheritance of all Virtual Access Points (VAPs) (default = enable).
     */
    vapAll: string;
    /**
     * Manually selected list of Virtual Access Points (VAPs). The structure of `vaps` block is documented below.
     */
    vaps?: outputs.WirelessControllerWtpProfileRadio3Vap[];
    /**
     * Wireless Intrusion Detection System (WIDS) profile name to assign to the radio.
     */
    widsProfile: string;
    /**
     * Enable/disable zero wait DFS on radio (default = enable). Valid values: `enable`, `disable`.
     */
    zeroWaitDfs: string;
}

export interface WirelessControllerWtpProfileRadio3Channel {
    /**
     * Channel number.
     */
    chan: string;
}

export interface WirelessControllerWtpProfileRadio3Vap {
    /**
     * Virtual Access Point (VAP) name.
     */
    name: string;
}

export interface WirelessControllerWtpProfileRadio4 {
    /**
     * Enable/disable airtime fairness (default = disable). Valid values: `enable`, `disable`.
     */
    airtimeFairness: string;
    /**
     * Enable/disable 802.11n AMSDU support. AMSDU can improve performance if supported by your WiFi clients (default = enable). Valid values: `enable`, `disable`.
     */
    amsdu: string;
    /**
     * Enable/disable AP handoff of clients to other APs (default = disable). Valid values: `enable`, `disable`.
     */
    apHandoff: string;
    /**
     * MAC address to monitor.
     */
    apSnifferAddr: string;
    /**
     * Sniffer buffer size (1 - 32 MB, default = 16).
     */
    apSnifferBufsize: number;
    /**
     * Channel on which to operate the sniffer (default = 6).
     */
    apSnifferChan: number;
    /**
     * Enable/disable sniffer on WiFi control frame (default = enable). Valid values: `enable`, `disable`.
     */
    apSnifferCtl: string;
    /**
     * Enable/disable sniffer on WiFi data frame (default = enable). Valid values: `enable`, `disable`.
     */
    apSnifferData: string;
    /**
     * Enable/disable sniffer on WiFi management Beacon frames (default = enable). Valid values: `enable`, `disable`.
     */
    apSnifferMgmtBeacon: string;
    /**
     * Enable/disable sniffer on WiFi management other frames  (default = enable). Valid values: `enable`, `disable`.
     */
    apSnifferMgmtOther: string;
    /**
     * Enable/disable sniffer on WiFi management probe frames (default = enable). Valid values: `enable`, `disable`.
     */
    apSnifferMgmtProbe: string;
    /**
     * Distributed Automatic Radio Resource Provisioning (DARRP) profile name to assign to the radio.
     */
    arrpProfile: string;
    /**
     * The upper bound of automatic transmit power adjustment in dBm (the actual range of transmit power depends on the AP platform type).
     */
    autoPowerHigh: number;
    /**
     * Enable/disable automatic power-level adjustment to prevent co-channel interference (default = enable). Valid values: `enable`, `disable`.
     */
    autoPowerLevel: string;
    /**
     * The lower bound of automatic transmit power adjustment in dBm (the actual range of transmit power depends on the AP platform type).
     */
    autoPowerLow: number;
    /**
     * The target of automatic transmit power adjustment in dBm. (-95 to -20, default = -70).
     */
    autoPowerTarget: string;
    /**
     * WiFi band that Radio 3 operates on.
     */
    band: string;
    /**
     * WiFi 5G band type. Valid values: `5g-full`, `5g-high`, `5g-low`.
     */
    band5gType: string;
    /**
     * Enable/disable WiFi multimedia (WMM) bandwidth admission control to optimize WiFi bandwidth use. A request to join the wireless network is only allowed if the access point has enough bandwidth to support it. Valid values: `enable`, `disable`.
     */
    bandwidthAdmissionControl: string;
    /**
     * Maximum bandwidth capacity allowed (1 - 600000 Kbps, default = 2000).
     */
    bandwidthCapacity: number;
    /**
     * Beacon interval. The time between beacon frames in msec (the actual range of beacon interval depends on the AP platform type, default = 100).
     */
    beaconInterval: number;
    /**
     * BSS color value for this 11ax radio (0 - 63, 0 means disable. default = 0).
     */
    bssColor: number;
    /**
     * BSS color mode for this 11ax radio (default = auto). Valid values: `auto`, `static`.
     */
    bssColorMode: string;
    /**
     * Enable/disable WiFi multimedia (WMM) call admission control to optimize WiFi bandwidth use for VoIP calls. New VoIP calls are only accepted if there is enough bandwidth available to support them. Valid values: `enable`, `disable`.
     */
    callAdmissionControl: string;
    /**
     * Maximum number of Voice over WLAN (VoWLAN) phones supported by the radio (0 - 60, default = 10).
     */
    callCapacity: number;
    /**
     * Channel bandwidth: 160,80, 40, or 20MHz. Channels may use both 20 and 40 by enabling coexistence. Valid values: `160MHz`, `80MHz`, `40MHz`, `20MHz`.
     */
    channelBonding: string;
    /**
     * Enable/disable measuring channel utilization. Valid values: `enable`, `disable`.
     */
    channelUtilization: string;
    /**
     * Selected list of wireless radio channels. The structure of `channel` block is documented below.
     */
    channels?: outputs.WirelessControllerWtpProfileRadio4Channel[];
    /**
     * Enable/disable allowing both HT20 and HT40 on the same radio (default = enable). Valid values: `enable`, `disable`.
     */
    coexistence: string;
    /**
     * Enable/disable Distributed Automatic Radio Resource Provisioning (DARRP) to make sure the radio is always using the most optimal channel (default = disable). Valid values: `enable`, `disable`.
     */
    darrp: string;
    /**
     * Enable/disable dynamic radio mode assignment (DRMA) (default = disable). Valid values: `disable`, `enable`.
     */
    drma: string;
    /**
     * Network Coverage Factor (NCF) percentage required to consider a radio as redundant (default = low). Valid values: `low`, `medium`, `high`.
     */
    drmaSensitivity: string;
    /**
     * Delivery Traffic Indication Map (DTIM) period (1 - 255, default = 1). Set higher to save battery life of WiFi client in power-save mode.
     */
    dtim: number;
    /**
     * Maximum packet size that can be sent without fragmentation (800 - 2346 bytes, default = 2346).
     */
    fragThreshold: number;
    /**
     * Enable/disable frequency handoff of clients to other channels (default = disable). Valid values: `enable`, `disable`.
     */
    frequencyHandoff: string;
    /**
     * Iperf test protocol (default = "UDP"). Valid values: `udp`, `tcp`.
     */
    iperfProtocol: string;
    /**
     * Iperf service port number.
     */
    iperfServerPort: number;
    /**
     * Maximum number of stations (STAs) or WiFi clients supported by the radio. Range depends on the hardware.
     */
    maxClients: number;
    /**
     * Maximum expected distance between the AP and clients (0 - 54000 m, default = 0).
     */
    maxDistance: number;
    /**
     * Mode of radio 3. Radio 3 can be disabled, configured as an access point, a rogue AP monitor, or a sniffer.
     */
    mode: string;
    /**
     * Radio power level as a percentage of the maximum transmit power (0 - 100, default = 100).
     */
    powerLevel: number;
    /**
     * Set radio effective isotropic radiated power (EIRP) in dBm or by a percentage of the maximum EIRP (default = percentage). This power takes into account both radio transmit power and antenna gain. Higher power level settings may be constrained by local regulatory requirements and AP capabilities. Valid values: `dBm`, `percentage`.
     */
    powerMode: string;
    /**
     * Radio EIRP power in dBm (1 - 33, default = 27).
     */
    powerValue: number;
    /**
     * Enable client power-saving features such as TIM, AC VO, and OBSS etc. Valid values: `tim`, `ac-vo`, `no-obss-scan`, `no-11b-rate`, `client-rate-follow`.
     */
    powersaveOptimize: string;
    /**
     * Enable/disable 802.11g protection modes to support backwards compatibility with older clients (rtscts, ctsonly, disable). Valid values: `rtscts`, `ctsonly`, `disable`.
     */
    protectionMode: string;
    /**
     * Maximum packet size for RTS transmissions, specifying the maximum size of a data packet before RTS/CTS (256 - 2346 bytes, default = 2346).
     */
    rtsThreshold: number;
    /**
     * BSSID for WiFi network.
     */
    samBssid: string;
    /**
     * Enable/disable Captive Portal Authentication (default = disable). Valid values: `enable`, `disable`.
     */
    samCaptivePortal: string;
    /**
     * Failure identification on the page after an incorrect login.
     */
    samCwpFailureString: string;
    /**
     * Identification string from the captive portal login form.
     */
    samCwpMatchString: string;
    /**
     * Password for captive portal authentication.
     */
    samCwpPassword?: string;
    /**
     * Success identification on the page after a successful login.
     */
    samCwpSuccessString: string;
    /**
     * Website the client is trying to access.
     */
    samCwpTestUrl: string;
    /**
     * Username for captive portal authentication.
     */
    samCwpUsername: string;
    /**
     * Passphrase for WiFi network connection.
     */
    samPassword?: string;
    /**
     * SAM report interval (sec), 0 for a one-time report.
     */
    samReportIntv: number;
    /**
     * Select WiFi network security type (default = "wpa-personal"). Valid values: `open`, `wpa-personal`, `wpa-enterprise`.
     */
    samSecurityType: string;
    /**
     * SAM test server domain name.
     */
    samServerFqdn: string;
    /**
     * SAM test server IP address.
     */
    samServerIp: string;
    /**
     * Select SAM server type (default = "IP"). Valid values: `ip`, `fqdn`.
     */
    samServerType: string;
    /**
     * SSID for WiFi network.
     */
    samSsid: string;
    /**
     * Select SAM test type (default = "PING"). Valid values: `ping`, `iperf`.
     */
    samTest: string;
    /**
     * Username for WiFi network connection.
     */
    samUsername: string;
    /**
     * Use either the short guard interval (Short GI) of 400 ns or the long guard interval (Long GI) of 800 ns. Valid values: `enable`, `disable`.
     */
    shortGuardInterval: string;
    /**
     * Enable/disable spectrum analysis to find interference that would negatively impact wireless performance.
     */
    spectrumAnalysis: string;
    /**
     * Packet transmission optimization options including power saving, aggregation limiting, retry limiting, etc. All are enabled by default. Valid values: `disable`, `power-save`, `aggr-limit`, `retry-limit`, `send-bar`.
     */
    transmitOptimize: string;
    /**
     * Enable/disable the automatic inheritance of all Virtual Access Points (VAPs) (default = enable).
     */
    vapAll: string;
    /**
     * Manually selected list of Virtual Access Points (VAPs). The structure of `vaps` block is documented below.
     */
    vaps?: outputs.WirelessControllerWtpProfileRadio4Vap[];
    /**
     * Wireless Intrusion Detection System (WIDS) profile name to assign to the radio.
     */
    widsProfile: string;
    /**
     * Enable/disable zero wait DFS on radio (default = enable). Valid values: `enable`, `disable`.
     */
    zeroWaitDfs: string;
}

export interface WirelessControllerWtpProfileRadio4Channel {
    /**
     * Channel number.
     */
    chan: string;
}

export interface WirelessControllerWtpProfileRadio4Vap {
    /**
     * Virtual Access Point (VAP) name.
     */
    name: string;
}

export interface WirelessControllerWtpProfileSplitTunnelingAcl {
    /**
     * Destination IP and mask for the split-tunneling subnet.
     */
    destIp: string;
    /**
     * ID.
     */
    id: number;
}

export interface WirelessControllerWtpRadio1 {
    /**
     * The upper bound of automatic transmit power adjustment in dBm (the actual range of transmit power depends on the AP platform type).
     */
    autoPowerHigh: number;
    /**
     * Enable/disable automatic power-level adjustment to prevent co-channel interference (default = enable). Valid values: `enable`, `disable`.
     */
    autoPowerLevel: string;
    /**
     * The lower bound of automatic transmit power adjustment in dBm (the actual range of transmit power depends on the AP platform type).
     */
    autoPowerLow: number;
    /**
     * The target of automatic transmit power adjustment in dBm. (-95 to -20, default = -70).
     */
    autoPowerTarget: string;
    /**
     * WiFi band that Radio 4 operates on.
     */
    band: string;
    /**
     * Selected list of wireless radio channels. The structure of `channel` block is documented below.
     */
    channels?: outputs.WirelessControllerWtpRadio1Channel[];
    /**
     * Radio mode to be used for DRMA manual mode (default = ncf). Valid values: `ap`, `monitor`, `ncf`, `ncf-peek`.
     */
    drmaManualMode: string;
    /**
     * Enable to override the WTP profile spectrum analysis configuration. Valid values: `enable`, `disable`.
     */
    overrideAnalysis: string;
    /**
     * Enable to override the WTP profile band setting. Valid values: `enable`, `disable`.
     */
    overrideBand: string;
    /**
     * Enable to override WTP profile channel settings. Valid values: `enable`, `disable`.
     */
    overrideChannel: string;
    /**
     * Enable to override the WTP profile power level configuration. Valid values: `enable`, `disable`.
     */
    overrideTxpower: string;
    /**
     * Enable to override WTP profile Virtual Access Point (VAP) settings. Valid values: `enable`, `disable`.
     */
    overrideVaps: string;
    /**
     * Radio power level as a percentage of the maximum transmit power (0 - 100, default = 100).
     */
    powerLevel: number;
    /**
     * Set radio effective isotropic radiated power (EIRP) in dBm or by a percentage of the maximum EIRP (default = percentage). This power takes into account both radio transmit power and antenna gain. Higher power level settings may be constrained by local regulatory requirements and AP capabilities. Valid values: `dBm`, `percentage`.
     */
    powerMode: string;
    /**
     * Radio EIRP power in dBm (1 - 33, default = 27).
     */
    powerValue: number;
    /**
     * radio-id
     */
    radioId: number;
    /**
     * Enable/disable spectrum analysis to find interference that would negatively impact wireless performance.
     */
    spectrumAnalysis: string;
    /**
     * Enable/disable the automatic inheritance of all Virtual Access Points (VAPs) (default = enable).
     */
    vapAll: string;
    /**
     * Manually selected list of Virtual Access Points (VAPs). The structure of `vaps` block is documented below.
     */
    vaps?: outputs.WirelessControllerWtpRadio1Vap[];
}

export interface WirelessControllerWtpRadio1Channel {
    /**
     * Channel number.
     */
    chan: string;
}

export interface WirelessControllerWtpRadio1Vap {
    /**
     * Virtual Access Point (VAP) name.
     */
    name: string;
}

export interface WirelessControllerWtpRadio2 {
    /**
     * The upper bound of automatic transmit power adjustment in dBm (the actual range of transmit power depends on the AP platform type).
     */
    autoPowerHigh: number;
    /**
     * Enable/disable automatic power-level adjustment to prevent co-channel interference (default = enable). Valid values: `enable`, `disable`.
     */
    autoPowerLevel: string;
    /**
     * The lower bound of automatic transmit power adjustment in dBm (the actual range of transmit power depends on the AP platform type).
     */
    autoPowerLow: number;
    /**
     * The target of automatic transmit power adjustment in dBm. (-95 to -20, default = -70).
     */
    autoPowerTarget: string;
    /**
     * WiFi band that Radio 4 operates on.
     */
    band: string;
    /**
     * Selected list of wireless radio channels. The structure of `channel` block is documented below.
     */
    channels?: outputs.WirelessControllerWtpRadio2Channel[];
    /**
     * Radio mode to be used for DRMA manual mode (default = ncf). Valid values: `ap`, `monitor`, `ncf`, `ncf-peek`.
     */
    drmaManualMode: string;
    /**
     * Enable to override the WTP profile spectrum analysis configuration. Valid values: `enable`, `disable`.
     */
    overrideAnalysis: string;
    /**
     * Enable to override the WTP profile band setting. Valid values: `enable`, `disable`.
     */
    overrideBand: string;
    /**
     * Enable to override WTP profile channel settings. Valid values: `enable`, `disable`.
     */
    overrideChannel: string;
    /**
     * Enable to override the WTP profile power level configuration. Valid values: `enable`, `disable`.
     */
    overrideTxpower: string;
    /**
     * Enable to override WTP profile Virtual Access Point (VAP) settings. Valid values: `enable`, `disable`.
     */
    overrideVaps: string;
    /**
     * Radio power level as a percentage of the maximum transmit power (0 - 100, default = 100).
     */
    powerLevel: number;
    /**
     * Set radio effective isotropic radiated power (EIRP) in dBm or by a percentage of the maximum EIRP (default = percentage). This power takes into account both radio transmit power and antenna gain. Higher power level settings may be constrained by local regulatory requirements and AP capabilities. Valid values: `dBm`, `percentage`.
     */
    powerMode: string;
    /**
     * Radio EIRP power in dBm (1 - 33, default = 27).
     */
    powerValue: number;
    /**
     * radio-id
     */
    radioId: number;
    /**
     * Enable/disable spectrum analysis to find interference that would negatively impact wireless performance.
     */
    spectrumAnalysis: string;
    /**
     * Enable/disable the automatic inheritance of all Virtual Access Points (VAPs) (default = enable).
     */
    vapAll: string;
    /**
     * Manually selected list of Virtual Access Points (VAPs). The structure of `vaps` block is documented below.
     */
    vaps?: outputs.WirelessControllerWtpRadio2Vap[];
}

export interface WirelessControllerWtpRadio2Channel {
    /**
     * Channel number.
     */
    chan: string;
}

export interface WirelessControllerWtpRadio2Vap {
    /**
     * Virtual Access Point (VAP) name.
     */
    name: string;
}

export interface WirelessControllerWtpRadio3 {
    /**
     * The upper bound of automatic transmit power adjustment in dBm (the actual range of transmit power depends on the AP platform type).
     */
    autoPowerHigh: number;
    /**
     * Enable/disable automatic power-level adjustment to prevent co-channel interference (default = enable). Valid values: `enable`, `disable`.
     */
    autoPowerLevel: string;
    /**
     * The lower bound of automatic transmit power adjustment in dBm (the actual range of transmit power depends on the AP platform type).
     */
    autoPowerLow: number;
    /**
     * The target of automatic transmit power adjustment in dBm. (-95 to -20, default = -70).
     */
    autoPowerTarget: string;
    /**
     * WiFi band that Radio 4 operates on.
     */
    band: string;
    /**
     * Selected list of wireless radio channels. The structure of `channel` block is documented below.
     */
    channels?: outputs.WirelessControllerWtpRadio3Channel[];
    /**
     * Radio mode to be used for DRMA manual mode (default = ncf). Valid values: `ap`, `monitor`, `ncf`, `ncf-peek`.
     */
    drmaManualMode: string;
    /**
     * Enable to override the WTP profile spectrum analysis configuration. Valid values: `enable`, `disable`.
     */
    overrideAnalysis: string;
    /**
     * Enable to override the WTP profile band setting. Valid values: `enable`, `disable`.
     */
    overrideBand: string;
    /**
     * Enable to override WTP profile channel settings. Valid values: `enable`, `disable`.
     */
    overrideChannel: string;
    /**
     * Enable to override the WTP profile power level configuration. Valid values: `enable`, `disable`.
     */
    overrideTxpower: string;
    /**
     * Enable to override WTP profile Virtual Access Point (VAP) settings. Valid values: `enable`, `disable`.
     */
    overrideVaps: string;
    /**
     * Radio power level as a percentage of the maximum transmit power (0 - 100, default = 100).
     */
    powerLevel: number;
    /**
     * Set radio effective isotropic radiated power (EIRP) in dBm or by a percentage of the maximum EIRP (default = percentage). This power takes into account both radio transmit power and antenna gain. Higher power level settings may be constrained by local regulatory requirements and AP capabilities. Valid values: `dBm`, `percentage`.
     */
    powerMode: string;
    /**
     * Radio EIRP power in dBm (1 - 33, default = 27).
     */
    powerValue: number;
    /**
     * Enable/disable spectrum analysis to find interference that would negatively impact wireless performance.
     */
    spectrumAnalysis: string;
    /**
     * Enable/disable the automatic inheritance of all Virtual Access Points (VAPs) (default = enable).
     */
    vapAll: string;
    /**
     * Manually selected list of Virtual Access Points (VAPs). The structure of `vaps` block is documented below.
     */
    vaps?: outputs.WirelessControllerWtpRadio3Vap[];
}

export interface WirelessControllerWtpRadio3Channel {
    /**
     * Channel number.
     */
    chan: string;
}

export interface WirelessControllerWtpRadio3Vap {
    /**
     * Virtual Access Point (VAP) name.
     */
    name: string;
}

export interface WirelessControllerWtpRadio4 {
    /**
     * The upper bound of automatic transmit power adjustment in dBm (the actual range of transmit power depends on the AP platform type).
     */
    autoPowerHigh: number;
    /**
     * Enable/disable automatic power-level adjustment to prevent co-channel interference (default = enable). Valid values: `enable`, `disable`.
     */
    autoPowerLevel: string;
    /**
     * The lower bound of automatic transmit power adjustment in dBm (the actual range of transmit power depends on the AP platform type).
     */
    autoPowerLow: number;
    /**
     * The target of automatic transmit power adjustment in dBm. (-95 to -20, default = -70).
     */
    autoPowerTarget: string;
    /**
     * WiFi band that Radio 4 operates on.
     */
    band: string;
    /**
     * Selected list of wireless radio channels. The structure of `channel` block is documented below.
     */
    channels?: outputs.WirelessControllerWtpRadio4Channel[];
    /**
     * Radio mode to be used for DRMA manual mode (default = ncf). Valid values: `ap`, `monitor`, `ncf`, `ncf-peek`.
     */
    drmaManualMode: string;
    /**
     * Enable to override the WTP profile spectrum analysis configuration. Valid values: `enable`, `disable`.
     */
    overrideAnalysis: string;
    /**
     * Enable to override the WTP profile band setting. Valid values: `enable`, `disable`.
     */
    overrideBand: string;
    /**
     * Enable to override WTP profile channel settings. Valid values: `enable`, `disable`.
     */
    overrideChannel: string;
    /**
     * Enable to override the WTP profile power level configuration. Valid values: `enable`, `disable`.
     */
    overrideTxpower: string;
    /**
     * Enable to override WTP profile Virtual Access Point (VAP) settings. Valid values: `enable`, `disable`.
     */
    overrideVaps: string;
    /**
     * Radio power level as a percentage of the maximum transmit power (0 - 100, default = 100).
     */
    powerLevel: number;
    /**
     * Set radio effective isotropic radiated power (EIRP) in dBm or by a percentage of the maximum EIRP (default = percentage). This power takes into account both radio transmit power and antenna gain. Higher power level settings may be constrained by local regulatory requirements and AP capabilities. Valid values: `dBm`, `percentage`.
     */
    powerMode: string;
    /**
     * Radio EIRP power in dBm (1 - 33, default = 27).
     */
    powerValue: number;
    /**
     * Enable/disable spectrum analysis to find interference that would negatively impact wireless performance.
     */
    spectrumAnalysis: string;
    /**
     * Enable/disable the automatic inheritance of all Virtual Access Points (VAPs) (default = enable).
     */
    vapAll: string;
    /**
     * Manually selected list of Virtual Access Points (VAPs). The structure of `vaps` block is documented below.
     */
    vaps?: outputs.WirelessControllerWtpRadio4Vap[];
}

export interface WirelessControllerWtpRadio4Channel {
    /**
     * Channel number.
     */
    chan: string;
}

export interface WirelessControllerWtpRadio4Vap {
    /**
     * Virtual Access Point (VAP) name.
     */
    name: string;
}

export interface WirelessControllerWtpSplitTunnelingAcl {
    /**
     * Destination IP and mask for the split-tunneling subnet.
     */
    destIp: string;
    /**
     * ID.
     */
    id: number;
}

