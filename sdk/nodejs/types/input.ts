// *** WARNING: this file was generated by the Pulumi Terraform Bridge (tfgen) Tool. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

import * as pulumi from "@pulumi/pulumi";
import * as inputs from "../types/input";
import * as outputs from "../types/output";

export interface AntivirusProfileCifs {
    archiveBlock?: pulumi.Input<string>;
    archiveLog?: pulumi.Input<string>;
    avScan?: pulumi.Input<string>;
    emulator?: pulumi.Input<string>;
    externalBlocklist?: pulumi.Input<string>;
    fortiai?: pulumi.Input<string>;
    fortindr?: pulumi.Input<string>;
    fortisandbox?: pulumi.Input<string>;
    options?: pulumi.Input<string>;
    outbreakPrevention?: pulumi.Input<string>;
    quarantine?: pulumi.Input<string>;
}

export interface AntivirusProfileContentDisarm {
    coverPage?: pulumi.Input<string>;
    detectOnly?: pulumi.Input<string>;
    errorAction?: pulumi.Input<string>;
    officeAction?: pulumi.Input<string>;
    officeDde?: pulumi.Input<string>;
    officeEmbed?: pulumi.Input<string>;
    officeHylink?: pulumi.Input<string>;
    officeLinked?: pulumi.Input<string>;
    officeMacro?: pulumi.Input<string>;
    originalFileDestination?: pulumi.Input<string>;
    pdfActForm?: pulumi.Input<string>;
    pdfActGotor?: pulumi.Input<string>;
    pdfActJava?: pulumi.Input<string>;
    pdfActLaunch?: pulumi.Input<string>;
    pdfActMovie?: pulumi.Input<string>;
    pdfActSound?: pulumi.Input<string>;
    pdfEmbedfile?: pulumi.Input<string>;
    pdfHyperlink?: pulumi.Input<string>;
    pdfJavacode?: pulumi.Input<string>;
}

export interface AntivirusProfileExternalBlocklist {
    name?: pulumi.Input<string>;
}

export interface AntivirusProfileFtp {
    archiveBlock?: pulumi.Input<string>;
    archiveLog?: pulumi.Input<string>;
    avScan?: pulumi.Input<string>;
    emulator?: pulumi.Input<string>;
    externalBlocklist?: pulumi.Input<string>;
    fortiai?: pulumi.Input<string>;
    fortindr?: pulumi.Input<string>;
    fortisandbox?: pulumi.Input<string>;
    options?: pulumi.Input<string>;
    outbreakPrevention?: pulumi.Input<string>;
    quarantine?: pulumi.Input<string>;
}

export interface AntivirusProfileHttp {
    archiveBlock?: pulumi.Input<string>;
    archiveLog?: pulumi.Input<string>;
    avScan?: pulumi.Input<string>;
    contentDisarm?: pulumi.Input<string>;
    emulator?: pulumi.Input<string>;
    externalBlocklist?: pulumi.Input<string>;
    fortiai?: pulumi.Input<string>;
    fortindr?: pulumi.Input<string>;
    fortisandbox?: pulumi.Input<string>;
    options?: pulumi.Input<string>;
    outbreakPrevention?: pulumi.Input<string>;
    quarantine?: pulumi.Input<string>;
    unknownContentEncoding?: pulumi.Input<string>;
}

export interface AntivirusProfileImap {
    archiveBlock?: pulumi.Input<string>;
    archiveLog?: pulumi.Input<string>;
    avScan?: pulumi.Input<string>;
    contentDisarm?: pulumi.Input<string>;
    emulator?: pulumi.Input<string>;
    executables?: pulumi.Input<string>;
    externalBlocklist?: pulumi.Input<string>;
    fortiai?: pulumi.Input<string>;
    fortindr?: pulumi.Input<string>;
    fortisandbox?: pulumi.Input<string>;
    options?: pulumi.Input<string>;
    outbreakPrevention?: pulumi.Input<string>;
    quarantine?: pulumi.Input<string>;
}

export interface AntivirusProfileMapi {
    archiveBlock?: pulumi.Input<string>;
    archiveLog?: pulumi.Input<string>;
    avScan?: pulumi.Input<string>;
    emulator?: pulumi.Input<string>;
    executables?: pulumi.Input<string>;
    externalBlocklist?: pulumi.Input<string>;
    fortiai?: pulumi.Input<string>;
    fortindr?: pulumi.Input<string>;
    fortisandbox?: pulumi.Input<string>;
    options?: pulumi.Input<string>;
    outbreakPrevention?: pulumi.Input<string>;
    quarantine?: pulumi.Input<string>;
}

export interface AntivirusProfileNacQuar {
    expiry?: pulumi.Input<string>;
    infected?: pulumi.Input<string>;
    log?: pulumi.Input<string>;
}

export interface AntivirusProfileNntp {
    archiveBlock?: pulumi.Input<string>;
    archiveLog?: pulumi.Input<string>;
    avScan?: pulumi.Input<string>;
    emulator?: pulumi.Input<string>;
    externalBlocklist?: pulumi.Input<string>;
    fortiai?: pulumi.Input<string>;
    fortindr?: pulumi.Input<string>;
    fortisandbox?: pulumi.Input<string>;
    options?: pulumi.Input<string>;
    outbreakPrevention?: pulumi.Input<string>;
    quarantine?: pulumi.Input<string>;
}

export interface AntivirusProfileOutbreakPrevention {
    externalBlocklist?: pulumi.Input<string>;
    ftgdService?: pulumi.Input<string>;
}

export interface AntivirusProfilePop3 {
    archiveBlock?: pulumi.Input<string>;
    archiveLog?: pulumi.Input<string>;
    avScan?: pulumi.Input<string>;
    contentDisarm?: pulumi.Input<string>;
    emulator?: pulumi.Input<string>;
    executables?: pulumi.Input<string>;
    externalBlocklist?: pulumi.Input<string>;
    fortiai?: pulumi.Input<string>;
    fortindr?: pulumi.Input<string>;
    fortisandbox?: pulumi.Input<string>;
    options?: pulumi.Input<string>;
    outbreakPrevention?: pulumi.Input<string>;
    quarantine?: pulumi.Input<string>;
}

export interface AntivirusProfileSmb {
    archiveBlock?: pulumi.Input<string>;
    archiveLog?: pulumi.Input<string>;
    emulator?: pulumi.Input<string>;
    options?: pulumi.Input<string>;
    outbreakPrevention?: pulumi.Input<string>;
}

export interface AntivirusProfileSmtp {
    archiveBlock?: pulumi.Input<string>;
    archiveLog?: pulumi.Input<string>;
    avScan?: pulumi.Input<string>;
    contentDisarm?: pulumi.Input<string>;
    emulator?: pulumi.Input<string>;
    executables?: pulumi.Input<string>;
    externalBlocklist?: pulumi.Input<string>;
    fortiai?: pulumi.Input<string>;
    fortindr?: pulumi.Input<string>;
    fortisandbox?: pulumi.Input<string>;
    options?: pulumi.Input<string>;
    outbreakPrevention?: pulumi.Input<string>;
    quarantine?: pulumi.Input<string>;
}

export interface AntivirusProfileSsh {
    archiveBlock?: pulumi.Input<string>;
    archiveLog?: pulumi.Input<string>;
    avScan?: pulumi.Input<string>;
    emulator?: pulumi.Input<string>;
    externalBlocklist?: pulumi.Input<string>;
    fortiai?: pulumi.Input<string>;
    fortindr?: pulumi.Input<string>;
    fortisandbox?: pulumi.Input<string>;
    options?: pulumi.Input<string>;
    outbreakPrevention?: pulumi.Input<string>;
    quarantine?: pulumi.Input<string>;
}

export interface ApplicationGroupApplication {
    id?: pulumi.Input<number>;
}

export interface ApplicationGroupCategory {
    id?: pulumi.Input<number>;
}

export interface ApplicationGroupRisk {
    level?: pulumi.Input<number>;
}

export interface ApplicationListDefaultNetworkService {
    id?: pulumi.Input<number>;
    port?: pulumi.Input<number>;
    services?: pulumi.Input<string>;
    violationAction?: pulumi.Input<string>;
}

export interface ApplicationListEntry {
    action?: pulumi.Input<string>;
    applications?: pulumi.Input<pulumi.Input<inputs.ApplicationListEntryApplication>[]>;
    behavior?: pulumi.Input<string>;
    categories?: pulumi.Input<pulumi.Input<inputs.ApplicationListEntryCategory>[]>;
    exclusions?: pulumi.Input<pulumi.Input<inputs.ApplicationListEntryExclusion>[]>;
    id?: pulumi.Input<number>;
    log?: pulumi.Input<string>;
    logPacket?: pulumi.Input<string>;
    parameters?: pulumi.Input<pulumi.Input<inputs.ApplicationListEntryParameter>[]>;
    perIpShaper?: pulumi.Input<string>;
    popularity?: pulumi.Input<string>;
    protocols?: pulumi.Input<string>;
    quarantine?: pulumi.Input<string>;
    quarantineExpiry?: pulumi.Input<string>;
    quarantineLog?: pulumi.Input<string>;
    rateCount?: pulumi.Input<number>;
    rateDuration?: pulumi.Input<number>;
    rateMode?: pulumi.Input<string>;
    rateTrack?: pulumi.Input<string>;
    risks?: pulumi.Input<pulumi.Input<inputs.ApplicationListEntryRisk>[]>;
    sessionTtl?: pulumi.Input<number>;
    shaper?: pulumi.Input<string>;
    shaperReverse?: pulumi.Input<string>;
    subCategories?: pulumi.Input<pulumi.Input<inputs.ApplicationListEntrySubCategory>[]>;
    technology?: pulumi.Input<string>;
    vendor?: pulumi.Input<string>;
}

export interface ApplicationListEntryApplication {
    id?: pulumi.Input<number>;
}

export interface ApplicationListEntryCategory {
    id?: pulumi.Input<number>;
}

export interface ApplicationListEntryExclusion {
    id?: pulumi.Input<number>;
}

export interface ApplicationListEntryParameter {
    id?: pulumi.Input<number>;
    members?: pulumi.Input<pulumi.Input<inputs.ApplicationListEntryParameterMember>[]>;
    value?: pulumi.Input<string>;
}

export interface ApplicationListEntryParameterMember {
    id?: pulumi.Input<number>;
    name?: pulumi.Input<string>;
    value?: pulumi.Input<string>;
}

export interface ApplicationListEntryRisk {
    level?: pulumi.Input<number>;
}

export interface ApplicationListEntrySubCategory {
    id?: pulumi.Input<number>;
}

export interface ApplicationNameMetadata {
    id?: pulumi.Input<number>;
    metaid?: pulumi.Input<number>;
    valueid?: pulumi.Input<number>;
}

export interface ApplicationNameParameter {
    name?: pulumi.Input<string>;
}

export interface AuthenticationRuleDstaddr {
    name?: pulumi.Input<string>;
}

export interface AuthenticationRuleDstaddr6 {
    name?: pulumi.Input<string>;
}

export interface AuthenticationRuleSrcaddr {
    name?: pulumi.Input<string>;
}

export interface AuthenticationRuleSrcaddr6 {
    name?: pulumi.Input<string>;
}

export interface AuthenticationRuleSrcintf {
    name?: pulumi.Input<string>;
}

export interface AuthenticationSchemeUserDatabase {
    name?: pulumi.Input<string>;
}

export interface AuthenticationSettingDevRange {
    name?: pulumi.Input<string>;
}

export interface AuthenticationSettingUserCertCa {
    name?: pulumi.Input<string>;
}

export interface CifsProfileFileFilter {
    entries?: pulumi.Input<pulumi.Input<inputs.CifsProfileFileFilterEntry>[]>;
    log?: pulumi.Input<string>;
    status?: pulumi.Input<string>;
}

export interface CifsProfileFileFilterEntry {
    action?: pulumi.Input<string>;
    comment?: pulumi.Input<string>;
    direction?: pulumi.Input<string>;
    fileTypes?: pulumi.Input<pulumi.Input<inputs.CifsProfileFileFilterEntryFileType>[]>;
    filter?: pulumi.Input<string>;
}

export interface CifsProfileFileFilterEntryFileType {
    name?: pulumi.Input<string>;
}

export interface CifsProfileServerKeytab {
    keytab?: pulumi.Input<string>;
    principal?: pulumi.Input<string>;
}

export interface DlpDictionaryEntry {
    comment?: pulumi.Input<string>;
    id?: pulumi.Input<number>;
    ignoreCase?: pulumi.Input<string>;
    pattern?: pulumi.Input<string>;
    repeat?: pulumi.Input<string>;
    status?: pulumi.Input<string>;
    type?: pulumi.Input<string>;
}

export interface DlpFilepatternEntry {
    fileType?: pulumi.Input<string>;
    filterType?: pulumi.Input<string>;
    pattern?: pulumi.Input<string>;
}

export interface DlpProfileRule {
    action?: pulumi.Input<string>;
    archive?: pulumi.Input<string>;
    expiry?: pulumi.Input<string>;
    fileSize?: pulumi.Input<number>;
    fileType?: pulumi.Input<number>;
    filterBy?: pulumi.Input<string>;
    id?: pulumi.Input<number>;
    label?: pulumi.Input<string>;
    matchPercentage?: pulumi.Input<number>;
    name?: pulumi.Input<string>;
    proto?: pulumi.Input<string>;
    sensitivities?: pulumi.Input<pulumi.Input<inputs.DlpProfileRuleSensitivity>[]>;
    sensors?: pulumi.Input<pulumi.Input<inputs.DlpProfileRuleSensor>[]>;
    severity?: pulumi.Input<string>;
    type?: pulumi.Input<string>;
}

export interface DlpProfileRuleSensitivity {
    name?: pulumi.Input<string>;
}

export interface DlpProfileRuleSensor {
    name?: pulumi.Input<string>;
}

export interface DlpSensorEntry {
    count?: pulumi.Input<number>;
    dictionary?: pulumi.Input<string>;
    id?: pulumi.Input<number>;
    status?: pulumi.Input<string>;
}

export interface DlpSensorFilter {
    action?: pulumi.Input<string>;
    archive?: pulumi.Input<string>;
    companyIdentifier?: pulumi.Input<string>;
    expiry?: pulumi.Input<string>;
    fileSize?: pulumi.Input<number>;
    fileType?: pulumi.Input<number>;
    filterBy?: pulumi.Input<string>;
    fpSensitivities?: pulumi.Input<pulumi.Input<inputs.DlpSensorFilterFpSensitivity>[]>;
    id?: pulumi.Input<number>;
    matchPercentage?: pulumi.Input<number>;
    name?: pulumi.Input<string>;
    proto?: pulumi.Input<string>;
    regexp?: pulumi.Input<string>;
    sensitivities?: pulumi.Input<pulumi.Input<inputs.DlpSensorFilterSensitivity>[]>;
    severity?: pulumi.Input<string>;
    type?: pulumi.Input<string>;
}

export interface DlpSensorFilterFpSensitivity {
    name?: pulumi.Input<string>;
}

export interface DlpSensorFilterSensitivity {
    name?: pulumi.Input<string>;
}

export interface DnsfilterDomainFilterEntry {
    action?: pulumi.Input<string>;
    domain?: pulumi.Input<string>;
    id?: pulumi.Input<number>;
    status?: pulumi.Input<string>;
    type?: pulumi.Input<string>;
}

export interface DnsfilterProfileDnsTranslation {
    addrType?: pulumi.Input<string>;
    dst?: pulumi.Input<string>;
    dst6?: pulumi.Input<string>;
    id?: pulumi.Input<number>;
    netmask?: pulumi.Input<string>;
    prefix?: pulumi.Input<number>;
    src?: pulumi.Input<string>;
    src6?: pulumi.Input<string>;
    status?: pulumi.Input<string>;
}

export interface DnsfilterProfileDomainFilter {
    domainFilterTable?: pulumi.Input<number>;
}

export interface DnsfilterProfileExternalIpBlocklist {
    name?: pulumi.Input<string>;
}

export interface DnsfilterProfileFtgdDns {
    filters?: pulumi.Input<pulumi.Input<inputs.DnsfilterProfileFtgdDnsFilter>[]>;
    options?: pulumi.Input<string>;
}

export interface DnsfilterProfileFtgdDnsFilter {
    action?: pulumi.Input<string>;
    category?: pulumi.Input<number>;
    id?: pulumi.Input<number>;
    log?: pulumi.Input<string>;
}

export interface DpdkGlobalInterface {
    interfaceName?: pulumi.Input<string>;
}

export interface EmailfilterBlockAllowListEntry {
    action?: pulumi.Input<string>;
    addrType?: pulumi.Input<string>;
    emailPattern?: pulumi.Input<string>;
    id?: pulumi.Input<number>;
    ip4Subnet?: pulumi.Input<string>;
    ip6Subnet?: pulumi.Input<string>;
    pattern?: pulumi.Input<string>;
    patternType?: pulumi.Input<string>;
    status?: pulumi.Input<string>;
    type?: pulumi.Input<string>;
}

export interface EmailfilterBwlEntry {
    action?: pulumi.Input<string>;
    addrType?: pulumi.Input<string>;
    emailPattern?: pulumi.Input<string>;
    id?: pulumi.Input<number>;
    ip4Subnet?: pulumi.Input<string>;
    ip6Subnet?: pulumi.Input<string>;
    patternType?: pulumi.Input<string>;
    status?: pulumi.Input<string>;
    type?: pulumi.Input<string>;
}

export interface EmailfilterBwordEntry {
    action?: pulumi.Input<string>;
    id?: pulumi.Input<number>;
    language?: pulumi.Input<string>;
    pattern?: pulumi.Input<string>;
    patternType?: pulumi.Input<string>;
    score?: pulumi.Input<number>;
    status?: pulumi.Input<string>;
    where?: pulumi.Input<string>;
}

export interface EmailfilterDnsblEntry {
    action?: pulumi.Input<string>;
    id?: pulumi.Input<number>;
    server?: pulumi.Input<string>;
    status?: pulumi.Input<string>;
}

export interface EmailfilterIptrustEntry {
    addrType?: pulumi.Input<string>;
    id?: pulumi.Input<number>;
    ip4Subnet?: pulumi.Input<string>;
    ip6Subnet?: pulumi.Input<string>;
    status?: pulumi.Input<string>;
}

export interface EmailfilterMheaderEntry {
    action?: pulumi.Input<string>;
    fieldbody?: pulumi.Input<string>;
    fieldname?: pulumi.Input<string>;
    id?: pulumi.Input<number>;
    patternType?: pulumi.Input<string>;
    status?: pulumi.Input<string>;
}

export interface EmailfilterProfileFileFilter {
    entries?: pulumi.Input<pulumi.Input<inputs.EmailfilterProfileFileFilterEntry>[]>;
    log?: pulumi.Input<string>;
    scanArchiveContents?: pulumi.Input<string>;
    status?: pulumi.Input<string>;
}

export interface EmailfilterProfileFileFilterEntry {
    action?: pulumi.Input<string>;
    comment?: pulumi.Input<string>;
    fileTypes?: pulumi.Input<pulumi.Input<inputs.EmailfilterProfileFileFilterEntryFileType>[]>;
    filter?: pulumi.Input<string>;
    passwordProtected?: pulumi.Input<string>;
    protocol?: pulumi.Input<string>;
}

export interface EmailfilterProfileFileFilterEntryFileType {
    name?: pulumi.Input<string>;
}

export interface EmailfilterProfileGmail {
    log?: pulumi.Input<string>;
    logAll?: pulumi.Input<string>;
}

export interface EmailfilterProfileImap {
    action?: pulumi.Input<string>;
    log?: pulumi.Input<string>;
    logAll?: pulumi.Input<string>;
    tagMsg?: pulumi.Input<string>;
    tagType?: pulumi.Input<string>;
}

export interface EmailfilterProfileMapi {
    action?: pulumi.Input<string>;
    log?: pulumi.Input<string>;
    logAll?: pulumi.Input<string>;
}

export interface EmailfilterProfileMsnHotmail {
    log?: pulumi.Input<string>;
    logAll?: pulumi.Input<string>;
}

export interface EmailfilterProfileOtherWebmails {
    logAll?: pulumi.Input<string>;
}

export interface EmailfilterProfilePop3 {
    action?: pulumi.Input<string>;
    log?: pulumi.Input<string>;
    logAll?: pulumi.Input<string>;
    tagMsg?: pulumi.Input<string>;
    tagType?: pulumi.Input<string>;
}

export interface EmailfilterProfileSmtp {
    action?: pulumi.Input<string>;
    hdrip?: pulumi.Input<string>;
    localOverride?: pulumi.Input<string>;
    log?: pulumi.Input<string>;
    logAll?: pulumi.Input<string>;
    tagMsg?: pulumi.Input<string>;
    tagType?: pulumi.Input<string>;
}

export interface EmailfilterProfileYahooMail {
    log?: pulumi.Input<string>;
    logAll?: pulumi.Input<string>;
}

export interface EndpointControlProfileDeviceGroup {
    name?: pulumi.Input<string>;
}

export interface EndpointControlProfileForticlientAndroidSettings {
    disableWfWhenProtected?: pulumi.Input<string>;
    forticlientAdvancedVpn?: pulumi.Input<string>;
    forticlientAdvancedVpnBuffer?: pulumi.Input<string>;
    forticlientVpnProvisioning?: pulumi.Input<string>;
    forticlientVpnSettings?: pulumi.Input<pulumi.Input<inputs.EndpointControlProfileForticlientAndroidSettingsForticlientVpnSetting>[]>;
    forticlientWf?: pulumi.Input<string>;
    forticlientWfProfile?: pulumi.Input<string>;
}

export interface EndpointControlProfileForticlientAndroidSettingsForticlientVpnSetting {
    authMethod?: pulumi.Input<string>;
    name?: pulumi.Input<string>;
    presharedKey?: pulumi.Input<string>;
    remoteGw?: pulumi.Input<string>;
    sslvpnAccessPort?: pulumi.Input<number>;
    sslvpnRequireCertificate?: pulumi.Input<string>;
    type?: pulumi.Input<string>;
}

export interface EndpointControlProfileForticlientIosSettings {
    clientVpnProvisioning?: pulumi.Input<string>;
    clientVpnSettings?: pulumi.Input<pulumi.Input<inputs.EndpointControlProfileForticlientIosSettingsClientVpnSetting>[]>;
    configurationContent?: pulumi.Input<string>;
    configurationName?: pulumi.Input<string>;
    disableWfWhenProtected?: pulumi.Input<string>;
    distributeConfigurationProfile?: pulumi.Input<string>;
    forticlientWf?: pulumi.Input<string>;
    forticlientWfProfile?: pulumi.Input<string>;
}

export interface EndpointControlProfileForticlientIosSettingsClientVpnSetting {
    authMethod?: pulumi.Input<string>;
    name?: pulumi.Input<string>;
    presharedKey?: pulumi.Input<string>;
    remoteGw?: pulumi.Input<string>;
    sslvpnAccessPort?: pulumi.Input<number>;
    sslvpnRequireCertificate?: pulumi.Input<string>;
    type?: pulumi.Input<string>;
    vpnConfigurationContent?: pulumi.Input<string>;
    vpnConfigurationName?: pulumi.Input<string>;
}

export interface EndpointControlProfileForticlientWinmacSettings {
    avRealtimeProtection?: pulumi.Input<string>;
    avSignatureUpToDate?: pulumi.Input<string>;
    forticlientApplicationFirewall?: pulumi.Input<string>;
    forticlientApplicationFirewallList?: pulumi.Input<string>;
    forticlientAv?: pulumi.Input<string>;
    forticlientEmsCompliance?: pulumi.Input<string>;
    forticlientEmsComplianceAction?: pulumi.Input<string>;
    forticlientEmsEntries?: pulumi.Input<pulumi.Input<inputs.EndpointControlProfileForticlientWinmacSettingsForticlientEmsEntry>[]>;
    forticlientLinuxVer?: pulumi.Input<string>;
    forticlientLogUpload?: pulumi.Input<string>;
    forticlientLogUploadLevel?: pulumi.Input<string>;
    forticlientLogUploadServer?: pulumi.Input<string>;
    forticlientMacVer?: pulumi.Input<string>;
    forticlientMinimumSoftwareVersion?: pulumi.Input<string>;
    forticlientOperatingSystems?: pulumi.Input<pulumi.Input<inputs.EndpointControlProfileForticlientWinmacSettingsForticlientOperatingSystem>[]>;
    forticlientOwnFiles?: pulumi.Input<pulumi.Input<inputs.EndpointControlProfileForticlientWinmacSettingsForticlientOwnFile>[]>;
    forticlientRegistrationComplianceAction?: pulumi.Input<string>;
    forticlientRegistryEntries?: pulumi.Input<pulumi.Input<inputs.EndpointControlProfileForticlientWinmacSettingsForticlientRegistryEntry>[]>;
    forticlientRunningApps?: pulumi.Input<pulumi.Input<inputs.EndpointControlProfileForticlientWinmacSettingsForticlientRunningApp>[]>;
    forticlientSecurityPosture?: pulumi.Input<string>;
    forticlientSecurityPostureComplianceAction?: pulumi.Input<string>;
    forticlientSystemCompliance?: pulumi.Input<string>;
    forticlientSystemComplianceAction?: pulumi.Input<string>;
    forticlientVulnScan?: pulumi.Input<string>;
    forticlientVulnScanComplianceAction?: pulumi.Input<string>;
    forticlientVulnScanEnforce?: pulumi.Input<string>;
    forticlientVulnScanEnforceGrace?: pulumi.Input<number>;
    forticlientVulnScanExempt?: pulumi.Input<string>;
    forticlientWf?: pulumi.Input<string>;
    forticlientWfProfile?: pulumi.Input<string>;
    forticlientWinVer?: pulumi.Input<string>;
    osAvSoftwareInstalled?: pulumi.Input<string>;
    sandboxAddress?: pulumi.Input<string>;
    sandboxAnalysis?: pulumi.Input<string>;
}

export interface EndpointControlProfileForticlientWinmacSettingsForticlientEmsEntry {
    name?: pulumi.Input<string>;
}

export interface EndpointControlProfileForticlientWinmacSettingsForticlientOperatingSystem {
    id?: pulumi.Input<number>;
    osName?: pulumi.Input<string>;
    osType?: pulumi.Input<string>;
}

export interface EndpointControlProfileForticlientWinmacSettingsForticlientOwnFile {
    file?: pulumi.Input<string>;
    id?: pulumi.Input<number>;
}

export interface EndpointControlProfileForticlientWinmacSettingsForticlientRegistryEntry {
    id?: pulumi.Input<number>;
    registryEntry?: pulumi.Input<string>;
}

export interface EndpointControlProfileForticlientWinmacSettingsForticlientRunningApp {
    appName?: pulumi.Input<string>;
    appSha256Signature?: pulumi.Input<string>;
    appSha256Signature2?: pulumi.Input<string>;
    appSha256Signature3?: pulumi.Input<string>;
    appSha256Signature4?: pulumi.Input<string>;
    applicationCheckRule?: pulumi.Input<string>;
    id?: pulumi.Input<number>;
    processName?: pulumi.Input<string>;
    processName2?: pulumi.Input<string>;
    processName3?: pulumi.Input<string>;
    processName4?: pulumi.Input<string>;
}

export interface EndpointControlProfileOnNetAddr {
    name?: pulumi.Input<string>;
}

export interface EndpointControlProfileSrcAddr {
    name?: pulumi.Input<string>;
}

export interface EndpointControlProfileUser {
    name?: pulumi.Input<string>;
}

export interface EndpointControlProfileUserGroup {
    name?: pulumi.Input<string>;
}

export interface ExtenderControllerExtender1ControllerReport {
    interval?: pulumi.Input<number>;
    signalThreshold?: pulumi.Input<number>;
    status?: pulumi.Input<string>;
}

export interface ExtenderControllerExtender1Modem1 {
    autoSwitch?: pulumi.Input<inputs.ExtenderControllerExtender1Modem1AutoSwitch>;
    connStatus?: pulumi.Input<number>;
    defaultSim?: pulumi.Input<string>;
    gps?: pulumi.Input<string>;
    ifname?: pulumi.Input<string>;
    preferredCarrier?: pulumi.Input<string>;
    redundantIntf?: pulumi.Input<string>;
    redundantMode?: pulumi.Input<string>;
    sim1Pin?: pulumi.Input<string>;
    sim1PinCode?: pulumi.Input<string>;
    sim2Pin?: pulumi.Input<string>;
    sim2PinCode?: pulumi.Input<string>;
}

export interface ExtenderControllerExtender1Modem1AutoSwitch {
    dataplan?: pulumi.Input<string>;
    disconnect?: pulumi.Input<string>;
    disconnectPeriod?: pulumi.Input<number>;
    disconnectThreshold?: pulumi.Input<number>;
    signal?: pulumi.Input<string>;
    switchBack?: pulumi.Input<string>;
    switchBackTime?: pulumi.Input<string>;
    switchBackTimer?: pulumi.Input<number>;
}

export interface ExtenderControllerExtender1Modem2 {
    autoSwitch?: pulumi.Input<inputs.ExtenderControllerExtender1Modem2AutoSwitch>;
    connStatus?: pulumi.Input<number>;
    defaultSim?: pulumi.Input<string>;
    gps?: pulumi.Input<string>;
    ifname?: pulumi.Input<string>;
    preferredCarrier?: pulumi.Input<string>;
    redundantIntf?: pulumi.Input<string>;
    redundantMode?: pulumi.Input<string>;
    sim1Pin?: pulumi.Input<string>;
    sim1PinCode?: pulumi.Input<string>;
    sim2Pin?: pulumi.Input<string>;
    sim2PinCode?: pulumi.Input<string>;
}

export interface ExtenderControllerExtender1Modem2AutoSwitch {
    dataplan?: pulumi.Input<string>;
    disconnect?: pulumi.Input<string>;
    disconnectPeriod?: pulumi.Input<number>;
    disconnectThreshold?: pulumi.Input<number>;
    signal?: pulumi.Input<string>;
    switchBack?: pulumi.Input<string>;
    switchBackTime?: pulumi.Input<string>;
    switchBackTimer?: pulumi.Input<number>;
}

export interface ExtenderControllerExtenderControllerReport {
    interval?: pulumi.Input<number>;
    signalThreshold?: pulumi.Input<number>;
    status?: pulumi.Input<string>;
}

export interface ExtenderControllerExtenderModem1 {
    autoSwitch?: pulumi.Input<inputs.ExtenderControllerExtenderModem1AutoSwitch>;
    connStatus?: pulumi.Input<number>;
    defaultSim?: pulumi.Input<string>;
    gps?: pulumi.Input<string>;
    ifname?: pulumi.Input<string>;
    preferredCarrier?: pulumi.Input<string>;
    redundantIntf?: pulumi.Input<string>;
    redundantMode?: pulumi.Input<string>;
    sim1Pin?: pulumi.Input<string>;
    sim1PinCode?: pulumi.Input<string>;
    sim2Pin?: pulumi.Input<string>;
    sim2PinCode?: pulumi.Input<string>;
}

export interface ExtenderControllerExtenderModem1AutoSwitch {
    dataplan?: pulumi.Input<string>;
    disconnect?: pulumi.Input<string>;
    disconnectPeriod?: pulumi.Input<number>;
    disconnectThreshold?: pulumi.Input<number>;
    signal?: pulumi.Input<string>;
    switchBack?: pulumi.Input<string>;
    switchBackTime?: pulumi.Input<string>;
    switchBackTimer?: pulumi.Input<number>;
}

export interface ExtenderControllerExtenderModem2 {
    autoSwitch?: pulumi.Input<inputs.ExtenderControllerExtenderModem2AutoSwitch>;
    connStatus?: pulumi.Input<number>;
    defaultSim?: pulumi.Input<string>;
    gps?: pulumi.Input<string>;
    ifname?: pulumi.Input<string>;
    preferredCarrier?: pulumi.Input<string>;
    redundantIntf?: pulumi.Input<string>;
    redundantMode?: pulumi.Input<string>;
    sim1Pin?: pulumi.Input<string>;
    sim1PinCode?: pulumi.Input<string>;
    sim2Pin?: pulumi.Input<string>;
    sim2PinCode?: pulumi.Input<string>;
}

export interface ExtenderControllerExtenderModem2AutoSwitch {
    dataplan?: pulumi.Input<string>;
    disconnect?: pulumi.Input<string>;
    disconnectPeriod?: pulumi.Input<number>;
    disconnectThreshold?: pulumi.Input<number>;
    signal?: pulumi.Input<string>;
    switchBack?: pulumi.Input<string>;
    switchBackTime?: pulumi.Input<string>;
    switchBackTimer?: pulumi.Input<number>;
}

export interface ExtenderControllerExtenderProfileCellular {
    controllerReport?: pulumi.Input<inputs.ExtenderControllerExtenderProfileCellularControllerReport>;
    dataplans?: pulumi.Input<pulumi.Input<inputs.ExtenderControllerExtenderProfileCellularDataplan>[]>;
    modem1?: pulumi.Input<inputs.ExtenderControllerExtenderProfileCellularModem1>;
    modem2?: pulumi.Input<inputs.ExtenderControllerExtenderProfileCellularModem2>;
    smsNotification?: pulumi.Input<inputs.ExtenderControllerExtenderProfileCellularSmsNotification>;
}

export interface ExtenderControllerExtenderProfileCellularControllerReport {
    interval?: pulumi.Input<number>;
    signalThreshold?: pulumi.Input<number>;
    status?: pulumi.Input<string>;
}

export interface ExtenderControllerExtenderProfileCellularDataplan {
    name?: pulumi.Input<string>;
}

export interface ExtenderControllerExtenderProfileCellularModem1 {
    autoSwitch?: pulumi.Input<inputs.ExtenderControllerExtenderProfileCellularModem1AutoSwitch>;
    connStatus?: pulumi.Input<number>;
    defaultSim?: pulumi.Input<string>;
    gps?: pulumi.Input<string>;
    preferredCarrier?: pulumi.Input<string>;
    redundantIntf?: pulumi.Input<string>;
    redundantMode?: pulumi.Input<string>;
    sim1Pin?: pulumi.Input<string>;
    sim1PinCode?: pulumi.Input<string>;
    sim2Pin?: pulumi.Input<string>;
    sim2PinCode?: pulumi.Input<string>;
}

export interface ExtenderControllerExtenderProfileCellularModem1AutoSwitch {
    dataplan?: pulumi.Input<string>;
    disconnect?: pulumi.Input<string>;
    disconnectPeriod?: pulumi.Input<number>;
    disconnectThreshold?: pulumi.Input<number>;
    signal?: pulumi.Input<string>;
    switchBack?: pulumi.Input<string>;
    switchBackTime?: pulumi.Input<string>;
    switchBackTimer?: pulumi.Input<number>;
}

export interface ExtenderControllerExtenderProfileCellularModem2 {
    autoSwitch?: pulumi.Input<inputs.ExtenderControllerExtenderProfileCellularModem2AutoSwitch>;
    connStatus?: pulumi.Input<number>;
    defaultSim?: pulumi.Input<string>;
    gps?: pulumi.Input<string>;
    preferredCarrier?: pulumi.Input<string>;
    redundantIntf?: pulumi.Input<string>;
    redundantMode?: pulumi.Input<string>;
    sim1Pin?: pulumi.Input<string>;
    sim1PinCode?: pulumi.Input<string>;
    sim2Pin?: pulumi.Input<string>;
    sim2PinCode?: pulumi.Input<string>;
}

export interface ExtenderControllerExtenderProfileCellularModem2AutoSwitch {
    dataplan?: pulumi.Input<string>;
    disconnect?: pulumi.Input<string>;
    disconnectPeriod?: pulumi.Input<number>;
    disconnectThreshold?: pulumi.Input<number>;
    signal?: pulumi.Input<string>;
    switchBack?: pulumi.Input<string>;
    switchBackTime?: pulumi.Input<string>;
    switchBackTimer?: pulumi.Input<number>;
}

export interface ExtenderControllerExtenderProfileCellularSmsNotification {
    alert?: pulumi.Input<inputs.ExtenderControllerExtenderProfileCellularSmsNotificationAlert>;
    receivers?: pulumi.Input<pulumi.Input<inputs.ExtenderControllerExtenderProfileCellularSmsNotificationReceiver>[]>;
    status?: pulumi.Input<string>;
}

export interface ExtenderControllerExtenderProfileCellularSmsNotificationAlert {
    dataExhausted?: pulumi.Input<string>;
    fgtBackupModeSwitch?: pulumi.Input<string>;
    lowSignalStrength?: pulumi.Input<string>;
    modeSwitch?: pulumi.Input<string>;
    osImageFallback?: pulumi.Input<string>;
    sessionDisconnect?: pulumi.Input<string>;
    systemReboot?: pulumi.Input<string>;
}

export interface ExtenderControllerExtenderProfileCellularSmsNotificationReceiver {
    alert?: pulumi.Input<string>;
    name?: pulumi.Input<string>;
    phoneNumber?: pulumi.Input<string>;
    status?: pulumi.Input<string>;
}

export interface ExtenderControllerExtenderProfileLanExtension {
    backhaulInterface?: pulumi.Input<string>;
    backhaulIp?: pulumi.Input<string>;
    backhauls?: pulumi.Input<pulumi.Input<inputs.ExtenderControllerExtenderProfileLanExtensionBackhaul>[]>;
    ipsecTunnel?: pulumi.Input<string>;
    linkLoadbalance?: pulumi.Input<string>;
}

export interface ExtenderControllerExtenderProfileLanExtensionBackhaul {
    name?: pulumi.Input<string>;
    port?: pulumi.Input<string>;
    role?: pulumi.Input<string>;
    weight?: pulumi.Input<number>;
}

export interface ExtenderControllerExtenderWanExtension {
    modem1Extension?: pulumi.Input<string>;
    modem2Extension?: pulumi.Input<string>;
}

export interface ExtensionControllerExtenderProfileCellular {
    controllerReport?: pulumi.Input<inputs.ExtensionControllerExtenderProfileCellularControllerReport>;
    dataplans?: pulumi.Input<pulumi.Input<inputs.ExtensionControllerExtenderProfileCellularDataplan>[]>;
    modem1?: pulumi.Input<inputs.ExtensionControllerExtenderProfileCellularModem1>;
    modem2?: pulumi.Input<inputs.ExtensionControllerExtenderProfileCellularModem2>;
    smsNotification?: pulumi.Input<inputs.ExtensionControllerExtenderProfileCellularSmsNotification>;
}

export interface ExtensionControllerExtenderProfileCellularControllerReport {
    interval?: pulumi.Input<number>;
    signalThreshold?: pulumi.Input<number>;
    status?: pulumi.Input<string>;
}

export interface ExtensionControllerExtenderProfileCellularDataplan {
    name?: pulumi.Input<string>;
}

export interface ExtensionControllerExtenderProfileCellularModem1 {
    autoSwitch?: pulumi.Input<inputs.ExtensionControllerExtenderProfileCellularModem1AutoSwitch>;
    connStatus?: pulumi.Input<number>;
    defaultSim?: pulumi.Input<string>;
    gps?: pulumi.Input<string>;
    preferredCarrier?: pulumi.Input<string>;
    redundantIntf?: pulumi.Input<string>;
    redundantMode?: pulumi.Input<string>;
    sim1Pin?: pulumi.Input<string>;
    sim1PinCode?: pulumi.Input<string>;
    sim2Pin?: pulumi.Input<string>;
    sim2PinCode?: pulumi.Input<string>;
}

export interface ExtensionControllerExtenderProfileCellularModem1AutoSwitch {
    dataplan?: pulumi.Input<string>;
    disconnect?: pulumi.Input<string>;
    disconnectPeriod?: pulumi.Input<number>;
    disconnectThreshold?: pulumi.Input<number>;
    signal?: pulumi.Input<string>;
    switchBack?: pulumi.Input<string>;
    switchBackTime?: pulumi.Input<string>;
    switchBackTimer?: pulumi.Input<number>;
}

export interface ExtensionControllerExtenderProfileCellularModem2 {
    autoSwitch?: pulumi.Input<inputs.ExtensionControllerExtenderProfileCellularModem2AutoSwitch>;
    connStatus?: pulumi.Input<number>;
    defaultSim?: pulumi.Input<string>;
    gps?: pulumi.Input<string>;
    preferredCarrier?: pulumi.Input<string>;
    redundantIntf?: pulumi.Input<string>;
    redundantMode?: pulumi.Input<string>;
    sim1Pin?: pulumi.Input<string>;
    sim1PinCode?: pulumi.Input<string>;
    sim2Pin?: pulumi.Input<string>;
    sim2PinCode?: pulumi.Input<string>;
}

export interface ExtensionControllerExtenderProfileCellularModem2AutoSwitch {
    dataplan?: pulumi.Input<string>;
    disconnect?: pulumi.Input<string>;
    disconnectPeriod?: pulumi.Input<number>;
    disconnectThreshold?: pulumi.Input<number>;
    signal?: pulumi.Input<string>;
    switchBack?: pulumi.Input<string>;
    switchBackTime?: pulumi.Input<string>;
    switchBackTimer?: pulumi.Input<number>;
}

export interface ExtensionControllerExtenderProfileCellularSmsNotification {
    alert?: pulumi.Input<inputs.ExtensionControllerExtenderProfileCellularSmsNotificationAlert>;
    receivers?: pulumi.Input<pulumi.Input<inputs.ExtensionControllerExtenderProfileCellularSmsNotificationReceiver>[]>;
    status?: pulumi.Input<string>;
}

export interface ExtensionControllerExtenderProfileCellularSmsNotificationAlert {
    dataExhausted?: pulumi.Input<string>;
    fgtBackupModeSwitch?: pulumi.Input<string>;
    lowSignalStrength?: pulumi.Input<string>;
    modeSwitch?: pulumi.Input<string>;
    osImageFallback?: pulumi.Input<string>;
    sessionDisconnect?: pulumi.Input<string>;
    systemReboot?: pulumi.Input<string>;
}

export interface ExtensionControllerExtenderProfileCellularSmsNotificationReceiver {
    alert?: pulumi.Input<string>;
    name?: pulumi.Input<string>;
    phoneNumber?: pulumi.Input<string>;
    status?: pulumi.Input<string>;
}

export interface ExtensionControllerExtenderProfileLanExtension {
    backhaulInterface?: pulumi.Input<string>;
    backhaulIp?: pulumi.Input<string>;
    backhauls?: pulumi.Input<pulumi.Input<inputs.ExtensionControllerExtenderProfileLanExtensionBackhaul>[]>;
    ipsecTunnel?: pulumi.Input<string>;
    linkLoadbalance?: pulumi.Input<string>;
}

export interface ExtensionControllerExtenderProfileLanExtensionBackhaul {
    name?: pulumi.Input<string>;
    port?: pulumi.Input<string>;
    role?: pulumi.Input<string>;
    weight?: pulumi.Input<number>;
}

export interface ExtensionControllerExtenderWanExtension {
    modem1Extension?: pulumi.Input<string>;
    modem2Extension?: pulumi.Input<string>;
}

export interface ExtensionControllerFortigateProfileLanExtension {
    backhaulInterface?: pulumi.Input<string>;
    backhaulIp?: pulumi.Input<string>;
    ipsecTunnel?: pulumi.Input<string>;
}

export interface FileFilterProfileRule {
    action?: pulumi.Input<string>;
    comment?: pulumi.Input<string>;
    direction?: pulumi.Input<string>;
    fileTypes?: pulumi.Input<pulumi.Input<inputs.FileFilterProfileRuleFileType>[]>;
    name?: pulumi.Input<string>;
    passwordProtected?: pulumi.Input<string>;
    protocol?: pulumi.Input<string>;
}

export interface FileFilterProfileRuleFileType {
    name?: pulumi.Input<string>;
}

export interface FirewallAccessProxy6ApiGateway {
    applications?: pulumi.Input<pulumi.Input<inputs.FirewallAccessProxy6ApiGatewayApplication>[]>;
    httpCookieAge?: pulumi.Input<number>;
    httpCookieDomain?: pulumi.Input<string>;
    httpCookieDomainFromHost?: pulumi.Input<string>;
    httpCookieGeneration?: pulumi.Input<number>;
    httpCookiePath?: pulumi.Input<string>;
    httpCookieShare?: pulumi.Input<string>;
    httpsCookieSecure?: pulumi.Input<string>;
    id?: pulumi.Input<number>;
    ldbMethod?: pulumi.Input<string>;
    persistence?: pulumi.Input<string>;
    realservers?: pulumi.Input<pulumi.Input<inputs.FirewallAccessProxy6ApiGatewayRealserver>[]>;
    samlRedirect?: pulumi.Input<string>;
    samlServer?: pulumi.Input<string>;
    service?: pulumi.Input<string>;
    sslAlgorithm?: pulumi.Input<string>;
    sslCipherSuites?: pulumi.Input<pulumi.Input<inputs.FirewallAccessProxy6ApiGatewaySslCipherSuite>[]>;
    sslDhBits?: pulumi.Input<string>;
    sslMaxVersion?: pulumi.Input<string>;
    sslMinVersion?: pulumi.Input<string>;
    sslVpnWebPortal?: pulumi.Input<string>;
    urlMap?: pulumi.Input<string>;
    urlMapType?: pulumi.Input<string>;
    virtualHost?: pulumi.Input<string>;
}

export interface FirewallAccessProxy6ApiGateway6 {
    applications?: pulumi.Input<pulumi.Input<inputs.FirewallAccessProxy6ApiGateway6Application>[]>;
    httpCookieAge?: pulumi.Input<number>;
    httpCookieDomain?: pulumi.Input<string>;
    httpCookieDomainFromHost?: pulumi.Input<string>;
    httpCookieGeneration?: pulumi.Input<number>;
    httpCookiePath?: pulumi.Input<string>;
    httpCookieShare?: pulumi.Input<string>;
    httpsCookieSecure?: pulumi.Input<string>;
    id?: pulumi.Input<number>;
    ldbMethod?: pulumi.Input<string>;
    persistence?: pulumi.Input<string>;
    realservers?: pulumi.Input<pulumi.Input<inputs.FirewallAccessProxy6ApiGateway6Realserver>[]>;
    samlRedirect?: pulumi.Input<string>;
    samlServer?: pulumi.Input<string>;
    service?: pulumi.Input<string>;
    sslAlgorithm?: pulumi.Input<string>;
    sslCipherSuites?: pulumi.Input<pulumi.Input<inputs.FirewallAccessProxy6ApiGateway6SslCipherSuite>[]>;
    sslDhBits?: pulumi.Input<string>;
    sslMaxVersion?: pulumi.Input<string>;
    sslMinVersion?: pulumi.Input<string>;
    sslVpnWebPortal?: pulumi.Input<string>;
    urlMap?: pulumi.Input<string>;
    urlMapType?: pulumi.Input<string>;
    virtualHost?: pulumi.Input<string>;
}

export interface FirewallAccessProxy6ApiGateway6Application {
    name?: pulumi.Input<string>;
}

export interface FirewallAccessProxy6ApiGateway6Realserver {
    addrType?: pulumi.Input<string>;
    address?: pulumi.Input<string>;
    domain?: pulumi.Input<string>;
    healthCheck?: pulumi.Input<string>;
    healthCheckProto?: pulumi.Input<string>;
    holddownInterval?: pulumi.Input<string>;
    httpHost?: pulumi.Input<string>;
    id?: pulumi.Input<number>;
    ip?: pulumi.Input<string>;
    mappedport?: pulumi.Input<string>;
    port?: pulumi.Input<number>;
    sshClientCert?: pulumi.Input<string>;
    sshHostKeyValidation?: pulumi.Input<string>;
    sshHostKeys?: pulumi.Input<pulumi.Input<inputs.FirewallAccessProxy6ApiGateway6RealserverSshHostKey>[]>;
    status?: pulumi.Input<string>;
    type?: pulumi.Input<string>;
    weight?: pulumi.Input<number>;
}

export interface FirewallAccessProxy6ApiGateway6RealserverSshHostKey {
    name?: pulumi.Input<string>;
}

export interface FirewallAccessProxy6ApiGateway6SslCipherSuite {
    cipher?: pulumi.Input<string>;
    priority?: pulumi.Input<number>;
    versions?: pulumi.Input<string>;
}

export interface FirewallAccessProxy6ApiGatewayApplication {
    name?: pulumi.Input<string>;
}

export interface FirewallAccessProxy6ApiGatewayRealserver {
    addrType?: pulumi.Input<string>;
    address?: pulumi.Input<string>;
    domain?: pulumi.Input<string>;
    healthCheck?: pulumi.Input<string>;
    healthCheckProto?: pulumi.Input<string>;
    holddownInterval?: pulumi.Input<string>;
    httpHost?: pulumi.Input<string>;
    id?: pulumi.Input<number>;
    ip?: pulumi.Input<string>;
    mappedport?: pulumi.Input<string>;
    port?: pulumi.Input<number>;
    sshClientCert?: pulumi.Input<string>;
    sshHostKeyValidation?: pulumi.Input<string>;
    sshHostKeys?: pulumi.Input<pulumi.Input<inputs.FirewallAccessProxy6ApiGatewayRealserverSshHostKey>[]>;
    status?: pulumi.Input<string>;
    type?: pulumi.Input<string>;
    weight?: pulumi.Input<number>;
}

export interface FirewallAccessProxy6ApiGatewayRealserverSshHostKey {
    name?: pulumi.Input<string>;
}

export interface FirewallAccessProxy6ApiGatewaySslCipherSuite {
    cipher?: pulumi.Input<string>;
    priority?: pulumi.Input<number>;
    versions?: pulumi.Input<string>;
}

export interface FirewallAccessProxyApiGateway {
    applications?: pulumi.Input<pulumi.Input<inputs.FirewallAccessProxyApiGatewayApplication>[]>;
    httpCookieAge?: pulumi.Input<number>;
    httpCookieDomain?: pulumi.Input<string>;
    httpCookieDomainFromHost?: pulumi.Input<string>;
    httpCookieGeneration?: pulumi.Input<number>;
    httpCookiePath?: pulumi.Input<string>;
    httpCookieShare?: pulumi.Input<string>;
    httpsCookieSecure?: pulumi.Input<string>;
    id?: pulumi.Input<number>;
    ldbMethod?: pulumi.Input<string>;
    persistence?: pulumi.Input<string>;
    realservers?: pulumi.Input<pulumi.Input<inputs.FirewallAccessProxyApiGatewayRealserver>[]>;
    samlRedirect?: pulumi.Input<string>;
    samlServer?: pulumi.Input<string>;
    service?: pulumi.Input<string>;
    sslAlgorithm?: pulumi.Input<string>;
    sslCipherSuites?: pulumi.Input<pulumi.Input<inputs.FirewallAccessProxyApiGatewaySslCipherSuite>[]>;
    sslDhBits?: pulumi.Input<string>;
    sslMaxVersion?: pulumi.Input<string>;
    sslMinVersion?: pulumi.Input<string>;
    sslVpnWebPortal?: pulumi.Input<string>;
    urlMap?: pulumi.Input<string>;
    urlMapType?: pulumi.Input<string>;
    virtualHost?: pulumi.Input<string>;
}

export interface FirewallAccessProxyApiGateway6 {
    applications?: pulumi.Input<pulumi.Input<inputs.FirewallAccessProxyApiGateway6Application>[]>;
    httpCookieAge?: pulumi.Input<number>;
    httpCookieDomain?: pulumi.Input<string>;
    httpCookieDomainFromHost?: pulumi.Input<string>;
    httpCookieGeneration?: pulumi.Input<number>;
    httpCookiePath?: pulumi.Input<string>;
    httpCookieShare?: pulumi.Input<string>;
    httpsCookieSecure?: pulumi.Input<string>;
    id?: pulumi.Input<number>;
    ldbMethod?: pulumi.Input<string>;
    persistence?: pulumi.Input<string>;
    realservers?: pulumi.Input<pulumi.Input<inputs.FirewallAccessProxyApiGateway6Realserver>[]>;
    samlRedirect?: pulumi.Input<string>;
    samlServer?: pulumi.Input<string>;
    service?: pulumi.Input<string>;
    sslAlgorithm?: pulumi.Input<string>;
    sslCipherSuites?: pulumi.Input<pulumi.Input<inputs.FirewallAccessProxyApiGateway6SslCipherSuite>[]>;
    sslDhBits?: pulumi.Input<string>;
    sslMaxVersion?: pulumi.Input<string>;
    sslMinVersion?: pulumi.Input<string>;
    sslVpnWebPortal?: pulumi.Input<string>;
    urlMap?: pulumi.Input<string>;
    urlMapType?: pulumi.Input<string>;
    virtualHost?: pulumi.Input<string>;
}

export interface FirewallAccessProxyApiGateway6Application {
    name?: pulumi.Input<string>;
}

export interface FirewallAccessProxyApiGateway6Realserver {
    addrType?: pulumi.Input<string>;
    address?: pulumi.Input<string>;
    domain?: pulumi.Input<string>;
    healthCheck?: pulumi.Input<string>;
    healthCheckProto?: pulumi.Input<string>;
    holddownInterval?: pulumi.Input<string>;
    httpHost?: pulumi.Input<string>;
    id?: pulumi.Input<number>;
    ip?: pulumi.Input<string>;
    mappedport?: pulumi.Input<string>;
    port?: pulumi.Input<number>;
    sshClientCert?: pulumi.Input<string>;
    sshHostKeyValidation?: pulumi.Input<string>;
    sshHostKeys?: pulumi.Input<pulumi.Input<inputs.FirewallAccessProxyApiGateway6RealserverSshHostKey>[]>;
    status?: pulumi.Input<string>;
    type?: pulumi.Input<string>;
    weight?: pulumi.Input<number>;
}

export interface FirewallAccessProxyApiGateway6RealserverSshHostKey {
    name?: pulumi.Input<string>;
}

export interface FirewallAccessProxyApiGateway6SslCipherSuite {
    cipher?: pulumi.Input<string>;
    priority?: pulumi.Input<number>;
    versions?: pulumi.Input<string>;
}

export interface FirewallAccessProxyApiGatewayApplication {
    name?: pulumi.Input<string>;
}

export interface FirewallAccessProxyApiGatewayRealserver {
    addrType?: pulumi.Input<string>;
    address?: pulumi.Input<string>;
    domain?: pulumi.Input<string>;
    healthCheck?: pulumi.Input<string>;
    healthCheckProto?: pulumi.Input<string>;
    holddownInterval?: pulumi.Input<string>;
    httpHost?: pulumi.Input<string>;
    id?: pulumi.Input<number>;
    ip?: pulumi.Input<string>;
    mappedport?: pulumi.Input<string>;
    port?: pulumi.Input<number>;
    sshClientCert?: pulumi.Input<string>;
    sshHostKeyValidation?: pulumi.Input<string>;
    sshHostKeys?: pulumi.Input<pulumi.Input<inputs.FirewallAccessProxyApiGatewayRealserverSshHostKey>[]>;
    status?: pulumi.Input<string>;
    type?: pulumi.Input<string>;
    weight?: pulumi.Input<number>;
}

export interface FirewallAccessProxyApiGatewayRealserverSshHostKey {
    name?: pulumi.Input<string>;
}

export interface FirewallAccessProxyApiGatewaySslCipherSuite {
    cipher?: pulumi.Input<string>;
    priority?: pulumi.Input<number>;
    versions?: pulumi.Input<string>;
}

export interface FirewallAccessProxySshClientCertCertExtension {
    critical?: pulumi.Input<string>;
    data?: pulumi.Input<string>;
    name?: pulumi.Input<string>;
    type?: pulumi.Input<string>;
}

export interface FirewallAddress6List {
    ip?: pulumi.Input<string>;
}

export interface FirewallAddress6Macaddr {
    macaddr?: pulumi.Input<string>;
}

export interface FirewallAddress6SubnetSegment {
    name?: pulumi.Input<string>;
    type?: pulumi.Input<string>;
    value?: pulumi.Input<string>;
}

export interface FirewallAddress6Tagging {
    category?: pulumi.Input<string>;
    name?: pulumi.Input<string>;
    tags?: pulumi.Input<pulumi.Input<inputs.FirewallAddress6TaggingTag>[]>;
}

export interface FirewallAddress6TaggingTag {
    name?: pulumi.Input<string>;
}

export interface FirewallAddress6TemplateSubnetSegment {
    bits?: pulumi.Input<number>;
    exclusive?: pulumi.Input<string>;
    id?: pulumi.Input<number>;
    name?: pulumi.Input<string>;
    values?: pulumi.Input<pulumi.Input<inputs.FirewallAddress6TemplateSubnetSegmentValue>[]>;
}

export interface FirewallAddress6TemplateSubnetSegmentValue {
    name?: pulumi.Input<string>;
    value?: pulumi.Input<string>;
}

export interface FirewallAddressFssoGroup {
    name?: pulumi.Input<string>;
}

export interface FirewallAddressList {
    ip?: pulumi.Input<string>;
}

export interface FirewallAddressMacaddr {
    macaddr?: pulumi.Input<string>;
}

export interface FirewallAddressTagging {
    category?: pulumi.Input<string>;
    name?: pulumi.Input<string>;
    tags?: pulumi.Input<pulumi.Input<inputs.FirewallAddressTaggingTag>[]>;
}

export interface FirewallAddressTaggingTag {
    name?: pulumi.Input<string>;
}

export interface FirewallAddrgrp6Member {
    name?: pulumi.Input<string>;
}

export interface FirewallAddrgrp6Tagging {
    category?: pulumi.Input<string>;
    name?: pulumi.Input<string>;
    tags?: pulumi.Input<pulumi.Input<inputs.FirewallAddrgrp6TaggingTag>[]>;
}

export interface FirewallAddrgrp6TaggingTag {
    name?: pulumi.Input<string>;
}

export interface FirewallAddrgrpExcludeMember {
    name?: pulumi.Input<string>;
}

export interface FirewallAddrgrpMember {
    name?: pulumi.Input<string>;
}

export interface FirewallAddrgrpTagging {
    category?: pulumi.Input<string>;
    name?: pulumi.Input<string>;
    tags?: pulumi.Input<pulumi.Input<inputs.FirewallAddrgrpTaggingTag>[]>;
}

export interface FirewallAddrgrpTaggingTag {
    name?: pulumi.Input<string>;
}

export interface FirewallAuthPortalGroup {
    name?: pulumi.Input<string>;
}

export interface FirewallCentralSnatMapDstAddr {
    name?: pulumi.Input<string>;
}

export interface FirewallCentralSnatMapDstAddr6 {
    name?: pulumi.Input<string>;
}

export interface FirewallCentralSnatMapDstintf {
    name?: pulumi.Input<string>;
}

export interface FirewallCentralSnatMapNatIppool {
    name?: pulumi.Input<string>;
}

export interface FirewallCentralSnatMapNatIppool6 {
    name?: pulumi.Input<string>;
}

export interface FirewallCentralSnatMapOrigAddr {
    name?: pulumi.Input<string>;
}

export interface FirewallCentralSnatMapOrigAddr6 {
    name?: pulumi.Input<string>;
}

export interface FirewallCentralSnatMapSrcintf {
    name?: pulumi.Input<string>;
}

export interface FirewallConsolidatedPolicyAppCategory {
    id?: pulumi.Input<number>;
}

export interface FirewallConsolidatedPolicyAppGroup {
    name?: pulumi.Input<string>;
}

export interface FirewallConsolidatedPolicyApplication {
    id?: pulumi.Input<number>;
}

export interface FirewallConsolidatedPolicyDstaddr4 {
    name?: pulumi.Input<string>;
}

export interface FirewallConsolidatedPolicyDstaddr6 {
    name?: pulumi.Input<string>;
}

export interface FirewallConsolidatedPolicyDstintf {
    name?: pulumi.Input<string>;
}

export interface FirewallConsolidatedPolicyFssoGroup {
    name?: pulumi.Input<string>;
}

export interface FirewallConsolidatedPolicyGroup {
    name?: pulumi.Input<string>;
}

export interface FirewallConsolidatedPolicyInternetServiceCustom {
    name?: pulumi.Input<string>;
}

export interface FirewallConsolidatedPolicyInternetServiceCustomGroup {
    name?: pulumi.Input<string>;
}

export interface FirewallConsolidatedPolicyInternetServiceGroup {
    name?: pulumi.Input<string>;
}

export interface FirewallConsolidatedPolicyInternetServiceId {
    id?: pulumi.Input<number>;
}

export interface FirewallConsolidatedPolicyInternetServiceName {
    name?: pulumi.Input<string>;
}

export interface FirewallConsolidatedPolicyInternetServiceSrcCustom {
    name?: pulumi.Input<string>;
}

export interface FirewallConsolidatedPolicyInternetServiceSrcCustomGroup {
    name?: pulumi.Input<string>;
}

export interface FirewallConsolidatedPolicyInternetServiceSrcGroup {
    name?: pulumi.Input<string>;
}

export interface FirewallConsolidatedPolicyInternetServiceSrcId {
    id?: pulumi.Input<number>;
}

export interface FirewallConsolidatedPolicyInternetServiceSrcName {
    name?: pulumi.Input<string>;
}

export interface FirewallConsolidatedPolicyPoolname4 {
    name?: pulumi.Input<string>;
}

export interface FirewallConsolidatedPolicyPoolname6 {
    name?: pulumi.Input<string>;
}

export interface FirewallConsolidatedPolicyService {
    name?: pulumi.Input<string>;
}

export interface FirewallConsolidatedPolicySrcaddr4 {
    name?: pulumi.Input<string>;
}

export interface FirewallConsolidatedPolicySrcaddr6 {
    name?: pulumi.Input<string>;
}

export interface FirewallConsolidatedPolicySrcintf {
    name?: pulumi.Input<string>;
}

export interface FirewallConsolidatedPolicyUrlCategory {
    id?: pulumi.Input<number>;
}

export interface FirewallConsolidatedPolicyUser {
    name?: pulumi.Input<string>;
}

export interface FirewallCountryRegion {
    id?: pulumi.Input<number>;
}

export interface FirewallDecryptedTrafficMirrorInterface {
    name?: pulumi.Input<string>;
}

export interface FirewallDosPolicy6Anomaly {
    action?: pulumi.Input<string>;
    log?: pulumi.Input<string>;
    name?: pulumi.Input<string>;
    quarantine?: pulumi.Input<string>;
    quarantineExpiry?: pulumi.Input<string>;
    quarantineLog?: pulumi.Input<string>;
    status?: pulumi.Input<string>;
    threshold?: pulumi.Input<number>;
    thresholddefault?: pulumi.Input<number>;
}

export interface FirewallDosPolicy6Dstaddr {
    name?: pulumi.Input<string>;
}

export interface FirewallDosPolicy6Service {
    name?: pulumi.Input<string>;
}

export interface FirewallDosPolicy6Srcaddr {
    name?: pulumi.Input<string>;
}

export interface FirewallDosPolicyAnomaly {
    action?: pulumi.Input<string>;
    log?: pulumi.Input<string>;
    name?: pulumi.Input<string>;
    quarantine?: pulumi.Input<string>;
    quarantineExpiry?: pulumi.Input<string>;
    quarantineLog?: pulumi.Input<string>;
    status?: pulumi.Input<string>;
    threshold?: pulumi.Input<number>;
    thresholddefault?: pulumi.Input<number>;
}

export interface FirewallDosPolicyDstaddr {
    name?: pulumi.Input<string>;
}

export interface FirewallDosPolicyService {
    name?: pulumi.Input<string>;
}

export interface FirewallDosPolicySrcaddr {
    name?: pulumi.Input<string>;
}

export interface FirewallIdentityBasedRouteRule {
    device?: pulumi.Input<string>;
    gateway?: pulumi.Input<string>;
    groups?: pulumi.Input<pulumi.Input<inputs.FirewallIdentityBasedRouteRuleGroup>[]>;
    id?: pulumi.Input<number>;
}

export interface FirewallIdentityBasedRouteRuleGroup {
    name?: pulumi.Input<string>;
}

export interface FirewallInterfacePolicy6Dstaddr6 {
    name?: pulumi.Input<string>;
}

export interface FirewallInterfacePolicy6Service6 {
    name?: pulumi.Input<string>;
}

export interface FirewallInterfacePolicy6Srcaddr6 {
    name?: pulumi.Input<string>;
}

export interface FirewallInterfacePolicyDstaddr {
    name?: pulumi.Input<string>;
}

export interface FirewallInterfacePolicyService {
    name?: pulumi.Input<string>;
}

export interface FirewallInterfacePolicySrcaddr {
    name?: pulumi.Input<string>;
}

export interface FirewallInternetServiceAdditionEntry {
    addrMode?: pulumi.Input<string>;
    id?: pulumi.Input<number>;
    portRanges?: pulumi.Input<pulumi.Input<inputs.FirewallInternetServiceAdditionEntryPortRange>[]>;
    protocol?: pulumi.Input<number>;
}

export interface FirewallInternetServiceAdditionEntryPortRange {
    endPort?: pulumi.Input<number>;
    id?: pulumi.Input<number>;
    startPort?: pulumi.Input<number>;
}

export interface FirewallInternetServiceCustomEntry {
    addrMode?: pulumi.Input<string>;
    dst6s?: pulumi.Input<pulumi.Input<inputs.FirewallInternetServiceCustomEntryDst6>[]>;
    dsts?: pulumi.Input<pulumi.Input<inputs.FirewallInternetServiceCustomEntryDst>[]>;
    id?: pulumi.Input<number>;
    portRanges?: pulumi.Input<pulumi.Input<inputs.FirewallInternetServiceCustomEntryPortRange>[]>;
    protocol?: pulumi.Input<number>;
}

export interface FirewallInternetServiceCustomEntryDst {
    name?: pulumi.Input<string>;
}

export interface FirewallInternetServiceCustomEntryDst6 {
    name?: pulumi.Input<string>;
}

export interface FirewallInternetServiceCustomEntryPortRange {
    endPort?: pulumi.Input<number>;
    id?: pulumi.Input<number>;
    startPort?: pulumi.Input<number>;
}

export interface FirewallInternetServiceCustomGroupMember {
    name?: pulumi.Input<string>;
}

export interface FirewallInternetServiceDefinitionEntry {
    categoryId?: pulumi.Input<number>;
    name?: pulumi.Input<string>;
    port?: pulumi.Input<number>;
    portRanges?: pulumi.Input<pulumi.Input<inputs.FirewallInternetServiceDefinitionEntryPortRange>[]>;
    protocol?: pulumi.Input<number>;
    seqNum?: pulumi.Input<number>;
}

export interface FirewallInternetServiceDefinitionEntryPortRange {
    endPort?: pulumi.Input<number>;
    id?: pulumi.Input<number>;
    startPort?: pulumi.Input<number>;
}

export interface FirewallInternetServiceExtensionDisableEntry {
    addrMode?: pulumi.Input<string>;
    id?: pulumi.Input<number>;
    ip6Ranges?: pulumi.Input<pulumi.Input<inputs.FirewallInternetServiceExtensionDisableEntryIp6Range>[]>;
    ipRanges?: pulumi.Input<pulumi.Input<inputs.FirewallInternetServiceExtensionDisableEntryIpRange>[]>;
    port?: pulumi.Input<number>;
    portRanges?: pulumi.Input<pulumi.Input<inputs.FirewallInternetServiceExtensionDisableEntryPortRange>[]>;
    protocol?: pulumi.Input<number>;
}

export interface FirewallInternetServiceExtensionDisableEntryIp6Range {
    endIp6?: pulumi.Input<string>;
    id?: pulumi.Input<number>;
    startIp6?: pulumi.Input<string>;
}

export interface FirewallInternetServiceExtensionDisableEntryIpRange {
    endIp?: pulumi.Input<string>;
    id?: pulumi.Input<number>;
    startIp?: pulumi.Input<string>;
}

export interface FirewallInternetServiceExtensionDisableEntryPortRange {
    endPort?: pulumi.Input<number>;
    id?: pulumi.Input<number>;
    startPort?: pulumi.Input<number>;
}

export interface FirewallInternetServiceExtensionEntry {
    addrMode?: pulumi.Input<string>;
    dst6s?: pulumi.Input<pulumi.Input<inputs.FirewallInternetServiceExtensionEntryDst6>[]>;
    dsts?: pulumi.Input<pulumi.Input<inputs.FirewallInternetServiceExtensionEntryDst>[]>;
    id?: pulumi.Input<number>;
    portRanges?: pulumi.Input<pulumi.Input<inputs.FirewallInternetServiceExtensionEntryPortRange>[]>;
    protocol?: pulumi.Input<number>;
}

export interface FirewallInternetServiceExtensionEntryDst {
    name?: pulumi.Input<string>;
}

export interface FirewallInternetServiceExtensionEntryDst6 {
    name?: pulumi.Input<string>;
}

export interface FirewallInternetServiceExtensionEntryPortRange {
    endPort?: pulumi.Input<number>;
    id?: pulumi.Input<number>;
    startPort?: pulumi.Input<number>;
}

export interface FirewallInternetServiceGroupMember {
    id?: pulumi.Input<number>;
    name?: pulumi.Input<string>;
}

export interface FirewallLocalInPolicy6Dstaddr {
    name?: pulumi.Input<string>;
}

export interface FirewallLocalInPolicy6Service {
    name?: pulumi.Input<string>;
}

export interface FirewallLocalInPolicy6Srcaddr {
    name?: pulumi.Input<string>;
}

export interface FirewallLocalInPolicyDstaddr {
    name?: pulumi.Input<string>;
}

export interface FirewallLocalInPolicyService {
    name?: pulumi.Input<string>;
}

export interface FirewallLocalInPolicySrcaddr {
    name?: pulumi.Input<string>;
}

export interface FirewallMulticastAddress6Tagging {
    category?: pulumi.Input<string>;
    name?: pulumi.Input<string>;
    tags?: pulumi.Input<pulumi.Input<inputs.FirewallMulticastAddress6TaggingTag>[]>;
}

export interface FirewallMulticastAddress6TaggingTag {
    name?: pulumi.Input<string>;
}

export interface FirewallMulticastAddressTagging {
    category?: pulumi.Input<string>;
    name?: pulumi.Input<string>;
    tags?: pulumi.Input<pulumi.Input<inputs.FirewallMulticastAddressTaggingTag>[]>;
}

export interface FirewallMulticastAddressTaggingTag {
    name?: pulumi.Input<string>;
}

export interface FirewallMulticastPolicy6Dstaddr {
    name?: pulumi.Input<string>;
}

export interface FirewallMulticastPolicy6Srcaddr {
    name?: pulumi.Input<string>;
}

export interface FirewallMulticastPolicyDstaddr {
    name?: pulumi.Input<string>;
}

export interface FirewallMulticastPolicySrcaddr {
    name?: pulumi.Input<string>;
}

export interface FirewallPolicy46Dstaddr {
    name?: pulumi.Input<string>;
}

export interface FirewallPolicy46Poolname {
    name?: pulumi.Input<string>;
}

export interface FirewallPolicy46Service {
    name?: pulumi.Input<string>;
}

export interface FirewallPolicy46Srcaddr {
    name?: pulumi.Input<string>;
}

export interface FirewallPolicy64Dstaddr {
    name?: pulumi.Input<string>;
}

export interface FirewallPolicy64Poolname {
    name?: pulumi.Input<string>;
}

export interface FirewallPolicy64Service {
    name?: pulumi.Input<string>;
}

export interface FirewallPolicy64Srcaddr {
    name?: pulumi.Input<string>;
}

export interface FirewallPolicy6AppCategory {
    id?: pulumi.Input<number>;
}

export interface FirewallPolicy6AppGroup {
    name?: pulumi.Input<string>;
}

export interface FirewallPolicy6Application {
    id?: pulumi.Input<number>;
}

export interface FirewallPolicy6CustomLogField {
    fieldId?: pulumi.Input<string>;
}

export interface FirewallPolicy6Device {
    name?: pulumi.Input<string>;
}

export interface FirewallPolicy6Dstaddr {
    name?: pulumi.Input<string>;
}

export interface FirewallPolicy6Dstintf {
    name?: pulumi.Input<string>;
}

export interface FirewallPolicy6FssoGroup {
    name?: pulumi.Input<string>;
}

export interface FirewallPolicy6Group {
    name?: pulumi.Input<string>;
}

export interface FirewallPolicy6Poolname {
    name?: pulumi.Input<string>;
}

export interface FirewallPolicy6Service {
    name?: pulumi.Input<string>;
}

export interface FirewallPolicy6Srcaddr {
    name?: pulumi.Input<string>;
}

export interface FirewallPolicy6Srcintf {
    name?: pulumi.Input<string>;
}

export interface FirewallPolicy6SslMirrorIntf {
    name?: pulumi.Input<string>;
}

export interface FirewallPolicy6UrlCategory {
    id?: pulumi.Input<number>;
}

export interface FirewallPolicy6User {
    name?: pulumi.Input<string>;
}

export interface FirewallPolicyAppCategory {
    id?: pulumi.Input<number>;
}

export interface FirewallPolicyAppGroup {
    name?: pulumi.Input<string>;
}

export interface FirewallPolicyApplication {
    id?: pulumi.Input<number>;
}

export interface FirewallPolicyCustomLogField {
    fieldId?: pulumi.Input<string>;
}

export interface FirewallPolicyDevice {
    name?: pulumi.Input<string>;
}

export interface FirewallPolicyDstaddr {
    name?: pulumi.Input<string>;
}

export interface FirewallPolicyDstaddr6 {
    name?: pulumi.Input<string>;
}

export interface FirewallPolicyDstintf {
    name?: pulumi.Input<string>;
}

export interface FirewallPolicyFssoGroup {
    name?: pulumi.Input<string>;
}

export interface FirewallPolicyGroup {
    name?: pulumi.Input<string>;
}

export interface FirewallPolicyInternetService6Custom {
    name?: pulumi.Input<string>;
}

export interface FirewallPolicyInternetService6CustomGroup {
    name?: pulumi.Input<string>;
}

export interface FirewallPolicyInternetService6Group {
    name?: pulumi.Input<string>;
}

export interface FirewallPolicyInternetService6Name {
    name?: pulumi.Input<string>;
}

export interface FirewallPolicyInternetService6SrcCustom {
    name?: pulumi.Input<string>;
}

export interface FirewallPolicyInternetService6SrcCustomGroup {
    name?: pulumi.Input<string>;
}

export interface FirewallPolicyInternetService6SrcGroup {
    name?: pulumi.Input<string>;
}

export interface FirewallPolicyInternetService6SrcName {
    name?: pulumi.Input<string>;
}

export interface FirewallPolicyInternetServiceCustom {
    name?: pulumi.Input<string>;
}

export interface FirewallPolicyInternetServiceCustomGroup {
    name?: pulumi.Input<string>;
}

export interface FirewallPolicyInternetServiceGroup {
    name?: pulumi.Input<string>;
}

export interface FirewallPolicyInternetServiceId {
    id?: pulumi.Input<number>;
}

export interface FirewallPolicyInternetServiceName {
    name?: pulumi.Input<string>;
}

export interface FirewallPolicyInternetServiceSrcCustom {
    name?: pulumi.Input<string>;
}

export interface FirewallPolicyInternetServiceSrcCustomGroup {
    name?: pulumi.Input<string>;
}

export interface FirewallPolicyInternetServiceSrcGroup {
    name?: pulumi.Input<string>;
}

export interface FirewallPolicyInternetServiceSrcId {
    id?: pulumi.Input<number>;
}

export interface FirewallPolicyInternetServiceSrcName {
    name?: pulumi.Input<string>;
}

export interface FirewallPolicyNetworkServiceDynamic {
    name?: pulumi.Input<string>;
}

export interface FirewallPolicyNetworkServiceSrcDynamic {
    name?: pulumi.Input<string>;
}

export interface FirewallPolicyNtlmEnabledBrowser {
    userAgentString?: pulumi.Input<string>;
}

export interface FirewallPolicyPoolname {
    name?: pulumi.Input<string>;
}

export interface FirewallPolicyPoolname6 {
    name?: pulumi.Input<string>;
}

export interface FirewallPolicyRtpAddr {
    name?: pulumi.Input<string>;
}

export interface FirewallPolicyService {
    name?: pulumi.Input<string>;
}

export interface FirewallPolicySgt {
    id?: pulumi.Input<number>;
}

export interface FirewallPolicySrcVendorMac {
    id?: pulumi.Input<number>;
}

export interface FirewallPolicySrcaddr {
    name?: pulumi.Input<string>;
}

export interface FirewallPolicySrcaddr6 {
    name?: pulumi.Input<string>;
}

export interface FirewallPolicySrcintf {
    name?: pulumi.Input<string>;
}

export interface FirewallPolicySslMirrorIntf {
    name?: pulumi.Input<string>;
}

export interface FirewallPolicyUrlCategory {
    id?: pulumi.Input<number>;
}

export interface FirewallPolicyUser {
    name?: pulumi.Input<string>;
}

export interface FirewallPolicyZtnaEmsTag {
    name?: pulumi.Input<string>;
}

export interface FirewallPolicyZtnaGeoTag {
    name?: pulumi.Input<string>;
}

export interface FirewallProfileProtocolOptionsCifs {
    domainController?: pulumi.Input<string>;
    options?: pulumi.Input<string>;
    oversizeLimit?: pulumi.Input<number>;
    ports?: pulumi.Input<number>;
    scanBzip2?: pulumi.Input<string>;
    serverCredentialType?: pulumi.Input<string>;
    serverKeytabs?: pulumi.Input<pulumi.Input<inputs.FirewallProfileProtocolOptionsCifsServerKeytab>[]>;
    status?: pulumi.Input<string>;
    tcpWindowMaximum?: pulumi.Input<number>;
    tcpWindowMinimum?: pulumi.Input<number>;
    tcpWindowSize?: pulumi.Input<number>;
    tcpWindowType?: pulumi.Input<string>;
    uncompressedNestLimit?: pulumi.Input<number>;
    uncompressedOversizeLimit?: pulumi.Input<number>;
}

export interface FirewallProfileProtocolOptionsCifsServerKeytab {
    keytab?: pulumi.Input<string>;
    principal?: pulumi.Input<string>;
}

export interface FirewallProfileProtocolOptionsDns {
    ports?: pulumi.Input<number>;
    status?: pulumi.Input<string>;
}

export interface FirewallProfileProtocolOptionsFtp {
    comfortAmount?: pulumi.Input<number>;
    comfortInterval?: pulumi.Input<number>;
    explicitFtpTls?: pulumi.Input<string>;
    inspectAll?: pulumi.Input<string>;
    options?: pulumi.Input<string>;
    oversizeLimit?: pulumi.Input<number>;
    ports?: pulumi.Input<number>;
    scanBzip2?: pulumi.Input<string>;
    sslOffloaded?: pulumi.Input<string>;
    status?: pulumi.Input<string>;
    streamBasedUncompressedLimit?: pulumi.Input<number>;
    tcpWindowMaximum?: pulumi.Input<number>;
    tcpWindowMinimum?: pulumi.Input<number>;
    tcpWindowSize?: pulumi.Input<number>;
    tcpWindowType?: pulumi.Input<string>;
    uncompressedNestLimit?: pulumi.Input<number>;
    uncompressedOversizeLimit?: pulumi.Input<number>;
}

export interface FirewallProfileProtocolOptionsHttp {
    addressIpRating?: pulumi.Input<string>;
    blockPageStatusCode?: pulumi.Input<number>;
    comfortAmount?: pulumi.Input<number>;
    comfortInterval?: pulumi.Input<number>;
    fortinetBar?: pulumi.Input<string>;
    fortinetBarPort?: pulumi.Input<number>;
    h2c?: pulumi.Input<string>;
    httpPolicy?: pulumi.Input<string>;
    inspectAll?: pulumi.Input<string>;
    options?: pulumi.Input<string>;
    oversizeLimit?: pulumi.Input<number>;
    ports?: pulumi.Input<number>;
    postLang?: pulumi.Input<string>;
    proxyAfterTcpHandshake?: pulumi.Input<string>;
    rangeBlock?: pulumi.Input<string>;
    retryCount?: pulumi.Input<number>;
    scanBzip2?: pulumi.Input<string>;
    sslOffloaded?: pulumi.Input<string>;
    status?: pulumi.Input<string>;
    streamBasedUncompressedLimit?: pulumi.Input<number>;
    streamingContentBypass?: pulumi.Input<string>;
    stripXForwardedFor?: pulumi.Input<string>;
    switchingProtocols?: pulumi.Input<string>;
    tcpWindowMaximum?: pulumi.Input<number>;
    tcpWindowMinimum?: pulumi.Input<number>;
    tcpWindowSize?: pulumi.Input<number>;
    tcpWindowType?: pulumi.Input<string>;
    tunnelNonHttp?: pulumi.Input<string>;
    uncompressedNestLimit?: pulumi.Input<number>;
    uncompressedOversizeLimit?: pulumi.Input<number>;
    unknownHttpVersion?: pulumi.Input<string>;
    verifyDnsForPolicyMatching?: pulumi.Input<string>;
}

export interface FirewallProfileProtocolOptionsImap {
    inspectAll?: pulumi.Input<string>;
    options?: pulumi.Input<string>;
    oversizeLimit?: pulumi.Input<number>;
    ports?: pulumi.Input<number>;
    proxyAfterTcpHandshake?: pulumi.Input<string>;
    scanBzip2?: pulumi.Input<string>;
    sslOffloaded?: pulumi.Input<string>;
    status?: pulumi.Input<string>;
    uncompressedNestLimit?: pulumi.Input<number>;
    uncompressedOversizeLimit?: pulumi.Input<number>;
}

export interface FirewallProfileProtocolOptionsMailSignature {
    signature?: pulumi.Input<string>;
    status?: pulumi.Input<string>;
}

export interface FirewallProfileProtocolOptionsMapi {
    options?: pulumi.Input<string>;
    oversizeLimit?: pulumi.Input<number>;
    ports?: pulumi.Input<number>;
    scanBzip2?: pulumi.Input<string>;
    status?: pulumi.Input<string>;
    uncompressedNestLimit?: pulumi.Input<number>;
    uncompressedOversizeLimit?: pulumi.Input<number>;
}

export interface FirewallProfileProtocolOptionsNntp {
    inspectAll?: pulumi.Input<string>;
    options?: pulumi.Input<string>;
    oversizeLimit?: pulumi.Input<number>;
    ports?: pulumi.Input<number>;
    proxyAfterTcpHandshake?: pulumi.Input<string>;
    scanBzip2?: pulumi.Input<string>;
    status?: pulumi.Input<string>;
    uncompressedNestLimit?: pulumi.Input<number>;
    uncompressedOversizeLimit?: pulumi.Input<number>;
}

export interface FirewallProfileProtocolOptionsPop3 {
    inspectAll?: pulumi.Input<string>;
    options?: pulumi.Input<string>;
    oversizeLimit?: pulumi.Input<number>;
    ports?: pulumi.Input<number>;
    proxyAfterTcpHandshake?: pulumi.Input<string>;
    scanBzip2?: pulumi.Input<string>;
    sslOffloaded?: pulumi.Input<string>;
    status?: pulumi.Input<string>;
    uncompressedNestLimit?: pulumi.Input<number>;
    uncompressedOversizeLimit?: pulumi.Input<number>;
}

export interface FirewallProfileProtocolOptionsSmtp {
    inspectAll?: pulumi.Input<string>;
    options?: pulumi.Input<string>;
    oversizeLimit?: pulumi.Input<number>;
    ports?: pulumi.Input<number>;
    proxyAfterTcpHandshake?: pulumi.Input<string>;
    scanBzip2?: pulumi.Input<string>;
    serverBusy?: pulumi.Input<string>;
    sslOffloaded?: pulumi.Input<string>;
    status?: pulumi.Input<string>;
    uncompressedNestLimit?: pulumi.Input<number>;
    uncompressedOversizeLimit?: pulumi.Input<number>;
}

export interface FirewallProfileProtocolOptionsSsh {
    comfortAmount?: pulumi.Input<number>;
    comfortInterval?: pulumi.Input<number>;
    options?: pulumi.Input<string>;
    oversizeLimit?: pulumi.Input<number>;
    scanBzip2?: pulumi.Input<string>;
    sslOffloaded?: pulumi.Input<string>;
    streamBasedUncompressedLimit?: pulumi.Input<number>;
    tcpWindowMaximum?: pulumi.Input<number>;
    tcpWindowMinimum?: pulumi.Input<number>;
    tcpWindowSize?: pulumi.Input<number>;
    tcpWindowType?: pulumi.Input<string>;
    uncompressedNestLimit?: pulumi.Input<number>;
    uncompressedOversizeLimit?: pulumi.Input<number>;
}

export interface FirewallProxyAddressApplication {
    name?: pulumi.Input<string>;
}

export interface FirewallProxyAddressCategory {
    id?: pulumi.Input<number>;
}

export interface FirewallProxyAddressHeaderGroup {
    caseSensitivity?: pulumi.Input<string>;
    header?: pulumi.Input<string>;
    headerName?: pulumi.Input<string>;
    id?: pulumi.Input<number>;
}

export interface FirewallProxyAddressTagging {
    category?: pulumi.Input<string>;
    name?: pulumi.Input<string>;
    tags?: pulumi.Input<pulumi.Input<inputs.FirewallProxyAddressTaggingTag>[]>;
}

export interface FirewallProxyAddressTaggingTag {
    name?: pulumi.Input<string>;
}

export interface FirewallProxyAddrgrpMember {
    name?: pulumi.Input<string>;
}

export interface FirewallProxyAddrgrpTagging {
    category?: pulumi.Input<string>;
    name?: pulumi.Input<string>;
    tags?: pulumi.Input<pulumi.Input<inputs.FirewallProxyAddrgrpTaggingTag>[]>;
}

export interface FirewallProxyAddrgrpTaggingTag {
    name?: pulumi.Input<string>;
}

export interface FirewallProxyPolicyAccessProxy {
    name?: pulumi.Input<string>;
}

export interface FirewallProxyPolicyAccessProxy6 {
    name?: pulumi.Input<string>;
}

export interface FirewallProxyPolicyDstaddr {
    name?: pulumi.Input<string>;
}

export interface FirewallProxyPolicyDstaddr6 {
    name?: pulumi.Input<string>;
}

export interface FirewallProxyPolicyDstintf {
    name?: pulumi.Input<string>;
}

export interface FirewallProxyPolicyGroup {
    name?: pulumi.Input<string>;
}

export interface FirewallProxyPolicyInternetServiceCustom {
    name?: pulumi.Input<string>;
}

export interface FirewallProxyPolicyInternetServiceCustomGroup {
    name?: pulumi.Input<string>;
}

export interface FirewallProxyPolicyInternetServiceGroup {
    name?: pulumi.Input<string>;
}

export interface FirewallProxyPolicyInternetServiceId {
    id?: pulumi.Input<number>;
}

export interface FirewallProxyPolicyInternetServiceName {
    name?: pulumi.Input<string>;
}

export interface FirewallProxyPolicyPoolname {
    name?: pulumi.Input<string>;
}

export interface FirewallProxyPolicyService {
    name?: pulumi.Input<string>;
}

export interface FirewallProxyPolicySrcaddr {
    name?: pulumi.Input<string>;
}

export interface FirewallProxyPolicySrcaddr6 {
    name?: pulumi.Input<string>;
}

export interface FirewallProxyPolicySrcintf {
    name?: pulumi.Input<string>;
}

export interface FirewallProxyPolicyUser {
    name?: pulumi.Input<string>;
}

export interface FirewallProxyPolicyZtnaEmsTag {
    name?: pulumi.Input<string>;
}

export interface FirewallRegionCity {
    id?: pulumi.Input<number>;
}

export interface FirewallScheduleGroupMember {
    name?: pulumi.Input<string>;
}

export interface FirewallSecurityPolicyAppCategory {
    id?: pulumi.Input<number>;
}

export interface FirewallSecurityPolicyAppGroup {
    name?: pulumi.Input<string>;
}

export interface FirewallSecurityPolicyApplication {
    id?: pulumi.Input<number>;
}

export interface FirewallSecurityPolicyDstaddr {
    name?: pulumi.Input<string>;
}

export interface FirewallSecurityPolicyDstaddr4 {
    name?: pulumi.Input<string>;
}

export interface FirewallSecurityPolicyDstaddr6 {
    name?: pulumi.Input<string>;
}

export interface FirewallSecurityPolicyDstintf {
    name?: pulumi.Input<string>;
}

export interface FirewallSecurityPolicyFssoGroup {
    name?: pulumi.Input<string>;
}

export interface FirewallSecurityPolicyGroup {
    name?: pulumi.Input<string>;
}

export interface FirewallSecurityPolicyInternetService6Custom {
    name?: pulumi.Input<string>;
}

export interface FirewallSecurityPolicyInternetService6CustomGroup {
    name?: pulumi.Input<string>;
}

export interface FirewallSecurityPolicyInternetService6Group {
    name?: pulumi.Input<string>;
}

export interface FirewallSecurityPolicyInternetService6Name {
    name?: pulumi.Input<string>;
}

export interface FirewallSecurityPolicyInternetService6SrcCustom {
    name?: pulumi.Input<string>;
}

export interface FirewallSecurityPolicyInternetService6SrcCustomGroup {
    name?: pulumi.Input<string>;
}

export interface FirewallSecurityPolicyInternetService6SrcGroup {
    name?: pulumi.Input<string>;
}

export interface FirewallSecurityPolicyInternetService6SrcName {
    name?: pulumi.Input<string>;
}

export interface FirewallSecurityPolicyInternetServiceCustom {
    name?: pulumi.Input<string>;
}

export interface FirewallSecurityPolicyInternetServiceCustomGroup {
    name?: pulumi.Input<string>;
}

export interface FirewallSecurityPolicyInternetServiceGroup {
    name?: pulumi.Input<string>;
}

export interface FirewallSecurityPolicyInternetServiceId {
    id?: pulumi.Input<number>;
}

export interface FirewallSecurityPolicyInternetServiceName {
    name?: pulumi.Input<string>;
}

export interface FirewallSecurityPolicyInternetServiceSrcCustom {
    name?: pulumi.Input<string>;
}

export interface FirewallSecurityPolicyInternetServiceSrcCustomGroup {
    name?: pulumi.Input<string>;
}

export interface FirewallSecurityPolicyInternetServiceSrcGroup {
    name?: pulumi.Input<string>;
}

export interface FirewallSecurityPolicyInternetServiceSrcId {
    id?: pulumi.Input<number>;
}

export interface FirewallSecurityPolicyInternetServiceSrcName {
    name?: pulumi.Input<string>;
}

export interface FirewallSecurityPolicySeqStatePolicyList {
    action?: pulumi.Input<string>;
    name?: pulumi.Input<string>;
    policyid?: pulumi.Input<string>;
}

export interface FirewallSecurityPolicyService {
    name?: pulumi.Input<string>;
}

export interface FirewallSecurityPolicySortStatePolicyList {
    action?: pulumi.Input<string>;
    name?: pulumi.Input<string>;
    policyid?: pulumi.Input<string>;
}

export interface FirewallSecurityPolicySrcaddr {
    name?: pulumi.Input<string>;
}

export interface FirewallSecurityPolicySrcaddr4 {
    name?: pulumi.Input<string>;
}

export interface FirewallSecurityPolicySrcaddr6 {
    name?: pulumi.Input<string>;
}

export interface FirewallSecurityPolicySrcintf {
    name?: pulumi.Input<string>;
}

export interface FirewallSecurityPolicyUrlCategory {
    id?: pulumi.Input<number>;
}

export interface FirewallSecurityPolicyUser {
    name?: pulumi.Input<string>;
}

export interface FirewallServiceCustomAppCategory {
    id?: pulumi.Input<number>;
}

export interface FirewallServiceCustomApplication {
    id?: pulumi.Input<number>;
}

export interface FirewallServiceGroupMember {
    name?: pulumi.Input<string>;
}

export interface FirewallShapingPolicyAppCategory {
    id?: pulumi.Input<number>;
}

export interface FirewallShapingPolicyAppGroup {
    name?: pulumi.Input<string>;
}

export interface FirewallShapingPolicyApplication {
    id?: pulumi.Input<number>;
}

export interface FirewallShapingPolicyDstaddr {
    name?: pulumi.Input<string>;
}

export interface FirewallShapingPolicyDstaddr6 {
    name?: pulumi.Input<string>;
}

export interface FirewallShapingPolicyDstintf {
    name?: pulumi.Input<string>;
}

export interface FirewallShapingPolicyGroup {
    name?: pulumi.Input<string>;
}

export interface FirewallShapingPolicyInternetServiceCustom {
    name?: pulumi.Input<string>;
}

export interface FirewallShapingPolicyInternetServiceCustomGroup {
    name?: pulumi.Input<string>;
}

export interface FirewallShapingPolicyInternetServiceGroup {
    name?: pulumi.Input<string>;
}

export interface FirewallShapingPolicyInternetServiceId {
    id?: pulumi.Input<number>;
}

export interface FirewallShapingPolicyInternetServiceName {
    name?: pulumi.Input<string>;
}

export interface FirewallShapingPolicyInternetServiceSrcCustom {
    name?: pulumi.Input<string>;
}

export interface FirewallShapingPolicyInternetServiceSrcCustomGroup {
    name?: pulumi.Input<string>;
}

export interface FirewallShapingPolicyInternetServiceSrcGroup {
    name?: pulumi.Input<string>;
}

export interface FirewallShapingPolicyInternetServiceSrcId {
    id?: pulumi.Input<number>;
}

export interface FirewallShapingPolicyInternetServiceSrcName {
    name?: pulumi.Input<string>;
}

export interface FirewallShapingPolicyService {
    name?: pulumi.Input<string>;
}

export interface FirewallShapingPolicySrcaddr {
    name?: pulumi.Input<string>;
}

export interface FirewallShapingPolicySrcaddr6 {
    name?: pulumi.Input<string>;
}

export interface FirewallShapingPolicySrcintf {
    name?: pulumi.Input<string>;
}

export interface FirewallShapingPolicyUrlCategory {
    id?: pulumi.Input<number>;
}

export interface FirewallShapingPolicyUser {
    name?: pulumi.Input<string>;
}

export interface FirewallShapingProfileShapingEntry {
    burstInMsec?: pulumi.Input<number>;
    cburstInMsec?: pulumi.Input<number>;
    classId?: pulumi.Input<number>;
    guaranteedBandwidthPercentage?: pulumi.Input<number>;
    id?: pulumi.Input<number>;
    limit?: pulumi.Input<number>;
    max?: pulumi.Input<number>;
    maximumBandwidthPercentage?: pulumi.Input<number>;
    min?: pulumi.Input<number>;
    priority?: pulumi.Input<string>;
    redProbability?: pulumi.Input<number>;
}

export interface FirewallSnifferAnomaly {
    action?: pulumi.Input<string>;
    log?: pulumi.Input<string>;
    name?: pulumi.Input<string>;
    quarantine?: pulumi.Input<string>;
    quarantineExpiry?: pulumi.Input<string>;
    quarantineLog?: pulumi.Input<string>;
    status?: pulumi.Input<string>;
    threshold?: pulumi.Input<number>;
    thresholddefault?: pulumi.Input<number>;
}

export interface FirewallSnifferIpThreatfeed {
    name?: pulumi.Input<string>;
}

export interface FirewallSslSshProfileDot {
    certValidationFailure?: pulumi.Input<string>;
    certValidationTimeout?: pulumi.Input<string>;
    clientCertificate?: pulumi.Input<string>;
    expiredServerCert?: pulumi.Input<string>;
    proxyAfterTcpHandshake?: pulumi.Input<string>;
    revokedServerCert?: pulumi.Input<string>;
    sniServerCertCheck?: pulumi.Input<string>;
    status?: pulumi.Input<string>;
    unsupportedSslCipher?: pulumi.Input<string>;
    unsupportedSslNegotiation?: pulumi.Input<string>;
    unsupportedSslVersion?: pulumi.Input<string>;
    untrustedServerCert?: pulumi.Input<string>;
}

export interface FirewallSslSshProfileFtps {
    certValidationFailure?: pulumi.Input<string>;
    certValidationTimeout?: pulumi.Input<string>;
    clientCertRequest?: pulumi.Input<string>;
    clientCertificate?: pulumi.Input<string>;
    expiredServerCert?: pulumi.Input<string>;
    invalidServerCert?: pulumi.Input<string>;
    minAllowedSslVersion?: pulumi.Input<string>;
    ports?: pulumi.Input<string>;
    revokedServerCert?: pulumi.Input<string>;
    sniServerCertCheck?: pulumi.Input<string>;
    status?: pulumi.Input<string>;
    unsupportedSsl?: pulumi.Input<string>;
    unsupportedSslCipher?: pulumi.Input<string>;
    unsupportedSslNegotiation?: pulumi.Input<string>;
    unsupportedSslVersion?: pulumi.Input<string>;
    untrustedServerCert?: pulumi.Input<string>;
}

export interface FirewallSslSshProfileHttps {
    certProbeFailure?: pulumi.Input<string>;
    certValidationFailure?: pulumi.Input<string>;
    certValidationTimeout?: pulumi.Input<string>;
    clientCertRequest?: pulumi.Input<string>;
    clientCertificate?: pulumi.Input<string>;
    expiredServerCert?: pulumi.Input<string>;
    invalidServerCert?: pulumi.Input<string>;
    minAllowedSslVersion?: pulumi.Input<string>;
    ports?: pulumi.Input<string>;
    proxyAfterTcpHandshake?: pulumi.Input<string>;
    revokedServerCert?: pulumi.Input<string>;
    sniServerCertCheck?: pulumi.Input<string>;
    status?: pulumi.Input<string>;
    unsupportedSsl?: pulumi.Input<string>;
    unsupportedSslCipher?: pulumi.Input<string>;
    unsupportedSslNegotiation?: pulumi.Input<string>;
    unsupportedSslVersion?: pulumi.Input<string>;
    untrustedServerCert?: pulumi.Input<string>;
}

export interface FirewallSslSshProfileImaps {
    certValidationFailure?: pulumi.Input<string>;
    certValidationTimeout?: pulumi.Input<string>;
    clientCertRequest?: pulumi.Input<string>;
    clientCertificate?: pulumi.Input<string>;
    expiredServerCert?: pulumi.Input<string>;
    invalidServerCert?: pulumi.Input<string>;
    ports?: pulumi.Input<string>;
    proxyAfterTcpHandshake?: pulumi.Input<string>;
    revokedServerCert?: pulumi.Input<string>;
    sniServerCertCheck?: pulumi.Input<string>;
    status?: pulumi.Input<string>;
    unsupportedSsl?: pulumi.Input<string>;
    unsupportedSslCipher?: pulumi.Input<string>;
    unsupportedSslNegotiation?: pulumi.Input<string>;
    unsupportedSslVersion?: pulumi.Input<string>;
    untrustedServerCert?: pulumi.Input<string>;
}

export interface FirewallSslSshProfilePop3s {
    certValidationFailure?: pulumi.Input<string>;
    certValidationTimeout?: pulumi.Input<string>;
    clientCertRequest?: pulumi.Input<string>;
    clientCertificate?: pulumi.Input<string>;
    expiredServerCert?: pulumi.Input<string>;
    invalidServerCert?: pulumi.Input<string>;
    ports?: pulumi.Input<string>;
    proxyAfterTcpHandshake?: pulumi.Input<string>;
    revokedServerCert?: pulumi.Input<string>;
    sniServerCertCheck?: pulumi.Input<string>;
    status?: pulumi.Input<string>;
    unsupportedSsl?: pulumi.Input<string>;
    unsupportedSslCipher?: pulumi.Input<string>;
    unsupportedSslNegotiation?: pulumi.Input<string>;
    unsupportedSslVersion?: pulumi.Input<string>;
    untrustedServerCert?: pulumi.Input<string>;
}

export interface FirewallSslSshProfileSmtps {
    certValidationFailure?: pulumi.Input<string>;
    certValidationTimeout?: pulumi.Input<string>;
    clientCertRequest?: pulumi.Input<string>;
    clientCertificate?: pulumi.Input<string>;
    expiredServerCert?: pulumi.Input<string>;
    invalidServerCert?: pulumi.Input<string>;
    ports?: pulumi.Input<string>;
    proxyAfterTcpHandshake?: pulumi.Input<string>;
    revokedServerCert?: pulumi.Input<string>;
    sniServerCertCheck?: pulumi.Input<string>;
    status?: pulumi.Input<string>;
    unsupportedSsl?: pulumi.Input<string>;
    unsupportedSslCipher?: pulumi.Input<string>;
    unsupportedSslNegotiation?: pulumi.Input<string>;
    unsupportedSslVersion?: pulumi.Input<string>;
    untrustedServerCert?: pulumi.Input<string>;
}

export interface FirewallSslSshProfileSsh {
    inspectAll?: pulumi.Input<string>;
    ports?: pulumi.Input<string>;
    proxyAfterTcpHandshake?: pulumi.Input<string>;
    sshAlgorithm?: pulumi.Input<string>;
    sshPolicyCheck?: pulumi.Input<string>;
    sshTunPolicyCheck?: pulumi.Input<string>;
    status?: pulumi.Input<string>;
    unsupportedVersion?: pulumi.Input<string>;
}

export interface FirewallSslSshProfileSsl {
    certProbeFailure?: pulumi.Input<string>;
    certValidationFailure?: pulumi.Input<string>;
    certValidationTimeout?: pulumi.Input<string>;
    clientCertRequest?: pulumi.Input<string>;
    clientCertificate?: pulumi.Input<string>;
    expiredServerCert?: pulumi.Input<string>;
    inspectAll?: pulumi.Input<string>;
    invalidServerCert?: pulumi.Input<string>;
    minAllowedSslVersion?: pulumi.Input<string>;
    revokedServerCert?: pulumi.Input<string>;
    sniServerCertCheck?: pulumi.Input<string>;
    unsupportedSsl?: pulumi.Input<string>;
    unsupportedSslCipher?: pulumi.Input<string>;
    unsupportedSslNegotiation?: pulumi.Input<string>;
    unsupportedSslVersion?: pulumi.Input<string>;
    untrustedServerCert?: pulumi.Input<string>;
}

export interface FirewallSslSshProfileSslExempt {
    address?: pulumi.Input<string>;
    address6?: pulumi.Input<string>;
    fortiguardCategory?: pulumi.Input<number>;
    id?: pulumi.Input<number>;
    regex?: pulumi.Input<string>;
    type?: pulumi.Input<string>;
    wildcardFqdn?: pulumi.Input<string>;
}

export interface FirewallSslSshProfileSslServer {
    ftpsClientCertRequest?: pulumi.Input<string>;
    ftpsClientCertificate?: pulumi.Input<string>;
    httpsClientCertRequest?: pulumi.Input<string>;
    httpsClientCertificate?: pulumi.Input<string>;
    id?: pulumi.Input<number>;
    imapsClientCertRequest?: pulumi.Input<string>;
    imapsClientCertificate?: pulumi.Input<string>;
    ip?: pulumi.Input<string>;
    pop3sClientCertRequest?: pulumi.Input<string>;
    pop3sClientCertificate?: pulumi.Input<string>;
    smtpsClientCertRequest?: pulumi.Input<string>;
    smtpsClientCertificate?: pulumi.Input<string>;
    sslOtherClientCertRequest?: pulumi.Input<string>;
    sslOtherClientCertificate?: pulumi.Input<string>;
}

export interface FirewallTtlPolicyService {
    name?: pulumi.Input<string>;
}

export interface FirewallTtlPolicySrcaddr {
    name?: pulumi.Input<string>;
}

export interface FirewallVip46Monitor {
    name?: pulumi.Input<string>;
}

export interface FirewallVip46Realserver {
    clientIp?: pulumi.Input<string>;
    healthcheck?: pulumi.Input<string>;
    holddownInterval?: pulumi.Input<number>;
    id?: pulumi.Input<number>;
    ip?: pulumi.Input<string>;
    maxConnections?: pulumi.Input<number>;
    monitor?: pulumi.Input<string>;
    port?: pulumi.Input<number>;
    status?: pulumi.Input<string>;
    weight?: pulumi.Input<number>;
}

export interface FirewallVip46SrcFilter {
    range?: pulumi.Input<string>;
}

export interface FirewallVip46SrcintfFilter {
    interfaceName?: pulumi.Input<string>;
}

export interface FirewallVip64Monitor {
    name?: pulumi.Input<string>;
}

export interface FirewallVip64Realserver {
    clientIp?: pulumi.Input<string>;
    healthcheck?: pulumi.Input<string>;
    holddownInterval?: pulumi.Input<number>;
    id?: pulumi.Input<number>;
    ip?: pulumi.Input<string>;
    maxConnections?: pulumi.Input<number>;
    monitor?: pulumi.Input<string>;
    port?: pulumi.Input<number>;
    status?: pulumi.Input<string>;
    weight?: pulumi.Input<number>;
}

export interface FirewallVip64SrcFilter {
    range?: pulumi.Input<string>;
}

export interface FirewallVip6Monitor {
    name?: pulumi.Input<string>;
}

export interface FirewallVip6Realserver {
    clientIp?: pulumi.Input<string>;
    healthcheck?: pulumi.Input<string>;
    holddownInterval?: pulumi.Input<number>;
    httpHost?: pulumi.Input<string>;
    id?: pulumi.Input<number>;
    ip?: pulumi.Input<string>;
    maxConnections?: pulumi.Input<number>;
    monitor?: pulumi.Input<string>;
    port?: pulumi.Input<number>;
    status?: pulumi.Input<string>;
    weight?: pulumi.Input<number>;
}

export interface FirewallVip6SrcFilter {
    range?: pulumi.Input<string>;
}

export interface FirewallVip6SslCipherSuite {
    cipher?: pulumi.Input<string>;
    priority?: pulumi.Input<number>;
    versions?: pulumi.Input<string>;
}

export interface FirewallVip6SslServerCipherSuite {
    cipher?: pulumi.Input<string>;
    priority?: pulumi.Input<number>;
    versions?: pulumi.Input<string>;
}

export interface FirewallVipExtaddr {
    name?: pulumi.Input<string>;
}

export interface FirewallVipMappedip {
    range?: pulumi.Input<string>;
}

export interface FirewallVipMonitor {
    name?: pulumi.Input<string>;
}

export interface FirewallVipRealserver {
    address?: pulumi.Input<string>;
    clientIp?: pulumi.Input<string>;
    healthcheck?: pulumi.Input<string>;
    holddownInterval?: pulumi.Input<number>;
    httpHost?: pulumi.Input<string>;
    id?: pulumi.Input<number>;
    ip?: pulumi.Input<string>;
    maxConnections?: pulumi.Input<number>;
    monitor?: pulumi.Input<string>;
    port?: pulumi.Input<number>;
    status?: pulumi.Input<string>;
    type?: pulumi.Input<string>;
    weight?: pulumi.Input<number>;
}

export interface FirewallVipService {
    name?: pulumi.Input<string>;
}

export interface FirewallVipSrcFilter {
    range?: pulumi.Input<string>;
}

export interface FirewallVipSrcintfFilter {
    interfaceName?: pulumi.Input<string>;
}

export interface FirewallVipSslCipherSuite {
    cipher?: pulumi.Input<string>;
    priority?: pulumi.Input<number>;
    versions?: pulumi.Input<string>;
}

export interface FirewallVipSslServerCipherSuite {
    cipher?: pulumi.Input<string>;
    priority?: pulumi.Input<number>;
    versions?: pulumi.Input<string>;
}

export interface FirewallVipgrp46Member {
    name?: pulumi.Input<string>;
}

export interface FirewallVipgrp64Member {
    name?: pulumi.Input<string>;
}

export interface FirewallVipgrp6Member {
    name?: pulumi.Input<string>;
}

export interface FirewallVipgrpMember {
    name?: pulumi.Input<string>;
}

export interface FirewallWildcardFqdnGroupMember {
    name?: pulumi.Input<string>;
}

export interface IcapProfileIcapHeader {
    base64Encoding?: pulumi.Input<string>;
    content?: pulumi.Input<string>;
    id?: pulumi.Input<number>;
    name?: pulumi.Input<string>;
}

export interface IcapProfileRespmodForwardRule {
    action?: pulumi.Input<string>;
    headerGroups?: pulumi.Input<pulumi.Input<inputs.IcapProfileRespmodForwardRuleHeaderGroup>[]>;
    host?: pulumi.Input<string>;
    httpRespStatusCodes?: pulumi.Input<pulumi.Input<inputs.IcapProfileRespmodForwardRuleHttpRespStatusCode>[]>;
    name?: pulumi.Input<string>;
}

export interface IcapProfileRespmodForwardRuleHeaderGroup {
    caseSensitivity?: pulumi.Input<string>;
    header?: pulumi.Input<string>;
    headerName?: pulumi.Input<string>;
    id?: pulumi.Input<number>;
}

export interface IcapProfileRespmodForwardRuleHttpRespStatusCode {
    code?: pulumi.Input<number>;
}

export interface IcapServerGroupServerList {
    name?: pulumi.Input<string>;
    weight?: pulumi.Input<number>;
}

export interface IpsDecoderParameter {
    name?: pulumi.Input<string>;
    value?: pulumi.Input<string>;
}

export interface IpsGlobalTlsActiveProbe {
    interface?: pulumi.Input<string>;
    interfaceSelectMethod?: pulumi.Input<string>;
    sourceIp?: pulumi.Input<string>;
    sourceIp6?: pulumi.Input<string>;
    vdom?: pulumi.Input<string>;
}

export interface IpsRuleMetadata {
    id?: pulumi.Input<number>;
    metaid?: pulumi.Input<number>;
    valueid?: pulumi.Input<number>;
}

export interface IpsSensorEntry {
    action?: pulumi.Input<string>;
    application?: pulumi.Input<string>;
    cves?: pulumi.Input<pulumi.Input<inputs.IpsSensorEntryCfe>[]>;
    defaultAction?: pulumi.Input<string>;
    defaultStatus?: pulumi.Input<string>;
    exemptIps?: pulumi.Input<pulumi.Input<inputs.IpsSensorEntryExemptIp>[]>;
    id?: pulumi.Input<number>;
    lastModified?: pulumi.Input<string>;
    location?: pulumi.Input<string>;
    log?: pulumi.Input<string>;
    logAttackContext?: pulumi.Input<string>;
    logPacket?: pulumi.Input<string>;
    os?: pulumi.Input<string>;
    protocol?: pulumi.Input<string>;
    quarantine?: pulumi.Input<string>;
    quarantineExpiry?: pulumi.Input<string>;
    quarantineLog?: pulumi.Input<string>;
    rateCount?: pulumi.Input<number>;
    rateDuration?: pulumi.Input<number>;
    rateMode?: pulumi.Input<string>;
    rateTrack?: pulumi.Input<string>;
    rules?: pulumi.Input<pulumi.Input<inputs.IpsSensorEntryRule>[]>;
    severity?: pulumi.Input<string>;
    status?: pulumi.Input<string>;
    vulnTypes?: pulumi.Input<pulumi.Input<inputs.IpsSensorEntryVulnType>[]>;
}

export interface IpsSensorEntryCfe {
    cveEntry?: pulumi.Input<string>;
}

export interface IpsSensorEntryExemptIp {
    dstIp?: pulumi.Input<string>;
    id?: pulumi.Input<number>;
    srcIp?: pulumi.Input<string>;
}

export interface IpsSensorEntryRule {
    id?: pulumi.Input<number>;
}

export interface IpsSensorEntryVulnType {
    id?: pulumi.Input<number>;
}

export interface IpsSensorFilter {
    action?: pulumi.Input<string>;
    application?: pulumi.Input<string>;
    location?: pulumi.Input<string>;
    log?: pulumi.Input<string>;
    logPacket?: pulumi.Input<string>;
    name?: pulumi.Input<string>;
    os?: pulumi.Input<string>;
    protocol?: pulumi.Input<string>;
    quarantine?: pulumi.Input<string>;
    quarantineExpiry?: pulumi.Input<number>;
    quarantineLog?: pulumi.Input<string>;
    severity?: pulumi.Input<string>;
    status?: pulumi.Input<string>;
}

export interface IpsSensorOverride {
    action?: pulumi.Input<string>;
    exemptIps?: pulumi.Input<pulumi.Input<inputs.IpsSensorOverrideExemptIp>[]>;
    log?: pulumi.Input<string>;
    logPacket?: pulumi.Input<string>;
    quarantine?: pulumi.Input<string>;
    quarantineExpiry?: pulumi.Input<number>;
    quarantineLog?: pulumi.Input<string>;
    ruleId?: pulumi.Input<number>;
    status?: pulumi.Input<string>;
}

export interface IpsSensorOverrideExemptIp {
    dstIp?: pulumi.Input<string>;
    id?: pulumi.Input<number>;
    srcIp?: pulumi.Input<string>;
}

export interface LogDiskFilterFreeStyle {
    category?: pulumi.Input<string>;
    filter?: pulumi.Input<string>;
    filterType?: pulumi.Input<string>;
    id?: pulumi.Input<number>;
}

export interface LogFortianalyzer2FilterFreeStyle {
    category?: pulumi.Input<string>;
    filter?: pulumi.Input<string>;
    filterType?: pulumi.Input<string>;
    id?: pulumi.Input<number>;
}

export interface LogFortianalyzer2OverrideFilterFreeStyle {
    category?: pulumi.Input<string>;
    filter?: pulumi.Input<string>;
    filterType?: pulumi.Input<string>;
    id?: pulumi.Input<number>;
}

export interface LogFortianalyzer2OverrideSettingSerial {
    name?: pulumi.Input<string>;
}

export interface LogFortianalyzer2SettingSerial {
    name?: pulumi.Input<string>;
}

export interface LogFortianalyzer3FilterFreeStyle {
    category?: pulumi.Input<string>;
    filter?: pulumi.Input<string>;
    filterType?: pulumi.Input<string>;
    id?: pulumi.Input<number>;
}

export interface LogFortianalyzer3OverrideFilterFreeStyle {
    category?: pulumi.Input<string>;
    filter?: pulumi.Input<string>;
    filterType?: pulumi.Input<string>;
    id?: pulumi.Input<number>;
}

export interface LogFortianalyzer3OverrideSettingSerial {
    name?: pulumi.Input<string>;
}

export interface LogFortianalyzer3SettingSerial {
    name?: pulumi.Input<string>;
}

export interface LogFortianalyzerCloudFilterFreeStyle {
    category?: pulumi.Input<string>;
    filter?: pulumi.Input<string>;
    filterType?: pulumi.Input<string>;
    id?: pulumi.Input<number>;
}

export interface LogFortianalyzerCloudOverrideFilterFreeStyle {
    category?: pulumi.Input<string>;
    filter?: pulumi.Input<string>;
    filterType?: pulumi.Input<string>;
    id?: pulumi.Input<number>;
}

export interface LogFortianalyzerCloudSettingSerial {
    name?: pulumi.Input<string>;
}

export interface LogFortianalyzerFilterFreeStyle {
    category?: pulumi.Input<string>;
    filter?: pulumi.Input<string>;
    filterType?: pulumi.Input<string>;
    id?: pulumi.Input<number>;
}

export interface LogFortianalyzerOverrideFilterFreeStyle {
    category?: pulumi.Input<string>;
    filter?: pulumi.Input<string>;
    filterType?: pulumi.Input<string>;
    id?: pulumi.Input<number>;
}

export interface LogFortianalyzerOverrideSettingSerial {
    name?: pulumi.Input<string>;
}

export interface LogFortianalyzerSettingSerial {
    name?: pulumi.Input<string>;
}

export interface LogFortiguardFilterFreeStyle {
    category?: pulumi.Input<string>;
    filter?: pulumi.Input<string>;
    filterType?: pulumi.Input<string>;
    id?: pulumi.Input<number>;
}

export interface LogFortiguardOverrideFilterFreeStyle {
    category?: pulumi.Input<string>;
    filter?: pulumi.Input<string>;
    filterType?: pulumi.Input<string>;
    id?: pulumi.Input<number>;
}

export interface LogMemoryFilterFreeStyle {
    category?: pulumi.Input<string>;
    filter?: pulumi.Input<string>;
    filterType?: pulumi.Input<string>;
    id?: pulumi.Input<number>;
}

export interface LogNullDeviceFilterFreeStyle {
    category?: pulumi.Input<string>;
    filter?: pulumi.Input<string>;
    filterType?: pulumi.Input<string>;
    id?: pulumi.Input<number>;
}

export interface LogSettingCustomLogField {
    fieldId?: pulumi.Input<string>;
}

export interface LogSyslogd2FilterFreeStyle {
    category?: pulumi.Input<string>;
    filter?: pulumi.Input<string>;
    filterType?: pulumi.Input<string>;
    id?: pulumi.Input<number>;
}

export interface LogSyslogd2OverrideFilterFreeStyle {
    category?: pulumi.Input<string>;
    filter?: pulumi.Input<string>;
    filterType?: pulumi.Input<string>;
    id?: pulumi.Input<number>;
}

export interface LogSyslogd2OverrideSettingCustomFieldName {
    custom?: pulumi.Input<string>;
    id?: pulumi.Input<number>;
    name?: pulumi.Input<string>;
}

export interface LogSyslogd2SettingCustomFieldName {
    custom?: pulumi.Input<string>;
    id?: pulumi.Input<number>;
    name?: pulumi.Input<string>;
}

export interface LogSyslogd3FilterFreeStyle {
    category?: pulumi.Input<string>;
    filter?: pulumi.Input<string>;
    filterType?: pulumi.Input<string>;
    id?: pulumi.Input<number>;
}

export interface LogSyslogd3OverrideFilterFreeStyle {
    category?: pulumi.Input<string>;
    filter?: pulumi.Input<string>;
    filterType?: pulumi.Input<string>;
    id?: pulumi.Input<number>;
}

export interface LogSyslogd3OverrideSettingCustomFieldName {
    custom?: pulumi.Input<string>;
    id?: pulumi.Input<number>;
    name?: pulumi.Input<string>;
}

export interface LogSyslogd3SettingCustomFieldName {
    custom?: pulumi.Input<string>;
    id?: pulumi.Input<number>;
    name?: pulumi.Input<string>;
}

export interface LogSyslogd4FilterFreeStyle {
    category?: pulumi.Input<string>;
    filter?: pulumi.Input<string>;
    filterType?: pulumi.Input<string>;
    id?: pulumi.Input<number>;
}

export interface LogSyslogd4OverrideFilterFreeStyle {
    category?: pulumi.Input<string>;
    filter?: pulumi.Input<string>;
    filterType?: pulumi.Input<string>;
    id?: pulumi.Input<number>;
}

export interface LogSyslogd4OverrideSettingCustomFieldName {
    custom?: pulumi.Input<string>;
    id?: pulumi.Input<number>;
    name?: pulumi.Input<string>;
}

export interface LogSyslogd4SettingCustomFieldName {
    custom?: pulumi.Input<string>;
    id?: pulumi.Input<number>;
    name?: pulumi.Input<string>;
}

export interface LogSyslogdFilterFreeStyle {
    category?: pulumi.Input<string>;
    filter?: pulumi.Input<string>;
    filterType?: pulumi.Input<string>;
    id?: pulumi.Input<number>;
}

export interface LogSyslogdOverrideFilterFreeStyle {
    category?: pulumi.Input<string>;
    filter?: pulumi.Input<string>;
    filterType?: pulumi.Input<string>;
    id?: pulumi.Input<number>;
}

export interface LogSyslogdOverrideSettingCustomFieldName {
    custom?: pulumi.Input<string>;
    id?: pulumi.Input<number>;
    name?: pulumi.Input<string>;
}

export interface LogSyslogdSettingCustomFieldName {
    custom?: pulumi.Input<string>;
    id?: pulumi.Input<number>;
    name?: pulumi.Input<string>;
}

export interface LogThreatWeightApplication {
    category?: pulumi.Input<number>;
    id?: pulumi.Input<number>;
    level?: pulumi.Input<string>;
}

export interface LogThreatWeightGeolocation {
    country?: pulumi.Input<string>;
    id?: pulumi.Input<number>;
    level?: pulumi.Input<string>;
}

export interface LogThreatWeightIps {
    criticalSeverity?: pulumi.Input<string>;
    highSeverity?: pulumi.Input<string>;
    infoSeverity?: pulumi.Input<string>;
    lowSeverity?: pulumi.Input<string>;
    mediumSeverity?: pulumi.Input<string>;
}

export interface LogThreatWeightLevel {
    critical?: pulumi.Input<number>;
    high?: pulumi.Input<number>;
    low?: pulumi.Input<number>;
    medium?: pulumi.Input<number>;
}

export interface LogThreatWeightMalware {
    botnetConnection?: pulumi.Input<string>;
    commandBlocked?: pulumi.Input<string>;
    contentDisarm?: pulumi.Input<string>;
    emsThreatFeed?: pulumi.Input<string>;
    fileBlocked?: pulumi.Input<string>;
    fortiai?: pulumi.Input<string>;
    fortindr?: pulumi.Input<string>;
    fortisandbox?: pulumi.Input<string>;
    fsaHighRisk?: pulumi.Input<string>;
    fsaMalicious?: pulumi.Input<string>;
    fsaMediumRisk?: pulumi.Input<string>;
    malwareList?: pulumi.Input<string>;
    mimefragmented?: pulumi.Input<string>;
    oversized?: pulumi.Input<string>;
    switchProto?: pulumi.Input<string>;
    virusFileTypeExecutable?: pulumi.Input<string>;
    virusInfected?: pulumi.Input<string>;
    virusOutbreakPrevention?: pulumi.Input<string>;
    virusScanError?: pulumi.Input<string>;
}

export interface LogThreatWeightWeb {
    category?: pulumi.Input<number>;
    id?: pulumi.Input<number>;
    level?: pulumi.Input<string>;
}

export interface LogWebtrendsFilterFreeStyle {
    category?: pulumi.Input<string>;
    filter?: pulumi.Input<string>;
    filterType?: pulumi.Input<string>;
    id?: pulumi.Input<number>;
}

export interface NsxtServiceChainServiceIndex {
    id?: pulumi.Input<number>;
    name?: pulumi.Input<string>;
    reverseIndex?: pulumi.Input<number>;
    vd?: pulumi.Input<string>;
}

export interface ReportChartCategorySeries {
    databind?: pulumi.Input<string>;
    fontSize?: pulumi.Input<number>;
}

export interface ReportChartColumn {
    detailUnit?: pulumi.Input<string>;
    detailValue?: pulumi.Input<string>;
    footerUnit?: pulumi.Input<string>;
    footerValue?: pulumi.Input<string>;
    headerValue?: pulumi.Input<string>;
    id?: pulumi.Input<number>;
    mappings?: pulumi.Input<pulumi.Input<inputs.ReportChartColumnMapping>[]>;
}

export interface ReportChartColumnMapping {
    displayname?: pulumi.Input<string>;
    id?: pulumi.Input<number>;
    op?: pulumi.Input<string>;
    value1?: pulumi.Input<string>;
    value2?: pulumi.Input<string>;
    valueType?: pulumi.Input<string>;
}

export interface ReportChartDrillDownChart {
    chartName?: pulumi.Input<string>;
    id?: pulumi.Input<number>;
    status?: pulumi.Input<string>;
}

export interface ReportChartValueSeries {
    databind?: pulumi.Input<string>;
}

export interface ReportChartXSeries {
    caption?: pulumi.Input<string>;
    captionFontSize?: pulumi.Input<number>;
    databind?: pulumi.Input<string>;
    fontSize?: pulumi.Input<number>;
    isCategory?: pulumi.Input<string>;
    labelAngle?: pulumi.Input<string>;
    scaleDirection?: pulumi.Input<string>;
    scaleFormat?: pulumi.Input<string>;
    scaleStep?: pulumi.Input<number>;
    scaleUnit?: pulumi.Input<string>;
    unit?: pulumi.Input<string>;
}

export interface ReportChartYSeries {
    caption?: pulumi.Input<string>;
    captionFontSize?: pulumi.Input<number>;
    databind?: pulumi.Input<string>;
    extraDatabind?: pulumi.Input<string>;
    extraY?: pulumi.Input<string>;
    extraYLegend?: pulumi.Input<string>;
    fontSize?: pulumi.Input<number>;
    group?: pulumi.Input<string>;
    labelAngle?: pulumi.Input<string>;
    unit?: pulumi.Input<string>;
    yLegend?: pulumi.Input<string>;
}

export interface ReportDatasetField {
    displayname?: pulumi.Input<string>;
    id?: pulumi.Input<number>;
    name?: pulumi.Input<string>;
    type?: pulumi.Input<string>;
}

export interface ReportDatasetParameter {
    dataType?: pulumi.Input<string>;
    displayName?: pulumi.Input<string>;
    field?: pulumi.Input<string>;
    id?: pulumi.Input<number>;
}

export interface ReportLayoutBodyItem {
    chart?: pulumi.Input<string>;
    chartOptions?: pulumi.Input<string>;
    column?: pulumi.Input<number>;
    content?: pulumi.Input<string>;
    description?: pulumi.Input<string>;
    drillDownItems?: pulumi.Input<string>;
    drillDownTypes?: pulumi.Input<string>;
    hide?: pulumi.Input<string>;
    id?: pulumi.Input<number>;
    imgSrc?: pulumi.Input<string>;
    listComponent?: pulumi.Input<string>;
    lists?: pulumi.Input<pulumi.Input<inputs.ReportLayoutBodyItemList>[]>;
    miscComponent?: pulumi.Input<string>;
    parameters?: pulumi.Input<pulumi.Input<inputs.ReportLayoutBodyItemParameter>[]>;
    style?: pulumi.Input<string>;
    tableCaptionStyle?: pulumi.Input<string>;
    tableColumnWidths?: pulumi.Input<string>;
    tableEvenRowStyle?: pulumi.Input<string>;
    tableHeadStyle?: pulumi.Input<string>;
    tableOddRowStyle?: pulumi.Input<string>;
    textComponent?: pulumi.Input<string>;
    title?: pulumi.Input<string>;
    topN?: pulumi.Input<number>;
    type?: pulumi.Input<string>;
}

export interface ReportLayoutBodyItemList {
    content?: pulumi.Input<string>;
    id?: pulumi.Input<number>;
}

export interface ReportLayoutBodyItemParameter {
    id?: pulumi.Input<number>;
    name?: pulumi.Input<string>;
    value?: pulumi.Input<string>;
}

export interface ReportLayoutPage {
    columnBreakBefore?: pulumi.Input<string>;
    footer?: pulumi.Input<inputs.ReportLayoutPageFooter>;
    header?: pulumi.Input<inputs.ReportLayoutPageHeader>;
    options?: pulumi.Input<string>;
    pageBreakBefore?: pulumi.Input<string>;
    paper?: pulumi.Input<string>;
}

export interface ReportLayoutPageFooter {
    footerItems?: pulumi.Input<pulumi.Input<inputs.ReportLayoutPageFooterFooterItem>[]>;
    style?: pulumi.Input<string>;
}

export interface ReportLayoutPageFooterFooterItem {
    content?: pulumi.Input<string>;
    description?: pulumi.Input<string>;
    id?: pulumi.Input<number>;
    imgSrc?: pulumi.Input<string>;
    style?: pulumi.Input<string>;
    type?: pulumi.Input<string>;
}

export interface ReportLayoutPageHeader {
    headerItems?: pulumi.Input<pulumi.Input<inputs.ReportLayoutPageHeaderHeaderItem>[]>;
    style?: pulumi.Input<string>;
}

export interface ReportLayoutPageHeaderHeaderItem {
    content?: pulumi.Input<string>;
    description?: pulumi.Input<string>;
    id?: pulumi.Input<number>;
    imgSrc?: pulumi.Input<string>;
    style?: pulumi.Input<string>;
    type?: pulumi.Input<string>;
}

export interface RouterAccessList6Rule {
    action?: pulumi.Input<string>;
    exactMatch?: pulumi.Input<string>;
    flags?: pulumi.Input<number>;
    id?: pulumi.Input<number>;
    prefix6?: pulumi.Input<string>;
}

export interface RouterAccessListRule {
    action?: pulumi.Input<string>;
    exactMatch?: pulumi.Input<string>;
    flags?: pulumi.Input<number>;
    id?: pulumi.Input<number>;
    prefix?: pulumi.Input<string>;
    wildcard?: pulumi.Input<string>;
}

export interface RouterAspathListRule {
    action?: pulumi.Input<string>;
    id?: pulumi.Input<number>;
    regexp?: pulumi.Input<string>;
}

export interface RouterBfd6MultihopTemplate {
    authMode?: pulumi.Input<string>;
    bfdDesiredMinTx?: pulumi.Input<number>;
    bfdDetectMult?: pulumi.Input<number>;
    bfdRequiredMinRx?: pulumi.Input<number>;
    dst?: pulumi.Input<string>;
    id?: pulumi.Input<number>;
    md5Key?: pulumi.Input<string>;
    src?: pulumi.Input<string>;
}

export interface RouterBfd6Neighbor {
    interface?: pulumi.Input<string>;
    ip6Address?: pulumi.Input<string>;
}

export interface RouterBfdMultihopTemplate {
    authMode?: pulumi.Input<string>;
    bfdDesiredMinTx?: pulumi.Input<number>;
    bfdDetectMult?: pulumi.Input<number>;
    bfdRequiredMinRx?: pulumi.Input<number>;
    dst?: pulumi.Input<string>;
    id?: pulumi.Input<number>;
    md5Key?: pulumi.Input<string>;
    src?: pulumi.Input<string>;
}

export interface RouterBfdNeighbor {
    interface?: pulumi.Input<string>;
    ip?: pulumi.Input<string>;
}

export interface RouterBgpAdminDistance {
    distance?: pulumi.Input<number>;
    id?: pulumi.Input<number>;
    neighbourPrefix?: pulumi.Input<string>;
    routeList?: pulumi.Input<string>;
}

export interface RouterBgpAggregateAddress {
    asSet?: pulumi.Input<string>;
    id?: pulumi.Input<number>;
    prefix?: pulumi.Input<string>;
    summaryOnly?: pulumi.Input<string>;
}

export interface RouterBgpAggregateAddress6 {
    asSet?: pulumi.Input<string>;
    id?: pulumi.Input<number>;
    prefix6?: pulumi.Input<string>;
    summaryOnly?: pulumi.Input<string>;
}

export interface RouterBgpConfederationPeer {
    peer?: pulumi.Input<string>;
}

export interface RouterBgpNeighbor {
    activate?: pulumi.Input<string>;
    activate6?: pulumi.Input<string>;
    activateVpnv4?: pulumi.Input<string>;
    additionalPath?: pulumi.Input<string>;
    additionalPath6?: pulumi.Input<string>;
    additionalPathVpnv4?: pulumi.Input<string>;
    advAdditionalPath?: pulumi.Input<number>;
    advAdditionalPath6?: pulumi.Input<number>;
    advAdditionalPathVpnv4?: pulumi.Input<number>;
    advertisementInterval?: pulumi.Input<number>;
    allowasIn?: pulumi.Input<number>;
    allowasIn6?: pulumi.Input<number>;
    allowasInEnable?: pulumi.Input<string>;
    allowasInEnable6?: pulumi.Input<string>;
    allowasInVpnv4?: pulumi.Input<number>;
    asOverride?: pulumi.Input<string>;
    asOverride6?: pulumi.Input<string>;
    attributeUnchanged?: pulumi.Input<string>;
    attributeUnchanged6?: pulumi.Input<string>;
    attributeUnchangedVpnv4?: pulumi.Input<string>;
    bfd?: pulumi.Input<string>;
    capabilityDefaultOriginate?: pulumi.Input<string>;
    capabilityDefaultOriginate6?: pulumi.Input<string>;
    capabilityDynamic?: pulumi.Input<string>;
    capabilityGracefulRestart?: pulumi.Input<string>;
    capabilityGracefulRestart6?: pulumi.Input<string>;
    capabilityGracefulRestartVpnv4?: pulumi.Input<string>;
    capabilityOrf?: pulumi.Input<string>;
    capabilityOrf6?: pulumi.Input<string>;
    capabilityRouteRefresh?: pulumi.Input<string>;
    conditionalAdvertise6s?: pulumi.Input<pulumi.Input<inputs.RouterBgpNeighborConditionalAdvertise6>[]>;
    conditionalAdvertises?: pulumi.Input<pulumi.Input<inputs.RouterBgpNeighborConditionalAdvertise>[]>;
    connectTimer?: pulumi.Input<number>;
    defaultOriginateRoutemap?: pulumi.Input<string>;
    defaultOriginateRoutemap6?: pulumi.Input<string>;
    description?: pulumi.Input<string>;
    distributeListIn?: pulumi.Input<string>;
    distributeListIn6?: pulumi.Input<string>;
    distributeListInVpnv4?: pulumi.Input<string>;
    distributeListOut?: pulumi.Input<string>;
    distributeListOut6?: pulumi.Input<string>;
    distributeListOutVpnv4?: pulumi.Input<string>;
    dontCapabilityNegotiate?: pulumi.Input<string>;
    ebgpEnforceMultihop?: pulumi.Input<string>;
    ebgpMultihopTtl?: pulumi.Input<number>;
    filterListIn?: pulumi.Input<string>;
    filterListIn6?: pulumi.Input<string>;
    filterListOut?: pulumi.Input<string>;
    filterListOut6?: pulumi.Input<string>;
    holdtimeTimer?: pulumi.Input<number>;
    interface?: pulumi.Input<string>;
    ip?: pulumi.Input<string>;
    keepAliveTimer?: pulumi.Input<number>;
    linkDownFailover?: pulumi.Input<string>;
    localAs?: pulumi.Input<number>;
    localAsNoPrepend?: pulumi.Input<string>;
    localAsReplaceAs?: pulumi.Input<string>;
    maximumPrefix?: pulumi.Input<number>;
    maximumPrefix6?: pulumi.Input<number>;
    maximumPrefixThreshold?: pulumi.Input<number>;
    maximumPrefixThreshold6?: pulumi.Input<number>;
    maximumPrefixThresholdVpnv4?: pulumi.Input<number>;
    maximumPrefixVpnv4?: pulumi.Input<number>;
    maximumPrefixWarningOnly?: pulumi.Input<string>;
    maximumPrefixWarningOnly6?: pulumi.Input<string>;
    maximumPrefixWarningOnlyVpnv4?: pulumi.Input<string>;
    nextHopSelf?: pulumi.Input<string>;
    nextHopSelf6?: pulumi.Input<string>;
    nextHopSelfRr?: pulumi.Input<string>;
    nextHopSelfRr6?: pulumi.Input<string>;
    nextHopSelfVpnv4?: pulumi.Input<string>;
    overrideCapability?: pulumi.Input<string>;
    passive?: pulumi.Input<string>;
    password?: pulumi.Input<string>;
    prefixListIn?: pulumi.Input<string>;
    prefixListIn6?: pulumi.Input<string>;
    prefixListInVpnv4?: pulumi.Input<string>;
    prefixListOut?: pulumi.Input<string>;
    prefixListOut6?: pulumi.Input<string>;
    prefixListOutVpnv4?: pulumi.Input<string>;
    remoteAs?: pulumi.Input<number>;
    removePrivateAs?: pulumi.Input<string>;
    removePrivateAs6?: pulumi.Input<string>;
    removePrivateAsVpnv4?: pulumi.Input<string>;
    restartTime?: pulumi.Input<number>;
    retainStaleTime?: pulumi.Input<number>;
    routeMapIn?: pulumi.Input<string>;
    routeMapIn6?: pulumi.Input<string>;
    routeMapInVpnv4?: pulumi.Input<string>;
    routeMapOut?: pulumi.Input<string>;
    routeMapOut6?: pulumi.Input<string>;
    routeMapOut6Preferable?: pulumi.Input<string>;
    routeMapOutPreferable?: pulumi.Input<string>;
    routeMapOutVpnv4?: pulumi.Input<string>;
    routeMapOutVpnv4Preferable?: pulumi.Input<string>;
    routeReflectorClient?: pulumi.Input<string>;
    routeReflectorClient6?: pulumi.Input<string>;
    routeReflectorClientVpnv4?: pulumi.Input<string>;
    routeServerClient?: pulumi.Input<string>;
    routeServerClient6?: pulumi.Input<string>;
    routeServerClientVpnv4?: pulumi.Input<string>;
    sendCommunity?: pulumi.Input<string>;
    sendCommunity6?: pulumi.Input<string>;
    sendCommunityVpnv4?: pulumi.Input<string>;
    shutdown?: pulumi.Input<string>;
    softReconfiguration?: pulumi.Input<string>;
    softReconfiguration6?: pulumi.Input<string>;
    softReconfigurationVpnv4?: pulumi.Input<string>;
    staleRoute?: pulumi.Input<string>;
    strictCapabilityMatch?: pulumi.Input<string>;
    unsuppressMap?: pulumi.Input<string>;
    unsuppressMap6?: pulumi.Input<string>;
    updateSource?: pulumi.Input<string>;
    weight?: pulumi.Input<number>;
}

export interface RouterBgpNeighborConditionalAdvertise {
    advertiseRoutemap?: pulumi.Input<string>;
    conditionRoutemap?: pulumi.Input<string>;
    conditionType?: pulumi.Input<string>;
}

export interface RouterBgpNeighborConditionalAdvertise6 {
    advertiseRoutemap?: pulumi.Input<string>;
    conditionRoutemap?: pulumi.Input<string>;
    conditionType?: pulumi.Input<string>;
}

export interface RouterBgpNeighborGroup {
    activate?: pulumi.Input<string>;
    activate6?: pulumi.Input<string>;
    activateVpnv4?: pulumi.Input<string>;
    additionalPath?: pulumi.Input<string>;
    additionalPath6?: pulumi.Input<string>;
    additionalPathVpnv4?: pulumi.Input<string>;
    advAdditionalPath?: pulumi.Input<number>;
    advAdditionalPath6?: pulumi.Input<number>;
    advAdditionalPathVpnv4?: pulumi.Input<number>;
    advertisementInterval?: pulumi.Input<number>;
    allowasIn?: pulumi.Input<number>;
    allowasIn6?: pulumi.Input<number>;
    allowasInEnable?: pulumi.Input<string>;
    allowasInEnable6?: pulumi.Input<string>;
    allowasInVpnv4?: pulumi.Input<number>;
    asOverride?: pulumi.Input<string>;
    asOverride6?: pulumi.Input<string>;
    attributeUnchanged?: pulumi.Input<string>;
    attributeUnchanged6?: pulumi.Input<string>;
    attributeUnchangedVpnv4?: pulumi.Input<string>;
    bfd?: pulumi.Input<string>;
    capabilityDefaultOriginate?: pulumi.Input<string>;
    capabilityDefaultOriginate6?: pulumi.Input<string>;
    capabilityDynamic?: pulumi.Input<string>;
    capabilityGracefulRestart?: pulumi.Input<string>;
    capabilityGracefulRestart6?: pulumi.Input<string>;
    capabilityGracefulRestartVpnv4?: pulumi.Input<string>;
    capabilityOrf?: pulumi.Input<string>;
    capabilityOrf6?: pulumi.Input<string>;
    capabilityRouteRefresh?: pulumi.Input<string>;
    connectTimer?: pulumi.Input<number>;
    defaultOriginateRoutemap?: pulumi.Input<string>;
    defaultOriginateRoutemap6?: pulumi.Input<string>;
    description?: pulumi.Input<string>;
    distributeListIn?: pulumi.Input<string>;
    distributeListIn6?: pulumi.Input<string>;
    distributeListInVpnv4?: pulumi.Input<string>;
    distributeListOut?: pulumi.Input<string>;
    distributeListOut6?: pulumi.Input<string>;
    distributeListOutVpnv4?: pulumi.Input<string>;
    dontCapabilityNegotiate?: pulumi.Input<string>;
    ebgpEnforceMultihop?: pulumi.Input<string>;
    ebgpMultihopTtl?: pulumi.Input<number>;
    filterListIn?: pulumi.Input<string>;
    filterListIn6?: pulumi.Input<string>;
    filterListOut?: pulumi.Input<string>;
    filterListOut6?: pulumi.Input<string>;
    holdtimeTimer?: pulumi.Input<number>;
    interface?: pulumi.Input<string>;
    keepAliveTimer?: pulumi.Input<number>;
    linkDownFailover?: pulumi.Input<string>;
    localAs?: pulumi.Input<number>;
    localAsNoPrepend?: pulumi.Input<string>;
    localAsReplaceAs?: pulumi.Input<string>;
    maximumPrefix?: pulumi.Input<number>;
    maximumPrefix6?: pulumi.Input<number>;
    maximumPrefixThreshold?: pulumi.Input<number>;
    maximumPrefixThreshold6?: pulumi.Input<number>;
    maximumPrefixThresholdVpnv4?: pulumi.Input<number>;
    maximumPrefixVpnv4?: pulumi.Input<number>;
    maximumPrefixWarningOnly?: pulumi.Input<string>;
    maximumPrefixWarningOnly6?: pulumi.Input<string>;
    maximumPrefixWarningOnlyVpnv4?: pulumi.Input<string>;
    name?: pulumi.Input<string>;
    nextHopSelf?: pulumi.Input<string>;
    nextHopSelf6?: pulumi.Input<string>;
    nextHopSelfRr?: pulumi.Input<string>;
    nextHopSelfRr6?: pulumi.Input<string>;
    nextHopSelfVpnv4?: pulumi.Input<string>;
    overrideCapability?: pulumi.Input<string>;
    passive?: pulumi.Input<string>;
    prefixListIn?: pulumi.Input<string>;
    prefixListIn6?: pulumi.Input<string>;
    prefixListInVpnv4?: pulumi.Input<string>;
    prefixListOut?: pulumi.Input<string>;
    prefixListOut6?: pulumi.Input<string>;
    prefixListOutVpnv4?: pulumi.Input<string>;
    remoteAs?: pulumi.Input<number>;
    removePrivateAs?: pulumi.Input<string>;
    removePrivateAs6?: pulumi.Input<string>;
    removePrivateAsVpnv4?: pulumi.Input<string>;
    restartTime?: pulumi.Input<number>;
    retainStaleTime?: pulumi.Input<number>;
    routeMapIn?: pulumi.Input<string>;
    routeMapIn6?: pulumi.Input<string>;
    routeMapInVpnv4?: pulumi.Input<string>;
    routeMapOut?: pulumi.Input<string>;
    routeMapOut6?: pulumi.Input<string>;
    routeMapOut6Preferable?: pulumi.Input<string>;
    routeMapOutPreferable?: pulumi.Input<string>;
    routeMapOutVpnv4?: pulumi.Input<string>;
    routeMapOutVpnv4Preferable?: pulumi.Input<string>;
    routeReflectorClient?: pulumi.Input<string>;
    routeReflectorClient6?: pulumi.Input<string>;
    routeReflectorClientVpnv4?: pulumi.Input<string>;
    routeServerClient?: pulumi.Input<string>;
    routeServerClient6?: pulumi.Input<string>;
    routeServerClientVpnv4?: pulumi.Input<string>;
    sendCommunity?: pulumi.Input<string>;
    sendCommunity6?: pulumi.Input<string>;
    sendCommunityVpnv4?: pulumi.Input<string>;
    shutdown?: pulumi.Input<string>;
    softReconfiguration?: pulumi.Input<string>;
    softReconfiguration6?: pulumi.Input<string>;
    softReconfigurationVpnv4?: pulumi.Input<string>;
    staleRoute?: pulumi.Input<string>;
    strictCapabilityMatch?: pulumi.Input<string>;
    unsuppressMap?: pulumi.Input<string>;
    unsuppressMap6?: pulumi.Input<string>;
    updateSource?: pulumi.Input<string>;
    weight?: pulumi.Input<number>;
}

export interface RouterBgpNeighborRange {
    id?: pulumi.Input<number>;
    maxNeighborNum?: pulumi.Input<number>;
    neighborGroup?: pulumi.Input<string>;
    prefix?: pulumi.Input<string>;
}

export interface RouterBgpNeighborRange6 {
    id?: pulumi.Input<number>;
    maxNeighborNum?: pulumi.Input<number>;
    neighborGroup?: pulumi.Input<string>;
    prefix6?: pulumi.Input<string>;
}

export interface RouterBgpNetwork {
    backdoor?: pulumi.Input<string>;
    id?: pulumi.Input<number>;
    networkImportCheck?: pulumi.Input<string>;
    prefix?: pulumi.Input<string>;
    routeMap?: pulumi.Input<string>;
}

export interface RouterBgpNetwork6 {
    backdoor?: pulumi.Input<string>;
    id?: pulumi.Input<number>;
    networkImportCheck?: pulumi.Input<string>;
    prefix6?: pulumi.Input<string>;
    routeMap?: pulumi.Input<string>;
}

export interface RouterBgpRedistribute {
    name?: pulumi.Input<string>;
    routeMap?: pulumi.Input<string>;
    status?: pulumi.Input<string>;
}

export interface RouterBgpRedistribute6 {
    name?: pulumi.Input<string>;
    routeMap?: pulumi.Input<string>;
    status?: pulumi.Input<string>;
}

export interface RouterBgpVrf {
    exportRts?: pulumi.Input<pulumi.Input<inputs.RouterBgpVrfExportRt>[]>;
    importRouteMap?: pulumi.Input<string>;
    importRts?: pulumi.Input<pulumi.Input<inputs.RouterBgpVrfImportRt>[]>;
    leakTargets?: pulumi.Input<pulumi.Input<inputs.RouterBgpVrfLeakTarget>[]>;
    rd?: pulumi.Input<string>;
    role?: pulumi.Input<string>;
    vrf?: pulumi.Input<string>;
}

export interface RouterBgpVrf6 {
    leakTargets?: pulumi.Input<pulumi.Input<inputs.RouterBgpVrf6LeakTarget>[]>;
    vrf?: pulumi.Input<string>;
}

export interface RouterBgpVrf6LeakTarget {
    interface?: pulumi.Input<string>;
    routeMap?: pulumi.Input<string>;
    vrf?: pulumi.Input<string>;
}

export interface RouterBgpVrfExportRt {
    routeTarget?: pulumi.Input<string>;
}

export interface RouterBgpVrfImportRt {
    routeTarget?: pulumi.Input<string>;
}

export interface RouterBgpVrfLeak {
    targets?: pulumi.Input<pulumi.Input<inputs.RouterBgpVrfLeakTarget>[]>;
    vrf?: pulumi.Input<string>;
}

export interface RouterBgpVrfLeak6 {
    targets?: pulumi.Input<pulumi.Input<inputs.RouterBgpVrfLeak6Target>[]>;
    vrf?: pulumi.Input<string>;
}

export interface RouterBgpVrfLeak6Target {
    interface?: pulumi.Input<string>;
    routeMap?: pulumi.Input<string>;
    vrf?: pulumi.Input<string>;
}

export interface RouterBgpVrfLeakTarget {
    interface?: pulumi.Input<string>;
    routeMap?: pulumi.Input<string>;
    vrf?: pulumi.Input<string>;
}

export interface RouterCommunityListRule {
    action?: pulumi.Input<string>;
    id?: pulumi.Input<number>;
    match?: pulumi.Input<string>;
    regexp?: pulumi.Input<string>;
}

export interface RouterIsisIsisInterface {
    authKeychainL1?: pulumi.Input<string>;
    authKeychainL2?: pulumi.Input<string>;
    authModeL1?: pulumi.Input<string>;
    authModeL2?: pulumi.Input<string>;
    authPasswordL1?: pulumi.Input<string>;
    authPasswordL2?: pulumi.Input<string>;
    authSendOnlyL1?: pulumi.Input<string>;
    authSendOnlyL2?: pulumi.Input<string>;
    circuitType?: pulumi.Input<string>;
    csnpIntervalL1?: pulumi.Input<number>;
    csnpIntervalL2?: pulumi.Input<number>;
    helloIntervalL1?: pulumi.Input<number>;
    helloIntervalL2?: pulumi.Input<number>;
    helloMultiplierL1?: pulumi.Input<number>;
    helloMultiplierL2?: pulumi.Input<number>;
    helloPadding?: pulumi.Input<string>;
    lspInterval?: pulumi.Input<number>;
    lspRetransmitInterval?: pulumi.Input<number>;
    meshGroup?: pulumi.Input<string>;
    meshGroupId?: pulumi.Input<number>;
    metricL1?: pulumi.Input<number>;
    metricL2?: pulumi.Input<number>;
    name?: pulumi.Input<string>;
    networkType?: pulumi.Input<string>;
    priorityL1?: pulumi.Input<number>;
    priorityL2?: pulumi.Input<number>;
    status?: pulumi.Input<string>;
    status6?: pulumi.Input<string>;
    wideMetricL1?: pulumi.Input<number>;
    wideMetricL2?: pulumi.Input<number>;
}

export interface RouterIsisIsisNet {
    id?: pulumi.Input<number>;
    net?: pulumi.Input<string>;
}

export interface RouterIsisRedistribute {
    level?: pulumi.Input<string>;
    metric?: pulumi.Input<number>;
    metricType?: pulumi.Input<string>;
    protocol?: pulumi.Input<string>;
    routemap?: pulumi.Input<string>;
    status?: pulumi.Input<string>;
}

export interface RouterIsisRedistribute6 {
    level?: pulumi.Input<string>;
    metric?: pulumi.Input<number>;
    metricType?: pulumi.Input<string>;
    protocol?: pulumi.Input<string>;
    routemap?: pulumi.Input<string>;
    status?: pulumi.Input<string>;
}

export interface RouterIsisSummaryAddress {
    id?: pulumi.Input<number>;
    level?: pulumi.Input<string>;
    prefix?: pulumi.Input<string>;
}

export interface RouterIsisSummaryAddress6 {
    id?: pulumi.Input<number>;
    level?: pulumi.Input<string>;
    prefix6?: pulumi.Input<string>;
}

export interface RouterKeyChainKey {
    acceptLifetime?: pulumi.Input<string>;
    algorithm?: pulumi.Input<string>;
    id?: pulumi.Input<number>;
    keyString?: pulumi.Input<string>;
    sendLifetime?: pulumi.Input<string>;
}

export interface RouterMulticast6Interface {
    helloHoldtime?: pulumi.Input<number>;
    helloInterval?: pulumi.Input<number>;
    name?: pulumi.Input<string>;
}

export interface RouterMulticast6PimSmGlobal {
    registerRateLimit?: pulumi.Input<number>;
    rpAddresses?: pulumi.Input<pulumi.Input<inputs.RouterMulticast6PimSmGlobalRpAddress>[]>;
}

export interface RouterMulticast6PimSmGlobalRpAddress {
    id?: pulumi.Input<number>;
    ip6Address?: pulumi.Input<string>;
}

export interface RouterMulticastFlowFlow {
    groupAddr?: pulumi.Input<string>;
    id?: pulumi.Input<number>;
    sourceAddr?: pulumi.Input<string>;
}

export interface RouterMulticastInterface {
    bfd?: pulumi.Input<string>;
    ciscoExcludeGenid?: pulumi.Input<string>;
    drPriority?: pulumi.Input<number>;
    helloHoldtime?: pulumi.Input<number>;
    helloInterval?: pulumi.Input<number>;
    igmp?: pulumi.Input<inputs.RouterMulticastInterfaceIgmp>;
    joinGroups?: pulumi.Input<pulumi.Input<inputs.RouterMulticastInterfaceJoinGroup>[]>;
    multicastFlow?: pulumi.Input<string>;
    name?: pulumi.Input<string>;
    neighbourFilter?: pulumi.Input<string>;
    passive?: pulumi.Input<string>;
    pimMode?: pulumi.Input<string>;
    propagationDelay?: pulumi.Input<number>;
    rpCandidate?: pulumi.Input<string>;
    rpCandidateGroup?: pulumi.Input<string>;
    rpCandidateInterval?: pulumi.Input<number>;
    rpCandidatePriority?: pulumi.Input<number>;
    rpfNbrFailBack?: pulumi.Input<string>;
    rpfNbrFailBackFilter?: pulumi.Input<string>;
    stateRefreshInterval?: pulumi.Input<number>;
    staticGroup?: pulumi.Input<string>;
    ttlThreshold?: pulumi.Input<number>;
}

export interface RouterMulticastInterfaceIgmp {
    accessGroup?: pulumi.Input<string>;
    immediateLeaveGroup?: pulumi.Input<string>;
    lastMemberQueryCount?: pulumi.Input<number>;
    lastMemberQueryInterval?: pulumi.Input<number>;
    queryInterval?: pulumi.Input<number>;
    queryMaxResponseTime?: pulumi.Input<number>;
    queryTimeout?: pulumi.Input<number>;
    routerAlertCheck?: pulumi.Input<string>;
    version?: pulumi.Input<string>;
}

export interface RouterMulticastInterfaceJoinGroup {
    address?: pulumi.Input<string>;
}

export interface RouterMulticastPimSmGlobal {
    acceptRegisterList?: pulumi.Input<string>;
    acceptSourceList?: pulumi.Input<string>;
    bsrAllowQuickRefresh?: pulumi.Input<string>;
    bsrCandidate?: pulumi.Input<string>;
    bsrHash?: pulumi.Input<number>;
    bsrInterface?: pulumi.Input<string>;
    bsrPriority?: pulumi.Input<number>;
    ciscoCrpPrefix?: pulumi.Input<string>;
    ciscoIgnoreRpSetPriority?: pulumi.Input<string>;
    ciscoRegisterChecksum?: pulumi.Input<string>;
    ciscoRegisterChecksumGroup?: pulumi.Input<string>;
    joinPruneHoldtime?: pulumi.Input<number>;
    messageInterval?: pulumi.Input<number>;
    nullRegisterRetries?: pulumi.Input<number>;
    registerRateLimit?: pulumi.Input<number>;
    registerRpReachability?: pulumi.Input<string>;
    registerSource?: pulumi.Input<string>;
    registerSourceInterface?: pulumi.Input<string>;
    registerSourceIp?: pulumi.Input<string>;
    registerSupression?: pulumi.Input<number>;
    rpAddresses?: pulumi.Input<pulumi.Input<inputs.RouterMulticastPimSmGlobalRpAddress>[]>;
    rpRegisterKeepalive?: pulumi.Input<number>;
    sptThreshold?: pulumi.Input<string>;
    sptThresholdGroup?: pulumi.Input<string>;
    ssm?: pulumi.Input<string>;
    ssmRange?: pulumi.Input<string>;
}

export interface RouterMulticastPimSmGlobalRpAddress {
    group?: pulumi.Input<string>;
    id?: pulumi.Input<number>;
    ipAddress?: pulumi.Input<string>;
}

export interface RouterOspf6Area {
    authentication?: pulumi.Input<string>;
    defaultCost?: pulumi.Input<number>;
    id?: pulumi.Input<string>;
    ipsecAuthAlg?: pulumi.Input<string>;
    ipsecEncAlg?: pulumi.Input<string>;
    ipsecKeys?: pulumi.Input<pulumi.Input<inputs.RouterOspf6AreaIpsecKey>[]>;
    keyRolloverInterval?: pulumi.Input<number>;
    nssaDefaultInformationOriginate?: pulumi.Input<string>;
    nssaDefaultInformationOriginateMetric?: pulumi.Input<number>;
    nssaDefaultInformationOriginateMetricType?: pulumi.Input<string>;
    nssaRedistribution?: pulumi.Input<string>;
    nssaTranslatorRole?: pulumi.Input<string>;
    ranges?: pulumi.Input<pulumi.Input<inputs.RouterOspf6AreaRange>[]>;
    stubType?: pulumi.Input<string>;
    type?: pulumi.Input<string>;
    virtualLinks?: pulumi.Input<pulumi.Input<inputs.RouterOspf6AreaVirtualLink>[]>;
}

export interface RouterOspf6AreaIpsecKey {
    authKey?: pulumi.Input<string>;
    encKey?: pulumi.Input<string>;
    spi?: pulumi.Input<number>;
}

export interface RouterOspf6AreaRange {
    advertise?: pulumi.Input<string>;
    id?: pulumi.Input<number>;
    prefix6?: pulumi.Input<string>;
}

export interface RouterOspf6AreaVirtualLink {
    authentication?: pulumi.Input<string>;
    deadInterval?: pulumi.Input<number>;
    helloInterval?: pulumi.Input<number>;
    ipsecAuthAlg?: pulumi.Input<string>;
    ipsecEncAlg?: pulumi.Input<string>;
    ipsecKeys?: pulumi.Input<pulumi.Input<inputs.RouterOspf6AreaVirtualLinkIpsecKey>[]>;
    keyRolloverInterval?: pulumi.Input<number>;
    name?: pulumi.Input<string>;
    peer?: pulumi.Input<string>;
    retransmitInterval?: pulumi.Input<number>;
    transmitDelay?: pulumi.Input<number>;
}

export interface RouterOspf6AreaVirtualLinkIpsecKey {
    authKey?: pulumi.Input<string>;
    encKey?: pulumi.Input<string>;
    spi?: pulumi.Input<number>;
}

export interface RouterOspf6Ospf6Interface {
    areaId?: pulumi.Input<string>;
    authentication?: pulumi.Input<string>;
    bfd?: pulumi.Input<string>;
    cost?: pulumi.Input<number>;
    deadInterval?: pulumi.Input<number>;
    helloInterval?: pulumi.Input<number>;
    interface?: pulumi.Input<string>;
    ipsecAuthAlg?: pulumi.Input<string>;
    ipsecEncAlg?: pulumi.Input<string>;
    ipsecKeys?: pulumi.Input<pulumi.Input<inputs.RouterOspf6Ospf6InterfaceIpsecKey>[]>;
    keyRolloverInterval?: pulumi.Input<number>;
    mtu?: pulumi.Input<number>;
    mtuIgnore?: pulumi.Input<string>;
    name?: pulumi.Input<string>;
    neighbors?: pulumi.Input<pulumi.Input<inputs.RouterOspf6Ospf6InterfaceNeighbor>[]>;
    networkType?: pulumi.Input<string>;
    priority?: pulumi.Input<number>;
    retransmitInterval?: pulumi.Input<number>;
    status?: pulumi.Input<string>;
    transmitDelay?: pulumi.Input<number>;
}

export interface RouterOspf6Ospf6InterfaceIpsecKey {
    authKey?: pulumi.Input<string>;
    encKey?: pulumi.Input<string>;
    spi?: pulumi.Input<number>;
}

export interface RouterOspf6Ospf6InterfaceNeighbor {
    cost?: pulumi.Input<number>;
    ip6?: pulumi.Input<string>;
    pollInterval?: pulumi.Input<number>;
    priority?: pulumi.Input<number>;
}

export interface RouterOspf6PassiveInterface {
    name?: pulumi.Input<string>;
}

export interface RouterOspf6Redistribute {
    metric?: pulumi.Input<number>;
    metricType?: pulumi.Input<string>;
    name?: pulumi.Input<string>;
    routemap?: pulumi.Input<string>;
    status?: pulumi.Input<string>;
}

export interface RouterOspf6SummaryAddress {
    advertise?: pulumi.Input<string>;
    id?: pulumi.Input<number>;
    prefix6?: pulumi.Input<string>;
    tag?: pulumi.Input<number>;
}

export interface RouterOspfArea {
    authentication?: pulumi.Input<string>;
    comments?: pulumi.Input<string>;
    defaultCost?: pulumi.Input<number>;
    filterLists?: pulumi.Input<pulumi.Input<inputs.RouterOspfAreaFilterList>[]>;
    id?: pulumi.Input<string>;
    nssaDefaultInformationOriginate?: pulumi.Input<string>;
    nssaDefaultInformationOriginateMetric?: pulumi.Input<number>;
    nssaDefaultInformationOriginateMetricType?: pulumi.Input<string>;
    nssaRedistribution?: pulumi.Input<string>;
    nssaTranslatorRole?: pulumi.Input<string>;
    ranges?: pulumi.Input<pulumi.Input<inputs.RouterOspfAreaRange>[]>;
    shortcut?: pulumi.Input<string>;
    stubType?: pulumi.Input<string>;
    type?: pulumi.Input<string>;
    virtualLinks?: pulumi.Input<pulumi.Input<inputs.RouterOspfAreaVirtualLink>[]>;
}

export interface RouterOspfAreaFilterList {
    direction?: pulumi.Input<string>;
    id?: pulumi.Input<number>;
    list?: pulumi.Input<string>;
}

export interface RouterOspfAreaRange {
    advertise?: pulumi.Input<string>;
    id?: pulumi.Input<number>;
    prefix?: pulumi.Input<string>;
    substitute?: pulumi.Input<string>;
    substituteStatus?: pulumi.Input<string>;
}

export interface RouterOspfAreaVirtualLink {
    authentication?: pulumi.Input<string>;
    authenticationKey?: pulumi.Input<string>;
    deadInterval?: pulumi.Input<number>;
    helloInterval?: pulumi.Input<number>;
    keychain?: pulumi.Input<string>;
    md5Key?: pulumi.Input<string>;
    md5Keychain?: pulumi.Input<string>;
    md5Keys?: pulumi.Input<pulumi.Input<inputs.RouterOspfAreaVirtualLinkMd5Key>[]>;
    name?: pulumi.Input<string>;
    peer?: pulumi.Input<string>;
    retransmitInterval?: pulumi.Input<number>;
    transmitDelay?: pulumi.Input<number>;
}

export interface RouterOspfAreaVirtualLinkMd5Key {
    id?: pulumi.Input<number>;
    keyString?: pulumi.Input<string>;
}

export interface RouterOspfDistributeList {
    accessList?: pulumi.Input<string>;
    id?: pulumi.Input<number>;
    protocol?: pulumi.Input<string>;
}

export interface RouterOspfNeighbor {
    cost?: pulumi.Input<number>;
    id?: pulumi.Input<number>;
    ip?: pulumi.Input<string>;
    pollInterval?: pulumi.Input<number>;
    priority?: pulumi.Input<number>;
}

export interface RouterOspfNetwork {
    area?: pulumi.Input<string>;
    comments?: pulumi.Input<string>;
    id?: pulumi.Input<number>;
    prefix?: pulumi.Input<string>;
}

export interface RouterOspfOspfInterface {
    authentication?: pulumi.Input<string>;
    authenticationKey?: pulumi.Input<string>;
    bfd?: pulumi.Input<string>;
    comments?: pulumi.Input<string>;
    cost?: pulumi.Input<number>;
    databaseFilterOut?: pulumi.Input<string>;
    deadInterval?: pulumi.Input<number>;
    helloInterval?: pulumi.Input<number>;
    helloMultiplier?: pulumi.Input<number>;
    interface?: pulumi.Input<string>;
    ip?: pulumi.Input<string>;
    keychain?: pulumi.Input<string>;
    md5Key?: pulumi.Input<string>;
    md5Keychain?: pulumi.Input<string>;
    md5Keys?: pulumi.Input<pulumi.Input<inputs.RouterOspfOspfInterfaceMd5Key>[]>;
    mtu?: pulumi.Input<number>;
    mtuIgnore?: pulumi.Input<string>;
    name?: pulumi.Input<string>;
    networkType?: pulumi.Input<string>;
    prefixLength?: pulumi.Input<number>;
    priority?: pulumi.Input<number>;
    resyncTimeout?: pulumi.Input<number>;
    retransmitInterval?: pulumi.Input<number>;
    status?: pulumi.Input<string>;
    transmitDelay?: pulumi.Input<number>;
}

export interface RouterOspfOspfInterfaceMd5Key {
    id?: pulumi.Input<number>;
    keyString?: pulumi.Input<string>;
}

export interface RouterOspfPassiveInterface {
    name?: pulumi.Input<string>;
}

export interface RouterOspfRedistribute {
    metric?: pulumi.Input<number>;
    metricType?: pulumi.Input<string>;
    name?: pulumi.Input<string>;
    routemap?: pulumi.Input<string>;
    status?: pulumi.Input<string>;
    tag?: pulumi.Input<number>;
}

export interface RouterOspfSummaryAddress {
    advertise?: pulumi.Input<string>;
    id?: pulumi.Input<number>;
    prefix?: pulumi.Input<string>;
    tag?: pulumi.Input<number>;
}

export interface RouterPolicy6Dstaddr {
    name?: pulumi.Input<string>;
}

export interface RouterPolicy6InternetServiceCustom {
    name?: pulumi.Input<string>;
}

export interface RouterPolicy6InternetServiceId {
    id?: pulumi.Input<number>;
}

export interface RouterPolicy6Srcaddr {
    name?: pulumi.Input<string>;
}

export interface RouterPolicyDst {
    subnet?: pulumi.Input<string>;
}

export interface RouterPolicyDstaddr {
    name?: pulumi.Input<string>;
}

export interface RouterPolicyInputDevice {
    name?: pulumi.Input<string>;
}

export interface RouterPolicyInternetServiceCustom {
    name?: pulumi.Input<string>;
}

export interface RouterPolicyInternetServiceId {
    id?: pulumi.Input<number>;
}

export interface RouterPolicySrc {
    subnet?: pulumi.Input<string>;
}

export interface RouterPolicySrcaddr {
    name?: pulumi.Input<string>;
}

export interface RouterPrefixList6Rule {
    action?: pulumi.Input<string>;
    flags?: pulumi.Input<number>;
    ge?: pulumi.Input<number>;
    id?: pulumi.Input<number>;
    le?: pulumi.Input<number>;
    prefix6?: pulumi.Input<string>;
}

export interface RouterPrefixListRule {
    action?: pulumi.Input<string>;
    flags?: pulumi.Input<number>;
    ge?: pulumi.Input<number>;
    id?: pulumi.Input<number>;
    le?: pulumi.Input<number>;
    prefix?: pulumi.Input<string>;
}

export interface RouterRipDistance {
    accessList?: pulumi.Input<string>;
    distance?: pulumi.Input<number>;
    id?: pulumi.Input<number>;
    prefix?: pulumi.Input<string>;
}

export interface RouterRipDistributeList {
    direction?: pulumi.Input<string>;
    id?: pulumi.Input<number>;
    interface?: pulumi.Input<string>;
    listname?: pulumi.Input<string>;
    status?: pulumi.Input<string>;
}

export interface RouterRipInterface {
    authKeychain?: pulumi.Input<string>;
    authMode?: pulumi.Input<string>;
    authString?: pulumi.Input<string>;
    flags?: pulumi.Input<number>;
    name?: pulumi.Input<string>;
    receiveVersion?: pulumi.Input<string>;
    sendVersion?: pulumi.Input<string>;
    sendVersion2Broadcast?: pulumi.Input<string>;
    splitHorizon?: pulumi.Input<string>;
    splitHorizonStatus?: pulumi.Input<string>;
}

export interface RouterRipNeighbor {
    id?: pulumi.Input<number>;
    ip?: pulumi.Input<string>;
}

export interface RouterRipNetwork {
    id?: pulumi.Input<number>;
    prefix?: pulumi.Input<string>;
}

export interface RouterRipOffsetList {
    accessList?: pulumi.Input<string>;
    direction?: pulumi.Input<string>;
    id?: pulumi.Input<number>;
    interface?: pulumi.Input<string>;
    offset?: pulumi.Input<number>;
    status?: pulumi.Input<string>;
}

export interface RouterRipPassiveInterface {
    name?: pulumi.Input<string>;
}

export interface RouterRipRedistribute {
    metric?: pulumi.Input<number>;
    name?: pulumi.Input<string>;
    routemap?: pulumi.Input<string>;
    status?: pulumi.Input<string>;
}

export interface RouterRipngAggregateAddress {
    id?: pulumi.Input<number>;
    prefix6?: pulumi.Input<string>;
}

export interface RouterRipngDistance {
    accessList6?: pulumi.Input<string>;
    distance?: pulumi.Input<number>;
    id?: pulumi.Input<number>;
    prefix6?: pulumi.Input<string>;
}

export interface RouterRipngDistributeList {
    direction?: pulumi.Input<string>;
    id?: pulumi.Input<number>;
    interface?: pulumi.Input<string>;
    listname?: pulumi.Input<string>;
    status?: pulumi.Input<string>;
}

export interface RouterRipngInterface {
    flags?: pulumi.Input<number>;
    name?: pulumi.Input<string>;
    splitHorizon?: pulumi.Input<string>;
    splitHorizonStatus?: pulumi.Input<string>;
}

export interface RouterRipngNeighbor {
    id?: pulumi.Input<number>;
    interface?: pulumi.Input<string>;
    ip6?: pulumi.Input<string>;
}

export interface RouterRipngNetwork {
    id?: pulumi.Input<number>;
    prefix?: pulumi.Input<string>;
}

export interface RouterRipngOffsetList {
    accessList6?: pulumi.Input<string>;
    direction?: pulumi.Input<string>;
    id?: pulumi.Input<number>;
    interface?: pulumi.Input<string>;
    offset?: pulumi.Input<number>;
    status?: pulumi.Input<string>;
}

export interface RouterRipngPassiveInterface {
    name?: pulumi.Input<string>;
}

export interface RouterRipngRedistribute {
    metric?: pulumi.Input<number>;
    name?: pulumi.Input<string>;
    routemap?: pulumi.Input<string>;
    status?: pulumi.Input<string>;
}

export interface RouterRouteMapRule {
    action?: pulumi.Input<string>;
    id?: pulumi.Input<number>;
    matchAsPath?: pulumi.Input<string>;
    matchCommunity?: pulumi.Input<string>;
    matchCommunityExact?: pulumi.Input<string>;
    matchFlags?: pulumi.Input<number>;
    matchInterface?: pulumi.Input<string>;
    matchIp6Address?: pulumi.Input<string>;
    matchIp6Nexthop?: pulumi.Input<string>;
    matchIpAddress?: pulumi.Input<string>;
    matchIpNexthop?: pulumi.Input<string>;
    matchMetric?: pulumi.Input<number>;
    matchOrigin?: pulumi.Input<string>;
    matchRouteType?: pulumi.Input<string>;
    matchTag?: pulumi.Input<number>;
    matchVrf?: pulumi.Input<number>;
    setAggregatorAs?: pulumi.Input<number>;
    setAggregatorIp?: pulumi.Input<string>;
    setAspathAction?: pulumi.Input<string>;
    setAspaths?: pulumi.Input<pulumi.Input<inputs.RouterRouteMapRuleSetAspath>[]>;
    setAtomicAggregate?: pulumi.Input<string>;
    setCommunities?: pulumi.Input<pulumi.Input<inputs.RouterRouteMapRuleSetCommunity>[]>;
    setCommunityAdditive?: pulumi.Input<string>;
    setCommunityDelete?: pulumi.Input<string>;
    setDampeningMaxSuppress?: pulumi.Input<number>;
    setDampeningReachabilityHalfLife?: pulumi.Input<number>;
    setDampeningReuse?: pulumi.Input<number>;
    setDampeningSuppress?: pulumi.Input<number>;
    setDampeningUnreachabilityHalfLife?: pulumi.Input<number>;
    setExtcommunityRts?: pulumi.Input<pulumi.Input<inputs.RouterRouteMapRuleSetExtcommunityRt>[]>;
    setExtcommunitySoos?: pulumi.Input<pulumi.Input<inputs.RouterRouteMapRuleSetExtcommunitySoo>[]>;
    setFlags?: pulumi.Input<number>;
    setIp6Nexthop?: pulumi.Input<string>;
    setIp6NexthopLocal?: pulumi.Input<string>;
    setIpNexthop?: pulumi.Input<string>;
    setLocalPreference?: pulumi.Input<number>;
    setMetric?: pulumi.Input<number>;
    setMetricType?: pulumi.Input<string>;
    setOrigin?: pulumi.Input<string>;
    setOriginatorId?: pulumi.Input<string>;
    setPriority?: pulumi.Input<number>;
    setRouteTag?: pulumi.Input<number>;
    setTag?: pulumi.Input<number>;
    setWeight?: pulumi.Input<number>;
}

export interface RouterRouteMapRuleSetAspath {
    as?: pulumi.Input<string>;
}

export interface RouterRouteMapRuleSetCommunity {
    community?: pulumi.Input<string>;
}

export interface RouterRouteMapRuleSetExtcommunityRt {
    community?: pulumi.Input<string>;
}

export interface RouterRouteMapRuleSetExtcommunitySoo {
    community?: pulumi.Input<string>;
}

export interface RouterStatic6SdwanZone {
    name?: pulumi.Input<string>;
}

export interface RouterStaticSdwanZone {
    name?: pulumi.Input<string>;
}

export interface RouterbgpNeighborConditionalAdvertise {
    advertiseRoutemap?: pulumi.Input<string>;
    conditionRoutemap?: pulumi.Input<string>;
    conditionType?: pulumi.Input<string>;
}

export interface RouterbgpNeighborConditionalAdvertise6 {
    advertiseRoutemap?: pulumi.Input<string>;
    conditionRoutemap?: pulumi.Input<string>;
    conditionType?: pulumi.Input<string>;
}

export interface Routerospf6Ospf6InterfaceIpsecKey {
    authKey?: pulumi.Input<string>;
    encKey?: pulumi.Input<string>;
    spi?: pulumi.Input<number>;
}

export interface Routerospf6Ospf6InterfaceNeighbor {
    cost?: pulumi.Input<number>;
    ip6?: pulumi.Input<string>;
    pollInterval?: pulumi.Input<number>;
    priority?: pulumi.Input<number>;
}

export interface RouterospfOspfInterfaceMd5Key {
    id?: pulumi.Input<number>;
    keyString?: pulumi.Input<string>;
}

export interface SctpFilterProfilePpidFilter {
    action?: pulumi.Input<string>;
    comment?: pulumi.Input<string>;
    id?: pulumi.Input<number>;
    ppid?: pulumi.Input<number>;
}

export interface SpamfilterBwlEntry {
    action?: pulumi.Input<string>;
    addrType?: pulumi.Input<string>;
    emailPattern?: pulumi.Input<string>;
    id?: pulumi.Input<number>;
    ip4Subnet?: pulumi.Input<string>;
    ip6Subnet?: pulumi.Input<string>;
    patternType?: pulumi.Input<string>;
    status?: pulumi.Input<string>;
    type?: pulumi.Input<string>;
}

export interface SpamfilterBwordEntry {
    action?: pulumi.Input<string>;
    id?: pulumi.Input<number>;
    language?: pulumi.Input<string>;
    pattern?: pulumi.Input<string>;
    patternType?: pulumi.Input<string>;
    score?: pulumi.Input<number>;
    status?: pulumi.Input<string>;
    where?: pulumi.Input<string>;
}

export interface SpamfilterDnsblEntry {
    action?: pulumi.Input<string>;
    id?: pulumi.Input<number>;
    server?: pulumi.Input<string>;
    status?: pulumi.Input<string>;
}

export interface SpamfilterIptrustEntry {
    addrType?: pulumi.Input<string>;
    id?: pulumi.Input<number>;
    ip4Subnet?: pulumi.Input<string>;
    ip6Subnet?: pulumi.Input<string>;
    status?: pulumi.Input<string>;
}

export interface SpamfilterMheaderEntry {
    action?: pulumi.Input<string>;
    fieldbody?: pulumi.Input<string>;
    fieldname?: pulumi.Input<string>;
    id?: pulumi.Input<number>;
    patternType?: pulumi.Input<string>;
    status?: pulumi.Input<string>;
}

export interface SpamfilterProfileGmail {
    log?: pulumi.Input<string>;
}

export interface SpamfilterProfileImap {
    action?: pulumi.Input<string>;
    log?: pulumi.Input<string>;
    tagMsg?: pulumi.Input<string>;
    tagType?: pulumi.Input<string>;
}

export interface SpamfilterProfileMapi {
    action?: pulumi.Input<string>;
    log?: pulumi.Input<string>;
}

export interface SpamfilterProfileMsnHotmail {
    log?: pulumi.Input<string>;
}

export interface SpamfilterProfilePop3 {
    action?: pulumi.Input<string>;
    log?: pulumi.Input<string>;
    tagMsg?: pulumi.Input<string>;
    tagType?: pulumi.Input<string>;
}

export interface SpamfilterProfileSmtp {
    action?: pulumi.Input<string>;
    hdrip?: pulumi.Input<string>;
    localOverride?: pulumi.Input<string>;
    log?: pulumi.Input<string>;
    tagMsg?: pulumi.Input<string>;
    tagType?: pulumi.Input<string>;
}

export interface SpamfilterProfileYahooMail {
    log?: pulumi.Input<string>;
}

export interface SshFilterProfileFileFilter {
    entries?: pulumi.Input<pulumi.Input<inputs.SshFilterProfileFileFilterEntry>[]>;
    log?: pulumi.Input<string>;
    scanArchiveContents?: pulumi.Input<string>;
    status?: pulumi.Input<string>;
}

export interface SshFilterProfileFileFilterEntry {
    action?: pulumi.Input<string>;
    comment?: pulumi.Input<string>;
    direction?: pulumi.Input<string>;
    fileTypes?: pulumi.Input<pulumi.Input<inputs.SshFilterProfileFileFilterEntryFileType>[]>;
    filter?: pulumi.Input<string>;
    passwordProtected?: pulumi.Input<string>;
}

export interface SshFilterProfileFileFilterEntryFileType {
    name?: pulumi.Input<string>;
}

export interface SshFilterProfileShellCommand {
    action?: pulumi.Input<string>;
    alert?: pulumi.Input<string>;
    id?: pulumi.Input<number>;
    log?: pulumi.Input<string>;
    pattern?: pulumi.Input<string>;
    severity?: pulumi.Input<string>;
    type?: pulumi.Input<string>;
}

export interface SwitchControllerAutoConfigCustomSwitchBinding {
    policy?: pulumi.Input<string>;
    switchId?: pulumi.Input<string>;
}

export interface SwitchControllerDynamicPortPolicyPolicy {
    bouncePortLink?: pulumi.Input<string>;
    category?: pulumi.Input<string>;
    description?: pulumi.Input<string>;
    family?: pulumi.Input<string>;
    host?: pulumi.Input<string>;
    hwVendor?: pulumi.Input<string>;
    interfaceTags?: pulumi.Input<pulumi.Input<inputs.SwitchControllerDynamicPortPolicyPolicyInterfaceTag>[]>;
    lldpProfile?: pulumi.Input<string>;
    mac?: pulumi.Input<string>;
    n8021x?: pulumi.Input<string>;
    name?: pulumi.Input<string>;
    qosPolicy?: pulumi.Input<string>;
    status?: pulumi.Input<string>;
    type?: pulumi.Input<string>;
    vlanPolicy?: pulumi.Input<string>;
}

export interface SwitchControllerDynamicPortPolicyPolicyInterfaceTag {
    tagName?: pulumi.Input<string>;
}

export interface SwitchControllerFlowTrackingAggregate {
    id?: pulumi.Input<number>;
    ip?: pulumi.Input<string>;
}

export interface SwitchControllerFlowTrackingCollector {
    ip?: pulumi.Input<string>;
    name?: pulumi.Input<string>;
    port?: pulumi.Input<number>;
    transport?: pulumi.Input<string>;
}

export interface SwitchControllerFortilinkSettingsNacPorts {
    bounceNacPort?: pulumi.Input<string>;
    lanSegment?: pulumi.Input<string>;
    memberChange?: pulumi.Input<number>;
    nacLanInterface?: pulumi.Input<string>;
    nacSegmentVlans?: pulumi.Input<pulumi.Input<inputs.SwitchControllerFortilinkSettingsNacPortsNacSegmentVlan>[]>;
    onboardingVlan?: pulumi.Input<string>;
    parentKey?: pulumi.Input<string>;
}

export interface SwitchControllerFortilinkSettingsNacPortsNacSegmentVlan {
    vlanName?: pulumi.Input<string>;
}

export interface SwitchControllerGlobalCustomCommand {
    commandEntry?: pulumi.Input<string>;
    commandName?: pulumi.Input<string>;
}

export interface SwitchControllerGlobalDisableDiscovery {
    name?: pulumi.Input<string>;
}

export interface SwitchControllerLldpProfileCustomTlv {
    informationString?: pulumi.Input<string>;
    name?: pulumi.Input<string>;
    oui?: pulumi.Input<string>;
    subtype?: pulumi.Input<number>;
}

export interface SwitchControllerLldpProfileMedLocationService {
    name?: pulumi.Input<string>;
    status?: pulumi.Input<string>;
    sysLocationId?: pulumi.Input<string>;
}

export interface SwitchControllerLldpProfileMedNetworkPolicy {
    assignVlan?: pulumi.Input<string>;
    dscp?: pulumi.Input<number>;
    name?: pulumi.Input<string>;
    priority?: pulumi.Input<number>;
    status?: pulumi.Input<string>;
    vlan?: pulumi.Input<number>;
    vlanIntf?: pulumi.Input<string>;
}

export interface SwitchControllerLocationAddressCivic {
    additional?: pulumi.Input<string>;
    additionalCode?: pulumi.Input<string>;
    block?: pulumi.Input<string>;
    branchRoad?: pulumi.Input<string>;
    building?: pulumi.Input<string>;
    city?: pulumi.Input<string>;
    cityDivision?: pulumi.Input<string>;
    country?: pulumi.Input<string>;
    countrySubdivision?: pulumi.Input<string>;
    county?: pulumi.Input<string>;
    direction?: pulumi.Input<string>;
    floor?: pulumi.Input<string>;
    landmark?: pulumi.Input<string>;
    language?: pulumi.Input<string>;
    name?: pulumi.Input<string>;
    number?: pulumi.Input<string>;
    numberSuffix?: pulumi.Input<string>;
    parentKey?: pulumi.Input<string>;
    placeType?: pulumi.Input<string>;
    postOfficeBox?: pulumi.Input<string>;
    postalCommunity?: pulumi.Input<string>;
    primaryRoad?: pulumi.Input<string>;
    roadSection?: pulumi.Input<string>;
    room?: pulumi.Input<string>;
    script?: pulumi.Input<string>;
    seat?: pulumi.Input<string>;
    street?: pulumi.Input<string>;
    streetNamePostMod?: pulumi.Input<string>;
    streetNamePreMod?: pulumi.Input<string>;
    streetSuffix?: pulumi.Input<string>;
    subBranchRoad?: pulumi.Input<string>;
    trailingStrSuffix?: pulumi.Input<string>;
    unit?: pulumi.Input<string>;
    zip?: pulumi.Input<string>;
}

export interface SwitchControllerLocationCoordinates {
    altitude?: pulumi.Input<string>;
    altitudeUnit?: pulumi.Input<string>;
    datum?: pulumi.Input<string>;
    latitude?: pulumi.Input<string>;
    longitude?: pulumi.Input<string>;
    parentKey?: pulumi.Input<string>;
}

export interface SwitchControllerLocationElinNumber {
    elinNum?: pulumi.Input<string>;
    parentKey?: pulumi.Input<string>;
}

export interface SwitchControllerManagedSwitchCustomCommand {
    commandEntry?: pulumi.Input<string>;
    commandName?: pulumi.Input<string>;
}

export interface SwitchControllerManagedSwitchIgmpSnooping {
    agingTime?: pulumi.Input<number>;
    floodUnknownMulticast?: pulumi.Input<string>;
    localOverride?: pulumi.Input<string>;
    vlans?: pulumi.Input<pulumi.Input<inputs.SwitchControllerManagedSwitchIgmpSnoopingVlan>[]>;
}

export interface SwitchControllerManagedSwitchIgmpSnoopingVlan {
    proxy?: pulumi.Input<string>;
    querier?: pulumi.Input<string>;
    querierAddr?: pulumi.Input<string>;
    version?: pulumi.Input<number>;
    vlanName?: pulumi.Input<string>;
}

export interface SwitchControllerManagedSwitchIpSourceGuard {
    bindingEntries?: pulumi.Input<pulumi.Input<inputs.SwitchControllerManagedSwitchIpSourceGuardBindingEntry>[]>;
    description?: pulumi.Input<string>;
    port?: pulumi.Input<string>;
}

export interface SwitchControllerManagedSwitchIpSourceGuardBindingEntry {
    entryName?: pulumi.Input<string>;
    ip?: pulumi.Input<string>;
    mac?: pulumi.Input<string>;
}

export interface SwitchControllerManagedSwitchMirror {
    dst?: pulumi.Input<string>;
    name?: pulumi.Input<string>;
    srcEgresses?: pulumi.Input<pulumi.Input<inputs.SwitchControllerManagedSwitchMirrorSrcEgress>[]>;
    srcIngresses?: pulumi.Input<pulumi.Input<inputs.SwitchControllerManagedSwitchMirrorSrcIngress>[]>;
    status?: pulumi.Input<string>;
    switchingPacket?: pulumi.Input<string>;
}

export interface SwitchControllerManagedSwitchMirrorSrcEgress {
    name?: pulumi.Input<string>;
}

export interface SwitchControllerManagedSwitchMirrorSrcIngress {
    name?: pulumi.Input<string>;
}

export interface SwitchControllerManagedSwitchN8021xSettings {
    linkDownAuth?: pulumi.Input<string>;
    localOverride?: pulumi.Input<string>;
    mabReauth?: pulumi.Input<string>;
    maxReauthAttempt?: pulumi.Input<number>;
    reauthPeriod?: pulumi.Input<number>;
    txPeriod?: pulumi.Input<number>;
}

export interface SwitchControllerManagedSwitchPort {
    accessMode?: pulumi.Input<string>;
    aggregatorMode?: pulumi.Input<string>;
    allowedVlans?: pulumi.Input<pulumi.Input<inputs.SwitchControllerManagedSwitchPortAllowedVlan>[]>;
    allowedVlansAll?: pulumi.Input<string>;
    arpInspectionTrust?: pulumi.Input<string>;
    bundle?: pulumi.Input<string>;
    description?: pulumi.Input<string>;
    dhcpSnoopOption82Trust?: pulumi.Input<string>;
    dhcpSnooping?: pulumi.Input<string>;
    discardMode?: pulumi.Input<string>;
    edgePort?: pulumi.Input<string>;
    exportTags?: pulumi.Input<pulumi.Input<inputs.SwitchControllerManagedSwitchPortExportTag>[]>;
    exportTo?: pulumi.Input<string>;
    exportToPool?: pulumi.Input<string>;
    exportToPoolFlag?: pulumi.Input<number>;
    fecCapable?: pulumi.Input<number>;
    fecState?: pulumi.Input<string>;
    fgtPeerDeviceName?: pulumi.Input<string>;
    fgtPeerPortName?: pulumi.Input<string>;
    fiberPort?: pulumi.Input<number>;
    flags?: pulumi.Input<number>;
    flapDuration?: pulumi.Input<number>;
    flapRate?: pulumi.Input<number>;
    flapTimeout?: pulumi.Input<number>;
    flapguard?: pulumi.Input<string>;
    flowControl?: pulumi.Input<string>;
    fortilinkPort?: pulumi.Input<number>;
    igmpSnooping?: pulumi.Input<string>;
    igmpSnoopingFloodReports?: pulumi.Input<string>;
    igmpsFloodReports?: pulumi.Input<string>;
    igmpsFloodTraffic?: pulumi.Input<string>;
    interfaceTags?: pulumi.Input<pulumi.Input<inputs.SwitchControllerManagedSwitchPortInterfaceTag>[]>;
    ipSourceGuard?: pulumi.Input<string>;
    islLocalTrunkName?: pulumi.Input<string>;
    islPeerDeviceName?: pulumi.Input<string>;
    islPeerPortName?: pulumi.Input<string>;
    lacpSpeed?: pulumi.Input<string>;
    learningLimit?: pulumi.Input<number>;
    lldpProfile?: pulumi.Input<string>;
    lldpStatus?: pulumi.Input<string>;
    loopGuard?: pulumi.Input<string>;
    loopGuardTimeout?: pulumi.Input<number>;
    macAddr?: pulumi.Input<string>;
    matchedDppIntfTags?: pulumi.Input<string>;
    matchedDppPolicy?: pulumi.Input<string>;
    maxBundle?: pulumi.Input<number>;
    mcastSnoopingFloodTraffic?: pulumi.Input<string>;
    mclag?: pulumi.Input<string>;
    mclagIclPort?: pulumi.Input<number>;
    mediaType?: pulumi.Input<string>;
    memberWithdrawalBehavior?: pulumi.Input<string>;
    members?: pulumi.Input<pulumi.Input<inputs.SwitchControllerManagedSwitchPortMember>[]>;
    minBundle?: pulumi.Input<number>;
    mode?: pulumi.Input<string>;
    p2pPort?: pulumi.Input<number>;
    packetSampleRate?: pulumi.Input<number>;
    packetSampler?: pulumi.Input<string>;
    pauseMeter?: pulumi.Input<number>;
    pauseMeterResume?: pulumi.Input<string>;
    poeCapable?: pulumi.Input<number>;
    poeMaxPower?: pulumi.Input<string>;
    poePreStandardDetection?: pulumi.Input<string>;
    poeStandard?: pulumi.Input<string>;
    poeStatus?: pulumi.Input<string>;
    portName?: pulumi.Input<string>;
    portNumber?: pulumi.Input<number>;
    portOwner?: pulumi.Input<string>;
    portPolicy?: pulumi.Input<string>;
    portPrefixType?: pulumi.Input<number>;
    portSecurityPolicy?: pulumi.Input<string>;
    portSelectionCriteria?: pulumi.Input<string>;
    ptpPolicy?: pulumi.Input<string>;
    qosPolicy?: pulumi.Input<string>;
    rpvstPort?: pulumi.Input<string>;
    sampleDirection?: pulumi.Input<string>;
    sflowCounterInterval?: pulumi.Input<number>;
    sflowSampleRate?: pulumi.Input<number>;
    sflowSampler?: pulumi.Input<string>;
    speed?: pulumi.Input<string>;
    speedMask?: pulumi.Input<number>;
    stackingPort?: pulumi.Input<number>;
    status?: pulumi.Input<string>;
    stickyMac?: pulumi.Input<string>;
    stormControlPolicy?: pulumi.Input<string>;
    stpBpduGuard?: pulumi.Input<string>;
    stpBpduGuardTimeout?: pulumi.Input<number>;
    stpRootGuard?: pulumi.Input<string>;
    stpState?: pulumi.Input<string>;
    switchId?: pulumi.Input<string>;
    type?: pulumi.Input<string>;
    untaggedVlans?: pulumi.Input<pulumi.Input<inputs.SwitchControllerManagedSwitchPortUntaggedVlan>[]>;
    virtualPort?: pulumi.Input<number>;
    vlan?: pulumi.Input<string>;
}

export interface SwitchControllerManagedSwitchPortAllowedVlan {
    vlanName?: pulumi.Input<string>;
}

export interface SwitchControllerManagedSwitchPortExportTag {
    tagName?: pulumi.Input<string>;
}

export interface SwitchControllerManagedSwitchPortInterfaceTag {
    tagName?: pulumi.Input<string>;
}

export interface SwitchControllerManagedSwitchPortMember {
    memberName?: pulumi.Input<string>;
}

export interface SwitchControllerManagedSwitchPortUntaggedVlan {
    vlanName?: pulumi.Input<string>;
}

export interface SwitchControllerManagedSwitchRemoteLog {
    csv?: pulumi.Input<string>;
    facility?: pulumi.Input<string>;
    name?: pulumi.Input<string>;
    port?: pulumi.Input<number>;
    server?: pulumi.Input<string>;
    severity?: pulumi.Input<string>;
    status?: pulumi.Input<string>;
}

export interface SwitchControllerManagedSwitchSnmpCommunity {
    events?: pulumi.Input<string>;
    hosts?: pulumi.Input<pulumi.Input<inputs.SwitchControllerManagedSwitchSnmpCommunityHost>[]>;
    id?: pulumi.Input<number>;
    name?: pulumi.Input<string>;
    queryV1Port?: pulumi.Input<number>;
    queryV1Status?: pulumi.Input<string>;
    queryV2cPort?: pulumi.Input<number>;
    queryV2cStatus?: pulumi.Input<string>;
    status?: pulumi.Input<string>;
    trapV1Lport?: pulumi.Input<number>;
    trapV1Rport?: pulumi.Input<number>;
    trapV1Status?: pulumi.Input<string>;
    trapV2cLport?: pulumi.Input<number>;
    trapV2cRport?: pulumi.Input<number>;
    trapV2cStatus?: pulumi.Input<string>;
}

export interface SwitchControllerManagedSwitchSnmpCommunityHost {
    id?: pulumi.Input<number>;
    ip?: pulumi.Input<string>;
}

export interface SwitchControllerManagedSwitchSnmpSysinfo {
    contactInfo?: pulumi.Input<string>;
    description?: pulumi.Input<string>;
    engineId?: pulumi.Input<string>;
    location?: pulumi.Input<string>;
    status?: pulumi.Input<string>;
}

export interface SwitchControllerManagedSwitchSnmpTrapThreshold {
    trapHighCpuThreshold?: pulumi.Input<number>;
    trapLogFullThreshold?: pulumi.Input<number>;
    trapLowMemoryThreshold?: pulumi.Input<number>;
}

export interface SwitchControllerManagedSwitchSnmpUser {
    authProto?: pulumi.Input<string>;
    authPwd?: pulumi.Input<string>;
    name?: pulumi.Input<string>;
    privProto?: pulumi.Input<string>;
    privPwd?: pulumi.Input<string>;
    queries?: pulumi.Input<string>;
    queryPort?: pulumi.Input<number>;
    securityLevel?: pulumi.Input<string>;
}

export interface SwitchControllerManagedSwitchStaticMac {
    description?: pulumi.Input<string>;
    id?: pulumi.Input<number>;
    interface?: pulumi.Input<string>;
    mac?: pulumi.Input<string>;
    type?: pulumi.Input<string>;
    vlan?: pulumi.Input<string>;
}

export interface SwitchControllerManagedSwitchStormControl {
    broadcast?: pulumi.Input<string>;
    localOverride?: pulumi.Input<string>;
    rate?: pulumi.Input<number>;
    unknownMulticast?: pulumi.Input<string>;
    unknownUnicast?: pulumi.Input<string>;
}

export interface SwitchControllerManagedSwitchStpInstance {
    id?: pulumi.Input<string>;
    priority?: pulumi.Input<string>;
}

export interface SwitchControllerManagedSwitchStpSettings {
    forwardTime?: pulumi.Input<number>;
    helloTime?: pulumi.Input<number>;
    localOverride?: pulumi.Input<string>;
    maxAge?: pulumi.Input<number>;
    maxHops?: pulumi.Input<number>;
    name?: pulumi.Input<string>;
    pendingTimer?: pulumi.Input<number>;
    revision?: pulumi.Input<number>;
    status?: pulumi.Input<string>;
}

export interface SwitchControllerManagedSwitchSwitchLog {
    localOverride?: pulumi.Input<string>;
    severity?: pulumi.Input<string>;
    status?: pulumi.Input<string>;
}

export interface SwitchControllerManagedSwitchSwitchStpSettings {
    status?: pulumi.Input<string>;
}

export interface SwitchControllerQosIpDscpMapMap {
    cosQueue?: pulumi.Input<number>;
    diffserv?: pulumi.Input<string>;
    ipPrecedence?: pulumi.Input<string>;
    name?: pulumi.Input<string>;
    value?: pulumi.Input<string>;
}

export interface SwitchControllerQosQueuePolicyCosQueue {
    description?: pulumi.Input<string>;
    dropPolicy?: pulumi.Input<string>;
    ecn?: pulumi.Input<string>;
    maxRate?: pulumi.Input<number>;
    maxRatePercent?: pulumi.Input<number>;
    minRate?: pulumi.Input<number>;
    minRatePercent?: pulumi.Input<number>;
    name?: pulumi.Input<string>;
    weight?: pulumi.Input<number>;
}

export interface SwitchControllerQuarantineTarget {
    description?: pulumi.Input<string>;
    entryId?: pulumi.Input<number>;
    mac?: pulumi.Input<string>;
    tags?: pulumi.Input<pulumi.Input<inputs.SwitchControllerQuarantineTargetTag>[]>;
}

export interface SwitchControllerQuarantineTargetTag {
    tags?: pulumi.Input<string>;
}

export interface SwitchControllerSecurityPolicy8021XUserGroup {
    name?: pulumi.Input<string>;
}

export interface SwitchControllerSnmpCommunityHost {
    id?: pulumi.Input<number>;
    ip?: pulumi.Input<string>;
}

export interface SwitchControllerStpInstanceVlanRange {
    vlanName?: pulumi.Input<string>;
}

export interface SwitchControllerSwitchGroupMember {
    name?: pulumi.Input<string>;
    switchId?: pulumi.Input<string>;
}

export interface SwitchControllerTrafficSnifferTargetIp {
    description?: pulumi.Input<string>;
    ip?: pulumi.Input<string>;
}

export interface SwitchControllerTrafficSnifferTargetMac {
    description?: pulumi.Input<string>;
    mac?: pulumi.Input<string>;
}

export interface SwitchControllerTrafficSnifferTargetPort {
    description?: pulumi.Input<string>;
    inPorts?: pulumi.Input<pulumi.Input<inputs.SwitchControllerTrafficSnifferTargetPortInPort>[]>;
    outPorts?: pulumi.Input<pulumi.Input<inputs.SwitchControllerTrafficSnifferTargetPortOutPort>[]>;
    switchId?: pulumi.Input<string>;
}

export interface SwitchControllerTrafficSnifferTargetPortInPort {
    name?: pulumi.Input<string>;
}

export interface SwitchControllerTrafficSnifferTargetPortOutPort {
    name?: pulumi.Input<string>;
}

export interface SwitchControllerVlanPolicyAllowedVlan {
    vlanName?: pulumi.Input<string>;
}

export interface SwitchControllerVlanPolicyUntaggedVlan {
    vlanName?: pulumi.Input<string>;
}

export interface SwitchControllerVlanPortalMessageOverrides {
    authDisclaimerPage?: pulumi.Input<string>;
    authLoginFailedPage?: pulumi.Input<string>;
    authLoginPage?: pulumi.Input<string>;
    authRejectPage?: pulumi.Input<string>;
}

export interface SwitchControllerVlanSelectedUsergroup {
    name?: pulumi.Input<string>;
}

export interface SystemAPIUserSettingTrusthost {
    ipv4Trusthost: pulumi.Input<string>;
    type: pulumi.Input<string>;
}

export interface SystemAccprofileFwgrpPermission {
    address?: pulumi.Input<string>;
    others?: pulumi.Input<string>;
    policy?: pulumi.Input<string>;
    schedule?: pulumi.Input<string>;
    service?: pulumi.Input<string>;
}

export interface SystemAccprofileLoggrpPermission {
    config?: pulumi.Input<string>;
    dataAccess?: pulumi.Input<string>;
    reportAccess?: pulumi.Input<string>;
    threatWeight?: pulumi.Input<string>;
}

export interface SystemAccprofileNetgrpPermission {
    cfg?: pulumi.Input<string>;
    packetCapture?: pulumi.Input<string>;
    routeCfg?: pulumi.Input<string>;
}

export interface SystemAccprofileSysgrpPermission {
    admin?: pulumi.Input<string>;
    cfg?: pulumi.Input<string>;
    mnt?: pulumi.Input<string>;
    upd?: pulumi.Input<string>;
}

export interface SystemAccprofileUtmgrpPermission {
    antivirus?: pulumi.Input<string>;
    applicationControl?: pulumi.Input<string>;
    dataLossPrevention?: pulumi.Input<string>;
    dnsfilter?: pulumi.Input<string>;
    emailfilter?: pulumi.Input<string>;
    endpointControl?: pulumi.Input<string>;
    fileFilter?: pulumi.Input<string>;
    icap?: pulumi.Input<string>;
    ips?: pulumi.Input<string>;
    spamfilter?: pulumi.Input<string>;
    videofilter?: pulumi.Input<string>;
    voip?: pulumi.Input<string>;
    waf?: pulumi.Input<string>;
    webfilter?: pulumi.Input<string>;
}

export interface SystemAcmeAccount {
    caUrl?: pulumi.Input<string>;
    email?: pulumi.Input<string>;
    id?: pulumi.Input<string>;
    privatekey?: pulumi.Input<string>;
    status?: pulumi.Input<string>;
    url?: pulumi.Input<string>;
}

export interface SystemAcmeInterface {
    interfaceName?: pulumi.Input<string>;
}

export interface SystemAdminGuestUsergroup {
    name?: pulumi.Input<string>;
}

export interface SystemAdminGuiDashboard {
    columns?: pulumi.Input<number>;
    id?: pulumi.Input<number>;
    layoutType?: pulumi.Input<string>;
    name?: pulumi.Input<string>;
    scope?: pulumi.Input<string>;
    widgets?: pulumi.Input<pulumi.Input<inputs.SystemAdminGuiDashboardWidget>[]>;
}

export interface SystemAdminGuiDashboardWidget {
    fabricDevice?: pulumi.Input<string>;
    filters?: pulumi.Input<pulumi.Input<inputs.SystemAdminGuiDashboardWidgetFilter>[]>;
    height?: pulumi.Input<number>;
    id?: pulumi.Input<number>;
    industry?: pulumi.Input<string>;
    interface?: pulumi.Input<string>;
    region?: pulumi.Input<string>;
    reportBy?: pulumi.Input<string>;
    sortBy?: pulumi.Input<string>;
    timeframe?: pulumi.Input<string>;
    title?: pulumi.Input<string>;
    type?: pulumi.Input<string>;
    visualization?: pulumi.Input<string>;
    width?: pulumi.Input<number>;
    xPos?: pulumi.Input<number>;
    yPos?: pulumi.Input<number>;
}

export interface SystemAdminGuiDashboardWidgetFilter {
    id?: pulumi.Input<number>;
    key?: pulumi.Input<string>;
    value?: pulumi.Input<string>;
}

export interface SystemAdminGuiGlobalMenuFavorite {
    id?: pulumi.Input<string>;
}

export interface SystemAdminGuiNewFeatureAcknowledge {
    id?: pulumi.Input<string>;
}

export interface SystemAdminGuiVdomMenuFavorite {
    id?: pulumi.Input<string>;
}

export interface SystemAdminLoginTime {
    lastFailedLogin?: pulumi.Input<string>;
    lastLogin?: pulumi.Input<string>;
    usrName?: pulumi.Input<string>;
}

export interface SystemAdminVdom {
    name?: pulumi.Input<string>;
}

export interface SystemAlarmGroup {
    adminAuthFailureThreshold?: pulumi.Input<number>;
    adminAuthLockoutThreshold?: pulumi.Input<number>;
    decryptionFailureThreshold?: pulumi.Input<number>;
    encryptionFailureThreshold?: pulumi.Input<number>;
    fwPolicyId?: pulumi.Input<number>;
    fwPolicyIdThreshold?: pulumi.Input<number>;
    fwPolicyViolations?: pulumi.Input<pulumi.Input<inputs.SystemAlarmGroupFwPolicyViolation>[]>;
    id?: pulumi.Input<number>;
    logFullWarningThreshold?: pulumi.Input<number>;
    period?: pulumi.Input<number>;
    replayAttemptThreshold?: pulumi.Input<number>;
    selfTestFailureThreshold?: pulumi.Input<number>;
    userAuthFailureThreshold?: pulumi.Input<number>;
    userAuthLockoutThreshold?: pulumi.Input<number>;
}

export interface SystemAlarmGroupFwPolicyViolation {
    dstIp?: pulumi.Input<string>;
    dstPort?: pulumi.Input<number>;
    id?: pulumi.Input<number>;
    srcIp?: pulumi.Input<string>;
    srcPort?: pulumi.Input<number>;
    threshold?: pulumi.Input<number>;
}

export interface SystemApiUserTrusthost {
    id?: pulumi.Input<number>;
    ipv4Trusthost?: pulumi.Input<string>;
    ipv6Trusthost?: pulumi.Input<string>;
    type?: pulumi.Input<string>;
}

export interface SystemApiUserVdom {
    name?: pulumi.Input<string>;
}

export interface SystemAutomationActionEmailTo {
    name?: pulumi.Input<string>;
}

export interface SystemAutomationActionHeader {
    header?: pulumi.Input<string>;
}

export interface SystemAutomationActionHttpHeader {
    id?: pulumi.Input<number>;
    key?: pulumi.Input<string>;
    value?: pulumi.Input<string>;
}

export interface SystemAutomationActionSdnConnector {
    name?: pulumi.Input<string>;
}

export interface SystemAutomationDestinationDestination {
    name?: pulumi.Input<string>;
}

export interface SystemAutomationStitchAction {
    action?: pulumi.Input<string>;
    delay?: pulumi.Input<number>;
    id?: pulumi.Input<number>;
    required?: pulumi.Input<string>;
}

export interface SystemAutomationStitchDestination {
    name?: pulumi.Input<string>;
}

export interface SystemAutomationTriggerField {
    id?: pulumi.Input<number>;
    name?: pulumi.Input<string>;
    value?: pulumi.Input<string>;
}

export interface SystemAutomationTriggerLogidBlock {
    id?: pulumi.Input<number>;
}

export interface SystemAutomationTriggerVdom {
    name?: pulumi.Input<string>;
}

export interface SystemCentralManagementServerList {
    addrType?: pulumi.Input<string>;
    fqdn?: pulumi.Input<string>;
    id?: pulumi.Input<number>;
    serverAddress?: pulumi.Input<string>;
    serverAddress6?: pulumi.Input<string>;
    serverType?: pulumi.Input<string>;
}

export interface SystemClusterSyncDownIntfsBeforeSessSync {
    name?: pulumi.Input<string>;
}

export interface SystemClusterSyncSessionSyncFilter {
    customServices?: pulumi.Input<pulumi.Input<inputs.SystemClusterSyncSessionSyncFilterCustomService>[]>;
    dstaddr?: pulumi.Input<string>;
    dstaddr6?: pulumi.Input<string>;
    dstintf?: pulumi.Input<string>;
    srcaddr?: pulumi.Input<string>;
    srcaddr6?: pulumi.Input<string>;
    srcintf?: pulumi.Input<string>;
}

export interface SystemClusterSyncSessionSyncFilterCustomService {
    dstPortRange?: pulumi.Input<string>;
    id?: pulumi.Input<number>;
    srcPortRange?: pulumi.Input<string>;
}

export interface SystemClusterSyncSyncvd {
    name?: pulumi.Input<string>;
}

export interface SystemCsfFabricConnector {
    accprofile?: pulumi.Input<string>;
    configurationWriteAccess?: pulumi.Input<string>;
    serial?: pulumi.Input<string>;
}

export interface SystemCsfFabricDevice {
    accessToken?: pulumi.Input<string>;
    deviceIp?: pulumi.Input<string>;
    deviceType?: pulumi.Input<string>;
    httpsPort?: pulumi.Input<number>;
    login?: pulumi.Input<string>;
    name?: pulumi.Input<string>;
    password?: pulumi.Input<string>;
}

export interface SystemCsfTrustedList {
    action?: pulumi.Input<string>;
    authorizationType?: pulumi.Input<string>;
    certificate?: pulumi.Input<string>;
    downstreamAuthorization?: pulumi.Input<string>;
    haMembers?: pulumi.Input<string>;
    name?: pulumi.Input<string>;
    serial?: pulumi.Input<string>;
}

export interface SystemDdnsDdnsServerAddr {
    addr?: pulumi.Input<string>;
}

export interface SystemDdnsMonitorInterface {
    interfaceName?: pulumi.Input<string>;
}

export interface SystemDhcp6ServerIpRange {
    endIp?: pulumi.Input<string>;
    id?: pulumi.Input<number>;
    startIp?: pulumi.Input<string>;
}

export interface SystemDhcp6ServerPrefixRange {
    endPrefix?: pulumi.Input<string>;
    id?: pulumi.Input<number>;
    prefixLength?: pulumi.Input<number>;
    startPrefix?: pulumi.Input<string>;
}

export interface SystemDhcpServerExcludeRange {
    endIp?: pulumi.Input<string>;
    id?: pulumi.Input<number>;
    startIp?: pulumi.Input<string>;
    vciMatch?: pulumi.Input<string>;
    vciStrings?: pulumi.Input<pulumi.Input<inputs.SystemDhcpServerExcludeRangeVciString>[]>;
}

export interface SystemDhcpServerExcludeRangeVciString {
    vciString?: pulumi.Input<string>;
}

export interface SystemDhcpServerIpRange {
    endIp?: pulumi.Input<string>;
    id?: pulumi.Input<number>;
    startIp?: pulumi.Input<string>;
    vciMatch?: pulumi.Input<string>;
    vciStrings?: pulumi.Input<pulumi.Input<inputs.SystemDhcpServerIpRangeVciString>[]>;
}

export interface SystemDhcpServerIpRangeVciString {
    vciString?: pulumi.Input<string>;
}

export interface SystemDhcpServerOption {
    code?: pulumi.Input<number>;
    id?: pulumi.Input<number>;
    ip?: pulumi.Input<string>;
    type?: pulumi.Input<string>;
    value?: pulumi.Input<string>;
    vciMatch?: pulumi.Input<string>;
    vciStrings?: pulumi.Input<pulumi.Input<inputs.SystemDhcpServerOptionVciString>[]>;
}

export interface SystemDhcpServerOptionVciString {
    vciString?: pulumi.Input<string>;
}

export interface SystemDhcpServerReservedAddress {
    action?: pulumi.Input<string>;
    circuitId?: pulumi.Input<string>;
    circuitIdType?: pulumi.Input<string>;
    description?: pulumi.Input<string>;
    id?: pulumi.Input<number>;
    ip?: pulumi.Input<string>;
    mac?: pulumi.Input<string>;
    remoteId?: pulumi.Input<string>;
    remoteIdType?: pulumi.Input<string>;
    type?: pulumi.Input<string>;
}

export interface SystemDhcpServerTftpServer {
    tftpServer?: pulumi.Input<string>;
}

export interface SystemDhcpServerVciString {
    vciString?: pulumi.Input<string>;
}

export interface SystemDnsDatabaseDnsEntry {
    canonicalName?: pulumi.Input<string>;
    hostname?: pulumi.Input<string>;
    id?: pulumi.Input<number>;
    ip?: pulumi.Input<string>;
    ipv6?: pulumi.Input<string>;
    preference?: pulumi.Input<number>;
    status?: pulumi.Input<string>;
    ttl?: pulumi.Input<number>;
    type?: pulumi.Input<string>;
}

export interface SystemDnsDomain {
    domain?: pulumi.Input<string>;
}

export interface SystemDnsServerHostname {
    hostname?: pulumi.Input<string>;
}

export interface SystemFederatedUpgradeNodeList {
    coordinatingFortigate?: pulumi.Input<string>;
    deviceType?: pulumi.Input<string>;
    serial?: pulumi.Input<string>;
    setupTime?: pulumi.Input<string>;
    time?: pulumi.Input<string>;
    timing?: pulumi.Input<string>;
    upgradePath?: pulumi.Input<string>;
}

export interface SystemGeoipOverrideIp6Range {
    endIp?: pulumi.Input<string>;
    id?: pulumi.Input<number>;
    startIp?: pulumi.Input<string>;
}

export interface SystemGeoipOverrideIpRange {
    endIp?: pulumi.Input<string>;
    id?: pulumi.Input<number>;
    startIp?: pulumi.Input<string>;
}

export interface SystemHaHaMgmtInterface {
    dst?: pulumi.Input<string>;
    gateway?: pulumi.Input<string>;
    gateway6?: pulumi.Input<string>;
    id?: pulumi.Input<number>;
    interface?: pulumi.Input<string>;
}

export interface SystemHaSecondaryVcluster {
    monitor?: pulumi.Input<string>;
    override?: pulumi.Input<string>;
    overrideWaitTime?: pulumi.Input<number>;
    pingserverFailoverThreshold?: pulumi.Input<number>;
    pingserverMonitorInterface?: pulumi.Input<string>;
    pingserverSecondaryForceReset?: pulumi.Input<string>;
    pingserverSlaveForceReset?: pulumi.Input<string>;
    priority?: pulumi.Input<number>;
    vclusterId?: pulumi.Input<number>;
    vdom?: pulumi.Input<string>;
}

export interface SystemHaUnicastPeer {
    id?: pulumi.Input<number>;
    peerIp?: pulumi.Input<string>;
}

export interface SystemHaVcluster {
    monitor?: pulumi.Input<string>;
    override?: pulumi.Input<string>;
    overrideWaitTime?: pulumi.Input<number>;
    pingserverFailoverThreshold?: pulumi.Input<number>;
    pingserverMonitorInterface?: pulumi.Input<string>;
    pingserverSecondaryForceReset?: pulumi.Input<string>;
    pingserverSlaveForceReset?: pulumi.Input<string>;
    priority?: pulumi.Input<number>;
    vclusterId?: pulumi.Input<number>;
    vdoms?: pulumi.Input<pulumi.Input<inputs.SystemHaVclusterVdom>[]>;
}

export interface SystemHaVclusterVdom {
    name?: pulumi.Input<string>;
}

export interface SystemIkeDhGroup1 {
    keypairCache?: pulumi.Input<string>;
    keypairCount?: pulumi.Input<number>;
    mode?: pulumi.Input<string>;
}

export interface SystemIkeDhGroup14 {
    keypairCache?: pulumi.Input<string>;
    keypairCount?: pulumi.Input<number>;
    mode?: pulumi.Input<string>;
}

export interface SystemIkeDhGroup15 {
    keypairCache?: pulumi.Input<string>;
    keypairCount?: pulumi.Input<number>;
    mode?: pulumi.Input<string>;
}

export interface SystemIkeDhGroup16 {
    keypairCache?: pulumi.Input<string>;
    keypairCount?: pulumi.Input<number>;
    mode?: pulumi.Input<string>;
}

export interface SystemIkeDhGroup17 {
    keypairCache?: pulumi.Input<string>;
    keypairCount?: pulumi.Input<number>;
    mode?: pulumi.Input<string>;
}

export interface SystemIkeDhGroup18 {
    keypairCache?: pulumi.Input<string>;
    keypairCount?: pulumi.Input<number>;
    mode?: pulumi.Input<string>;
}

export interface SystemIkeDhGroup19 {
    keypairCache?: pulumi.Input<string>;
    keypairCount?: pulumi.Input<number>;
    mode?: pulumi.Input<string>;
}

export interface SystemIkeDhGroup2 {
    keypairCache?: pulumi.Input<string>;
    keypairCount?: pulumi.Input<number>;
    mode?: pulumi.Input<string>;
}

export interface SystemIkeDhGroup20 {
    keypairCache?: pulumi.Input<string>;
    keypairCount?: pulumi.Input<number>;
    mode?: pulumi.Input<string>;
}

export interface SystemIkeDhGroup21 {
    keypairCache?: pulumi.Input<string>;
    keypairCount?: pulumi.Input<number>;
    mode?: pulumi.Input<string>;
}

export interface SystemIkeDhGroup27 {
    keypairCache?: pulumi.Input<string>;
    keypairCount?: pulumi.Input<number>;
    mode?: pulumi.Input<string>;
}

export interface SystemIkeDhGroup28 {
    keypairCache?: pulumi.Input<string>;
    keypairCount?: pulumi.Input<number>;
    mode?: pulumi.Input<string>;
}

export interface SystemIkeDhGroup29 {
    keypairCache?: pulumi.Input<string>;
    keypairCount?: pulumi.Input<number>;
    mode?: pulumi.Input<string>;
}

export interface SystemIkeDhGroup30 {
    keypairCache?: pulumi.Input<string>;
    keypairCount?: pulumi.Input<number>;
    mode?: pulumi.Input<string>;
}

export interface SystemIkeDhGroup31 {
    keypairCache?: pulumi.Input<string>;
    keypairCount?: pulumi.Input<number>;
    mode?: pulumi.Input<string>;
}

export interface SystemIkeDhGroup32 {
    keypairCache?: pulumi.Input<string>;
    keypairCount?: pulumi.Input<number>;
    mode?: pulumi.Input<string>;
}

export interface SystemIkeDhGroup5 {
    keypairCache?: pulumi.Input<string>;
    keypairCount?: pulumi.Input<number>;
    mode?: pulumi.Input<string>;
}

export interface SystemInterfaceClientOption {
    code?: pulumi.Input<number>;
    id?: pulumi.Input<number>;
    ip?: pulumi.Input<string>;
    type?: pulumi.Input<string>;
    value?: pulumi.Input<string>;
}

export interface SystemInterfaceDhcpSnoopingServerList {
    name?: pulumi.Input<string>;
    serverIp?: pulumi.Input<string>;
}

export interface SystemInterfaceFailAlertInterface {
    name?: pulumi.Input<string>;
}

export interface SystemInterfaceIpv6 {
    autoconf?: pulumi.Input<string>;
    cliConn6Status?: pulumi.Input<number>;
    dhcp6ClientOptions?: pulumi.Input<string>;
    dhcp6IapdLists?: pulumi.Input<pulumi.Input<inputs.SystemInterfaceIpv6Dhcp6IapdList>[]>;
    dhcp6InformationRequest?: pulumi.Input<string>;
    dhcp6PrefixDelegation?: pulumi.Input<string>;
    dhcp6PrefixHint?: pulumi.Input<string>;
    dhcp6PrefixHintPlt?: pulumi.Input<number>;
    dhcp6PrefixHintVlt?: pulumi.Input<number>;
    dhcp6RelayIp?: pulumi.Input<string>;
    dhcp6RelayService?: pulumi.Input<string>;
    dhcp6RelayType?: pulumi.Input<string>;
    icmp6SendRedirect?: pulumi.Input<string>;
    interfaceIdentifier?: pulumi.Input<string>;
    ip6Address?: pulumi.Input<string>;
    ip6Allowaccess?: pulumi.Input<string>;
    ip6DefaultLife?: pulumi.Input<number>;
    ip6DelegatedPrefixIaid?: pulumi.Input<number>;
    ip6DelegatedPrefixLists?: pulumi.Input<pulumi.Input<inputs.SystemInterfaceIpv6Ip6DelegatedPrefixList>[]>;
    ip6DnsServerOverride?: pulumi.Input<string>;
    ip6ExtraAddrs?: pulumi.Input<pulumi.Input<inputs.SystemInterfaceIpv6Ip6ExtraAddr>[]>;
    ip6HopLimit?: pulumi.Input<number>;
    ip6LinkMtu?: pulumi.Input<number>;
    ip6ManageFlag?: pulumi.Input<string>;
    ip6MaxInterval?: pulumi.Input<number>;
    ip6MinInterval?: pulumi.Input<number>;
    ip6Mode?: pulumi.Input<string>;
    ip6OtherFlag?: pulumi.Input<string>;
    ip6PrefixLists?: pulumi.Input<pulumi.Input<inputs.SystemInterfaceIpv6Ip6PrefixList>[]>;
    ip6PrefixMode?: pulumi.Input<string>;
    ip6ReachableTime?: pulumi.Input<number>;
    ip6RetransTime?: pulumi.Input<number>;
    ip6SendAdv?: pulumi.Input<string>;
    ip6Subnet?: pulumi.Input<string>;
    ip6UpstreamInterface?: pulumi.Input<string>;
    ndCert?: pulumi.Input<string>;
    ndCgaModifier?: pulumi.Input<string>;
    ndMode?: pulumi.Input<string>;
    ndSecurityLevel?: pulumi.Input<number>;
    ndTimestampDelta?: pulumi.Input<number>;
    ndTimestampFuzz?: pulumi.Input<number>;
    raSendMtu?: pulumi.Input<string>;
    uniqueAutoconfAddr?: pulumi.Input<string>;
    vrip6LinkLocal?: pulumi.Input<string>;
    vrrp6s?: pulumi.Input<pulumi.Input<inputs.SystemInterfaceIpv6Vrrp6>[]>;
    vrrpVirtualMac6?: pulumi.Input<string>;
}

export interface SystemInterfaceIpv6Dhcp6IapdList {
    iaid?: pulumi.Input<number>;
    prefixHint?: pulumi.Input<string>;
    prefixHintPlt?: pulumi.Input<number>;
    prefixHintVlt?: pulumi.Input<number>;
}

export interface SystemInterfaceIpv6Ip6DelegatedPrefixList {
    autonomousFlag?: pulumi.Input<string>;
    delegatedPrefixIaid?: pulumi.Input<number>;
    onlinkFlag?: pulumi.Input<string>;
    prefixId?: pulumi.Input<number>;
    rdnss?: pulumi.Input<string>;
    rdnssService?: pulumi.Input<string>;
    subnet?: pulumi.Input<string>;
    upstreamInterface?: pulumi.Input<string>;
}

export interface SystemInterfaceIpv6Ip6ExtraAddr {
    prefix?: pulumi.Input<string>;
}

export interface SystemInterfaceIpv6Ip6PrefixList {
    autonomousFlag?: pulumi.Input<string>;
    dnssls?: pulumi.Input<pulumi.Input<inputs.SystemInterfaceIpv6Ip6PrefixListDnssl>[]>;
    onlinkFlag?: pulumi.Input<string>;
    preferredLifeTime?: pulumi.Input<number>;
    prefix?: pulumi.Input<string>;
    rdnss?: pulumi.Input<string>;
    validLifeTime?: pulumi.Input<number>;
}

export interface SystemInterfaceIpv6Ip6PrefixListDnssl {
    domain?: pulumi.Input<string>;
}

export interface SystemInterfaceIpv6Vrrp6 {
    acceptMode?: pulumi.Input<string>;
    advInterval?: pulumi.Input<number>;
    preempt?: pulumi.Input<string>;
    priority?: pulumi.Input<number>;
    startTime?: pulumi.Input<number>;
    status?: pulumi.Input<string>;
    vrdst6?: pulumi.Input<string>;
    vrgrp?: pulumi.Input<number>;
    vrid?: pulumi.Input<number>;
    vrip6?: pulumi.Input<string>;
}

export interface SystemInterfaceManagedDevice {
    name?: pulumi.Input<string>;
}

export interface SystemInterfaceMember {
    interfaceName?: pulumi.Input<string>;
}

export interface SystemInterfaceSecondaryip {
    allowaccess?: pulumi.Input<string>;
    detectprotocol?: pulumi.Input<string>;
    detectserver?: pulumi.Input<string>;
    gwdetect?: pulumi.Input<string>;
    haPriority?: pulumi.Input<number>;
    id?: pulumi.Input<number>;
    ip?: pulumi.Input<string>;
    pingServStatus?: pulumi.Input<number>;
}

export interface SystemInterfaceSecurityGroup {
    name?: pulumi.Input<string>;
}

export interface SystemInterfaceTagging {
    category?: pulumi.Input<string>;
    name?: pulumi.Input<string>;
    tags?: pulumi.Input<pulumi.Input<inputs.SystemInterfaceTaggingTag>[]>;
}

export interface SystemInterfaceTaggingTag {
    name?: pulumi.Input<string>;
}

export interface SystemInterfaceVrrp {
    acceptMode?: pulumi.Input<string>;
    advInterval?: pulumi.Input<number>;
    ignoreDefaultRoute?: pulumi.Input<string>;
    preempt?: pulumi.Input<string>;
    priority?: pulumi.Input<number>;
    proxyArps?: pulumi.Input<pulumi.Input<inputs.SystemInterfaceVrrpProxyArp>[]>;
    startTime?: pulumi.Input<number>;
    status?: pulumi.Input<string>;
    version?: pulumi.Input<string>;
    vrdst?: pulumi.Input<string>;
    vrdstPriority?: pulumi.Input<number>;
    vrgrp?: pulumi.Input<number>;
    vrid?: pulumi.Input<number>;
    vrip?: pulumi.Input<string>;
}

export interface SystemInterfaceVrrpProxyArp {
    id?: pulumi.Input<number>;
    ip?: pulumi.Input<string>;
}

export interface SystemIpamPool {
    description?: pulumi.Input<string>;
    name?: pulumi.Input<string>;
    subnet?: pulumi.Input<string>;
}

export interface SystemIpamRule {
    description?: pulumi.Input<string>;
    devices?: pulumi.Input<pulumi.Input<inputs.SystemIpamRuleDevice>[]>;
    dhcp?: pulumi.Input<string>;
    interfaces?: pulumi.Input<pulumi.Input<inputs.SystemIpamRuleInterface>[]>;
    name?: pulumi.Input<string>;
    pools?: pulumi.Input<pulumi.Input<inputs.SystemIpamRulePool>[]>;
    role?: pulumi.Input<string>;
}

export interface SystemIpamRuleDevice {
    name?: pulumi.Input<string>;
}

export interface SystemIpamRuleInterface {
    name?: pulumi.Input<string>;
}

export interface SystemIpamRulePool {
    name?: pulumi.Input<string>;
}

export interface SystemIpsecAggregateMember {
    tunnelName?: pulumi.Input<string>;
}

export interface SystemLinkMonitorRoute {
    subnet?: pulumi.Input<string>;
}

export interface SystemLinkMonitorServer {
    address?: pulumi.Input<string>;
}

export interface SystemLinkMonitorServerList {
    dst?: pulumi.Input<string>;
    id?: pulumi.Input<number>;
    port?: pulumi.Input<number>;
    protocol?: pulumi.Input<string>;
    weight?: pulumi.Input<number>;
}

export interface SystemLldpNetworkPolicyGuest {
    dscp?: pulumi.Input<number>;
    priority?: pulumi.Input<number>;
    status?: pulumi.Input<string>;
    tag?: pulumi.Input<string>;
    vlan?: pulumi.Input<number>;
}

export interface SystemLldpNetworkPolicyGuestVoiceSignaling {
    dscp?: pulumi.Input<number>;
    priority?: pulumi.Input<number>;
    status?: pulumi.Input<string>;
    tag?: pulumi.Input<string>;
    vlan?: pulumi.Input<number>;
}

export interface SystemLldpNetworkPolicySoftphone {
    dscp?: pulumi.Input<number>;
    priority?: pulumi.Input<number>;
    status?: pulumi.Input<string>;
    tag?: pulumi.Input<string>;
    vlan?: pulumi.Input<number>;
}

export interface SystemLldpNetworkPolicyStreamingVideo {
    dscp?: pulumi.Input<number>;
    priority?: pulumi.Input<number>;
    status?: pulumi.Input<string>;
    tag?: pulumi.Input<string>;
    vlan?: pulumi.Input<number>;
}

export interface SystemLldpNetworkPolicyVideoConferencing {
    dscp?: pulumi.Input<number>;
    priority?: pulumi.Input<number>;
    status?: pulumi.Input<string>;
    tag?: pulumi.Input<string>;
    vlan?: pulumi.Input<number>;
}

export interface SystemLldpNetworkPolicyVideoSignaling {
    dscp?: pulumi.Input<number>;
    priority?: pulumi.Input<number>;
    status?: pulumi.Input<string>;
    tag?: pulumi.Input<string>;
    vlan?: pulumi.Input<number>;
}

export interface SystemLldpNetworkPolicyVoice {
    dscp?: pulumi.Input<number>;
    priority?: pulumi.Input<number>;
    status?: pulumi.Input<string>;
    tag?: pulumi.Input<string>;
    vlan?: pulumi.Input<number>;
}

export interface SystemLldpNetworkPolicyVoiceSignaling {
    dscp?: pulumi.Input<number>;
    priority?: pulumi.Input<number>;
    status?: pulumi.Input<string>;
    tag?: pulumi.Input<string>;
    vlan?: pulumi.Input<number>;
}

export interface SystemMobileTunnelNetwork {
    id?: pulumi.Input<number>;
    interface?: pulumi.Input<string>;
    prefix?: pulumi.Input<string>;
}

export interface SystemNat64SecondaryPrefix {
    name?: pulumi.Input<string>;
    nat64Prefix?: pulumi.Input<string>;
}

export interface SystemNdProxyMember {
    interfaceName?: pulumi.Input<string>;
}

export interface SystemNpuPriorityProtocol {
    bfd?: pulumi.Input<string>;
    bgp?: pulumi.Input<string>;
    slbc?: pulumi.Input<string>;
}

export interface SystemNtpInterface {
    interfaceName?: pulumi.Input<string>;
}

export interface SystemNtpNtpserver {
    authentication?: pulumi.Input<string>;
    id?: pulumi.Input<number>;
    interface?: pulumi.Input<string>;
    interfaceSelectMethod?: pulumi.Input<string>;
    key?: pulumi.Input<string>;
    keyId?: pulumi.Input<number>;
    ntpv3?: pulumi.Input<string>;
    server?: pulumi.Input<string>;
}

export interface SystemObjectTaggingTag {
    name?: pulumi.Input<string>;
}

export interface SystemPtpServerInterface {
    delayMechanism?: pulumi.Input<string>;
    id?: pulumi.Input<number>;
    serverInterfaceName?: pulumi.Input<string>;
}

export interface SystemReplacemsgGroupAdmin {
    buffer?: pulumi.Input<string>;
    format?: pulumi.Input<string>;
    header?: pulumi.Input<string>;
    msgType?: pulumi.Input<string>;
}

export interface SystemReplacemsgGroupAlertmail {
    buffer?: pulumi.Input<string>;
    format?: pulumi.Input<string>;
    header?: pulumi.Input<string>;
    msgType?: pulumi.Input<string>;
}

export interface SystemReplacemsgGroupAuth {
    buffer?: pulumi.Input<string>;
    format?: pulumi.Input<string>;
    header?: pulumi.Input<string>;
    msgType?: pulumi.Input<string>;
}

export interface SystemReplacemsgGroupAutomation {
    buffer?: pulumi.Input<string>;
    format?: pulumi.Input<string>;
    header?: pulumi.Input<string>;
    msgType?: pulumi.Input<string>;
}

export interface SystemReplacemsgGroupCustomMessage {
    buffer?: pulumi.Input<string>;
    format?: pulumi.Input<string>;
    header?: pulumi.Input<string>;
    msgType?: pulumi.Input<string>;
}

export interface SystemReplacemsgGroupDeviceDetectionPortal {
    buffer?: pulumi.Input<string>;
    format?: pulumi.Input<string>;
    header?: pulumi.Input<string>;
    msgType?: pulumi.Input<string>;
}

export interface SystemReplacemsgGroupEc {
    buffer?: pulumi.Input<string>;
    format?: pulumi.Input<string>;
    header?: pulumi.Input<string>;
    msgType?: pulumi.Input<string>;
}

export interface SystemReplacemsgGroupFortiguardWf {
    buffer?: pulumi.Input<string>;
    format?: pulumi.Input<string>;
    header?: pulumi.Input<string>;
    msgType?: pulumi.Input<string>;
}

export interface SystemReplacemsgGroupFtp {
    buffer?: pulumi.Input<string>;
    format?: pulumi.Input<string>;
    header?: pulumi.Input<string>;
    msgType?: pulumi.Input<string>;
}

export interface SystemReplacemsgGroupHttp {
    buffer?: pulumi.Input<string>;
    format?: pulumi.Input<string>;
    header?: pulumi.Input<string>;
    msgType?: pulumi.Input<string>;
}

export interface SystemReplacemsgGroupIcap {
    buffer?: pulumi.Input<string>;
    format?: pulumi.Input<string>;
    header?: pulumi.Input<string>;
    msgType?: pulumi.Input<string>;
}

export interface SystemReplacemsgGroupMail {
    buffer?: pulumi.Input<string>;
    format?: pulumi.Input<string>;
    header?: pulumi.Input<string>;
    msgType?: pulumi.Input<string>;
}

export interface SystemReplacemsgGroupNacQuar {
    buffer?: pulumi.Input<string>;
    format?: pulumi.Input<string>;
    header?: pulumi.Input<string>;
    msgType?: pulumi.Input<string>;
}

export interface SystemReplacemsgGroupNntp {
    buffer?: pulumi.Input<string>;
    format?: pulumi.Input<string>;
    header?: pulumi.Input<string>;
    msgType?: pulumi.Input<string>;
}

export interface SystemReplacemsgGroupSpam {
    buffer?: pulumi.Input<string>;
    format?: pulumi.Input<string>;
    header?: pulumi.Input<string>;
    msgType?: pulumi.Input<string>;
}

export interface SystemReplacemsgGroupSslvpn {
    buffer?: pulumi.Input<string>;
    format?: pulumi.Input<string>;
    header?: pulumi.Input<string>;
    msgType?: pulumi.Input<string>;
}

export interface SystemReplacemsgGroupTrafficQuota {
    buffer?: pulumi.Input<string>;
    format?: pulumi.Input<string>;
    header?: pulumi.Input<string>;
    msgType?: pulumi.Input<string>;
}

export interface SystemReplacemsgGroupUtm {
    buffer?: pulumi.Input<string>;
    format?: pulumi.Input<string>;
    header?: pulumi.Input<string>;
    msgType?: pulumi.Input<string>;
}

export interface SystemReplacemsgGroupWebproxy {
    buffer?: pulumi.Input<string>;
    format?: pulumi.Input<string>;
    header?: pulumi.Input<string>;
    msgType?: pulumi.Input<string>;
}

export interface SystemSamlServiceProvider {
    assertionAttributes?: pulumi.Input<pulumi.Input<inputs.SystemSamlServiceProviderAssertionAttribute>[]>;
    idpEntityId?: pulumi.Input<string>;
    idpSingleLogoutUrl?: pulumi.Input<string>;
    idpSingleSignOnUrl?: pulumi.Input<string>;
    name?: pulumi.Input<string>;
    prefix?: pulumi.Input<string>;
    spBindingProtocol?: pulumi.Input<string>;
    spCert?: pulumi.Input<string>;
    spEntityId?: pulumi.Input<string>;
    spPortalUrl?: pulumi.Input<string>;
    spSingleLogoutUrl?: pulumi.Input<string>;
    spSingleSignOnUrl?: pulumi.Input<string>;
}

export interface SystemSamlServiceProviderAssertionAttribute {
    name?: pulumi.Input<string>;
    type?: pulumi.Input<string>;
}

export interface SystemSdnConnectorExternalAccountList {
    externalId?: pulumi.Input<string>;
    regionLists?: pulumi.Input<pulumi.Input<inputs.SystemSdnConnectorExternalAccountListRegionList>[]>;
    roleArn?: pulumi.Input<string>;
}

export interface SystemSdnConnectorExternalAccountListRegionList {
    region?: pulumi.Input<string>;
}

export interface SystemSdnConnectorExternalIp {
    name?: pulumi.Input<string>;
}

export interface SystemSdnConnectorForwardingRule {
    ruleName?: pulumi.Input<string>;
    target?: pulumi.Input<string>;
}

export interface SystemSdnConnectorGcpProjectList {
    gcpZoneLists?: pulumi.Input<pulumi.Input<inputs.SystemSdnConnectorGcpProjectListGcpZoneList>[]>;
    id?: pulumi.Input<string>;
}

export interface SystemSdnConnectorGcpProjectListGcpZoneList {
    name?: pulumi.Input<string>;
}

export interface SystemSdnConnectorNic {
    ips?: pulumi.Input<pulumi.Input<inputs.SystemSdnConnectorNicIp>[]>;
    name?: pulumi.Input<string>;
}

export interface SystemSdnConnectorNicIp {
    name?: pulumi.Input<string>;
    publicIp?: pulumi.Input<string>;
    resourceGroup?: pulumi.Input<string>;
}

export interface SystemSdnConnectorRoute {
    name?: pulumi.Input<string>;
}

export interface SystemSdnConnectorRouteTable {
    name?: pulumi.Input<string>;
    resourceGroup?: pulumi.Input<string>;
    routes?: pulumi.Input<pulumi.Input<inputs.SystemSdnConnectorRouteTableRoute>[]>;
    subscriptionId?: pulumi.Input<string>;
}

export interface SystemSdnConnectorRouteTableRoute {
    name?: pulumi.Input<string>;
    nextHop?: pulumi.Input<string>;
}

export interface SystemSdnConnectorServerList {
    ip?: pulumi.Input<string>;
}

export interface SystemSdwanDuplication {
    dstaddr6s?: pulumi.Input<pulumi.Input<inputs.SystemSdwanDuplicationDstaddr6>[]>;
    dstaddrs?: pulumi.Input<pulumi.Input<inputs.SystemSdwanDuplicationDstaddr>[]>;
    dstintfs?: pulumi.Input<pulumi.Input<inputs.SystemSdwanDuplicationDstintf>[]>;
    id?: pulumi.Input<number>;
    packetDeDuplication?: pulumi.Input<string>;
    packetDuplication?: pulumi.Input<string>;
    serviceIds?: pulumi.Input<pulumi.Input<inputs.SystemSdwanDuplicationServiceId>[]>;
    services?: pulumi.Input<pulumi.Input<inputs.SystemSdwanDuplicationService>[]>;
    slaMatchService?: pulumi.Input<string>;
    srcaddr6s?: pulumi.Input<pulumi.Input<inputs.SystemSdwanDuplicationSrcaddr6>[]>;
    srcaddrs?: pulumi.Input<pulumi.Input<inputs.SystemSdwanDuplicationSrcaddr>[]>;
    srcintfs?: pulumi.Input<pulumi.Input<inputs.SystemSdwanDuplicationSrcintf>[]>;
}

export interface SystemSdwanDuplicationDstaddr {
    name?: pulumi.Input<string>;
}

export interface SystemSdwanDuplicationDstaddr6 {
    name?: pulumi.Input<string>;
}

export interface SystemSdwanDuplicationDstintf {
    name?: pulumi.Input<string>;
}

export interface SystemSdwanDuplicationService {
    name?: pulumi.Input<string>;
}

export interface SystemSdwanDuplicationServiceId {
    id?: pulumi.Input<number>;
}

export interface SystemSdwanDuplicationSrcaddr {
    name?: pulumi.Input<string>;
}

export interface SystemSdwanDuplicationSrcaddr6 {
    name?: pulumi.Input<string>;
}

export interface SystemSdwanDuplicationSrcintf {
    name?: pulumi.Input<string>;
}

export interface SystemSdwanFailAlertInterface {
    name?: pulumi.Input<string>;
}

export interface SystemSdwanHealthCheck {
    addrMode?: pulumi.Input<string>;
    detectMode?: pulumi.Input<string>;
    diffservcode?: pulumi.Input<string>;
    dnsMatchIp?: pulumi.Input<string>;
    dnsRequestDomain?: pulumi.Input<string>;
    embedMeasuredHealth?: pulumi.Input<string>;
    failtime?: pulumi.Input<number>;
    ftpFile?: pulumi.Input<string>;
    ftpMode?: pulumi.Input<string>;
    haPriority?: pulumi.Input<number>;
    httpAgent?: pulumi.Input<string>;
    httpGet?: pulumi.Input<string>;
    httpMatch?: pulumi.Input<string>;
    interval?: pulumi.Input<number>;
    members?: pulumi.Input<pulumi.Input<inputs.SystemSdwanHealthCheckMember>[]>;
    mosCodec?: pulumi.Input<string>;
    name?: pulumi.Input<string>;
    packetSize?: pulumi.Input<number>;
    password?: pulumi.Input<string>;
    port?: pulumi.Input<number>;
    probeCount?: pulumi.Input<number>;
    probePackets?: pulumi.Input<string>;
    probeTimeout?: pulumi.Input<number>;
    protocol?: pulumi.Input<string>;
    qualityMeasuredMethod?: pulumi.Input<string>;
    recoverytime?: pulumi.Input<number>;
    securityMode?: pulumi.Input<string>;
    server?: pulumi.Input<string>;
    slaFailLogPeriod?: pulumi.Input<number>;
    slaIdRedistribute?: pulumi.Input<number>;
    slaPassLogPeriod?: pulumi.Input<number>;
    slas?: pulumi.Input<pulumi.Input<inputs.SystemSdwanHealthCheckSla>[]>;
    source?: pulumi.Input<string>;
    systemDns?: pulumi.Input<string>;
    thresholdAlertJitter?: pulumi.Input<number>;
    thresholdAlertLatency?: pulumi.Input<number>;
    thresholdAlertPacketloss?: pulumi.Input<number>;
    thresholdWarningJitter?: pulumi.Input<number>;
    thresholdWarningLatency?: pulumi.Input<number>;
    thresholdWarningPacketloss?: pulumi.Input<number>;
    updateCascadeInterface?: pulumi.Input<string>;
    updateStaticRoute?: pulumi.Input<string>;
    user?: pulumi.Input<string>;
    vrf?: pulumi.Input<number>;
}

export interface SystemSdwanHealthCheckMember {
    seqNum?: pulumi.Input<number>;
}

export interface SystemSdwanHealthCheckSla {
    id?: pulumi.Input<number>;
    jitterThreshold?: pulumi.Input<number>;
    latencyThreshold?: pulumi.Input<number>;
    linkCostFactor?: pulumi.Input<string>;
    mosThreshold?: pulumi.Input<string>;
    packetlossThreshold?: pulumi.Input<number>;
    priorityInSla?: pulumi.Input<number>;
    priorityOutSla?: pulumi.Input<number>;
}

export interface SystemSdwanMember {
    comment?: pulumi.Input<string>;
    cost?: pulumi.Input<number>;
    gateway?: pulumi.Input<string>;
    gateway6?: pulumi.Input<string>;
    ingressSpilloverThreshold?: pulumi.Input<number>;
    interface?: pulumi.Input<string>;
    priority?: pulumi.Input<number>;
    priority6?: pulumi.Input<number>;
    seqNum?: pulumi.Input<number>;
    source?: pulumi.Input<string>;
    source6?: pulumi.Input<string>;
    spilloverThreshold?: pulumi.Input<number>;
    status?: pulumi.Input<string>;
    volumeRatio?: pulumi.Input<number>;
    weight?: pulumi.Input<number>;
    zone?: pulumi.Input<string>;
}

export interface SystemSdwanNeighbor {
    healthCheck?: pulumi.Input<string>;
    ip?: pulumi.Input<string>;
    member?: pulumi.Input<number>;
    minimumSlaMeetMembers?: pulumi.Input<number>;
    mode?: pulumi.Input<string>;
    role?: pulumi.Input<string>;
    slaId?: pulumi.Input<number>;
}

export interface SystemSdwanService {
    addrMode?: pulumi.Input<string>;
    bandwidthWeight?: pulumi.Input<number>;
    default?: pulumi.Input<string>;
    dscpForward?: pulumi.Input<string>;
    dscpForwardTag?: pulumi.Input<string>;
    dscpReverse?: pulumi.Input<string>;
    dscpReverseTag?: pulumi.Input<string>;
    dst6s?: pulumi.Input<pulumi.Input<inputs.SystemSdwanServiceDst6>[]>;
    dstNegate?: pulumi.Input<string>;
    dsts?: pulumi.Input<pulumi.Input<inputs.SystemSdwanServiceDst>[]>;
    endPort?: pulumi.Input<number>;
    gateway?: pulumi.Input<string>;
    groups?: pulumi.Input<pulumi.Input<inputs.SystemSdwanServiceGroup>[]>;
    hashMode?: pulumi.Input<string>;
    healthChecks?: pulumi.Input<pulumi.Input<inputs.SystemSdwanServiceHealthCheck>[]>;
    holdDownTime?: pulumi.Input<number>;
    id?: pulumi.Input<number>;
    inputDeviceNegate?: pulumi.Input<string>;
    inputDevices?: pulumi.Input<pulumi.Input<inputs.SystemSdwanServiceInputDevice>[]>;
    inputZones?: pulumi.Input<pulumi.Input<inputs.SystemSdwanServiceInputZone>[]>;
    internetService?: pulumi.Input<string>;
    internetServiceAppCtrlCategories?: pulumi.Input<pulumi.Input<inputs.SystemSdwanServiceInternetServiceAppCtrlCategory>[]>;
    internetServiceAppCtrlGroups?: pulumi.Input<pulumi.Input<inputs.SystemSdwanServiceInternetServiceAppCtrlGroup>[]>;
    internetServiceAppCtrls?: pulumi.Input<pulumi.Input<inputs.SystemSdwanServiceInternetServiceAppCtrl>[]>;
    internetServiceCustomGroups?: pulumi.Input<pulumi.Input<inputs.SystemSdwanServiceInternetServiceCustomGroup>[]>;
    internetServiceCustoms?: pulumi.Input<pulumi.Input<inputs.SystemSdwanServiceInternetServiceCustom>[]>;
    internetServiceGroups?: pulumi.Input<pulumi.Input<inputs.SystemSdwanServiceInternetServiceGroup>[]>;
    internetServiceNames?: pulumi.Input<pulumi.Input<inputs.SystemSdwanServiceInternetServiceName>[]>;
    jitterWeight?: pulumi.Input<number>;
    latencyWeight?: pulumi.Input<number>;
    linkCostFactor?: pulumi.Input<string>;
    linkCostThreshold?: pulumi.Input<number>;
    minimumSlaMeetMembers?: pulumi.Input<number>;
    mode?: pulumi.Input<string>;
    name?: pulumi.Input<string>;
    packetLossWeight?: pulumi.Input<number>;
    passiveMeasurement?: pulumi.Input<string>;
    priorityMembers?: pulumi.Input<pulumi.Input<inputs.SystemSdwanServicePriorityMember>[]>;
    priorityZones?: pulumi.Input<pulumi.Input<inputs.SystemSdwanServicePriorityZone>[]>;
    protocol?: pulumi.Input<number>;
    qualityLink?: pulumi.Input<number>;
    role?: pulumi.Input<string>;
    routeTag?: pulumi.Input<number>;
    slaCompareMethod?: pulumi.Input<string>;
    slas?: pulumi.Input<pulumi.Input<inputs.SystemSdwanServiceSla>[]>;
    src6s?: pulumi.Input<pulumi.Input<inputs.SystemSdwanServiceSrc6>[]>;
    srcNegate?: pulumi.Input<string>;
    srcs?: pulumi.Input<pulumi.Input<inputs.SystemSdwanServiceSrc>[]>;
    standaloneAction?: pulumi.Input<string>;
    startPort?: pulumi.Input<number>;
    status?: pulumi.Input<string>;
    tieBreak?: pulumi.Input<string>;
    tos?: pulumi.Input<string>;
    tosMask?: pulumi.Input<string>;
    useShortcutSla?: pulumi.Input<string>;
    users?: pulumi.Input<pulumi.Input<inputs.SystemSdwanServiceUser>[]>;
}

export interface SystemSdwanServiceDst {
    name?: pulumi.Input<string>;
}

export interface SystemSdwanServiceDst6 {
    name?: pulumi.Input<string>;
}

export interface SystemSdwanServiceGroup {
    name?: pulumi.Input<string>;
}

export interface SystemSdwanServiceHealthCheck {
    name?: pulumi.Input<string>;
}

export interface SystemSdwanServiceInputDevice {
    name?: pulumi.Input<string>;
}

export interface SystemSdwanServiceInputZone {
    name?: pulumi.Input<string>;
}

export interface SystemSdwanServiceInternetServiceAppCtrl {
    id?: pulumi.Input<number>;
}

export interface SystemSdwanServiceInternetServiceAppCtrlCategory {
    id?: pulumi.Input<number>;
}

export interface SystemSdwanServiceInternetServiceAppCtrlGroup {
    name?: pulumi.Input<string>;
}

export interface SystemSdwanServiceInternetServiceCustom {
    name?: pulumi.Input<string>;
}

export interface SystemSdwanServiceInternetServiceCustomGroup {
    name?: pulumi.Input<string>;
}

export interface SystemSdwanServiceInternetServiceGroup {
    name?: pulumi.Input<string>;
}

export interface SystemSdwanServiceInternetServiceName {
    name?: pulumi.Input<string>;
}

export interface SystemSdwanServicePriorityMember {
    seqNum?: pulumi.Input<number>;
}

export interface SystemSdwanServicePriorityZone {
    name?: pulumi.Input<string>;
}

export interface SystemSdwanServiceSla {
    healthCheck?: pulumi.Input<string>;
    id?: pulumi.Input<number>;
}

export interface SystemSdwanServiceSrc {
    name?: pulumi.Input<string>;
}

export interface SystemSdwanServiceSrc6 {
    name?: pulumi.Input<string>;
}

export interface SystemSdwanServiceUser {
    name?: pulumi.Input<string>;
}

export interface SystemSdwanZone {
    name?: pulumi.Input<string>;
    serviceSlaTieBreak?: pulumi.Input<string>;
}

export interface SystemSessionTtlPort {
    endPort?: pulumi.Input<number>;
    id?: pulumi.Input<number>;
    protocol?: pulumi.Input<number>;
    startPort?: pulumi.Input<number>;
    timeout?: pulumi.Input<string>;
}

export interface SystemSettingsGuiDefaultPolicyColumn {
    name?: pulumi.Input<string>;
}

export interface SystemSnmpCommunityHost {
    haDirect?: pulumi.Input<string>;
    hostType?: pulumi.Input<string>;
    id?: pulumi.Input<number>;
    ip?: pulumi.Input<string>;
    sourceIp?: pulumi.Input<string>;
}

export interface SystemSnmpCommunityHosts6 {
    haDirect?: pulumi.Input<string>;
    hostType?: pulumi.Input<string>;
    id?: pulumi.Input<number>;
    ipv6?: pulumi.Input<string>;
    sourceIpv6?: pulumi.Input<string>;
}

export interface SystemSnmpCommunityVdom {
    name?: pulumi.Input<string>;
}

export interface SystemSnmpUserVdom {
    name?: pulumi.Input<string>;
}

export interface SystemSpeedTestScheduleSchedule {
    name?: pulumi.Input<string>;
}

export interface SystemSpeedTestServerHost {
    id?: pulumi.Input<number>;
    ip?: pulumi.Input<string>;
    password?: pulumi.Input<string>;
    port?: pulumi.Input<number>;
    user?: pulumi.Input<string>;
}

export interface SystemSsoAdminVdom {
    name?: pulumi.Input<string>;
}

export interface SystemSsoForticloudAdminVdom {
    name?: pulumi.Input<string>;
}

export interface SystemStandaloneClusterClusterPeer {
    downIntfsBeforeSessSyncs?: pulumi.Input<pulumi.Input<inputs.SystemStandaloneClusterClusterPeerDownIntfsBeforeSessSync>[]>;
    hbInterval?: pulumi.Input<number>;
    hbLostThreshold?: pulumi.Input<number>;
    ipsecTunnelSync?: pulumi.Input<string>;
    peerip?: pulumi.Input<string>;
    peervd?: pulumi.Input<string>;
    secondaryAddIpsecRoutes?: pulumi.Input<string>;
    sessionSyncFilter?: pulumi.Input<inputs.SystemStandaloneClusterClusterPeerSessionSyncFilter>;
    syncId?: pulumi.Input<number>;
    syncvds?: pulumi.Input<pulumi.Input<inputs.SystemStandaloneClusterClusterPeerSyncvd>[]>;
}

export interface SystemStandaloneClusterClusterPeerDownIntfsBeforeSessSync {
    name?: pulumi.Input<string>;
}

export interface SystemStandaloneClusterClusterPeerSessionSyncFilter {
    customServices?: pulumi.Input<pulumi.Input<inputs.SystemStandaloneClusterClusterPeerSessionSyncFilterCustomService>[]>;
    dstaddr?: pulumi.Input<string>;
    dstaddr6?: pulumi.Input<string>;
    dstintf?: pulumi.Input<string>;
    srcaddr?: pulumi.Input<string>;
    srcaddr6?: pulumi.Input<string>;
    srcintf?: pulumi.Input<string>;
}

export interface SystemStandaloneClusterClusterPeerSessionSyncFilterCustomService {
    dstPortRange?: pulumi.Input<string>;
    id?: pulumi.Input<number>;
    srcPortRange?: pulumi.Input<string>;
}

export interface SystemStandaloneClusterClusterPeerSyncvd {
    name?: pulumi.Input<string>;
}

export interface SystemSwitchInterfaceMember {
    interfaceName?: pulumi.Input<string>;
}

export interface SystemSwitchInterfaceSpanSourcePort {
    interfaceName?: pulumi.Input<string>;
}

export interface SystemVdomDnsServerHostname {
    hostname?: pulumi.Input<string>;
}

export interface SystemVdomExceptionVdom {
    name?: pulumi.Input<string>;
}

export interface SystemVirtualSwitchPort {
    alias?: pulumi.Input<string>;
    name?: pulumi.Input<string>;
}

export interface SystemVirtualWanLinkFailAlertInterface {
    name?: pulumi.Input<string>;
}

export interface SystemVirtualWanLinkHealthCheck {
    addrMode?: pulumi.Input<string>;
    diffservcode?: pulumi.Input<string>;
    dnsRequestDomain?: pulumi.Input<string>;
    failtime?: pulumi.Input<number>;
    haPriority?: pulumi.Input<number>;
    httpAgent?: pulumi.Input<string>;
    httpGet?: pulumi.Input<string>;
    httpMatch?: pulumi.Input<string>;
    interval?: pulumi.Input<number>;
    members?: pulumi.Input<pulumi.Input<inputs.SystemVirtualWanLinkHealthCheckMember>[]>;
    name?: pulumi.Input<string>;
    packetSize?: pulumi.Input<number>;
    password?: pulumi.Input<string>;
    port?: pulumi.Input<number>;
    probeCount?: pulumi.Input<number>;
    probePackets?: pulumi.Input<string>;
    probeTimeout?: pulumi.Input<number>;
    protocol?: pulumi.Input<string>;
    recoverytime?: pulumi.Input<number>;
    securityMode?: pulumi.Input<string>;
    server?: pulumi.Input<string>;
    slaFailLogPeriod?: pulumi.Input<number>;
    slaPassLogPeriod?: pulumi.Input<number>;
    slas?: pulumi.Input<pulumi.Input<inputs.SystemVirtualWanLinkHealthCheckSla>[]>;
    systemDns?: pulumi.Input<string>;
    thresholdAlertJitter?: pulumi.Input<number>;
    thresholdAlertLatency?: pulumi.Input<number>;
    thresholdAlertPacketloss?: pulumi.Input<number>;
    thresholdWarningJitter?: pulumi.Input<number>;
    thresholdWarningLatency?: pulumi.Input<number>;
    thresholdWarningPacketloss?: pulumi.Input<number>;
    updateCascadeInterface?: pulumi.Input<string>;
    updateStaticRoute?: pulumi.Input<string>;
}

export interface SystemVirtualWanLinkHealthCheckMember {
    seqNum?: pulumi.Input<number>;
}

export interface SystemVirtualWanLinkHealthCheckSla {
    id?: pulumi.Input<number>;
    jitterThreshold?: pulumi.Input<number>;
    latencyThreshold?: pulumi.Input<number>;
    linkCostFactor?: pulumi.Input<string>;
    packetlossThreshold?: pulumi.Input<number>;
}

export interface SystemVirtualWanLinkMember {
    comment?: pulumi.Input<string>;
    cost?: pulumi.Input<number>;
    gateway?: pulumi.Input<string>;
    gateway6?: pulumi.Input<string>;
    ingressSpilloverThreshold?: pulumi.Input<number>;
    interface?: pulumi.Input<string>;
    priority?: pulumi.Input<number>;
    seqNum?: pulumi.Input<number>;
    source?: pulumi.Input<string>;
    source6?: pulumi.Input<string>;
    spilloverThreshold?: pulumi.Input<number>;
    status?: pulumi.Input<string>;
    volumeRatio?: pulumi.Input<number>;
    weight?: pulumi.Input<number>;
}

export interface SystemVirtualWanLinkNeighbor {
    healthCheck?: pulumi.Input<string>;
    ip?: pulumi.Input<string>;
    member?: pulumi.Input<number>;
    role?: pulumi.Input<string>;
    slaId?: pulumi.Input<number>;
}

export interface SystemVirtualWanLinkService {
    addrMode?: pulumi.Input<string>;
    bandwidthWeight?: pulumi.Input<number>;
    default?: pulumi.Input<string>;
    dscpForward?: pulumi.Input<string>;
    dscpForwardTag?: pulumi.Input<string>;
    dscpReverse?: pulumi.Input<string>;
    dscpReverseTag?: pulumi.Input<string>;
    dst6s?: pulumi.Input<pulumi.Input<inputs.SystemVirtualWanLinkServiceDst6>[]>;
    dstNegate?: pulumi.Input<string>;
    dsts?: pulumi.Input<pulumi.Input<inputs.SystemVirtualWanLinkServiceDst>[]>;
    endPort?: pulumi.Input<number>;
    gateway?: pulumi.Input<string>;
    groups?: pulumi.Input<pulumi.Input<inputs.SystemVirtualWanLinkServiceGroup>[]>;
    healthCheck?: pulumi.Input<string>;
    holdDownTime?: pulumi.Input<number>;
    id?: pulumi.Input<number>;
    inputDeviceNegate?: pulumi.Input<string>;
    inputDevices?: pulumi.Input<pulumi.Input<inputs.SystemVirtualWanLinkServiceInputDevice>[]>;
    internetService?: pulumi.Input<string>;
    internetServiceAppCtrlGroups?: pulumi.Input<pulumi.Input<inputs.SystemVirtualWanLinkServiceInternetServiceAppCtrlGroup>[]>;
    internetServiceAppCtrls?: pulumi.Input<pulumi.Input<inputs.SystemVirtualWanLinkServiceInternetServiceAppCtrl>[]>;
    internetServiceCtrlGroups?: pulumi.Input<pulumi.Input<inputs.SystemVirtualWanLinkServiceInternetServiceCtrlGroup>[]>;
    internetServiceCtrls?: pulumi.Input<pulumi.Input<inputs.SystemVirtualWanLinkServiceInternetServiceCtrl>[]>;
    internetServiceCustomGroups?: pulumi.Input<pulumi.Input<inputs.SystemVirtualWanLinkServiceInternetServiceCustomGroup>[]>;
    internetServiceCustoms?: pulumi.Input<pulumi.Input<inputs.SystemVirtualWanLinkServiceInternetServiceCustom>[]>;
    internetServiceGroups?: pulumi.Input<pulumi.Input<inputs.SystemVirtualWanLinkServiceInternetServiceGroup>[]>;
    internetServiceIds?: pulumi.Input<pulumi.Input<inputs.SystemVirtualWanLinkServiceInternetServiceId>[]>;
    internetServiceNames?: pulumi.Input<pulumi.Input<inputs.SystemVirtualWanLinkServiceInternetServiceName>[]>;
    jitterWeight?: pulumi.Input<number>;
    latencyWeight?: pulumi.Input<number>;
    linkCostFactor?: pulumi.Input<string>;
    linkCostThreshold?: pulumi.Input<number>;
    member?: pulumi.Input<number>;
    mode?: pulumi.Input<string>;
    name?: pulumi.Input<string>;
    packetLossWeight?: pulumi.Input<number>;
    priorityMembers?: pulumi.Input<pulumi.Input<inputs.SystemVirtualWanLinkServicePriorityMember>[]>;
    protocol?: pulumi.Input<number>;
    qualityLink?: pulumi.Input<number>;
    role?: pulumi.Input<string>;
    routeTag?: pulumi.Input<number>;
    slaCompareMethod?: pulumi.Input<string>;
    slas?: pulumi.Input<pulumi.Input<inputs.SystemVirtualWanLinkServiceSla>[]>;
    src6s?: pulumi.Input<pulumi.Input<inputs.SystemVirtualWanLinkServiceSrc6>[]>;
    srcNegate?: pulumi.Input<string>;
    srcs?: pulumi.Input<pulumi.Input<inputs.SystemVirtualWanLinkServiceSrc>[]>;
    standaloneAction?: pulumi.Input<string>;
    startPort?: pulumi.Input<number>;
    status?: pulumi.Input<string>;
    tos?: pulumi.Input<string>;
    tosMask?: pulumi.Input<string>;
    users?: pulumi.Input<pulumi.Input<inputs.SystemVirtualWanLinkServiceUser>[]>;
}

export interface SystemVirtualWanLinkServiceDst {
    name?: pulumi.Input<string>;
}

export interface SystemVirtualWanLinkServiceDst6 {
    name?: pulumi.Input<string>;
}

export interface SystemVirtualWanLinkServiceGroup {
    name?: pulumi.Input<string>;
}

export interface SystemVirtualWanLinkServiceInputDevice {
    name?: pulumi.Input<string>;
}

export interface SystemVirtualWanLinkServiceInternetServiceAppCtrl {
    id?: pulumi.Input<number>;
}

export interface SystemVirtualWanLinkServiceInternetServiceAppCtrlGroup {
    name?: pulumi.Input<string>;
}

export interface SystemVirtualWanLinkServiceInternetServiceCtrl {
    id?: pulumi.Input<number>;
}

export interface SystemVirtualWanLinkServiceInternetServiceCtrlGroup {
    name?: pulumi.Input<string>;
}

export interface SystemVirtualWanLinkServiceInternetServiceCustom {
    name?: pulumi.Input<string>;
}

export interface SystemVirtualWanLinkServiceInternetServiceCustomGroup {
    name?: pulumi.Input<string>;
}

export interface SystemVirtualWanLinkServiceInternetServiceGroup {
    name?: pulumi.Input<string>;
}

export interface SystemVirtualWanLinkServiceInternetServiceId {
    id?: pulumi.Input<number>;
}

export interface SystemVirtualWanLinkServiceInternetServiceName {
    name?: pulumi.Input<string>;
}

export interface SystemVirtualWanLinkServicePriorityMember {
    seqNum?: pulumi.Input<number>;
}

export interface SystemVirtualWanLinkServiceSla {
    healthCheck?: pulumi.Input<string>;
    id?: pulumi.Input<number>;
}

export interface SystemVirtualWanLinkServiceSrc {
    name?: pulumi.Input<string>;
}

export interface SystemVirtualWanLinkServiceSrc6 {
    name?: pulumi.Input<string>;
}

export interface SystemVirtualWanLinkServiceUser {
    name?: pulumi.Input<string>;
}

export interface SystemVirtualWanLinkZone {
    name?: pulumi.Input<string>;
}

export interface SystemVirtualWirePairMember {
    interfaceName?: pulumi.Input<string>;
}

export interface SystemVxlanRemoteIp {
    ip?: pulumi.Input<string>;
}

export interface SystemVxlanRemoteIp6 {
    ip6?: pulumi.Input<string>;
}

export interface SystemZoneInterface {
    interfaceName?: pulumi.Input<string>;
}

export interface SystemZoneTagging {
    category?: pulumi.Input<string>;
    name?: pulumi.Input<string>;
    tags?: pulumi.Input<pulumi.Input<inputs.SystemZoneTaggingTag>[]>;
}

export interface SystemZoneTaggingTag {
    name?: pulumi.Input<string>;
}

export interface UserDeviceAccessListDeviceList {
    action?: pulumi.Input<string>;
    device?: pulumi.Input<string>;
    id?: pulumi.Input<number>;
}

export interface UserDeviceGroupMember {
    name?: pulumi.Input<string>;
}

export interface UserDeviceGroupTagging {
    category?: pulumi.Input<string>;
    name?: pulumi.Input<string>;
    tags?: pulumi.Input<pulumi.Input<inputs.UserDeviceGroupTaggingTag>[]>;
}

export interface UserDeviceGroupTaggingTag {
    name?: pulumi.Input<string>;
}

export interface UserDeviceTagging {
    category?: pulumi.Input<string>;
    name?: pulumi.Input<string>;
    tags?: pulumi.Input<pulumi.Input<inputs.UserDeviceTaggingTag>[]>;
}

export interface UserDeviceTaggingTag {
    name?: pulumi.Input<string>;
}

export interface UserDomainControllerExtraServer {
    id?: pulumi.Input<number>;
    ipAddress?: pulumi.Input<string>;
    port?: pulumi.Input<number>;
    sourceIpAddress?: pulumi.Input<string>;
    sourcePort?: pulumi.Input<number>;
}

export interface UserExchangeKdcIp {
    ipv4?: pulumi.Input<string>;
}

export interface UserFssoPollingAdgrp {
    name?: pulumi.Input<string>;
}

export interface UserGroupGuest {
    comment?: pulumi.Input<string>;
    company?: pulumi.Input<string>;
    email?: pulumi.Input<string>;
    expiration?: pulumi.Input<string>;
    id?: pulumi.Input<number>;
    mobilePhone?: pulumi.Input<string>;
    name?: pulumi.Input<string>;
    password?: pulumi.Input<string>;
    sponsor?: pulumi.Input<string>;
    userId?: pulumi.Input<string>;
}

export interface UserGroupMatch {
    groupName?: pulumi.Input<string>;
    id?: pulumi.Input<number>;
    serverName?: pulumi.Input<string>;
}

export interface UserGroupMember {
    name?: pulumi.Input<string>;
}

export interface UserNacPolicySwitchGroup {
    name?: pulumi.Input<string>;
}

export interface UserNacPolicySwitchScope {
    switchId?: pulumi.Input<string>;
}

export interface UserPeergrpMember {
    name?: pulumi.Input<string>;
}

export interface UserQuarantineTarget {
    description?: pulumi.Input<string>;
    entry?: pulumi.Input<string>;
    macs?: pulumi.Input<pulumi.Input<inputs.UserQuarantineTargetMac>[]>;
}

export interface UserQuarantineTargetMac {
    description?: pulumi.Input<string>;
    drop?: pulumi.Input<string>;
    entryId?: pulumi.Input<number>;
    mac?: pulumi.Input<string>;
    parent?: pulumi.Input<string>;
}

export interface UserRadiusAccountingServer {
    id?: pulumi.Input<number>;
    interface?: pulumi.Input<string>;
    interfaceSelectMethod?: pulumi.Input<string>;
    port?: pulumi.Input<number>;
    secret?: pulumi.Input<string>;
    server?: pulumi.Input<string>;
    sourceIp?: pulumi.Input<string>;
    status?: pulumi.Input<string>;
}

export interface UserRadiusClass {
    name?: pulumi.Input<string>;
}

export interface UserSecurityExemptListRule {
    devices?: pulumi.Input<pulumi.Input<inputs.UserSecurityExemptListRuleDevice>[]>;
    dstaddrs?: pulumi.Input<pulumi.Input<inputs.UserSecurityExemptListRuleDstaddr>[]>;
    id?: pulumi.Input<number>;
    services?: pulumi.Input<pulumi.Input<inputs.UserSecurityExemptListRuleService>[]>;
    srcaddrs?: pulumi.Input<pulumi.Input<inputs.UserSecurityExemptListRuleSrcaddr>[]>;
}

export interface UserSecurityExemptListRuleDevice {
    name?: pulumi.Input<string>;
}

export interface UserSecurityExemptListRuleDstaddr {
    name?: pulumi.Input<string>;
}

export interface UserSecurityExemptListRuleService {
    name?: pulumi.Input<string>;
}

export interface UserSecurityExemptListRuleSrcaddr {
    name?: pulumi.Input<string>;
}

export interface UserSettingAuthPort {
    id?: pulumi.Input<number>;
    port?: pulumi.Input<number>;
    type?: pulumi.Input<string>;
}

export interface VideofilterProfileFortiguardCategory {
    filters?: pulumi.Input<pulumi.Input<inputs.VideofilterProfileFortiguardCategoryFilter>[]>;
}

export interface VideofilterProfileFortiguardCategoryFilter {
    action?: pulumi.Input<string>;
    categoryId?: pulumi.Input<number>;
    id?: pulumi.Input<number>;
    log?: pulumi.Input<string>;
}

export interface VideofilterYoutubeChannelFilterEntry {
    action?: pulumi.Input<string>;
    channelId?: pulumi.Input<string>;
    comment?: pulumi.Input<string>;
    id?: pulumi.Input<number>;
}

export interface VoipProfileMsrp {
    logViolations?: pulumi.Input<string>;
    maxMsgSize?: pulumi.Input<number>;
    maxMsgSizeAction?: pulumi.Input<string>;
    status?: pulumi.Input<string>;
}

export interface VoipProfileSccp {
    blockMcast?: pulumi.Input<string>;
    logCallSummary?: pulumi.Input<string>;
    logViolations?: pulumi.Input<string>;
    maxCalls?: pulumi.Input<number>;
    status?: pulumi.Input<string>;
    verifyHeader?: pulumi.Input<string>;
}

export interface VoipProfileSip {
    ackRate?: pulumi.Input<number>;
    ackRateTrack?: pulumi.Input<string>;
    blockAck?: pulumi.Input<string>;
    blockBye?: pulumi.Input<string>;
    blockCancel?: pulumi.Input<string>;
    blockGeoRedOptions?: pulumi.Input<string>;
    blockInfo?: pulumi.Input<string>;
    blockInvite?: pulumi.Input<string>;
    blockLongLines?: pulumi.Input<string>;
    blockMessage?: pulumi.Input<string>;
    blockNotify?: pulumi.Input<string>;
    blockOptions?: pulumi.Input<string>;
    blockPrack?: pulumi.Input<string>;
    blockPublish?: pulumi.Input<string>;
    blockRefer?: pulumi.Input<string>;
    blockRegister?: pulumi.Input<string>;
    blockSubscribe?: pulumi.Input<string>;
    blockUnknown?: pulumi.Input<string>;
    blockUpdate?: pulumi.Input<string>;
    byeRate?: pulumi.Input<number>;
    byeRateTrack?: pulumi.Input<string>;
    callKeepalive?: pulumi.Input<number>;
    cancelRate?: pulumi.Input<number>;
    cancelRateTrack?: pulumi.Input<string>;
    contactFixup?: pulumi.Input<string>;
    hntRestrictSourceIp?: pulumi.Input<string>;
    hostedNatTraversal?: pulumi.Input<string>;
    infoRate?: pulumi.Input<number>;
    infoRateTrack?: pulumi.Input<string>;
    inviteRate?: pulumi.Input<number>;
    inviteRateTrack?: pulumi.Input<string>;
    ipsRtp?: pulumi.Input<string>;
    logCallSummary?: pulumi.Input<string>;
    logViolations?: pulumi.Input<string>;
    malformedHeaderAllow?: pulumi.Input<string>;
    malformedHeaderCallId?: pulumi.Input<string>;
    malformedHeaderContact?: pulumi.Input<string>;
    malformedHeaderContentLength?: pulumi.Input<string>;
    malformedHeaderContentType?: pulumi.Input<string>;
    malformedHeaderCseq?: pulumi.Input<string>;
    malformedHeaderExpires?: pulumi.Input<string>;
    malformedHeaderFrom?: pulumi.Input<string>;
    malformedHeaderMaxForwards?: pulumi.Input<string>;
    malformedHeaderNoProxyRequire?: pulumi.Input<string>;
    malformedHeaderNoRequire?: pulumi.Input<string>;
    malformedHeaderPAssertedIdentity?: pulumi.Input<string>;
    malformedHeaderRack?: pulumi.Input<string>;
    malformedHeaderRecordRoute?: pulumi.Input<string>;
    malformedHeaderRoute?: pulumi.Input<string>;
    malformedHeaderRseq?: pulumi.Input<string>;
    malformedHeaderSdpA?: pulumi.Input<string>;
    malformedHeaderSdpB?: pulumi.Input<string>;
    malformedHeaderSdpC?: pulumi.Input<string>;
    malformedHeaderSdpI?: pulumi.Input<string>;
    malformedHeaderSdpK?: pulumi.Input<string>;
    malformedHeaderSdpM?: pulumi.Input<string>;
    malformedHeaderSdpO?: pulumi.Input<string>;
    malformedHeaderSdpR?: pulumi.Input<string>;
    malformedHeaderSdpS?: pulumi.Input<string>;
    malformedHeaderSdpT?: pulumi.Input<string>;
    malformedHeaderSdpV?: pulumi.Input<string>;
    malformedHeaderSdpZ?: pulumi.Input<string>;
    malformedHeaderTo?: pulumi.Input<string>;
    malformedHeaderVia?: pulumi.Input<string>;
    malformedRequestLine?: pulumi.Input<string>;
    maxBodyLength?: pulumi.Input<number>;
    maxDialogs?: pulumi.Input<number>;
    maxIdleDialogs?: pulumi.Input<number>;
    maxLineLength?: pulumi.Input<number>;
    messageRate?: pulumi.Input<number>;
    messageRateTrack?: pulumi.Input<string>;
    natPortRange?: pulumi.Input<string>;
    natTrace?: pulumi.Input<string>;
    noSdpFixup?: pulumi.Input<string>;
    notifyRate?: pulumi.Input<number>;
    notifyRateTrack?: pulumi.Input<string>;
    openContactPinhole?: pulumi.Input<string>;
    openRecordRoutePinhole?: pulumi.Input<string>;
    openRegisterPinhole?: pulumi.Input<string>;
    openViaPinhole?: pulumi.Input<string>;
    optionsRate?: pulumi.Input<number>;
    optionsRateTrack?: pulumi.Input<string>;
    prackRate?: pulumi.Input<number>;
    prackRateTrack?: pulumi.Input<string>;
    preserveOverride?: pulumi.Input<string>;
    provisionalInviteExpiryTime?: pulumi.Input<number>;
    publishRate?: pulumi.Input<number>;
    publishRateTrack?: pulumi.Input<string>;
    referRate?: pulumi.Input<number>;
    referRateTrack?: pulumi.Input<string>;
    registerContactTrace?: pulumi.Input<string>;
    registerRate?: pulumi.Input<number>;
    registerRateTrack?: pulumi.Input<string>;
    rfc2543Branch?: pulumi.Input<string>;
    rtp?: pulumi.Input<string>;
    sslAlgorithm?: pulumi.Input<string>;
    sslAuthClient?: pulumi.Input<string>;
    sslAuthServer?: pulumi.Input<string>;
    sslClientCertificate?: pulumi.Input<string>;
    sslClientRenegotiation?: pulumi.Input<string>;
    sslMaxVersion?: pulumi.Input<string>;
    sslMinVersion?: pulumi.Input<string>;
    sslMode?: pulumi.Input<string>;
    sslPfs?: pulumi.Input<string>;
    sslSendEmptyFrags?: pulumi.Input<string>;
    sslServerCertificate?: pulumi.Input<string>;
    status?: pulumi.Input<string>;
    strictRegister?: pulumi.Input<string>;
    subscribeRate?: pulumi.Input<number>;
    subscribeRateTrack?: pulumi.Input<string>;
    unknownHeader?: pulumi.Input<string>;
    updateRate?: pulumi.Input<number>;
    updateRateTrack?: pulumi.Input<string>;
}

export interface VpnCertificateSettingCrlVerification {
    chainCrlAbsence?: pulumi.Input<string>;
    expiry?: pulumi.Input<string>;
    leafCrlAbsence?: pulumi.Input<string>;
}

export interface VpnIpsecConcentratorMember {
    name?: pulumi.Input<string>;
}

export interface VpnIpsecFecMapping {
    bandwidthBiThreshold?: pulumi.Input<number>;
    bandwidthDownThreshold?: pulumi.Input<number>;
    bandwidthUpThreshold?: pulumi.Input<number>;
    base?: pulumi.Input<number>;
    latencyThreshold?: pulumi.Input<number>;
    packetLossThreshold?: pulumi.Input<number>;
    redundant?: pulumi.Input<number>;
    seqno?: pulumi.Input<number>;
}

export interface VpnIpsecPhase1BackupGateway {
    address?: pulumi.Input<string>;
}

export interface VpnIpsecPhase1Certificate {
    name?: pulumi.Input<string>;
}

export interface VpnIpsecPhase1InterfaceBackupGateway {
    address?: pulumi.Input<string>;
}

export interface VpnIpsecPhase1InterfaceCertificate {
    name?: pulumi.Input<string>;
}

export interface VpnIpsecPhase1InterfaceIpv4ExcludeRange {
    endIp?: pulumi.Input<string>;
    id?: pulumi.Input<number>;
    startIp?: pulumi.Input<string>;
}

export interface VpnIpsecPhase1InterfaceIpv6ExcludeRange {
    endIp?: pulumi.Input<string>;
    id?: pulumi.Input<number>;
    startIp?: pulumi.Input<string>;
}

export interface VpnIpsecPhase1Ipv4ExcludeRange {
    endIp?: pulumi.Input<string>;
    id?: pulumi.Input<number>;
    startIp?: pulumi.Input<string>;
}

export interface VpnIpsecPhase1Ipv6ExcludeRange {
    endIp?: pulumi.Input<string>;
    id?: pulumi.Input<number>;
    startIp?: pulumi.Input<string>;
}

export interface VpnOcvpnForticlientAccess {
    authGroups?: pulumi.Input<pulumi.Input<inputs.VpnOcvpnForticlientAccessAuthGroup>[]>;
    psksecret?: pulumi.Input<string>;
    status?: pulumi.Input<string>;
}

export interface VpnOcvpnForticlientAccessAuthGroup {
    authGroup?: pulumi.Input<string>;
    name?: pulumi.Input<string>;
    overlays?: pulumi.Input<pulumi.Input<inputs.VpnOcvpnForticlientAccessAuthGroupOverlay>[]>;
}

export interface VpnOcvpnForticlientAccessAuthGroupOverlay {
    overlayName?: pulumi.Input<string>;
}

export interface VpnOcvpnOverlay {
    assignIp?: pulumi.Input<string>;
    id?: pulumi.Input<number>;
    interOverlay?: pulumi.Input<string>;
    ipv4EndIp?: pulumi.Input<string>;
    ipv4StartIp?: pulumi.Input<string>;
    name?: pulumi.Input<string>;
    overlayName?: pulumi.Input<string>;
    subnets?: pulumi.Input<pulumi.Input<inputs.VpnOcvpnOverlaySubnet>[]>;
}

export interface VpnOcvpnOverlaySubnet {
    id?: pulumi.Input<number>;
    interface?: pulumi.Input<string>;
    subnet?: pulumi.Input<string>;
    type?: pulumi.Input<string>;
}

export interface VpnOcvpnWanInterface {
    name?: pulumi.Input<string>;
}

export interface VpnSslSettingsAuthenticationRule {
    auth?: pulumi.Input<string>;
    cipher?: pulumi.Input<string>;
    clientCert?: pulumi.Input<string>;
    groups?: pulumi.Input<pulumi.Input<inputs.VpnSslSettingsAuthenticationRuleGroup>[]>;
    id?: pulumi.Input<number>;
    portal?: pulumi.Input<string>;
    realm?: pulumi.Input<string>;
    sourceAddress6Negate?: pulumi.Input<string>;
    sourceAddress6s?: pulumi.Input<pulumi.Input<inputs.VpnSslSettingsAuthenticationRuleSourceAddress6>[]>;
    sourceAddressNegate?: pulumi.Input<string>;
    sourceAddresses?: pulumi.Input<pulumi.Input<inputs.VpnSslSettingsAuthenticationRuleSourceAddress>[]>;
    sourceInterfaces?: pulumi.Input<pulumi.Input<inputs.VpnSslSettingsAuthenticationRuleSourceInterface>[]>;
    userPeer?: pulumi.Input<string>;
    users?: pulumi.Input<pulumi.Input<inputs.VpnSslSettingsAuthenticationRuleUser>[]>;
}

export interface VpnSslSettingsAuthenticationRuleGroup {
    name?: pulumi.Input<string>;
}

export interface VpnSslSettingsAuthenticationRuleSourceAddress {
    name?: pulumi.Input<string>;
}

export interface VpnSslSettingsAuthenticationRuleSourceAddress6 {
    name?: pulumi.Input<string>;
}

export interface VpnSslSettingsAuthenticationRuleSourceInterface {
    name?: pulumi.Input<string>;
}

export interface VpnSslSettingsAuthenticationRuleUser {
    name?: pulumi.Input<string>;
}

export interface VpnSslSettingsSourceAddress {
    name?: pulumi.Input<string>;
}

export interface VpnSslSettingsSourceAddress6 {
    name?: pulumi.Input<string>;
}

export interface VpnSslSettingsSourceInterface {
    name?: pulumi.Input<string>;
}

export interface VpnSslSettingsTunnelIpPool {
    name?: pulumi.Input<string>;
}

export interface VpnSslSettingsTunnelIpv6Pool {
    name?: pulumi.Input<string>;
}

export interface VpnSslWebHostCheckSoftwareCheckItemList {
    action?: pulumi.Input<string>;
    id?: pulumi.Input<number>;
    md5s?: pulumi.Input<pulumi.Input<inputs.VpnSslWebHostCheckSoftwareCheckItemListMd5>[]>;
    target?: pulumi.Input<string>;
    type?: pulumi.Input<string>;
    version?: pulumi.Input<string>;
}

export interface VpnSslWebHostCheckSoftwareCheckItemListMd5 {
    id?: pulumi.Input<string>;
}

export interface VpnSslWebPortalBookmarkGroup {
    bookmarks?: pulumi.Input<pulumi.Input<inputs.VpnSslWebPortalBookmarkGroupBookmark>[]>;
    name?: pulumi.Input<string>;
}

export interface VpnSslWebPortalBookmarkGroupBookmark {
    additionalParams?: pulumi.Input<string>;
    apptype?: pulumi.Input<string>;
    colorDepth?: pulumi.Input<string>;
    description?: pulumi.Input<string>;
    domain?: pulumi.Input<string>;
    folder?: pulumi.Input<string>;
    formDatas?: pulumi.Input<pulumi.Input<inputs.VpnSslWebPortalBookmarkGroupBookmarkFormData>[]>;
    height?: pulumi.Input<number>;
    host?: pulumi.Input<string>;
    keyboardLayout?: pulumi.Input<string>;
    listeningPort?: pulumi.Input<number>;
    loadBalancingInfo?: pulumi.Input<string>;
    logonPassword?: pulumi.Input<string>;
    logonUser?: pulumi.Input<string>;
    name?: pulumi.Input<string>;
    port?: pulumi.Input<number>;
    preconnectionBlob?: pulumi.Input<string>;
    preconnectionId?: pulumi.Input<number>;
    remotePort?: pulumi.Input<number>;
    restrictedAdmin?: pulumi.Input<string>;
    security?: pulumi.Input<string>;
    sendPreconnectionId?: pulumi.Input<string>;
    serverLayout?: pulumi.Input<string>;
    showStatusWindow?: pulumi.Input<string>;
    sso?: pulumi.Input<string>;
    ssoCredential?: pulumi.Input<string>;
    ssoCredentialSentOnce?: pulumi.Input<string>;
    ssoPassword?: pulumi.Input<string>;
    ssoUsername?: pulumi.Input<string>;
    url?: pulumi.Input<string>;
    width?: pulumi.Input<number>;
}

export interface VpnSslWebPortalBookmarkGroupBookmarkFormData {
    name?: pulumi.Input<string>;
    value?: pulumi.Input<string>;
}

export interface VpnSslWebPortalHostCheckPolicy {
    name?: pulumi.Input<string>;
}

export interface VpnSslWebPortalIpPool {
    name?: pulumi.Input<string>;
}

export interface VpnSslWebPortalIpv6Pool {
    name?: pulumi.Input<string>;
}

export interface VpnSslWebPortalIpv6SplitTunnelingRoutingAddress {
    name?: pulumi.Input<string>;
}

export interface VpnSslWebPortalMacAddrCheckRule {
    macAddrLists?: pulumi.Input<pulumi.Input<inputs.VpnSslWebPortalMacAddrCheckRuleMacAddrList>[]>;
    macAddrMask?: pulumi.Input<number>;
    name?: pulumi.Input<string>;
}

export interface VpnSslWebPortalMacAddrCheckRuleMacAddrList {
    addr?: pulumi.Input<string>;
}

export interface VpnSslWebPortalOsCheckList {
    action?: pulumi.Input<string>;
    latestPatchLevel?: pulumi.Input<string>;
    name?: pulumi.Input<string>;
    tolerance?: pulumi.Input<number>;
}

export interface VpnSslWebPortalSplitDn {
    dnsServer1?: pulumi.Input<string>;
    dnsServer2?: pulumi.Input<string>;
    domains?: pulumi.Input<string>;
    id?: pulumi.Input<number>;
    ipv6DnsServer1?: pulumi.Input<string>;
    ipv6DnsServer2?: pulumi.Input<string>;
}

export interface VpnSslWebPortalSplitTunnelingRoutingAddress {
    name?: pulumi.Input<string>;
}

export interface VpnSslWebUserBookmarkBookmark {
    additionalParams?: pulumi.Input<string>;
    apptype?: pulumi.Input<string>;
    colorDepth?: pulumi.Input<string>;
    description?: pulumi.Input<string>;
    domain?: pulumi.Input<string>;
    folder?: pulumi.Input<string>;
    formDatas?: pulumi.Input<pulumi.Input<inputs.VpnSslWebUserBookmarkBookmarkFormData>[]>;
    height?: pulumi.Input<number>;
    host?: pulumi.Input<string>;
    keyboardLayout?: pulumi.Input<string>;
    listeningPort?: pulumi.Input<number>;
    loadBalancingInfo?: pulumi.Input<string>;
    logonPassword?: pulumi.Input<string>;
    logonUser?: pulumi.Input<string>;
    name?: pulumi.Input<string>;
    port?: pulumi.Input<number>;
    preconnectionBlob?: pulumi.Input<string>;
    preconnectionId?: pulumi.Input<number>;
    remotePort?: pulumi.Input<number>;
    restrictedAdmin?: pulumi.Input<string>;
    security?: pulumi.Input<string>;
    sendPreconnectionId?: pulumi.Input<string>;
    serverLayout?: pulumi.Input<string>;
    showStatusWindow?: pulumi.Input<string>;
    sso?: pulumi.Input<string>;
    ssoCredential?: pulumi.Input<string>;
    ssoCredentialSentOnce?: pulumi.Input<string>;
    ssoPassword?: pulumi.Input<string>;
    ssoUsername?: pulumi.Input<string>;
    url?: pulumi.Input<string>;
    width?: pulumi.Input<number>;
}

export interface VpnSslWebUserBookmarkBookmarkFormData {
    name?: pulumi.Input<string>;
    value?: pulumi.Input<string>;
}

export interface VpnSslWebUserGroupBookmarkBookmark {
    additionalParams?: pulumi.Input<string>;
    apptype?: pulumi.Input<string>;
    colorDepth?: pulumi.Input<string>;
    description?: pulumi.Input<string>;
    domain?: pulumi.Input<string>;
    folder?: pulumi.Input<string>;
    formDatas?: pulumi.Input<pulumi.Input<inputs.VpnSslWebUserGroupBookmarkBookmarkFormData>[]>;
    height?: pulumi.Input<number>;
    host?: pulumi.Input<string>;
    keyboardLayout?: pulumi.Input<string>;
    listeningPort?: pulumi.Input<number>;
    loadBalancingInfo?: pulumi.Input<string>;
    logonPassword?: pulumi.Input<string>;
    logonUser?: pulumi.Input<string>;
    name?: pulumi.Input<string>;
    port?: pulumi.Input<number>;
    preconnectionBlob?: pulumi.Input<string>;
    preconnectionId?: pulumi.Input<number>;
    remotePort?: pulumi.Input<number>;
    restrictedAdmin?: pulumi.Input<string>;
    security?: pulumi.Input<string>;
    sendPreconnectionId?: pulumi.Input<string>;
    serverLayout?: pulumi.Input<string>;
    showStatusWindow?: pulumi.Input<string>;
    sso?: pulumi.Input<string>;
    ssoCredential?: pulumi.Input<string>;
    ssoCredentialSentOnce?: pulumi.Input<string>;
    ssoPassword?: pulumi.Input<string>;
    ssoUsername?: pulumi.Input<string>;
    url?: pulumi.Input<string>;
    width?: pulumi.Input<number>;
}

export interface VpnSslWebUserGroupBookmarkBookmarkFormData {
    name?: pulumi.Input<string>;
    value?: pulumi.Input<string>;
}

export interface WafProfileAddressList {
    blockedAddresses?: pulumi.Input<pulumi.Input<inputs.WafProfileAddressListBlockedAddress>[]>;
    blockedLog?: pulumi.Input<string>;
    severity?: pulumi.Input<string>;
    status?: pulumi.Input<string>;
    trustedAddresses?: pulumi.Input<pulumi.Input<inputs.WafProfileAddressListTrustedAddress>[]>;
}

export interface WafProfileAddressListBlockedAddress {
    name?: pulumi.Input<string>;
}

export interface WafProfileAddressListTrustedAddress {
    name?: pulumi.Input<string>;
}

export interface WafProfileConstraint {
    contentLength?: pulumi.Input<inputs.WafProfileConstraintContentLength>;
    exceptions?: pulumi.Input<pulumi.Input<inputs.WafProfileConstraintException>[]>;
    headerLength?: pulumi.Input<inputs.WafProfileConstraintHeaderLength>;
    hostname?: pulumi.Input<inputs.WafProfileConstraintHostname>;
    lineLength?: pulumi.Input<inputs.WafProfileConstraintLineLength>;
    malformed?: pulumi.Input<inputs.WafProfileConstraintMalformed>;
    maxCookie?: pulumi.Input<inputs.WafProfileConstraintMaxCookie>;
    maxHeaderLine?: pulumi.Input<inputs.WafProfileConstraintMaxHeaderLine>;
    maxRangeSegment?: pulumi.Input<inputs.WafProfileConstraintMaxRangeSegment>;
    maxUrlParam?: pulumi.Input<inputs.WafProfileConstraintMaxUrlParam>;
    method?: pulumi.Input<inputs.WafProfileConstraintMethod>;
    paramLength?: pulumi.Input<inputs.WafProfileConstraintParamLength>;
    urlParamLength?: pulumi.Input<inputs.WafProfileConstraintUrlParamLength>;
    version?: pulumi.Input<inputs.WafProfileConstraintVersion>;
}

export interface WafProfileConstraintContentLength {
    action?: pulumi.Input<string>;
    length?: pulumi.Input<number>;
    log?: pulumi.Input<string>;
    severity?: pulumi.Input<string>;
    status?: pulumi.Input<string>;
}

export interface WafProfileConstraintException {
    address?: pulumi.Input<string>;
    contentLength?: pulumi.Input<string>;
    headerLength?: pulumi.Input<string>;
    hostname?: pulumi.Input<string>;
    id?: pulumi.Input<number>;
    lineLength?: pulumi.Input<string>;
    malformed?: pulumi.Input<string>;
    maxCookie?: pulumi.Input<string>;
    maxHeaderLine?: pulumi.Input<string>;
    maxRangeSegment?: pulumi.Input<string>;
    maxUrlParam?: pulumi.Input<string>;
    method?: pulumi.Input<string>;
    paramLength?: pulumi.Input<string>;
    pattern?: pulumi.Input<string>;
    regex?: pulumi.Input<string>;
    urlParamLength?: pulumi.Input<string>;
    version?: pulumi.Input<string>;
}

export interface WafProfileConstraintHeaderLength {
    action?: pulumi.Input<string>;
    length?: pulumi.Input<number>;
    log?: pulumi.Input<string>;
    severity?: pulumi.Input<string>;
    status?: pulumi.Input<string>;
}

export interface WafProfileConstraintHostname {
    action?: pulumi.Input<string>;
    log?: pulumi.Input<string>;
    severity?: pulumi.Input<string>;
    status?: pulumi.Input<string>;
}

export interface WafProfileConstraintLineLength {
    action?: pulumi.Input<string>;
    length?: pulumi.Input<number>;
    log?: pulumi.Input<string>;
    severity?: pulumi.Input<string>;
    status?: pulumi.Input<string>;
}

export interface WafProfileConstraintMalformed {
    action?: pulumi.Input<string>;
    log?: pulumi.Input<string>;
    severity?: pulumi.Input<string>;
    status?: pulumi.Input<string>;
}

export interface WafProfileConstraintMaxCookie {
    action?: pulumi.Input<string>;
    log?: pulumi.Input<string>;
    maxCookie?: pulumi.Input<number>;
    severity?: pulumi.Input<string>;
    status?: pulumi.Input<string>;
}

export interface WafProfileConstraintMaxHeaderLine {
    action?: pulumi.Input<string>;
    log?: pulumi.Input<string>;
    maxHeaderLine?: pulumi.Input<number>;
    severity?: pulumi.Input<string>;
    status?: pulumi.Input<string>;
}

export interface WafProfileConstraintMaxRangeSegment {
    action?: pulumi.Input<string>;
    log?: pulumi.Input<string>;
    maxRangeSegment?: pulumi.Input<number>;
    severity?: pulumi.Input<string>;
    status?: pulumi.Input<string>;
}

export interface WafProfileConstraintMaxUrlParam {
    action?: pulumi.Input<string>;
    log?: pulumi.Input<string>;
    maxUrlParam?: pulumi.Input<number>;
    severity?: pulumi.Input<string>;
    status?: pulumi.Input<string>;
}

export interface WafProfileConstraintMethod {
    action?: pulumi.Input<string>;
    log?: pulumi.Input<string>;
    severity?: pulumi.Input<string>;
    status?: pulumi.Input<string>;
}

export interface WafProfileConstraintParamLength {
    action?: pulumi.Input<string>;
    length?: pulumi.Input<number>;
    log?: pulumi.Input<string>;
    severity?: pulumi.Input<string>;
    status?: pulumi.Input<string>;
}

export interface WafProfileConstraintUrlParamLength {
    action?: pulumi.Input<string>;
    length?: pulumi.Input<number>;
    log?: pulumi.Input<string>;
    severity?: pulumi.Input<string>;
    status?: pulumi.Input<string>;
}

export interface WafProfileConstraintVersion {
    action?: pulumi.Input<string>;
    log?: pulumi.Input<string>;
    severity?: pulumi.Input<string>;
    status?: pulumi.Input<string>;
}

export interface WafProfileMethod {
    defaultAllowedMethods?: pulumi.Input<string>;
    log?: pulumi.Input<string>;
    methodPolicies?: pulumi.Input<pulumi.Input<inputs.WafProfileMethodMethodPolicy>[]>;
    severity?: pulumi.Input<string>;
    status?: pulumi.Input<string>;
}

export interface WafProfileMethodMethodPolicy {
    address?: pulumi.Input<string>;
    allowedMethods?: pulumi.Input<string>;
    id?: pulumi.Input<number>;
    pattern?: pulumi.Input<string>;
    regex?: pulumi.Input<string>;
}

export interface WafProfileSignature {
    creditCardDetectionThreshold?: pulumi.Input<number>;
    customSignatures?: pulumi.Input<pulumi.Input<inputs.WafProfileSignatureCustomSignature>[]>;
    disabledSignatures?: pulumi.Input<pulumi.Input<inputs.WafProfileSignatureDisabledSignature>[]>;
    disabledSubClasses?: pulumi.Input<pulumi.Input<inputs.WafProfileSignatureDisabledSubClass>[]>;
    mainClasses?: pulumi.Input<pulumi.Input<inputs.WafProfileSignatureMainClass>[]>;
}

export interface WafProfileSignatureCustomSignature {
    action?: pulumi.Input<string>;
    caseSensitivity?: pulumi.Input<string>;
    direction?: pulumi.Input<string>;
    log?: pulumi.Input<string>;
    name?: pulumi.Input<string>;
    pattern?: pulumi.Input<string>;
    severity?: pulumi.Input<string>;
    status?: pulumi.Input<string>;
    target?: pulumi.Input<string>;
}

export interface WafProfileSignatureDisabledSignature {
    id?: pulumi.Input<number>;
}

export interface WafProfileSignatureDisabledSubClass {
    id?: pulumi.Input<number>;
}

export interface WafProfileSignatureMainClass {
    action?: pulumi.Input<string>;
    id?: pulumi.Input<number>;
    log?: pulumi.Input<string>;
    severity?: pulumi.Input<string>;
    status?: pulumi.Input<string>;
}

export interface WafProfileUrlAccess {
    accessPatterns?: pulumi.Input<pulumi.Input<inputs.WafProfileUrlAccessAccessPattern>[]>;
    action?: pulumi.Input<string>;
    address?: pulumi.Input<string>;
    id?: pulumi.Input<number>;
    log?: pulumi.Input<string>;
    severity?: pulumi.Input<string>;
}

export interface WafProfileUrlAccessAccessPattern {
    id?: pulumi.Input<number>;
    negate?: pulumi.Input<string>;
    pattern?: pulumi.Input<string>;
    regex?: pulumi.Input<string>;
    srcaddr?: pulumi.Input<string>;
}

export interface WanoptCacheServiceDstPeer {
    authType?: pulumi.Input<number>;
    deviceId?: pulumi.Input<string>;
    encodeType?: pulumi.Input<number>;
    ip?: pulumi.Input<string>;
    priority?: pulumi.Input<number>;
}

export interface WanoptCacheServiceSrcPeer {
    authType?: pulumi.Input<number>;
    deviceId?: pulumi.Input<string>;
    encodeType?: pulumi.Input<number>;
    ip?: pulumi.Input<string>;
    priority?: pulumi.Input<number>;
}

export interface WanoptContentDeliveryNetworkRuleHostDomainNameSuffix {
    name?: pulumi.Input<string>;
}

export interface WanoptContentDeliveryNetworkRuleRule {
    contentId?: pulumi.Input<inputs.WanoptContentDeliveryNetworkRuleRuleContentId>;
    matchEntries?: pulumi.Input<pulumi.Input<inputs.WanoptContentDeliveryNetworkRuleRuleMatchEntry>[]>;
    matchMode?: pulumi.Input<string>;
    name?: pulumi.Input<string>;
    skipEntries?: pulumi.Input<pulumi.Input<inputs.WanoptContentDeliveryNetworkRuleRuleSkipEntry>[]>;
    skipRuleMode?: pulumi.Input<string>;
}

export interface WanoptContentDeliveryNetworkRuleRuleContentId {
    endDirection?: pulumi.Input<string>;
    endSkip?: pulumi.Input<number>;
    endStr?: pulumi.Input<string>;
    rangeStr?: pulumi.Input<string>;
    startDirection?: pulumi.Input<string>;
    startSkip?: pulumi.Input<number>;
    startStr?: pulumi.Input<string>;
    target?: pulumi.Input<string>;
}

export interface WanoptContentDeliveryNetworkRuleRuleMatchEntry {
    id?: pulumi.Input<number>;
    patterns?: pulumi.Input<pulumi.Input<inputs.WanoptContentDeliveryNetworkRuleRuleMatchEntryPattern>[]>;
    target?: pulumi.Input<string>;
}

export interface WanoptContentDeliveryNetworkRuleRuleMatchEntryPattern {
    string?: pulumi.Input<string>;
}

export interface WanoptContentDeliveryNetworkRuleRuleSkipEntry {
    id?: pulumi.Input<number>;
    patterns?: pulumi.Input<pulumi.Input<inputs.WanoptContentDeliveryNetworkRuleRuleSkipEntryPattern>[]>;
    target?: pulumi.Input<string>;
}

export interface WanoptContentDeliveryNetworkRuleRuleSkipEntryPattern {
    string?: pulumi.Input<string>;
}

export interface WanoptProfileCifs {
    byteCaching?: pulumi.Input<string>;
    logTraffic?: pulumi.Input<string>;
    port?: pulumi.Input<number>;
    preferChunking?: pulumi.Input<string>;
    protocolOpt?: pulumi.Input<string>;
    secureTunnel?: pulumi.Input<string>;
    status?: pulumi.Input<string>;
    tunnelSharing?: pulumi.Input<string>;
}

export interface WanoptProfileFtp {
    byteCaching?: pulumi.Input<string>;
    logTraffic?: pulumi.Input<string>;
    port?: pulumi.Input<number>;
    preferChunking?: pulumi.Input<string>;
    protocolOpt?: pulumi.Input<string>;
    secureTunnel?: pulumi.Input<string>;
    ssl?: pulumi.Input<string>;
    status?: pulumi.Input<string>;
    tunnelSharing?: pulumi.Input<string>;
}

export interface WanoptProfileHttp {
    byteCaching?: pulumi.Input<string>;
    logTraffic?: pulumi.Input<string>;
    port?: pulumi.Input<number>;
    preferChunking?: pulumi.Input<string>;
    protocolOpt?: pulumi.Input<string>;
    secureTunnel?: pulumi.Input<string>;
    ssl?: pulumi.Input<string>;
    sslPort?: pulumi.Input<number>;
    status?: pulumi.Input<string>;
    tunnelNonHttp?: pulumi.Input<string>;
    tunnelSharing?: pulumi.Input<string>;
    unknownHttpVersion?: pulumi.Input<string>;
}

export interface WanoptProfileMapi {
    byteCaching?: pulumi.Input<string>;
    logTraffic?: pulumi.Input<string>;
    port?: pulumi.Input<number>;
    secureTunnel?: pulumi.Input<string>;
    status?: pulumi.Input<string>;
    tunnelSharing?: pulumi.Input<string>;
}

export interface WanoptProfileTcp {
    byteCaching?: pulumi.Input<string>;
    byteCachingOpt?: pulumi.Input<string>;
    logTraffic?: pulumi.Input<string>;
    port?: pulumi.Input<string>;
    secureTunnel?: pulumi.Input<string>;
    ssl?: pulumi.Input<string>;
    sslPort?: pulumi.Input<number>;
    status?: pulumi.Input<string>;
    tunnelSharing?: pulumi.Input<string>;
}

export interface WebProxyExplicitPacPolicy {
    comments?: pulumi.Input<string>;
    dstaddrs?: pulumi.Input<pulumi.Input<inputs.WebProxyExplicitPacPolicyDstaddr>[]>;
    pacFileData?: pulumi.Input<string>;
    pacFileName?: pulumi.Input<string>;
    policyid?: pulumi.Input<number>;
    srcaddr6s?: pulumi.Input<pulumi.Input<inputs.WebProxyExplicitPacPolicySrcaddr6>[]>;
    srcaddrs?: pulumi.Input<pulumi.Input<inputs.WebProxyExplicitPacPolicySrcaddr>[]>;
    status?: pulumi.Input<string>;
}

export interface WebProxyExplicitPacPolicyDstaddr {
    name?: pulumi.Input<string>;
}

export interface WebProxyExplicitPacPolicySrcaddr {
    name?: pulumi.Input<string>;
}

export interface WebProxyExplicitPacPolicySrcaddr6 {
    name?: pulumi.Input<string>;
}

export interface WebProxyForwardServerGroupServerList {
    name?: pulumi.Input<string>;
    weight?: pulumi.Input<number>;
}

export interface WebProxyGlobalLearnClientIpSrcaddr {
    name?: pulumi.Input<string>;
}

export interface WebProxyGlobalLearnClientIpSrcaddr6 {
    name?: pulumi.Input<string>;
}

export interface WebProxyProfileHeader {
    action?: pulumi.Input<string>;
    addOption?: pulumi.Input<string>;
    base64Encoding?: pulumi.Input<string>;
    content?: pulumi.Input<string>;
    dstaddr6s?: pulumi.Input<pulumi.Input<inputs.WebProxyProfileHeaderDstaddr6>[]>;
    dstaddrs?: pulumi.Input<pulumi.Input<inputs.WebProxyProfileHeaderDstaddr>[]>;
    id?: pulumi.Input<number>;
    name?: pulumi.Input<string>;
    protocol?: pulumi.Input<string>;
}

export interface WebProxyProfileHeaderDstaddr {
    name?: pulumi.Input<string>;
}

export interface WebProxyProfileHeaderDstaddr6 {
    name?: pulumi.Input<string>;
}

export interface WebfilterContentEntry {
    action?: pulumi.Input<string>;
    lang?: pulumi.Input<string>;
    name?: pulumi.Input<string>;
    patternType?: pulumi.Input<string>;
    score?: pulumi.Input<number>;
    status?: pulumi.Input<string>;
}

export interface WebfilterContentHeaderEntry {
    action?: pulumi.Input<string>;
    category?: pulumi.Input<string>;
    pattern?: pulumi.Input<string>;
}

export interface WebfilterProfileAntiphish {
    authentication?: pulumi.Input<string>;
    checkBasicAuth?: pulumi.Input<string>;
    checkUri?: pulumi.Input<string>;
    checkUsernameOnly?: pulumi.Input<string>;
    customPatterns?: pulumi.Input<pulumi.Input<inputs.WebfilterProfileAntiphishCustomPattern>[]>;
    defaultAction?: pulumi.Input<string>;
    domainController?: pulumi.Input<string>;
    inspectionEntries?: pulumi.Input<pulumi.Input<inputs.WebfilterProfileAntiphishInspectionEntry>[]>;
    ldap?: pulumi.Input<string>;
    maxBodyLen?: pulumi.Input<number>;
    status?: pulumi.Input<string>;
}

export interface WebfilterProfileAntiphishCustomPattern {
    category?: pulumi.Input<string>;
    pattern?: pulumi.Input<string>;
    type?: pulumi.Input<string>;
}

export interface WebfilterProfileAntiphishInspectionEntry {
    action?: pulumi.Input<string>;
    fortiguardCategory?: pulumi.Input<string>;
    name?: pulumi.Input<string>;
}

export interface WebfilterProfileFileFilter {
    entries?: pulumi.Input<pulumi.Input<inputs.WebfilterProfileFileFilterEntry>[]>;
    log?: pulumi.Input<string>;
    scanArchiveContents?: pulumi.Input<string>;
    status?: pulumi.Input<string>;
}

export interface WebfilterProfileFileFilterEntry {
    action?: pulumi.Input<string>;
    comment?: pulumi.Input<string>;
    direction?: pulumi.Input<string>;
    fileTypes?: pulumi.Input<pulumi.Input<inputs.WebfilterProfileFileFilterEntryFileType>[]>;
    filter?: pulumi.Input<string>;
    passwordProtected?: pulumi.Input<string>;
    protocol?: pulumi.Input<string>;
}

export interface WebfilterProfileFileFilterEntryFileType {
    name?: pulumi.Input<string>;
}

export interface WebfilterProfileFtgdWf {
    exemptQuota?: pulumi.Input<string>;
    filters?: pulumi.Input<pulumi.Input<inputs.WebfilterProfileFtgdWfFilter>[]>;
    maxQuotaTimeout?: pulumi.Input<number>;
    options?: pulumi.Input<string>;
    ovrd?: pulumi.Input<string>;
    quotas?: pulumi.Input<pulumi.Input<inputs.WebfilterProfileFtgdWfQuota>[]>;
    rateCrlUrls?: pulumi.Input<string>;
    rateCssUrls?: pulumi.Input<string>;
    rateImageUrls?: pulumi.Input<string>;
    rateJavascriptUrls?: pulumi.Input<string>;
}

export interface WebfilterProfileFtgdWfFilter {
    action?: pulumi.Input<string>;
    authUsrGrps?: pulumi.Input<pulumi.Input<inputs.WebfilterProfileFtgdWfFilterAuthUsrGrp>[]>;
    category?: pulumi.Input<number>;
    id?: pulumi.Input<number>;
    log?: pulumi.Input<string>;
    overrideReplacemsg?: pulumi.Input<string>;
    warnDuration?: pulumi.Input<string>;
    warningDurationType?: pulumi.Input<string>;
    warningPrompt?: pulumi.Input<string>;
}

export interface WebfilterProfileFtgdWfFilterAuthUsrGrp {
    name?: pulumi.Input<string>;
}

export interface WebfilterProfileFtgdWfQuota {
    category?: pulumi.Input<string>;
    duration?: pulumi.Input<string>;
    id?: pulumi.Input<number>;
    overrideReplacemsg?: pulumi.Input<string>;
    type?: pulumi.Input<string>;
    unit?: pulumi.Input<string>;
    value?: pulumi.Input<number>;
}

export interface WebfilterProfileOverride {
    ovrdCookie?: pulumi.Input<string>;
    ovrdDur?: pulumi.Input<string>;
    ovrdDurMode?: pulumi.Input<string>;
    ovrdScope?: pulumi.Input<string>;
    ovrdUserGroups?: pulumi.Input<pulumi.Input<inputs.WebfilterProfileOverrideOvrdUserGroup>[]>;
    profileAttribute?: pulumi.Input<string>;
    profileType?: pulumi.Input<string>;
    profiles?: pulumi.Input<pulumi.Input<inputs.WebfilterProfileOverrideProfile>[]>;
}

export interface WebfilterProfileOverrideOvrdUserGroup {
    name?: pulumi.Input<string>;
}

export interface WebfilterProfileOverrideProfile {
    name?: pulumi.Input<string>;
}

export interface WebfilterProfileWeb {
    allowlist?: pulumi.Input<string>;
    blacklist?: pulumi.Input<string>;
    blocklist?: pulumi.Input<string>;
    bwordTable?: pulumi.Input<number>;
    bwordThreshold?: pulumi.Input<number>;
    contentHeaderList?: pulumi.Input<number>;
    keywordMatches?: pulumi.Input<pulumi.Input<inputs.WebfilterProfileWebKeywordMatch>[]>;
    logSearch?: pulumi.Input<string>;
    safeSearch?: pulumi.Input<string>;
    urlfilterTable?: pulumi.Input<number>;
    vimeoRestrict?: pulumi.Input<string>;
    whitelist?: pulumi.Input<string>;
    youtubeRestrict?: pulumi.Input<string>;
}

export interface WebfilterProfileWebKeywordMatch {
    pattern?: pulumi.Input<string>;
}

export interface WebfilterProfileWispServer {
    name?: pulumi.Input<string>;
}

export interface WebfilterProfileYoutubeChannelFilter {
    channelId?: pulumi.Input<string>;
    comment?: pulumi.Input<string>;
    id?: pulumi.Input<number>;
}

export interface WebfilterUrlfilterEntry {
    action?: pulumi.Input<string>;
    antiphishAction?: pulumi.Input<string>;
    dnsAddressFamily?: pulumi.Input<string>;
    exempt?: pulumi.Input<string>;
    id?: pulumi.Input<number>;
    referrerHost?: pulumi.Input<string>;
    status?: pulumi.Input<string>;
    type?: pulumi.Input<string>;
    url?: pulumi.Input<string>;
    webProxyProfile?: pulumi.Input<string>;
}

export interface WirelessControllerAccessControlListLayer3Ipv4Rule {
    action?: pulumi.Input<string>;
    comment?: pulumi.Input<string>;
    dstaddr?: pulumi.Input<string>;
    dstport?: pulumi.Input<number>;
    protocol?: pulumi.Input<number>;
    ruleId?: pulumi.Input<number>;
    srcaddr?: pulumi.Input<string>;
    srcport?: pulumi.Input<number>;
}

export interface WirelessControllerAccessControlListLayer3Ipv6Rule {
    action?: pulumi.Input<string>;
    comment?: pulumi.Input<string>;
    dstaddr?: pulumi.Input<string>;
    dstport?: pulumi.Input<number>;
    protocol?: pulumi.Input<number>;
    ruleId?: pulumi.Input<number>;
    srcaddr?: pulumi.Input<string>;
    srcport?: pulumi.Input<number>;
}

export interface WirelessControllerAddrgrpAddress {
    id?: pulumi.Input<string>;
}

export interface WirelessControllerApcfgProfileCommandList {
    id?: pulumi.Input<number>;
    name?: pulumi.Input<string>;
    passwdValue?: pulumi.Input<string>;
    type?: pulumi.Input<string>;
    value?: pulumi.Input<string>;
}

export interface WirelessControllerArrpProfileDarrpOptimizeSchedule {
    name?: pulumi.Input<string>;
}

export interface WirelessControllerBonjourProfilePolicyList {
    description?: pulumi.Input<string>;
    fromVlan?: pulumi.Input<string>;
    policyId?: pulumi.Input<number>;
    services?: pulumi.Input<string>;
    toVlan?: pulumi.Input<string>;
}

export interface WirelessControllerHotspot20Anqp3GppCellularMccMncList {
    id?: pulumi.Input<number>;
    mcc?: pulumi.Input<string>;
    mnc?: pulumi.Input<string>;
}

export interface WirelessControllerHotspot20AnqpNaiRealmNaiList {
    eapMethods?: pulumi.Input<pulumi.Input<inputs.WirelessControllerHotspot20AnqpNaiRealmNaiListEapMethod>[]>;
    encoding?: pulumi.Input<string>;
    naiRealm?: pulumi.Input<string>;
    name?: pulumi.Input<string>;
}

export interface WirelessControllerHotspot20AnqpNaiRealmNaiListEapMethod {
    authParams?: pulumi.Input<pulumi.Input<inputs.WirelessControllerHotspot20AnqpNaiRealmNaiListEapMethodAuthParam>[]>;
    index?: pulumi.Input<number>;
    method?: pulumi.Input<string>;
}

export interface WirelessControllerHotspot20AnqpNaiRealmNaiListEapMethodAuthParam {
    id?: pulumi.Input<string>;
    index?: pulumi.Input<number>;
    val?: pulumi.Input<string>;
}

export interface WirelessControllerHotspot20AnqpRoamingConsortiumOiList {
    comment?: pulumi.Input<string>;
    index?: pulumi.Input<number>;
    oi?: pulumi.Input<string>;
}

export interface WirelessControllerHotspot20AnqpVenueNameValueList {
    index?: pulumi.Input<number>;
    lang?: pulumi.Input<string>;
    value?: pulumi.Input<string>;
}

export interface WirelessControllerHotspot20AnqpVenueUrlValueList {
    index?: pulumi.Input<number>;
    number?: pulumi.Input<number>;
    value?: pulumi.Input<string>;
}

export interface WirelessControllerHotspot20H2QpAdviceOfChargeAocList {
    naiRealm?: pulumi.Input<string>;
    naiRealmEncoding?: pulumi.Input<string>;
    name?: pulumi.Input<string>;
    planInfos?: pulumi.Input<pulumi.Input<inputs.WirelessControllerHotspot20H2QpAdviceOfChargeAocListPlanInfo>[]>;
    type?: pulumi.Input<string>;
}

export interface WirelessControllerHotspot20H2QpAdviceOfChargeAocListPlanInfo {
    currency?: pulumi.Input<string>;
    infoFile?: pulumi.Input<string>;
    lang?: pulumi.Input<string>;
    name?: pulumi.Input<string>;
}

export interface WirelessControllerHotspot20H2QpOperatorNameValueList {
    index?: pulumi.Input<number>;
    lang?: pulumi.Input<string>;
    value?: pulumi.Input<string>;
}

export interface WirelessControllerHotspot20H2QpOsuProviderFriendlyName {
    friendlyName?: pulumi.Input<string>;
    index?: pulumi.Input<number>;
    lang?: pulumi.Input<string>;
}

export interface WirelessControllerHotspot20H2QpOsuProviderNaiNaiList {
    name?: pulumi.Input<string>;
    osuNai?: pulumi.Input<string>;
}

export interface WirelessControllerHotspot20H2QpOsuProviderServiceDescription {
    lang?: pulumi.Input<string>;
    serviceDescription?: pulumi.Input<string>;
    serviceId?: pulumi.Input<number>;
}

export interface WirelessControllerHotspot20HsProfileOsuProvider {
    name?: pulumi.Input<string>;
}

export interface WirelessControllerHotspot20IconIconList {
    file?: pulumi.Input<string>;
    height?: pulumi.Input<number>;
    lang?: pulumi.Input<string>;
    name?: pulumi.Input<string>;
    type?: pulumi.Input<string>;
    width?: pulumi.Input<number>;
}

export interface WirelessControllerHotspot20QosMapDscpExcept {
    dscp?: pulumi.Input<number>;
    index?: pulumi.Input<number>;
    up?: pulumi.Input<number>;
}

export interface WirelessControllerHotspot20QosMapDscpRange {
    high?: pulumi.Input<number>;
    index?: pulumi.Input<number>;
    low?: pulumi.Input<number>;
    up?: pulumi.Input<number>;
}

export interface WirelessControllerInterControllerInterControllerPeer {
    id?: pulumi.Input<number>;
    peerIp?: pulumi.Input<string>;
    peerPort?: pulumi.Input<number>;
    peerPriority?: pulumi.Input<string>;
}

export interface WirelessControllerMpskProfileMpskGroup {
    mpskKeys?: pulumi.Input<pulumi.Input<inputs.WirelessControllerMpskProfileMpskGroupMpskKey>[]>;
    name?: pulumi.Input<string>;
    vlanId?: pulumi.Input<number>;
    vlanType?: pulumi.Input<string>;
}

export interface WirelessControllerMpskProfileMpskGroupMpskKey {
    comment?: pulumi.Input<string>;
    concurrentClientLimitType?: pulumi.Input<string>;
    concurrentClients?: pulumi.Input<number>;
    mac?: pulumi.Input<string>;
    mpskSchedules?: pulumi.Input<pulumi.Input<inputs.WirelessControllerMpskProfileMpskGroupMpskKeyMpskSchedule>[]>;
    name?: pulumi.Input<string>;
    passphrase?: pulumi.Input<string>;
}

export interface WirelessControllerMpskProfileMpskGroupMpskKeyMpskSchedule {
    name?: pulumi.Input<string>;
}

export interface WirelessControllerQosProfileDscpWmmBe {
    id?: pulumi.Input<number>;
}

export interface WirelessControllerQosProfileDscpWmmBk {
    id?: pulumi.Input<number>;
}

export interface WirelessControllerQosProfileDscpWmmVi {
    id?: pulumi.Input<number>;
}

export interface WirelessControllerQosProfileDscpWmmVo {
    id?: pulumi.Input<number>;
}

export interface WirelessControllerSettingDarrpOptimizeSchedule {
    name?: pulumi.Input<string>;
}

export interface WirelessControllerSettingOffendingSsid {
    action?: pulumi.Input<string>;
    id?: pulumi.Input<number>;
    ssidPattern?: pulumi.Input<string>;
}

export interface WirelessControllerSnmpCommunity {
    hosts?: pulumi.Input<pulumi.Input<inputs.WirelessControllerSnmpCommunityHost>[]>;
    id?: pulumi.Input<number>;
    name?: pulumi.Input<string>;
    queryV1Status?: pulumi.Input<string>;
    queryV2cStatus?: pulumi.Input<string>;
    status?: pulumi.Input<string>;
    trapV1Status?: pulumi.Input<string>;
    trapV2cStatus?: pulumi.Input<string>;
}

export interface WirelessControllerSnmpCommunityHost {
    id?: pulumi.Input<number>;
    ip?: pulumi.Input<string>;
}

export interface WirelessControllerSnmpUser {
    authProto?: pulumi.Input<string>;
    authPwd?: pulumi.Input<string>;
    name?: pulumi.Input<string>;
    notifyHosts?: pulumi.Input<string>;
    privProto?: pulumi.Input<string>;
    privPwd?: pulumi.Input<string>;
    queries?: pulumi.Input<string>;
    securityLevel?: pulumi.Input<string>;
    status?: pulumi.Input<string>;
    trapStatus?: pulumi.Input<string>;
}

export interface WirelessControllerTimersDarrpTime {
    time?: pulumi.Input<string>;
}

export interface WirelessControllerVapGroupVap {
    name?: pulumi.Input<string>;
}

export interface WirelessControllerVapMacFilterList {
    id?: pulumi.Input<number>;
    mac?: pulumi.Input<string>;
    macFilterPolicy?: pulumi.Input<string>;
}

export interface WirelessControllerVapMpskKey {
    comment?: pulumi.Input<string>;
    concurrentClients?: pulumi.Input<string>;
    keyName?: pulumi.Input<string>;
    mpskSchedules?: pulumi.Input<pulumi.Input<inputs.WirelessControllerVapMpskKeyMpskSchedule>[]>;
    passphrase?: pulumi.Input<string>;
}

export interface WirelessControllerVapMpskKeyMpskSchedule {
    name?: pulumi.Input<string>;
}

export interface WirelessControllerVapPortalMessageOverrides {
    authDisclaimerPage?: pulumi.Input<string>;
    authLoginFailedPage?: pulumi.Input<string>;
    authLoginPage?: pulumi.Input<string>;
    authRejectPage?: pulumi.Input<string>;
}

export interface WirelessControllerVapRadiusMacAuthUsergroup {
    name?: pulumi.Input<string>;
}

export interface WirelessControllerVapSelectedUsergroup {
    name?: pulumi.Input<string>;
}

export interface WirelessControllerVapUsergroup {
    name?: pulumi.Input<string>;
}

export interface WirelessControllerVapVlanName {
    name?: pulumi.Input<string>;
    vlanId?: pulumi.Input<number>;
}

export interface WirelessControllerVapVlanPool {
    id?: pulumi.Input<number>;
    wtpGroup?: pulumi.Input<string>;
}

export interface WirelessControllerWidsProfileApBgscanDisableSchedule {
    name?: pulumi.Input<string>;
}

export interface WirelessControllerWtpGroupWtp {
    wtpId?: pulumi.Input<string>;
}

export interface WirelessControllerWtpLan {
    port1Mode?: pulumi.Input<string>;
    port1Ssid?: pulumi.Input<string>;
    port2Mode?: pulumi.Input<string>;
    port2Ssid?: pulumi.Input<string>;
    port3Mode?: pulumi.Input<string>;
    port3Ssid?: pulumi.Input<string>;
    port4Mode?: pulumi.Input<string>;
    port4Ssid?: pulumi.Input<string>;
    port5Mode?: pulumi.Input<string>;
    port5Ssid?: pulumi.Input<string>;
    port6Mode?: pulumi.Input<string>;
    port6Ssid?: pulumi.Input<string>;
    port7Mode?: pulumi.Input<string>;
    port7Ssid?: pulumi.Input<string>;
    port8Mode?: pulumi.Input<string>;
    port8Ssid?: pulumi.Input<string>;
    portEslMode?: pulumi.Input<string>;
    portEslSsid?: pulumi.Input<string>;
    portMode?: pulumi.Input<string>;
    portSsid?: pulumi.Input<string>;
}

export interface WirelessControllerWtpProfileDenyMacList {
    id?: pulumi.Input<number>;
    mac?: pulumi.Input<string>;
}

export interface WirelessControllerWtpProfileEslSesDongle {
    apcAddrType?: pulumi.Input<string>;
    apcFqdn?: pulumi.Input<string>;
    apcIp?: pulumi.Input<string>;
    apcPort?: pulumi.Input<number>;
    coexLevel?: pulumi.Input<string>;
    complianceLevel?: pulumi.Input<string>;
    eslChannel?: pulumi.Input<string>;
    outputPower?: pulumi.Input<string>;
    scdEnable?: pulumi.Input<string>;
    tlsCertVerification?: pulumi.Input<string>;
    tlsFqdnVerification?: pulumi.Input<string>;
}

export interface WirelessControllerWtpProfileLan {
    port1Mode?: pulumi.Input<string>;
    port1Ssid?: pulumi.Input<string>;
    port2Mode?: pulumi.Input<string>;
    port2Ssid?: pulumi.Input<string>;
    port3Mode?: pulumi.Input<string>;
    port3Ssid?: pulumi.Input<string>;
    port4Mode?: pulumi.Input<string>;
    port4Ssid?: pulumi.Input<string>;
    port5Mode?: pulumi.Input<string>;
    port5Ssid?: pulumi.Input<string>;
    port6Mode?: pulumi.Input<string>;
    port6Ssid?: pulumi.Input<string>;
    port7Mode?: pulumi.Input<string>;
    port7Ssid?: pulumi.Input<string>;
    port8Mode?: pulumi.Input<string>;
    port8Ssid?: pulumi.Input<string>;
    portEslMode?: pulumi.Input<string>;
    portEslSsid?: pulumi.Input<string>;
    portMode?: pulumi.Input<string>;
    portSsid?: pulumi.Input<string>;
}

export interface WirelessControllerWtpProfileLbs {
    aeroscout?: pulumi.Input<string>;
    aeroscoutApMac?: pulumi.Input<string>;
    aeroscoutMmuReport?: pulumi.Input<string>;
    aeroscoutMu?: pulumi.Input<string>;
    aeroscoutMuFactor?: pulumi.Input<number>;
    aeroscoutMuTimeout?: pulumi.Input<number>;
    aeroscoutServerIp?: pulumi.Input<string>;
    aeroscoutServerPort?: pulumi.Input<number>;
    ekahauBlinkMode?: pulumi.Input<string>;
    ekahauTag?: pulumi.Input<string>;
    ercServerIp?: pulumi.Input<string>;
    ercServerPort?: pulumi.Input<number>;
    fortipresence?: pulumi.Input<string>;
    fortipresenceBle?: pulumi.Input<string>;
    fortipresenceFrequency?: pulumi.Input<number>;
    fortipresencePort?: pulumi.Input<number>;
    fortipresenceProject?: pulumi.Input<string>;
    fortipresenceRogue?: pulumi.Input<string>;
    fortipresenceSecret?: pulumi.Input<string>;
    fortipresenceServer?: pulumi.Input<string>;
    fortipresenceServerAddrType?: pulumi.Input<string>;
    fortipresenceServerFqdn?: pulumi.Input<string>;
    fortipresenceUnassoc?: pulumi.Input<string>;
    stationLocate?: pulumi.Input<string>;
}

export interface WirelessControllerWtpProfileLedSchedule {
    name?: pulumi.Input<string>;
}

export interface WirelessControllerWtpProfilePlatform {
    ddscan?: pulumi.Input<string>;
    mode?: pulumi.Input<string>;
    type?: pulumi.Input<string>;
}

export interface WirelessControllerWtpProfileRadio1 {
    airtimeFairness?: pulumi.Input<string>;
    amsdu?: pulumi.Input<string>;
    apHandoff?: pulumi.Input<string>;
    apSnifferAddr?: pulumi.Input<string>;
    apSnifferBufsize?: pulumi.Input<number>;
    apSnifferChan?: pulumi.Input<number>;
    apSnifferCtl?: pulumi.Input<string>;
    apSnifferData?: pulumi.Input<string>;
    apSnifferMgmtBeacon?: pulumi.Input<string>;
    apSnifferMgmtOther?: pulumi.Input<string>;
    apSnifferMgmtProbe?: pulumi.Input<string>;
    arrpProfile?: pulumi.Input<string>;
    autoPowerHigh?: pulumi.Input<number>;
    autoPowerLevel?: pulumi.Input<string>;
    autoPowerLow?: pulumi.Input<number>;
    autoPowerTarget?: pulumi.Input<string>;
    band?: pulumi.Input<string>;
    band5gType?: pulumi.Input<string>;
    bandwidthAdmissionControl?: pulumi.Input<string>;
    bandwidthCapacity?: pulumi.Input<number>;
    beaconInterval?: pulumi.Input<number>;
    bssColor?: pulumi.Input<number>;
    bssColorMode?: pulumi.Input<string>;
    callAdmissionControl?: pulumi.Input<string>;
    callCapacity?: pulumi.Input<number>;
    channelBonding?: pulumi.Input<string>;
    channelUtilization?: pulumi.Input<string>;
    channels?: pulumi.Input<pulumi.Input<inputs.WirelessControllerWtpProfileRadio1Channel>[]>;
    coexistence?: pulumi.Input<string>;
    darrp?: pulumi.Input<string>;
    drma?: pulumi.Input<string>;
    drmaSensitivity?: pulumi.Input<string>;
    dtim?: pulumi.Input<number>;
    fragThreshold?: pulumi.Input<number>;
    frequencyHandoff?: pulumi.Input<string>;
    iperfProtocol?: pulumi.Input<string>;
    iperfServerPort?: pulumi.Input<number>;
    maxClients?: pulumi.Input<number>;
    maxDistance?: pulumi.Input<number>;
    mode?: pulumi.Input<string>;
    n80211d?: pulumi.Input<string>;
    powerLevel?: pulumi.Input<number>;
    powerMode?: pulumi.Input<string>;
    powerValue?: pulumi.Input<number>;
    powersaveOptimize?: pulumi.Input<string>;
    protectionMode?: pulumi.Input<string>;
    radioId?: pulumi.Input<number>;
    rtsThreshold?: pulumi.Input<number>;
    samBssid?: pulumi.Input<string>;
    samCaptivePortal?: pulumi.Input<string>;
    samCwpFailureString?: pulumi.Input<string>;
    samCwpMatchString?: pulumi.Input<string>;
    samCwpPassword?: pulumi.Input<string>;
    samCwpSuccessString?: pulumi.Input<string>;
    samCwpTestUrl?: pulumi.Input<string>;
    samCwpUsername?: pulumi.Input<string>;
    samPassword?: pulumi.Input<string>;
    samReportIntv?: pulumi.Input<number>;
    samSecurityType?: pulumi.Input<string>;
    samServerFqdn?: pulumi.Input<string>;
    samServerIp?: pulumi.Input<string>;
    samServerType?: pulumi.Input<string>;
    samSsid?: pulumi.Input<string>;
    samTest?: pulumi.Input<string>;
    samUsername?: pulumi.Input<string>;
    shortGuardInterval?: pulumi.Input<string>;
    spectrumAnalysis?: pulumi.Input<string>;
    transmitOptimize?: pulumi.Input<string>;
    vapAll?: pulumi.Input<string>;
    vaps?: pulumi.Input<pulumi.Input<inputs.WirelessControllerWtpProfileRadio1Vap>[]>;
    widsProfile?: pulumi.Input<string>;
    zeroWaitDfs?: pulumi.Input<string>;
}

export interface WirelessControllerWtpProfileRadio1Channel {
    chan?: pulumi.Input<string>;
}

export interface WirelessControllerWtpProfileRadio1Vap {
    name?: pulumi.Input<string>;
}

export interface WirelessControllerWtpProfileRadio2 {
    airtimeFairness?: pulumi.Input<string>;
    amsdu?: pulumi.Input<string>;
    apHandoff?: pulumi.Input<string>;
    apSnifferAddr?: pulumi.Input<string>;
    apSnifferBufsize?: pulumi.Input<number>;
    apSnifferChan?: pulumi.Input<number>;
    apSnifferCtl?: pulumi.Input<string>;
    apSnifferData?: pulumi.Input<string>;
    apSnifferMgmtBeacon?: pulumi.Input<string>;
    apSnifferMgmtOther?: pulumi.Input<string>;
    apSnifferMgmtProbe?: pulumi.Input<string>;
    arrpProfile?: pulumi.Input<string>;
    autoPowerHigh?: pulumi.Input<number>;
    autoPowerLevel?: pulumi.Input<string>;
    autoPowerLow?: pulumi.Input<number>;
    autoPowerTarget?: pulumi.Input<string>;
    band?: pulumi.Input<string>;
    band5gType?: pulumi.Input<string>;
    bandwidthAdmissionControl?: pulumi.Input<string>;
    bandwidthCapacity?: pulumi.Input<number>;
    beaconInterval?: pulumi.Input<number>;
    bssColor?: pulumi.Input<number>;
    bssColorMode?: pulumi.Input<string>;
    callAdmissionControl?: pulumi.Input<string>;
    callCapacity?: pulumi.Input<number>;
    channelBonding?: pulumi.Input<string>;
    channelUtilization?: pulumi.Input<string>;
    channels?: pulumi.Input<pulumi.Input<inputs.WirelessControllerWtpProfileRadio2Channel>[]>;
    coexistence?: pulumi.Input<string>;
    darrp?: pulumi.Input<string>;
    drma?: pulumi.Input<string>;
    drmaSensitivity?: pulumi.Input<string>;
    dtim?: pulumi.Input<number>;
    fragThreshold?: pulumi.Input<number>;
    frequencyHandoff?: pulumi.Input<string>;
    iperfProtocol?: pulumi.Input<string>;
    iperfServerPort?: pulumi.Input<number>;
    maxClients?: pulumi.Input<number>;
    maxDistance?: pulumi.Input<number>;
    mode?: pulumi.Input<string>;
    n80211d?: pulumi.Input<string>;
    powerLevel?: pulumi.Input<number>;
    powerMode?: pulumi.Input<string>;
    powerValue?: pulumi.Input<number>;
    powersaveOptimize?: pulumi.Input<string>;
    protectionMode?: pulumi.Input<string>;
    radioId?: pulumi.Input<number>;
    rtsThreshold?: pulumi.Input<number>;
    samBssid?: pulumi.Input<string>;
    samCaptivePortal?: pulumi.Input<string>;
    samCwpFailureString?: pulumi.Input<string>;
    samCwpMatchString?: pulumi.Input<string>;
    samCwpPassword?: pulumi.Input<string>;
    samCwpSuccessString?: pulumi.Input<string>;
    samCwpTestUrl?: pulumi.Input<string>;
    samCwpUsername?: pulumi.Input<string>;
    samPassword?: pulumi.Input<string>;
    samReportIntv?: pulumi.Input<number>;
    samSecurityType?: pulumi.Input<string>;
    samServerFqdn?: pulumi.Input<string>;
    samServerIp?: pulumi.Input<string>;
    samServerType?: pulumi.Input<string>;
    samSsid?: pulumi.Input<string>;
    samTest?: pulumi.Input<string>;
    samUsername?: pulumi.Input<string>;
    shortGuardInterval?: pulumi.Input<string>;
    spectrumAnalysis?: pulumi.Input<string>;
    transmitOptimize?: pulumi.Input<string>;
    vapAll?: pulumi.Input<string>;
    vaps?: pulumi.Input<pulumi.Input<inputs.WirelessControllerWtpProfileRadio2Vap>[]>;
    widsProfile?: pulumi.Input<string>;
    zeroWaitDfs?: pulumi.Input<string>;
}

export interface WirelessControllerWtpProfileRadio2Channel {
    chan?: pulumi.Input<string>;
}

export interface WirelessControllerWtpProfileRadio2Vap {
    name?: pulumi.Input<string>;
}

export interface WirelessControllerWtpProfileRadio3 {
    airtimeFairness?: pulumi.Input<string>;
    amsdu?: pulumi.Input<string>;
    apHandoff?: pulumi.Input<string>;
    apSnifferAddr?: pulumi.Input<string>;
    apSnifferBufsize?: pulumi.Input<number>;
    apSnifferChan?: pulumi.Input<number>;
    apSnifferCtl?: pulumi.Input<string>;
    apSnifferData?: pulumi.Input<string>;
    apSnifferMgmtBeacon?: pulumi.Input<string>;
    apSnifferMgmtOther?: pulumi.Input<string>;
    apSnifferMgmtProbe?: pulumi.Input<string>;
    arrpProfile?: pulumi.Input<string>;
    autoPowerHigh?: pulumi.Input<number>;
    autoPowerLevel?: pulumi.Input<string>;
    autoPowerLow?: pulumi.Input<number>;
    autoPowerTarget?: pulumi.Input<string>;
    band?: pulumi.Input<string>;
    band5gType?: pulumi.Input<string>;
    bandwidthAdmissionControl?: pulumi.Input<string>;
    bandwidthCapacity?: pulumi.Input<number>;
    beaconInterval?: pulumi.Input<number>;
    bssColor?: pulumi.Input<number>;
    bssColorMode?: pulumi.Input<string>;
    callAdmissionControl?: pulumi.Input<string>;
    callCapacity?: pulumi.Input<number>;
    channelBonding?: pulumi.Input<string>;
    channelUtilization?: pulumi.Input<string>;
    channels?: pulumi.Input<pulumi.Input<inputs.WirelessControllerWtpProfileRadio3Channel>[]>;
    coexistence?: pulumi.Input<string>;
    darrp?: pulumi.Input<string>;
    drma?: pulumi.Input<string>;
    drmaSensitivity?: pulumi.Input<string>;
    dtim?: pulumi.Input<number>;
    fragThreshold?: pulumi.Input<number>;
    frequencyHandoff?: pulumi.Input<string>;
    iperfProtocol?: pulumi.Input<string>;
    iperfServerPort?: pulumi.Input<number>;
    maxClients?: pulumi.Input<number>;
    maxDistance?: pulumi.Input<number>;
    mode?: pulumi.Input<string>;
    n80211d?: pulumi.Input<string>;
    powerLevel?: pulumi.Input<number>;
    powerMode?: pulumi.Input<string>;
    powerValue?: pulumi.Input<number>;
    powersaveOptimize?: pulumi.Input<string>;
    protectionMode?: pulumi.Input<string>;
    rtsThreshold?: pulumi.Input<number>;
    samBssid?: pulumi.Input<string>;
    samCaptivePortal?: pulumi.Input<string>;
    samCwpFailureString?: pulumi.Input<string>;
    samCwpMatchString?: pulumi.Input<string>;
    samCwpPassword?: pulumi.Input<string>;
    samCwpSuccessString?: pulumi.Input<string>;
    samCwpTestUrl?: pulumi.Input<string>;
    samCwpUsername?: pulumi.Input<string>;
    samPassword?: pulumi.Input<string>;
    samReportIntv?: pulumi.Input<number>;
    samSecurityType?: pulumi.Input<string>;
    samServerFqdn?: pulumi.Input<string>;
    samServerIp?: pulumi.Input<string>;
    samServerType?: pulumi.Input<string>;
    samSsid?: pulumi.Input<string>;
    samTest?: pulumi.Input<string>;
    samUsername?: pulumi.Input<string>;
    shortGuardInterval?: pulumi.Input<string>;
    spectrumAnalysis?: pulumi.Input<string>;
    transmitOptimize?: pulumi.Input<string>;
    vapAll?: pulumi.Input<string>;
    vaps?: pulumi.Input<pulumi.Input<inputs.WirelessControllerWtpProfileRadio3Vap>[]>;
    widsProfile?: pulumi.Input<string>;
    zeroWaitDfs?: pulumi.Input<string>;
}

export interface WirelessControllerWtpProfileRadio3Channel {
    chan?: pulumi.Input<string>;
}

export interface WirelessControllerWtpProfileRadio3Vap {
    name?: pulumi.Input<string>;
}

export interface WirelessControllerWtpProfileRadio4 {
    airtimeFairness?: pulumi.Input<string>;
    amsdu?: pulumi.Input<string>;
    apHandoff?: pulumi.Input<string>;
    apSnifferAddr?: pulumi.Input<string>;
    apSnifferBufsize?: pulumi.Input<number>;
    apSnifferChan?: pulumi.Input<number>;
    apSnifferCtl?: pulumi.Input<string>;
    apSnifferData?: pulumi.Input<string>;
    apSnifferMgmtBeacon?: pulumi.Input<string>;
    apSnifferMgmtOther?: pulumi.Input<string>;
    apSnifferMgmtProbe?: pulumi.Input<string>;
    arrpProfile?: pulumi.Input<string>;
    autoPowerHigh?: pulumi.Input<number>;
    autoPowerLevel?: pulumi.Input<string>;
    autoPowerLow?: pulumi.Input<number>;
    autoPowerTarget?: pulumi.Input<string>;
    band?: pulumi.Input<string>;
    band5gType?: pulumi.Input<string>;
    bandwidthAdmissionControl?: pulumi.Input<string>;
    bandwidthCapacity?: pulumi.Input<number>;
    beaconInterval?: pulumi.Input<number>;
    bssColor?: pulumi.Input<number>;
    bssColorMode?: pulumi.Input<string>;
    callAdmissionControl?: pulumi.Input<string>;
    callCapacity?: pulumi.Input<number>;
    channelBonding?: pulumi.Input<string>;
    channelUtilization?: pulumi.Input<string>;
    channels?: pulumi.Input<pulumi.Input<inputs.WirelessControllerWtpProfileRadio4Channel>[]>;
    coexistence?: pulumi.Input<string>;
    darrp?: pulumi.Input<string>;
    drma?: pulumi.Input<string>;
    drmaSensitivity?: pulumi.Input<string>;
    dtim?: pulumi.Input<number>;
    fragThreshold?: pulumi.Input<number>;
    frequencyHandoff?: pulumi.Input<string>;
    iperfProtocol?: pulumi.Input<string>;
    iperfServerPort?: pulumi.Input<number>;
    maxClients?: pulumi.Input<number>;
    maxDistance?: pulumi.Input<number>;
    mode?: pulumi.Input<string>;
    n80211d?: pulumi.Input<string>;
    powerLevel?: pulumi.Input<number>;
    powerMode?: pulumi.Input<string>;
    powerValue?: pulumi.Input<number>;
    powersaveOptimize?: pulumi.Input<string>;
    protectionMode?: pulumi.Input<string>;
    rtsThreshold?: pulumi.Input<number>;
    samBssid?: pulumi.Input<string>;
    samCaptivePortal?: pulumi.Input<string>;
    samCwpFailureString?: pulumi.Input<string>;
    samCwpMatchString?: pulumi.Input<string>;
    samCwpPassword?: pulumi.Input<string>;
    samCwpSuccessString?: pulumi.Input<string>;
    samCwpTestUrl?: pulumi.Input<string>;
    samCwpUsername?: pulumi.Input<string>;
    samPassword?: pulumi.Input<string>;
    samReportIntv?: pulumi.Input<number>;
    samSecurityType?: pulumi.Input<string>;
    samServerFqdn?: pulumi.Input<string>;
    samServerIp?: pulumi.Input<string>;
    samServerType?: pulumi.Input<string>;
    samSsid?: pulumi.Input<string>;
    samTest?: pulumi.Input<string>;
    samUsername?: pulumi.Input<string>;
    shortGuardInterval?: pulumi.Input<string>;
    spectrumAnalysis?: pulumi.Input<string>;
    transmitOptimize?: pulumi.Input<string>;
    vapAll?: pulumi.Input<string>;
    vaps?: pulumi.Input<pulumi.Input<inputs.WirelessControllerWtpProfileRadio4Vap>[]>;
    widsProfile?: pulumi.Input<string>;
    zeroWaitDfs?: pulumi.Input<string>;
}

export interface WirelessControllerWtpProfileRadio4Channel {
    chan?: pulumi.Input<string>;
}

export interface WirelessControllerWtpProfileRadio4Vap {
    name?: pulumi.Input<string>;
}

export interface WirelessControllerWtpProfileSplitTunnelingAcl {
    destIp?: pulumi.Input<string>;
    id?: pulumi.Input<number>;
}

export interface WirelessControllerWtpRadio1 {
    autoPowerHigh?: pulumi.Input<number>;
    autoPowerLevel?: pulumi.Input<string>;
    autoPowerLow?: pulumi.Input<number>;
    autoPowerTarget?: pulumi.Input<string>;
    band?: pulumi.Input<string>;
    channels?: pulumi.Input<pulumi.Input<inputs.WirelessControllerWtpRadio1Channel>[]>;
    drmaManualMode?: pulumi.Input<string>;
    overrideAnalysis?: pulumi.Input<string>;
    overrideBand?: pulumi.Input<string>;
    overrideChannel?: pulumi.Input<string>;
    overrideTxpower?: pulumi.Input<string>;
    overrideVaps?: pulumi.Input<string>;
    powerLevel?: pulumi.Input<number>;
    powerMode?: pulumi.Input<string>;
    powerValue?: pulumi.Input<number>;
    radioId?: pulumi.Input<number>;
    spectrumAnalysis?: pulumi.Input<string>;
    vapAll?: pulumi.Input<string>;
    vaps?: pulumi.Input<pulumi.Input<inputs.WirelessControllerWtpRadio1Vap>[]>;
}

export interface WirelessControllerWtpRadio1Channel {
    chan?: pulumi.Input<string>;
}

export interface WirelessControllerWtpRadio1Vap {
    name?: pulumi.Input<string>;
}

export interface WirelessControllerWtpRadio2 {
    autoPowerHigh?: pulumi.Input<number>;
    autoPowerLevel?: pulumi.Input<string>;
    autoPowerLow?: pulumi.Input<number>;
    autoPowerTarget?: pulumi.Input<string>;
    band?: pulumi.Input<string>;
    channels?: pulumi.Input<pulumi.Input<inputs.WirelessControllerWtpRadio2Channel>[]>;
    drmaManualMode?: pulumi.Input<string>;
    overrideAnalysis?: pulumi.Input<string>;
    overrideBand?: pulumi.Input<string>;
    overrideChannel?: pulumi.Input<string>;
    overrideTxpower?: pulumi.Input<string>;
    overrideVaps?: pulumi.Input<string>;
    powerLevel?: pulumi.Input<number>;
    powerMode?: pulumi.Input<string>;
    powerValue?: pulumi.Input<number>;
    radioId?: pulumi.Input<number>;
    spectrumAnalysis?: pulumi.Input<string>;
    vapAll?: pulumi.Input<string>;
    vaps?: pulumi.Input<pulumi.Input<inputs.WirelessControllerWtpRadio2Vap>[]>;
}

export interface WirelessControllerWtpRadio2Channel {
    chan?: pulumi.Input<string>;
}

export interface WirelessControllerWtpRadio2Vap {
    name?: pulumi.Input<string>;
}

export interface WirelessControllerWtpRadio3 {
    autoPowerHigh?: pulumi.Input<number>;
    autoPowerLevel?: pulumi.Input<string>;
    autoPowerLow?: pulumi.Input<number>;
    autoPowerTarget?: pulumi.Input<string>;
    band?: pulumi.Input<string>;
    channels?: pulumi.Input<pulumi.Input<inputs.WirelessControllerWtpRadio3Channel>[]>;
    drmaManualMode?: pulumi.Input<string>;
    overrideAnalysis?: pulumi.Input<string>;
    overrideBand?: pulumi.Input<string>;
    overrideChannel?: pulumi.Input<string>;
    overrideTxpower?: pulumi.Input<string>;
    overrideVaps?: pulumi.Input<string>;
    powerLevel?: pulumi.Input<number>;
    powerMode?: pulumi.Input<string>;
    powerValue?: pulumi.Input<number>;
    spectrumAnalysis?: pulumi.Input<string>;
    vapAll?: pulumi.Input<string>;
    vaps?: pulumi.Input<pulumi.Input<inputs.WirelessControllerWtpRadio3Vap>[]>;
}

export interface WirelessControllerWtpRadio3Channel {
    chan?: pulumi.Input<string>;
}

export interface WirelessControllerWtpRadio3Vap {
    name?: pulumi.Input<string>;
}

export interface WirelessControllerWtpRadio4 {
    autoPowerHigh?: pulumi.Input<number>;
    autoPowerLevel?: pulumi.Input<string>;
    autoPowerLow?: pulumi.Input<number>;
    autoPowerTarget?: pulumi.Input<string>;
    band?: pulumi.Input<string>;
    channels?: pulumi.Input<pulumi.Input<inputs.WirelessControllerWtpRadio4Channel>[]>;
    drmaManualMode?: pulumi.Input<string>;
    overrideAnalysis?: pulumi.Input<string>;
    overrideBand?: pulumi.Input<string>;
    overrideChannel?: pulumi.Input<string>;
    overrideTxpower?: pulumi.Input<string>;
    overrideVaps?: pulumi.Input<string>;
    powerLevel?: pulumi.Input<number>;
    powerMode?: pulumi.Input<string>;
    powerValue?: pulumi.Input<number>;
    spectrumAnalysis?: pulumi.Input<string>;
    vapAll?: pulumi.Input<string>;
    vaps?: pulumi.Input<pulumi.Input<inputs.WirelessControllerWtpRadio4Vap>[]>;
}

export interface WirelessControllerWtpRadio4Channel {
    chan?: pulumi.Input<string>;
}

export interface WirelessControllerWtpRadio4Vap {
    name?: pulumi.Input<string>;
}

export interface WirelessControllerWtpSplitTunnelingAcl {
    destIp?: pulumi.Input<string>;
    id?: pulumi.Input<number>;
}
