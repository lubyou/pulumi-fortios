// *** WARNING: this file was generated by the Pulumi Terraform Bridge (tfgen) Tool. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

import * as pulumi from "@pulumi/pulumi";
import * as utilities from "./utilities";

// Export members:
export { AlertemailSettingArgs, AlertemailSettingState } from "./alertemailSetting";
export type AlertemailSetting = import("./alertemailSetting").AlertemailSetting;
export const AlertemailSetting: typeof import("./alertemailSetting").AlertemailSetting = null as any;
utilities.lazyLoad(exports, ["AlertemailSetting"], () => require("./alertemailSetting"));

export { AntivirusHeuristicArgs, AntivirusHeuristicState } from "./antivirusHeuristic";
export type AntivirusHeuristic = import("./antivirusHeuristic").AntivirusHeuristic;
export const AntivirusHeuristic: typeof import("./antivirusHeuristic").AntivirusHeuristic = null as any;
utilities.lazyLoad(exports, ["AntivirusHeuristic"], () => require("./antivirusHeuristic"));

export { AntivirusProfileArgs, AntivirusProfileState } from "./antivirusProfile";
export type AntivirusProfile = import("./antivirusProfile").AntivirusProfile;
export const AntivirusProfile: typeof import("./antivirusProfile").AntivirusProfile = null as any;
utilities.lazyLoad(exports, ["AntivirusProfile"], () => require("./antivirusProfile"));

export { AntivirusQuarantineArgs, AntivirusQuarantineState } from "./antivirusQuarantine";
export type AntivirusQuarantine = import("./antivirusQuarantine").AntivirusQuarantine;
export const AntivirusQuarantine: typeof import("./antivirusQuarantine").AntivirusQuarantine = null as any;
utilities.lazyLoad(exports, ["AntivirusQuarantine"], () => require("./antivirusQuarantine"));

export { AntivirusSettingsArgs, AntivirusSettingsState } from "./antivirusSettings";
export type AntivirusSettings = import("./antivirusSettings").AntivirusSettings;
export const AntivirusSettings: typeof import("./antivirusSettings").AntivirusSettings = null as any;
utilities.lazyLoad(exports, ["AntivirusSettings"], () => require("./antivirusSettings"));

export { ApplicationCustomArgs, ApplicationCustomState } from "./applicationCustom";
export type ApplicationCustom = import("./applicationCustom").ApplicationCustom;
export const ApplicationCustom: typeof import("./applicationCustom").ApplicationCustom = null as any;
utilities.lazyLoad(exports, ["ApplicationCustom"], () => require("./applicationCustom"));

export { ApplicationGroupArgs, ApplicationGroupState } from "./applicationGroup";
export type ApplicationGroup = import("./applicationGroup").ApplicationGroup;
export const ApplicationGroup: typeof import("./applicationGroup").ApplicationGroup = null as any;
utilities.lazyLoad(exports, ["ApplicationGroup"], () => require("./applicationGroup"));

export { ApplicationListArgs, ApplicationListState } from "./applicationList";
export type ApplicationList = import("./applicationList").ApplicationList;
export const ApplicationList: typeof import("./applicationList").ApplicationList = null as any;
utilities.lazyLoad(exports, ["ApplicationList"], () => require("./applicationList"));

export { ApplicationNameArgs, ApplicationNameState } from "./applicationName";
export type ApplicationName = import("./applicationName").ApplicationName;
export const ApplicationName: typeof import("./applicationName").ApplicationName = null as any;
utilities.lazyLoad(exports, ["ApplicationName"], () => require("./applicationName"));

export { ApplicationRuleSettingsArgs, ApplicationRuleSettingsState } from "./applicationRuleSettings";
export type ApplicationRuleSettings = import("./applicationRuleSettings").ApplicationRuleSettings;
export const ApplicationRuleSettings: typeof import("./applicationRuleSettings").ApplicationRuleSettings = null as any;
utilities.lazyLoad(exports, ["ApplicationRuleSettings"], () => require("./applicationRuleSettings"));

export { AuthenticationRuleArgs, AuthenticationRuleState } from "./authenticationRule";
export type AuthenticationRule = import("./authenticationRule").AuthenticationRule;
export const AuthenticationRule: typeof import("./authenticationRule").AuthenticationRule = null as any;
utilities.lazyLoad(exports, ["AuthenticationRule"], () => require("./authenticationRule"));

export { AuthenticationSchemeArgs, AuthenticationSchemeState } from "./authenticationScheme";
export type AuthenticationScheme = import("./authenticationScheme").AuthenticationScheme;
export const AuthenticationScheme: typeof import("./authenticationScheme").AuthenticationScheme = null as any;
utilities.lazyLoad(exports, ["AuthenticationScheme"], () => require("./authenticationScheme"));

export { AuthenticationSettingArgs, AuthenticationSettingState } from "./authenticationSetting";
export type AuthenticationSetting = import("./authenticationSetting").AuthenticationSetting;
export const AuthenticationSetting: typeof import("./authenticationSetting").AuthenticationSetting = null as any;
utilities.lazyLoad(exports, ["AuthenticationSetting"], () => require("./authenticationSetting"));

export { AutomationSettingArgs, AutomationSettingState } from "./automationSetting";
export type AutomationSetting = import("./automationSetting").AutomationSetting;
export const AutomationSetting: typeof import("./automationSetting").AutomationSetting = null as any;
utilities.lazyLoad(exports, ["AutomationSetting"], () => require("./automationSetting"));

export { CertificateCaArgs, CertificateCaState } from "./certificateCa";
export type CertificateCa = import("./certificateCa").CertificateCa;
export const CertificateCa: typeof import("./certificateCa").CertificateCa = null as any;
utilities.lazyLoad(exports, ["CertificateCa"], () => require("./certificateCa"));

export { CertificateCrlArgs, CertificateCrlState } from "./certificateCrl";
export type CertificateCrl = import("./certificateCrl").CertificateCrl;
export const CertificateCrl: typeof import("./certificateCrl").CertificateCrl = null as any;
utilities.lazyLoad(exports, ["CertificateCrl"], () => require("./certificateCrl"));

export { CertificateLocalArgs, CertificateLocalState } from "./certificateLocal";
export type CertificateLocal = import("./certificateLocal").CertificateLocal;
export const CertificateLocal: typeof import("./certificateLocal").CertificateLocal = null as any;
utilities.lazyLoad(exports, ["CertificateLocal"], () => require("./certificateLocal"));

export { CertificateRemoteArgs, CertificateRemoteState } from "./certificateRemote";
export type CertificateRemote = import("./certificateRemote").CertificateRemote;
export const CertificateRemote: typeof import("./certificateRemote").CertificateRemote = null as any;
utilities.lazyLoad(exports, ["CertificateRemote"], () => require("./certificateRemote"));

export { CifsDomainControllerArgs, CifsDomainControllerState } from "./cifsDomainController";
export type CifsDomainController = import("./cifsDomainController").CifsDomainController;
export const CifsDomainController: typeof import("./cifsDomainController").CifsDomainController = null as any;
utilities.lazyLoad(exports, ["CifsDomainController"], () => require("./cifsDomainController"));

export { CifsProfileArgs, CifsProfileState } from "./cifsProfile";
export type CifsProfile = import("./cifsProfile").CifsProfile;
export const CifsProfile: typeof import("./cifsProfile").CifsProfile = null as any;
utilities.lazyLoad(exports, ["CifsProfile"], () => require("./cifsProfile"));

export { CredentialStoreDomainControllerArgs, CredentialStoreDomainControllerState } from "./credentialStoreDomainController";
export type CredentialStoreDomainController = import("./credentialStoreDomainController").CredentialStoreDomainController;
export const CredentialStoreDomainController: typeof import("./credentialStoreDomainController").CredentialStoreDomainController = null as any;
utilities.lazyLoad(exports, ["CredentialStoreDomainController"], () => require("./credentialStoreDomainController"));

export { DlpDataTypeArgs, DlpDataTypeState } from "./dlpDataType";
export type DlpDataType = import("./dlpDataType").DlpDataType;
export const DlpDataType: typeof import("./dlpDataType").DlpDataType = null as any;
utilities.lazyLoad(exports, ["DlpDataType"], () => require("./dlpDataType"));

export { DlpDictionaryArgs, DlpDictionaryState } from "./dlpDictionary";
export type DlpDictionary = import("./dlpDictionary").DlpDictionary;
export const DlpDictionary: typeof import("./dlpDictionary").DlpDictionary = null as any;
utilities.lazyLoad(exports, ["DlpDictionary"], () => require("./dlpDictionary"));

export { DlpFilepatternArgs, DlpFilepatternState } from "./dlpFilepattern";
export type DlpFilepattern = import("./dlpFilepattern").DlpFilepattern;
export const DlpFilepattern: typeof import("./dlpFilepattern").DlpFilepattern = null as any;
utilities.lazyLoad(exports, ["DlpFilepattern"], () => require("./dlpFilepattern"));

export { DlpFpDocSourceArgs, DlpFpDocSourceState } from "./dlpFpDocSource";
export type DlpFpDocSource = import("./dlpFpDocSource").DlpFpDocSource;
export const DlpFpDocSource: typeof import("./dlpFpDocSource").DlpFpDocSource = null as any;
utilities.lazyLoad(exports, ["DlpFpDocSource"], () => require("./dlpFpDocSource"));

export { DlpFpSensitivityArgs, DlpFpSensitivityState } from "./dlpFpSensitivity";
export type DlpFpSensitivity = import("./dlpFpSensitivity").DlpFpSensitivity;
export const DlpFpSensitivity: typeof import("./dlpFpSensitivity").DlpFpSensitivity = null as any;
utilities.lazyLoad(exports, ["DlpFpSensitivity"], () => require("./dlpFpSensitivity"));

export { DlpProfileArgs, DlpProfileState } from "./dlpProfile";
export type DlpProfile = import("./dlpProfile").DlpProfile;
export const DlpProfile: typeof import("./dlpProfile").DlpProfile = null as any;
utilities.lazyLoad(exports, ["DlpProfile"], () => require("./dlpProfile"));

export { DlpSensitivityArgs, DlpSensitivityState } from "./dlpSensitivity";
export type DlpSensitivity = import("./dlpSensitivity").DlpSensitivity;
export const DlpSensitivity: typeof import("./dlpSensitivity").DlpSensitivity = null as any;
utilities.lazyLoad(exports, ["DlpSensitivity"], () => require("./dlpSensitivity"));

export { DlpSensorArgs, DlpSensorState } from "./dlpSensor";
export type DlpSensor = import("./dlpSensor").DlpSensor;
export const DlpSensor: typeof import("./dlpSensor").DlpSensor = null as any;
utilities.lazyLoad(exports, ["DlpSensor"], () => require("./dlpSensor"));

export { DlpSettingsArgs, DlpSettingsState } from "./dlpSettings";
export type DlpSettings = import("./dlpSettings").DlpSettings;
export const DlpSettings: typeof import("./dlpSettings").DlpSettings = null as any;
utilities.lazyLoad(exports, ["DlpSettings"], () => require("./dlpSettings"));

export { DnsfilterDomainFilterArgs, DnsfilterDomainFilterState } from "./dnsfilterDomainFilter";
export type DnsfilterDomainFilter = import("./dnsfilterDomainFilter").DnsfilterDomainFilter;
export const DnsfilterDomainFilter: typeof import("./dnsfilterDomainFilter").DnsfilterDomainFilter = null as any;
utilities.lazyLoad(exports, ["DnsfilterDomainFilter"], () => require("./dnsfilterDomainFilter"));

export { DnsfilterProfileArgs, DnsfilterProfileState } from "./dnsfilterProfile";
export type DnsfilterProfile = import("./dnsfilterProfile").DnsfilterProfile;
export const DnsfilterProfile: typeof import("./dnsfilterProfile").DnsfilterProfile = null as any;
utilities.lazyLoad(exports, ["DnsfilterProfile"], () => require("./dnsfilterProfile"));

export { DpdkCpusArgs, DpdkCpusState } from "./dpdkCpus";
export type DpdkCpus = import("./dpdkCpus").DpdkCpus;
export const DpdkCpus: typeof import("./dpdkCpus").DpdkCpus = null as any;
utilities.lazyLoad(exports, ["DpdkCpus"], () => require("./dpdkCpus"));

export { DpdkGlobalArgs, DpdkGlobalState } from "./dpdkGlobal";
export type DpdkGlobal = import("./dpdkGlobal").DpdkGlobal;
export const DpdkGlobal: typeof import("./dpdkGlobal").DpdkGlobal = null as any;
utilities.lazyLoad(exports, ["DpdkGlobal"], () => require("./dpdkGlobal"));

export { EmailfilterBlockAllowListArgs, EmailfilterBlockAllowListState } from "./emailfilterBlockAllowList";
export type EmailfilterBlockAllowList = import("./emailfilterBlockAllowList").EmailfilterBlockAllowList;
export const EmailfilterBlockAllowList: typeof import("./emailfilterBlockAllowList").EmailfilterBlockAllowList = null as any;
utilities.lazyLoad(exports, ["EmailfilterBlockAllowList"], () => require("./emailfilterBlockAllowList"));

export { EmailfilterBwlArgs, EmailfilterBwlState } from "./emailfilterBwl";
export type EmailfilterBwl = import("./emailfilterBwl").EmailfilterBwl;
export const EmailfilterBwl: typeof import("./emailfilterBwl").EmailfilterBwl = null as any;
utilities.lazyLoad(exports, ["EmailfilterBwl"], () => require("./emailfilterBwl"));

export { EmailfilterBwordArgs, EmailfilterBwordState } from "./emailfilterBword";
export type EmailfilterBword = import("./emailfilterBword").EmailfilterBword;
export const EmailfilterBword: typeof import("./emailfilterBword").EmailfilterBword = null as any;
utilities.lazyLoad(exports, ["EmailfilterBword"], () => require("./emailfilterBword"));

export { EmailfilterDnsblArgs, EmailfilterDnsblState } from "./emailfilterDnsbl";
export type EmailfilterDnsbl = import("./emailfilterDnsbl").EmailfilterDnsbl;
export const EmailfilterDnsbl: typeof import("./emailfilterDnsbl").EmailfilterDnsbl = null as any;
utilities.lazyLoad(exports, ["EmailfilterDnsbl"], () => require("./emailfilterDnsbl"));

export { EmailfilterFortishieldArgs, EmailfilterFortishieldState } from "./emailfilterFortishield";
export type EmailfilterFortishield = import("./emailfilterFortishield").EmailfilterFortishield;
export const EmailfilterFortishield: typeof import("./emailfilterFortishield").EmailfilterFortishield = null as any;
utilities.lazyLoad(exports, ["EmailfilterFortishield"], () => require("./emailfilterFortishield"));

export { EmailfilterIptrustArgs, EmailfilterIptrustState } from "./emailfilterIptrust";
export type EmailfilterIptrust = import("./emailfilterIptrust").EmailfilterIptrust;
export const EmailfilterIptrust: typeof import("./emailfilterIptrust").EmailfilterIptrust = null as any;
utilities.lazyLoad(exports, ["EmailfilterIptrust"], () => require("./emailfilterIptrust"));

export { EmailfilterMheaderArgs, EmailfilterMheaderState } from "./emailfilterMheader";
export type EmailfilterMheader = import("./emailfilterMheader").EmailfilterMheader;
export const EmailfilterMheader: typeof import("./emailfilterMheader").EmailfilterMheader = null as any;
utilities.lazyLoad(exports, ["EmailfilterMheader"], () => require("./emailfilterMheader"));

export { EmailfilterOptionsArgs, EmailfilterOptionsState } from "./emailfilterOptions";
export type EmailfilterOptions = import("./emailfilterOptions").EmailfilterOptions;
export const EmailfilterOptions: typeof import("./emailfilterOptions").EmailfilterOptions = null as any;
utilities.lazyLoad(exports, ["EmailfilterOptions"], () => require("./emailfilterOptions"));

export { EmailfilterProfileArgs, EmailfilterProfileState } from "./emailfilterProfile";
export type EmailfilterProfile = import("./emailfilterProfile").EmailfilterProfile;
export const EmailfilterProfile: typeof import("./emailfilterProfile").EmailfilterProfile = null as any;
utilities.lazyLoad(exports, ["EmailfilterProfile"], () => require("./emailfilterProfile"));

export { EndpointControlClientArgs, EndpointControlClientState } from "./endpointControlClient";
export type EndpointControlClient = import("./endpointControlClient").EndpointControlClient;
export const EndpointControlClient: typeof import("./endpointControlClient").EndpointControlClient = null as any;
utilities.lazyLoad(exports, ["EndpointControlClient"], () => require("./endpointControlClient"));

export { EndpointControlFctemsArgs, EndpointControlFctemsState } from "./endpointControlFctems";
export type EndpointControlFctems = import("./endpointControlFctems").EndpointControlFctems;
export const EndpointControlFctems: typeof import("./endpointControlFctems").EndpointControlFctems = null as any;
utilities.lazyLoad(exports, ["EndpointControlFctems"], () => require("./endpointControlFctems"));

export { EndpointControlForticlientEmsArgs, EndpointControlForticlientEmsState } from "./endpointControlForticlientEms";
export type EndpointControlForticlientEms = import("./endpointControlForticlientEms").EndpointControlForticlientEms;
export const EndpointControlForticlientEms: typeof import("./endpointControlForticlientEms").EndpointControlForticlientEms = null as any;
utilities.lazyLoad(exports, ["EndpointControlForticlientEms"], () => require("./endpointControlForticlientEms"));

export { EndpointControlForticlientRegistrationSyncArgs, EndpointControlForticlientRegistrationSyncState } from "./endpointControlForticlientRegistrationSync";
export type EndpointControlForticlientRegistrationSync = import("./endpointControlForticlientRegistrationSync").EndpointControlForticlientRegistrationSync;
export const EndpointControlForticlientRegistrationSync: typeof import("./endpointControlForticlientRegistrationSync").EndpointControlForticlientRegistrationSync = null as any;
utilities.lazyLoad(exports, ["EndpointControlForticlientRegistrationSync"], () => require("./endpointControlForticlientRegistrationSync"));

export { EndpointControlProfileArgs, EndpointControlProfileState } from "./endpointControlProfile";
export type EndpointControlProfile = import("./endpointControlProfile").EndpointControlProfile;
export const EndpointControlProfile: typeof import("./endpointControlProfile").EndpointControlProfile = null as any;
utilities.lazyLoad(exports, ["EndpointControlProfile"], () => require("./endpointControlProfile"));

export { EndpointControlRegisteredForticlientArgs, EndpointControlRegisteredForticlientState } from "./endpointControlRegisteredForticlient";
export type EndpointControlRegisteredForticlient = import("./endpointControlRegisteredForticlient").EndpointControlRegisteredForticlient;
export const EndpointControlRegisteredForticlient: typeof import("./endpointControlRegisteredForticlient").EndpointControlRegisteredForticlient = null as any;
utilities.lazyLoad(exports, ["EndpointControlRegisteredForticlient"], () => require("./endpointControlRegisteredForticlient"));

export { EndpointControlSettingsArgs, EndpointControlSettingsState } from "./endpointControlSettings";
export type EndpointControlSettings = import("./endpointControlSettings").EndpointControlSettings;
export const EndpointControlSettings: typeof import("./endpointControlSettings").EndpointControlSettings = null as any;
utilities.lazyLoad(exports, ["EndpointControlSettings"], () => require("./endpointControlSettings"));

export { ExtenderControllerDataplanArgs, ExtenderControllerDataplanState } from "./extenderControllerDataplan";
export type ExtenderControllerDataplan = import("./extenderControllerDataplan").ExtenderControllerDataplan;
export const ExtenderControllerDataplan: typeof import("./extenderControllerDataplan").ExtenderControllerDataplan = null as any;
utilities.lazyLoad(exports, ["ExtenderControllerDataplan"], () => require("./extenderControllerDataplan"));

export { ExtenderControllerExtenderArgs, ExtenderControllerExtenderState } from "./extenderControllerExtender";
export type ExtenderControllerExtender = import("./extenderControllerExtender").ExtenderControllerExtender;
export const ExtenderControllerExtender: typeof import("./extenderControllerExtender").ExtenderControllerExtender = null as any;
utilities.lazyLoad(exports, ["ExtenderControllerExtender"], () => require("./extenderControllerExtender"));

export { ExtenderControllerExtender1Args, ExtenderControllerExtender1State } from "./extenderControllerExtender1";
export type ExtenderControllerExtender1 = import("./extenderControllerExtender1").ExtenderControllerExtender1;
export const ExtenderControllerExtender1: typeof import("./extenderControllerExtender1").ExtenderControllerExtender1 = null as any;
utilities.lazyLoad(exports, ["ExtenderControllerExtender1"], () => require("./extenderControllerExtender1"));

export { ExtenderControllerExtenderProfileArgs, ExtenderControllerExtenderProfileState } from "./extenderControllerExtenderProfile";
export type ExtenderControllerExtenderProfile = import("./extenderControllerExtenderProfile").ExtenderControllerExtenderProfile;
export const ExtenderControllerExtenderProfile: typeof import("./extenderControllerExtenderProfile").ExtenderControllerExtenderProfile = null as any;
utilities.lazyLoad(exports, ["ExtenderControllerExtenderProfile"], () => require("./extenderControllerExtenderProfile"));

export { ExtensionControllerDataplanArgs, ExtensionControllerDataplanState } from "./extensionControllerDataplan";
export type ExtensionControllerDataplan = import("./extensionControllerDataplan").ExtensionControllerDataplan;
export const ExtensionControllerDataplan: typeof import("./extensionControllerDataplan").ExtensionControllerDataplan = null as any;
utilities.lazyLoad(exports, ["ExtensionControllerDataplan"], () => require("./extensionControllerDataplan"));

export { ExtensionControllerExtenderArgs, ExtensionControllerExtenderState } from "./extensionControllerExtender";
export type ExtensionControllerExtender = import("./extensionControllerExtender").ExtensionControllerExtender;
export const ExtensionControllerExtender: typeof import("./extensionControllerExtender").ExtensionControllerExtender = null as any;
utilities.lazyLoad(exports, ["ExtensionControllerExtender"], () => require("./extensionControllerExtender"));

export { ExtensionControllerExtenderProfileArgs, ExtensionControllerExtenderProfileState } from "./extensionControllerExtenderProfile";
export type ExtensionControllerExtenderProfile = import("./extensionControllerExtenderProfile").ExtensionControllerExtenderProfile;
export const ExtensionControllerExtenderProfile: typeof import("./extensionControllerExtenderProfile").ExtensionControllerExtenderProfile = null as any;
utilities.lazyLoad(exports, ["ExtensionControllerExtenderProfile"], () => require("./extensionControllerExtenderProfile"));

export { ExtensionControllerFortigateArgs, ExtensionControllerFortigateState } from "./extensionControllerFortigate";
export type ExtensionControllerFortigate = import("./extensionControllerFortigate").ExtensionControllerFortigate;
export const ExtensionControllerFortigate: typeof import("./extensionControllerFortigate").ExtensionControllerFortigate = null as any;
utilities.lazyLoad(exports, ["ExtensionControllerFortigate"], () => require("./extensionControllerFortigate"));

export { ExtensionControllerFortigateProfileArgs, ExtensionControllerFortigateProfileState } from "./extensionControllerFortigateProfile";
export type ExtensionControllerFortigateProfile = import("./extensionControllerFortigateProfile").ExtensionControllerFortigateProfile;
export const ExtensionControllerFortigateProfile: typeof import("./extensionControllerFortigateProfile").ExtensionControllerFortigateProfile = null as any;
utilities.lazyLoad(exports, ["ExtensionControllerFortigateProfile"], () => require("./extensionControllerFortigateProfile"));

export { FileFilterProfileArgs, FileFilterProfileState } from "./fileFilterProfile";
export type FileFilterProfile = import("./fileFilterProfile").FileFilterProfile;
export const FileFilterProfile: typeof import("./fileFilterProfile").FileFilterProfile = null as any;
utilities.lazyLoad(exports, ["FileFilterProfile"], () => require("./fileFilterProfile"));

export { FirewallAccessProxyArgs, FirewallAccessProxyState } from "./firewallAccessProxy";
export type FirewallAccessProxy = import("./firewallAccessProxy").FirewallAccessProxy;
export const FirewallAccessProxy: typeof import("./firewallAccessProxy").FirewallAccessProxy = null as any;
utilities.lazyLoad(exports, ["FirewallAccessProxy"], () => require("./firewallAccessProxy"));

export { FirewallAccessProxy6Args, FirewallAccessProxy6State } from "./firewallAccessProxy6";
export type FirewallAccessProxy6 = import("./firewallAccessProxy6").FirewallAccessProxy6;
export const FirewallAccessProxy6: typeof import("./firewallAccessProxy6").FirewallAccessProxy6 = null as any;
utilities.lazyLoad(exports, ["FirewallAccessProxy6"], () => require("./firewallAccessProxy6"));

export { FirewallAccessProxySshClientCertArgs, FirewallAccessProxySshClientCertState } from "./firewallAccessProxySshClientCert";
export type FirewallAccessProxySshClientCert = import("./firewallAccessProxySshClientCert").FirewallAccessProxySshClientCert;
export const FirewallAccessProxySshClientCert: typeof import("./firewallAccessProxySshClientCert").FirewallAccessProxySshClientCert = null as any;
utilities.lazyLoad(exports, ["FirewallAccessProxySshClientCert"], () => require("./firewallAccessProxySshClientCert"));

export { FirewallAccessProxyVirtualHostArgs, FirewallAccessProxyVirtualHostState } from "./firewallAccessProxyVirtualHost";
export type FirewallAccessProxyVirtualHost = import("./firewallAccessProxyVirtualHost").FirewallAccessProxyVirtualHost;
export const FirewallAccessProxyVirtualHost: typeof import("./firewallAccessProxyVirtualHost").FirewallAccessProxyVirtualHost = null as any;
utilities.lazyLoad(exports, ["FirewallAccessProxyVirtualHost"], () => require("./firewallAccessProxyVirtualHost"));

export { FirewallAddressArgs, FirewallAddressState } from "./firewallAddress";
export type FirewallAddress = import("./firewallAddress").FirewallAddress;
export const FirewallAddress: typeof import("./firewallAddress").FirewallAddress = null as any;
utilities.lazyLoad(exports, ["FirewallAddress"], () => require("./firewallAddress"));

export { FirewallAddress6Args, FirewallAddress6State } from "./firewallAddress6";
export type FirewallAddress6 = import("./firewallAddress6").FirewallAddress6;
export const FirewallAddress6: typeof import("./firewallAddress6").FirewallAddress6 = null as any;
utilities.lazyLoad(exports, ["FirewallAddress6"], () => require("./firewallAddress6"));

export { FirewallAddress6TemplateArgs, FirewallAddress6TemplateState } from "./firewallAddress6Template";
export type FirewallAddress6Template = import("./firewallAddress6Template").FirewallAddress6Template;
export const FirewallAddress6Template: typeof import("./firewallAddress6Template").FirewallAddress6Template = null as any;
utilities.lazyLoad(exports, ["FirewallAddress6Template"], () => require("./firewallAddress6Template"));

export { FirewallAddrgrpArgs, FirewallAddrgrpState } from "./firewallAddrgrp";
export type FirewallAddrgrp = import("./firewallAddrgrp").FirewallAddrgrp;
export const FirewallAddrgrp: typeof import("./firewallAddrgrp").FirewallAddrgrp = null as any;
utilities.lazyLoad(exports, ["FirewallAddrgrp"], () => require("./firewallAddrgrp"));

export { FirewallAddrgrp6Args, FirewallAddrgrp6State } from "./firewallAddrgrp6";
export type FirewallAddrgrp6 = import("./firewallAddrgrp6").FirewallAddrgrp6;
export const FirewallAddrgrp6: typeof import("./firewallAddrgrp6").FirewallAddrgrp6 = null as any;
utilities.lazyLoad(exports, ["FirewallAddrgrp6"], () => require("./firewallAddrgrp6"));

export { FirewallAuthPortalArgs, FirewallAuthPortalState } from "./firewallAuthPortal";
export type FirewallAuthPortal = import("./firewallAuthPortal").FirewallAuthPortal;
export const FirewallAuthPortal: typeof import("./firewallAuthPortal").FirewallAuthPortal = null as any;
utilities.lazyLoad(exports, ["FirewallAuthPortal"], () => require("./firewallAuthPortal"));

export { FirewallCentralSnatMapArgs, FirewallCentralSnatMapState } from "./firewallCentralSnatMap";
export type FirewallCentralSnatMap = import("./firewallCentralSnatMap").FirewallCentralSnatMap;
export const FirewallCentralSnatMap: typeof import("./firewallCentralSnatMap").FirewallCentralSnatMap = null as any;
utilities.lazyLoad(exports, ["FirewallCentralSnatMap"], () => require("./firewallCentralSnatMap"));

export { FirewallCentralsnatmapMoveArgs, FirewallCentralsnatmapMoveState } from "./firewallCentralsnatmapMove";
export type FirewallCentralsnatmapMove = import("./firewallCentralsnatmapMove").FirewallCentralsnatmapMove;
export const FirewallCentralsnatmapMove: typeof import("./firewallCentralsnatmapMove").FirewallCentralsnatmapMove = null as any;
utilities.lazyLoad(exports, ["FirewallCentralsnatmapMove"], () => require("./firewallCentralsnatmapMove"));

export { FirewallCentralsnatmapSortArgs, FirewallCentralsnatmapSortState } from "./firewallCentralsnatmapSort";
export type FirewallCentralsnatmapSort = import("./firewallCentralsnatmapSort").FirewallCentralsnatmapSort;
export const FirewallCentralsnatmapSort: typeof import("./firewallCentralsnatmapSort").FirewallCentralsnatmapSort = null as any;
utilities.lazyLoad(exports, ["FirewallCentralsnatmapSort"], () => require("./firewallCentralsnatmapSort"));

export { FirewallCityArgs, FirewallCityState } from "./firewallCity";
export type FirewallCity = import("./firewallCity").FirewallCity;
export const FirewallCity: typeof import("./firewallCity").FirewallCity = null as any;
utilities.lazyLoad(exports, ["FirewallCity"], () => require("./firewallCity"));

export { FirewallConsolidatedPolicyArgs, FirewallConsolidatedPolicyState } from "./firewallConsolidatedPolicy";
export type FirewallConsolidatedPolicy = import("./firewallConsolidatedPolicy").FirewallConsolidatedPolicy;
export const FirewallConsolidatedPolicy: typeof import("./firewallConsolidatedPolicy").FirewallConsolidatedPolicy = null as any;
utilities.lazyLoad(exports, ["FirewallConsolidatedPolicy"], () => require("./firewallConsolidatedPolicy"));

export { FirewallCountryArgs, FirewallCountryState } from "./firewallCountry";
export type FirewallCountry = import("./firewallCountry").FirewallCountry;
export const FirewallCountry: typeof import("./firewallCountry").FirewallCountry = null as any;
utilities.lazyLoad(exports, ["FirewallCountry"], () => require("./firewallCountry"));

export { FirewallDecryptedTrafficMirrorArgs, FirewallDecryptedTrafficMirrorState } from "./firewallDecryptedTrafficMirror";
export type FirewallDecryptedTrafficMirror = import("./firewallDecryptedTrafficMirror").FirewallDecryptedTrafficMirror;
export const FirewallDecryptedTrafficMirror: typeof import("./firewallDecryptedTrafficMirror").FirewallDecryptedTrafficMirror = null as any;
utilities.lazyLoad(exports, ["FirewallDecryptedTrafficMirror"], () => require("./firewallDecryptedTrafficMirror"));

export { FirewallDnstranslationArgs, FirewallDnstranslationState } from "./firewallDnstranslation";
export type FirewallDnstranslation = import("./firewallDnstranslation").FirewallDnstranslation;
export const FirewallDnstranslation: typeof import("./firewallDnstranslation").FirewallDnstranslation = null as any;
utilities.lazyLoad(exports, ["FirewallDnstranslation"], () => require("./firewallDnstranslation"));

export { FirewallDosPolicyArgs, FirewallDosPolicyState } from "./firewallDosPolicy";
export type FirewallDosPolicy = import("./firewallDosPolicy").FirewallDosPolicy;
export const FirewallDosPolicy: typeof import("./firewallDosPolicy").FirewallDosPolicy = null as any;
utilities.lazyLoad(exports, ["FirewallDosPolicy"], () => require("./firewallDosPolicy"));

export { FirewallDosPolicy6Args, FirewallDosPolicy6State } from "./firewallDosPolicy6";
export type FirewallDosPolicy6 = import("./firewallDosPolicy6").FirewallDosPolicy6;
export const FirewallDosPolicy6: typeof import("./firewallDosPolicy6").FirewallDosPolicy6 = null as any;
utilities.lazyLoad(exports, ["FirewallDosPolicy6"], () => require("./firewallDosPolicy6"));

export { FirewallGlobalArgs, FirewallGlobalState } from "./firewallGlobal";
export type FirewallGlobal = import("./firewallGlobal").FirewallGlobal;
export const FirewallGlobal: typeof import("./firewallGlobal").FirewallGlobal = null as any;
utilities.lazyLoad(exports, ["FirewallGlobal"], () => require("./firewallGlobal"));

export { FirewallIdentityBasedRouteArgs, FirewallIdentityBasedRouteState } from "./firewallIdentityBasedRoute";
export type FirewallIdentityBasedRoute = import("./firewallIdentityBasedRoute").FirewallIdentityBasedRoute;
export const FirewallIdentityBasedRoute: typeof import("./firewallIdentityBasedRoute").FirewallIdentityBasedRoute = null as any;
utilities.lazyLoad(exports, ["FirewallIdentityBasedRoute"], () => require("./firewallIdentityBasedRoute"));

export { FirewallInterfacePolicyArgs, FirewallInterfacePolicyState } from "./firewallInterfacePolicy";
export type FirewallInterfacePolicy = import("./firewallInterfacePolicy").FirewallInterfacePolicy;
export const FirewallInterfacePolicy: typeof import("./firewallInterfacePolicy").FirewallInterfacePolicy = null as any;
utilities.lazyLoad(exports, ["FirewallInterfacePolicy"], () => require("./firewallInterfacePolicy"));

export { FirewallInterfacePolicy6Args, FirewallInterfacePolicy6State } from "./firewallInterfacePolicy6";
export type FirewallInterfacePolicy6 = import("./firewallInterfacePolicy6").FirewallInterfacePolicy6;
export const FirewallInterfacePolicy6: typeof import("./firewallInterfacePolicy6").FirewallInterfacePolicy6 = null as any;
utilities.lazyLoad(exports, ["FirewallInterfacePolicy6"], () => require("./firewallInterfacePolicy6"));

export { FirewallInternetServiceArgs, FirewallInternetServiceState } from "./firewallInternetService";
export type FirewallInternetService = import("./firewallInternetService").FirewallInternetService;
export const FirewallInternetService: typeof import("./firewallInternetService").FirewallInternetService = null as any;
utilities.lazyLoad(exports, ["FirewallInternetService"], () => require("./firewallInternetService"));

export { FirewallInternetServiceAdditionArgs, FirewallInternetServiceAdditionState } from "./firewallInternetServiceAddition";
export type FirewallInternetServiceAddition = import("./firewallInternetServiceAddition").FirewallInternetServiceAddition;
export const FirewallInternetServiceAddition: typeof import("./firewallInternetServiceAddition").FirewallInternetServiceAddition = null as any;
utilities.lazyLoad(exports, ["FirewallInternetServiceAddition"], () => require("./firewallInternetServiceAddition"));

export { FirewallInternetServiceAppendArgs, FirewallInternetServiceAppendState } from "./firewallInternetServiceAppend";
export type FirewallInternetServiceAppend = import("./firewallInternetServiceAppend").FirewallInternetServiceAppend;
export const FirewallInternetServiceAppend: typeof import("./firewallInternetServiceAppend").FirewallInternetServiceAppend = null as any;
utilities.lazyLoad(exports, ["FirewallInternetServiceAppend"], () => require("./firewallInternetServiceAppend"));

export { FirewallInternetServiceBotnetArgs, FirewallInternetServiceBotnetState } from "./firewallInternetServiceBotnet";
export type FirewallInternetServiceBotnet = import("./firewallInternetServiceBotnet").FirewallInternetServiceBotnet;
export const FirewallInternetServiceBotnet: typeof import("./firewallInternetServiceBotnet").FirewallInternetServiceBotnet = null as any;
utilities.lazyLoad(exports, ["FirewallInternetServiceBotnet"], () => require("./firewallInternetServiceBotnet"));

export { FirewallInternetServiceCustomArgs, FirewallInternetServiceCustomState } from "./firewallInternetServiceCustom";
export type FirewallInternetServiceCustom = import("./firewallInternetServiceCustom").FirewallInternetServiceCustom;
export const FirewallInternetServiceCustom: typeof import("./firewallInternetServiceCustom").FirewallInternetServiceCustom = null as any;
utilities.lazyLoad(exports, ["FirewallInternetServiceCustom"], () => require("./firewallInternetServiceCustom"));

export { FirewallInternetServiceCustomGroupArgs, FirewallInternetServiceCustomGroupState } from "./firewallInternetServiceCustomGroup";
export type FirewallInternetServiceCustomGroup = import("./firewallInternetServiceCustomGroup").FirewallInternetServiceCustomGroup;
export const FirewallInternetServiceCustomGroup: typeof import("./firewallInternetServiceCustomGroup").FirewallInternetServiceCustomGroup = null as any;
utilities.lazyLoad(exports, ["FirewallInternetServiceCustomGroup"], () => require("./firewallInternetServiceCustomGroup"));

export { FirewallInternetServiceDefinitionArgs, FirewallInternetServiceDefinitionState } from "./firewallInternetServiceDefinition";
export type FirewallInternetServiceDefinition = import("./firewallInternetServiceDefinition").FirewallInternetServiceDefinition;
export const FirewallInternetServiceDefinition: typeof import("./firewallInternetServiceDefinition").FirewallInternetServiceDefinition = null as any;
utilities.lazyLoad(exports, ["FirewallInternetServiceDefinition"], () => require("./firewallInternetServiceDefinition"));

export { FirewallInternetServiceExtensionArgs, FirewallInternetServiceExtensionState } from "./firewallInternetServiceExtension";
export type FirewallInternetServiceExtension = import("./firewallInternetServiceExtension").FirewallInternetServiceExtension;
export const FirewallInternetServiceExtension: typeof import("./firewallInternetServiceExtension").FirewallInternetServiceExtension = null as any;
utilities.lazyLoad(exports, ["FirewallInternetServiceExtension"], () => require("./firewallInternetServiceExtension"));

export { FirewallInternetServiceGroupArgs, FirewallInternetServiceGroupState } from "./firewallInternetServiceGroup";
export type FirewallInternetServiceGroup = import("./firewallInternetServiceGroup").FirewallInternetServiceGroup;
export const FirewallInternetServiceGroup: typeof import("./firewallInternetServiceGroup").FirewallInternetServiceGroup = null as any;
utilities.lazyLoad(exports, ["FirewallInternetServiceGroup"], () => require("./firewallInternetServiceGroup"));

export { FirewallInternetServiceIpblReasonArgs, FirewallInternetServiceIpblReasonState } from "./firewallInternetServiceIpblReason";
export type FirewallInternetServiceIpblReason = import("./firewallInternetServiceIpblReason").FirewallInternetServiceIpblReason;
export const FirewallInternetServiceIpblReason: typeof import("./firewallInternetServiceIpblReason").FirewallInternetServiceIpblReason = null as any;
utilities.lazyLoad(exports, ["FirewallInternetServiceIpblReason"], () => require("./firewallInternetServiceIpblReason"));

export { FirewallInternetServiceIpblVendorArgs, FirewallInternetServiceIpblVendorState } from "./firewallInternetServiceIpblVendor";
export type FirewallInternetServiceIpblVendor = import("./firewallInternetServiceIpblVendor").FirewallInternetServiceIpblVendor;
export const FirewallInternetServiceIpblVendor: typeof import("./firewallInternetServiceIpblVendor").FirewallInternetServiceIpblVendor = null as any;
utilities.lazyLoad(exports, ["FirewallInternetServiceIpblVendor"], () => require("./firewallInternetServiceIpblVendor"));

export { FirewallInternetServiceListArgs, FirewallInternetServiceListState } from "./firewallInternetServiceList";
export type FirewallInternetServiceList = import("./firewallInternetServiceList").FirewallInternetServiceList;
export const FirewallInternetServiceList: typeof import("./firewallInternetServiceList").FirewallInternetServiceList = null as any;
utilities.lazyLoad(exports, ["FirewallInternetServiceList"], () => require("./firewallInternetServiceList"));

export { FirewallInternetServiceNameArgs, FirewallInternetServiceNameState } from "./firewallInternetServiceName";
export type FirewallInternetServiceName = import("./firewallInternetServiceName").FirewallInternetServiceName;
export const FirewallInternetServiceName: typeof import("./firewallInternetServiceName").FirewallInternetServiceName = null as any;
utilities.lazyLoad(exports, ["FirewallInternetServiceName"], () => require("./firewallInternetServiceName"));

export { FirewallInternetServiceOwnerArgs, FirewallInternetServiceOwnerState } from "./firewallInternetServiceOwner";
export type FirewallInternetServiceOwner = import("./firewallInternetServiceOwner").FirewallInternetServiceOwner;
export const FirewallInternetServiceOwner: typeof import("./firewallInternetServiceOwner").FirewallInternetServiceOwner = null as any;
utilities.lazyLoad(exports, ["FirewallInternetServiceOwner"], () => require("./firewallInternetServiceOwner"));

export { FirewallInternetServiceReputationArgs, FirewallInternetServiceReputationState } from "./firewallInternetServiceReputation";
export type FirewallInternetServiceReputation = import("./firewallInternetServiceReputation").FirewallInternetServiceReputation;
export const FirewallInternetServiceReputation: typeof import("./firewallInternetServiceReputation").FirewallInternetServiceReputation = null as any;
utilities.lazyLoad(exports, ["FirewallInternetServiceReputation"], () => require("./firewallInternetServiceReputation"));

export { FirewallIpTranslationArgs, FirewallIpTranslationState } from "./firewallIpTranslation";
export type FirewallIpTranslation = import("./firewallIpTranslation").FirewallIpTranslation;
export const FirewallIpTranslation: typeof import("./firewallIpTranslation").FirewallIpTranslation = null as any;
utilities.lazyLoad(exports, ["FirewallIpTranslation"], () => require("./firewallIpTranslation"));

export { FirewallIpmacbindingSettingArgs, FirewallIpmacbindingSettingState } from "./firewallIpmacbindingSetting";
export type FirewallIpmacbindingSetting = import("./firewallIpmacbindingSetting").FirewallIpmacbindingSetting;
export const FirewallIpmacbindingSetting: typeof import("./firewallIpmacbindingSetting").FirewallIpmacbindingSetting = null as any;
utilities.lazyLoad(exports, ["FirewallIpmacbindingSetting"], () => require("./firewallIpmacbindingSetting"));

export { FirewallIpmacbindingTableArgs, FirewallIpmacbindingTableState } from "./firewallIpmacbindingTable";
export type FirewallIpmacbindingTable = import("./firewallIpmacbindingTable").FirewallIpmacbindingTable;
export const FirewallIpmacbindingTable: typeof import("./firewallIpmacbindingTable").FirewallIpmacbindingTable = null as any;
utilities.lazyLoad(exports, ["FirewallIpmacbindingTable"], () => require("./firewallIpmacbindingTable"));

export { FirewallIppoolArgs, FirewallIppoolState } from "./firewallIppool";
export type FirewallIppool = import("./firewallIppool").FirewallIppool;
export const FirewallIppool: typeof import("./firewallIppool").FirewallIppool = null as any;
utilities.lazyLoad(exports, ["FirewallIppool"], () => require("./firewallIppool"));

export { FirewallIppool6Args, FirewallIppool6State } from "./firewallIppool6";
export type FirewallIppool6 = import("./firewallIppool6").FirewallIppool6;
export const FirewallIppool6: typeof import("./firewallIppool6").FirewallIppool6 = null as any;
utilities.lazyLoad(exports, ["FirewallIppool6"], () => require("./firewallIppool6"));

export { FirewallIpv6EhFilterArgs, FirewallIpv6EhFilterState } from "./firewallIpv6EhFilter";
export type FirewallIpv6EhFilter = import("./firewallIpv6EhFilter").FirewallIpv6EhFilter;
export const FirewallIpv6EhFilter: typeof import("./firewallIpv6EhFilter").FirewallIpv6EhFilter = null as any;
utilities.lazyLoad(exports, ["FirewallIpv6EhFilter"], () => require("./firewallIpv6EhFilter"));

export { FirewallLdbMonitorArgs, FirewallLdbMonitorState } from "./firewallLdbMonitor";
export type FirewallLdbMonitor = import("./firewallLdbMonitor").FirewallLdbMonitor;
export const FirewallLdbMonitor: typeof import("./firewallLdbMonitor").FirewallLdbMonitor = null as any;
utilities.lazyLoad(exports, ["FirewallLdbMonitor"], () => require("./firewallLdbMonitor"));

export { FirewallLocalInPolicyArgs, FirewallLocalInPolicyState } from "./firewallLocalInPolicy";
export type FirewallLocalInPolicy = import("./firewallLocalInPolicy").FirewallLocalInPolicy;
export const FirewallLocalInPolicy: typeof import("./firewallLocalInPolicy").FirewallLocalInPolicy = null as any;
utilities.lazyLoad(exports, ["FirewallLocalInPolicy"], () => require("./firewallLocalInPolicy"));

export { FirewallLocalInPolicy6Args, FirewallLocalInPolicy6State } from "./firewallLocalInPolicy6";
export type FirewallLocalInPolicy6 = import("./firewallLocalInPolicy6").FirewallLocalInPolicy6;
export const FirewallLocalInPolicy6: typeof import("./firewallLocalInPolicy6").FirewallLocalInPolicy6 = null as any;
utilities.lazyLoad(exports, ["FirewallLocalInPolicy6"], () => require("./firewallLocalInPolicy6"));

export { FirewallMulticastAddressArgs, FirewallMulticastAddressState } from "./firewallMulticastAddress";
export type FirewallMulticastAddress = import("./firewallMulticastAddress").FirewallMulticastAddress;
export const FirewallMulticastAddress: typeof import("./firewallMulticastAddress").FirewallMulticastAddress = null as any;
utilities.lazyLoad(exports, ["FirewallMulticastAddress"], () => require("./firewallMulticastAddress"));

export { FirewallMulticastAddress6Args, FirewallMulticastAddress6State } from "./firewallMulticastAddress6";
export type FirewallMulticastAddress6 = import("./firewallMulticastAddress6").FirewallMulticastAddress6;
export const FirewallMulticastAddress6: typeof import("./firewallMulticastAddress6").FirewallMulticastAddress6 = null as any;
utilities.lazyLoad(exports, ["FirewallMulticastAddress6"], () => require("./firewallMulticastAddress6"));

export { FirewallMulticastPolicyArgs, FirewallMulticastPolicyState } from "./firewallMulticastPolicy";
export type FirewallMulticastPolicy = import("./firewallMulticastPolicy").FirewallMulticastPolicy;
export const FirewallMulticastPolicy: typeof import("./firewallMulticastPolicy").FirewallMulticastPolicy = null as any;
utilities.lazyLoad(exports, ["FirewallMulticastPolicy"], () => require("./firewallMulticastPolicy"));

export { FirewallMulticastPolicy6Args, FirewallMulticastPolicy6State } from "./firewallMulticastPolicy6";
export type FirewallMulticastPolicy6 = import("./firewallMulticastPolicy6").FirewallMulticastPolicy6;
export const FirewallMulticastPolicy6: typeof import("./firewallMulticastPolicy6").FirewallMulticastPolicy6 = null as any;
utilities.lazyLoad(exports, ["FirewallMulticastPolicy6"], () => require("./firewallMulticastPolicy6"));

export { FirewallNetworkServiceDynamicArgs, FirewallNetworkServiceDynamicState } from "./firewallNetworkServiceDynamic";
export type FirewallNetworkServiceDynamic = import("./firewallNetworkServiceDynamic").FirewallNetworkServiceDynamic;
export const FirewallNetworkServiceDynamic: typeof import("./firewallNetworkServiceDynamic").FirewallNetworkServiceDynamic = null as any;
utilities.lazyLoad(exports, ["FirewallNetworkServiceDynamic"], () => require("./firewallNetworkServiceDynamic"));

export { FirewallObjectAddressArgs, FirewallObjectAddressState } from "./firewallObjectAddress";
export type FirewallObjectAddress = import("./firewallObjectAddress").FirewallObjectAddress;
export const FirewallObjectAddress: typeof import("./firewallObjectAddress").FirewallObjectAddress = null as any;
utilities.lazyLoad(exports, ["FirewallObjectAddress"], () => require("./firewallObjectAddress"));

export { FirewallObjectAddressGroupArgs, FirewallObjectAddressGroupState } from "./firewallObjectAddressGroup";
export type FirewallObjectAddressGroup = import("./firewallObjectAddressGroup").FirewallObjectAddressGroup;
export const FirewallObjectAddressGroup: typeof import("./firewallObjectAddressGroup").FirewallObjectAddressGroup = null as any;
utilities.lazyLoad(exports, ["FirewallObjectAddressGroup"], () => require("./firewallObjectAddressGroup"));

export { FirewallObjectIPPoolArgs, FirewallObjectIPPoolState } from "./firewallObjectIPPool";
export type FirewallObjectIPPool = import("./firewallObjectIPPool").FirewallObjectIPPool;
export const FirewallObjectIPPool: typeof import("./firewallObjectIPPool").FirewallObjectIPPool = null as any;
utilities.lazyLoad(exports, ["FirewallObjectIPPool"], () => require("./firewallObjectIPPool"));

export { FirewallObjectServiceArgs, FirewallObjectServiceState } from "./firewallObjectService";
export type FirewallObjectService = import("./firewallObjectService").FirewallObjectService;
export const FirewallObjectService: typeof import("./firewallObjectService").FirewallObjectService = null as any;
utilities.lazyLoad(exports, ["FirewallObjectService"], () => require("./firewallObjectService"));

export { FirewallObjectServiceCategoryArgs, FirewallObjectServiceCategoryState } from "./firewallObjectServiceCategory";
export type FirewallObjectServiceCategory = import("./firewallObjectServiceCategory").FirewallObjectServiceCategory;
export const FirewallObjectServiceCategory: typeof import("./firewallObjectServiceCategory").FirewallObjectServiceCategory = null as any;
utilities.lazyLoad(exports, ["FirewallObjectServiceCategory"], () => require("./firewallObjectServiceCategory"));

export { FirewallObjectServiceGroupArgs, FirewallObjectServiceGroupState } from "./firewallObjectServiceGroup";
export type FirewallObjectServiceGroup = import("./firewallObjectServiceGroup").FirewallObjectServiceGroup;
export const FirewallObjectServiceGroup: typeof import("./firewallObjectServiceGroup").FirewallObjectServiceGroup = null as any;
utilities.lazyLoad(exports, ["FirewallObjectServiceGroup"], () => require("./firewallObjectServiceGroup"));

export { FirewallObjectVipArgs, FirewallObjectVipState } from "./firewallObjectVip";
export type FirewallObjectVip = import("./firewallObjectVip").FirewallObjectVip;
export const FirewallObjectVip: typeof import("./firewallObjectVip").FirewallObjectVip = null as any;
utilities.lazyLoad(exports, ["FirewallObjectVip"], () => require("./firewallObjectVip"));

export { FirewallObjectVipGroupArgs, FirewallObjectVipGroupState } from "./firewallObjectVipGroup";
export type FirewallObjectVipGroup = import("./firewallObjectVipGroup").FirewallObjectVipGroup;
export const FirewallObjectVipGroup: typeof import("./firewallObjectVipGroup").FirewallObjectVipGroup = null as any;
utilities.lazyLoad(exports, ["FirewallObjectVipGroup"], () => require("./firewallObjectVipGroup"));

export { FirewallPolicyArgs, FirewallPolicyState } from "./firewallPolicy";
export type FirewallPolicy = import("./firewallPolicy").FirewallPolicy;
export const FirewallPolicy: typeof import("./firewallPolicy").FirewallPolicy = null as any;
utilities.lazyLoad(exports, ["FirewallPolicy"], () => require("./firewallPolicy"));

export { FirewallPolicy46Args, FirewallPolicy46State } from "./firewallPolicy46";
export type FirewallPolicy46 = import("./firewallPolicy46").FirewallPolicy46;
export const FirewallPolicy46: typeof import("./firewallPolicy46").FirewallPolicy46 = null as any;
utilities.lazyLoad(exports, ["FirewallPolicy46"], () => require("./firewallPolicy46"));

export { FirewallPolicy6Args, FirewallPolicy6State } from "./firewallPolicy6";
export type FirewallPolicy6 = import("./firewallPolicy6").FirewallPolicy6;
export const FirewallPolicy6: typeof import("./firewallPolicy6").FirewallPolicy6 = null as any;
utilities.lazyLoad(exports, ["FirewallPolicy6"], () => require("./firewallPolicy6"));

export { FirewallPolicy64Args, FirewallPolicy64State } from "./firewallPolicy64";
export type FirewallPolicy64 = import("./firewallPolicy64").FirewallPolicy64;
export const FirewallPolicy64: typeof import("./firewallPolicy64").FirewallPolicy64 = null as any;
utilities.lazyLoad(exports, ["FirewallPolicy64"], () => require("./firewallPolicy64"));

export { FirewallProfileGroupArgs, FirewallProfileGroupState } from "./firewallProfileGroup";
export type FirewallProfileGroup = import("./firewallProfileGroup").FirewallProfileGroup;
export const FirewallProfileGroup: typeof import("./firewallProfileGroup").FirewallProfileGroup = null as any;
utilities.lazyLoad(exports, ["FirewallProfileGroup"], () => require("./firewallProfileGroup"));

export { FirewallProfileProtocolOptionsArgs, FirewallProfileProtocolOptionsState } from "./firewallProfileProtocolOptions";
export type FirewallProfileProtocolOptions = import("./firewallProfileProtocolOptions").FirewallProfileProtocolOptions;
export const FirewallProfileProtocolOptions: typeof import("./firewallProfileProtocolOptions").FirewallProfileProtocolOptions = null as any;
utilities.lazyLoad(exports, ["FirewallProfileProtocolOptions"], () => require("./firewallProfileProtocolOptions"));

export { FirewallProxyAddressArgs, FirewallProxyAddressState } from "./firewallProxyAddress";
export type FirewallProxyAddress = import("./firewallProxyAddress").FirewallProxyAddress;
export const FirewallProxyAddress: typeof import("./firewallProxyAddress").FirewallProxyAddress = null as any;
utilities.lazyLoad(exports, ["FirewallProxyAddress"], () => require("./firewallProxyAddress"));

export { FirewallProxyAddrgrpArgs, FirewallProxyAddrgrpState } from "./firewallProxyAddrgrp";
export type FirewallProxyAddrgrp = import("./firewallProxyAddrgrp").FirewallProxyAddrgrp;
export const FirewallProxyAddrgrp: typeof import("./firewallProxyAddrgrp").FirewallProxyAddrgrp = null as any;
utilities.lazyLoad(exports, ["FirewallProxyAddrgrp"], () => require("./firewallProxyAddrgrp"));

export { FirewallProxyPolicyArgs, FirewallProxyPolicyState } from "./firewallProxyPolicy";
export type FirewallProxyPolicy = import("./firewallProxyPolicy").FirewallProxyPolicy;
export const FirewallProxyPolicy: typeof import("./firewallProxyPolicy").FirewallProxyPolicy = null as any;
utilities.lazyLoad(exports, ["FirewallProxyPolicy"], () => require("./firewallProxyPolicy"));

export { FirewallProxypolicyMoveArgs, FirewallProxypolicyMoveState } from "./firewallProxypolicyMove";
export type FirewallProxypolicyMove = import("./firewallProxypolicyMove").FirewallProxypolicyMove;
export const FirewallProxypolicyMove: typeof import("./firewallProxypolicyMove").FirewallProxypolicyMove = null as any;
utilities.lazyLoad(exports, ["FirewallProxypolicyMove"], () => require("./firewallProxypolicyMove"));

export { FirewallProxypolicySortArgs, FirewallProxypolicySortState } from "./firewallProxypolicySort";
export type FirewallProxypolicySort = import("./firewallProxypolicySort").FirewallProxypolicySort;
export const FirewallProxypolicySort: typeof import("./firewallProxypolicySort").FirewallProxypolicySort = null as any;
utilities.lazyLoad(exports, ["FirewallProxypolicySort"], () => require("./firewallProxypolicySort"));

export { FirewallRegionArgs, FirewallRegionState } from "./firewallRegion";
export type FirewallRegion = import("./firewallRegion").FirewallRegion;
export const FirewallRegion: typeof import("./firewallRegion").FirewallRegion = null as any;
utilities.lazyLoad(exports, ["FirewallRegion"], () => require("./firewallRegion"));

export { FirewallScheduleGroupArgs, FirewallScheduleGroupState } from "./firewallScheduleGroup";
export type FirewallScheduleGroup = import("./firewallScheduleGroup").FirewallScheduleGroup;
export const FirewallScheduleGroup: typeof import("./firewallScheduleGroup").FirewallScheduleGroup = null as any;
utilities.lazyLoad(exports, ["FirewallScheduleGroup"], () => require("./firewallScheduleGroup"));

export { FirewallScheduleOnetimeArgs, FirewallScheduleOnetimeState } from "./firewallScheduleOnetime";
export type FirewallScheduleOnetime = import("./firewallScheduleOnetime").FirewallScheduleOnetime;
export const FirewallScheduleOnetime: typeof import("./firewallScheduleOnetime").FirewallScheduleOnetime = null as any;
utilities.lazyLoad(exports, ["FirewallScheduleOnetime"], () => require("./firewallScheduleOnetime"));

export { FirewallScheduleRecurringArgs, FirewallScheduleRecurringState } from "./firewallScheduleRecurring";
export type FirewallScheduleRecurring = import("./firewallScheduleRecurring").FirewallScheduleRecurring;
export const FirewallScheduleRecurring: typeof import("./firewallScheduleRecurring").FirewallScheduleRecurring = null as any;
utilities.lazyLoad(exports, ["FirewallScheduleRecurring"], () => require("./firewallScheduleRecurring"));

export { FirewallSecurityPolicyArgs, FirewallSecurityPolicyState } from "./firewallSecurityPolicy";
export type FirewallSecurityPolicy = import("./firewallSecurityPolicy").FirewallSecurityPolicy;
export const FirewallSecurityPolicy: typeof import("./firewallSecurityPolicy").FirewallSecurityPolicy = null as any;
utilities.lazyLoad(exports, ["FirewallSecurityPolicy"], () => require("./firewallSecurityPolicy"));

export { FirewallSecurityPolicy1Args, FirewallSecurityPolicy1State } from "./firewallSecurityPolicy1";
export type FirewallSecurityPolicy1 = import("./firewallSecurityPolicy1").FirewallSecurityPolicy1;
export const FirewallSecurityPolicy1: typeof import("./firewallSecurityPolicy1").FirewallSecurityPolicy1 = null as any;
utilities.lazyLoad(exports, ["FirewallSecurityPolicy1"], () => require("./firewallSecurityPolicy1"));

export { FirewallSecurityPolicySeqArgs, FirewallSecurityPolicySeqState } from "./firewallSecurityPolicySeq";
export type FirewallSecurityPolicySeq = import("./firewallSecurityPolicySeq").FirewallSecurityPolicySeq;
export const FirewallSecurityPolicySeq: typeof import("./firewallSecurityPolicySeq").FirewallSecurityPolicySeq = null as any;
utilities.lazyLoad(exports, ["FirewallSecurityPolicySeq"], () => require("./firewallSecurityPolicySeq"));

export { FirewallSecurityPolicySortArgs, FirewallSecurityPolicySortState } from "./firewallSecurityPolicySort";
export type FirewallSecurityPolicySort = import("./firewallSecurityPolicySort").FirewallSecurityPolicySort;
export const FirewallSecurityPolicySort: typeof import("./firewallSecurityPolicySort").FirewallSecurityPolicySort = null as any;
utilities.lazyLoad(exports, ["FirewallSecurityPolicySort"], () => require("./firewallSecurityPolicySort"));

export { FirewallServiceCategoryArgs, FirewallServiceCategoryState } from "./firewallServiceCategory";
export type FirewallServiceCategory = import("./firewallServiceCategory").FirewallServiceCategory;
export const FirewallServiceCategory: typeof import("./firewallServiceCategory").FirewallServiceCategory = null as any;
utilities.lazyLoad(exports, ["FirewallServiceCategory"], () => require("./firewallServiceCategory"));

export { FirewallServiceCustomArgs, FirewallServiceCustomState } from "./firewallServiceCustom";
export type FirewallServiceCustom = import("./firewallServiceCustom").FirewallServiceCustom;
export const FirewallServiceCustom: typeof import("./firewallServiceCustom").FirewallServiceCustom = null as any;
utilities.lazyLoad(exports, ["FirewallServiceCustom"], () => require("./firewallServiceCustom"));

export { FirewallServiceGroupArgs, FirewallServiceGroupState } from "./firewallServiceGroup";
export type FirewallServiceGroup = import("./firewallServiceGroup").FirewallServiceGroup;
export const FirewallServiceGroup: typeof import("./firewallServiceGroup").FirewallServiceGroup = null as any;
utilities.lazyLoad(exports, ["FirewallServiceGroup"], () => require("./firewallServiceGroup"));

export { FirewallShaperPerIpShaperArgs, FirewallShaperPerIpShaperState } from "./firewallShaperPerIpShaper";
export type FirewallShaperPerIpShaper = import("./firewallShaperPerIpShaper").FirewallShaperPerIpShaper;
export const FirewallShaperPerIpShaper: typeof import("./firewallShaperPerIpShaper").FirewallShaperPerIpShaper = null as any;
utilities.lazyLoad(exports, ["FirewallShaperPerIpShaper"], () => require("./firewallShaperPerIpShaper"));

export { FirewallShaperTrafficShaperArgs, FirewallShaperTrafficShaperState } from "./firewallShaperTrafficShaper";
export type FirewallShaperTrafficShaper = import("./firewallShaperTrafficShaper").FirewallShaperTrafficShaper;
export const FirewallShaperTrafficShaper: typeof import("./firewallShaperTrafficShaper").FirewallShaperTrafficShaper = null as any;
utilities.lazyLoad(exports, ["FirewallShaperTrafficShaper"], () => require("./firewallShaperTrafficShaper"));

export { FirewallShapingPolicyArgs, FirewallShapingPolicyState } from "./firewallShapingPolicy";
export type FirewallShapingPolicy = import("./firewallShapingPolicy").FirewallShapingPolicy;
export const FirewallShapingPolicy: typeof import("./firewallShapingPolicy").FirewallShapingPolicy = null as any;
utilities.lazyLoad(exports, ["FirewallShapingPolicy"], () => require("./firewallShapingPolicy"));

export { FirewallShapingProfileArgs, FirewallShapingProfileState } from "./firewallShapingProfile";
export type FirewallShapingProfile = import("./firewallShapingProfile").FirewallShapingProfile;
export const FirewallShapingProfile: typeof import("./firewallShapingProfile").FirewallShapingProfile = null as any;
utilities.lazyLoad(exports, ["FirewallShapingProfile"], () => require("./firewallShapingProfile"));

export { FirewallSnifferArgs, FirewallSnifferState } from "./firewallSniffer";
export type FirewallSniffer = import("./firewallSniffer").FirewallSniffer;
export const FirewallSniffer: typeof import("./firewallSniffer").FirewallSniffer = null as any;
utilities.lazyLoad(exports, ["FirewallSniffer"], () => require("./firewallSniffer"));

export { FirewallSshHostKeyArgs, FirewallSshHostKeyState } from "./firewallSshHostKey";
export type FirewallSshHostKey = import("./firewallSshHostKey").FirewallSshHostKey;
export const FirewallSshHostKey: typeof import("./firewallSshHostKey").FirewallSshHostKey = null as any;
utilities.lazyLoad(exports, ["FirewallSshHostKey"], () => require("./firewallSshHostKey"));

export { FirewallSshLocalCaArgs, FirewallSshLocalCaState } from "./firewallSshLocalCa";
export type FirewallSshLocalCa = import("./firewallSshLocalCa").FirewallSshLocalCa;
export const FirewallSshLocalCa: typeof import("./firewallSshLocalCa").FirewallSshLocalCa = null as any;
utilities.lazyLoad(exports, ["FirewallSshLocalCa"], () => require("./firewallSshLocalCa"));

export { FirewallSshLocalKeyArgs, FirewallSshLocalKeyState } from "./firewallSshLocalKey";
export type FirewallSshLocalKey = import("./firewallSshLocalKey").FirewallSshLocalKey;
export const FirewallSshLocalKey: typeof import("./firewallSshLocalKey").FirewallSshLocalKey = null as any;
utilities.lazyLoad(exports, ["FirewallSshLocalKey"], () => require("./firewallSshLocalKey"));

export { FirewallSshSettingArgs, FirewallSshSettingState } from "./firewallSshSetting";
export type FirewallSshSetting = import("./firewallSshSetting").FirewallSshSetting;
export const FirewallSshSetting: typeof import("./firewallSshSetting").FirewallSshSetting = null as any;
utilities.lazyLoad(exports, ["FirewallSshSetting"], () => require("./firewallSshSetting"));

export { FirewallSslServerArgs, FirewallSslServerState } from "./firewallSslServer";
export type FirewallSslServer = import("./firewallSslServer").FirewallSslServer;
export const FirewallSslServer: typeof import("./firewallSslServer").FirewallSslServer = null as any;
utilities.lazyLoad(exports, ["FirewallSslServer"], () => require("./firewallSslServer"));

export { FirewallSslSettingArgs, FirewallSslSettingState } from "./firewallSslSetting";
export type FirewallSslSetting = import("./firewallSslSetting").FirewallSslSetting;
export const FirewallSslSetting: typeof import("./firewallSslSetting").FirewallSslSetting = null as any;
utilities.lazyLoad(exports, ["FirewallSslSetting"], () => require("./firewallSslSetting"));

export { FirewallSslSshProfileArgs, FirewallSslSshProfileState } from "./firewallSslSshProfile";
export type FirewallSslSshProfile = import("./firewallSslSshProfile").FirewallSslSshProfile;
export const FirewallSslSshProfile: typeof import("./firewallSslSshProfile").FirewallSslSshProfile = null as any;
utilities.lazyLoad(exports, ["FirewallSslSshProfile"], () => require("./firewallSslSshProfile"));

export { FirewallTrafficClassArgs, FirewallTrafficClassState } from "./firewallTrafficClass";
export type FirewallTrafficClass = import("./firewallTrafficClass").FirewallTrafficClass;
export const FirewallTrafficClass: typeof import("./firewallTrafficClass").FirewallTrafficClass = null as any;
utilities.lazyLoad(exports, ["FirewallTrafficClass"], () => require("./firewallTrafficClass"));

export { FirewallTtlPolicyArgs, FirewallTtlPolicyState } from "./firewallTtlPolicy";
export type FirewallTtlPolicy = import("./firewallTtlPolicy").FirewallTtlPolicy;
export const FirewallTtlPolicy: typeof import("./firewallTtlPolicy").FirewallTtlPolicy = null as any;
utilities.lazyLoad(exports, ["FirewallTtlPolicy"], () => require("./firewallTtlPolicy"));

export { FirewallVendorMacArgs, FirewallVendorMacState } from "./firewallVendorMac";
export type FirewallVendorMac = import("./firewallVendorMac").FirewallVendorMac;
export const FirewallVendorMac: typeof import("./firewallVendorMac").FirewallVendorMac = null as any;
utilities.lazyLoad(exports, ["FirewallVendorMac"], () => require("./firewallVendorMac"));

export { FirewallVipArgs, FirewallVipState } from "./firewallVip";
export type FirewallVip = import("./firewallVip").FirewallVip;
export const FirewallVip: typeof import("./firewallVip").FirewallVip = null as any;
utilities.lazyLoad(exports, ["FirewallVip"], () => require("./firewallVip"));

export { FirewallVip46Args, FirewallVip46State } from "./firewallVip46";
export type FirewallVip46 = import("./firewallVip46").FirewallVip46;
export const FirewallVip46: typeof import("./firewallVip46").FirewallVip46 = null as any;
utilities.lazyLoad(exports, ["FirewallVip46"], () => require("./firewallVip46"));

export { FirewallVip6Args, FirewallVip6State } from "./firewallVip6";
export type FirewallVip6 = import("./firewallVip6").FirewallVip6;
export const FirewallVip6: typeof import("./firewallVip6").FirewallVip6 = null as any;
utilities.lazyLoad(exports, ["FirewallVip6"], () => require("./firewallVip6"));

export { FirewallVip64Args, FirewallVip64State } from "./firewallVip64";
export type FirewallVip64 = import("./firewallVip64").FirewallVip64;
export const FirewallVip64: typeof import("./firewallVip64").FirewallVip64 = null as any;
utilities.lazyLoad(exports, ["FirewallVip64"], () => require("./firewallVip64"));

export { FirewallVipgrpArgs, FirewallVipgrpState } from "./firewallVipgrp";
export type FirewallVipgrp = import("./firewallVipgrp").FirewallVipgrp;
export const FirewallVipgrp: typeof import("./firewallVipgrp").FirewallVipgrp = null as any;
utilities.lazyLoad(exports, ["FirewallVipgrp"], () => require("./firewallVipgrp"));

export { FirewallVipgrp46Args, FirewallVipgrp46State } from "./firewallVipgrp46";
export type FirewallVipgrp46 = import("./firewallVipgrp46").FirewallVipgrp46;
export const FirewallVipgrp46: typeof import("./firewallVipgrp46").FirewallVipgrp46 = null as any;
utilities.lazyLoad(exports, ["FirewallVipgrp46"], () => require("./firewallVipgrp46"));

export { FirewallVipgrp6Args, FirewallVipgrp6State } from "./firewallVipgrp6";
export type FirewallVipgrp6 = import("./firewallVipgrp6").FirewallVipgrp6;
export const FirewallVipgrp6: typeof import("./firewallVipgrp6").FirewallVipgrp6 = null as any;
utilities.lazyLoad(exports, ["FirewallVipgrp6"], () => require("./firewallVipgrp6"));

export { FirewallVipgrp64Args, FirewallVipgrp64State } from "./firewallVipgrp64";
export type FirewallVipgrp64 = import("./firewallVipgrp64").FirewallVipgrp64;
export const FirewallVipgrp64: typeof import("./firewallVipgrp64").FirewallVipgrp64 = null as any;
utilities.lazyLoad(exports, ["FirewallVipgrp64"], () => require("./firewallVipgrp64"));

export { FirewallWildcardFqdnCustomArgs, FirewallWildcardFqdnCustomState } from "./firewallWildcardFqdnCustom";
export type FirewallWildcardFqdnCustom = import("./firewallWildcardFqdnCustom").FirewallWildcardFqdnCustom;
export const FirewallWildcardFqdnCustom: typeof import("./firewallWildcardFqdnCustom").FirewallWildcardFqdnCustom = null as any;
utilities.lazyLoad(exports, ["FirewallWildcardFqdnCustom"], () => require("./firewallWildcardFqdnCustom"));

export { FirewallWildcardFqdnGroupArgs, FirewallWildcardFqdnGroupState } from "./firewallWildcardFqdnGroup";
export type FirewallWildcardFqdnGroup = import("./firewallWildcardFqdnGroup").FirewallWildcardFqdnGroup;
export const FirewallWildcardFqdnGroup: typeof import("./firewallWildcardFqdnGroup").FirewallWildcardFqdnGroup = null as any;
utilities.lazyLoad(exports, ["FirewallWildcardFqdnGroup"], () => require("./firewallWildcardFqdnGroup"));

export { FortimanagerDVMDeviceArgs, FortimanagerDVMDeviceState } from "./fortimanagerDVMDevice";
export type FortimanagerDVMDevice = import("./fortimanagerDVMDevice").FortimanagerDVMDevice;
export const FortimanagerDVMDevice: typeof import("./fortimanagerDVMDevice").FortimanagerDVMDevice = null as any;
utilities.lazyLoad(exports, ["FortimanagerDVMDevice"], () => require("./fortimanagerDVMDevice"));

export { FortimanagerDVMInstallDevArgs, FortimanagerDVMInstallDevState } from "./fortimanagerDVMInstallDev";
export type FortimanagerDVMInstallDev = import("./fortimanagerDVMInstallDev").FortimanagerDVMInstallDev;
export const FortimanagerDVMInstallDev: typeof import("./fortimanagerDVMInstallDev").FortimanagerDVMInstallDev = null as any;
utilities.lazyLoad(exports, ["FortimanagerDVMInstallDev"], () => require("./fortimanagerDVMInstallDev"));

export { FortimanagerDVMInstallPolicyPackageArgs, FortimanagerDVMInstallPolicyPackageState } from "./fortimanagerDVMInstallPolicyPackage";
export type FortimanagerDVMInstallPolicyPackage = import("./fortimanagerDVMInstallPolicyPackage").FortimanagerDVMInstallPolicyPackage;
export const FortimanagerDVMInstallPolicyPackage: typeof import("./fortimanagerDVMInstallPolicyPackage").FortimanagerDVMInstallPolicyPackage = null as any;
utilities.lazyLoad(exports, ["FortimanagerDVMInstallPolicyPackage"], () => require("./fortimanagerDVMInstallPolicyPackage"));

export { FortimanagerDVMScriptArgs, FortimanagerDVMScriptState } from "./fortimanagerDVMScript";
export type FortimanagerDVMScript = import("./fortimanagerDVMScript").FortimanagerDVMScript;
export const FortimanagerDVMScript: typeof import("./fortimanagerDVMScript").FortimanagerDVMScript = null as any;
utilities.lazyLoad(exports, ["FortimanagerDVMScript"], () => require("./fortimanagerDVMScript"));

export { FortimanagerDVMScriptExecuteArgs, FortimanagerDVMScriptExecuteState } from "./fortimanagerDVMScriptExecute";
export type FortimanagerDVMScriptExecute = import("./fortimanagerDVMScriptExecute").FortimanagerDVMScriptExecute;
export const FortimanagerDVMScriptExecute: typeof import("./fortimanagerDVMScriptExecute").FortimanagerDVMScriptExecute = null as any;
utilities.lazyLoad(exports, ["FortimanagerDVMScriptExecute"], () => require("./fortimanagerDVMScriptExecute"));

export { FortimanagerFirewallObjectAddressArgs, FortimanagerFirewallObjectAddressState } from "./fortimanagerFirewallObjectAddress";
export type FortimanagerFirewallObjectAddress = import("./fortimanagerFirewallObjectAddress").FortimanagerFirewallObjectAddress;
export const FortimanagerFirewallObjectAddress: typeof import("./fortimanagerFirewallObjectAddress").FortimanagerFirewallObjectAddress = null as any;
utilities.lazyLoad(exports, ["FortimanagerFirewallObjectAddress"], () => require("./fortimanagerFirewallObjectAddress"));

export { FortimanagerFirewallObjectIppoolArgs, FortimanagerFirewallObjectIppoolState } from "./fortimanagerFirewallObjectIppool";
export type FortimanagerFirewallObjectIppool = import("./fortimanagerFirewallObjectIppool").FortimanagerFirewallObjectIppool;
export const FortimanagerFirewallObjectIppool: typeof import("./fortimanagerFirewallObjectIppool").FortimanagerFirewallObjectIppool = null as any;
utilities.lazyLoad(exports, ["FortimanagerFirewallObjectIppool"], () => require("./fortimanagerFirewallObjectIppool"));

export { FortimanagerFirewallObjectServiceArgs, FortimanagerFirewallObjectServiceState } from "./fortimanagerFirewallObjectService";
export type FortimanagerFirewallObjectService = import("./fortimanagerFirewallObjectService").FortimanagerFirewallObjectService;
export const FortimanagerFirewallObjectService: typeof import("./fortimanagerFirewallObjectService").FortimanagerFirewallObjectService = null as any;
utilities.lazyLoad(exports, ["FortimanagerFirewallObjectService"], () => require("./fortimanagerFirewallObjectService"));

export { FortimanagerFirewallObjectVipArgs, FortimanagerFirewallObjectVipState } from "./fortimanagerFirewallObjectVip";
export type FortimanagerFirewallObjectVip = import("./fortimanagerFirewallObjectVip").FortimanagerFirewallObjectVip;
export const FortimanagerFirewallObjectVip: typeof import("./fortimanagerFirewallObjectVip").FortimanagerFirewallObjectVip = null as any;
utilities.lazyLoad(exports, ["FortimanagerFirewallObjectVip"], () => require("./fortimanagerFirewallObjectVip"));

export { FortimanagerFirewallSecurityPolicyArgs, FortimanagerFirewallSecurityPolicyState } from "./fortimanagerFirewallSecurityPolicy";
export type FortimanagerFirewallSecurityPolicy = import("./fortimanagerFirewallSecurityPolicy").FortimanagerFirewallSecurityPolicy;
export const FortimanagerFirewallSecurityPolicy: typeof import("./fortimanagerFirewallSecurityPolicy").FortimanagerFirewallSecurityPolicy = null as any;
utilities.lazyLoad(exports, ["FortimanagerFirewallSecurityPolicy"], () => require("./fortimanagerFirewallSecurityPolicy"));

export { FortimanagerFirewallSecurityPolicyPackageArgs, FortimanagerFirewallSecurityPolicyPackageState } from "./fortimanagerFirewallSecurityPolicyPackage";
export type FortimanagerFirewallSecurityPolicyPackage = import("./fortimanagerFirewallSecurityPolicyPackage").FortimanagerFirewallSecurityPolicyPackage;
export const FortimanagerFirewallSecurityPolicyPackage: typeof import("./fortimanagerFirewallSecurityPolicyPackage").FortimanagerFirewallSecurityPolicyPackage = null as any;
utilities.lazyLoad(exports, ["FortimanagerFirewallSecurityPolicyPackage"], () => require("./fortimanagerFirewallSecurityPolicyPackage"));

export { FortimanagerJSONRPCRequestArgs, FortimanagerJSONRPCRequestState } from "./fortimanagerJSONRPCRequest";
export type FortimanagerJSONRPCRequest = import("./fortimanagerJSONRPCRequest").FortimanagerJSONRPCRequest;
export const FortimanagerJSONRPCRequest: typeof import("./fortimanagerJSONRPCRequest").FortimanagerJSONRPCRequest = null as any;
utilities.lazyLoad(exports, ["FortimanagerJSONRPCRequest"], () => require("./fortimanagerJSONRPCRequest"));

export { FortimanagerObjectAdomRevisionArgs, FortimanagerObjectAdomRevisionState } from "./fortimanagerObjectAdomRevision";
export type FortimanagerObjectAdomRevision = import("./fortimanagerObjectAdomRevision").FortimanagerObjectAdomRevision;
export const FortimanagerObjectAdomRevision: typeof import("./fortimanagerObjectAdomRevision").FortimanagerObjectAdomRevision = null as any;
utilities.lazyLoad(exports, ["FortimanagerObjectAdomRevision"], () => require("./fortimanagerObjectAdomRevision"));

export { FortimanagerSystemAdminArgs, FortimanagerSystemAdminState } from "./fortimanagerSystemAdmin";
export type FortimanagerSystemAdmin = import("./fortimanagerSystemAdmin").FortimanagerSystemAdmin;
export const FortimanagerSystemAdmin: typeof import("./fortimanagerSystemAdmin").FortimanagerSystemAdmin = null as any;
utilities.lazyLoad(exports, ["FortimanagerSystemAdmin"], () => require("./fortimanagerSystemAdmin"));

export { FortimanagerSystemAdminProfilesArgs, FortimanagerSystemAdminProfilesState } from "./fortimanagerSystemAdminProfiles";
export type FortimanagerSystemAdminProfiles = import("./fortimanagerSystemAdminProfiles").FortimanagerSystemAdminProfiles;
export const FortimanagerSystemAdminProfiles: typeof import("./fortimanagerSystemAdminProfiles").FortimanagerSystemAdminProfiles = null as any;
utilities.lazyLoad(exports, ["FortimanagerSystemAdminProfiles"], () => require("./fortimanagerSystemAdminProfiles"));

export { FortimanagerSystemAdminUserArgs, FortimanagerSystemAdminUserState } from "./fortimanagerSystemAdminUser";
export type FortimanagerSystemAdminUser = import("./fortimanagerSystemAdminUser").FortimanagerSystemAdminUser;
export const FortimanagerSystemAdminUser: typeof import("./fortimanagerSystemAdminUser").FortimanagerSystemAdminUser = null as any;
utilities.lazyLoad(exports, ["FortimanagerSystemAdminUser"], () => require("./fortimanagerSystemAdminUser"));

export { FortimanagerSystemAdomArgs, FortimanagerSystemAdomState } from "./fortimanagerSystemAdom";
export type FortimanagerSystemAdom = import("./fortimanagerSystemAdom").FortimanagerSystemAdom;
export const FortimanagerSystemAdom: typeof import("./fortimanagerSystemAdom").FortimanagerSystemAdom = null as any;
utilities.lazyLoad(exports, ["FortimanagerSystemAdom"], () => require("./fortimanagerSystemAdom"));

export { FortimanagerSystemDNSArgs, FortimanagerSystemDNSState } from "./fortimanagerSystemDNS";
export type FortimanagerSystemDNS = import("./fortimanagerSystemDNS").FortimanagerSystemDNS;
export const FortimanagerSystemDNS: typeof import("./fortimanagerSystemDNS").FortimanagerSystemDNS = null as any;
utilities.lazyLoad(exports, ["FortimanagerSystemDNS"], () => require("./fortimanagerSystemDNS"));

export { FortimanagerSystemGlobalArgs, FortimanagerSystemGlobalState } from "./fortimanagerSystemGlobal";
export type FortimanagerSystemGlobal = import("./fortimanagerSystemGlobal").FortimanagerSystemGlobal;
export const FortimanagerSystemGlobal: typeof import("./fortimanagerSystemGlobal").FortimanagerSystemGlobal = null as any;
utilities.lazyLoad(exports, ["FortimanagerSystemGlobal"], () => require("./fortimanagerSystemGlobal"));

export { FortimanagerSystemLicenseFortiCareArgs, FortimanagerSystemLicenseFortiCareState } from "./fortimanagerSystemLicenseFortiCare";
export type FortimanagerSystemLicenseFortiCare = import("./fortimanagerSystemLicenseFortiCare").FortimanagerSystemLicenseFortiCare;
export const FortimanagerSystemLicenseFortiCare: typeof import("./fortimanagerSystemLicenseFortiCare").FortimanagerSystemLicenseFortiCare = null as any;
utilities.lazyLoad(exports, ["FortimanagerSystemLicenseFortiCare"], () => require("./fortimanagerSystemLicenseFortiCare"));

export { FortimanagerSystemLicenseVMArgs, FortimanagerSystemLicenseVMState } from "./fortimanagerSystemLicenseVM";
export type FortimanagerSystemLicenseVM = import("./fortimanagerSystemLicenseVM").FortimanagerSystemLicenseVM;
export const FortimanagerSystemLicenseVM: typeof import("./fortimanagerSystemLicenseVM").FortimanagerSystemLicenseVM = null as any;
utilities.lazyLoad(exports, ["FortimanagerSystemLicenseVM"], () => require("./fortimanagerSystemLicenseVM"));

export { FortimanagerSystemNTPArgs, FortimanagerSystemNTPState } from "./fortimanagerSystemNTP";
export type FortimanagerSystemNTP = import("./fortimanagerSystemNTP").FortimanagerSystemNTP;
export const FortimanagerSystemNTP: typeof import("./fortimanagerSystemNTP").FortimanagerSystemNTP = null as any;
utilities.lazyLoad(exports, ["FortimanagerSystemNTP"], () => require("./fortimanagerSystemNTP"));

export { FortimanagerSystemNetworkInterfaceArgs, FortimanagerSystemNetworkInterfaceState } from "./fortimanagerSystemNetworkInterface";
export type FortimanagerSystemNetworkInterface = import("./fortimanagerSystemNetworkInterface").FortimanagerSystemNetworkInterface;
export const FortimanagerSystemNetworkInterface: typeof import("./fortimanagerSystemNetworkInterface").FortimanagerSystemNetworkInterface = null as any;
utilities.lazyLoad(exports, ["FortimanagerSystemNetworkInterface"], () => require("./fortimanagerSystemNetworkInterface"));

export { FortimanagerSystemNetworkRouteArgs, FortimanagerSystemNetworkRouteState } from "./fortimanagerSystemNetworkRoute";
export type FortimanagerSystemNetworkRoute = import("./fortimanagerSystemNetworkRoute").FortimanagerSystemNetworkRoute;
export const FortimanagerSystemNetworkRoute: typeof import("./fortimanagerSystemNetworkRoute").FortimanagerSystemNetworkRoute = null as any;
utilities.lazyLoad(exports, ["FortimanagerSystemNetworkRoute"], () => require("./fortimanagerSystemNetworkRoute"));

export { FortimanagerSystemSyslogServerArgs, FortimanagerSystemSyslogServerState } from "./fortimanagerSystemSyslogServer";
export type FortimanagerSystemSyslogServer = import("./fortimanagerSystemSyslogServer").FortimanagerSystemSyslogServer;
export const FortimanagerSystemSyslogServer: typeof import("./fortimanagerSystemSyslogServer").FortimanagerSystemSyslogServer = null as any;
utilities.lazyLoad(exports, ["FortimanagerSystemSyslogServer"], () => require("./fortimanagerSystemSyslogServer"));

export { FtpProxyExplicitArgs, FtpProxyExplicitState } from "./ftpProxyExplicit";
export type FtpProxyExplicit = import("./ftpProxyExplicit").FtpProxyExplicit;
export const FtpProxyExplicit: typeof import("./ftpProxyExplicit").FtpProxyExplicit = null as any;
utilities.lazyLoad(exports, ["FtpProxyExplicit"], () => require("./ftpProxyExplicit"));

export { GetFirewallAddressArgs, GetFirewallAddressResult, GetFirewallAddressOutputArgs } from "./getFirewallAddress";
export const getFirewallAddress: typeof import("./getFirewallAddress").getFirewallAddress = null as any;
export const getFirewallAddressOutput: typeof import("./getFirewallAddress").getFirewallAddressOutput = null as any;
utilities.lazyLoad(exports, ["getFirewallAddress","getFirewallAddressOutput"], () => require("./getFirewallAddress"));

export { GetFirewallAddress6Args, GetFirewallAddress6Result, GetFirewallAddress6OutputArgs } from "./getFirewallAddress6";
export const getFirewallAddress6: typeof import("./getFirewallAddress6").getFirewallAddress6 = null as any;
export const getFirewallAddress6Output: typeof import("./getFirewallAddress6").getFirewallAddress6Output = null as any;
utilities.lazyLoad(exports, ["getFirewallAddress6","getFirewallAddress6Output"], () => require("./getFirewallAddress6"));

export { GetFirewallAddress6ListArgs, GetFirewallAddress6ListResult, GetFirewallAddress6ListOutputArgs } from "./getFirewallAddress6List";
export const getFirewallAddress6List: typeof import("./getFirewallAddress6List").getFirewallAddress6List = null as any;
export const getFirewallAddress6ListOutput: typeof import("./getFirewallAddress6List").getFirewallAddress6ListOutput = null as any;
utilities.lazyLoad(exports, ["getFirewallAddress6List","getFirewallAddress6ListOutput"], () => require("./getFirewallAddress6List"));

export { GetFirewallAddress6TemplateArgs, GetFirewallAddress6TemplateResult, GetFirewallAddress6TemplateOutputArgs } from "./getFirewallAddress6Template";
export const getFirewallAddress6Template: typeof import("./getFirewallAddress6Template").getFirewallAddress6Template = null as any;
export const getFirewallAddress6TemplateOutput: typeof import("./getFirewallAddress6Template").getFirewallAddress6TemplateOutput = null as any;
utilities.lazyLoad(exports, ["getFirewallAddress6Template","getFirewallAddress6TemplateOutput"], () => require("./getFirewallAddress6Template"));

export { GetFirewallAddress6TemplateListArgs, GetFirewallAddress6TemplateListResult, GetFirewallAddress6TemplateListOutputArgs } from "./getFirewallAddress6TemplateList";
export const getFirewallAddress6TemplateList: typeof import("./getFirewallAddress6TemplateList").getFirewallAddress6TemplateList = null as any;
export const getFirewallAddress6TemplateListOutput: typeof import("./getFirewallAddress6TemplateList").getFirewallAddress6TemplateListOutput = null as any;
utilities.lazyLoad(exports, ["getFirewallAddress6TemplateList","getFirewallAddress6TemplateListOutput"], () => require("./getFirewallAddress6TemplateList"));

export { GetFirewallAddressListArgs, GetFirewallAddressListResult, GetFirewallAddressListOutputArgs } from "./getFirewallAddressList";
export const getFirewallAddressList: typeof import("./getFirewallAddressList").getFirewallAddressList = null as any;
export const getFirewallAddressListOutput: typeof import("./getFirewallAddressList").getFirewallAddressListOutput = null as any;
utilities.lazyLoad(exports, ["getFirewallAddressList","getFirewallAddressListOutput"], () => require("./getFirewallAddressList"));

export { GetFirewallAddrgrpArgs, GetFirewallAddrgrpResult, GetFirewallAddrgrpOutputArgs } from "./getFirewallAddrgrp";
export const getFirewallAddrgrp: typeof import("./getFirewallAddrgrp").getFirewallAddrgrp = null as any;
export const getFirewallAddrgrpOutput: typeof import("./getFirewallAddrgrp").getFirewallAddrgrpOutput = null as any;
utilities.lazyLoad(exports, ["getFirewallAddrgrp","getFirewallAddrgrpOutput"], () => require("./getFirewallAddrgrp"));

export { GetFirewallAddrgrp6Args, GetFirewallAddrgrp6Result, GetFirewallAddrgrp6OutputArgs } from "./getFirewallAddrgrp6";
export const getFirewallAddrgrp6: typeof import("./getFirewallAddrgrp6").getFirewallAddrgrp6 = null as any;
export const getFirewallAddrgrp6Output: typeof import("./getFirewallAddrgrp6").getFirewallAddrgrp6Output = null as any;
utilities.lazyLoad(exports, ["getFirewallAddrgrp6","getFirewallAddrgrp6Output"], () => require("./getFirewallAddrgrp6"));

export { GetFirewallAddrgrp6ListArgs, GetFirewallAddrgrp6ListResult, GetFirewallAddrgrp6ListOutputArgs } from "./getFirewallAddrgrp6List";
export const getFirewallAddrgrp6List: typeof import("./getFirewallAddrgrp6List").getFirewallAddrgrp6List = null as any;
export const getFirewallAddrgrp6ListOutput: typeof import("./getFirewallAddrgrp6List").getFirewallAddrgrp6ListOutput = null as any;
utilities.lazyLoad(exports, ["getFirewallAddrgrp6List","getFirewallAddrgrp6ListOutput"], () => require("./getFirewallAddrgrp6List"));

export { GetFirewallAddrgrpListArgs, GetFirewallAddrgrpListResult, GetFirewallAddrgrpListOutputArgs } from "./getFirewallAddrgrpList";
export const getFirewallAddrgrpList: typeof import("./getFirewallAddrgrpList").getFirewallAddrgrpList = null as any;
export const getFirewallAddrgrpListOutput: typeof import("./getFirewallAddrgrpList").getFirewallAddrgrpListOutput = null as any;
utilities.lazyLoad(exports, ["getFirewallAddrgrpList","getFirewallAddrgrpListOutput"], () => require("./getFirewallAddrgrpList"));

export { GetFirewallCentralSnatMapArgs, GetFirewallCentralSnatMapResult, GetFirewallCentralSnatMapOutputArgs } from "./getFirewallCentralSnatMap";
export const getFirewallCentralSnatMap: typeof import("./getFirewallCentralSnatMap").getFirewallCentralSnatMap = null as any;
export const getFirewallCentralSnatMapOutput: typeof import("./getFirewallCentralSnatMap").getFirewallCentralSnatMapOutput = null as any;
utilities.lazyLoad(exports, ["getFirewallCentralSnatMap","getFirewallCentralSnatMapOutput"], () => require("./getFirewallCentralSnatMap"));

export { GetFirewallCentralSnatMapListArgs, GetFirewallCentralSnatMapListResult, GetFirewallCentralSnatMapListOutputArgs } from "./getFirewallCentralSnatMapList";
export const getFirewallCentralSnatMapList: typeof import("./getFirewallCentralSnatMapList").getFirewallCentralSnatMapList = null as any;
export const getFirewallCentralSnatMapListOutput: typeof import("./getFirewallCentralSnatMapList").getFirewallCentralSnatMapListOutput = null as any;
utilities.lazyLoad(exports, ["getFirewallCentralSnatMapList","getFirewallCentralSnatMapListOutput"], () => require("./getFirewallCentralSnatMapList"));

export { GetFirewallConsolidatedPolicyArgs, GetFirewallConsolidatedPolicyResult, GetFirewallConsolidatedPolicyOutputArgs } from "./getFirewallConsolidatedPolicy";
export const getFirewallConsolidatedPolicy: typeof import("./getFirewallConsolidatedPolicy").getFirewallConsolidatedPolicy = null as any;
export const getFirewallConsolidatedPolicyOutput: typeof import("./getFirewallConsolidatedPolicy").getFirewallConsolidatedPolicyOutput = null as any;
utilities.lazyLoad(exports, ["getFirewallConsolidatedPolicy","getFirewallConsolidatedPolicyOutput"], () => require("./getFirewallConsolidatedPolicy"));

export { GetFirewallConsolidatedPolicyListArgs, GetFirewallConsolidatedPolicyListResult, GetFirewallConsolidatedPolicyListOutputArgs } from "./getFirewallConsolidatedPolicyList";
export const getFirewallConsolidatedPolicyList: typeof import("./getFirewallConsolidatedPolicyList").getFirewallConsolidatedPolicyList = null as any;
export const getFirewallConsolidatedPolicyListOutput: typeof import("./getFirewallConsolidatedPolicyList").getFirewallConsolidatedPolicyListOutput = null as any;
utilities.lazyLoad(exports, ["getFirewallConsolidatedPolicyList","getFirewallConsolidatedPolicyListOutput"], () => require("./getFirewallConsolidatedPolicyList"));

export { GetFirewallDosPolicyArgs, GetFirewallDosPolicyResult, GetFirewallDosPolicyOutputArgs } from "./getFirewallDosPolicy";
export const getFirewallDosPolicy: typeof import("./getFirewallDosPolicy").getFirewallDosPolicy = null as any;
export const getFirewallDosPolicyOutput: typeof import("./getFirewallDosPolicy").getFirewallDosPolicyOutput = null as any;
utilities.lazyLoad(exports, ["getFirewallDosPolicy","getFirewallDosPolicyOutput"], () => require("./getFirewallDosPolicy"));

export { GetFirewallDosPolicy6Args, GetFirewallDosPolicy6Result, GetFirewallDosPolicy6OutputArgs } from "./getFirewallDosPolicy6";
export const getFirewallDosPolicy6: typeof import("./getFirewallDosPolicy6").getFirewallDosPolicy6 = null as any;
export const getFirewallDosPolicy6Output: typeof import("./getFirewallDosPolicy6").getFirewallDosPolicy6Output = null as any;
utilities.lazyLoad(exports, ["getFirewallDosPolicy6","getFirewallDosPolicy6Output"], () => require("./getFirewallDosPolicy6"));

export { GetFirewallDosPolicy6ListArgs, GetFirewallDosPolicy6ListResult, GetFirewallDosPolicy6ListOutputArgs } from "./getFirewallDosPolicy6List";
export const getFirewallDosPolicy6List: typeof import("./getFirewallDosPolicy6List").getFirewallDosPolicy6List = null as any;
export const getFirewallDosPolicy6ListOutput: typeof import("./getFirewallDosPolicy6List").getFirewallDosPolicy6ListOutput = null as any;
utilities.lazyLoad(exports, ["getFirewallDosPolicy6List","getFirewallDosPolicy6ListOutput"], () => require("./getFirewallDosPolicy6List"));

export { GetFirewallDosPolicyListArgs, GetFirewallDosPolicyListResult, GetFirewallDosPolicyListOutputArgs } from "./getFirewallDosPolicyList";
export const getFirewallDosPolicyList: typeof import("./getFirewallDosPolicyList").getFirewallDosPolicyList = null as any;
export const getFirewallDosPolicyListOutput: typeof import("./getFirewallDosPolicyList").getFirewallDosPolicyListOutput = null as any;
utilities.lazyLoad(exports, ["getFirewallDosPolicyList","getFirewallDosPolicyListOutput"], () => require("./getFirewallDosPolicyList"));

export { GetFirewallInternetServiceArgs, GetFirewallInternetServiceResult, GetFirewallInternetServiceOutputArgs } from "./getFirewallInternetService";
export const getFirewallInternetService: typeof import("./getFirewallInternetService").getFirewallInternetService = null as any;
export const getFirewallInternetServiceOutput: typeof import("./getFirewallInternetService").getFirewallInternetServiceOutput = null as any;
utilities.lazyLoad(exports, ["getFirewallInternetService","getFirewallInternetServiceOutput"], () => require("./getFirewallInternetService"));

export { GetFirewallInternetServiceCustomArgs, GetFirewallInternetServiceCustomResult, GetFirewallInternetServiceCustomOutputArgs } from "./getFirewallInternetServiceCustom";
export const getFirewallInternetServiceCustom: typeof import("./getFirewallInternetServiceCustom").getFirewallInternetServiceCustom = null as any;
export const getFirewallInternetServiceCustomOutput: typeof import("./getFirewallInternetServiceCustom").getFirewallInternetServiceCustomOutput = null as any;
utilities.lazyLoad(exports, ["getFirewallInternetServiceCustom","getFirewallInternetServiceCustomOutput"], () => require("./getFirewallInternetServiceCustom"));

export { GetFirewallInternetServiceCustomGroupArgs, GetFirewallInternetServiceCustomGroupResult, GetFirewallInternetServiceCustomGroupOutputArgs } from "./getFirewallInternetServiceCustomGroup";
export const getFirewallInternetServiceCustomGroup: typeof import("./getFirewallInternetServiceCustomGroup").getFirewallInternetServiceCustomGroup = null as any;
export const getFirewallInternetServiceCustomGroupOutput: typeof import("./getFirewallInternetServiceCustomGroup").getFirewallInternetServiceCustomGroupOutput = null as any;
utilities.lazyLoad(exports, ["getFirewallInternetServiceCustomGroup","getFirewallInternetServiceCustomGroupOutput"], () => require("./getFirewallInternetServiceCustomGroup"));

export { GetFirewallInternetServiceCustomGroupListArgs, GetFirewallInternetServiceCustomGroupListResult, GetFirewallInternetServiceCustomGroupListOutputArgs } from "./getFirewallInternetServiceCustomGroupList";
export const getFirewallInternetServiceCustomGroupList: typeof import("./getFirewallInternetServiceCustomGroupList").getFirewallInternetServiceCustomGroupList = null as any;
export const getFirewallInternetServiceCustomGroupListOutput: typeof import("./getFirewallInternetServiceCustomGroupList").getFirewallInternetServiceCustomGroupListOutput = null as any;
utilities.lazyLoad(exports, ["getFirewallInternetServiceCustomGroupList","getFirewallInternetServiceCustomGroupListOutput"], () => require("./getFirewallInternetServiceCustomGroupList"));

export { GetFirewallInternetServiceCustomListArgs, GetFirewallInternetServiceCustomListResult, GetFirewallInternetServiceCustomListOutputArgs } from "./getFirewallInternetServiceCustomList";
export const getFirewallInternetServiceCustomList: typeof import("./getFirewallInternetServiceCustomList").getFirewallInternetServiceCustomList = null as any;
export const getFirewallInternetServiceCustomListOutput: typeof import("./getFirewallInternetServiceCustomList").getFirewallInternetServiceCustomListOutput = null as any;
utilities.lazyLoad(exports, ["getFirewallInternetServiceCustomList","getFirewallInternetServiceCustomListOutput"], () => require("./getFirewallInternetServiceCustomList"));

export { GetFirewallInternetServiceDefinitionArgs, GetFirewallInternetServiceDefinitionResult, GetFirewallInternetServiceDefinitionOutputArgs } from "./getFirewallInternetServiceDefinition";
export const getFirewallInternetServiceDefinition: typeof import("./getFirewallInternetServiceDefinition").getFirewallInternetServiceDefinition = null as any;
export const getFirewallInternetServiceDefinitionOutput: typeof import("./getFirewallInternetServiceDefinition").getFirewallInternetServiceDefinitionOutput = null as any;
utilities.lazyLoad(exports, ["getFirewallInternetServiceDefinition","getFirewallInternetServiceDefinitionOutput"], () => require("./getFirewallInternetServiceDefinition"));

export { GetFirewallInternetServiceDefinitionListArgs, GetFirewallInternetServiceDefinitionListResult, GetFirewallInternetServiceDefinitionListOutputArgs } from "./getFirewallInternetServiceDefinitionList";
export const getFirewallInternetServiceDefinitionList: typeof import("./getFirewallInternetServiceDefinitionList").getFirewallInternetServiceDefinitionList = null as any;
export const getFirewallInternetServiceDefinitionListOutput: typeof import("./getFirewallInternetServiceDefinitionList").getFirewallInternetServiceDefinitionListOutput = null as any;
utilities.lazyLoad(exports, ["getFirewallInternetServiceDefinitionList","getFirewallInternetServiceDefinitionListOutput"], () => require("./getFirewallInternetServiceDefinitionList"));

export { GetFirewallInternetServiceExtensionArgs, GetFirewallInternetServiceExtensionResult, GetFirewallInternetServiceExtensionOutputArgs } from "./getFirewallInternetServiceExtension";
export const getFirewallInternetServiceExtension: typeof import("./getFirewallInternetServiceExtension").getFirewallInternetServiceExtension = null as any;
export const getFirewallInternetServiceExtensionOutput: typeof import("./getFirewallInternetServiceExtension").getFirewallInternetServiceExtensionOutput = null as any;
utilities.lazyLoad(exports, ["getFirewallInternetServiceExtension","getFirewallInternetServiceExtensionOutput"], () => require("./getFirewallInternetServiceExtension"));

export { GetFirewallInternetServiceExtensionListArgs, GetFirewallInternetServiceExtensionListResult, GetFirewallInternetServiceExtensionListOutputArgs } from "./getFirewallInternetServiceExtensionList";
export const getFirewallInternetServiceExtensionList: typeof import("./getFirewallInternetServiceExtensionList").getFirewallInternetServiceExtensionList = null as any;
export const getFirewallInternetServiceExtensionListOutput: typeof import("./getFirewallInternetServiceExtensionList").getFirewallInternetServiceExtensionListOutput = null as any;
utilities.lazyLoad(exports, ["getFirewallInternetServiceExtensionList","getFirewallInternetServiceExtensionListOutput"], () => require("./getFirewallInternetServiceExtensionList"));

export { GetFirewallInternetServiceGroupArgs, GetFirewallInternetServiceGroupResult, GetFirewallInternetServiceGroupOutputArgs } from "./getFirewallInternetServiceGroup";
export const getFirewallInternetServiceGroup: typeof import("./getFirewallInternetServiceGroup").getFirewallInternetServiceGroup = null as any;
export const getFirewallInternetServiceGroupOutput: typeof import("./getFirewallInternetServiceGroup").getFirewallInternetServiceGroupOutput = null as any;
utilities.lazyLoad(exports, ["getFirewallInternetServiceGroup","getFirewallInternetServiceGroupOutput"], () => require("./getFirewallInternetServiceGroup"));

export { GetFirewallInternetServiceGroupListArgs, GetFirewallInternetServiceGroupListResult, GetFirewallInternetServiceGroupListOutputArgs } from "./getFirewallInternetServiceGroupList";
export const getFirewallInternetServiceGroupList: typeof import("./getFirewallInternetServiceGroupList").getFirewallInternetServiceGroupList = null as any;
export const getFirewallInternetServiceGroupListOutput: typeof import("./getFirewallInternetServiceGroupList").getFirewallInternetServiceGroupListOutput = null as any;
utilities.lazyLoad(exports, ["getFirewallInternetServiceGroupList","getFirewallInternetServiceGroupListOutput"], () => require("./getFirewallInternetServiceGroupList"));

export { GetFirewallInternetServiceListArgs, GetFirewallInternetServiceListResult, GetFirewallInternetServiceListOutputArgs } from "./getFirewallInternetServiceList";
export const getFirewallInternetServiceList: typeof import("./getFirewallInternetServiceList").getFirewallInternetServiceList = null as any;
export const getFirewallInternetServiceListOutput: typeof import("./getFirewallInternetServiceList").getFirewallInternetServiceListOutput = null as any;
utilities.lazyLoad(exports, ["getFirewallInternetServiceList","getFirewallInternetServiceListOutput"], () => require("./getFirewallInternetServiceList"));

export { GetFirewallIpv6EhFilterArgs, GetFirewallIpv6EhFilterResult, GetFirewallIpv6EhFilterOutputArgs } from "./getFirewallIpv6EhFilter";
export const getFirewallIpv6EhFilter: typeof import("./getFirewallIpv6EhFilter").getFirewallIpv6EhFilter = null as any;
export const getFirewallIpv6EhFilterOutput: typeof import("./getFirewallIpv6EhFilter").getFirewallIpv6EhFilterOutput = null as any;
utilities.lazyLoad(exports, ["getFirewallIpv6EhFilter","getFirewallIpv6EhFilterOutput"], () => require("./getFirewallIpv6EhFilter"));

export { GetFirewallMulticastAddressArgs, GetFirewallMulticastAddressResult, GetFirewallMulticastAddressOutputArgs } from "./getFirewallMulticastAddress";
export const getFirewallMulticastAddress: typeof import("./getFirewallMulticastAddress").getFirewallMulticastAddress = null as any;
export const getFirewallMulticastAddressOutput: typeof import("./getFirewallMulticastAddress").getFirewallMulticastAddressOutput = null as any;
utilities.lazyLoad(exports, ["getFirewallMulticastAddress","getFirewallMulticastAddressOutput"], () => require("./getFirewallMulticastAddress"));

export { GetFirewallMulticastAddress6Args, GetFirewallMulticastAddress6Result, GetFirewallMulticastAddress6OutputArgs } from "./getFirewallMulticastAddress6";
export const getFirewallMulticastAddress6: typeof import("./getFirewallMulticastAddress6").getFirewallMulticastAddress6 = null as any;
export const getFirewallMulticastAddress6Output: typeof import("./getFirewallMulticastAddress6").getFirewallMulticastAddress6Output = null as any;
utilities.lazyLoad(exports, ["getFirewallMulticastAddress6","getFirewallMulticastAddress6Output"], () => require("./getFirewallMulticastAddress6"));

export { GetFirewallMulticastAddress6ListArgs, GetFirewallMulticastAddress6ListResult, GetFirewallMulticastAddress6ListOutputArgs } from "./getFirewallMulticastAddress6List";
export const getFirewallMulticastAddress6List: typeof import("./getFirewallMulticastAddress6List").getFirewallMulticastAddress6List = null as any;
export const getFirewallMulticastAddress6ListOutput: typeof import("./getFirewallMulticastAddress6List").getFirewallMulticastAddress6ListOutput = null as any;
utilities.lazyLoad(exports, ["getFirewallMulticastAddress6List","getFirewallMulticastAddress6ListOutput"], () => require("./getFirewallMulticastAddress6List"));

export { GetFirewallMulticastAddressListArgs, GetFirewallMulticastAddressListResult, GetFirewallMulticastAddressListOutputArgs } from "./getFirewallMulticastAddressList";
export const getFirewallMulticastAddressList: typeof import("./getFirewallMulticastAddressList").getFirewallMulticastAddressList = null as any;
export const getFirewallMulticastAddressListOutput: typeof import("./getFirewallMulticastAddressList").getFirewallMulticastAddressListOutput = null as any;
utilities.lazyLoad(exports, ["getFirewallMulticastAddressList","getFirewallMulticastAddressListOutput"], () => require("./getFirewallMulticastAddressList"));

export { GetFirewallPolicyArgs, GetFirewallPolicyResult, GetFirewallPolicyOutputArgs } from "./getFirewallPolicy";
export const getFirewallPolicy: typeof import("./getFirewallPolicy").getFirewallPolicy = null as any;
export const getFirewallPolicyOutput: typeof import("./getFirewallPolicy").getFirewallPolicyOutput = null as any;
utilities.lazyLoad(exports, ["getFirewallPolicy","getFirewallPolicyOutput"], () => require("./getFirewallPolicy"));

export { GetFirewallPolicy46Args, GetFirewallPolicy46Result, GetFirewallPolicy46OutputArgs } from "./getFirewallPolicy46";
export const getFirewallPolicy46: typeof import("./getFirewallPolicy46").getFirewallPolicy46 = null as any;
export const getFirewallPolicy46Output: typeof import("./getFirewallPolicy46").getFirewallPolicy46Output = null as any;
utilities.lazyLoad(exports, ["getFirewallPolicy46","getFirewallPolicy46Output"], () => require("./getFirewallPolicy46"));

export { GetFirewallPolicy46ListArgs, GetFirewallPolicy46ListResult, GetFirewallPolicy46ListOutputArgs } from "./getFirewallPolicy46List";
export const getFirewallPolicy46List: typeof import("./getFirewallPolicy46List").getFirewallPolicy46List = null as any;
export const getFirewallPolicy46ListOutput: typeof import("./getFirewallPolicy46List").getFirewallPolicy46ListOutput = null as any;
utilities.lazyLoad(exports, ["getFirewallPolicy46List","getFirewallPolicy46ListOutput"], () => require("./getFirewallPolicy46List"));

export { GetFirewallPolicy6Args, GetFirewallPolicy6Result, GetFirewallPolicy6OutputArgs } from "./getFirewallPolicy6";
export const getFirewallPolicy6: typeof import("./getFirewallPolicy6").getFirewallPolicy6 = null as any;
export const getFirewallPolicy6Output: typeof import("./getFirewallPolicy6").getFirewallPolicy6Output = null as any;
utilities.lazyLoad(exports, ["getFirewallPolicy6","getFirewallPolicy6Output"], () => require("./getFirewallPolicy6"));

export { GetFirewallPolicy64Args, GetFirewallPolicy64Result, GetFirewallPolicy64OutputArgs } from "./getFirewallPolicy64";
export const getFirewallPolicy64: typeof import("./getFirewallPolicy64").getFirewallPolicy64 = null as any;
export const getFirewallPolicy64Output: typeof import("./getFirewallPolicy64").getFirewallPolicy64Output = null as any;
utilities.lazyLoad(exports, ["getFirewallPolicy64","getFirewallPolicy64Output"], () => require("./getFirewallPolicy64"));

export { GetFirewallPolicy64ListArgs, GetFirewallPolicy64ListResult, GetFirewallPolicy64ListOutputArgs } from "./getFirewallPolicy64List";
export const getFirewallPolicy64List: typeof import("./getFirewallPolicy64List").getFirewallPolicy64List = null as any;
export const getFirewallPolicy64ListOutput: typeof import("./getFirewallPolicy64List").getFirewallPolicy64ListOutput = null as any;
utilities.lazyLoad(exports, ["getFirewallPolicy64List","getFirewallPolicy64ListOutput"], () => require("./getFirewallPolicy64List"));

export { GetFirewallPolicy6ListArgs, GetFirewallPolicy6ListResult, GetFirewallPolicy6ListOutputArgs } from "./getFirewallPolicy6List";
export const getFirewallPolicy6List: typeof import("./getFirewallPolicy6List").getFirewallPolicy6List = null as any;
export const getFirewallPolicy6ListOutput: typeof import("./getFirewallPolicy6List").getFirewallPolicy6ListOutput = null as any;
utilities.lazyLoad(exports, ["getFirewallPolicy6List","getFirewallPolicy6ListOutput"], () => require("./getFirewallPolicy6List"));

export { GetFirewallPolicyListArgs, GetFirewallPolicyListResult, GetFirewallPolicyListOutputArgs } from "./getFirewallPolicyList";
export const getFirewallPolicyList: typeof import("./getFirewallPolicyList").getFirewallPolicyList = null as any;
export const getFirewallPolicyListOutput: typeof import("./getFirewallPolicyList").getFirewallPolicyListOutput = null as any;
utilities.lazyLoad(exports, ["getFirewallPolicyList","getFirewallPolicyListOutput"], () => require("./getFirewallPolicyList"));

export { GetFirewallProfileProtocolOptionsArgs, GetFirewallProfileProtocolOptionsResult, GetFirewallProfileProtocolOptionsOutputArgs } from "./getFirewallProfileProtocolOptions";
export const getFirewallProfileProtocolOptions: typeof import("./getFirewallProfileProtocolOptions").getFirewallProfileProtocolOptions = null as any;
export const getFirewallProfileProtocolOptionsOutput: typeof import("./getFirewallProfileProtocolOptions").getFirewallProfileProtocolOptionsOutput = null as any;
utilities.lazyLoad(exports, ["getFirewallProfileProtocolOptions","getFirewallProfileProtocolOptionsOutput"], () => require("./getFirewallProfileProtocolOptions"));

export { GetFirewallProfileProtocolOptionsListArgs, GetFirewallProfileProtocolOptionsListResult, GetFirewallProfileProtocolOptionsListOutputArgs } from "./getFirewallProfileProtocolOptionsList";
export const getFirewallProfileProtocolOptionsList: typeof import("./getFirewallProfileProtocolOptionsList").getFirewallProfileProtocolOptionsList = null as any;
export const getFirewallProfileProtocolOptionsListOutput: typeof import("./getFirewallProfileProtocolOptionsList").getFirewallProfileProtocolOptionsListOutput = null as any;
utilities.lazyLoad(exports, ["getFirewallProfileProtocolOptionsList","getFirewallProfileProtocolOptionsListOutput"], () => require("./getFirewallProfileProtocolOptionsList"));

export { GetFirewallProxyAddressArgs, GetFirewallProxyAddressResult, GetFirewallProxyAddressOutputArgs } from "./getFirewallProxyAddress";
export const getFirewallProxyAddress: typeof import("./getFirewallProxyAddress").getFirewallProxyAddress = null as any;
export const getFirewallProxyAddressOutput: typeof import("./getFirewallProxyAddress").getFirewallProxyAddressOutput = null as any;
utilities.lazyLoad(exports, ["getFirewallProxyAddress","getFirewallProxyAddressOutput"], () => require("./getFirewallProxyAddress"));

export { GetFirewallProxyAddressListArgs, GetFirewallProxyAddressListResult, GetFirewallProxyAddressListOutputArgs } from "./getFirewallProxyAddressList";
export const getFirewallProxyAddressList: typeof import("./getFirewallProxyAddressList").getFirewallProxyAddressList = null as any;
export const getFirewallProxyAddressListOutput: typeof import("./getFirewallProxyAddressList").getFirewallProxyAddressListOutput = null as any;
utilities.lazyLoad(exports, ["getFirewallProxyAddressList","getFirewallProxyAddressListOutput"], () => require("./getFirewallProxyAddressList"));

export { GetFirewallProxyAddrgrpArgs, GetFirewallProxyAddrgrpResult, GetFirewallProxyAddrgrpOutputArgs } from "./getFirewallProxyAddrgrp";
export const getFirewallProxyAddrgrp: typeof import("./getFirewallProxyAddrgrp").getFirewallProxyAddrgrp = null as any;
export const getFirewallProxyAddrgrpOutput: typeof import("./getFirewallProxyAddrgrp").getFirewallProxyAddrgrpOutput = null as any;
utilities.lazyLoad(exports, ["getFirewallProxyAddrgrp","getFirewallProxyAddrgrpOutput"], () => require("./getFirewallProxyAddrgrp"));

export { GetFirewallProxyAddrgrpListArgs, GetFirewallProxyAddrgrpListResult, GetFirewallProxyAddrgrpListOutputArgs } from "./getFirewallProxyAddrgrpList";
export const getFirewallProxyAddrgrpList: typeof import("./getFirewallProxyAddrgrpList").getFirewallProxyAddrgrpList = null as any;
export const getFirewallProxyAddrgrpListOutput: typeof import("./getFirewallProxyAddrgrpList").getFirewallProxyAddrgrpListOutput = null as any;
utilities.lazyLoad(exports, ["getFirewallProxyAddrgrpList","getFirewallProxyAddrgrpListOutput"], () => require("./getFirewallProxyAddrgrpList"));

export { GetFirewallProxyPolicyArgs, GetFirewallProxyPolicyResult, GetFirewallProxyPolicyOutputArgs } from "./getFirewallProxyPolicy";
export const getFirewallProxyPolicy: typeof import("./getFirewallProxyPolicy").getFirewallProxyPolicy = null as any;
export const getFirewallProxyPolicyOutput: typeof import("./getFirewallProxyPolicy").getFirewallProxyPolicyOutput = null as any;
utilities.lazyLoad(exports, ["getFirewallProxyPolicy","getFirewallProxyPolicyOutput"], () => require("./getFirewallProxyPolicy"));

export { GetFirewallProxyPolicyListArgs, GetFirewallProxyPolicyListResult, GetFirewallProxyPolicyListOutputArgs } from "./getFirewallProxyPolicyList";
export const getFirewallProxyPolicyList: typeof import("./getFirewallProxyPolicyList").getFirewallProxyPolicyList = null as any;
export const getFirewallProxyPolicyListOutput: typeof import("./getFirewallProxyPolicyList").getFirewallProxyPolicyListOutput = null as any;
utilities.lazyLoad(exports, ["getFirewallProxyPolicyList","getFirewallProxyPolicyListOutput"], () => require("./getFirewallProxyPolicyList"));

export { GetFirewallScheduleGroupArgs, GetFirewallScheduleGroupResult, GetFirewallScheduleGroupOutputArgs } from "./getFirewallScheduleGroup";
export const getFirewallScheduleGroup: typeof import("./getFirewallScheduleGroup").getFirewallScheduleGroup = null as any;
export const getFirewallScheduleGroupOutput: typeof import("./getFirewallScheduleGroup").getFirewallScheduleGroupOutput = null as any;
utilities.lazyLoad(exports, ["getFirewallScheduleGroup","getFirewallScheduleGroupOutput"], () => require("./getFirewallScheduleGroup"));

export { GetFirewallScheduleGroupListArgs, GetFirewallScheduleGroupListResult, GetFirewallScheduleGroupListOutputArgs } from "./getFirewallScheduleGroupList";
export const getFirewallScheduleGroupList: typeof import("./getFirewallScheduleGroupList").getFirewallScheduleGroupList = null as any;
export const getFirewallScheduleGroupListOutput: typeof import("./getFirewallScheduleGroupList").getFirewallScheduleGroupListOutput = null as any;
utilities.lazyLoad(exports, ["getFirewallScheduleGroupList","getFirewallScheduleGroupListOutput"], () => require("./getFirewallScheduleGroupList"));

export { GetFirewallScheduleOnetimeArgs, GetFirewallScheduleOnetimeResult, GetFirewallScheduleOnetimeOutputArgs } from "./getFirewallScheduleOnetime";
export const getFirewallScheduleOnetime: typeof import("./getFirewallScheduleOnetime").getFirewallScheduleOnetime = null as any;
export const getFirewallScheduleOnetimeOutput: typeof import("./getFirewallScheduleOnetime").getFirewallScheduleOnetimeOutput = null as any;
utilities.lazyLoad(exports, ["getFirewallScheduleOnetime","getFirewallScheduleOnetimeOutput"], () => require("./getFirewallScheduleOnetime"));

export { GetFirewallScheduleOnetimeListArgs, GetFirewallScheduleOnetimeListResult, GetFirewallScheduleOnetimeListOutputArgs } from "./getFirewallScheduleOnetimeList";
export const getFirewallScheduleOnetimeList: typeof import("./getFirewallScheduleOnetimeList").getFirewallScheduleOnetimeList = null as any;
export const getFirewallScheduleOnetimeListOutput: typeof import("./getFirewallScheduleOnetimeList").getFirewallScheduleOnetimeListOutput = null as any;
utilities.lazyLoad(exports, ["getFirewallScheduleOnetimeList","getFirewallScheduleOnetimeListOutput"], () => require("./getFirewallScheduleOnetimeList"));

export { GetFirewallScheduleRecurringArgs, GetFirewallScheduleRecurringResult, GetFirewallScheduleRecurringOutputArgs } from "./getFirewallScheduleRecurring";
export const getFirewallScheduleRecurring: typeof import("./getFirewallScheduleRecurring").getFirewallScheduleRecurring = null as any;
export const getFirewallScheduleRecurringOutput: typeof import("./getFirewallScheduleRecurring").getFirewallScheduleRecurringOutput = null as any;
utilities.lazyLoad(exports, ["getFirewallScheduleRecurring","getFirewallScheduleRecurringOutput"], () => require("./getFirewallScheduleRecurring"));

export { GetFirewallScheduleRecurringListArgs, GetFirewallScheduleRecurringListResult, GetFirewallScheduleRecurringListOutputArgs } from "./getFirewallScheduleRecurringList";
export const getFirewallScheduleRecurringList: typeof import("./getFirewallScheduleRecurringList").getFirewallScheduleRecurringList = null as any;
export const getFirewallScheduleRecurringListOutput: typeof import("./getFirewallScheduleRecurringList").getFirewallScheduleRecurringListOutput = null as any;
utilities.lazyLoad(exports, ["getFirewallScheduleRecurringList","getFirewallScheduleRecurringListOutput"], () => require("./getFirewallScheduleRecurringList"));

export { GetFirewallServiceCategoryArgs, GetFirewallServiceCategoryResult, GetFirewallServiceCategoryOutputArgs } from "./getFirewallServiceCategory";
export const getFirewallServiceCategory: typeof import("./getFirewallServiceCategory").getFirewallServiceCategory = null as any;
export const getFirewallServiceCategoryOutput: typeof import("./getFirewallServiceCategory").getFirewallServiceCategoryOutput = null as any;
utilities.lazyLoad(exports, ["getFirewallServiceCategory","getFirewallServiceCategoryOutput"], () => require("./getFirewallServiceCategory"));

export { GetFirewallServiceCategoryListArgs, GetFirewallServiceCategoryListResult, GetFirewallServiceCategoryListOutputArgs } from "./getFirewallServiceCategoryList";
export const getFirewallServiceCategoryList: typeof import("./getFirewallServiceCategoryList").getFirewallServiceCategoryList = null as any;
export const getFirewallServiceCategoryListOutput: typeof import("./getFirewallServiceCategoryList").getFirewallServiceCategoryListOutput = null as any;
utilities.lazyLoad(exports, ["getFirewallServiceCategoryList","getFirewallServiceCategoryListOutput"], () => require("./getFirewallServiceCategoryList"));

export { GetFirewallServiceCustomArgs, GetFirewallServiceCustomResult, GetFirewallServiceCustomOutputArgs } from "./getFirewallServiceCustom";
export const getFirewallServiceCustom: typeof import("./getFirewallServiceCustom").getFirewallServiceCustom = null as any;
export const getFirewallServiceCustomOutput: typeof import("./getFirewallServiceCustom").getFirewallServiceCustomOutput = null as any;
utilities.lazyLoad(exports, ["getFirewallServiceCustom","getFirewallServiceCustomOutput"], () => require("./getFirewallServiceCustom"));

export { GetFirewallServiceCustomListArgs, GetFirewallServiceCustomListResult, GetFirewallServiceCustomListOutputArgs } from "./getFirewallServiceCustomList";
export const getFirewallServiceCustomList: typeof import("./getFirewallServiceCustomList").getFirewallServiceCustomList = null as any;
export const getFirewallServiceCustomListOutput: typeof import("./getFirewallServiceCustomList").getFirewallServiceCustomListOutput = null as any;
utilities.lazyLoad(exports, ["getFirewallServiceCustomList","getFirewallServiceCustomListOutput"], () => require("./getFirewallServiceCustomList"));

export { GetFirewallServiceGroupArgs, GetFirewallServiceGroupResult, GetFirewallServiceGroupOutputArgs } from "./getFirewallServiceGroup";
export const getFirewallServiceGroup: typeof import("./getFirewallServiceGroup").getFirewallServiceGroup = null as any;
export const getFirewallServiceGroupOutput: typeof import("./getFirewallServiceGroup").getFirewallServiceGroupOutput = null as any;
utilities.lazyLoad(exports, ["getFirewallServiceGroup","getFirewallServiceGroupOutput"], () => require("./getFirewallServiceGroup"));

export { GetFirewallServiceGroupListArgs, GetFirewallServiceGroupListResult, GetFirewallServiceGroupListOutputArgs } from "./getFirewallServiceGroupList";
export const getFirewallServiceGroupList: typeof import("./getFirewallServiceGroupList").getFirewallServiceGroupList = null as any;
export const getFirewallServiceGroupListOutput: typeof import("./getFirewallServiceGroupList").getFirewallServiceGroupListOutput = null as any;
utilities.lazyLoad(exports, ["getFirewallServiceGroupList","getFirewallServiceGroupListOutput"], () => require("./getFirewallServiceGroupList"));

export { GetFirewallShaperPerIpShaperArgs, GetFirewallShaperPerIpShaperResult, GetFirewallShaperPerIpShaperOutputArgs } from "./getFirewallShaperPerIpShaper";
export const getFirewallShaperPerIpShaper: typeof import("./getFirewallShaperPerIpShaper").getFirewallShaperPerIpShaper = null as any;
export const getFirewallShaperPerIpShaperOutput: typeof import("./getFirewallShaperPerIpShaper").getFirewallShaperPerIpShaperOutput = null as any;
utilities.lazyLoad(exports, ["getFirewallShaperPerIpShaper","getFirewallShaperPerIpShaperOutput"], () => require("./getFirewallShaperPerIpShaper"));

export { GetFirewallShaperPerIpShaperListArgs, GetFirewallShaperPerIpShaperListResult, GetFirewallShaperPerIpShaperListOutputArgs } from "./getFirewallShaperPerIpShaperList";
export const getFirewallShaperPerIpShaperList: typeof import("./getFirewallShaperPerIpShaperList").getFirewallShaperPerIpShaperList = null as any;
export const getFirewallShaperPerIpShaperListOutput: typeof import("./getFirewallShaperPerIpShaperList").getFirewallShaperPerIpShaperListOutput = null as any;
utilities.lazyLoad(exports, ["getFirewallShaperPerIpShaperList","getFirewallShaperPerIpShaperListOutput"], () => require("./getFirewallShaperPerIpShaperList"));

export { GetFirewallShaperTrafficShaperArgs, GetFirewallShaperTrafficShaperResult, GetFirewallShaperTrafficShaperOutputArgs } from "./getFirewallShaperTrafficShaper";
export const getFirewallShaperTrafficShaper: typeof import("./getFirewallShaperTrafficShaper").getFirewallShaperTrafficShaper = null as any;
export const getFirewallShaperTrafficShaperOutput: typeof import("./getFirewallShaperTrafficShaper").getFirewallShaperTrafficShaperOutput = null as any;
utilities.lazyLoad(exports, ["getFirewallShaperTrafficShaper","getFirewallShaperTrafficShaperOutput"], () => require("./getFirewallShaperTrafficShaper"));

export { GetFirewallShaperTrafficShaperListArgs, GetFirewallShaperTrafficShaperListResult, GetFirewallShaperTrafficShaperListOutputArgs } from "./getFirewallShaperTrafficShaperList";
export const getFirewallShaperTrafficShaperList: typeof import("./getFirewallShaperTrafficShaperList").getFirewallShaperTrafficShaperList = null as any;
export const getFirewallShaperTrafficShaperListOutput: typeof import("./getFirewallShaperTrafficShaperList").getFirewallShaperTrafficShaperListOutput = null as any;
utilities.lazyLoad(exports, ["getFirewallShaperTrafficShaperList","getFirewallShaperTrafficShaperListOutput"], () => require("./getFirewallShaperTrafficShaperList"));

export { GetFirewallWildcardFqdnCustomArgs, GetFirewallWildcardFqdnCustomResult, GetFirewallWildcardFqdnCustomOutputArgs } from "./getFirewallWildcardFqdnCustom";
export const getFirewallWildcardFqdnCustom: typeof import("./getFirewallWildcardFqdnCustom").getFirewallWildcardFqdnCustom = null as any;
export const getFirewallWildcardFqdnCustomOutput: typeof import("./getFirewallWildcardFqdnCustom").getFirewallWildcardFqdnCustomOutput = null as any;
utilities.lazyLoad(exports, ["getFirewallWildcardFqdnCustom","getFirewallWildcardFqdnCustomOutput"], () => require("./getFirewallWildcardFqdnCustom"));

export { GetFirewallWildcardFqdnCustomListArgs, GetFirewallWildcardFqdnCustomListResult, GetFirewallWildcardFqdnCustomListOutputArgs } from "./getFirewallWildcardFqdnCustomList";
export const getFirewallWildcardFqdnCustomList: typeof import("./getFirewallWildcardFqdnCustomList").getFirewallWildcardFqdnCustomList = null as any;
export const getFirewallWildcardFqdnCustomListOutput: typeof import("./getFirewallWildcardFqdnCustomList").getFirewallWildcardFqdnCustomListOutput = null as any;
utilities.lazyLoad(exports, ["getFirewallWildcardFqdnCustomList","getFirewallWildcardFqdnCustomListOutput"], () => require("./getFirewallWildcardFqdnCustomList"));

export { GetFirewallWildcardFqdnGroupArgs, GetFirewallWildcardFqdnGroupResult, GetFirewallWildcardFqdnGroupOutputArgs } from "./getFirewallWildcardFqdnGroup";
export const getFirewallWildcardFqdnGroup: typeof import("./getFirewallWildcardFqdnGroup").getFirewallWildcardFqdnGroup = null as any;
export const getFirewallWildcardFqdnGroupOutput: typeof import("./getFirewallWildcardFqdnGroup").getFirewallWildcardFqdnGroupOutput = null as any;
utilities.lazyLoad(exports, ["getFirewallWildcardFqdnGroup","getFirewallWildcardFqdnGroupOutput"], () => require("./getFirewallWildcardFqdnGroup"));

export { GetFirewallWildcardFqdnGroupListArgs, GetFirewallWildcardFqdnGroupListResult, GetFirewallWildcardFqdnGroupListOutputArgs } from "./getFirewallWildcardFqdnGroupList";
export const getFirewallWildcardFqdnGroupList: typeof import("./getFirewallWildcardFqdnGroupList").getFirewallWildcardFqdnGroupList = null as any;
export const getFirewallWildcardFqdnGroupListOutput: typeof import("./getFirewallWildcardFqdnGroupList").getFirewallWildcardFqdnGroupListOutput = null as any;
utilities.lazyLoad(exports, ["getFirewallWildcardFqdnGroupList","getFirewallWildcardFqdnGroupListOutput"], () => require("./getFirewallWildcardFqdnGroupList"));

export { GetIPMaskCIDRArgs, GetIPMaskCIDRResult, GetIPMaskCIDROutputArgs } from "./getIPMaskCIDR";
export const getIPMaskCIDR: typeof import("./getIPMaskCIDR").getIPMaskCIDR = null as any;
export const getIPMaskCIDROutput: typeof import("./getIPMaskCIDR").getIPMaskCIDROutput = null as any;
utilities.lazyLoad(exports, ["getIPMaskCIDR","getIPMaskCIDROutput"], () => require("./getIPMaskCIDR"));

export { GetJSONGenericAPIArgs, GetJSONGenericAPIResult, GetJSONGenericAPIOutputArgs } from "./getJSONGenericAPI";
export const getJSONGenericAPI: typeof import("./getJSONGenericAPI").getJSONGenericAPI = null as any;
export const getJSONGenericAPIOutput: typeof import("./getJSONGenericAPI").getJSONGenericAPIOutput = null as any;
utilities.lazyLoad(exports, ["getJSONGenericAPI","getJSONGenericAPIOutput"], () => require("./getJSONGenericAPI"));

export { GetRouterAccessListArgs, GetRouterAccessListResult, GetRouterAccessListOutputArgs } from "./getRouterAccessList";
export const getRouterAccessList: typeof import("./getRouterAccessList").getRouterAccessList = null as any;
export const getRouterAccessListOutput: typeof import("./getRouterAccessList").getRouterAccessListOutput = null as any;
utilities.lazyLoad(exports, ["getRouterAccessList","getRouterAccessListOutput"], () => require("./getRouterAccessList"));

export { GetRouterAccessList6Args, GetRouterAccessList6Result, GetRouterAccessList6OutputArgs } from "./getRouterAccessList6";
export const getRouterAccessList6: typeof import("./getRouterAccessList6").getRouterAccessList6 = null as any;
export const getRouterAccessList6Output: typeof import("./getRouterAccessList6").getRouterAccessList6Output = null as any;
utilities.lazyLoad(exports, ["getRouterAccessList6","getRouterAccessList6Output"], () => require("./getRouterAccessList6"));

export { GetRouterAccessList6ListArgs, GetRouterAccessList6ListResult, GetRouterAccessList6ListOutputArgs } from "./getRouterAccessList6List";
export const getRouterAccessList6List: typeof import("./getRouterAccessList6List").getRouterAccessList6List = null as any;
export const getRouterAccessList6ListOutput: typeof import("./getRouterAccessList6List").getRouterAccessList6ListOutput = null as any;
utilities.lazyLoad(exports, ["getRouterAccessList6List","getRouterAccessList6ListOutput"], () => require("./getRouterAccessList6List"));

export { GetRouterAccessListListArgs, GetRouterAccessListListResult, GetRouterAccessListListOutputArgs } from "./getRouterAccessListList";
export const getRouterAccessListList: typeof import("./getRouterAccessListList").getRouterAccessListList = null as any;
export const getRouterAccessListListOutput: typeof import("./getRouterAccessListList").getRouterAccessListListOutput = null as any;
utilities.lazyLoad(exports, ["getRouterAccessListList","getRouterAccessListListOutput"], () => require("./getRouterAccessListList"));

export { GetRouterAspathListArgs, GetRouterAspathListResult, GetRouterAspathListOutputArgs } from "./getRouterAspathList";
export const getRouterAspathList: typeof import("./getRouterAspathList").getRouterAspathList = null as any;
export const getRouterAspathListOutput: typeof import("./getRouterAspathList").getRouterAspathListOutput = null as any;
utilities.lazyLoad(exports, ["getRouterAspathList","getRouterAspathListOutput"], () => require("./getRouterAspathList"));

export { GetRouterAspathListListArgs, GetRouterAspathListListResult, GetRouterAspathListListOutputArgs } from "./getRouterAspathListList";
export const getRouterAspathListList: typeof import("./getRouterAspathListList").getRouterAspathListList = null as any;
export const getRouterAspathListListOutput: typeof import("./getRouterAspathListList").getRouterAspathListListOutput = null as any;
utilities.lazyLoad(exports, ["getRouterAspathListList","getRouterAspathListListOutput"], () => require("./getRouterAspathListList"));

export { GetRouterAuthPathArgs, GetRouterAuthPathResult, GetRouterAuthPathOutputArgs } from "./getRouterAuthPath";
export const getRouterAuthPath: typeof import("./getRouterAuthPath").getRouterAuthPath = null as any;
export const getRouterAuthPathOutput: typeof import("./getRouterAuthPath").getRouterAuthPathOutput = null as any;
utilities.lazyLoad(exports, ["getRouterAuthPath","getRouterAuthPathOutput"], () => require("./getRouterAuthPath"));

export { GetRouterAuthPathListArgs, GetRouterAuthPathListResult, GetRouterAuthPathListOutputArgs } from "./getRouterAuthPathList";
export const getRouterAuthPathList: typeof import("./getRouterAuthPathList").getRouterAuthPathList = null as any;
export const getRouterAuthPathListOutput: typeof import("./getRouterAuthPathList").getRouterAuthPathListOutput = null as any;
utilities.lazyLoad(exports, ["getRouterAuthPathList","getRouterAuthPathListOutput"], () => require("./getRouterAuthPathList"));

export { GetRouterBfdArgs, GetRouterBfdResult, GetRouterBfdOutputArgs } from "./getRouterBfd";
export const getRouterBfd: typeof import("./getRouterBfd").getRouterBfd = null as any;
export const getRouterBfdOutput: typeof import("./getRouterBfd").getRouterBfdOutput = null as any;
utilities.lazyLoad(exports, ["getRouterBfd","getRouterBfdOutput"], () => require("./getRouterBfd"));

export { GetRouterBfd6Args, GetRouterBfd6Result, GetRouterBfd6OutputArgs } from "./getRouterBfd6";
export const getRouterBfd6: typeof import("./getRouterBfd6").getRouterBfd6 = null as any;
export const getRouterBfd6Output: typeof import("./getRouterBfd6").getRouterBfd6Output = null as any;
utilities.lazyLoad(exports, ["getRouterBfd6","getRouterBfd6Output"], () => require("./getRouterBfd6"));

export { GetRouterBgpArgs, GetRouterBgpResult, GetRouterBgpOutputArgs } from "./getRouterBgp";
export const getRouterBgp: typeof import("./getRouterBgp").getRouterBgp = null as any;
export const getRouterBgpOutput: typeof import("./getRouterBgp").getRouterBgpOutput = null as any;
utilities.lazyLoad(exports, ["getRouterBgp","getRouterBgpOutput"], () => require("./getRouterBgp"));

export { GetRouterCommunityListArgs, GetRouterCommunityListResult, GetRouterCommunityListOutputArgs } from "./getRouterCommunityList";
export const getRouterCommunityList: typeof import("./getRouterCommunityList").getRouterCommunityList = null as any;
export const getRouterCommunityListOutput: typeof import("./getRouterCommunityList").getRouterCommunityListOutput = null as any;
utilities.lazyLoad(exports, ["getRouterCommunityList","getRouterCommunityListOutput"], () => require("./getRouterCommunityList"));

export { GetRouterCommunityListListArgs, GetRouterCommunityListListResult, GetRouterCommunityListListOutputArgs } from "./getRouterCommunityListList";
export const getRouterCommunityListList: typeof import("./getRouterCommunityListList").getRouterCommunityListList = null as any;
export const getRouterCommunityListListOutput: typeof import("./getRouterCommunityListList").getRouterCommunityListListOutput = null as any;
utilities.lazyLoad(exports, ["getRouterCommunityListList","getRouterCommunityListListOutput"], () => require("./getRouterCommunityListList"));

export { GetRouterIsisArgs, GetRouterIsisResult, GetRouterIsisOutputArgs } from "./getRouterIsis";
export const getRouterIsis: typeof import("./getRouterIsis").getRouterIsis = null as any;
export const getRouterIsisOutput: typeof import("./getRouterIsis").getRouterIsisOutput = null as any;
utilities.lazyLoad(exports, ["getRouterIsis","getRouterIsisOutput"], () => require("./getRouterIsis"));

export { GetRouterKeyChainArgs, GetRouterKeyChainResult, GetRouterKeyChainOutputArgs } from "./getRouterKeyChain";
export const getRouterKeyChain: typeof import("./getRouterKeyChain").getRouterKeyChain = null as any;
export const getRouterKeyChainOutput: typeof import("./getRouterKeyChain").getRouterKeyChainOutput = null as any;
utilities.lazyLoad(exports, ["getRouterKeyChain","getRouterKeyChainOutput"], () => require("./getRouterKeyChain"));

export { GetRouterKeyChainListArgs, GetRouterKeyChainListResult, GetRouterKeyChainListOutputArgs } from "./getRouterKeyChainList";
export const getRouterKeyChainList: typeof import("./getRouterKeyChainList").getRouterKeyChainList = null as any;
export const getRouterKeyChainListOutput: typeof import("./getRouterKeyChainList").getRouterKeyChainListOutput = null as any;
utilities.lazyLoad(exports, ["getRouterKeyChainList","getRouterKeyChainListOutput"], () => require("./getRouterKeyChainList"));

export { GetRouterMulticastArgs, GetRouterMulticastResult, GetRouterMulticastOutputArgs } from "./getRouterMulticast";
export const getRouterMulticast: typeof import("./getRouterMulticast").getRouterMulticast = null as any;
export const getRouterMulticastOutput: typeof import("./getRouterMulticast").getRouterMulticastOutput = null as any;
utilities.lazyLoad(exports, ["getRouterMulticast","getRouterMulticastOutput"], () => require("./getRouterMulticast"));

export { GetRouterMulticast6Args, GetRouterMulticast6Result, GetRouterMulticast6OutputArgs } from "./getRouterMulticast6";
export const getRouterMulticast6: typeof import("./getRouterMulticast6").getRouterMulticast6 = null as any;
export const getRouterMulticast6Output: typeof import("./getRouterMulticast6").getRouterMulticast6Output = null as any;
utilities.lazyLoad(exports, ["getRouterMulticast6","getRouterMulticast6Output"], () => require("./getRouterMulticast6"));

export { GetRouterMulticastFlowArgs, GetRouterMulticastFlowResult, GetRouterMulticastFlowOutputArgs } from "./getRouterMulticastFlow";
export const getRouterMulticastFlow: typeof import("./getRouterMulticastFlow").getRouterMulticastFlow = null as any;
export const getRouterMulticastFlowOutput: typeof import("./getRouterMulticastFlow").getRouterMulticastFlowOutput = null as any;
utilities.lazyLoad(exports, ["getRouterMulticastFlow","getRouterMulticastFlowOutput"], () => require("./getRouterMulticastFlow"));

export { GetRouterMulticastFlowListArgs, GetRouterMulticastFlowListResult, GetRouterMulticastFlowListOutputArgs } from "./getRouterMulticastFlowList";
export const getRouterMulticastFlowList: typeof import("./getRouterMulticastFlowList").getRouterMulticastFlowList = null as any;
export const getRouterMulticastFlowListOutput: typeof import("./getRouterMulticastFlowList").getRouterMulticastFlowListOutput = null as any;
utilities.lazyLoad(exports, ["getRouterMulticastFlowList","getRouterMulticastFlowListOutput"], () => require("./getRouterMulticastFlowList"));

export { GetRouterOspfArgs, GetRouterOspfResult, GetRouterOspfOutputArgs } from "./getRouterOspf";
export const getRouterOspf: typeof import("./getRouterOspf").getRouterOspf = null as any;
export const getRouterOspfOutput: typeof import("./getRouterOspf").getRouterOspfOutput = null as any;
utilities.lazyLoad(exports, ["getRouterOspf","getRouterOspfOutput"], () => require("./getRouterOspf"));

export { GetRouterOspf6Args, GetRouterOspf6Result, GetRouterOspf6OutputArgs } from "./getRouterOspf6";
export const getRouterOspf6: typeof import("./getRouterOspf6").getRouterOspf6 = null as any;
export const getRouterOspf6Output: typeof import("./getRouterOspf6").getRouterOspf6Output = null as any;
utilities.lazyLoad(exports, ["getRouterOspf6","getRouterOspf6Output"], () => require("./getRouterOspf6"));

export { GetRouterPolicyArgs, GetRouterPolicyResult, GetRouterPolicyOutputArgs } from "./getRouterPolicy";
export const getRouterPolicy: typeof import("./getRouterPolicy").getRouterPolicy = null as any;
export const getRouterPolicyOutput: typeof import("./getRouterPolicy").getRouterPolicyOutput = null as any;
utilities.lazyLoad(exports, ["getRouterPolicy","getRouterPolicyOutput"], () => require("./getRouterPolicy"));

export { GetRouterPolicy6Args, GetRouterPolicy6Result, GetRouterPolicy6OutputArgs } from "./getRouterPolicy6";
export const getRouterPolicy6: typeof import("./getRouterPolicy6").getRouterPolicy6 = null as any;
export const getRouterPolicy6Output: typeof import("./getRouterPolicy6").getRouterPolicy6Output = null as any;
utilities.lazyLoad(exports, ["getRouterPolicy6","getRouterPolicy6Output"], () => require("./getRouterPolicy6"));

export { GetRouterPolicy6ListArgs, GetRouterPolicy6ListResult, GetRouterPolicy6ListOutputArgs } from "./getRouterPolicy6List";
export const getRouterPolicy6List: typeof import("./getRouterPolicy6List").getRouterPolicy6List = null as any;
export const getRouterPolicy6ListOutput: typeof import("./getRouterPolicy6List").getRouterPolicy6ListOutput = null as any;
utilities.lazyLoad(exports, ["getRouterPolicy6List","getRouterPolicy6ListOutput"], () => require("./getRouterPolicy6List"));

export { GetRouterPolicyListArgs, GetRouterPolicyListResult, GetRouterPolicyListOutputArgs } from "./getRouterPolicyList";
export const getRouterPolicyList: typeof import("./getRouterPolicyList").getRouterPolicyList = null as any;
export const getRouterPolicyListOutput: typeof import("./getRouterPolicyList").getRouterPolicyListOutput = null as any;
utilities.lazyLoad(exports, ["getRouterPolicyList","getRouterPolicyListOutput"], () => require("./getRouterPolicyList"));

export { GetRouterPrefixListArgs, GetRouterPrefixListResult, GetRouterPrefixListOutputArgs } from "./getRouterPrefixList";
export const getRouterPrefixList: typeof import("./getRouterPrefixList").getRouterPrefixList = null as any;
export const getRouterPrefixListOutput: typeof import("./getRouterPrefixList").getRouterPrefixListOutput = null as any;
utilities.lazyLoad(exports, ["getRouterPrefixList","getRouterPrefixListOutput"], () => require("./getRouterPrefixList"));

export { GetRouterPrefixList6Args, GetRouterPrefixList6Result, GetRouterPrefixList6OutputArgs } from "./getRouterPrefixList6";
export const getRouterPrefixList6: typeof import("./getRouterPrefixList6").getRouterPrefixList6 = null as any;
export const getRouterPrefixList6Output: typeof import("./getRouterPrefixList6").getRouterPrefixList6Output = null as any;
utilities.lazyLoad(exports, ["getRouterPrefixList6","getRouterPrefixList6Output"], () => require("./getRouterPrefixList6"));

export { GetRouterPrefixList6ListArgs, GetRouterPrefixList6ListResult, GetRouterPrefixList6ListOutputArgs } from "./getRouterPrefixList6List";
export const getRouterPrefixList6List: typeof import("./getRouterPrefixList6List").getRouterPrefixList6List = null as any;
export const getRouterPrefixList6ListOutput: typeof import("./getRouterPrefixList6List").getRouterPrefixList6ListOutput = null as any;
utilities.lazyLoad(exports, ["getRouterPrefixList6List","getRouterPrefixList6ListOutput"], () => require("./getRouterPrefixList6List"));

export { GetRouterPrefixListListArgs, GetRouterPrefixListListResult, GetRouterPrefixListListOutputArgs } from "./getRouterPrefixListList";
export const getRouterPrefixListList: typeof import("./getRouterPrefixListList").getRouterPrefixListList = null as any;
export const getRouterPrefixListListOutput: typeof import("./getRouterPrefixListList").getRouterPrefixListListOutput = null as any;
utilities.lazyLoad(exports, ["getRouterPrefixListList","getRouterPrefixListListOutput"], () => require("./getRouterPrefixListList"));

export { GetRouterRipArgs, GetRouterRipResult, GetRouterRipOutputArgs } from "./getRouterRip";
export const getRouterRip: typeof import("./getRouterRip").getRouterRip = null as any;
export const getRouterRipOutput: typeof import("./getRouterRip").getRouterRipOutput = null as any;
utilities.lazyLoad(exports, ["getRouterRip","getRouterRipOutput"], () => require("./getRouterRip"));

export { GetRouterRipngArgs, GetRouterRipngResult, GetRouterRipngOutputArgs } from "./getRouterRipng";
export const getRouterRipng: typeof import("./getRouterRipng").getRouterRipng = null as any;
export const getRouterRipngOutput: typeof import("./getRouterRipng").getRouterRipngOutput = null as any;
utilities.lazyLoad(exports, ["getRouterRipng","getRouterRipngOutput"], () => require("./getRouterRipng"));

export { GetRouterRouteMapArgs, GetRouterRouteMapResult, GetRouterRouteMapOutputArgs } from "./getRouterRouteMap";
export const getRouterRouteMap: typeof import("./getRouterRouteMap").getRouterRouteMap = null as any;
export const getRouterRouteMapOutput: typeof import("./getRouterRouteMap").getRouterRouteMapOutput = null as any;
utilities.lazyLoad(exports, ["getRouterRouteMap","getRouterRouteMapOutput"], () => require("./getRouterRouteMap"));

export { GetRouterRouteMapListArgs, GetRouterRouteMapListResult, GetRouterRouteMapListOutputArgs } from "./getRouterRouteMapList";
export const getRouterRouteMapList: typeof import("./getRouterRouteMapList").getRouterRouteMapList = null as any;
export const getRouterRouteMapListOutput: typeof import("./getRouterRouteMapList").getRouterRouteMapListOutput = null as any;
utilities.lazyLoad(exports, ["getRouterRouteMapList","getRouterRouteMapListOutput"], () => require("./getRouterRouteMapList"));

export { GetRouterSettingArgs, GetRouterSettingResult, GetRouterSettingOutputArgs } from "./getRouterSetting";
export const getRouterSetting: typeof import("./getRouterSetting").getRouterSetting = null as any;
export const getRouterSettingOutput: typeof import("./getRouterSetting").getRouterSettingOutput = null as any;
utilities.lazyLoad(exports, ["getRouterSetting","getRouterSettingOutput"], () => require("./getRouterSetting"));

export { GetRouterStaticArgs, GetRouterStaticResult, GetRouterStaticOutputArgs } from "./getRouterStatic";
export const getRouterStatic: typeof import("./getRouterStatic").getRouterStatic = null as any;
export const getRouterStaticOutput: typeof import("./getRouterStatic").getRouterStaticOutput = null as any;
utilities.lazyLoad(exports, ["getRouterStatic","getRouterStaticOutput"], () => require("./getRouterStatic"));

export { GetRouterStatic6Args, GetRouterStatic6Result, GetRouterStatic6OutputArgs } from "./getRouterStatic6";
export const getRouterStatic6: typeof import("./getRouterStatic6").getRouterStatic6 = null as any;
export const getRouterStatic6Output: typeof import("./getRouterStatic6").getRouterStatic6Output = null as any;
utilities.lazyLoad(exports, ["getRouterStatic6","getRouterStatic6Output"], () => require("./getRouterStatic6"));

export { GetRouterStatic6ListArgs, GetRouterStatic6ListResult, GetRouterStatic6ListOutputArgs } from "./getRouterStatic6List";
export const getRouterStatic6List: typeof import("./getRouterStatic6List").getRouterStatic6List = null as any;
export const getRouterStatic6ListOutput: typeof import("./getRouterStatic6List").getRouterStatic6ListOutput = null as any;
utilities.lazyLoad(exports, ["getRouterStatic6List","getRouterStatic6ListOutput"], () => require("./getRouterStatic6List"));

export { GetRouterStaticListArgs, GetRouterStaticListResult, GetRouterStaticListOutputArgs } from "./getRouterStaticList";
export const getRouterStaticList: typeof import("./getRouterStaticList").getRouterStaticList = null as any;
export const getRouterStaticListOutput: typeof import("./getRouterStaticList").getRouterStaticListOutput = null as any;
utilities.lazyLoad(exports, ["getRouterStaticList","getRouterStaticListOutput"], () => require("./getRouterStaticList"));

export { GetRouterbgpNeighborArgs, GetRouterbgpNeighborResult, GetRouterbgpNeighborOutputArgs } from "./getRouterbgpNeighbor";
export const getRouterbgpNeighbor: typeof import("./getRouterbgpNeighbor").getRouterbgpNeighbor = null as any;
export const getRouterbgpNeighborOutput: typeof import("./getRouterbgpNeighbor").getRouterbgpNeighborOutput = null as any;
utilities.lazyLoad(exports, ["getRouterbgpNeighbor","getRouterbgpNeighborOutput"], () => require("./getRouterbgpNeighbor"));

export { GetRouterbgpNeighborListArgs, GetRouterbgpNeighborListResult, GetRouterbgpNeighborListOutputArgs } from "./getRouterbgpNeighborList";
export const getRouterbgpNeighborList: typeof import("./getRouterbgpNeighborList").getRouterbgpNeighborList = null as any;
export const getRouterbgpNeighborListOutput: typeof import("./getRouterbgpNeighborList").getRouterbgpNeighborListOutput = null as any;
utilities.lazyLoad(exports, ["getRouterbgpNeighborList","getRouterbgpNeighborListOutput"], () => require("./getRouterbgpNeighborList"));

export { GetSystemAccprofileArgs, GetSystemAccprofileResult, GetSystemAccprofileOutputArgs } from "./getSystemAccprofile";
export const getSystemAccprofile: typeof import("./getSystemAccprofile").getSystemAccprofile = null as any;
export const getSystemAccprofileOutput: typeof import("./getSystemAccprofile").getSystemAccprofileOutput = null as any;
utilities.lazyLoad(exports, ["getSystemAccprofile","getSystemAccprofileOutput"], () => require("./getSystemAccprofile"));

export { GetSystemAccprofileListArgs, GetSystemAccprofileListResult, GetSystemAccprofileListOutputArgs } from "./getSystemAccprofileList";
export const getSystemAccprofileList: typeof import("./getSystemAccprofileList").getSystemAccprofileList = null as any;
export const getSystemAccprofileListOutput: typeof import("./getSystemAccprofileList").getSystemAccprofileListOutput = null as any;
utilities.lazyLoad(exports, ["getSystemAccprofileList","getSystemAccprofileListOutput"], () => require("./getSystemAccprofileList"));

export { GetSystemAdminArgs, GetSystemAdminResult, GetSystemAdminOutputArgs } from "./getSystemAdmin";
export const getSystemAdmin: typeof import("./getSystemAdmin").getSystemAdmin = null as any;
export const getSystemAdminOutput: typeof import("./getSystemAdmin").getSystemAdminOutput = null as any;
utilities.lazyLoad(exports, ["getSystemAdmin","getSystemAdminOutput"], () => require("./getSystemAdmin"));

export { GetSystemAdminListArgs, GetSystemAdminListResult, GetSystemAdminListOutputArgs } from "./getSystemAdminList";
export const getSystemAdminList: typeof import("./getSystemAdminList").getSystemAdminList = null as any;
export const getSystemAdminListOutput: typeof import("./getSystemAdminList").getSystemAdminListOutput = null as any;
utilities.lazyLoad(exports, ["getSystemAdminList","getSystemAdminListOutput"], () => require("./getSystemAdminList"));

export { GetSystemAliasArgs, GetSystemAliasResult, GetSystemAliasOutputArgs } from "./getSystemAlias";
export const getSystemAlias: typeof import("./getSystemAlias").getSystemAlias = null as any;
export const getSystemAliasOutput: typeof import("./getSystemAlias").getSystemAliasOutput = null as any;
utilities.lazyLoad(exports, ["getSystemAlias","getSystemAliasOutput"], () => require("./getSystemAlias"));

export { GetSystemAliasListArgs, GetSystemAliasListResult, GetSystemAliasListOutputArgs } from "./getSystemAliasList";
export const getSystemAliasList: typeof import("./getSystemAliasList").getSystemAliasList = null as any;
export const getSystemAliasListOutput: typeof import("./getSystemAliasList").getSystemAliasListOutput = null as any;
utilities.lazyLoad(exports, ["getSystemAliasList","getSystemAliasListOutput"], () => require("./getSystemAliasList"));

export { GetSystemApiUserArgs, GetSystemApiUserResult, GetSystemApiUserOutputArgs } from "./getSystemApiUser";
export const getSystemApiUser: typeof import("./getSystemApiUser").getSystemApiUser = null as any;
export const getSystemApiUserOutput: typeof import("./getSystemApiUser").getSystemApiUserOutput = null as any;
utilities.lazyLoad(exports, ["getSystemApiUser","getSystemApiUserOutput"], () => require("./getSystemApiUser"));

export { GetSystemApiUserListArgs, GetSystemApiUserListResult, GetSystemApiUserListOutputArgs } from "./getSystemApiUserList";
export const getSystemApiUserList: typeof import("./getSystemApiUserList").getSystemApiUserList = null as any;
export const getSystemApiUserListOutput: typeof import("./getSystemApiUserList").getSystemApiUserListOutput = null as any;
utilities.lazyLoad(exports, ["getSystemApiUserList","getSystemApiUserListOutput"], () => require("./getSystemApiUserList"));

export { GetSystemArpTableArgs, GetSystemArpTableResult, GetSystemArpTableOutputArgs } from "./getSystemArpTable";
export const getSystemArpTable: typeof import("./getSystemArpTable").getSystemArpTable = null as any;
export const getSystemArpTableOutput: typeof import("./getSystemArpTable").getSystemArpTableOutput = null as any;
utilities.lazyLoad(exports, ["getSystemArpTable","getSystemArpTableOutput"], () => require("./getSystemArpTable"));

export { GetSystemArpTableListArgs, GetSystemArpTableListResult, GetSystemArpTableListOutputArgs } from "./getSystemArpTableList";
export const getSystemArpTableList: typeof import("./getSystemArpTableList").getSystemArpTableList = null as any;
export const getSystemArpTableListOutput: typeof import("./getSystemArpTableList").getSystemArpTableListOutput = null as any;
utilities.lazyLoad(exports, ["getSystemArpTableList","getSystemArpTableListOutput"], () => require("./getSystemArpTableList"));

export { GetSystemAutoInstallArgs, GetSystemAutoInstallResult, GetSystemAutoInstallOutputArgs } from "./getSystemAutoInstall";
export const getSystemAutoInstall: typeof import("./getSystemAutoInstall").getSystemAutoInstall = null as any;
export const getSystemAutoInstallOutput: typeof import("./getSystemAutoInstall").getSystemAutoInstallOutput = null as any;
utilities.lazyLoad(exports, ["getSystemAutoInstall","getSystemAutoInstallOutput"], () => require("./getSystemAutoInstall"));

export { GetSystemAutoScriptArgs, GetSystemAutoScriptResult, GetSystemAutoScriptOutputArgs } from "./getSystemAutoScript";
export const getSystemAutoScript: typeof import("./getSystemAutoScript").getSystemAutoScript = null as any;
export const getSystemAutoScriptOutput: typeof import("./getSystemAutoScript").getSystemAutoScriptOutput = null as any;
utilities.lazyLoad(exports, ["getSystemAutoScript","getSystemAutoScriptOutput"], () => require("./getSystemAutoScript"));

export { GetSystemAutoScriptListArgs, GetSystemAutoScriptListResult, GetSystemAutoScriptListOutputArgs } from "./getSystemAutoScriptList";
export const getSystemAutoScriptList: typeof import("./getSystemAutoScriptList").getSystemAutoScriptList = null as any;
export const getSystemAutoScriptListOutput: typeof import("./getSystemAutoScriptList").getSystemAutoScriptListOutput = null as any;
utilities.lazyLoad(exports, ["getSystemAutoScriptList","getSystemAutoScriptListOutput"], () => require("./getSystemAutoScriptList"));

export { GetSystemAutomationActionArgs, GetSystemAutomationActionResult, GetSystemAutomationActionOutputArgs } from "./getSystemAutomationAction";
export const getSystemAutomationAction: typeof import("./getSystemAutomationAction").getSystemAutomationAction = null as any;
export const getSystemAutomationActionOutput: typeof import("./getSystemAutomationAction").getSystemAutomationActionOutput = null as any;
utilities.lazyLoad(exports, ["getSystemAutomationAction","getSystemAutomationActionOutput"], () => require("./getSystemAutomationAction"));

export { GetSystemAutomationActionListArgs, GetSystemAutomationActionListResult, GetSystemAutomationActionListOutputArgs } from "./getSystemAutomationActionList";
export const getSystemAutomationActionList: typeof import("./getSystemAutomationActionList").getSystemAutomationActionList = null as any;
export const getSystemAutomationActionListOutput: typeof import("./getSystemAutomationActionList").getSystemAutomationActionListOutput = null as any;
utilities.lazyLoad(exports, ["getSystemAutomationActionList","getSystemAutomationActionListOutput"], () => require("./getSystemAutomationActionList"));

export { GetSystemAutomationDestinationArgs, GetSystemAutomationDestinationResult, GetSystemAutomationDestinationOutputArgs } from "./getSystemAutomationDestination";
export const getSystemAutomationDestination: typeof import("./getSystemAutomationDestination").getSystemAutomationDestination = null as any;
export const getSystemAutomationDestinationOutput: typeof import("./getSystemAutomationDestination").getSystemAutomationDestinationOutput = null as any;
utilities.lazyLoad(exports, ["getSystemAutomationDestination","getSystemAutomationDestinationOutput"], () => require("./getSystemAutomationDestination"));

export { GetSystemAutomationDestinationListArgs, GetSystemAutomationDestinationListResult, GetSystemAutomationDestinationListOutputArgs } from "./getSystemAutomationDestinationList";
export const getSystemAutomationDestinationList: typeof import("./getSystemAutomationDestinationList").getSystemAutomationDestinationList = null as any;
export const getSystemAutomationDestinationListOutput: typeof import("./getSystemAutomationDestinationList").getSystemAutomationDestinationListOutput = null as any;
utilities.lazyLoad(exports, ["getSystemAutomationDestinationList","getSystemAutomationDestinationListOutput"], () => require("./getSystemAutomationDestinationList"));

export { GetSystemAutomationTriggerArgs, GetSystemAutomationTriggerResult, GetSystemAutomationTriggerOutputArgs } from "./getSystemAutomationTrigger";
export const getSystemAutomationTrigger: typeof import("./getSystemAutomationTrigger").getSystemAutomationTrigger = null as any;
export const getSystemAutomationTriggerOutput: typeof import("./getSystemAutomationTrigger").getSystemAutomationTriggerOutput = null as any;
utilities.lazyLoad(exports, ["getSystemAutomationTrigger","getSystemAutomationTriggerOutput"], () => require("./getSystemAutomationTrigger"));

export { GetSystemAutomationTriggerListArgs, GetSystemAutomationTriggerListResult, GetSystemAutomationTriggerListOutputArgs } from "./getSystemAutomationTriggerList";
export const getSystemAutomationTriggerList: typeof import("./getSystemAutomationTriggerList").getSystemAutomationTriggerList = null as any;
export const getSystemAutomationTriggerListOutput: typeof import("./getSystemAutomationTriggerList").getSystemAutomationTriggerListOutput = null as any;
utilities.lazyLoad(exports, ["getSystemAutomationTriggerList","getSystemAutomationTriggerListOutput"], () => require("./getSystemAutomationTriggerList"));

export { GetSystemAutoupdatePushUpdateArgs, GetSystemAutoupdatePushUpdateResult, GetSystemAutoupdatePushUpdateOutputArgs } from "./getSystemAutoupdatePushUpdate";
export const getSystemAutoupdatePushUpdate: typeof import("./getSystemAutoupdatePushUpdate").getSystemAutoupdatePushUpdate = null as any;
export const getSystemAutoupdatePushUpdateOutput: typeof import("./getSystemAutoupdatePushUpdate").getSystemAutoupdatePushUpdateOutput = null as any;
utilities.lazyLoad(exports, ["getSystemAutoupdatePushUpdate","getSystemAutoupdatePushUpdateOutput"], () => require("./getSystemAutoupdatePushUpdate"));

export { GetSystemAutoupdateScheduleArgs, GetSystemAutoupdateScheduleResult, GetSystemAutoupdateScheduleOutputArgs } from "./getSystemAutoupdateSchedule";
export const getSystemAutoupdateSchedule: typeof import("./getSystemAutoupdateSchedule").getSystemAutoupdateSchedule = null as any;
export const getSystemAutoupdateScheduleOutput: typeof import("./getSystemAutoupdateSchedule").getSystemAutoupdateScheduleOutput = null as any;
utilities.lazyLoad(exports, ["getSystemAutoupdateSchedule","getSystemAutoupdateScheduleOutput"], () => require("./getSystemAutoupdateSchedule"));

export { GetSystemAutoupdateTunnelingArgs, GetSystemAutoupdateTunnelingResult, GetSystemAutoupdateTunnelingOutputArgs } from "./getSystemAutoupdateTunneling";
export const getSystemAutoupdateTunneling: typeof import("./getSystemAutoupdateTunneling").getSystemAutoupdateTunneling = null as any;
export const getSystemAutoupdateTunnelingOutput: typeof import("./getSystemAutoupdateTunneling").getSystemAutoupdateTunnelingOutput = null as any;
utilities.lazyLoad(exports, ["getSystemAutoupdateTunneling","getSystemAutoupdateTunnelingOutput"], () => require("./getSystemAutoupdateTunneling"));

export { GetSystemCentralManagementArgs, GetSystemCentralManagementResult, GetSystemCentralManagementOutputArgs } from "./getSystemCentralManagement";
export const getSystemCentralManagement: typeof import("./getSystemCentralManagement").getSystemCentralManagement = null as any;
export const getSystemCentralManagementOutput: typeof import("./getSystemCentralManagement").getSystemCentralManagementOutput = null as any;
utilities.lazyLoad(exports, ["getSystemCentralManagement","getSystemCentralManagementOutput"], () => require("./getSystemCentralManagement"));

export { GetSystemClusterSyncArgs, GetSystemClusterSyncResult, GetSystemClusterSyncOutputArgs } from "./getSystemClusterSync";
export const getSystemClusterSync: typeof import("./getSystemClusterSync").getSystemClusterSync = null as any;
export const getSystemClusterSyncOutput: typeof import("./getSystemClusterSync").getSystemClusterSyncOutput = null as any;
utilities.lazyLoad(exports, ["getSystemClusterSync","getSystemClusterSyncOutput"], () => require("./getSystemClusterSync"));

export { GetSystemClusterSyncListArgs, GetSystemClusterSyncListResult, GetSystemClusterSyncListOutputArgs } from "./getSystemClusterSyncList";
export const getSystemClusterSyncList: typeof import("./getSystemClusterSyncList").getSystemClusterSyncList = null as any;
export const getSystemClusterSyncListOutput: typeof import("./getSystemClusterSyncList").getSystemClusterSyncListOutput = null as any;
utilities.lazyLoad(exports, ["getSystemClusterSyncList","getSystemClusterSyncListOutput"], () => require("./getSystemClusterSyncList"));

export { GetSystemConsoleArgs, GetSystemConsoleResult, GetSystemConsoleOutputArgs } from "./getSystemConsole";
export const getSystemConsole: typeof import("./getSystemConsole").getSystemConsole = null as any;
export const getSystemConsoleOutput: typeof import("./getSystemConsole").getSystemConsoleOutput = null as any;
utilities.lazyLoad(exports, ["getSystemConsole","getSystemConsoleOutput"], () => require("./getSystemConsole"));

export { GetSystemCsfArgs, GetSystemCsfResult, GetSystemCsfOutputArgs } from "./getSystemCsf";
export const getSystemCsf: typeof import("./getSystemCsf").getSystemCsf = null as any;
export const getSystemCsfOutput: typeof import("./getSystemCsf").getSystemCsfOutput = null as any;
utilities.lazyLoad(exports, ["getSystemCsf","getSystemCsfOutput"], () => require("./getSystemCsf"));

export { GetSystemDdnsArgs, GetSystemDdnsResult, GetSystemDdnsOutputArgs } from "./getSystemDdns";
export const getSystemDdns: typeof import("./getSystemDdns").getSystemDdns = null as any;
export const getSystemDdnsOutput: typeof import("./getSystemDdns").getSystemDdnsOutput = null as any;
utilities.lazyLoad(exports, ["getSystemDdns","getSystemDdnsOutput"], () => require("./getSystemDdns"));

export { GetSystemDdnsListArgs, GetSystemDdnsListResult, GetSystemDdnsListOutputArgs } from "./getSystemDdnsList";
export const getSystemDdnsList: typeof import("./getSystemDdnsList").getSystemDdnsList = null as any;
export const getSystemDdnsListOutput: typeof import("./getSystemDdnsList").getSystemDdnsListOutput = null as any;
utilities.lazyLoad(exports, ["getSystemDdnsList","getSystemDdnsListOutput"], () => require("./getSystemDdnsList"));

export { GetSystemDhcpServerArgs, GetSystemDhcpServerResult, GetSystemDhcpServerOutputArgs } from "./getSystemDhcpServer";
export const getSystemDhcpServer: typeof import("./getSystemDhcpServer").getSystemDhcpServer = null as any;
export const getSystemDhcpServerOutput: typeof import("./getSystemDhcpServer").getSystemDhcpServerOutput = null as any;
utilities.lazyLoad(exports, ["getSystemDhcpServer","getSystemDhcpServerOutput"], () => require("./getSystemDhcpServer"));

export { GetSystemDhcpServerListArgs, GetSystemDhcpServerListResult, GetSystemDhcpServerListOutputArgs } from "./getSystemDhcpServerList";
export const getSystemDhcpServerList: typeof import("./getSystemDhcpServerList").getSystemDhcpServerList = null as any;
export const getSystemDhcpServerListOutput: typeof import("./getSystemDhcpServerList").getSystemDhcpServerListOutput = null as any;
utilities.lazyLoad(exports, ["getSystemDhcpServerList","getSystemDhcpServerListOutput"], () => require("./getSystemDhcpServerList"));

export { GetSystemDnsArgs, GetSystemDnsResult, GetSystemDnsOutputArgs } from "./getSystemDns";
export const getSystemDns: typeof import("./getSystemDns").getSystemDns = null as any;
export const getSystemDnsOutput: typeof import("./getSystemDns").getSystemDnsOutput = null as any;
utilities.lazyLoad(exports, ["getSystemDns","getSystemDnsOutput"], () => require("./getSystemDns"));

export { GetSystemDnsDatabaseArgs, GetSystemDnsDatabaseResult, GetSystemDnsDatabaseOutputArgs } from "./getSystemDnsDatabase";
export const getSystemDnsDatabase: typeof import("./getSystemDnsDatabase").getSystemDnsDatabase = null as any;
export const getSystemDnsDatabaseOutput: typeof import("./getSystemDnsDatabase").getSystemDnsDatabaseOutput = null as any;
utilities.lazyLoad(exports, ["getSystemDnsDatabase","getSystemDnsDatabaseOutput"], () => require("./getSystemDnsDatabase"));

export { GetSystemDnsDatabaseListArgs, GetSystemDnsDatabaseListResult, GetSystemDnsDatabaseListOutputArgs } from "./getSystemDnsDatabaseList";
export const getSystemDnsDatabaseList: typeof import("./getSystemDnsDatabaseList").getSystemDnsDatabaseList = null as any;
export const getSystemDnsDatabaseListOutput: typeof import("./getSystemDnsDatabaseList").getSystemDnsDatabaseListOutput = null as any;
utilities.lazyLoad(exports, ["getSystemDnsDatabaseList","getSystemDnsDatabaseListOutput"], () => require("./getSystemDnsDatabaseList"));

export { GetSystemDnsServerArgs, GetSystemDnsServerResult, GetSystemDnsServerOutputArgs } from "./getSystemDnsServer";
export const getSystemDnsServer: typeof import("./getSystemDnsServer").getSystemDnsServer = null as any;
export const getSystemDnsServerOutput: typeof import("./getSystemDnsServer").getSystemDnsServerOutput = null as any;
utilities.lazyLoad(exports, ["getSystemDnsServer","getSystemDnsServerOutput"], () => require("./getSystemDnsServer"));

export { GetSystemDnsServerListArgs, GetSystemDnsServerListResult, GetSystemDnsServerListOutputArgs } from "./getSystemDnsServerList";
export const getSystemDnsServerList: typeof import("./getSystemDnsServerList").getSystemDnsServerList = null as any;
export const getSystemDnsServerListOutput: typeof import("./getSystemDnsServerList").getSystemDnsServerListOutput = null as any;
utilities.lazyLoad(exports, ["getSystemDnsServerList","getSystemDnsServerListOutput"], () => require("./getSystemDnsServerList"));

export { GetSystemDscpBasedPriorityArgs, GetSystemDscpBasedPriorityResult, GetSystemDscpBasedPriorityOutputArgs } from "./getSystemDscpBasedPriority";
export const getSystemDscpBasedPriority: typeof import("./getSystemDscpBasedPriority").getSystemDscpBasedPriority = null as any;
export const getSystemDscpBasedPriorityOutput: typeof import("./getSystemDscpBasedPriority").getSystemDscpBasedPriorityOutput = null as any;
utilities.lazyLoad(exports, ["getSystemDscpBasedPriority","getSystemDscpBasedPriorityOutput"], () => require("./getSystemDscpBasedPriority"));

export { GetSystemDscpBasedPriorityListArgs, GetSystemDscpBasedPriorityListResult, GetSystemDscpBasedPriorityListOutputArgs } from "./getSystemDscpBasedPriorityList";
export const getSystemDscpBasedPriorityList: typeof import("./getSystemDscpBasedPriorityList").getSystemDscpBasedPriorityList = null as any;
export const getSystemDscpBasedPriorityListOutput: typeof import("./getSystemDscpBasedPriorityList").getSystemDscpBasedPriorityListOutput = null as any;
utilities.lazyLoad(exports, ["getSystemDscpBasedPriorityList","getSystemDscpBasedPriorityListOutput"], () => require("./getSystemDscpBasedPriorityList"));

export { GetSystemEmailServerArgs, GetSystemEmailServerResult, GetSystemEmailServerOutputArgs } from "./getSystemEmailServer";
export const getSystemEmailServer: typeof import("./getSystemEmailServer").getSystemEmailServer = null as any;
export const getSystemEmailServerOutput: typeof import("./getSystemEmailServer").getSystemEmailServerOutput = null as any;
utilities.lazyLoad(exports, ["getSystemEmailServer","getSystemEmailServerOutput"], () => require("./getSystemEmailServer"));

export { GetSystemExternalResourceArgs, GetSystemExternalResourceResult, GetSystemExternalResourceOutputArgs } from "./getSystemExternalResource";
export const getSystemExternalResource: typeof import("./getSystemExternalResource").getSystemExternalResource = null as any;
export const getSystemExternalResourceOutput: typeof import("./getSystemExternalResource").getSystemExternalResourceOutput = null as any;
utilities.lazyLoad(exports, ["getSystemExternalResource","getSystemExternalResourceOutput"], () => require("./getSystemExternalResource"));

export { GetSystemExternalResourceListArgs, GetSystemExternalResourceListResult, GetSystemExternalResourceListOutputArgs } from "./getSystemExternalResourceList";
export const getSystemExternalResourceList: typeof import("./getSystemExternalResourceList").getSystemExternalResourceList = null as any;
export const getSystemExternalResourceListOutput: typeof import("./getSystemExternalResourceList").getSystemExternalResourceListOutput = null as any;
utilities.lazyLoad(exports, ["getSystemExternalResourceList","getSystemExternalResourceListOutput"], () => require("./getSystemExternalResourceList"));

export { GetSystemFipsCcArgs, GetSystemFipsCcResult, GetSystemFipsCcOutputArgs } from "./getSystemFipsCc";
export const getSystemFipsCc: typeof import("./getSystemFipsCc").getSystemFipsCc = null as any;
export const getSystemFipsCcOutput: typeof import("./getSystemFipsCc").getSystemFipsCcOutput = null as any;
utilities.lazyLoad(exports, ["getSystemFipsCc","getSystemFipsCcOutput"], () => require("./getSystemFipsCc"));

export { GetSystemFmArgs, GetSystemFmResult, GetSystemFmOutputArgs } from "./getSystemFm";
export const getSystemFm: typeof import("./getSystemFm").getSystemFm = null as any;
export const getSystemFmOutput: typeof import("./getSystemFm").getSystemFmOutput = null as any;
utilities.lazyLoad(exports, ["getSystemFm","getSystemFmOutput"], () => require("./getSystemFm"));

export { GetSystemFortiguardArgs, GetSystemFortiguardResult, GetSystemFortiguardOutputArgs } from "./getSystemFortiguard";
export const getSystemFortiguard: typeof import("./getSystemFortiguard").getSystemFortiguard = null as any;
export const getSystemFortiguardOutput: typeof import("./getSystemFortiguard").getSystemFortiguardOutput = null as any;
utilities.lazyLoad(exports, ["getSystemFortiguard","getSystemFortiguardOutput"], () => require("./getSystemFortiguard"));

export { GetSystemFortimanagerArgs, GetSystemFortimanagerResult, GetSystemFortimanagerOutputArgs } from "./getSystemFortimanager";
export const getSystemFortimanager: typeof import("./getSystemFortimanager").getSystemFortimanager = null as any;
export const getSystemFortimanagerOutput: typeof import("./getSystemFortimanager").getSystemFortimanagerOutput = null as any;
utilities.lazyLoad(exports, ["getSystemFortimanager","getSystemFortimanagerOutput"], () => require("./getSystemFortimanager"));

export { GetSystemFortisandboxArgs, GetSystemFortisandboxResult, GetSystemFortisandboxOutputArgs } from "./getSystemFortisandbox";
export const getSystemFortisandbox: typeof import("./getSystemFortisandbox").getSystemFortisandbox = null as any;
export const getSystemFortisandboxOutput: typeof import("./getSystemFortisandbox").getSystemFortisandboxOutput = null as any;
utilities.lazyLoad(exports, ["getSystemFortisandbox","getSystemFortisandboxOutput"], () => require("./getSystemFortisandbox"));

export { GetSystemFssoPollingArgs, GetSystemFssoPollingResult, GetSystemFssoPollingOutputArgs } from "./getSystemFssoPolling";
export const getSystemFssoPolling: typeof import("./getSystemFssoPolling").getSystemFssoPolling = null as any;
export const getSystemFssoPollingOutput: typeof import("./getSystemFssoPolling").getSystemFssoPollingOutput = null as any;
utilities.lazyLoad(exports, ["getSystemFssoPolling","getSystemFssoPollingOutput"], () => require("./getSystemFssoPolling"));

export { GetSystemFtmPushArgs, GetSystemFtmPushResult, GetSystemFtmPushOutputArgs } from "./getSystemFtmPush";
export const getSystemFtmPush: typeof import("./getSystemFtmPush").getSystemFtmPush = null as any;
export const getSystemFtmPushOutput: typeof import("./getSystemFtmPush").getSystemFtmPushOutput = null as any;
utilities.lazyLoad(exports, ["getSystemFtmPush","getSystemFtmPushOutput"], () => require("./getSystemFtmPush"));

export { GetSystemGlobalArgs, GetSystemGlobalResult, GetSystemGlobalOutputArgs } from "./getSystemGlobal";
export const getSystemGlobal: typeof import("./getSystemGlobal").getSystemGlobal = null as any;
export const getSystemGlobalOutput: typeof import("./getSystemGlobal").getSystemGlobalOutput = null as any;
utilities.lazyLoad(exports, ["getSystemGlobal","getSystemGlobalOutput"], () => require("./getSystemGlobal"));

export { GetSystemGreTunnelArgs, GetSystemGreTunnelResult, GetSystemGreTunnelOutputArgs } from "./getSystemGreTunnel";
export const getSystemGreTunnel: typeof import("./getSystemGreTunnel").getSystemGreTunnel = null as any;
export const getSystemGreTunnelOutput: typeof import("./getSystemGreTunnel").getSystemGreTunnelOutput = null as any;
utilities.lazyLoad(exports, ["getSystemGreTunnel","getSystemGreTunnelOutput"], () => require("./getSystemGreTunnel"));

export { GetSystemGreTunnelListArgs, GetSystemGreTunnelListResult, GetSystemGreTunnelListOutputArgs } from "./getSystemGreTunnelList";
export const getSystemGreTunnelList: typeof import("./getSystemGreTunnelList").getSystemGreTunnelList = null as any;
export const getSystemGreTunnelListOutput: typeof import("./getSystemGreTunnelList").getSystemGreTunnelListOutput = null as any;
utilities.lazyLoad(exports, ["getSystemGreTunnelList","getSystemGreTunnelListOutput"], () => require("./getSystemGreTunnelList"));

export { GetSystemHaArgs, GetSystemHaResult, GetSystemHaOutputArgs } from "./getSystemHa";
export const getSystemHa: typeof import("./getSystemHa").getSystemHa = null as any;
export const getSystemHaOutput: typeof import("./getSystemHa").getSystemHaOutput = null as any;
utilities.lazyLoad(exports, ["getSystemHa","getSystemHaOutput"], () => require("./getSystemHa"));

export { GetSystemHaMonitorArgs, GetSystemHaMonitorResult, GetSystemHaMonitorOutputArgs } from "./getSystemHaMonitor";
export const getSystemHaMonitor: typeof import("./getSystemHaMonitor").getSystemHaMonitor = null as any;
export const getSystemHaMonitorOutput: typeof import("./getSystemHaMonitor").getSystemHaMonitorOutput = null as any;
utilities.lazyLoad(exports, ["getSystemHaMonitor","getSystemHaMonitorOutput"], () => require("./getSystemHaMonitor"));

export { GetSystemInterfaceArgs, GetSystemInterfaceResult, GetSystemInterfaceOutputArgs } from "./getSystemInterface";
export const getSystemInterface: typeof import("./getSystemInterface").getSystemInterface = null as any;
export const getSystemInterfaceOutput: typeof import("./getSystemInterface").getSystemInterfaceOutput = null as any;
utilities.lazyLoad(exports, ["getSystemInterface","getSystemInterfaceOutput"], () => require("./getSystemInterface"));

export { GetSystemInterfaceListArgs, GetSystemInterfaceListResult, GetSystemInterfaceListOutputArgs } from "./getSystemInterfaceList";
export const getSystemInterfaceList: typeof import("./getSystemInterfaceList").getSystemInterfaceList = null as any;
export const getSystemInterfaceListOutput: typeof import("./getSystemInterfaceList").getSystemInterfaceListOutput = null as any;
utilities.lazyLoad(exports, ["getSystemInterfaceList","getSystemInterfaceListOutput"], () => require("./getSystemInterfaceList"));

export { GetSystemIpipTunnelArgs, GetSystemIpipTunnelResult, GetSystemIpipTunnelOutputArgs } from "./getSystemIpipTunnel";
export const getSystemIpipTunnel: typeof import("./getSystemIpipTunnel").getSystemIpipTunnel = null as any;
export const getSystemIpipTunnelOutput: typeof import("./getSystemIpipTunnel").getSystemIpipTunnelOutput = null as any;
utilities.lazyLoad(exports, ["getSystemIpipTunnel","getSystemIpipTunnelOutput"], () => require("./getSystemIpipTunnel"));

export { GetSystemIpipTunnelListArgs, GetSystemIpipTunnelListResult, GetSystemIpipTunnelListOutputArgs } from "./getSystemIpipTunnelList";
export const getSystemIpipTunnelList: typeof import("./getSystemIpipTunnelList").getSystemIpipTunnelList = null as any;
export const getSystemIpipTunnelListOutput: typeof import("./getSystemIpipTunnelList").getSystemIpipTunnelListOutput = null as any;
utilities.lazyLoad(exports, ["getSystemIpipTunnelList","getSystemIpipTunnelListOutput"], () => require("./getSystemIpipTunnelList"));

export { GetSystemIpv6NeighborCacheArgs, GetSystemIpv6NeighborCacheResult, GetSystemIpv6NeighborCacheOutputArgs } from "./getSystemIpv6NeighborCache";
export const getSystemIpv6NeighborCache: typeof import("./getSystemIpv6NeighborCache").getSystemIpv6NeighborCache = null as any;
export const getSystemIpv6NeighborCacheOutput: typeof import("./getSystemIpv6NeighborCache").getSystemIpv6NeighborCacheOutput = null as any;
utilities.lazyLoad(exports, ["getSystemIpv6NeighborCache","getSystemIpv6NeighborCacheOutput"], () => require("./getSystemIpv6NeighborCache"));

export { GetSystemIpv6NeighborCacheListArgs, GetSystemIpv6NeighborCacheListResult, GetSystemIpv6NeighborCacheListOutputArgs } from "./getSystemIpv6NeighborCacheList";
export const getSystemIpv6NeighborCacheList: typeof import("./getSystemIpv6NeighborCacheList").getSystemIpv6NeighborCacheList = null as any;
export const getSystemIpv6NeighborCacheListOutput: typeof import("./getSystemIpv6NeighborCacheList").getSystemIpv6NeighborCacheListOutput = null as any;
utilities.lazyLoad(exports, ["getSystemIpv6NeighborCacheList","getSystemIpv6NeighborCacheListOutput"], () => require("./getSystemIpv6NeighborCacheList"));

export { GetSystemIpv6TunnelArgs, GetSystemIpv6TunnelResult, GetSystemIpv6TunnelOutputArgs } from "./getSystemIpv6Tunnel";
export const getSystemIpv6Tunnel: typeof import("./getSystemIpv6Tunnel").getSystemIpv6Tunnel = null as any;
export const getSystemIpv6TunnelOutput: typeof import("./getSystemIpv6Tunnel").getSystemIpv6TunnelOutput = null as any;
utilities.lazyLoad(exports, ["getSystemIpv6Tunnel","getSystemIpv6TunnelOutput"], () => require("./getSystemIpv6Tunnel"));

export { GetSystemIpv6TunnelListArgs, GetSystemIpv6TunnelListResult, GetSystemIpv6TunnelListOutputArgs } from "./getSystemIpv6TunnelList";
export const getSystemIpv6TunnelList: typeof import("./getSystemIpv6TunnelList").getSystemIpv6TunnelList = null as any;
export const getSystemIpv6TunnelListOutput: typeof import("./getSystemIpv6TunnelList").getSystemIpv6TunnelListOutput = null as any;
utilities.lazyLoad(exports, ["getSystemIpv6TunnelList","getSystemIpv6TunnelListOutput"], () => require("./getSystemIpv6TunnelList"));

export { GetSystemLinkMonitorArgs, GetSystemLinkMonitorResult, GetSystemLinkMonitorOutputArgs } from "./getSystemLinkMonitor";
export const getSystemLinkMonitor: typeof import("./getSystemLinkMonitor").getSystemLinkMonitor = null as any;
export const getSystemLinkMonitorOutput: typeof import("./getSystemLinkMonitor").getSystemLinkMonitorOutput = null as any;
utilities.lazyLoad(exports, ["getSystemLinkMonitor","getSystemLinkMonitorOutput"], () => require("./getSystemLinkMonitor"));

export { GetSystemLinkMonitorListArgs, GetSystemLinkMonitorListResult, GetSystemLinkMonitorListOutputArgs } from "./getSystemLinkMonitorList";
export const getSystemLinkMonitorList: typeof import("./getSystemLinkMonitorList").getSystemLinkMonitorList = null as any;
export const getSystemLinkMonitorListOutput: typeof import("./getSystemLinkMonitorList").getSystemLinkMonitorListOutput = null as any;
utilities.lazyLoad(exports, ["getSystemLinkMonitorList","getSystemLinkMonitorListOutput"], () => require("./getSystemLinkMonitorList"));

export { GetSystemLldpNetworkPolicyArgs, GetSystemLldpNetworkPolicyResult, GetSystemLldpNetworkPolicyOutputArgs } from "./getSystemLldpNetworkPolicy";
export const getSystemLldpNetworkPolicy: typeof import("./getSystemLldpNetworkPolicy").getSystemLldpNetworkPolicy = null as any;
export const getSystemLldpNetworkPolicyOutput: typeof import("./getSystemLldpNetworkPolicy").getSystemLldpNetworkPolicyOutput = null as any;
utilities.lazyLoad(exports, ["getSystemLldpNetworkPolicy","getSystemLldpNetworkPolicyOutput"], () => require("./getSystemLldpNetworkPolicy"));

export { GetSystemLldpNetworkPolicyListArgs, GetSystemLldpNetworkPolicyListResult, GetSystemLldpNetworkPolicyListOutputArgs } from "./getSystemLldpNetworkPolicyList";
export const getSystemLldpNetworkPolicyList: typeof import("./getSystemLldpNetworkPolicyList").getSystemLldpNetworkPolicyList = null as any;
export const getSystemLldpNetworkPolicyListOutput: typeof import("./getSystemLldpNetworkPolicyList").getSystemLldpNetworkPolicyListOutput = null as any;
utilities.lazyLoad(exports, ["getSystemLldpNetworkPolicyList","getSystemLldpNetworkPolicyListOutput"], () => require("./getSystemLldpNetworkPolicyList"));

export { GetSystemManagementTunnelArgs, GetSystemManagementTunnelResult, GetSystemManagementTunnelOutputArgs } from "./getSystemManagementTunnel";
export const getSystemManagementTunnel: typeof import("./getSystemManagementTunnel").getSystemManagementTunnel = null as any;
export const getSystemManagementTunnelOutput: typeof import("./getSystemManagementTunnel").getSystemManagementTunnelOutput = null as any;
utilities.lazyLoad(exports, ["getSystemManagementTunnel","getSystemManagementTunnelOutput"], () => require("./getSystemManagementTunnel"));

export { GetSystemMobileTunnelArgs, GetSystemMobileTunnelResult, GetSystemMobileTunnelOutputArgs } from "./getSystemMobileTunnel";
export const getSystemMobileTunnel: typeof import("./getSystemMobileTunnel").getSystemMobileTunnel = null as any;
export const getSystemMobileTunnelOutput: typeof import("./getSystemMobileTunnel").getSystemMobileTunnelOutput = null as any;
utilities.lazyLoad(exports, ["getSystemMobileTunnel","getSystemMobileTunnelOutput"], () => require("./getSystemMobileTunnel"));

export { GetSystemMobileTunnelListArgs, GetSystemMobileTunnelListResult, GetSystemMobileTunnelListOutputArgs } from "./getSystemMobileTunnelList";
export const getSystemMobileTunnelList: typeof import("./getSystemMobileTunnelList").getSystemMobileTunnelList = null as any;
export const getSystemMobileTunnelListOutput: typeof import("./getSystemMobileTunnelList").getSystemMobileTunnelListOutput = null as any;
utilities.lazyLoad(exports, ["getSystemMobileTunnelList","getSystemMobileTunnelListOutput"], () => require("./getSystemMobileTunnelList"));

export { GetSystemNat64Args, GetSystemNat64Result, GetSystemNat64OutputArgs } from "./getSystemNat64";
export const getSystemNat64: typeof import("./getSystemNat64").getSystemNat64 = null as any;
export const getSystemNat64Output: typeof import("./getSystemNat64").getSystemNat64Output = null as any;
utilities.lazyLoad(exports, ["getSystemNat64","getSystemNat64Output"], () => require("./getSystemNat64"));

export { GetSystemNdProxyArgs, GetSystemNdProxyResult, GetSystemNdProxyOutputArgs } from "./getSystemNdProxy";
export const getSystemNdProxy: typeof import("./getSystemNdProxy").getSystemNdProxy = null as any;
export const getSystemNdProxyOutput: typeof import("./getSystemNdProxy").getSystemNdProxyOutput = null as any;
utilities.lazyLoad(exports, ["getSystemNdProxy","getSystemNdProxyOutput"], () => require("./getSystemNdProxy"));

export { GetSystemNetflowArgs, GetSystemNetflowResult, GetSystemNetflowOutputArgs } from "./getSystemNetflow";
export const getSystemNetflow: typeof import("./getSystemNetflow").getSystemNetflow = null as any;
export const getSystemNetflowOutput: typeof import("./getSystemNetflow").getSystemNetflowOutput = null as any;
utilities.lazyLoad(exports, ["getSystemNetflow","getSystemNetflowOutput"], () => require("./getSystemNetflow"));

export { GetSystemNetworkVisibilityArgs, GetSystemNetworkVisibilityResult, GetSystemNetworkVisibilityOutputArgs } from "./getSystemNetworkVisibility";
export const getSystemNetworkVisibility: typeof import("./getSystemNetworkVisibility").getSystemNetworkVisibility = null as any;
export const getSystemNetworkVisibilityOutput: typeof import("./getSystemNetworkVisibility").getSystemNetworkVisibilityOutput = null as any;
utilities.lazyLoad(exports, ["getSystemNetworkVisibility","getSystemNetworkVisibilityOutput"], () => require("./getSystemNetworkVisibility"));

export { GetSystemNtpArgs, GetSystemNtpResult, GetSystemNtpOutputArgs } from "./getSystemNtp";
export const getSystemNtp: typeof import("./getSystemNtp").getSystemNtp = null as any;
export const getSystemNtpOutput: typeof import("./getSystemNtp").getSystemNtpOutput = null as any;
utilities.lazyLoad(exports, ["getSystemNtp","getSystemNtpOutput"], () => require("./getSystemNtp"));

export { GetSystemObjectTaggingArgs, GetSystemObjectTaggingResult, GetSystemObjectTaggingOutputArgs } from "./getSystemObjectTagging";
export const getSystemObjectTagging: typeof import("./getSystemObjectTagging").getSystemObjectTagging = null as any;
export const getSystemObjectTaggingOutput: typeof import("./getSystemObjectTagging").getSystemObjectTaggingOutput = null as any;
utilities.lazyLoad(exports, ["getSystemObjectTagging","getSystemObjectTaggingOutput"], () => require("./getSystemObjectTagging"));

export { GetSystemObjectTaggingListArgs, GetSystemObjectTaggingListResult, GetSystemObjectTaggingListOutputArgs } from "./getSystemObjectTaggingList";
export const getSystemObjectTaggingList: typeof import("./getSystemObjectTaggingList").getSystemObjectTaggingList = null as any;
export const getSystemObjectTaggingListOutput: typeof import("./getSystemObjectTaggingList").getSystemObjectTaggingListOutput = null as any;
utilities.lazyLoad(exports, ["getSystemObjectTaggingList","getSystemObjectTaggingListOutput"], () => require("./getSystemObjectTaggingList"));

export { GetSystemPasswordPolicyArgs, GetSystemPasswordPolicyResult, GetSystemPasswordPolicyOutputArgs } from "./getSystemPasswordPolicy";
export const getSystemPasswordPolicy: typeof import("./getSystemPasswordPolicy").getSystemPasswordPolicy = null as any;
export const getSystemPasswordPolicyOutput: typeof import("./getSystemPasswordPolicy").getSystemPasswordPolicyOutput = null as any;
utilities.lazyLoad(exports, ["getSystemPasswordPolicy","getSystemPasswordPolicyOutput"], () => require("./getSystemPasswordPolicy"));

export { GetSystemPasswordPolicyGuestAdminArgs, GetSystemPasswordPolicyGuestAdminResult, GetSystemPasswordPolicyGuestAdminOutputArgs } from "./getSystemPasswordPolicyGuestAdmin";
export const getSystemPasswordPolicyGuestAdmin: typeof import("./getSystemPasswordPolicyGuestAdmin").getSystemPasswordPolicyGuestAdmin = null as any;
export const getSystemPasswordPolicyGuestAdminOutput: typeof import("./getSystemPasswordPolicyGuestAdmin").getSystemPasswordPolicyGuestAdminOutput = null as any;
utilities.lazyLoad(exports, ["getSystemPasswordPolicyGuestAdmin","getSystemPasswordPolicyGuestAdminOutput"], () => require("./getSystemPasswordPolicyGuestAdmin"));

export { GetSystemPppoeInterfaceArgs, GetSystemPppoeInterfaceResult, GetSystemPppoeInterfaceOutputArgs } from "./getSystemPppoeInterface";
export const getSystemPppoeInterface: typeof import("./getSystemPppoeInterface").getSystemPppoeInterface = null as any;
export const getSystemPppoeInterfaceOutput: typeof import("./getSystemPppoeInterface").getSystemPppoeInterfaceOutput = null as any;
utilities.lazyLoad(exports, ["getSystemPppoeInterface","getSystemPppoeInterfaceOutput"], () => require("./getSystemPppoeInterface"));

export { GetSystemPppoeInterfaceListArgs, GetSystemPppoeInterfaceListResult, GetSystemPppoeInterfaceListOutputArgs } from "./getSystemPppoeInterfaceList";
export const getSystemPppoeInterfaceList: typeof import("./getSystemPppoeInterfaceList").getSystemPppoeInterfaceList = null as any;
export const getSystemPppoeInterfaceListOutput: typeof import("./getSystemPppoeInterfaceList").getSystemPppoeInterfaceListOutput = null as any;
utilities.lazyLoad(exports, ["getSystemPppoeInterfaceList","getSystemPppoeInterfaceListOutput"], () => require("./getSystemPppoeInterfaceList"));

export { GetSystemProbeResponseArgs, GetSystemProbeResponseResult, GetSystemProbeResponseOutputArgs } from "./getSystemProbeResponse";
export const getSystemProbeResponse: typeof import("./getSystemProbeResponse").getSystemProbeResponse = null as any;
export const getSystemProbeResponseOutput: typeof import("./getSystemProbeResponse").getSystemProbeResponseOutput = null as any;
utilities.lazyLoad(exports, ["getSystemProbeResponse","getSystemProbeResponseOutput"], () => require("./getSystemProbeResponse"));

export { GetSystemProxyArpArgs, GetSystemProxyArpResult, GetSystemProxyArpOutputArgs } from "./getSystemProxyArp";
export const getSystemProxyArp: typeof import("./getSystemProxyArp").getSystemProxyArp = null as any;
export const getSystemProxyArpOutput: typeof import("./getSystemProxyArp").getSystemProxyArpOutput = null as any;
utilities.lazyLoad(exports, ["getSystemProxyArp","getSystemProxyArpOutput"], () => require("./getSystemProxyArp"));

export { GetSystemProxyArpListArgs, GetSystemProxyArpListResult, GetSystemProxyArpListOutputArgs } from "./getSystemProxyArpList";
export const getSystemProxyArpList: typeof import("./getSystemProxyArpList").getSystemProxyArpList = null as any;
export const getSystemProxyArpListOutput: typeof import("./getSystemProxyArpList").getSystemProxyArpListOutput = null as any;
utilities.lazyLoad(exports, ["getSystemProxyArpList","getSystemProxyArpListOutput"], () => require("./getSystemProxyArpList"));

export { GetSystemReplacemsgGroupArgs, GetSystemReplacemsgGroupResult, GetSystemReplacemsgGroupOutputArgs } from "./getSystemReplacemsgGroup";
export const getSystemReplacemsgGroup: typeof import("./getSystemReplacemsgGroup").getSystemReplacemsgGroup = null as any;
export const getSystemReplacemsgGroupOutput: typeof import("./getSystemReplacemsgGroup").getSystemReplacemsgGroupOutput = null as any;
utilities.lazyLoad(exports, ["getSystemReplacemsgGroup","getSystemReplacemsgGroupOutput"], () => require("./getSystemReplacemsgGroup"));

export { GetSystemReplacemsgGroupListArgs, GetSystemReplacemsgGroupListResult, GetSystemReplacemsgGroupListOutputArgs } from "./getSystemReplacemsgGroupList";
export const getSystemReplacemsgGroupList: typeof import("./getSystemReplacemsgGroupList").getSystemReplacemsgGroupList = null as any;
export const getSystemReplacemsgGroupListOutput: typeof import("./getSystemReplacemsgGroupList").getSystemReplacemsgGroupListOutput = null as any;
utilities.lazyLoad(exports, ["getSystemReplacemsgGroupList","getSystemReplacemsgGroupListOutput"], () => require("./getSystemReplacemsgGroupList"));

export { GetSystemReplacemsgImageArgs, GetSystemReplacemsgImageResult, GetSystemReplacemsgImageOutputArgs } from "./getSystemReplacemsgImage";
export const getSystemReplacemsgImage: typeof import("./getSystemReplacemsgImage").getSystemReplacemsgImage = null as any;
export const getSystemReplacemsgImageOutput: typeof import("./getSystemReplacemsgImage").getSystemReplacemsgImageOutput = null as any;
utilities.lazyLoad(exports, ["getSystemReplacemsgImage","getSystemReplacemsgImageOutput"], () => require("./getSystemReplacemsgImage"));

export { GetSystemReplacemsgImageListArgs, GetSystemReplacemsgImageListResult, GetSystemReplacemsgImageListOutputArgs } from "./getSystemReplacemsgImageList";
export const getSystemReplacemsgImageList: typeof import("./getSystemReplacemsgImageList").getSystemReplacemsgImageList = null as any;
export const getSystemReplacemsgImageListOutput: typeof import("./getSystemReplacemsgImageList").getSystemReplacemsgImageListOutput = null as any;
utilities.lazyLoad(exports, ["getSystemReplacemsgImageList","getSystemReplacemsgImageListOutput"], () => require("./getSystemReplacemsgImageList"));

export { GetSystemResourceLimitsArgs, GetSystemResourceLimitsResult, GetSystemResourceLimitsOutputArgs } from "./getSystemResourceLimits";
export const getSystemResourceLimits: typeof import("./getSystemResourceLimits").getSystemResourceLimits = null as any;
export const getSystemResourceLimitsOutput: typeof import("./getSystemResourceLimits").getSystemResourceLimitsOutput = null as any;
utilities.lazyLoad(exports, ["getSystemResourceLimits","getSystemResourceLimitsOutput"], () => require("./getSystemResourceLimits"));

export { GetSystemSdnConnectorArgs, GetSystemSdnConnectorResult, GetSystemSdnConnectorOutputArgs } from "./getSystemSdnConnector";
export const getSystemSdnConnector: typeof import("./getSystemSdnConnector").getSystemSdnConnector = null as any;
export const getSystemSdnConnectorOutput: typeof import("./getSystemSdnConnector").getSystemSdnConnectorOutput = null as any;
utilities.lazyLoad(exports, ["getSystemSdnConnector","getSystemSdnConnectorOutput"], () => require("./getSystemSdnConnector"));

export { GetSystemSdnConnectorListArgs, GetSystemSdnConnectorListResult, GetSystemSdnConnectorListOutputArgs } from "./getSystemSdnConnectorList";
export const getSystemSdnConnectorList: typeof import("./getSystemSdnConnectorList").getSystemSdnConnectorList = null as any;
export const getSystemSdnConnectorListOutput: typeof import("./getSystemSdnConnectorList").getSystemSdnConnectorListOutput = null as any;
utilities.lazyLoad(exports, ["getSystemSdnConnectorList","getSystemSdnConnectorListOutput"], () => require("./getSystemSdnConnectorList"));

export { GetSystemSessionHelperArgs, GetSystemSessionHelperResult, GetSystemSessionHelperOutputArgs } from "./getSystemSessionHelper";
export const getSystemSessionHelper: typeof import("./getSystemSessionHelper").getSystemSessionHelper = null as any;
export const getSystemSessionHelperOutput: typeof import("./getSystemSessionHelper").getSystemSessionHelperOutput = null as any;
utilities.lazyLoad(exports, ["getSystemSessionHelper","getSystemSessionHelperOutput"], () => require("./getSystemSessionHelper"));

export { GetSystemSessionHelperListArgs, GetSystemSessionHelperListResult, GetSystemSessionHelperListOutputArgs } from "./getSystemSessionHelperList";
export const getSystemSessionHelperList: typeof import("./getSystemSessionHelperList").getSystemSessionHelperList = null as any;
export const getSystemSessionHelperListOutput: typeof import("./getSystemSessionHelperList").getSystemSessionHelperListOutput = null as any;
utilities.lazyLoad(exports, ["getSystemSessionHelperList","getSystemSessionHelperListOutput"], () => require("./getSystemSessionHelperList"));

export { GetSystemSessionTtlArgs, GetSystemSessionTtlResult, GetSystemSessionTtlOutputArgs } from "./getSystemSessionTtl";
export const getSystemSessionTtl: typeof import("./getSystemSessionTtl").getSystemSessionTtl = null as any;
export const getSystemSessionTtlOutput: typeof import("./getSystemSessionTtl").getSystemSessionTtlOutput = null as any;
utilities.lazyLoad(exports, ["getSystemSessionTtl","getSystemSessionTtlOutput"], () => require("./getSystemSessionTtl"));

export { GetSystemSflowArgs, GetSystemSflowResult, GetSystemSflowOutputArgs } from "./getSystemSflow";
export const getSystemSflow: typeof import("./getSystemSflow").getSystemSflow = null as any;
export const getSystemSflowOutput: typeof import("./getSystemSflow").getSystemSflowOutput = null as any;
utilities.lazyLoad(exports, ["getSystemSflow","getSystemSflowOutput"], () => require("./getSystemSflow"));

export { GetSystemSitTunnelArgs, GetSystemSitTunnelResult, GetSystemSitTunnelOutputArgs } from "./getSystemSitTunnel";
export const getSystemSitTunnel: typeof import("./getSystemSitTunnel").getSystemSitTunnel = null as any;
export const getSystemSitTunnelOutput: typeof import("./getSystemSitTunnel").getSystemSitTunnelOutput = null as any;
utilities.lazyLoad(exports, ["getSystemSitTunnel","getSystemSitTunnelOutput"], () => require("./getSystemSitTunnel"));

export { GetSystemSitTunnelListArgs, GetSystemSitTunnelListResult, GetSystemSitTunnelListOutputArgs } from "./getSystemSitTunnelList";
export const getSystemSitTunnelList: typeof import("./getSystemSitTunnelList").getSystemSitTunnelList = null as any;
export const getSystemSitTunnelListOutput: typeof import("./getSystemSitTunnelList").getSystemSitTunnelListOutput = null as any;
utilities.lazyLoad(exports, ["getSystemSitTunnelList","getSystemSitTunnelListOutput"], () => require("./getSystemSitTunnelList"));

export { GetSystemSmsServerArgs, GetSystemSmsServerResult, GetSystemSmsServerOutputArgs } from "./getSystemSmsServer";
export const getSystemSmsServer: typeof import("./getSystemSmsServer").getSystemSmsServer = null as any;
export const getSystemSmsServerOutput: typeof import("./getSystemSmsServer").getSystemSmsServerOutput = null as any;
utilities.lazyLoad(exports, ["getSystemSmsServer","getSystemSmsServerOutput"], () => require("./getSystemSmsServer"));

export { GetSystemSmsServerListArgs, GetSystemSmsServerListResult, GetSystemSmsServerListOutputArgs } from "./getSystemSmsServerList";
export const getSystemSmsServerList: typeof import("./getSystemSmsServerList").getSystemSmsServerList = null as any;
export const getSystemSmsServerListOutput: typeof import("./getSystemSmsServerList").getSystemSmsServerListOutput = null as any;
utilities.lazyLoad(exports, ["getSystemSmsServerList","getSystemSmsServerListOutput"], () => require("./getSystemSmsServerList"));

export { GetSystemSnmpCommunityArgs, GetSystemSnmpCommunityResult, GetSystemSnmpCommunityOutputArgs } from "./getSystemSnmpCommunity";
export const getSystemSnmpCommunity: typeof import("./getSystemSnmpCommunity").getSystemSnmpCommunity = null as any;
export const getSystemSnmpCommunityOutput: typeof import("./getSystemSnmpCommunity").getSystemSnmpCommunityOutput = null as any;
utilities.lazyLoad(exports, ["getSystemSnmpCommunity","getSystemSnmpCommunityOutput"], () => require("./getSystemSnmpCommunity"));

export { GetSystemSnmpCommunityListArgs, GetSystemSnmpCommunityListResult, GetSystemSnmpCommunityListOutputArgs } from "./getSystemSnmpCommunityList";
export const getSystemSnmpCommunityList: typeof import("./getSystemSnmpCommunityList").getSystemSnmpCommunityList = null as any;
export const getSystemSnmpCommunityListOutput: typeof import("./getSystemSnmpCommunityList").getSystemSnmpCommunityListOutput = null as any;
utilities.lazyLoad(exports, ["getSystemSnmpCommunityList","getSystemSnmpCommunityListOutput"], () => require("./getSystemSnmpCommunityList"));

export { GetSystemSnmpSysinfoArgs, GetSystemSnmpSysinfoResult, GetSystemSnmpSysinfoOutputArgs } from "./getSystemSnmpSysinfo";
export const getSystemSnmpSysinfo: typeof import("./getSystemSnmpSysinfo").getSystemSnmpSysinfo = null as any;
export const getSystemSnmpSysinfoOutput: typeof import("./getSystemSnmpSysinfo").getSystemSnmpSysinfoOutput = null as any;
utilities.lazyLoad(exports, ["getSystemSnmpSysinfo","getSystemSnmpSysinfoOutput"], () => require("./getSystemSnmpSysinfo"));

export { GetSystemSnmpUserArgs, GetSystemSnmpUserResult, GetSystemSnmpUserOutputArgs } from "./getSystemSnmpUser";
export const getSystemSnmpUser: typeof import("./getSystemSnmpUser").getSystemSnmpUser = null as any;
export const getSystemSnmpUserOutput: typeof import("./getSystemSnmpUser").getSystemSnmpUserOutput = null as any;
utilities.lazyLoad(exports, ["getSystemSnmpUser","getSystemSnmpUserOutput"], () => require("./getSystemSnmpUser"));

export { GetSystemSnmpUserListArgs, GetSystemSnmpUserListResult, GetSystemSnmpUserListOutputArgs } from "./getSystemSnmpUserList";
export const getSystemSnmpUserList: typeof import("./getSystemSnmpUserList").getSystemSnmpUserList = null as any;
export const getSystemSnmpUserListOutput: typeof import("./getSystemSnmpUserList").getSystemSnmpUserListOutput = null as any;
utilities.lazyLoad(exports, ["getSystemSnmpUserList","getSystemSnmpUserListOutput"], () => require("./getSystemSnmpUserList"));

export { GetSystemTosBasedPriorityArgs, GetSystemTosBasedPriorityResult, GetSystemTosBasedPriorityOutputArgs } from "./getSystemTosBasedPriority";
export const getSystemTosBasedPriority: typeof import("./getSystemTosBasedPriority").getSystemTosBasedPriority = null as any;
export const getSystemTosBasedPriorityOutput: typeof import("./getSystemTosBasedPriority").getSystemTosBasedPriorityOutput = null as any;
utilities.lazyLoad(exports, ["getSystemTosBasedPriority","getSystemTosBasedPriorityOutput"], () => require("./getSystemTosBasedPriority"));

export { GetSystemTosBasedPriorityListArgs, GetSystemTosBasedPriorityListResult, GetSystemTosBasedPriorityListOutputArgs } from "./getSystemTosBasedPriorityList";
export const getSystemTosBasedPriorityList: typeof import("./getSystemTosBasedPriorityList").getSystemTosBasedPriorityList = null as any;
export const getSystemTosBasedPriorityListOutput: typeof import("./getSystemTosBasedPriorityList").getSystemTosBasedPriorityListOutput = null as any;
utilities.lazyLoad(exports, ["getSystemTosBasedPriorityList","getSystemTosBasedPriorityListOutput"], () => require("./getSystemTosBasedPriorityList"));

export { GetSystemVdomExceptionArgs, GetSystemVdomExceptionResult, GetSystemVdomExceptionOutputArgs } from "./getSystemVdomException";
export const getSystemVdomException: typeof import("./getSystemVdomException").getSystemVdomException = null as any;
export const getSystemVdomExceptionOutput: typeof import("./getSystemVdomException").getSystemVdomExceptionOutput = null as any;
utilities.lazyLoad(exports, ["getSystemVdomException","getSystemVdomExceptionOutput"], () => require("./getSystemVdomException"));

export { GetSystemVdomExceptionListArgs, GetSystemVdomExceptionListResult, GetSystemVdomExceptionListOutputArgs } from "./getSystemVdomExceptionList";
export const getSystemVdomExceptionList: typeof import("./getSystemVdomExceptionList").getSystemVdomExceptionList = null as any;
export const getSystemVdomExceptionListOutput: typeof import("./getSystemVdomExceptionList").getSystemVdomExceptionListOutput = null as any;
utilities.lazyLoad(exports, ["getSystemVdomExceptionList","getSystemVdomExceptionListOutput"], () => require("./getSystemVdomExceptionList"));

export { GetSystemVdomNetflowArgs, GetSystemVdomNetflowResult, GetSystemVdomNetflowOutputArgs } from "./getSystemVdomNetflow";
export const getSystemVdomNetflow: typeof import("./getSystemVdomNetflow").getSystemVdomNetflow = null as any;
export const getSystemVdomNetflowOutput: typeof import("./getSystemVdomNetflow").getSystemVdomNetflowOutput = null as any;
utilities.lazyLoad(exports, ["getSystemVdomNetflow","getSystemVdomNetflowOutput"], () => require("./getSystemVdomNetflow"));

export { GetSystemVdomSflowArgs, GetSystemVdomSflowResult, GetSystemVdomSflowOutputArgs } from "./getSystemVdomSflow";
export const getSystemVdomSflow: typeof import("./getSystemVdomSflow").getSystemVdomSflow = null as any;
export const getSystemVdomSflowOutput: typeof import("./getSystemVdomSflow").getSystemVdomSflowOutput = null as any;
utilities.lazyLoad(exports, ["getSystemVdomSflow","getSystemVdomSflowOutput"], () => require("./getSystemVdomSflow"));

export { GetSystemVirtualWanLinkArgs, GetSystemVirtualWanLinkResult, GetSystemVirtualWanLinkOutputArgs } from "./getSystemVirtualWanLink";
export const getSystemVirtualWanLink: typeof import("./getSystemVirtualWanLink").getSystemVirtualWanLink = null as any;
export const getSystemVirtualWanLinkOutput: typeof import("./getSystemVirtualWanLink").getSystemVirtualWanLinkOutput = null as any;
utilities.lazyLoad(exports, ["getSystemVirtualWanLink","getSystemVirtualWanLinkOutput"], () => require("./getSystemVirtualWanLink"));

export { GetSystemVxlanArgs, GetSystemVxlanResult, GetSystemVxlanOutputArgs } from "./getSystemVxlan";
export const getSystemVxlan: typeof import("./getSystemVxlan").getSystemVxlan = null as any;
export const getSystemVxlanOutput: typeof import("./getSystemVxlan").getSystemVxlanOutput = null as any;
utilities.lazyLoad(exports, ["getSystemVxlan","getSystemVxlanOutput"], () => require("./getSystemVxlan"));

export { GetSystemVxlanListArgs, GetSystemVxlanListResult, GetSystemVxlanListOutputArgs } from "./getSystemVxlanList";
export const getSystemVxlanList: typeof import("./getSystemVxlanList").getSystemVxlanList = null as any;
export const getSystemVxlanListOutput: typeof import("./getSystemVxlanList").getSystemVxlanListOutput = null as any;
utilities.lazyLoad(exports, ["getSystemVxlanList","getSystemVxlanListOutput"], () => require("./getSystemVxlanList"));

export { GetSystemWccpArgs, GetSystemWccpResult, GetSystemWccpOutputArgs } from "./getSystemWccp";
export const getSystemWccp: typeof import("./getSystemWccp").getSystemWccp = null as any;
export const getSystemWccpOutput: typeof import("./getSystemWccp").getSystemWccpOutput = null as any;
utilities.lazyLoad(exports, ["getSystemWccp","getSystemWccpOutput"], () => require("./getSystemWccp"));

export { GetSystemWccpListArgs, GetSystemWccpListResult, GetSystemWccpListOutputArgs } from "./getSystemWccpList";
export const getSystemWccpList: typeof import("./getSystemWccpList").getSystemWccpList = null as any;
export const getSystemWccpListOutput: typeof import("./getSystemWccpList").getSystemWccpListOutput = null as any;
utilities.lazyLoad(exports, ["getSystemWccpList","getSystemWccpListOutput"], () => require("./getSystemWccpList"));

export { GetSystemZoneArgs, GetSystemZoneResult, GetSystemZoneOutputArgs } from "./getSystemZone";
export const getSystemZone: typeof import("./getSystemZone").getSystemZone = null as any;
export const getSystemZoneOutput: typeof import("./getSystemZone").getSystemZoneOutput = null as any;
utilities.lazyLoad(exports, ["getSystemZone","getSystemZoneOutput"], () => require("./getSystemZone"));

export { GetSystemZoneListArgs, GetSystemZoneListResult, GetSystemZoneListOutputArgs } from "./getSystemZoneList";
export const getSystemZoneList: typeof import("./getSystemZoneList").getSystemZoneList = null as any;
export const getSystemZoneListOutput: typeof import("./getSystemZoneList").getSystemZoneListOutput = null as any;
utilities.lazyLoad(exports, ["getSystemZoneList","getSystemZoneListOutput"], () => require("./getSystemZoneList"));

export { GetUserSamlArgs, GetUserSamlResult, GetUserSamlOutputArgs } from "./getUserSaml";
export const getUserSaml: typeof import("./getUserSaml").getUserSaml = null as any;
export const getUserSamlOutput: typeof import("./getUserSaml").getUserSamlOutput = null as any;
utilities.lazyLoad(exports, ["getUserSaml","getUserSamlOutput"], () => require("./getUserSaml"));

export { GetUserSamlListArgs, GetUserSamlListResult, GetUserSamlListOutputArgs } from "./getUserSamlList";
export const getUserSamlList: typeof import("./getUserSamlList").getUserSamlList = null as any;
export const getUserSamlListOutput: typeof import("./getUserSamlList").getUserSamlListOutput = null as any;
utilities.lazyLoad(exports, ["getUserSamlList","getUserSamlListOutput"], () => require("./getUserSamlList"));

export { IcapProfileArgs, IcapProfileState } from "./icapProfile";
export type IcapProfile = import("./icapProfile").IcapProfile;
export const IcapProfile: typeof import("./icapProfile").IcapProfile = null as any;
utilities.lazyLoad(exports, ["IcapProfile"], () => require("./icapProfile"));

export { IcapServerArgs, IcapServerState } from "./icapServer";
export type IcapServer = import("./icapServer").IcapServer;
export const IcapServer: typeof import("./icapServer").IcapServer = null as any;
utilities.lazyLoad(exports, ["IcapServer"], () => require("./icapServer"));

export { IcapServerGroupArgs, IcapServerGroupState } from "./icapServerGroup";
export type IcapServerGroup = import("./icapServerGroup").IcapServerGroup;
export const IcapServerGroup: typeof import("./icapServerGroup").IcapServerGroup = null as any;
utilities.lazyLoad(exports, ["IcapServerGroup"], () => require("./icapServerGroup"));

export { IpsCustomArgs, IpsCustomState } from "./ipsCustom";
export type IpsCustom = import("./ipsCustom").IpsCustom;
export const IpsCustom: typeof import("./ipsCustom").IpsCustom = null as any;
utilities.lazyLoad(exports, ["IpsCustom"], () => require("./ipsCustom"));

export { IpsDecoderArgs, IpsDecoderState } from "./ipsDecoder";
export type IpsDecoder = import("./ipsDecoder").IpsDecoder;
export const IpsDecoder: typeof import("./ipsDecoder").IpsDecoder = null as any;
utilities.lazyLoad(exports, ["IpsDecoder"], () => require("./ipsDecoder"));

export { IpsGlobalArgs, IpsGlobalState } from "./ipsGlobal";
export type IpsGlobal = import("./ipsGlobal").IpsGlobal;
export const IpsGlobal: typeof import("./ipsGlobal").IpsGlobal = null as any;
utilities.lazyLoad(exports, ["IpsGlobal"], () => require("./ipsGlobal"));

export { IpsRuleArgs, IpsRuleState } from "./ipsRule";
export type IpsRule = import("./ipsRule").IpsRule;
export const IpsRule: typeof import("./ipsRule").IpsRule = null as any;
utilities.lazyLoad(exports, ["IpsRule"], () => require("./ipsRule"));

export { IpsRuleSettingsArgs, IpsRuleSettingsState } from "./ipsRuleSettings";
export type IpsRuleSettings = import("./ipsRuleSettings").IpsRuleSettings;
export const IpsRuleSettings: typeof import("./ipsRuleSettings").IpsRuleSettings = null as any;
utilities.lazyLoad(exports, ["IpsRuleSettings"], () => require("./ipsRuleSettings"));

export { IpsSensorArgs, IpsSensorState } from "./ipsSensor";
export type IpsSensor = import("./ipsSensor").IpsSensor;
export const IpsSensor: typeof import("./ipsSensor").IpsSensor = null as any;
utilities.lazyLoad(exports, ["IpsSensor"], () => require("./ipsSensor"));

export { IpsSettingsArgs, IpsSettingsState } from "./ipsSettings";
export type IpsSettings = import("./ipsSettings").IpsSettings;
export const IpsSettings: typeof import("./ipsSettings").IpsSettings = null as any;
utilities.lazyLoad(exports, ["IpsSettings"], () => require("./ipsSettings"));

export { IpsViewMapArgs, IpsViewMapState } from "./ipsViewMap";
export type IpsViewMap = import("./ipsViewMap").IpsViewMap;
export const IpsViewMap: typeof import("./ipsViewMap").IpsViewMap = null as any;
utilities.lazyLoad(exports, ["IpsViewMap"], () => require("./ipsViewMap"));

export { JSONGenericAPIArgs, JSONGenericAPIState } from "./jsongenericAPI";
export type JSONGenericAPI = import("./jsongenericAPI").JSONGenericAPI;
export const JSONGenericAPI: typeof import("./jsongenericAPI").JSONGenericAPI = null as any;
utilities.lazyLoad(exports, ["JSONGenericAPI"], () => require("./jsongenericAPI"));

export { LogCustomFieldArgs, LogCustomFieldState } from "./logCustomField";
export type LogCustomField = import("./logCustomField").LogCustomField;
export const LogCustomField: typeof import("./logCustomField").LogCustomField = null as any;
utilities.lazyLoad(exports, ["LogCustomField"], () => require("./logCustomField"));

export { LogDiskFilterArgs, LogDiskFilterState } from "./logDiskFilter";
export type LogDiskFilter = import("./logDiskFilter").LogDiskFilter;
export const LogDiskFilter: typeof import("./logDiskFilter").LogDiskFilter = null as any;
utilities.lazyLoad(exports, ["LogDiskFilter"], () => require("./logDiskFilter"));

export { LogDiskSettingArgs, LogDiskSettingState } from "./logDiskSetting";
export type LogDiskSetting = import("./logDiskSetting").LogDiskSetting;
export const LogDiskSetting: typeof import("./logDiskSetting").LogDiskSetting = null as any;
utilities.lazyLoad(exports, ["LogDiskSetting"], () => require("./logDiskSetting"));

export { LogEventfilterArgs, LogEventfilterState } from "./logEventfilter";
export type LogEventfilter = import("./logEventfilter").LogEventfilter;
export const LogEventfilter: typeof import("./logEventfilter").LogEventfilter = null as any;
utilities.lazyLoad(exports, ["LogEventfilter"], () => require("./logEventfilter"));

export { LogFortiAnalyzerSettingLegacyArgs, LogFortiAnalyzerSettingLegacyState } from "./logFortiAnalyzerSettingLegacy";
export type LogFortiAnalyzerSettingLegacy = import("./logFortiAnalyzerSettingLegacy").LogFortiAnalyzerSettingLegacy;
export const LogFortiAnalyzerSettingLegacy: typeof import("./logFortiAnalyzerSettingLegacy").LogFortiAnalyzerSettingLegacy = null as any;
utilities.lazyLoad(exports, ["LogFortiAnalyzerSettingLegacy"], () => require("./logFortiAnalyzerSettingLegacy"));

export { LogFortianalyzer2FilterArgs, LogFortianalyzer2FilterState } from "./logFortianalyzer2Filter";
export type LogFortianalyzer2Filter = import("./logFortianalyzer2Filter").LogFortianalyzer2Filter;
export const LogFortianalyzer2Filter: typeof import("./logFortianalyzer2Filter").LogFortianalyzer2Filter = null as any;
utilities.lazyLoad(exports, ["LogFortianalyzer2Filter"], () => require("./logFortianalyzer2Filter"));

export { LogFortianalyzer2OverrideFilterArgs, LogFortianalyzer2OverrideFilterState } from "./logFortianalyzer2OverrideFilter";
export type LogFortianalyzer2OverrideFilter = import("./logFortianalyzer2OverrideFilter").LogFortianalyzer2OverrideFilter;
export const LogFortianalyzer2OverrideFilter: typeof import("./logFortianalyzer2OverrideFilter").LogFortianalyzer2OverrideFilter = null as any;
utilities.lazyLoad(exports, ["LogFortianalyzer2OverrideFilter"], () => require("./logFortianalyzer2OverrideFilter"));

export { LogFortianalyzer2OverrideSettingArgs, LogFortianalyzer2OverrideSettingState } from "./logFortianalyzer2OverrideSetting";
export type LogFortianalyzer2OverrideSetting = import("./logFortianalyzer2OverrideSetting").LogFortianalyzer2OverrideSetting;
export const LogFortianalyzer2OverrideSetting: typeof import("./logFortianalyzer2OverrideSetting").LogFortianalyzer2OverrideSetting = null as any;
utilities.lazyLoad(exports, ["LogFortianalyzer2OverrideSetting"], () => require("./logFortianalyzer2OverrideSetting"));

export { LogFortianalyzer2SettingArgs, LogFortianalyzer2SettingState } from "./logFortianalyzer2Setting";
export type LogFortianalyzer2Setting = import("./logFortianalyzer2Setting").LogFortianalyzer2Setting;
export const LogFortianalyzer2Setting: typeof import("./logFortianalyzer2Setting").LogFortianalyzer2Setting = null as any;
utilities.lazyLoad(exports, ["LogFortianalyzer2Setting"], () => require("./logFortianalyzer2Setting"));

export { LogFortianalyzer3FilterArgs, LogFortianalyzer3FilterState } from "./logFortianalyzer3Filter";
export type LogFortianalyzer3Filter = import("./logFortianalyzer3Filter").LogFortianalyzer3Filter;
export const LogFortianalyzer3Filter: typeof import("./logFortianalyzer3Filter").LogFortianalyzer3Filter = null as any;
utilities.lazyLoad(exports, ["LogFortianalyzer3Filter"], () => require("./logFortianalyzer3Filter"));

export { LogFortianalyzer3OverrideFilterArgs, LogFortianalyzer3OverrideFilterState } from "./logFortianalyzer3OverrideFilter";
export type LogFortianalyzer3OverrideFilter = import("./logFortianalyzer3OverrideFilter").LogFortianalyzer3OverrideFilter;
export const LogFortianalyzer3OverrideFilter: typeof import("./logFortianalyzer3OverrideFilter").LogFortianalyzer3OverrideFilter = null as any;
utilities.lazyLoad(exports, ["LogFortianalyzer3OverrideFilter"], () => require("./logFortianalyzer3OverrideFilter"));

export { LogFortianalyzer3OverrideSettingArgs, LogFortianalyzer3OverrideSettingState } from "./logFortianalyzer3OverrideSetting";
export type LogFortianalyzer3OverrideSetting = import("./logFortianalyzer3OverrideSetting").LogFortianalyzer3OverrideSetting;
export const LogFortianalyzer3OverrideSetting: typeof import("./logFortianalyzer3OverrideSetting").LogFortianalyzer3OverrideSetting = null as any;
utilities.lazyLoad(exports, ["LogFortianalyzer3OverrideSetting"], () => require("./logFortianalyzer3OverrideSetting"));

export { LogFortianalyzer3SettingArgs, LogFortianalyzer3SettingState } from "./logFortianalyzer3Setting";
export type LogFortianalyzer3Setting = import("./logFortianalyzer3Setting").LogFortianalyzer3Setting;
export const LogFortianalyzer3Setting: typeof import("./logFortianalyzer3Setting").LogFortianalyzer3Setting = null as any;
utilities.lazyLoad(exports, ["LogFortianalyzer3Setting"], () => require("./logFortianalyzer3Setting"));

export { LogFortianalyzerCloudFilterArgs, LogFortianalyzerCloudFilterState } from "./logFortianalyzerCloudFilter";
export type LogFortianalyzerCloudFilter = import("./logFortianalyzerCloudFilter").LogFortianalyzerCloudFilter;
export const LogFortianalyzerCloudFilter: typeof import("./logFortianalyzerCloudFilter").LogFortianalyzerCloudFilter = null as any;
utilities.lazyLoad(exports, ["LogFortianalyzerCloudFilter"], () => require("./logFortianalyzerCloudFilter"));

export { LogFortianalyzerCloudOverrideFilterArgs, LogFortianalyzerCloudOverrideFilterState } from "./logFortianalyzerCloudOverrideFilter";
export type LogFortianalyzerCloudOverrideFilter = import("./logFortianalyzerCloudOverrideFilter").LogFortianalyzerCloudOverrideFilter;
export const LogFortianalyzerCloudOverrideFilter: typeof import("./logFortianalyzerCloudOverrideFilter").LogFortianalyzerCloudOverrideFilter = null as any;
utilities.lazyLoad(exports, ["LogFortianalyzerCloudOverrideFilter"], () => require("./logFortianalyzerCloudOverrideFilter"));

export { LogFortianalyzerCloudOverrideSettingArgs, LogFortianalyzerCloudOverrideSettingState } from "./logFortianalyzerCloudOverrideSetting";
export type LogFortianalyzerCloudOverrideSetting = import("./logFortianalyzerCloudOverrideSetting").LogFortianalyzerCloudOverrideSetting;
export const LogFortianalyzerCloudOverrideSetting: typeof import("./logFortianalyzerCloudOverrideSetting").LogFortianalyzerCloudOverrideSetting = null as any;
utilities.lazyLoad(exports, ["LogFortianalyzerCloudOverrideSetting"], () => require("./logFortianalyzerCloudOverrideSetting"));

export { LogFortianalyzerCloudSettingArgs, LogFortianalyzerCloudSettingState } from "./logFortianalyzerCloudSetting";
export type LogFortianalyzerCloudSetting = import("./logFortianalyzerCloudSetting").LogFortianalyzerCloudSetting;
export const LogFortianalyzerCloudSetting: typeof import("./logFortianalyzerCloudSetting").LogFortianalyzerCloudSetting = null as any;
utilities.lazyLoad(exports, ["LogFortianalyzerCloudSetting"], () => require("./logFortianalyzerCloudSetting"));

export { LogFortianalyzerFilterArgs, LogFortianalyzerFilterState } from "./logFortianalyzerFilter";
export type LogFortianalyzerFilter = import("./logFortianalyzerFilter").LogFortianalyzerFilter;
export const LogFortianalyzerFilter: typeof import("./logFortianalyzerFilter").LogFortianalyzerFilter = null as any;
utilities.lazyLoad(exports, ["LogFortianalyzerFilter"], () => require("./logFortianalyzerFilter"));

export { LogFortianalyzerOverrideFilterArgs, LogFortianalyzerOverrideFilterState } from "./logFortianalyzerOverrideFilter";
export type LogFortianalyzerOverrideFilter = import("./logFortianalyzerOverrideFilter").LogFortianalyzerOverrideFilter;
export const LogFortianalyzerOverrideFilter: typeof import("./logFortianalyzerOverrideFilter").LogFortianalyzerOverrideFilter = null as any;
utilities.lazyLoad(exports, ["LogFortianalyzerOverrideFilter"], () => require("./logFortianalyzerOverrideFilter"));

export { LogFortianalyzerOverrideSettingArgs, LogFortianalyzerOverrideSettingState } from "./logFortianalyzerOverrideSetting";
export type LogFortianalyzerOverrideSetting = import("./logFortianalyzerOverrideSetting").LogFortianalyzerOverrideSetting;
export const LogFortianalyzerOverrideSetting: typeof import("./logFortianalyzerOverrideSetting").LogFortianalyzerOverrideSetting = null as any;
utilities.lazyLoad(exports, ["LogFortianalyzerOverrideSetting"], () => require("./logFortianalyzerOverrideSetting"));

export { LogFortianalyzerSettingArgs, LogFortianalyzerSettingState } from "./logFortianalyzerSetting";
export type LogFortianalyzerSetting = import("./logFortianalyzerSetting").LogFortianalyzerSetting;
export const LogFortianalyzerSetting: typeof import("./logFortianalyzerSetting").LogFortianalyzerSetting = null as any;
utilities.lazyLoad(exports, ["LogFortianalyzerSetting"], () => require("./logFortianalyzerSetting"));

export { LogFortiguardFilterArgs, LogFortiguardFilterState } from "./logFortiguardFilter";
export type LogFortiguardFilter = import("./logFortiguardFilter").LogFortiguardFilter;
export const LogFortiguardFilter: typeof import("./logFortiguardFilter").LogFortiguardFilter = null as any;
utilities.lazyLoad(exports, ["LogFortiguardFilter"], () => require("./logFortiguardFilter"));

export { LogFortiguardOverrideFilterArgs, LogFortiguardOverrideFilterState } from "./logFortiguardOverrideFilter";
export type LogFortiguardOverrideFilter = import("./logFortiguardOverrideFilter").LogFortiguardOverrideFilter;
export const LogFortiguardOverrideFilter: typeof import("./logFortiguardOverrideFilter").LogFortiguardOverrideFilter = null as any;
utilities.lazyLoad(exports, ["LogFortiguardOverrideFilter"], () => require("./logFortiguardOverrideFilter"));

export { LogFortiguardOverrideSettingArgs, LogFortiguardOverrideSettingState } from "./logFortiguardOverrideSetting";
export type LogFortiguardOverrideSetting = import("./logFortiguardOverrideSetting").LogFortiguardOverrideSetting;
export const LogFortiguardOverrideSetting: typeof import("./logFortiguardOverrideSetting").LogFortiguardOverrideSetting = null as any;
utilities.lazyLoad(exports, ["LogFortiguardOverrideSetting"], () => require("./logFortiguardOverrideSetting"));

export { LogFortiguardSettingArgs, LogFortiguardSettingState } from "./logFortiguardSetting";
export type LogFortiguardSetting = import("./logFortiguardSetting").LogFortiguardSetting;
export const LogFortiguardSetting: typeof import("./logFortiguardSetting").LogFortiguardSetting = null as any;
utilities.lazyLoad(exports, ["LogFortiguardSetting"], () => require("./logFortiguardSetting"));

export { LogGuiDisplayArgs, LogGuiDisplayState } from "./logGuiDisplay";
export type LogGuiDisplay = import("./logGuiDisplay").LogGuiDisplay;
export const LogGuiDisplay: typeof import("./logGuiDisplay").LogGuiDisplay = null as any;
utilities.lazyLoad(exports, ["LogGuiDisplay"], () => require("./logGuiDisplay"));

export { LogMemoryFilterArgs, LogMemoryFilterState } from "./logMemoryFilter";
export type LogMemoryFilter = import("./logMemoryFilter").LogMemoryFilter;
export const LogMemoryFilter: typeof import("./logMemoryFilter").LogMemoryFilter = null as any;
utilities.lazyLoad(exports, ["LogMemoryFilter"], () => require("./logMemoryFilter"));

export { LogMemoryGlobalSettingArgs, LogMemoryGlobalSettingState } from "./logMemoryGlobalSetting";
export type LogMemoryGlobalSetting = import("./logMemoryGlobalSetting").LogMemoryGlobalSetting;
export const LogMemoryGlobalSetting: typeof import("./logMemoryGlobalSetting").LogMemoryGlobalSetting = null as any;
utilities.lazyLoad(exports, ["LogMemoryGlobalSetting"], () => require("./logMemoryGlobalSetting"));

export { LogMemorySettingArgs, LogMemorySettingState } from "./logMemorySetting";
export type LogMemorySetting = import("./logMemorySetting").LogMemorySetting;
export const LogMemorySetting: typeof import("./logMemorySetting").LogMemorySetting = null as any;
utilities.lazyLoad(exports, ["LogMemorySetting"], () => require("./logMemorySetting"));

export { LogNullDeviceFilterArgs, LogNullDeviceFilterState } from "./logNullDeviceFilter";
export type LogNullDeviceFilter = import("./logNullDeviceFilter").LogNullDeviceFilter;
export const LogNullDeviceFilter: typeof import("./logNullDeviceFilter").LogNullDeviceFilter = null as any;
utilities.lazyLoad(exports, ["LogNullDeviceFilter"], () => require("./logNullDeviceFilter"));

export { LogNullDeviceSettingArgs, LogNullDeviceSettingState } from "./logNullDeviceSetting";
export type LogNullDeviceSetting = import("./logNullDeviceSetting").LogNullDeviceSetting;
export const LogNullDeviceSetting: typeof import("./logNullDeviceSetting").LogNullDeviceSetting = null as any;
utilities.lazyLoad(exports, ["LogNullDeviceSetting"], () => require("./logNullDeviceSetting"));

export { LogSettingArgs, LogSettingState } from "./logSetting";
export type LogSetting = import("./logSetting").LogSetting;
export const LogSetting: typeof import("./logSetting").LogSetting = null as any;
utilities.lazyLoad(exports, ["LogSetting"], () => require("./logSetting"));

export { LogSyslogSettingArgs, LogSyslogSettingState } from "./logSyslogSetting";
export type LogSyslogSetting = import("./logSyslogSetting").LogSyslogSetting;
export const LogSyslogSetting: typeof import("./logSyslogSetting").LogSyslogSetting = null as any;
utilities.lazyLoad(exports, ["LogSyslogSetting"], () => require("./logSyslogSetting"));

export { LogSyslogd2FilterArgs, LogSyslogd2FilterState } from "./logSyslogd2Filter";
export type LogSyslogd2Filter = import("./logSyslogd2Filter").LogSyslogd2Filter;
export const LogSyslogd2Filter: typeof import("./logSyslogd2Filter").LogSyslogd2Filter = null as any;
utilities.lazyLoad(exports, ["LogSyslogd2Filter"], () => require("./logSyslogd2Filter"));

export { LogSyslogd2OverrideFilterArgs, LogSyslogd2OverrideFilterState } from "./logSyslogd2OverrideFilter";
export type LogSyslogd2OverrideFilter = import("./logSyslogd2OverrideFilter").LogSyslogd2OverrideFilter;
export const LogSyslogd2OverrideFilter: typeof import("./logSyslogd2OverrideFilter").LogSyslogd2OverrideFilter = null as any;
utilities.lazyLoad(exports, ["LogSyslogd2OverrideFilter"], () => require("./logSyslogd2OverrideFilter"));

export { LogSyslogd2OverrideSettingArgs, LogSyslogd2OverrideSettingState } from "./logSyslogd2OverrideSetting";
export type LogSyslogd2OverrideSetting = import("./logSyslogd2OverrideSetting").LogSyslogd2OverrideSetting;
export const LogSyslogd2OverrideSetting: typeof import("./logSyslogd2OverrideSetting").LogSyslogd2OverrideSetting = null as any;
utilities.lazyLoad(exports, ["LogSyslogd2OverrideSetting"], () => require("./logSyslogd2OverrideSetting"));

export { LogSyslogd2SettingArgs, LogSyslogd2SettingState } from "./logSyslogd2Setting";
export type LogSyslogd2Setting = import("./logSyslogd2Setting").LogSyslogd2Setting;
export const LogSyslogd2Setting: typeof import("./logSyslogd2Setting").LogSyslogd2Setting = null as any;
utilities.lazyLoad(exports, ["LogSyslogd2Setting"], () => require("./logSyslogd2Setting"));

export { LogSyslogd3FilterArgs, LogSyslogd3FilterState } from "./logSyslogd3Filter";
export type LogSyslogd3Filter = import("./logSyslogd3Filter").LogSyslogd3Filter;
export const LogSyslogd3Filter: typeof import("./logSyslogd3Filter").LogSyslogd3Filter = null as any;
utilities.lazyLoad(exports, ["LogSyslogd3Filter"], () => require("./logSyslogd3Filter"));

export { LogSyslogd3OverrideFilterArgs, LogSyslogd3OverrideFilterState } from "./logSyslogd3OverrideFilter";
export type LogSyslogd3OverrideFilter = import("./logSyslogd3OverrideFilter").LogSyslogd3OverrideFilter;
export const LogSyslogd3OverrideFilter: typeof import("./logSyslogd3OverrideFilter").LogSyslogd3OverrideFilter = null as any;
utilities.lazyLoad(exports, ["LogSyslogd3OverrideFilter"], () => require("./logSyslogd3OverrideFilter"));

export { LogSyslogd3OverrideSettingArgs, LogSyslogd3OverrideSettingState } from "./logSyslogd3OverrideSetting";
export type LogSyslogd3OverrideSetting = import("./logSyslogd3OverrideSetting").LogSyslogd3OverrideSetting;
export const LogSyslogd3OverrideSetting: typeof import("./logSyslogd3OverrideSetting").LogSyslogd3OverrideSetting = null as any;
utilities.lazyLoad(exports, ["LogSyslogd3OverrideSetting"], () => require("./logSyslogd3OverrideSetting"));

export { LogSyslogd3SettingArgs, LogSyslogd3SettingState } from "./logSyslogd3Setting";
export type LogSyslogd3Setting = import("./logSyslogd3Setting").LogSyslogd3Setting;
export const LogSyslogd3Setting: typeof import("./logSyslogd3Setting").LogSyslogd3Setting = null as any;
utilities.lazyLoad(exports, ["LogSyslogd3Setting"], () => require("./logSyslogd3Setting"));

export { LogSyslogd4FilterArgs, LogSyslogd4FilterState } from "./logSyslogd4Filter";
export type LogSyslogd4Filter = import("./logSyslogd4Filter").LogSyslogd4Filter;
export const LogSyslogd4Filter: typeof import("./logSyslogd4Filter").LogSyslogd4Filter = null as any;
utilities.lazyLoad(exports, ["LogSyslogd4Filter"], () => require("./logSyslogd4Filter"));

export { LogSyslogd4OverrideFilterArgs, LogSyslogd4OverrideFilterState } from "./logSyslogd4OverrideFilter";
export type LogSyslogd4OverrideFilter = import("./logSyslogd4OverrideFilter").LogSyslogd4OverrideFilter;
export const LogSyslogd4OverrideFilter: typeof import("./logSyslogd4OverrideFilter").LogSyslogd4OverrideFilter = null as any;
utilities.lazyLoad(exports, ["LogSyslogd4OverrideFilter"], () => require("./logSyslogd4OverrideFilter"));

export { LogSyslogd4OverrideSettingArgs, LogSyslogd4OverrideSettingState } from "./logSyslogd4OverrideSetting";
export type LogSyslogd4OverrideSetting = import("./logSyslogd4OverrideSetting").LogSyslogd4OverrideSetting;
export const LogSyslogd4OverrideSetting: typeof import("./logSyslogd4OverrideSetting").LogSyslogd4OverrideSetting = null as any;
utilities.lazyLoad(exports, ["LogSyslogd4OverrideSetting"], () => require("./logSyslogd4OverrideSetting"));

export { LogSyslogd4SettingArgs, LogSyslogd4SettingState } from "./logSyslogd4Setting";
export type LogSyslogd4Setting = import("./logSyslogd4Setting").LogSyslogd4Setting;
export const LogSyslogd4Setting: typeof import("./logSyslogd4Setting").LogSyslogd4Setting = null as any;
utilities.lazyLoad(exports, ["LogSyslogd4Setting"], () => require("./logSyslogd4Setting"));

export { LogSyslogdFilterArgs, LogSyslogdFilterState } from "./logSyslogdFilter";
export type LogSyslogdFilter = import("./logSyslogdFilter").LogSyslogdFilter;
export const LogSyslogdFilter: typeof import("./logSyslogdFilter").LogSyslogdFilter = null as any;
utilities.lazyLoad(exports, ["LogSyslogdFilter"], () => require("./logSyslogdFilter"));

export { LogSyslogdOverrideFilterArgs, LogSyslogdOverrideFilterState } from "./logSyslogdOverrideFilter";
export type LogSyslogdOverrideFilter = import("./logSyslogdOverrideFilter").LogSyslogdOverrideFilter;
export const LogSyslogdOverrideFilter: typeof import("./logSyslogdOverrideFilter").LogSyslogdOverrideFilter = null as any;
utilities.lazyLoad(exports, ["LogSyslogdOverrideFilter"], () => require("./logSyslogdOverrideFilter"));

export { LogSyslogdOverrideSettingArgs, LogSyslogdOverrideSettingState } from "./logSyslogdOverrideSetting";
export type LogSyslogdOverrideSetting = import("./logSyslogdOverrideSetting").LogSyslogdOverrideSetting;
export const LogSyslogdOverrideSetting: typeof import("./logSyslogdOverrideSetting").LogSyslogdOverrideSetting = null as any;
utilities.lazyLoad(exports, ["LogSyslogdOverrideSetting"], () => require("./logSyslogdOverrideSetting"));

export { LogSyslogdSettingArgs, LogSyslogdSettingState } from "./logSyslogdSetting";
export type LogSyslogdSetting = import("./logSyslogdSetting").LogSyslogdSetting;
export const LogSyslogdSetting: typeof import("./logSyslogdSetting").LogSyslogdSetting = null as any;
utilities.lazyLoad(exports, ["LogSyslogdSetting"], () => require("./logSyslogdSetting"));

export { LogTacacsAccounting2FilterArgs, LogTacacsAccounting2FilterState } from "./logTacacsAccounting2Filter";
export type LogTacacsAccounting2Filter = import("./logTacacsAccounting2Filter").LogTacacsAccounting2Filter;
export const LogTacacsAccounting2Filter: typeof import("./logTacacsAccounting2Filter").LogTacacsAccounting2Filter = null as any;
utilities.lazyLoad(exports, ["LogTacacsAccounting2Filter"], () => require("./logTacacsAccounting2Filter"));

export { LogTacacsAccounting2SettingArgs, LogTacacsAccounting2SettingState } from "./logTacacsAccounting2Setting";
export type LogTacacsAccounting2Setting = import("./logTacacsAccounting2Setting").LogTacacsAccounting2Setting;
export const LogTacacsAccounting2Setting: typeof import("./logTacacsAccounting2Setting").LogTacacsAccounting2Setting = null as any;
utilities.lazyLoad(exports, ["LogTacacsAccounting2Setting"], () => require("./logTacacsAccounting2Setting"));

export { LogTacacsAccounting3FilterArgs, LogTacacsAccounting3FilterState } from "./logTacacsAccounting3Filter";
export type LogTacacsAccounting3Filter = import("./logTacacsAccounting3Filter").LogTacacsAccounting3Filter;
export const LogTacacsAccounting3Filter: typeof import("./logTacacsAccounting3Filter").LogTacacsAccounting3Filter = null as any;
utilities.lazyLoad(exports, ["LogTacacsAccounting3Filter"], () => require("./logTacacsAccounting3Filter"));

export { LogTacacsAccounting3SettingArgs, LogTacacsAccounting3SettingState } from "./logTacacsAccounting3Setting";
export type LogTacacsAccounting3Setting = import("./logTacacsAccounting3Setting").LogTacacsAccounting3Setting;
export const LogTacacsAccounting3Setting: typeof import("./logTacacsAccounting3Setting").LogTacacsAccounting3Setting = null as any;
utilities.lazyLoad(exports, ["LogTacacsAccounting3Setting"], () => require("./logTacacsAccounting3Setting"));

export { LogTacacsAccountingFilterArgs, LogTacacsAccountingFilterState } from "./logTacacsAccountingFilter";
export type LogTacacsAccountingFilter = import("./logTacacsAccountingFilter").LogTacacsAccountingFilter;
export const LogTacacsAccountingFilter: typeof import("./logTacacsAccountingFilter").LogTacacsAccountingFilter = null as any;
utilities.lazyLoad(exports, ["LogTacacsAccountingFilter"], () => require("./logTacacsAccountingFilter"));

export { LogTacacsAccountingSettingArgs, LogTacacsAccountingSettingState } from "./logTacacsAccountingSetting";
export type LogTacacsAccountingSetting = import("./logTacacsAccountingSetting").LogTacacsAccountingSetting;
export const LogTacacsAccountingSetting: typeof import("./logTacacsAccountingSetting").LogTacacsAccountingSetting = null as any;
utilities.lazyLoad(exports, ["LogTacacsAccountingSetting"], () => require("./logTacacsAccountingSetting"));

export { LogThreatWeightArgs, LogThreatWeightState } from "./logThreatWeight";
export type LogThreatWeight = import("./logThreatWeight").LogThreatWeight;
export const LogThreatWeight: typeof import("./logThreatWeight").LogThreatWeight = null as any;
utilities.lazyLoad(exports, ["LogThreatWeight"], () => require("./logThreatWeight"));

export { LogWebtrendsFilterArgs, LogWebtrendsFilterState } from "./logWebtrendsFilter";
export type LogWebtrendsFilter = import("./logWebtrendsFilter").LogWebtrendsFilter;
export const LogWebtrendsFilter: typeof import("./logWebtrendsFilter").LogWebtrendsFilter = null as any;
utilities.lazyLoad(exports, ["LogWebtrendsFilter"], () => require("./logWebtrendsFilter"));

export { LogWebtrendsSettingArgs, LogWebtrendsSettingState } from "./logWebtrendsSetting";
export type LogWebtrendsSetting = import("./logWebtrendsSetting").LogWebtrendsSetting;
export const LogWebtrendsSetting: typeof import("./logWebtrendsSetting").LogWebtrendsSetting = null as any;
utilities.lazyLoad(exports, ["LogWebtrendsSetting"], () => require("./logWebtrendsSetting"));

export { NetworkingInterfacePortArgs, NetworkingInterfacePortState } from "./networkingInterfacePort";
export type NetworkingInterfacePort = import("./networkingInterfacePort").NetworkingInterfacePort;
export const NetworkingInterfacePort: typeof import("./networkingInterfacePort").NetworkingInterfacePort = null as any;
utilities.lazyLoad(exports, ["NetworkingInterfacePort"], () => require("./networkingInterfacePort"));

export { NetworkingRouteStaticArgs, NetworkingRouteStaticState } from "./networkingRouteStatic";
export type NetworkingRouteStatic = import("./networkingRouteStatic").NetworkingRouteStatic;
export const NetworkingRouteStatic: typeof import("./networkingRouteStatic").NetworkingRouteStatic = null as any;
utilities.lazyLoad(exports, ["NetworkingRouteStatic"], () => require("./networkingRouteStatic"));

export { NsxtServiceChainArgs, NsxtServiceChainState } from "./nsxtServiceChain";
export type NsxtServiceChain = import("./nsxtServiceChain").NsxtServiceChain;
export const NsxtServiceChain: typeof import("./nsxtServiceChain").NsxtServiceChain = null as any;
utilities.lazyLoad(exports, ["NsxtServiceChain"], () => require("./nsxtServiceChain"));

export { NsxtSettingArgs, NsxtSettingState } from "./nsxtSetting";
export type NsxtSetting = import("./nsxtSetting").NsxtSetting;
export const NsxtSetting: typeof import("./nsxtSetting").NsxtSetting = null as any;
utilities.lazyLoad(exports, ["NsxtSetting"], () => require("./nsxtSetting"));

export { ProviderArgs } from "./provider";
export type Provider = import("./provider").Provider;
export const Provider: typeof import("./provider").Provider = null as any;
utilities.lazyLoad(exports, ["Provider"], () => require("./provider"));

export { ReportChartArgs, ReportChartState } from "./reportChart";
export type ReportChart = import("./reportChart").ReportChart;
export const ReportChart: typeof import("./reportChart").ReportChart = null as any;
utilities.lazyLoad(exports, ["ReportChart"], () => require("./reportChart"));

export { ReportDatasetArgs, ReportDatasetState } from "./reportDataset";
export type ReportDataset = import("./reportDataset").ReportDataset;
export const ReportDataset: typeof import("./reportDataset").ReportDataset = null as any;
utilities.lazyLoad(exports, ["ReportDataset"], () => require("./reportDataset"));

export { ReportLayoutArgs, ReportLayoutState } from "./reportLayout";
export type ReportLayout = import("./reportLayout").ReportLayout;
export const ReportLayout: typeof import("./reportLayout").ReportLayout = null as any;
utilities.lazyLoad(exports, ["ReportLayout"], () => require("./reportLayout"));

export { ReportSettingArgs, ReportSettingState } from "./reportSetting";
export type ReportSetting = import("./reportSetting").ReportSetting;
export const ReportSetting: typeof import("./reportSetting").ReportSetting = null as any;
utilities.lazyLoad(exports, ["ReportSetting"], () => require("./reportSetting"));

export { ReportStyleArgs, ReportStyleState } from "./reportStyle";
export type ReportStyle = import("./reportStyle").ReportStyle;
export const ReportStyle: typeof import("./reportStyle").ReportStyle = null as any;
utilities.lazyLoad(exports, ["ReportStyle"], () => require("./reportStyle"));

export { ReportThemeArgs, ReportThemeState } from "./reportTheme";
export type ReportTheme = import("./reportTheme").ReportTheme;
export const ReportTheme: typeof import("./reportTheme").ReportTheme = null as any;
utilities.lazyLoad(exports, ["ReportTheme"], () => require("./reportTheme"));

export { RouterAccessListArgs, RouterAccessListState } from "./routerAccessList";
export type RouterAccessList = import("./routerAccessList").RouterAccessList;
export const RouterAccessList: typeof import("./routerAccessList").RouterAccessList = null as any;
utilities.lazyLoad(exports, ["RouterAccessList"], () => require("./routerAccessList"));

export { RouterAccessList6Args, RouterAccessList6State } from "./routerAccessList6";
export type RouterAccessList6 = import("./routerAccessList6").RouterAccessList6;
export const RouterAccessList6: typeof import("./routerAccessList6").RouterAccessList6 = null as any;
utilities.lazyLoad(exports, ["RouterAccessList6"], () => require("./routerAccessList6"));

export { RouterAspathListArgs, RouterAspathListState } from "./routerAspathList";
export type RouterAspathList = import("./routerAspathList").RouterAspathList;
export const RouterAspathList: typeof import("./routerAspathList").RouterAspathList = null as any;
utilities.lazyLoad(exports, ["RouterAspathList"], () => require("./routerAspathList"));

export { RouterAuthPathArgs, RouterAuthPathState } from "./routerAuthPath";
export type RouterAuthPath = import("./routerAuthPath").RouterAuthPath;
export const RouterAuthPath: typeof import("./routerAuthPath").RouterAuthPath = null as any;
utilities.lazyLoad(exports, ["RouterAuthPath"], () => require("./routerAuthPath"));

export { RouterBfdArgs, RouterBfdState } from "./routerBfd";
export type RouterBfd = import("./routerBfd").RouterBfd;
export const RouterBfd: typeof import("./routerBfd").RouterBfd = null as any;
utilities.lazyLoad(exports, ["RouterBfd"], () => require("./routerBfd"));

export { RouterBfd6Args, RouterBfd6State } from "./routerBfd6";
export type RouterBfd6 = import("./routerBfd6").RouterBfd6;
export const RouterBfd6: typeof import("./routerBfd6").RouterBfd6 = null as any;
utilities.lazyLoad(exports, ["RouterBfd6"], () => require("./routerBfd6"));

export { RouterBgpArgs, RouterBgpState } from "./routerBgp";
export type RouterBgp = import("./routerBgp").RouterBgp;
export const RouterBgp: typeof import("./routerBgp").RouterBgp = null as any;
utilities.lazyLoad(exports, ["RouterBgp"], () => require("./routerBgp"));

export { RouterCommunityListArgs, RouterCommunityListState } from "./routerCommunityList";
export type RouterCommunityList = import("./routerCommunityList").RouterCommunityList;
export const RouterCommunityList: typeof import("./routerCommunityList").RouterCommunityList = null as any;
utilities.lazyLoad(exports, ["RouterCommunityList"], () => require("./routerCommunityList"));

export { RouterIsisArgs, RouterIsisState } from "./routerIsis";
export type RouterIsis = import("./routerIsis").RouterIsis;
export const RouterIsis: typeof import("./routerIsis").RouterIsis = null as any;
utilities.lazyLoad(exports, ["RouterIsis"], () => require("./routerIsis"));

export { RouterKeyChainArgs, RouterKeyChainState } from "./routerKeyChain";
export type RouterKeyChain = import("./routerKeyChain").RouterKeyChain;
export const RouterKeyChain: typeof import("./routerKeyChain").RouterKeyChain = null as any;
utilities.lazyLoad(exports, ["RouterKeyChain"], () => require("./routerKeyChain"));

export { RouterMulticastArgs, RouterMulticastState } from "./routerMulticast";
export type RouterMulticast = import("./routerMulticast").RouterMulticast;
export const RouterMulticast: typeof import("./routerMulticast").RouterMulticast = null as any;
utilities.lazyLoad(exports, ["RouterMulticast"], () => require("./routerMulticast"));

export { RouterMulticast6Args, RouterMulticast6State } from "./routerMulticast6";
export type RouterMulticast6 = import("./routerMulticast6").RouterMulticast6;
export const RouterMulticast6: typeof import("./routerMulticast6").RouterMulticast6 = null as any;
utilities.lazyLoad(exports, ["RouterMulticast6"], () => require("./routerMulticast6"));

export { RouterMulticastFlowArgs, RouterMulticastFlowState } from "./routerMulticastFlow";
export type RouterMulticastFlow = import("./routerMulticastFlow").RouterMulticastFlow;
export const RouterMulticastFlow: typeof import("./routerMulticastFlow").RouterMulticastFlow = null as any;
utilities.lazyLoad(exports, ["RouterMulticastFlow"], () => require("./routerMulticastFlow"));

export { RouterOspfArgs, RouterOspfState } from "./routerOspf";
export type RouterOspf = import("./routerOspf").RouterOspf;
export const RouterOspf: typeof import("./routerOspf").RouterOspf = null as any;
utilities.lazyLoad(exports, ["RouterOspf"], () => require("./routerOspf"));

export { RouterOspf6Args, RouterOspf6State } from "./routerOspf6";
export type RouterOspf6 = import("./routerOspf6").RouterOspf6;
export const RouterOspf6: typeof import("./routerOspf6").RouterOspf6 = null as any;
utilities.lazyLoad(exports, ["RouterOspf6"], () => require("./routerOspf6"));

export { RouterPolicyArgs, RouterPolicyState } from "./routerPolicy";
export type RouterPolicy = import("./routerPolicy").RouterPolicy;
export const RouterPolicy: typeof import("./routerPolicy").RouterPolicy = null as any;
utilities.lazyLoad(exports, ["RouterPolicy"], () => require("./routerPolicy"));

export { RouterPolicy6Args, RouterPolicy6State } from "./routerPolicy6";
export type RouterPolicy6 = import("./routerPolicy6").RouterPolicy6;
export const RouterPolicy6: typeof import("./routerPolicy6").RouterPolicy6 = null as any;
utilities.lazyLoad(exports, ["RouterPolicy6"], () => require("./routerPolicy6"));

export { RouterPrefixListArgs, RouterPrefixListState } from "./routerPrefixList";
export type RouterPrefixList = import("./routerPrefixList").RouterPrefixList;
export const RouterPrefixList: typeof import("./routerPrefixList").RouterPrefixList = null as any;
utilities.lazyLoad(exports, ["RouterPrefixList"], () => require("./routerPrefixList"));

export { RouterPrefixList6Args, RouterPrefixList6State } from "./routerPrefixList6";
export type RouterPrefixList6 = import("./routerPrefixList6").RouterPrefixList6;
export const RouterPrefixList6: typeof import("./routerPrefixList6").RouterPrefixList6 = null as any;
utilities.lazyLoad(exports, ["RouterPrefixList6"], () => require("./routerPrefixList6"));

export { RouterRipArgs, RouterRipState } from "./routerRip";
export type RouterRip = import("./routerRip").RouterRip;
export const RouterRip: typeof import("./routerRip").RouterRip = null as any;
utilities.lazyLoad(exports, ["RouterRip"], () => require("./routerRip"));

export { RouterRipngArgs, RouterRipngState } from "./routerRipng";
export type RouterRipng = import("./routerRipng").RouterRipng;
export const RouterRipng: typeof import("./routerRipng").RouterRipng = null as any;
utilities.lazyLoad(exports, ["RouterRipng"], () => require("./routerRipng"));

export { RouterRouteMapArgs, RouterRouteMapState } from "./routerRouteMap";
export type RouterRouteMap = import("./routerRouteMap").RouterRouteMap;
export const RouterRouteMap: typeof import("./routerRouteMap").RouterRouteMap = null as any;
utilities.lazyLoad(exports, ["RouterRouteMap"], () => require("./routerRouteMap"));

export { RouterSettingArgs, RouterSettingState } from "./routerSetting";
export type RouterSetting = import("./routerSetting").RouterSetting;
export const RouterSetting: typeof import("./routerSetting").RouterSetting = null as any;
utilities.lazyLoad(exports, ["RouterSetting"], () => require("./routerSetting"));

export { RouterStaticArgs, RouterStaticState } from "./routerStatic";
export type RouterStatic = import("./routerStatic").RouterStatic;
export const RouterStatic: typeof import("./routerStatic").RouterStatic = null as any;
utilities.lazyLoad(exports, ["RouterStatic"], () => require("./routerStatic"));

export { RouterStatic6Args, RouterStatic6State } from "./routerStatic6";
export type RouterStatic6 = import("./routerStatic6").RouterStatic6;
export const RouterStatic6: typeof import("./routerStatic6").RouterStatic6 = null as any;
utilities.lazyLoad(exports, ["RouterStatic6"], () => require("./routerStatic6"));

export { RouterbgpNeighborArgs, RouterbgpNeighborState } from "./routerbgpNeighbor";
export type RouterbgpNeighbor = import("./routerbgpNeighbor").RouterbgpNeighbor;
export const RouterbgpNeighbor: typeof import("./routerbgpNeighbor").RouterbgpNeighbor = null as any;
utilities.lazyLoad(exports, ["RouterbgpNeighbor"], () => require("./routerbgpNeighbor"));

export { RouterbgpNetworkArgs, RouterbgpNetworkState } from "./routerbgpNetwork";
export type RouterbgpNetwork = import("./routerbgpNetwork").RouterbgpNetwork;
export const RouterbgpNetwork: typeof import("./routerbgpNetwork").RouterbgpNetwork = null as any;
utilities.lazyLoad(exports, ["RouterbgpNetwork"], () => require("./routerbgpNetwork"));

export { RouterbgpNetwork6Args, RouterbgpNetwork6State } from "./routerbgpNetwork6";
export type RouterbgpNetwork6 = import("./routerbgpNetwork6").RouterbgpNetwork6;
export const RouterbgpNetwork6: typeof import("./routerbgpNetwork6").RouterbgpNetwork6 = null as any;
utilities.lazyLoad(exports, ["RouterbgpNetwork6"], () => require("./routerbgpNetwork6"));

export { Routerospf6Ospf6InterfaceArgs, Routerospf6Ospf6InterfaceState } from "./routerospf6Ospf6Interface";
export type Routerospf6Ospf6Interface = import("./routerospf6Ospf6Interface").Routerospf6Ospf6Interface;
export const Routerospf6Ospf6Interface: typeof import("./routerospf6Ospf6Interface").Routerospf6Ospf6Interface = null as any;
utilities.lazyLoad(exports, ["Routerospf6Ospf6Interface"], () => require("./routerospf6Ospf6Interface"));

export { RouterospfNeighborArgs, RouterospfNeighborState } from "./routerospfNeighbor";
export type RouterospfNeighbor = import("./routerospfNeighbor").RouterospfNeighbor;
export const RouterospfNeighbor: typeof import("./routerospfNeighbor").RouterospfNeighbor = null as any;
utilities.lazyLoad(exports, ["RouterospfNeighbor"], () => require("./routerospfNeighbor"));

export { RouterospfNetworkArgs, RouterospfNetworkState } from "./routerospfNetwork";
export type RouterospfNetwork = import("./routerospfNetwork").RouterospfNetwork;
export const RouterospfNetwork: typeof import("./routerospfNetwork").RouterospfNetwork = null as any;
utilities.lazyLoad(exports, ["RouterospfNetwork"], () => require("./routerospfNetwork"));

export { RouterospfOspfInterfaceArgs, RouterospfOspfInterfaceState } from "./routerospfOspfInterface";
export type RouterospfOspfInterface = import("./routerospfOspfInterface").RouterospfOspfInterface;
export const RouterospfOspfInterface: typeof import("./routerospfOspfInterface").RouterospfOspfInterface = null as any;
utilities.lazyLoad(exports, ["RouterospfOspfInterface"], () => require("./routerospfOspfInterface"));

export { SctpFilterProfileArgs, SctpFilterProfileState } from "./sctpFilterProfile";
export type SctpFilterProfile = import("./sctpFilterProfile").SctpFilterProfile;
export const SctpFilterProfile: typeof import("./sctpFilterProfile").SctpFilterProfile = null as any;
utilities.lazyLoad(exports, ["SctpFilterProfile"], () => require("./sctpFilterProfile"));

export { SpamfilterBwlArgs, SpamfilterBwlState } from "./spamfilterBwl";
export type SpamfilterBwl = import("./spamfilterBwl").SpamfilterBwl;
export const SpamfilterBwl: typeof import("./spamfilterBwl").SpamfilterBwl = null as any;
utilities.lazyLoad(exports, ["SpamfilterBwl"], () => require("./spamfilterBwl"));

export { SpamfilterBwordArgs, SpamfilterBwordState } from "./spamfilterBword";
export type SpamfilterBword = import("./spamfilterBword").SpamfilterBword;
export const SpamfilterBword: typeof import("./spamfilterBword").SpamfilterBword = null as any;
utilities.lazyLoad(exports, ["SpamfilterBword"], () => require("./spamfilterBword"));

export { SpamfilterDnsblArgs, SpamfilterDnsblState } from "./spamfilterDnsbl";
export type SpamfilterDnsbl = import("./spamfilterDnsbl").SpamfilterDnsbl;
export const SpamfilterDnsbl: typeof import("./spamfilterDnsbl").SpamfilterDnsbl = null as any;
utilities.lazyLoad(exports, ["SpamfilterDnsbl"], () => require("./spamfilterDnsbl"));

export { SpamfilterFortishieldArgs, SpamfilterFortishieldState } from "./spamfilterFortishield";
export type SpamfilterFortishield = import("./spamfilterFortishield").SpamfilterFortishield;
export const SpamfilterFortishield: typeof import("./spamfilterFortishield").SpamfilterFortishield = null as any;
utilities.lazyLoad(exports, ["SpamfilterFortishield"], () => require("./spamfilterFortishield"));

export { SpamfilterIptrustArgs, SpamfilterIptrustState } from "./spamfilterIptrust";
export type SpamfilterIptrust = import("./spamfilterIptrust").SpamfilterIptrust;
export const SpamfilterIptrust: typeof import("./spamfilterIptrust").SpamfilterIptrust = null as any;
utilities.lazyLoad(exports, ["SpamfilterIptrust"], () => require("./spamfilterIptrust"));

export { SpamfilterMheaderArgs, SpamfilterMheaderState } from "./spamfilterMheader";
export type SpamfilterMheader = import("./spamfilterMheader").SpamfilterMheader;
export const SpamfilterMheader: typeof import("./spamfilterMheader").SpamfilterMheader = null as any;
utilities.lazyLoad(exports, ["SpamfilterMheader"], () => require("./spamfilterMheader"));

export { SpamfilterOptionsArgs, SpamfilterOptionsState } from "./spamfilterOptions";
export type SpamfilterOptions = import("./spamfilterOptions").SpamfilterOptions;
export const SpamfilterOptions: typeof import("./spamfilterOptions").SpamfilterOptions = null as any;
utilities.lazyLoad(exports, ["SpamfilterOptions"], () => require("./spamfilterOptions"));

export { SpamfilterProfileArgs, SpamfilterProfileState } from "./spamfilterProfile";
export type SpamfilterProfile = import("./spamfilterProfile").SpamfilterProfile;
export const SpamfilterProfile: typeof import("./spamfilterProfile").SpamfilterProfile = null as any;
utilities.lazyLoad(exports, ["SpamfilterProfile"], () => require("./spamfilterProfile"));

export { SshFilterProfileArgs, SshFilterProfileState } from "./sshFilterProfile";
export type SshFilterProfile = import("./sshFilterProfile").SshFilterProfile;
export const SshFilterProfile: typeof import("./sshFilterProfile").SshFilterProfile = null as any;
utilities.lazyLoad(exports, ["SshFilterProfile"], () => require("./sshFilterProfile"));

export { SwitchController8021XSettingsArgs, SwitchController8021XSettingsState } from "./switchController8021XSettings";
export type SwitchController8021XSettings = import("./switchController8021XSettings").SwitchController8021XSettings;
export const SwitchController8021XSettings: typeof import("./switchController8021XSettings").SwitchController8021XSettings = null as any;
utilities.lazyLoad(exports, ["SwitchController8021XSettings"], () => require("./switchController8021XSettings"));

export { SwitchControllerAutoConfigCustomArgs, SwitchControllerAutoConfigCustomState } from "./switchControllerAutoConfigCustom";
export type SwitchControllerAutoConfigCustom = import("./switchControllerAutoConfigCustom").SwitchControllerAutoConfigCustom;
export const SwitchControllerAutoConfigCustom: typeof import("./switchControllerAutoConfigCustom").SwitchControllerAutoConfigCustom = null as any;
utilities.lazyLoad(exports, ["SwitchControllerAutoConfigCustom"], () => require("./switchControllerAutoConfigCustom"));

export { SwitchControllerAutoConfigDefaultArgs, SwitchControllerAutoConfigDefaultState } from "./switchControllerAutoConfigDefault";
export type SwitchControllerAutoConfigDefault = import("./switchControllerAutoConfigDefault").SwitchControllerAutoConfigDefault;
export const SwitchControllerAutoConfigDefault: typeof import("./switchControllerAutoConfigDefault").SwitchControllerAutoConfigDefault = null as any;
utilities.lazyLoad(exports, ["SwitchControllerAutoConfigDefault"], () => require("./switchControllerAutoConfigDefault"));

export { SwitchControllerAutoConfigPolicyArgs, SwitchControllerAutoConfigPolicyState } from "./switchControllerAutoConfigPolicy";
export type SwitchControllerAutoConfigPolicy = import("./switchControllerAutoConfigPolicy").SwitchControllerAutoConfigPolicy;
export const SwitchControllerAutoConfigPolicy: typeof import("./switchControllerAutoConfigPolicy").SwitchControllerAutoConfigPolicy = null as any;
utilities.lazyLoad(exports, ["SwitchControllerAutoConfigPolicy"], () => require("./switchControllerAutoConfigPolicy"));

export { SwitchControllerCustomCommandArgs, SwitchControllerCustomCommandState } from "./switchControllerCustomCommand";
export type SwitchControllerCustomCommand = import("./switchControllerCustomCommand").SwitchControllerCustomCommand;
export const SwitchControllerCustomCommand: typeof import("./switchControllerCustomCommand").SwitchControllerCustomCommand = null as any;
utilities.lazyLoad(exports, ["SwitchControllerCustomCommand"], () => require("./switchControllerCustomCommand"));

export { SwitchControllerDynamicPortPolicyArgs, SwitchControllerDynamicPortPolicyState } from "./switchControllerDynamicPortPolicy";
export type SwitchControllerDynamicPortPolicy = import("./switchControllerDynamicPortPolicy").SwitchControllerDynamicPortPolicy;
export const SwitchControllerDynamicPortPolicy: typeof import("./switchControllerDynamicPortPolicy").SwitchControllerDynamicPortPolicy = null as any;
utilities.lazyLoad(exports, ["SwitchControllerDynamicPortPolicy"], () => require("./switchControllerDynamicPortPolicy"));

export { SwitchControllerFlowTrackingArgs, SwitchControllerFlowTrackingState } from "./switchControllerFlowTracking";
export type SwitchControllerFlowTracking = import("./switchControllerFlowTracking").SwitchControllerFlowTracking;
export const SwitchControllerFlowTracking: typeof import("./switchControllerFlowTracking").SwitchControllerFlowTracking = null as any;
utilities.lazyLoad(exports, ["SwitchControllerFlowTracking"], () => require("./switchControllerFlowTracking"));

export { SwitchControllerFortilinkSettingsArgs, SwitchControllerFortilinkSettingsState } from "./switchControllerFortilinkSettings";
export type SwitchControllerFortilinkSettings = import("./switchControllerFortilinkSettings").SwitchControllerFortilinkSettings;
export const SwitchControllerFortilinkSettings: typeof import("./switchControllerFortilinkSettings").SwitchControllerFortilinkSettings = null as any;
utilities.lazyLoad(exports, ["SwitchControllerFortilinkSettings"], () => require("./switchControllerFortilinkSettings"));

export { SwitchControllerGlobalArgs, SwitchControllerGlobalState } from "./switchControllerGlobal";
export type SwitchControllerGlobal = import("./switchControllerGlobal").SwitchControllerGlobal;
export const SwitchControllerGlobal: typeof import("./switchControllerGlobal").SwitchControllerGlobal = null as any;
utilities.lazyLoad(exports, ["SwitchControllerGlobal"], () => require("./switchControllerGlobal"));

export { SwitchControllerIgmpSnoopingArgs, SwitchControllerIgmpSnoopingState } from "./switchControllerIgmpSnooping";
export type SwitchControllerIgmpSnooping = import("./switchControllerIgmpSnooping").SwitchControllerIgmpSnooping;
export const SwitchControllerIgmpSnooping: typeof import("./switchControllerIgmpSnooping").SwitchControllerIgmpSnooping = null as any;
utilities.lazyLoad(exports, ["SwitchControllerIgmpSnooping"], () => require("./switchControllerIgmpSnooping"));

export { SwitchControllerInitialConfigTemplateArgs, SwitchControllerInitialConfigTemplateState } from "./switchControllerInitialConfigTemplate";
export type SwitchControllerInitialConfigTemplate = import("./switchControllerInitialConfigTemplate").SwitchControllerInitialConfigTemplate;
export const SwitchControllerInitialConfigTemplate: typeof import("./switchControllerInitialConfigTemplate").SwitchControllerInitialConfigTemplate = null as any;
utilities.lazyLoad(exports, ["SwitchControllerInitialConfigTemplate"], () => require("./switchControllerInitialConfigTemplate"));

export { SwitchControllerInitialConfigVlansArgs, SwitchControllerInitialConfigVlansState } from "./switchControllerInitialConfigVlans";
export type SwitchControllerInitialConfigVlans = import("./switchControllerInitialConfigVlans").SwitchControllerInitialConfigVlans;
export const SwitchControllerInitialConfigVlans: typeof import("./switchControllerInitialConfigVlans").SwitchControllerInitialConfigVlans = null as any;
utilities.lazyLoad(exports, ["SwitchControllerInitialConfigVlans"], () => require("./switchControllerInitialConfigVlans"));

export { SwitchControllerLldpProfileArgs, SwitchControllerLldpProfileState } from "./switchControllerLldpProfile";
export type SwitchControllerLldpProfile = import("./switchControllerLldpProfile").SwitchControllerLldpProfile;
export const SwitchControllerLldpProfile: typeof import("./switchControllerLldpProfile").SwitchControllerLldpProfile = null as any;
utilities.lazyLoad(exports, ["SwitchControllerLldpProfile"], () => require("./switchControllerLldpProfile"));

export { SwitchControllerLldpSettingsArgs, SwitchControllerLldpSettingsState } from "./switchControllerLldpSettings";
export type SwitchControllerLldpSettings = import("./switchControllerLldpSettings").SwitchControllerLldpSettings;
export const SwitchControllerLldpSettings: typeof import("./switchControllerLldpSettings").SwitchControllerLldpSettings = null as any;
utilities.lazyLoad(exports, ["SwitchControllerLldpSettings"], () => require("./switchControllerLldpSettings"));

export { SwitchControllerLocationArgs, SwitchControllerLocationState } from "./switchControllerLocation";
export type SwitchControllerLocation = import("./switchControllerLocation").SwitchControllerLocation;
export const SwitchControllerLocation: typeof import("./switchControllerLocation").SwitchControllerLocation = null as any;
utilities.lazyLoad(exports, ["SwitchControllerLocation"], () => require("./switchControllerLocation"));

export { SwitchControllerMacSyncSettingsArgs, SwitchControllerMacSyncSettingsState } from "./switchControllerMacSyncSettings";
export type SwitchControllerMacSyncSettings = import("./switchControllerMacSyncSettings").SwitchControllerMacSyncSettings;
export const SwitchControllerMacSyncSettings: typeof import("./switchControllerMacSyncSettings").SwitchControllerMacSyncSettings = null as any;
utilities.lazyLoad(exports, ["SwitchControllerMacSyncSettings"], () => require("./switchControllerMacSyncSettings"));

export { SwitchControllerManagedSwitchArgs, SwitchControllerManagedSwitchState } from "./switchControllerManagedSwitch";
export type SwitchControllerManagedSwitch = import("./switchControllerManagedSwitch").SwitchControllerManagedSwitch;
export const SwitchControllerManagedSwitch: typeof import("./switchControllerManagedSwitch").SwitchControllerManagedSwitch = null as any;
utilities.lazyLoad(exports, ["SwitchControllerManagedSwitch"], () => require("./switchControllerManagedSwitch"));

export { SwitchControllerNacDeviceArgs, SwitchControllerNacDeviceState } from "./switchControllerNacDevice";
export type SwitchControllerNacDevice = import("./switchControllerNacDevice").SwitchControllerNacDevice;
export const SwitchControllerNacDevice: typeof import("./switchControllerNacDevice").SwitchControllerNacDevice = null as any;
utilities.lazyLoad(exports, ["SwitchControllerNacDevice"], () => require("./switchControllerNacDevice"));

export { SwitchControllerNacSettingsArgs, SwitchControllerNacSettingsState } from "./switchControllerNacSettings";
export type SwitchControllerNacSettings = import("./switchControllerNacSettings").SwitchControllerNacSettings;
export const SwitchControllerNacSettings: typeof import("./switchControllerNacSettings").SwitchControllerNacSettings = null as any;
utilities.lazyLoad(exports, ["SwitchControllerNacSettings"], () => require("./switchControllerNacSettings"));

export { SwitchControllerNetworkMonitorSettingsArgs, SwitchControllerNetworkMonitorSettingsState } from "./switchControllerNetworkMonitorSettings";
export type SwitchControllerNetworkMonitorSettings = import("./switchControllerNetworkMonitorSettings").SwitchControllerNetworkMonitorSettings;
export const SwitchControllerNetworkMonitorSettings: typeof import("./switchControllerNetworkMonitorSettings").SwitchControllerNetworkMonitorSettings = null as any;
utilities.lazyLoad(exports, ["SwitchControllerNetworkMonitorSettings"], () => require("./switchControllerNetworkMonitorSettings"));

export { SwitchControllerPortPolicyArgs, SwitchControllerPortPolicyState } from "./switchControllerPortPolicy";
export type SwitchControllerPortPolicy = import("./switchControllerPortPolicy").SwitchControllerPortPolicy;
export const SwitchControllerPortPolicy: typeof import("./switchControllerPortPolicy").SwitchControllerPortPolicy = null as any;
utilities.lazyLoad(exports, ["SwitchControllerPortPolicy"], () => require("./switchControllerPortPolicy"));

export { SwitchControllerPtpPolicyArgs, SwitchControllerPtpPolicyState } from "./switchControllerPtpPolicy";
export type SwitchControllerPtpPolicy = import("./switchControllerPtpPolicy").SwitchControllerPtpPolicy;
export const SwitchControllerPtpPolicy: typeof import("./switchControllerPtpPolicy").SwitchControllerPtpPolicy = null as any;
utilities.lazyLoad(exports, ["SwitchControllerPtpPolicy"], () => require("./switchControllerPtpPolicy"));

export { SwitchControllerPtpSettingsArgs, SwitchControllerPtpSettingsState } from "./switchControllerPtpSettings";
export type SwitchControllerPtpSettings = import("./switchControllerPtpSettings").SwitchControllerPtpSettings;
export const SwitchControllerPtpSettings: typeof import("./switchControllerPtpSettings").SwitchControllerPtpSettings = null as any;
utilities.lazyLoad(exports, ["SwitchControllerPtpSettings"], () => require("./switchControllerPtpSettings"));

export { SwitchControllerQosDot1PMapArgs, SwitchControllerQosDot1PMapState } from "./switchControllerQosDot1PMap";
export type SwitchControllerQosDot1PMap = import("./switchControllerQosDot1PMap").SwitchControllerQosDot1PMap;
export const SwitchControllerQosDot1PMap: typeof import("./switchControllerQosDot1PMap").SwitchControllerQosDot1PMap = null as any;
utilities.lazyLoad(exports, ["SwitchControllerQosDot1PMap"], () => require("./switchControllerQosDot1PMap"));

export { SwitchControllerQosIpDscpMapArgs, SwitchControllerQosIpDscpMapState } from "./switchControllerQosIpDscpMap";
export type SwitchControllerQosIpDscpMap = import("./switchControllerQosIpDscpMap").SwitchControllerQosIpDscpMap;
export const SwitchControllerQosIpDscpMap: typeof import("./switchControllerQosIpDscpMap").SwitchControllerQosIpDscpMap = null as any;
utilities.lazyLoad(exports, ["SwitchControllerQosIpDscpMap"], () => require("./switchControllerQosIpDscpMap"));

export { SwitchControllerQosQosPolicyArgs, SwitchControllerQosQosPolicyState } from "./switchControllerQosQosPolicy";
export type SwitchControllerQosQosPolicy = import("./switchControllerQosQosPolicy").SwitchControllerQosQosPolicy;
export const SwitchControllerQosQosPolicy: typeof import("./switchControllerQosQosPolicy").SwitchControllerQosQosPolicy = null as any;
utilities.lazyLoad(exports, ["SwitchControllerQosQosPolicy"], () => require("./switchControllerQosQosPolicy"));

export { SwitchControllerQosQueuePolicyArgs, SwitchControllerQosQueuePolicyState } from "./switchControllerQosQueuePolicy";
export type SwitchControllerQosQueuePolicy = import("./switchControllerQosQueuePolicy").SwitchControllerQosQueuePolicy;
export const SwitchControllerQosQueuePolicy: typeof import("./switchControllerQosQueuePolicy").SwitchControllerQosQueuePolicy = null as any;
utilities.lazyLoad(exports, ["SwitchControllerQosQueuePolicy"], () => require("./switchControllerQosQueuePolicy"));

export { SwitchControllerQuarantineArgs, SwitchControllerQuarantineState } from "./switchControllerQuarantine";
export type SwitchControllerQuarantine = import("./switchControllerQuarantine").SwitchControllerQuarantine;
export const SwitchControllerQuarantine: typeof import("./switchControllerQuarantine").SwitchControllerQuarantine = null as any;
utilities.lazyLoad(exports, ["SwitchControllerQuarantine"], () => require("./switchControllerQuarantine"));

export { SwitchControllerRemoteLogArgs, SwitchControllerRemoteLogState } from "./switchControllerRemoteLog";
export type SwitchControllerRemoteLog = import("./switchControllerRemoteLog").SwitchControllerRemoteLog;
export const SwitchControllerRemoteLog: typeof import("./switchControllerRemoteLog").SwitchControllerRemoteLog = null as any;
utilities.lazyLoad(exports, ["SwitchControllerRemoteLog"], () => require("./switchControllerRemoteLog"));

export { SwitchControllerSecurityPolicy8021XArgs, SwitchControllerSecurityPolicy8021XState } from "./switchControllerSecurityPolicy8021X";
export type SwitchControllerSecurityPolicy8021X = import("./switchControllerSecurityPolicy8021X").SwitchControllerSecurityPolicy8021X;
export const SwitchControllerSecurityPolicy8021X: typeof import("./switchControllerSecurityPolicy8021X").SwitchControllerSecurityPolicy8021X = null as any;
utilities.lazyLoad(exports, ["SwitchControllerSecurityPolicy8021X"], () => require("./switchControllerSecurityPolicy8021X"));

export { SwitchControllerSecurityPolicyCaptivePortalArgs, SwitchControllerSecurityPolicyCaptivePortalState } from "./switchControllerSecurityPolicyCaptivePortal";
export type SwitchControllerSecurityPolicyCaptivePortal = import("./switchControllerSecurityPolicyCaptivePortal").SwitchControllerSecurityPolicyCaptivePortal;
export const SwitchControllerSecurityPolicyCaptivePortal: typeof import("./switchControllerSecurityPolicyCaptivePortal").SwitchControllerSecurityPolicyCaptivePortal = null as any;
utilities.lazyLoad(exports, ["SwitchControllerSecurityPolicyCaptivePortal"], () => require("./switchControllerSecurityPolicyCaptivePortal"));

export { SwitchControllerSecurityPolicyLocalAccessArgs, SwitchControllerSecurityPolicyLocalAccessState } from "./switchControllerSecurityPolicyLocalAccess";
export type SwitchControllerSecurityPolicyLocalAccess = import("./switchControllerSecurityPolicyLocalAccess").SwitchControllerSecurityPolicyLocalAccess;
export const SwitchControllerSecurityPolicyLocalAccess: typeof import("./switchControllerSecurityPolicyLocalAccess").SwitchControllerSecurityPolicyLocalAccess = null as any;
utilities.lazyLoad(exports, ["SwitchControllerSecurityPolicyLocalAccess"], () => require("./switchControllerSecurityPolicyLocalAccess"));

export { SwitchControllerSflowArgs, SwitchControllerSflowState } from "./switchControllerSflow";
export type SwitchControllerSflow = import("./switchControllerSflow").SwitchControllerSflow;
export const SwitchControllerSflow: typeof import("./switchControllerSflow").SwitchControllerSflow = null as any;
utilities.lazyLoad(exports, ["SwitchControllerSflow"], () => require("./switchControllerSflow"));

export { SwitchControllerSnmpCommunityArgs, SwitchControllerSnmpCommunityState } from "./switchControllerSnmpCommunity";
export type SwitchControllerSnmpCommunity = import("./switchControllerSnmpCommunity").SwitchControllerSnmpCommunity;
export const SwitchControllerSnmpCommunity: typeof import("./switchControllerSnmpCommunity").SwitchControllerSnmpCommunity = null as any;
utilities.lazyLoad(exports, ["SwitchControllerSnmpCommunity"], () => require("./switchControllerSnmpCommunity"));

export { SwitchControllerSnmpSysinfoArgs, SwitchControllerSnmpSysinfoState } from "./switchControllerSnmpSysinfo";
export type SwitchControllerSnmpSysinfo = import("./switchControllerSnmpSysinfo").SwitchControllerSnmpSysinfo;
export const SwitchControllerSnmpSysinfo: typeof import("./switchControllerSnmpSysinfo").SwitchControllerSnmpSysinfo = null as any;
utilities.lazyLoad(exports, ["SwitchControllerSnmpSysinfo"], () => require("./switchControllerSnmpSysinfo"));

export { SwitchControllerSnmpTrapThresholdArgs, SwitchControllerSnmpTrapThresholdState } from "./switchControllerSnmpTrapThreshold";
export type SwitchControllerSnmpTrapThreshold = import("./switchControllerSnmpTrapThreshold").SwitchControllerSnmpTrapThreshold;
export const SwitchControllerSnmpTrapThreshold: typeof import("./switchControllerSnmpTrapThreshold").SwitchControllerSnmpTrapThreshold = null as any;
utilities.lazyLoad(exports, ["SwitchControllerSnmpTrapThreshold"], () => require("./switchControllerSnmpTrapThreshold"));

export { SwitchControllerSnmpUserArgs, SwitchControllerSnmpUserState } from "./switchControllerSnmpUser";
export type SwitchControllerSnmpUser = import("./switchControllerSnmpUser").SwitchControllerSnmpUser;
export const SwitchControllerSnmpUser: typeof import("./switchControllerSnmpUser").SwitchControllerSnmpUser = null as any;
utilities.lazyLoad(exports, ["SwitchControllerSnmpUser"], () => require("./switchControllerSnmpUser"));

export { SwitchControllerStormControlArgs, SwitchControllerStormControlState } from "./switchControllerStormControl";
export type SwitchControllerStormControl = import("./switchControllerStormControl").SwitchControllerStormControl;
export const SwitchControllerStormControl: typeof import("./switchControllerStormControl").SwitchControllerStormControl = null as any;
utilities.lazyLoad(exports, ["SwitchControllerStormControl"], () => require("./switchControllerStormControl"));

export { SwitchControllerStormControlPolicyArgs, SwitchControllerStormControlPolicyState } from "./switchControllerStormControlPolicy";
export type SwitchControllerStormControlPolicy = import("./switchControllerStormControlPolicy").SwitchControllerStormControlPolicy;
export const SwitchControllerStormControlPolicy: typeof import("./switchControllerStormControlPolicy").SwitchControllerStormControlPolicy = null as any;
utilities.lazyLoad(exports, ["SwitchControllerStormControlPolicy"], () => require("./switchControllerStormControlPolicy"));

export { SwitchControllerStpInstanceArgs, SwitchControllerStpInstanceState } from "./switchControllerStpInstance";
export type SwitchControllerStpInstance = import("./switchControllerStpInstance").SwitchControllerStpInstance;
export const SwitchControllerStpInstance: typeof import("./switchControllerStpInstance").SwitchControllerStpInstance = null as any;
utilities.lazyLoad(exports, ["SwitchControllerStpInstance"], () => require("./switchControllerStpInstance"));

export { SwitchControllerStpSettingsArgs, SwitchControllerStpSettingsState } from "./switchControllerStpSettings";
export type SwitchControllerStpSettings = import("./switchControllerStpSettings").SwitchControllerStpSettings;
export const SwitchControllerStpSettings: typeof import("./switchControllerStpSettings").SwitchControllerStpSettings = null as any;
utilities.lazyLoad(exports, ["SwitchControllerStpSettings"], () => require("./switchControllerStpSettings"));

export { SwitchControllerSwitchGroupArgs, SwitchControllerSwitchGroupState } from "./switchControllerSwitchGroup";
export type SwitchControllerSwitchGroup = import("./switchControllerSwitchGroup").SwitchControllerSwitchGroup;
export const SwitchControllerSwitchGroup: typeof import("./switchControllerSwitchGroup").SwitchControllerSwitchGroup = null as any;
utilities.lazyLoad(exports, ["SwitchControllerSwitchGroup"], () => require("./switchControllerSwitchGroup"));

export { SwitchControllerSwitchInterfaceTagArgs, SwitchControllerSwitchInterfaceTagState } from "./switchControllerSwitchInterfaceTag";
export type SwitchControllerSwitchInterfaceTag = import("./switchControllerSwitchInterfaceTag").SwitchControllerSwitchInterfaceTag;
export const SwitchControllerSwitchInterfaceTag: typeof import("./switchControllerSwitchInterfaceTag").SwitchControllerSwitchInterfaceTag = null as any;
utilities.lazyLoad(exports, ["SwitchControllerSwitchInterfaceTag"], () => require("./switchControllerSwitchInterfaceTag"));

export { SwitchControllerSwitchLogArgs, SwitchControllerSwitchLogState } from "./switchControllerSwitchLog";
export type SwitchControllerSwitchLog = import("./switchControllerSwitchLog").SwitchControllerSwitchLog;
export const SwitchControllerSwitchLog: typeof import("./switchControllerSwitchLog").SwitchControllerSwitchLog = null as any;
utilities.lazyLoad(exports, ["SwitchControllerSwitchLog"], () => require("./switchControllerSwitchLog"));

export { SwitchControllerSwitchProfileArgs, SwitchControllerSwitchProfileState } from "./switchControllerSwitchProfile";
export type SwitchControllerSwitchProfile = import("./switchControllerSwitchProfile").SwitchControllerSwitchProfile;
export const SwitchControllerSwitchProfile: typeof import("./switchControllerSwitchProfile").SwitchControllerSwitchProfile = null as any;
utilities.lazyLoad(exports, ["SwitchControllerSwitchProfile"], () => require("./switchControllerSwitchProfile"));

export { SwitchControllerSystemArgs, SwitchControllerSystemState } from "./switchControllerSystem";
export type SwitchControllerSystem = import("./switchControllerSystem").SwitchControllerSystem;
export const SwitchControllerSystem: typeof import("./switchControllerSystem").SwitchControllerSystem = null as any;
utilities.lazyLoad(exports, ["SwitchControllerSystem"], () => require("./switchControllerSystem"));

export { SwitchControllerTrafficPolicyArgs, SwitchControllerTrafficPolicyState } from "./switchControllerTrafficPolicy";
export type SwitchControllerTrafficPolicy = import("./switchControllerTrafficPolicy").SwitchControllerTrafficPolicy;
export const SwitchControllerTrafficPolicy: typeof import("./switchControllerTrafficPolicy").SwitchControllerTrafficPolicy = null as any;
utilities.lazyLoad(exports, ["SwitchControllerTrafficPolicy"], () => require("./switchControllerTrafficPolicy"));

export { SwitchControllerTrafficSnifferArgs, SwitchControllerTrafficSnifferState } from "./switchControllerTrafficSniffer";
export type SwitchControllerTrafficSniffer = import("./switchControllerTrafficSniffer").SwitchControllerTrafficSniffer;
export const SwitchControllerTrafficSniffer: typeof import("./switchControllerTrafficSniffer").SwitchControllerTrafficSniffer = null as any;
utilities.lazyLoad(exports, ["SwitchControllerTrafficSniffer"], () => require("./switchControllerTrafficSniffer"));

export { SwitchControllerVirtualPortPoolArgs, SwitchControllerVirtualPortPoolState } from "./switchControllerVirtualPortPool";
export type SwitchControllerVirtualPortPool = import("./switchControllerVirtualPortPool").SwitchControllerVirtualPortPool;
export const SwitchControllerVirtualPortPool: typeof import("./switchControllerVirtualPortPool").SwitchControllerVirtualPortPool = null as any;
utilities.lazyLoad(exports, ["SwitchControllerVirtualPortPool"], () => require("./switchControllerVirtualPortPool"));

export { SwitchControllerVlanArgs, SwitchControllerVlanState } from "./switchControllerVlan";
export type SwitchControllerVlan = import("./switchControllerVlan").SwitchControllerVlan;
export const SwitchControllerVlan: typeof import("./switchControllerVlan").SwitchControllerVlan = null as any;
utilities.lazyLoad(exports, ["SwitchControllerVlan"], () => require("./switchControllerVlan"));

export { SwitchControllerVlanPolicyArgs, SwitchControllerVlanPolicyState } from "./switchControllerVlanPolicy";
export type SwitchControllerVlanPolicy = import("./switchControllerVlanPolicy").SwitchControllerVlanPolicy;
export const SwitchControllerVlanPolicy: typeof import("./switchControllerVlanPolicy").SwitchControllerVlanPolicy = null as any;
utilities.lazyLoad(exports, ["SwitchControllerVlanPolicy"], () => require("./switchControllerVlanPolicy"));

export { System3GModemCustomArgs, System3GModemCustomState } from "./system3GModemCustom";
export type System3GModemCustom = import("./system3GModemCustom").System3GModemCustom;
export const System3GModemCustom: typeof import("./system3GModemCustom").System3GModemCustom = null as any;
utilities.lazyLoad(exports, ["System3GModemCustom"], () => require("./system3GModemCustom"));

export { SystemAPIUserSettingArgs, SystemAPIUserSettingState } from "./systemAPIUserSetting";
export type SystemAPIUserSetting = import("./systemAPIUserSetting").SystemAPIUserSetting;
export const SystemAPIUserSetting: typeof import("./systemAPIUserSetting").SystemAPIUserSetting = null as any;
utilities.lazyLoad(exports, ["SystemAPIUserSetting"], () => require("./systemAPIUserSetting"));

export { SystemAccprofileArgs, SystemAccprofileState } from "./systemAccprofile";
export type SystemAccprofile = import("./systemAccprofile").SystemAccprofile;
export const SystemAccprofile: typeof import("./systemAccprofile").SystemAccprofile = null as any;
utilities.lazyLoad(exports, ["SystemAccprofile"], () => require("./systemAccprofile"));

export { SystemAcmeArgs, SystemAcmeState } from "./systemAcme";
export type SystemAcme = import("./systemAcme").SystemAcme;
export const SystemAcme: typeof import("./systemAcme").SystemAcme = null as any;
utilities.lazyLoad(exports, ["SystemAcme"], () => require("./systemAcme"));

export { SystemAdminArgs, SystemAdminState } from "./systemAdmin";
export type SystemAdmin = import("./systemAdmin").SystemAdmin;
export const SystemAdmin: typeof import("./systemAdmin").SystemAdmin = null as any;
utilities.lazyLoad(exports, ["SystemAdmin"], () => require("./systemAdmin"));

export { SystemAdminAdministratorArgs, SystemAdminAdministratorState } from "./systemAdminAdministrator";
export type SystemAdminAdministrator = import("./systemAdminAdministrator").SystemAdminAdministrator;
export const SystemAdminAdministrator: typeof import("./systemAdminAdministrator").SystemAdminAdministrator = null as any;
utilities.lazyLoad(exports, ["SystemAdminAdministrator"], () => require("./systemAdminAdministrator"));

export { SystemAdminProfilesArgs, SystemAdminProfilesState } from "./systemAdminProfiles";
export type SystemAdminProfiles = import("./systemAdminProfiles").SystemAdminProfiles;
export const SystemAdminProfiles: typeof import("./systemAdminProfiles").SystemAdminProfiles = null as any;
utilities.lazyLoad(exports, ["SystemAdminProfiles"], () => require("./systemAdminProfiles"));

export { SystemAffinityInterruptArgs, SystemAffinityInterruptState } from "./systemAffinityInterrupt";
export type SystemAffinityInterrupt = import("./systemAffinityInterrupt").SystemAffinityInterrupt;
export const SystemAffinityInterrupt: typeof import("./systemAffinityInterrupt").SystemAffinityInterrupt = null as any;
utilities.lazyLoad(exports, ["SystemAffinityInterrupt"], () => require("./systemAffinityInterrupt"));

export { SystemAffinityPacketRedistributionArgs, SystemAffinityPacketRedistributionState } from "./systemAffinityPacketRedistribution";
export type SystemAffinityPacketRedistribution = import("./systemAffinityPacketRedistribution").SystemAffinityPacketRedistribution;
export const SystemAffinityPacketRedistribution: typeof import("./systemAffinityPacketRedistribution").SystemAffinityPacketRedistribution = null as any;
utilities.lazyLoad(exports, ["SystemAffinityPacketRedistribution"], () => require("./systemAffinityPacketRedistribution"));

export { SystemAlarmArgs, SystemAlarmState } from "./systemAlarm";
export type SystemAlarm = import("./systemAlarm").SystemAlarm;
export const SystemAlarm: typeof import("./systemAlarm").SystemAlarm = null as any;
utilities.lazyLoad(exports, ["SystemAlarm"], () => require("./systemAlarm"));

export { SystemAliasArgs, SystemAliasState } from "./systemAlias";
export type SystemAlias = import("./systemAlias").SystemAlias;
export const SystemAlias: typeof import("./systemAlias").SystemAlias = null as any;
utilities.lazyLoad(exports, ["SystemAlias"], () => require("./systemAlias"));

export { SystemApiUserArgs, SystemApiUserState } from "./systemApiUser";
export type SystemApiUser = import("./systemApiUser").SystemApiUser;
export const SystemApiUser: typeof import("./systemApiUser").SystemApiUser = null as any;
utilities.lazyLoad(exports, ["SystemApiUser"], () => require("./systemApiUser"));

export { SystemArpTableArgs, SystemArpTableState } from "./systemArpTable";
export type SystemArpTable = import("./systemArpTable").SystemArpTable;
export const SystemArpTable: typeof import("./systemArpTable").SystemArpTable = null as any;
utilities.lazyLoad(exports, ["SystemArpTable"], () => require("./systemArpTable"));

export { SystemAutoInstallArgs, SystemAutoInstallState } from "./systemAutoInstall";
export type SystemAutoInstall = import("./systemAutoInstall").SystemAutoInstall;
export const SystemAutoInstall: typeof import("./systemAutoInstall").SystemAutoInstall = null as any;
utilities.lazyLoad(exports, ["SystemAutoInstall"], () => require("./systemAutoInstall"));

export { SystemAutoScriptArgs, SystemAutoScriptState } from "./systemAutoScript";
export type SystemAutoScript = import("./systemAutoScript").SystemAutoScript;
export const SystemAutoScript: typeof import("./systemAutoScript").SystemAutoScript = null as any;
utilities.lazyLoad(exports, ["SystemAutoScript"], () => require("./systemAutoScript"));

export { SystemAutomationActionArgs, SystemAutomationActionState } from "./systemAutomationAction";
export type SystemAutomationAction = import("./systemAutomationAction").SystemAutomationAction;
export const SystemAutomationAction: typeof import("./systemAutomationAction").SystemAutomationAction = null as any;
utilities.lazyLoad(exports, ["SystemAutomationAction"], () => require("./systemAutomationAction"));

export { SystemAutomationDestinationArgs, SystemAutomationDestinationState } from "./systemAutomationDestination";
export type SystemAutomationDestination = import("./systemAutomationDestination").SystemAutomationDestination;
export const SystemAutomationDestination: typeof import("./systemAutomationDestination").SystemAutomationDestination = null as any;
utilities.lazyLoad(exports, ["SystemAutomationDestination"], () => require("./systemAutomationDestination"));

export { SystemAutomationStitchArgs, SystemAutomationStitchState } from "./systemAutomationStitch";
export type SystemAutomationStitch = import("./systemAutomationStitch").SystemAutomationStitch;
export const SystemAutomationStitch: typeof import("./systemAutomationStitch").SystemAutomationStitch = null as any;
utilities.lazyLoad(exports, ["SystemAutomationStitch"], () => require("./systemAutomationStitch"));

export { SystemAutomationTriggerArgs, SystemAutomationTriggerState } from "./systemAutomationTrigger";
export type SystemAutomationTrigger = import("./systemAutomationTrigger").SystemAutomationTrigger;
export const SystemAutomationTrigger: typeof import("./systemAutomationTrigger").SystemAutomationTrigger = null as any;
utilities.lazyLoad(exports, ["SystemAutomationTrigger"], () => require("./systemAutomationTrigger"));

export { SystemAutoupdatePushUpdateArgs, SystemAutoupdatePushUpdateState } from "./systemAutoupdatePushUpdate";
export type SystemAutoupdatePushUpdate = import("./systemAutoupdatePushUpdate").SystemAutoupdatePushUpdate;
export const SystemAutoupdatePushUpdate: typeof import("./systemAutoupdatePushUpdate").SystemAutoupdatePushUpdate = null as any;
utilities.lazyLoad(exports, ["SystemAutoupdatePushUpdate"], () => require("./systemAutoupdatePushUpdate"));

export { SystemAutoupdateScheduleArgs, SystemAutoupdateScheduleState } from "./systemAutoupdateSchedule";
export type SystemAutoupdateSchedule = import("./systemAutoupdateSchedule").SystemAutoupdateSchedule;
export const SystemAutoupdateSchedule: typeof import("./systemAutoupdateSchedule").SystemAutoupdateSchedule = null as any;
utilities.lazyLoad(exports, ["SystemAutoupdateSchedule"], () => require("./systemAutoupdateSchedule"));

export { SystemAutoupdateTunnelingArgs, SystemAutoupdateTunnelingState } from "./systemAutoupdateTunneling";
export type SystemAutoupdateTunneling = import("./systemAutoupdateTunneling").SystemAutoupdateTunneling;
export const SystemAutoupdateTunneling: typeof import("./systemAutoupdateTunneling").SystemAutoupdateTunneling = null as any;
utilities.lazyLoad(exports, ["SystemAutoupdateTunneling"], () => require("./systemAutoupdateTunneling"));

export { SystemCentralManagementArgs, SystemCentralManagementState } from "./systemCentralManagement";
export type SystemCentralManagement = import("./systemCentralManagement").SystemCentralManagement;
export const SystemCentralManagement: typeof import("./systemCentralManagement").SystemCentralManagement = null as any;
utilities.lazyLoad(exports, ["SystemCentralManagement"], () => require("./systemCentralManagement"));

export { SystemClusterSyncArgs, SystemClusterSyncState } from "./systemClusterSync";
export type SystemClusterSync = import("./systemClusterSync").SystemClusterSync;
export const SystemClusterSync: typeof import("./systemClusterSync").SystemClusterSync = null as any;
utilities.lazyLoad(exports, ["SystemClusterSync"], () => require("./systemClusterSync"));

export { SystemConsoleArgs, SystemConsoleState } from "./systemConsole";
export type SystemConsole = import("./systemConsole").SystemConsole;
export const SystemConsole: typeof import("./systemConsole").SystemConsole = null as any;
utilities.lazyLoad(exports, ["SystemConsole"], () => require("./systemConsole"));

export { SystemCsfArgs, SystemCsfState } from "./systemCsf";
export type SystemCsf = import("./systemCsf").SystemCsf;
export const SystemCsf: typeof import("./systemCsf").SystemCsf = null as any;
utilities.lazyLoad(exports, ["SystemCsf"], () => require("./systemCsf"));

export { SystemCustomLanguageArgs, SystemCustomLanguageState } from "./systemCustomLanguage";
export type SystemCustomLanguage = import("./systemCustomLanguage").SystemCustomLanguage;
export const SystemCustomLanguage: typeof import("./systemCustomLanguage").SystemCustomLanguage = null as any;
utilities.lazyLoad(exports, ["SystemCustomLanguage"], () => require("./systemCustomLanguage"));

export { SystemDdnsArgs, SystemDdnsState } from "./systemDdns";
export type SystemDdns = import("./systemDdns").SystemDdns;
export const SystemDdns: typeof import("./systemDdns").SystemDdns = null as any;
utilities.lazyLoad(exports, ["SystemDdns"], () => require("./systemDdns"));

export { SystemDedicatedMgmtArgs, SystemDedicatedMgmtState } from "./systemDedicatedMgmt";
export type SystemDedicatedMgmt = import("./systemDedicatedMgmt").SystemDedicatedMgmt;
export const SystemDedicatedMgmt: typeof import("./systemDedicatedMgmt").SystemDedicatedMgmt = null as any;
utilities.lazyLoad(exports, ["SystemDedicatedMgmt"], () => require("./systemDedicatedMgmt"));

export { SystemDhcp6ServerArgs, SystemDhcp6ServerState } from "./systemDhcp6Server";
export type SystemDhcp6Server = import("./systemDhcp6Server").SystemDhcp6Server;
export const SystemDhcp6Server: typeof import("./systemDhcp6Server").SystemDhcp6Server = null as any;
utilities.lazyLoad(exports, ["SystemDhcp6Server"], () => require("./systemDhcp6Server"));

export { SystemDhcpServerArgs, SystemDhcpServerState } from "./systemDhcpServer";
export type SystemDhcpServer = import("./systemDhcpServer").SystemDhcpServer;
export const SystemDhcpServer: typeof import("./systemDhcpServer").SystemDhcpServer = null as any;
utilities.lazyLoad(exports, ["SystemDhcpServer"], () => require("./systemDhcpServer"));

export { SystemDnsArgs, SystemDnsState } from "./systemDns";
export type SystemDns = import("./systemDns").SystemDns;
export const SystemDns: typeof import("./systemDns").SystemDns = null as any;
utilities.lazyLoad(exports, ["SystemDns"], () => require("./systemDns"));

export { SystemDns64Args, SystemDns64State } from "./systemDns64";
export type SystemDns64 = import("./systemDns64").SystemDns64;
export const SystemDns64: typeof import("./systemDns64").SystemDns64 = null as any;
utilities.lazyLoad(exports, ["SystemDns64"], () => require("./systemDns64"));

export { SystemDnsDatabaseArgs, SystemDnsDatabaseState } from "./systemDnsDatabase";
export type SystemDnsDatabase = import("./systemDnsDatabase").SystemDnsDatabase;
export const SystemDnsDatabase: typeof import("./systemDnsDatabase").SystemDnsDatabase = null as any;
utilities.lazyLoad(exports, ["SystemDnsDatabase"], () => require("./systemDnsDatabase"));

export { SystemDnsServerArgs, SystemDnsServerState } from "./systemDnsServer";
export type SystemDnsServer = import("./systemDnsServer").SystemDnsServer;
export const SystemDnsServer: typeof import("./systemDnsServer").SystemDnsServer = null as any;
utilities.lazyLoad(exports, ["SystemDnsServer"], () => require("./systemDnsServer"));

export { SystemDscpBasedPriorityArgs, SystemDscpBasedPriorityState } from "./systemDscpBasedPriority";
export type SystemDscpBasedPriority = import("./systemDscpBasedPriority").SystemDscpBasedPriority;
export const SystemDscpBasedPriority: typeof import("./systemDscpBasedPriority").SystemDscpBasedPriority = null as any;
utilities.lazyLoad(exports, ["SystemDscpBasedPriority"], () => require("./systemDscpBasedPriority"));

export { SystemEmailServerArgs, SystemEmailServerState } from "./systemEmailServer";
export type SystemEmailServer = import("./systemEmailServer").SystemEmailServer;
export const SystemEmailServer: typeof import("./systemEmailServer").SystemEmailServer = null as any;
utilities.lazyLoad(exports, ["SystemEmailServer"], () => require("./systemEmailServer"));

export { SystemExternalResourceArgs, SystemExternalResourceState } from "./systemExternalResource";
export type SystemExternalResource = import("./systemExternalResource").SystemExternalResource;
export const SystemExternalResource: typeof import("./systemExternalResource").SystemExternalResource = null as any;
utilities.lazyLoad(exports, ["SystemExternalResource"], () => require("./systemExternalResource"));

export { SystemFederatedUpgradeArgs, SystemFederatedUpgradeState } from "./systemFederatedUpgrade";
export type SystemFederatedUpgrade = import("./systemFederatedUpgrade").SystemFederatedUpgrade;
export const SystemFederatedUpgrade: typeof import("./systemFederatedUpgrade").SystemFederatedUpgrade = null as any;
utilities.lazyLoad(exports, ["SystemFederatedUpgrade"], () => require("./systemFederatedUpgrade"));

export { SystemFipsCcArgs, SystemFipsCcState } from "./systemFipsCc";
export type SystemFipsCc = import("./systemFipsCc").SystemFipsCc;
export const SystemFipsCc: typeof import("./systemFipsCc").SystemFipsCc = null as any;
utilities.lazyLoad(exports, ["SystemFipsCc"], () => require("./systemFipsCc"));

export { SystemFmArgs, SystemFmState } from "./systemFm";
export type SystemFm = import("./systemFm").SystemFm;
export const SystemFm: typeof import("./systemFm").SystemFm = null as any;
utilities.lazyLoad(exports, ["SystemFm"], () => require("./systemFm"));

export { SystemFortiaiArgs, SystemFortiaiState } from "./systemFortiai";
export type SystemFortiai = import("./systemFortiai").SystemFortiai;
export const SystemFortiai: typeof import("./systemFortiai").SystemFortiai = null as any;
utilities.lazyLoad(exports, ["SystemFortiai"], () => require("./systemFortiai"));

export { SystemFortiguardArgs, SystemFortiguardState } from "./systemFortiguard";
export type SystemFortiguard = import("./systemFortiguard").SystemFortiguard;
export const SystemFortiguard: typeof import("./systemFortiguard").SystemFortiguard = null as any;
utilities.lazyLoad(exports, ["SystemFortiguard"], () => require("./systemFortiguard"));

export { SystemFortimanagerArgs, SystemFortimanagerState } from "./systemFortimanager";
export type SystemFortimanager = import("./systemFortimanager").SystemFortimanager;
export const SystemFortimanager: typeof import("./systemFortimanager").SystemFortimanager = null as any;
utilities.lazyLoad(exports, ["SystemFortimanager"], () => require("./systemFortimanager"));

export { SystemFortindrArgs, SystemFortindrState } from "./systemFortindr";
export type SystemFortindr = import("./systemFortindr").SystemFortindr;
export const SystemFortindr: typeof import("./systemFortindr").SystemFortindr = null as any;
utilities.lazyLoad(exports, ["SystemFortindr"], () => require("./systemFortindr"));

export { SystemFortisandboxArgs, SystemFortisandboxState } from "./systemFortisandbox";
export type SystemFortisandbox = import("./systemFortisandbox").SystemFortisandbox;
export const SystemFortisandbox: typeof import("./systemFortisandbox").SystemFortisandbox = null as any;
utilities.lazyLoad(exports, ["SystemFortisandbox"], () => require("./systemFortisandbox"));

export { SystemFssoPollingArgs, SystemFssoPollingState } from "./systemFssoPolling";
export type SystemFssoPolling = import("./systemFssoPolling").SystemFssoPolling;
export const SystemFssoPolling: typeof import("./systemFssoPolling").SystemFssoPolling = null as any;
utilities.lazyLoad(exports, ["SystemFssoPolling"], () => require("./systemFssoPolling"));

export { SystemFtmPushArgs, SystemFtmPushState } from "./systemFtmPush";
export type SystemFtmPush = import("./systemFtmPush").SystemFtmPush;
export const SystemFtmPush: typeof import("./systemFtmPush").SystemFtmPush = null as any;
utilities.lazyLoad(exports, ["SystemFtmPush"], () => require("./systemFtmPush"));

export { SystemGeneveArgs, SystemGeneveState } from "./systemGeneve";
export type SystemGeneve = import("./systemGeneve").SystemGeneve;
export const SystemGeneve: typeof import("./systemGeneve").SystemGeneve = null as any;
utilities.lazyLoad(exports, ["SystemGeneve"], () => require("./systemGeneve"));

export { SystemGeoipCountryArgs, SystemGeoipCountryState } from "./systemGeoipCountry";
export type SystemGeoipCountry = import("./systemGeoipCountry").SystemGeoipCountry;
export const SystemGeoipCountry: typeof import("./systemGeoipCountry").SystemGeoipCountry = null as any;
utilities.lazyLoad(exports, ["SystemGeoipCountry"], () => require("./systemGeoipCountry"));

export { SystemGeoipOverrideArgs, SystemGeoipOverrideState } from "./systemGeoipOverride";
export type SystemGeoipOverride = import("./systemGeoipOverride").SystemGeoipOverride;
export const SystemGeoipOverride: typeof import("./systemGeoipOverride").SystemGeoipOverride = null as any;
utilities.lazyLoad(exports, ["SystemGeoipOverride"], () => require("./systemGeoipOverride"));

export { SystemGlobalArgs, SystemGlobalState } from "./systemGlobal";
export type SystemGlobal = import("./systemGlobal").SystemGlobal;
export const SystemGlobal: typeof import("./systemGlobal").SystemGlobal = null as any;
utilities.lazyLoad(exports, ["SystemGlobal"], () => require("./systemGlobal"));

export { SystemGreTunnelArgs, SystemGreTunnelState } from "./systemGreTunnel";
export type SystemGreTunnel = import("./systemGreTunnel").SystemGreTunnel;
export const SystemGreTunnel: typeof import("./systemGreTunnel").SystemGreTunnel = null as any;
utilities.lazyLoad(exports, ["SystemGreTunnel"], () => require("./systemGreTunnel"));

export { SystemHaArgs, SystemHaState } from "./systemHa";
export type SystemHa = import("./systemHa").SystemHa;
export const SystemHa: typeof import("./systemHa").SystemHa = null as any;
utilities.lazyLoad(exports, ["SystemHa"], () => require("./systemHa"));

export { SystemHaMonitorArgs, SystemHaMonitorState } from "./systemHaMonitor";
export type SystemHaMonitor = import("./systemHaMonitor").SystemHaMonitor;
export const SystemHaMonitor: typeof import("./systemHaMonitor").SystemHaMonitor = null as any;
utilities.lazyLoad(exports, ["SystemHaMonitor"], () => require("./systemHaMonitor"));

export { SystemIkeArgs, SystemIkeState } from "./systemIke";
export type SystemIke = import("./systemIke").SystemIke;
export const SystemIke: typeof import("./systemIke").SystemIke = null as any;
utilities.lazyLoad(exports, ["SystemIke"], () => require("./systemIke"));

export { SystemInterfaceArgs, SystemInterfaceState } from "./systemInterface";
export type SystemInterface = import("./systemInterface").SystemInterface;
export const SystemInterface: typeof import("./systemInterface").SystemInterface = null as any;
utilities.lazyLoad(exports, ["SystemInterface"], () => require("./systemInterface"));

export { SystemIpamArgs, SystemIpamState } from "./systemIpam";
export type SystemIpam = import("./systemIpam").SystemIpam;
export const SystemIpam: typeof import("./systemIpam").SystemIpam = null as any;
utilities.lazyLoad(exports, ["SystemIpam"], () => require("./systemIpam"));

export { SystemIpipTunnelArgs, SystemIpipTunnelState } from "./systemIpipTunnel";
export type SystemIpipTunnel = import("./systemIpipTunnel").SystemIpipTunnel;
export const SystemIpipTunnel: typeof import("./systemIpipTunnel").SystemIpipTunnel = null as any;
utilities.lazyLoad(exports, ["SystemIpipTunnel"], () => require("./systemIpipTunnel"));

export { SystemIpsArgs, SystemIpsState } from "./systemIps";
export type SystemIps = import("./systemIps").SystemIps;
export const SystemIps: typeof import("./systemIps").SystemIps = null as any;
utilities.lazyLoad(exports, ["SystemIps"], () => require("./systemIps"));

export { SystemIpsUrlfilterDnsArgs, SystemIpsUrlfilterDnsState } from "./systemIpsUrlfilterDns";
export type SystemIpsUrlfilterDns = import("./systemIpsUrlfilterDns").SystemIpsUrlfilterDns;
export const SystemIpsUrlfilterDns: typeof import("./systemIpsUrlfilterDns").SystemIpsUrlfilterDns = null as any;
utilities.lazyLoad(exports, ["SystemIpsUrlfilterDns"], () => require("./systemIpsUrlfilterDns"));

export { SystemIpsUrlfilterDns6Args, SystemIpsUrlfilterDns6State } from "./systemIpsUrlfilterDns6";
export type SystemIpsUrlfilterDns6 = import("./systemIpsUrlfilterDns6").SystemIpsUrlfilterDns6;
export const SystemIpsUrlfilterDns6: typeof import("./systemIpsUrlfilterDns6").SystemIpsUrlfilterDns6 = null as any;
utilities.lazyLoad(exports, ["SystemIpsUrlfilterDns6"], () => require("./systemIpsUrlfilterDns6"));

export { SystemIpsecAggregateArgs, SystemIpsecAggregateState } from "./systemIpsecAggregate";
export type SystemIpsecAggregate = import("./systemIpsecAggregate").SystemIpsecAggregate;
export const SystemIpsecAggregate: typeof import("./systemIpsecAggregate").SystemIpsecAggregate = null as any;
utilities.lazyLoad(exports, ["SystemIpsecAggregate"], () => require("./systemIpsecAggregate"));

export { SystemIpv6NeighborCacheArgs, SystemIpv6NeighborCacheState } from "./systemIpv6NeighborCache";
export type SystemIpv6NeighborCache = import("./systemIpv6NeighborCache").SystemIpv6NeighborCache;
export const SystemIpv6NeighborCache: typeof import("./systemIpv6NeighborCache").SystemIpv6NeighborCache = null as any;
utilities.lazyLoad(exports, ["SystemIpv6NeighborCache"], () => require("./systemIpv6NeighborCache"));

export { SystemIpv6TunnelArgs, SystemIpv6TunnelState } from "./systemIpv6Tunnel";
export type SystemIpv6Tunnel = import("./systemIpv6Tunnel").SystemIpv6Tunnel;
export const SystemIpv6Tunnel: typeof import("./systemIpv6Tunnel").SystemIpv6Tunnel = null as any;
utilities.lazyLoad(exports, ["SystemIpv6Tunnel"], () => require("./systemIpv6Tunnel"));

export { SystemLicenseFortiCareArgs, SystemLicenseFortiCareState } from "./systemLicenseFortiCare";
export type SystemLicenseFortiCare = import("./systemLicenseFortiCare").SystemLicenseFortiCare;
export const SystemLicenseFortiCare: typeof import("./systemLicenseFortiCare").SystemLicenseFortiCare = null as any;
utilities.lazyLoad(exports, ["SystemLicenseFortiCare"], () => require("./systemLicenseFortiCare"));

export { SystemLicenseVDOMArgs, SystemLicenseVDOMState } from "./systemLicenseVDOM";
export type SystemLicenseVDOM = import("./systemLicenseVDOM").SystemLicenseVDOM;
export const SystemLicenseVDOM: typeof import("./systemLicenseVDOM").SystemLicenseVDOM = null as any;
utilities.lazyLoad(exports, ["SystemLicenseVDOM"], () => require("./systemLicenseVDOM"));

export { SystemLicenseVMArgs, SystemLicenseVMState } from "./systemLicenseVM";
export type SystemLicenseVM = import("./systemLicenseVM").SystemLicenseVM;
export const SystemLicenseVM: typeof import("./systemLicenseVM").SystemLicenseVM = null as any;
utilities.lazyLoad(exports, ["SystemLicenseVM"], () => require("./systemLicenseVM"));

export { SystemLinkMonitorArgs, SystemLinkMonitorState } from "./systemLinkMonitor";
export type SystemLinkMonitor = import("./systemLinkMonitor").SystemLinkMonitor;
export const SystemLinkMonitor: typeof import("./systemLinkMonitor").SystemLinkMonitor = null as any;
utilities.lazyLoad(exports, ["SystemLinkMonitor"], () => require("./systemLinkMonitor"));

export { SystemLldpNetworkPolicyArgs, SystemLldpNetworkPolicyState } from "./systemLldpNetworkPolicy";
export type SystemLldpNetworkPolicy = import("./systemLldpNetworkPolicy").SystemLldpNetworkPolicy;
export const SystemLldpNetworkPolicy: typeof import("./systemLldpNetworkPolicy").SystemLldpNetworkPolicy = null as any;
utilities.lazyLoad(exports, ["SystemLldpNetworkPolicy"], () => require("./systemLldpNetworkPolicy"));

export { SystemLteModemArgs, SystemLteModemState } from "./systemLteModem";
export type SystemLteModem = import("./systemLteModem").SystemLteModem;
export const SystemLteModem: typeof import("./systemLteModem").SystemLteModem = null as any;
utilities.lazyLoad(exports, ["SystemLteModem"], () => require("./systemLteModem"));

export { SystemMacAddressTableArgs, SystemMacAddressTableState } from "./systemMacAddressTable";
export type SystemMacAddressTable = import("./systemMacAddressTable").SystemMacAddressTable;
export const SystemMacAddressTable: typeof import("./systemMacAddressTable").SystemMacAddressTable = null as any;
utilities.lazyLoad(exports, ["SystemMacAddressTable"], () => require("./systemMacAddressTable"));

export { SystemManagementTunnelArgs, SystemManagementTunnelState } from "./systemManagementTunnel";
export type SystemManagementTunnel = import("./systemManagementTunnel").SystemManagementTunnel;
export const SystemManagementTunnel: typeof import("./systemManagementTunnel").SystemManagementTunnel = null as any;
utilities.lazyLoad(exports, ["SystemManagementTunnel"], () => require("./systemManagementTunnel"));

export { SystemMobileTunnelArgs, SystemMobileTunnelState } from "./systemMobileTunnel";
export type SystemMobileTunnel = import("./systemMobileTunnel").SystemMobileTunnel;
export const SystemMobileTunnel: typeof import("./systemMobileTunnel").SystemMobileTunnel = null as any;
utilities.lazyLoad(exports, ["SystemMobileTunnel"], () => require("./systemMobileTunnel"));

export { SystemModemArgs, SystemModemState } from "./systemModem";
export type SystemModem = import("./systemModem").SystemModem;
export const SystemModem: typeof import("./systemModem").SystemModem = null as any;
utilities.lazyLoad(exports, ["SystemModem"], () => require("./systemModem"));

export { SystemNat64Args, SystemNat64State } from "./systemNat64";
export type SystemNat64 = import("./systemNat64").SystemNat64;
export const SystemNat64: typeof import("./systemNat64").SystemNat64 = null as any;
utilities.lazyLoad(exports, ["SystemNat64"], () => require("./systemNat64"));

export { SystemNdProxyArgs, SystemNdProxyState } from "./systemNdProxy";
export type SystemNdProxy = import("./systemNdProxy").SystemNdProxy;
export const SystemNdProxy: typeof import("./systemNdProxy").SystemNdProxy = null as any;
utilities.lazyLoad(exports, ["SystemNdProxy"], () => require("./systemNdProxy"));

export { SystemNetflowArgs, SystemNetflowState } from "./systemNetflow";
export type SystemNetflow = import("./systemNetflow").SystemNetflow;
export const SystemNetflow: typeof import("./systemNetflow").SystemNetflow = null as any;
utilities.lazyLoad(exports, ["SystemNetflow"], () => require("./systemNetflow"));

export { SystemNetworkVisibilityArgs, SystemNetworkVisibilityState } from "./systemNetworkVisibility";
export type SystemNetworkVisibility = import("./systemNetworkVisibility").SystemNetworkVisibility;
export const SystemNetworkVisibility: typeof import("./systemNetworkVisibility").SystemNetworkVisibility = null as any;
utilities.lazyLoad(exports, ["SystemNetworkVisibility"], () => require("./systemNetworkVisibility"));

export { SystemNpuArgs, SystemNpuState } from "./systemNpu";
export type SystemNpu = import("./systemNpu").SystemNpu;
export const SystemNpu: typeof import("./systemNpu").SystemNpu = null as any;
utilities.lazyLoad(exports, ["SystemNpu"], () => require("./systemNpu"));

export { SystemNtpArgs, SystemNtpState } from "./systemNtp";
export type SystemNtp = import("./systemNtp").SystemNtp;
export const SystemNtp: typeof import("./systemNtp").SystemNtp = null as any;
utilities.lazyLoad(exports, ["SystemNtp"], () => require("./systemNtp"));

export { SystemObjectTaggingArgs, SystemObjectTaggingState } from "./systemObjectTagging";
export type SystemObjectTagging = import("./systemObjectTagging").SystemObjectTagging;
export const SystemObjectTagging: typeof import("./systemObjectTagging").SystemObjectTagging = null as any;
utilities.lazyLoad(exports, ["SystemObjectTagging"], () => require("./systemObjectTagging"));

export { SystemPasswordPolicyArgs, SystemPasswordPolicyState } from "./systemPasswordPolicy";
export type SystemPasswordPolicy = import("./systemPasswordPolicy").SystemPasswordPolicy;
export const SystemPasswordPolicy: typeof import("./systemPasswordPolicy").SystemPasswordPolicy = null as any;
utilities.lazyLoad(exports, ["SystemPasswordPolicy"], () => require("./systemPasswordPolicy"));

export { SystemPasswordPolicyGuestAdminArgs, SystemPasswordPolicyGuestAdminState } from "./systemPasswordPolicyGuestAdmin";
export type SystemPasswordPolicyGuestAdmin = import("./systemPasswordPolicyGuestAdmin").SystemPasswordPolicyGuestAdmin;
export const SystemPasswordPolicyGuestAdmin: typeof import("./systemPasswordPolicyGuestAdmin").SystemPasswordPolicyGuestAdmin = null as any;
utilities.lazyLoad(exports, ["SystemPasswordPolicyGuestAdmin"], () => require("./systemPasswordPolicyGuestAdmin"));

export { SystemPhysicalSwitchArgs, SystemPhysicalSwitchState } from "./systemPhysicalSwitch";
export type SystemPhysicalSwitch = import("./systemPhysicalSwitch").SystemPhysicalSwitch;
export const SystemPhysicalSwitch: typeof import("./systemPhysicalSwitch").SystemPhysicalSwitch = null as any;
utilities.lazyLoad(exports, ["SystemPhysicalSwitch"], () => require("./systemPhysicalSwitch"));

export { SystemPppoeInterfaceArgs, SystemPppoeInterfaceState } from "./systemPppoeInterface";
export type SystemPppoeInterface = import("./systemPppoeInterface").SystemPppoeInterface;
export const SystemPppoeInterface: typeof import("./systemPppoeInterface").SystemPppoeInterface = null as any;
utilities.lazyLoad(exports, ["SystemPppoeInterface"], () => require("./systemPppoeInterface"));

export { SystemProbeResponseArgs, SystemProbeResponseState } from "./systemProbeResponse";
export type SystemProbeResponse = import("./systemProbeResponse").SystemProbeResponse;
export const SystemProbeResponse: typeof import("./systemProbeResponse").SystemProbeResponse = null as any;
utilities.lazyLoad(exports, ["SystemProbeResponse"], () => require("./systemProbeResponse"));

export { SystemProxyArpArgs, SystemProxyArpState } from "./systemProxyArp";
export type SystemProxyArp = import("./systemProxyArp").SystemProxyArp;
export const SystemProxyArp: typeof import("./systemProxyArp").SystemProxyArp = null as any;
utilities.lazyLoad(exports, ["SystemProxyArp"], () => require("./systemProxyArp"));

export { SystemPtpArgs, SystemPtpState } from "./systemPtp";
export type SystemPtp = import("./systemPtp").SystemPtp;
export const SystemPtp: typeof import("./systemPtp").SystemPtp = null as any;
utilities.lazyLoad(exports, ["SystemPtp"], () => require("./systemPtp"));

export { SystemReplacemsgAdminArgs, SystemReplacemsgAdminState } from "./systemReplacemsgAdmin";
export type SystemReplacemsgAdmin = import("./systemReplacemsgAdmin").SystemReplacemsgAdmin;
export const SystemReplacemsgAdmin: typeof import("./systemReplacemsgAdmin").SystemReplacemsgAdmin = null as any;
utilities.lazyLoad(exports, ["SystemReplacemsgAdmin"], () => require("./systemReplacemsgAdmin"));

export { SystemReplacemsgAlertmailArgs, SystemReplacemsgAlertmailState } from "./systemReplacemsgAlertmail";
export type SystemReplacemsgAlertmail = import("./systemReplacemsgAlertmail").SystemReplacemsgAlertmail;
export const SystemReplacemsgAlertmail: typeof import("./systemReplacemsgAlertmail").SystemReplacemsgAlertmail = null as any;
utilities.lazyLoad(exports, ["SystemReplacemsgAlertmail"], () => require("./systemReplacemsgAlertmail"));

export { SystemReplacemsgAuthArgs, SystemReplacemsgAuthState } from "./systemReplacemsgAuth";
export type SystemReplacemsgAuth = import("./systemReplacemsgAuth").SystemReplacemsgAuth;
export const SystemReplacemsgAuth: typeof import("./systemReplacemsgAuth").SystemReplacemsgAuth = null as any;
utilities.lazyLoad(exports, ["SystemReplacemsgAuth"], () => require("./systemReplacemsgAuth"));

export { SystemReplacemsgAutomationArgs, SystemReplacemsgAutomationState } from "./systemReplacemsgAutomation";
export type SystemReplacemsgAutomation = import("./systemReplacemsgAutomation").SystemReplacemsgAutomation;
export const SystemReplacemsgAutomation: typeof import("./systemReplacemsgAutomation").SystemReplacemsgAutomation = null as any;
utilities.lazyLoad(exports, ["SystemReplacemsgAutomation"], () => require("./systemReplacemsgAutomation"));

export { SystemReplacemsgDeviceDetectionPortalArgs, SystemReplacemsgDeviceDetectionPortalState } from "./systemReplacemsgDeviceDetectionPortal";
export type SystemReplacemsgDeviceDetectionPortal = import("./systemReplacemsgDeviceDetectionPortal").SystemReplacemsgDeviceDetectionPortal;
export const SystemReplacemsgDeviceDetectionPortal: typeof import("./systemReplacemsgDeviceDetectionPortal").SystemReplacemsgDeviceDetectionPortal = null as any;
utilities.lazyLoad(exports, ["SystemReplacemsgDeviceDetectionPortal"], () => require("./systemReplacemsgDeviceDetectionPortal"));

export { SystemReplacemsgEcArgs, SystemReplacemsgEcState } from "./systemReplacemsgEc";
export type SystemReplacemsgEc = import("./systemReplacemsgEc").SystemReplacemsgEc;
export const SystemReplacemsgEc: typeof import("./systemReplacemsgEc").SystemReplacemsgEc = null as any;
utilities.lazyLoad(exports, ["SystemReplacemsgEc"], () => require("./systemReplacemsgEc"));

export { SystemReplacemsgFortiguardWfArgs, SystemReplacemsgFortiguardWfState } from "./systemReplacemsgFortiguardWf";
export type SystemReplacemsgFortiguardWf = import("./systemReplacemsgFortiguardWf").SystemReplacemsgFortiguardWf;
export const SystemReplacemsgFortiguardWf: typeof import("./systemReplacemsgFortiguardWf").SystemReplacemsgFortiguardWf = null as any;
utilities.lazyLoad(exports, ["SystemReplacemsgFortiguardWf"], () => require("./systemReplacemsgFortiguardWf"));

export { SystemReplacemsgFtpArgs, SystemReplacemsgFtpState } from "./systemReplacemsgFtp";
export type SystemReplacemsgFtp = import("./systemReplacemsgFtp").SystemReplacemsgFtp;
export const SystemReplacemsgFtp: typeof import("./systemReplacemsgFtp").SystemReplacemsgFtp = null as any;
utilities.lazyLoad(exports, ["SystemReplacemsgFtp"], () => require("./systemReplacemsgFtp"));

export { SystemReplacemsgGroupArgs, SystemReplacemsgGroupState } from "./systemReplacemsgGroup";
export type SystemReplacemsgGroup = import("./systemReplacemsgGroup").SystemReplacemsgGroup;
export const SystemReplacemsgGroup: typeof import("./systemReplacemsgGroup").SystemReplacemsgGroup = null as any;
utilities.lazyLoad(exports, ["SystemReplacemsgGroup"], () => require("./systemReplacemsgGroup"));

export { SystemReplacemsgHttpArgs, SystemReplacemsgHttpState } from "./systemReplacemsgHttp";
export type SystemReplacemsgHttp = import("./systemReplacemsgHttp").SystemReplacemsgHttp;
export const SystemReplacemsgHttp: typeof import("./systemReplacemsgHttp").SystemReplacemsgHttp = null as any;
utilities.lazyLoad(exports, ["SystemReplacemsgHttp"], () => require("./systemReplacemsgHttp"));

export { SystemReplacemsgIcapArgs, SystemReplacemsgIcapState } from "./systemReplacemsgIcap";
export type SystemReplacemsgIcap = import("./systemReplacemsgIcap").SystemReplacemsgIcap;
export const SystemReplacemsgIcap: typeof import("./systemReplacemsgIcap").SystemReplacemsgIcap = null as any;
utilities.lazyLoad(exports, ["SystemReplacemsgIcap"], () => require("./systemReplacemsgIcap"));

export { SystemReplacemsgImageArgs, SystemReplacemsgImageState } from "./systemReplacemsgImage";
export type SystemReplacemsgImage = import("./systemReplacemsgImage").SystemReplacemsgImage;
export const SystemReplacemsgImage: typeof import("./systemReplacemsgImage").SystemReplacemsgImage = null as any;
utilities.lazyLoad(exports, ["SystemReplacemsgImage"], () => require("./systemReplacemsgImage"));

export { SystemReplacemsgMailArgs, SystemReplacemsgMailState } from "./systemReplacemsgMail";
export type SystemReplacemsgMail = import("./systemReplacemsgMail").SystemReplacemsgMail;
export const SystemReplacemsgMail: typeof import("./systemReplacemsgMail").SystemReplacemsgMail = null as any;
utilities.lazyLoad(exports, ["SystemReplacemsgMail"], () => require("./systemReplacemsgMail"));

export { SystemReplacemsgNacQuarArgs, SystemReplacemsgNacQuarState } from "./systemReplacemsgNacQuar";
export type SystemReplacemsgNacQuar = import("./systemReplacemsgNacQuar").SystemReplacemsgNacQuar;
export const SystemReplacemsgNacQuar: typeof import("./systemReplacemsgNacQuar").SystemReplacemsgNacQuar = null as any;
utilities.lazyLoad(exports, ["SystemReplacemsgNacQuar"], () => require("./systemReplacemsgNacQuar"));

export { SystemReplacemsgNntpArgs, SystemReplacemsgNntpState } from "./systemReplacemsgNntp";
export type SystemReplacemsgNntp = import("./systemReplacemsgNntp").SystemReplacemsgNntp;
export const SystemReplacemsgNntp: typeof import("./systemReplacemsgNntp").SystemReplacemsgNntp = null as any;
utilities.lazyLoad(exports, ["SystemReplacemsgNntp"], () => require("./systemReplacemsgNntp"));

export { SystemReplacemsgSpamArgs, SystemReplacemsgSpamState } from "./systemReplacemsgSpam";
export type SystemReplacemsgSpam = import("./systemReplacemsgSpam").SystemReplacemsgSpam;
export const SystemReplacemsgSpam: typeof import("./systemReplacemsgSpam").SystemReplacemsgSpam = null as any;
utilities.lazyLoad(exports, ["SystemReplacemsgSpam"], () => require("./systemReplacemsgSpam"));

export { SystemReplacemsgSslvpnArgs, SystemReplacemsgSslvpnState } from "./systemReplacemsgSslvpn";
export type SystemReplacemsgSslvpn = import("./systemReplacemsgSslvpn").SystemReplacemsgSslvpn;
export const SystemReplacemsgSslvpn: typeof import("./systemReplacemsgSslvpn").SystemReplacemsgSslvpn = null as any;
utilities.lazyLoad(exports, ["SystemReplacemsgSslvpn"], () => require("./systemReplacemsgSslvpn"));

export { SystemReplacemsgTrafficQuotaArgs, SystemReplacemsgTrafficQuotaState } from "./systemReplacemsgTrafficQuota";
export type SystemReplacemsgTrafficQuota = import("./systemReplacemsgTrafficQuota").SystemReplacemsgTrafficQuota;
export const SystemReplacemsgTrafficQuota: typeof import("./systemReplacemsgTrafficQuota").SystemReplacemsgTrafficQuota = null as any;
utilities.lazyLoad(exports, ["SystemReplacemsgTrafficQuota"], () => require("./systemReplacemsgTrafficQuota"));

export { SystemReplacemsgUtmArgs, SystemReplacemsgUtmState } from "./systemReplacemsgUtm";
export type SystemReplacemsgUtm = import("./systemReplacemsgUtm").SystemReplacemsgUtm;
export const SystemReplacemsgUtm: typeof import("./systemReplacemsgUtm").SystemReplacemsgUtm = null as any;
utilities.lazyLoad(exports, ["SystemReplacemsgUtm"], () => require("./systemReplacemsgUtm"));

export { SystemReplacemsgWebproxyArgs, SystemReplacemsgWebproxyState } from "./systemReplacemsgWebproxy";
export type SystemReplacemsgWebproxy = import("./systemReplacemsgWebproxy").SystemReplacemsgWebproxy;
export const SystemReplacemsgWebproxy: typeof import("./systemReplacemsgWebproxy").SystemReplacemsgWebproxy = null as any;
utilities.lazyLoad(exports, ["SystemReplacemsgWebproxy"], () => require("./systemReplacemsgWebproxy"));

export { SystemResourceLimitsArgs, SystemResourceLimitsState } from "./systemResourceLimits";
export type SystemResourceLimits = import("./systemResourceLimits").SystemResourceLimits;
export const SystemResourceLimits: typeof import("./systemResourceLimits").SystemResourceLimits = null as any;
utilities.lazyLoad(exports, ["SystemResourceLimits"], () => require("./systemResourceLimits"));

export { SystemSamlArgs, SystemSamlState } from "./systemSaml";
export type SystemSaml = import("./systemSaml").SystemSaml;
export const SystemSaml: typeof import("./systemSaml").SystemSaml = null as any;
utilities.lazyLoad(exports, ["SystemSaml"], () => require("./systemSaml"));

export { SystemSdnConnectorArgs, SystemSdnConnectorState } from "./systemSdnConnector";
export type SystemSdnConnector = import("./systemSdnConnector").SystemSdnConnector;
export const SystemSdnConnector: typeof import("./systemSdnConnector").SystemSdnConnector = null as any;
utilities.lazyLoad(exports, ["SystemSdnConnector"], () => require("./systemSdnConnector"));

export { SystemSdwanArgs, SystemSdwanState } from "./systemSdwan";
export type SystemSdwan = import("./systemSdwan").SystemSdwan;
export const SystemSdwan: typeof import("./systemSdwan").SystemSdwan = null as any;
utilities.lazyLoad(exports, ["SystemSdwan"], () => require("./systemSdwan"));

export { SystemSessionHelperArgs, SystemSessionHelperState } from "./systemSessionHelper";
export type SystemSessionHelper = import("./systemSessionHelper").SystemSessionHelper;
export const SystemSessionHelper: typeof import("./systemSessionHelper").SystemSessionHelper = null as any;
utilities.lazyLoad(exports, ["SystemSessionHelper"], () => require("./systemSessionHelper"));

export { SystemSessionTtlArgs, SystemSessionTtlState } from "./systemSessionTtl";
export type SystemSessionTtl = import("./systemSessionTtl").SystemSessionTtl;
export const SystemSessionTtl: typeof import("./systemSessionTtl").SystemSessionTtl = null as any;
utilities.lazyLoad(exports, ["SystemSessionTtl"], () => require("./systemSessionTtl"));

export { SystemSettingDNSArgs, SystemSettingDNSState } from "./systemSettingDNS";
export type SystemSettingDNS = import("./systemSettingDNS").SystemSettingDNS;
export const SystemSettingDNS: typeof import("./systemSettingDNS").SystemSettingDNS = null as any;
utilities.lazyLoad(exports, ["SystemSettingDNS"], () => require("./systemSettingDNS"));

export { SystemSettingGlobalArgs, SystemSettingGlobalState } from "./systemSettingGlobal";
export type SystemSettingGlobal = import("./systemSettingGlobal").SystemSettingGlobal;
export const SystemSettingGlobal: typeof import("./systemSettingGlobal").SystemSettingGlobal = null as any;
utilities.lazyLoad(exports, ["SystemSettingGlobal"], () => require("./systemSettingGlobal"));

export { SystemSettingNTPArgs, SystemSettingNTPState } from "./systemSettingNTP";
export type SystemSettingNTP = import("./systemSettingNTP").SystemSettingNTP;
export const SystemSettingNTP: typeof import("./systemSettingNTP").SystemSettingNTP = null as any;
utilities.lazyLoad(exports, ["SystemSettingNTP"], () => require("./systemSettingNTP"));

export { SystemSettingsArgs, SystemSettingsState } from "./systemSettings";
export type SystemSettings = import("./systemSettings").SystemSettings;
export const SystemSettings: typeof import("./systemSettings").SystemSettings = null as any;
utilities.lazyLoad(exports, ["SystemSettings"], () => require("./systemSettings"));

export { SystemSflowArgs, SystemSflowState } from "./systemSflow";
export type SystemSflow = import("./systemSflow").SystemSflow;
export const SystemSflow: typeof import("./systemSflow").SystemSflow = null as any;
utilities.lazyLoad(exports, ["SystemSflow"], () => require("./systemSflow"));

export { SystemSitTunnelArgs, SystemSitTunnelState } from "./systemSitTunnel";
export type SystemSitTunnel = import("./systemSitTunnel").SystemSitTunnel;
export const SystemSitTunnel: typeof import("./systemSitTunnel").SystemSitTunnel = null as any;
utilities.lazyLoad(exports, ["SystemSitTunnel"], () => require("./systemSitTunnel"));

export { SystemSmsServerArgs, SystemSmsServerState } from "./systemSmsServer";
export type SystemSmsServer = import("./systemSmsServer").SystemSmsServer;
export const SystemSmsServer: typeof import("./systemSmsServer").SystemSmsServer = null as any;
utilities.lazyLoad(exports, ["SystemSmsServer"], () => require("./systemSmsServer"));

export { SystemSnmpCommunityArgs, SystemSnmpCommunityState } from "./systemSnmpCommunity";
export type SystemSnmpCommunity = import("./systemSnmpCommunity").SystemSnmpCommunity;
export const SystemSnmpCommunity: typeof import("./systemSnmpCommunity").SystemSnmpCommunity = null as any;
utilities.lazyLoad(exports, ["SystemSnmpCommunity"], () => require("./systemSnmpCommunity"));

export { SystemSnmpMibViewArgs, SystemSnmpMibViewState } from "./systemSnmpMibView";
export type SystemSnmpMibView = import("./systemSnmpMibView").SystemSnmpMibView;
export const SystemSnmpMibView: typeof import("./systemSnmpMibView").SystemSnmpMibView = null as any;
utilities.lazyLoad(exports, ["SystemSnmpMibView"], () => require("./systemSnmpMibView"));

export { SystemSnmpSysinfoArgs, SystemSnmpSysinfoState } from "./systemSnmpSysinfo";
export type SystemSnmpSysinfo = import("./systemSnmpSysinfo").SystemSnmpSysinfo;
export const SystemSnmpSysinfo: typeof import("./systemSnmpSysinfo").SystemSnmpSysinfo = null as any;
utilities.lazyLoad(exports, ["SystemSnmpSysinfo"], () => require("./systemSnmpSysinfo"));

export { SystemSnmpUserArgs, SystemSnmpUserState } from "./systemSnmpUser";
export type SystemSnmpUser = import("./systemSnmpUser").SystemSnmpUser;
export const SystemSnmpUser: typeof import("./systemSnmpUser").SystemSnmpUser = null as any;
utilities.lazyLoad(exports, ["SystemSnmpUser"], () => require("./systemSnmpUser"));

export { SystemSpeedTestScheduleArgs, SystemSpeedTestScheduleState } from "./systemSpeedTestSchedule";
export type SystemSpeedTestSchedule = import("./systemSpeedTestSchedule").SystemSpeedTestSchedule;
export const SystemSpeedTestSchedule: typeof import("./systemSpeedTestSchedule").SystemSpeedTestSchedule = null as any;
utilities.lazyLoad(exports, ["SystemSpeedTestSchedule"], () => require("./systemSpeedTestSchedule"));

export { SystemSpeedTestServerArgs, SystemSpeedTestServerState } from "./systemSpeedTestServer";
export type SystemSpeedTestServer = import("./systemSpeedTestServer").SystemSpeedTestServer;
export const SystemSpeedTestServer: typeof import("./systemSpeedTestServer").SystemSpeedTestServer = null as any;
utilities.lazyLoad(exports, ["SystemSpeedTestServer"], () => require("./systemSpeedTestServer"));

export { SystemSsoAdminArgs, SystemSsoAdminState } from "./systemSsoAdmin";
export type SystemSsoAdmin = import("./systemSsoAdmin").SystemSsoAdmin;
export const SystemSsoAdmin: typeof import("./systemSsoAdmin").SystemSsoAdmin = null as any;
utilities.lazyLoad(exports, ["SystemSsoAdmin"], () => require("./systemSsoAdmin"));

export { SystemSsoForticloudAdminArgs, SystemSsoForticloudAdminState } from "./systemSsoForticloudAdmin";
export type SystemSsoForticloudAdmin = import("./systemSsoForticloudAdmin").SystemSsoForticloudAdmin;
export const SystemSsoForticloudAdmin: typeof import("./systemSsoForticloudAdmin").SystemSsoForticloudAdmin = null as any;
utilities.lazyLoad(exports, ["SystemSsoForticloudAdmin"], () => require("./systemSsoForticloudAdmin"));

export { SystemStandaloneClusterArgs, SystemStandaloneClusterState } from "./systemStandaloneCluster";
export type SystemStandaloneCluster = import("./systemStandaloneCluster").SystemStandaloneCluster;
export const SystemStandaloneCluster: typeof import("./systemStandaloneCluster").SystemStandaloneCluster = null as any;
utilities.lazyLoad(exports, ["SystemStandaloneCluster"], () => require("./systemStandaloneCluster"));

export { SystemStorageArgs, SystemStorageState } from "./systemStorage";
export type SystemStorage = import("./systemStorage").SystemStorage;
export const SystemStorage: typeof import("./systemStorage").SystemStorage = null as any;
utilities.lazyLoad(exports, ["SystemStorage"], () => require("./systemStorage"));

export { SystemStpArgs, SystemStpState } from "./systemStp";
export type SystemStp = import("./systemStp").SystemStp;
export const SystemStp: typeof import("./systemStp").SystemStp = null as any;
utilities.lazyLoad(exports, ["SystemStp"], () => require("./systemStp"));

export { SystemSwitchInterfaceArgs, SystemSwitchInterfaceState } from "./systemSwitchInterface";
export type SystemSwitchInterface = import("./systemSwitchInterface").SystemSwitchInterface;
export const SystemSwitchInterface: typeof import("./systemSwitchInterface").SystemSwitchInterface = null as any;
utilities.lazyLoad(exports, ["SystemSwitchInterface"], () => require("./systemSwitchInterface"));

export { SystemTosBasedPriorityArgs, SystemTosBasedPriorityState } from "./systemTosBasedPriority";
export type SystemTosBasedPriority = import("./systemTosBasedPriority").SystemTosBasedPriority;
export const SystemTosBasedPriority: typeof import("./systemTosBasedPriority").SystemTosBasedPriority = null as any;
utilities.lazyLoad(exports, ["SystemTosBasedPriority"], () => require("./systemTosBasedPriority"));

export { SystemVdomArgs, SystemVdomState } from "./systemVdom";
export type SystemVdom = import("./systemVdom").SystemVdom;
export const SystemVdom: typeof import("./systemVdom").SystemVdom = null as any;
utilities.lazyLoad(exports, ["SystemVdom"], () => require("./systemVdom"));

export { SystemVdomDnsArgs, SystemVdomDnsState } from "./systemVdomDns";
export type SystemVdomDns = import("./systemVdomDns").SystemVdomDns;
export const SystemVdomDns: typeof import("./systemVdomDns").SystemVdomDns = null as any;
utilities.lazyLoad(exports, ["SystemVdomDns"], () => require("./systemVdomDns"));

export { SystemVdomExceptionArgs, SystemVdomExceptionState } from "./systemVdomException";
export type SystemVdomException = import("./systemVdomException").SystemVdomException;
export const SystemVdomException: typeof import("./systemVdomException").SystemVdomException = null as any;
utilities.lazyLoad(exports, ["SystemVdomException"], () => require("./systemVdomException"));

export { SystemVdomLinkArgs, SystemVdomLinkState } from "./systemVdomLink";
export type SystemVdomLink = import("./systemVdomLink").SystemVdomLink;
export const SystemVdomLink: typeof import("./systemVdomLink").SystemVdomLink = null as any;
utilities.lazyLoad(exports, ["SystemVdomLink"], () => require("./systemVdomLink"));

export { SystemVdomNetflowArgs, SystemVdomNetflowState } from "./systemVdomNetflow";
export type SystemVdomNetflow = import("./systemVdomNetflow").SystemVdomNetflow;
export const SystemVdomNetflow: typeof import("./systemVdomNetflow").SystemVdomNetflow = null as any;
utilities.lazyLoad(exports, ["SystemVdomNetflow"], () => require("./systemVdomNetflow"));

export { SystemVdomPropertyArgs, SystemVdomPropertyState } from "./systemVdomProperty";
export type SystemVdomProperty = import("./systemVdomProperty").SystemVdomProperty;
export const SystemVdomProperty: typeof import("./systemVdomProperty").SystemVdomProperty = null as any;
utilities.lazyLoad(exports, ["SystemVdomProperty"], () => require("./systemVdomProperty"));

export { SystemVdomRadiusServerArgs, SystemVdomRadiusServerState } from "./systemVdomRadiusServer";
export type SystemVdomRadiusServer = import("./systemVdomRadiusServer").SystemVdomRadiusServer;
export const SystemVdomRadiusServer: typeof import("./systemVdomRadiusServer").SystemVdomRadiusServer = null as any;
utilities.lazyLoad(exports, ["SystemVdomRadiusServer"], () => require("./systemVdomRadiusServer"));

export { SystemVdomSettingArgs, SystemVdomSettingState } from "./systemVdomSetting";
export type SystemVdomSetting = import("./systemVdomSetting").SystemVdomSetting;
export const SystemVdomSetting: typeof import("./systemVdomSetting").SystemVdomSetting = null as any;
utilities.lazyLoad(exports, ["SystemVdomSetting"], () => require("./systemVdomSetting"));

export { SystemVdomSflowArgs, SystemVdomSflowState } from "./systemVdomSflow";
export type SystemVdomSflow = import("./systemVdomSflow").SystemVdomSflow;
export const SystemVdomSflow: typeof import("./systemVdomSflow").SystemVdomSflow = null as any;
utilities.lazyLoad(exports, ["SystemVdomSflow"], () => require("./systemVdomSflow"));

export { SystemVirtualSwitchArgs, SystemVirtualSwitchState } from "./systemVirtualSwitch";
export type SystemVirtualSwitch = import("./systemVirtualSwitch").SystemVirtualSwitch;
export const SystemVirtualSwitch: typeof import("./systemVirtualSwitch").SystemVirtualSwitch = null as any;
utilities.lazyLoad(exports, ["SystemVirtualSwitch"], () => require("./systemVirtualSwitch"));

export { SystemVirtualWanLinkArgs, SystemVirtualWanLinkState } from "./systemVirtualWanLink";
export type SystemVirtualWanLink = import("./systemVirtualWanLink").SystemVirtualWanLink;
export const SystemVirtualWanLink: typeof import("./systemVirtualWanLink").SystemVirtualWanLink = null as any;
utilities.lazyLoad(exports, ["SystemVirtualWanLink"], () => require("./systemVirtualWanLink"));

export { SystemVirtualWirePairArgs, SystemVirtualWirePairState } from "./systemVirtualWirePair";
export type SystemVirtualWirePair = import("./systemVirtualWirePair").SystemVirtualWirePair;
export const SystemVirtualWirePair: typeof import("./systemVirtualWirePair").SystemVirtualWirePair = null as any;
utilities.lazyLoad(exports, ["SystemVirtualWirePair"], () => require("./systemVirtualWirePair"));

export { SystemVneTunnelArgs, SystemVneTunnelState } from "./systemVneTunnel";
export type SystemVneTunnel = import("./systemVneTunnel").SystemVneTunnel;
export const SystemVneTunnel: typeof import("./systemVneTunnel").SystemVneTunnel = null as any;
utilities.lazyLoad(exports, ["SystemVneTunnel"], () => require("./systemVneTunnel"));

export { SystemVxlanArgs, SystemVxlanState } from "./systemVxlan";
export type SystemVxlan = import("./systemVxlan").SystemVxlan;
export const SystemVxlan: typeof import("./systemVxlan").SystemVxlan = null as any;
utilities.lazyLoad(exports, ["SystemVxlan"], () => require("./systemVxlan"));

export { SystemWccpArgs, SystemWccpState } from "./systemWccp";
export type SystemWccp = import("./systemWccp").SystemWccp;
export const SystemWccp: typeof import("./systemWccp").SystemWccp = null as any;
utilities.lazyLoad(exports, ["SystemWccp"], () => require("./systemWccp"));

export { SystemZoneArgs, SystemZoneState } from "./systemZone";
export type SystemZone = import("./systemZone").SystemZone;
export const SystemZone: typeof import("./systemZone").SystemZone = null as any;
utilities.lazyLoad(exports, ["SystemZone"], () => require("./systemZone"));

export { UserAdgrpArgs, UserAdgrpState } from "./userAdgrp";
export type UserAdgrp = import("./userAdgrp").UserAdgrp;
export const UserAdgrp: typeof import("./userAdgrp").UserAdgrp = null as any;
utilities.lazyLoad(exports, ["UserAdgrp"], () => require("./userAdgrp"));

export { UserCertificateArgs, UserCertificateState } from "./userCertificate";
export type UserCertificate = import("./userCertificate").UserCertificate;
export const UserCertificate: typeof import("./userCertificate").UserCertificate = null as any;
utilities.lazyLoad(exports, ["UserCertificate"], () => require("./userCertificate"));

export { UserDeviceArgs, UserDeviceState } from "./userDevice";
export type UserDevice = import("./userDevice").UserDevice;
export const UserDevice: typeof import("./userDevice").UserDevice = null as any;
utilities.lazyLoad(exports, ["UserDevice"], () => require("./userDevice"));

export { UserDeviceAccessListArgs, UserDeviceAccessListState } from "./userDeviceAccessList";
export type UserDeviceAccessList = import("./userDeviceAccessList").UserDeviceAccessList;
export const UserDeviceAccessList: typeof import("./userDeviceAccessList").UserDeviceAccessList = null as any;
utilities.lazyLoad(exports, ["UserDeviceAccessList"], () => require("./userDeviceAccessList"));

export { UserDeviceCategoryArgs, UserDeviceCategoryState } from "./userDeviceCategory";
export type UserDeviceCategory = import("./userDeviceCategory").UserDeviceCategory;
export const UserDeviceCategory: typeof import("./userDeviceCategory").UserDeviceCategory = null as any;
utilities.lazyLoad(exports, ["UserDeviceCategory"], () => require("./userDeviceCategory"));

export { UserDeviceGroupArgs, UserDeviceGroupState } from "./userDeviceGroup";
export type UserDeviceGroup = import("./userDeviceGroup").UserDeviceGroup;
export const UserDeviceGroup: typeof import("./userDeviceGroup").UserDeviceGroup = null as any;
utilities.lazyLoad(exports, ["UserDeviceGroup"], () => require("./userDeviceGroup"));

export { UserDomainControllerArgs, UserDomainControllerState } from "./userDomainController";
export type UserDomainController = import("./userDomainController").UserDomainController;
export const UserDomainController: typeof import("./userDomainController").UserDomainController = null as any;
utilities.lazyLoad(exports, ["UserDomainController"], () => require("./userDomainController"));

export { UserExchangeArgs, UserExchangeState } from "./userExchange";
export type UserExchange = import("./userExchange").UserExchange;
export const UserExchange: typeof import("./userExchange").UserExchange = null as any;
utilities.lazyLoad(exports, ["UserExchange"], () => require("./userExchange"));

export { UserFortitokenArgs, UserFortitokenState } from "./userFortitoken";
export type UserFortitoken = import("./userFortitoken").UserFortitoken;
export const UserFortitoken: typeof import("./userFortitoken").UserFortitoken = null as any;
utilities.lazyLoad(exports, ["UserFortitoken"], () => require("./userFortitoken"));

export { UserFssoArgs, UserFssoState } from "./userFsso";
export type UserFsso = import("./userFsso").UserFsso;
export const UserFsso: typeof import("./userFsso").UserFsso = null as any;
utilities.lazyLoad(exports, ["UserFsso"], () => require("./userFsso"));

export { UserFssoPollingArgs, UserFssoPollingState } from "./userFssoPolling";
export type UserFssoPolling = import("./userFssoPolling").UserFssoPolling;
export const UserFssoPolling: typeof import("./userFssoPolling").UserFssoPolling = null as any;
utilities.lazyLoad(exports, ["UserFssoPolling"], () => require("./userFssoPolling"));

export { UserGroupArgs, UserGroupState } from "./userGroup";
export type UserGroup = import("./userGroup").UserGroup;
export const UserGroup: typeof import("./userGroup").UserGroup = null as any;
utilities.lazyLoad(exports, ["UserGroup"], () => require("./userGroup"));

export { UserKrbKeytabArgs, UserKrbKeytabState } from "./userKrbKeytab";
export type UserKrbKeytab = import("./userKrbKeytab").UserKrbKeytab;
export const UserKrbKeytab: typeof import("./userKrbKeytab").UserKrbKeytab = null as any;
utilities.lazyLoad(exports, ["UserKrbKeytab"], () => require("./userKrbKeytab"));

export { UserLdapArgs, UserLdapState } from "./userLdap";
export type UserLdap = import("./userLdap").UserLdap;
export const UserLdap: typeof import("./userLdap").UserLdap = null as any;
utilities.lazyLoad(exports, ["UserLdap"], () => require("./userLdap"));

export { UserLocalArgs, UserLocalState } from "./userLocal";
export type UserLocal = import("./userLocal").UserLocal;
export const UserLocal: typeof import("./userLocal").UserLocal = null as any;
utilities.lazyLoad(exports, ["UserLocal"], () => require("./userLocal"));

export { UserNacPolicyArgs, UserNacPolicyState } from "./userNacPolicy";
export type UserNacPolicy = import("./userNacPolicy").UserNacPolicy;
export const UserNacPolicy: typeof import("./userNacPolicy").UserNacPolicy = null as any;
utilities.lazyLoad(exports, ["UserNacPolicy"], () => require("./userNacPolicy"));

export { UserPasswordPolicyArgs, UserPasswordPolicyState } from "./userPasswordPolicy";
export type UserPasswordPolicy = import("./userPasswordPolicy").UserPasswordPolicy;
export const UserPasswordPolicy: typeof import("./userPasswordPolicy").UserPasswordPolicy = null as any;
utilities.lazyLoad(exports, ["UserPasswordPolicy"], () => require("./userPasswordPolicy"));

export { UserPeerArgs, UserPeerState } from "./userPeer";
export type UserPeer = import("./userPeer").UserPeer;
export const UserPeer: typeof import("./userPeer").UserPeer = null as any;
utilities.lazyLoad(exports, ["UserPeer"], () => require("./userPeer"));

export { UserPeergrpArgs, UserPeergrpState } from "./userPeergrp";
export type UserPeergrp = import("./userPeergrp").UserPeergrp;
export const UserPeergrp: typeof import("./userPeergrp").UserPeergrp = null as any;
utilities.lazyLoad(exports, ["UserPeergrp"], () => require("./userPeergrp"));

export { UserPop3Args, UserPop3State } from "./userPop3";
export type UserPop3 = import("./userPop3").UserPop3;
export const UserPop3: typeof import("./userPop3").UserPop3 = null as any;
utilities.lazyLoad(exports, ["UserPop3"], () => require("./userPop3"));

export { UserQuarantineArgs, UserQuarantineState } from "./userQuarantine";
export type UserQuarantine = import("./userQuarantine").UserQuarantine;
export const UserQuarantine: typeof import("./userQuarantine").UserQuarantine = null as any;
utilities.lazyLoad(exports, ["UserQuarantine"], () => require("./userQuarantine"));

export { UserRadiusArgs, UserRadiusState } from "./userRadius";
export type UserRadius = import("./userRadius").UserRadius;
export const UserRadius: typeof import("./userRadius").UserRadius = null as any;
utilities.lazyLoad(exports, ["UserRadius"], () => require("./userRadius"));

export { UserSamlArgs, UserSamlState } from "./userSaml";
export type UserSaml = import("./userSaml").UserSaml;
export const UserSaml: typeof import("./userSaml").UserSaml = null as any;
utilities.lazyLoad(exports, ["UserSaml"], () => require("./userSaml"));

export { UserSecurityExemptListArgs, UserSecurityExemptListState } from "./userSecurityExemptList";
export type UserSecurityExemptList = import("./userSecurityExemptList").UserSecurityExemptList;
export const UserSecurityExemptList: typeof import("./userSecurityExemptList").UserSecurityExemptList = null as any;
utilities.lazyLoad(exports, ["UserSecurityExemptList"], () => require("./userSecurityExemptList"));

export { UserSettingArgs, UserSettingState } from "./userSetting";
export type UserSetting = import("./userSetting").UserSetting;
export const UserSetting: typeof import("./userSetting").UserSetting = null as any;
utilities.lazyLoad(exports, ["UserSetting"], () => require("./userSetting"));

export { UserTacacsArgs, UserTacacsState } from "./userTacacs";
export type UserTacacs = import("./userTacacs").UserTacacs;
export const UserTacacs: typeof import("./userTacacs").UserTacacs = null as any;
utilities.lazyLoad(exports, ["UserTacacs"], () => require("./userTacacs"));

export { VideofilterProfileArgs, VideofilterProfileState } from "./videofilterProfile";
export type VideofilterProfile = import("./videofilterProfile").VideofilterProfile;
export const VideofilterProfile: typeof import("./videofilterProfile").VideofilterProfile = null as any;
utilities.lazyLoad(exports, ["VideofilterProfile"], () => require("./videofilterProfile"));

export { VideofilterYoutubeChannelFilterArgs, VideofilterYoutubeChannelFilterState } from "./videofilterYoutubeChannelFilter";
export type VideofilterYoutubeChannelFilter = import("./videofilterYoutubeChannelFilter").VideofilterYoutubeChannelFilter;
export const VideofilterYoutubeChannelFilter: typeof import("./videofilterYoutubeChannelFilter").VideofilterYoutubeChannelFilter = null as any;
utilities.lazyLoad(exports, ["VideofilterYoutubeChannelFilter"], () => require("./videofilterYoutubeChannelFilter"));

export { VideofilterYoutubeKeyArgs, VideofilterYoutubeKeyState } from "./videofilterYoutubeKey";
export type VideofilterYoutubeKey = import("./videofilterYoutubeKey").VideofilterYoutubeKey;
export const VideofilterYoutubeKey: typeof import("./videofilterYoutubeKey").VideofilterYoutubeKey = null as any;
utilities.lazyLoad(exports, ["VideofilterYoutubeKey"], () => require("./videofilterYoutubeKey"));

export { VoipProfileArgs, VoipProfileState } from "./voipProfile";
export type VoipProfile = import("./voipProfile").VoipProfile;
export const VoipProfile: typeof import("./voipProfile").VoipProfile = null as any;
utilities.lazyLoad(exports, ["VoipProfile"], () => require("./voipProfile"));

export { VpnCertificateCaArgs, VpnCertificateCaState } from "./vpnCertificateCa";
export type VpnCertificateCa = import("./vpnCertificateCa").VpnCertificateCa;
export const VpnCertificateCa: typeof import("./vpnCertificateCa").VpnCertificateCa = null as any;
utilities.lazyLoad(exports, ["VpnCertificateCa"], () => require("./vpnCertificateCa"));

export { VpnCertificateCrlArgs, VpnCertificateCrlState } from "./vpnCertificateCrl";
export type VpnCertificateCrl = import("./vpnCertificateCrl").VpnCertificateCrl;
export const VpnCertificateCrl: typeof import("./vpnCertificateCrl").VpnCertificateCrl = null as any;
utilities.lazyLoad(exports, ["VpnCertificateCrl"], () => require("./vpnCertificateCrl"));

export { VpnCertificateLocalArgs, VpnCertificateLocalState } from "./vpnCertificateLocal";
export type VpnCertificateLocal = import("./vpnCertificateLocal").VpnCertificateLocal;
export const VpnCertificateLocal: typeof import("./vpnCertificateLocal").VpnCertificateLocal = null as any;
utilities.lazyLoad(exports, ["VpnCertificateLocal"], () => require("./vpnCertificateLocal"));

export { VpnCertificateOcspServerArgs, VpnCertificateOcspServerState } from "./vpnCertificateOcspServer";
export type VpnCertificateOcspServer = import("./vpnCertificateOcspServer").VpnCertificateOcspServer;
export const VpnCertificateOcspServer: typeof import("./vpnCertificateOcspServer").VpnCertificateOcspServer = null as any;
utilities.lazyLoad(exports, ["VpnCertificateOcspServer"], () => require("./vpnCertificateOcspServer"));

export { VpnCertificateRemoteArgs, VpnCertificateRemoteState } from "./vpnCertificateRemote";
export type VpnCertificateRemote = import("./vpnCertificateRemote").VpnCertificateRemote;
export const VpnCertificateRemote: typeof import("./vpnCertificateRemote").VpnCertificateRemote = null as any;
utilities.lazyLoad(exports, ["VpnCertificateRemote"], () => require("./vpnCertificateRemote"));

export { VpnCertificateSettingArgs, VpnCertificateSettingState } from "./vpnCertificateSetting";
export type VpnCertificateSetting = import("./vpnCertificateSetting").VpnCertificateSetting;
export const VpnCertificateSetting: typeof import("./vpnCertificateSetting").VpnCertificateSetting = null as any;
utilities.lazyLoad(exports, ["VpnCertificateSetting"], () => require("./vpnCertificateSetting"));

export { VpnIpsecConcentratorArgs, VpnIpsecConcentratorState } from "./vpnIpsecConcentrator";
export type VpnIpsecConcentrator = import("./vpnIpsecConcentrator").VpnIpsecConcentrator;
export const VpnIpsecConcentrator: typeof import("./vpnIpsecConcentrator").VpnIpsecConcentrator = null as any;
utilities.lazyLoad(exports, ["VpnIpsecConcentrator"], () => require("./vpnIpsecConcentrator"));

export { VpnIpsecFecArgs, VpnIpsecFecState } from "./vpnIpsecFec";
export type VpnIpsecFec = import("./vpnIpsecFec").VpnIpsecFec;
export const VpnIpsecFec: typeof import("./vpnIpsecFec").VpnIpsecFec = null as any;
utilities.lazyLoad(exports, ["VpnIpsecFec"], () => require("./vpnIpsecFec"));

export { VpnIpsecForticlientArgs, VpnIpsecForticlientState } from "./vpnIpsecForticlient";
export type VpnIpsecForticlient = import("./vpnIpsecForticlient").VpnIpsecForticlient;
export const VpnIpsecForticlient: typeof import("./vpnIpsecForticlient").VpnIpsecForticlient = null as any;
utilities.lazyLoad(exports, ["VpnIpsecForticlient"], () => require("./vpnIpsecForticlient"));

export { VpnIpsecManualkeyArgs, VpnIpsecManualkeyState } from "./vpnIpsecManualkey";
export type VpnIpsecManualkey = import("./vpnIpsecManualkey").VpnIpsecManualkey;
export const VpnIpsecManualkey: typeof import("./vpnIpsecManualkey").VpnIpsecManualkey = null as any;
utilities.lazyLoad(exports, ["VpnIpsecManualkey"], () => require("./vpnIpsecManualkey"));

export { VpnIpsecManualkeyInterfaceArgs, VpnIpsecManualkeyInterfaceState } from "./vpnIpsecManualkeyInterface";
export type VpnIpsecManualkeyInterface = import("./vpnIpsecManualkeyInterface").VpnIpsecManualkeyInterface;
export const VpnIpsecManualkeyInterface: typeof import("./vpnIpsecManualkeyInterface").VpnIpsecManualkeyInterface = null as any;
utilities.lazyLoad(exports, ["VpnIpsecManualkeyInterface"], () => require("./vpnIpsecManualkeyInterface"));

export { VpnIpsecPhase1Args, VpnIpsecPhase1State } from "./vpnIpsecPhase1";
export type VpnIpsecPhase1 = import("./vpnIpsecPhase1").VpnIpsecPhase1;
export const VpnIpsecPhase1: typeof import("./vpnIpsecPhase1").VpnIpsecPhase1 = null as any;
utilities.lazyLoad(exports, ["VpnIpsecPhase1"], () => require("./vpnIpsecPhase1"));

export { VpnIpsecPhase1InterfaceArgs, VpnIpsecPhase1InterfaceState } from "./vpnIpsecPhase1Interface";
export type VpnIpsecPhase1Interface = import("./vpnIpsecPhase1Interface").VpnIpsecPhase1Interface;
export const VpnIpsecPhase1Interface: typeof import("./vpnIpsecPhase1Interface").VpnIpsecPhase1Interface = null as any;
utilities.lazyLoad(exports, ["VpnIpsecPhase1Interface"], () => require("./vpnIpsecPhase1Interface"));

export { VpnIpsecPhase2Args, VpnIpsecPhase2State } from "./vpnIpsecPhase2";
export type VpnIpsecPhase2 = import("./vpnIpsecPhase2").VpnIpsecPhase2;
export const VpnIpsecPhase2: typeof import("./vpnIpsecPhase2").VpnIpsecPhase2 = null as any;
utilities.lazyLoad(exports, ["VpnIpsecPhase2"], () => require("./vpnIpsecPhase2"));

export { VpnIpsecPhase2InterfaceArgs, VpnIpsecPhase2InterfaceState } from "./vpnIpsecPhase2Interface";
export type VpnIpsecPhase2Interface = import("./vpnIpsecPhase2Interface").VpnIpsecPhase2Interface;
export const VpnIpsecPhase2Interface: typeof import("./vpnIpsecPhase2Interface").VpnIpsecPhase2Interface = null as any;
utilities.lazyLoad(exports, ["VpnIpsecPhase2Interface"], () => require("./vpnIpsecPhase2Interface"));

export { VpnL2TpArgs, VpnL2TpState } from "./vpnL2Tp";
export type VpnL2Tp = import("./vpnL2Tp").VpnL2Tp;
export const VpnL2Tp: typeof import("./vpnL2Tp").VpnL2Tp = null as any;
utilities.lazyLoad(exports, ["VpnL2Tp"], () => require("./vpnL2Tp"));

export { VpnOcvpnArgs, VpnOcvpnState } from "./vpnOcvpn";
export type VpnOcvpn = import("./vpnOcvpn").VpnOcvpn;
export const VpnOcvpn: typeof import("./vpnOcvpn").VpnOcvpn = null as any;
utilities.lazyLoad(exports, ["VpnOcvpn"], () => require("./vpnOcvpn"));

export { VpnPptpArgs, VpnPptpState } from "./vpnPptp";
export type VpnPptp = import("./vpnPptp").VpnPptp;
export const VpnPptp: typeof import("./vpnPptp").VpnPptp = null as any;
utilities.lazyLoad(exports, ["VpnPptp"], () => require("./vpnPptp"));

export { VpnSslClientArgs, VpnSslClientState } from "./vpnSslClient";
export type VpnSslClient = import("./vpnSslClient").VpnSslClient;
export const VpnSslClient: typeof import("./vpnSslClient").VpnSslClient = null as any;
utilities.lazyLoad(exports, ["VpnSslClient"], () => require("./vpnSslClient"));

export { VpnSslSettingsArgs, VpnSslSettingsState } from "./vpnSslSettings";
export type VpnSslSettings = import("./vpnSslSettings").VpnSslSettings;
export const VpnSslSettings: typeof import("./vpnSslSettings").VpnSslSettings = null as any;
utilities.lazyLoad(exports, ["VpnSslSettings"], () => require("./vpnSslSettings"));

export { VpnSslWebHostCheckSoftwareArgs, VpnSslWebHostCheckSoftwareState } from "./vpnSslWebHostCheckSoftware";
export type VpnSslWebHostCheckSoftware = import("./vpnSslWebHostCheckSoftware").VpnSslWebHostCheckSoftware;
export const VpnSslWebHostCheckSoftware: typeof import("./vpnSslWebHostCheckSoftware").VpnSslWebHostCheckSoftware = null as any;
utilities.lazyLoad(exports, ["VpnSslWebHostCheckSoftware"], () => require("./vpnSslWebHostCheckSoftware"));

export { VpnSslWebPortalArgs, VpnSslWebPortalState } from "./vpnSslWebPortal";
export type VpnSslWebPortal = import("./vpnSslWebPortal").VpnSslWebPortal;
export const VpnSslWebPortal: typeof import("./vpnSslWebPortal").VpnSslWebPortal = null as any;
utilities.lazyLoad(exports, ["VpnSslWebPortal"], () => require("./vpnSslWebPortal"));

export { VpnSslWebRealmArgs, VpnSslWebRealmState } from "./vpnSslWebRealm";
export type VpnSslWebRealm = import("./vpnSslWebRealm").VpnSslWebRealm;
export const VpnSslWebRealm: typeof import("./vpnSslWebRealm").VpnSslWebRealm = null as any;
utilities.lazyLoad(exports, ["VpnSslWebRealm"], () => require("./vpnSslWebRealm"));

export { VpnSslWebUserBookmarkArgs, VpnSslWebUserBookmarkState } from "./vpnSslWebUserBookmark";
export type VpnSslWebUserBookmark = import("./vpnSslWebUserBookmark").VpnSslWebUserBookmark;
export const VpnSslWebUserBookmark: typeof import("./vpnSslWebUserBookmark").VpnSslWebUserBookmark = null as any;
utilities.lazyLoad(exports, ["VpnSslWebUserBookmark"], () => require("./vpnSslWebUserBookmark"));

export { VpnSslWebUserGroupBookmarkArgs, VpnSslWebUserGroupBookmarkState } from "./vpnSslWebUserGroupBookmark";
export type VpnSslWebUserGroupBookmark = import("./vpnSslWebUserGroupBookmark").VpnSslWebUserGroupBookmark;
export const VpnSslWebUserGroupBookmark: typeof import("./vpnSslWebUserGroupBookmark").VpnSslWebUserGroupBookmark = null as any;
utilities.lazyLoad(exports, ["VpnSslWebUserGroupBookmark"], () => require("./vpnSslWebUserGroupBookmark"));

export { VPNIPsecPhase1InterfaceLegacyArgs, VPNIPsecPhase1InterfaceLegacyState } from "./vpnipsecPhase1InterfaceLegacy";
export type VPNIPsecPhase1InterfaceLegacy = import("./vpnipsecPhase1InterfaceLegacy").VPNIPsecPhase1InterfaceLegacy;
export const VPNIPsecPhase1InterfaceLegacy: typeof import("./vpnipsecPhase1InterfaceLegacy").VPNIPsecPhase1InterfaceLegacy = null as any;
utilities.lazyLoad(exports, ["VPNIPsecPhase1InterfaceLegacy"], () => require("./vpnipsecPhase1InterfaceLegacy"));

export { VPNIPsecPhase2InterfaceLegacyArgs, VPNIPsecPhase2InterfaceLegacyState } from "./vpnipsecPhase2InterfaceLegacy";
export type VPNIPsecPhase2InterfaceLegacy = import("./vpnipsecPhase2InterfaceLegacy").VPNIPsecPhase2InterfaceLegacy;
export const VPNIPsecPhase2InterfaceLegacy: typeof import("./vpnipsecPhase2InterfaceLegacy").VPNIPsecPhase2InterfaceLegacy = null as any;
utilities.lazyLoad(exports, ["VPNIPsecPhase2InterfaceLegacy"], () => require("./vpnipsecPhase2InterfaceLegacy"));

export { WafMainClassArgs, WafMainClassState } from "./wafMainClass";
export type WafMainClass = import("./wafMainClass").WafMainClass;
export const WafMainClass: typeof import("./wafMainClass").WafMainClass = null as any;
utilities.lazyLoad(exports, ["WafMainClass"], () => require("./wafMainClass"));

export { WafProfileArgs, WafProfileState } from "./wafProfile";
export type WafProfile = import("./wafProfile").WafProfile;
export const WafProfile: typeof import("./wafProfile").WafProfile = null as any;
utilities.lazyLoad(exports, ["WafProfile"], () => require("./wafProfile"));

export { WafSignatureArgs, WafSignatureState } from "./wafSignature";
export type WafSignature = import("./wafSignature").WafSignature;
export const WafSignature: typeof import("./wafSignature").WafSignature = null as any;
utilities.lazyLoad(exports, ["WafSignature"], () => require("./wafSignature"));

export { WafSubClassArgs, WafSubClassState } from "./wafSubClass";
export type WafSubClass = import("./wafSubClass").WafSubClass;
export const WafSubClass: typeof import("./wafSubClass").WafSubClass = null as any;
utilities.lazyLoad(exports, ["WafSubClass"], () => require("./wafSubClass"));

export { WanoptAuthGroupArgs, WanoptAuthGroupState } from "./wanoptAuthGroup";
export type WanoptAuthGroup = import("./wanoptAuthGroup").WanoptAuthGroup;
export const WanoptAuthGroup: typeof import("./wanoptAuthGroup").WanoptAuthGroup = null as any;
utilities.lazyLoad(exports, ["WanoptAuthGroup"], () => require("./wanoptAuthGroup"));

export { WanoptCacheServiceArgs, WanoptCacheServiceState } from "./wanoptCacheService";
export type WanoptCacheService = import("./wanoptCacheService").WanoptCacheService;
export const WanoptCacheService: typeof import("./wanoptCacheService").WanoptCacheService = null as any;
utilities.lazyLoad(exports, ["WanoptCacheService"], () => require("./wanoptCacheService"));

export { WanoptContentDeliveryNetworkRuleArgs, WanoptContentDeliveryNetworkRuleState } from "./wanoptContentDeliveryNetworkRule";
export type WanoptContentDeliveryNetworkRule = import("./wanoptContentDeliveryNetworkRule").WanoptContentDeliveryNetworkRule;
export const WanoptContentDeliveryNetworkRule: typeof import("./wanoptContentDeliveryNetworkRule").WanoptContentDeliveryNetworkRule = null as any;
utilities.lazyLoad(exports, ["WanoptContentDeliveryNetworkRule"], () => require("./wanoptContentDeliveryNetworkRule"));

export { WanoptPeerArgs, WanoptPeerState } from "./wanoptPeer";
export type WanoptPeer = import("./wanoptPeer").WanoptPeer;
export const WanoptPeer: typeof import("./wanoptPeer").WanoptPeer = null as any;
utilities.lazyLoad(exports, ["WanoptPeer"], () => require("./wanoptPeer"));

export { WanoptProfileArgs, WanoptProfileState } from "./wanoptProfile";
export type WanoptProfile = import("./wanoptProfile").WanoptProfile;
export const WanoptProfile: typeof import("./wanoptProfile").WanoptProfile = null as any;
utilities.lazyLoad(exports, ["WanoptProfile"], () => require("./wanoptProfile"));

export { WanoptRemoteStorageArgs, WanoptRemoteStorageState } from "./wanoptRemoteStorage";
export type WanoptRemoteStorage = import("./wanoptRemoteStorage").WanoptRemoteStorage;
export const WanoptRemoteStorage: typeof import("./wanoptRemoteStorage").WanoptRemoteStorage = null as any;
utilities.lazyLoad(exports, ["WanoptRemoteStorage"], () => require("./wanoptRemoteStorage"));

export { WanoptSettingsArgs, WanoptSettingsState } from "./wanoptSettings";
export type WanoptSettings = import("./wanoptSettings").WanoptSettings;
export const WanoptSettings: typeof import("./wanoptSettings").WanoptSettings = null as any;
utilities.lazyLoad(exports, ["WanoptSettings"], () => require("./wanoptSettings"));

export { WanoptWebcacheArgs, WanoptWebcacheState } from "./wanoptWebcache";
export type WanoptWebcache = import("./wanoptWebcache").WanoptWebcache;
export const WanoptWebcache: typeof import("./wanoptWebcache").WanoptWebcache = null as any;
utilities.lazyLoad(exports, ["WanoptWebcache"], () => require("./wanoptWebcache"));

export { WebProxyDebugUrlArgs, WebProxyDebugUrlState } from "./webProxyDebugUrl";
export type WebProxyDebugUrl = import("./webProxyDebugUrl").WebProxyDebugUrl;
export const WebProxyDebugUrl: typeof import("./webProxyDebugUrl").WebProxyDebugUrl = null as any;
utilities.lazyLoad(exports, ["WebProxyDebugUrl"], () => require("./webProxyDebugUrl"));

export { WebProxyExplicitArgs, WebProxyExplicitState } from "./webProxyExplicit";
export type WebProxyExplicit = import("./webProxyExplicit").WebProxyExplicit;
export const WebProxyExplicit: typeof import("./webProxyExplicit").WebProxyExplicit = null as any;
utilities.lazyLoad(exports, ["WebProxyExplicit"], () => require("./webProxyExplicit"));

export { WebProxyForwardServerArgs, WebProxyForwardServerState } from "./webProxyForwardServer";
export type WebProxyForwardServer = import("./webProxyForwardServer").WebProxyForwardServer;
export const WebProxyForwardServer: typeof import("./webProxyForwardServer").WebProxyForwardServer = null as any;
utilities.lazyLoad(exports, ["WebProxyForwardServer"], () => require("./webProxyForwardServer"));

export { WebProxyForwardServerGroupArgs, WebProxyForwardServerGroupState } from "./webProxyForwardServerGroup";
export type WebProxyForwardServerGroup = import("./webProxyForwardServerGroup").WebProxyForwardServerGroup;
export const WebProxyForwardServerGroup: typeof import("./webProxyForwardServerGroup").WebProxyForwardServerGroup = null as any;
utilities.lazyLoad(exports, ["WebProxyForwardServerGroup"], () => require("./webProxyForwardServerGroup"));

export { WebProxyGlobalArgs, WebProxyGlobalState } from "./webProxyGlobal";
export type WebProxyGlobal = import("./webProxyGlobal").WebProxyGlobal;
export const WebProxyGlobal: typeof import("./webProxyGlobal").WebProxyGlobal = null as any;
utilities.lazyLoad(exports, ["WebProxyGlobal"], () => require("./webProxyGlobal"));

export { WebProxyProfileArgs, WebProxyProfileState } from "./webProxyProfile";
export type WebProxyProfile = import("./webProxyProfile").WebProxyProfile;
export const WebProxyProfile: typeof import("./webProxyProfile").WebProxyProfile = null as any;
utilities.lazyLoad(exports, ["WebProxyProfile"], () => require("./webProxyProfile"));

export { WebProxyUrlMatchArgs, WebProxyUrlMatchState } from "./webProxyUrlMatch";
export type WebProxyUrlMatch = import("./webProxyUrlMatch").WebProxyUrlMatch;
export const WebProxyUrlMatch: typeof import("./webProxyUrlMatch").WebProxyUrlMatch = null as any;
utilities.lazyLoad(exports, ["WebProxyUrlMatch"], () => require("./webProxyUrlMatch"));

export { WebProxyWispArgs, WebProxyWispState } from "./webProxyWisp";
export type WebProxyWisp = import("./webProxyWisp").WebProxyWisp;
export const WebProxyWisp: typeof import("./webProxyWisp").WebProxyWisp = null as any;
utilities.lazyLoad(exports, ["WebProxyWisp"], () => require("./webProxyWisp"));

export { WebfilterContentArgs, WebfilterContentState } from "./webfilterContent";
export type WebfilterContent = import("./webfilterContent").WebfilterContent;
export const WebfilterContent: typeof import("./webfilterContent").WebfilterContent = null as any;
utilities.lazyLoad(exports, ["WebfilterContent"], () => require("./webfilterContent"));

export { WebfilterContentHeaderArgs, WebfilterContentHeaderState } from "./webfilterContentHeader";
export type WebfilterContentHeader = import("./webfilterContentHeader").WebfilterContentHeader;
export const WebfilterContentHeader: typeof import("./webfilterContentHeader").WebfilterContentHeader = null as any;
utilities.lazyLoad(exports, ["WebfilterContentHeader"], () => require("./webfilterContentHeader"));

export { WebfilterFortiguardArgs, WebfilterFortiguardState } from "./webfilterFortiguard";
export type WebfilterFortiguard = import("./webfilterFortiguard").WebfilterFortiguard;
export const WebfilterFortiguard: typeof import("./webfilterFortiguard").WebfilterFortiguard = null as any;
utilities.lazyLoad(exports, ["WebfilterFortiguard"], () => require("./webfilterFortiguard"));

export { WebfilterFtgdLocalCatArgs, WebfilterFtgdLocalCatState } from "./webfilterFtgdLocalCat";
export type WebfilterFtgdLocalCat = import("./webfilterFtgdLocalCat").WebfilterFtgdLocalCat;
export const WebfilterFtgdLocalCat: typeof import("./webfilterFtgdLocalCat").WebfilterFtgdLocalCat = null as any;
utilities.lazyLoad(exports, ["WebfilterFtgdLocalCat"], () => require("./webfilterFtgdLocalCat"));

export { WebfilterFtgdLocalRatingArgs, WebfilterFtgdLocalRatingState } from "./webfilterFtgdLocalRating";
export type WebfilterFtgdLocalRating = import("./webfilterFtgdLocalRating").WebfilterFtgdLocalRating;
export const WebfilterFtgdLocalRating: typeof import("./webfilterFtgdLocalRating").WebfilterFtgdLocalRating = null as any;
utilities.lazyLoad(exports, ["WebfilterFtgdLocalRating"], () => require("./webfilterFtgdLocalRating"));

export { WebfilterIpsUrlfilterCacheSettingArgs, WebfilterIpsUrlfilterCacheSettingState } from "./webfilterIpsUrlfilterCacheSetting";
export type WebfilterIpsUrlfilterCacheSetting = import("./webfilterIpsUrlfilterCacheSetting").WebfilterIpsUrlfilterCacheSetting;
export const WebfilterIpsUrlfilterCacheSetting: typeof import("./webfilterIpsUrlfilterCacheSetting").WebfilterIpsUrlfilterCacheSetting = null as any;
utilities.lazyLoad(exports, ["WebfilterIpsUrlfilterCacheSetting"], () => require("./webfilterIpsUrlfilterCacheSetting"));

export { WebfilterIpsUrlfilterSettingArgs, WebfilterIpsUrlfilterSettingState } from "./webfilterIpsUrlfilterSetting";
export type WebfilterIpsUrlfilterSetting = import("./webfilterIpsUrlfilterSetting").WebfilterIpsUrlfilterSetting;
export const WebfilterIpsUrlfilterSetting: typeof import("./webfilterIpsUrlfilterSetting").WebfilterIpsUrlfilterSetting = null as any;
utilities.lazyLoad(exports, ["WebfilterIpsUrlfilterSetting"], () => require("./webfilterIpsUrlfilterSetting"));

export { WebfilterIpsUrlfilterSetting6Args, WebfilterIpsUrlfilterSetting6State } from "./webfilterIpsUrlfilterSetting6";
export type WebfilterIpsUrlfilterSetting6 = import("./webfilterIpsUrlfilterSetting6").WebfilterIpsUrlfilterSetting6;
export const WebfilterIpsUrlfilterSetting6: typeof import("./webfilterIpsUrlfilterSetting6").WebfilterIpsUrlfilterSetting6 = null as any;
utilities.lazyLoad(exports, ["WebfilterIpsUrlfilterSetting6"], () => require("./webfilterIpsUrlfilterSetting6"));

export { WebfilterOverrideArgs, WebfilterOverrideState } from "./webfilterOverride";
export type WebfilterOverride = import("./webfilterOverride").WebfilterOverride;
export const WebfilterOverride: typeof import("./webfilterOverride").WebfilterOverride = null as any;
utilities.lazyLoad(exports, ["WebfilterOverride"], () => require("./webfilterOverride"));

export { WebfilterProfileArgs, WebfilterProfileState } from "./webfilterProfile";
export type WebfilterProfile = import("./webfilterProfile").WebfilterProfile;
export const WebfilterProfile: typeof import("./webfilterProfile").WebfilterProfile = null as any;
utilities.lazyLoad(exports, ["WebfilterProfile"], () => require("./webfilterProfile"));

export { WebfilterSearchEngineArgs, WebfilterSearchEngineState } from "./webfilterSearchEngine";
export type WebfilterSearchEngine = import("./webfilterSearchEngine").WebfilterSearchEngine;
export const WebfilterSearchEngine: typeof import("./webfilterSearchEngine").WebfilterSearchEngine = null as any;
utilities.lazyLoad(exports, ["WebfilterSearchEngine"], () => require("./webfilterSearchEngine"));

export { WebfilterUrlfilterArgs, WebfilterUrlfilterState } from "./webfilterUrlfilter";
export type WebfilterUrlfilter = import("./webfilterUrlfilter").WebfilterUrlfilter;
export const WebfilterUrlfilter: typeof import("./webfilterUrlfilter").WebfilterUrlfilter = null as any;
utilities.lazyLoad(exports, ["WebfilterUrlfilter"], () => require("./webfilterUrlfilter"));

export { WirelessControllerAccessControlListArgs, WirelessControllerAccessControlListState } from "./wirelessControllerAccessControlList";
export type WirelessControllerAccessControlList = import("./wirelessControllerAccessControlList").WirelessControllerAccessControlList;
export const WirelessControllerAccessControlList: typeof import("./wirelessControllerAccessControlList").WirelessControllerAccessControlList = null as any;
utilities.lazyLoad(exports, ["WirelessControllerAccessControlList"], () => require("./wirelessControllerAccessControlList"));

export { WirelessControllerAddressArgs, WirelessControllerAddressState } from "./wirelessControllerAddress";
export type WirelessControllerAddress = import("./wirelessControllerAddress").WirelessControllerAddress;
export const WirelessControllerAddress: typeof import("./wirelessControllerAddress").WirelessControllerAddress = null as any;
utilities.lazyLoad(exports, ["WirelessControllerAddress"], () => require("./wirelessControllerAddress"));

export { WirelessControllerAddrgrpArgs, WirelessControllerAddrgrpState } from "./wirelessControllerAddrgrp";
export type WirelessControllerAddrgrp = import("./wirelessControllerAddrgrp").WirelessControllerAddrgrp;
export const WirelessControllerAddrgrp: typeof import("./wirelessControllerAddrgrp").WirelessControllerAddrgrp = null as any;
utilities.lazyLoad(exports, ["WirelessControllerAddrgrp"], () => require("./wirelessControllerAddrgrp"));

export { WirelessControllerApStatusArgs, WirelessControllerApStatusState } from "./wirelessControllerApStatus";
export type WirelessControllerApStatus = import("./wirelessControllerApStatus").WirelessControllerApStatus;
export const WirelessControllerApStatus: typeof import("./wirelessControllerApStatus").WirelessControllerApStatus = null as any;
utilities.lazyLoad(exports, ["WirelessControllerApStatus"], () => require("./wirelessControllerApStatus"));

export { WirelessControllerApcfgProfileArgs, WirelessControllerApcfgProfileState } from "./wirelessControllerApcfgProfile";
export type WirelessControllerApcfgProfile = import("./wirelessControllerApcfgProfile").WirelessControllerApcfgProfile;
export const WirelessControllerApcfgProfile: typeof import("./wirelessControllerApcfgProfile").WirelessControllerApcfgProfile = null as any;
utilities.lazyLoad(exports, ["WirelessControllerApcfgProfile"], () => require("./wirelessControllerApcfgProfile"));

export { WirelessControllerArrpProfileArgs, WirelessControllerArrpProfileState } from "./wirelessControllerArrpProfile";
export type WirelessControllerArrpProfile = import("./wirelessControllerArrpProfile").WirelessControllerArrpProfile;
export const WirelessControllerArrpProfile: typeof import("./wirelessControllerArrpProfile").WirelessControllerArrpProfile = null as any;
utilities.lazyLoad(exports, ["WirelessControllerArrpProfile"], () => require("./wirelessControllerArrpProfile"));

export { WirelessControllerBleProfileArgs, WirelessControllerBleProfileState } from "./wirelessControllerBleProfile";
export type WirelessControllerBleProfile = import("./wirelessControllerBleProfile").WirelessControllerBleProfile;
export const WirelessControllerBleProfile: typeof import("./wirelessControllerBleProfile").WirelessControllerBleProfile = null as any;
utilities.lazyLoad(exports, ["WirelessControllerBleProfile"], () => require("./wirelessControllerBleProfile"));

export { WirelessControllerBonjourProfileArgs, WirelessControllerBonjourProfileState } from "./wirelessControllerBonjourProfile";
export type WirelessControllerBonjourProfile = import("./wirelessControllerBonjourProfile").WirelessControllerBonjourProfile;
export const WirelessControllerBonjourProfile: typeof import("./wirelessControllerBonjourProfile").WirelessControllerBonjourProfile = null as any;
utilities.lazyLoad(exports, ["WirelessControllerBonjourProfile"], () => require("./wirelessControllerBonjourProfile"));

export { WirelessControllerGlobalArgs, WirelessControllerGlobalState } from "./wirelessControllerGlobal";
export type WirelessControllerGlobal = import("./wirelessControllerGlobal").WirelessControllerGlobal;
export const WirelessControllerGlobal: typeof import("./wirelessControllerGlobal").WirelessControllerGlobal = null as any;
utilities.lazyLoad(exports, ["WirelessControllerGlobal"], () => require("./wirelessControllerGlobal"));

export { WirelessControllerHotspot20Anqp3GppCellularArgs, WirelessControllerHotspot20Anqp3GppCellularState } from "./wirelessControllerHotspot20Anqp3GppCellular";
export type WirelessControllerHotspot20Anqp3GppCellular = import("./wirelessControllerHotspot20Anqp3GppCellular").WirelessControllerHotspot20Anqp3GppCellular;
export const WirelessControllerHotspot20Anqp3GppCellular: typeof import("./wirelessControllerHotspot20Anqp3GppCellular").WirelessControllerHotspot20Anqp3GppCellular = null as any;
utilities.lazyLoad(exports, ["WirelessControllerHotspot20Anqp3GppCellular"], () => require("./wirelessControllerHotspot20Anqp3GppCellular"));

export { WirelessControllerHotspot20AnqpIpAddressTypeArgs, WirelessControllerHotspot20AnqpIpAddressTypeState } from "./wirelessControllerHotspot20AnqpIpAddressType";
export type WirelessControllerHotspot20AnqpIpAddressType = import("./wirelessControllerHotspot20AnqpIpAddressType").WirelessControllerHotspot20AnqpIpAddressType;
export const WirelessControllerHotspot20AnqpIpAddressType: typeof import("./wirelessControllerHotspot20AnqpIpAddressType").WirelessControllerHotspot20AnqpIpAddressType = null as any;
utilities.lazyLoad(exports, ["WirelessControllerHotspot20AnqpIpAddressType"], () => require("./wirelessControllerHotspot20AnqpIpAddressType"));

export { WirelessControllerHotspot20AnqpNaiRealmArgs, WirelessControllerHotspot20AnqpNaiRealmState } from "./wirelessControllerHotspot20AnqpNaiRealm";
export type WirelessControllerHotspot20AnqpNaiRealm = import("./wirelessControllerHotspot20AnqpNaiRealm").WirelessControllerHotspot20AnqpNaiRealm;
export const WirelessControllerHotspot20AnqpNaiRealm: typeof import("./wirelessControllerHotspot20AnqpNaiRealm").WirelessControllerHotspot20AnqpNaiRealm = null as any;
utilities.lazyLoad(exports, ["WirelessControllerHotspot20AnqpNaiRealm"], () => require("./wirelessControllerHotspot20AnqpNaiRealm"));

export { WirelessControllerHotspot20AnqpNetworkAuthTypeArgs, WirelessControllerHotspot20AnqpNetworkAuthTypeState } from "./wirelessControllerHotspot20AnqpNetworkAuthType";
export type WirelessControllerHotspot20AnqpNetworkAuthType = import("./wirelessControllerHotspot20AnqpNetworkAuthType").WirelessControllerHotspot20AnqpNetworkAuthType;
export const WirelessControllerHotspot20AnqpNetworkAuthType: typeof import("./wirelessControllerHotspot20AnqpNetworkAuthType").WirelessControllerHotspot20AnqpNetworkAuthType = null as any;
utilities.lazyLoad(exports, ["WirelessControllerHotspot20AnqpNetworkAuthType"], () => require("./wirelessControllerHotspot20AnqpNetworkAuthType"));

export { WirelessControllerHotspot20AnqpRoamingConsortiumArgs, WirelessControllerHotspot20AnqpRoamingConsortiumState } from "./wirelessControllerHotspot20AnqpRoamingConsortium";
export type WirelessControllerHotspot20AnqpRoamingConsortium = import("./wirelessControllerHotspot20AnqpRoamingConsortium").WirelessControllerHotspot20AnqpRoamingConsortium;
export const WirelessControllerHotspot20AnqpRoamingConsortium: typeof import("./wirelessControllerHotspot20AnqpRoamingConsortium").WirelessControllerHotspot20AnqpRoamingConsortium = null as any;
utilities.lazyLoad(exports, ["WirelessControllerHotspot20AnqpRoamingConsortium"], () => require("./wirelessControllerHotspot20AnqpRoamingConsortium"));

export { WirelessControllerHotspot20AnqpVenueNameArgs, WirelessControllerHotspot20AnqpVenueNameState } from "./wirelessControllerHotspot20AnqpVenueName";
export type WirelessControllerHotspot20AnqpVenueName = import("./wirelessControllerHotspot20AnqpVenueName").WirelessControllerHotspot20AnqpVenueName;
export const WirelessControllerHotspot20AnqpVenueName: typeof import("./wirelessControllerHotspot20AnqpVenueName").WirelessControllerHotspot20AnqpVenueName = null as any;
utilities.lazyLoad(exports, ["WirelessControllerHotspot20AnqpVenueName"], () => require("./wirelessControllerHotspot20AnqpVenueName"));

export { WirelessControllerHotspot20AnqpVenueUrlArgs, WirelessControllerHotspot20AnqpVenueUrlState } from "./wirelessControllerHotspot20AnqpVenueUrl";
export type WirelessControllerHotspot20AnqpVenueUrl = import("./wirelessControllerHotspot20AnqpVenueUrl").WirelessControllerHotspot20AnqpVenueUrl;
export const WirelessControllerHotspot20AnqpVenueUrl: typeof import("./wirelessControllerHotspot20AnqpVenueUrl").WirelessControllerHotspot20AnqpVenueUrl = null as any;
utilities.lazyLoad(exports, ["WirelessControllerHotspot20AnqpVenueUrl"], () => require("./wirelessControllerHotspot20AnqpVenueUrl"));

export { WirelessControllerHotspot20H2QpAdviceOfChargeArgs, WirelessControllerHotspot20H2QpAdviceOfChargeState } from "./wirelessControllerHotspot20H2QpAdviceOfCharge";
export type WirelessControllerHotspot20H2QpAdviceOfCharge = import("./wirelessControllerHotspot20H2QpAdviceOfCharge").WirelessControllerHotspot20H2QpAdviceOfCharge;
export const WirelessControllerHotspot20H2QpAdviceOfCharge: typeof import("./wirelessControllerHotspot20H2QpAdviceOfCharge").WirelessControllerHotspot20H2QpAdviceOfCharge = null as any;
utilities.lazyLoad(exports, ["WirelessControllerHotspot20H2QpAdviceOfCharge"], () => require("./wirelessControllerHotspot20H2QpAdviceOfCharge"));

export { WirelessControllerHotspot20H2QpConnCapabilityArgs, WirelessControllerHotspot20H2QpConnCapabilityState } from "./wirelessControllerHotspot20H2QpConnCapability";
export type WirelessControllerHotspot20H2QpConnCapability = import("./wirelessControllerHotspot20H2QpConnCapability").WirelessControllerHotspot20H2QpConnCapability;
export const WirelessControllerHotspot20H2QpConnCapability: typeof import("./wirelessControllerHotspot20H2QpConnCapability").WirelessControllerHotspot20H2QpConnCapability = null as any;
utilities.lazyLoad(exports, ["WirelessControllerHotspot20H2QpConnCapability"], () => require("./wirelessControllerHotspot20H2QpConnCapability"));

export { WirelessControllerHotspot20H2QpOperatorNameArgs, WirelessControllerHotspot20H2QpOperatorNameState } from "./wirelessControllerHotspot20H2QpOperatorName";
export type WirelessControllerHotspot20H2QpOperatorName = import("./wirelessControllerHotspot20H2QpOperatorName").WirelessControllerHotspot20H2QpOperatorName;
export const WirelessControllerHotspot20H2QpOperatorName: typeof import("./wirelessControllerHotspot20H2QpOperatorName").WirelessControllerHotspot20H2QpOperatorName = null as any;
utilities.lazyLoad(exports, ["WirelessControllerHotspot20H2QpOperatorName"], () => require("./wirelessControllerHotspot20H2QpOperatorName"));

export { WirelessControllerHotspot20H2QpOsuProviderArgs, WirelessControllerHotspot20H2QpOsuProviderState } from "./wirelessControllerHotspot20H2QpOsuProvider";
export type WirelessControllerHotspot20H2QpOsuProvider = import("./wirelessControllerHotspot20H2QpOsuProvider").WirelessControllerHotspot20H2QpOsuProvider;
export const WirelessControllerHotspot20H2QpOsuProvider: typeof import("./wirelessControllerHotspot20H2QpOsuProvider").WirelessControllerHotspot20H2QpOsuProvider = null as any;
utilities.lazyLoad(exports, ["WirelessControllerHotspot20H2QpOsuProvider"], () => require("./wirelessControllerHotspot20H2QpOsuProvider"));

export { WirelessControllerHotspot20H2QpOsuProviderNaiArgs, WirelessControllerHotspot20H2QpOsuProviderNaiState } from "./wirelessControllerHotspot20H2QpOsuProviderNai";
export type WirelessControllerHotspot20H2QpOsuProviderNai = import("./wirelessControllerHotspot20H2QpOsuProviderNai").WirelessControllerHotspot20H2QpOsuProviderNai;
export const WirelessControllerHotspot20H2QpOsuProviderNai: typeof import("./wirelessControllerHotspot20H2QpOsuProviderNai").WirelessControllerHotspot20H2QpOsuProviderNai = null as any;
utilities.lazyLoad(exports, ["WirelessControllerHotspot20H2QpOsuProviderNai"], () => require("./wirelessControllerHotspot20H2QpOsuProviderNai"));

export { WirelessControllerHotspot20H2QpTermsAndConditionsArgs, WirelessControllerHotspot20H2QpTermsAndConditionsState } from "./wirelessControllerHotspot20H2QpTermsAndConditions";
export type WirelessControllerHotspot20H2QpTermsAndConditions = import("./wirelessControllerHotspot20H2QpTermsAndConditions").WirelessControllerHotspot20H2QpTermsAndConditions;
export const WirelessControllerHotspot20H2QpTermsAndConditions: typeof import("./wirelessControllerHotspot20H2QpTermsAndConditions").WirelessControllerHotspot20H2QpTermsAndConditions = null as any;
utilities.lazyLoad(exports, ["WirelessControllerHotspot20H2QpTermsAndConditions"], () => require("./wirelessControllerHotspot20H2QpTermsAndConditions"));

export { WirelessControllerHotspot20H2QpWanMetricArgs, WirelessControllerHotspot20H2QpWanMetricState } from "./wirelessControllerHotspot20H2QpWanMetric";
export type WirelessControllerHotspot20H2QpWanMetric = import("./wirelessControllerHotspot20H2QpWanMetric").WirelessControllerHotspot20H2QpWanMetric;
export const WirelessControllerHotspot20H2QpWanMetric: typeof import("./wirelessControllerHotspot20H2QpWanMetric").WirelessControllerHotspot20H2QpWanMetric = null as any;
utilities.lazyLoad(exports, ["WirelessControllerHotspot20H2QpWanMetric"], () => require("./wirelessControllerHotspot20H2QpWanMetric"));

export { WirelessControllerHotspot20HsProfileArgs, WirelessControllerHotspot20HsProfileState } from "./wirelessControllerHotspot20HsProfile";
export type WirelessControllerHotspot20HsProfile = import("./wirelessControllerHotspot20HsProfile").WirelessControllerHotspot20HsProfile;
export const WirelessControllerHotspot20HsProfile: typeof import("./wirelessControllerHotspot20HsProfile").WirelessControllerHotspot20HsProfile = null as any;
utilities.lazyLoad(exports, ["WirelessControllerHotspot20HsProfile"], () => require("./wirelessControllerHotspot20HsProfile"));

export { WirelessControllerHotspot20IconArgs, WirelessControllerHotspot20IconState } from "./wirelessControllerHotspot20Icon";
export type WirelessControllerHotspot20Icon = import("./wirelessControllerHotspot20Icon").WirelessControllerHotspot20Icon;
export const WirelessControllerHotspot20Icon: typeof import("./wirelessControllerHotspot20Icon").WirelessControllerHotspot20Icon = null as any;
utilities.lazyLoad(exports, ["WirelessControllerHotspot20Icon"], () => require("./wirelessControllerHotspot20Icon"));

export { WirelessControllerHotspot20QosMapArgs, WirelessControllerHotspot20QosMapState } from "./wirelessControllerHotspot20QosMap";
export type WirelessControllerHotspot20QosMap = import("./wirelessControllerHotspot20QosMap").WirelessControllerHotspot20QosMap;
export const WirelessControllerHotspot20QosMap: typeof import("./wirelessControllerHotspot20QosMap").WirelessControllerHotspot20QosMap = null as any;
utilities.lazyLoad(exports, ["WirelessControllerHotspot20QosMap"], () => require("./wirelessControllerHotspot20QosMap"));

export { WirelessControllerInterControllerArgs, WirelessControllerInterControllerState } from "./wirelessControllerInterController";
export type WirelessControllerInterController = import("./wirelessControllerInterController").WirelessControllerInterController;
export const WirelessControllerInterController: typeof import("./wirelessControllerInterController").WirelessControllerInterController = null as any;
utilities.lazyLoad(exports, ["WirelessControllerInterController"], () => require("./wirelessControllerInterController"));

export { WirelessControllerLogArgs, WirelessControllerLogState } from "./wirelessControllerLog";
export type WirelessControllerLog = import("./wirelessControllerLog").WirelessControllerLog;
export const WirelessControllerLog: typeof import("./wirelessControllerLog").WirelessControllerLog = null as any;
utilities.lazyLoad(exports, ["WirelessControllerLog"], () => require("./wirelessControllerLog"));

export { WirelessControllerMpskProfileArgs, WirelessControllerMpskProfileState } from "./wirelessControllerMpskProfile";
export type WirelessControllerMpskProfile = import("./wirelessControllerMpskProfile").WirelessControllerMpskProfile;
export const WirelessControllerMpskProfile: typeof import("./wirelessControllerMpskProfile").WirelessControllerMpskProfile = null as any;
utilities.lazyLoad(exports, ["WirelessControllerMpskProfile"], () => require("./wirelessControllerMpskProfile"));

export { WirelessControllerNacProfileArgs, WirelessControllerNacProfileState } from "./wirelessControllerNacProfile";
export type WirelessControllerNacProfile = import("./wirelessControllerNacProfile").WirelessControllerNacProfile;
export const WirelessControllerNacProfile: typeof import("./wirelessControllerNacProfile").WirelessControllerNacProfile = null as any;
utilities.lazyLoad(exports, ["WirelessControllerNacProfile"], () => require("./wirelessControllerNacProfile"));

export { WirelessControllerQosProfileArgs, WirelessControllerQosProfileState } from "./wirelessControllerQosProfile";
export type WirelessControllerQosProfile = import("./wirelessControllerQosProfile").WirelessControllerQosProfile;
export const WirelessControllerQosProfile: typeof import("./wirelessControllerQosProfile").WirelessControllerQosProfile = null as any;
utilities.lazyLoad(exports, ["WirelessControllerQosProfile"], () => require("./wirelessControllerQosProfile"));

export { WirelessControllerRegionArgs, WirelessControllerRegionState } from "./wirelessControllerRegion";
export type WirelessControllerRegion = import("./wirelessControllerRegion").WirelessControllerRegion;
export const WirelessControllerRegion: typeof import("./wirelessControllerRegion").WirelessControllerRegion = null as any;
utilities.lazyLoad(exports, ["WirelessControllerRegion"], () => require("./wirelessControllerRegion"));

export { WirelessControllerSettingArgs, WirelessControllerSettingState } from "./wirelessControllerSetting";
export type WirelessControllerSetting = import("./wirelessControllerSetting").WirelessControllerSetting;
export const WirelessControllerSetting: typeof import("./wirelessControllerSetting").WirelessControllerSetting = null as any;
utilities.lazyLoad(exports, ["WirelessControllerSetting"], () => require("./wirelessControllerSetting"));

export { WirelessControllerSnmpArgs, WirelessControllerSnmpState } from "./wirelessControllerSnmp";
export type WirelessControllerSnmp = import("./wirelessControllerSnmp").WirelessControllerSnmp;
export const WirelessControllerSnmp: typeof import("./wirelessControllerSnmp").WirelessControllerSnmp = null as any;
utilities.lazyLoad(exports, ["WirelessControllerSnmp"], () => require("./wirelessControllerSnmp"));

export { WirelessControllerSsidPolicyArgs, WirelessControllerSsidPolicyState } from "./wirelessControllerSsidPolicy";
export type WirelessControllerSsidPolicy = import("./wirelessControllerSsidPolicy").WirelessControllerSsidPolicy;
export const WirelessControllerSsidPolicy: typeof import("./wirelessControllerSsidPolicy").WirelessControllerSsidPolicy = null as any;
utilities.lazyLoad(exports, ["WirelessControllerSsidPolicy"], () => require("./wirelessControllerSsidPolicy"));

export { WirelessControllerSyslogProfileArgs, WirelessControllerSyslogProfileState } from "./wirelessControllerSyslogProfile";
export type WirelessControllerSyslogProfile = import("./wirelessControllerSyslogProfile").WirelessControllerSyslogProfile;
export const WirelessControllerSyslogProfile: typeof import("./wirelessControllerSyslogProfile").WirelessControllerSyslogProfile = null as any;
utilities.lazyLoad(exports, ["WirelessControllerSyslogProfile"], () => require("./wirelessControllerSyslogProfile"));

export { WirelessControllerTimersArgs, WirelessControllerTimersState } from "./wirelessControllerTimers";
export type WirelessControllerTimers = import("./wirelessControllerTimers").WirelessControllerTimers;
export const WirelessControllerTimers: typeof import("./wirelessControllerTimers").WirelessControllerTimers = null as any;
utilities.lazyLoad(exports, ["WirelessControllerTimers"], () => require("./wirelessControllerTimers"));

export { WirelessControllerUtmProfileArgs, WirelessControllerUtmProfileState } from "./wirelessControllerUtmProfile";
export type WirelessControllerUtmProfile = import("./wirelessControllerUtmProfile").WirelessControllerUtmProfile;
export const WirelessControllerUtmProfile: typeof import("./wirelessControllerUtmProfile").WirelessControllerUtmProfile = null as any;
utilities.lazyLoad(exports, ["WirelessControllerUtmProfile"], () => require("./wirelessControllerUtmProfile"));

export { WirelessControllerVapArgs, WirelessControllerVapState } from "./wirelessControllerVap";
export type WirelessControllerVap = import("./wirelessControllerVap").WirelessControllerVap;
export const WirelessControllerVap: typeof import("./wirelessControllerVap").WirelessControllerVap = null as any;
utilities.lazyLoad(exports, ["WirelessControllerVap"], () => require("./wirelessControllerVap"));

export { WirelessControllerVapGroupArgs, WirelessControllerVapGroupState } from "./wirelessControllerVapGroup";
export type WirelessControllerVapGroup = import("./wirelessControllerVapGroup").WirelessControllerVapGroup;
export const WirelessControllerVapGroup: typeof import("./wirelessControllerVapGroup").WirelessControllerVapGroup = null as any;
utilities.lazyLoad(exports, ["WirelessControllerVapGroup"], () => require("./wirelessControllerVapGroup"));

export { WirelessControllerWagProfileArgs, WirelessControllerWagProfileState } from "./wirelessControllerWagProfile";
export type WirelessControllerWagProfile = import("./wirelessControllerWagProfile").WirelessControllerWagProfile;
export const WirelessControllerWagProfile: typeof import("./wirelessControllerWagProfile").WirelessControllerWagProfile = null as any;
utilities.lazyLoad(exports, ["WirelessControllerWagProfile"], () => require("./wirelessControllerWagProfile"));

export { WirelessControllerWidsProfileArgs, WirelessControllerWidsProfileState } from "./wirelessControllerWidsProfile";
export type WirelessControllerWidsProfile = import("./wirelessControllerWidsProfile").WirelessControllerWidsProfile;
export const WirelessControllerWidsProfile: typeof import("./wirelessControllerWidsProfile").WirelessControllerWidsProfile = null as any;
utilities.lazyLoad(exports, ["WirelessControllerWidsProfile"], () => require("./wirelessControllerWidsProfile"));

export { WirelessControllerWtpArgs, WirelessControllerWtpState } from "./wirelessControllerWtp";
export type WirelessControllerWtp = import("./wirelessControllerWtp").WirelessControllerWtp;
export const WirelessControllerWtp: typeof import("./wirelessControllerWtp").WirelessControllerWtp = null as any;
utilities.lazyLoad(exports, ["WirelessControllerWtp"], () => require("./wirelessControllerWtp"));

export { WirelessControllerWtpGroupArgs, WirelessControllerWtpGroupState } from "./wirelessControllerWtpGroup";
export type WirelessControllerWtpGroup = import("./wirelessControllerWtpGroup").WirelessControllerWtpGroup;
export const WirelessControllerWtpGroup: typeof import("./wirelessControllerWtpGroup").WirelessControllerWtpGroup = null as any;
utilities.lazyLoad(exports, ["WirelessControllerWtpGroup"], () => require("./wirelessControllerWtpGroup"));

export { WirelessControllerWtpProfileArgs, WirelessControllerWtpProfileState } from "./wirelessControllerWtpProfile";
export type WirelessControllerWtpProfile = import("./wirelessControllerWtpProfile").WirelessControllerWtpProfile;
export const WirelessControllerWtpProfile: typeof import("./wirelessControllerWtpProfile").WirelessControllerWtpProfile = null as any;
utilities.lazyLoad(exports, ["WirelessControllerWtpProfile"], () => require("./wirelessControllerWtpProfile"));


// Export sub-modules:
import * as config from "./config";
import * as types from "./types";

export {
    config,
    types,
};

const _module = {
    version: utilities.getVersion(),
    construct: (name: string, type: string, urn: string): pulumi.Resource => {
        switch (type) {
            case "fortios:index/alertemailSetting:AlertemailSetting":
                return new AlertemailSetting(name, <any>undefined, { urn })
            case "fortios:index/antivirusHeuristic:AntivirusHeuristic":
                return new AntivirusHeuristic(name, <any>undefined, { urn })
            case "fortios:index/antivirusProfile:AntivirusProfile":
                return new AntivirusProfile(name, <any>undefined, { urn })
            case "fortios:index/antivirusQuarantine:AntivirusQuarantine":
                return new AntivirusQuarantine(name, <any>undefined, { urn })
            case "fortios:index/antivirusSettings:AntivirusSettings":
                return new AntivirusSettings(name, <any>undefined, { urn })
            case "fortios:index/applicationCustom:ApplicationCustom":
                return new ApplicationCustom(name, <any>undefined, { urn })
            case "fortios:index/applicationGroup:ApplicationGroup":
                return new ApplicationGroup(name, <any>undefined, { urn })
            case "fortios:index/applicationList:ApplicationList":
                return new ApplicationList(name, <any>undefined, { urn })
            case "fortios:index/applicationName:ApplicationName":
                return new ApplicationName(name, <any>undefined, { urn })
            case "fortios:index/applicationRuleSettings:ApplicationRuleSettings":
                return new ApplicationRuleSettings(name, <any>undefined, { urn })
            case "fortios:index/authenticationRule:AuthenticationRule":
                return new AuthenticationRule(name, <any>undefined, { urn })
            case "fortios:index/authenticationScheme:AuthenticationScheme":
                return new AuthenticationScheme(name, <any>undefined, { urn })
            case "fortios:index/authenticationSetting:AuthenticationSetting":
                return new AuthenticationSetting(name, <any>undefined, { urn })
            case "fortios:index/automationSetting:AutomationSetting":
                return new AutomationSetting(name, <any>undefined, { urn })
            case "fortios:index/certificateCa:CertificateCa":
                return new CertificateCa(name, <any>undefined, { urn })
            case "fortios:index/certificateCrl:CertificateCrl":
                return new CertificateCrl(name, <any>undefined, { urn })
            case "fortios:index/certificateLocal:CertificateLocal":
                return new CertificateLocal(name, <any>undefined, { urn })
            case "fortios:index/certificateRemote:CertificateRemote":
                return new CertificateRemote(name, <any>undefined, { urn })
            case "fortios:index/cifsDomainController:CifsDomainController":
                return new CifsDomainController(name, <any>undefined, { urn })
            case "fortios:index/cifsProfile:CifsProfile":
                return new CifsProfile(name, <any>undefined, { urn })
            case "fortios:index/credentialStoreDomainController:CredentialStoreDomainController":
                return new CredentialStoreDomainController(name, <any>undefined, { urn })
            case "fortios:index/dlpDataType:DlpDataType":
                return new DlpDataType(name, <any>undefined, { urn })
            case "fortios:index/dlpDictionary:DlpDictionary":
                return new DlpDictionary(name, <any>undefined, { urn })
            case "fortios:index/dlpFilepattern:DlpFilepattern":
                return new DlpFilepattern(name, <any>undefined, { urn })
            case "fortios:index/dlpFpDocSource:DlpFpDocSource":
                return new DlpFpDocSource(name, <any>undefined, { urn })
            case "fortios:index/dlpFpSensitivity:DlpFpSensitivity":
                return new DlpFpSensitivity(name, <any>undefined, { urn })
            case "fortios:index/dlpProfile:DlpProfile":
                return new DlpProfile(name, <any>undefined, { urn })
            case "fortios:index/dlpSensitivity:DlpSensitivity":
                return new DlpSensitivity(name, <any>undefined, { urn })
            case "fortios:index/dlpSensor:DlpSensor":
                return new DlpSensor(name, <any>undefined, { urn })
            case "fortios:index/dlpSettings:DlpSettings":
                return new DlpSettings(name, <any>undefined, { urn })
            case "fortios:index/dnsfilterDomainFilter:DnsfilterDomainFilter":
                return new DnsfilterDomainFilter(name, <any>undefined, { urn })
            case "fortios:index/dnsfilterProfile:DnsfilterProfile":
                return new DnsfilterProfile(name, <any>undefined, { urn })
            case "fortios:index/dpdkCpus:DpdkCpus":
                return new DpdkCpus(name, <any>undefined, { urn })
            case "fortios:index/dpdkGlobal:DpdkGlobal":
                return new DpdkGlobal(name, <any>undefined, { urn })
            case "fortios:index/emailfilterBlockAllowList:EmailfilterBlockAllowList":
                return new EmailfilterBlockAllowList(name, <any>undefined, { urn })
            case "fortios:index/emailfilterBwl:EmailfilterBwl":
                return new EmailfilterBwl(name, <any>undefined, { urn })
            case "fortios:index/emailfilterBword:EmailfilterBword":
                return new EmailfilterBword(name, <any>undefined, { urn })
            case "fortios:index/emailfilterDnsbl:EmailfilterDnsbl":
                return new EmailfilterDnsbl(name, <any>undefined, { urn })
            case "fortios:index/emailfilterFortishield:EmailfilterFortishield":
                return new EmailfilterFortishield(name, <any>undefined, { urn })
            case "fortios:index/emailfilterIptrust:EmailfilterIptrust":
                return new EmailfilterIptrust(name, <any>undefined, { urn })
            case "fortios:index/emailfilterMheader:EmailfilterMheader":
                return new EmailfilterMheader(name, <any>undefined, { urn })
            case "fortios:index/emailfilterOptions:EmailfilterOptions":
                return new EmailfilterOptions(name, <any>undefined, { urn })
            case "fortios:index/emailfilterProfile:EmailfilterProfile":
                return new EmailfilterProfile(name, <any>undefined, { urn })
            case "fortios:index/endpointControlClient:EndpointControlClient":
                return new EndpointControlClient(name, <any>undefined, { urn })
            case "fortios:index/endpointControlFctems:EndpointControlFctems":
                return new EndpointControlFctems(name, <any>undefined, { urn })
            case "fortios:index/endpointControlForticlientEms:EndpointControlForticlientEms":
                return new EndpointControlForticlientEms(name, <any>undefined, { urn })
            case "fortios:index/endpointControlForticlientRegistrationSync:EndpointControlForticlientRegistrationSync":
                return new EndpointControlForticlientRegistrationSync(name, <any>undefined, { urn })
            case "fortios:index/endpointControlProfile:EndpointControlProfile":
                return new EndpointControlProfile(name, <any>undefined, { urn })
            case "fortios:index/endpointControlRegisteredForticlient:EndpointControlRegisteredForticlient":
                return new EndpointControlRegisteredForticlient(name, <any>undefined, { urn })
            case "fortios:index/endpointControlSettings:EndpointControlSettings":
                return new EndpointControlSettings(name, <any>undefined, { urn })
            case "fortios:index/extenderControllerDataplan:ExtenderControllerDataplan":
                return new ExtenderControllerDataplan(name, <any>undefined, { urn })
            case "fortios:index/extenderControllerExtender1:ExtenderControllerExtender1":
                return new ExtenderControllerExtender1(name, <any>undefined, { urn })
            case "fortios:index/extenderControllerExtender:ExtenderControllerExtender":
                return new ExtenderControllerExtender(name, <any>undefined, { urn })
            case "fortios:index/extenderControllerExtenderProfile:ExtenderControllerExtenderProfile":
                return new ExtenderControllerExtenderProfile(name, <any>undefined, { urn })
            case "fortios:index/extensionControllerDataplan:ExtensionControllerDataplan":
                return new ExtensionControllerDataplan(name, <any>undefined, { urn })
            case "fortios:index/extensionControllerExtender:ExtensionControllerExtender":
                return new ExtensionControllerExtender(name, <any>undefined, { urn })
            case "fortios:index/extensionControllerExtenderProfile:ExtensionControllerExtenderProfile":
                return new ExtensionControllerExtenderProfile(name, <any>undefined, { urn })
            case "fortios:index/extensionControllerFortigate:ExtensionControllerFortigate":
                return new ExtensionControllerFortigate(name, <any>undefined, { urn })
            case "fortios:index/extensionControllerFortigateProfile:ExtensionControllerFortigateProfile":
                return new ExtensionControllerFortigateProfile(name, <any>undefined, { urn })
            case "fortios:index/fileFilterProfile:FileFilterProfile":
                return new FileFilterProfile(name, <any>undefined, { urn })
            case "fortios:index/firewallAccessProxy6:FirewallAccessProxy6":
                return new FirewallAccessProxy6(name, <any>undefined, { urn })
            case "fortios:index/firewallAccessProxy:FirewallAccessProxy":
                return new FirewallAccessProxy(name, <any>undefined, { urn })
            case "fortios:index/firewallAccessProxySshClientCert:FirewallAccessProxySshClientCert":
                return new FirewallAccessProxySshClientCert(name, <any>undefined, { urn })
            case "fortios:index/firewallAccessProxyVirtualHost:FirewallAccessProxyVirtualHost":
                return new FirewallAccessProxyVirtualHost(name, <any>undefined, { urn })
            case "fortios:index/firewallAddress6:FirewallAddress6":
                return new FirewallAddress6(name, <any>undefined, { urn })
            case "fortios:index/firewallAddress6Template:FirewallAddress6Template":
                return new FirewallAddress6Template(name, <any>undefined, { urn })
            case "fortios:index/firewallAddress:FirewallAddress":
                return new FirewallAddress(name, <any>undefined, { urn })
            case "fortios:index/firewallAddrgrp6:FirewallAddrgrp6":
                return new FirewallAddrgrp6(name, <any>undefined, { urn })
            case "fortios:index/firewallAddrgrp:FirewallAddrgrp":
                return new FirewallAddrgrp(name, <any>undefined, { urn })
            case "fortios:index/firewallAuthPortal:FirewallAuthPortal":
                return new FirewallAuthPortal(name, <any>undefined, { urn })
            case "fortios:index/firewallCentralSnatMap:FirewallCentralSnatMap":
                return new FirewallCentralSnatMap(name, <any>undefined, { urn })
            case "fortios:index/firewallCentralsnatmapMove:FirewallCentralsnatmapMove":
                return new FirewallCentralsnatmapMove(name, <any>undefined, { urn })
            case "fortios:index/firewallCentralsnatmapSort:FirewallCentralsnatmapSort":
                return new FirewallCentralsnatmapSort(name, <any>undefined, { urn })
            case "fortios:index/firewallCity:FirewallCity":
                return new FirewallCity(name, <any>undefined, { urn })
            case "fortios:index/firewallConsolidatedPolicy:FirewallConsolidatedPolicy":
                return new FirewallConsolidatedPolicy(name, <any>undefined, { urn })
            case "fortios:index/firewallCountry:FirewallCountry":
                return new FirewallCountry(name, <any>undefined, { urn })
            case "fortios:index/firewallDecryptedTrafficMirror:FirewallDecryptedTrafficMirror":
                return new FirewallDecryptedTrafficMirror(name, <any>undefined, { urn })
            case "fortios:index/firewallDnstranslation:FirewallDnstranslation":
                return new FirewallDnstranslation(name, <any>undefined, { urn })
            case "fortios:index/firewallDosPolicy6:FirewallDosPolicy6":
                return new FirewallDosPolicy6(name, <any>undefined, { urn })
            case "fortios:index/firewallDosPolicy:FirewallDosPolicy":
                return new FirewallDosPolicy(name, <any>undefined, { urn })
            case "fortios:index/firewallGlobal:FirewallGlobal":
                return new FirewallGlobal(name, <any>undefined, { urn })
            case "fortios:index/firewallIdentityBasedRoute:FirewallIdentityBasedRoute":
                return new FirewallIdentityBasedRoute(name, <any>undefined, { urn })
            case "fortios:index/firewallInterfacePolicy6:FirewallInterfacePolicy6":
                return new FirewallInterfacePolicy6(name, <any>undefined, { urn })
            case "fortios:index/firewallInterfacePolicy:FirewallInterfacePolicy":
                return new FirewallInterfacePolicy(name, <any>undefined, { urn })
            case "fortios:index/firewallInternetService:FirewallInternetService":
                return new FirewallInternetService(name, <any>undefined, { urn })
            case "fortios:index/firewallInternetServiceAddition:FirewallInternetServiceAddition":
                return new FirewallInternetServiceAddition(name, <any>undefined, { urn })
            case "fortios:index/firewallInternetServiceAppend:FirewallInternetServiceAppend":
                return new FirewallInternetServiceAppend(name, <any>undefined, { urn })
            case "fortios:index/firewallInternetServiceBotnet:FirewallInternetServiceBotnet":
                return new FirewallInternetServiceBotnet(name, <any>undefined, { urn })
            case "fortios:index/firewallInternetServiceCustom:FirewallInternetServiceCustom":
                return new FirewallInternetServiceCustom(name, <any>undefined, { urn })
            case "fortios:index/firewallInternetServiceCustomGroup:FirewallInternetServiceCustomGroup":
                return new FirewallInternetServiceCustomGroup(name, <any>undefined, { urn })
            case "fortios:index/firewallInternetServiceDefinition:FirewallInternetServiceDefinition":
                return new FirewallInternetServiceDefinition(name, <any>undefined, { urn })
            case "fortios:index/firewallInternetServiceExtension:FirewallInternetServiceExtension":
                return new FirewallInternetServiceExtension(name, <any>undefined, { urn })
            case "fortios:index/firewallInternetServiceGroup:FirewallInternetServiceGroup":
                return new FirewallInternetServiceGroup(name, <any>undefined, { urn })
            case "fortios:index/firewallInternetServiceIpblReason:FirewallInternetServiceIpblReason":
                return new FirewallInternetServiceIpblReason(name, <any>undefined, { urn })
            case "fortios:index/firewallInternetServiceIpblVendor:FirewallInternetServiceIpblVendor":
                return new FirewallInternetServiceIpblVendor(name, <any>undefined, { urn })
            case "fortios:index/firewallInternetServiceList:FirewallInternetServiceList":
                return new FirewallInternetServiceList(name, <any>undefined, { urn })
            case "fortios:index/firewallInternetServiceName:FirewallInternetServiceName":
                return new FirewallInternetServiceName(name, <any>undefined, { urn })
            case "fortios:index/firewallInternetServiceOwner:FirewallInternetServiceOwner":
                return new FirewallInternetServiceOwner(name, <any>undefined, { urn })
            case "fortios:index/firewallInternetServiceReputation:FirewallInternetServiceReputation":
                return new FirewallInternetServiceReputation(name, <any>undefined, { urn })
            case "fortios:index/firewallIpTranslation:FirewallIpTranslation":
                return new FirewallIpTranslation(name, <any>undefined, { urn })
            case "fortios:index/firewallIpmacbindingSetting:FirewallIpmacbindingSetting":
                return new FirewallIpmacbindingSetting(name, <any>undefined, { urn })
            case "fortios:index/firewallIpmacbindingTable:FirewallIpmacbindingTable":
                return new FirewallIpmacbindingTable(name, <any>undefined, { urn })
            case "fortios:index/firewallIppool6:FirewallIppool6":
                return new FirewallIppool6(name, <any>undefined, { urn })
            case "fortios:index/firewallIppool:FirewallIppool":
                return new FirewallIppool(name, <any>undefined, { urn })
            case "fortios:index/firewallIpv6EhFilter:FirewallIpv6EhFilter":
                return new FirewallIpv6EhFilter(name, <any>undefined, { urn })
            case "fortios:index/firewallLdbMonitor:FirewallLdbMonitor":
                return new FirewallLdbMonitor(name, <any>undefined, { urn })
            case "fortios:index/firewallLocalInPolicy6:FirewallLocalInPolicy6":
                return new FirewallLocalInPolicy6(name, <any>undefined, { urn })
            case "fortios:index/firewallLocalInPolicy:FirewallLocalInPolicy":
                return new FirewallLocalInPolicy(name, <any>undefined, { urn })
            case "fortios:index/firewallMulticastAddress6:FirewallMulticastAddress6":
                return new FirewallMulticastAddress6(name, <any>undefined, { urn })
            case "fortios:index/firewallMulticastAddress:FirewallMulticastAddress":
                return new FirewallMulticastAddress(name, <any>undefined, { urn })
            case "fortios:index/firewallMulticastPolicy6:FirewallMulticastPolicy6":
                return new FirewallMulticastPolicy6(name, <any>undefined, { urn })
            case "fortios:index/firewallMulticastPolicy:FirewallMulticastPolicy":
                return new FirewallMulticastPolicy(name, <any>undefined, { urn })
            case "fortios:index/firewallNetworkServiceDynamic:FirewallNetworkServiceDynamic":
                return new FirewallNetworkServiceDynamic(name, <any>undefined, { urn })
            case "fortios:index/firewallObjectAddress:FirewallObjectAddress":
                return new FirewallObjectAddress(name, <any>undefined, { urn })
            case "fortios:index/firewallObjectAddressGroup:FirewallObjectAddressGroup":
                return new FirewallObjectAddressGroup(name, <any>undefined, { urn })
            case "fortios:index/firewallObjectIPPool:FirewallObjectIPPool":
                return new FirewallObjectIPPool(name, <any>undefined, { urn })
            case "fortios:index/firewallObjectService:FirewallObjectService":
                return new FirewallObjectService(name, <any>undefined, { urn })
            case "fortios:index/firewallObjectServiceCategory:FirewallObjectServiceCategory":
                return new FirewallObjectServiceCategory(name, <any>undefined, { urn })
            case "fortios:index/firewallObjectServiceGroup:FirewallObjectServiceGroup":
                return new FirewallObjectServiceGroup(name, <any>undefined, { urn })
            case "fortios:index/firewallObjectVip:FirewallObjectVip":
                return new FirewallObjectVip(name, <any>undefined, { urn })
            case "fortios:index/firewallObjectVipGroup:FirewallObjectVipGroup":
                return new FirewallObjectVipGroup(name, <any>undefined, { urn })
            case "fortios:index/firewallPolicy46:FirewallPolicy46":
                return new FirewallPolicy46(name, <any>undefined, { urn })
            case "fortios:index/firewallPolicy64:FirewallPolicy64":
                return new FirewallPolicy64(name, <any>undefined, { urn })
            case "fortios:index/firewallPolicy6:FirewallPolicy6":
                return new FirewallPolicy6(name, <any>undefined, { urn })
            case "fortios:index/firewallPolicy:FirewallPolicy":
                return new FirewallPolicy(name, <any>undefined, { urn })
            case "fortios:index/firewallProfileGroup:FirewallProfileGroup":
                return new FirewallProfileGroup(name, <any>undefined, { urn })
            case "fortios:index/firewallProfileProtocolOptions:FirewallProfileProtocolOptions":
                return new FirewallProfileProtocolOptions(name, <any>undefined, { urn })
            case "fortios:index/firewallProxyAddress:FirewallProxyAddress":
                return new FirewallProxyAddress(name, <any>undefined, { urn })
            case "fortios:index/firewallProxyAddrgrp:FirewallProxyAddrgrp":
                return new FirewallProxyAddrgrp(name, <any>undefined, { urn })
            case "fortios:index/firewallProxyPolicy:FirewallProxyPolicy":
                return new FirewallProxyPolicy(name, <any>undefined, { urn })
            case "fortios:index/firewallProxypolicyMove:FirewallProxypolicyMove":
                return new FirewallProxypolicyMove(name, <any>undefined, { urn })
            case "fortios:index/firewallProxypolicySort:FirewallProxypolicySort":
                return new FirewallProxypolicySort(name, <any>undefined, { urn })
            case "fortios:index/firewallRegion:FirewallRegion":
                return new FirewallRegion(name, <any>undefined, { urn })
            case "fortios:index/firewallScheduleGroup:FirewallScheduleGroup":
                return new FirewallScheduleGroup(name, <any>undefined, { urn })
            case "fortios:index/firewallScheduleOnetime:FirewallScheduleOnetime":
                return new FirewallScheduleOnetime(name, <any>undefined, { urn })
            case "fortios:index/firewallScheduleRecurring:FirewallScheduleRecurring":
                return new FirewallScheduleRecurring(name, <any>undefined, { urn })
            case "fortios:index/firewallSecurityPolicy1:FirewallSecurityPolicy1":
                return new FirewallSecurityPolicy1(name, <any>undefined, { urn })
            case "fortios:index/firewallSecurityPolicy:FirewallSecurityPolicy":
                return new FirewallSecurityPolicy(name, <any>undefined, { urn })
            case "fortios:index/firewallSecurityPolicySeq:FirewallSecurityPolicySeq":
                return new FirewallSecurityPolicySeq(name, <any>undefined, { urn })
            case "fortios:index/firewallSecurityPolicySort:FirewallSecurityPolicySort":
                return new FirewallSecurityPolicySort(name, <any>undefined, { urn })
            case "fortios:index/firewallServiceCategory:FirewallServiceCategory":
                return new FirewallServiceCategory(name, <any>undefined, { urn })
            case "fortios:index/firewallServiceCustom:FirewallServiceCustom":
                return new FirewallServiceCustom(name, <any>undefined, { urn })
            case "fortios:index/firewallServiceGroup:FirewallServiceGroup":
                return new FirewallServiceGroup(name, <any>undefined, { urn })
            case "fortios:index/firewallShaperPerIpShaper:FirewallShaperPerIpShaper":
                return new FirewallShaperPerIpShaper(name, <any>undefined, { urn })
            case "fortios:index/firewallShaperTrafficShaper:FirewallShaperTrafficShaper":
                return new FirewallShaperTrafficShaper(name, <any>undefined, { urn })
            case "fortios:index/firewallShapingPolicy:FirewallShapingPolicy":
                return new FirewallShapingPolicy(name, <any>undefined, { urn })
            case "fortios:index/firewallShapingProfile:FirewallShapingProfile":
                return new FirewallShapingProfile(name, <any>undefined, { urn })
            case "fortios:index/firewallSniffer:FirewallSniffer":
                return new FirewallSniffer(name, <any>undefined, { urn })
            case "fortios:index/firewallSshHostKey:FirewallSshHostKey":
                return new FirewallSshHostKey(name, <any>undefined, { urn })
            case "fortios:index/firewallSshLocalCa:FirewallSshLocalCa":
                return new FirewallSshLocalCa(name, <any>undefined, { urn })
            case "fortios:index/firewallSshLocalKey:FirewallSshLocalKey":
                return new FirewallSshLocalKey(name, <any>undefined, { urn })
            case "fortios:index/firewallSshSetting:FirewallSshSetting":
                return new FirewallSshSetting(name, <any>undefined, { urn })
            case "fortios:index/firewallSslServer:FirewallSslServer":
                return new FirewallSslServer(name, <any>undefined, { urn })
            case "fortios:index/firewallSslSetting:FirewallSslSetting":
                return new FirewallSslSetting(name, <any>undefined, { urn })
            case "fortios:index/firewallSslSshProfile:FirewallSslSshProfile":
                return new FirewallSslSshProfile(name, <any>undefined, { urn })
            case "fortios:index/firewallTrafficClass:FirewallTrafficClass":
                return new FirewallTrafficClass(name, <any>undefined, { urn })
            case "fortios:index/firewallTtlPolicy:FirewallTtlPolicy":
                return new FirewallTtlPolicy(name, <any>undefined, { urn })
            case "fortios:index/firewallVendorMac:FirewallVendorMac":
                return new FirewallVendorMac(name, <any>undefined, { urn })
            case "fortios:index/firewallVip46:FirewallVip46":
                return new FirewallVip46(name, <any>undefined, { urn })
            case "fortios:index/firewallVip64:FirewallVip64":
                return new FirewallVip64(name, <any>undefined, { urn })
            case "fortios:index/firewallVip6:FirewallVip6":
                return new FirewallVip6(name, <any>undefined, { urn })
            case "fortios:index/firewallVip:FirewallVip":
                return new FirewallVip(name, <any>undefined, { urn })
            case "fortios:index/firewallVipgrp46:FirewallVipgrp46":
                return new FirewallVipgrp46(name, <any>undefined, { urn })
            case "fortios:index/firewallVipgrp64:FirewallVipgrp64":
                return new FirewallVipgrp64(name, <any>undefined, { urn })
            case "fortios:index/firewallVipgrp6:FirewallVipgrp6":
                return new FirewallVipgrp6(name, <any>undefined, { urn })
            case "fortios:index/firewallVipgrp:FirewallVipgrp":
                return new FirewallVipgrp(name, <any>undefined, { urn })
            case "fortios:index/firewallWildcardFqdnCustom:FirewallWildcardFqdnCustom":
                return new FirewallWildcardFqdnCustom(name, <any>undefined, { urn })
            case "fortios:index/firewallWildcardFqdnGroup:FirewallWildcardFqdnGroup":
                return new FirewallWildcardFqdnGroup(name, <any>undefined, { urn })
            case "fortios:index/fortimanagerDVMDevice:FortimanagerDVMDevice":
                return new FortimanagerDVMDevice(name, <any>undefined, { urn })
            case "fortios:index/fortimanagerDVMInstallDev:FortimanagerDVMInstallDev":
                return new FortimanagerDVMInstallDev(name, <any>undefined, { urn })
            case "fortios:index/fortimanagerDVMInstallPolicyPackage:FortimanagerDVMInstallPolicyPackage":
                return new FortimanagerDVMInstallPolicyPackage(name, <any>undefined, { urn })
            case "fortios:index/fortimanagerDVMScript:FortimanagerDVMScript":
                return new FortimanagerDVMScript(name, <any>undefined, { urn })
            case "fortios:index/fortimanagerDVMScriptExecute:FortimanagerDVMScriptExecute":
                return new FortimanagerDVMScriptExecute(name, <any>undefined, { urn })
            case "fortios:index/fortimanagerFirewallObjectAddress:FortimanagerFirewallObjectAddress":
                return new FortimanagerFirewallObjectAddress(name, <any>undefined, { urn })
            case "fortios:index/fortimanagerFirewallObjectIppool:FortimanagerFirewallObjectIppool":
                return new FortimanagerFirewallObjectIppool(name, <any>undefined, { urn })
            case "fortios:index/fortimanagerFirewallObjectService:FortimanagerFirewallObjectService":
                return new FortimanagerFirewallObjectService(name, <any>undefined, { urn })
            case "fortios:index/fortimanagerFirewallObjectVip:FortimanagerFirewallObjectVip":
                return new FortimanagerFirewallObjectVip(name, <any>undefined, { urn })
            case "fortios:index/fortimanagerFirewallSecurityPolicy:FortimanagerFirewallSecurityPolicy":
                return new FortimanagerFirewallSecurityPolicy(name, <any>undefined, { urn })
            case "fortios:index/fortimanagerFirewallSecurityPolicyPackage:FortimanagerFirewallSecurityPolicyPackage":
                return new FortimanagerFirewallSecurityPolicyPackage(name, <any>undefined, { urn })
            case "fortios:index/fortimanagerJSONRPCRequest:FortimanagerJSONRPCRequest":
                return new FortimanagerJSONRPCRequest(name, <any>undefined, { urn })
            case "fortios:index/fortimanagerObjectAdomRevision:FortimanagerObjectAdomRevision":
                return new FortimanagerObjectAdomRevision(name, <any>undefined, { urn })
            case "fortios:index/fortimanagerSystemAdmin:FortimanagerSystemAdmin":
                return new FortimanagerSystemAdmin(name, <any>undefined, { urn })
            case "fortios:index/fortimanagerSystemAdminProfiles:FortimanagerSystemAdminProfiles":
                return new FortimanagerSystemAdminProfiles(name, <any>undefined, { urn })
            case "fortios:index/fortimanagerSystemAdminUser:FortimanagerSystemAdminUser":
                return new FortimanagerSystemAdminUser(name, <any>undefined, { urn })
            case "fortios:index/fortimanagerSystemAdom:FortimanagerSystemAdom":
                return new FortimanagerSystemAdom(name, <any>undefined, { urn })
            case "fortios:index/fortimanagerSystemDNS:FortimanagerSystemDNS":
                return new FortimanagerSystemDNS(name, <any>undefined, { urn })
            case "fortios:index/fortimanagerSystemGlobal:FortimanagerSystemGlobal":
                return new FortimanagerSystemGlobal(name, <any>undefined, { urn })
            case "fortios:index/fortimanagerSystemLicenseFortiCare:FortimanagerSystemLicenseFortiCare":
                return new FortimanagerSystemLicenseFortiCare(name, <any>undefined, { urn })
            case "fortios:index/fortimanagerSystemLicenseVM:FortimanagerSystemLicenseVM":
                return new FortimanagerSystemLicenseVM(name, <any>undefined, { urn })
            case "fortios:index/fortimanagerSystemNTP:FortimanagerSystemNTP":
                return new FortimanagerSystemNTP(name, <any>undefined, { urn })
            case "fortios:index/fortimanagerSystemNetworkInterface:FortimanagerSystemNetworkInterface":
                return new FortimanagerSystemNetworkInterface(name, <any>undefined, { urn })
            case "fortios:index/fortimanagerSystemNetworkRoute:FortimanagerSystemNetworkRoute":
                return new FortimanagerSystemNetworkRoute(name, <any>undefined, { urn })
            case "fortios:index/fortimanagerSystemSyslogServer:FortimanagerSystemSyslogServer":
                return new FortimanagerSystemSyslogServer(name, <any>undefined, { urn })
            case "fortios:index/ftpProxyExplicit:FtpProxyExplicit":
                return new FtpProxyExplicit(name, <any>undefined, { urn })
            case "fortios:index/icapProfile:IcapProfile":
                return new IcapProfile(name, <any>undefined, { urn })
            case "fortios:index/icapServer:IcapServer":
                return new IcapServer(name, <any>undefined, { urn })
            case "fortios:index/icapServerGroup:IcapServerGroup":
                return new IcapServerGroup(name, <any>undefined, { urn })
            case "fortios:index/ipsCustom:IpsCustom":
                return new IpsCustom(name, <any>undefined, { urn })
            case "fortios:index/ipsDecoder:IpsDecoder":
                return new IpsDecoder(name, <any>undefined, { urn })
            case "fortios:index/ipsGlobal:IpsGlobal":
                return new IpsGlobal(name, <any>undefined, { urn })
            case "fortios:index/ipsRule:IpsRule":
                return new IpsRule(name, <any>undefined, { urn })
            case "fortios:index/ipsRuleSettings:IpsRuleSettings":
                return new IpsRuleSettings(name, <any>undefined, { urn })
            case "fortios:index/ipsSensor:IpsSensor":
                return new IpsSensor(name, <any>undefined, { urn })
            case "fortios:index/ipsSettings:IpsSettings":
                return new IpsSettings(name, <any>undefined, { urn })
            case "fortios:index/ipsViewMap:IpsViewMap":
                return new IpsViewMap(name, <any>undefined, { urn })
            case "fortios:index/jSONGenericAPI:JSONGenericAPI":
                return new JSONGenericAPI(name, <any>undefined, { urn })
            case "fortios:index/logCustomField:LogCustomField":
                return new LogCustomField(name, <any>undefined, { urn })
            case "fortios:index/logDiskFilter:LogDiskFilter":
                return new LogDiskFilter(name, <any>undefined, { urn })
            case "fortios:index/logDiskSetting:LogDiskSetting":
                return new LogDiskSetting(name, <any>undefined, { urn })
            case "fortios:index/logEventfilter:LogEventfilter":
                return new LogEventfilter(name, <any>undefined, { urn })
            case "fortios:index/logFortiAnalyzerSettingLegacy:LogFortiAnalyzerSettingLegacy":
                return new LogFortiAnalyzerSettingLegacy(name, <any>undefined, { urn })
            case "fortios:index/logFortianalyzer2Filter:LogFortianalyzer2Filter":
                return new LogFortianalyzer2Filter(name, <any>undefined, { urn })
            case "fortios:index/logFortianalyzer2OverrideFilter:LogFortianalyzer2OverrideFilter":
                return new LogFortianalyzer2OverrideFilter(name, <any>undefined, { urn })
            case "fortios:index/logFortianalyzer2OverrideSetting:LogFortianalyzer2OverrideSetting":
                return new LogFortianalyzer2OverrideSetting(name, <any>undefined, { urn })
            case "fortios:index/logFortianalyzer2Setting:LogFortianalyzer2Setting":
                return new LogFortianalyzer2Setting(name, <any>undefined, { urn })
            case "fortios:index/logFortianalyzer3Filter:LogFortianalyzer3Filter":
                return new LogFortianalyzer3Filter(name, <any>undefined, { urn })
            case "fortios:index/logFortianalyzer3OverrideFilter:LogFortianalyzer3OverrideFilter":
                return new LogFortianalyzer3OverrideFilter(name, <any>undefined, { urn })
            case "fortios:index/logFortianalyzer3OverrideSetting:LogFortianalyzer3OverrideSetting":
                return new LogFortianalyzer3OverrideSetting(name, <any>undefined, { urn })
            case "fortios:index/logFortianalyzer3Setting:LogFortianalyzer3Setting":
                return new LogFortianalyzer3Setting(name, <any>undefined, { urn })
            case "fortios:index/logFortianalyzerCloudFilter:LogFortianalyzerCloudFilter":
                return new LogFortianalyzerCloudFilter(name, <any>undefined, { urn })
            case "fortios:index/logFortianalyzerCloudOverrideFilter:LogFortianalyzerCloudOverrideFilter":
                return new LogFortianalyzerCloudOverrideFilter(name, <any>undefined, { urn })
            case "fortios:index/logFortianalyzerCloudOverrideSetting:LogFortianalyzerCloudOverrideSetting":
                return new LogFortianalyzerCloudOverrideSetting(name, <any>undefined, { urn })
            case "fortios:index/logFortianalyzerCloudSetting:LogFortianalyzerCloudSetting":
                return new LogFortianalyzerCloudSetting(name, <any>undefined, { urn })
            case "fortios:index/logFortianalyzerFilter:LogFortianalyzerFilter":
                return new LogFortianalyzerFilter(name, <any>undefined, { urn })
            case "fortios:index/logFortianalyzerOverrideFilter:LogFortianalyzerOverrideFilter":
                return new LogFortianalyzerOverrideFilter(name, <any>undefined, { urn })
            case "fortios:index/logFortianalyzerOverrideSetting:LogFortianalyzerOverrideSetting":
                return new LogFortianalyzerOverrideSetting(name, <any>undefined, { urn })
            case "fortios:index/logFortianalyzerSetting:LogFortianalyzerSetting":
                return new LogFortianalyzerSetting(name, <any>undefined, { urn })
            case "fortios:index/logFortiguardFilter:LogFortiguardFilter":
                return new LogFortiguardFilter(name, <any>undefined, { urn })
            case "fortios:index/logFortiguardOverrideFilter:LogFortiguardOverrideFilter":
                return new LogFortiguardOverrideFilter(name, <any>undefined, { urn })
            case "fortios:index/logFortiguardOverrideSetting:LogFortiguardOverrideSetting":
                return new LogFortiguardOverrideSetting(name, <any>undefined, { urn })
            case "fortios:index/logFortiguardSetting:LogFortiguardSetting":
                return new LogFortiguardSetting(name, <any>undefined, { urn })
            case "fortios:index/logGuiDisplay:LogGuiDisplay":
                return new LogGuiDisplay(name, <any>undefined, { urn })
            case "fortios:index/logMemoryFilter:LogMemoryFilter":
                return new LogMemoryFilter(name, <any>undefined, { urn })
            case "fortios:index/logMemoryGlobalSetting:LogMemoryGlobalSetting":
                return new LogMemoryGlobalSetting(name, <any>undefined, { urn })
            case "fortios:index/logMemorySetting:LogMemorySetting":
                return new LogMemorySetting(name, <any>undefined, { urn })
            case "fortios:index/logNullDeviceFilter:LogNullDeviceFilter":
                return new LogNullDeviceFilter(name, <any>undefined, { urn })
            case "fortios:index/logNullDeviceSetting:LogNullDeviceSetting":
                return new LogNullDeviceSetting(name, <any>undefined, { urn })
            case "fortios:index/logSetting:LogSetting":
                return new LogSetting(name, <any>undefined, { urn })
            case "fortios:index/logSyslogSetting:LogSyslogSetting":
                return new LogSyslogSetting(name, <any>undefined, { urn })
            case "fortios:index/logSyslogd2Filter:LogSyslogd2Filter":
                return new LogSyslogd2Filter(name, <any>undefined, { urn })
            case "fortios:index/logSyslogd2OverrideFilter:LogSyslogd2OverrideFilter":
                return new LogSyslogd2OverrideFilter(name, <any>undefined, { urn })
            case "fortios:index/logSyslogd2OverrideSetting:LogSyslogd2OverrideSetting":
                return new LogSyslogd2OverrideSetting(name, <any>undefined, { urn })
            case "fortios:index/logSyslogd2Setting:LogSyslogd2Setting":
                return new LogSyslogd2Setting(name, <any>undefined, { urn })
            case "fortios:index/logSyslogd3Filter:LogSyslogd3Filter":
                return new LogSyslogd3Filter(name, <any>undefined, { urn })
            case "fortios:index/logSyslogd3OverrideFilter:LogSyslogd3OverrideFilter":
                return new LogSyslogd3OverrideFilter(name, <any>undefined, { urn })
            case "fortios:index/logSyslogd3OverrideSetting:LogSyslogd3OverrideSetting":
                return new LogSyslogd3OverrideSetting(name, <any>undefined, { urn })
            case "fortios:index/logSyslogd3Setting:LogSyslogd3Setting":
                return new LogSyslogd3Setting(name, <any>undefined, { urn })
            case "fortios:index/logSyslogd4Filter:LogSyslogd4Filter":
                return new LogSyslogd4Filter(name, <any>undefined, { urn })
            case "fortios:index/logSyslogd4OverrideFilter:LogSyslogd4OverrideFilter":
                return new LogSyslogd4OverrideFilter(name, <any>undefined, { urn })
            case "fortios:index/logSyslogd4OverrideSetting:LogSyslogd4OverrideSetting":
                return new LogSyslogd4OverrideSetting(name, <any>undefined, { urn })
            case "fortios:index/logSyslogd4Setting:LogSyslogd4Setting":
                return new LogSyslogd4Setting(name, <any>undefined, { urn })
            case "fortios:index/logSyslogdFilter:LogSyslogdFilter":
                return new LogSyslogdFilter(name, <any>undefined, { urn })
            case "fortios:index/logSyslogdOverrideFilter:LogSyslogdOverrideFilter":
                return new LogSyslogdOverrideFilter(name, <any>undefined, { urn })
            case "fortios:index/logSyslogdOverrideSetting:LogSyslogdOverrideSetting":
                return new LogSyslogdOverrideSetting(name, <any>undefined, { urn })
            case "fortios:index/logSyslogdSetting:LogSyslogdSetting":
                return new LogSyslogdSetting(name, <any>undefined, { urn })
            case "fortios:index/logTacacsAccounting2Filter:LogTacacsAccounting2Filter":
                return new LogTacacsAccounting2Filter(name, <any>undefined, { urn })
            case "fortios:index/logTacacsAccounting2Setting:LogTacacsAccounting2Setting":
                return new LogTacacsAccounting2Setting(name, <any>undefined, { urn })
            case "fortios:index/logTacacsAccounting3Filter:LogTacacsAccounting3Filter":
                return new LogTacacsAccounting3Filter(name, <any>undefined, { urn })
            case "fortios:index/logTacacsAccounting3Setting:LogTacacsAccounting3Setting":
                return new LogTacacsAccounting3Setting(name, <any>undefined, { urn })
            case "fortios:index/logTacacsAccountingFilter:LogTacacsAccountingFilter":
                return new LogTacacsAccountingFilter(name, <any>undefined, { urn })
            case "fortios:index/logTacacsAccountingSetting:LogTacacsAccountingSetting":
                return new LogTacacsAccountingSetting(name, <any>undefined, { urn })
            case "fortios:index/logThreatWeight:LogThreatWeight":
                return new LogThreatWeight(name, <any>undefined, { urn })
            case "fortios:index/logWebtrendsFilter:LogWebtrendsFilter":
                return new LogWebtrendsFilter(name, <any>undefined, { urn })
            case "fortios:index/logWebtrendsSetting:LogWebtrendsSetting":
                return new LogWebtrendsSetting(name, <any>undefined, { urn })
            case "fortios:index/networkingInterfacePort:NetworkingInterfacePort":
                return new NetworkingInterfacePort(name, <any>undefined, { urn })
            case "fortios:index/networkingRouteStatic:NetworkingRouteStatic":
                return new NetworkingRouteStatic(name, <any>undefined, { urn })
            case "fortios:index/nsxtServiceChain:NsxtServiceChain":
                return new NsxtServiceChain(name, <any>undefined, { urn })
            case "fortios:index/nsxtSetting:NsxtSetting":
                return new NsxtSetting(name, <any>undefined, { urn })
            case "fortios:index/reportChart:ReportChart":
                return new ReportChart(name, <any>undefined, { urn })
            case "fortios:index/reportDataset:ReportDataset":
                return new ReportDataset(name, <any>undefined, { urn })
            case "fortios:index/reportLayout:ReportLayout":
                return new ReportLayout(name, <any>undefined, { urn })
            case "fortios:index/reportSetting:ReportSetting":
                return new ReportSetting(name, <any>undefined, { urn })
            case "fortios:index/reportStyle:ReportStyle":
                return new ReportStyle(name, <any>undefined, { urn })
            case "fortios:index/reportTheme:ReportTheme":
                return new ReportTheme(name, <any>undefined, { urn })
            case "fortios:index/routerAccessList6:RouterAccessList6":
                return new RouterAccessList6(name, <any>undefined, { urn })
            case "fortios:index/routerAccessList:RouterAccessList":
                return new RouterAccessList(name, <any>undefined, { urn })
            case "fortios:index/routerAspathList:RouterAspathList":
                return new RouterAspathList(name, <any>undefined, { urn })
            case "fortios:index/routerAuthPath:RouterAuthPath":
                return new RouterAuthPath(name, <any>undefined, { urn })
            case "fortios:index/routerBfd6:RouterBfd6":
                return new RouterBfd6(name, <any>undefined, { urn })
            case "fortios:index/routerBfd:RouterBfd":
                return new RouterBfd(name, <any>undefined, { urn })
            case "fortios:index/routerBgp:RouterBgp":
                return new RouterBgp(name, <any>undefined, { urn })
            case "fortios:index/routerCommunityList:RouterCommunityList":
                return new RouterCommunityList(name, <any>undefined, { urn })
            case "fortios:index/routerIsis:RouterIsis":
                return new RouterIsis(name, <any>undefined, { urn })
            case "fortios:index/routerKeyChain:RouterKeyChain":
                return new RouterKeyChain(name, <any>undefined, { urn })
            case "fortios:index/routerMulticast6:RouterMulticast6":
                return new RouterMulticast6(name, <any>undefined, { urn })
            case "fortios:index/routerMulticast:RouterMulticast":
                return new RouterMulticast(name, <any>undefined, { urn })
            case "fortios:index/routerMulticastFlow:RouterMulticastFlow":
                return new RouterMulticastFlow(name, <any>undefined, { urn })
            case "fortios:index/routerOspf6:RouterOspf6":
                return new RouterOspf6(name, <any>undefined, { urn })
            case "fortios:index/routerOspf:RouterOspf":
                return new RouterOspf(name, <any>undefined, { urn })
            case "fortios:index/routerPolicy6:RouterPolicy6":
                return new RouterPolicy6(name, <any>undefined, { urn })
            case "fortios:index/routerPolicy:RouterPolicy":
                return new RouterPolicy(name, <any>undefined, { urn })
            case "fortios:index/routerPrefixList6:RouterPrefixList6":
                return new RouterPrefixList6(name, <any>undefined, { urn })
            case "fortios:index/routerPrefixList:RouterPrefixList":
                return new RouterPrefixList(name, <any>undefined, { urn })
            case "fortios:index/routerRip:RouterRip":
                return new RouterRip(name, <any>undefined, { urn })
            case "fortios:index/routerRipng:RouterRipng":
                return new RouterRipng(name, <any>undefined, { urn })
            case "fortios:index/routerRouteMap:RouterRouteMap":
                return new RouterRouteMap(name, <any>undefined, { urn })
            case "fortios:index/routerSetting:RouterSetting":
                return new RouterSetting(name, <any>undefined, { urn })
            case "fortios:index/routerStatic6:RouterStatic6":
                return new RouterStatic6(name, <any>undefined, { urn })
            case "fortios:index/routerStatic:RouterStatic":
                return new RouterStatic(name, <any>undefined, { urn })
            case "fortios:index/routerbgpNeighbor:RouterbgpNeighbor":
                return new RouterbgpNeighbor(name, <any>undefined, { urn })
            case "fortios:index/routerbgpNetwork6:RouterbgpNetwork6":
                return new RouterbgpNetwork6(name, <any>undefined, { urn })
            case "fortios:index/routerbgpNetwork:RouterbgpNetwork":
                return new RouterbgpNetwork(name, <any>undefined, { urn })
            case "fortios:index/routerospf6Ospf6Interface:Routerospf6Ospf6Interface":
                return new Routerospf6Ospf6Interface(name, <any>undefined, { urn })
            case "fortios:index/routerospfNeighbor:RouterospfNeighbor":
                return new RouterospfNeighbor(name, <any>undefined, { urn })
            case "fortios:index/routerospfNetwork:RouterospfNetwork":
                return new RouterospfNetwork(name, <any>undefined, { urn })
            case "fortios:index/routerospfOspfInterface:RouterospfOspfInterface":
                return new RouterospfOspfInterface(name, <any>undefined, { urn })
            case "fortios:index/sctpFilterProfile:SctpFilterProfile":
                return new SctpFilterProfile(name, <any>undefined, { urn })
            case "fortios:index/spamfilterBwl:SpamfilterBwl":
                return new SpamfilterBwl(name, <any>undefined, { urn })
            case "fortios:index/spamfilterBword:SpamfilterBword":
                return new SpamfilterBword(name, <any>undefined, { urn })
            case "fortios:index/spamfilterDnsbl:SpamfilterDnsbl":
                return new SpamfilterDnsbl(name, <any>undefined, { urn })
            case "fortios:index/spamfilterFortishield:SpamfilterFortishield":
                return new SpamfilterFortishield(name, <any>undefined, { urn })
            case "fortios:index/spamfilterIptrust:SpamfilterIptrust":
                return new SpamfilterIptrust(name, <any>undefined, { urn })
            case "fortios:index/spamfilterMheader:SpamfilterMheader":
                return new SpamfilterMheader(name, <any>undefined, { urn })
            case "fortios:index/spamfilterOptions:SpamfilterOptions":
                return new SpamfilterOptions(name, <any>undefined, { urn })
            case "fortios:index/spamfilterProfile:SpamfilterProfile":
                return new SpamfilterProfile(name, <any>undefined, { urn })
            case "fortios:index/sshFilterProfile:SshFilterProfile":
                return new SshFilterProfile(name, <any>undefined, { urn })
            case "fortios:index/switchController8021XSettings:SwitchController8021XSettings":
                return new SwitchController8021XSettings(name, <any>undefined, { urn })
            case "fortios:index/switchControllerAutoConfigCustom:SwitchControllerAutoConfigCustom":
                return new SwitchControllerAutoConfigCustom(name, <any>undefined, { urn })
            case "fortios:index/switchControllerAutoConfigDefault:SwitchControllerAutoConfigDefault":
                return new SwitchControllerAutoConfigDefault(name, <any>undefined, { urn })
            case "fortios:index/switchControllerAutoConfigPolicy:SwitchControllerAutoConfigPolicy":
                return new SwitchControllerAutoConfigPolicy(name, <any>undefined, { urn })
            case "fortios:index/switchControllerCustomCommand:SwitchControllerCustomCommand":
                return new SwitchControllerCustomCommand(name, <any>undefined, { urn })
            case "fortios:index/switchControllerDynamicPortPolicy:SwitchControllerDynamicPortPolicy":
                return new SwitchControllerDynamicPortPolicy(name, <any>undefined, { urn })
            case "fortios:index/switchControllerFlowTracking:SwitchControllerFlowTracking":
                return new SwitchControllerFlowTracking(name, <any>undefined, { urn })
            case "fortios:index/switchControllerFortilinkSettings:SwitchControllerFortilinkSettings":
                return new SwitchControllerFortilinkSettings(name, <any>undefined, { urn })
            case "fortios:index/switchControllerGlobal:SwitchControllerGlobal":
                return new SwitchControllerGlobal(name, <any>undefined, { urn })
            case "fortios:index/switchControllerIgmpSnooping:SwitchControllerIgmpSnooping":
                return new SwitchControllerIgmpSnooping(name, <any>undefined, { urn })
            case "fortios:index/switchControllerInitialConfigTemplate:SwitchControllerInitialConfigTemplate":
                return new SwitchControllerInitialConfigTemplate(name, <any>undefined, { urn })
            case "fortios:index/switchControllerInitialConfigVlans:SwitchControllerInitialConfigVlans":
                return new SwitchControllerInitialConfigVlans(name, <any>undefined, { urn })
            case "fortios:index/switchControllerLldpProfile:SwitchControllerLldpProfile":
                return new SwitchControllerLldpProfile(name, <any>undefined, { urn })
            case "fortios:index/switchControllerLldpSettings:SwitchControllerLldpSettings":
                return new SwitchControllerLldpSettings(name, <any>undefined, { urn })
            case "fortios:index/switchControllerLocation:SwitchControllerLocation":
                return new SwitchControllerLocation(name, <any>undefined, { urn })
            case "fortios:index/switchControllerMacSyncSettings:SwitchControllerMacSyncSettings":
                return new SwitchControllerMacSyncSettings(name, <any>undefined, { urn })
            case "fortios:index/switchControllerManagedSwitch:SwitchControllerManagedSwitch":
                return new SwitchControllerManagedSwitch(name, <any>undefined, { urn })
            case "fortios:index/switchControllerNacDevice:SwitchControllerNacDevice":
                return new SwitchControllerNacDevice(name, <any>undefined, { urn })
            case "fortios:index/switchControllerNacSettings:SwitchControllerNacSettings":
                return new SwitchControllerNacSettings(name, <any>undefined, { urn })
            case "fortios:index/switchControllerNetworkMonitorSettings:SwitchControllerNetworkMonitorSettings":
                return new SwitchControllerNetworkMonitorSettings(name, <any>undefined, { urn })
            case "fortios:index/switchControllerPortPolicy:SwitchControllerPortPolicy":
                return new SwitchControllerPortPolicy(name, <any>undefined, { urn })
            case "fortios:index/switchControllerPtpPolicy:SwitchControllerPtpPolicy":
                return new SwitchControllerPtpPolicy(name, <any>undefined, { urn })
            case "fortios:index/switchControllerPtpSettings:SwitchControllerPtpSettings":
                return new SwitchControllerPtpSettings(name, <any>undefined, { urn })
            case "fortios:index/switchControllerQosDot1PMap:SwitchControllerQosDot1PMap":
                return new SwitchControllerQosDot1PMap(name, <any>undefined, { urn })
            case "fortios:index/switchControllerQosIpDscpMap:SwitchControllerQosIpDscpMap":
                return new SwitchControllerQosIpDscpMap(name, <any>undefined, { urn })
            case "fortios:index/switchControllerQosQosPolicy:SwitchControllerQosQosPolicy":
                return new SwitchControllerQosQosPolicy(name, <any>undefined, { urn })
            case "fortios:index/switchControllerQosQueuePolicy:SwitchControllerQosQueuePolicy":
                return new SwitchControllerQosQueuePolicy(name, <any>undefined, { urn })
            case "fortios:index/switchControllerQuarantine:SwitchControllerQuarantine":
                return new SwitchControllerQuarantine(name, <any>undefined, { urn })
            case "fortios:index/switchControllerRemoteLog:SwitchControllerRemoteLog":
                return new SwitchControllerRemoteLog(name, <any>undefined, { urn })
            case "fortios:index/switchControllerSecurityPolicy8021X:SwitchControllerSecurityPolicy8021X":
                return new SwitchControllerSecurityPolicy8021X(name, <any>undefined, { urn })
            case "fortios:index/switchControllerSecurityPolicyCaptivePortal:SwitchControllerSecurityPolicyCaptivePortal":
                return new SwitchControllerSecurityPolicyCaptivePortal(name, <any>undefined, { urn })
            case "fortios:index/switchControllerSecurityPolicyLocalAccess:SwitchControllerSecurityPolicyLocalAccess":
                return new SwitchControllerSecurityPolicyLocalAccess(name, <any>undefined, { urn })
            case "fortios:index/switchControllerSflow:SwitchControllerSflow":
                return new SwitchControllerSflow(name, <any>undefined, { urn })
            case "fortios:index/switchControllerSnmpCommunity:SwitchControllerSnmpCommunity":
                return new SwitchControllerSnmpCommunity(name, <any>undefined, { urn })
            case "fortios:index/switchControllerSnmpSysinfo:SwitchControllerSnmpSysinfo":
                return new SwitchControllerSnmpSysinfo(name, <any>undefined, { urn })
            case "fortios:index/switchControllerSnmpTrapThreshold:SwitchControllerSnmpTrapThreshold":
                return new SwitchControllerSnmpTrapThreshold(name, <any>undefined, { urn })
            case "fortios:index/switchControllerSnmpUser:SwitchControllerSnmpUser":
                return new SwitchControllerSnmpUser(name, <any>undefined, { urn })
            case "fortios:index/switchControllerStormControl:SwitchControllerStormControl":
                return new SwitchControllerStormControl(name, <any>undefined, { urn })
            case "fortios:index/switchControllerStormControlPolicy:SwitchControllerStormControlPolicy":
                return new SwitchControllerStormControlPolicy(name, <any>undefined, { urn })
            case "fortios:index/switchControllerStpInstance:SwitchControllerStpInstance":
                return new SwitchControllerStpInstance(name, <any>undefined, { urn })
            case "fortios:index/switchControllerStpSettings:SwitchControllerStpSettings":
                return new SwitchControllerStpSettings(name, <any>undefined, { urn })
            case "fortios:index/switchControllerSwitchGroup:SwitchControllerSwitchGroup":
                return new SwitchControllerSwitchGroup(name, <any>undefined, { urn })
            case "fortios:index/switchControllerSwitchInterfaceTag:SwitchControllerSwitchInterfaceTag":
                return new SwitchControllerSwitchInterfaceTag(name, <any>undefined, { urn })
            case "fortios:index/switchControllerSwitchLog:SwitchControllerSwitchLog":
                return new SwitchControllerSwitchLog(name, <any>undefined, { urn })
            case "fortios:index/switchControllerSwitchProfile:SwitchControllerSwitchProfile":
                return new SwitchControllerSwitchProfile(name, <any>undefined, { urn })
            case "fortios:index/switchControllerSystem:SwitchControllerSystem":
                return new SwitchControllerSystem(name, <any>undefined, { urn })
            case "fortios:index/switchControllerTrafficPolicy:SwitchControllerTrafficPolicy":
                return new SwitchControllerTrafficPolicy(name, <any>undefined, { urn })
            case "fortios:index/switchControllerTrafficSniffer:SwitchControllerTrafficSniffer":
                return new SwitchControllerTrafficSniffer(name, <any>undefined, { urn })
            case "fortios:index/switchControllerVirtualPortPool:SwitchControllerVirtualPortPool":
                return new SwitchControllerVirtualPortPool(name, <any>undefined, { urn })
            case "fortios:index/switchControllerVlan:SwitchControllerVlan":
                return new SwitchControllerVlan(name, <any>undefined, { urn })
            case "fortios:index/switchControllerVlanPolicy:SwitchControllerVlanPolicy":
                return new SwitchControllerVlanPolicy(name, <any>undefined, { urn })
            case "fortios:index/system3GModemCustom:System3GModemCustom":
                return new System3GModemCustom(name, <any>undefined, { urn })
            case "fortios:index/systemAPIUserSetting:SystemAPIUserSetting":
                return new SystemAPIUserSetting(name, <any>undefined, { urn })
            case "fortios:index/systemAccprofile:SystemAccprofile":
                return new SystemAccprofile(name, <any>undefined, { urn })
            case "fortios:index/systemAcme:SystemAcme":
                return new SystemAcme(name, <any>undefined, { urn })
            case "fortios:index/systemAdmin:SystemAdmin":
                return new SystemAdmin(name, <any>undefined, { urn })
            case "fortios:index/systemAdminAdministrator:SystemAdminAdministrator":
                return new SystemAdminAdministrator(name, <any>undefined, { urn })
            case "fortios:index/systemAdminProfiles:SystemAdminProfiles":
                return new SystemAdminProfiles(name, <any>undefined, { urn })
            case "fortios:index/systemAffinityInterrupt:SystemAffinityInterrupt":
                return new SystemAffinityInterrupt(name, <any>undefined, { urn })
            case "fortios:index/systemAffinityPacketRedistribution:SystemAffinityPacketRedistribution":
                return new SystemAffinityPacketRedistribution(name, <any>undefined, { urn })
            case "fortios:index/systemAlarm:SystemAlarm":
                return new SystemAlarm(name, <any>undefined, { urn })
            case "fortios:index/systemAlias:SystemAlias":
                return new SystemAlias(name, <any>undefined, { urn })
            case "fortios:index/systemApiUser:SystemApiUser":
                return new SystemApiUser(name, <any>undefined, { urn })
            case "fortios:index/systemArpTable:SystemArpTable":
                return new SystemArpTable(name, <any>undefined, { urn })
            case "fortios:index/systemAutoInstall:SystemAutoInstall":
                return new SystemAutoInstall(name, <any>undefined, { urn })
            case "fortios:index/systemAutoScript:SystemAutoScript":
                return new SystemAutoScript(name, <any>undefined, { urn })
            case "fortios:index/systemAutomationAction:SystemAutomationAction":
                return new SystemAutomationAction(name, <any>undefined, { urn })
            case "fortios:index/systemAutomationDestination:SystemAutomationDestination":
                return new SystemAutomationDestination(name, <any>undefined, { urn })
            case "fortios:index/systemAutomationStitch:SystemAutomationStitch":
                return new SystemAutomationStitch(name, <any>undefined, { urn })
            case "fortios:index/systemAutomationTrigger:SystemAutomationTrigger":
                return new SystemAutomationTrigger(name, <any>undefined, { urn })
            case "fortios:index/systemAutoupdatePushUpdate:SystemAutoupdatePushUpdate":
                return new SystemAutoupdatePushUpdate(name, <any>undefined, { urn })
            case "fortios:index/systemAutoupdateSchedule:SystemAutoupdateSchedule":
                return new SystemAutoupdateSchedule(name, <any>undefined, { urn })
            case "fortios:index/systemAutoupdateTunneling:SystemAutoupdateTunneling":
                return new SystemAutoupdateTunneling(name, <any>undefined, { urn })
            case "fortios:index/systemCentralManagement:SystemCentralManagement":
                return new SystemCentralManagement(name, <any>undefined, { urn })
            case "fortios:index/systemClusterSync:SystemClusterSync":
                return new SystemClusterSync(name, <any>undefined, { urn })
            case "fortios:index/systemConsole:SystemConsole":
                return new SystemConsole(name, <any>undefined, { urn })
            case "fortios:index/systemCsf:SystemCsf":
                return new SystemCsf(name, <any>undefined, { urn })
            case "fortios:index/systemCustomLanguage:SystemCustomLanguage":
                return new SystemCustomLanguage(name, <any>undefined, { urn })
            case "fortios:index/systemDdns:SystemDdns":
                return new SystemDdns(name, <any>undefined, { urn })
            case "fortios:index/systemDedicatedMgmt:SystemDedicatedMgmt":
                return new SystemDedicatedMgmt(name, <any>undefined, { urn })
            case "fortios:index/systemDhcp6Server:SystemDhcp6Server":
                return new SystemDhcp6Server(name, <any>undefined, { urn })
            case "fortios:index/systemDhcpServer:SystemDhcpServer":
                return new SystemDhcpServer(name, <any>undefined, { urn })
            case "fortios:index/systemDns64:SystemDns64":
                return new SystemDns64(name, <any>undefined, { urn })
            case "fortios:index/systemDns:SystemDns":
                return new SystemDns(name, <any>undefined, { urn })
            case "fortios:index/systemDnsDatabase:SystemDnsDatabase":
                return new SystemDnsDatabase(name, <any>undefined, { urn })
            case "fortios:index/systemDnsServer:SystemDnsServer":
                return new SystemDnsServer(name, <any>undefined, { urn })
            case "fortios:index/systemDscpBasedPriority:SystemDscpBasedPriority":
                return new SystemDscpBasedPriority(name, <any>undefined, { urn })
            case "fortios:index/systemEmailServer:SystemEmailServer":
                return new SystemEmailServer(name, <any>undefined, { urn })
            case "fortios:index/systemExternalResource:SystemExternalResource":
                return new SystemExternalResource(name, <any>undefined, { urn })
            case "fortios:index/systemFederatedUpgrade:SystemFederatedUpgrade":
                return new SystemFederatedUpgrade(name, <any>undefined, { urn })
            case "fortios:index/systemFipsCc:SystemFipsCc":
                return new SystemFipsCc(name, <any>undefined, { urn })
            case "fortios:index/systemFm:SystemFm":
                return new SystemFm(name, <any>undefined, { urn })
            case "fortios:index/systemFortiai:SystemFortiai":
                return new SystemFortiai(name, <any>undefined, { urn })
            case "fortios:index/systemFortiguard:SystemFortiguard":
                return new SystemFortiguard(name, <any>undefined, { urn })
            case "fortios:index/systemFortimanager:SystemFortimanager":
                return new SystemFortimanager(name, <any>undefined, { urn })
            case "fortios:index/systemFortindr:SystemFortindr":
                return new SystemFortindr(name, <any>undefined, { urn })
            case "fortios:index/systemFortisandbox:SystemFortisandbox":
                return new SystemFortisandbox(name, <any>undefined, { urn })
            case "fortios:index/systemFssoPolling:SystemFssoPolling":
                return new SystemFssoPolling(name, <any>undefined, { urn })
            case "fortios:index/systemFtmPush:SystemFtmPush":
                return new SystemFtmPush(name, <any>undefined, { urn })
            case "fortios:index/systemGeneve:SystemGeneve":
                return new SystemGeneve(name, <any>undefined, { urn })
            case "fortios:index/systemGeoipCountry:SystemGeoipCountry":
                return new SystemGeoipCountry(name, <any>undefined, { urn })
            case "fortios:index/systemGeoipOverride:SystemGeoipOverride":
                return new SystemGeoipOverride(name, <any>undefined, { urn })
            case "fortios:index/systemGlobal:SystemGlobal":
                return new SystemGlobal(name, <any>undefined, { urn })
            case "fortios:index/systemGreTunnel:SystemGreTunnel":
                return new SystemGreTunnel(name, <any>undefined, { urn })
            case "fortios:index/systemHa:SystemHa":
                return new SystemHa(name, <any>undefined, { urn })
            case "fortios:index/systemHaMonitor:SystemHaMonitor":
                return new SystemHaMonitor(name, <any>undefined, { urn })
            case "fortios:index/systemIke:SystemIke":
                return new SystemIke(name, <any>undefined, { urn })
            case "fortios:index/systemInterface:SystemInterface":
                return new SystemInterface(name, <any>undefined, { urn })
            case "fortios:index/systemIpam:SystemIpam":
                return new SystemIpam(name, <any>undefined, { urn })
            case "fortios:index/systemIpipTunnel:SystemIpipTunnel":
                return new SystemIpipTunnel(name, <any>undefined, { urn })
            case "fortios:index/systemIps:SystemIps":
                return new SystemIps(name, <any>undefined, { urn })
            case "fortios:index/systemIpsUrlfilterDns6:SystemIpsUrlfilterDns6":
                return new SystemIpsUrlfilterDns6(name, <any>undefined, { urn })
            case "fortios:index/systemIpsUrlfilterDns:SystemIpsUrlfilterDns":
                return new SystemIpsUrlfilterDns(name, <any>undefined, { urn })
            case "fortios:index/systemIpsecAggregate:SystemIpsecAggregate":
                return new SystemIpsecAggregate(name, <any>undefined, { urn })
            case "fortios:index/systemIpv6NeighborCache:SystemIpv6NeighborCache":
                return new SystemIpv6NeighborCache(name, <any>undefined, { urn })
            case "fortios:index/systemIpv6Tunnel:SystemIpv6Tunnel":
                return new SystemIpv6Tunnel(name, <any>undefined, { urn })
            case "fortios:index/systemLicenseFortiCare:SystemLicenseFortiCare":
                return new SystemLicenseFortiCare(name, <any>undefined, { urn })
            case "fortios:index/systemLicenseVDOM:SystemLicenseVDOM":
                return new SystemLicenseVDOM(name, <any>undefined, { urn })
            case "fortios:index/systemLicenseVM:SystemLicenseVM":
                return new SystemLicenseVM(name, <any>undefined, { urn })
            case "fortios:index/systemLinkMonitor:SystemLinkMonitor":
                return new SystemLinkMonitor(name, <any>undefined, { urn })
            case "fortios:index/systemLldpNetworkPolicy:SystemLldpNetworkPolicy":
                return new SystemLldpNetworkPolicy(name, <any>undefined, { urn })
            case "fortios:index/systemLteModem:SystemLteModem":
                return new SystemLteModem(name, <any>undefined, { urn })
            case "fortios:index/systemMacAddressTable:SystemMacAddressTable":
                return new SystemMacAddressTable(name, <any>undefined, { urn })
            case "fortios:index/systemManagementTunnel:SystemManagementTunnel":
                return new SystemManagementTunnel(name, <any>undefined, { urn })
            case "fortios:index/systemMobileTunnel:SystemMobileTunnel":
                return new SystemMobileTunnel(name, <any>undefined, { urn })
            case "fortios:index/systemModem:SystemModem":
                return new SystemModem(name, <any>undefined, { urn })
            case "fortios:index/systemNat64:SystemNat64":
                return new SystemNat64(name, <any>undefined, { urn })
            case "fortios:index/systemNdProxy:SystemNdProxy":
                return new SystemNdProxy(name, <any>undefined, { urn })
            case "fortios:index/systemNetflow:SystemNetflow":
                return new SystemNetflow(name, <any>undefined, { urn })
            case "fortios:index/systemNetworkVisibility:SystemNetworkVisibility":
                return new SystemNetworkVisibility(name, <any>undefined, { urn })
            case "fortios:index/systemNpu:SystemNpu":
                return new SystemNpu(name, <any>undefined, { urn })
            case "fortios:index/systemNtp:SystemNtp":
                return new SystemNtp(name, <any>undefined, { urn })
            case "fortios:index/systemObjectTagging:SystemObjectTagging":
                return new SystemObjectTagging(name, <any>undefined, { urn })
            case "fortios:index/systemPasswordPolicy:SystemPasswordPolicy":
                return new SystemPasswordPolicy(name, <any>undefined, { urn })
            case "fortios:index/systemPasswordPolicyGuestAdmin:SystemPasswordPolicyGuestAdmin":
                return new SystemPasswordPolicyGuestAdmin(name, <any>undefined, { urn })
            case "fortios:index/systemPhysicalSwitch:SystemPhysicalSwitch":
                return new SystemPhysicalSwitch(name, <any>undefined, { urn })
            case "fortios:index/systemPppoeInterface:SystemPppoeInterface":
                return new SystemPppoeInterface(name, <any>undefined, { urn })
            case "fortios:index/systemProbeResponse:SystemProbeResponse":
                return new SystemProbeResponse(name, <any>undefined, { urn })
            case "fortios:index/systemProxyArp:SystemProxyArp":
                return new SystemProxyArp(name, <any>undefined, { urn })
            case "fortios:index/systemPtp:SystemPtp":
                return new SystemPtp(name, <any>undefined, { urn })
            case "fortios:index/systemReplacemsgAdmin:SystemReplacemsgAdmin":
                return new SystemReplacemsgAdmin(name, <any>undefined, { urn })
            case "fortios:index/systemReplacemsgAlertmail:SystemReplacemsgAlertmail":
                return new SystemReplacemsgAlertmail(name, <any>undefined, { urn })
            case "fortios:index/systemReplacemsgAuth:SystemReplacemsgAuth":
                return new SystemReplacemsgAuth(name, <any>undefined, { urn })
            case "fortios:index/systemReplacemsgAutomation:SystemReplacemsgAutomation":
                return new SystemReplacemsgAutomation(name, <any>undefined, { urn })
            case "fortios:index/systemReplacemsgDeviceDetectionPortal:SystemReplacemsgDeviceDetectionPortal":
                return new SystemReplacemsgDeviceDetectionPortal(name, <any>undefined, { urn })
            case "fortios:index/systemReplacemsgEc:SystemReplacemsgEc":
                return new SystemReplacemsgEc(name, <any>undefined, { urn })
            case "fortios:index/systemReplacemsgFortiguardWf:SystemReplacemsgFortiguardWf":
                return new SystemReplacemsgFortiguardWf(name, <any>undefined, { urn })
            case "fortios:index/systemReplacemsgFtp:SystemReplacemsgFtp":
                return new SystemReplacemsgFtp(name, <any>undefined, { urn })
            case "fortios:index/systemReplacemsgGroup:SystemReplacemsgGroup":
                return new SystemReplacemsgGroup(name, <any>undefined, { urn })
            case "fortios:index/systemReplacemsgHttp:SystemReplacemsgHttp":
                return new SystemReplacemsgHttp(name, <any>undefined, { urn })
            case "fortios:index/systemReplacemsgIcap:SystemReplacemsgIcap":
                return new SystemReplacemsgIcap(name, <any>undefined, { urn })
            case "fortios:index/systemReplacemsgImage:SystemReplacemsgImage":
                return new SystemReplacemsgImage(name, <any>undefined, { urn })
            case "fortios:index/systemReplacemsgMail:SystemReplacemsgMail":
                return new SystemReplacemsgMail(name, <any>undefined, { urn })
            case "fortios:index/systemReplacemsgNacQuar:SystemReplacemsgNacQuar":
                return new SystemReplacemsgNacQuar(name, <any>undefined, { urn })
            case "fortios:index/systemReplacemsgNntp:SystemReplacemsgNntp":
                return new SystemReplacemsgNntp(name, <any>undefined, { urn })
            case "fortios:index/systemReplacemsgSpam:SystemReplacemsgSpam":
                return new SystemReplacemsgSpam(name, <any>undefined, { urn })
            case "fortios:index/systemReplacemsgSslvpn:SystemReplacemsgSslvpn":
                return new SystemReplacemsgSslvpn(name, <any>undefined, { urn })
            case "fortios:index/systemReplacemsgTrafficQuota:SystemReplacemsgTrafficQuota":
                return new SystemReplacemsgTrafficQuota(name, <any>undefined, { urn })
            case "fortios:index/systemReplacemsgUtm:SystemReplacemsgUtm":
                return new SystemReplacemsgUtm(name, <any>undefined, { urn })
            case "fortios:index/systemReplacemsgWebproxy:SystemReplacemsgWebproxy":
                return new SystemReplacemsgWebproxy(name, <any>undefined, { urn })
            case "fortios:index/systemResourceLimits:SystemResourceLimits":
                return new SystemResourceLimits(name, <any>undefined, { urn })
            case "fortios:index/systemSaml:SystemSaml":
                return new SystemSaml(name, <any>undefined, { urn })
            case "fortios:index/systemSdnConnector:SystemSdnConnector":
                return new SystemSdnConnector(name, <any>undefined, { urn })
            case "fortios:index/systemSdwan:SystemSdwan":
                return new SystemSdwan(name, <any>undefined, { urn })
            case "fortios:index/systemSessionHelper:SystemSessionHelper":
                return new SystemSessionHelper(name, <any>undefined, { urn })
            case "fortios:index/systemSessionTtl:SystemSessionTtl":
                return new SystemSessionTtl(name, <any>undefined, { urn })
            case "fortios:index/systemSettingDNS:SystemSettingDNS":
                return new SystemSettingDNS(name, <any>undefined, { urn })
            case "fortios:index/systemSettingGlobal:SystemSettingGlobal":
                return new SystemSettingGlobal(name, <any>undefined, { urn })
            case "fortios:index/systemSettingNTP:SystemSettingNTP":
                return new SystemSettingNTP(name, <any>undefined, { urn })
            case "fortios:index/systemSettings:SystemSettings":
                return new SystemSettings(name, <any>undefined, { urn })
            case "fortios:index/systemSflow:SystemSflow":
                return new SystemSflow(name, <any>undefined, { urn })
            case "fortios:index/systemSitTunnel:SystemSitTunnel":
                return new SystemSitTunnel(name, <any>undefined, { urn })
            case "fortios:index/systemSmsServer:SystemSmsServer":
                return new SystemSmsServer(name, <any>undefined, { urn })
            case "fortios:index/systemSnmpCommunity:SystemSnmpCommunity":
                return new SystemSnmpCommunity(name, <any>undefined, { urn })
            case "fortios:index/systemSnmpMibView:SystemSnmpMibView":
                return new SystemSnmpMibView(name, <any>undefined, { urn })
            case "fortios:index/systemSnmpSysinfo:SystemSnmpSysinfo":
                return new SystemSnmpSysinfo(name, <any>undefined, { urn })
            case "fortios:index/systemSnmpUser:SystemSnmpUser":
                return new SystemSnmpUser(name, <any>undefined, { urn })
            case "fortios:index/systemSpeedTestSchedule:SystemSpeedTestSchedule":
                return new SystemSpeedTestSchedule(name, <any>undefined, { urn })
            case "fortios:index/systemSpeedTestServer:SystemSpeedTestServer":
                return new SystemSpeedTestServer(name, <any>undefined, { urn })
            case "fortios:index/systemSsoAdmin:SystemSsoAdmin":
                return new SystemSsoAdmin(name, <any>undefined, { urn })
            case "fortios:index/systemSsoForticloudAdmin:SystemSsoForticloudAdmin":
                return new SystemSsoForticloudAdmin(name, <any>undefined, { urn })
            case "fortios:index/systemStandaloneCluster:SystemStandaloneCluster":
                return new SystemStandaloneCluster(name, <any>undefined, { urn })
            case "fortios:index/systemStorage:SystemStorage":
                return new SystemStorage(name, <any>undefined, { urn })
            case "fortios:index/systemStp:SystemStp":
                return new SystemStp(name, <any>undefined, { urn })
            case "fortios:index/systemSwitchInterface:SystemSwitchInterface":
                return new SystemSwitchInterface(name, <any>undefined, { urn })
            case "fortios:index/systemTosBasedPriority:SystemTosBasedPriority":
                return new SystemTosBasedPriority(name, <any>undefined, { urn })
            case "fortios:index/systemVdom:SystemVdom":
                return new SystemVdom(name, <any>undefined, { urn })
            case "fortios:index/systemVdomDns:SystemVdomDns":
                return new SystemVdomDns(name, <any>undefined, { urn })
            case "fortios:index/systemVdomException:SystemVdomException":
                return new SystemVdomException(name, <any>undefined, { urn })
            case "fortios:index/systemVdomLink:SystemVdomLink":
                return new SystemVdomLink(name, <any>undefined, { urn })
            case "fortios:index/systemVdomNetflow:SystemVdomNetflow":
                return new SystemVdomNetflow(name, <any>undefined, { urn })
            case "fortios:index/systemVdomProperty:SystemVdomProperty":
                return new SystemVdomProperty(name, <any>undefined, { urn })
            case "fortios:index/systemVdomRadiusServer:SystemVdomRadiusServer":
                return new SystemVdomRadiusServer(name, <any>undefined, { urn })
            case "fortios:index/systemVdomSetting:SystemVdomSetting":
                return new SystemVdomSetting(name, <any>undefined, { urn })
            case "fortios:index/systemVdomSflow:SystemVdomSflow":
                return new SystemVdomSflow(name, <any>undefined, { urn })
            case "fortios:index/systemVirtualSwitch:SystemVirtualSwitch":
                return new SystemVirtualSwitch(name, <any>undefined, { urn })
            case "fortios:index/systemVirtualWanLink:SystemVirtualWanLink":
                return new SystemVirtualWanLink(name, <any>undefined, { urn })
            case "fortios:index/systemVirtualWirePair:SystemVirtualWirePair":
                return new SystemVirtualWirePair(name, <any>undefined, { urn })
            case "fortios:index/systemVneTunnel:SystemVneTunnel":
                return new SystemVneTunnel(name, <any>undefined, { urn })
            case "fortios:index/systemVxlan:SystemVxlan":
                return new SystemVxlan(name, <any>undefined, { urn })
            case "fortios:index/systemWccp:SystemWccp":
                return new SystemWccp(name, <any>undefined, { urn })
            case "fortios:index/systemZone:SystemZone":
                return new SystemZone(name, <any>undefined, { urn })
            case "fortios:index/userAdgrp:UserAdgrp":
                return new UserAdgrp(name, <any>undefined, { urn })
            case "fortios:index/userCertificate:UserCertificate":
                return new UserCertificate(name, <any>undefined, { urn })
            case "fortios:index/userDevice:UserDevice":
                return new UserDevice(name, <any>undefined, { urn })
            case "fortios:index/userDeviceAccessList:UserDeviceAccessList":
                return new UserDeviceAccessList(name, <any>undefined, { urn })
            case "fortios:index/userDeviceCategory:UserDeviceCategory":
                return new UserDeviceCategory(name, <any>undefined, { urn })
            case "fortios:index/userDeviceGroup:UserDeviceGroup":
                return new UserDeviceGroup(name, <any>undefined, { urn })
            case "fortios:index/userDomainController:UserDomainController":
                return new UserDomainController(name, <any>undefined, { urn })
            case "fortios:index/userExchange:UserExchange":
                return new UserExchange(name, <any>undefined, { urn })
            case "fortios:index/userFortitoken:UserFortitoken":
                return new UserFortitoken(name, <any>undefined, { urn })
            case "fortios:index/userFsso:UserFsso":
                return new UserFsso(name, <any>undefined, { urn })
            case "fortios:index/userFssoPolling:UserFssoPolling":
                return new UserFssoPolling(name, <any>undefined, { urn })
            case "fortios:index/userGroup:UserGroup":
                return new UserGroup(name, <any>undefined, { urn })
            case "fortios:index/userKrbKeytab:UserKrbKeytab":
                return new UserKrbKeytab(name, <any>undefined, { urn })
            case "fortios:index/userLdap:UserLdap":
                return new UserLdap(name, <any>undefined, { urn })
            case "fortios:index/userLocal:UserLocal":
                return new UserLocal(name, <any>undefined, { urn })
            case "fortios:index/userNacPolicy:UserNacPolicy":
                return new UserNacPolicy(name, <any>undefined, { urn })
            case "fortios:index/userPasswordPolicy:UserPasswordPolicy":
                return new UserPasswordPolicy(name, <any>undefined, { urn })
            case "fortios:index/userPeer:UserPeer":
                return new UserPeer(name, <any>undefined, { urn })
            case "fortios:index/userPeergrp:UserPeergrp":
                return new UserPeergrp(name, <any>undefined, { urn })
            case "fortios:index/userPop3:UserPop3":
                return new UserPop3(name, <any>undefined, { urn })
            case "fortios:index/userQuarantine:UserQuarantine":
                return new UserQuarantine(name, <any>undefined, { urn })
            case "fortios:index/userRadius:UserRadius":
                return new UserRadius(name, <any>undefined, { urn })
            case "fortios:index/userSaml:UserSaml":
                return new UserSaml(name, <any>undefined, { urn })
            case "fortios:index/userSecurityExemptList:UserSecurityExemptList":
                return new UserSecurityExemptList(name, <any>undefined, { urn })
            case "fortios:index/userSetting:UserSetting":
                return new UserSetting(name, <any>undefined, { urn })
            case "fortios:index/userTacacs:UserTacacs":
                return new UserTacacs(name, <any>undefined, { urn })
            case "fortios:index/vPNIPsecPhase1InterfaceLegacy:VPNIPsecPhase1InterfaceLegacy":
                return new VPNIPsecPhase1InterfaceLegacy(name, <any>undefined, { urn })
            case "fortios:index/vPNIPsecPhase2InterfaceLegacy:VPNIPsecPhase2InterfaceLegacy":
                return new VPNIPsecPhase2InterfaceLegacy(name, <any>undefined, { urn })
            case "fortios:index/videofilterProfile:VideofilterProfile":
                return new VideofilterProfile(name, <any>undefined, { urn })
            case "fortios:index/videofilterYoutubeChannelFilter:VideofilterYoutubeChannelFilter":
                return new VideofilterYoutubeChannelFilter(name, <any>undefined, { urn })
            case "fortios:index/videofilterYoutubeKey:VideofilterYoutubeKey":
                return new VideofilterYoutubeKey(name, <any>undefined, { urn })
            case "fortios:index/voipProfile:VoipProfile":
                return new VoipProfile(name, <any>undefined, { urn })
            case "fortios:index/vpnCertificateCa:VpnCertificateCa":
                return new VpnCertificateCa(name, <any>undefined, { urn })
            case "fortios:index/vpnCertificateCrl:VpnCertificateCrl":
                return new VpnCertificateCrl(name, <any>undefined, { urn })
            case "fortios:index/vpnCertificateLocal:VpnCertificateLocal":
                return new VpnCertificateLocal(name, <any>undefined, { urn })
            case "fortios:index/vpnCertificateOcspServer:VpnCertificateOcspServer":
                return new VpnCertificateOcspServer(name, <any>undefined, { urn })
            case "fortios:index/vpnCertificateRemote:VpnCertificateRemote":
                return new VpnCertificateRemote(name, <any>undefined, { urn })
            case "fortios:index/vpnCertificateSetting:VpnCertificateSetting":
                return new VpnCertificateSetting(name, <any>undefined, { urn })
            case "fortios:index/vpnIpsecConcentrator:VpnIpsecConcentrator":
                return new VpnIpsecConcentrator(name, <any>undefined, { urn })
            case "fortios:index/vpnIpsecFec:VpnIpsecFec":
                return new VpnIpsecFec(name, <any>undefined, { urn })
            case "fortios:index/vpnIpsecForticlient:VpnIpsecForticlient":
                return new VpnIpsecForticlient(name, <any>undefined, { urn })
            case "fortios:index/vpnIpsecManualkey:VpnIpsecManualkey":
                return new VpnIpsecManualkey(name, <any>undefined, { urn })
            case "fortios:index/vpnIpsecManualkeyInterface:VpnIpsecManualkeyInterface":
                return new VpnIpsecManualkeyInterface(name, <any>undefined, { urn })
            case "fortios:index/vpnIpsecPhase1:VpnIpsecPhase1":
                return new VpnIpsecPhase1(name, <any>undefined, { urn })
            case "fortios:index/vpnIpsecPhase1Interface:VpnIpsecPhase1Interface":
                return new VpnIpsecPhase1Interface(name, <any>undefined, { urn })
            case "fortios:index/vpnIpsecPhase2:VpnIpsecPhase2":
                return new VpnIpsecPhase2(name, <any>undefined, { urn })
            case "fortios:index/vpnIpsecPhase2Interface:VpnIpsecPhase2Interface":
                return new VpnIpsecPhase2Interface(name, <any>undefined, { urn })
            case "fortios:index/vpnL2Tp:VpnL2Tp":
                return new VpnL2Tp(name, <any>undefined, { urn })
            case "fortios:index/vpnOcvpn:VpnOcvpn":
                return new VpnOcvpn(name, <any>undefined, { urn })
            case "fortios:index/vpnPptp:VpnPptp":
                return new VpnPptp(name, <any>undefined, { urn })
            case "fortios:index/vpnSslClient:VpnSslClient":
                return new VpnSslClient(name, <any>undefined, { urn })
            case "fortios:index/vpnSslSettings:VpnSslSettings":
                return new VpnSslSettings(name, <any>undefined, { urn })
            case "fortios:index/vpnSslWebHostCheckSoftware:VpnSslWebHostCheckSoftware":
                return new VpnSslWebHostCheckSoftware(name, <any>undefined, { urn })
            case "fortios:index/vpnSslWebPortal:VpnSslWebPortal":
                return new VpnSslWebPortal(name, <any>undefined, { urn })
            case "fortios:index/vpnSslWebRealm:VpnSslWebRealm":
                return new VpnSslWebRealm(name, <any>undefined, { urn })
            case "fortios:index/vpnSslWebUserBookmark:VpnSslWebUserBookmark":
                return new VpnSslWebUserBookmark(name, <any>undefined, { urn })
            case "fortios:index/vpnSslWebUserGroupBookmark:VpnSslWebUserGroupBookmark":
                return new VpnSslWebUserGroupBookmark(name, <any>undefined, { urn })
            case "fortios:index/wafMainClass:WafMainClass":
                return new WafMainClass(name, <any>undefined, { urn })
            case "fortios:index/wafProfile:WafProfile":
                return new WafProfile(name, <any>undefined, { urn })
            case "fortios:index/wafSignature:WafSignature":
                return new WafSignature(name, <any>undefined, { urn })
            case "fortios:index/wafSubClass:WafSubClass":
                return new WafSubClass(name, <any>undefined, { urn })
            case "fortios:index/wanoptAuthGroup:WanoptAuthGroup":
                return new WanoptAuthGroup(name, <any>undefined, { urn })
            case "fortios:index/wanoptCacheService:WanoptCacheService":
                return new WanoptCacheService(name, <any>undefined, { urn })
            case "fortios:index/wanoptContentDeliveryNetworkRule:WanoptContentDeliveryNetworkRule":
                return new WanoptContentDeliveryNetworkRule(name, <any>undefined, { urn })
            case "fortios:index/wanoptPeer:WanoptPeer":
                return new WanoptPeer(name, <any>undefined, { urn })
            case "fortios:index/wanoptProfile:WanoptProfile":
                return new WanoptProfile(name, <any>undefined, { urn })
            case "fortios:index/wanoptRemoteStorage:WanoptRemoteStorage":
                return new WanoptRemoteStorage(name, <any>undefined, { urn })
            case "fortios:index/wanoptSettings:WanoptSettings":
                return new WanoptSettings(name, <any>undefined, { urn })
            case "fortios:index/wanoptWebcache:WanoptWebcache":
                return new WanoptWebcache(name, <any>undefined, { urn })
            case "fortios:index/webProxyDebugUrl:WebProxyDebugUrl":
                return new WebProxyDebugUrl(name, <any>undefined, { urn })
            case "fortios:index/webProxyExplicit:WebProxyExplicit":
                return new WebProxyExplicit(name, <any>undefined, { urn })
            case "fortios:index/webProxyForwardServer:WebProxyForwardServer":
                return new WebProxyForwardServer(name, <any>undefined, { urn })
            case "fortios:index/webProxyForwardServerGroup:WebProxyForwardServerGroup":
                return new WebProxyForwardServerGroup(name, <any>undefined, { urn })
            case "fortios:index/webProxyGlobal:WebProxyGlobal":
                return new WebProxyGlobal(name, <any>undefined, { urn })
            case "fortios:index/webProxyProfile:WebProxyProfile":
                return new WebProxyProfile(name, <any>undefined, { urn })
            case "fortios:index/webProxyUrlMatch:WebProxyUrlMatch":
                return new WebProxyUrlMatch(name, <any>undefined, { urn })
            case "fortios:index/webProxyWisp:WebProxyWisp":
                return new WebProxyWisp(name, <any>undefined, { urn })
            case "fortios:index/webfilterContent:WebfilterContent":
                return new WebfilterContent(name, <any>undefined, { urn })
            case "fortios:index/webfilterContentHeader:WebfilterContentHeader":
                return new WebfilterContentHeader(name, <any>undefined, { urn })
            case "fortios:index/webfilterFortiguard:WebfilterFortiguard":
                return new WebfilterFortiguard(name, <any>undefined, { urn })
            case "fortios:index/webfilterFtgdLocalCat:WebfilterFtgdLocalCat":
                return new WebfilterFtgdLocalCat(name, <any>undefined, { urn })
            case "fortios:index/webfilterFtgdLocalRating:WebfilterFtgdLocalRating":
                return new WebfilterFtgdLocalRating(name, <any>undefined, { urn })
            case "fortios:index/webfilterIpsUrlfilterCacheSetting:WebfilterIpsUrlfilterCacheSetting":
                return new WebfilterIpsUrlfilterCacheSetting(name, <any>undefined, { urn })
            case "fortios:index/webfilterIpsUrlfilterSetting6:WebfilterIpsUrlfilterSetting6":
                return new WebfilterIpsUrlfilterSetting6(name, <any>undefined, { urn })
            case "fortios:index/webfilterIpsUrlfilterSetting:WebfilterIpsUrlfilterSetting":
                return new WebfilterIpsUrlfilterSetting(name, <any>undefined, { urn })
            case "fortios:index/webfilterOverride:WebfilterOverride":
                return new WebfilterOverride(name, <any>undefined, { urn })
            case "fortios:index/webfilterProfile:WebfilterProfile":
                return new WebfilterProfile(name, <any>undefined, { urn })
            case "fortios:index/webfilterSearchEngine:WebfilterSearchEngine":
                return new WebfilterSearchEngine(name, <any>undefined, { urn })
            case "fortios:index/webfilterUrlfilter:WebfilterUrlfilter":
                return new WebfilterUrlfilter(name, <any>undefined, { urn })
            case "fortios:index/wirelessControllerAccessControlList:WirelessControllerAccessControlList":
                return new WirelessControllerAccessControlList(name, <any>undefined, { urn })
            case "fortios:index/wirelessControllerAddress:WirelessControllerAddress":
                return new WirelessControllerAddress(name, <any>undefined, { urn })
            case "fortios:index/wirelessControllerAddrgrp:WirelessControllerAddrgrp":
                return new WirelessControllerAddrgrp(name, <any>undefined, { urn })
            case "fortios:index/wirelessControllerApStatus:WirelessControllerApStatus":
                return new WirelessControllerApStatus(name, <any>undefined, { urn })
            case "fortios:index/wirelessControllerApcfgProfile:WirelessControllerApcfgProfile":
                return new WirelessControllerApcfgProfile(name, <any>undefined, { urn })
            case "fortios:index/wirelessControllerArrpProfile:WirelessControllerArrpProfile":
                return new WirelessControllerArrpProfile(name, <any>undefined, { urn })
            case "fortios:index/wirelessControllerBleProfile:WirelessControllerBleProfile":
                return new WirelessControllerBleProfile(name, <any>undefined, { urn })
            case "fortios:index/wirelessControllerBonjourProfile:WirelessControllerBonjourProfile":
                return new WirelessControllerBonjourProfile(name, <any>undefined, { urn })
            case "fortios:index/wirelessControllerGlobal:WirelessControllerGlobal":
                return new WirelessControllerGlobal(name, <any>undefined, { urn })
            case "fortios:index/wirelessControllerHotspot20Anqp3GppCellular:WirelessControllerHotspot20Anqp3GppCellular":
                return new WirelessControllerHotspot20Anqp3GppCellular(name, <any>undefined, { urn })
            case "fortios:index/wirelessControllerHotspot20AnqpIpAddressType:WirelessControllerHotspot20AnqpIpAddressType":
                return new WirelessControllerHotspot20AnqpIpAddressType(name, <any>undefined, { urn })
            case "fortios:index/wirelessControllerHotspot20AnqpNaiRealm:WirelessControllerHotspot20AnqpNaiRealm":
                return new WirelessControllerHotspot20AnqpNaiRealm(name, <any>undefined, { urn })
            case "fortios:index/wirelessControllerHotspot20AnqpNetworkAuthType:WirelessControllerHotspot20AnqpNetworkAuthType":
                return new WirelessControllerHotspot20AnqpNetworkAuthType(name, <any>undefined, { urn })
            case "fortios:index/wirelessControllerHotspot20AnqpRoamingConsortium:WirelessControllerHotspot20AnqpRoamingConsortium":
                return new WirelessControllerHotspot20AnqpRoamingConsortium(name, <any>undefined, { urn })
            case "fortios:index/wirelessControllerHotspot20AnqpVenueName:WirelessControllerHotspot20AnqpVenueName":
                return new WirelessControllerHotspot20AnqpVenueName(name, <any>undefined, { urn })
            case "fortios:index/wirelessControllerHotspot20AnqpVenueUrl:WirelessControllerHotspot20AnqpVenueUrl":
                return new WirelessControllerHotspot20AnqpVenueUrl(name, <any>undefined, { urn })
            case "fortios:index/wirelessControllerHotspot20H2QpAdviceOfCharge:WirelessControllerHotspot20H2QpAdviceOfCharge":
                return new WirelessControllerHotspot20H2QpAdviceOfCharge(name, <any>undefined, { urn })
            case "fortios:index/wirelessControllerHotspot20H2QpConnCapability:WirelessControllerHotspot20H2QpConnCapability":
                return new WirelessControllerHotspot20H2QpConnCapability(name, <any>undefined, { urn })
            case "fortios:index/wirelessControllerHotspot20H2QpOperatorName:WirelessControllerHotspot20H2QpOperatorName":
                return new WirelessControllerHotspot20H2QpOperatorName(name, <any>undefined, { urn })
            case "fortios:index/wirelessControllerHotspot20H2QpOsuProvider:WirelessControllerHotspot20H2QpOsuProvider":
                return new WirelessControllerHotspot20H2QpOsuProvider(name, <any>undefined, { urn })
            case "fortios:index/wirelessControllerHotspot20H2QpOsuProviderNai:WirelessControllerHotspot20H2QpOsuProviderNai":
                return new WirelessControllerHotspot20H2QpOsuProviderNai(name, <any>undefined, { urn })
            case "fortios:index/wirelessControllerHotspot20H2QpTermsAndConditions:WirelessControllerHotspot20H2QpTermsAndConditions":
                return new WirelessControllerHotspot20H2QpTermsAndConditions(name, <any>undefined, { urn })
            case "fortios:index/wirelessControllerHotspot20H2QpWanMetric:WirelessControllerHotspot20H2QpWanMetric":
                return new WirelessControllerHotspot20H2QpWanMetric(name, <any>undefined, { urn })
            case "fortios:index/wirelessControllerHotspot20HsProfile:WirelessControllerHotspot20HsProfile":
                return new WirelessControllerHotspot20HsProfile(name, <any>undefined, { urn })
            case "fortios:index/wirelessControllerHotspot20Icon:WirelessControllerHotspot20Icon":
                return new WirelessControllerHotspot20Icon(name, <any>undefined, { urn })
            case "fortios:index/wirelessControllerHotspot20QosMap:WirelessControllerHotspot20QosMap":
                return new WirelessControllerHotspot20QosMap(name, <any>undefined, { urn })
            case "fortios:index/wirelessControllerInterController:WirelessControllerInterController":
                return new WirelessControllerInterController(name, <any>undefined, { urn })
            case "fortios:index/wirelessControllerLog:WirelessControllerLog":
                return new WirelessControllerLog(name, <any>undefined, { urn })
            case "fortios:index/wirelessControllerMpskProfile:WirelessControllerMpskProfile":
                return new WirelessControllerMpskProfile(name, <any>undefined, { urn })
            case "fortios:index/wirelessControllerNacProfile:WirelessControllerNacProfile":
                return new WirelessControllerNacProfile(name, <any>undefined, { urn })
            case "fortios:index/wirelessControllerQosProfile:WirelessControllerQosProfile":
                return new WirelessControllerQosProfile(name, <any>undefined, { urn })
            case "fortios:index/wirelessControllerRegion:WirelessControllerRegion":
                return new WirelessControllerRegion(name, <any>undefined, { urn })
            case "fortios:index/wirelessControllerSetting:WirelessControllerSetting":
                return new WirelessControllerSetting(name, <any>undefined, { urn })
            case "fortios:index/wirelessControllerSnmp:WirelessControllerSnmp":
                return new WirelessControllerSnmp(name, <any>undefined, { urn })
            case "fortios:index/wirelessControllerSsidPolicy:WirelessControllerSsidPolicy":
                return new WirelessControllerSsidPolicy(name, <any>undefined, { urn })
            case "fortios:index/wirelessControllerSyslogProfile:WirelessControllerSyslogProfile":
                return new WirelessControllerSyslogProfile(name, <any>undefined, { urn })
            case "fortios:index/wirelessControllerTimers:WirelessControllerTimers":
                return new WirelessControllerTimers(name, <any>undefined, { urn })
            case "fortios:index/wirelessControllerUtmProfile:WirelessControllerUtmProfile":
                return new WirelessControllerUtmProfile(name, <any>undefined, { urn })
            case "fortios:index/wirelessControllerVap:WirelessControllerVap":
                return new WirelessControllerVap(name, <any>undefined, { urn })
            case "fortios:index/wirelessControllerVapGroup:WirelessControllerVapGroup":
                return new WirelessControllerVapGroup(name, <any>undefined, { urn })
            case "fortios:index/wirelessControllerWagProfile:WirelessControllerWagProfile":
                return new WirelessControllerWagProfile(name, <any>undefined, { urn })
            case "fortios:index/wirelessControllerWidsProfile:WirelessControllerWidsProfile":
                return new WirelessControllerWidsProfile(name, <any>undefined, { urn })
            case "fortios:index/wirelessControllerWtp:WirelessControllerWtp":
                return new WirelessControllerWtp(name, <any>undefined, { urn })
            case "fortios:index/wirelessControllerWtpGroup:WirelessControllerWtpGroup":
                return new WirelessControllerWtpGroup(name, <any>undefined, { urn })
            case "fortios:index/wirelessControllerWtpProfile:WirelessControllerWtpProfile":
                return new WirelessControllerWtpProfile(name, <any>undefined, { urn })
            default:
                throw new Error(`unknown resource type ${type}`);
        }
    },
};
pulumi.runtime.registerResourceModule("fortios", "index/alertemailSetting", _module)
pulumi.runtime.registerResourceModule("fortios", "index/antivirusHeuristic", _module)
pulumi.runtime.registerResourceModule("fortios", "index/antivirusProfile", _module)
pulumi.runtime.registerResourceModule("fortios", "index/antivirusQuarantine", _module)
pulumi.runtime.registerResourceModule("fortios", "index/antivirusSettings", _module)
pulumi.runtime.registerResourceModule("fortios", "index/applicationCustom", _module)
pulumi.runtime.registerResourceModule("fortios", "index/applicationGroup", _module)
pulumi.runtime.registerResourceModule("fortios", "index/applicationList", _module)
pulumi.runtime.registerResourceModule("fortios", "index/applicationName", _module)
pulumi.runtime.registerResourceModule("fortios", "index/applicationRuleSettings", _module)
pulumi.runtime.registerResourceModule("fortios", "index/authenticationRule", _module)
pulumi.runtime.registerResourceModule("fortios", "index/authenticationScheme", _module)
pulumi.runtime.registerResourceModule("fortios", "index/authenticationSetting", _module)
pulumi.runtime.registerResourceModule("fortios", "index/automationSetting", _module)
pulumi.runtime.registerResourceModule("fortios", "index/certificateCa", _module)
pulumi.runtime.registerResourceModule("fortios", "index/certificateCrl", _module)
pulumi.runtime.registerResourceModule("fortios", "index/certificateLocal", _module)
pulumi.runtime.registerResourceModule("fortios", "index/certificateRemote", _module)
pulumi.runtime.registerResourceModule("fortios", "index/cifsDomainController", _module)
pulumi.runtime.registerResourceModule("fortios", "index/cifsProfile", _module)
pulumi.runtime.registerResourceModule("fortios", "index/credentialStoreDomainController", _module)
pulumi.runtime.registerResourceModule("fortios", "index/dlpDataType", _module)
pulumi.runtime.registerResourceModule("fortios", "index/dlpDictionary", _module)
pulumi.runtime.registerResourceModule("fortios", "index/dlpFilepattern", _module)
pulumi.runtime.registerResourceModule("fortios", "index/dlpFpDocSource", _module)
pulumi.runtime.registerResourceModule("fortios", "index/dlpFpSensitivity", _module)
pulumi.runtime.registerResourceModule("fortios", "index/dlpProfile", _module)
pulumi.runtime.registerResourceModule("fortios", "index/dlpSensitivity", _module)
pulumi.runtime.registerResourceModule("fortios", "index/dlpSensor", _module)
pulumi.runtime.registerResourceModule("fortios", "index/dlpSettings", _module)
pulumi.runtime.registerResourceModule("fortios", "index/dnsfilterDomainFilter", _module)
pulumi.runtime.registerResourceModule("fortios", "index/dnsfilterProfile", _module)
pulumi.runtime.registerResourceModule("fortios", "index/dpdkCpus", _module)
pulumi.runtime.registerResourceModule("fortios", "index/dpdkGlobal", _module)
pulumi.runtime.registerResourceModule("fortios", "index/emailfilterBlockAllowList", _module)
pulumi.runtime.registerResourceModule("fortios", "index/emailfilterBwl", _module)
pulumi.runtime.registerResourceModule("fortios", "index/emailfilterBword", _module)
pulumi.runtime.registerResourceModule("fortios", "index/emailfilterDnsbl", _module)
pulumi.runtime.registerResourceModule("fortios", "index/emailfilterFortishield", _module)
pulumi.runtime.registerResourceModule("fortios", "index/emailfilterIptrust", _module)
pulumi.runtime.registerResourceModule("fortios", "index/emailfilterMheader", _module)
pulumi.runtime.registerResourceModule("fortios", "index/emailfilterOptions", _module)
pulumi.runtime.registerResourceModule("fortios", "index/emailfilterProfile", _module)
pulumi.runtime.registerResourceModule("fortios", "index/endpointControlClient", _module)
pulumi.runtime.registerResourceModule("fortios", "index/endpointControlFctems", _module)
pulumi.runtime.registerResourceModule("fortios", "index/endpointControlForticlientEms", _module)
pulumi.runtime.registerResourceModule("fortios", "index/endpointControlForticlientRegistrationSync", _module)
pulumi.runtime.registerResourceModule("fortios", "index/endpointControlProfile", _module)
pulumi.runtime.registerResourceModule("fortios", "index/endpointControlRegisteredForticlient", _module)
pulumi.runtime.registerResourceModule("fortios", "index/endpointControlSettings", _module)
pulumi.runtime.registerResourceModule("fortios", "index/extenderControllerDataplan", _module)
pulumi.runtime.registerResourceModule("fortios", "index/extenderControllerExtender", _module)
pulumi.runtime.registerResourceModule("fortios", "index/extenderControllerExtender1", _module)
pulumi.runtime.registerResourceModule("fortios", "index/extenderControllerExtenderProfile", _module)
pulumi.runtime.registerResourceModule("fortios", "index/extensionControllerDataplan", _module)
pulumi.runtime.registerResourceModule("fortios", "index/extensionControllerExtender", _module)
pulumi.runtime.registerResourceModule("fortios", "index/extensionControllerExtenderProfile", _module)
pulumi.runtime.registerResourceModule("fortios", "index/extensionControllerFortigate", _module)
pulumi.runtime.registerResourceModule("fortios", "index/extensionControllerFortigateProfile", _module)
pulumi.runtime.registerResourceModule("fortios", "index/fileFilterProfile", _module)
pulumi.runtime.registerResourceModule("fortios", "index/firewallAccessProxy", _module)
pulumi.runtime.registerResourceModule("fortios", "index/firewallAccessProxy6", _module)
pulumi.runtime.registerResourceModule("fortios", "index/firewallAccessProxySshClientCert", _module)
pulumi.runtime.registerResourceModule("fortios", "index/firewallAccessProxyVirtualHost", _module)
pulumi.runtime.registerResourceModule("fortios", "index/firewallAddress", _module)
pulumi.runtime.registerResourceModule("fortios", "index/firewallAddress6", _module)
pulumi.runtime.registerResourceModule("fortios", "index/firewallAddress6Template", _module)
pulumi.runtime.registerResourceModule("fortios", "index/firewallAddrgrp", _module)
pulumi.runtime.registerResourceModule("fortios", "index/firewallAddrgrp6", _module)
pulumi.runtime.registerResourceModule("fortios", "index/firewallAuthPortal", _module)
pulumi.runtime.registerResourceModule("fortios", "index/firewallCentralSnatMap", _module)
pulumi.runtime.registerResourceModule("fortios", "index/firewallCentralsnatmapMove", _module)
pulumi.runtime.registerResourceModule("fortios", "index/firewallCentralsnatmapSort", _module)
pulumi.runtime.registerResourceModule("fortios", "index/firewallCity", _module)
pulumi.runtime.registerResourceModule("fortios", "index/firewallConsolidatedPolicy", _module)
pulumi.runtime.registerResourceModule("fortios", "index/firewallCountry", _module)
pulumi.runtime.registerResourceModule("fortios", "index/firewallDecryptedTrafficMirror", _module)
pulumi.runtime.registerResourceModule("fortios", "index/firewallDnstranslation", _module)
pulumi.runtime.registerResourceModule("fortios", "index/firewallDosPolicy", _module)
pulumi.runtime.registerResourceModule("fortios", "index/firewallDosPolicy6", _module)
pulumi.runtime.registerResourceModule("fortios", "index/firewallGlobal", _module)
pulumi.runtime.registerResourceModule("fortios", "index/firewallIdentityBasedRoute", _module)
pulumi.runtime.registerResourceModule("fortios", "index/firewallInterfacePolicy", _module)
pulumi.runtime.registerResourceModule("fortios", "index/firewallInterfacePolicy6", _module)
pulumi.runtime.registerResourceModule("fortios", "index/firewallInternetService", _module)
pulumi.runtime.registerResourceModule("fortios", "index/firewallInternetServiceAddition", _module)
pulumi.runtime.registerResourceModule("fortios", "index/firewallInternetServiceAppend", _module)
pulumi.runtime.registerResourceModule("fortios", "index/firewallInternetServiceBotnet", _module)
pulumi.runtime.registerResourceModule("fortios", "index/firewallInternetServiceCustom", _module)
pulumi.runtime.registerResourceModule("fortios", "index/firewallInternetServiceCustomGroup", _module)
pulumi.runtime.registerResourceModule("fortios", "index/firewallInternetServiceDefinition", _module)
pulumi.runtime.registerResourceModule("fortios", "index/firewallInternetServiceExtension", _module)
pulumi.runtime.registerResourceModule("fortios", "index/firewallInternetServiceGroup", _module)
pulumi.runtime.registerResourceModule("fortios", "index/firewallInternetServiceIpblReason", _module)
pulumi.runtime.registerResourceModule("fortios", "index/firewallInternetServiceIpblVendor", _module)
pulumi.runtime.registerResourceModule("fortios", "index/firewallInternetServiceList", _module)
pulumi.runtime.registerResourceModule("fortios", "index/firewallInternetServiceName", _module)
pulumi.runtime.registerResourceModule("fortios", "index/firewallInternetServiceOwner", _module)
pulumi.runtime.registerResourceModule("fortios", "index/firewallInternetServiceReputation", _module)
pulumi.runtime.registerResourceModule("fortios", "index/firewallIpTranslation", _module)
pulumi.runtime.registerResourceModule("fortios", "index/firewallIpmacbindingSetting", _module)
pulumi.runtime.registerResourceModule("fortios", "index/firewallIpmacbindingTable", _module)
pulumi.runtime.registerResourceModule("fortios", "index/firewallIppool", _module)
pulumi.runtime.registerResourceModule("fortios", "index/firewallIppool6", _module)
pulumi.runtime.registerResourceModule("fortios", "index/firewallIpv6EhFilter", _module)
pulumi.runtime.registerResourceModule("fortios", "index/firewallLdbMonitor", _module)
pulumi.runtime.registerResourceModule("fortios", "index/firewallLocalInPolicy", _module)
pulumi.runtime.registerResourceModule("fortios", "index/firewallLocalInPolicy6", _module)
pulumi.runtime.registerResourceModule("fortios", "index/firewallMulticastAddress", _module)
pulumi.runtime.registerResourceModule("fortios", "index/firewallMulticastAddress6", _module)
pulumi.runtime.registerResourceModule("fortios", "index/firewallMulticastPolicy", _module)
pulumi.runtime.registerResourceModule("fortios", "index/firewallMulticastPolicy6", _module)
pulumi.runtime.registerResourceModule("fortios", "index/firewallNetworkServiceDynamic", _module)
pulumi.runtime.registerResourceModule("fortios", "index/firewallObjectAddress", _module)
pulumi.runtime.registerResourceModule("fortios", "index/firewallObjectAddressGroup", _module)
pulumi.runtime.registerResourceModule("fortios", "index/firewallObjectIPPool", _module)
pulumi.runtime.registerResourceModule("fortios", "index/firewallObjectService", _module)
pulumi.runtime.registerResourceModule("fortios", "index/firewallObjectServiceCategory", _module)
pulumi.runtime.registerResourceModule("fortios", "index/firewallObjectServiceGroup", _module)
pulumi.runtime.registerResourceModule("fortios", "index/firewallObjectVip", _module)
pulumi.runtime.registerResourceModule("fortios", "index/firewallObjectVipGroup", _module)
pulumi.runtime.registerResourceModule("fortios", "index/firewallPolicy", _module)
pulumi.runtime.registerResourceModule("fortios", "index/firewallPolicy46", _module)
pulumi.runtime.registerResourceModule("fortios", "index/firewallPolicy6", _module)
pulumi.runtime.registerResourceModule("fortios", "index/firewallPolicy64", _module)
pulumi.runtime.registerResourceModule("fortios", "index/firewallProfileGroup", _module)
pulumi.runtime.registerResourceModule("fortios", "index/firewallProfileProtocolOptions", _module)
pulumi.runtime.registerResourceModule("fortios", "index/firewallProxyAddress", _module)
pulumi.runtime.registerResourceModule("fortios", "index/firewallProxyAddrgrp", _module)
pulumi.runtime.registerResourceModule("fortios", "index/firewallProxyPolicy", _module)
pulumi.runtime.registerResourceModule("fortios", "index/firewallProxypolicyMove", _module)
pulumi.runtime.registerResourceModule("fortios", "index/firewallProxypolicySort", _module)
pulumi.runtime.registerResourceModule("fortios", "index/firewallRegion", _module)
pulumi.runtime.registerResourceModule("fortios", "index/firewallScheduleGroup", _module)
pulumi.runtime.registerResourceModule("fortios", "index/firewallScheduleOnetime", _module)
pulumi.runtime.registerResourceModule("fortios", "index/firewallScheduleRecurring", _module)
pulumi.runtime.registerResourceModule("fortios", "index/firewallSecurityPolicy", _module)
pulumi.runtime.registerResourceModule("fortios", "index/firewallSecurityPolicy1", _module)
pulumi.runtime.registerResourceModule("fortios", "index/firewallSecurityPolicySeq", _module)
pulumi.runtime.registerResourceModule("fortios", "index/firewallSecurityPolicySort", _module)
pulumi.runtime.registerResourceModule("fortios", "index/firewallServiceCategory", _module)
pulumi.runtime.registerResourceModule("fortios", "index/firewallServiceCustom", _module)
pulumi.runtime.registerResourceModule("fortios", "index/firewallServiceGroup", _module)
pulumi.runtime.registerResourceModule("fortios", "index/firewallShaperPerIpShaper", _module)
pulumi.runtime.registerResourceModule("fortios", "index/firewallShaperTrafficShaper", _module)
pulumi.runtime.registerResourceModule("fortios", "index/firewallShapingPolicy", _module)
pulumi.runtime.registerResourceModule("fortios", "index/firewallShapingProfile", _module)
pulumi.runtime.registerResourceModule("fortios", "index/firewallSniffer", _module)
pulumi.runtime.registerResourceModule("fortios", "index/firewallSshHostKey", _module)
pulumi.runtime.registerResourceModule("fortios", "index/firewallSshLocalCa", _module)
pulumi.runtime.registerResourceModule("fortios", "index/firewallSshLocalKey", _module)
pulumi.runtime.registerResourceModule("fortios", "index/firewallSshSetting", _module)
pulumi.runtime.registerResourceModule("fortios", "index/firewallSslServer", _module)
pulumi.runtime.registerResourceModule("fortios", "index/firewallSslSetting", _module)
pulumi.runtime.registerResourceModule("fortios", "index/firewallSslSshProfile", _module)
pulumi.runtime.registerResourceModule("fortios", "index/firewallTrafficClass", _module)
pulumi.runtime.registerResourceModule("fortios", "index/firewallTtlPolicy", _module)
pulumi.runtime.registerResourceModule("fortios", "index/firewallVendorMac", _module)
pulumi.runtime.registerResourceModule("fortios", "index/firewallVip", _module)
pulumi.runtime.registerResourceModule("fortios", "index/firewallVip46", _module)
pulumi.runtime.registerResourceModule("fortios", "index/firewallVip6", _module)
pulumi.runtime.registerResourceModule("fortios", "index/firewallVip64", _module)
pulumi.runtime.registerResourceModule("fortios", "index/firewallVipgrp", _module)
pulumi.runtime.registerResourceModule("fortios", "index/firewallVipgrp46", _module)
pulumi.runtime.registerResourceModule("fortios", "index/firewallVipgrp6", _module)
pulumi.runtime.registerResourceModule("fortios", "index/firewallVipgrp64", _module)
pulumi.runtime.registerResourceModule("fortios", "index/firewallWildcardFqdnCustom", _module)
pulumi.runtime.registerResourceModule("fortios", "index/firewallWildcardFqdnGroup", _module)
pulumi.runtime.registerResourceModule("fortios", "index/fortimanagerDVMDevice", _module)
pulumi.runtime.registerResourceModule("fortios", "index/fortimanagerDVMInstallDev", _module)
pulumi.runtime.registerResourceModule("fortios", "index/fortimanagerDVMInstallPolicyPackage", _module)
pulumi.runtime.registerResourceModule("fortios", "index/fortimanagerDVMScript", _module)
pulumi.runtime.registerResourceModule("fortios", "index/fortimanagerDVMScriptExecute", _module)
pulumi.runtime.registerResourceModule("fortios", "index/fortimanagerFirewallObjectAddress", _module)
pulumi.runtime.registerResourceModule("fortios", "index/fortimanagerFirewallObjectIppool", _module)
pulumi.runtime.registerResourceModule("fortios", "index/fortimanagerFirewallObjectService", _module)
pulumi.runtime.registerResourceModule("fortios", "index/fortimanagerFirewallObjectVip", _module)
pulumi.runtime.registerResourceModule("fortios", "index/fortimanagerFirewallSecurityPolicy", _module)
pulumi.runtime.registerResourceModule("fortios", "index/fortimanagerFirewallSecurityPolicyPackage", _module)
pulumi.runtime.registerResourceModule("fortios", "index/fortimanagerJSONRPCRequest", _module)
pulumi.runtime.registerResourceModule("fortios", "index/fortimanagerObjectAdomRevision", _module)
pulumi.runtime.registerResourceModule("fortios", "index/fortimanagerSystemAdmin", _module)
pulumi.runtime.registerResourceModule("fortios", "index/fortimanagerSystemAdminProfiles", _module)
pulumi.runtime.registerResourceModule("fortios", "index/fortimanagerSystemAdminUser", _module)
pulumi.runtime.registerResourceModule("fortios", "index/fortimanagerSystemAdom", _module)
pulumi.runtime.registerResourceModule("fortios", "index/fortimanagerSystemDNS", _module)
pulumi.runtime.registerResourceModule("fortios", "index/fortimanagerSystemGlobal", _module)
pulumi.runtime.registerResourceModule("fortios", "index/fortimanagerSystemLicenseFortiCare", _module)
pulumi.runtime.registerResourceModule("fortios", "index/fortimanagerSystemLicenseVM", _module)
pulumi.runtime.registerResourceModule("fortios", "index/fortimanagerSystemNTP", _module)
pulumi.runtime.registerResourceModule("fortios", "index/fortimanagerSystemNetworkInterface", _module)
pulumi.runtime.registerResourceModule("fortios", "index/fortimanagerSystemNetworkRoute", _module)
pulumi.runtime.registerResourceModule("fortios", "index/fortimanagerSystemSyslogServer", _module)
pulumi.runtime.registerResourceModule("fortios", "index/ftpProxyExplicit", _module)
pulumi.runtime.registerResourceModule("fortios", "index/icapProfile", _module)
pulumi.runtime.registerResourceModule("fortios", "index/icapServer", _module)
pulumi.runtime.registerResourceModule("fortios", "index/icapServerGroup", _module)
pulumi.runtime.registerResourceModule("fortios", "index/ipsCustom", _module)
pulumi.runtime.registerResourceModule("fortios", "index/ipsDecoder", _module)
pulumi.runtime.registerResourceModule("fortios", "index/ipsGlobal", _module)
pulumi.runtime.registerResourceModule("fortios", "index/ipsRule", _module)
pulumi.runtime.registerResourceModule("fortios", "index/ipsRuleSettings", _module)
pulumi.runtime.registerResourceModule("fortios", "index/ipsSensor", _module)
pulumi.runtime.registerResourceModule("fortios", "index/ipsSettings", _module)
pulumi.runtime.registerResourceModule("fortios", "index/ipsViewMap", _module)
pulumi.runtime.registerResourceModule("fortios", "index/jSONGenericAPI", _module)
pulumi.runtime.registerResourceModule("fortios", "index/logCustomField", _module)
pulumi.runtime.registerResourceModule("fortios", "index/logDiskFilter", _module)
pulumi.runtime.registerResourceModule("fortios", "index/logDiskSetting", _module)
pulumi.runtime.registerResourceModule("fortios", "index/logEventfilter", _module)
pulumi.runtime.registerResourceModule("fortios", "index/logFortiAnalyzerSettingLegacy", _module)
pulumi.runtime.registerResourceModule("fortios", "index/logFortianalyzer2Filter", _module)
pulumi.runtime.registerResourceModule("fortios", "index/logFortianalyzer2OverrideFilter", _module)
pulumi.runtime.registerResourceModule("fortios", "index/logFortianalyzer2OverrideSetting", _module)
pulumi.runtime.registerResourceModule("fortios", "index/logFortianalyzer2Setting", _module)
pulumi.runtime.registerResourceModule("fortios", "index/logFortianalyzer3Filter", _module)
pulumi.runtime.registerResourceModule("fortios", "index/logFortianalyzer3OverrideFilter", _module)
pulumi.runtime.registerResourceModule("fortios", "index/logFortianalyzer3OverrideSetting", _module)
pulumi.runtime.registerResourceModule("fortios", "index/logFortianalyzer3Setting", _module)
pulumi.runtime.registerResourceModule("fortios", "index/logFortianalyzerCloudFilter", _module)
pulumi.runtime.registerResourceModule("fortios", "index/logFortianalyzerCloudOverrideFilter", _module)
pulumi.runtime.registerResourceModule("fortios", "index/logFortianalyzerCloudOverrideSetting", _module)
pulumi.runtime.registerResourceModule("fortios", "index/logFortianalyzerCloudSetting", _module)
pulumi.runtime.registerResourceModule("fortios", "index/logFortianalyzerFilter", _module)
pulumi.runtime.registerResourceModule("fortios", "index/logFortianalyzerOverrideFilter", _module)
pulumi.runtime.registerResourceModule("fortios", "index/logFortianalyzerOverrideSetting", _module)
pulumi.runtime.registerResourceModule("fortios", "index/logFortianalyzerSetting", _module)
pulumi.runtime.registerResourceModule("fortios", "index/logFortiguardFilter", _module)
pulumi.runtime.registerResourceModule("fortios", "index/logFortiguardOverrideFilter", _module)
pulumi.runtime.registerResourceModule("fortios", "index/logFortiguardOverrideSetting", _module)
pulumi.runtime.registerResourceModule("fortios", "index/logFortiguardSetting", _module)
pulumi.runtime.registerResourceModule("fortios", "index/logGuiDisplay", _module)
pulumi.runtime.registerResourceModule("fortios", "index/logMemoryFilter", _module)
pulumi.runtime.registerResourceModule("fortios", "index/logMemoryGlobalSetting", _module)
pulumi.runtime.registerResourceModule("fortios", "index/logMemorySetting", _module)
pulumi.runtime.registerResourceModule("fortios", "index/logNullDeviceFilter", _module)
pulumi.runtime.registerResourceModule("fortios", "index/logNullDeviceSetting", _module)
pulumi.runtime.registerResourceModule("fortios", "index/logSetting", _module)
pulumi.runtime.registerResourceModule("fortios", "index/logSyslogSetting", _module)
pulumi.runtime.registerResourceModule("fortios", "index/logSyslogd2Filter", _module)
pulumi.runtime.registerResourceModule("fortios", "index/logSyslogd2OverrideFilter", _module)
pulumi.runtime.registerResourceModule("fortios", "index/logSyslogd2OverrideSetting", _module)
pulumi.runtime.registerResourceModule("fortios", "index/logSyslogd2Setting", _module)
pulumi.runtime.registerResourceModule("fortios", "index/logSyslogd3Filter", _module)
pulumi.runtime.registerResourceModule("fortios", "index/logSyslogd3OverrideFilter", _module)
pulumi.runtime.registerResourceModule("fortios", "index/logSyslogd3OverrideSetting", _module)
pulumi.runtime.registerResourceModule("fortios", "index/logSyslogd3Setting", _module)
pulumi.runtime.registerResourceModule("fortios", "index/logSyslogd4Filter", _module)
pulumi.runtime.registerResourceModule("fortios", "index/logSyslogd4OverrideFilter", _module)
pulumi.runtime.registerResourceModule("fortios", "index/logSyslogd4OverrideSetting", _module)
pulumi.runtime.registerResourceModule("fortios", "index/logSyslogd4Setting", _module)
pulumi.runtime.registerResourceModule("fortios", "index/logSyslogdFilter", _module)
pulumi.runtime.registerResourceModule("fortios", "index/logSyslogdOverrideFilter", _module)
pulumi.runtime.registerResourceModule("fortios", "index/logSyslogdOverrideSetting", _module)
pulumi.runtime.registerResourceModule("fortios", "index/logSyslogdSetting", _module)
pulumi.runtime.registerResourceModule("fortios", "index/logTacacsAccounting2Filter", _module)
pulumi.runtime.registerResourceModule("fortios", "index/logTacacsAccounting2Setting", _module)
pulumi.runtime.registerResourceModule("fortios", "index/logTacacsAccounting3Filter", _module)
pulumi.runtime.registerResourceModule("fortios", "index/logTacacsAccounting3Setting", _module)
pulumi.runtime.registerResourceModule("fortios", "index/logTacacsAccountingFilter", _module)
pulumi.runtime.registerResourceModule("fortios", "index/logTacacsAccountingSetting", _module)
pulumi.runtime.registerResourceModule("fortios", "index/logThreatWeight", _module)
pulumi.runtime.registerResourceModule("fortios", "index/logWebtrendsFilter", _module)
pulumi.runtime.registerResourceModule("fortios", "index/logWebtrendsSetting", _module)
pulumi.runtime.registerResourceModule("fortios", "index/networkingInterfacePort", _module)
pulumi.runtime.registerResourceModule("fortios", "index/networkingRouteStatic", _module)
pulumi.runtime.registerResourceModule("fortios", "index/nsxtServiceChain", _module)
pulumi.runtime.registerResourceModule("fortios", "index/nsxtSetting", _module)
pulumi.runtime.registerResourceModule("fortios", "index/reportChart", _module)
pulumi.runtime.registerResourceModule("fortios", "index/reportDataset", _module)
pulumi.runtime.registerResourceModule("fortios", "index/reportLayout", _module)
pulumi.runtime.registerResourceModule("fortios", "index/reportSetting", _module)
pulumi.runtime.registerResourceModule("fortios", "index/reportStyle", _module)
pulumi.runtime.registerResourceModule("fortios", "index/reportTheme", _module)
pulumi.runtime.registerResourceModule("fortios", "index/routerAccessList", _module)
pulumi.runtime.registerResourceModule("fortios", "index/routerAccessList6", _module)
pulumi.runtime.registerResourceModule("fortios", "index/routerAspathList", _module)
pulumi.runtime.registerResourceModule("fortios", "index/routerAuthPath", _module)
pulumi.runtime.registerResourceModule("fortios", "index/routerBfd", _module)
pulumi.runtime.registerResourceModule("fortios", "index/routerBfd6", _module)
pulumi.runtime.registerResourceModule("fortios", "index/routerBgp", _module)
pulumi.runtime.registerResourceModule("fortios", "index/routerCommunityList", _module)
pulumi.runtime.registerResourceModule("fortios", "index/routerIsis", _module)
pulumi.runtime.registerResourceModule("fortios", "index/routerKeyChain", _module)
pulumi.runtime.registerResourceModule("fortios", "index/routerMulticast", _module)
pulumi.runtime.registerResourceModule("fortios", "index/routerMulticast6", _module)
pulumi.runtime.registerResourceModule("fortios", "index/routerMulticastFlow", _module)
pulumi.runtime.registerResourceModule("fortios", "index/routerOspf", _module)
pulumi.runtime.registerResourceModule("fortios", "index/routerOspf6", _module)
pulumi.runtime.registerResourceModule("fortios", "index/routerPolicy", _module)
pulumi.runtime.registerResourceModule("fortios", "index/routerPolicy6", _module)
pulumi.runtime.registerResourceModule("fortios", "index/routerPrefixList", _module)
pulumi.runtime.registerResourceModule("fortios", "index/routerPrefixList6", _module)
pulumi.runtime.registerResourceModule("fortios", "index/routerRip", _module)
pulumi.runtime.registerResourceModule("fortios", "index/routerRipng", _module)
pulumi.runtime.registerResourceModule("fortios", "index/routerRouteMap", _module)
pulumi.runtime.registerResourceModule("fortios", "index/routerSetting", _module)
pulumi.runtime.registerResourceModule("fortios", "index/routerStatic", _module)
pulumi.runtime.registerResourceModule("fortios", "index/routerStatic6", _module)
pulumi.runtime.registerResourceModule("fortios", "index/routerbgpNeighbor", _module)
pulumi.runtime.registerResourceModule("fortios", "index/routerbgpNetwork", _module)
pulumi.runtime.registerResourceModule("fortios", "index/routerbgpNetwork6", _module)
pulumi.runtime.registerResourceModule("fortios", "index/routerospf6Ospf6Interface", _module)
pulumi.runtime.registerResourceModule("fortios", "index/routerospfNeighbor", _module)
pulumi.runtime.registerResourceModule("fortios", "index/routerospfNetwork", _module)
pulumi.runtime.registerResourceModule("fortios", "index/routerospfOspfInterface", _module)
pulumi.runtime.registerResourceModule("fortios", "index/sctpFilterProfile", _module)
pulumi.runtime.registerResourceModule("fortios", "index/spamfilterBwl", _module)
pulumi.runtime.registerResourceModule("fortios", "index/spamfilterBword", _module)
pulumi.runtime.registerResourceModule("fortios", "index/spamfilterDnsbl", _module)
pulumi.runtime.registerResourceModule("fortios", "index/spamfilterFortishield", _module)
pulumi.runtime.registerResourceModule("fortios", "index/spamfilterIptrust", _module)
pulumi.runtime.registerResourceModule("fortios", "index/spamfilterMheader", _module)
pulumi.runtime.registerResourceModule("fortios", "index/spamfilterOptions", _module)
pulumi.runtime.registerResourceModule("fortios", "index/spamfilterProfile", _module)
pulumi.runtime.registerResourceModule("fortios", "index/sshFilterProfile", _module)
pulumi.runtime.registerResourceModule("fortios", "index/switchController8021XSettings", _module)
pulumi.runtime.registerResourceModule("fortios", "index/switchControllerAutoConfigCustom", _module)
pulumi.runtime.registerResourceModule("fortios", "index/switchControllerAutoConfigDefault", _module)
pulumi.runtime.registerResourceModule("fortios", "index/switchControllerAutoConfigPolicy", _module)
pulumi.runtime.registerResourceModule("fortios", "index/switchControllerCustomCommand", _module)
pulumi.runtime.registerResourceModule("fortios", "index/switchControllerDynamicPortPolicy", _module)
pulumi.runtime.registerResourceModule("fortios", "index/switchControllerFlowTracking", _module)
pulumi.runtime.registerResourceModule("fortios", "index/switchControllerFortilinkSettings", _module)
pulumi.runtime.registerResourceModule("fortios", "index/switchControllerGlobal", _module)
pulumi.runtime.registerResourceModule("fortios", "index/switchControllerIgmpSnooping", _module)
pulumi.runtime.registerResourceModule("fortios", "index/switchControllerInitialConfigTemplate", _module)
pulumi.runtime.registerResourceModule("fortios", "index/switchControllerInitialConfigVlans", _module)
pulumi.runtime.registerResourceModule("fortios", "index/switchControllerLldpProfile", _module)
pulumi.runtime.registerResourceModule("fortios", "index/switchControllerLldpSettings", _module)
pulumi.runtime.registerResourceModule("fortios", "index/switchControllerLocation", _module)
pulumi.runtime.registerResourceModule("fortios", "index/switchControllerMacSyncSettings", _module)
pulumi.runtime.registerResourceModule("fortios", "index/switchControllerManagedSwitch", _module)
pulumi.runtime.registerResourceModule("fortios", "index/switchControllerNacDevice", _module)
pulumi.runtime.registerResourceModule("fortios", "index/switchControllerNacSettings", _module)
pulumi.runtime.registerResourceModule("fortios", "index/switchControllerNetworkMonitorSettings", _module)
pulumi.runtime.registerResourceModule("fortios", "index/switchControllerPortPolicy", _module)
pulumi.runtime.registerResourceModule("fortios", "index/switchControllerPtpPolicy", _module)
pulumi.runtime.registerResourceModule("fortios", "index/switchControllerPtpSettings", _module)
pulumi.runtime.registerResourceModule("fortios", "index/switchControllerQosDot1PMap", _module)
pulumi.runtime.registerResourceModule("fortios", "index/switchControllerQosIpDscpMap", _module)
pulumi.runtime.registerResourceModule("fortios", "index/switchControllerQosQosPolicy", _module)
pulumi.runtime.registerResourceModule("fortios", "index/switchControllerQosQueuePolicy", _module)
pulumi.runtime.registerResourceModule("fortios", "index/switchControllerQuarantine", _module)
pulumi.runtime.registerResourceModule("fortios", "index/switchControllerRemoteLog", _module)
pulumi.runtime.registerResourceModule("fortios", "index/switchControllerSecurityPolicy8021X", _module)
pulumi.runtime.registerResourceModule("fortios", "index/switchControllerSecurityPolicyCaptivePortal", _module)
pulumi.runtime.registerResourceModule("fortios", "index/switchControllerSecurityPolicyLocalAccess", _module)
pulumi.runtime.registerResourceModule("fortios", "index/switchControllerSflow", _module)
pulumi.runtime.registerResourceModule("fortios", "index/switchControllerSnmpCommunity", _module)
pulumi.runtime.registerResourceModule("fortios", "index/switchControllerSnmpSysinfo", _module)
pulumi.runtime.registerResourceModule("fortios", "index/switchControllerSnmpTrapThreshold", _module)
pulumi.runtime.registerResourceModule("fortios", "index/switchControllerSnmpUser", _module)
pulumi.runtime.registerResourceModule("fortios", "index/switchControllerStormControl", _module)
pulumi.runtime.registerResourceModule("fortios", "index/switchControllerStormControlPolicy", _module)
pulumi.runtime.registerResourceModule("fortios", "index/switchControllerStpInstance", _module)
pulumi.runtime.registerResourceModule("fortios", "index/switchControllerStpSettings", _module)
pulumi.runtime.registerResourceModule("fortios", "index/switchControllerSwitchGroup", _module)
pulumi.runtime.registerResourceModule("fortios", "index/switchControllerSwitchInterfaceTag", _module)
pulumi.runtime.registerResourceModule("fortios", "index/switchControllerSwitchLog", _module)
pulumi.runtime.registerResourceModule("fortios", "index/switchControllerSwitchProfile", _module)
pulumi.runtime.registerResourceModule("fortios", "index/switchControllerSystem", _module)
pulumi.runtime.registerResourceModule("fortios", "index/switchControllerTrafficPolicy", _module)
pulumi.runtime.registerResourceModule("fortios", "index/switchControllerTrafficSniffer", _module)
pulumi.runtime.registerResourceModule("fortios", "index/switchControllerVirtualPortPool", _module)
pulumi.runtime.registerResourceModule("fortios", "index/switchControllerVlan", _module)
pulumi.runtime.registerResourceModule("fortios", "index/switchControllerVlanPolicy", _module)
pulumi.runtime.registerResourceModule("fortios", "index/system3GModemCustom", _module)
pulumi.runtime.registerResourceModule("fortios", "index/systemAPIUserSetting", _module)
pulumi.runtime.registerResourceModule("fortios", "index/systemAccprofile", _module)
pulumi.runtime.registerResourceModule("fortios", "index/systemAcme", _module)
pulumi.runtime.registerResourceModule("fortios", "index/systemAdmin", _module)
pulumi.runtime.registerResourceModule("fortios", "index/systemAdminAdministrator", _module)
pulumi.runtime.registerResourceModule("fortios", "index/systemAdminProfiles", _module)
pulumi.runtime.registerResourceModule("fortios", "index/systemAffinityInterrupt", _module)
pulumi.runtime.registerResourceModule("fortios", "index/systemAffinityPacketRedistribution", _module)
pulumi.runtime.registerResourceModule("fortios", "index/systemAlarm", _module)
pulumi.runtime.registerResourceModule("fortios", "index/systemAlias", _module)
pulumi.runtime.registerResourceModule("fortios", "index/systemApiUser", _module)
pulumi.runtime.registerResourceModule("fortios", "index/systemArpTable", _module)
pulumi.runtime.registerResourceModule("fortios", "index/systemAutoInstall", _module)
pulumi.runtime.registerResourceModule("fortios", "index/systemAutoScript", _module)
pulumi.runtime.registerResourceModule("fortios", "index/systemAutomationAction", _module)
pulumi.runtime.registerResourceModule("fortios", "index/systemAutomationDestination", _module)
pulumi.runtime.registerResourceModule("fortios", "index/systemAutomationStitch", _module)
pulumi.runtime.registerResourceModule("fortios", "index/systemAutomationTrigger", _module)
pulumi.runtime.registerResourceModule("fortios", "index/systemAutoupdatePushUpdate", _module)
pulumi.runtime.registerResourceModule("fortios", "index/systemAutoupdateSchedule", _module)
pulumi.runtime.registerResourceModule("fortios", "index/systemAutoupdateTunneling", _module)
pulumi.runtime.registerResourceModule("fortios", "index/systemCentralManagement", _module)
pulumi.runtime.registerResourceModule("fortios", "index/systemClusterSync", _module)
pulumi.runtime.registerResourceModule("fortios", "index/systemConsole", _module)
pulumi.runtime.registerResourceModule("fortios", "index/systemCsf", _module)
pulumi.runtime.registerResourceModule("fortios", "index/systemCustomLanguage", _module)
pulumi.runtime.registerResourceModule("fortios", "index/systemDdns", _module)
pulumi.runtime.registerResourceModule("fortios", "index/systemDedicatedMgmt", _module)
pulumi.runtime.registerResourceModule("fortios", "index/systemDhcp6Server", _module)
pulumi.runtime.registerResourceModule("fortios", "index/systemDhcpServer", _module)
pulumi.runtime.registerResourceModule("fortios", "index/systemDns", _module)
pulumi.runtime.registerResourceModule("fortios", "index/systemDns64", _module)
pulumi.runtime.registerResourceModule("fortios", "index/systemDnsDatabase", _module)
pulumi.runtime.registerResourceModule("fortios", "index/systemDnsServer", _module)
pulumi.runtime.registerResourceModule("fortios", "index/systemDscpBasedPriority", _module)
pulumi.runtime.registerResourceModule("fortios", "index/systemEmailServer", _module)
pulumi.runtime.registerResourceModule("fortios", "index/systemExternalResource", _module)
pulumi.runtime.registerResourceModule("fortios", "index/systemFederatedUpgrade", _module)
pulumi.runtime.registerResourceModule("fortios", "index/systemFipsCc", _module)
pulumi.runtime.registerResourceModule("fortios", "index/systemFm", _module)
pulumi.runtime.registerResourceModule("fortios", "index/systemFortiai", _module)
pulumi.runtime.registerResourceModule("fortios", "index/systemFortiguard", _module)
pulumi.runtime.registerResourceModule("fortios", "index/systemFortimanager", _module)
pulumi.runtime.registerResourceModule("fortios", "index/systemFortindr", _module)
pulumi.runtime.registerResourceModule("fortios", "index/systemFortisandbox", _module)
pulumi.runtime.registerResourceModule("fortios", "index/systemFssoPolling", _module)
pulumi.runtime.registerResourceModule("fortios", "index/systemFtmPush", _module)
pulumi.runtime.registerResourceModule("fortios", "index/systemGeneve", _module)
pulumi.runtime.registerResourceModule("fortios", "index/systemGeoipCountry", _module)
pulumi.runtime.registerResourceModule("fortios", "index/systemGeoipOverride", _module)
pulumi.runtime.registerResourceModule("fortios", "index/systemGlobal", _module)
pulumi.runtime.registerResourceModule("fortios", "index/systemGreTunnel", _module)
pulumi.runtime.registerResourceModule("fortios", "index/systemHa", _module)
pulumi.runtime.registerResourceModule("fortios", "index/systemHaMonitor", _module)
pulumi.runtime.registerResourceModule("fortios", "index/systemIke", _module)
pulumi.runtime.registerResourceModule("fortios", "index/systemInterface", _module)
pulumi.runtime.registerResourceModule("fortios", "index/systemIpam", _module)
pulumi.runtime.registerResourceModule("fortios", "index/systemIpipTunnel", _module)
pulumi.runtime.registerResourceModule("fortios", "index/systemIps", _module)
pulumi.runtime.registerResourceModule("fortios", "index/systemIpsUrlfilterDns", _module)
pulumi.runtime.registerResourceModule("fortios", "index/systemIpsUrlfilterDns6", _module)
pulumi.runtime.registerResourceModule("fortios", "index/systemIpsecAggregate", _module)
pulumi.runtime.registerResourceModule("fortios", "index/systemIpv6NeighborCache", _module)
pulumi.runtime.registerResourceModule("fortios", "index/systemIpv6Tunnel", _module)
pulumi.runtime.registerResourceModule("fortios", "index/systemLicenseFortiCare", _module)
pulumi.runtime.registerResourceModule("fortios", "index/systemLicenseVDOM", _module)
pulumi.runtime.registerResourceModule("fortios", "index/systemLicenseVM", _module)
pulumi.runtime.registerResourceModule("fortios", "index/systemLinkMonitor", _module)
pulumi.runtime.registerResourceModule("fortios", "index/systemLldpNetworkPolicy", _module)
pulumi.runtime.registerResourceModule("fortios", "index/systemLteModem", _module)
pulumi.runtime.registerResourceModule("fortios", "index/systemMacAddressTable", _module)
pulumi.runtime.registerResourceModule("fortios", "index/systemManagementTunnel", _module)
pulumi.runtime.registerResourceModule("fortios", "index/systemMobileTunnel", _module)
pulumi.runtime.registerResourceModule("fortios", "index/systemModem", _module)
pulumi.runtime.registerResourceModule("fortios", "index/systemNat64", _module)
pulumi.runtime.registerResourceModule("fortios", "index/systemNdProxy", _module)
pulumi.runtime.registerResourceModule("fortios", "index/systemNetflow", _module)
pulumi.runtime.registerResourceModule("fortios", "index/systemNetworkVisibility", _module)
pulumi.runtime.registerResourceModule("fortios", "index/systemNpu", _module)
pulumi.runtime.registerResourceModule("fortios", "index/systemNtp", _module)
pulumi.runtime.registerResourceModule("fortios", "index/systemObjectTagging", _module)
pulumi.runtime.registerResourceModule("fortios", "index/systemPasswordPolicy", _module)
pulumi.runtime.registerResourceModule("fortios", "index/systemPasswordPolicyGuestAdmin", _module)
pulumi.runtime.registerResourceModule("fortios", "index/systemPhysicalSwitch", _module)
pulumi.runtime.registerResourceModule("fortios", "index/systemPppoeInterface", _module)
pulumi.runtime.registerResourceModule("fortios", "index/systemProbeResponse", _module)
pulumi.runtime.registerResourceModule("fortios", "index/systemProxyArp", _module)
pulumi.runtime.registerResourceModule("fortios", "index/systemPtp", _module)
pulumi.runtime.registerResourceModule("fortios", "index/systemReplacemsgAdmin", _module)
pulumi.runtime.registerResourceModule("fortios", "index/systemReplacemsgAlertmail", _module)
pulumi.runtime.registerResourceModule("fortios", "index/systemReplacemsgAuth", _module)
pulumi.runtime.registerResourceModule("fortios", "index/systemReplacemsgAutomation", _module)
pulumi.runtime.registerResourceModule("fortios", "index/systemReplacemsgDeviceDetectionPortal", _module)
pulumi.runtime.registerResourceModule("fortios", "index/systemReplacemsgEc", _module)
pulumi.runtime.registerResourceModule("fortios", "index/systemReplacemsgFortiguardWf", _module)
pulumi.runtime.registerResourceModule("fortios", "index/systemReplacemsgFtp", _module)
pulumi.runtime.registerResourceModule("fortios", "index/systemReplacemsgGroup", _module)
pulumi.runtime.registerResourceModule("fortios", "index/systemReplacemsgHttp", _module)
pulumi.runtime.registerResourceModule("fortios", "index/systemReplacemsgIcap", _module)
pulumi.runtime.registerResourceModule("fortios", "index/systemReplacemsgImage", _module)
pulumi.runtime.registerResourceModule("fortios", "index/systemReplacemsgMail", _module)
pulumi.runtime.registerResourceModule("fortios", "index/systemReplacemsgNacQuar", _module)
pulumi.runtime.registerResourceModule("fortios", "index/systemReplacemsgNntp", _module)
pulumi.runtime.registerResourceModule("fortios", "index/systemReplacemsgSpam", _module)
pulumi.runtime.registerResourceModule("fortios", "index/systemReplacemsgSslvpn", _module)
pulumi.runtime.registerResourceModule("fortios", "index/systemReplacemsgTrafficQuota", _module)
pulumi.runtime.registerResourceModule("fortios", "index/systemReplacemsgUtm", _module)
pulumi.runtime.registerResourceModule("fortios", "index/systemReplacemsgWebproxy", _module)
pulumi.runtime.registerResourceModule("fortios", "index/systemResourceLimits", _module)
pulumi.runtime.registerResourceModule("fortios", "index/systemSaml", _module)
pulumi.runtime.registerResourceModule("fortios", "index/systemSdnConnector", _module)
pulumi.runtime.registerResourceModule("fortios", "index/systemSdwan", _module)
pulumi.runtime.registerResourceModule("fortios", "index/systemSessionHelper", _module)
pulumi.runtime.registerResourceModule("fortios", "index/systemSessionTtl", _module)
pulumi.runtime.registerResourceModule("fortios", "index/systemSettingDNS", _module)
pulumi.runtime.registerResourceModule("fortios", "index/systemSettingGlobal", _module)
pulumi.runtime.registerResourceModule("fortios", "index/systemSettingNTP", _module)
pulumi.runtime.registerResourceModule("fortios", "index/systemSettings", _module)
pulumi.runtime.registerResourceModule("fortios", "index/systemSflow", _module)
pulumi.runtime.registerResourceModule("fortios", "index/systemSitTunnel", _module)
pulumi.runtime.registerResourceModule("fortios", "index/systemSmsServer", _module)
pulumi.runtime.registerResourceModule("fortios", "index/systemSnmpCommunity", _module)
pulumi.runtime.registerResourceModule("fortios", "index/systemSnmpMibView", _module)
pulumi.runtime.registerResourceModule("fortios", "index/systemSnmpSysinfo", _module)
pulumi.runtime.registerResourceModule("fortios", "index/systemSnmpUser", _module)
pulumi.runtime.registerResourceModule("fortios", "index/systemSpeedTestSchedule", _module)
pulumi.runtime.registerResourceModule("fortios", "index/systemSpeedTestServer", _module)
pulumi.runtime.registerResourceModule("fortios", "index/systemSsoAdmin", _module)
pulumi.runtime.registerResourceModule("fortios", "index/systemSsoForticloudAdmin", _module)
pulumi.runtime.registerResourceModule("fortios", "index/systemStandaloneCluster", _module)
pulumi.runtime.registerResourceModule("fortios", "index/systemStorage", _module)
pulumi.runtime.registerResourceModule("fortios", "index/systemStp", _module)
pulumi.runtime.registerResourceModule("fortios", "index/systemSwitchInterface", _module)
pulumi.runtime.registerResourceModule("fortios", "index/systemTosBasedPriority", _module)
pulumi.runtime.registerResourceModule("fortios", "index/systemVdom", _module)
pulumi.runtime.registerResourceModule("fortios", "index/systemVdomDns", _module)
pulumi.runtime.registerResourceModule("fortios", "index/systemVdomException", _module)
pulumi.runtime.registerResourceModule("fortios", "index/systemVdomLink", _module)
pulumi.runtime.registerResourceModule("fortios", "index/systemVdomNetflow", _module)
pulumi.runtime.registerResourceModule("fortios", "index/systemVdomProperty", _module)
pulumi.runtime.registerResourceModule("fortios", "index/systemVdomRadiusServer", _module)
pulumi.runtime.registerResourceModule("fortios", "index/systemVdomSetting", _module)
pulumi.runtime.registerResourceModule("fortios", "index/systemVdomSflow", _module)
pulumi.runtime.registerResourceModule("fortios", "index/systemVirtualSwitch", _module)
pulumi.runtime.registerResourceModule("fortios", "index/systemVirtualWanLink", _module)
pulumi.runtime.registerResourceModule("fortios", "index/systemVirtualWirePair", _module)
pulumi.runtime.registerResourceModule("fortios", "index/systemVneTunnel", _module)
pulumi.runtime.registerResourceModule("fortios", "index/systemVxlan", _module)
pulumi.runtime.registerResourceModule("fortios", "index/systemWccp", _module)
pulumi.runtime.registerResourceModule("fortios", "index/systemZone", _module)
pulumi.runtime.registerResourceModule("fortios", "index/userAdgrp", _module)
pulumi.runtime.registerResourceModule("fortios", "index/userCertificate", _module)
pulumi.runtime.registerResourceModule("fortios", "index/userDevice", _module)
pulumi.runtime.registerResourceModule("fortios", "index/userDeviceAccessList", _module)
pulumi.runtime.registerResourceModule("fortios", "index/userDeviceCategory", _module)
pulumi.runtime.registerResourceModule("fortios", "index/userDeviceGroup", _module)
pulumi.runtime.registerResourceModule("fortios", "index/userDomainController", _module)
pulumi.runtime.registerResourceModule("fortios", "index/userExchange", _module)
pulumi.runtime.registerResourceModule("fortios", "index/userFortitoken", _module)
pulumi.runtime.registerResourceModule("fortios", "index/userFsso", _module)
pulumi.runtime.registerResourceModule("fortios", "index/userFssoPolling", _module)
pulumi.runtime.registerResourceModule("fortios", "index/userGroup", _module)
pulumi.runtime.registerResourceModule("fortios", "index/userKrbKeytab", _module)
pulumi.runtime.registerResourceModule("fortios", "index/userLdap", _module)
pulumi.runtime.registerResourceModule("fortios", "index/userLocal", _module)
pulumi.runtime.registerResourceModule("fortios", "index/userNacPolicy", _module)
pulumi.runtime.registerResourceModule("fortios", "index/userPasswordPolicy", _module)
pulumi.runtime.registerResourceModule("fortios", "index/userPeer", _module)
pulumi.runtime.registerResourceModule("fortios", "index/userPeergrp", _module)
pulumi.runtime.registerResourceModule("fortios", "index/userPop3", _module)
pulumi.runtime.registerResourceModule("fortios", "index/userQuarantine", _module)
pulumi.runtime.registerResourceModule("fortios", "index/userRadius", _module)
pulumi.runtime.registerResourceModule("fortios", "index/userSaml", _module)
pulumi.runtime.registerResourceModule("fortios", "index/userSecurityExemptList", _module)
pulumi.runtime.registerResourceModule("fortios", "index/userSetting", _module)
pulumi.runtime.registerResourceModule("fortios", "index/userTacacs", _module)
pulumi.runtime.registerResourceModule("fortios", "index/vPNIPsecPhase1InterfaceLegacy", _module)
pulumi.runtime.registerResourceModule("fortios", "index/vPNIPsecPhase2InterfaceLegacy", _module)
pulumi.runtime.registerResourceModule("fortios", "index/videofilterProfile", _module)
pulumi.runtime.registerResourceModule("fortios", "index/videofilterYoutubeChannelFilter", _module)
pulumi.runtime.registerResourceModule("fortios", "index/videofilterYoutubeKey", _module)
pulumi.runtime.registerResourceModule("fortios", "index/voipProfile", _module)
pulumi.runtime.registerResourceModule("fortios", "index/vpnCertificateCa", _module)
pulumi.runtime.registerResourceModule("fortios", "index/vpnCertificateCrl", _module)
pulumi.runtime.registerResourceModule("fortios", "index/vpnCertificateLocal", _module)
pulumi.runtime.registerResourceModule("fortios", "index/vpnCertificateOcspServer", _module)
pulumi.runtime.registerResourceModule("fortios", "index/vpnCertificateRemote", _module)
pulumi.runtime.registerResourceModule("fortios", "index/vpnCertificateSetting", _module)
pulumi.runtime.registerResourceModule("fortios", "index/vpnIpsecConcentrator", _module)
pulumi.runtime.registerResourceModule("fortios", "index/vpnIpsecFec", _module)
pulumi.runtime.registerResourceModule("fortios", "index/vpnIpsecForticlient", _module)
pulumi.runtime.registerResourceModule("fortios", "index/vpnIpsecManualkey", _module)
pulumi.runtime.registerResourceModule("fortios", "index/vpnIpsecManualkeyInterface", _module)
pulumi.runtime.registerResourceModule("fortios", "index/vpnIpsecPhase1", _module)
pulumi.runtime.registerResourceModule("fortios", "index/vpnIpsecPhase1Interface", _module)
pulumi.runtime.registerResourceModule("fortios", "index/vpnIpsecPhase2", _module)
pulumi.runtime.registerResourceModule("fortios", "index/vpnIpsecPhase2Interface", _module)
pulumi.runtime.registerResourceModule("fortios", "index/vpnL2Tp", _module)
pulumi.runtime.registerResourceModule("fortios", "index/vpnOcvpn", _module)
pulumi.runtime.registerResourceModule("fortios", "index/vpnPptp", _module)
pulumi.runtime.registerResourceModule("fortios", "index/vpnSslClient", _module)
pulumi.runtime.registerResourceModule("fortios", "index/vpnSslSettings", _module)
pulumi.runtime.registerResourceModule("fortios", "index/vpnSslWebHostCheckSoftware", _module)
pulumi.runtime.registerResourceModule("fortios", "index/vpnSslWebPortal", _module)
pulumi.runtime.registerResourceModule("fortios", "index/vpnSslWebRealm", _module)
pulumi.runtime.registerResourceModule("fortios", "index/vpnSslWebUserBookmark", _module)
pulumi.runtime.registerResourceModule("fortios", "index/vpnSslWebUserGroupBookmark", _module)
pulumi.runtime.registerResourceModule("fortios", "index/wafMainClass", _module)
pulumi.runtime.registerResourceModule("fortios", "index/wafProfile", _module)
pulumi.runtime.registerResourceModule("fortios", "index/wafSignature", _module)
pulumi.runtime.registerResourceModule("fortios", "index/wafSubClass", _module)
pulumi.runtime.registerResourceModule("fortios", "index/wanoptAuthGroup", _module)
pulumi.runtime.registerResourceModule("fortios", "index/wanoptCacheService", _module)
pulumi.runtime.registerResourceModule("fortios", "index/wanoptContentDeliveryNetworkRule", _module)
pulumi.runtime.registerResourceModule("fortios", "index/wanoptPeer", _module)
pulumi.runtime.registerResourceModule("fortios", "index/wanoptProfile", _module)
pulumi.runtime.registerResourceModule("fortios", "index/wanoptRemoteStorage", _module)
pulumi.runtime.registerResourceModule("fortios", "index/wanoptSettings", _module)
pulumi.runtime.registerResourceModule("fortios", "index/wanoptWebcache", _module)
pulumi.runtime.registerResourceModule("fortios", "index/webProxyDebugUrl", _module)
pulumi.runtime.registerResourceModule("fortios", "index/webProxyExplicit", _module)
pulumi.runtime.registerResourceModule("fortios", "index/webProxyForwardServer", _module)
pulumi.runtime.registerResourceModule("fortios", "index/webProxyForwardServerGroup", _module)
pulumi.runtime.registerResourceModule("fortios", "index/webProxyGlobal", _module)
pulumi.runtime.registerResourceModule("fortios", "index/webProxyProfile", _module)
pulumi.runtime.registerResourceModule("fortios", "index/webProxyUrlMatch", _module)
pulumi.runtime.registerResourceModule("fortios", "index/webProxyWisp", _module)
pulumi.runtime.registerResourceModule("fortios", "index/webfilterContent", _module)
pulumi.runtime.registerResourceModule("fortios", "index/webfilterContentHeader", _module)
pulumi.runtime.registerResourceModule("fortios", "index/webfilterFortiguard", _module)
pulumi.runtime.registerResourceModule("fortios", "index/webfilterFtgdLocalCat", _module)
pulumi.runtime.registerResourceModule("fortios", "index/webfilterFtgdLocalRating", _module)
pulumi.runtime.registerResourceModule("fortios", "index/webfilterIpsUrlfilterCacheSetting", _module)
pulumi.runtime.registerResourceModule("fortios", "index/webfilterIpsUrlfilterSetting", _module)
pulumi.runtime.registerResourceModule("fortios", "index/webfilterIpsUrlfilterSetting6", _module)
pulumi.runtime.registerResourceModule("fortios", "index/webfilterOverride", _module)
pulumi.runtime.registerResourceModule("fortios", "index/webfilterProfile", _module)
pulumi.runtime.registerResourceModule("fortios", "index/webfilterSearchEngine", _module)
pulumi.runtime.registerResourceModule("fortios", "index/webfilterUrlfilter", _module)
pulumi.runtime.registerResourceModule("fortios", "index/wirelessControllerAccessControlList", _module)
pulumi.runtime.registerResourceModule("fortios", "index/wirelessControllerAddress", _module)
pulumi.runtime.registerResourceModule("fortios", "index/wirelessControllerAddrgrp", _module)
pulumi.runtime.registerResourceModule("fortios", "index/wirelessControllerApStatus", _module)
pulumi.runtime.registerResourceModule("fortios", "index/wirelessControllerApcfgProfile", _module)
pulumi.runtime.registerResourceModule("fortios", "index/wirelessControllerArrpProfile", _module)
pulumi.runtime.registerResourceModule("fortios", "index/wirelessControllerBleProfile", _module)
pulumi.runtime.registerResourceModule("fortios", "index/wirelessControllerBonjourProfile", _module)
pulumi.runtime.registerResourceModule("fortios", "index/wirelessControllerGlobal", _module)
pulumi.runtime.registerResourceModule("fortios", "index/wirelessControllerHotspot20Anqp3GppCellular", _module)
pulumi.runtime.registerResourceModule("fortios", "index/wirelessControllerHotspot20AnqpIpAddressType", _module)
pulumi.runtime.registerResourceModule("fortios", "index/wirelessControllerHotspot20AnqpNaiRealm", _module)
pulumi.runtime.registerResourceModule("fortios", "index/wirelessControllerHotspot20AnqpNetworkAuthType", _module)
pulumi.runtime.registerResourceModule("fortios", "index/wirelessControllerHotspot20AnqpRoamingConsortium", _module)
pulumi.runtime.registerResourceModule("fortios", "index/wirelessControllerHotspot20AnqpVenueName", _module)
pulumi.runtime.registerResourceModule("fortios", "index/wirelessControllerHotspot20AnqpVenueUrl", _module)
pulumi.runtime.registerResourceModule("fortios", "index/wirelessControllerHotspot20H2QpAdviceOfCharge", _module)
pulumi.runtime.registerResourceModule("fortios", "index/wirelessControllerHotspot20H2QpConnCapability", _module)
pulumi.runtime.registerResourceModule("fortios", "index/wirelessControllerHotspot20H2QpOperatorName", _module)
pulumi.runtime.registerResourceModule("fortios", "index/wirelessControllerHotspot20H2QpOsuProvider", _module)
pulumi.runtime.registerResourceModule("fortios", "index/wirelessControllerHotspot20H2QpOsuProviderNai", _module)
pulumi.runtime.registerResourceModule("fortios", "index/wirelessControllerHotspot20H2QpTermsAndConditions", _module)
pulumi.runtime.registerResourceModule("fortios", "index/wirelessControllerHotspot20H2QpWanMetric", _module)
pulumi.runtime.registerResourceModule("fortios", "index/wirelessControllerHotspot20HsProfile", _module)
pulumi.runtime.registerResourceModule("fortios", "index/wirelessControllerHotspot20Icon", _module)
pulumi.runtime.registerResourceModule("fortios", "index/wirelessControllerHotspot20QosMap", _module)
pulumi.runtime.registerResourceModule("fortios", "index/wirelessControllerInterController", _module)
pulumi.runtime.registerResourceModule("fortios", "index/wirelessControllerLog", _module)
pulumi.runtime.registerResourceModule("fortios", "index/wirelessControllerMpskProfile", _module)
pulumi.runtime.registerResourceModule("fortios", "index/wirelessControllerNacProfile", _module)
pulumi.runtime.registerResourceModule("fortios", "index/wirelessControllerQosProfile", _module)
pulumi.runtime.registerResourceModule("fortios", "index/wirelessControllerRegion", _module)
pulumi.runtime.registerResourceModule("fortios", "index/wirelessControllerSetting", _module)
pulumi.runtime.registerResourceModule("fortios", "index/wirelessControllerSnmp", _module)
pulumi.runtime.registerResourceModule("fortios", "index/wirelessControllerSsidPolicy", _module)
pulumi.runtime.registerResourceModule("fortios", "index/wirelessControllerSyslogProfile", _module)
pulumi.runtime.registerResourceModule("fortios", "index/wirelessControllerTimers", _module)
pulumi.runtime.registerResourceModule("fortios", "index/wirelessControllerUtmProfile", _module)
pulumi.runtime.registerResourceModule("fortios", "index/wirelessControllerVap", _module)
pulumi.runtime.registerResourceModule("fortios", "index/wirelessControllerVapGroup", _module)
pulumi.runtime.registerResourceModule("fortios", "index/wirelessControllerWagProfile", _module)
pulumi.runtime.registerResourceModule("fortios", "index/wirelessControllerWidsProfile", _module)
pulumi.runtime.registerResourceModule("fortios", "index/wirelessControllerWtp", _module)
pulumi.runtime.registerResourceModule("fortios", "index/wirelessControllerWtpGroup", _module)
pulumi.runtime.registerResourceModule("fortios", "index/wirelessControllerWtpProfile", _module)
pulumi.runtime.registerResourcePackage("fortios", {
    version: utilities.getVersion(),
    constructProvider: (name: string, type: string, urn: string): pulumi.ProviderResource => {
        if (type !== "pulumi:providers:fortios") {
            throw new Error(`unknown provider type ${type}`);
        }
        return new Provider(name, <any>undefined, { urn });
    },
});
