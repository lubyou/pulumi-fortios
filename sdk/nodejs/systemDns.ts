// *** WARNING: this file was generated by the Pulumi Terraform Bridge (tfgen) Tool. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

import * as pulumi from "@pulumi/pulumi";
import { input as inputs, output as outputs } from "./types";
import * as utilities from "./utilities";

/**
 * Configure DNS.
 *
 * ## Example Usage
 *
 * ```typescript
 * import * as pulumi from "@pulumi/pulumi";
 * import * as fortios from "@pulumi/fortios";
 *
 * const trname = new fortios.SystemDns("trname", {
 *     cacheNotfoundResponses: "disable",
 *     dnsCacheLimit: 5000,
 *     dnsCacheTtl: 1800,
 *     ip6Primary: "::",
 *     ip6Secondary: "::",
 *     primary: "208.91.112.53",
 *     retry: 2,
 *     secondary: "208.91.112.51",
 *     sourceIp: "0.0.0.0",
 *     timeout: 5,
 * });
 * ```
 *
 * ## Import
 *
 * System Dns can be imported using any of these accepted formats
 *
 * ```sh
 *  $ pulumi import fortios:index/systemDns:SystemDns labelname SystemDns
 * ```
 *
 *  If you do not want to import arguments of block$ export "FORTIOS_IMPORT_TABLE"="false"
 *
 * ```sh
 *  $ pulumi import fortios:index/systemDns:SystemDns labelname SystemDns
 * ```
 *
 *  $ unset "FORTIOS_IMPORT_TABLE"
 */
export class SystemDns extends pulumi.CustomResource {
    /**
     * Get an existing SystemDns resource's state with the given name, ID, and optional extra
     * properties used to qualify the lookup.
     *
     * @param name The _unique_ name of the resulting resource.
     * @param id The _unique_ provider ID of the resource to lookup.
     * @param state Any extra arguments used during the lookup.
     * @param opts Optional settings to control the behavior of the CustomResource.
     */
    public static get(name: string, id: pulumi.Input<pulumi.ID>, state?: SystemDnsState, opts?: pulumi.CustomResourceOptions): SystemDns {
        return new SystemDns(name, <any>state, { ...opts, id: id });
    }

    /** @internal */
    public static readonly __pulumiType = 'fortios:index/systemDns:SystemDns';

    /**
     * Returns true if the given object is an instance of SystemDns.  This is designed to work even
     * when multiple copies of the Pulumi SDK have been loaded into the same process.
     */
    public static isInstance(obj: any): obj is SystemDns {
        if (obj === undefined || obj === null) {
            return false;
        }
        return obj['__pulumiType'] === SystemDns.__pulumiType;
    }

    /**
     * Alternate primary DNS server. (This is not used as a failover DNS server.)
     */
    public readonly altPrimary!: pulumi.Output<string>;
    /**
     * Alternate secondary DNS server. (This is not used as a failover DNS server.)
     */
    public readonly altSecondary!: pulumi.Output<string>;
    /**
     * Enable/disable response from the DNS server when a record is not in cache. Valid values: `disable`, `enable`.
     */
    public readonly cacheNotfoundResponses!: pulumi.Output<string>;
    /**
     * Maximum number of records in the DNS cache.
     */
    public readonly dnsCacheLimit!: pulumi.Output<number>;
    /**
     * Duration in seconds that the DNS cache retains information.
     */
    public readonly dnsCacheTtl!: pulumi.Output<number>;
    /**
     * Enable/disable/enforce DNS over TLS. Valid values: `disable`, `enable`, `enforce`.
     */
    public readonly dnsOverTls!: pulumi.Output<string>;
    /**
     * DNS search domain list separated by space (maximum 8 domains)
     */
    public readonly domains!: pulumi.Output<outputs.SystemDnsDomain[] | undefined>;
    /**
     * true or false, set this parameter to true when using dynamic forEach + toset to configure and sort sub-tables, please do not set this parameter when configuring static sub-tables.
     */
    public readonly dynamicSortSubtable!: pulumi.Output<string | undefined>;
    /**
     * Specify outgoing interface to reach server.
     */
    public readonly interface!: pulumi.Output<string>;
    /**
     * Specify how to select outgoing interface to reach server. Valid values: `auto`, `sdwan`, `specify`.
     */
    public readonly interfaceSelectMethod!: pulumi.Output<string>;
    /**
     * Primary DNS server IPv6 address.
     */
    public readonly ip6Primary!: pulumi.Output<string>;
    /**
     * Secondary DNS server IPv6 address.
     */
    public readonly ip6Secondary!: pulumi.Output<string>;
    /**
     * Local DNS log setting. Valid values: `disable`, `error`, `all`.
     */
    public readonly log!: pulumi.Output<string>;
    /**
     * Primary DNS server IP address.
     */
    public readonly primary!: pulumi.Output<string>;
    /**
     * DNS protocols. Valid values: `cleartext`, `dot`, `doh`.
     */
    public readonly protocol!: pulumi.Output<string>;
    /**
     * Number of times to retry (0 - 5).
     */
    public readonly retry!: pulumi.Output<number>;
    /**
     * Secondary DNS server IP address.
     */
    public readonly secondary!: pulumi.Output<string>;
    /**
     * DNS server host name list. The structure of `serverHostname` block is documented below.
     */
    public readonly serverHostnames!: pulumi.Output<outputs.SystemDnsServerHostname[] | undefined>;
    /**
     * Specify how configured servers are prioritized. Valid values: `least-rtt`, `failover`.
     */
    public readonly serverSelectMethod!: pulumi.Output<string>;
    /**
     * IP address used by the DNS server as its source IP.
     */
    public readonly sourceIp!: pulumi.Output<string>;
    /**
     * Name of local certificate for SSL connections.
     */
    public readonly sslCertificate!: pulumi.Output<string>;
    /**
     * DNS query timeout interval in seconds (1 - 10).
     */
    public readonly timeout!: pulumi.Output<number>;
    /**
     * Specifies the vdom to which the resource will be applied when the FortiGate unit is running in VDOM mode. Only one vdom can be specified. If you want to inherit the vdom configuration of the provider, please do not set this parameter.
     */
    public readonly vdomparam!: pulumi.Output<string | undefined>;

    /**
     * Create a SystemDns resource with the given unique name, arguments, and options.
     *
     * @param name The _unique_ name of the resource.
     * @param args The arguments to use to populate this resource's properties.
     * @param opts A bag of options that control this resource's behavior.
     */
    constructor(name: string, args: SystemDnsArgs, opts?: pulumi.CustomResourceOptions)
    constructor(name: string, argsOrState?: SystemDnsArgs | SystemDnsState, opts?: pulumi.CustomResourceOptions) {
        let resourceInputs: pulumi.Inputs = {};
        opts = opts || {};
        if (opts.id) {
            const state = argsOrState as SystemDnsState | undefined;
            resourceInputs["altPrimary"] = state ? state.altPrimary : undefined;
            resourceInputs["altSecondary"] = state ? state.altSecondary : undefined;
            resourceInputs["cacheNotfoundResponses"] = state ? state.cacheNotfoundResponses : undefined;
            resourceInputs["dnsCacheLimit"] = state ? state.dnsCacheLimit : undefined;
            resourceInputs["dnsCacheTtl"] = state ? state.dnsCacheTtl : undefined;
            resourceInputs["dnsOverTls"] = state ? state.dnsOverTls : undefined;
            resourceInputs["domains"] = state ? state.domains : undefined;
            resourceInputs["dynamicSortSubtable"] = state ? state.dynamicSortSubtable : undefined;
            resourceInputs["interface"] = state ? state.interface : undefined;
            resourceInputs["interfaceSelectMethod"] = state ? state.interfaceSelectMethod : undefined;
            resourceInputs["ip6Primary"] = state ? state.ip6Primary : undefined;
            resourceInputs["ip6Secondary"] = state ? state.ip6Secondary : undefined;
            resourceInputs["log"] = state ? state.log : undefined;
            resourceInputs["primary"] = state ? state.primary : undefined;
            resourceInputs["protocol"] = state ? state.protocol : undefined;
            resourceInputs["retry"] = state ? state.retry : undefined;
            resourceInputs["secondary"] = state ? state.secondary : undefined;
            resourceInputs["serverHostnames"] = state ? state.serverHostnames : undefined;
            resourceInputs["serverSelectMethod"] = state ? state.serverSelectMethod : undefined;
            resourceInputs["sourceIp"] = state ? state.sourceIp : undefined;
            resourceInputs["sslCertificate"] = state ? state.sslCertificate : undefined;
            resourceInputs["timeout"] = state ? state.timeout : undefined;
            resourceInputs["vdomparam"] = state ? state.vdomparam : undefined;
        } else {
            const args = argsOrState as SystemDnsArgs | undefined;
            if ((!args || args.primary === undefined) && !opts.urn) {
                throw new Error("Missing required property 'primary'");
            }
            resourceInputs["altPrimary"] = args ? args.altPrimary : undefined;
            resourceInputs["altSecondary"] = args ? args.altSecondary : undefined;
            resourceInputs["cacheNotfoundResponses"] = args ? args.cacheNotfoundResponses : undefined;
            resourceInputs["dnsCacheLimit"] = args ? args.dnsCacheLimit : undefined;
            resourceInputs["dnsCacheTtl"] = args ? args.dnsCacheTtl : undefined;
            resourceInputs["dnsOverTls"] = args ? args.dnsOverTls : undefined;
            resourceInputs["domains"] = args ? args.domains : undefined;
            resourceInputs["dynamicSortSubtable"] = args ? args.dynamicSortSubtable : undefined;
            resourceInputs["interface"] = args ? args.interface : undefined;
            resourceInputs["interfaceSelectMethod"] = args ? args.interfaceSelectMethod : undefined;
            resourceInputs["ip6Primary"] = args ? args.ip6Primary : undefined;
            resourceInputs["ip6Secondary"] = args ? args.ip6Secondary : undefined;
            resourceInputs["log"] = args ? args.log : undefined;
            resourceInputs["primary"] = args ? args.primary : undefined;
            resourceInputs["protocol"] = args ? args.protocol : undefined;
            resourceInputs["retry"] = args ? args.retry : undefined;
            resourceInputs["secondary"] = args ? args.secondary : undefined;
            resourceInputs["serverHostnames"] = args ? args.serverHostnames : undefined;
            resourceInputs["serverSelectMethod"] = args ? args.serverSelectMethod : undefined;
            resourceInputs["sourceIp"] = args ? args.sourceIp : undefined;
            resourceInputs["sslCertificate"] = args ? args.sslCertificate : undefined;
            resourceInputs["timeout"] = args ? args.timeout : undefined;
            resourceInputs["vdomparam"] = args ? args.vdomparam : undefined;
        }
        opts = pulumi.mergeOptions(utilities.resourceOptsDefaults(), opts);
        super(SystemDns.__pulumiType, name, resourceInputs, opts);
    }
}

/**
 * Input properties used for looking up and filtering SystemDns resources.
 */
export interface SystemDnsState {
    /**
     * Alternate primary DNS server. (This is not used as a failover DNS server.)
     */
    altPrimary?: pulumi.Input<string>;
    /**
     * Alternate secondary DNS server. (This is not used as a failover DNS server.)
     */
    altSecondary?: pulumi.Input<string>;
    /**
     * Enable/disable response from the DNS server when a record is not in cache. Valid values: `disable`, `enable`.
     */
    cacheNotfoundResponses?: pulumi.Input<string>;
    /**
     * Maximum number of records in the DNS cache.
     */
    dnsCacheLimit?: pulumi.Input<number>;
    /**
     * Duration in seconds that the DNS cache retains information.
     */
    dnsCacheTtl?: pulumi.Input<number>;
    /**
     * Enable/disable/enforce DNS over TLS. Valid values: `disable`, `enable`, `enforce`.
     */
    dnsOverTls?: pulumi.Input<string>;
    /**
     * DNS search domain list separated by space (maximum 8 domains)
     */
    domains?: pulumi.Input<pulumi.Input<inputs.SystemDnsDomain>[]>;
    /**
     * true or false, set this parameter to true when using dynamic forEach + toset to configure and sort sub-tables, please do not set this parameter when configuring static sub-tables.
     */
    dynamicSortSubtable?: pulumi.Input<string>;
    /**
     * Specify outgoing interface to reach server.
     */
    interface?: pulumi.Input<string>;
    /**
     * Specify how to select outgoing interface to reach server. Valid values: `auto`, `sdwan`, `specify`.
     */
    interfaceSelectMethod?: pulumi.Input<string>;
    /**
     * Primary DNS server IPv6 address.
     */
    ip6Primary?: pulumi.Input<string>;
    /**
     * Secondary DNS server IPv6 address.
     */
    ip6Secondary?: pulumi.Input<string>;
    /**
     * Local DNS log setting. Valid values: `disable`, `error`, `all`.
     */
    log?: pulumi.Input<string>;
    /**
     * Primary DNS server IP address.
     */
    primary?: pulumi.Input<string>;
    /**
     * DNS protocols. Valid values: `cleartext`, `dot`, `doh`.
     */
    protocol?: pulumi.Input<string>;
    /**
     * Number of times to retry (0 - 5).
     */
    retry?: pulumi.Input<number>;
    /**
     * Secondary DNS server IP address.
     */
    secondary?: pulumi.Input<string>;
    /**
     * DNS server host name list. The structure of `serverHostname` block is documented below.
     */
    serverHostnames?: pulumi.Input<pulumi.Input<inputs.SystemDnsServerHostname>[]>;
    /**
     * Specify how configured servers are prioritized. Valid values: `least-rtt`, `failover`.
     */
    serverSelectMethod?: pulumi.Input<string>;
    /**
     * IP address used by the DNS server as its source IP.
     */
    sourceIp?: pulumi.Input<string>;
    /**
     * Name of local certificate for SSL connections.
     */
    sslCertificate?: pulumi.Input<string>;
    /**
     * DNS query timeout interval in seconds (1 - 10).
     */
    timeout?: pulumi.Input<number>;
    /**
     * Specifies the vdom to which the resource will be applied when the FortiGate unit is running in VDOM mode. Only one vdom can be specified. If you want to inherit the vdom configuration of the provider, please do not set this parameter.
     */
    vdomparam?: pulumi.Input<string>;
}

/**
 * The set of arguments for constructing a SystemDns resource.
 */
export interface SystemDnsArgs {
    /**
     * Alternate primary DNS server. (This is not used as a failover DNS server.)
     */
    altPrimary?: pulumi.Input<string>;
    /**
     * Alternate secondary DNS server. (This is not used as a failover DNS server.)
     */
    altSecondary?: pulumi.Input<string>;
    /**
     * Enable/disable response from the DNS server when a record is not in cache. Valid values: `disable`, `enable`.
     */
    cacheNotfoundResponses?: pulumi.Input<string>;
    /**
     * Maximum number of records in the DNS cache.
     */
    dnsCacheLimit?: pulumi.Input<number>;
    /**
     * Duration in seconds that the DNS cache retains information.
     */
    dnsCacheTtl?: pulumi.Input<number>;
    /**
     * Enable/disable/enforce DNS over TLS. Valid values: `disable`, `enable`, `enforce`.
     */
    dnsOverTls?: pulumi.Input<string>;
    /**
     * DNS search domain list separated by space (maximum 8 domains)
     */
    domains?: pulumi.Input<pulumi.Input<inputs.SystemDnsDomain>[]>;
    /**
     * true or false, set this parameter to true when using dynamic forEach + toset to configure and sort sub-tables, please do not set this parameter when configuring static sub-tables.
     */
    dynamicSortSubtable?: pulumi.Input<string>;
    /**
     * Specify outgoing interface to reach server.
     */
    interface?: pulumi.Input<string>;
    /**
     * Specify how to select outgoing interface to reach server. Valid values: `auto`, `sdwan`, `specify`.
     */
    interfaceSelectMethod?: pulumi.Input<string>;
    /**
     * Primary DNS server IPv6 address.
     */
    ip6Primary?: pulumi.Input<string>;
    /**
     * Secondary DNS server IPv6 address.
     */
    ip6Secondary?: pulumi.Input<string>;
    /**
     * Local DNS log setting. Valid values: `disable`, `error`, `all`.
     */
    log?: pulumi.Input<string>;
    /**
     * Primary DNS server IP address.
     */
    primary: pulumi.Input<string>;
    /**
     * DNS protocols. Valid values: `cleartext`, `dot`, `doh`.
     */
    protocol?: pulumi.Input<string>;
    /**
     * Number of times to retry (0 - 5).
     */
    retry?: pulumi.Input<number>;
    /**
     * Secondary DNS server IP address.
     */
    secondary?: pulumi.Input<string>;
    /**
     * DNS server host name list. The structure of `serverHostname` block is documented below.
     */
    serverHostnames?: pulumi.Input<pulumi.Input<inputs.SystemDnsServerHostname>[]>;
    /**
     * Specify how configured servers are prioritized. Valid values: `least-rtt`, `failover`.
     */
    serverSelectMethod?: pulumi.Input<string>;
    /**
     * IP address used by the DNS server as its source IP.
     */
    sourceIp?: pulumi.Input<string>;
    /**
     * Name of local certificate for SSL connections.
     */
    sslCertificate?: pulumi.Input<string>;
    /**
     * DNS query timeout interval in seconds (1 - 10).
     */
    timeout?: pulumi.Input<number>;
    /**
     * Specifies the vdom to which the resource will be applied when the FortiGate unit is running in VDOM mode. Only one vdom can be specified. If you want to inherit the vdom configuration of the provider, please do not set this parameter.
     */
    vdomparam?: pulumi.Input<string>;
}
