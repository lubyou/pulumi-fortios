// *** WARNING: this file was generated by the Pulumi Terraform Bridge (tfgen) Tool. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

import * as pulumi from "@pulumi/pulumi";
import * as utilities from "./utilities";

/**
 * Configure integrated NAC settings for FortiSwitch. Applies to FortiOS Version `>= 6.4.0`.
 *
 * ## Import
 *
 * SwitchController NacSettings can be imported using any of these accepted formats$ export "FORTIOS_IMPORT_TABLE"="true"
 *
 * ```sh
 *  $ pulumi import fortios:index/switchControllerNacSettings:SwitchControllerNacSettings labelname {{name}}
 * ```
 *
 *  $ unset "FORTIOS_IMPORT_TABLE"
 */
export class SwitchControllerNacSettings extends pulumi.CustomResource {
    /**
     * Get an existing SwitchControllerNacSettings resource's state with the given name, ID, and optional extra
     * properties used to qualify the lookup.
     *
     * @param name The _unique_ name of the resulting resource.
     * @param id The _unique_ provider ID of the resource to lookup.
     * @param state Any extra arguments used during the lookup.
     * @param opts Optional settings to control the behavior of the CustomResource.
     */
    public static get(name: string, id: pulumi.Input<pulumi.ID>, state?: SwitchControllerNacSettingsState, opts?: pulumi.CustomResourceOptions): SwitchControllerNacSettings {
        return new SwitchControllerNacSettings(name, <any>state, { ...opts, id: id });
    }

    /** @internal */
    public static readonly __pulumiType = 'fortios:index/switchControllerNacSettings:SwitchControllerNacSettings';

    /**
     * Returns true if the given object is an instance of SwitchControllerNacSettings.  This is designed to work even
     * when multiple copies of the Pulumi SDK have been loaded into the same process.
     */
    public static isInstance(obj: any): obj is SwitchControllerNacSettings {
        if (obj === undefined || obj === null) {
            return false;
        }
        return obj['__pulumiType'] === SwitchControllerNacSettings.__pulumiType;
    }

    /**
     * Enable/disable NAC device auto authorization when discovered and nac-policy matched. Valid values: `disable`, `enable`.
     */
    public readonly autoAuth!: pulumi.Output<string>;
    /**
     * Enable/disable bouncing (administratively bring the link down, up) of a switch port when NAC mode is configured on the port. Helps to re-initiate the DHCP process for a device. Valid values: `disable`, `enable`.
     */
    public readonly bounceNacPort!: pulumi.Output<string>;
    /**
     * Time interval after which inactive NAC devices will be expired (in minutes, 0 means no expiry).
     */
    public readonly inactiveTimer!: pulumi.Output<number>;
    /**
     * Clear NAC devices on switch ports on link down event. Valid values: `disable`, `enable`.
     */
    public readonly linkDownFlush!: pulumi.Output<string>;
    /**
     * Set NAC mode to be used on the FortiSwitch ports. Valid values: `local`, `global`.
     */
    public readonly mode!: pulumi.Output<string>;
    /**
     * NAC settings name.
     */
    public readonly name!: pulumi.Output<string>;
    /**
     * Default NAC Onboarding VLAN when NAC devices are discovered.
     */
    public readonly onboardingVlan!: pulumi.Output<string>;
    /**
     * Specifies the vdom to which the resource will be applied when the FortiGate unit is running in VDOM mode. Only one vdom can be specified. If you want to inherit the vdom configuration of the provider, please do not set this parameter.
     */
    public readonly vdomparam!: pulumi.Output<string | undefined>;

    /**
     * Create a SwitchControllerNacSettings resource with the given unique name, arguments, and options.
     *
     * @param name The _unique_ name of the resource.
     * @param args The arguments to use to populate this resource's properties.
     * @param opts A bag of options that control this resource's behavior.
     */
    constructor(name: string, args?: SwitchControllerNacSettingsArgs, opts?: pulumi.CustomResourceOptions)
    constructor(name: string, argsOrState?: SwitchControllerNacSettingsArgs | SwitchControllerNacSettingsState, opts?: pulumi.CustomResourceOptions) {
        let inputs: pulumi.Inputs = {};
        opts = opts || {};
        if (opts.id) {
            const state = argsOrState as SwitchControllerNacSettingsState | undefined;
            inputs["autoAuth"] = state ? state.autoAuth : undefined;
            inputs["bounceNacPort"] = state ? state.bounceNacPort : undefined;
            inputs["inactiveTimer"] = state ? state.inactiveTimer : undefined;
            inputs["linkDownFlush"] = state ? state.linkDownFlush : undefined;
            inputs["mode"] = state ? state.mode : undefined;
            inputs["name"] = state ? state.name : undefined;
            inputs["onboardingVlan"] = state ? state.onboardingVlan : undefined;
            inputs["vdomparam"] = state ? state.vdomparam : undefined;
        } else {
            const args = argsOrState as SwitchControllerNacSettingsArgs | undefined;
            inputs["autoAuth"] = args ? args.autoAuth : undefined;
            inputs["bounceNacPort"] = args ? args.bounceNacPort : undefined;
            inputs["inactiveTimer"] = args ? args.inactiveTimer : undefined;
            inputs["linkDownFlush"] = args ? args.linkDownFlush : undefined;
            inputs["mode"] = args ? args.mode : undefined;
            inputs["name"] = args ? args.name : undefined;
            inputs["onboardingVlan"] = args ? args.onboardingVlan : undefined;
            inputs["vdomparam"] = args ? args.vdomparam : undefined;
        }
        if (!opts.version) {
            opts = pulumi.mergeOptions(opts, { version: utilities.getVersion()});
        }
        super(SwitchControllerNacSettings.__pulumiType, name, inputs, opts);
    }
}

/**
 * Input properties used for looking up and filtering SwitchControllerNacSettings resources.
 */
export interface SwitchControllerNacSettingsState {
    /**
     * Enable/disable NAC device auto authorization when discovered and nac-policy matched. Valid values: `disable`, `enable`.
     */
    autoAuth?: pulumi.Input<string>;
    /**
     * Enable/disable bouncing (administratively bring the link down, up) of a switch port when NAC mode is configured on the port. Helps to re-initiate the DHCP process for a device. Valid values: `disable`, `enable`.
     */
    bounceNacPort?: pulumi.Input<string>;
    /**
     * Time interval after which inactive NAC devices will be expired (in minutes, 0 means no expiry).
     */
    inactiveTimer?: pulumi.Input<number>;
    /**
     * Clear NAC devices on switch ports on link down event. Valid values: `disable`, `enable`.
     */
    linkDownFlush?: pulumi.Input<string>;
    /**
     * Set NAC mode to be used on the FortiSwitch ports. Valid values: `local`, `global`.
     */
    mode?: pulumi.Input<string>;
    /**
     * NAC settings name.
     */
    name?: pulumi.Input<string>;
    /**
     * Default NAC Onboarding VLAN when NAC devices are discovered.
     */
    onboardingVlan?: pulumi.Input<string>;
    /**
     * Specifies the vdom to which the resource will be applied when the FortiGate unit is running in VDOM mode. Only one vdom can be specified. If you want to inherit the vdom configuration of the provider, please do not set this parameter.
     */
    vdomparam?: pulumi.Input<string>;
}

/**
 * The set of arguments for constructing a SwitchControllerNacSettings resource.
 */
export interface SwitchControllerNacSettingsArgs {
    /**
     * Enable/disable NAC device auto authorization when discovered and nac-policy matched. Valid values: `disable`, `enable`.
     */
    autoAuth?: pulumi.Input<string>;
    /**
     * Enable/disable bouncing (administratively bring the link down, up) of a switch port when NAC mode is configured on the port. Helps to re-initiate the DHCP process for a device. Valid values: `disable`, `enable`.
     */
    bounceNacPort?: pulumi.Input<string>;
    /**
     * Time interval after which inactive NAC devices will be expired (in minutes, 0 means no expiry).
     */
    inactiveTimer?: pulumi.Input<number>;
    /**
     * Clear NAC devices on switch ports on link down event. Valid values: `disable`, `enable`.
     */
    linkDownFlush?: pulumi.Input<string>;
    /**
     * Set NAC mode to be used on the FortiSwitch ports. Valid values: `local`, `global`.
     */
    mode?: pulumi.Input<string>;
    /**
     * NAC settings name.
     */
    name?: pulumi.Input<string>;
    /**
     * Default NAC Onboarding VLAN when NAC devices are discovered.
     */
    onboardingVlan?: pulumi.Input<string>;
    /**
     * Specifies the vdom to which the resource will be applied when the FortiGate unit is running in VDOM mode. Only one vdom can be specified. If you want to inherit the vdom configuration of the provider, please do not set this parameter.
     */
    vdomparam?: pulumi.Input<string>;
}
